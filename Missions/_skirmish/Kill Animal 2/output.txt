// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: LD_INT 19
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// InitHc_All ( ) ;
 460: CALL_OW 584
// for i := 1 to numbers - 2 do
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: DOUBLE
 470: LD_INT 1
 472: DEC
 473: ST_TO_ADDR
 474: LD_VAR 0 3
 478: PUSH
 479: LD_INT 2
 481: MINUS
 482: PUSH
 483: FOR_TO
 484: IFFALSE 625
// begin if numbers [ i ] = 0 then
 486: LD_VAR 0 3
 490: PUSH
 491: LD_VAR 0 5
 495: ARRAY
 496: PUSH
 497: LD_INT 0
 499: EQUAL
 500: IFFALSE 504
// continue ;
 502: GO 483
// hc_class := classes [ i ] ;
 504: LD_ADDR_OWVAR 28
 508: PUSH
 509: LD_VAR 0 7
 513: PUSH
 514: LD_VAR 0 5
 518: ARRAY
 519: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 520: LD_ADDR_OWVAR 29
 524: PUSH
 525: LD_INT 8
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: CALL_OW 12
 535: PUSH
 536: LD_INT 8
 538: PPUSH
 539: LD_INT 12
 541: PPUSH
 542: CALL_OW 12
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 551: LD_ADDR_OWVAR 35
 555: PUSH
 556: LD_INT 5
 558: NEG
 559: PPUSH
 560: LD_INT 5
 562: PPUSH
 563: CALL_OW 12
 567: PUSH
 568: LD_OWVAR 67
 572: PUSH
 573: LD_INT 5
 575: MUL
 576: PLUS
 577: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 578: LD_ADDR_VAR 0 6
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_VAR 0 3
 592: PUSH
 593: LD_VAR 0 5
 597: ARRAY
 598: PUSH
 599: FOR_TO
 600: IFFALSE 621
// PlaceUnitArea ( CreateHuman , area , false ) ;
 602: CALL_OW 44
 606: PPUSH
 607: LD_VAR 0 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 599
 621: POP
 622: POP
// end ;
 623: GO 483
 625: POP
 626: POP
// if not waterArea then
 627: LD_VAR 0 2
 631: NOT
 632: IFFALSE 636
// exit ;
 634: GO 796
// hc_class := waterClass [ 1 ] ;
 636: LD_ADDR_OWVAR 28
 640: PUSH
 641: LD_VAR 0 8
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 650: LD_ADDR_OWVAR 29
 654: PUSH
 655: LD_INT 10
 657: PUSH
 658: LD_INT 10
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_agressivity := 0 ;
 665: LD_ADDR_OWVAR 35
 669: PUSH
 670: LD_INT 0
 672: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 673: LD_ADDR_VAR 0 6
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 7
 690: ARRAY
 691: PUSH
 692: FOR_TO
 693: IFFALSE 714
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
 712: GO 692
 714: POP
 715: POP
// hc_class := waterClass [ 2 ] ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_VAR 0 8
 725: PUSH
 726: LD_INT 2
 728: ARRAY
 729: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 730: LD_ADDR_OWVAR 29
 734: PUSH
 735: LD_INT 10
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: ST_TO_ADDR
// hc_agressivity := 0 ;
 745: LD_ADDR_OWVAR 35
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_INT 1
 761: DEC
 762: ST_TO_ADDR
 763: LD_VAR 0 3
 767: PUSH
 768: LD_INT 8
 770: ARRAY
 771: PUSH
 772: FOR_TO
 773: IFFALSE 794
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 775: CALL_OW 44
 779: PPUSH
 780: LD_VAR 0 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
 792: GO 772
 794: POP
 795: POP
// end ; end_of_file
 796: LD_VAR 0 4
 800: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 801: LD_INT 22
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 25
 813: PUSH
 814: LD_INT 15
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: IFFALSE 935
 831: GO 833
 833: DISABLE
 834: LD_INT 0
 836: PPUSH
// begin enable ;
 837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 838: LD_ADDR_VAR 0 1
 842: PUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 25
 855: PUSH
 856: LD_INT 15
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: PUSH
 872: FOR_IN
 873: IFFALSE 933
// if GetLives ( i ) < 1000 then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 256
 884: PUSH
 885: LD_INT 1000
 887: LESS
 888: IFFALSE 931
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_VAR 0 1
 921: PPUSH
 922: CALL_OW 74
 926: PPUSH
 927: CALL_OW 115
 931: GO 872
 933: POP
 934: POP
// end ;
 935: PPOPN 1
 937: END
// every 3 do var i , enemy , x , y , d ;
 938: GO 940
 940: DISABLE
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
// begin enable ;
 948: ENABLE
// for i := 2 to huntersAmount do
 949: LD_ADDR_VAR 0 1
 953: PUSH
 954: DOUBLE
 955: LD_INT 2
 957: DEC
 958: ST_TO_ADDR
 959: LD_EXP 3
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1304
// begin if not HasTask ( hunters [ i ] ) then
 967: LD_EXP 6
 971: PUSH
 972: LD_VAR 0 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 314
 982: NOT
 983: IFFALSE 1302
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PPUSH
1005: LD_EXP 6
1009: PUSH
1010: LD_VAR 0 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 74
1020: ST_TO_ADDR
// if not enemy then
1021: LD_VAR 0 2
1025: NOT
1026: IFFALSE 1030
// continue ;
1028: GO 964
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1030: LD_EXP 6
1034: PUSH
1035: LD_VAR 0 1
1039: ARRAY
1040: PPUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: CALL_OW 296
1050: PUSH
1051: LD_INT 17
1053: LESS
1054: IFFALSE 1157
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1056: LD_EXP 6
1060: PUSH
1061: LD_VAR 0 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 257
1071: PUSH
1072: LD_INT 11
1074: EQUAL
1075: IFFALSE 1135
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 257
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: LD_INT 20
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: IN
1101: IFFALSE 1120
// ComCarabine ( hunters [ i ] ) else
1103: LD_EXP 6
1107: PUSH
1108: LD_VAR 0 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 162
1118: GO 1135
// ComSabre ( hunters [ i ] ) ;
1120: LD_EXP 6
1124: PUSH
1125: LD_VAR 0 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1135: LD_EXP 6
1139: PUSH
1140: LD_VAR 0 1
1144: ARRAY
1145: PPUSH
1146: LD_VAR 0 2
1150: PPUSH
1151: CALL_OW 115
// end else
1155: GO 1302
// begin d := rand ( 0 , 5 ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: CALL_OW 12
1172: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1173: LD_ADDR_VAR 0 3
1177: PUSH
1178: LD_EXP 6
1182: PUSH
1183: LD_VAR 0 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 250
1193: PPUSH
1194: LD_VAR 0 5
1198: PPUSH
1199: LD_INT 8
1201: PPUSH
1202: CALL_OW 272
1206: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_VAR 0 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 251
1227: PPUSH
1228: LD_VAR 0 5
1232: PPUSH
1233: LD_INT 8
1235: PPUSH
1236: CALL_OW 273
1240: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 488
1255: PUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: LD_VAR 0 4
1265: PPUSH
1266: CALL_OW 428
1270: PUSH
1271: LD_INT 0
1273: EQUAL
1274: AND
1275: IFFALSE 1302
// ComMoveXY ( hunters [ i ] , x , y ) ;
1277: LD_EXP 6
1281: PUSH
1282: LD_VAR 0 1
1286: ARRAY
1287: PPUSH
1288: LD_VAR 0 3
1292: PPUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: CALL_OW 111
// end ; end ; end ;
1302: GO 964
1304: POP
1305: POP
// end ; end_of_file
1306: PPOPN 5
1308: END
// on UnitGoesToRed ( un ) do var i ;
1309: LD_INT 0
1311: PPUSH
// begin if GetSide ( un ) = 1 then
1312: LD_VAR 0 1
1316: PPUSH
1317: CALL_OW 255
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1334
// YouLost ( hunt2 ) ;
1327: LD_STRING hunt2
1329: PPUSH
1330: CALL_OW 104
// if GetSide ( un ) > 1 then
1334: LD_VAR 0 1
1338: PPUSH
1339: CALL_OW 255
1343: PUSH
1344: LD_INT 1
1346: GREATER
1347: IFFALSE 1400
// begin for i := 1 to 6 do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 6
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1386
// begin wait ( 0 0$1 ) ;
1365: LD_INT 35
1367: PPUSH
1368: CALL_OW 67
// SetLives ( un , 249 ) ;
1372: LD_VAR 0 1
1376: PPUSH
1377: LD_INT 249
1379: PPUSH
1380: CALL_OW 234
// end ;
1384: GO 1362
1386: POP
1387: POP
// SetLives ( un , 1000 ) ;
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_INT 1000
1395: PPUSH
1396: CALL_OW 234
// end ; end ;
1400: PPOPN 2
1402: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1403: LD_VAR 0 1
1407: PUSH
1408: LD_INT 1
1410: EQUAL
1411: PUSH
1412: LD_VAR 0 2
1416: PUSH
1417: LD_INT 1
1419: GREATER
1420: AND
1421: IFFALSE 1430
// YouLost ( hunt1 ) ;
1423: LD_STRING hunt1
1425: PPUSH
1426: CALL_OW 104
// end ;
1430: PPOPN 2
1432: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1433: LD_INT 0
1435: PPUSH
// begin point := 0 ;
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 257
1453: PUSH
1454: LD_INT 20
1456: DOUBLE
1457: EQUAL
1458: IFTRUE 1462
1460: GO 1473
1462: POP
// point := 10 ; class_horse :
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_INT 10
1470: ST_TO_ADDR
1471: GO 1607
1473: LD_INT 21
1475: DOUBLE
1476: EQUAL
1477: IFTRUE 1481
1479: GO 1492
1481: POP
// point := 10 ; class_baggie :
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_INT 10
1489: ST_TO_ADDR
1490: GO 1607
1492: LD_INT 13
1494: DOUBLE
1495: EQUAL
1496: IFTRUE 1500
1498: GO 1511
1500: POP
// point := 5 ; class_phororhacos :
1501: LD_ADDR_VAR 0 4
1505: PUSH
1506: LD_INT 5
1508: ST_TO_ADDR
1509: GO 1607
1511: LD_INT 18
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1530
1519: POP
// point := 10 ; class_tiger :
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 10
1527: ST_TO_ADDR
1528: GO 1607
1530: LD_INT 14
1532: DOUBLE
1533: EQUAL
1534: IFTRUE 1538
1536: GO 1549
1538: POP
// point := 20 ; class_apeman :
1539: LD_ADDR_VAR 0 4
1543: PUSH
1544: LD_INT 20
1546: ST_TO_ADDR
1547: GO 1607
1549: LD_INT 12
1551: DOUBLE
1552: EQUAL
1553: IFTRUE 1557
1555: GO 1568
1557: POP
// point := 30 ; class_apeman_soldier :
1558: LD_ADDR_VAR 0 4
1562: PUSH
1563: LD_INT 30
1565: ST_TO_ADDR
1566: GO 1607
1568: LD_INT 15
1570: DOUBLE
1571: EQUAL
1572: IFTRUE 1576
1574: GO 1587
1576: POP
// point := 50 ; class_frog :
1577: LD_ADDR_VAR 0 4
1581: PUSH
1582: LD_INT 50
1584: ST_TO_ADDR
1585: GO 1607
1587: LD_INT 19
1589: DOUBLE
1590: EQUAL
1591: IFTRUE 1595
1593: GO 1606
1595: POP
// point := 10 ; end ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: LD_INT 10
1603: ST_TO_ADDR
1604: GO 1607
1606: POP
// if point then
1607: LD_VAR 0 4
1611: IFFALSE 1650
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1613: LD_ADDR_EXP 5
1617: PUSH
1618: LD_EXP 5
1622: PPUSH
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_EXP 5
1632: PUSH
1633: LD_VAR 0 2
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 4
1643: PLUS
1644: PPUSH
1645: CALL_OW 1
1649: ST_TO_ADDR
// end ;
1650: PPOPN 4
1652: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1653: LD_INT 22
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 69
1667: PUSH
1668: LD_INT 10
1670: LESS
1671: IFFALSE 1785
1673: GO 1675
1675: DISABLE
// begin enable ;
1676: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1677: LD_INT 2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: LD_INT 4
1688: PPUSH
1689: CALL_OW 12
1693: PUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 2
1699: PPUSH
1700: CALL_OW 12
1704: PUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_INT 4
1710: PPUSH
1711: CALL_OW 12
1715: PUSH
1716: LD_INT 2
1718: PPUSH
1719: LD_INT 4
1721: PPUSH
1722: CALL_OW 12
1726: PUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: CALL_OW 12
1737: PUSH
1738: LD_INT 0
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: CALL_OW 12
1748: PUSH
1749: LD_INT 0
1751: PPUSH
1752: LD_INT 4
1754: PPUSH
1755: CALL_OW 12
1759: PUSH
1760: LD_INT 0
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: CALL_OW 12
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: PPUSH
1781: CALL 391 0 3
// end ;
1785: END
// every 0 0$1 do var i ;
1786: GO 1788
1788: DISABLE
1789: LD_INT 0
1791: PPUSH
// begin enable ;
1792: ENABLE
// display_strings := [ ] ;
1793: LD_ADDR_OWVAR 47
1797: PUSH
1798: EMPTY
1799: ST_TO_ADDR
// for i := 1 to huntersAmount do
1800: LD_ADDR_VAR 0 1
1804: PUSH
1805: DOUBLE
1806: LD_INT 1
1808: DEC
1809: ST_TO_ADDR
1810: LD_EXP 3
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1950
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1818: LD_ADDR_OWVAR 47
1822: PUSH
1823: LD_OWVAR 47
1827: PUSH
1828: LD_STRING #player
1830: PUSH
1831: LD_VAR 0 1
1835: STR
1836: PUSH
1837: LD_VAR 0 1
1841: PUSH
1842: LD_EXP 5
1846: PUSH
1847: LD_VAR 0 1
1851: ARRAY
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: ADD
1858: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1859: LD_EXP 5
1863: PUSH
1864: LD_VAR 0 1
1868: ARRAY
1869: PUSH
1870: LD_INT 750
1872: PUSH
1873: LD_INT 1250
1875: PUSH
1876: LD_INT 2000
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_OWVAR 67
1888: ARRAY
1889: GREATEREQUAL
1890: IFFALSE 1948
// begin if i = 1 then
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 1
1899: EQUAL
1900: IFFALSE 1941
// begin DialogueOn ;
1902: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1906: LD_STRING ACH_HUNT
1908: PPUSH
1909: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1913: LD_ADDR_OWVAR 47
1917: PUSH
1918: LD_STRING #hunting-win
1920: PUSH
1921: EMPTY
1922: LIST
1923: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1924: LD_INT 175
1926: PPUSH
1927: CALL_OW 68
// YouWin ;
1931: CALL_OW 103
// DialogueOff ;
1935: CALL_OW 7
// end else
1939: GO 1948
// YouLost ( hunt3 ) ;
1941: LD_STRING hunt3
1943: PPUSH
1944: CALL_OW 104
// end ; end ;
1948: GO 1815
1950: POP
1951: POP
// end ; end_of_file end_of_file
1952: PPOPN 1
1954: END
// export globalGameSaveCounter ; every 0 0$1 do
1955: GO 1957
1957: DISABLE
// begin enable ;
1958: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1959: LD_STRING updateTimer(
1961: PUSH
1962: LD_OWVAR 1
1966: STR
1967: PUSH
1968: LD_STRING );
1970: STR
1971: PPUSH
1972: CALL_OW 559
// end ;
1976: END
// every 0 0$1 do
1977: GO 1979
1979: DISABLE
// begin globalGameSaveCounter := 0 ;
1980: LD_ADDR_EXP 7
1984: PUSH
1985: LD_INT 0
1987: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1988: LD_STRING setGameSaveCounter(0)
1990: PPUSH
1991: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1995: LD_STRING initStreamRollete();
1997: PPUSH
1998: CALL_OW 559
// InitStreamMode ;
2002: CALL 3345 0 0
// DefineStreamItems ( false ) ;
2006: LD_INT 0
2008: PPUSH
2009: CALL 3809 0 1
// end ;
2013: END
// export function SOS_MapStart ( ) ; begin
2014: LD_INT 0
2016: PPUSH
// if streamModeActive then
2017: LD_EXP 8
2021: IFFALSE 2030
// DefineStreamItems ( true ) ;
2023: LD_INT 1
2025: PPUSH
2026: CALL 3809 0 1
// UpdateLuaVariables ( ) ;
2030: CALL 2047 0 0
// UpdateFactoryWaypoints ( ) ;
2034: CALL 16678 0 0
// UpdateWarehouseGatheringPoints ( ) ;
2038: CALL 16935 0 0
// end ;
2042: LD_VAR 0 1
2046: RET
// function UpdateLuaVariables ( ) ; begin
2047: LD_INT 0
2049: PPUSH
// if globalGameSaveCounter then
2050: LD_EXP 7
2054: IFFALSE 2088
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
2056: LD_ADDR_EXP 7
2060: PUSH
2061: LD_EXP 7
2065: PPUSH
2066: CALL 61883 0 1
2070: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2071: LD_STRING setGameSaveCounter(
2073: PUSH
2074: LD_EXP 7
2078: STR
2079: PUSH
2080: LD_STRING )
2082: STR
2083: PPUSH
2084: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
2088: LD_STRING setGameDifficulty(
2090: PUSH
2091: LD_OWVAR 67
2095: STR
2096: PUSH
2097: LD_STRING )
2099: STR
2100: PPUSH
2101: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
2105: LD_STRING displayDifficulty(
2107: PUSH
2108: LD_OWVAR 67
2112: STR
2113: PUSH
2114: LD_STRING )
2116: STR
2117: PPUSH
2118: CALL_OW 559
// end ;
2122: LD_VAR 0 1
2126: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2127: LD_INT 0
2129: PPUSH
// if p2 = stream_mode then
2130: LD_VAR 0 2
2134: PUSH
2135: LD_INT 100
2137: EQUAL
2138: IFFALSE 3141
// begin if not StreamModeActive then
2140: LD_EXP 8
2144: NOT
2145: IFFALSE 2155
// StreamModeActive := true ;
2147: LD_ADDR_EXP 8
2151: PUSH
2152: LD_INT 1
2154: ST_TO_ADDR
// if p3 = 0 then
2155: LD_VAR 0 3
2159: PUSH
2160: LD_INT 0
2162: EQUAL
2163: IFFALSE 2169
// InitStreamMode ;
2165: CALL 3345 0 0
// if p3 = 1 then
2169: LD_VAR 0 3
2173: PUSH
2174: LD_INT 1
2176: EQUAL
2177: IFFALSE 2187
// sRocket := true ;
2179: LD_ADDR_EXP 13
2183: PUSH
2184: LD_INT 1
2186: ST_TO_ADDR
// if p3 = 2 then
2187: LD_VAR 0 3
2191: PUSH
2192: LD_INT 2
2194: EQUAL
2195: IFFALSE 2205
// sSpeed := true ;
2197: LD_ADDR_EXP 12
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// if p3 = 3 then
2205: LD_VAR 0 3
2209: PUSH
2210: LD_INT 3
2212: EQUAL
2213: IFFALSE 2223
// sEngine := true ;
2215: LD_ADDR_EXP 14
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// if p3 = 4 then
2223: LD_VAR 0 3
2227: PUSH
2228: LD_INT 4
2230: EQUAL
2231: IFFALSE 2241
// sSpec := true ;
2233: LD_ADDR_EXP 11
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// if p3 = 5 then
2241: LD_VAR 0 3
2245: PUSH
2246: LD_INT 5
2248: EQUAL
2249: IFFALSE 2259
// sLevel := true ;
2251: LD_ADDR_EXP 15
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// if p3 = 6 then
2259: LD_VAR 0 3
2263: PUSH
2264: LD_INT 6
2266: EQUAL
2267: IFFALSE 2277
// sArmoury := true ;
2269: LD_ADDR_EXP 16
2273: PUSH
2274: LD_INT 1
2276: ST_TO_ADDR
// if p3 = 7 then
2277: LD_VAR 0 3
2281: PUSH
2282: LD_INT 7
2284: EQUAL
2285: IFFALSE 2295
// sRadar := true ;
2287: LD_ADDR_EXP 17
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// if p3 = 8 then
2295: LD_VAR 0 3
2299: PUSH
2300: LD_INT 8
2302: EQUAL
2303: IFFALSE 2313
// sBunker := true ;
2305: LD_ADDR_EXP 18
2309: PUSH
2310: LD_INT 1
2312: ST_TO_ADDR
// if p3 = 9 then
2313: LD_VAR 0 3
2317: PUSH
2318: LD_INT 9
2320: EQUAL
2321: IFFALSE 2331
// sHack := true ;
2323: LD_ADDR_EXP 19
2327: PUSH
2328: LD_INT 1
2330: ST_TO_ADDR
// if p3 = 10 then
2331: LD_VAR 0 3
2335: PUSH
2336: LD_INT 10
2338: EQUAL
2339: IFFALSE 2349
// sFire := true ;
2341: LD_ADDR_EXP 20
2345: PUSH
2346: LD_INT 1
2348: ST_TO_ADDR
// if p3 = 11 then
2349: LD_VAR 0 3
2353: PUSH
2354: LD_INT 11
2356: EQUAL
2357: IFFALSE 2367
// sRefresh := true ;
2359: LD_ADDR_EXP 21
2363: PUSH
2364: LD_INT 1
2366: ST_TO_ADDR
// if p3 = 12 then
2367: LD_VAR 0 3
2371: PUSH
2372: LD_INT 12
2374: EQUAL
2375: IFFALSE 2385
// sExp := true ;
2377: LD_ADDR_EXP 22
2381: PUSH
2382: LD_INT 1
2384: ST_TO_ADDR
// if p3 = 13 then
2385: LD_VAR 0 3
2389: PUSH
2390: LD_INT 13
2392: EQUAL
2393: IFFALSE 2403
// sDepot := true ;
2395: LD_ADDR_EXP 23
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// if p3 = 14 then
2403: LD_VAR 0 3
2407: PUSH
2408: LD_INT 14
2410: EQUAL
2411: IFFALSE 2421
// sFlag := true ;
2413: LD_ADDR_EXP 24
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// if p3 = 15 then
2421: LD_VAR 0 3
2425: PUSH
2426: LD_INT 15
2428: EQUAL
2429: IFFALSE 2439
// sKamikadze := true ;
2431: LD_ADDR_EXP 32
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// if p3 = 16 then
2439: LD_VAR 0 3
2443: PUSH
2444: LD_INT 16
2446: EQUAL
2447: IFFALSE 2457
// sTroll := true ;
2449: LD_ADDR_EXP 33
2453: PUSH
2454: LD_INT 1
2456: ST_TO_ADDR
// if p3 = 17 then
2457: LD_VAR 0 3
2461: PUSH
2462: LD_INT 17
2464: EQUAL
2465: IFFALSE 2475
// sSlow := true ;
2467: LD_ADDR_EXP 34
2471: PUSH
2472: LD_INT 1
2474: ST_TO_ADDR
// if p3 = 18 then
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 18
2482: EQUAL
2483: IFFALSE 2493
// sLack := true ;
2485: LD_ADDR_EXP 35
2489: PUSH
2490: LD_INT 1
2492: ST_TO_ADDR
// if p3 = 19 then
2493: LD_VAR 0 3
2497: PUSH
2498: LD_INT 19
2500: EQUAL
2501: IFFALSE 2511
// sTank := true ;
2503: LD_ADDR_EXP 37
2507: PUSH
2508: LD_INT 1
2510: ST_TO_ADDR
// if p3 = 20 then
2511: LD_VAR 0 3
2515: PUSH
2516: LD_INT 20
2518: EQUAL
2519: IFFALSE 2529
// sRemote := true ;
2521: LD_ADDR_EXP 38
2525: PUSH
2526: LD_INT 1
2528: ST_TO_ADDR
// if p3 = 21 then
2529: LD_VAR 0 3
2533: PUSH
2534: LD_INT 21
2536: EQUAL
2537: IFFALSE 2547
// sPowell := true ;
2539: LD_ADDR_EXP 39
2543: PUSH
2544: LD_INT 1
2546: ST_TO_ADDR
// if p3 = 22 then
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 22
2554: EQUAL
2555: IFFALSE 2565
// sTeleport := true ;
2557: LD_ADDR_EXP 42
2561: PUSH
2562: LD_INT 1
2564: ST_TO_ADDR
// if p3 = 23 then
2565: LD_VAR 0 3
2569: PUSH
2570: LD_INT 23
2572: EQUAL
2573: IFFALSE 2583
// sOilTower := true ;
2575: LD_ADDR_EXP 44
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// if p3 = 24 then
2583: LD_VAR 0 3
2587: PUSH
2588: LD_INT 24
2590: EQUAL
2591: IFFALSE 2601
// sShovel := true ;
2593: LD_ADDR_EXP 45
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// if p3 = 25 then
2601: LD_VAR 0 3
2605: PUSH
2606: LD_INT 25
2608: EQUAL
2609: IFFALSE 2619
// sSheik := true ;
2611: LD_ADDR_EXP 46
2615: PUSH
2616: LD_INT 1
2618: ST_TO_ADDR
// if p3 = 26 then
2619: LD_VAR 0 3
2623: PUSH
2624: LD_INT 26
2626: EQUAL
2627: IFFALSE 2637
// sEarthquake := true ;
2629: LD_ADDR_EXP 48
2633: PUSH
2634: LD_INT 1
2636: ST_TO_ADDR
// if p3 = 27 then
2637: LD_VAR 0 3
2641: PUSH
2642: LD_INT 27
2644: EQUAL
2645: IFFALSE 2655
// sAI := true ;
2647: LD_ADDR_EXP 49
2651: PUSH
2652: LD_INT 1
2654: ST_TO_ADDR
// if p3 = 28 then
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 28
2662: EQUAL
2663: IFFALSE 2673
// sCargo := true ;
2665: LD_ADDR_EXP 52
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// if p3 = 29 then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 29
2680: EQUAL
2681: IFFALSE 2691
// sDLaser := true ;
2683: LD_ADDR_EXP 53
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// if p3 = 30 then
2691: LD_VAR 0 3
2695: PUSH
2696: LD_INT 30
2698: EQUAL
2699: IFFALSE 2709
// sExchange := true ;
2701: LD_ADDR_EXP 54
2705: PUSH
2706: LD_INT 1
2708: ST_TO_ADDR
// if p3 = 31 then
2709: LD_VAR 0 3
2713: PUSH
2714: LD_INT 31
2716: EQUAL
2717: IFFALSE 2727
// sFac := true ;
2719: LD_ADDR_EXP 55
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// if p3 = 32 then
2727: LD_VAR 0 3
2731: PUSH
2732: LD_INT 32
2734: EQUAL
2735: IFFALSE 2745
// sPower := true ;
2737: LD_ADDR_EXP 56
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if p3 = 33 then
2745: LD_VAR 0 3
2749: PUSH
2750: LD_INT 33
2752: EQUAL
2753: IFFALSE 2763
// sRandom := true ;
2755: LD_ADDR_EXP 57
2759: PUSH
2760: LD_INT 1
2762: ST_TO_ADDR
// if p3 = 34 then
2763: LD_VAR 0 3
2767: PUSH
2768: LD_INT 34
2770: EQUAL
2771: IFFALSE 2781
// sShield := true ;
2773: LD_ADDR_EXP 58
2777: PUSH
2778: LD_INT 1
2780: ST_TO_ADDR
// if p3 = 35 then
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 35
2788: EQUAL
2789: IFFALSE 2799
// sTime := true ;
2791: LD_ADDR_EXP 59
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// if p3 = 36 then
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 36
2806: EQUAL
2807: IFFALSE 2817
// sTools := true ;
2809: LD_ADDR_EXP 60
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if p3 = 101 then
2817: LD_VAR 0 3
2821: PUSH
2822: LD_INT 101
2824: EQUAL
2825: IFFALSE 2835
// sSold := true ;
2827: LD_ADDR_EXP 25
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// if p3 = 102 then
2835: LD_VAR 0 3
2839: PUSH
2840: LD_INT 102
2842: EQUAL
2843: IFFALSE 2853
// sDiff := true ;
2845: LD_ADDR_EXP 26
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// if p3 = 103 then
2853: LD_VAR 0 3
2857: PUSH
2858: LD_INT 103
2860: EQUAL
2861: IFFALSE 2871
// sFog := true ;
2863: LD_ADDR_EXP 29
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// if p3 = 104 then
2871: LD_VAR 0 3
2875: PUSH
2876: LD_INT 104
2878: EQUAL
2879: IFFALSE 2889
// sReset := true ;
2881: LD_ADDR_EXP 30
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// if p3 = 105 then
2889: LD_VAR 0 3
2893: PUSH
2894: LD_INT 105
2896: EQUAL
2897: IFFALSE 2907
// sSun := true ;
2899: LD_ADDR_EXP 31
2903: PUSH
2904: LD_INT 1
2906: ST_TO_ADDR
// if p3 = 106 then
2907: LD_VAR 0 3
2911: PUSH
2912: LD_INT 106
2914: EQUAL
2915: IFFALSE 2925
// sTiger := true ;
2917: LD_ADDR_EXP 27
2921: PUSH
2922: LD_INT 1
2924: ST_TO_ADDR
// if p3 = 107 then
2925: LD_VAR 0 3
2929: PUSH
2930: LD_INT 107
2932: EQUAL
2933: IFFALSE 2943
// sBomb := true ;
2935: LD_ADDR_EXP 28
2939: PUSH
2940: LD_INT 1
2942: ST_TO_ADDR
// if p3 = 108 then
2943: LD_VAR 0 3
2947: PUSH
2948: LD_INT 108
2950: EQUAL
2951: IFFALSE 2961
// sWound := true ;
2953: LD_ADDR_EXP 36
2957: PUSH
2958: LD_INT 1
2960: ST_TO_ADDR
// if p3 = 109 then
2961: LD_VAR 0 3
2965: PUSH
2966: LD_INT 109
2968: EQUAL
2969: IFFALSE 2979
// sBetray := true ;
2971: LD_ADDR_EXP 40
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// if p3 = 110 then
2979: LD_VAR 0 3
2983: PUSH
2984: LD_INT 110
2986: EQUAL
2987: IFFALSE 2997
// sContamin := true ;
2989: LD_ADDR_EXP 41
2993: PUSH
2994: LD_INT 1
2996: ST_TO_ADDR
// if p3 = 111 then
2997: LD_VAR 0 3
3001: PUSH
3002: LD_INT 111
3004: EQUAL
3005: IFFALSE 3015
// sOil := true ;
3007: LD_ADDR_EXP 43
3011: PUSH
3012: LD_INT 1
3014: ST_TO_ADDR
// if p3 = 112 then
3015: LD_VAR 0 3
3019: PUSH
3020: LD_INT 112
3022: EQUAL
3023: IFFALSE 3033
// sStu := true ;
3025: LD_ADDR_EXP 47
3029: PUSH
3030: LD_INT 1
3032: ST_TO_ADDR
// if p3 = 113 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 113
3040: EQUAL
3041: IFFALSE 3051
// sBazooka := true ;
3043: LD_ADDR_EXP 50
3047: PUSH
3048: LD_INT 1
3050: ST_TO_ADDR
// if p3 = 114 then
3051: LD_VAR 0 3
3055: PUSH
3056: LD_INT 114
3058: EQUAL
3059: IFFALSE 3069
// sMortar := true ;
3061: LD_ADDR_EXP 51
3065: PUSH
3066: LD_INT 1
3068: ST_TO_ADDR
// if p3 = 115 then
3069: LD_VAR 0 3
3073: PUSH
3074: LD_INT 115
3076: EQUAL
3077: IFFALSE 3087
// sRanger := true ;
3079: LD_ADDR_EXP 61
3083: PUSH
3084: LD_INT 1
3086: ST_TO_ADDR
// if p3 = 116 then
3087: LD_VAR 0 3
3091: PUSH
3092: LD_INT 116
3094: EQUAL
3095: IFFALSE 3105
// sComputer := true ;
3097: LD_ADDR_EXP 62
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// if p3 = 117 then
3105: LD_VAR 0 3
3109: PUSH
3110: LD_INT 117
3112: EQUAL
3113: IFFALSE 3123
// s30 := true ;
3115: LD_ADDR_EXP 63
3119: PUSH
3120: LD_INT 1
3122: ST_TO_ADDR
// if p3 = 118 then
3123: LD_VAR 0 3
3127: PUSH
3128: LD_INT 118
3130: EQUAL
3131: IFFALSE 3141
// s60 := true ;
3133: LD_ADDR_EXP 64
3137: PUSH
3138: LD_INT 1
3140: ST_TO_ADDR
// end ; if p2 = hack_mode then
3141: LD_VAR 0 2
3145: PUSH
3146: LD_INT 101
3148: EQUAL
3149: IFFALSE 3277
// begin case p3 of 1 :
3151: LD_VAR 0 3
3155: PUSH
3156: LD_INT 1
3158: DOUBLE
3159: EQUAL
3160: IFTRUE 3164
3162: GO 3171
3164: POP
// hHackUnlimitedResources ; 2 :
3165: CALL 15424 0 0
3169: GO 3277
3171: LD_INT 2
3173: DOUBLE
3174: EQUAL
3175: IFTRUE 3179
3177: GO 3186
3179: POP
// hHackSetLevel10 ; 3 :
3180: CALL 15557 0 0
3184: GO 3277
3186: LD_INT 3
3188: DOUBLE
3189: EQUAL
3190: IFTRUE 3194
3192: GO 3201
3194: POP
// hHackSetLevel10YourUnits ; 4 :
3195: CALL 15642 0 0
3199: GO 3277
3201: LD_INT 4
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3216
3209: POP
// hHackInvincible ; 5 :
3210: CALL 16090 0 0
3214: GO 3277
3216: LD_INT 5
3218: DOUBLE
3219: EQUAL
3220: IFTRUE 3224
3222: GO 3231
3224: POP
// hHackInvisible ; 6 :
3225: CALL 16201 0 0
3229: GO 3277
3231: LD_INT 6
3233: DOUBLE
3234: EQUAL
3235: IFTRUE 3239
3237: GO 3246
3239: POP
// hHackChangeYourSide ; 7 :
3240: CALL 16258 0 0
3244: GO 3277
3246: LD_INT 7
3248: DOUBLE
3249: EQUAL
3250: IFTRUE 3254
3252: GO 3261
3254: POP
// hHackChangeUnitSide ; 8 :
3255: CALL 16300 0 0
3259: GO 3277
3261: LD_INT 8
3263: DOUBLE
3264: EQUAL
3265: IFTRUE 3269
3267: GO 3276
3269: POP
// hHackFog ; end ;
3270: CALL 16401 0 0
3274: GO 3277
3276: POP
// end ; if p2 = game_save_mode then
3277: LD_VAR 0 2
3281: PUSH
3282: LD_INT 102
3284: EQUAL
3285: IFFALSE 3340
// begin if p3 = 1 then
3287: LD_VAR 0 3
3291: PUSH
3292: LD_INT 1
3294: EQUAL
3295: IFFALSE 3307
// globalGameSaveCounter := p4 ;
3297: LD_ADDR_EXP 7
3301: PUSH
3302: LD_VAR 0 4
3306: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3307: LD_VAR 0 3
3311: PUSH
3312: LD_INT 2
3314: EQUAL
3315: PUSH
3316: LD_EXP 7
3320: AND
3321: IFFALSE 3340
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3323: LD_STRING setGameSaveCounter(
3325: PUSH
3326: LD_EXP 7
3330: STR
3331: PUSH
3332: LD_STRING )
3334: STR
3335: PPUSH
3336: CALL_OW 559
// end ; end ;
3340: LD_VAR 0 7
3344: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3345: LD_INT 0
3347: PPUSH
// streamModeActive := false ;
3348: LD_ADDR_EXP 8
3352: PUSH
3353: LD_INT 0
3355: ST_TO_ADDR
// normalCounter := 36 ;
3356: LD_ADDR_EXP 9
3360: PUSH
3361: LD_INT 36
3363: ST_TO_ADDR
// hardcoreCounter := 18 ;
3364: LD_ADDR_EXP 10
3368: PUSH
3369: LD_INT 18
3371: ST_TO_ADDR
// sRocket := false ;
3372: LD_ADDR_EXP 13
3376: PUSH
3377: LD_INT 0
3379: ST_TO_ADDR
// sSpeed := false ;
3380: LD_ADDR_EXP 12
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// sEngine := false ;
3388: LD_ADDR_EXP 14
3392: PUSH
3393: LD_INT 0
3395: ST_TO_ADDR
// sSpec := false ;
3396: LD_ADDR_EXP 11
3400: PUSH
3401: LD_INT 0
3403: ST_TO_ADDR
// sLevel := false ;
3404: LD_ADDR_EXP 15
3408: PUSH
3409: LD_INT 0
3411: ST_TO_ADDR
// sArmoury := false ;
3412: LD_ADDR_EXP 16
3416: PUSH
3417: LD_INT 0
3419: ST_TO_ADDR
// sRadar := false ;
3420: LD_ADDR_EXP 17
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// sBunker := false ;
3428: LD_ADDR_EXP 18
3432: PUSH
3433: LD_INT 0
3435: ST_TO_ADDR
// sHack := false ;
3436: LD_ADDR_EXP 19
3440: PUSH
3441: LD_INT 0
3443: ST_TO_ADDR
// sFire := false ;
3444: LD_ADDR_EXP 20
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// sRefresh := false ;
3452: LD_ADDR_EXP 21
3456: PUSH
3457: LD_INT 0
3459: ST_TO_ADDR
// sExp := false ;
3460: LD_ADDR_EXP 22
3464: PUSH
3465: LD_INT 0
3467: ST_TO_ADDR
// sDepot := false ;
3468: LD_ADDR_EXP 23
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// sFlag := false ;
3476: LD_ADDR_EXP 24
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
// sKamikadze := false ;
3484: LD_ADDR_EXP 32
3488: PUSH
3489: LD_INT 0
3491: ST_TO_ADDR
// sTroll := false ;
3492: LD_ADDR_EXP 33
3496: PUSH
3497: LD_INT 0
3499: ST_TO_ADDR
// sSlow := false ;
3500: LD_ADDR_EXP 34
3504: PUSH
3505: LD_INT 0
3507: ST_TO_ADDR
// sLack := false ;
3508: LD_ADDR_EXP 35
3512: PUSH
3513: LD_INT 0
3515: ST_TO_ADDR
// sTank := false ;
3516: LD_ADDR_EXP 37
3520: PUSH
3521: LD_INT 0
3523: ST_TO_ADDR
// sRemote := false ;
3524: LD_ADDR_EXP 38
3528: PUSH
3529: LD_INT 0
3531: ST_TO_ADDR
// sPowell := false ;
3532: LD_ADDR_EXP 39
3536: PUSH
3537: LD_INT 0
3539: ST_TO_ADDR
// sTeleport := false ;
3540: LD_ADDR_EXP 42
3544: PUSH
3545: LD_INT 0
3547: ST_TO_ADDR
// sOilTower := false ;
3548: LD_ADDR_EXP 44
3552: PUSH
3553: LD_INT 0
3555: ST_TO_ADDR
// sShovel := false ;
3556: LD_ADDR_EXP 45
3560: PUSH
3561: LD_INT 0
3563: ST_TO_ADDR
// sSheik := false ;
3564: LD_ADDR_EXP 46
3568: PUSH
3569: LD_INT 0
3571: ST_TO_ADDR
// sEarthquake := false ;
3572: LD_ADDR_EXP 48
3576: PUSH
3577: LD_INT 0
3579: ST_TO_ADDR
// sAI := false ;
3580: LD_ADDR_EXP 49
3584: PUSH
3585: LD_INT 0
3587: ST_TO_ADDR
// sCargo := false ;
3588: LD_ADDR_EXP 52
3592: PUSH
3593: LD_INT 0
3595: ST_TO_ADDR
// sDLaser := false ;
3596: LD_ADDR_EXP 53
3600: PUSH
3601: LD_INT 0
3603: ST_TO_ADDR
// sExchange := false ;
3604: LD_ADDR_EXP 54
3608: PUSH
3609: LD_INT 0
3611: ST_TO_ADDR
// sFac := false ;
3612: LD_ADDR_EXP 55
3616: PUSH
3617: LD_INT 0
3619: ST_TO_ADDR
// sPower := false ;
3620: LD_ADDR_EXP 56
3624: PUSH
3625: LD_INT 0
3627: ST_TO_ADDR
// sRandom := false ;
3628: LD_ADDR_EXP 57
3632: PUSH
3633: LD_INT 0
3635: ST_TO_ADDR
// sShield := false ;
3636: LD_ADDR_EXP 58
3640: PUSH
3641: LD_INT 0
3643: ST_TO_ADDR
// sTime := false ;
3644: LD_ADDR_EXP 59
3648: PUSH
3649: LD_INT 0
3651: ST_TO_ADDR
// sTools := false ;
3652: LD_ADDR_EXP 60
3656: PUSH
3657: LD_INT 0
3659: ST_TO_ADDR
// sSold := false ;
3660: LD_ADDR_EXP 25
3664: PUSH
3665: LD_INT 0
3667: ST_TO_ADDR
// sDiff := false ;
3668: LD_ADDR_EXP 26
3672: PUSH
3673: LD_INT 0
3675: ST_TO_ADDR
// sFog := false ;
3676: LD_ADDR_EXP 29
3680: PUSH
3681: LD_INT 0
3683: ST_TO_ADDR
// sReset := false ;
3684: LD_ADDR_EXP 30
3688: PUSH
3689: LD_INT 0
3691: ST_TO_ADDR
// sSun := false ;
3692: LD_ADDR_EXP 31
3696: PUSH
3697: LD_INT 0
3699: ST_TO_ADDR
// sTiger := false ;
3700: LD_ADDR_EXP 27
3704: PUSH
3705: LD_INT 0
3707: ST_TO_ADDR
// sBomb := false ;
3708: LD_ADDR_EXP 28
3712: PUSH
3713: LD_INT 0
3715: ST_TO_ADDR
// sWound := false ;
3716: LD_ADDR_EXP 36
3720: PUSH
3721: LD_INT 0
3723: ST_TO_ADDR
// sBetray := false ;
3724: LD_ADDR_EXP 40
3728: PUSH
3729: LD_INT 0
3731: ST_TO_ADDR
// sContamin := false ;
3732: LD_ADDR_EXP 41
3736: PUSH
3737: LD_INT 0
3739: ST_TO_ADDR
// sOil := false ;
3740: LD_ADDR_EXP 43
3744: PUSH
3745: LD_INT 0
3747: ST_TO_ADDR
// sStu := false ;
3748: LD_ADDR_EXP 47
3752: PUSH
3753: LD_INT 0
3755: ST_TO_ADDR
// sBazooka := false ;
3756: LD_ADDR_EXP 50
3760: PUSH
3761: LD_INT 0
3763: ST_TO_ADDR
// sMortar := false ;
3764: LD_ADDR_EXP 51
3768: PUSH
3769: LD_INT 0
3771: ST_TO_ADDR
// sRanger := false ;
3772: LD_ADDR_EXP 61
3776: PUSH
3777: LD_INT 0
3779: ST_TO_ADDR
// sComputer := false ;
3780: LD_ADDR_EXP 62
3784: PUSH
3785: LD_INT 0
3787: ST_TO_ADDR
// s30 := false ;
3788: LD_ADDR_EXP 63
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// s60 := false ;
3796: LD_ADDR_EXP 64
3800: PUSH
3801: LD_INT 0
3803: ST_TO_ADDR
// end ;
3804: LD_VAR 0 1
3808: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3809: LD_INT 0
3811: PPUSH
3812: PPUSH
3813: PPUSH
3814: PPUSH
3815: PPUSH
3816: PPUSH
3817: PPUSH
// result := [ ] ;
3818: LD_ADDR_VAR 0 2
3822: PUSH
3823: EMPTY
3824: ST_TO_ADDR
// if campaign_id = 1 then
3825: LD_OWVAR 69
3829: PUSH
3830: LD_INT 1
3832: EQUAL
3833: IFFALSE 6999
// begin case mission_number of 1 :
3835: LD_OWVAR 70
3839: PUSH
3840: LD_INT 1
3842: DOUBLE
3843: EQUAL
3844: IFTRUE 3848
3846: GO 3924
3848: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3849: LD_ADDR_VAR 0 2
3853: PUSH
3854: LD_INT 2
3856: PUSH
3857: LD_INT 4
3859: PUSH
3860: LD_INT 11
3862: PUSH
3863: LD_INT 12
3865: PUSH
3866: LD_INT 15
3868: PUSH
3869: LD_INT 16
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_INT 23
3877: PUSH
3878: LD_INT 26
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: PUSH
3892: LD_INT 101
3894: PUSH
3895: LD_INT 102
3897: PUSH
3898: LD_INT 106
3900: PUSH
3901: LD_INT 116
3903: PUSH
3904: LD_INT 117
3906: PUSH
3907: LD_INT 118
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: ST_TO_ADDR
3922: GO 6997
3924: LD_INT 2
3926: DOUBLE
3927: EQUAL
3928: IFTRUE 3932
3930: GO 4016
3932: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: LD_INT 2
3940: PUSH
3941: LD_INT 4
3943: PUSH
3944: LD_INT 11
3946: PUSH
3947: LD_INT 12
3949: PUSH
3950: LD_INT 15
3952: PUSH
3953: LD_INT 16
3955: PUSH
3956: LD_INT 22
3958: PUSH
3959: LD_INT 23
3961: PUSH
3962: LD_INT 26
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: PUSH
3976: LD_INT 101
3978: PUSH
3979: LD_INT 102
3981: PUSH
3982: LD_INT 105
3984: PUSH
3985: LD_INT 106
3987: PUSH
3988: LD_INT 108
3990: PUSH
3991: LD_INT 116
3993: PUSH
3994: LD_INT 117
3996: PUSH
3997: LD_INT 118
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: ST_TO_ADDR
4014: GO 6997
4016: LD_INT 3
4018: DOUBLE
4019: EQUAL
4020: IFTRUE 4024
4022: GO 4112
4024: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: LD_INT 2
4032: PUSH
4033: LD_INT 4
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: LD_INT 11
4041: PUSH
4042: LD_INT 12
4044: PUSH
4045: LD_INT 15
4047: PUSH
4048: LD_INT 16
4050: PUSH
4051: LD_INT 22
4053: PUSH
4054: LD_INT 26
4056: PUSH
4057: LD_INT 36
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 101
4074: PUSH
4075: LD_INT 102
4077: PUSH
4078: LD_INT 105
4080: PUSH
4081: LD_INT 106
4083: PUSH
4084: LD_INT 108
4086: PUSH
4087: LD_INT 116
4089: PUSH
4090: LD_INT 117
4092: PUSH
4093: LD_INT 118
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: ST_TO_ADDR
4110: GO 6997
4112: LD_INT 4
4114: DOUBLE
4115: EQUAL
4116: IFTRUE 4120
4118: GO 4216
4120: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4121: LD_ADDR_VAR 0 2
4125: PUSH
4126: LD_INT 2
4128: PUSH
4129: LD_INT 4
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 8
4137: PUSH
4138: LD_INT 11
4140: PUSH
4141: LD_INT 12
4143: PUSH
4144: LD_INT 15
4146: PUSH
4147: LD_INT 16
4149: PUSH
4150: LD_INT 22
4152: PUSH
4153: LD_INT 23
4155: PUSH
4156: LD_INT 26
4158: PUSH
4159: LD_INT 36
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 101
4178: PUSH
4179: LD_INT 102
4181: PUSH
4182: LD_INT 105
4184: PUSH
4185: LD_INT 106
4187: PUSH
4188: LD_INT 108
4190: PUSH
4191: LD_INT 116
4193: PUSH
4194: LD_INT 117
4196: PUSH
4197: LD_INT 118
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: ST_TO_ADDR
4214: GO 6997
4216: LD_INT 5
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4336
4224: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4225: LD_ADDR_VAR 0 2
4229: PUSH
4230: LD_INT 2
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: LD_INT 5
4238: PUSH
4239: LD_INT 6
4241: PUSH
4242: LD_INT 8
4244: PUSH
4245: LD_INT 11
4247: PUSH
4248: LD_INT 12
4250: PUSH
4251: LD_INT 15
4253: PUSH
4254: LD_INT 16
4256: PUSH
4257: LD_INT 22
4259: PUSH
4260: LD_INT 23
4262: PUSH
4263: LD_INT 25
4265: PUSH
4266: LD_INT 26
4268: PUSH
4269: LD_INT 36
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 101
4290: PUSH
4291: LD_INT 102
4293: PUSH
4294: LD_INT 105
4296: PUSH
4297: LD_INT 106
4299: PUSH
4300: LD_INT 108
4302: PUSH
4303: LD_INT 109
4305: PUSH
4306: LD_INT 112
4308: PUSH
4309: LD_INT 116
4311: PUSH
4312: LD_INT 117
4314: PUSH
4315: LD_INT 118
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: ST_TO_ADDR
4334: GO 6997
4336: LD_INT 6
4338: DOUBLE
4339: EQUAL
4340: IFTRUE 4344
4342: GO 4476
4344: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4345: LD_ADDR_VAR 0 2
4349: PUSH
4350: LD_INT 2
4352: PUSH
4353: LD_INT 4
4355: PUSH
4356: LD_INT 5
4358: PUSH
4359: LD_INT 6
4361: PUSH
4362: LD_INT 8
4364: PUSH
4365: LD_INT 11
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: LD_INT 15
4373: PUSH
4374: LD_INT 16
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 25
4391: PUSH
4392: LD_INT 26
4394: PUSH
4395: LD_INT 30
4397: PUSH
4398: LD_INT 31
4400: PUSH
4401: LD_INT 32
4403: PUSH
4404: LD_INT 36
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 101
4430: PUSH
4431: LD_INT 102
4433: PUSH
4434: LD_INT 105
4436: PUSH
4437: LD_INT 106
4439: PUSH
4440: LD_INT 108
4442: PUSH
4443: LD_INT 109
4445: PUSH
4446: LD_INT 112
4448: PUSH
4449: LD_INT 116
4451: PUSH
4452: LD_INT 117
4454: PUSH
4455: LD_INT 118
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: ST_TO_ADDR
4474: GO 6997
4476: LD_INT 7
4478: DOUBLE
4479: EQUAL
4480: IFTRUE 4484
4482: GO 4596
4484: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4485: LD_ADDR_VAR 0 2
4489: PUSH
4490: LD_INT 2
4492: PUSH
4493: LD_INT 4
4495: PUSH
4496: LD_INT 5
4498: PUSH
4499: LD_INT 7
4501: PUSH
4502: LD_INT 11
4504: PUSH
4505: LD_INT 12
4507: PUSH
4508: LD_INT 15
4510: PUSH
4511: LD_INT 16
4513: PUSH
4514: LD_INT 20
4516: PUSH
4517: LD_INT 21
4519: PUSH
4520: LD_INT 22
4522: PUSH
4523: LD_INT 23
4525: PUSH
4526: LD_INT 25
4528: PUSH
4529: LD_INT 26
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 101
4550: PUSH
4551: LD_INT 102
4553: PUSH
4554: LD_INT 103
4556: PUSH
4557: LD_INT 105
4559: PUSH
4560: LD_INT 106
4562: PUSH
4563: LD_INT 108
4565: PUSH
4566: LD_INT 112
4568: PUSH
4569: LD_INT 116
4571: PUSH
4572: LD_INT 117
4574: PUSH
4575: LD_INT 118
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: ST_TO_ADDR
4594: GO 6997
4596: LD_INT 8
4598: DOUBLE
4599: EQUAL
4600: IFTRUE 4604
4602: GO 4744
4604: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4605: LD_ADDR_VAR 0 2
4609: PUSH
4610: LD_INT 2
4612: PUSH
4613: LD_INT 4
4615: PUSH
4616: LD_INT 5
4618: PUSH
4619: LD_INT 6
4621: PUSH
4622: LD_INT 7
4624: PUSH
4625: LD_INT 8
4627: PUSH
4628: LD_INT 11
4630: PUSH
4631: LD_INT 12
4633: PUSH
4634: LD_INT 15
4636: PUSH
4637: LD_INT 16
4639: PUSH
4640: LD_INT 20
4642: PUSH
4643: LD_INT 21
4645: PUSH
4646: LD_INT 22
4648: PUSH
4649: LD_INT 23
4651: PUSH
4652: LD_INT 25
4654: PUSH
4655: LD_INT 26
4657: PUSH
4658: LD_INT 30
4660: PUSH
4661: LD_INT 31
4663: PUSH
4664: LD_INT 32
4666: PUSH
4667: LD_INT 36
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: PUSH
4692: LD_INT 101
4694: PUSH
4695: LD_INT 102
4697: PUSH
4698: LD_INT 103
4700: PUSH
4701: LD_INT 105
4703: PUSH
4704: LD_INT 106
4706: PUSH
4707: LD_INT 108
4709: PUSH
4710: LD_INT 109
4712: PUSH
4713: LD_INT 112
4715: PUSH
4716: LD_INT 116
4718: PUSH
4719: LD_INT 117
4721: PUSH
4722: LD_INT 118
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: ST_TO_ADDR
4742: GO 6997
4744: LD_INT 9
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4900
4752: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4753: LD_ADDR_VAR 0 2
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: LD_INT 4
4763: PUSH
4764: LD_INT 5
4766: PUSH
4767: LD_INT 6
4769: PUSH
4770: LD_INT 7
4772: PUSH
4773: LD_INT 8
4775: PUSH
4776: LD_INT 11
4778: PUSH
4779: LD_INT 12
4781: PUSH
4782: LD_INT 15
4784: PUSH
4785: LD_INT 16
4787: PUSH
4788: LD_INT 20
4790: PUSH
4791: LD_INT 21
4793: PUSH
4794: LD_INT 22
4796: PUSH
4797: LD_INT 23
4799: PUSH
4800: LD_INT 25
4802: PUSH
4803: LD_INT 26
4805: PUSH
4806: LD_INT 28
4808: PUSH
4809: LD_INT 30
4811: PUSH
4812: LD_INT 31
4814: PUSH
4815: LD_INT 32
4817: PUSH
4818: LD_INT 36
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 101
4846: PUSH
4847: LD_INT 102
4849: PUSH
4850: LD_INT 103
4852: PUSH
4853: LD_INT 105
4855: PUSH
4856: LD_INT 106
4858: PUSH
4859: LD_INT 108
4861: PUSH
4862: LD_INT 109
4864: PUSH
4865: LD_INT 112
4867: PUSH
4868: LD_INT 114
4870: PUSH
4871: LD_INT 116
4873: PUSH
4874: LD_INT 117
4876: PUSH
4877: LD_INT 118
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: ST_TO_ADDR
4898: GO 6997
4900: LD_INT 10
4902: DOUBLE
4903: EQUAL
4904: IFTRUE 4908
4906: GO 5104
4908: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4909: LD_ADDR_VAR 0 2
4913: PUSH
4914: LD_INT 2
4916: PUSH
4917: LD_INT 4
4919: PUSH
4920: LD_INT 5
4922: PUSH
4923: LD_INT 6
4925: PUSH
4926: LD_INT 7
4928: PUSH
4929: LD_INT 8
4931: PUSH
4932: LD_INT 9
4934: PUSH
4935: LD_INT 10
4937: PUSH
4938: LD_INT 11
4940: PUSH
4941: LD_INT 12
4943: PUSH
4944: LD_INT 13
4946: PUSH
4947: LD_INT 14
4949: PUSH
4950: LD_INT 15
4952: PUSH
4953: LD_INT 16
4955: PUSH
4956: LD_INT 17
4958: PUSH
4959: LD_INT 18
4961: PUSH
4962: LD_INT 19
4964: PUSH
4965: LD_INT 20
4967: PUSH
4968: LD_INT 21
4970: PUSH
4971: LD_INT 22
4973: PUSH
4974: LD_INT 23
4976: PUSH
4977: LD_INT 24
4979: PUSH
4980: LD_INT 25
4982: PUSH
4983: LD_INT 26
4985: PUSH
4986: LD_INT 28
4988: PUSH
4989: LD_INT 30
4991: PUSH
4992: LD_INT 31
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: LD_INT 36
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 101
5034: PUSH
5035: LD_INT 102
5037: PUSH
5038: LD_INT 103
5040: PUSH
5041: LD_INT 104
5043: PUSH
5044: LD_INT 105
5046: PUSH
5047: LD_INT 106
5049: PUSH
5050: LD_INT 107
5052: PUSH
5053: LD_INT 108
5055: PUSH
5056: LD_INT 109
5058: PUSH
5059: LD_INT 110
5061: PUSH
5062: LD_INT 111
5064: PUSH
5065: LD_INT 112
5067: PUSH
5068: LD_INT 114
5070: PUSH
5071: LD_INT 116
5073: PUSH
5074: LD_INT 117
5076: PUSH
5077: LD_INT 118
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: ST_TO_ADDR
5102: GO 6997
5104: LD_INT 11
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5316
5112: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5113: LD_ADDR_VAR 0 2
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: LD_INT 3
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: LD_INT 8
5138: PUSH
5139: LD_INT 9
5141: PUSH
5142: LD_INT 10
5144: PUSH
5145: LD_INT 11
5147: PUSH
5148: LD_INT 12
5150: PUSH
5151: LD_INT 13
5153: PUSH
5154: LD_INT 14
5156: PUSH
5157: LD_INT 15
5159: PUSH
5160: LD_INT 16
5162: PUSH
5163: LD_INT 17
5165: PUSH
5166: LD_INT 18
5168: PUSH
5169: LD_INT 19
5171: PUSH
5172: LD_INT 20
5174: PUSH
5175: LD_INT 21
5177: PUSH
5178: LD_INT 22
5180: PUSH
5181: LD_INT 23
5183: PUSH
5184: LD_INT 24
5186: PUSH
5187: LD_INT 25
5189: PUSH
5190: LD_INT 26
5192: PUSH
5193: LD_INT 28
5195: PUSH
5196: LD_INT 30
5198: PUSH
5199: LD_INT 31
5201: PUSH
5202: LD_INT 32
5204: PUSH
5205: LD_INT 34
5207: PUSH
5208: LD_INT 36
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 101
5246: PUSH
5247: LD_INT 102
5249: PUSH
5250: LD_INT 103
5252: PUSH
5253: LD_INT 104
5255: PUSH
5256: LD_INT 105
5258: PUSH
5259: LD_INT 106
5261: PUSH
5262: LD_INT 107
5264: PUSH
5265: LD_INT 108
5267: PUSH
5268: LD_INT 109
5270: PUSH
5271: LD_INT 110
5273: PUSH
5274: LD_INT 111
5276: PUSH
5277: LD_INT 112
5279: PUSH
5280: LD_INT 114
5282: PUSH
5283: LD_INT 116
5285: PUSH
5286: LD_INT 117
5288: PUSH
5289: LD_INT 118
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: ST_TO_ADDR
5314: GO 6997
5316: LD_INT 12
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5324
5322: GO 5544
5324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5325: LD_ADDR_VAR 0 2
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: LD_INT 2
5335: PUSH
5336: LD_INT 3
5338: PUSH
5339: LD_INT 4
5341: PUSH
5342: LD_INT 5
5344: PUSH
5345: LD_INT 6
5347: PUSH
5348: LD_INT 7
5350: PUSH
5351: LD_INT 8
5353: PUSH
5354: LD_INT 9
5356: PUSH
5357: LD_INT 10
5359: PUSH
5360: LD_INT 11
5362: PUSH
5363: LD_INT 12
5365: PUSH
5366: LD_INT 13
5368: PUSH
5369: LD_INT 14
5371: PUSH
5372: LD_INT 15
5374: PUSH
5375: LD_INT 16
5377: PUSH
5378: LD_INT 17
5380: PUSH
5381: LD_INT 18
5383: PUSH
5384: LD_INT 19
5386: PUSH
5387: LD_INT 20
5389: PUSH
5390: LD_INT 21
5392: PUSH
5393: LD_INT 22
5395: PUSH
5396: LD_INT 23
5398: PUSH
5399: LD_INT 24
5401: PUSH
5402: LD_INT 25
5404: PUSH
5405: LD_INT 26
5407: PUSH
5408: LD_INT 27
5410: PUSH
5411: LD_INT 28
5413: PUSH
5414: LD_INT 30
5416: PUSH
5417: LD_INT 31
5419: PUSH
5420: LD_INT 32
5422: PUSH
5423: LD_INT 33
5425: PUSH
5426: LD_INT 34
5428: PUSH
5429: LD_INT 36
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: PUSH
5468: LD_INT 101
5470: PUSH
5471: LD_INT 102
5473: PUSH
5474: LD_INT 103
5476: PUSH
5477: LD_INT 104
5479: PUSH
5480: LD_INT 105
5482: PUSH
5483: LD_INT 106
5485: PUSH
5486: LD_INT 107
5488: PUSH
5489: LD_INT 108
5491: PUSH
5492: LD_INT 109
5494: PUSH
5495: LD_INT 110
5497: PUSH
5498: LD_INT 111
5500: PUSH
5501: LD_INT 112
5503: PUSH
5504: LD_INT 113
5506: PUSH
5507: LD_INT 114
5509: PUSH
5510: LD_INT 116
5512: PUSH
5513: LD_INT 117
5515: PUSH
5516: LD_INT 118
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: ST_TO_ADDR
5542: GO 6997
5544: LD_INT 13
5546: DOUBLE
5547: EQUAL
5548: IFTRUE 5552
5550: GO 5760
5552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5553: LD_ADDR_VAR 0 2
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 3
5566: PUSH
5567: LD_INT 4
5569: PUSH
5570: LD_INT 5
5572: PUSH
5573: LD_INT 8
5575: PUSH
5576: LD_INT 9
5578: PUSH
5579: LD_INT 10
5581: PUSH
5582: LD_INT 11
5584: PUSH
5585: LD_INT 12
5587: PUSH
5588: LD_INT 14
5590: PUSH
5591: LD_INT 15
5593: PUSH
5594: LD_INT 16
5596: PUSH
5597: LD_INT 17
5599: PUSH
5600: LD_INT 18
5602: PUSH
5603: LD_INT 19
5605: PUSH
5606: LD_INT 20
5608: PUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 22
5614: PUSH
5615: LD_INT 23
5617: PUSH
5618: LD_INT 24
5620: PUSH
5621: LD_INT 25
5623: PUSH
5624: LD_INT 26
5626: PUSH
5627: LD_INT 27
5629: PUSH
5630: LD_INT 28
5632: PUSH
5633: LD_INT 30
5635: PUSH
5636: LD_INT 31
5638: PUSH
5639: LD_INT 32
5641: PUSH
5642: LD_INT 33
5644: PUSH
5645: LD_INT 34
5647: PUSH
5648: LD_INT 36
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 101
5686: PUSH
5687: LD_INT 102
5689: PUSH
5690: LD_INT 103
5692: PUSH
5693: LD_INT 104
5695: PUSH
5696: LD_INT 105
5698: PUSH
5699: LD_INT 106
5701: PUSH
5702: LD_INT 107
5704: PUSH
5705: LD_INT 108
5707: PUSH
5708: LD_INT 109
5710: PUSH
5711: LD_INT 110
5713: PUSH
5714: LD_INT 111
5716: PUSH
5717: LD_INT 112
5719: PUSH
5720: LD_INT 113
5722: PUSH
5723: LD_INT 114
5725: PUSH
5726: LD_INT 116
5728: PUSH
5729: LD_INT 117
5731: PUSH
5732: LD_INT 118
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: ST_TO_ADDR
5758: GO 6997
5760: LD_INT 14
5762: DOUBLE
5763: EQUAL
5764: IFTRUE 5768
5766: GO 5992
5768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5769: LD_ADDR_VAR 0 2
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: LD_INT 2
5779: PUSH
5780: LD_INT 3
5782: PUSH
5783: LD_INT 4
5785: PUSH
5786: LD_INT 5
5788: PUSH
5789: LD_INT 6
5791: PUSH
5792: LD_INT 7
5794: PUSH
5795: LD_INT 8
5797: PUSH
5798: LD_INT 9
5800: PUSH
5801: LD_INT 10
5803: PUSH
5804: LD_INT 11
5806: PUSH
5807: LD_INT 12
5809: PUSH
5810: LD_INT 13
5812: PUSH
5813: LD_INT 14
5815: PUSH
5816: LD_INT 15
5818: PUSH
5819: LD_INT 16
5821: PUSH
5822: LD_INT 17
5824: PUSH
5825: LD_INT 18
5827: PUSH
5828: LD_INT 19
5830: PUSH
5831: LD_INT 20
5833: PUSH
5834: LD_INT 21
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 23
5842: PUSH
5843: LD_INT 24
5845: PUSH
5846: LD_INT 25
5848: PUSH
5849: LD_INT 26
5851: PUSH
5852: LD_INT 27
5854: PUSH
5855: LD_INT 28
5857: PUSH
5858: LD_INT 29
5860: PUSH
5861: LD_INT 30
5863: PUSH
5864: LD_INT 31
5866: PUSH
5867: LD_INT 32
5869: PUSH
5870: LD_INT 33
5872: PUSH
5873: LD_INT 34
5875: PUSH
5876: LD_INT 36
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 101
5918: PUSH
5919: LD_INT 102
5921: PUSH
5922: LD_INT 103
5924: PUSH
5925: LD_INT 104
5927: PUSH
5928: LD_INT 105
5930: PUSH
5931: LD_INT 106
5933: PUSH
5934: LD_INT 107
5936: PUSH
5937: LD_INT 108
5939: PUSH
5940: LD_INT 109
5942: PUSH
5943: LD_INT 110
5945: PUSH
5946: LD_INT 111
5948: PUSH
5949: LD_INT 112
5951: PUSH
5952: LD_INT 113
5954: PUSH
5955: LD_INT 114
5957: PUSH
5958: LD_INT 116
5960: PUSH
5961: LD_INT 117
5963: PUSH
5964: LD_INT 118
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: ST_TO_ADDR
5990: GO 6997
5992: LD_INT 15
5994: DOUBLE
5995: EQUAL
5996: IFTRUE 6000
5998: GO 6224
6000: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
6001: LD_ADDR_VAR 0 2
6005: PUSH
6006: LD_INT 1
6008: PUSH
6009: LD_INT 2
6011: PUSH
6012: LD_INT 3
6014: PUSH
6015: LD_INT 4
6017: PUSH
6018: LD_INT 5
6020: PUSH
6021: LD_INT 6
6023: PUSH
6024: LD_INT 7
6026: PUSH
6027: LD_INT 8
6029: PUSH
6030: LD_INT 9
6032: PUSH
6033: LD_INT 10
6035: PUSH
6036: LD_INT 11
6038: PUSH
6039: LD_INT 12
6041: PUSH
6042: LD_INT 13
6044: PUSH
6045: LD_INT 14
6047: PUSH
6048: LD_INT 15
6050: PUSH
6051: LD_INT 16
6053: PUSH
6054: LD_INT 17
6056: PUSH
6057: LD_INT 18
6059: PUSH
6060: LD_INT 19
6062: PUSH
6063: LD_INT 20
6065: PUSH
6066: LD_INT 21
6068: PUSH
6069: LD_INT 22
6071: PUSH
6072: LD_INT 23
6074: PUSH
6075: LD_INT 24
6077: PUSH
6078: LD_INT 25
6080: PUSH
6081: LD_INT 26
6083: PUSH
6084: LD_INT 27
6086: PUSH
6087: LD_INT 28
6089: PUSH
6090: LD_INT 29
6092: PUSH
6093: LD_INT 30
6095: PUSH
6096: LD_INT 31
6098: PUSH
6099: LD_INT 32
6101: PUSH
6102: LD_INT 33
6104: PUSH
6105: LD_INT 34
6107: PUSH
6108: LD_INT 36
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 101
6150: PUSH
6151: LD_INT 102
6153: PUSH
6154: LD_INT 103
6156: PUSH
6157: LD_INT 104
6159: PUSH
6160: LD_INT 105
6162: PUSH
6163: LD_INT 106
6165: PUSH
6166: LD_INT 107
6168: PUSH
6169: LD_INT 108
6171: PUSH
6172: LD_INT 109
6174: PUSH
6175: LD_INT 110
6177: PUSH
6178: LD_INT 111
6180: PUSH
6181: LD_INT 112
6183: PUSH
6184: LD_INT 113
6186: PUSH
6187: LD_INT 114
6189: PUSH
6190: LD_INT 116
6192: PUSH
6193: LD_INT 117
6195: PUSH
6196: LD_INT 118
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: ST_TO_ADDR
6222: GO 6997
6224: LD_INT 16
6226: DOUBLE
6227: EQUAL
6228: IFTRUE 6232
6230: GO 6368
6232: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6233: LD_ADDR_VAR 0 2
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 4
6243: PUSH
6244: LD_INT 5
6246: PUSH
6247: LD_INT 7
6249: PUSH
6250: LD_INT 11
6252: PUSH
6253: LD_INT 12
6255: PUSH
6256: LD_INT 15
6258: PUSH
6259: LD_INT 16
6261: PUSH
6262: LD_INT 20
6264: PUSH
6265: LD_INT 21
6267: PUSH
6268: LD_INT 22
6270: PUSH
6271: LD_INT 23
6273: PUSH
6274: LD_INT 25
6276: PUSH
6277: LD_INT 26
6279: PUSH
6280: LD_INT 30
6282: PUSH
6283: LD_INT 31
6285: PUSH
6286: LD_INT 32
6288: PUSH
6289: LD_INT 33
6291: PUSH
6292: LD_INT 34
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 101
6318: PUSH
6319: LD_INT 102
6321: PUSH
6322: LD_INT 103
6324: PUSH
6325: LD_INT 106
6327: PUSH
6328: LD_INT 108
6330: PUSH
6331: LD_INT 112
6333: PUSH
6334: LD_INT 113
6336: PUSH
6337: LD_INT 114
6339: PUSH
6340: LD_INT 116
6342: PUSH
6343: LD_INT 117
6345: PUSH
6346: LD_INT 118
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: ST_TO_ADDR
6366: GO 6997
6368: LD_INT 17
6370: DOUBLE
6371: EQUAL
6372: IFTRUE 6376
6374: GO 6600
6376: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: LD_INT 1
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: LD_INT 4
6393: PUSH
6394: LD_INT 5
6396: PUSH
6397: LD_INT 6
6399: PUSH
6400: LD_INT 7
6402: PUSH
6403: LD_INT 8
6405: PUSH
6406: LD_INT 9
6408: PUSH
6409: LD_INT 10
6411: PUSH
6412: LD_INT 11
6414: PUSH
6415: LD_INT 12
6417: PUSH
6418: LD_INT 13
6420: PUSH
6421: LD_INT 14
6423: PUSH
6424: LD_INT 15
6426: PUSH
6427: LD_INT 16
6429: PUSH
6430: LD_INT 17
6432: PUSH
6433: LD_INT 18
6435: PUSH
6436: LD_INT 19
6438: PUSH
6439: LD_INT 20
6441: PUSH
6442: LD_INT 21
6444: PUSH
6445: LD_INT 22
6447: PUSH
6448: LD_INT 23
6450: PUSH
6451: LD_INT 24
6453: PUSH
6454: LD_INT 25
6456: PUSH
6457: LD_INT 26
6459: PUSH
6460: LD_INT 27
6462: PUSH
6463: LD_INT 28
6465: PUSH
6466: LD_INT 29
6468: PUSH
6469: LD_INT 30
6471: PUSH
6472: LD_INT 31
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 33
6480: PUSH
6481: LD_INT 34
6483: PUSH
6484: LD_INT 36
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 101
6526: PUSH
6527: LD_INT 102
6529: PUSH
6530: LD_INT 103
6532: PUSH
6533: LD_INT 104
6535: PUSH
6536: LD_INT 105
6538: PUSH
6539: LD_INT 106
6541: PUSH
6542: LD_INT 107
6544: PUSH
6545: LD_INT 108
6547: PUSH
6548: LD_INT 109
6550: PUSH
6551: LD_INT 110
6553: PUSH
6554: LD_INT 111
6556: PUSH
6557: LD_INT 112
6559: PUSH
6560: LD_INT 113
6562: PUSH
6563: LD_INT 114
6565: PUSH
6566: LD_INT 116
6568: PUSH
6569: LD_INT 117
6571: PUSH
6572: LD_INT 118
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: ST_TO_ADDR
6598: GO 6997
6600: LD_INT 18
6602: DOUBLE
6603: EQUAL
6604: IFTRUE 6608
6606: GO 6756
6608: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6609: LD_ADDR_VAR 0 2
6613: PUSH
6614: LD_INT 2
6616: PUSH
6617: LD_INT 4
6619: PUSH
6620: LD_INT 5
6622: PUSH
6623: LD_INT 7
6625: PUSH
6626: LD_INT 11
6628: PUSH
6629: LD_INT 12
6631: PUSH
6632: LD_INT 15
6634: PUSH
6635: LD_INT 16
6637: PUSH
6638: LD_INT 20
6640: PUSH
6641: LD_INT 21
6643: PUSH
6644: LD_INT 22
6646: PUSH
6647: LD_INT 23
6649: PUSH
6650: LD_INT 25
6652: PUSH
6653: LD_INT 26
6655: PUSH
6656: LD_INT 30
6658: PUSH
6659: LD_INT 31
6661: PUSH
6662: LD_INT 32
6664: PUSH
6665: LD_INT 33
6667: PUSH
6668: LD_INT 34
6670: PUSH
6671: LD_INT 35
6673: PUSH
6674: LD_INT 36
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 101
6702: PUSH
6703: LD_INT 102
6705: PUSH
6706: LD_INT 103
6708: PUSH
6709: LD_INT 106
6711: PUSH
6712: LD_INT 108
6714: PUSH
6715: LD_INT 112
6717: PUSH
6718: LD_INT 113
6720: PUSH
6721: LD_INT 114
6723: PUSH
6724: LD_INT 115
6726: PUSH
6727: LD_INT 116
6729: PUSH
6730: LD_INT 117
6732: PUSH
6733: LD_INT 118
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: ST_TO_ADDR
6754: GO 6997
6756: LD_INT 19
6758: DOUBLE
6759: EQUAL
6760: IFTRUE 6764
6762: GO 6996
6764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6765: LD_ADDR_VAR 0 2
6769: PUSH
6770: LD_INT 1
6772: PUSH
6773: LD_INT 2
6775: PUSH
6776: LD_INT 3
6778: PUSH
6779: LD_INT 4
6781: PUSH
6782: LD_INT 5
6784: PUSH
6785: LD_INT 6
6787: PUSH
6788: LD_INT 7
6790: PUSH
6791: LD_INT 8
6793: PUSH
6794: LD_INT 9
6796: PUSH
6797: LD_INT 10
6799: PUSH
6800: LD_INT 11
6802: PUSH
6803: LD_INT 12
6805: PUSH
6806: LD_INT 13
6808: PUSH
6809: LD_INT 14
6811: PUSH
6812: LD_INT 15
6814: PUSH
6815: LD_INT 16
6817: PUSH
6818: LD_INT 17
6820: PUSH
6821: LD_INT 18
6823: PUSH
6824: LD_INT 19
6826: PUSH
6827: LD_INT 20
6829: PUSH
6830: LD_INT 21
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 23
6838: PUSH
6839: LD_INT 24
6841: PUSH
6842: LD_INT 25
6844: PUSH
6845: LD_INT 26
6847: PUSH
6848: LD_INT 27
6850: PUSH
6851: LD_INT 28
6853: PUSH
6854: LD_INT 29
6856: PUSH
6857: LD_INT 30
6859: PUSH
6860: LD_INT 31
6862: PUSH
6863: LD_INT 32
6865: PUSH
6866: LD_INT 33
6868: PUSH
6869: LD_INT 34
6871: PUSH
6872: LD_INT 35
6874: PUSH
6875: LD_INT 36
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 101
6918: PUSH
6919: LD_INT 102
6921: PUSH
6922: LD_INT 103
6924: PUSH
6925: LD_INT 104
6927: PUSH
6928: LD_INT 105
6930: PUSH
6931: LD_INT 106
6933: PUSH
6934: LD_INT 107
6936: PUSH
6937: LD_INT 108
6939: PUSH
6940: LD_INT 109
6942: PUSH
6943: LD_INT 110
6945: PUSH
6946: LD_INT 111
6948: PUSH
6949: LD_INT 112
6951: PUSH
6952: LD_INT 113
6954: PUSH
6955: LD_INT 114
6957: PUSH
6958: LD_INT 115
6960: PUSH
6961: LD_INT 116
6963: PUSH
6964: LD_INT 117
6966: PUSH
6967: LD_INT 118
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: ST_TO_ADDR
6994: GO 6997
6996: POP
// end else
6997: GO 7228
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6999: LD_ADDR_VAR 0 2
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: LD_INT 3
7012: PUSH
7013: LD_INT 4
7015: PUSH
7016: LD_INT 5
7018: PUSH
7019: LD_INT 6
7021: PUSH
7022: LD_INT 7
7024: PUSH
7025: LD_INT 8
7027: PUSH
7028: LD_INT 9
7030: PUSH
7031: LD_INT 10
7033: PUSH
7034: LD_INT 11
7036: PUSH
7037: LD_INT 12
7039: PUSH
7040: LD_INT 13
7042: PUSH
7043: LD_INT 14
7045: PUSH
7046: LD_INT 15
7048: PUSH
7049: LD_INT 16
7051: PUSH
7052: LD_INT 17
7054: PUSH
7055: LD_INT 18
7057: PUSH
7058: LD_INT 19
7060: PUSH
7061: LD_INT 20
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 22
7069: PUSH
7070: LD_INT 23
7072: PUSH
7073: LD_INT 24
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 26
7081: PUSH
7082: LD_INT 27
7084: PUSH
7085: LD_INT 28
7087: PUSH
7088: LD_INT 29
7090: PUSH
7091: LD_INT 30
7093: PUSH
7094: LD_INT 31
7096: PUSH
7097: LD_INT 32
7099: PUSH
7100: LD_INT 33
7102: PUSH
7103: LD_INT 34
7105: PUSH
7106: LD_INT 35
7108: PUSH
7109: LD_INT 36
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 101
7152: PUSH
7153: LD_INT 102
7155: PUSH
7156: LD_INT 103
7158: PUSH
7159: LD_INT 104
7161: PUSH
7162: LD_INT 105
7164: PUSH
7165: LD_INT 106
7167: PUSH
7168: LD_INT 107
7170: PUSH
7171: LD_INT 108
7173: PUSH
7174: LD_INT 109
7176: PUSH
7177: LD_INT 110
7179: PUSH
7180: LD_INT 111
7182: PUSH
7183: LD_INT 112
7185: PUSH
7186: LD_INT 113
7188: PUSH
7189: LD_INT 114
7191: PUSH
7192: LD_INT 115
7194: PUSH
7195: LD_INT 116
7197: PUSH
7198: LD_INT 117
7200: PUSH
7201: LD_INT 118
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: ST_TO_ADDR
// if result then
7228: LD_VAR 0 2
7232: IFFALSE 8018
// begin normal :=  ;
7234: LD_ADDR_VAR 0 5
7238: PUSH
7239: LD_STRING 
7241: ST_TO_ADDR
// hardcore :=  ;
7242: LD_ADDR_VAR 0 6
7246: PUSH
7247: LD_STRING 
7249: ST_TO_ADDR
// active :=  ;
7250: LD_ADDR_VAR 0 7
7254: PUSH
7255: LD_STRING 
7257: ST_TO_ADDR
// for i = 1 to normalCounter do
7258: LD_ADDR_VAR 0 8
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_EXP 9
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7375
// begin tmp := 0 ;
7276: LD_ADDR_VAR 0 3
7280: PUSH
7281: LD_STRING 0
7283: ST_TO_ADDR
// if result [ 1 ] then
7284: LD_VAR 0 2
7288: PUSH
7289: LD_INT 1
7291: ARRAY
7292: IFFALSE 7357
// if result [ 1 ] [ 1 ] = i then
7294: LD_VAR 0 2
7298: PUSH
7299: LD_INT 1
7301: ARRAY
7302: PUSH
7303: LD_INT 1
7305: ARRAY
7306: PUSH
7307: LD_VAR 0 8
7311: EQUAL
7312: IFFALSE 7357
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7314: LD_ADDR_VAR 0 2
7318: PUSH
7319: LD_VAR 0 2
7323: PPUSH
7324: LD_INT 1
7326: PPUSH
7327: LD_VAR 0 2
7331: PUSH
7332: LD_INT 1
7334: ARRAY
7335: PPUSH
7336: LD_INT 1
7338: PPUSH
7339: CALL_OW 3
7343: PPUSH
7344: CALL_OW 1
7348: ST_TO_ADDR
// tmp := 1 ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_STRING 1
7356: ST_TO_ADDR
// end ; normal := normal & tmp ;
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 5
7366: PUSH
7367: LD_VAR 0 3
7371: STR
7372: ST_TO_ADDR
// end ;
7373: GO 7273
7375: POP
7376: POP
// for i = 1 to hardcoreCounter do
7377: LD_ADDR_VAR 0 8
7381: PUSH
7382: DOUBLE
7383: LD_INT 1
7385: DEC
7386: ST_TO_ADDR
7387: LD_EXP 10
7391: PUSH
7392: FOR_TO
7393: IFFALSE 7498
// begin tmp := 0 ;
7395: LD_ADDR_VAR 0 3
7399: PUSH
7400: LD_STRING 0
7402: ST_TO_ADDR
// if result [ 2 ] then
7403: LD_VAR 0 2
7407: PUSH
7408: LD_INT 2
7410: ARRAY
7411: IFFALSE 7480
// if result [ 2 ] [ 1 ] = 100 + i then
7413: LD_VAR 0 2
7417: PUSH
7418: LD_INT 2
7420: ARRAY
7421: PUSH
7422: LD_INT 1
7424: ARRAY
7425: PUSH
7426: LD_INT 100
7428: PUSH
7429: LD_VAR 0 8
7433: PLUS
7434: EQUAL
7435: IFFALSE 7480
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7437: LD_ADDR_VAR 0 2
7441: PUSH
7442: LD_VAR 0 2
7446: PPUSH
7447: LD_INT 2
7449: PPUSH
7450: LD_VAR 0 2
7454: PUSH
7455: LD_INT 2
7457: ARRAY
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: CALL_OW 3
7466: PPUSH
7467: CALL_OW 1
7471: ST_TO_ADDR
// tmp := 1 ;
7472: LD_ADDR_VAR 0 3
7476: PUSH
7477: LD_STRING 1
7479: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7480: LD_ADDR_VAR 0 6
7484: PUSH
7485: LD_VAR 0 6
7489: PUSH
7490: LD_VAR 0 3
7494: STR
7495: ST_TO_ADDR
// end ;
7496: GO 7392
7498: POP
7499: POP
// if isGameLoad then
7500: LD_VAR 0 1
7504: IFFALSE 7979
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7506: LD_ADDR_VAR 0 4
7510: PUSH
7511: LD_EXP 13
7515: PUSH
7516: LD_EXP 12
7520: PUSH
7521: LD_EXP 14
7525: PUSH
7526: LD_EXP 11
7530: PUSH
7531: LD_EXP 15
7535: PUSH
7536: LD_EXP 16
7540: PUSH
7541: LD_EXP 17
7545: PUSH
7546: LD_EXP 18
7550: PUSH
7551: LD_EXP 19
7555: PUSH
7556: LD_EXP 20
7560: PUSH
7561: LD_EXP 21
7565: PUSH
7566: LD_EXP 22
7570: PUSH
7571: LD_EXP 23
7575: PUSH
7576: LD_EXP 24
7580: PUSH
7581: LD_EXP 32
7585: PUSH
7586: LD_EXP 33
7590: PUSH
7591: LD_EXP 34
7595: PUSH
7596: LD_EXP 35
7600: PUSH
7601: LD_EXP 37
7605: PUSH
7606: LD_EXP 38
7610: PUSH
7611: LD_EXP 39
7615: PUSH
7616: LD_EXP 42
7620: PUSH
7621: LD_EXP 44
7625: PUSH
7626: LD_EXP 45
7630: PUSH
7631: LD_EXP 46
7635: PUSH
7636: LD_EXP 48
7640: PUSH
7641: LD_EXP 49
7645: PUSH
7646: LD_EXP 52
7650: PUSH
7651: LD_EXP 53
7655: PUSH
7656: LD_EXP 54
7660: PUSH
7661: LD_EXP 55
7665: PUSH
7666: LD_EXP 56
7670: PUSH
7671: LD_EXP 57
7675: PUSH
7676: LD_EXP 58
7680: PUSH
7681: LD_EXP 59
7685: PUSH
7686: LD_EXP 60
7690: PUSH
7691: LD_EXP 25
7695: PUSH
7696: LD_EXP 26
7700: PUSH
7701: LD_EXP 29
7705: PUSH
7706: LD_EXP 30
7710: PUSH
7711: LD_EXP 31
7715: PUSH
7716: LD_EXP 27
7720: PUSH
7721: LD_EXP 28
7725: PUSH
7726: LD_EXP 36
7730: PUSH
7731: LD_EXP 40
7735: PUSH
7736: LD_EXP 41
7740: PUSH
7741: LD_EXP 43
7745: PUSH
7746: LD_EXP 47
7750: PUSH
7751: LD_EXP 50
7755: PUSH
7756: LD_EXP 51
7760: PUSH
7761: LD_EXP 61
7765: PUSH
7766: LD_EXP 62
7770: PUSH
7771: LD_EXP 63
7775: PUSH
7776: LD_EXP 64
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: ST_TO_ADDR
// tmp :=  ;
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_STRING 
7844: ST_TO_ADDR
// for i = 1 to normalCounter do
7845: LD_ADDR_VAR 0 8
7849: PUSH
7850: DOUBLE
7851: LD_INT 1
7853: DEC
7854: ST_TO_ADDR
7855: LD_EXP 9
7859: PUSH
7860: FOR_TO
7861: IFFALSE 7897
// begin if flags [ i ] then
7863: LD_VAR 0 4
7867: PUSH
7868: LD_VAR 0 8
7872: ARRAY
7873: IFFALSE 7895
// tmp := tmp & i & ; ;
7875: LD_ADDR_VAR 0 3
7879: PUSH
7880: LD_VAR 0 3
7884: PUSH
7885: LD_VAR 0 8
7889: STR
7890: PUSH
7891: LD_STRING ;
7893: STR
7894: ST_TO_ADDR
// end ;
7895: GO 7860
7897: POP
7898: POP
// for i = 1 to hardcoreCounter do
7899: LD_ADDR_VAR 0 8
7903: PUSH
7904: DOUBLE
7905: LD_INT 1
7907: DEC
7908: ST_TO_ADDR
7909: LD_EXP 10
7913: PUSH
7914: FOR_TO
7915: IFFALSE 7961
// begin if flags [ normalCounter + i ] then
7917: LD_VAR 0 4
7921: PUSH
7922: LD_EXP 9
7926: PUSH
7927: LD_VAR 0 8
7931: PLUS
7932: ARRAY
7933: IFFALSE 7959
// tmp := tmp & ( 100 + i ) & ; ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_VAR 0 3
7944: PUSH
7945: LD_INT 100
7947: PUSH
7948: LD_VAR 0 8
7952: PLUS
7953: STR
7954: PUSH
7955: LD_STRING ;
7957: STR
7958: ST_TO_ADDR
// end ;
7959: GO 7914
7961: POP
7962: POP
// if tmp then
7963: LD_VAR 0 3
7967: IFFALSE 7979
// active := tmp ;
7969: LD_ADDR_VAR 0 7
7973: PUSH
7974: LD_VAR 0 3
7978: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7979: LD_STRING getStreamItemsFromMission("
7981: PUSH
7982: LD_VAR 0 5
7986: STR
7987: PUSH
7988: LD_STRING ","
7990: STR
7991: PUSH
7992: LD_VAR 0 6
7996: STR
7997: PUSH
7998: LD_STRING ","
8000: STR
8001: PUSH
8002: LD_VAR 0 7
8006: STR
8007: PUSH
8008: LD_STRING ")
8010: STR
8011: PPUSH
8012: CALL_OW 559
// end else
8016: GO 8025
// ToLua ( getStreamItemsFromMission("","","") ) ;
8018: LD_STRING getStreamItemsFromMission("","","")
8020: PPUSH
8021: CALL_OW 559
// end ;
8025: LD_VAR 0 2
8029: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8030: LD_EXP 8
8034: PUSH
8035: LD_EXP 13
8039: AND
8040: IFFALSE 8164
8042: GO 8044
8044: DISABLE
8045: LD_INT 0
8047: PPUSH
8048: PPUSH
// begin enable ;
8049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_INT 22
8057: PUSH
8058: LD_OWVAR 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 2
8069: PUSH
8070: LD_INT 34
8072: PUSH
8073: LD_INT 7
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 34
8082: PUSH
8083: LD_INT 45
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 34
8092: PUSH
8093: LD_INT 28
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 47
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PPUSH
8121: CALL_OW 69
8125: ST_TO_ADDR
// if not tmp then
8126: LD_VAR 0 2
8130: NOT
8131: IFFALSE 8135
// exit ;
8133: GO 8164
// for i in tmp do
8135: LD_ADDR_VAR 0 1
8139: PUSH
8140: LD_VAR 0 2
8144: PUSH
8145: FOR_IN
8146: IFFALSE 8162
// begin SetLives ( i , 0 ) ;
8148: LD_VAR 0 1
8152: PPUSH
8153: LD_INT 0
8155: PPUSH
8156: CALL_OW 234
// end ;
8160: GO 8145
8162: POP
8163: POP
// end ;
8164: PPOPN 2
8166: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8167: LD_EXP 8
8171: PUSH
8172: LD_EXP 14
8176: AND
8177: IFFALSE 8261
8179: GO 8181
8181: DISABLE
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
// begin enable ;
8186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8187: LD_ADDR_VAR 0 2
8191: PUSH
8192: LD_INT 22
8194: PUSH
8195: LD_OWVAR 2
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 32
8206: PUSH
8207: LD_INT 3
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PPUSH
8218: CALL_OW 69
8222: ST_TO_ADDR
// if not tmp then
8223: LD_VAR 0 2
8227: NOT
8228: IFFALSE 8232
// exit ;
8230: GO 8261
// for i in tmp do
8232: LD_ADDR_VAR 0 1
8236: PUSH
8237: LD_VAR 0 2
8241: PUSH
8242: FOR_IN
8243: IFFALSE 8259
// begin SetLives ( i , 0 ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 234
// end ;
8257: GO 8242
8259: POP
8260: POP
// end ;
8261: PPOPN 2
8263: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8264: LD_EXP 8
8268: PUSH
8269: LD_EXP 11
8273: AND
8274: IFFALSE 8367
8276: GO 8278
8278: DISABLE
8279: LD_INT 0
8281: PPUSH
// begin enable ;
8282: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8283: LD_ADDR_VAR 0 1
8287: PUSH
8288: LD_INT 22
8290: PUSH
8291: LD_OWVAR 2
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: LD_INT 25
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 25
8315: PUSH
8316: LD_INT 9
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 25
8325: PUSH
8326: LD_INT 8
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: PUSH
8348: FOR_IN
8349: IFFALSE 8365
// begin SetClass ( i , 1 ) ;
8351: LD_VAR 0 1
8355: PPUSH
8356: LD_INT 1
8358: PPUSH
8359: CALL_OW 336
// end ;
8363: GO 8348
8365: POP
8366: POP
// end ;
8367: PPOPN 1
8369: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8370: LD_EXP 8
8374: PUSH
8375: LD_EXP 12
8379: AND
8380: PUSH
8381: LD_OWVAR 65
8385: PUSH
8386: LD_INT 7
8388: LESS
8389: AND
8390: IFFALSE 8404
8392: GO 8394
8394: DISABLE
// begin enable ;
8395: ENABLE
// game_speed := 7 ;
8396: LD_ADDR_OWVAR 65
8400: PUSH
8401: LD_INT 7
8403: ST_TO_ADDR
// end ;
8404: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8405: LD_EXP 8
8409: PUSH
8410: LD_EXP 15
8414: AND
8415: IFFALSE 8617
8417: GO 8419
8419: DISABLE
8420: LD_INT 0
8422: PPUSH
8423: PPUSH
8424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8425: LD_ADDR_VAR 0 3
8429: PUSH
8430: LD_INT 81
8432: PUSH
8433: LD_OWVAR 2
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 21
8444: PUSH
8445: LD_INT 1
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 69
8460: ST_TO_ADDR
// if not tmp then
8461: LD_VAR 0 3
8465: NOT
8466: IFFALSE 8470
// exit ;
8468: GO 8617
// if tmp > 5 then
8470: LD_VAR 0 3
8474: PUSH
8475: LD_INT 5
8477: GREATER
8478: IFFALSE 8490
// k := 5 else
8480: LD_ADDR_VAR 0 2
8484: PUSH
8485: LD_INT 5
8487: ST_TO_ADDR
8488: GO 8500
// k := tmp ;
8490: LD_ADDR_VAR 0 2
8494: PUSH
8495: LD_VAR 0 3
8499: ST_TO_ADDR
// for i := 1 to k do
8500: LD_ADDR_VAR 0 1
8504: PUSH
8505: DOUBLE
8506: LD_INT 1
8508: DEC
8509: ST_TO_ADDR
8510: LD_VAR 0 2
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8615
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_VAR 0 1
8527: ARRAY
8528: PPUSH
8529: LD_VAR 0 1
8533: PUSH
8534: LD_INT 4
8536: MOD
8537: PUSH
8538: LD_INT 1
8540: PLUS
8541: PPUSH
8542: CALL_OW 259
8546: PUSH
8547: LD_INT 10
8549: LESS
8550: IFFALSE 8613
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8552: LD_VAR 0 3
8556: PUSH
8557: LD_VAR 0 1
8561: ARRAY
8562: PPUSH
8563: LD_VAR 0 1
8567: PUSH
8568: LD_INT 4
8570: MOD
8571: PUSH
8572: LD_INT 1
8574: PLUS
8575: PPUSH
8576: LD_VAR 0 3
8580: PUSH
8581: LD_VAR 0 1
8585: ARRAY
8586: PPUSH
8587: LD_VAR 0 1
8591: PUSH
8592: LD_INT 4
8594: MOD
8595: PUSH
8596: LD_INT 1
8598: PLUS
8599: PPUSH
8600: CALL_OW 259
8604: PUSH
8605: LD_INT 1
8607: PLUS
8608: PPUSH
8609: CALL_OW 237
8613: GO 8515
8615: POP
8616: POP
// end ;
8617: PPOPN 3
8619: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8620: LD_EXP 8
8624: PUSH
8625: LD_EXP 16
8629: AND
8630: IFFALSE 8650
8632: GO 8634
8634: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8635: LD_INT 4
8637: PPUSH
8638: LD_OWVAR 2
8642: PPUSH
8643: LD_INT 0
8645: PPUSH
8646: CALL_OW 324
8650: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8651: LD_EXP 8
8655: PUSH
8656: LD_EXP 45
8660: AND
8661: IFFALSE 8681
8663: GO 8665
8665: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8666: LD_INT 19
8668: PPUSH
8669: LD_OWVAR 2
8673: PPUSH
8674: LD_INT 0
8676: PPUSH
8677: CALL_OW 324
8681: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8682: LD_EXP 8
8686: PUSH
8687: LD_EXP 17
8691: AND
8692: IFFALSE 8794
8694: GO 8696
8696: DISABLE
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
// begin enable ;
8701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8702: LD_ADDR_VAR 0 2
8706: PUSH
8707: LD_INT 22
8709: PUSH
8710: LD_OWVAR 2
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 2
8721: PUSH
8722: LD_INT 34
8724: PUSH
8725: LD_INT 11
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 34
8734: PUSH
8735: LD_INT 30
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PPUSH
8751: CALL_OW 69
8755: ST_TO_ADDR
// if not tmp then
8756: LD_VAR 0 2
8760: NOT
8761: IFFALSE 8765
// exit ;
8763: GO 8794
// for i in tmp do
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: LD_VAR 0 2
8774: PUSH
8775: FOR_IN
8776: IFFALSE 8792
// begin SetLives ( i , 0 ) ;
8778: LD_VAR 0 1
8782: PPUSH
8783: LD_INT 0
8785: PPUSH
8786: CALL_OW 234
// end ;
8790: GO 8775
8792: POP
8793: POP
// end ;
8794: PPOPN 2
8796: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8797: LD_EXP 8
8801: PUSH
8802: LD_EXP 18
8806: AND
8807: IFFALSE 8827
8809: GO 8811
8811: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8812: LD_INT 32
8814: PPUSH
8815: LD_OWVAR 2
8819: PPUSH
8820: LD_INT 0
8822: PPUSH
8823: CALL_OW 324
8827: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8828: LD_EXP 8
8832: PUSH
8833: LD_EXP 19
8837: AND
8838: IFFALSE 9019
8840: GO 8842
8842: DISABLE
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
8847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8848: LD_ADDR_VAR 0 2
8852: PUSH
8853: LD_INT 22
8855: PUSH
8856: LD_OWVAR 2
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 33
8867: PUSH
8868: LD_INT 3
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PPUSH
8879: CALL_OW 69
8883: ST_TO_ADDR
// if not tmp then
8884: LD_VAR 0 2
8888: NOT
8889: IFFALSE 8893
// exit ;
8891: GO 9019
// side := 0 ;
8893: LD_ADDR_VAR 0 3
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// for i := 1 to 8 do
8901: LD_ADDR_VAR 0 1
8905: PUSH
8906: DOUBLE
8907: LD_INT 1
8909: DEC
8910: ST_TO_ADDR
8911: LD_INT 8
8913: PUSH
8914: FOR_TO
8915: IFFALSE 8963
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8917: LD_OWVAR 2
8921: PUSH
8922: LD_VAR 0 1
8926: NONEQUAL
8927: PUSH
8928: LD_OWVAR 2
8932: PPUSH
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL_OW 81
8942: PUSH
8943: LD_INT 2
8945: EQUAL
8946: AND
8947: IFFALSE 8961
// begin side := i ;
8949: LD_ADDR_VAR 0 3
8953: PUSH
8954: LD_VAR 0 1
8958: ST_TO_ADDR
// break ;
8959: GO 8963
// end ;
8961: GO 8914
8963: POP
8964: POP
// if not side then
8965: LD_VAR 0 3
8969: NOT
8970: IFFALSE 8974
// exit ;
8972: GO 9019
// for i := 1 to tmp do
8974: LD_ADDR_VAR 0 1
8978: PUSH
8979: DOUBLE
8980: LD_INT 1
8982: DEC
8983: ST_TO_ADDR
8984: LD_VAR 0 2
8988: PUSH
8989: FOR_TO
8990: IFFALSE 9017
// if Prob ( 60 ) then
8992: LD_INT 60
8994: PPUSH
8995: CALL_OW 13
8999: IFFALSE 9015
// SetSide ( i , side ) ;
9001: LD_VAR 0 1
9005: PPUSH
9006: LD_VAR 0 3
9010: PPUSH
9011: CALL_OW 235
9015: GO 8989
9017: POP
9018: POP
// end ;
9019: PPOPN 3
9021: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9022: LD_EXP 8
9026: PUSH
9027: LD_EXP 21
9031: AND
9032: IFFALSE 9151
9034: GO 9036
9036: DISABLE
9037: LD_INT 0
9039: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9040: LD_ADDR_VAR 0 1
9044: PUSH
9045: LD_INT 22
9047: PUSH
9048: LD_OWVAR 2
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 21
9059: PUSH
9060: LD_INT 1
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 3
9069: PUSH
9070: LD_INT 23
9072: PUSH
9073: LD_INT 0
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 69
9093: PUSH
9094: FOR_IN
9095: IFFALSE 9149
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 257
9106: PUSH
9107: LD_INT 1
9109: PUSH
9110: LD_INT 2
9112: PUSH
9113: LD_INT 3
9115: PUSH
9116: LD_INT 4
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: IN
9125: IFFALSE 9147
// SetClass ( un , rand ( 1 , 4 ) ) ;
9127: LD_VAR 0 1
9131: PPUSH
9132: LD_INT 1
9134: PPUSH
9135: LD_INT 4
9137: PPUSH
9138: CALL_OW 12
9142: PPUSH
9143: CALL_OW 336
9147: GO 9094
9149: POP
9150: POP
// end ;
9151: PPOPN 1
9153: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9154: LD_EXP 8
9158: PUSH
9159: LD_EXP 20
9163: AND
9164: IFFALSE 9243
9166: GO 9168
9168: DISABLE
9169: LD_INT 0
9171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9172: LD_ADDR_VAR 0 1
9176: PUSH
9177: LD_INT 22
9179: PUSH
9180: LD_OWVAR 2
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 21
9191: PUSH
9192: LD_INT 3
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: ST_TO_ADDR
// if not tmp then
9208: LD_VAR 0 1
9212: NOT
9213: IFFALSE 9217
// exit ;
9215: GO 9243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9217: LD_VAR 0 1
9221: PUSH
9222: LD_INT 1
9224: PPUSH
9225: LD_VAR 0 1
9229: PPUSH
9230: CALL_OW 12
9234: ARRAY
9235: PPUSH
9236: LD_INT 100
9238: PPUSH
9239: CALL_OW 234
// end ;
9243: PPOPN 1
9245: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9246: LD_EXP 8
9250: PUSH
9251: LD_EXP 22
9255: AND
9256: IFFALSE 9354
9258: GO 9260
9260: DISABLE
9261: LD_INT 0
9263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_INT 22
9271: PUSH
9272: LD_OWVAR 2
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: LD_INT 21
9283: PUSH
9284: LD_INT 1
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PPUSH
9295: CALL_OW 69
9299: ST_TO_ADDR
// if not tmp then
9300: LD_VAR 0 1
9304: NOT
9305: IFFALSE 9309
// exit ;
9307: GO 9354
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9309: LD_VAR 0 1
9313: PUSH
9314: LD_INT 1
9316: PPUSH
9317: LD_VAR 0 1
9321: PPUSH
9322: CALL_OW 12
9326: ARRAY
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: LD_INT 4
9333: PPUSH
9334: CALL_OW 12
9338: PPUSH
9339: LD_INT 3000
9341: PPUSH
9342: LD_INT 9000
9344: PPUSH
9345: CALL_OW 12
9349: PPUSH
9350: CALL_OW 492
// end ;
9354: PPOPN 1
9356: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9357: LD_EXP 8
9361: PUSH
9362: LD_EXP 23
9366: AND
9367: IFFALSE 9387
9369: GO 9371
9371: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9372: LD_INT 1
9374: PPUSH
9375: LD_OWVAR 2
9379: PPUSH
9380: LD_INT 0
9382: PPUSH
9383: CALL_OW 324
9387: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9388: LD_EXP 8
9392: PUSH
9393: LD_EXP 24
9397: AND
9398: IFFALSE 9481
9400: GO 9402
9402: DISABLE
9403: LD_INT 0
9405: PPUSH
9406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9407: LD_ADDR_VAR 0 2
9411: PUSH
9412: LD_INT 22
9414: PUSH
9415: LD_OWVAR 2
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 21
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: ST_TO_ADDR
// if not tmp then
9443: LD_VAR 0 2
9447: NOT
9448: IFFALSE 9452
// exit ;
9450: GO 9481
// for i in tmp do
9452: LD_ADDR_VAR 0 1
9456: PUSH
9457: LD_VAR 0 2
9461: PUSH
9462: FOR_IN
9463: IFFALSE 9479
// SetBLevel ( i , 10 ) ;
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_INT 10
9472: PPUSH
9473: CALL_OW 241
9477: GO 9462
9479: POP
9480: POP
// end ;
9481: PPOPN 2
9483: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9484: LD_EXP 8
9488: PUSH
9489: LD_EXP 25
9493: AND
9494: IFFALSE 9605
9496: GO 9498
9498: DISABLE
9499: LD_INT 0
9501: PPUSH
9502: PPUSH
9503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9504: LD_ADDR_VAR 0 3
9508: PUSH
9509: LD_INT 22
9511: PUSH
9512: LD_OWVAR 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 25
9523: PUSH
9524: LD_INT 1
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 69
9539: ST_TO_ADDR
// if not tmp then
9540: LD_VAR 0 3
9544: NOT
9545: IFFALSE 9549
// exit ;
9547: GO 9605
// un := tmp [ rand ( 1 , tmp ) ] ;
9549: LD_ADDR_VAR 0 2
9553: PUSH
9554: LD_VAR 0 3
9558: PUSH
9559: LD_INT 1
9561: PPUSH
9562: LD_VAR 0 3
9566: PPUSH
9567: CALL_OW 12
9571: ARRAY
9572: ST_TO_ADDR
// if Crawls ( un ) then
9573: LD_VAR 0 2
9577: PPUSH
9578: CALL_OW 318
9582: IFFALSE 9593
// ComWalk ( un ) ;
9584: LD_VAR 0 2
9588: PPUSH
9589: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 5
9600: PPUSH
9601: CALL_OW 336
// end ;
9605: PPOPN 3
9607: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9608: LD_EXP 8
9612: PUSH
9613: LD_EXP 26
9617: AND
9618: PUSH
9619: LD_OWVAR 67
9623: PUSH
9624: LD_INT 4
9626: LESS
9627: AND
9628: IFFALSE 9647
9630: GO 9632
9632: DISABLE
// begin Difficulty := Difficulty + 1 ;
9633: LD_ADDR_OWVAR 67
9637: PUSH
9638: LD_OWVAR 67
9642: PUSH
9643: LD_INT 1
9645: PLUS
9646: ST_TO_ADDR
// end ;
9647: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9648: LD_EXP 8
9652: PUSH
9653: LD_EXP 27
9657: AND
9658: IFFALSE 9761
9660: GO 9662
9662: DISABLE
9663: LD_INT 0
9665: PPUSH
// begin for i := 1 to 5 do
9666: LD_ADDR_VAR 0 1
9670: PUSH
9671: DOUBLE
9672: LD_INT 1
9674: DEC
9675: ST_TO_ADDR
9676: LD_INT 5
9678: PUSH
9679: FOR_TO
9680: IFFALSE 9759
// begin uc_nation := nation_nature ;
9682: LD_ADDR_OWVAR 21
9686: PUSH
9687: LD_INT 0
9689: ST_TO_ADDR
// uc_side := 0 ;
9690: LD_ADDR_OWVAR 20
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9698: LD_ADDR_OWVAR 29
9702: PUSH
9703: LD_INT 12
9705: PUSH
9706: LD_INT 12
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: ST_TO_ADDR
// hc_agressivity := 20 ;
9713: LD_ADDR_OWVAR 35
9717: PUSH
9718: LD_INT 20
9720: ST_TO_ADDR
// hc_class := class_tiger ;
9721: LD_ADDR_OWVAR 28
9725: PUSH
9726: LD_INT 14
9728: ST_TO_ADDR
// hc_gallery :=  ;
9729: LD_ADDR_OWVAR 33
9733: PUSH
9734: LD_STRING 
9736: ST_TO_ADDR
// hc_name :=  ;
9737: LD_ADDR_OWVAR 26
9741: PUSH
9742: LD_STRING 
9744: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9745: CALL_OW 44
9749: PPUSH
9750: LD_INT 0
9752: PPUSH
9753: CALL_OW 51
// end ;
9757: GO 9679
9759: POP
9760: POP
// end ;
9761: PPOPN 1
9763: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9764: LD_EXP 8
9768: PUSH
9769: LD_EXP 28
9773: AND
9774: IFFALSE 9783
9776: GO 9778
9778: DISABLE
// StreamSibBomb ;
9779: CALL 9784 0 0
9783: END
// export function StreamSibBomb ; var i , x , y ; begin
9784: LD_INT 0
9786: PPUSH
9787: PPUSH
9788: PPUSH
9789: PPUSH
// result := false ;
9790: LD_ADDR_VAR 0 1
9794: PUSH
9795: LD_INT 0
9797: ST_TO_ADDR
// for i := 1 to 16 do
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: DOUBLE
9804: LD_INT 1
9806: DEC
9807: ST_TO_ADDR
9808: LD_INT 16
9810: PUSH
9811: FOR_TO
9812: IFFALSE 10011
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9814: LD_ADDR_VAR 0 3
9818: PUSH
9819: LD_INT 10
9821: PUSH
9822: LD_INT 20
9824: PUSH
9825: LD_INT 30
9827: PUSH
9828: LD_INT 40
9830: PUSH
9831: LD_INT 50
9833: PUSH
9834: LD_INT 60
9836: PUSH
9837: LD_INT 70
9839: PUSH
9840: LD_INT 80
9842: PUSH
9843: LD_INT 90
9845: PUSH
9846: LD_INT 100
9848: PUSH
9849: LD_INT 110
9851: PUSH
9852: LD_INT 120
9854: PUSH
9855: LD_INT 130
9857: PUSH
9858: LD_INT 140
9860: PUSH
9861: LD_INT 150
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 1
9883: PPUSH
9884: LD_INT 15
9886: PPUSH
9887: CALL_OW 12
9891: ARRAY
9892: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9893: LD_ADDR_VAR 0 4
9897: PUSH
9898: LD_INT 10
9900: PUSH
9901: LD_INT 20
9903: PUSH
9904: LD_INT 30
9906: PUSH
9907: LD_INT 40
9909: PUSH
9910: LD_INT 50
9912: PUSH
9913: LD_INT 60
9915: PUSH
9916: LD_INT 70
9918: PUSH
9919: LD_INT 80
9921: PUSH
9922: LD_INT 90
9924: PUSH
9925: LD_INT 100
9927: PUSH
9928: LD_INT 110
9930: PUSH
9931: LD_INT 120
9933: PUSH
9934: LD_INT 130
9936: PUSH
9937: LD_INT 140
9939: PUSH
9940: LD_INT 150
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 1
9962: PPUSH
9963: LD_INT 15
9965: PPUSH
9966: CALL_OW 12
9970: ARRAY
9971: ST_TO_ADDR
// if ValidHex ( x , y ) then
9972: LD_VAR 0 3
9976: PPUSH
9977: LD_VAR 0 4
9981: PPUSH
9982: CALL_OW 488
9986: IFFALSE 10009
// begin result := [ x , y ] ;
9988: LD_ADDR_VAR 0 1
9992: PUSH
9993: LD_VAR 0 3
9997: PUSH
9998: LD_VAR 0 4
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: ST_TO_ADDR
// break ;
10007: GO 10011
// end ; end ;
10009: GO 9811
10011: POP
10012: POP
// if result then
10013: LD_VAR 0 1
10017: IFFALSE 10077
// begin ToLua ( playSibBomb() ) ;
10019: LD_STRING playSibBomb()
10021: PPUSH
10022: CALL_OW 559
// wait ( 0 0$14 ) ;
10026: LD_INT 490
10028: PPUSH
10029: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10033: LD_VAR 0 1
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_VAR 0 1
10046: PUSH
10047: LD_INT 2
10049: ARRAY
10050: PPUSH
10051: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10055: LD_VAR 0 1
10059: PUSH
10060: LD_INT 1
10062: ARRAY
10063: PPUSH
10064: LD_VAR 0 1
10068: PUSH
10069: LD_INT 2
10071: ARRAY
10072: PPUSH
10073: CALL_OW 429
// end ; end ;
10077: LD_VAR 0 1
10081: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10082: LD_EXP 8
10086: PUSH
10087: LD_EXP 30
10091: AND
10092: IFFALSE 10104
10094: GO 10096
10096: DISABLE
// YouLost (  ) ;
10097: LD_STRING 
10099: PPUSH
10100: CALL_OW 104
10104: END
// every 0 0$1 trigger StreamModeActive and sFog do
10105: LD_EXP 8
10109: PUSH
10110: LD_EXP 29
10114: AND
10115: IFFALSE 10129
10117: GO 10119
10119: DISABLE
// FogOff ( your_side ) ;
10120: LD_OWVAR 2
10124: PPUSH
10125: CALL_OW 344
10129: END
// every 0 0$1 trigger StreamModeActive and sSun do
10130: LD_EXP 8
10134: PUSH
10135: LD_EXP 31
10139: AND
10140: IFFALSE 10168
10142: GO 10144
10144: DISABLE
// begin solar_recharge_percent := 0 ;
10145: LD_ADDR_OWVAR 79
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10153: LD_INT 10500
10155: PPUSH
10156: CALL_OW 67
// solar_recharge_percent := 100 ;
10160: LD_ADDR_OWVAR 79
10164: PUSH
10165: LD_INT 100
10167: ST_TO_ADDR
// end ;
10168: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10169: LD_EXP 8
10173: PUSH
10174: LD_EXP 32
10178: AND
10179: IFFALSE 10418
10181: GO 10183
10183: DISABLE
10184: LD_INT 0
10186: PPUSH
10187: PPUSH
10188: PPUSH
// begin tmp := [ ] ;
10189: LD_ADDR_VAR 0 3
10193: PUSH
10194: EMPTY
10195: ST_TO_ADDR
// for i := 1 to 6 do
10196: LD_ADDR_VAR 0 1
10200: PUSH
10201: DOUBLE
10202: LD_INT 1
10204: DEC
10205: ST_TO_ADDR
10206: LD_INT 6
10208: PUSH
10209: FOR_TO
10210: IFFALSE 10315
// begin uc_nation := nation_nature ;
10212: LD_ADDR_OWVAR 21
10216: PUSH
10217: LD_INT 0
10219: ST_TO_ADDR
// uc_side := 0 ;
10220: LD_ADDR_OWVAR 20
10224: PUSH
10225: LD_INT 0
10227: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10228: LD_ADDR_OWVAR 29
10232: PUSH
10233: LD_INT 12
10235: PUSH
10236: LD_INT 12
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: ST_TO_ADDR
// hc_agressivity := 20 ;
10243: LD_ADDR_OWVAR 35
10247: PUSH
10248: LD_INT 20
10250: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10251: LD_ADDR_OWVAR 28
10255: PUSH
10256: LD_INT 17
10258: ST_TO_ADDR
// hc_gallery :=  ;
10259: LD_ADDR_OWVAR 33
10263: PUSH
10264: LD_STRING 
10266: ST_TO_ADDR
// hc_name :=  ;
10267: LD_ADDR_OWVAR 26
10271: PUSH
10272: LD_STRING 
10274: ST_TO_ADDR
// un := CreateHuman ;
10275: LD_ADDR_VAR 0 2
10279: PUSH
10280: CALL_OW 44
10284: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10285: LD_VAR 0 2
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: CALL_OW 51
// tmp := tmp ^ un ;
10297: LD_ADDR_VAR 0 3
10301: PUSH
10302: LD_VAR 0 3
10306: PUSH
10307: LD_VAR 0 2
10311: ADD
10312: ST_TO_ADDR
// end ;
10313: GO 10209
10315: POP
10316: POP
// repeat wait ( 0 0$1 ) ;
10317: LD_INT 35
10319: PPUSH
10320: CALL_OW 67
// for un in tmp do
10324: LD_ADDR_VAR 0 2
10328: PUSH
10329: LD_VAR 0 3
10333: PUSH
10334: FOR_IN
10335: IFFALSE 10409
// begin if IsDead ( un ) then
10337: LD_VAR 0 2
10341: PPUSH
10342: CALL_OW 301
10346: IFFALSE 10366
// begin tmp := tmp diff un ;
10348: LD_ADDR_VAR 0 3
10352: PUSH
10353: LD_VAR 0 3
10357: PUSH
10358: LD_VAR 0 2
10362: DIFF
10363: ST_TO_ADDR
// continue ;
10364: GO 10334
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10366: LD_VAR 0 2
10370: PPUSH
10371: LD_INT 3
10373: PUSH
10374: LD_INT 22
10376: PUSH
10377: LD_INT 0
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: CALL_OW 69
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: CALL_OW 74
10402: PPUSH
10403: CALL_OW 115
// end ;
10407: GO 10334
10409: POP
10410: POP
// until not tmp ;
10411: LD_VAR 0 3
10415: NOT
10416: IFFALSE 10317
// end ;
10418: PPOPN 3
10420: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10421: LD_EXP 8
10425: PUSH
10426: LD_EXP 33
10430: AND
10431: IFFALSE 10485
10433: GO 10435
10435: DISABLE
// begin ToLua ( displayTroll(); ) ;
10436: LD_STRING displayTroll();
10438: PPUSH
10439: CALL_OW 559
// wait ( 3 3$00 ) ;
10443: LD_INT 6300
10445: PPUSH
10446: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10450: LD_STRING hideTroll();
10452: PPUSH
10453: CALL_OW 559
// wait ( 1 1$00 ) ;
10457: LD_INT 2100
10459: PPUSH
10460: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10464: LD_STRING displayTroll();
10466: PPUSH
10467: CALL_OW 559
// wait ( 1 1$00 ) ;
10471: LD_INT 2100
10473: PPUSH
10474: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10478: LD_STRING hideTroll();
10480: PPUSH
10481: CALL_OW 559
// end ;
10485: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10486: LD_EXP 8
10490: PUSH
10491: LD_EXP 34
10495: AND
10496: IFFALSE 10559
10498: GO 10500
10500: DISABLE
10501: LD_INT 0
10503: PPUSH
// begin p := 0 ;
10504: LD_ADDR_VAR 0 1
10508: PUSH
10509: LD_INT 0
10511: ST_TO_ADDR
// repeat game_speed := 1 ;
10512: LD_ADDR_OWVAR 65
10516: PUSH
10517: LD_INT 1
10519: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10520: LD_INT 35
10522: PPUSH
10523: CALL_OW 67
// p := p + 1 ;
10527: LD_ADDR_VAR 0 1
10531: PUSH
10532: LD_VAR 0 1
10536: PUSH
10537: LD_INT 1
10539: PLUS
10540: ST_TO_ADDR
// until p >= 60 ;
10541: LD_VAR 0 1
10545: PUSH
10546: LD_INT 60
10548: GREATEREQUAL
10549: IFFALSE 10512
// game_speed := 4 ;
10551: LD_ADDR_OWVAR 65
10555: PUSH
10556: LD_INT 4
10558: ST_TO_ADDR
// end ;
10559: PPOPN 1
10561: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10562: LD_EXP 8
10566: PUSH
10567: LD_EXP 35
10571: AND
10572: IFFALSE 10718
10574: GO 10576
10576: DISABLE
10577: LD_INT 0
10579: PPUSH
10580: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10581: LD_ADDR_VAR 0 1
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_OWVAR 2
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 2
10600: PUSH
10601: LD_INT 30
10603: PUSH
10604: LD_INT 0
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PPUSH
10630: CALL_OW 69
10634: ST_TO_ADDR
// if not depot then
10635: LD_VAR 0 1
10639: NOT
10640: IFFALSE 10644
// exit ;
10642: GO 10718
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10644: LD_ADDR_VAR 0 2
10648: PUSH
10649: LD_VAR 0 1
10653: PUSH
10654: LD_INT 1
10656: PPUSH
10657: LD_VAR 0 1
10661: PPUSH
10662: CALL_OW 12
10666: ARRAY
10667: PPUSH
10668: CALL_OW 274
10672: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10673: LD_VAR 0 2
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: LD_INT 0
10683: PPUSH
10684: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10688: LD_VAR 0 2
10692: PPUSH
10693: LD_INT 2
10695: PPUSH
10696: LD_INT 0
10698: PPUSH
10699: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10703: LD_VAR 0 2
10707: PPUSH
10708: LD_INT 3
10710: PPUSH
10711: LD_INT 0
10713: PPUSH
10714: CALL_OW 277
// end ;
10718: PPOPN 2
10720: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10721: LD_EXP 8
10725: PUSH
10726: LD_EXP 36
10730: AND
10731: IFFALSE 10828
10733: GO 10735
10735: DISABLE
10736: LD_INT 0
10738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10739: LD_ADDR_VAR 0 1
10743: PUSH
10744: LD_INT 22
10746: PUSH
10747: LD_OWVAR 2
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 21
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: LD_INT 3
10768: PUSH
10769: LD_INT 23
10771: PUSH
10772: LD_INT 0
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 69
10792: ST_TO_ADDR
// if not tmp then
10793: LD_VAR 0 1
10797: NOT
10798: IFFALSE 10802
// exit ;
10800: GO 10828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10802: LD_VAR 0 1
10806: PUSH
10807: LD_INT 1
10809: PPUSH
10810: LD_VAR 0 1
10814: PPUSH
10815: CALL_OW 12
10819: ARRAY
10820: PPUSH
10821: LD_INT 200
10823: PPUSH
10824: CALL_OW 234
// end ;
10828: PPOPN 1
10830: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10831: LD_EXP 8
10835: PUSH
10836: LD_EXP 37
10840: AND
10841: IFFALSE 10920
10843: GO 10845
10845: DISABLE
10846: LD_INT 0
10848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10849: LD_ADDR_VAR 0 1
10853: PUSH
10854: LD_INT 22
10856: PUSH
10857: LD_OWVAR 2
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 21
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PPUSH
10880: CALL_OW 69
10884: ST_TO_ADDR
// if not tmp then
10885: LD_VAR 0 1
10889: NOT
10890: IFFALSE 10894
// exit ;
10892: GO 10920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10894: LD_VAR 0 1
10898: PUSH
10899: LD_INT 1
10901: PPUSH
10902: LD_VAR 0 1
10906: PPUSH
10907: CALL_OW 12
10911: ARRAY
10912: PPUSH
10913: LD_INT 60
10915: PPUSH
10916: CALL_OW 234
// end ;
10920: PPOPN 1
10922: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10923: LD_EXP 8
10927: PUSH
10928: LD_EXP 38
10932: AND
10933: IFFALSE 11032
10935: GO 10937
10937: DISABLE
10938: LD_INT 0
10940: PPUSH
10941: PPUSH
// begin enable ;
10942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10943: LD_ADDR_VAR 0 1
10947: PUSH
10948: LD_INT 22
10950: PUSH
10951: LD_OWVAR 2
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 61
10962: PUSH
10963: EMPTY
10964: LIST
10965: PUSH
10966: LD_INT 33
10968: PUSH
10969: LD_INT 2
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: LIST
10980: PPUSH
10981: CALL_OW 69
10985: ST_TO_ADDR
// if not tmp then
10986: LD_VAR 0 1
10990: NOT
10991: IFFALSE 10995
// exit ;
10993: GO 11032
// for i in tmp do
10995: LD_ADDR_VAR 0 2
10999: PUSH
11000: LD_VAR 0 1
11004: PUSH
11005: FOR_IN
11006: IFFALSE 11030
// if IsControledBy ( i ) then
11008: LD_VAR 0 2
11012: PPUSH
11013: CALL_OW 312
11017: IFFALSE 11028
// ComUnlink ( i ) ;
11019: LD_VAR 0 2
11023: PPUSH
11024: CALL_OW 136
11028: GO 11005
11030: POP
11031: POP
// end ;
11032: PPOPN 2
11034: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11035: LD_EXP 8
11039: PUSH
11040: LD_EXP 39
11044: AND
11045: IFFALSE 11185
11047: GO 11049
11049: DISABLE
11050: LD_INT 0
11052: PPUSH
11053: PPUSH
// begin ToLua ( displayPowell(); ) ;
11054: LD_STRING displayPowell();
11056: PPUSH
11057: CALL_OW 559
// uc_side := 0 ;
11061: LD_ADDR_OWVAR 20
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// uc_nation := 2 ;
11069: LD_ADDR_OWVAR 21
11073: PUSH
11074: LD_INT 2
11076: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11077: LD_ADDR_OWVAR 37
11081: PUSH
11082: LD_INT 14
11084: ST_TO_ADDR
// vc_engine := engine_siberite ;
11085: LD_ADDR_OWVAR 39
11089: PUSH
11090: LD_INT 3
11092: ST_TO_ADDR
// vc_control := control_apeman ;
11093: LD_ADDR_OWVAR 38
11097: PUSH
11098: LD_INT 5
11100: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11101: LD_ADDR_OWVAR 40
11105: PUSH
11106: LD_INT 29
11108: ST_TO_ADDR
// un := CreateVehicle ;
11109: LD_ADDR_VAR 0 2
11113: PUSH
11114: CALL_OW 45
11118: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11119: LD_VAR 0 2
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11131: LD_INT 35
11133: PPUSH
11134: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11138: LD_VAR 0 2
11142: PPUSH
11143: LD_INT 22
11145: PUSH
11146: LD_OWVAR 2
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PPUSH
11155: CALL_OW 69
11159: PPUSH
11160: LD_VAR 0 2
11164: PPUSH
11165: CALL_OW 74
11169: PPUSH
11170: CALL_OW 115
// until IsDead ( un ) ;
11174: LD_VAR 0 2
11178: PPUSH
11179: CALL_OW 301
11183: IFFALSE 11131
// end ;
11185: PPOPN 2
11187: END
// every 0 0$1 trigger StreamModeActive and sStu do
11188: LD_EXP 8
11192: PUSH
11193: LD_EXP 47
11197: AND
11198: IFFALSE 11214
11200: GO 11202
11202: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11203: LD_STRING displayStucuk();
11205: PPUSH
11206: CALL_OW 559
// ResetFog ;
11210: CALL_OW 335
// end ;
11214: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11215: LD_EXP 8
11219: PUSH
11220: LD_EXP 40
11224: AND
11225: IFFALSE 11366
11227: GO 11229
11229: DISABLE
11230: LD_INT 0
11232: PPUSH
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11234: LD_ADDR_VAR 0 2
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 2
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11366
// un := tmp [ rand ( 1 , tmp ) ] ;
11279: LD_ADDR_VAR 0 1
11283: PUSH
11284: LD_VAR 0 2
11288: PUSH
11289: LD_INT 1
11291: PPUSH
11292: LD_VAR 0 2
11296: PPUSH
11297: CALL_OW 12
11301: ARRAY
11302: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11303: LD_VAR 0 1
11307: PPUSH
11308: LD_INT 0
11310: PPUSH
11311: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11315: LD_VAR 0 1
11319: PPUSH
11320: LD_OWVAR 3
11324: PUSH
11325: LD_VAR 0 1
11329: DIFF
11330: PPUSH
11331: LD_VAR 0 1
11335: PPUSH
11336: CALL_OW 74
11340: PPUSH
11341: CALL_OW 115
// wait ( 0 0$20 ) ;
11345: LD_INT 700
11347: PPUSH
11348: CALL_OW 67
// SetSide ( un , your_side ) ;
11352: LD_VAR 0 1
11356: PPUSH
11357: LD_OWVAR 2
11361: PPUSH
11362: CALL_OW 235
// end ;
11366: PPOPN 2
11368: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11369: LD_EXP 8
11373: PUSH
11374: LD_EXP 41
11378: AND
11379: IFFALSE 11485
11381: GO 11383
11383: DISABLE
11384: LD_INT 0
11386: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11387: LD_ADDR_VAR 0 1
11391: PUSH
11392: LD_INT 22
11394: PUSH
11395: LD_OWVAR 2
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: LD_INT 2
11406: PUSH
11407: LD_INT 30
11409: PUSH
11410: LD_INT 0
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 30
11419: PUSH
11420: LD_INT 1
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PPUSH
11436: CALL_OW 69
11440: ST_TO_ADDR
// if not depot then
11441: LD_VAR 0 1
11445: NOT
11446: IFFALSE 11450
// exit ;
11448: GO 11485
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11450: LD_VAR 0 1
11454: PUSH
11455: LD_INT 1
11457: ARRAY
11458: PPUSH
11459: CALL_OW 250
11463: PPUSH
11464: LD_VAR 0 1
11468: PUSH
11469: LD_INT 1
11471: ARRAY
11472: PPUSH
11473: CALL_OW 251
11477: PPUSH
11478: LD_INT 70
11480: PPUSH
11481: CALL_OW 495
// end ;
11485: PPOPN 1
11487: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11488: LD_EXP 8
11492: PUSH
11493: LD_EXP 42
11497: AND
11498: IFFALSE 11709
11500: GO 11502
11502: DISABLE
11503: LD_INT 0
11505: PPUSH
11506: PPUSH
11507: PPUSH
11508: PPUSH
11509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11510: LD_ADDR_VAR 0 5
11514: PUSH
11515: LD_INT 22
11517: PUSH
11518: LD_OWVAR 2
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 21
11529: PUSH
11530: LD_INT 1
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 69
11545: ST_TO_ADDR
// if not tmp then
11546: LD_VAR 0 5
11550: NOT
11551: IFFALSE 11555
// exit ;
11553: GO 11709
// for i in tmp do
11555: LD_ADDR_VAR 0 1
11559: PUSH
11560: LD_VAR 0 5
11564: PUSH
11565: FOR_IN
11566: IFFALSE 11707
// begin d := rand ( 0 , 5 ) ;
11568: LD_ADDR_VAR 0 4
11572: PUSH
11573: LD_INT 0
11575: PPUSH
11576: LD_INT 5
11578: PPUSH
11579: CALL_OW 12
11583: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11584: LD_ADDR_VAR 0 2
11588: PUSH
11589: LD_VAR 0 1
11593: PPUSH
11594: CALL_OW 250
11598: PPUSH
11599: LD_VAR 0 4
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 12
11609: PPUSH
11610: CALL_OW 12
11614: PPUSH
11615: CALL_OW 272
11619: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11620: LD_ADDR_VAR 0 3
11624: PUSH
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 251
11634: PPUSH
11635: LD_VAR 0 4
11639: PPUSH
11640: LD_INT 3
11642: PPUSH
11643: LD_INT 12
11645: PPUSH
11646: CALL_OW 12
11650: PPUSH
11651: CALL_OW 273
11655: ST_TO_ADDR
// if ValidHex ( x , y ) then
11656: LD_VAR 0 2
11660: PPUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: CALL_OW 488
11670: IFFALSE 11705
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11672: LD_VAR 0 1
11676: PPUSH
11677: LD_VAR 0 2
11681: PPUSH
11682: LD_VAR 0 3
11686: PPUSH
11687: LD_INT 3
11689: PPUSH
11690: LD_INT 6
11692: PPUSH
11693: CALL_OW 12
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 483
// end ;
11705: GO 11565
11707: POP
11708: POP
// end ;
11709: PPOPN 5
11711: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11712: LD_EXP 8
11716: PUSH
11717: LD_EXP 43
11721: AND
11722: IFFALSE 11816
11724: GO 11726
11726: DISABLE
11727: LD_INT 0
11729: PPUSH
11730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11731: LD_ADDR_VAR 0 2
11735: PUSH
11736: LD_INT 22
11738: PUSH
11739: LD_OWVAR 2
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PUSH
11748: LD_INT 32
11750: PUSH
11751: LD_INT 1
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 21
11760: PUSH
11761: LD_INT 2
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 69
11777: ST_TO_ADDR
// if not tmp then
11778: LD_VAR 0 2
11782: NOT
11783: IFFALSE 11787
// exit ;
11785: GO 11816
// for i in tmp do
11787: LD_ADDR_VAR 0 1
11791: PUSH
11792: LD_VAR 0 2
11796: PUSH
11797: FOR_IN
11798: IFFALSE 11814
// SetFuel ( i , 0 ) ;
11800: LD_VAR 0 1
11804: PPUSH
11805: LD_INT 0
11807: PPUSH
11808: CALL_OW 240
11812: GO 11797
11814: POP
11815: POP
// end ;
11816: PPOPN 2
11818: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11819: LD_EXP 8
11823: PUSH
11824: LD_EXP 44
11828: AND
11829: IFFALSE 11895
11831: GO 11833
11833: DISABLE
11834: LD_INT 0
11836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11837: LD_ADDR_VAR 0 1
11841: PUSH
11842: LD_INT 22
11844: PUSH
11845: LD_OWVAR 2
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 30
11856: PUSH
11857: LD_INT 29
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 69
11872: ST_TO_ADDR
// if not tmp then
11873: LD_VAR 0 1
11877: NOT
11878: IFFALSE 11882
// exit ;
11880: GO 11895
// DestroyUnit ( tmp [ 1 ] ) ;
11882: LD_VAR 0 1
11886: PUSH
11887: LD_INT 1
11889: ARRAY
11890: PPUSH
11891: CALL_OW 65
// end ;
11895: PPOPN 1
11897: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11898: LD_EXP 8
11902: PUSH
11903: LD_EXP 46
11907: AND
11908: IFFALSE 12037
11910: GO 11912
11912: DISABLE
11913: LD_INT 0
11915: PPUSH
// begin uc_side := 0 ;
11916: LD_ADDR_OWVAR 20
11920: PUSH
11921: LD_INT 0
11923: ST_TO_ADDR
// uc_nation := nation_arabian ;
11924: LD_ADDR_OWVAR 21
11928: PUSH
11929: LD_INT 2
11931: ST_TO_ADDR
// hc_gallery :=  ;
11932: LD_ADDR_OWVAR 33
11936: PUSH
11937: LD_STRING 
11939: ST_TO_ADDR
// hc_name :=  ;
11940: LD_ADDR_OWVAR 26
11944: PUSH
11945: LD_STRING 
11947: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11948: LD_INT 1
11950: PPUSH
11951: LD_INT 11
11953: PPUSH
11954: LD_INT 10
11956: PPUSH
11957: CALL_OW 380
// un := CreateHuman ;
11961: LD_ADDR_VAR 0 1
11965: PUSH
11966: CALL_OW 44
11970: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11971: LD_VAR 0 1
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11990: LD_VAR 0 1
11994: PPUSH
11995: LD_INT 22
11997: PUSH
11998: LD_OWVAR 2
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 69
12011: PPUSH
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 74
12021: PPUSH
12022: CALL_OW 115
// until IsDead ( un ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 301
12035: IFFALSE 11983
// end ;
12037: PPOPN 1
12039: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12040: LD_EXP 8
12044: PUSH
12045: LD_EXP 48
12049: AND
12050: IFFALSE 12062
12052: GO 12054
12054: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12055: LD_STRING earthquake(getX(game), 0, 32)
12057: PPUSH
12058: CALL_OW 559
12062: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12063: LD_EXP 8
12067: PUSH
12068: LD_EXP 49
12072: AND
12073: IFFALSE 12164
12075: GO 12077
12077: DISABLE
12078: LD_INT 0
12080: PPUSH
// begin enable ;
12081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12082: LD_ADDR_VAR 0 1
12086: PUSH
12087: LD_INT 22
12089: PUSH
12090: LD_OWVAR 2
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 21
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 33
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 69
12128: ST_TO_ADDR
// if not tmp then
12129: LD_VAR 0 1
12133: NOT
12134: IFFALSE 12138
// exit ;
12136: GO 12164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12138: LD_VAR 0 1
12142: PUSH
12143: LD_INT 1
12145: PPUSH
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 12
12155: ARRAY
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: CALL_OW 234
// end ;
12164: PPOPN 1
12166: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12167: LD_EXP 8
12171: PUSH
12172: LD_EXP 50
12176: AND
12177: IFFALSE 12318
12179: GO 12181
12181: DISABLE
12182: LD_INT 0
12184: PPUSH
12185: PPUSH
12186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12187: LD_ADDR_VAR 0 3
12191: PUSH
12192: LD_INT 22
12194: PUSH
12195: LD_OWVAR 2
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 25
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 69
12222: ST_TO_ADDR
// if not tmp then
12223: LD_VAR 0 3
12227: NOT
12228: IFFALSE 12232
// exit ;
12230: GO 12318
// un := tmp [ rand ( 1 , tmp ) ] ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_VAR 0 3
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_VAR 0 3
12249: PPUSH
12250: CALL_OW 12
12254: ARRAY
12255: ST_TO_ADDR
// if Crawls ( un ) then
12256: LD_VAR 0 2
12260: PPUSH
12261: CALL_OW 318
12265: IFFALSE 12276
// ComWalk ( un ) ;
12267: LD_VAR 0 2
12271: PPUSH
12272: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12276: LD_VAR 0 2
12280: PPUSH
12281: LD_INT 9
12283: PPUSH
12284: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12288: LD_INT 28
12290: PPUSH
12291: LD_OWVAR 2
12295: PPUSH
12296: LD_INT 2
12298: PPUSH
12299: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12303: LD_INT 29
12305: PPUSH
12306: LD_OWVAR 2
12310: PPUSH
12311: LD_INT 2
12313: PPUSH
12314: CALL_OW 322
// end ;
12318: PPOPN 3
12320: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12321: LD_EXP 8
12325: PUSH
12326: LD_EXP 51
12330: AND
12331: IFFALSE 12442
12333: GO 12335
12335: DISABLE
12336: LD_INT 0
12338: PPUSH
12339: PPUSH
12340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12341: LD_ADDR_VAR 0 3
12345: PUSH
12346: LD_INT 22
12348: PUSH
12349: LD_OWVAR 2
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 25
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// if not tmp then
12377: LD_VAR 0 3
12381: NOT
12382: IFFALSE 12386
// exit ;
12384: GO 12442
// un := tmp [ rand ( 1 , tmp ) ] ;
12386: LD_ADDR_VAR 0 2
12390: PUSH
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: CALL_OW 12
12408: ARRAY
12409: ST_TO_ADDR
// if Crawls ( un ) then
12410: LD_VAR 0 2
12414: PPUSH
12415: CALL_OW 318
12419: IFFALSE 12430
// ComWalk ( un ) ;
12421: LD_VAR 0 2
12425: PPUSH
12426: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12430: LD_VAR 0 2
12434: PPUSH
12435: LD_INT 8
12437: PPUSH
12438: CALL_OW 336
// end ;
12442: PPOPN 3
12444: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12445: LD_EXP 8
12449: PUSH
12450: LD_EXP 52
12454: AND
12455: IFFALSE 12599
12457: GO 12459
12459: DISABLE
12460: LD_INT 0
12462: PPUSH
12463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12464: LD_ADDR_VAR 0 2
12468: PUSH
12469: LD_INT 22
12471: PUSH
12472: LD_OWVAR 2
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 21
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: LD_INT 34
12496: PUSH
12497: LD_INT 12
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 34
12506: PUSH
12507: LD_INT 51
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 34
12516: PUSH
12517: LD_INT 32
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: ST_TO_ADDR
// if not tmp then
12540: LD_VAR 0 2
12544: NOT
12545: IFFALSE 12549
// exit ;
12547: GO 12599
// for i in tmp do
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_VAR 0 2
12558: PUSH
12559: FOR_IN
12560: IFFALSE 12597
// if GetCargo ( i , mat_artifact ) = 0 then
12562: LD_VAR 0 1
12566: PPUSH
12567: LD_INT 4
12569: PPUSH
12570: CALL_OW 289
12574: PUSH
12575: LD_INT 0
12577: EQUAL
12578: IFFALSE 12595
// SetCargo ( i , mat_siberit , 100 ) ;
12580: LD_VAR 0 1
12584: PPUSH
12585: LD_INT 3
12587: PPUSH
12588: LD_INT 100
12590: PPUSH
12591: CALL_OW 290
12595: GO 12559
12597: POP
12598: POP
// end ;
12599: PPOPN 2
12601: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12602: LD_EXP 8
12606: PUSH
12607: LD_EXP 53
12611: AND
12612: IFFALSE 12795
12614: GO 12616
12616: DISABLE
12617: LD_INT 0
12619: PPUSH
12620: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12621: LD_ADDR_VAR 0 2
12625: PUSH
12626: LD_INT 22
12628: PUSH
12629: LD_OWVAR 2
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PPUSH
12638: CALL_OW 69
12642: ST_TO_ADDR
// if not tmp then
12643: LD_VAR 0 2
12647: NOT
12648: IFFALSE 12652
// exit ;
12650: GO 12795
// for i := 1 to 2 do
12652: LD_ADDR_VAR 0 1
12656: PUSH
12657: DOUBLE
12658: LD_INT 1
12660: DEC
12661: ST_TO_ADDR
12662: LD_INT 2
12664: PUSH
12665: FOR_TO
12666: IFFALSE 12793
// begin uc_side := your_side ;
12668: LD_ADDR_OWVAR 20
12672: PUSH
12673: LD_OWVAR 2
12677: ST_TO_ADDR
// uc_nation := nation_american ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 1
12685: ST_TO_ADDR
// vc_chassis := us_morphling ;
12686: LD_ADDR_OWVAR 37
12690: PUSH
12691: LD_INT 5
12693: ST_TO_ADDR
// vc_engine := engine_siberite ;
12694: LD_ADDR_OWVAR 39
12698: PUSH
12699: LD_INT 3
12701: ST_TO_ADDR
// vc_control := control_computer ;
12702: LD_ADDR_OWVAR 38
12706: PUSH
12707: LD_INT 3
12709: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12710: LD_ADDR_OWVAR 40
12714: PUSH
12715: LD_INT 10
12717: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12718: LD_VAR 0 2
12722: PUSH
12723: LD_INT 1
12725: ARRAY
12726: PPUSH
12727: CALL_OW 310
12731: NOT
12732: IFFALSE 12779
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12734: CALL_OW 45
12738: PPUSH
12739: LD_VAR 0 2
12743: PUSH
12744: LD_INT 1
12746: ARRAY
12747: PPUSH
12748: CALL_OW 250
12752: PPUSH
12753: LD_VAR 0 2
12757: PUSH
12758: LD_INT 1
12760: ARRAY
12761: PPUSH
12762: CALL_OW 251
12766: PPUSH
12767: LD_INT 12
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: CALL_OW 50
12777: GO 12791
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12779: CALL_OW 45
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 51
// end ;
12791: GO 12665
12793: POP
12794: POP
// end ;
12795: PPOPN 2
12797: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12798: LD_EXP 8
12802: PUSH
12803: LD_EXP 54
12807: AND
12808: IFFALSE 13030
12810: GO 12812
12812: DISABLE
12813: LD_INT 0
12815: PPUSH
12816: PPUSH
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12821: LD_ADDR_VAR 0 6
12825: PUSH
12826: LD_INT 22
12828: PUSH
12829: LD_OWVAR 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 21
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 3
12850: PUSH
12851: LD_INT 23
12853: PUSH
12854: LD_INT 0
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: PPUSH
12870: CALL_OW 69
12874: ST_TO_ADDR
// if not tmp then
12875: LD_VAR 0 6
12879: NOT
12880: IFFALSE 12884
// exit ;
12882: GO 13030
// s1 := rand ( 1 , 4 ) ;
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: LD_INT 1
12891: PPUSH
12892: LD_INT 4
12894: PPUSH
12895: CALL_OW 12
12899: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12900: LD_ADDR_VAR 0 4
12904: PUSH
12905: LD_VAR 0 6
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: LD_VAR 0 2
12918: PPUSH
12919: CALL_OW 259
12923: ST_TO_ADDR
// if s1 = 1 then
12924: LD_VAR 0 2
12928: PUSH
12929: LD_INT 1
12931: EQUAL
12932: IFFALSE 12952
// s2 := rand ( 2 , 4 ) else
12934: LD_ADDR_VAR 0 3
12938: PUSH
12939: LD_INT 2
12941: PPUSH
12942: LD_INT 4
12944: PPUSH
12945: CALL_OW 12
12949: ST_TO_ADDR
12950: GO 12960
// s2 := 1 ;
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: LD_INT 1
12959: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12960: LD_ADDR_VAR 0 5
12964: PUSH
12965: LD_VAR 0 6
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: CALL_OW 259
12983: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12984: LD_VAR 0 6
12988: PUSH
12989: LD_INT 1
12991: ARRAY
12992: PPUSH
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_VAR 0 5
13002: PPUSH
13003: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13007: LD_VAR 0 6
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PPUSH
13016: LD_VAR 0 3
13020: PPUSH
13021: LD_VAR 0 4
13025: PPUSH
13026: CALL_OW 237
// end ;
13030: PPOPN 6
13032: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13033: LD_EXP 8
13037: PUSH
13038: LD_EXP 55
13042: AND
13043: IFFALSE 13122
13045: GO 13047
13047: DISABLE
13048: LD_INT 0
13050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13051: LD_ADDR_VAR 0 1
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_OWVAR 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: ST_TO_ADDR
// if not tmp then
13087: LD_VAR 0 1
13091: NOT
13092: IFFALSE 13096
// exit ;
13094: GO 13122
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13096: LD_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: PPUSH
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 12
13113: ARRAY
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: CALL_OW 234
// end ;
13122: PPOPN 1
13124: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13125: LD_EXP 8
13129: PUSH
13130: LD_EXP 56
13134: AND
13135: IFFALSE 13247
13137: GO 13139
13139: DISABLE
13140: LD_INT 0
13142: PPUSH
13143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13144: LD_ADDR_VAR 0 2
13148: PUSH
13149: LD_INT 22
13151: PUSH
13152: LD_OWVAR 2
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 2
13163: PUSH
13164: LD_INT 30
13166: PUSH
13167: LD_INT 27
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 30
13176: PUSH
13177: LD_INT 26
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 30
13186: PUSH
13187: LD_INT 28
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PPUSH
13204: CALL_OW 69
13208: ST_TO_ADDR
// if not tmp then
13209: LD_VAR 0 2
13213: NOT
13214: IFFALSE 13218
// exit ;
13216: GO 13247
// for i in tmp do
13218: LD_ADDR_VAR 0 1
13222: PUSH
13223: LD_VAR 0 2
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13245
// SetLives ( i , 1 ) ;
13231: LD_VAR 0 1
13235: PPUSH
13236: LD_INT 1
13238: PPUSH
13239: CALL_OW 234
13243: GO 13228
13245: POP
13246: POP
// end ;
13247: PPOPN 2
13249: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13250: LD_EXP 8
13254: PUSH
13255: LD_EXP 57
13259: AND
13260: IFFALSE 13547
13262: GO 13264
13264: DISABLE
13265: LD_INT 0
13267: PPUSH
13268: PPUSH
13269: PPUSH
// begin i := rand ( 1 , 7 ) ;
13270: LD_ADDR_VAR 0 1
13274: PUSH
13275: LD_INT 1
13277: PPUSH
13278: LD_INT 7
13280: PPUSH
13281: CALL_OW 12
13285: ST_TO_ADDR
// case i of 1 :
13286: LD_VAR 0 1
13290: PUSH
13291: LD_INT 1
13293: DOUBLE
13294: EQUAL
13295: IFTRUE 13299
13297: GO 13309
13299: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13300: LD_STRING earthquake(getX(game), 0, 32)
13302: PPUSH
13303: CALL_OW 559
13307: GO 13547
13309: LD_INT 2
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13331
13317: POP
// begin ToLua ( displayStucuk(); ) ;
13318: LD_STRING displayStucuk();
13320: PPUSH
13321: CALL_OW 559
// ResetFog ;
13325: CALL_OW 335
// end ; 3 :
13329: GO 13547
13331: LD_INT 3
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13443
13339: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13340: LD_ADDR_VAR 0 2
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_OWVAR 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 25
13359: PUSH
13360: LD_INT 1
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PPUSH
13371: CALL_OW 69
13375: ST_TO_ADDR
// if not tmp then
13376: LD_VAR 0 2
13380: NOT
13381: IFFALSE 13385
// exit ;
13383: GO 13547
// un := tmp [ rand ( 1 , tmp ) ] ;
13385: LD_ADDR_VAR 0 3
13389: PUSH
13390: LD_VAR 0 2
13394: PUSH
13395: LD_INT 1
13397: PPUSH
13398: LD_VAR 0 2
13402: PPUSH
13403: CALL_OW 12
13407: ARRAY
13408: ST_TO_ADDR
// if Crawls ( un ) then
13409: LD_VAR 0 3
13413: PPUSH
13414: CALL_OW 318
13418: IFFALSE 13429
// ComWalk ( un ) ;
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13429: LD_VAR 0 3
13433: PPUSH
13434: LD_INT 8
13436: PPUSH
13437: CALL_OW 336
// end ; 4 :
13441: GO 13547
13443: LD_INT 4
13445: DOUBLE
13446: EQUAL
13447: IFTRUE 13451
13449: GO 13525
13451: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13452: LD_ADDR_VAR 0 2
13456: PUSH
13457: LD_INT 22
13459: PUSH
13460: LD_OWVAR 2
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 30
13471: PUSH
13472: LD_INT 29
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// if not tmp then
13488: LD_VAR 0 2
13492: NOT
13493: IFFALSE 13497
// exit ;
13495: GO 13547
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13497: LD_VAR 0 2
13501: PUSH
13502: LD_INT 1
13504: ARRAY
13505: PPUSH
13506: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13510: LD_VAR 0 2
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PPUSH
13519: CALL_OW 65
// end ; 5 .. 7 :
13523: GO 13547
13525: LD_INT 5
13527: DOUBLE
13528: GREATEREQUAL
13529: IFFALSE 13537
13531: LD_INT 7
13533: DOUBLE
13534: LESSEQUAL
13535: IFTRUE 13539
13537: GO 13546
13539: POP
// StreamSibBomb ; end ;
13540: CALL 9784 0 0
13544: GO 13547
13546: POP
// end ;
13547: PPOPN 3
13549: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13550: LD_EXP 8
13554: PUSH
13555: LD_EXP 58
13559: AND
13560: IFFALSE 13716
13562: GO 13564
13564: DISABLE
13565: LD_INT 0
13567: PPUSH
13568: PPUSH
13569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13570: LD_ADDR_VAR 0 2
13574: PUSH
13575: LD_INT 81
13577: PUSH
13578: LD_OWVAR 2
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: LD_INT 21
13592: PUSH
13593: LD_INT 1
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 21
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PPUSH
13619: CALL_OW 69
13623: ST_TO_ADDR
// if not tmp then
13624: LD_VAR 0 2
13628: NOT
13629: IFFALSE 13633
// exit ;
13631: GO 13716
// p := 0 ;
13633: LD_ADDR_VAR 0 3
13637: PUSH
13638: LD_INT 0
13640: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13641: LD_INT 35
13643: PPUSH
13644: CALL_OW 67
// p := p + 1 ;
13648: LD_ADDR_VAR 0 3
13652: PUSH
13653: LD_VAR 0 3
13657: PUSH
13658: LD_INT 1
13660: PLUS
13661: ST_TO_ADDR
// for i in tmp do
13662: LD_ADDR_VAR 0 1
13666: PUSH
13667: LD_VAR 0 2
13671: PUSH
13672: FOR_IN
13673: IFFALSE 13704
// if GetLives ( i ) < 1000 then
13675: LD_VAR 0 1
13679: PPUSH
13680: CALL_OW 256
13684: PUSH
13685: LD_INT 1000
13687: LESS
13688: IFFALSE 13702
// SetLives ( i , 1000 ) ;
13690: LD_VAR 0 1
13694: PPUSH
13695: LD_INT 1000
13697: PPUSH
13698: CALL_OW 234
13702: GO 13672
13704: POP
13705: POP
// until p > 20 ;
13706: LD_VAR 0 3
13710: PUSH
13711: LD_INT 20
13713: GREATER
13714: IFFALSE 13641
// end ;
13716: PPOPN 3
13718: END
// every 0 0$1 trigger StreamModeActive and sTime do
13719: LD_EXP 8
13723: PUSH
13724: LD_EXP 59
13728: AND
13729: IFFALSE 13764
13731: GO 13733
13733: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13734: LD_INT 28
13736: PPUSH
13737: LD_OWVAR 2
13741: PPUSH
13742: LD_INT 2
13744: PPUSH
13745: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13749: LD_INT 30
13751: PPUSH
13752: LD_OWVAR 2
13756: PPUSH
13757: LD_INT 2
13759: PPUSH
13760: CALL_OW 322
// end ;
13764: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13765: LD_EXP 8
13769: PUSH
13770: LD_EXP 60
13774: AND
13775: IFFALSE 13896
13777: GO 13779
13779: DISABLE
13780: LD_INT 0
13782: PPUSH
13783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_OWVAR 2
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 3
13813: PUSH
13814: LD_INT 23
13816: PUSH
13817: LD_INT 0
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: PPUSH
13833: CALL_OW 69
13837: ST_TO_ADDR
// if not tmp then
13838: LD_VAR 0 2
13842: NOT
13843: IFFALSE 13847
// exit ;
13845: GO 13896
// for i in tmp do
13847: LD_ADDR_VAR 0 1
13851: PUSH
13852: LD_VAR 0 2
13856: PUSH
13857: FOR_IN
13858: IFFALSE 13894
// begin if Crawls ( i ) then
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 318
13869: IFFALSE 13880
// ComWalk ( i ) ;
13871: LD_VAR 0 1
13875: PPUSH
13876: CALL_OW 138
// SetClass ( i , 2 ) ;
13880: LD_VAR 0 1
13884: PPUSH
13885: LD_INT 2
13887: PPUSH
13888: CALL_OW 336
// end ;
13892: GO 13857
13894: POP
13895: POP
// end ;
13896: PPOPN 2
13898: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13899: LD_EXP 8
13903: PUSH
13904: LD_EXP 61
13908: AND
13909: IFFALSE 14197
13911: GO 13913
13913: DISABLE
13914: LD_INT 0
13916: PPUSH
13917: PPUSH
13918: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13919: LD_OWVAR 2
13923: PPUSH
13924: LD_INT 9
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13937: LD_INT 9
13939: PPUSH
13940: LD_OWVAR 2
13944: PPUSH
13945: CALL_OW 343
// uc_side := 9 ;
13949: LD_ADDR_OWVAR 20
13953: PUSH
13954: LD_INT 9
13956: ST_TO_ADDR
// uc_nation := 2 ;
13957: LD_ADDR_OWVAR 21
13961: PUSH
13962: LD_INT 2
13964: ST_TO_ADDR
// hc_name := Dark Warrior ;
13965: LD_ADDR_OWVAR 26
13969: PUSH
13970: LD_STRING Dark Warrior
13972: ST_TO_ADDR
// hc_gallery :=  ;
13973: LD_ADDR_OWVAR 33
13977: PUSH
13978: LD_STRING 
13980: ST_TO_ADDR
// hc_noskilllimit := true ;
13981: LD_ADDR_OWVAR 76
13985: PUSH
13986: LD_INT 1
13988: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13989: LD_ADDR_OWVAR 31
13993: PUSH
13994: LD_INT 30
13996: PUSH
13997: LD_INT 30
13999: PUSH
14000: LD_INT 30
14002: PUSH
14003: LD_INT 30
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: ST_TO_ADDR
// un := CreateHuman ;
14012: LD_ADDR_VAR 0 3
14016: PUSH
14017: CALL_OW 44
14021: ST_TO_ADDR
// hc_noskilllimit := false ;
14022: LD_ADDR_OWVAR 76
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14030: LD_VAR 0 3
14034: PPUSH
14035: LD_INT 1
14037: PPUSH
14038: CALL_OW 51
// ToLua ( playRanger() ) ;
14042: LD_STRING playRanger()
14044: PPUSH
14045: CALL_OW 559
// p := 0 ;
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: LD_INT 0
14056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14057: LD_INT 35
14059: PPUSH
14060: CALL_OW 67
// p := p + 1 ;
14064: LD_ADDR_VAR 0 2
14068: PUSH
14069: LD_VAR 0 2
14073: PUSH
14074: LD_INT 1
14076: PLUS
14077: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14078: LD_VAR 0 3
14082: PPUSH
14083: CALL_OW 256
14087: PUSH
14088: LD_INT 1000
14090: LESS
14091: IFFALSE 14105
// SetLives ( un , 1000 ) ;
14093: LD_VAR 0 3
14097: PPUSH
14098: LD_INT 1000
14100: PPUSH
14101: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_INT 81
14112: PUSH
14113: LD_OWVAR 2
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 91
14124: PUSH
14125: LD_VAR 0 3
14129: PUSH
14130: LD_INT 30
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PPUSH
14142: CALL_OW 69
14146: PPUSH
14147: LD_VAR 0 3
14151: PPUSH
14152: CALL_OW 74
14156: PPUSH
14157: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14161: LD_VAR 0 2
14165: PUSH
14166: LD_INT 80
14168: GREATER
14169: PUSH
14170: LD_VAR 0 3
14174: PPUSH
14175: CALL_OW 301
14179: OR
14180: IFFALSE 14057
// if un then
14182: LD_VAR 0 3
14186: IFFALSE 14197
// RemoveUnit ( un ) ;
14188: LD_VAR 0 3
14192: PPUSH
14193: CALL_OW 64
// end ;
14197: PPOPN 3
14199: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14200: LD_EXP 62
14204: IFFALSE 14320
14206: GO 14208
14208: DISABLE
14209: LD_INT 0
14211: PPUSH
14212: PPUSH
14213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14214: LD_ADDR_VAR 0 2
14218: PUSH
14219: LD_INT 81
14221: PUSH
14222: LD_OWVAR 2
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 21
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PPUSH
14245: CALL_OW 69
14249: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14250: LD_STRING playComputer()
14252: PPUSH
14253: CALL_OW 559
// if not tmp then
14257: LD_VAR 0 2
14261: NOT
14262: IFFALSE 14266
// exit ;
14264: GO 14320
// for i in tmp do
14266: LD_ADDR_VAR 0 1
14270: PUSH
14271: LD_VAR 0 2
14275: PUSH
14276: FOR_IN
14277: IFFALSE 14318
// for j := 1 to 4 do
14279: LD_ADDR_VAR 0 3
14283: PUSH
14284: DOUBLE
14285: LD_INT 1
14287: DEC
14288: ST_TO_ADDR
14289: LD_INT 4
14291: PUSH
14292: FOR_TO
14293: IFFALSE 14314
// SetSkill ( i , j , 10 ) ;
14295: LD_VAR 0 1
14299: PPUSH
14300: LD_VAR 0 3
14304: PPUSH
14305: LD_INT 10
14307: PPUSH
14308: CALL_OW 237
14312: GO 14292
14314: POP
14315: POP
14316: GO 14276
14318: POP
14319: POP
// end ;
14320: PPOPN 3
14322: END
// every 0 0$1 trigger s30 do var i , tmp ;
14323: LD_EXP 63
14327: IFFALSE 14396
14329: GO 14331
14331: DISABLE
14332: LD_INT 0
14334: PPUSH
14335: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14336: LD_ADDR_VAR 0 2
14340: PUSH
14341: LD_INT 22
14343: PUSH
14344: LD_OWVAR 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PPUSH
14353: CALL_OW 69
14357: ST_TO_ADDR
// if not tmp then
14358: LD_VAR 0 2
14362: NOT
14363: IFFALSE 14367
// exit ;
14365: GO 14396
// for i in tmp do
14367: LD_ADDR_VAR 0 1
14371: PUSH
14372: LD_VAR 0 2
14376: PUSH
14377: FOR_IN
14378: IFFALSE 14394
// SetLives ( i , 300 ) ;
14380: LD_VAR 0 1
14384: PPUSH
14385: LD_INT 300
14387: PPUSH
14388: CALL_OW 234
14392: GO 14377
14394: POP
14395: POP
// end ;
14396: PPOPN 2
14398: END
// every 0 0$1 trigger s60 do var i , tmp ;
14399: LD_EXP 64
14403: IFFALSE 14472
14405: GO 14407
14407: DISABLE
14408: LD_INT 0
14410: PPUSH
14411: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14412: LD_ADDR_VAR 0 2
14416: PUSH
14417: LD_INT 22
14419: PUSH
14420: LD_OWVAR 2
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PPUSH
14429: CALL_OW 69
14433: ST_TO_ADDR
// if not tmp then
14434: LD_VAR 0 2
14438: NOT
14439: IFFALSE 14443
// exit ;
14441: GO 14472
// for i in tmp do
14443: LD_ADDR_VAR 0 1
14447: PUSH
14448: LD_VAR 0 2
14452: PUSH
14453: FOR_IN
14454: IFFALSE 14470
// SetLives ( i , 600 ) ;
14456: LD_VAR 0 1
14460: PPUSH
14461: LD_INT 600
14463: PPUSH
14464: CALL_OW 234
14468: GO 14453
14470: POP
14471: POP
// end ;
14472: PPOPN 2
14474: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14475: LD_INT 0
14477: PPUSH
// case cmd of 301 :
14478: LD_VAR 0 1
14482: PUSH
14483: LD_INT 301
14485: DOUBLE
14486: EQUAL
14487: IFTRUE 14491
14489: GO 14523
14491: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14492: LD_VAR 0 6
14496: PPUSH
14497: LD_VAR 0 7
14501: PPUSH
14502: LD_VAR 0 8
14506: PPUSH
14507: LD_VAR 0 4
14511: PPUSH
14512: LD_VAR 0 5
14516: PPUSH
14517: CALL 15732 0 5
14521: GO 14644
14523: LD_INT 302
14525: DOUBLE
14526: EQUAL
14527: IFTRUE 14531
14529: GO 14568
14531: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14532: LD_VAR 0 6
14536: PPUSH
14537: LD_VAR 0 7
14541: PPUSH
14542: LD_VAR 0 8
14546: PPUSH
14547: LD_VAR 0 9
14551: PPUSH
14552: LD_VAR 0 4
14556: PPUSH
14557: LD_VAR 0 5
14561: PPUSH
14562: CALL 15823 0 6
14566: GO 14644
14568: LD_INT 303
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14613
14576: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14577: LD_VAR 0 6
14581: PPUSH
14582: LD_VAR 0 7
14586: PPUSH
14587: LD_VAR 0 8
14591: PPUSH
14592: LD_VAR 0 9
14596: PPUSH
14597: LD_VAR 0 4
14601: PPUSH
14602: LD_VAR 0 5
14606: PPUSH
14607: CALL 14649 0 6
14611: GO 14644
14613: LD_INT 304
14615: DOUBLE
14616: EQUAL
14617: IFTRUE 14621
14619: GO 14643
14621: POP
// hHackTeleport ( unit , x , y ) ; end ;
14622: LD_VAR 0 2
14626: PPUSH
14627: LD_VAR 0 4
14631: PPUSH
14632: LD_VAR 0 5
14636: PPUSH
14637: CALL 16416 0 3
14641: GO 14644
14643: POP
// end ;
14644: LD_VAR 0 12
14648: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14649: LD_INT 0
14651: PPUSH
14652: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14653: LD_VAR 0 1
14657: PUSH
14658: LD_INT 1
14660: LESS
14661: PUSH
14662: LD_VAR 0 1
14666: PUSH
14667: LD_INT 3
14669: GREATER
14670: OR
14671: PUSH
14672: LD_VAR 0 5
14676: PPUSH
14677: LD_VAR 0 6
14681: PPUSH
14682: CALL_OW 428
14686: OR
14687: IFFALSE 14691
// exit ;
14689: GO 15419
// uc_side := your_side ;
14691: LD_ADDR_OWVAR 20
14695: PUSH
14696: LD_OWVAR 2
14700: ST_TO_ADDR
// uc_nation := nation ;
14701: LD_ADDR_OWVAR 21
14705: PUSH
14706: LD_VAR 0 1
14710: ST_TO_ADDR
// bc_level = 1 ;
14711: LD_ADDR_OWVAR 43
14715: PUSH
14716: LD_INT 1
14718: ST_TO_ADDR
// case btype of 1 :
14719: LD_VAR 0 2
14723: PUSH
14724: LD_INT 1
14726: DOUBLE
14727: EQUAL
14728: IFTRUE 14732
14730: GO 14743
14732: POP
// bc_type := b_depot ; 2 :
14733: LD_ADDR_OWVAR 42
14737: PUSH
14738: LD_INT 0
14740: ST_TO_ADDR
14741: GO 15363
14743: LD_INT 2
14745: DOUBLE
14746: EQUAL
14747: IFTRUE 14751
14749: GO 14762
14751: POP
// bc_type := b_warehouse ; 3 :
14752: LD_ADDR_OWVAR 42
14756: PUSH
14757: LD_INT 1
14759: ST_TO_ADDR
14760: GO 15363
14762: LD_INT 3
14764: DOUBLE
14765: EQUAL
14766: IFTRUE 14770
14768: GO 14781
14770: POP
// bc_type := b_lab ; 4 .. 9 :
14771: LD_ADDR_OWVAR 42
14775: PUSH
14776: LD_INT 6
14778: ST_TO_ADDR
14779: GO 15363
14781: LD_INT 4
14783: DOUBLE
14784: GREATEREQUAL
14785: IFFALSE 14793
14787: LD_INT 9
14789: DOUBLE
14790: LESSEQUAL
14791: IFTRUE 14795
14793: GO 14855
14795: POP
// begin bc_type := b_lab_half ;
14796: LD_ADDR_OWVAR 42
14800: PUSH
14801: LD_INT 7
14803: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14804: LD_ADDR_OWVAR 44
14808: PUSH
14809: LD_INT 10
14811: PUSH
14812: LD_INT 11
14814: PUSH
14815: LD_INT 12
14817: PUSH
14818: LD_INT 15
14820: PUSH
14821: LD_INT 14
14823: PUSH
14824: LD_INT 13
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 2
14839: PUSH
14840: LD_INT 3
14842: MINUS
14843: ARRAY
14844: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14845: LD_ADDR_OWVAR 45
14849: PUSH
14850: LD_INT 9
14852: ST_TO_ADDR
// end ; 10 .. 13 :
14853: GO 15363
14855: LD_INT 10
14857: DOUBLE
14858: GREATEREQUAL
14859: IFFALSE 14867
14861: LD_INT 13
14863: DOUBLE
14864: LESSEQUAL
14865: IFTRUE 14869
14867: GO 14946
14869: POP
// begin bc_type := b_lab_full ;
14870: LD_ADDR_OWVAR 42
14874: PUSH
14875: LD_INT 8
14877: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14878: LD_ADDR_OWVAR 44
14882: PUSH
14883: LD_INT 10
14885: PUSH
14886: LD_INT 12
14888: PUSH
14889: LD_INT 14
14891: PUSH
14892: LD_INT 13
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: PUSH
14901: LD_VAR 0 2
14905: PUSH
14906: LD_INT 9
14908: MINUS
14909: ARRAY
14910: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14911: LD_ADDR_OWVAR 45
14915: PUSH
14916: LD_INT 11
14918: PUSH
14919: LD_INT 15
14921: PUSH
14922: LD_INT 12
14924: PUSH
14925: LD_INT 15
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: PUSH
14934: LD_VAR 0 2
14938: PUSH
14939: LD_INT 9
14941: MINUS
14942: ARRAY
14943: ST_TO_ADDR
// end ; 14 :
14944: GO 15363
14946: LD_INT 14
14948: DOUBLE
14949: EQUAL
14950: IFTRUE 14954
14952: GO 14965
14954: POP
// bc_type := b_workshop ; 15 :
14955: LD_ADDR_OWVAR 42
14959: PUSH
14960: LD_INT 2
14962: ST_TO_ADDR
14963: GO 15363
14965: LD_INT 15
14967: DOUBLE
14968: EQUAL
14969: IFTRUE 14973
14971: GO 14984
14973: POP
// bc_type := b_factory ; 16 :
14974: LD_ADDR_OWVAR 42
14978: PUSH
14979: LD_INT 3
14981: ST_TO_ADDR
14982: GO 15363
14984: LD_INT 16
14986: DOUBLE
14987: EQUAL
14988: IFTRUE 14992
14990: GO 15003
14992: POP
// bc_type := b_ext_gun ; 17 :
14993: LD_ADDR_OWVAR 42
14997: PUSH
14998: LD_INT 17
15000: ST_TO_ADDR
15001: GO 15363
15003: LD_INT 17
15005: DOUBLE
15006: EQUAL
15007: IFTRUE 15011
15009: GO 15039
15011: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15012: LD_ADDR_OWVAR 42
15016: PUSH
15017: LD_INT 19
15019: PUSH
15020: LD_INT 23
15022: PUSH
15023: LD_INT 19
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: LD_VAR 0 1
15035: ARRAY
15036: ST_TO_ADDR
15037: GO 15363
15039: LD_INT 18
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15047
15045: GO 15058
15047: POP
// bc_type := b_ext_radar ; 19 :
15048: LD_ADDR_OWVAR 42
15052: PUSH
15053: LD_INT 20
15055: ST_TO_ADDR
15056: GO 15363
15058: LD_INT 19
15060: DOUBLE
15061: EQUAL
15062: IFTRUE 15066
15064: GO 15077
15066: POP
// bc_type := b_ext_radio ; 20 :
15067: LD_ADDR_OWVAR 42
15071: PUSH
15072: LD_INT 22
15074: ST_TO_ADDR
15075: GO 15363
15077: LD_INT 20
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15085
15083: GO 15096
15085: POP
// bc_type := b_ext_siberium ; 21 :
15086: LD_ADDR_OWVAR 42
15090: PUSH
15091: LD_INT 21
15093: ST_TO_ADDR
15094: GO 15363
15096: LD_INT 21
15098: DOUBLE
15099: EQUAL
15100: IFTRUE 15104
15102: GO 15115
15104: POP
// bc_type := b_ext_computer ; 22 :
15105: LD_ADDR_OWVAR 42
15109: PUSH
15110: LD_INT 24
15112: ST_TO_ADDR
15113: GO 15363
15115: LD_INT 22
15117: DOUBLE
15118: EQUAL
15119: IFTRUE 15123
15121: GO 15134
15123: POP
// bc_type := b_ext_track ; 23 :
15124: LD_ADDR_OWVAR 42
15128: PUSH
15129: LD_INT 16
15131: ST_TO_ADDR
15132: GO 15363
15134: LD_INT 23
15136: DOUBLE
15137: EQUAL
15138: IFTRUE 15142
15140: GO 15153
15142: POP
// bc_type := b_ext_laser ; 24 :
15143: LD_ADDR_OWVAR 42
15147: PUSH
15148: LD_INT 25
15150: ST_TO_ADDR
15151: GO 15363
15153: LD_INT 24
15155: DOUBLE
15156: EQUAL
15157: IFTRUE 15161
15159: GO 15172
15161: POP
// bc_type := b_control_tower ; 25 :
15162: LD_ADDR_OWVAR 42
15166: PUSH
15167: LD_INT 36
15169: ST_TO_ADDR
15170: GO 15363
15172: LD_INT 25
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15191
15180: POP
// bc_type := b_breastwork ; 26 :
15181: LD_ADDR_OWVAR 42
15185: PUSH
15186: LD_INT 31
15188: ST_TO_ADDR
15189: GO 15363
15191: LD_INT 26
15193: DOUBLE
15194: EQUAL
15195: IFTRUE 15199
15197: GO 15210
15199: POP
// bc_type := b_bunker ; 27 :
15200: LD_ADDR_OWVAR 42
15204: PUSH
15205: LD_INT 32
15207: ST_TO_ADDR
15208: GO 15363
15210: LD_INT 27
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15229
15218: POP
// bc_type := b_turret ; 28 :
15219: LD_ADDR_OWVAR 42
15223: PUSH
15224: LD_INT 33
15226: ST_TO_ADDR
15227: GO 15363
15229: LD_INT 28
15231: DOUBLE
15232: EQUAL
15233: IFTRUE 15237
15235: GO 15248
15237: POP
// bc_type := b_armoury ; 29 :
15238: LD_ADDR_OWVAR 42
15242: PUSH
15243: LD_INT 4
15245: ST_TO_ADDR
15246: GO 15363
15248: LD_INT 29
15250: DOUBLE
15251: EQUAL
15252: IFTRUE 15256
15254: GO 15267
15256: POP
// bc_type := b_barracks ; 30 :
15257: LD_ADDR_OWVAR 42
15261: PUSH
15262: LD_INT 5
15264: ST_TO_ADDR
15265: GO 15363
15267: LD_INT 30
15269: DOUBLE
15270: EQUAL
15271: IFTRUE 15275
15273: GO 15286
15275: POP
// bc_type := b_solar_power ; 31 :
15276: LD_ADDR_OWVAR 42
15280: PUSH
15281: LD_INT 27
15283: ST_TO_ADDR
15284: GO 15363
15286: LD_INT 31
15288: DOUBLE
15289: EQUAL
15290: IFTRUE 15294
15292: GO 15305
15294: POP
// bc_type := b_oil_power ; 32 :
15295: LD_ADDR_OWVAR 42
15299: PUSH
15300: LD_INT 26
15302: ST_TO_ADDR
15303: GO 15363
15305: LD_INT 32
15307: DOUBLE
15308: EQUAL
15309: IFTRUE 15313
15311: GO 15324
15313: POP
// bc_type := b_siberite_power ; 33 :
15314: LD_ADDR_OWVAR 42
15318: PUSH
15319: LD_INT 28
15321: ST_TO_ADDR
15322: GO 15363
15324: LD_INT 33
15326: DOUBLE
15327: EQUAL
15328: IFTRUE 15332
15330: GO 15343
15332: POP
// bc_type := b_oil_mine ; 34 :
15333: LD_ADDR_OWVAR 42
15337: PUSH
15338: LD_INT 29
15340: ST_TO_ADDR
15341: GO 15363
15343: LD_INT 34
15345: DOUBLE
15346: EQUAL
15347: IFTRUE 15351
15349: GO 15362
15351: POP
// bc_type := b_siberite_mine ; end ;
15352: LD_ADDR_OWVAR 42
15356: PUSH
15357: LD_INT 30
15359: ST_TO_ADDR
15360: GO 15363
15362: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15363: LD_ADDR_VAR 0 8
15367: PUSH
15368: LD_VAR 0 5
15372: PPUSH
15373: LD_VAR 0 6
15377: PPUSH
15378: LD_VAR 0 3
15382: PPUSH
15383: CALL_OW 47
15387: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15388: LD_OWVAR 42
15392: PUSH
15393: LD_INT 32
15395: PUSH
15396: LD_INT 33
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: IN
15403: IFFALSE 15419
// PlaceWeaponTurret ( b , weapon ) ;
15405: LD_VAR 0 8
15409: PPUSH
15410: LD_VAR 0 4
15414: PPUSH
15415: CALL_OW 431
// end ;
15419: LD_VAR 0 7
15423: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15424: LD_INT 0
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15430: LD_ADDR_VAR 0 4
15434: PUSH
15435: LD_INT 22
15437: PUSH
15438: LD_OWVAR 2
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 2
15449: PUSH
15450: LD_INT 30
15452: PUSH
15453: LD_INT 0
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 30
15462: PUSH
15463: LD_INT 1
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: ST_TO_ADDR
// if not tmp then
15484: LD_VAR 0 4
15488: NOT
15489: IFFALSE 15493
// exit ;
15491: GO 15552
// for i in tmp do
15493: LD_ADDR_VAR 0 2
15497: PUSH
15498: LD_VAR 0 4
15502: PUSH
15503: FOR_IN
15504: IFFALSE 15550
// for j = 1 to 3 do
15506: LD_ADDR_VAR 0 3
15510: PUSH
15511: DOUBLE
15512: LD_INT 1
15514: DEC
15515: ST_TO_ADDR
15516: LD_INT 3
15518: PUSH
15519: FOR_TO
15520: IFFALSE 15546
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15522: LD_VAR 0 2
15526: PPUSH
15527: CALL_OW 274
15531: PPUSH
15532: LD_VAR 0 3
15536: PPUSH
15537: LD_INT 99999
15539: PPUSH
15540: CALL_OW 277
15544: GO 15519
15546: POP
15547: POP
15548: GO 15503
15550: POP
15551: POP
// end ;
15552: LD_VAR 0 1
15556: RET
// export function hHackSetLevel10 ; var i , j ; begin
15557: LD_INT 0
15559: PPUSH
15560: PPUSH
15561: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15562: LD_ADDR_VAR 0 2
15566: PUSH
15567: LD_INT 21
15569: PUSH
15570: LD_INT 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 69
15581: PUSH
15582: FOR_IN
15583: IFFALSE 15635
// if IsSelected ( i ) then
15585: LD_VAR 0 2
15589: PPUSH
15590: CALL_OW 306
15594: IFFALSE 15633
// begin for j := 1 to 4 do
15596: LD_ADDR_VAR 0 3
15600: PUSH
15601: DOUBLE
15602: LD_INT 1
15604: DEC
15605: ST_TO_ADDR
15606: LD_INT 4
15608: PUSH
15609: FOR_TO
15610: IFFALSE 15631
// SetSkill ( i , j , 10 ) ;
15612: LD_VAR 0 2
15616: PPUSH
15617: LD_VAR 0 3
15621: PPUSH
15622: LD_INT 10
15624: PPUSH
15625: CALL_OW 237
15629: GO 15609
15631: POP
15632: POP
// end ;
15633: GO 15582
15635: POP
15636: POP
// end ;
15637: LD_VAR 0 1
15641: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15642: LD_INT 0
15644: PPUSH
15645: PPUSH
15646: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15647: LD_ADDR_VAR 0 2
15651: PUSH
15652: LD_INT 22
15654: PUSH
15655: LD_OWVAR 2
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 21
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PPUSH
15678: CALL_OW 69
15682: PUSH
15683: FOR_IN
15684: IFFALSE 15725
// begin for j := 1 to 4 do
15686: LD_ADDR_VAR 0 3
15690: PUSH
15691: DOUBLE
15692: LD_INT 1
15694: DEC
15695: ST_TO_ADDR
15696: LD_INT 4
15698: PUSH
15699: FOR_TO
15700: IFFALSE 15721
// SetSkill ( i , j , 10 ) ;
15702: LD_VAR 0 2
15706: PPUSH
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 10
15714: PPUSH
15715: CALL_OW 237
15719: GO 15699
15721: POP
15722: POP
// end ;
15723: GO 15683
15725: POP
15726: POP
// end ;
15727: LD_VAR 0 1
15731: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15732: LD_INT 0
15734: PPUSH
// uc_side := your_side ;
15735: LD_ADDR_OWVAR 20
15739: PUSH
15740: LD_OWVAR 2
15744: ST_TO_ADDR
// uc_nation := nation ;
15745: LD_ADDR_OWVAR 21
15749: PUSH
15750: LD_VAR 0 1
15754: ST_TO_ADDR
// InitHc ;
15755: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15759: LD_INT 0
15761: PPUSH
15762: LD_VAR 0 2
15766: PPUSH
15767: LD_VAR 0 3
15771: PPUSH
15772: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 5
15785: PPUSH
15786: CALL_OW 428
15790: PUSH
15791: LD_INT 0
15793: EQUAL
15794: IFFALSE 15818
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15796: CALL_OW 44
15800: PPUSH
15801: LD_VAR 0 4
15805: PPUSH
15806: LD_VAR 0 5
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: CALL_OW 48
// end ;
15818: LD_VAR 0 6
15822: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15823: LD_INT 0
15825: PPUSH
15826: PPUSH
// uc_side := your_side ;
15827: LD_ADDR_OWVAR 20
15831: PUSH
15832: LD_OWVAR 2
15836: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15837: LD_VAR 0 1
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: LD_INT 3
15850: PUSH
15851: LD_INT 4
15853: PUSH
15854: LD_INT 5
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: IN
15864: IFFALSE 15876
// uc_nation := nation_american else
15866: LD_ADDR_OWVAR 21
15870: PUSH
15871: LD_INT 1
15873: ST_TO_ADDR
15874: GO 15919
// if chassis in [ 11 , 12 , 13 , 14 ] then
15876: LD_VAR 0 1
15880: PUSH
15881: LD_INT 11
15883: PUSH
15884: LD_INT 12
15886: PUSH
15887: LD_INT 13
15889: PUSH
15890: LD_INT 14
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: IN
15899: IFFALSE 15911
// uc_nation := nation_arabian else
15901: LD_ADDR_OWVAR 21
15905: PUSH
15906: LD_INT 2
15908: ST_TO_ADDR
15909: GO 15919
// uc_nation := nation_russian ;
15911: LD_ADDR_OWVAR 21
15915: PUSH
15916: LD_INT 3
15918: ST_TO_ADDR
// vc_chassis := chassis ;
15919: LD_ADDR_OWVAR 37
15923: PUSH
15924: LD_VAR 0 1
15928: ST_TO_ADDR
// vc_engine := engine ;
15929: LD_ADDR_OWVAR 39
15933: PUSH
15934: LD_VAR 0 2
15938: ST_TO_ADDR
// vc_control := control ;
15939: LD_ADDR_OWVAR 38
15943: PUSH
15944: LD_VAR 0 3
15948: ST_TO_ADDR
// vc_weapon := weapon ;
15949: LD_ADDR_OWVAR 40
15953: PUSH
15954: LD_VAR 0 4
15958: ST_TO_ADDR
// un := CreateVehicle ;
15959: LD_ADDR_VAR 0 8
15963: PUSH
15964: CALL_OW 45
15968: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15969: LD_VAR 0 8
15973: PPUSH
15974: LD_INT 0
15976: PPUSH
15977: LD_INT 5
15979: PPUSH
15980: CALL_OW 12
15984: PPUSH
15985: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15989: LD_VAR 0 8
15993: PPUSH
15994: LD_VAR 0 5
15998: PPUSH
15999: LD_VAR 0 6
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 48
// end ;
16011: LD_VAR 0 7
16015: RET
// export hInvincible ; every 1 do
16016: GO 16018
16018: DISABLE
// hInvincible := [ ] ;
16019: LD_ADDR_EXP 65
16023: PUSH
16024: EMPTY
16025: ST_TO_ADDR
16026: END
// every 10 do var i ;
16027: GO 16029
16029: DISABLE
16030: LD_INT 0
16032: PPUSH
// begin enable ;
16033: ENABLE
// if not hInvincible then
16034: LD_EXP 65
16038: NOT
16039: IFFALSE 16043
// exit ;
16041: GO 16087
// for i in hInvincible do
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: LD_EXP 65
16052: PUSH
16053: FOR_IN
16054: IFFALSE 16085
// if GetLives ( i ) < 1000 then
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 256
16065: PUSH
16066: LD_INT 1000
16068: LESS
16069: IFFALSE 16083
// SetLives ( i , 1000 ) ;
16071: LD_VAR 0 1
16075: PPUSH
16076: LD_INT 1000
16078: PPUSH
16079: CALL_OW 234
16083: GO 16053
16085: POP
16086: POP
// end ;
16087: PPOPN 1
16089: END
// export function hHackInvincible ; var i ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16094: LD_ADDR_VAR 0 2
16098: PUSH
16099: LD_INT 2
16101: PUSH
16102: LD_INT 21
16104: PUSH
16105: LD_INT 1
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 2
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 69
16131: PUSH
16132: FOR_IN
16133: IFFALSE 16194
// if IsSelected ( i ) then
16135: LD_VAR 0 2
16139: PPUSH
16140: CALL_OW 306
16144: IFFALSE 16192
// begin if i in hInvincible then
16146: LD_VAR 0 2
16150: PUSH
16151: LD_EXP 65
16155: IN
16156: IFFALSE 16176
// hInvincible := hInvincible diff i else
16158: LD_ADDR_EXP 65
16162: PUSH
16163: LD_EXP 65
16167: PUSH
16168: LD_VAR 0 2
16172: DIFF
16173: ST_TO_ADDR
16174: GO 16192
// hInvincible := hInvincible union i ;
16176: LD_ADDR_EXP 65
16180: PUSH
16181: LD_EXP 65
16185: PUSH
16186: LD_VAR 0 2
16190: UNION
16191: ST_TO_ADDR
// end ;
16192: GO 16132
16194: POP
16195: POP
// end ;
16196: LD_VAR 0 1
16200: RET
// export function hHackInvisible ; var i , j ; begin
16201: LD_INT 0
16203: PPUSH
16204: PPUSH
16205: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: LD_INT 21
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PUSH
16226: FOR_IN
16227: IFFALSE 16251
// if IsSelected ( i ) then
16229: LD_VAR 0 2
16233: PPUSH
16234: CALL_OW 306
16238: IFFALSE 16249
// ComForceInvisible ( i ) ;
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL_OW 496
16249: GO 16226
16251: POP
16252: POP
// end ;
16253: LD_VAR 0 1
16257: RET
// export function hHackChangeYourSide ; begin
16258: LD_INT 0
16260: PPUSH
// if your_side = 8 then
16261: LD_OWVAR 2
16265: PUSH
16266: LD_INT 8
16268: EQUAL
16269: IFFALSE 16281
// your_side := 0 else
16271: LD_ADDR_OWVAR 2
16275: PUSH
16276: LD_INT 0
16278: ST_TO_ADDR
16279: GO 16295
// your_side := your_side + 1 ;
16281: LD_ADDR_OWVAR 2
16285: PUSH
16286: LD_OWVAR 2
16290: PUSH
16291: LD_INT 1
16293: PLUS
16294: ST_TO_ADDR
// end ;
16295: LD_VAR 0 1
16299: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16300: LD_INT 0
16302: PPUSH
16303: PPUSH
16304: PPUSH
// for i in all_units do
16305: LD_ADDR_VAR 0 2
16309: PUSH
16310: LD_OWVAR 3
16314: PUSH
16315: FOR_IN
16316: IFFALSE 16394
// if IsSelected ( i ) then
16318: LD_VAR 0 2
16322: PPUSH
16323: CALL_OW 306
16327: IFFALSE 16392
// begin j := GetSide ( i ) ;
16329: LD_ADDR_VAR 0 3
16333: PUSH
16334: LD_VAR 0 2
16338: PPUSH
16339: CALL_OW 255
16343: ST_TO_ADDR
// if j = 8 then
16344: LD_VAR 0 3
16348: PUSH
16349: LD_INT 8
16351: EQUAL
16352: IFFALSE 16364
// j := 0 else
16354: LD_ADDR_VAR 0 3
16358: PUSH
16359: LD_INT 0
16361: ST_TO_ADDR
16362: GO 16378
// j := j + 1 ;
16364: LD_ADDR_VAR 0 3
16368: PUSH
16369: LD_VAR 0 3
16373: PUSH
16374: LD_INT 1
16376: PLUS
16377: ST_TO_ADDR
// SetSide ( i , j ) ;
16378: LD_VAR 0 2
16382: PPUSH
16383: LD_VAR 0 3
16387: PPUSH
16388: CALL_OW 235
// end ;
16392: GO 16315
16394: POP
16395: POP
// end ;
16396: LD_VAR 0 1
16400: RET
// export function hHackFog ; begin
16401: LD_INT 0
16403: PPUSH
// FogOff ( true ) ;
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 344
// end ;
16411: LD_VAR 0 1
16415: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16416: LD_INT 0
16418: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16419: LD_VAR 0 1
16423: PPUSH
16424: LD_VAR 0 2
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: LD_INT 1
16439: PPUSH
16440: CALL_OW 483
// CenterOnXY ( x , y ) ;
16444: LD_VAR 0 2
16448: PPUSH
16449: LD_VAR 0 3
16453: PPUSH
16454: CALL_OW 84
// end ;
16458: LD_VAR 0 4
16462: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16463: LD_INT 0
16465: PPUSH
16466: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16467: LD_VAR 0 1
16471: NOT
16472: PUSH
16473: LD_VAR 0 2
16477: PPUSH
16478: LD_VAR 0 3
16482: PPUSH
16483: CALL_OW 488
16487: NOT
16488: OR
16489: PUSH
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 266
16499: PUSH
16500: LD_INT 3
16502: NONEQUAL
16503: PUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 247
16513: PUSH
16514: LD_INT 1
16516: EQUAL
16517: NOT
16518: AND
16519: OR
16520: IFFALSE 16524
// exit ;
16522: GO 16673
// if GetType ( factory ) = unit_human then
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 247
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: IFFALSE 16554
// factory := IsInUnit ( factory ) ;
16539: LD_ADDR_VAR 0 1
16543: PUSH
16544: LD_VAR 0 1
16548: PPUSH
16549: CALL_OW 310
16553: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16554: LD_VAR 0 1
16558: PPUSH
16559: CALL_OW 266
16563: PUSH
16564: LD_INT 3
16566: NONEQUAL
16567: IFFALSE 16571
// exit ;
16569: GO 16673
// if HexInfo ( x , y ) = factory then
16571: LD_VAR 0 2
16575: PPUSH
16576: LD_VAR 0 3
16580: PPUSH
16581: CALL_OW 428
16585: PUSH
16586: LD_VAR 0 1
16590: EQUAL
16591: IFFALSE 16618
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16593: LD_ADDR_EXP 66
16597: PUSH
16598: LD_EXP 66
16602: PPUSH
16603: LD_VAR 0 1
16607: PPUSH
16608: LD_INT 0
16610: PPUSH
16611: CALL_OW 1
16615: ST_TO_ADDR
16616: GO 16669
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16618: LD_ADDR_EXP 66
16622: PUSH
16623: LD_EXP 66
16627: PPUSH
16628: LD_VAR 0 1
16632: PPUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 255
16642: PUSH
16643: LD_VAR 0 1
16647: PUSH
16648: LD_VAR 0 2
16652: PUSH
16653: LD_VAR 0 3
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: PPUSH
16664: CALL_OW 1
16668: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16669: CALL 16678 0 0
// end ;
16673: LD_VAR 0 4
16677: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16678: LD_INT 0
16680: PPUSH
16681: PPUSH
16682: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16683: LD_STRING resetFactoryWaypoint();
16685: PPUSH
16686: CALL_OW 559
// if factoryWaypoints then
16690: LD_EXP 66
16694: IFFALSE 16820
// begin list := PrepareArray ( factoryWaypoints ) ;
16696: LD_ADDR_VAR 0 3
16700: PUSH
16701: LD_EXP 66
16705: PPUSH
16706: CALL 64280 0 1
16710: ST_TO_ADDR
// for i := 1 to list do
16711: LD_ADDR_VAR 0 2
16715: PUSH
16716: DOUBLE
16717: LD_INT 1
16719: DEC
16720: ST_TO_ADDR
16721: LD_VAR 0 3
16725: PUSH
16726: FOR_TO
16727: IFFALSE 16818
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16729: LD_STRING setFactoryWaypointXY(
16731: PUSH
16732: LD_VAR 0 3
16736: PUSH
16737: LD_VAR 0 2
16741: ARRAY
16742: PUSH
16743: LD_INT 1
16745: ARRAY
16746: STR
16747: PUSH
16748: LD_STRING ,
16750: STR
16751: PUSH
16752: LD_VAR 0 3
16756: PUSH
16757: LD_VAR 0 2
16761: ARRAY
16762: PUSH
16763: LD_INT 2
16765: ARRAY
16766: STR
16767: PUSH
16768: LD_STRING ,
16770: STR
16771: PUSH
16772: LD_VAR 0 3
16776: PUSH
16777: LD_VAR 0 2
16781: ARRAY
16782: PUSH
16783: LD_INT 3
16785: ARRAY
16786: STR
16787: PUSH
16788: LD_STRING ,
16790: STR
16791: PUSH
16792: LD_VAR 0 3
16796: PUSH
16797: LD_VAR 0 2
16801: ARRAY
16802: PUSH
16803: LD_INT 4
16805: ARRAY
16806: STR
16807: PUSH
16808: LD_STRING )
16810: STR
16811: PPUSH
16812: CALL_OW 559
16816: GO 16726
16818: POP
16819: POP
// end ; end ;
16820: LD_VAR 0 1
16824: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16825: LD_INT 0
16827: PPUSH
// if HexInfo ( x , y ) = warehouse then
16828: LD_VAR 0 2
16832: PPUSH
16833: LD_VAR 0 3
16837: PPUSH
16838: CALL_OW 428
16842: PUSH
16843: LD_VAR 0 1
16847: EQUAL
16848: IFFALSE 16875
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16850: LD_ADDR_EXP 67
16854: PUSH
16855: LD_EXP 67
16859: PPUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: LD_INT 0
16867: PPUSH
16868: CALL_OW 1
16872: ST_TO_ADDR
16873: GO 16926
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16875: LD_ADDR_EXP 67
16879: PUSH
16880: LD_EXP 67
16884: PPUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: LD_VAR 0 1
16894: PPUSH
16895: CALL_OW 255
16899: PUSH
16900: LD_VAR 0 1
16904: PUSH
16905: LD_VAR 0 2
16909: PUSH
16910: LD_VAR 0 3
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: PPUSH
16921: CALL_OW 1
16925: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16926: CALL 16935 0 0
// end ;
16930: LD_VAR 0 4
16934: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16935: LD_INT 0
16937: PPUSH
16938: PPUSH
16939: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16940: LD_STRING resetWarehouseGatheringPoints();
16942: PPUSH
16943: CALL_OW 559
// if warehouseGatheringPoints then
16947: LD_EXP 67
16951: IFFALSE 17077
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_EXP 67
16962: PPUSH
16963: CALL 64280 0 1
16967: ST_TO_ADDR
// for i := 1 to list do
16968: LD_ADDR_VAR 0 2
16972: PUSH
16973: DOUBLE
16974: LD_INT 1
16976: DEC
16977: ST_TO_ADDR
16978: LD_VAR 0 3
16982: PUSH
16983: FOR_TO
16984: IFFALSE 17075
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16986: LD_STRING setWarehouseGatheringPointXY(
16988: PUSH
16989: LD_VAR 0 3
16993: PUSH
16994: LD_VAR 0 2
16998: ARRAY
16999: PUSH
17000: LD_INT 1
17002: ARRAY
17003: STR
17004: PUSH
17005: LD_STRING ,
17007: STR
17008: PUSH
17009: LD_VAR 0 3
17013: PUSH
17014: LD_VAR 0 2
17018: ARRAY
17019: PUSH
17020: LD_INT 2
17022: ARRAY
17023: STR
17024: PUSH
17025: LD_STRING ,
17027: STR
17028: PUSH
17029: LD_VAR 0 3
17033: PUSH
17034: LD_VAR 0 2
17038: ARRAY
17039: PUSH
17040: LD_INT 3
17042: ARRAY
17043: STR
17044: PUSH
17045: LD_STRING ,
17047: STR
17048: PUSH
17049: LD_VAR 0 3
17053: PUSH
17054: LD_VAR 0 2
17058: ARRAY
17059: PUSH
17060: LD_INT 4
17062: ARRAY
17063: STR
17064: PUSH
17065: LD_STRING )
17067: STR
17068: PPUSH
17069: CALL_OW 559
17073: GO 16983
17075: POP
17076: POP
// end ; end ;
17077: LD_VAR 0 1
17081: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17082: LD_EXP 67
17086: IFFALSE 17771
17088: GO 17090
17090: DISABLE
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
// begin enable ;
17102: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: LD_EXP 67
17112: PPUSH
17113: CALL 64280 0 1
17117: ST_TO_ADDR
// if not list then
17118: LD_VAR 0 3
17122: NOT
17123: IFFALSE 17127
// exit ;
17125: GO 17771
// for i := 1 to list do
17127: LD_ADDR_VAR 0 1
17131: PUSH
17132: DOUBLE
17133: LD_INT 1
17135: DEC
17136: ST_TO_ADDR
17137: LD_VAR 0 3
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17769
// begin depot := list [ i ] [ 2 ] ;
17145: LD_ADDR_VAR 0 8
17149: PUSH
17150: LD_VAR 0 3
17154: PUSH
17155: LD_VAR 0 1
17159: ARRAY
17160: PUSH
17161: LD_INT 2
17163: ARRAY
17164: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17165: LD_ADDR_VAR 0 5
17169: PUSH
17170: LD_VAR 0 3
17174: PUSH
17175: LD_VAR 0 1
17179: ARRAY
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17185: LD_VAR 0 8
17189: PPUSH
17190: CALL_OW 301
17194: PUSH
17195: LD_VAR 0 5
17199: PUSH
17200: LD_VAR 0 8
17204: PPUSH
17205: CALL_OW 255
17209: NONEQUAL
17210: OR
17211: IFFALSE 17240
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17213: LD_ADDR_EXP 67
17217: PUSH
17218: LD_EXP 67
17222: PPUSH
17223: LD_VAR 0 8
17227: PPUSH
17228: LD_INT 0
17230: PPUSH
17231: CALL_OW 1
17235: ST_TO_ADDR
// exit ;
17236: POP
17237: POP
17238: GO 17771
// end ; x := list [ i ] [ 3 ] ;
17240: LD_ADDR_VAR 0 6
17244: PUSH
17245: LD_VAR 0 3
17249: PUSH
17250: LD_VAR 0 1
17254: ARRAY
17255: PUSH
17256: LD_INT 3
17258: ARRAY
17259: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17260: LD_ADDR_VAR 0 7
17264: PUSH
17265: LD_VAR 0 3
17269: PUSH
17270: LD_VAR 0 1
17274: ARRAY
17275: PUSH
17276: LD_INT 4
17278: ARRAY
17279: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17280: LD_ADDR_VAR 0 9
17284: PUSH
17285: LD_VAR 0 6
17289: PPUSH
17290: LD_VAR 0 7
17294: PPUSH
17295: LD_INT 16
17297: PPUSH
17298: CALL 62868 0 3
17302: ST_TO_ADDR
// if not cratesNearbyPoint then
17303: LD_VAR 0 9
17307: NOT
17308: IFFALSE 17314
// exit ;
17310: POP
17311: POP
17312: GO 17771
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17314: LD_ADDR_VAR 0 4
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_VAR 0 5
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: LD_INT 60
17336: PUSH
17337: EMPTY
17338: LIST
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 91
17346: PUSH
17347: LD_VAR 0 8
17351: PUSH
17352: LD_INT 6
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: LD_INT 25
17365: PUSH
17366: LD_INT 2
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 25
17375: PUSH
17376: LD_INT 16
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: PPUSH
17394: CALL_OW 69
17398: PUSH
17399: LD_VAR 0 8
17403: PPUSH
17404: CALL_OW 313
17408: PPUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 60
17414: PUSH
17415: EMPTY
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 2
17424: PUSH
17425: LD_INT 25
17427: PUSH
17428: LD_INT 2
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 25
17437: PUSH
17438: LD_INT 16
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PPUSH
17454: CALL_OW 72
17458: UNION
17459: ST_TO_ADDR
// if tmp then
17460: LD_VAR 0 4
17464: IFFALSE 17544
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17466: LD_ADDR_VAR 0 4
17470: PUSH
17471: LD_VAR 0 4
17475: PPUSH
17476: LD_INT 3
17478: PPUSH
17479: CALL 60837 0 2
17483: ST_TO_ADDR
// for j in tmp do
17484: LD_ADDR_VAR 0 2
17488: PUSH
17489: LD_VAR 0 4
17493: PUSH
17494: FOR_IN
17495: IFFALSE 17538
// begin if IsInUnit ( j ) then
17497: LD_VAR 0 2
17501: PPUSH
17502: CALL_OW 310
17506: IFFALSE 17517
// ComExit ( j ) ;
17508: LD_VAR 0 2
17512: PPUSH
17513: CALL 60920 0 1
// AddComCollect ( j , x , y ) ;
17517: LD_VAR 0 2
17521: PPUSH
17522: LD_VAR 0 6
17526: PPUSH
17527: LD_VAR 0 7
17531: PPUSH
17532: CALL_OW 177
// end ;
17536: GO 17494
17538: POP
17539: POP
// exit ;
17540: POP
17541: POP
17542: GO 17771
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17544: LD_ADDR_VAR 0 4
17548: PUSH
17549: LD_INT 22
17551: PUSH
17552: LD_VAR 0 5
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 91
17563: PUSH
17564: LD_VAR 0 8
17568: PUSH
17569: LD_INT 8
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: LD_INT 34
17582: PUSH
17583: LD_INT 12
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 34
17592: PUSH
17593: LD_INT 51
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 34
17602: PUSH
17603: LD_INT 32
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 34
17612: PUSH
17613: LD_INT 89
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: PPUSH
17632: CALL_OW 69
17636: ST_TO_ADDR
// if tmp then
17637: LD_VAR 0 4
17641: IFFALSE 17767
// begin for j in tmp do
17643: LD_ADDR_VAR 0 2
17647: PUSH
17648: LD_VAR 0 4
17652: PUSH
17653: FOR_IN
17654: IFFALSE 17765
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17656: LD_VAR 0 2
17660: PPUSH
17661: CALL_OW 262
17665: PUSH
17666: LD_INT 3
17668: EQUAL
17669: PUSH
17670: LD_VAR 0 2
17674: PPUSH
17675: CALL_OW 261
17679: PUSH
17680: LD_INT 20
17682: GREATER
17683: OR
17684: PUSH
17685: LD_VAR 0 2
17689: PPUSH
17690: CALL_OW 314
17694: NOT
17695: AND
17696: PUSH
17697: LD_VAR 0 2
17701: PPUSH
17702: CALL_OW 263
17706: PUSH
17707: LD_INT 1
17709: NONEQUAL
17710: PUSH
17711: LD_VAR 0 2
17715: PPUSH
17716: CALL_OW 311
17720: OR
17721: AND
17722: IFFALSE 17763
// begin ComCollect ( j , x , y ) ;
17724: LD_VAR 0 2
17728: PPUSH
17729: LD_VAR 0 6
17733: PPUSH
17734: LD_VAR 0 7
17738: PPUSH
17739: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17743: LD_VAR 0 2
17747: PPUSH
17748: LD_VAR 0 8
17752: PPUSH
17753: CALL_OW 172
// exit ;
17757: POP
17758: POP
17759: POP
17760: POP
17761: GO 17771
// end ;
17763: GO 17653
17765: POP
17766: POP
// end ; end ;
17767: GO 17142
17769: POP
17770: POP
// end ; end_of_file
17771: PPOPN 9
17773: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17774: LD_INT 0
17776: PPUSH
17777: PPUSH
17778: PPUSH
17779: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 264
17789: PUSH
17790: LD_INT 91
17792: EQUAL
17793: IFFALSE 17865
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17795: LD_INT 68
17797: PPUSH
17798: LD_VAR 0 1
17802: PPUSH
17803: CALL_OW 255
17807: PPUSH
17808: CALL_OW 321
17812: PUSH
17813: LD_INT 2
17815: EQUAL
17816: IFFALSE 17828
// eff := 70 else
17818: LD_ADDR_VAR 0 4
17822: PUSH
17823: LD_INT 70
17825: ST_TO_ADDR
17826: GO 17836
// eff := 30 ;
17828: LD_ADDR_VAR 0 4
17832: PUSH
17833: LD_INT 30
17835: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17836: LD_VAR 0 1
17840: PPUSH
17841: CALL_OW 250
17845: PPUSH
17846: LD_VAR 0 1
17850: PPUSH
17851: CALL_OW 251
17855: PPUSH
17856: LD_VAR 0 4
17860: PPUSH
17861: CALL_OW 495
// end ; end ;
17865: LD_VAR 0 2
17869: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17870: LD_INT 0
17872: PPUSH
// end ;
17873: LD_VAR 0 4
17877: RET
// export function SOS_Command ( cmd ) ; begin
17878: LD_INT 0
17880: PPUSH
// end ;
17881: LD_VAR 0 2
17885: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17886: LD_INT 0
17888: PPUSH
// end ;
17889: LD_VAR 0 6
17893: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17894: LD_INT 0
17896: PPUSH
17897: PPUSH
// if not vehicle or not factory then
17898: LD_VAR 0 1
17902: NOT
17903: PUSH
17904: LD_VAR 0 2
17908: NOT
17909: OR
17910: IFFALSE 17914
// exit ;
17912: GO 18145
// if factoryWaypoints >= factory then
17914: LD_EXP 66
17918: PUSH
17919: LD_VAR 0 2
17923: GREATEREQUAL
17924: IFFALSE 18145
// if factoryWaypoints [ factory ] then
17926: LD_EXP 66
17930: PUSH
17931: LD_VAR 0 2
17935: ARRAY
17936: IFFALSE 18145
// begin if GetControl ( vehicle ) = control_manual then
17938: LD_VAR 0 1
17942: PPUSH
17943: CALL_OW 263
17947: PUSH
17948: LD_INT 1
17950: EQUAL
17951: IFFALSE 18032
// begin driver := IsDrivenBy ( vehicle ) ;
17953: LD_ADDR_VAR 0 4
17957: PUSH
17958: LD_VAR 0 1
17962: PPUSH
17963: CALL_OW 311
17967: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17968: LD_VAR 0 4
17972: PPUSH
17973: LD_EXP 66
17977: PUSH
17978: LD_VAR 0 2
17982: ARRAY
17983: PUSH
17984: LD_INT 3
17986: ARRAY
17987: PPUSH
17988: LD_EXP 66
17992: PUSH
17993: LD_VAR 0 2
17997: ARRAY
17998: PUSH
17999: LD_INT 4
18001: ARRAY
18002: PPUSH
18003: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18007: LD_VAR 0 4
18011: PPUSH
18012: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
18016: LD_VAR 0 4
18020: PPUSH
18021: LD_VAR 0 2
18025: PPUSH
18026: CALL_OW 180
// end else
18030: GO 18145
// if GetControl ( vehicle ) = control_remote then
18032: LD_VAR 0 1
18036: PPUSH
18037: CALL_OW 263
18041: PUSH
18042: LD_INT 2
18044: EQUAL
18045: IFFALSE 18106
// begin wait ( 0 0$2 ) ;
18047: LD_INT 70
18049: PPUSH
18050: CALL_OW 67
// if Connect ( vehicle ) then
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL 31139 0 1
18063: IFFALSE 18104
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18065: LD_VAR 0 1
18069: PPUSH
18070: LD_EXP 66
18074: PUSH
18075: LD_VAR 0 2
18079: ARRAY
18080: PUSH
18081: LD_INT 3
18083: ARRAY
18084: PPUSH
18085: LD_EXP 66
18089: PUSH
18090: LD_VAR 0 2
18094: ARRAY
18095: PUSH
18096: LD_INT 4
18098: ARRAY
18099: PPUSH
18100: CALL_OW 171
// end else
18104: GO 18145
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18106: LD_VAR 0 1
18110: PPUSH
18111: LD_EXP 66
18115: PUSH
18116: LD_VAR 0 2
18120: ARRAY
18121: PUSH
18122: LD_INT 3
18124: ARRAY
18125: PPUSH
18126: LD_EXP 66
18130: PUSH
18131: LD_VAR 0 2
18135: ARRAY
18136: PUSH
18137: LD_INT 4
18139: ARRAY
18140: PPUSH
18141: CALL_OW 171
// end ; end ;
18145: LD_VAR 0 3
18149: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18150: LD_INT 0
18152: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18153: LD_VAR 0 1
18157: PUSH
18158: LD_INT 250
18160: EQUAL
18161: PUSH
18162: LD_VAR 0 2
18166: PPUSH
18167: CALL_OW 264
18171: PUSH
18172: LD_INT 81
18174: EQUAL
18175: AND
18176: IFFALSE 18197
// MinerPlaceMine ( unit , x , y ) ;
18178: LD_VAR 0 2
18182: PPUSH
18183: LD_VAR 0 4
18187: PPUSH
18188: LD_VAR 0 5
18192: PPUSH
18193: CALL 21187 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18197: LD_VAR 0 1
18201: PUSH
18202: LD_INT 251
18204: EQUAL
18205: PUSH
18206: LD_VAR 0 2
18210: PPUSH
18211: CALL_OW 264
18215: PUSH
18216: LD_INT 81
18218: EQUAL
18219: AND
18220: IFFALSE 18241
// MinerDetonateMine ( unit , x , y ) ;
18222: LD_VAR 0 2
18226: PPUSH
18227: LD_VAR 0 4
18231: PPUSH
18232: LD_VAR 0 5
18236: PPUSH
18237: CALL 21462 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18241: LD_VAR 0 1
18245: PUSH
18246: LD_INT 252
18248: EQUAL
18249: PUSH
18250: LD_VAR 0 2
18254: PPUSH
18255: CALL_OW 264
18259: PUSH
18260: LD_INT 81
18262: EQUAL
18263: AND
18264: IFFALSE 18285
// MinerCreateMinefield ( unit , x , y ) ;
18266: LD_VAR 0 2
18270: PPUSH
18271: LD_VAR 0 4
18275: PPUSH
18276: LD_VAR 0 5
18280: PPUSH
18281: CALL 21879 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18285: LD_VAR 0 1
18289: PUSH
18290: LD_INT 253
18292: EQUAL
18293: PUSH
18294: LD_VAR 0 2
18298: PPUSH
18299: CALL_OW 257
18303: PUSH
18304: LD_INT 5
18306: EQUAL
18307: AND
18308: IFFALSE 18329
// ComBinocular ( unit , x , y ) ;
18310: LD_VAR 0 2
18314: PPUSH
18315: LD_VAR 0 4
18319: PPUSH
18320: LD_VAR 0 5
18324: PPUSH
18325: CALL 22248 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18329: LD_VAR 0 1
18333: PUSH
18334: LD_INT 254
18336: EQUAL
18337: PUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: CALL_OW 264
18347: PUSH
18348: LD_INT 99
18350: EQUAL
18351: AND
18352: PUSH
18353: LD_VAR 0 3
18357: PPUSH
18358: CALL_OW 263
18362: PUSH
18363: LD_INT 3
18365: EQUAL
18366: AND
18367: IFFALSE 18383
// HackDestroyVehicle ( unit , selectedUnit ) ;
18369: LD_VAR 0 2
18373: PPUSH
18374: LD_VAR 0 3
18378: PPUSH
18379: CALL 20551 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18383: LD_VAR 0 1
18387: PUSH
18388: LD_INT 255
18390: EQUAL
18391: PUSH
18392: LD_VAR 0 2
18396: PPUSH
18397: CALL_OW 264
18401: PUSH
18402: LD_INT 14
18404: PUSH
18405: LD_INT 53
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: IN
18412: AND
18413: PUSH
18414: LD_VAR 0 4
18418: PPUSH
18419: LD_VAR 0 5
18423: PPUSH
18424: CALL_OW 488
18428: AND
18429: IFFALSE 18453
// CutTreeXYR ( unit , x , y , 12 ) ;
18431: LD_VAR 0 2
18435: PPUSH
18436: LD_VAR 0 4
18440: PPUSH
18441: LD_VAR 0 5
18445: PPUSH
18446: LD_INT 12
18448: PPUSH
18449: CALL 18548 0 4
// if cmd = 256 then
18453: LD_VAR 0 1
18457: PUSH
18458: LD_INT 256
18460: EQUAL
18461: IFFALSE 18482
// SetFactoryWaypoint ( unit , x , y ) ;
18463: LD_VAR 0 2
18467: PPUSH
18468: LD_VAR 0 4
18472: PPUSH
18473: LD_VAR 0 5
18477: PPUSH
18478: CALL 16463 0 3
// if cmd = 257 then
18482: LD_VAR 0 1
18486: PUSH
18487: LD_INT 257
18489: EQUAL
18490: IFFALSE 18511
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18492: LD_VAR 0 2
18496: PPUSH
18497: LD_VAR 0 4
18501: PPUSH
18502: LD_VAR 0 5
18506: PPUSH
18507: CALL 16825 0 3
// if cmd = 258 then
18511: LD_VAR 0 1
18515: PUSH
18516: LD_INT 258
18518: EQUAL
18519: IFFALSE 18543
// BurnTreeXYR ( unit , x , y , 8 ) ;
18521: LD_VAR 0 2
18525: PPUSH
18526: LD_VAR 0 4
18530: PPUSH
18531: LD_VAR 0 5
18535: PPUSH
18536: LD_INT 8
18538: PPUSH
18539: CALL 18942 0 4
// end ;
18543: LD_VAR 0 6
18547: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18548: LD_INT 0
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 302
18568: NOT
18569: PUSH
18570: LD_VAR 0 2
18574: PPUSH
18575: LD_VAR 0 3
18579: PPUSH
18580: CALL_OW 488
18584: NOT
18585: OR
18586: PUSH
18587: LD_VAR 0 4
18591: NOT
18592: OR
18593: IFFALSE 18597
// exit ;
18595: GO 18937
// list := [ ] ;
18597: LD_ADDR_VAR 0 13
18601: PUSH
18602: EMPTY
18603: ST_TO_ADDR
// if x - r < 0 then
18604: LD_VAR 0 2
18608: PUSH
18609: LD_VAR 0 4
18613: MINUS
18614: PUSH
18615: LD_INT 0
18617: LESS
18618: IFFALSE 18630
// min_x := 0 else
18620: LD_ADDR_VAR 0 7
18624: PUSH
18625: LD_INT 0
18627: ST_TO_ADDR
18628: GO 18646
// min_x := x - r ;
18630: LD_ADDR_VAR 0 7
18634: PUSH
18635: LD_VAR 0 2
18639: PUSH
18640: LD_VAR 0 4
18644: MINUS
18645: ST_TO_ADDR
// if y - r < 0 then
18646: LD_VAR 0 3
18650: PUSH
18651: LD_VAR 0 4
18655: MINUS
18656: PUSH
18657: LD_INT 0
18659: LESS
18660: IFFALSE 18672
// min_y := 0 else
18662: LD_ADDR_VAR 0 8
18666: PUSH
18667: LD_INT 0
18669: ST_TO_ADDR
18670: GO 18688
// min_y := y - r ;
18672: LD_ADDR_VAR 0 8
18676: PUSH
18677: LD_VAR 0 3
18681: PUSH
18682: LD_VAR 0 4
18686: MINUS
18687: ST_TO_ADDR
// max_x := x + r ;
18688: LD_ADDR_VAR 0 9
18692: PUSH
18693: LD_VAR 0 2
18697: PUSH
18698: LD_VAR 0 4
18702: PLUS
18703: ST_TO_ADDR
// max_y := y + r ;
18704: LD_ADDR_VAR 0 10
18708: PUSH
18709: LD_VAR 0 3
18713: PUSH
18714: LD_VAR 0 4
18718: PLUS
18719: ST_TO_ADDR
// for _x = min_x to max_x do
18720: LD_ADDR_VAR 0 11
18724: PUSH
18725: DOUBLE
18726: LD_VAR 0 7
18730: DEC
18731: ST_TO_ADDR
18732: LD_VAR 0 9
18736: PUSH
18737: FOR_TO
18738: IFFALSE 18855
// for _y = min_y to max_y do
18740: LD_ADDR_VAR 0 12
18744: PUSH
18745: DOUBLE
18746: LD_VAR 0 8
18750: DEC
18751: ST_TO_ADDR
18752: LD_VAR 0 10
18756: PUSH
18757: FOR_TO
18758: IFFALSE 18851
// begin if not ValidHex ( _x , _y ) then
18760: LD_VAR 0 11
18764: PPUSH
18765: LD_VAR 0 12
18769: PPUSH
18770: CALL_OW 488
18774: NOT
18775: IFFALSE 18779
// continue ;
18777: GO 18757
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18779: LD_VAR 0 11
18783: PPUSH
18784: LD_VAR 0 12
18788: PPUSH
18789: CALL_OW 351
18793: PUSH
18794: LD_VAR 0 11
18798: PPUSH
18799: LD_VAR 0 12
18803: PPUSH
18804: CALL_OW 554
18808: AND
18809: IFFALSE 18849
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18811: LD_ADDR_VAR 0 13
18815: PUSH
18816: LD_VAR 0 13
18820: PPUSH
18821: LD_VAR 0 13
18825: PUSH
18826: LD_INT 1
18828: PLUS
18829: PPUSH
18830: LD_VAR 0 11
18834: PUSH
18835: LD_VAR 0 12
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PPUSH
18844: CALL_OW 2
18848: ST_TO_ADDR
// end ;
18849: GO 18757
18851: POP
18852: POP
18853: GO 18737
18855: POP
18856: POP
// if not list then
18857: LD_VAR 0 13
18861: NOT
18862: IFFALSE 18866
// exit ;
18864: GO 18937
// for i in list do
18866: LD_ADDR_VAR 0 6
18870: PUSH
18871: LD_VAR 0 13
18875: PUSH
18876: FOR_IN
18877: IFFALSE 18935
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_STRING M
18886: PUSH
18887: LD_VAR 0 6
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PUSH
18896: LD_VAR 0 6
18900: PUSH
18901: LD_INT 2
18903: ARRAY
18904: PUSH
18905: LD_INT 0
18907: PUSH
18908: LD_INT 0
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: PPUSH
18929: CALL_OW 447
18933: GO 18876
18935: POP
18936: POP
// end ;
18937: LD_VAR 0 5
18941: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
18946: PPUSH
18947: PPUSH
18948: PPUSH
18949: PPUSH
18950: PPUSH
18951: PPUSH
18952: PPUSH
18953: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 302
18963: NOT
18964: PUSH
18965: LD_VAR 0 2
18969: PPUSH
18970: LD_VAR 0 3
18974: PPUSH
18975: CALL_OW 488
18979: NOT
18980: OR
18981: PUSH
18982: LD_VAR 0 4
18986: NOT
18987: OR
18988: IFFALSE 18992
// exit ;
18990: GO 19505
// list := [ ] ;
18992: LD_ADDR_VAR 0 13
18996: PUSH
18997: EMPTY
18998: ST_TO_ADDR
// if x - r < 0 then
18999: LD_VAR 0 2
19003: PUSH
19004: LD_VAR 0 4
19008: MINUS
19009: PUSH
19010: LD_INT 0
19012: LESS
19013: IFFALSE 19025
// min_x := 0 else
19015: LD_ADDR_VAR 0 7
19019: PUSH
19020: LD_INT 0
19022: ST_TO_ADDR
19023: GO 19041
// min_x := x - r ;
19025: LD_ADDR_VAR 0 7
19029: PUSH
19030: LD_VAR 0 2
19034: PUSH
19035: LD_VAR 0 4
19039: MINUS
19040: ST_TO_ADDR
// if y - r < 0 then
19041: LD_VAR 0 3
19045: PUSH
19046: LD_VAR 0 4
19050: MINUS
19051: PUSH
19052: LD_INT 0
19054: LESS
19055: IFFALSE 19067
// min_y := 0 else
19057: LD_ADDR_VAR 0 8
19061: PUSH
19062: LD_INT 0
19064: ST_TO_ADDR
19065: GO 19083
// min_y := y - r ;
19067: LD_ADDR_VAR 0 8
19071: PUSH
19072: LD_VAR 0 3
19076: PUSH
19077: LD_VAR 0 4
19081: MINUS
19082: ST_TO_ADDR
// max_x := x + r ;
19083: LD_ADDR_VAR 0 9
19087: PUSH
19088: LD_VAR 0 2
19092: PUSH
19093: LD_VAR 0 4
19097: PLUS
19098: ST_TO_ADDR
// max_y := y + r ;
19099: LD_ADDR_VAR 0 10
19103: PUSH
19104: LD_VAR 0 3
19108: PUSH
19109: LD_VAR 0 4
19113: PLUS
19114: ST_TO_ADDR
// for _x = min_x to max_x do
19115: LD_ADDR_VAR 0 11
19119: PUSH
19120: DOUBLE
19121: LD_VAR 0 7
19125: DEC
19126: ST_TO_ADDR
19127: LD_VAR 0 9
19131: PUSH
19132: FOR_TO
19133: IFFALSE 19250
// for _y = min_y to max_y do
19135: LD_ADDR_VAR 0 12
19139: PUSH
19140: DOUBLE
19141: LD_VAR 0 8
19145: DEC
19146: ST_TO_ADDR
19147: LD_VAR 0 10
19151: PUSH
19152: FOR_TO
19153: IFFALSE 19246
// begin if not ValidHex ( _x , _y ) then
19155: LD_VAR 0 11
19159: PPUSH
19160: LD_VAR 0 12
19164: PPUSH
19165: CALL_OW 488
19169: NOT
19170: IFFALSE 19174
// continue ;
19172: GO 19152
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19174: LD_VAR 0 11
19178: PPUSH
19179: LD_VAR 0 12
19183: PPUSH
19184: CALL_OW 351
19188: PUSH
19189: LD_VAR 0 11
19193: PPUSH
19194: LD_VAR 0 12
19198: PPUSH
19199: CALL_OW 554
19203: AND
19204: IFFALSE 19244
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19206: LD_ADDR_VAR 0 13
19210: PUSH
19211: LD_VAR 0 13
19215: PPUSH
19216: LD_VAR 0 13
19220: PUSH
19221: LD_INT 1
19223: PLUS
19224: PPUSH
19225: LD_VAR 0 11
19229: PUSH
19230: LD_VAR 0 12
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 2
19243: ST_TO_ADDR
// end ;
19244: GO 19152
19246: POP
19247: POP
19248: GO 19132
19250: POP
19251: POP
// if not list then
19252: LD_VAR 0 13
19256: NOT
19257: IFFALSE 19261
// exit ;
19259: GO 19505
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19261: LD_ADDR_VAR 0 13
19265: PUSH
19266: LD_VAR 0 1
19270: PPUSH
19271: LD_VAR 0 13
19275: PPUSH
19276: LD_INT 1
19278: PPUSH
19279: LD_INT 1
19281: PPUSH
19282: CALL 28281 0 4
19286: ST_TO_ADDR
// ComStop ( flame ) ;
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 141
// for i in list do
19296: LD_ADDR_VAR 0 6
19300: PUSH
19301: LD_VAR 0 13
19305: PUSH
19306: FOR_IN
19307: IFFALSE 19338
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_VAR 0 6
19318: PUSH
19319: LD_INT 1
19321: ARRAY
19322: PPUSH
19323: LD_VAR 0 6
19327: PUSH
19328: LD_INT 2
19330: ARRAY
19331: PPUSH
19332: CALL_OW 176
19336: GO 19306
19338: POP
19339: POP
// repeat wait ( 0 0$1 ) ;
19340: LD_INT 35
19342: PPUSH
19343: CALL_OW 67
// task := GetTaskList ( flame ) ;
19347: LD_ADDR_VAR 0 14
19351: PUSH
19352: LD_VAR 0 1
19356: PPUSH
19357: CALL_OW 437
19361: ST_TO_ADDR
// if not task then
19362: LD_VAR 0 14
19366: NOT
19367: IFFALSE 19371
// exit ;
19369: GO 19505
// if task [ 1 ] [ 1 ] <> | then
19371: LD_VAR 0 14
19375: PUSH
19376: LD_INT 1
19378: ARRAY
19379: PUSH
19380: LD_INT 1
19382: ARRAY
19383: PUSH
19384: LD_STRING |
19386: NONEQUAL
19387: IFFALSE 19391
// exit ;
19389: GO 19505
// _x := task [ 1 ] [ 2 ] ;
19391: LD_ADDR_VAR 0 11
19395: PUSH
19396: LD_VAR 0 14
19400: PUSH
19401: LD_INT 1
19403: ARRAY
19404: PUSH
19405: LD_INT 2
19407: ARRAY
19408: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19409: LD_ADDR_VAR 0 12
19413: PUSH
19414: LD_VAR 0 14
19418: PUSH
19419: LD_INT 1
19421: ARRAY
19422: PUSH
19423: LD_INT 3
19425: ARRAY
19426: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19427: LD_VAR 0 11
19431: PPUSH
19432: LD_VAR 0 12
19436: PPUSH
19437: CALL_OW 351
19441: NOT
19442: PUSH
19443: LD_VAR 0 11
19447: PPUSH
19448: LD_VAR 0 12
19452: PPUSH
19453: CALL_OW 554
19457: NOT
19458: OR
19459: IFFALSE 19493
// begin task := Delete ( task , 1 ) ;
19461: LD_ADDR_VAR 0 14
19465: PUSH
19466: LD_VAR 0 14
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 3
19478: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19479: LD_VAR 0 1
19483: PPUSH
19484: LD_VAR 0 14
19488: PPUSH
19489: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19493: LD_VAR 0 1
19497: PPUSH
19498: CALL_OW 314
19502: NOT
19503: IFFALSE 19340
// end ;
19505: LD_VAR 0 5
19509: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19510: LD_EXP 69
19514: NOT
19515: IFFALSE 19565
19517: GO 19519
19519: DISABLE
// begin initHack := true ;
19520: LD_ADDR_EXP 69
19524: PUSH
19525: LD_INT 1
19527: ST_TO_ADDR
// hackTanks := [ ] ;
19528: LD_ADDR_EXP 70
19532: PUSH
19533: EMPTY
19534: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19535: LD_ADDR_EXP 71
19539: PUSH
19540: EMPTY
19541: ST_TO_ADDR
// hackLimit := 3 ;
19542: LD_ADDR_EXP 72
19546: PUSH
19547: LD_INT 3
19549: ST_TO_ADDR
// hackDist := 12 ;
19550: LD_ADDR_EXP 73
19554: PUSH
19555: LD_INT 12
19557: ST_TO_ADDR
// hackCounter := [ ] ;
19558: LD_ADDR_EXP 74
19562: PUSH
19563: EMPTY
19564: ST_TO_ADDR
// end ;
19565: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19566: LD_EXP 69
19570: PUSH
19571: LD_INT 34
19573: PUSH
19574: LD_INT 99
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: AND
19586: IFFALSE 19839
19588: GO 19590
19590: DISABLE
19591: LD_INT 0
19593: PPUSH
19594: PPUSH
// begin enable ;
19595: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19596: LD_ADDR_VAR 0 1
19600: PUSH
19601: LD_INT 34
19603: PUSH
19604: LD_INT 99
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PPUSH
19611: CALL_OW 69
19615: PUSH
19616: FOR_IN
19617: IFFALSE 19837
// begin if not i in hackTanks then
19619: LD_VAR 0 1
19623: PUSH
19624: LD_EXP 70
19628: IN
19629: NOT
19630: IFFALSE 19713
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19632: LD_ADDR_EXP 70
19636: PUSH
19637: LD_EXP 70
19641: PPUSH
19642: LD_EXP 70
19646: PUSH
19647: LD_INT 1
19649: PLUS
19650: PPUSH
19651: LD_VAR 0 1
19655: PPUSH
19656: CALL_OW 1
19660: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19661: LD_ADDR_EXP 71
19665: PUSH
19666: LD_EXP 71
19670: PPUSH
19671: LD_EXP 71
19675: PUSH
19676: LD_INT 1
19678: PLUS
19679: PPUSH
19680: EMPTY
19681: PPUSH
19682: CALL_OW 1
19686: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19687: LD_ADDR_EXP 74
19691: PUSH
19692: LD_EXP 74
19696: PPUSH
19697: LD_EXP 74
19701: PUSH
19702: LD_INT 1
19704: PLUS
19705: PPUSH
19706: EMPTY
19707: PPUSH
19708: CALL_OW 1
19712: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19713: LD_VAR 0 1
19717: PPUSH
19718: CALL_OW 302
19722: NOT
19723: IFFALSE 19736
// begin HackUnlinkAll ( i ) ;
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL 19842 0 1
// continue ;
19734: GO 19616
// end ; HackCheckCapturedStatus ( i ) ;
19736: LD_VAR 0 1
19740: PPUSH
19741: CALL 20285 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19745: LD_ADDR_VAR 0 2
19749: PUSH
19750: LD_INT 81
19752: PUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: CALL_OW 255
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 33
19769: PUSH
19770: LD_INT 3
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 91
19779: PUSH
19780: LD_VAR 0 1
19784: PUSH
19785: LD_EXP 73
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 50
19797: PUSH
19798: EMPTY
19799: LIST
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: PPUSH
19807: CALL_OW 69
19811: ST_TO_ADDR
// if not tmp then
19812: LD_VAR 0 2
19816: NOT
19817: IFFALSE 19821
// continue ;
19819: GO 19616
// HackLink ( i , tmp ) ;
19821: LD_VAR 0 1
19825: PPUSH
19826: LD_VAR 0 2
19830: PPUSH
19831: CALL 19978 0 2
// end ;
19835: GO 19616
19837: POP
19838: POP
// end ;
19839: PPOPN 2
19841: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
19846: PPUSH
// if not hack in hackTanks then
19847: LD_VAR 0 1
19851: PUSH
19852: LD_EXP 70
19856: IN
19857: NOT
19858: IFFALSE 19862
// exit ;
19860: GO 19973
// index := GetElementIndex ( hackTanks , hack ) ;
19862: LD_ADDR_VAR 0 4
19866: PUSH
19867: LD_EXP 70
19871: PPUSH
19872: LD_VAR 0 1
19876: PPUSH
19877: CALL 27578 0 2
19881: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19882: LD_EXP 71
19886: PUSH
19887: LD_VAR 0 4
19891: ARRAY
19892: IFFALSE 19973
// begin for i in hackTanksCaptured [ index ] do
19894: LD_ADDR_VAR 0 3
19898: PUSH
19899: LD_EXP 71
19903: PUSH
19904: LD_VAR 0 4
19908: ARRAY
19909: PUSH
19910: FOR_IN
19911: IFFALSE 19937
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 1
19920: ARRAY
19921: PPUSH
19922: LD_VAR 0 3
19926: PUSH
19927: LD_INT 2
19929: ARRAY
19930: PPUSH
19931: CALL_OW 235
19935: GO 19910
19937: POP
19938: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19939: LD_ADDR_EXP 71
19943: PUSH
19944: LD_EXP 71
19948: PPUSH
19949: LD_VAR 0 4
19953: PPUSH
19954: EMPTY
19955: PPUSH
19956: CALL_OW 1
19960: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19961: LD_VAR 0 1
19965: PPUSH
19966: LD_INT 0
19968: PPUSH
19969: CALL_OW 505
// end ; end ;
19973: LD_VAR 0 2
19977: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19978: LD_INT 0
19980: PPUSH
19981: PPUSH
19982: PPUSH
// if not hack in hackTanks or not vehicles then
19983: LD_VAR 0 1
19987: PUSH
19988: LD_EXP 70
19992: IN
19993: NOT
19994: PUSH
19995: LD_VAR 0 2
19999: NOT
20000: OR
20001: IFFALSE 20005
// exit ;
20003: GO 20280
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_VAR 0 1
20014: PPUSH
20015: LD_VAR 0 2
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: LD_INT 1
20025: PPUSH
20026: CALL 28228 0 4
20030: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20031: LD_ADDR_VAR 0 5
20035: PUSH
20036: LD_EXP 70
20040: PPUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL 27578 0 2
20050: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20051: LD_EXP 71
20055: PUSH
20056: LD_VAR 0 5
20060: ARRAY
20061: PUSH
20062: LD_EXP 72
20066: LESS
20067: IFFALSE 20256
// begin for i := 1 to vehicles do
20069: LD_ADDR_VAR 0 4
20073: PUSH
20074: DOUBLE
20075: LD_INT 1
20077: DEC
20078: ST_TO_ADDR
20079: LD_VAR 0 2
20083: PUSH
20084: FOR_TO
20085: IFFALSE 20254
// begin if hackTanksCaptured [ index ] = hackLimit then
20087: LD_EXP 71
20091: PUSH
20092: LD_VAR 0 5
20096: ARRAY
20097: PUSH
20098: LD_EXP 72
20102: EQUAL
20103: IFFALSE 20107
// break ;
20105: GO 20254
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20107: LD_ADDR_EXP 74
20111: PUSH
20112: LD_EXP 74
20116: PPUSH
20117: LD_VAR 0 5
20121: PPUSH
20122: LD_EXP 74
20126: PUSH
20127: LD_VAR 0 5
20131: ARRAY
20132: PUSH
20133: LD_INT 1
20135: PLUS
20136: PPUSH
20137: CALL_OW 1
20141: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20142: LD_ADDR_EXP 71
20146: PUSH
20147: LD_EXP 71
20151: PPUSH
20152: LD_VAR 0 5
20156: PUSH
20157: LD_EXP 71
20161: PUSH
20162: LD_VAR 0 5
20166: ARRAY
20167: PUSH
20168: LD_INT 1
20170: PLUS
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PPUSH
20176: LD_VAR 0 2
20180: PUSH
20181: LD_VAR 0 4
20185: ARRAY
20186: PUSH
20187: LD_VAR 0 2
20191: PUSH
20192: LD_VAR 0 4
20196: ARRAY
20197: PPUSH
20198: CALL_OW 255
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PPUSH
20207: CALL 27793 0 3
20211: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20212: LD_VAR 0 2
20216: PUSH
20217: LD_VAR 0 4
20221: ARRAY
20222: PPUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 255
20232: PPUSH
20233: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20237: LD_VAR 0 2
20241: PUSH
20242: LD_VAR 0 4
20246: ARRAY
20247: PPUSH
20248: CALL_OW 141
// end ;
20252: GO 20084
20254: POP
20255: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20256: LD_VAR 0 1
20260: PPUSH
20261: LD_EXP 71
20265: PUSH
20266: LD_VAR 0 5
20270: ARRAY
20271: PUSH
20272: LD_INT 0
20274: PLUS
20275: PPUSH
20276: CALL_OW 505
// end ;
20280: LD_VAR 0 3
20284: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20285: LD_INT 0
20287: PPUSH
20288: PPUSH
20289: PPUSH
20290: PPUSH
// if not hack in hackTanks then
20291: LD_VAR 0 1
20295: PUSH
20296: LD_EXP 70
20300: IN
20301: NOT
20302: IFFALSE 20306
// exit ;
20304: GO 20546
// index := GetElementIndex ( hackTanks , hack ) ;
20306: LD_ADDR_VAR 0 4
20310: PUSH
20311: LD_EXP 70
20315: PPUSH
20316: LD_VAR 0 1
20320: PPUSH
20321: CALL 27578 0 2
20325: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20326: LD_ADDR_VAR 0 3
20330: PUSH
20331: DOUBLE
20332: LD_EXP 71
20336: PUSH
20337: LD_VAR 0 4
20341: ARRAY
20342: INC
20343: ST_TO_ADDR
20344: LD_INT 1
20346: PUSH
20347: FOR_DOWNTO
20348: IFFALSE 20520
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20350: LD_ADDR_VAR 0 5
20354: PUSH
20355: LD_EXP 71
20359: PUSH
20360: LD_VAR 0 4
20364: ARRAY
20365: PUSH
20366: LD_VAR 0 3
20370: ARRAY
20371: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20372: LD_VAR 0 5
20376: PUSH
20377: LD_INT 1
20379: ARRAY
20380: PPUSH
20381: CALL_OW 302
20385: NOT
20386: PUSH
20387: LD_VAR 0 5
20391: PUSH
20392: LD_INT 1
20394: ARRAY
20395: PPUSH
20396: CALL_OW 255
20400: PUSH
20401: LD_VAR 0 1
20405: PPUSH
20406: CALL_OW 255
20410: NONEQUAL
20411: OR
20412: IFFALSE 20518
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20414: LD_VAR 0 5
20418: PUSH
20419: LD_INT 1
20421: ARRAY
20422: PPUSH
20423: CALL_OW 305
20427: PUSH
20428: LD_VAR 0 5
20432: PUSH
20433: LD_INT 1
20435: ARRAY
20436: PPUSH
20437: CALL_OW 255
20441: PUSH
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 255
20451: EQUAL
20452: AND
20453: IFFALSE 20477
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20455: LD_VAR 0 5
20459: PUSH
20460: LD_INT 1
20462: ARRAY
20463: PPUSH
20464: LD_VAR 0 5
20468: PUSH
20469: LD_INT 2
20471: ARRAY
20472: PPUSH
20473: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20477: LD_ADDR_EXP 71
20481: PUSH
20482: LD_EXP 71
20486: PPUSH
20487: LD_VAR 0 4
20491: PPUSH
20492: LD_EXP 71
20496: PUSH
20497: LD_VAR 0 4
20501: ARRAY
20502: PPUSH
20503: LD_VAR 0 3
20507: PPUSH
20508: CALL_OW 3
20512: PPUSH
20513: CALL_OW 1
20517: ST_TO_ADDR
// end ; end ;
20518: GO 20347
20520: POP
20521: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20522: LD_VAR 0 1
20526: PPUSH
20527: LD_EXP 71
20531: PUSH
20532: LD_VAR 0 4
20536: ARRAY
20537: PUSH
20538: LD_INT 0
20540: PLUS
20541: PPUSH
20542: CALL_OW 505
// end ;
20546: LD_VAR 0 2
20550: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20551: LD_INT 0
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
// if not hack in hackTanks then
20557: LD_VAR 0 1
20561: PUSH
20562: LD_EXP 70
20566: IN
20567: NOT
20568: IFFALSE 20572
// exit ;
20570: GO 20657
// index := GetElementIndex ( hackTanks , hack ) ;
20572: LD_ADDR_VAR 0 5
20576: PUSH
20577: LD_EXP 70
20581: PPUSH
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL 27578 0 2
20591: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20592: LD_ADDR_VAR 0 4
20596: PUSH
20597: DOUBLE
20598: LD_INT 1
20600: DEC
20601: ST_TO_ADDR
20602: LD_EXP 71
20606: PUSH
20607: LD_VAR 0 5
20611: ARRAY
20612: PUSH
20613: FOR_TO
20614: IFFALSE 20655
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20616: LD_EXP 71
20620: PUSH
20621: LD_VAR 0 5
20625: ARRAY
20626: PUSH
20627: LD_VAR 0 4
20631: ARRAY
20632: PUSH
20633: LD_INT 1
20635: ARRAY
20636: PUSH
20637: LD_VAR 0 2
20641: EQUAL
20642: IFFALSE 20653
// KillUnit ( vehicle ) ;
20644: LD_VAR 0 2
20648: PPUSH
20649: CALL_OW 66
20653: GO 20613
20655: POP
20656: POP
// end ;
20657: LD_VAR 0 3
20661: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20662: LD_EXP 75
20666: NOT
20667: IFFALSE 20702
20669: GO 20671
20671: DISABLE
// begin initMiner := true ;
20672: LD_ADDR_EXP 75
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// minersList := [ ] ;
20680: LD_ADDR_EXP 76
20684: PUSH
20685: EMPTY
20686: ST_TO_ADDR
// minerMinesList := [ ] ;
20687: LD_ADDR_EXP 77
20691: PUSH
20692: EMPTY
20693: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20694: LD_ADDR_EXP 78
20698: PUSH
20699: LD_INT 5
20701: ST_TO_ADDR
// end ;
20702: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20703: LD_EXP 75
20707: PUSH
20708: LD_INT 34
20710: PUSH
20711: LD_INT 81
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PPUSH
20718: CALL_OW 69
20722: AND
20723: IFFALSE 21184
20725: GO 20727
20727: DISABLE
20728: LD_INT 0
20730: PPUSH
20731: PPUSH
20732: PPUSH
20733: PPUSH
// begin enable ;
20734: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20735: LD_ADDR_VAR 0 1
20739: PUSH
20740: LD_INT 34
20742: PUSH
20743: LD_INT 81
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PPUSH
20750: CALL_OW 69
20754: PUSH
20755: FOR_IN
20756: IFFALSE 20828
// begin if not i in minersList then
20758: LD_VAR 0 1
20762: PUSH
20763: LD_EXP 76
20767: IN
20768: NOT
20769: IFFALSE 20826
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20771: LD_ADDR_EXP 76
20775: PUSH
20776: LD_EXP 76
20780: PPUSH
20781: LD_EXP 76
20785: PUSH
20786: LD_INT 1
20788: PLUS
20789: PPUSH
20790: LD_VAR 0 1
20794: PPUSH
20795: CALL_OW 1
20799: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20800: LD_ADDR_EXP 77
20804: PUSH
20805: LD_EXP 77
20809: PPUSH
20810: LD_EXP 77
20814: PUSH
20815: LD_INT 1
20817: PLUS
20818: PPUSH
20819: EMPTY
20820: PPUSH
20821: CALL_OW 1
20825: ST_TO_ADDR
// end end ;
20826: GO 20755
20828: POP
20829: POP
// for i := minerMinesList downto 1 do
20830: LD_ADDR_VAR 0 1
20834: PUSH
20835: DOUBLE
20836: LD_EXP 77
20840: INC
20841: ST_TO_ADDR
20842: LD_INT 1
20844: PUSH
20845: FOR_DOWNTO
20846: IFFALSE 21182
// begin if IsLive ( minersList [ i ] ) then
20848: LD_EXP 76
20852: PUSH
20853: LD_VAR 0 1
20857: ARRAY
20858: PPUSH
20859: CALL_OW 300
20863: IFFALSE 20891
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20865: LD_EXP 76
20869: PUSH
20870: LD_VAR 0 1
20874: ARRAY
20875: PPUSH
20876: LD_EXP 77
20880: PUSH
20881: LD_VAR 0 1
20885: ARRAY
20886: PPUSH
20887: CALL_OW 505
// if not minerMinesList [ i ] then
20891: LD_EXP 77
20895: PUSH
20896: LD_VAR 0 1
20900: ARRAY
20901: NOT
20902: IFFALSE 20906
// continue ;
20904: GO 20845
// for j := minerMinesList [ i ] downto 1 do
20906: LD_ADDR_VAR 0 2
20910: PUSH
20911: DOUBLE
20912: LD_EXP 77
20916: PUSH
20917: LD_VAR 0 1
20921: ARRAY
20922: INC
20923: ST_TO_ADDR
20924: LD_INT 1
20926: PUSH
20927: FOR_DOWNTO
20928: IFFALSE 21178
// begin side := GetSide ( minersList [ i ] ) ;
20930: LD_ADDR_VAR 0 3
20934: PUSH
20935: LD_EXP 76
20939: PUSH
20940: LD_VAR 0 1
20944: ARRAY
20945: PPUSH
20946: CALL_OW 255
20950: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20951: LD_ADDR_VAR 0 4
20955: PUSH
20956: LD_EXP 77
20960: PUSH
20961: LD_VAR 0 1
20965: ARRAY
20966: PUSH
20967: LD_VAR 0 2
20971: ARRAY
20972: PUSH
20973: LD_INT 1
20975: ARRAY
20976: PPUSH
20977: LD_EXP 77
20981: PUSH
20982: LD_VAR 0 1
20986: ARRAY
20987: PUSH
20988: LD_VAR 0 2
20992: ARRAY
20993: PUSH
20994: LD_INT 2
20996: ARRAY
20997: PPUSH
20998: CALL_OW 428
21002: ST_TO_ADDR
// if not tmp then
21003: LD_VAR 0 4
21007: NOT
21008: IFFALSE 21012
// continue ;
21010: GO 20927
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21012: LD_VAR 0 4
21016: PUSH
21017: LD_INT 81
21019: PUSH
21020: LD_VAR 0 3
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PPUSH
21029: CALL_OW 69
21033: IN
21034: PUSH
21035: LD_EXP 77
21039: PUSH
21040: LD_VAR 0 1
21044: ARRAY
21045: PUSH
21046: LD_VAR 0 2
21050: ARRAY
21051: PUSH
21052: LD_INT 1
21054: ARRAY
21055: PPUSH
21056: LD_EXP 77
21060: PUSH
21061: LD_VAR 0 1
21065: ARRAY
21066: PUSH
21067: LD_VAR 0 2
21071: ARRAY
21072: PUSH
21073: LD_INT 2
21075: ARRAY
21076: PPUSH
21077: CALL_OW 458
21081: AND
21082: IFFALSE 21176
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21084: LD_EXP 77
21088: PUSH
21089: LD_VAR 0 1
21093: ARRAY
21094: PUSH
21095: LD_VAR 0 2
21099: ARRAY
21100: PUSH
21101: LD_INT 1
21103: ARRAY
21104: PPUSH
21105: LD_EXP 77
21109: PUSH
21110: LD_VAR 0 1
21114: ARRAY
21115: PUSH
21116: LD_VAR 0 2
21120: ARRAY
21121: PUSH
21122: LD_INT 2
21124: ARRAY
21125: PPUSH
21126: LD_VAR 0 3
21130: PPUSH
21131: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21135: LD_ADDR_EXP 77
21139: PUSH
21140: LD_EXP 77
21144: PPUSH
21145: LD_VAR 0 1
21149: PPUSH
21150: LD_EXP 77
21154: PUSH
21155: LD_VAR 0 1
21159: ARRAY
21160: PPUSH
21161: LD_VAR 0 2
21165: PPUSH
21166: CALL_OW 3
21170: PPUSH
21171: CALL_OW 1
21175: ST_TO_ADDR
// end ; end ;
21176: GO 20927
21178: POP
21179: POP
// end ;
21180: GO 20845
21182: POP
21183: POP
// end ;
21184: PPOPN 4
21186: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21187: LD_INT 0
21189: PPUSH
21190: PPUSH
// result := false ;
21191: LD_ADDR_VAR 0 4
21195: PUSH
21196: LD_INT 0
21198: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21199: LD_VAR 0 1
21203: PPUSH
21204: CALL_OW 264
21208: PUSH
21209: LD_INT 81
21211: EQUAL
21212: NOT
21213: IFFALSE 21217
// exit ;
21215: GO 21457
// index := GetElementIndex ( minersList , unit ) ;
21217: LD_ADDR_VAR 0 5
21221: PUSH
21222: LD_EXP 76
21226: PPUSH
21227: LD_VAR 0 1
21231: PPUSH
21232: CALL 27578 0 2
21236: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21237: LD_EXP 77
21241: PUSH
21242: LD_VAR 0 5
21246: ARRAY
21247: PUSH
21248: LD_EXP 78
21252: GREATEREQUAL
21253: IFFALSE 21257
// exit ;
21255: GO 21457
// ComMoveXY ( unit , x , y ) ;
21257: LD_VAR 0 1
21261: PPUSH
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21276: LD_INT 35
21278: PPUSH
21279: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21283: LD_VAR 0 1
21287: PPUSH
21288: LD_VAR 0 2
21292: PPUSH
21293: LD_VAR 0 3
21297: PPUSH
21298: CALL 59319 0 3
21302: NOT
21303: PUSH
21304: LD_VAR 0 1
21308: PPUSH
21309: CALL_OW 314
21313: AND
21314: IFFALSE 21318
// exit ;
21316: GO 21457
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21318: LD_VAR 0 2
21322: PPUSH
21323: LD_VAR 0 3
21327: PPUSH
21328: CALL_OW 428
21332: PUSH
21333: LD_VAR 0 1
21337: EQUAL
21338: PUSH
21339: LD_VAR 0 1
21343: PPUSH
21344: CALL_OW 314
21348: NOT
21349: AND
21350: IFFALSE 21276
// PlaySoundXY ( x , y , PlantMine ) ;
21352: LD_VAR 0 2
21356: PPUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: LD_STRING PlantMine
21364: PPUSH
21365: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21369: LD_VAR 0 2
21373: PPUSH
21374: LD_VAR 0 3
21378: PPUSH
21379: LD_VAR 0 1
21383: PPUSH
21384: CALL_OW 255
21388: PPUSH
21389: LD_INT 0
21391: PPUSH
21392: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21396: LD_ADDR_EXP 77
21400: PUSH
21401: LD_EXP 77
21405: PPUSH
21406: LD_VAR 0 5
21410: PUSH
21411: LD_EXP 77
21415: PUSH
21416: LD_VAR 0 5
21420: ARRAY
21421: PUSH
21422: LD_INT 1
21424: PLUS
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PPUSH
21430: LD_VAR 0 2
21434: PUSH
21435: LD_VAR 0 3
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PPUSH
21444: CALL 27793 0 3
21448: ST_TO_ADDR
// result := true ;
21449: LD_ADDR_VAR 0 4
21453: PUSH
21454: LD_INT 1
21456: ST_TO_ADDR
// end ;
21457: LD_VAR 0 4
21461: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21462: LD_INT 0
21464: PPUSH
21465: PPUSH
21466: PPUSH
// if not unit in minersList then
21467: LD_VAR 0 1
21471: PUSH
21472: LD_EXP 76
21476: IN
21477: NOT
21478: IFFALSE 21482
// exit ;
21480: GO 21874
// index := GetElementIndex ( minersList , unit ) ;
21482: LD_ADDR_VAR 0 6
21486: PUSH
21487: LD_EXP 76
21491: PPUSH
21492: LD_VAR 0 1
21496: PPUSH
21497: CALL 27578 0 2
21501: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21502: LD_ADDR_VAR 0 5
21506: PUSH
21507: DOUBLE
21508: LD_EXP 77
21512: PUSH
21513: LD_VAR 0 6
21517: ARRAY
21518: INC
21519: ST_TO_ADDR
21520: LD_INT 1
21522: PUSH
21523: FOR_DOWNTO
21524: IFFALSE 21685
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21526: LD_EXP 77
21530: PUSH
21531: LD_VAR 0 6
21535: ARRAY
21536: PUSH
21537: LD_VAR 0 5
21541: ARRAY
21542: PUSH
21543: LD_INT 1
21545: ARRAY
21546: PUSH
21547: LD_VAR 0 2
21551: EQUAL
21552: PUSH
21553: LD_EXP 77
21557: PUSH
21558: LD_VAR 0 6
21562: ARRAY
21563: PUSH
21564: LD_VAR 0 5
21568: ARRAY
21569: PUSH
21570: LD_INT 2
21572: ARRAY
21573: PUSH
21574: LD_VAR 0 3
21578: EQUAL
21579: AND
21580: IFFALSE 21683
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21582: LD_EXP 77
21586: PUSH
21587: LD_VAR 0 6
21591: ARRAY
21592: PUSH
21593: LD_VAR 0 5
21597: ARRAY
21598: PUSH
21599: LD_INT 1
21601: ARRAY
21602: PPUSH
21603: LD_EXP 77
21607: PUSH
21608: LD_VAR 0 6
21612: ARRAY
21613: PUSH
21614: LD_VAR 0 5
21618: ARRAY
21619: PUSH
21620: LD_INT 2
21622: ARRAY
21623: PPUSH
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL_OW 255
21633: PPUSH
21634: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21638: LD_ADDR_EXP 77
21642: PUSH
21643: LD_EXP 77
21647: PPUSH
21648: LD_VAR 0 6
21652: PPUSH
21653: LD_EXP 77
21657: PUSH
21658: LD_VAR 0 6
21662: ARRAY
21663: PPUSH
21664: LD_VAR 0 5
21668: PPUSH
21669: CALL_OW 3
21673: PPUSH
21674: CALL_OW 1
21678: ST_TO_ADDR
// exit ;
21679: POP
21680: POP
21681: GO 21874
// end ; end ;
21683: GO 21523
21685: POP
21686: POP
// for i := minerMinesList [ index ] downto 1 do
21687: LD_ADDR_VAR 0 5
21691: PUSH
21692: DOUBLE
21693: LD_EXP 77
21697: PUSH
21698: LD_VAR 0 6
21702: ARRAY
21703: INC
21704: ST_TO_ADDR
21705: LD_INT 1
21707: PUSH
21708: FOR_DOWNTO
21709: IFFALSE 21872
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21711: LD_EXP 77
21715: PUSH
21716: LD_VAR 0 6
21720: ARRAY
21721: PUSH
21722: LD_VAR 0 5
21726: ARRAY
21727: PUSH
21728: LD_INT 1
21730: ARRAY
21731: PPUSH
21732: LD_EXP 77
21736: PUSH
21737: LD_VAR 0 6
21741: ARRAY
21742: PUSH
21743: LD_VAR 0 5
21747: ARRAY
21748: PUSH
21749: LD_INT 2
21751: ARRAY
21752: PPUSH
21753: LD_VAR 0 2
21757: PPUSH
21758: LD_VAR 0 3
21762: PPUSH
21763: CALL_OW 298
21767: PUSH
21768: LD_INT 6
21770: LESS
21771: IFFALSE 21870
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21773: LD_EXP 77
21777: PUSH
21778: LD_VAR 0 6
21782: ARRAY
21783: PUSH
21784: LD_VAR 0 5
21788: ARRAY
21789: PUSH
21790: LD_INT 1
21792: ARRAY
21793: PPUSH
21794: LD_EXP 77
21798: PUSH
21799: LD_VAR 0 6
21803: ARRAY
21804: PUSH
21805: LD_VAR 0 5
21809: ARRAY
21810: PUSH
21811: LD_INT 2
21813: ARRAY
21814: PPUSH
21815: LD_VAR 0 1
21819: PPUSH
21820: CALL_OW 255
21824: PPUSH
21825: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21829: LD_ADDR_EXP 77
21833: PUSH
21834: LD_EXP 77
21838: PPUSH
21839: LD_VAR 0 6
21843: PPUSH
21844: LD_EXP 77
21848: PUSH
21849: LD_VAR 0 6
21853: ARRAY
21854: PPUSH
21855: LD_VAR 0 5
21859: PPUSH
21860: CALL_OW 3
21864: PPUSH
21865: CALL_OW 1
21869: ST_TO_ADDR
// end ; end ;
21870: GO 21708
21872: POP
21873: POP
// end ;
21874: LD_VAR 0 4
21878: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21879: LD_INT 0
21881: PPUSH
21882: PPUSH
21883: PPUSH
21884: PPUSH
21885: PPUSH
21886: PPUSH
21887: PPUSH
21888: PPUSH
21889: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 264
21899: PUSH
21900: LD_INT 81
21902: EQUAL
21903: NOT
21904: PUSH
21905: LD_VAR 0 1
21909: PUSH
21910: LD_EXP 76
21914: IN
21915: NOT
21916: OR
21917: IFFALSE 21921
// exit ;
21919: GO 22243
// index := GetElementIndex ( minersList , unit ) ;
21921: LD_ADDR_VAR 0 6
21925: PUSH
21926: LD_EXP 76
21930: PPUSH
21931: LD_VAR 0 1
21935: PPUSH
21936: CALL 27578 0 2
21940: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21941: LD_ADDR_VAR 0 8
21945: PUSH
21946: LD_EXP 78
21950: PUSH
21951: LD_EXP 77
21955: PUSH
21956: LD_VAR 0 6
21960: ARRAY
21961: MINUS
21962: ST_TO_ADDR
// if not minesFreeAmount then
21963: LD_VAR 0 8
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 22243
// tmp := [ ] ;
21972: LD_ADDR_VAR 0 7
21976: PUSH
21977: EMPTY
21978: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21979: LD_ADDR_VAR 0 5
21983: PUSH
21984: DOUBLE
21985: LD_INT 1
21987: DEC
21988: ST_TO_ADDR
21989: LD_VAR 0 8
21993: PUSH
21994: FOR_TO
21995: IFFALSE 22190
// begin _d := rand ( 0 , 5 ) ;
21997: LD_ADDR_VAR 0 11
22001: PUSH
22002: LD_INT 0
22004: PPUSH
22005: LD_INT 5
22007: PPUSH
22008: CALL_OW 12
22012: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22013: LD_ADDR_VAR 0 12
22017: PUSH
22018: LD_INT 2
22020: PPUSH
22021: LD_INT 6
22023: PPUSH
22024: CALL_OW 12
22028: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22029: LD_ADDR_VAR 0 9
22033: PUSH
22034: LD_VAR 0 2
22038: PPUSH
22039: LD_VAR 0 11
22043: PPUSH
22044: LD_VAR 0 12
22048: PPUSH
22049: CALL_OW 272
22053: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22054: LD_ADDR_VAR 0 10
22058: PUSH
22059: LD_VAR 0 3
22063: PPUSH
22064: LD_VAR 0 11
22068: PPUSH
22069: LD_VAR 0 12
22073: PPUSH
22074: CALL_OW 273
22078: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22079: LD_VAR 0 9
22083: PPUSH
22084: LD_VAR 0 10
22088: PPUSH
22089: CALL_OW 488
22093: PUSH
22094: LD_VAR 0 9
22098: PUSH
22099: LD_VAR 0 10
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_VAR 0 7
22112: IN
22113: NOT
22114: AND
22115: PUSH
22116: LD_VAR 0 9
22120: PPUSH
22121: LD_VAR 0 10
22125: PPUSH
22126: CALL_OW 458
22130: NOT
22131: AND
22132: IFFALSE 22174
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22134: LD_ADDR_VAR 0 7
22138: PUSH
22139: LD_VAR 0 7
22143: PPUSH
22144: LD_VAR 0 7
22148: PUSH
22149: LD_INT 1
22151: PLUS
22152: PPUSH
22153: LD_VAR 0 9
22157: PUSH
22158: LD_VAR 0 10
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PPUSH
22167: CALL_OW 1
22171: ST_TO_ADDR
22172: GO 22188
// i := i - 1 ;
22174: LD_ADDR_VAR 0 5
22178: PUSH
22179: LD_VAR 0 5
22183: PUSH
22184: LD_INT 1
22186: MINUS
22187: ST_TO_ADDR
// end ;
22188: GO 21994
22190: POP
22191: POP
// for i in tmp do
22192: LD_ADDR_VAR 0 5
22196: PUSH
22197: LD_VAR 0 7
22201: PUSH
22202: FOR_IN
22203: IFFALSE 22241
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22205: LD_VAR 0 1
22209: PPUSH
22210: LD_VAR 0 5
22214: PUSH
22215: LD_INT 1
22217: ARRAY
22218: PPUSH
22219: LD_VAR 0 5
22223: PUSH
22224: LD_INT 2
22226: ARRAY
22227: PPUSH
22228: CALL 21187 0 3
22232: NOT
22233: IFFALSE 22239
// exit ;
22235: POP
22236: POP
22237: GO 22243
22239: GO 22202
22241: POP
22242: POP
// end ;
22243: LD_VAR 0 4
22247: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22248: LD_INT 0
22250: PPUSH
22251: PPUSH
22252: PPUSH
22253: PPUSH
22254: PPUSH
22255: PPUSH
22256: PPUSH
// if not GetClass ( unit ) = class_sniper then
22257: LD_VAR 0 1
22261: PPUSH
22262: CALL_OW 257
22266: PUSH
22267: LD_INT 5
22269: EQUAL
22270: NOT
22271: IFFALSE 22275
// exit ;
22273: GO 22663
// dist := 8 ;
22275: LD_ADDR_VAR 0 5
22279: PUSH
22280: LD_INT 8
22282: ST_TO_ADDR
// viewRange := 12 ;
22283: LD_ADDR_VAR 0 7
22287: PUSH
22288: LD_INT 12
22290: ST_TO_ADDR
// side := GetSide ( unit ) ;
22291: LD_ADDR_VAR 0 6
22295: PUSH
22296: LD_VAR 0 1
22300: PPUSH
22301: CALL_OW 255
22305: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22306: LD_INT 61
22308: PPUSH
22309: LD_VAR 0 6
22313: PPUSH
22314: CALL_OW 321
22318: PUSH
22319: LD_INT 2
22321: EQUAL
22322: IFFALSE 22332
// viewRange := 16 ;
22324: LD_ADDR_VAR 0 7
22328: PUSH
22329: LD_INT 16
22331: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22332: LD_VAR 0 1
22336: PPUSH
22337: LD_VAR 0 2
22341: PPUSH
22342: LD_VAR 0 3
22346: PPUSH
22347: CALL_OW 297
22351: PUSH
22352: LD_VAR 0 5
22356: GREATER
22357: IFFALSE 22436
// begin ComMoveXY ( unit , x , y ) ;
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22378: LD_INT 35
22380: PPUSH
22381: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22385: LD_VAR 0 1
22389: PPUSH
22390: LD_VAR 0 2
22394: PPUSH
22395: LD_VAR 0 3
22399: PPUSH
22400: CALL 59319 0 3
22404: NOT
22405: IFFALSE 22409
// exit ;
22407: GO 22663
// until GetDistUnitXY ( unit , x , y ) < dist ;
22409: LD_VAR 0 1
22413: PPUSH
22414: LD_VAR 0 2
22418: PPUSH
22419: LD_VAR 0 3
22423: PPUSH
22424: CALL_OW 297
22428: PUSH
22429: LD_VAR 0 5
22433: LESS
22434: IFFALSE 22378
// end ; ComTurnXY ( unit , x , y ) ;
22436: LD_VAR 0 1
22440: PPUSH
22441: LD_VAR 0 2
22445: PPUSH
22446: LD_VAR 0 3
22450: PPUSH
22451: CALL_OW 118
// wait ( 5 ) ;
22455: LD_INT 5
22457: PPUSH
22458: CALL_OW 67
// _d := GetDir ( unit ) ;
22462: LD_ADDR_VAR 0 10
22466: PUSH
22467: LD_VAR 0 1
22471: PPUSH
22472: CALL_OW 254
22476: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22477: LD_ADDR_VAR 0 8
22481: PUSH
22482: LD_VAR 0 1
22486: PPUSH
22487: CALL_OW 250
22491: PPUSH
22492: LD_VAR 0 10
22496: PPUSH
22497: LD_VAR 0 5
22501: PPUSH
22502: CALL_OW 272
22506: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22507: LD_ADDR_VAR 0 9
22511: PUSH
22512: LD_VAR 0 1
22516: PPUSH
22517: CALL_OW 251
22521: PPUSH
22522: LD_VAR 0 10
22526: PPUSH
22527: LD_VAR 0 5
22531: PPUSH
22532: CALL_OW 273
22536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22537: LD_VAR 0 8
22541: PPUSH
22542: LD_VAR 0 9
22546: PPUSH
22547: CALL_OW 488
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 22663
// ComAnimCustom ( unit , 1 ) ;
22556: LD_VAR 0 1
22560: PPUSH
22561: LD_INT 1
22563: PPUSH
22564: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22568: LD_VAR 0 8
22572: PPUSH
22573: LD_VAR 0 9
22577: PPUSH
22578: LD_VAR 0 6
22582: PPUSH
22583: LD_VAR 0 7
22587: PPUSH
22588: CALL_OW 330
// repeat wait ( 1 ) ;
22592: LD_INT 1
22594: PPUSH
22595: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22599: LD_VAR 0 1
22603: PPUSH
22604: CALL_OW 316
22608: PUSH
22609: LD_VAR 0 1
22613: PPUSH
22614: CALL_OW 314
22618: OR
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 302
22629: NOT
22630: OR
22631: PUSH
22632: LD_VAR 0 1
22636: PPUSH
22637: CALL_OW 301
22641: OR
22642: IFFALSE 22592
// RemoveSeeing ( _x , _y , side ) ;
22644: LD_VAR 0 8
22648: PPUSH
22649: LD_VAR 0 9
22653: PPUSH
22654: LD_VAR 0 6
22658: PPUSH
22659: CALL_OW 331
// end ; end_of_file
22663: LD_VAR 0 4
22667: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22668: LD_VAR 0 1
22672: PUSH
22673: LD_INT 200
22675: DOUBLE
22676: GREATEREQUAL
22677: IFFALSE 22685
22679: LD_INT 299
22681: DOUBLE
22682: LESSEQUAL
22683: IFTRUE 22687
22685: GO 22719
22687: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22688: LD_VAR 0 1
22692: PPUSH
22693: LD_VAR 0 2
22697: PPUSH
22698: LD_VAR 0 3
22702: PPUSH
22703: LD_VAR 0 4
22707: PPUSH
22708: LD_VAR 0 5
22712: PPUSH
22713: CALL 18150 0 5
22717: GO 22796
22719: LD_INT 300
22721: DOUBLE
22722: GREATEREQUAL
22723: IFFALSE 22731
22725: LD_INT 399
22727: DOUBLE
22728: LESSEQUAL
22729: IFTRUE 22733
22731: GO 22795
22733: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22734: LD_VAR 0 1
22738: PPUSH
22739: LD_VAR 0 2
22743: PPUSH
22744: LD_VAR 0 3
22748: PPUSH
22749: LD_VAR 0 4
22753: PPUSH
22754: LD_VAR 0 5
22758: PPUSH
22759: LD_VAR 0 6
22763: PPUSH
22764: LD_VAR 0 7
22768: PPUSH
22769: LD_VAR 0 8
22773: PPUSH
22774: LD_VAR 0 9
22778: PPUSH
22779: LD_VAR 0 10
22783: PPUSH
22784: LD_VAR 0 11
22788: PPUSH
22789: CALL 14475 0 11
22793: GO 22796
22795: POP
// end ;
22796: PPOPN 11
22798: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22799: LD_VAR 0 1
22803: PPUSH
22804: LD_VAR 0 2
22808: PPUSH
22809: LD_VAR 0 3
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: LD_VAR 0 5
22823: PPUSH
22824: CALL 17886 0 5
// end ; end_of_file
22828: PPOPN 5
22830: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22831: LD_INT 0
22833: PPUSH
22834: PPUSH
// if exist_mode then
22835: LD_VAR 0 2
22839: IFFALSE 22864
// unit := CreateCharacter ( prefix & ident ) else
22841: LD_ADDR_VAR 0 5
22845: PUSH
22846: LD_VAR 0 3
22850: PUSH
22851: LD_VAR 0 1
22855: STR
22856: PPUSH
22857: CALL_OW 34
22861: ST_TO_ADDR
22862: GO 22879
// unit := NewCharacter ( ident ) ;
22864: LD_ADDR_VAR 0 5
22868: PUSH
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 25
22878: ST_TO_ADDR
// result := unit ;
22879: LD_ADDR_VAR 0 4
22883: PUSH
22884: LD_VAR 0 5
22888: ST_TO_ADDR
// end ;
22889: LD_VAR 0 4
22893: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
// if not side or not nation then
22898: LD_VAR 0 1
22902: NOT
22903: PUSH
22904: LD_VAR 0 2
22908: NOT
22909: OR
22910: IFFALSE 22914
// exit ;
22912: GO 23682
// case nation of nation_american :
22914: LD_VAR 0 2
22918: PUSH
22919: LD_INT 1
22921: DOUBLE
22922: EQUAL
22923: IFTRUE 22927
22925: GO 23141
22927: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22928: LD_ADDR_VAR 0 4
22932: PUSH
22933: LD_INT 35
22935: PUSH
22936: LD_INT 45
22938: PUSH
22939: LD_INT 46
22941: PUSH
22942: LD_INT 47
22944: PUSH
22945: LD_INT 82
22947: PUSH
22948: LD_INT 83
22950: PUSH
22951: LD_INT 84
22953: PUSH
22954: LD_INT 85
22956: PUSH
22957: LD_INT 86
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: LD_INT 6
22968: PUSH
22969: LD_INT 15
22971: PUSH
22972: LD_INT 16
22974: PUSH
22975: LD_INT 7
22977: PUSH
22978: LD_INT 12
22980: PUSH
22981: LD_INT 13
22983: PUSH
22984: LD_INT 10
22986: PUSH
22987: LD_INT 14
22989: PUSH
22990: LD_INT 20
22992: PUSH
22993: LD_INT 21
22995: PUSH
22996: LD_INT 22
22998: PUSH
22999: LD_INT 25
23001: PUSH
23002: LD_INT 32
23004: PUSH
23005: LD_INT 27
23007: PUSH
23008: LD_INT 36
23010: PUSH
23011: LD_INT 69
23013: PUSH
23014: LD_INT 39
23016: PUSH
23017: LD_INT 34
23019: PUSH
23020: LD_INT 40
23022: PUSH
23023: LD_INT 48
23025: PUSH
23026: LD_INT 49
23028: PUSH
23029: LD_INT 50
23031: PUSH
23032: LD_INT 51
23034: PUSH
23035: LD_INT 52
23037: PUSH
23038: LD_INT 53
23040: PUSH
23041: LD_INT 54
23043: PUSH
23044: LD_INT 55
23046: PUSH
23047: LD_INT 56
23049: PUSH
23050: LD_INT 57
23052: PUSH
23053: LD_INT 58
23055: PUSH
23056: LD_INT 59
23058: PUSH
23059: LD_INT 60
23061: PUSH
23062: LD_INT 61
23064: PUSH
23065: LD_INT 62
23067: PUSH
23068: LD_INT 80
23070: PUSH
23071: LD_INT 82
23073: PUSH
23074: LD_INT 83
23076: PUSH
23077: LD_INT 84
23079: PUSH
23080: LD_INT 85
23082: PUSH
23083: LD_INT 86
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: ST_TO_ADDR
23139: GO 23606
23141: LD_INT 2
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23375
23149: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23150: LD_ADDR_VAR 0 4
23154: PUSH
23155: LD_INT 35
23157: PUSH
23158: LD_INT 45
23160: PUSH
23161: LD_INT 46
23163: PUSH
23164: LD_INT 47
23166: PUSH
23167: LD_INT 82
23169: PUSH
23170: LD_INT 83
23172: PUSH
23173: LD_INT 84
23175: PUSH
23176: LD_INT 85
23178: PUSH
23179: LD_INT 87
23181: PUSH
23182: LD_INT 70
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 11
23190: PUSH
23191: LD_INT 3
23193: PUSH
23194: LD_INT 4
23196: PUSH
23197: LD_INT 5
23199: PUSH
23200: LD_INT 6
23202: PUSH
23203: LD_INT 15
23205: PUSH
23206: LD_INT 18
23208: PUSH
23209: LD_INT 7
23211: PUSH
23212: LD_INT 17
23214: PUSH
23215: LD_INT 8
23217: PUSH
23218: LD_INT 20
23220: PUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 22
23226: PUSH
23227: LD_INT 72
23229: PUSH
23230: LD_INT 26
23232: PUSH
23233: LD_INT 69
23235: PUSH
23236: LD_INT 39
23238: PUSH
23239: LD_INT 40
23241: PUSH
23242: LD_INT 41
23244: PUSH
23245: LD_INT 42
23247: PUSH
23248: LD_INT 43
23250: PUSH
23251: LD_INT 48
23253: PUSH
23254: LD_INT 49
23256: PUSH
23257: LD_INT 50
23259: PUSH
23260: LD_INT 51
23262: PUSH
23263: LD_INT 52
23265: PUSH
23266: LD_INT 53
23268: PUSH
23269: LD_INT 54
23271: PUSH
23272: LD_INT 55
23274: PUSH
23275: LD_INT 56
23277: PUSH
23278: LD_INT 60
23280: PUSH
23281: LD_INT 61
23283: PUSH
23284: LD_INT 62
23286: PUSH
23287: LD_INT 66
23289: PUSH
23290: LD_INT 67
23292: PUSH
23293: LD_INT 68
23295: PUSH
23296: LD_INT 81
23298: PUSH
23299: LD_INT 82
23301: PUSH
23302: LD_INT 83
23304: PUSH
23305: LD_INT 84
23307: PUSH
23308: LD_INT 85
23310: PUSH
23311: LD_INT 87
23313: PUSH
23314: LD_INT 88
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: ST_TO_ADDR
23373: GO 23606
23375: LD_INT 3
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23605
23383: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23384: LD_ADDR_VAR 0 4
23388: PUSH
23389: LD_INT 46
23391: PUSH
23392: LD_INT 47
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: LD_INT 2
23400: PUSH
23401: LD_INT 82
23403: PUSH
23404: LD_INT 83
23406: PUSH
23407: LD_INT 84
23409: PUSH
23410: LD_INT 85
23412: PUSH
23413: LD_INT 86
23415: PUSH
23416: LD_INT 11
23418: PUSH
23419: LD_INT 9
23421: PUSH
23422: LD_INT 20
23424: PUSH
23425: LD_INT 19
23427: PUSH
23428: LD_INT 21
23430: PUSH
23431: LD_INT 24
23433: PUSH
23434: LD_INT 22
23436: PUSH
23437: LD_INT 25
23439: PUSH
23440: LD_INT 28
23442: PUSH
23443: LD_INT 29
23445: PUSH
23446: LD_INT 30
23448: PUSH
23449: LD_INT 31
23451: PUSH
23452: LD_INT 37
23454: PUSH
23455: LD_INT 38
23457: PUSH
23458: LD_INT 32
23460: PUSH
23461: LD_INT 27
23463: PUSH
23464: LD_INT 33
23466: PUSH
23467: LD_INT 69
23469: PUSH
23470: LD_INT 39
23472: PUSH
23473: LD_INT 34
23475: PUSH
23476: LD_INT 40
23478: PUSH
23479: LD_INT 71
23481: PUSH
23482: LD_INT 23
23484: PUSH
23485: LD_INT 44
23487: PUSH
23488: LD_INT 48
23490: PUSH
23491: LD_INT 49
23493: PUSH
23494: LD_INT 50
23496: PUSH
23497: LD_INT 51
23499: PUSH
23500: LD_INT 52
23502: PUSH
23503: LD_INT 53
23505: PUSH
23506: LD_INT 54
23508: PUSH
23509: LD_INT 55
23511: PUSH
23512: LD_INT 56
23514: PUSH
23515: LD_INT 57
23517: PUSH
23518: LD_INT 58
23520: PUSH
23521: LD_INT 59
23523: PUSH
23524: LD_INT 63
23526: PUSH
23527: LD_INT 64
23529: PUSH
23530: LD_INT 65
23532: PUSH
23533: LD_INT 82
23535: PUSH
23536: LD_INT 83
23538: PUSH
23539: LD_INT 84
23541: PUSH
23542: LD_INT 85
23544: PUSH
23545: LD_INT 86
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: ST_TO_ADDR
23603: GO 23606
23605: POP
// if state > - 1 and state < 3 then
23606: LD_VAR 0 3
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: GREATER
23615: PUSH
23616: LD_VAR 0 3
23620: PUSH
23621: LD_INT 3
23623: LESS
23624: AND
23625: IFFALSE 23682
// for i in result do
23627: LD_ADDR_VAR 0 5
23631: PUSH
23632: LD_VAR 0 4
23636: PUSH
23637: FOR_IN
23638: IFFALSE 23680
// if GetTech ( i , side ) <> state then
23640: LD_VAR 0 5
23644: PPUSH
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 321
23654: PUSH
23655: LD_VAR 0 3
23659: NONEQUAL
23660: IFFALSE 23678
// result := result diff i ;
23662: LD_ADDR_VAR 0 4
23666: PUSH
23667: LD_VAR 0 4
23671: PUSH
23672: LD_VAR 0 5
23676: DIFF
23677: ST_TO_ADDR
23678: GO 23637
23680: POP
23681: POP
// end ;
23682: LD_VAR 0 4
23686: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23687: LD_INT 0
23689: PPUSH
23690: PPUSH
23691: PPUSH
// result := true ;
23692: LD_ADDR_VAR 0 3
23696: PUSH
23697: LD_INT 1
23699: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23700: LD_ADDR_VAR 0 5
23704: PUSH
23705: LD_VAR 0 2
23709: PPUSH
23710: CALL_OW 480
23714: ST_TO_ADDR
// if not tmp then
23715: LD_VAR 0 5
23719: NOT
23720: IFFALSE 23724
// exit ;
23722: GO 23773
// for i in tmp do
23724: LD_ADDR_VAR 0 4
23728: PUSH
23729: LD_VAR 0 5
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23771
// if GetTech ( i , side ) <> state_researched then
23737: LD_VAR 0 4
23741: PPUSH
23742: LD_VAR 0 1
23746: PPUSH
23747: CALL_OW 321
23751: PUSH
23752: LD_INT 2
23754: NONEQUAL
23755: IFFALSE 23769
// begin result := false ;
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: LD_INT 0
23764: ST_TO_ADDR
// exit ;
23765: POP
23766: POP
23767: GO 23773
// end ;
23769: GO 23734
23771: POP
23772: POP
// end ;
23773: LD_VAR 0 3
23777: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23778: LD_INT 0
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
23787: PPUSH
23788: PPUSH
23789: PPUSH
23790: PPUSH
23791: PPUSH
23792: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23793: LD_VAR 0 1
23797: NOT
23798: PUSH
23799: LD_VAR 0 1
23803: PPUSH
23804: CALL_OW 257
23808: PUSH
23809: LD_INT 9
23811: NONEQUAL
23812: OR
23813: IFFALSE 23817
// exit ;
23815: GO 24390
// side := GetSide ( unit ) ;
23817: LD_ADDR_VAR 0 9
23821: PUSH
23822: LD_VAR 0 1
23826: PPUSH
23827: CALL_OW 255
23831: ST_TO_ADDR
// tech_space := tech_spacanom ;
23832: LD_ADDR_VAR 0 12
23836: PUSH
23837: LD_INT 29
23839: ST_TO_ADDR
// tech_time := tech_taurad ;
23840: LD_ADDR_VAR 0 13
23844: PUSH
23845: LD_INT 28
23847: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23848: LD_ADDR_VAR 0 11
23852: PUSH
23853: LD_VAR 0 1
23857: PPUSH
23858: CALL_OW 310
23862: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23863: LD_VAR 0 11
23867: PPUSH
23868: CALL_OW 247
23872: PUSH
23873: LD_INT 2
23875: EQUAL
23876: IFFALSE 23880
// exit ;
23878: GO 24390
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23880: LD_ADDR_VAR 0 8
23884: PUSH
23885: LD_INT 81
23887: PUSH
23888: LD_VAR 0 9
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 3
23899: PUSH
23900: LD_INT 21
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PPUSH
23918: CALL_OW 69
23922: ST_TO_ADDR
// if not tmp then
23923: LD_VAR 0 8
23927: NOT
23928: IFFALSE 23932
// exit ;
23930: GO 24390
// if in_unit then
23932: LD_VAR 0 11
23936: IFFALSE 23960
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23938: LD_ADDR_VAR 0 10
23942: PUSH
23943: LD_VAR 0 8
23947: PPUSH
23948: LD_VAR 0 11
23952: PPUSH
23953: CALL_OW 74
23957: ST_TO_ADDR
23958: GO 23980
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23960: LD_ADDR_VAR 0 10
23964: PUSH
23965: LD_VAR 0 8
23969: PPUSH
23970: LD_VAR 0 1
23974: PPUSH
23975: CALL_OW 74
23979: ST_TO_ADDR
// if not enemy then
23980: LD_VAR 0 10
23984: NOT
23985: IFFALSE 23989
// exit ;
23987: GO 24390
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23989: LD_VAR 0 11
23993: PUSH
23994: LD_VAR 0 11
23998: PPUSH
23999: LD_VAR 0 10
24003: PPUSH
24004: CALL_OW 296
24008: PUSH
24009: LD_INT 13
24011: GREATER
24012: AND
24013: PUSH
24014: LD_VAR 0 1
24018: PPUSH
24019: LD_VAR 0 10
24023: PPUSH
24024: CALL_OW 296
24028: PUSH
24029: LD_INT 12
24031: GREATER
24032: OR
24033: IFFALSE 24037
// exit ;
24035: GO 24390
// missile := [ 1 ] ;
24037: LD_ADDR_VAR 0 14
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: EMPTY
24046: LIST
24047: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24048: LD_VAR 0 9
24052: PPUSH
24053: LD_VAR 0 12
24057: PPUSH
24058: CALL_OW 325
24062: IFFALSE 24091
// missile := Replace ( missile , missile + 1 , 2 ) ;
24064: LD_ADDR_VAR 0 14
24068: PUSH
24069: LD_VAR 0 14
24073: PPUSH
24074: LD_VAR 0 14
24078: PUSH
24079: LD_INT 1
24081: PLUS
24082: PPUSH
24083: LD_INT 2
24085: PPUSH
24086: CALL_OW 1
24090: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24091: LD_VAR 0 9
24095: PPUSH
24096: LD_VAR 0 13
24100: PPUSH
24101: CALL_OW 325
24105: PUSH
24106: LD_VAR 0 10
24110: PPUSH
24111: CALL_OW 255
24115: PPUSH
24116: LD_VAR 0 13
24120: PPUSH
24121: CALL_OW 325
24125: NOT
24126: AND
24127: IFFALSE 24156
// missile := Replace ( missile , missile + 1 , 3 ) ;
24129: LD_ADDR_VAR 0 14
24133: PUSH
24134: LD_VAR 0 14
24138: PPUSH
24139: LD_VAR 0 14
24143: PUSH
24144: LD_INT 1
24146: PLUS
24147: PPUSH
24148: LD_INT 3
24150: PPUSH
24151: CALL_OW 1
24155: ST_TO_ADDR
// if missile < 2 then
24156: LD_VAR 0 14
24160: PUSH
24161: LD_INT 2
24163: LESS
24164: IFFALSE 24168
// exit ;
24166: GO 24390
// x := GetX ( enemy ) ;
24168: LD_ADDR_VAR 0 4
24172: PUSH
24173: LD_VAR 0 10
24177: PPUSH
24178: CALL_OW 250
24182: ST_TO_ADDR
// y := GetY ( enemy ) ;
24183: LD_ADDR_VAR 0 5
24187: PUSH
24188: LD_VAR 0 10
24192: PPUSH
24193: CALL_OW 251
24197: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24198: LD_ADDR_VAR 0 6
24202: PUSH
24203: LD_VAR 0 4
24207: PUSH
24208: LD_INT 1
24210: NEG
24211: PPUSH
24212: LD_INT 1
24214: PPUSH
24215: CALL_OW 12
24219: PLUS
24220: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24221: LD_ADDR_VAR 0 7
24225: PUSH
24226: LD_VAR 0 5
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PPUSH
24235: LD_INT 1
24237: PPUSH
24238: CALL_OW 12
24242: PLUS
24243: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24244: LD_VAR 0 6
24248: PPUSH
24249: LD_VAR 0 7
24253: PPUSH
24254: CALL_OW 488
24258: NOT
24259: IFFALSE 24281
// begin _x := x ;
24261: LD_ADDR_VAR 0 6
24265: PUSH
24266: LD_VAR 0 4
24270: ST_TO_ADDR
// _y := y ;
24271: LD_ADDR_VAR 0 7
24275: PUSH
24276: LD_VAR 0 5
24280: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24281: LD_ADDR_VAR 0 3
24285: PUSH
24286: LD_INT 1
24288: PPUSH
24289: LD_VAR 0 14
24293: PPUSH
24294: CALL_OW 12
24298: ST_TO_ADDR
// case i of 1 :
24299: LD_VAR 0 3
24303: PUSH
24304: LD_INT 1
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24329
24312: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24313: LD_VAR 0 1
24317: PPUSH
24318: LD_VAR 0 10
24322: PPUSH
24323: CALL_OW 115
24327: GO 24390
24329: LD_INT 2
24331: DOUBLE
24332: EQUAL
24333: IFTRUE 24337
24335: GO 24359
24337: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24338: LD_VAR 0 1
24342: PPUSH
24343: LD_VAR 0 6
24347: PPUSH
24348: LD_VAR 0 7
24352: PPUSH
24353: CALL_OW 153
24357: GO 24390
24359: LD_INT 3
24361: DOUBLE
24362: EQUAL
24363: IFTRUE 24367
24365: GO 24389
24367: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24368: LD_VAR 0 1
24372: PPUSH
24373: LD_VAR 0 6
24377: PPUSH
24378: LD_VAR 0 7
24382: PPUSH
24383: CALL_OW 154
24387: GO 24390
24389: POP
// end ;
24390: LD_VAR 0 2
24394: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24395: LD_INT 0
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
// if not unit or not building then
24403: LD_VAR 0 1
24407: NOT
24408: PUSH
24409: LD_VAR 0 2
24413: NOT
24414: OR
24415: IFFALSE 24419
// exit ;
24417: GO 24577
// x := GetX ( building ) ;
24419: LD_ADDR_VAR 0 5
24423: PUSH
24424: LD_VAR 0 2
24428: PPUSH
24429: CALL_OW 250
24433: ST_TO_ADDR
// y := GetY ( building ) ;
24434: LD_ADDR_VAR 0 6
24438: PUSH
24439: LD_VAR 0 2
24443: PPUSH
24444: CALL_OW 251
24448: ST_TO_ADDR
// for i = 0 to 5 do
24449: LD_ADDR_VAR 0 4
24453: PUSH
24454: DOUBLE
24455: LD_INT 0
24457: DEC
24458: ST_TO_ADDR
24459: LD_INT 5
24461: PUSH
24462: FOR_TO
24463: IFFALSE 24575
// begin _x := ShiftX ( x , i , 3 ) ;
24465: LD_ADDR_VAR 0 7
24469: PUSH
24470: LD_VAR 0 5
24474: PPUSH
24475: LD_VAR 0 4
24479: PPUSH
24480: LD_INT 3
24482: PPUSH
24483: CALL_OW 272
24487: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24488: LD_ADDR_VAR 0 8
24492: PUSH
24493: LD_VAR 0 6
24497: PPUSH
24498: LD_VAR 0 4
24502: PPUSH
24503: LD_INT 3
24505: PPUSH
24506: CALL_OW 273
24510: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24511: LD_VAR 0 7
24515: PPUSH
24516: LD_VAR 0 8
24520: PPUSH
24521: CALL_OW 488
24525: NOT
24526: IFFALSE 24530
// continue ;
24528: GO 24462
// if HexInfo ( _x , _y ) = 0 then
24530: LD_VAR 0 7
24534: PPUSH
24535: LD_VAR 0 8
24539: PPUSH
24540: CALL_OW 428
24544: PUSH
24545: LD_INT 0
24547: EQUAL
24548: IFFALSE 24573
// begin ComMoveXY ( unit , _x , _y ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: LD_VAR 0 7
24559: PPUSH
24560: LD_VAR 0 8
24564: PPUSH
24565: CALL_OW 111
// exit ;
24569: POP
24570: POP
24571: GO 24577
// end ; end ;
24573: GO 24462
24575: POP
24576: POP
// end ;
24577: LD_VAR 0 3
24581: RET
// export function ScanBase ( side , base_area ) ; begin
24582: LD_INT 0
24584: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_INT 81
24597: PUSH
24598: LD_VAR 0 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PPUSH
24607: CALL_OW 70
24611: ST_TO_ADDR
// end ;
24612: LD_VAR 0 3
24616: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24617: LD_INT 0
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
// result := false ;
24623: LD_ADDR_VAR 0 2
24627: PUSH
24628: LD_INT 0
24630: ST_TO_ADDR
// side := GetSide ( unit ) ;
24631: LD_ADDR_VAR 0 3
24635: PUSH
24636: LD_VAR 0 1
24640: PPUSH
24641: CALL_OW 255
24645: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24646: LD_ADDR_VAR 0 4
24650: PUSH
24651: LD_VAR 0 1
24655: PPUSH
24656: CALL_OW 248
24660: ST_TO_ADDR
// case nat of 1 :
24661: LD_VAR 0 4
24665: PUSH
24666: LD_INT 1
24668: DOUBLE
24669: EQUAL
24670: IFTRUE 24674
24672: GO 24685
24674: POP
// tech := tech_lassight ; 2 :
24675: LD_ADDR_VAR 0 5
24679: PUSH
24680: LD_INT 12
24682: ST_TO_ADDR
24683: GO 24724
24685: LD_INT 2
24687: DOUBLE
24688: EQUAL
24689: IFTRUE 24693
24691: GO 24704
24693: POP
// tech := tech_mortar ; 3 :
24694: LD_ADDR_VAR 0 5
24698: PUSH
24699: LD_INT 41
24701: ST_TO_ADDR
24702: GO 24724
24704: LD_INT 3
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 24723
24712: POP
// tech := tech_bazooka ; end ;
24713: LD_ADDR_VAR 0 5
24717: PUSH
24718: LD_INT 44
24720: ST_TO_ADDR
24721: GO 24724
24723: POP
// if Researched ( side , tech ) then
24724: LD_VAR 0 3
24728: PPUSH
24729: LD_VAR 0 5
24733: PPUSH
24734: CALL_OW 325
24738: IFFALSE 24765
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_INT 5
24747: PUSH
24748: LD_INT 8
24750: PUSH
24751: LD_INT 9
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: LIST
24758: PUSH
24759: LD_VAR 0 4
24763: ARRAY
24764: ST_TO_ADDR
// end ;
24765: LD_VAR 0 2
24769: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24770: LD_INT 0
24772: PPUSH
24773: PPUSH
24774: PPUSH
// if not mines then
24775: LD_VAR 0 2
24779: NOT
24780: IFFALSE 24784
// exit ;
24782: GO 24928
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24784: LD_ADDR_VAR 0 5
24788: PUSH
24789: LD_INT 81
24791: PUSH
24792: LD_VAR 0 1
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 3
24803: PUSH
24804: LD_INT 21
24806: PUSH
24807: LD_INT 3
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 69
24826: ST_TO_ADDR
// for i in mines do
24827: LD_ADDR_VAR 0 4
24831: PUSH
24832: LD_VAR 0 2
24836: PUSH
24837: FOR_IN
24838: IFFALSE 24926
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24840: LD_VAR 0 4
24844: PUSH
24845: LD_INT 1
24847: ARRAY
24848: PPUSH
24849: LD_VAR 0 4
24853: PUSH
24854: LD_INT 2
24856: ARRAY
24857: PPUSH
24858: CALL_OW 458
24862: NOT
24863: IFFALSE 24867
// continue ;
24865: GO 24837
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24867: LD_VAR 0 4
24871: PUSH
24872: LD_INT 1
24874: ARRAY
24875: PPUSH
24876: LD_VAR 0 4
24880: PUSH
24881: LD_INT 2
24883: ARRAY
24884: PPUSH
24885: CALL_OW 428
24889: PUSH
24890: LD_VAR 0 5
24894: IN
24895: IFFALSE 24924
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24897: LD_VAR 0 4
24901: PUSH
24902: LD_INT 1
24904: ARRAY
24905: PPUSH
24906: LD_VAR 0 4
24910: PUSH
24911: LD_INT 2
24913: ARRAY
24914: PPUSH
24915: LD_VAR 0 1
24919: PPUSH
24920: CALL_OW 456
// end ;
24924: GO 24837
24926: POP
24927: POP
// end ;
24928: LD_VAR 0 3
24932: RET
// export function Count ( array ) ; begin
24933: LD_INT 0
24935: PPUSH
// result := array + 0 ;
24936: LD_ADDR_VAR 0 2
24940: PUSH
24941: LD_VAR 0 1
24945: PUSH
24946: LD_INT 0
24948: PLUS
24949: ST_TO_ADDR
// end ;
24950: LD_VAR 0 2
24954: RET
// export function IsEmpty ( building ) ; begin
24955: LD_INT 0
24957: PPUSH
// if not building then
24958: LD_VAR 0 1
24962: NOT
24963: IFFALSE 24967
// exit ;
24965: GO 25010
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24967: LD_ADDR_VAR 0 2
24971: PUSH
24972: LD_VAR 0 1
24976: PUSH
24977: LD_INT 22
24979: PUSH
24980: LD_VAR 0 1
24984: PPUSH
24985: CALL_OW 255
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 58
24996: PUSH
24997: EMPTY
24998: LIST
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PPUSH
25004: CALL_OW 69
25008: IN
25009: ST_TO_ADDR
// end ;
25010: LD_VAR 0 2
25014: RET
// export function IsNotFull ( building ) ; var places ; begin
25015: LD_INT 0
25017: PPUSH
25018: PPUSH
// if not building then
25019: LD_VAR 0 1
25023: NOT
25024: IFFALSE 25028
// exit ;
25026: GO 25056
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25028: LD_ADDR_VAR 0 2
25032: PUSH
25033: LD_VAR 0 1
25037: PPUSH
25038: LD_INT 3
25040: PUSH
25041: LD_INT 62
25043: PUSH
25044: EMPTY
25045: LIST
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PPUSH
25051: CALL_OW 72
25055: ST_TO_ADDR
// end ;
25056: LD_VAR 0 2
25060: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25061: LD_INT 0
25063: PPUSH
25064: PPUSH
25065: PPUSH
25066: PPUSH
// tmp := [ ] ;
25067: LD_ADDR_VAR 0 3
25071: PUSH
25072: EMPTY
25073: ST_TO_ADDR
// list := [ ] ;
25074: LD_ADDR_VAR 0 5
25078: PUSH
25079: EMPTY
25080: ST_TO_ADDR
// for i = 16 to 25 do
25081: LD_ADDR_VAR 0 4
25085: PUSH
25086: DOUBLE
25087: LD_INT 16
25089: DEC
25090: ST_TO_ADDR
25091: LD_INT 25
25093: PUSH
25094: FOR_TO
25095: IFFALSE 25168
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25097: LD_ADDR_VAR 0 3
25101: PUSH
25102: LD_VAR 0 3
25106: PUSH
25107: LD_INT 22
25109: PUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 255
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 91
25126: PUSH
25127: LD_VAR 0 1
25131: PUSH
25132: LD_INT 6
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 30
25142: PUSH
25143: LD_VAR 0 4
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: LIST
25156: PUSH
25157: EMPTY
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: ADD
25165: ST_TO_ADDR
25166: GO 25094
25168: POP
25169: POP
// for i = 1 to tmp do
25170: LD_ADDR_VAR 0 4
25174: PUSH
25175: DOUBLE
25176: LD_INT 1
25178: DEC
25179: ST_TO_ADDR
25180: LD_VAR 0 3
25184: PUSH
25185: FOR_TO
25186: IFFALSE 25274
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25188: LD_ADDR_VAR 0 5
25192: PUSH
25193: LD_VAR 0 5
25197: PUSH
25198: LD_VAR 0 3
25202: PUSH
25203: LD_VAR 0 4
25207: ARRAY
25208: PPUSH
25209: CALL_OW 266
25213: PUSH
25214: LD_VAR 0 3
25218: PUSH
25219: LD_VAR 0 4
25223: ARRAY
25224: PPUSH
25225: CALL_OW 250
25229: PUSH
25230: LD_VAR 0 3
25234: PUSH
25235: LD_VAR 0 4
25239: ARRAY
25240: PPUSH
25241: CALL_OW 251
25245: PUSH
25246: LD_VAR 0 3
25250: PUSH
25251: LD_VAR 0 4
25255: ARRAY
25256: PPUSH
25257: CALL_OW 254
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: PUSH
25268: EMPTY
25269: LIST
25270: ADD
25271: ST_TO_ADDR
25272: GO 25185
25274: POP
25275: POP
// result := list ;
25276: LD_ADDR_VAR 0 2
25280: PUSH
25281: LD_VAR 0 5
25285: ST_TO_ADDR
// end ;
25286: LD_VAR 0 2
25290: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25291: LD_INT 0
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
// if not factory then
25300: LD_VAR 0 1
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25902
// if control = control_apeman then
25309: LD_VAR 0 4
25313: PUSH
25314: LD_INT 5
25316: EQUAL
25317: IFFALSE 25426
// begin tmp := UnitsInside ( factory ) ;
25319: LD_ADDR_VAR 0 8
25323: PUSH
25324: LD_VAR 0 1
25328: PPUSH
25329: CALL_OW 313
25333: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25334: LD_VAR 0 8
25338: PPUSH
25339: LD_INT 25
25341: PUSH
25342: LD_INT 12
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PPUSH
25349: CALL_OW 72
25353: NOT
25354: IFFALSE 25364
// control := control_manual ;
25356: LD_ADDR_VAR 0 4
25360: PUSH
25361: LD_INT 1
25363: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25364: LD_ADDR_VAR 0 8
25368: PUSH
25369: LD_VAR 0 1
25373: PPUSH
25374: CALL 25061 0 1
25378: ST_TO_ADDR
// if tmp then
25379: LD_VAR 0 8
25383: IFFALSE 25426
// begin for i in tmp do
25385: LD_ADDR_VAR 0 7
25389: PUSH
25390: LD_VAR 0 8
25394: PUSH
25395: FOR_IN
25396: IFFALSE 25424
// if i [ 1 ] = b_ext_radio then
25398: LD_VAR 0 7
25402: PUSH
25403: LD_INT 1
25405: ARRAY
25406: PUSH
25407: LD_INT 22
25409: EQUAL
25410: IFFALSE 25422
// begin control := control_remote ;
25412: LD_ADDR_VAR 0 4
25416: PUSH
25417: LD_INT 2
25419: ST_TO_ADDR
// break ;
25420: GO 25424
// end ;
25422: GO 25395
25424: POP
25425: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25426: LD_VAR 0 1
25430: PPUSH
25431: LD_VAR 0 2
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: LD_VAR 0 4
25445: PPUSH
25446: LD_VAR 0 5
25450: PPUSH
25451: CALL_OW 448
25455: IFFALSE 25490
// begin result := [ chassis , engine , control , weapon ] ;
25457: LD_ADDR_VAR 0 6
25461: PUSH
25462: LD_VAR 0 2
25466: PUSH
25467: LD_VAR 0 3
25471: PUSH
25472: LD_VAR 0 4
25476: PUSH
25477: LD_VAR 0 5
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: ST_TO_ADDR
// exit ;
25488: GO 25902
// end ; _chassis := AvailableChassisList ( factory ) ;
25490: LD_ADDR_VAR 0 9
25494: PUSH
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 475
25504: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25505: LD_ADDR_VAR 0 11
25509: PUSH
25510: LD_VAR 0 1
25514: PPUSH
25515: CALL_OW 476
25519: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25520: LD_ADDR_VAR 0 12
25524: PUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 477
25534: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25535: LD_ADDR_VAR 0 10
25539: PUSH
25540: LD_VAR 0 1
25544: PPUSH
25545: CALL_OW 478
25549: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25550: LD_VAR 0 9
25554: NOT
25555: PUSH
25556: LD_VAR 0 11
25560: NOT
25561: OR
25562: PUSH
25563: LD_VAR 0 12
25567: NOT
25568: OR
25569: PUSH
25570: LD_VAR 0 10
25574: NOT
25575: OR
25576: IFFALSE 25611
// begin result := [ chassis , engine , control , weapon ] ;
25578: LD_ADDR_VAR 0 6
25582: PUSH
25583: LD_VAR 0 2
25587: PUSH
25588: LD_VAR 0 3
25592: PUSH
25593: LD_VAR 0 4
25597: PUSH
25598: LD_VAR 0 5
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: ST_TO_ADDR
// exit ;
25609: GO 25902
// end ; if not chassis in _chassis then
25611: LD_VAR 0 2
25615: PUSH
25616: LD_VAR 0 9
25620: IN
25621: NOT
25622: IFFALSE 25648
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25624: LD_ADDR_VAR 0 2
25628: PUSH
25629: LD_VAR 0 9
25633: PUSH
25634: LD_INT 1
25636: PPUSH
25637: LD_VAR 0 9
25641: PPUSH
25642: CALL_OW 12
25646: ARRAY
25647: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25648: LD_VAR 0 2
25652: PPUSH
25653: LD_VAR 0 3
25657: PPUSH
25658: CALL 25907 0 2
25662: NOT
25663: IFFALSE 25722
// repeat engine := _engine [ 1 ] ;
25665: LD_ADDR_VAR 0 3
25669: PUSH
25670: LD_VAR 0 11
25674: PUSH
25675: LD_INT 1
25677: ARRAY
25678: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25679: LD_ADDR_VAR 0 11
25683: PUSH
25684: LD_VAR 0 11
25688: PPUSH
25689: LD_INT 1
25691: PPUSH
25692: CALL_OW 3
25696: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25697: LD_VAR 0 2
25701: PPUSH
25702: LD_VAR 0 3
25706: PPUSH
25707: CALL 25907 0 2
25711: PUSH
25712: LD_VAR 0 11
25716: PUSH
25717: EMPTY
25718: EQUAL
25719: OR
25720: IFFALSE 25665
// if not control in _control then
25722: LD_VAR 0 4
25726: PUSH
25727: LD_VAR 0 12
25731: IN
25732: NOT
25733: IFFALSE 25759
// control := _control [ rand ( 1 , _control ) ] ;
25735: LD_ADDR_VAR 0 4
25739: PUSH
25740: LD_VAR 0 12
25744: PUSH
25745: LD_INT 1
25747: PPUSH
25748: LD_VAR 0 12
25752: PPUSH
25753: CALL_OW 12
25757: ARRAY
25758: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25759: LD_VAR 0 2
25763: PPUSH
25764: LD_VAR 0 5
25768: PPUSH
25769: CALL 26127 0 2
25773: NOT
25774: IFFALSE 25833
// repeat weapon := _weapon [ 1 ] ;
25776: LD_ADDR_VAR 0 5
25780: PUSH
25781: LD_VAR 0 10
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25790: LD_ADDR_VAR 0 10
25794: PUSH
25795: LD_VAR 0 10
25799: PPUSH
25800: LD_INT 1
25802: PPUSH
25803: CALL_OW 3
25807: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25808: LD_VAR 0 2
25812: PPUSH
25813: LD_VAR 0 5
25817: PPUSH
25818: CALL 26127 0 2
25822: PUSH
25823: LD_VAR 0 10
25827: PUSH
25828: EMPTY
25829: EQUAL
25830: OR
25831: IFFALSE 25776
// result := [ ] ;
25833: LD_ADDR_VAR 0 6
25837: PUSH
25838: EMPTY
25839: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25840: LD_VAR 0 1
25844: PPUSH
25845: LD_VAR 0 2
25849: PPUSH
25850: LD_VAR 0 3
25854: PPUSH
25855: LD_VAR 0 4
25859: PPUSH
25860: LD_VAR 0 5
25864: PPUSH
25865: CALL_OW 448
25869: IFFALSE 25902
// result := [ chassis , engine , control , weapon ] ;
25871: LD_ADDR_VAR 0 6
25875: PUSH
25876: LD_VAR 0 2
25880: PUSH
25881: LD_VAR 0 3
25885: PUSH
25886: LD_VAR 0 4
25890: PUSH
25891: LD_VAR 0 5
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: ST_TO_ADDR
// end ;
25902: LD_VAR 0 6
25906: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25907: LD_INT 0
25909: PPUSH
// if not chassis or not engine then
25910: LD_VAR 0 1
25914: NOT
25915: PUSH
25916: LD_VAR 0 2
25920: NOT
25921: OR
25922: IFFALSE 25926
// exit ;
25924: GO 26122
// case engine of engine_solar :
25926: LD_VAR 0 2
25930: PUSH
25931: LD_INT 2
25933: DOUBLE
25934: EQUAL
25935: IFTRUE 25939
25937: GO 25977
25939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25940: LD_ADDR_VAR 0 3
25944: PUSH
25945: LD_INT 11
25947: PUSH
25948: LD_INT 12
25950: PUSH
25951: LD_INT 13
25953: PUSH
25954: LD_INT 14
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: ST_TO_ADDR
25975: GO 26106
25977: LD_INT 1
25979: DOUBLE
25980: EQUAL
25981: IFTRUE 25985
25983: GO 26047
25985: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_INT 11
25993: PUSH
25994: LD_INT 12
25996: PUSH
25997: LD_INT 13
25999: PUSH
26000: LD_INT 14
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: LD_INT 4
26014: PUSH
26015: LD_INT 5
26017: PUSH
26018: LD_INT 21
26020: PUSH
26021: LD_INT 23
26023: PUSH
26024: LD_INT 22
26026: PUSH
26027: LD_INT 24
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: ST_TO_ADDR
26045: GO 26106
26047: LD_INT 3
26049: DOUBLE
26050: EQUAL
26051: IFTRUE 26055
26053: GO 26105
26055: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26056: LD_ADDR_VAR 0 3
26060: PUSH
26061: LD_INT 13
26063: PUSH
26064: LD_INT 14
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 4
26075: PUSH
26076: LD_INT 5
26078: PUSH
26079: LD_INT 21
26081: PUSH
26082: LD_INT 22
26084: PUSH
26085: LD_INT 23
26087: PUSH
26088: LD_INT 24
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: ST_TO_ADDR
26103: GO 26106
26105: POP
// result := ( chassis in result ) ;
26106: LD_ADDR_VAR 0 3
26110: PUSH
26111: LD_VAR 0 1
26115: PUSH
26116: LD_VAR 0 3
26120: IN
26121: ST_TO_ADDR
// end ;
26122: LD_VAR 0 3
26126: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26127: LD_INT 0
26129: PPUSH
// if not chassis or not weapon then
26130: LD_VAR 0 1
26134: NOT
26135: PUSH
26136: LD_VAR 0 2
26140: NOT
26141: OR
26142: IFFALSE 26146
// exit ;
26144: GO 27206
// case weapon of us_machine_gun :
26146: LD_VAR 0 2
26150: PUSH
26151: LD_INT 2
26153: DOUBLE
26154: EQUAL
26155: IFTRUE 26159
26157: GO 26189
26159: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: LD_INT 3
26173: PUSH
26174: LD_INT 4
26176: PUSH
26177: LD_INT 5
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: ST_TO_ADDR
26187: GO 27190
26189: LD_INT 3
26191: DOUBLE
26192: EQUAL
26193: IFTRUE 26197
26195: GO 26227
26197: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26198: LD_ADDR_VAR 0 3
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: LD_INT 3
26211: PUSH
26212: LD_INT 4
26214: PUSH
26215: LD_INT 5
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: ST_TO_ADDR
26225: GO 27190
26227: LD_INT 11
26229: DOUBLE
26230: EQUAL
26231: IFTRUE 26235
26233: GO 26265
26235: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26236: LD_ADDR_VAR 0 3
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: LD_INT 2
26246: PUSH
26247: LD_INT 3
26249: PUSH
26250: LD_INT 4
26252: PUSH
26253: LD_INT 5
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: ST_TO_ADDR
26263: GO 27190
26265: LD_INT 4
26267: DOUBLE
26268: EQUAL
26269: IFTRUE 26273
26271: GO 26299
26273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26274: LD_ADDR_VAR 0 3
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: LD_INT 3
26284: PUSH
26285: LD_INT 4
26287: PUSH
26288: LD_INT 5
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: ST_TO_ADDR
26297: GO 27190
26299: LD_INT 5
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26333
26307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26308: LD_ADDR_VAR 0 3
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: LD_INT 3
26318: PUSH
26319: LD_INT 4
26321: PUSH
26322: LD_INT 5
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: ST_TO_ADDR
26331: GO 27190
26333: LD_INT 9
26335: DOUBLE
26336: EQUAL
26337: IFTRUE 26341
26339: GO 26367
26341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26342: LD_ADDR_VAR 0 3
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: LD_INT 3
26352: PUSH
26353: LD_INT 4
26355: PUSH
26356: LD_INT 5
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: ST_TO_ADDR
26365: GO 27190
26367: LD_INT 7
26369: DOUBLE
26370: EQUAL
26371: IFTRUE 26375
26373: GO 26401
26375: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26376: LD_ADDR_VAR 0 3
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: LD_INT 4
26389: PUSH
26390: LD_INT 5
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: ST_TO_ADDR
26399: GO 27190
26401: LD_INT 12
26403: DOUBLE
26404: EQUAL
26405: IFTRUE 26409
26407: GO 26435
26409: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26410: LD_ADDR_VAR 0 3
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: LD_INT 3
26420: PUSH
26421: LD_INT 4
26423: PUSH
26424: LD_INT 5
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: ST_TO_ADDR
26433: GO 27190
26435: LD_INT 13
26437: DOUBLE
26438: EQUAL
26439: IFTRUE 26443
26441: GO 26469
26443: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26444: LD_ADDR_VAR 0 3
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: LD_INT 3
26454: PUSH
26455: LD_INT 4
26457: PUSH
26458: LD_INT 5
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: ST_TO_ADDR
26467: GO 27190
26469: LD_INT 14
26471: DOUBLE
26472: EQUAL
26473: IFTRUE 26477
26475: GO 26495
26477: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26478: LD_ADDR_VAR 0 3
26482: PUSH
26483: LD_INT 4
26485: PUSH
26486: LD_INT 5
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: ST_TO_ADDR
26493: GO 27190
26495: LD_INT 6
26497: DOUBLE
26498: EQUAL
26499: IFTRUE 26503
26501: GO 26521
26503: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26504: LD_ADDR_VAR 0 3
26508: PUSH
26509: LD_INT 4
26511: PUSH
26512: LD_INT 5
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: ST_TO_ADDR
26519: GO 27190
26521: LD_INT 10
26523: DOUBLE
26524: EQUAL
26525: IFTRUE 26529
26527: GO 26547
26529: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26530: LD_ADDR_VAR 0 3
26534: PUSH
26535: LD_INT 4
26537: PUSH
26538: LD_INT 5
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: ST_TO_ADDR
26545: GO 27190
26547: LD_INT 22
26549: DOUBLE
26550: EQUAL
26551: IFTRUE 26555
26553: GO 26581
26555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26556: LD_ADDR_VAR 0 3
26560: PUSH
26561: LD_INT 11
26563: PUSH
26564: LD_INT 12
26566: PUSH
26567: LD_INT 13
26569: PUSH
26570: LD_INT 14
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: ST_TO_ADDR
26579: GO 27190
26581: LD_INT 23
26583: DOUBLE
26584: EQUAL
26585: IFTRUE 26589
26587: GO 26615
26589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: LD_INT 11
26597: PUSH
26598: LD_INT 12
26600: PUSH
26601: LD_INT 13
26603: PUSH
26604: LD_INT 14
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
26613: GO 27190
26615: LD_INT 24
26617: DOUBLE
26618: EQUAL
26619: IFTRUE 26623
26621: GO 26649
26623: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 11
26631: PUSH
26632: LD_INT 12
26634: PUSH
26635: LD_INT 13
26637: PUSH
26638: LD_INT 14
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: ST_TO_ADDR
26647: GO 27190
26649: LD_INT 30
26651: DOUBLE
26652: EQUAL
26653: IFTRUE 26657
26655: GO 26683
26657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26658: LD_ADDR_VAR 0 3
26662: PUSH
26663: LD_INT 11
26665: PUSH
26666: LD_INT 12
26668: PUSH
26669: LD_INT 13
26671: PUSH
26672: LD_INT 14
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: ST_TO_ADDR
26681: GO 27190
26683: LD_INT 25
26685: DOUBLE
26686: EQUAL
26687: IFTRUE 26691
26689: GO 26709
26691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26692: LD_ADDR_VAR 0 3
26696: PUSH
26697: LD_INT 13
26699: PUSH
26700: LD_INT 14
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: ST_TO_ADDR
26707: GO 27190
26709: LD_INT 27
26711: DOUBLE
26712: EQUAL
26713: IFTRUE 26717
26715: GO 26735
26717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26718: LD_ADDR_VAR 0 3
26722: PUSH
26723: LD_INT 13
26725: PUSH
26726: LD_INT 14
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: ST_TO_ADDR
26733: GO 27190
26735: LD_INT 92
26737: DOUBLE
26738: EQUAL
26739: IFTRUE 26743
26741: GO 26769
26743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26744: LD_ADDR_VAR 0 3
26748: PUSH
26749: LD_INT 11
26751: PUSH
26752: LD_INT 12
26754: PUSH
26755: LD_INT 13
26757: PUSH
26758: LD_INT 14
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: ST_TO_ADDR
26767: GO 27190
26769: LD_INT 28
26771: DOUBLE
26772: EQUAL
26773: IFTRUE 26777
26775: GO 26795
26777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26778: LD_ADDR_VAR 0 3
26782: PUSH
26783: LD_INT 13
26785: PUSH
26786: LD_INT 14
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: ST_TO_ADDR
26793: GO 27190
26795: LD_INT 29
26797: DOUBLE
26798: EQUAL
26799: IFTRUE 26803
26801: GO 26821
26803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26804: LD_ADDR_VAR 0 3
26808: PUSH
26809: LD_INT 13
26811: PUSH
26812: LD_INT 14
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: ST_TO_ADDR
26819: GO 27190
26821: LD_INT 31
26823: DOUBLE
26824: EQUAL
26825: IFTRUE 26829
26827: GO 26847
26829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26830: LD_ADDR_VAR 0 3
26834: PUSH
26835: LD_INT 13
26837: PUSH
26838: LD_INT 14
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: ST_TO_ADDR
26845: GO 27190
26847: LD_INT 26
26849: DOUBLE
26850: EQUAL
26851: IFTRUE 26855
26853: GO 26873
26855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26856: LD_ADDR_VAR 0 3
26860: PUSH
26861: LD_INT 13
26863: PUSH
26864: LD_INT 14
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: ST_TO_ADDR
26871: GO 27190
26873: LD_INT 42
26875: DOUBLE
26876: EQUAL
26877: IFTRUE 26881
26879: GO 26907
26881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26882: LD_ADDR_VAR 0 3
26886: PUSH
26887: LD_INT 21
26889: PUSH
26890: LD_INT 22
26892: PUSH
26893: LD_INT 23
26895: PUSH
26896: LD_INT 24
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: ST_TO_ADDR
26905: GO 27190
26907: LD_INT 43
26909: DOUBLE
26910: EQUAL
26911: IFTRUE 26915
26913: GO 26941
26915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26916: LD_ADDR_VAR 0 3
26920: PUSH
26921: LD_INT 21
26923: PUSH
26924: LD_INT 22
26926: PUSH
26927: LD_INT 23
26929: PUSH
26930: LD_INT 24
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: ST_TO_ADDR
26939: GO 27190
26941: LD_INT 44
26943: DOUBLE
26944: EQUAL
26945: IFTRUE 26949
26947: GO 26975
26949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 22
26960: PUSH
26961: LD_INT 23
26963: PUSH
26964: LD_INT 24
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: ST_TO_ADDR
26973: GO 27190
26975: LD_INT 45
26977: DOUBLE
26978: EQUAL
26979: IFTRUE 26983
26981: GO 27009
26983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26984: LD_ADDR_VAR 0 3
26988: PUSH
26989: LD_INT 21
26991: PUSH
26992: LD_INT 22
26994: PUSH
26995: LD_INT 23
26997: PUSH
26998: LD_INT 24
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: ST_TO_ADDR
27007: GO 27190
27009: LD_INT 49
27011: DOUBLE
27012: EQUAL
27013: IFTRUE 27017
27015: GO 27043
27017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: LD_INT 21
27025: PUSH
27026: LD_INT 22
27028: PUSH
27029: LD_INT 23
27031: PUSH
27032: LD_INT 24
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: ST_TO_ADDR
27041: GO 27190
27043: LD_INT 51
27045: DOUBLE
27046: EQUAL
27047: IFTRUE 27051
27049: GO 27077
27051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27052: LD_ADDR_VAR 0 3
27056: PUSH
27057: LD_INT 21
27059: PUSH
27060: LD_INT 22
27062: PUSH
27063: LD_INT 23
27065: PUSH
27066: LD_INT 24
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: ST_TO_ADDR
27075: GO 27190
27077: LD_INT 52
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27111
27085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: LD_INT 21
27093: PUSH
27094: LD_INT 22
27096: PUSH
27097: LD_INT 23
27099: PUSH
27100: LD_INT 24
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: ST_TO_ADDR
27109: GO 27190
27111: LD_INT 53
27113: DOUBLE
27114: EQUAL
27115: IFTRUE 27119
27117: GO 27137
27119: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27120: LD_ADDR_VAR 0 3
27124: PUSH
27125: LD_INT 23
27127: PUSH
27128: LD_INT 24
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: ST_TO_ADDR
27135: GO 27190
27137: LD_INT 46
27139: DOUBLE
27140: EQUAL
27141: IFTRUE 27145
27143: GO 27163
27145: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27146: LD_ADDR_VAR 0 3
27150: PUSH
27151: LD_INT 23
27153: PUSH
27154: LD_INT 24
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: ST_TO_ADDR
27161: GO 27190
27163: LD_INT 47
27165: DOUBLE
27166: EQUAL
27167: IFTRUE 27171
27169: GO 27189
27171: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_INT 23
27179: PUSH
27180: LD_INT 24
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: ST_TO_ADDR
27187: GO 27190
27189: POP
// result := ( chassis in result ) ;
27190: LD_ADDR_VAR 0 3
27194: PUSH
27195: LD_VAR 0 1
27199: PUSH
27200: LD_VAR 0 3
27204: IN
27205: ST_TO_ADDR
// end ;
27206: LD_VAR 0 3
27210: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27211: LD_INT 0
27213: PPUSH
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
// result := array ;
27220: LD_ADDR_VAR 0 5
27224: PUSH
27225: LD_VAR 0 1
27229: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27230: LD_VAR 0 1
27234: NOT
27235: PUSH
27236: LD_VAR 0 2
27240: NOT
27241: OR
27242: PUSH
27243: LD_VAR 0 3
27247: NOT
27248: OR
27249: PUSH
27250: LD_VAR 0 2
27254: PUSH
27255: LD_VAR 0 1
27259: GREATER
27260: OR
27261: PUSH
27262: LD_VAR 0 3
27266: PUSH
27267: LD_VAR 0 1
27271: GREATER
27272: OR
27273: IFFALSE 27277
// exit ;
27275: GO 27573
// if direction then
27277: LD_VAR 0 4
27281: IFFALSE 27345
// begin d := 1 ;
27283: LD_ADDR_VAR 0 9
27287: PUSH
27288: LD_INT 1
27290: ST_TO_ADDR
// if i_from > i_to then
27291: LD_VAR 0 2
27295: PUSH
27296: LD_VAR 0 3
27300: GREATER
27301: IFFALSE 27327
// length := ( array - i_from ) + i_to else
27303: LD_ADDR_VAR 0 11
27307: PUSH
27308: LD_VAR 0 1
27312: PUSH
27313: LD_VAR 0 2
27317: MINUS
27318: PUSH
27319: LD_VAR 0 3
27323: PLUS
27324: ST_TO_ADDR
27325: GO 27343
// length := i_to - i_from ;
27327: LD_ADDR_VAR 0 11
27331: PUSH
27332: LD_VAR 0 3
27336: PUSH
27337: LD_VAR 0 2
27341: MINUS
27342: ST_TO_ADDR
// end else
27343: GO 27406
// begin d := - 1 ;
27345: LD_ADDR_VAR 0 9
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: ST_TO_ADDR
// if i_from > i_to then
27354: LD_VAR 0 2
27358: PUSH
27359: LD_VAR 0 3
27363: GREATER
27364: IFFALSE 27384
// length := i_from - i_to else
27366: LD_ADDR_VAR 0 11
27370: PUSH
27371: LD_VAR 0 2
27375: PUSH
27376: LD_VAR 0 3
27380: MINUS
27381: ST_TO_ADDR
27382: GO 27406
// length := ( array - i_to ) + i_from ;
27384: LD_ADDR_VAR 0 11
27388: PUSH
27389: LD_VAR 0 1
27393: PUSH
27394: LD_VAR 0 3
27398: MINUS
27399: PUSH
27400: LD_VAR 0 2
27404: PLUS
27405: ST_TO_ADDR
// end ; if not length then
27406: LD_VAR 0 11
27410: NOT
27411: IFFALSE 27415
// exit ;
27413: GO 27573
// tmp := array ;
27415: LD_ADDR_VAR 0 10
27419: PUSH
27420: LD_VAR 0 1
27424: ST_TO_ADDR
// for i = 1 to length do
27425: LD_ADDR_VAR 0 6
27429: PUSH
27430: DOUBLE
27431: LD_INT 1
27433: DEC
27434: ST_TO_ADDR
27435: LD_VAR 0 11
27439: PUSH
27440: FOR_TO
27441: IFFALSE 27561
// begin for j = 1 to array do
27443: LD_ADDR_VAR 0 7
27447: PUSH
27448: DOUBLE
27449: LD_INT 1
27451: DEC
27452: ST_TO_ADDR
27453: LD_VAR 0 1
27457: PUSH
27458: FOR_TO
27459: IFFALSE 27547
// begin k := j + d ;
27461: LD_ADDR_VAR 0 8
27465: PUSH
27466: LD_VAR 0 7
27470: PUSH
27471: LD_VAR 0 9
27475: PLUS
27476: ST_TO_ADDR
// if k > array then
27477: LD_VAR 0 8
27481: PUSH
27482: LD_VAR 0 1
27486: GREATER
27487: IFFALSE 27497
// k := 1 ;
27489: LD_ADDR_VAR 0 8
27493: PUSH
27494: LD_INT 1
27496: ST_TO_ADDR
// if not k then
27497: LD_VAR 0 8
27501: NOT
27502: IFFALSE 27514
// k := array ;
27504: LD_ADDR_VAR 0 8
27508: PUSH
27509: LD_VAR 0 1
27513: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27514: LD_ADDR_VAR 0 10
27518: PUSH
27519: LD_VAR 0 10
27523: PPUSH
27524: LD_VAR 0 8
27528: PPUSH
27529: LD_VAR 0 1
27533: PUSH
27534: LD_VAR 0 7
27538: ARRAY
27539: PPUSH
27540: CALL_OW 1
27544: ST_TO_ADDR
// end ;
27545: GO 27458
27547: POP
27548: POP
// array := tmp ;
27549: LD_ADDR_VAR 0 1
27553: PUSH
27554: LD_VAR 0 10
27558: ST_TO_ADDR
// end ;
27559: GO 27440
27561: POP
27562: POP
// result := array ;
27563: LD_ADDR_VAR 0 5
27567: PUSH
27568: LD_VAR 0 1
27572: ST_TO_ADDR
// end ;
27573: LD_VAR 0 5
27577: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27578: LD_INT 0
27580: PPUSH
27581: PPUSH
// result := 0 ;
27582: LD_ADDR_VAR 0 3
27586: PUSH
27587: LD_INT 0
27589: ST_TO_ADDR
// if not array or not value in array then
27590: LD_VAR 0 1
27594: NOT
27595: PUSH
27596: LD_VAR 0 2
27600: PUSH
27601: LD_VAR 0 1
27605: IN
27606: NOT
27607: OR
27608: IFFALSE 27612
// exit ;
27610: GO 27666
// for i = 1 to array do
27612: LD_ADDR_VAR 0 4
27616: PUSH
27617: DOUBLE
27618: LD_INT 1
27620: DEC
27621: ST_TO_ADDR
27622: LD_VAR 0 1
27626: PUSH
27627: FOR_TO
27628: IFFALSE 27664
// if value = array [ i ] then
27630: LD_VAR 0 2
27634: PUSH
27635: LD_VAR 0 1
27639: PUSH
27640: LD_VAR 0 4
27644: ARRAY
27645: EQUAL
27646: IFFALSE 27662
// begin result := i ;
27648: LD_ADDR_VAR 0 3
27652: PUSH
27653: LD_VAR 0 4
27657: ST_TO_ADDR
// exit ;
27658: POP
27659: POP
27660: GO 27666
// end ;
27662: GO 27627
27664: POP
27665: POP
// end ;
27666: LD_VAR 0 3
27670: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27671: LD_INT 0
27673: PPUSH
// vc_chassis := chassis ;
27674: LD_ADDR_OWVAR 37
27678: PUSH
27679: LD_VAR 0 1
27683: ST_TO_ADDR
// vc_engine := engine ;
27684: LD_ADDR_OWVAR 39
27688: PUSH
27689: LD_VAR 0 2
27693: ST_TO_ADDR
// vc_control := control ;
27694: LD_ADDR_OWVAR 38
27698: PUSH
27699: LD_VAR 0 3
27703: ST_TO_ADDR
// vc_weapon := weapon ;
27704: LD_ADDR_OWVAR 40
27708: PUSH
27709: LD_VAR 0 4
27713: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27714: LD_ADDR_OWVAR 41
27718: PUSH
27719: LD_VAR 0 5
27723: ST_TO_ADDR
// end ;
27724: LD_VAR 0 6
27728: RET
// export function WantPlant ( unit ) ; var task ; begin
27729: LD_INT 0
27731: PPUSH
27732: PPUSH
// result := false ;
27733: LD_ADDR_VAR 0 2
27737: PUSH
27738: LD_INT 0
27740: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27741: LD_ADDR_VAR 0 3
27745: PUSH
27746: LD_VAR 0 1
27750: PPUSH
27751: CALL_OW 437
27755: ST_TO_ADDR
// if task then
27756: LD_VAR 0 3
27760: IFFALSE 27788
// if task [ 1 ] [ 1 ] = p then
27762: LD_VAR 0 3
27766: PUSH
27767: LD_INT 1
27769: ARRAY
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PUSH
27775: LD_STRING p
27777: EQUAL
27778: IFFALSE 27788
// result := true ;
27780: LD_ADDR_VAR 0 2
27784: PUSH
27785: LD_INT 1
27787: ST_TO_ADDR
// end ;
27788: LD_VAR 0 2
27792: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
// if pos < 1 then
27799: LD_VAR 0 2
27803: PUSH
27804: LD_INT 1
27806: LESS
27807: IFFALSE 27811
// exit ;
27809: GO 28114
// if pos = 1 then
27811: LD_VAR 0 2
27815: PUSH
27816: LD_INT 1
27818: EQUAL
27819: IFFALSE 27852
// result := Replace ( arr , pos [ 1 ] , value ) else
27821: LD_ADDR_VAR 0 4
27825: PUSH
27826: LD_VAR 0 1
27830: PPUSH
27831: LD_VAR 0 2
27835: PUSH
27836: LD_INT 1
27838: ARRAY
27839: PPUSH
27840: LD_VAR 0 3
27844: PPUSH
27845: CALL_OW 1
27849: ST_TO_ADDR
27850: GO 28114
// begin tmp := arr ;
27852: LD_ADDR_VAR 0 6
27856: PUSH
27857: LD_VAR 0 1
27861: ST_TO_ADDR
// s_arr := [ tmp ] ;
27862: LD_ADDR_VAR 0 7
27866: PUSH
27867: LD_VAR 0 6
27871: PUSH
27872: EMPTY
27873: LIST
27874: ST_TO_ADDR
// for i = 1 to pos - 1 do
27875: LD_ADDR_VAR 0 5
27879: PUSH
27880: DOUBLE
27881: LD_INT 1
27883: DEC
27884: ST_TO_ADDR
27885: LD_VAR 0 2
27889: PUSH
27890: LD_INT 1
27892: MINUS
27893: PUSH
27894: FOR_TO
27895: IFFALSE 27940
// begin tmp := tmp [ pos [ i ] ] ;
27897: LD_ADDR_VAR 0 6
27901: PUSH
27902: LD_VAR 0 6
27906: PUSH
27907: LD_VAR 0 2
27911: PUSH
27912: LD_VAR 0 5
27916: ARRAY
27917: ARRAY
27918: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27919: LD_ADDR_VAR 0 7
27923: PUSH
27924: LD_VAR 0 7
27928: PUSH
27929: LD_VAR 0 6
27933: PUSH
27934: EMPTY
27935: LIST
27936: ADD
27937: ST_TO_ADDR
// end ;
27938: GO 27894
27940: POP
27941: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27942: LD_ADDR_VAR 0 6
27946: PUSH
27947: LD_VAR 0 6
27951: PPUSH
27952: LD_VAR 0 2
27956: PUSH
27957: LD_VAR 0 2
27961: ARRAY
27962: PPUSH
27963: LD_VAR 0 3
27967: PPUSH
27968: CALL_OW 1
27972: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27973: LD_ADDR_VAR 0 7
27977: PUSH
27978: LD_VAR 0 7
27982: PPUSH
27983: LD_VAR 0 7
27987: PPUSH
27988: LD_VAR 0 6
27992: PPUSH
27993: CALL_OW 1
27997: ST_TO_ADDR
// for i = s_arr downto 2 do
27998: LD_ADDR_VAR 0 5
28002: PUSH
28003: DOUBLE
28004: LD_VAR 0 7
28008: INC
28009: ST_TO_ADDR
28010: LD_INT 2
28012: PUSH
28013: FOR_DOWNTO
28014: IFFALSE 28098
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28016: LD_ADDR_VAR 0 6
28020: PUSH
28021: LD_VAR 0 7
28025: PUSH
28026: LD_VAR 0 5
28030: PUSH
28031: LD_INT 1
28033: MINUS
28034: ARRAY
28035: PPUSH
28036: LD_VAR 0 2
28040: PUSH
28041: LD_VAR 0 5
28045: PUSH
28046: LD_INT 1
28048: MINUS
28049: ARRAY
28050: PPUSH
28051: LD_VAR 0 7
28055: PUSH
28056: LD_VAR 0 5
28060: ARRAY
28061: PPUSH
28062: CALL_OW 1
28066: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28067: LD_ADDR_VAR 0 7
28071: PUSH
28072: LD_VAR 0 7
28076: PPUSH
28077: LD_VAR 0 5
28081: PUSH
28082: LD_INT 1
28084: MINUS
28085: PPUSH
28086: LD_VAR 0 6
28090: PPUSH
28091: CALL_OW 1
28095: ST_TO_ADDR
// end ;
28096: GO 28013
28098: POP
28099: POP
// result := s_arr [ 1 ] ;
28100: LD_ADDR_VAR 0 4
28104: PUSH
28105: LD_VAR 0 7
28109: PUSH
28110: LD_INT 1
28112: ARRAY
28113: ST_TO_ADDR
// end ; end ;
28114: LD_VAR 0 4
28118: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28119: LD_INT 0
28121: PPUSH
28122: PPUSH
// if not list then
28123: LD_VAR 0 1
28127: NOT
28128: IFFALSE 28132
// exit ;
28130: GO 28223
// i := list [ pos1 ] ;
28132: LD_ADDR_VAR 0 5
28136: PUSH
28137: LD_VAR 0 1
28141: PUSH
28142: LD_VAR 0 2
28146: ARRAY
28147: ST_TO_ADDR
// if not i then
28148: LD_VAR 0 5
28152: NOT
28153: IFFALSE 28157
// exit ;
28155: GO 28223
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28157: LD_ADDR_VAR 0 1
28161: PUSH
28162: LD_VAR 0 1
28166: PPUSH
28167: LD_VAR 0 2
28171: PPUSH
28172: LD_VAR 0 1
28176: PUSH
28177: LD_VAR 0 3
28181: ARRAY
28182: PPUSH
28183: CALL_OW 1
28187: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28188: LD_ADDR_VAR 0 1
28192: PUSH
28193: LD_VAR 0 1
28197: PPUSH
28198: LD_VAR 0 3
28202: PPUSH
28203: LD_VAR 0 5
28207: PPUSH
28208: CALL_OW 1
28212: ST_TO_ADDR
// result := list ;
28213: LD_ADDR_VAR 0 4
28217: PUSH
28218: LD_VAR 0 1
28222: ST_TO_ADDR
// end ;
28223: LD_VAR 0 4
28227: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28228: LD_INT 0
28230: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28231: LD_ADDR_VAR 0 5
28235: PUSH
28236: LD_VAR 0 1
28240: PPUSH
28241: CALL_OW 250
28245: PPUSH
28246: LD_VAR 0 1
28250: PPUSH
28251: CALL_OW 251
28255: PPUSH
28256: LD_VAR 0 2
28260: PPUSH
28261: LD_VAR 0 3
28265: PPUSH
28266: LD_VAR 0 4
28270: PPUSH
28271: CALL 28649 0 5
28275: ST_TO_ADDR
// end ;
28276: LD_VAR 0 5
28280: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28281: LD_INT 0
28283: PPUSH
28284: PPUSH
28285: PPUSH
28286: PPUSH
// if not list or not unit then
28287: LD_VAR 0 2
28291: NOT
28292: PUSH
28293: LD_VAR 0 1
28297: NOT
28298: OR
28299: IFFALSE 28303
// exit ;
28301: GO 28644
// result := [ ] ;
28303: LD_ADDR_VAR 0 5
28307: PUSH
28308: EMPTY
28309: ST_TO_ADDR
// for i in list do
28310: LD_ADDR_VAR 0 6
28314: PUSH
28315: LD_VAR 0 2
28319: PUSH
28320: FOR_IN
28321: IFFALSE 28539
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28323: LD_ADDR_VAR 0 8
28327: PUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: LD_VAR 0 6
28337: PUSH
28338: LD_INT 1
28340: ARRAY
28341: PPUSH
28342: LD_VAR 0 6
28346: PUSH
28347: LD_INT 2
28349: ARRAY
28350: PPUSH
28351: CALL_OW 297
28355: ST_TO_ADDR
// if not Count ( result ) then
28356: LD_VAR 0 5
28360: PPUSH
28361: CALL 24933 0 1
28365: NOT
28366: IFFALSE 28399
// begin result := Join ( result , [ i , tmp ] ) ;
28368: LD_ADDR_VAR 0 5
28372: PUSH
28373: LD_VAR 0 5
28377: PPUSH
28378: LD_VAR 0 6
28382: PUSH
28383: LD_VAR 0 8
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PPUSH
28392: CALL 60522 0 2
28396: ST_TO_ADDR
// continue ;
28397: GO 28320
// end ; if result [ result ] [ 2 ] <= tmp then
28399: LD_VAR 0 5
28403: PUSH
28404: LD_VAR 0 5
28408: ARRAY
28409: PUSH
28410: LD_INT 2
28412: ARRAY
28413: PUSH
28414: LD_VAR 0 8
28418: LESSEQUAL
28419: IFFALSE 28452
// result := Join ( result , [ i , tmp ] ) else
28421: LD_ADDR_VAR 0 5
28425: PUSH
28426: LD_VAR 0 5
28430: PPUSH
28431: LD_VAR 0 6
28435: PUSH
28436: LD_VAR 0 8
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL 60522 0 2
28449: ST_TO_ADDR
28450: GO 28537
// begin for j := 1 to Count ( result ) do
28452: LD_ADDR_VAR 0 7
28456: PUSH
28457: DOUBLE
28458: LD_INT 1
28460: DEC
28461: ST_TO_ADDR
28462: LD_VAR 0 5
28466: PPUSH
28467: CALL 24933 0 1
28471: PUSH
28472: FOR_TO
28473: IFFALSE 28535
// begin if tmp < result [ j ] [ 2 ] then
28475: LD_VAR 0 8
28479: PUSH
28480: LD_VAR 0 5
28484: PUSH
28485: LD_VAR 0 7
28489: ARRAY
28490: PUSH
28491: LD_INT 2
28493: ARRAY
28494: LESS
28495: IFFALSE 28533
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28497: LD_ADDR_VAR 0 5
28501: PUSH
28502: LD_VAR 0 5
28506: PPUSH
28507: LD_VAR 0 7
28511: PPUSH
28512: LD_VAR 0 6
28516: PUSH
28517: LD_VAR 0 8
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PPUSH
28526: CALL_OW 2
28530: ST_TO_ADDR
// break ;
28531: GO 28535
// end ; end ;
28533: GO 28472
28535: POP
28536: POP
// end ; end ;
28537: GO 28320
28539: POP
28540: POP
// if result and not asc then
28541: LD_VAR 0 5
28545: PUSH
28546: LD_VAR 0 3
28550: NOT
28551: AND
28552: IFFALSE 28569
// result := ReverseArray ( result ) ;
28554: LD_ADDR_VAR 0 5
28558: PUSH
28559: LD_VAR 0 5
28563: PPUSH
28564: CALL 55809 0 1
28568: ST_TO_ADDR
// tmp := [ ] ;
28569: LD_ADDR_VAR 0 8
28573: PUSH
28574: EMPTY
28575: ST_TO_ADDR
// if mode then
28576: LD_VAR 0 4
28580: IFFALSE 28644
// begin for i := 1 to result do
28582: LD_ADDR_VAR 0 6
28586: PUSH
28587: DOUBLE
28588: LD_INT 1
28590: DEC
28591: ST_TO_ADDR
28592: LD_VAR 0 5
28596: PUSH
28597: FOR_TO
28598: IFFALSE 28632
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28600: LD_ADDR_VAR 0 8
28604: PUSH
28605: LD_VAR 0 8
28609: PPUSH
28610: LD_VAR 0 5
28614: PUSH
28615: LD_VAR 0 6
28619: ARRAY
28620: PUSH
28621: LD_INT 1
28623: ARRAY
28624: PPUSH
28625: CALL 60522 0 2
28629: ST_TO_ADDR
28630: GO 28597
28632: POP
28633: POP
// result := tmp ;
28634: LD_ADDR_VAR 0 5
28638: PUSH
28639: LD_VAR 0 8
28643: ST_TO_ADDR
// end ; end ;
28644: LD_VAR 0 5
28648: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28649: LD_INT 0
28651: PPUSH
28652: PPUSH
28653: PPUSH
28654: PPUSH
// if not list then
28655: LD_VAR 0 3
28659: NOT
28660: IFFALSE 28664
// exit ;
28662: GO 29052
// result := [ ] ;
28664: LD_ADDR_VAR 0 6
28668: PUSH
28669: EMPTY
28670: ST_TO_ADDR
// for i in list do
28671: LD_ADDR_VAR 0 7
28675: PUSH
28676: LD_VAR 0 3
28680: PUSH
28681: FOR_IN
28682: IFFALSE 28884
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28684: LD_ADDR_VAR 0 9
28688: PUSH
28689: LD_VAR 0 7
28693: PPUSH
28694: LD_VAR 0 1
28698: PPUSH
28699: LD_VAR 0 2
28703: PPUSH
28704: CALL_OW 297
28708: ST_TO_ADDR
// if not result then
28709: LD_VAR 0 6
28713: NOT
28714: IFFALSE 28740
// result := [ [ i , tmp ] ] else
28716: LD_ADDR_VAR 0 6
28720: PUSH
28721: LD_VAR 0 7
28725: PUSH
28726: LD_VAR 0 9
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: ST_TO_ADDR
28738: GO 28882
// begin if result [ result ] [ 2 ] < tmp then
28740: LD_VAR 0 6
28744: PUSH
28745: LD_VAR 0 6
28749: ARRAY
28750: PUSH
28751: LD_INT 2
28753: ARRAY
28754: PUSH
28755: LD_VAR 0 9
28759: LESS
28760: IFFALSE 28802
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28762: LD_ADDR_VAR 0 6
28766: PUSH
28767: LD_VAR 0 6
28771: PPUSH
28772: LD_VAR 0 6
28776: PUSH
28777: LD_INT 1
28779: PLUS
28780: PPUSH
28781: LD_VAR 0 7
28785: PUSH
28786: LD_VAR 0 9
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PPUSH
28795: CALL_OW 2
28799: ST_TO_ADDR
28800: GO 28882
// for j = 1 to result do
28802: LD_ADDR_VAR 0 8
28806: PUSH
28807: DOUBLE
28808: LD_INT 1
28810: DEC
28811: ST_TO_ADDR
28812: LD_VAR 0 6
28816: PUSH
28817: FOR_TO
28818: IFFALSE 28880
// begin if tmp < result [ j ] [ 2 ] then
28820: LD_VAR 0 9
28824: PUSH
28825: LD_VAR 0 6
28829: PUSH
28830: LD_VAR 0 8
28834: ARRAY
28835: PUSH
28836: LD_INT 2
28838: ARRAY
28839: LESS
28840: IFFALSE 28878
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28842: LD_ADDR_VAR 0 6
28846: PUSH
28847: LD_VAR 0 6
28851: PPUSH
28852: LD_VAR 0 8
28856: PPUSH
28857: LD_VAR 0 7
28861: PUSH
28862: LD_VAR 0 9
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PPUSH
28871: CALL_OW 2
28875: ST_TO_ADDR
// break ;
28876: GO 28880
// end ; end ;
28878: GO 28817
28880: POP
28881: POP
// end ; end ;
28882: GO 28681
28884: POP
28885: POP
// if result and not asc then
28886: LD_VAR 0 6
28890: PUSH
28891: LD_VAR 0 4
28895: NOT
28896: AND
28897: IFFALSE 28972
// begin tmp := result ;
28899: LD_ADDR_VAR 0 9
28903: PUSH
28904: LD_VAR 0 6
28908: ST_TO_ADDR
// for i = tmp downto 1 do
28909: LD_ADDR_VAR 0 7
28913: PUSH
28914: DOUBLE
28915: LD_VAR 0 9
28919: INC
28920: ST_TO_ADDR
28921: LD_INT 1
28923: PUSH
28924: FOR_DOWNTO
28925: IFFALSE 28970
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28927: LD_ADDR_VAR 0 6
28931: PUSH
28932: LD_VAR 0 6
28936: PPUSH
28937: LD_VAR 0 9
28941: PUSH
28942: LD_VAR 0 7
28946: MINUS
28947: PUSH
28948: LD_INT 1
28950: PLUS
28951: PPUSH
28952: LD_VAR 0 9
28956: PUSH
28957: LD_VAR 0 7
28961: ARRAY
28962: PPUSH
28963: CALL_OW 1
28967: ST_TO_ADDR
28968: GO 28924
28970: POP
28971: POP
// end ; tmp := [ ] ;
28972: LD_ADDR_VAR 0 9
28976: PUSH
28977: EMPTY
28978: ST_TO_ADDR
// if mode then
28979: LD_VAR 0 5
28983: IFFALSE 29052
// begin for i = 1 to result do
28985: LD_ADDR_VAR 0 7
28989: PUSH
28990: DOUBLE
28991: LD_INT 1
28993: DEC
28994: ST_TO_ADDR
28995: LD_VAR 0 6
28999: PUSH
29000: FOR_TO
29001: IFFALSE 29040
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29003: LD_ADDR_VAR 0 9
29007: PUSH
29008: LD_VAR 0 9
29012: PPUSH
29013: LD_VAR 0 7
29017: PPUSH
29018: LD_VAR 0 6
29022: PUSH
29023: LD_VAR 0 7
29027: ARRAY
29028: PUSH
29029: LD_INT 1
29031: ARRAY
29032: PPUSH
29033: CALL_OW 1
29037: ST_TO_ADDR
29038: GO 29000
29040: POP
29041: POP
// result := tmp ;
29042: LD_ADDR_VAR 0 6
29046: PUSH
29047: LD_VAR 0 9
29051: ST_TO_ADDR
// end ; end ;
29052: LD_VAR 0 6
29056: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29057: LD_INT 0
29059: PPUSH
29060: PPUSH
29061: PPUSH
29062: PPUSH
29063: PPUSH
29064: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29065: LD_ADDR_VAR 0 5
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: EMPTY
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// if not x or not y then
29087: LD_VAR 0 2
29091: NOT
29092: PUSH
29093: LD_VAR 0 3
29097: NOT
29098: OR
29099: IFFALSE 29103
// exit ;
29101: GO 30753
// if not range then
29103: LD_VAR 0 4
29107: NOT
29108: IFFALSE 29118
// range := 10 ;
29110: LD_ADDR_VAR 0 4
29114: PUSH
29115: LD_INT 10
29117: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: LD_INT 81
29125: PUSH
29126: LD_VAR 0 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 92
29137: PUSH
29138: LD_VAR 0 2
29142: PUSH
29143: LD_VAR 0 3
29147: PUSH
29148: LD_VAR 0 4
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 21
29164: PUSH
29165: LD_INT 3
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: LIST
29180: PPUSH
29181: CALL_OW 69
29185: ST_TO_ADDR
// if not tmp then
29186: LD_VAR 0 8
29190: NOT
29191: IFFALSE 29195
// exit ;
29193: GO 30753
// for i in tmp do
29195: LD_ADDR_VAR 0 6
29199: PUSH
29200: LD_VAR 0 8
29204: PUSH
29205: FOR_IN
29206: IFFALSE 30728
// begin points := [ 0 , 0 , 0 ] ;
29208: LD_ADDR_VAR 0 9
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: ST_TO_ADDR
// bpoints := 1 ;
29227: LD_ADDR_VAR 0 10
29231: PUSH
29232: LD_INT 1
29234: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29235: LD_VAR 0 6
29239: PPUSH
29240: CALL_OW 247
29244: PUSH
29245: LD_INT 1
29247: DOUBLE
29248: EQUAL
29249: IFTRUE 29253
29251: GO 29831
29253: POP
// begin if GetClass ( i ) = 1 then
29254: LD_VAR 0 6
29258: PPUSH
29259: CALL_OW 257
29263: PUSH
29264: LD_INT 1
29266: EQUAL
29267: IFFALSE 29288
// points := [ 10 , 5 , 3 ] ;
29269: LD_ADDR_VAR 0 9
29273: PUSH
29274: LD_INT 10
29276: PUSH
29277: LD_INT 5
29279: PUSH
29280: LD_INT 3
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29288: LD_VAR 0 6
29292: PPUSH
29293: CALL_OW 257
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: LD_INT 3
29303: PUSH
29304: LD_INT 4
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: IN
29312: IFFALSE 29333
// points := [ 3 , 2 , 1 ] ;
29314: LD_ADDR_VAR 0 9
29318: PUSH
29319: LD_INT 3
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29333: LD_VAR 0 6
29337: PPUSH
29338: CALL_OW 257
29342: PUSH
29343: LD_INT 5
29345: EQUAL
29346: IFFALSE 29367
// points := [ 130 , 5 , 2 ] ;
29348: LD_ADDR_VAR 0 9
29352: PUSH
29353: LD_INT 130
29355: PUSH
29356: LD_INT 5
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29367: LD_VAR 0 6
29371: PPUSH
29372: CALL_OW 257
29376: PUSH
29377: LD_INT 8
29379: EQUAL
29380: IFFALSE 29401
// points := [ 35 , 35 , 30 ] ;
29382: LD_ADDR_VAR 0 9
29386: PUSH
29387: LD_INT 35
29389: PUSH
29390: LD_INT 35
29392: PUSH
29393: LD_INT 30
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29401: LD_VAR 0 6
29405: PPUSH
29406: CALL_OW 257
29410: PUSH
29411: LD_INT 9
29413: EQUAL
29414: IFFALSE 29435
// points := [ 20 , 55 , 40 ] ;
29416: LD_ADDR_VAR 0 9
29420: PUSH
29421: LD_INT 20
29423: PUSH
29424: LD_INT 55
29426: PUSH
29427: LD_INT 40
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29435: LD_VAR 0 6
29439: PPUSH
29440: CALL_OW 257
29444: PUSH
29445: LD_INT 12
29447: PUSH
29448: LD_INT 16
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: IN
29455: IFFALSE 29476
// points := [ 5 , 3 , 2 ] ;
29457: LD_ADDR_VAR 0 9
29461: PUSH
29462: LD_INT 5
29464: PUSH
29465: LD_INT 3
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29476: LD_VAR 0 6
29480: PPUSH
29481: CALL_OW 257
29485: PUSH
29486: LD_INT 17
29488: EQUAL
29489: IFFALSE 29510
// points := [ 100 , 50 , 75 ] ;
29491: LD_ADDR_VAR 0 9
29495: PUSH
29496: LD_INT 100
29498: PUSH
29499: LD_INT 50
29501: PUSH
29502: LD_INT 75
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29510: LD_VAR 0 6
29514: PPUSH
29515: CALL_OW 257
29519: PUSH
29520: LD_INT 15
29522: EQUAL
29523: IFFALSE 29544
// points := [ 10 , 5 , 3 ] ;
29525: LD_ADDR_VAR 0 9
29529: PUSH
29530: LD_INT 10
29532: PUSH
29533: LD_INT 5
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29544: LD_VAR 0 6
29548: PPUSH
29549: CALL_OW 257
29553: PUSH
29554: LD_INT 14
29556: EQUAL
29557: IFFALSE 29578
// points := [ 10 , 0 , 0 ] ;
29559: LD_ADDR_VAR 0 9
29563: PUSH
29564: LD_INT 10
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29578: LD_VAR 0 6
29582: PPUSH
29583: CALL_OW 257
29587: PUSH
29588: LD_INT 11
29590: EQUAL
29591: IFFALSE 29612
// points := [ 30 , 10 , 5 ] ;
29593: LD_ADDR_VAR 0 9
29597: PUSH
29598: LD_INT 30
29600: PUSH
29601: LD_INT 10
29603: PUSH
29604: LD_INT 5
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_INT 5
29619: PPUSH
29620: CALL_OW 321
29624: PUSH
29625: LD_INT 2
29627: EQUAL
29628: IFFALSE 29645
// bpoints := bpoints * 1.8 ;
29630: LD_ADDR_VAR 0 10
29634: PUSH
29635: LD_VAR 0 10
29639: PUSH
29640: LD_REAL  1.80000000000000E+0000
29643: MUL
29644: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29645: LD_VAR 0 6
29649: PPUSH
29650: CALL_OW 257
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 3
29663: PUSH
29664: LD_INT 4
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: IN
29673: PUSH
29674: LD_VAR 0 1
29678: PPUSH
29679: LD_INT 51
29681: PPUSH
29682: CALL_OW 321
29686: PUSH
29687: LD_INT 2
29689: EQUAL
29690: AND
29691: IFFALSE 29708
// bpoints := bpoints * 1.2 ;
29693: LD_ADDR_VAR 0 10
29697: PUSH
29698: LD_VAR 0 10
29702: PUSH
29703: LD_REAL  1.20000000000000E+0000
29706: MUL
29707: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29708: LD_VAR 0 6
29712: PPUSH
29713: CALL_OW 257
29717: PUSH
29718: LD_INT 5
29720: PUSH
29721: LD_INT 7
29723: PUSH
29724: LD_INT 9
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: IN
29732: PUSH
29733: LD_VAR 0 1
29737: PPUSH
29738: LD_INT 52
29740: PPUSH
29741: CALL_OW 321
29745: PUSH
29746: LD_INT 2
29748: EQUAL
29749: AND
29750: IFFALSE 29767
// bpoints := bpoints * 1.5 ;
29752: LD_ADDR_VAR 0 10
29756: PUSH
29757: LD_VAR 0 10
29761: PUSH
29762: LD_REAL  1.50000000000000E+0000
29765: MUL
29766: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29767: LD_VAR 0 1
29771: PPUSH
29772: LD_INT 66
29774: PPUSH
29775: CALL_OW 321
29779: PUSH
29780: LD_INT 2
29782: EQUAL
29783: IFFALSE 29800
// bpoints := bpoints * 1.1 ;
29785: LD_ADDR_VAR 0 10
29789: PUSH
29790: LD_VAR 0 10
29794: PUSH
29795: LD_REAL  1.10000000000000E+0000
29798: MUL
29799: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29800: LD_ADDR_VAR 0 10
29804: PUSH
29805: LD_VAR 0 10
29809: PUSH
29810: LD_VAR 0 6
29814: PPUSH
29815: LD_INT 1
29817: PPUSH
29818: CALL_OW 259
29822: PUSH
29823: LD_REAL  1.15000000000000E+0000
29826: MUL
29827: MUL
29828: ST_TO_ADDR
// end ; unit_vehicle :
29829: GO 30657
29831: LD_INT 2
29833: DOUBLE
29834: EQUAL
29835: IFTRUE 29839
29837: GO 30645
29839: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29840: LD_VAR 0 6
29844: PPUSH
29845: CALL_OW 264
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 42
29855: PUSH
29856: LD_INT 24
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: IN
29864: IFFALSE 29885
// points := [ 25 , 5 , 3 ] ;
29866: LD_ADDR_VAR 0 9
29870: PUSH
29871: LD_INT 25
29873: PUSH
29874: LD_INT 5
29876: PUSH
29877: LD_INT 3
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29885: LD_VAR 0 6
29889: PPUSH
29890: CALL_OW 264
29894: PUSH
29895: LD_INT 4
29897: PUSH
29898: LD_INT 43
29900: PUSH
29901: LD_INT 25
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: IN
29909: IFFALSE 29930
// points := [ 40 , 15 , 5 ] ;
29911: LD_ADDR_VAR 0 9
29915: PUSH
29916: LD_INT 40
29918: PUSH
29919: LD_INT 15
29921: PUSH
29922: LD_INT 5
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29930: LD_VAR 0 6
29934: PPUSH
29935: CALL_OW 264
29939: PUSH
29940: LD_INT 3
29942: PUSH
29943: LD_INT 23
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: IN
29950: IFFALSE 29971
// points := [ 7 , 25 , 8 ] ;
29952: LD_ADDR_VAR 0 9
29956: PUSH
29957: LD_INT 7
29959: PUSH
29960: LD_INT 25
29962: PUSH
29963: LD_INT 8
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29971: LD_VAR 0 6
29975: PPUSH
29976: CALL_OW 264
29980: PUSH
29981: LD_INT 5
29983: PUSH
29984: LD_INT 27
29986: PUSH
29987: LD_INT 44
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: LIST
29994: IN
29995: IFFALSE 30016
// points := [ 14 , 50 , 16 ] ;
29997: LD_ADDR_VAR 0 9
30001: PUSH
30002: LD_INT 14
30004: PUSH
30005: LD_INT 50
30007: PUSH
30008: LD_INT 16
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: LIST
30015: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30016: LD_VAR 0 6
30020: PPUSH
30021: CALL_OW 264
30025: PUSH
30026: LD_INT 6
30028: PUSH
30029: LD_INT 46
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: IN
30036: IFFALSE 30057
// points := [ 32 , 120 , 70 ] ;
30038: LD_ADDR_VAR 0 9
30042: PUSH
30043: LD_INT 32
30045: PUSH
30046: LD_INT 120
30048: PUSH
30049: LD_INT 70
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30057: LD_VAR 0 6
30061: PPUSH
30062: CALL_OW 264
30066: PUSH
30067: LD_INT 7
30069: PUSH
30070: LD_INT 28
30072: PUSH
30073: LD_INT 45
30075: PUSH
30076: LD_INT 92
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: IN
30085: IFFALSE 30106
// points := [ 35 , 20 , 45 ] ;
30087: LD_ADDR_VAR 0 9
30091: PUSH
30092: LD_INT 35
30094: PUSH
30095: LD_INT 20
30097: PUSH
30098: LD_INT 45
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30106: LD_VAR 0 6
30110: PPUSH
30111: CALL_OW 264
30115: PUSH
30116: LD_INT 47
30118: PUSH
30119: EMPTY
30120: LIST
30121: IN
30122: IFFALSE 30143
// points := [ 67 , 45 , 75 ] ;
30124: LD_ADDR_VAR 0 9
30128: PUSH
30129: LD_INT 67
30131: PUSH
30132: LD_INT 45
30134: PUSH
30135: LD_INT 75
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: LIST
30142: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30143: LD_VAR 0 6
30147: PPUSH
30148: CALL_OW 264
30152: PUSH
30153: LD_INT 26
30155: PUSH
30156: EMPTY
30157: LIST
30158: IN
30159: IFFALSE 30180
// points := [ 120 , 30 , 80 ] ;
30161: LD_ADDR_VAR 0 9
30165: PUSH
30166: LD_INT 120
30168: PUSH
30169: LD_INT 30
30171: PUSH
30172: LD_INT 80
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30180: LD_VAR 0 6
30184: PPUSH
30185: CALL_OW 264
30189: PUSH
30190: LD_INT 22
30192: PUSH
30193: EMPTY
30194: LIST
30195: IN
30196: IFFALSE 30217
// points := [ 40 , 1 , 1 ] ;
30198: LD_ADDR_VAR 0 9
30202: PUSH
30203: LD_INT 40
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30217: LD_VAR 0 6
30221: PPUSH
30222: CALL_OW 264
30226: PUSH
30227: LD_INT 29
30229: PUSH
30230: EMPTY
30231: LIST
30232: IN
30233: IFFALSE 30254
// points := [ 70 , 200 , 400 ] ;
30235: LD_ADDR_VAR 0 9
30239: PUSH
30240: LD_INT 70
30242: PUSH
30243: LD_INT 200
30245: PUSH
30246: LD_INT 400
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30254: LD_VAR 0 6
30258: PPUSH
30259: CALL_OW 264
30263: PUSH
30264: LD_INT 14
30266: PUSH
30267: LD_INT 53
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: IN
30274: IFFALSE 30295
// points := [ 40 , 10 , 20 ] ;
30276: LD_ADDR_VAR 0 9
30280: PUSH
30281: LD_INT 40
30283: PUSH
30284: LD_INT 10
30286: PUSH
30287: LD_INT 20
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30295: LD_VAR 0 6
30299: PPUSH
30300: CALL_OW 264
30304: PUSH
30305: LD_INT 9
30307: PUSH
30308: EMPTY
30309: LIST
30310: IN
30311: IFFALSE 30332
// points := [ 5 , 70 , 20 ] ;
30313: LD_ADDR_VAR 0 9
30317: PUSH
30318: LD_INT 5
30320: PUSH
30321: LD_INT 70
30323: PUSH
30324: LD_INT 20
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30332: LD_VAR 0 6
30336: PPUSH
30337: CALL_OW 264
30341: PUSH
30342: LD_INT 10
30344: PUSH
30345: EMPTY
30346: LIST
30347: IN
30348: IFFALSE 30369
// points := [ 35 , 110 , 70 ] ;
30350: LD_ADDR_VAR 0 9
30354: PUSH
30355: LD_INT 35
30357: PUSH
30358: LD_INT 110
30360: PUSH
30361: LD_INT 70
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30369: LD_VAR 0 6
30373: PPUSH
30374: CALL_OW 265
30378: PUSH
30379: LD_INT 25
30381: EQUAL
30382: IFFALSE 30403
// points := [ 80 , 65 , 100 ] ;
30384: LD_ADDR_VAR 0 9
30388: PUSH
30389: LD_INT 80
30391: PUSH
30392: LD_INT 65
30394: PUSH
30395: LD_INT 100
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30403: LD_VAR 0 6
30407: PPUSH
30408: CALL_OW 263
30412: PUSH
30413: LD_INT 1
30415: EQUAL
30416: IFFALSE 30451
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30418: LD_ADDR_VAR 0 10
30422: PUSH
30423: LD_VAR 0 10
30427: PUSH
30428: LD_VAR 0 6
30432: PPUSH
30433: CALL_OW 311
30437: PPUSH
30438: LD_INT 3
30440: PPUSH
30441: CALL_OW 259
30445: PUSH
30446: LD_INT 4
30448: MUL
30449: MUL
30450: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30451: LD_VAR 0 6
30455: PPUSH
30456: CALL_OW 263
30460: PUSH
30461: LD_INT 2
30463: EQUAL
30464: IFFALSE 30515
// begin j := IsControledBy ( i ) ;
30466: LD_ADDR_VAR 0 7
30470: PUSH
30471: LD_VAR 0 6
30475: PPUSH
30476: CALL_OW 312
30480: ST_TO_ADDR
// if j then
30481: LD_VAR 0 7
30485: IFFALSE 30515
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30487: LD_ADDR_VAR 0 10
30491: PUSH
30492: LD_VAR 0 10
30496: PUSH
30497: LD_VAR 0 7
30501: PPUSH
30502: LD_INT 3
30504: PPUSH
30505: CALL_OW 259
30509: PUSH
30510: LD_INT 3
30512: MUL
30513: MUL
30514: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30515: LD_VAR 0 6
30519: PPUSH
30520: CALL_OW 264
30524: PUSH
30525: LD_INT 5
30527: PUSH
30528: LD_INT 6
30530: PUSH
30531: LD_INT 46
30533: PUSH
30534: LD_INT 44
30536: PUSH
30537: LD_INT 47
30539: PUSH
30540: LD_INT 45
30542: PUSH
30543: LD_INT 28
30545: PUSH
30546: LD_INT 7
30548: PUSH
30549: LD_INT 27
30551: PUSH
30552: LD_INT 29
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: IN
30567: PUSH
30568: LD_VAR 0 1
30572: PPUSH
30573: LD_INT 52
30575: PPUSH
30576: CALL_OW 321
30580: PUSH
30581: LD_INT 2
30583: EQUAL
30584: AND
30585: IFFALSE 30602
// bpoints := bpoints * 1.2 ;
30587: LD_ADDR_VAR 0 10
30591: PUSH
30592: LD_VAR 0 10
30596: PUSH
30597: LD_REAL  1.20000000000000E+0000
30600: MUL
30601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30602: LD_VAR 0 6
30606: PPUSH
30607: CALL_OW 264
30611: PUSH
30612: LD_INT 6
30614: PUSH
30615: LD_INT 46
30617: PUSH
30618: LD_INT 47
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: LIST
30625: IN
30626: IFFALSE 30643
// bpoints := bpoints * 1.2 ;
30628: LD_ADDR_VAR 0 10
30632: PUSH
30633: LD_VAR 0 10
30637: PUSH
30638: LD_REAL  1.20000000000000E+0000
30641: MUL
30642: ST_TO_ADDR
// end ; unit_building :
30643: GO 30657
30645: LD_INT 3
30647: DOUBLE
30648: EQUAL
30649: IFTRUE 30653
30651: GO 30656
30653: POP
// ; end ;
30654: GO 30657
30656: POP
// for j = 1 to 3 do
30657: LD_ADDR_VAR 0 7
30661: PUSH
30662: DOUBLE
30663: LD_INT 1
30665: DEC
30666: ST_TO_ADDR
30667: LD_INT 3
30669: PUSH
30670: FOR_TO
30671: IFFALSE 30724
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30673: LD_ADDR_VAR 0 5
30677: PUSH
30678: LD_VAR 0 5
30682: PPUSH
30683: LD_VAR 0 7
30687: PPUSH
30688: LD_VAR 0 5
30692: PUSH
30693: LD_VAR 0 7
30697: ARRAY
30698: PUSH
30699: LD_VAR 0 9
30703: PUSH
30704: LD_VAR 0 7
30708: ARRAY
30709: PUSH
30710: LD_VAR 0 10
30714: MUL
30715: PLUS
30716: PPUSH
30717: CALL_OW 1
30721: ST_TO_ADDR
30722: GO 30670
30724: POP
30725: POP
// end ;
30726: GO 29205
30728: POP
30729: POP
// result := Replace ( result , 4 , tmp ) ;
30730: LD_ADDR_VAR 0 5
30734: PUSH
30735: LD_VAR 0 5
30739: PPUSH
30740: LD_INT 4
30742: PPUSH
30743: LD_VAR 0 8
30747: PPUSH
30748: CALL_OW 1
30752: ST_TO_ADDR
// end ;
30753: LD_VAR 0 5
30757: RET
// export function DangerAtRange ( unit , range ) ; begin
30758: LD_INT 0
30760: PPUSH
// if not unit then
30761: LD_VAR 0 1
30765: NOT
30766: IFFALSE 30770
// exit ;
30768: GO 30815
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30770: LD_ADDR_VAR 0 3
30774: PUSH
30775: LD_VAR 0 1
30779: PPUSH
30780: CALL_OW 255
30784: PPUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL_OW 250
30794: PPUSH
30795: LD_VAR 0 1
30799: PPUSH
30800: CALL_OW 251
30804: PPUSH
30805: LD_VAR 0 2
30809: PPUSH
30810: CALL 29057 0 4
30814: ST_TO_ADDR
// end ;
30815: LD_VAR 0 3
30819: RET
// export function DangerInArea ( side , area ) ; begin
30820: LD_INT 0
30822: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30823: LD_ADDR_VAR 0 3
30827: PUSH
30828: LD_VAR 0 2
30832: PPUSH
30833: LD_INT 81
30835: PUSH
30836: LD_VAR 0 1
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PPUSH
30845: CALL_OW 70
30849: ST_TO_ADDR
// end ;
30850: LD_VAR 0 3
30854: RET
// export function IsExtension ( b ) ; begin
30855: LD_INT 0
30857: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30858: LD_ADDR_VAR 0 2
30862: PUSH
30863: LD_VAR 0 1
30867: PUSH
30868: LD_INT 23
30870: PUSH
30871: LD_INT 20
30873: PUSH
30874: LD_INT 22
30876: PUSH
30877: LD_INT 17
30879: PUSH
30880: LD_INT 24
30882: PUSH
30883: LD_INT 21
30885: PUSH
30886: LD_INT 19
30888: PUSH
30889: LD_INT 16
30891: PUSH
30892: LD_INT 25
30894: PUSH
30895: LD_INT 18
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: IN
30910: ST_TO_ADDR
// end ;
30911: LD_VAR 0 2
30915: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30916: LD_INT 0
30918: PPUSH
30919: PPUSH
30920: PPUSH
// result := [ ] ;
30921: LD_ADDR_VAR 0 4
30925: PUSH
30926: EMPTY
30927: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30928: LD_ADDR_VAR 0 5
30932: PUSH
30933: LD_VAR 0 2
30937: PPUSH
30938: LD_INT 21
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PPUSH
30948: CALL_OW 70
30952: ST_TO_ADDR
// if not tmp then
30953: LD_VAR 0 5
30957: NOT
30958: IFFALSE 30962
// exit ;
30960: GO 31026
// if checkLink then
30962: LD_VAR 0 3
30966: IFFALSE 31016
// begin for i in tmp do
30968: LD_ADDR_VAR 0 6
30972: PUSH
30973: LD_VAR 0 5
30977: PUSH
30978: FOR_IN
30979: IFFALSE 31014
// if GetBase ( i ) <> base then
30981: LD_VAR 0 6
30985: PPUSH
30986: CALL_OW 274
30990: PUSH
30991: LD_VAR 0 1
30995: NONEQUAL
30996: IFFALSE 31012
// ComLinkToBase ( base , i ) ;
30998: LD_VAR 0 1
31002: PPUSH
31003: LD_VAR 0 6
31007: PPUSH
31008: CALL_OW 169
31012: GO 30978
31014: POP
31015: POP
// end ; result := tmp ;
31016: LD_ADDR_VAR 0 4
31020: PUSH
31021: LD_VAR 0 5
31025: ST_TO_ADDR
// end ;
31026: LD_VAR 0 4
31030: RET
// export function ComComplete ( units , b ) ; var i ; begin
31031: LD_INT 0
31033: PPUSH
31034: PPUSH
// if not units then
31035: LD_VAR 0 1
31039: NOT
31040: IFFALSE 31044
// exit ;
31042: GO 31134
// for i in units do
31044: LD_ADDR_VAR 0 4
31048: PUSH
31049: LD_VAR 0 1
31053: PUSH
31054: FOR_IN
31055: IFFALSE 31132
// if BuildingStatus ( b ) = bs_build then
31057: LD_VAR 0 2
31061: PPUSH
31062: CALL_OW 461
31066: PUSH
31067: LD_INT 1
31069: EQUAL
31070: IFFALSE 31130
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31072: LD_VAR 0 4
31076: PPUSH
31077: LD_STRING h
31079: PUSH
31080: LD_VAR 0 2
31084: PPUSH
31085: CALL_OW 250
31089: PUSH
31090: LD_VAR 0 2
31094: PPUSH
31095: CALL_OW 251
31099: PUSH
31100: LD_VAR 0 2
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: PPUSH
31126: CALL_OW 446
31130: GO 31054
31132: POP
31133: POP
// end ;
31134: LD_VAR 0 3
31138: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31139: LD_INT 0
31141: PPUSH
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
31146: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31147: LD_VAR 0 1
31151: NOT
31152: PUSH
31153: LD_VAR 0 1
31157: PPUSH
31158: CALL_OW 263
31162: PUSH
31163: LD_INT 2
31165: NONEQUAL
31166: OR
31167: IFFALSE 31171
// exit ;
31169: GO 31487
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31171: LD_ADDR_VAR 0 6
31175: PUSH
31176: LD_INT 22
31178: PUSH
31179: LD_VAR 0 1
31183: PPUSH
31184: CALL_OW 255
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: LD_INT 36
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 34
31208: PUSH
31209: LD_INT 31
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PPUSH
31225: CALL_OW 69
31229: ST_TO_ADDR
// if not tmp then
31230: LD_VAR 0 6
31234: NOT
31235: IFFALSE 31239
// exit ;
31237: GO 31487
// result := [ ] ;
31239: LD_ADDR_VAR 0 2
31243: PUSH
31244: EMPTY
31245: ST_TO_ADDR
// for i in tmp do
31246: LD_ADDR_VAR 0 3
31250: PUSH
31251: LD_VAR 0 6
31255: PUSH
31256: FOR_IN
31257: IFFALSE 31328
// begin t := UnitsInside ( i ) ;
31259: LD_ADDR_VAR 0 4
31263: PUSH
31264: LD_VAR 0 3
31268: PPUSH
31269: CALL_OW 313
31273: ST_TO_ADDR
// if t then
31274: LD_VAR 0 4
31278: IFFALSE 31326
// for j in t do
31280: LD_ADDR_VAR 0 7
31284: PUSH
31285: LD_VAR 0 4
31289: PUSH
31290: FOR_IN
31291: IFFALSE 31324
// result := Replace ( result , result + 1 , j ) ;
31293: LD_ADDR_VAR 0 2
31297: PUSH
31298: LD_VAR 0 2
31302: PPUSH
31303: LD_VAR 0 2
31307: PUSH
31308: LD_INT 1
31310: PLUS
31311: PPUSH
31312: LD_VAR 0 7
31316: PPUSH
31317: CALL_OW 1
31321: ST_TO_ADDR
31322: GO 31290
31324: POP
31325: POP
// end ;
31326: GO 31256
31328: POP
31329: POP
// if not result then
31330: LD_VAR 0 2
31334: NOT
31335: IFFALSE 31339
// exit ;
31337: GO 31487
// mech := result [ 1 ] ;
31339: LD_ADDR_VAR 0 5
31343: PUSH
31344: LD_VAR 0 2
31348: PUSH
31349: LD_INT 1
31351: ARRAY
31352: ST_TO_ADDR
// if result > 1 then
31353: LD_VAR 0 2
31357: PUSH
31358: LD_INT 1
31360: GREATER
31361: IFFALSE 31473
// begin for i = 2 to result do
31363: LD_ADDR_VAR 0 3
31367: PUSH
31368: DOUBLE
31369: LD_INT 2
31371: DEC
31372: ST_TO_ADDR
31373: LD_VAR 0 2
31377: PUSH
31378: FOR_TO
31379: IFFALSE 31471
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31381: LD_ADDR_VAR 0 4
31385: PUSH
31386: LD_VAR 0 2
31390: PUSH
31391: LD_VAR 0 3
31395: ARRAY
31396: PPUSH
31397: LD_INT 3
31399: PPUSH
31400: CALL_OW 259
31404: PUSH
31405: LD_VAR 0 2
31409: PUSH
31410: LD_VAR 0 3
31414: ARRAY
31415: PPUSH
31416: CALL_OW 432
31420: MINUS
31421: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31422: LD_VAR 0 4
31426: PUSH
31427: LD_VAR 0 5
31431: PPUSH
31432: LD_INT 3
31434: PPUSH
31435: CALL_OW 259
31439: PUSH
31440: LD_VAR 0 5
31444: PPUSH
31445: CALL_OW 432
31449: MINUS
31450: GREATEREQUAL
31451: IFFALSE 31469
// mech := result [ i ] ;
31453: LD_ADDR_VAR 0 5
31457: PUSH
31458: LD_VAR 0 2
31462: PUSH
31463: LD_VAR 0 3
31467: ARRAY
31468: ST_TO_ADDR
// end ;
31469: GO 31378
31471: POP
31472: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31473: LD_VAR 0 1
31477: PPUSH
31478: LD_VAR 0 5
31482: PPUSH
31483: CALL_OW 135
// end ;
31487: LD_VAR 0 2
31491: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31492: LD_INT 0
31494: PPUSH
31495: PPUSH
31496: PPUSH
31497: PPUSH
31498: PPUSH
31499: PPUSH
31500: PPUSH
31501: PPUSH
31502: PPUSH
31503: PPUSH
31504: PPUSH
31505: PPUSH
31506: PPUSH
// result := [ ] ;
31507: LD_ADDR_VAR 0 7
31511: PUSH
31512: EMPTY
31513: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31514: LD_VAR 0 1
31518: PPUSH
31519: CALL_OW 266
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: IN
31534: NOT
31535: IFFALSE 31539
// exit ;
31537: GO 33173
// if name then
31539: LD_VAR 0 3
31543: IFFALSE 31559
// SetBName ( base_dep , name ) ;
31545: LD_VAR 0 1
31549: PPUSH
31550: LD_VAR 0 3
31554: PPUSH
31555: CALL_OW 500
// base := GetBase ( base_dep ) ;
31559: LD_ADDR_VAR 0 15
31563: PUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: CALL_OW 274
31573: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31574: LD_ADDR_VAR 0 16
31578: PUSH
31579: LD_VAR 0 1
31583: PPUSH
31584: CALL_OW 255
31588: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31589: LD_ADDR_VAR 0 17
31593: PUSH
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL_OW 248
31603: ST_TO_ADDR
// if sources then
31604: LD_VAR 0 5
31608: IFFALSE 31655
// for i = 1 to 3 do
31610: LD_ADDR_VAR 0 8
31614: PUSH
31615: DOUBLE
31616: LD_INT 1
31618: DEC
31619: ST_TO_ADDR
31620: LD_INT 3
31622: PUSH
31623: FOR_TO
31624: IFFALSE 31653
// AddResourceType ( base , i , sources [ i ] ) ;
31626: LD_VAR 0 15
31630: PPUSH
31631: LD_VAR 0 8
31635: PPUSH
31636: LD_VAR 0 5
31640: PUSH
31641: LD_VAR 0 8
31645: ARRAY
31646: PPUSH
31647: CALL_OW 276
31651: GO 31623
31653: POP
31654: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31655: LD_ADDR_VAR 0 18
31659: PUSH
31660: LD_VAR 0 15
31664: PPUSH
31665: LD_VAR 0 2
31669: PPUSH
31670: LD_INT 1
31672: PPUSH
31673: CALL 30916 0 3
31677: ST_TO_ADDR
// InitHc ;
31678: CALL_OW 19
// InitUc ;
31682: CALL_OW 18
// uc_side := side ;
31686: LD_ADDR_OWVAR 20
31690: PUSH
31691: LD_VAR 0 16
31695: ST_TO_ADDR
// uc_nation := nation ;
31696: LD_ADDR_OWVAR 21
31700: PUSH
31701: LD_VAR 0 17
31705: ST_TO_ADDR
// if buildings then
31706: LD_VAR 0 18
31710: IFFALSE 33032
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31712: LD_ADDR_VAR 0 19
31716: PUSH
31717: LD_VAR 0 18
31721: PPUSH
31722: LD_INT 2
31724: PUSH
31725: LD_INT 30
31727: PUSH
31728: LD_INT 29
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 30
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: PPUSH
31750: CALL_OW 72
31754: ST_TO_ADDR
// if tmp then
31755: LD_VAR 0 19
31759: IFFALSE 31807
// for i in tmp do
31761: LD_ADDR_VAR 0 8
31765: PUSH
31766: LD_VAR 0 19
31770: PUSH
31771: FOR_IN
31772: IFFALSE 31805
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31774: LD_VAR 0 8
31778: PPUSH
31779: CALL_OW 250
31783: PPUSH
31784: LD_VAR 0 8
31788: PPUSH
31789: CALL_OW 251
31793: PPUSH
31794: LD_VAR 0 16
31798: PPUSH
31799: CALL_OW 441
31803: GO 31771
31805: POP
31806: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31807: LD_VAR 0 18
31811: PPUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 30
31817: PUSH
31818: LD_INT 32
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 30
31827: PUSH
31828: LD_INT 33
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: LIST
31839: PPUSH
31840: CALL_OW 72
31844: IFFALSE 31932
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31846: LD_ADDR_VAR 0 8
31850: PUSH
31851: LD_VAR 0 18
31855: PPUSH
31856: LD_INT 2
31858: PUSH
31859: LD_INT 30
31861: PUSH
31862: LD_INT 32
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_INT 33
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: PPUSH
31884: CALL_OW 72
31888: PUSH
31889: FOR_IN
31890: IFFALSE 31930
// begin if not GetBWeapon ( i ) then
31892: LD_VAR 0 8
31896: PPUSH
31897: CALL_OW 269
31901: NOT
31902: IFFALSE 31928
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31904: LD_VAR 0 8
31908: PPUSH
31909: LD_VAR 0 8
31913: PPUSH
31914: LD_VAR 0 2
31918: PPUSH
31919: CALL 33178 0 2
31923: PPUSH
31924: CALL_OW 431
// end ;
31928: GO 31889
31930: POP
31931: POP
// end ; for i = 1 to personel do
31932: LD_ADDR_VAR 0 8
31936: PUSH
31937: DOUBLE
31938: LD_INT 1
31940: DEC
31941: ST_TO_ADDR
31942: LD_VAR 0 6
31946: PUSH
31947: FOR_TO
31948: IFFALSE 33012
// begin if i > 4 then
31950: LD_VAR 0 8
31954: PUSH
31955: LD_INT 4
31957: GREATER
31958: IFFALSE 31962
// break ;
31960: GO 33012
// case i of 1 :
31962: LD_VAR 0 8
31966: PUSH
31967: LD_INT 1
31969: DOUBLE
31970: EQUAL
31971: IFTRUE 31975
31973: GO 32055
31975: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31976: LD_ADDR_VAR 0 12
31980: PUSH
31981: LD_VAR 0 18
31985: PPUSH
31986: LD_INT 22
31988: PUSH
31989: LD_VAR 0 16
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 58
32000: PUSH
32001: EMPTY
32002: LIST
32003: PUSH
32004: LD_INT 2
32006: PUSH
32007: LD_INT 30
32009: PUSH
32010: LD_INT 32
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 30
32019: PUSH
32020: LD_INT 4
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 30
32029: PUSH
32030: LD_INT 5
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: LIST
32047: PPUSH
32048: CALL_OW 72
32052: ST_TO_ADDR
32053: GO 32277
32055: LD_INT 2
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32125
32063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32064: LD_ADDR_VAR 0 12
32068: PUSH
32069: LD_VAR 0 18
32073: PPUSH
32074: LD_INT 22
32076: PUSH
32077: LD_VAR 0 16
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: LD_INT 30
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 30
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: LIST
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PPUSH
32118: CALL_OW 72
32122: ST_TO_ADDR
32123: GO 32277
32125: LD_INT 3
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 32195
32133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32134: LD_ADDR_VAR 0 12
32138: PUSH
32139: LD_VAR 0 18
32143: PPUSH
32144: LD_INT 22
32146: PUSH
32147: LD_VAR 0 16
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: LD_INT 30
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 30
32171: PUSH
32172: LD_INT 3
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PPUSH
32188: CALL_OW 72
32192: ST_TO_ADDR
32193: GO 32277
32195: LD_INT 4
32197: DOUBLE
32198: EQUAL
32199: IFTRUE 32203
32201: GO 32276
32203: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32204: LD_ADDR_VAR 0 12
32208: PUSH
32209: LD_VAR 0 18
32213: PPUSH
32214: LD_INT 22
32216: PUSH
32217: LD_VAR 0 16
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 30
32231: PUSH
32232: LD_INT 6
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 30
32241: PUSH
32242: LD_INT 7
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 30
32251: PUSH
32252: LD_INT 8
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PPUSH
32269: CALL_OW 72
32273: ST_TO_ADDR
32274: GO 32277
32276: POP
// if i = 1 then
32277: LD_VAR 0 8
32281: PUSH
32282: LD_INT 1
32284: EQUAL
32285: IFFALSE 32396
// begin tmp := [ ] ;
32287: LD_ADDR_VAR 0 19
32291: PUSH
32292: EMPTY
32293: ST_TO_ADDR
// for j in f do
32294: LD_ADDR_VAR 0 9
32298: PUSH
32299: LD_VAR 0 12
32303: PUSH
32304: FOR_IN
32305: IFFALSE 32378
// if GetBType ( j ) = b_bunker then
32307: LD_VAR 0 9
32311: PPUSH
32312: CALL_OW 266
32316: PUSH
32317: LD_INT 32
32319: EQUAL
32320: IFFALSE 32347
// tmp := Insert ( tmp , 1 , j ) else
32322: LD_ADDR_VAR 0 19
32326: PUSH
32327: LD_VAR 0 19
32331: PPUSH
32332: LD_INT 1
32334: PPUSH
32335: LD_VAR 0 9
32339: PPUSH
32340: CALL_OW 2
32344: ST_TO_ADDR
32345: GO 32376
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32347: LD_ADDR_VAR 0 19
32351: PUSH
32352: LD_VAR 0 19
32356: PPUSH
32357: LD_VAR 0 19
32361: PUSH
32362: LD_INT 1
32364: PLUS
32365: PPUSH
32366: LD_VAR 0 9
32370: PPUSH
32371: CALL_OW 2
32375: ST_TO_ADDR
32376: GO 32304
32378: POP
32379: POP
// if tmp then
32380: LD_VAR 0 19
32384: IFFALSE 32396
// f := tmp ;
32386: LD_ADDR_VAR 0 12
32390: PUSH
32391: LD_VAR 0 19
32395: ST_TO_ADDR
// end ; x := personel [ i ] ;
32396: LD_ADDR_VAR 0 13
32400: PUSH
32401: LD_VAR 0 6
32405: PUSH
32406: LD_VAR 0 8
32410: ARRAY
32411: ST_TO_ADDR
// if x = - 1 then
32412: LD_VAR 0 13
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: EQUAL
32421: IFFALSE 32630
// begin for j in f do
32423: LD_ADDR_VAR 0 9
32427: PUSH
32428: LD_VAR 0 12
32432: PUSH
32433: FOR_IN
32434: IFFALSE 32626
// repeat InitHc ;
32436: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32440: LD_VAR 0 9
32444: PPUSH
32445: CALL_OW 266
32449: PUSH
32450: LD_INT 5
32452: EQUAL
32453: IFFALSE 32523
// begin if UnitsInside ( j ) < 3 then
32455: LD_VAR 0 9
32459: PPUSH
32460: CALL_OW 313
32464: PUSH
32465: LD_INT 3
32467: LESS
32468: IFFALSE 32504
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32470: LD_INT 0
32472: PPUSH
32473: LD_INT 5
32475: PUSH
32476: LD_INT 8
32478: PUSH
32479: LD_INT 9
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: PUSH
32487: LD_VAR 0 17
32491: ARRAY
32492: PPUSH
32493: LD_VAR 0 4
32497: PPUSH
32498: CALL_OW 380
32502: GO 32521
// PrepareHuman ( false , i , skill ) ;
32504: LD_INT 0
32506: PPUSH
32507: LD_VAR 0 8
32511: PPUSH
32512: LD_VAR 0 4
32516: PPUSH
32517: CALL_OW 380
// end else
32521: GO 32540
// PrepareHuman ( false , i , skill ) ;
32523: LD_INT 0
32525: PPUSH
32526: LD_VAR 0 8
32530: PPUSH
32531: LD_VAR 0 4
32535: PPUSH
32536: CALL_OW 380
// un := CreateHuman ;
32540: LD_ADDR_VAR 0 14
32544: PUSH
32545: CALL_OW 44
32549: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32550: LD_ADDR_VAR 0 7
32554: PUSH
32555: LD_VAR 0 7
32559: PPUSH
32560: LD_INT 1
32562: PPUSH
32563: LD_VAR 0 14
32567: PPUSH
32568: CALL_OW 2
32572: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32573: LD_VAR 0 14
32577: PPUSH
32578: LD_VAR 0 9
32582: PPUSH
32583: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32587: LD_VAR 0 9
32591: PPUSH
32592: CALL_OW 313
32596: PUSH
32597: LD_INT 6
32599: EQUAL
32600: PUSH
32601: LD_VAR 0 9
32605: PPUSH
32606: CALL_OW 266
32610: PUSH
32611: LD_INT 32
32613: PUSH
32614: LD_INT 31
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: IN
32621: OR
32622: IFFALSE 32436
32624: GO 32433
32626: POP
32627: POP
// end else
32628: GO 33010
// for j = 1 to x do
32630: LD_ADDR_VAR 0 9
32634: PUSH
32635: DOUBLE
32636: LD_INT 1
32638: DEC
32639: ST_TO_ADDR
32640: LD_VAR 0 13
32644: PUSH
32645: FOR_TO
32646: IFFALSE 33008
// begin InitHc ;
32648: CALL_OW 19
// if not f then
32652: LD_VAR 0 12
32656: NOT
32657: IFFALSE 32746
// begin PrepareHuman ( false , i , skill ) ;
32659: LD_INT 0
32661: PPUSH
32662: LD_VAR 0 8
32666: PPUSH
32667: LD_VAR 0 4
32671: PPUSH
32672: CALL_OW 380
// un := CreateHuman ;
32676: LD_ADDR_VAR 0 14
32680: PUSH
32681: CALL_OW 44
32685: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32686: LD_ADDR_VAR 0 7
32690: PUSH
32691: LD_VAR 0 7
32695: PPUSH
32696: LD_INT 1
32698: PPUSH
32699: LD_VAR 0 14
32703: PPUSH
32704: CALL_OW 2
32708: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32709: LD_VAR 0 14
32713: PPUSH
32714: LD_VAR 0 1
32718: PPUSH
32719: CALL_OW 250
32723: PPUSH
32724: LD_VAR 0 1
32728: PPUSH
32729: CALL_OW 251
32733: PPUSH
32734: LD_INT 10
32736: PPUSH
32737: LD_INT 0
32739: PPUSH
32740: CALL_OW 50
// continue ;
32744: GO 32645
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32746: LD_VAR 0 12
32750: PUSH
32751: LD_INT 1
32753: ARRAY
32754: PPUSH
32755: CALL_OW 313
32759: PUSH
32760: LD_VAR 0 12
32764: PUSH
32765: LD_INT 1
32767: ARRAY
32768: PPUSH
32769: CALL_OW 266
32773: PUSH
32774: LD_INT 32
32776: PUSH
32777: LD_INT 31
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: IN
32784: AND
32785: PUSH
32786: LD_VAR 0 12
32790: PUSH
32791: LD_INT 1
32793: ARRAY
32794: PPUSH
32795: CALL_OW 313
32799: PUSH
32800: LD_INT 6
32802: EQUAL
32803: OR
32804: IFFALSE 32824
// f := Delete ( f , 1 ) ;
32806: LD_ADDR_VAR 0 12
32810: PUSH
32811: LD_VAR 0 12
32815: PPUSH
32816: LD_INT 1
32818: PPUSH
32819: CALL_OW 3
32823: ST_TO_ADDR
// if not f then
32824: LD_VAR 0 12
32828: NOT
32829: IFFALSE 32847
// begin x := x + 2 ;
32831: LD_ADDR_VAR 0 13
32835: PUSH
32836: LD_VAR 0 13
32840: PUSH
32841: LD_INT 2
32843: PLUS
32844: ST_TO_ADDR
// continue ;
32845: GO 32645
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32847: LD_VAR 0 12
32851: PUSH
32852: LD_INT 1
32854: ARRAY
32855: PPUSH
32856: CALL_OW 266
32860: PUSH
32861: LD_INT 5
32863: EQUAL
32864: IFFALSE 32938
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32866: LD_VAR 0 12
32870: PUSH
32871: LD_INT 1
32873: ARRAY
32874: PPUSH
32875: CALL_OW 313
32879: PUSH
32880: LD_INT 3
32882: LESS
32883: IFFALSE 32919
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32885: LD_INT 0
32887: PPUSH
32888: LD_INT 5
32890: PUSH
32891: LD_INT 8
32893: PUSH
32894: LD_INT 9
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: PUSH
32902: LD_VAR 0 17
32906: ARRAY
32907: PPUSH
32908: LD_VAR 0 4
32912: PPUSH
32913: CALL_OW 380
32917: GO 32936
// PrepareHuman ( false , i , skill ) ;
32919: LD_INT 0
32921: PPUSH
32922: LD_VAR 0 8
32926: PPUSH
32927: LD_VAR 0 4
32931: PPUSH
32932: CALL_OW 380
// end else
32936: GO 32955
// PrepareHuman ( false , i , skill ) ;
32938: LD_INT 0
32940: PPUSH
32941: LD_VAR 0 8
32945: PPUSH
32946: LD_VAR 0 4
32950: PPUSH
32951: CALL_OW 380
// un := CreateHuman ;
32955: LD_ADDR_VAR 0 14
32959: PUSH
32960: CALL_OW 44
32964: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32965: LD_ADDR_VAR 0 7
32969: PUSH
32970: LD_VAR 0 7
32974: PPUSH
32975: LD_INT 1
32977: PPUSH
32978: LD_VAR 0 14
32982: PPUSH
32983: CALL_OW 2
32987: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32988: LD_VAR 0 14
32992: PPUSH
32993: LD_VAR 0 12
32997: PUSH
32998: LD_INT 1
33000: ARRAY
33001: PPUSH
33002: CALL_OW 52
// end ;
33006: GO 32645
33008: POP
33009: POP
// end ;
33010: GO 31947
33012: POP
33013: POP
// result := result ^ buildings ;
33014: LD_ADDR_VAR 0 7
33018: PUSH
33019: LD_VAR 0 7
33023: PUSH
33024: LD_VAR 0 18
33028: ADD
33029: ST_TO_ADDR
// end else
33030: GO 33173
// begin for i = 1 to personel do
33032: LD_ADDR_VAR 0 8
33036: PUSH
33037: DOUBLE
33038: LD_INT 1
33040: DEC
33041: ST_TO_ADDR
33042: LD_VAR 0 6
33046: PUSH
33047: FOR_TO
33048: IFFALSE 33171
// begin if i > 4 then
33050: LD_VAR 0 8
33054: PUSH
33055: LD_INT 4
33057: GREATER
33058: IFFALSE 33062
// break ;
33060: GO 33171
// x := personel [ i ] ;
33062: LD_ADDR_VAR 0 13
33066: PUSH
33067: LD_VAR 0 6
33071: PUSH
33072: LD_VAR 0 8
33076: ARRAY
33077: ST_TO_ADDR
// if x = - 1 then
33078: LD_VAR 0 13
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: EQUAL
33087: IFFALSE 33091
// continue ;
33089: GO 33047
// PrepareHuman ( false , i , skill ) ;
33091: LD_INT 0
33093: PPUSH
33094: LD_VAR 0 8
33098: PPUSH
33099: LD_VAR 0 4
33103: PPUSH
33104: CALL_OW 380
// un := CreateHuman ;
33108: LD_ADDR_VAR 0 14
33112: PUSH
33113: CALL_OW 44
33117: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33118: LD_VAR 0 14
33122: PPUSH
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 250
33132: PPUSH
33133: LD_VAR 0 1
33137: PPUSH
33138: CALL_OW 251
33142: PPUSH
33143: LD_INT 10
33145: PPUSH
33146: LD_INT 0
33148: PPUSH
33149: CALL_OW 50
// result := result ^ un ;
33153: LD_ADDR_VAR 0 7
33157: PUSH
33158: LD_VAR 0 7
33162: PUSH
33163: LD_VAR 0 14
33167: ADD
33168: ST_TO_ADDR
// end ;
33169: GO 33047
33171: POP
33172: POP
// end ; end ;
33173: LD_VAR 0 7
33177: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33178: LD_INT 0
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
33184: PPUSH
33185: PPUSH
33186: PPUSH
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
33191: PPUSH
33192: PPUSH
33193: PPUSH
33194: PPUSH
33195: PPUSH
// result := false ;
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_INT 0
33203: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33204: LD_VAR 0 1
33208: NOT
33209: PUSH
33210: LD_VAR 0 1
33214: PPUSH
33215: CALL_OW 266
33219: PUSH
33220: LD_INT 32
33222: PUSH
33223: LD_INT 33
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: IN
33230: NOT
33231: OR
33232: IFFALSE 33236
// exit ;
33234: GO 34345
// nat := GetNation ( tower ) ;
33236: LD_ADDR_VAR 0 12
33240: PUSH
33241: LD_VAR 0 1
33245: PPUSH
33246: CALL_OW 248
33250: ST_TO_ADDR
// side := GetSide ( tower ) ;
33251: LD_ADDR_VAR 0 16
33255: PUSH
33256: LD_VAR 0 1
33260: PPUSH
33261: CALL_OW 255
33265: ST_TO_ADDR
// x := GetX ( tower ) ;
33266: LD_ADDR_VAR 0 10
33270: PUSH
33271: LD_VAR 0 1
33275: PPUSH
33276: CALL_OW 250
33280: ST_TO_ADDR
// y := GetY ( tower ) ;
33281: LD_ADDR_VAR 0 11
33285: PUSH
33286: LD_VAR 0 1
33290: PPUSH
33291: CALL_OW 251
33295: ST_TO_ADDR
// if not x or not y then
33296: LD_VAR 0 10
33300: NOT
33301: PUSH
33302: LD_VAR 0 11
33306: NOT
33307: OR
33308: IFFALSE 33312
// exit ;
33310: GO 34345
// weapon := 0 ;
33312: LD_ADDR_VAR 0 18
33316: PUSH
33317: LD_INT 0
33319: ST_TO_ADDR
// fac_list := [ ] ;
33320: LD_ADDR_VAR 0 17
33324: PUSH
33325: EMPTY
33326: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33327: LD_ADDR_VAR 0 6
33331: PUSH
33332: LD_VAR 0 1
33336: PPUSH
33337: CALL_OW 274
33341: PPUSH
33342: LD_VAR 0 2
33346: PPUSH
33347: LD_INT 0
33349: PPUSH
33350: CALL 30916 0 3
33354: PPUSH
33355: LD_INT 30
33357: PUSH
33358: LD_INT 3
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PPUSH
33365: CALL_OW 72
33369: ST_TO_ADDR
// if not factories then
33370: LD_VAR 0 6
33374: NOT
33375: IFFALSE 33379
// exit ;
33377: GO 34345
// for i in factories do
33379: LD_ADDR_VAR 0 8
33383: PUSH
33384: LD_VAR 0 6
33388: PUSH
33389: FOR_IN
33390: IFFALSE 33415
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33392: LD_ADDR_VAR 0 17
33396: PUSH
33397: LD_VAR 0 17
33401: PUSH
33402: LD_VAR 0 8
33406: PPUSH
33407: CALL_OW 478
33411: UNION
33412: ST_TO_ADDR
33413: GO 33389
33415: POP
33416: POP
// if not fac_list then
33417: LD_VAR 0 17
33421: NOT
33422: IFFALSE 33426
// exit ;
33424: GO 34345
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33426: LD_ADDR_VAR 0 5
33430: PUSH
33431: LD_INT 4
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: LD_INT 9
33439: PUSH
33440: LD_INT 10
33442: PUSH
33443: LD_INT 6
33445: PUSH
33446: LD_INT 7
33448: PUSH
33449: LD_INT 11
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 27
33463: PUSH
33464: LD_INT 28
33466: PUSH
33467: LD_INT 26
33469: PUSH
33470: LD_INT 30
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 43
33481: PUSH
33482: LD_INT 44
33484: PUSH
33485: LD_INT 46
33487: PUSH
33488: LD_INT 45
33490: PUSH
33491: LD_INT 47
33493: PUSH
33494: LD_INT 49
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: PUSH
33510: LD_VAR 0 12
33514: ARRAY
33515: ST_TO_ADDR
// list := list isect fac_list ;
33516: LD_ADDR_VAR 0 5
33520: PUSH
33521: LD_VAR 0 5
33525: PUSH
33526: LD_VAR 0 17
33530: ISECT
33531: ST_TO_ADDR
// if not list then
33532: LD_VAR 0 5
33536: NOT
33537: IFFALSE 33541
// exit ;
33539: GO 34345
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33541: LD_VAR 0 12
33545: PUSH
33546: LD_INT 3
33548: EQUAL
33549: PUSH
33550: LD_INT 49
33552: PUSH
33553: LD_VAR 0 5
33557: IN
33558: AND
33559: PUSH
33560: LD_INT 31
33562: PPUSH
33563: LD_VAR 0 16
33567: PPUSH
33568: CALL_OW 321
33572: PUSH
33573: LD_INT 2
33575: EQUAL
33576: AND
33577: IFFALSE 33637
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33579: LD_INT 22
33581: PUSH
33582: LD_VAR 0 16
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 35
33593: PUSH
33594: LD_INT 49
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 91
33603: PUSH
33604: LD_VAR 0 1
33608: PUSH
33609: LD_INT 10
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: PPUSH
33622: CALL_OW 69
33626: NOT
33627: IFFALSE 33637
// weapon := ru_time_lapser ;
33629: LD_ADDR_VAR 0 18
33633: PUSH
33634: LD_INT 49
33636: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33637: LD_VAR 0 12
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: IN
33652: PUSH
33653: LD_INT 11
33655: PUSH
33656: LD_VAR 0 5
33660: IN
33661: PUSH
33662: LD_INT 30
33664: PUSH
33665: LD_VAR 0 5
33669: IN
33670: OR
33671: AND
33672: PUSH
33673: LD_INT 6
33675: PPUSH
33676: LD_VAR 0 16
33680: PPUSH
33681: CALL_OW 321
33685: PUSH
33686: LD_INT 2
33688: EQUAL
33689: AND
33690: IFFALSE 33855
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33692: LD_INT 22
33694: PUSH
33695: LD_VAR 0 16
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 35
33709: PUSH
33710: LD_INT 11
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 35
33719: PUSH
33720: LD_INT 30
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 91
33734: PUSH
33735: LD_VAR 0 1
33739: PUSH
33740: LD_INT 18
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: PPUSH
33753: CALL_OW 69
33757: NOT
33758: PUSH
33759: LD_INT 22
33761: PUSH
33762: LD_VAR 0 16
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: LD_INT 30
33776: PUSH
33777: LD_INT 32
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 30
33786: PUSH
33787: LD_INT 33
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 91
33801: PUSH
33802: LD_VAR 0 1
33806: PUSH
33807: LD_INT 12
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: PPUSH
33823: CALL_OW 69
33827: PUSH
33828: LD_INT 2
33830: GREATER
33831: AND
33832: IFFALSE 33855
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33834: LD_ADDR_VAR 0 18
33838: PUSH
33839: LD_INT 11
33841: PUSH
33842: LD_INT 30
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_VAR 0 12
33853: ARRAY
33854: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33855: LD_VAR 0 18
33859: NOT
33860: PUSH
33861: LD_INT 40
33863: PPUSH
33864: LD_VAR 0 16
33868: PPUSH
33869: CALL_OW 321
33873: PUSH
33874: LD_INT 2
33876: EQUAL
33877: AND
33878: PUSH
33879: LD_INT 7
33881: PUSH
33882: LD_VAR 0 5
33886: IN
33887: PUSH
33888: LD_INT 28
33890: PUSH
33891: LD_VAR 0 5
33895: IN
33896: OR
33897: PUSH
33898: LD_INT 45
33900: PUSH
33901: LD_VAR 0 5
33905: IN
33906: OR
33907: AND
33908: IFFALSE 34162
// begin hex := GetHexInfo ( x , y ) ;
33910: LD_ADDR_VAR 0 4
33914: PUSH
33915: LD_VAR 0 10
33919: PPUSH
33920: LD_VAR 0 11
33924: PPUSH
33925: CALL_OW 546
33929: ST_TO_ADDR
// if hex [ 1 ] then
33930: LD_VAR 0 4
33934: PUSH
33935: LD_INT 1
33937: ARRAY
33938: IFFALSE 33942
// exit ;
33940: GO 34345
// height := hex [ 2 ] ;
33942: LD_ADDR_VAR 0 15
33946: PUSH
33947: LD_VAR 0 4
33951: PUSH
33952: LD_INT 2
33954: ARRAY
33955: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33956: LD_ADDR_VAR 0 14
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: LD_INT 5
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: ST_TO_ADDR
// for i in tmp do
33979: LD_ADDR_VAR 0 8
33983: PUSH
33984: LD_VAR 0 14
33988: PUSH
33989: FOR_IN
33990: IFFALSE 34160
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33992: LD_ADDR_VAR 0 9
33996: PUSH
33997: LD_VAR 0 10
34001: PPUSH
34002: LD_VAR 0 8
34006: PPUSH
34007: LD_INT 5
34009: PPUSH
34010: CALL_OW 272
34014: PUSH
34015: LD_VAR 0 11
34019: PPUSH
34020: LD_VAR 0 8
34024: PPUSH
34025: LD_INT 5
34027: PPUSH
34028: CALL_OW 273
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34037: LD_VAR 0 9
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PPUSH
34046: LD_VAR 0 9
34050: PUSH
34051: LD_INT 2
34053: ARRAY
34054: PPUSH
34055: CALL_OW 488
34059: IFFALSE 34158
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34061: LD_ADDR_VAR 0 4
34065: PUSH
34066: LD_VAR 0 9
34070: PUSH
34071: LD_INT 1
34073: ARRAY
34074: PPUSH
34075: LD_VAR 0 9
34079: PUSH
34080: LD_INT 2
34082: ARRAY
34083: PPUSH
34084: CALL_OW 546
34088: ST_TO_ADDR
// if hex [ 1 ] then
34089: LD_VAR 0 4
34093: PUSH
34094: LD_INT 1
34096: ARRAY
34097: IFFALSE 34101
// continue ;
34099: GO 33989
// h := hex [ 2 ] ;
34101: LD_ADDR_VAR 0 13
34105: PUSH
34106: LD_VAR 0 4
34110: PUSH
34111: LD_INT 2
34113: ARRAY
34114: ST_TO_ADDR
// if h + 7 < height then
34115: LD_VAR 0 13
34119: PUSH
34120: LD_INT 7
34122: PLUS
34123: PUSH
34124: LD_VAR 0 15
34128: LESS
34129: IFFALSE 34158
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34131: LD_ADDR_VAR 0 18
34135: PUSH
34136: LD_INT 7
34138: PUSH
34139: LD_INT 28
34141: PUSH
34142: LD_INT 45
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: PUSH
34150: LD_VAR 0 12
34154: ARRAY
34155: ST_TO_ADDR
// break ;
34156: GO 34160
// end ; end ; end ;
34158: GO 33989
34160: POP
34161: POP
// end ; if not weapon then
34162: LD_VAR 0 18
34166: NOT
34167: IFFALSE 34227
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34169: LD_ADDR_VAR 0 5
34173: PUSH
34174: LD_VAR 0 5
34178: PUSH
34179: LD_INT 11
34181: PUSH
34182: LD_INT 30
34184: PUSH
34185: LD_INT 49
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: DIFF
34193: ST_TO_ADDR
// if not list then
34194: LD_VAR 0 5
34198: NOT
34199: IFFALSE 34203
// exit ;
34201: GO 34345
// weapon := list [ rand ( 1 , list ) ] ;
34203: LD_ADDR_VAR 0 18
34207: PUSH
34208: LD_VAR 0 5
34212: PUSH
34213: LD_INT 1
34215: PPUSH
34216: LD_VAR 0 5
34220: PPUSH
34221: CALL_OW 12
34225: ARRAY
34226: ST_TO_ADDR
// end ; if weapon then
34227: LD_VAR 0 18
34231: IFFALSE 34345
// begin tmp := CostOfWeapon ( weapon ) ;
34233: LD_ADDR_VAR 0 14
34237: PUSH
34238: LD_VAR 0 18
34242: PPUSH
34243: CALL_OW 451
34247: ST_TO_ADDR
// j := GetBase ( tower ) ;
34248: LD_ADDR_VAR 0 9
34252: PUSH
34253: LD_VAR 0 1
34257: PPUSH
34258: CALL_OW 274
34262: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34263: LD_VAR 0 9
34267: PPUSH
34268: LD_INT 1
34270: PPUSH
34271: CALL_OW 275
34275: PUSH
34276: LD_VAR 0 14
34280: PUSH
34281: LD_INT 1
34283: ARRAY
34284: GREATEREQUAL
34285: PUSH
34286: LD_VAR 0 9
34290: PPUSH
34291: LD_INT 2
34293: PPUSH
34294: CALL_OW 275
34298: PUSH
34299: LD_VAR 0 14
34303: PUSH
34304: LD_INT 2
34306: ARRAY
34307: GREATEREQUAL
34308: AND
34309: PUSH
34310: LD_VAR 0 9
34314: PPUSH
34315: LD_INT 3
34317: PPUSH
34318: CALL_OW 275
34322: PUSH
34323: LD_VAR 0 14
34327: PUSH
34328: LD_INT 3
34330: ARRAY
34331: GREATEREQUAL
34332: AND
34333: IFFALSE 34345
// result := weapon ;
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_VAR 0 18
34344: ST_TO_ADDR
// end ; end ;
34345: LD_VAR 0 3
34349: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34350: LD_INT 0
34352: PPUSH
34353: PPUSH
// result := true ;
34354: LD_ADDR_VAR 0 3
34358: PUSH
34359: LD_INT 1
34361: ST_TO_ADDR
// if array1 = array2 then
34362: LD_VAR 0 1
34366: PUSH
34367: LD_VAR 0 2
34371: EQUAL
34372: IFFALSE 34432
// begin for i = 1 to array1 do
34374: LD_ADDR_VAR 0 4
34378: PUSH
34379: DOUBLE
34380: LD_INT 1
34382: DEC
34383: ST_TO_ADDR
34384: LD_VAR 0 1
34388: PUSH
34389: FOR_TO
34390: IFFALSE 34428
// if array1 [ i ] <> array2 [ i ] then
34392: LD_VAR 0 1
34396: PUSH
34397: LD_VAR 0 4
34401: ARRAY
34402: PUSH
34403: LD_VAR 0 2
34407: PUSH
34408: LD_VAR 0 4
34412: ARRAY
34413: NONEQUAL
34414: IFFALSE 34426
// begin result := false ;
34416: LD_ADDR_VAR 0 3
34420: PUSH
34421: LD_INT 0
34423: ST_TO_ADDR
// break ;
34424: GO 34428
// end ;
34426: GO 34389
34428: POP
34429: POP
// end else
34430: GO 34440
// result := false ;
34432: LD_ADDR_VAR 0 3
34436: PUSH
34437: LD_INT 0
34439: ST_TO_ADDR
// end ;
34440: LD_VAR 0 3
34444: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34445: LD_INT 0
34447: PPUSH
34448: PPUSH
// if not array1 or not array2 then
34449: LD_VAR 0 1
34453: NOT
34454: PUSH
34455: LD_VAR 0 2
34459: NOT
34460: OR
34461: IFFALSE 34465
// exit ;
34463: GO 34529
// result := true ;
34465: LD_ADDR_VAR 0 3
34469: PUSH
34470: LD_INT 1
34472: ST_TO_ADDR
// for i = 1 to array1 do
34473: LD_ADDR_VAR 0 4
34477: PUSH
34478: DOUBLE
34479: LD_INT 1
34481: DEC
34482: ST_TO_ADDR
34483: LD_VAR 0 1
34487: PUSH
34488: FOR_TO
34489: IFFALSE 34527
// if array1 [ i ] <> array2 [ i ] then
34491: LD_VAR 0 1
34495: PUSH
34496: LD_VAR 0 4
34500: ARRAY
34501: PUSH
34502: LD_VAR 0 2
34506: PUSH
34507: LD_VAR 0 4
34511: ARRAY
34512: NONEQUAL
34513: IFFALSE 34525
// begin result := false ;
34515: LD_ADDR_VAR 0 3
34519: PUSH
34520: LD_INT 0
34522: ST_TO_ADDR
// break ;
34523: GO 34527
// end ;
34525: GO 34488
34527: POP
34528: POP
// end ;
34529: LD_VAR 0 3
34533: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34534: LD_INT 0
34536: PPUSH
34537: PPUSH
34538: PPUSH
// pom := GetBase ( fac ) ;
34539: LD_ADDR_VAR 0 5
34543: PUSH
34544: LD_VAR 0 1
34548: PPUSH
34549: CALL_OW 274
34553: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34554: LD_ADDR_VAR 0 4
34558: PUSH
34559: LD_VAR 0 2
34563: PUSH
34564: LD_INT 1
34566: ARRAY
34567: PPUSH
34568: LD_VAR 0 2
34572: PUSH
34573: LD_INT 2
34575: ARRAY
34576: PPUSH
34577: LD_VAR 0 2
34581: PUSH
34582: LD_INT 3
34584: ARRAY
34585: PPUSH
34586: LD_VAR 0 2
34590: PUSH
34591: LD_INT 4
34593: ARRAY
34594: PPUSH
34595: CALL_OW 449
34599: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34600: LD_ADDR_VAR 0 3
34604: PUSH
34605: LD_VAR 0 5
34609: PPUSH
34610: LD_INT 1
34612: PPUSH
34613: CALL_OW 275
34617: PUSH
34618: LD_VAR 0 4
34622: PUSH
34623: LD_INT 1
34625: ARRAY
34626: GREATEREQUAL
34627: PUSH
34628: LD_VAR 0 5
34632: PPUSH
34633: LD_INT 2
34635: PPUSH
34636: CALL_OW 275
34640: PUSH
34641: LD_VAR 0 4
34645: PUSH
34646: LD_INT 2
34648: ARRAY
34649: GREATEREQUAL
34650: AND
34651: PUSH
34652: LD_VAR 0 5
34656: PPUSH
34657: LD_INT 3
34659: PPUSH
34660: CALL_OW 275
34664: PUSH
34665: LD_VAR 0 4
34669: PUSH
34670: LD_INT 3
34672: ARRAY
34673: GREATEREQUAL
34674: AND
34675: ST_TO_ADDR
// end ;
34676: LD_VAR 0 3
34680: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34681: LD_INT 0
34683: PPUSH
34684: PPUSH
34685: PPUSH
34686: PPUSH
// pom := GetBase ( building ) ;
34687: LD_ADDR_VAR 0 3
34691: PUSH
34692: LD_VAR 0 1
34696: PPUSH
34697: CALL_OW 274
34701: ST_TO_ADDR
// if not pom then
34702: LD_VAR 0 3
34706: NOT
34707: IFFALSE 34711
// exit ;
34709: GO 34881
// btype := GetBType ( building ) ;
34711: LD_ADDR_VAR 0 5
34715: PUSH
34716: LD_VAR 0 1
34720: PPUSH
34721: CALL_OW 266
34725: ST_TO_ADDR
// if btype = b_armoury then
34726: LD_VAR 0 5
34730: PUSH
34731: LD_INT 4
34733: EQUAL
34734: IFFALSE 34744
// btype := b_barracks ;
34736: LD_ADDR_VAR 0 5
34740: PUSH
34741: LD_INT 5
34743: ST_TO_ADDR
// if btype = b_depot then
34744: LD_VAR 0 5
34748: PUSH
34749: LD_INT 0
34751: EQUAL
34752: IFFALSE 34762
// btype := b_warehouse ;
34754: LD_ADDR_VAR 0 5
34758: PUSH
34759: LD_INT 1
34761: ST_TO_ADDR
// if btype = b_workshop then
34762: LD_VAR 0 5
34766: PUSH
34767: LD_INT 2
34769: EQUAL
34770: IFFALSE 34780
// btype := b_factory ;
34772: LD_ADDR_VAR 0 5
34776: PUSH
34777: LD_INT 3
34779: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34780: LD_ADDR_VAR 0 4
34784: PUSH
34785: LD_VAR 0 5
34789: PPUSH
34790: LD_VAR 0 1
34794: PPUSH
34795: CALL_OW 248
34799: PPUSH
34800: CALL_OW 450
34804: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34805: LD_ADDR_VAR 0 2
34809: PUSH
34810: LD_VAR 0 3
34814: PPUSH
34815: LD_INT 1
34817: PPUSH
34818: CALL_OW 275
34822: PUSH
34823: LD_VAR 0 4
34827: PUSH
34828: LD_INT 1
34830: ARRAY
34831: GREATEREQUAL
34832: PUSH
34833: LD_VAR 0 3
34837: PPUSH
34838: LD_INT 2
34840: PPUSH
34841: CALL_OW 275
34845: PUSH
34846: LD_VAR 0 4
34850: PUSH
34851: LD_INT 2
34853: ARRAY
34854: GREATEREQUAL
34855: AND
34856: PUSH
34857: LD_VAR 0 3
34861: PPUSH
34862: LD_INT 3
34864: PPUSH
34865: CALL_OW 275
34869: PUSH
34870: LD_VAR 0 4
34874: PUSH
34875: LD_INT 3
34877: ARRAY
34878: GREATEREQUAL
34879: AND
34880: ST_TO_ADDR
// end ;
34881: LD_VAR 0 2
34885: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34886: LD_INT 0
34888: PPUSH
34889: PPUSH
34890: PPUSH
// pom := GetBase ( building ) ;
34891: LD_ADDR_VAR 0 4
34895: PUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 274
34905: ST_TO_ADDR
// if not pom then
34906: LD_VAR 0 4
34910: NOT
34911: IFFALSE 34915
// exit ;
34913: GO 35016
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34915: LD_ADDR_VAR 0 5
34919: PUSH
34920: LD_VAR 0 2
34924: PPUSH
34925: LD_VAR 0 1
34929: PPUSH
34930: CALL_OW 248
34934: PPUSH
34935: CALL_OW 450
34939: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34940: LD_ADDR_VAR 0 3
34944: PUSH
34945: LD_VAR 0 4
34949: PPUSH
34950: LD_INT 1
34952: PPUSH
34953: CALL_OW 275
34957: PUSH
34958: LD_VAR 0 5
34962: PUSH
34963: LD_INT 1
34965: ARRAY
34966: GREATEREQUAL
34967: PUSH
34968: LD_VAR 0 4
34972: PPUSH
34973: LD_INT 2
34975: PPUSH
34976: CALL_OW 275
34980: PUSH
34981: LD_VAR 0 5
34985: PUSH
34986: LD_INT 2
34988: ARRAY
34989: GREATEREQUAL
34990: AND
34991: PUSH
34992: LD_VAR 0 4
34996: PPUSH
34997: LD_INT 3
34999: PPUSH
35000: CALL_OW 275
35004: PUSH
35005: LD_VAR 0 5
35009: PUSH
35010: LD_INT 3
35012: ARRAY
35013: GREATEREQUAL
35014: AND
35015: ST_TO_ADDR
// end ;
35016: LD_VAR 0 3
35020: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35021: LD_INT 0
35023: PPUSH
35024: PPUSH
35025: PPUSH
35026: PPUSH
35027: PPUSH
35028: PPUSH
35029: PPUSH
35030: PPUSH
35031: PPUSH
35032: PPUSH
35033: PPUSH
// result := false ;
35034: LD_ADDR_VAR 0 8
35038: PUSH
35039: LD_INT 0
35041: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35042: LD_VAR 0 5
35046: NOT
35047: PUSH
35048: LD_VAR 0 1
35052: NOT
35053: OR
35054: PUSH
35055: LD_VAR 0 2
35059: NOT
35060: OR
35061: PUSH
35062: LD_VAR 0 3
35066: NOT
35067: OR
35068: IFFALSE 35072
// exit ;
35070: GO 35886
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35072: LD_ADDR_VAR 0 14
35076: PUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: LD_VAR 0 2
35086: PPUSH
35087: LD_VAR 0 3
35091: PPUSH
35092: LD_VAR 0 4
35096: PPUSH
35097: LD_VAR 0 5
35101: PUSH
35102: LD_INT 1
35104: ARRAY
35105: PPUSH
35106: CALL_OW 248
35110: PPUSH
35111: LD_INT 0
35113: PPUSH
35114: CALL 37139 0 6
35118: ST_TO_ADDR
// if not hexes then
35119: LD_VAR 0 14
35123: NOT
35124: IFFALSE 35128
// exit ;
35126: GO 35886
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35128: LD_ADDR_VAR 0 17
35132: PUSH
35133: LD_VAR 0 5
35137: PPUSH
35138: LD_INT 22
35140: PUSH
35141: LD_VAR 0 13
35145: PPUSH
35146: CALL_OW 255
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: LD_INT 30
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 30
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PPUSH
35187: CALL_OW 72
35191: ST_TO_ADDR
// for i = 1 to hexes do
35192: LD_ADDR_VAR 0 9
35196: PUSH
35197: DOUBLE
35198: LD_INT 1
35200: DEC
35201: ST_TO_ADDR
35202: LD_VAR 0 14
35206: PUSH
35207: FOR_TO
35208: IFFALSE 35884
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35210: LD_ADDR_VAR 0 13
35214: PUSH
35215: LD_VAR 0 14
35219: PUSH
35220: LD_VAR 0 9
35224: ARRAY
35225: PUSH
35226: LD_INT 1
35228: ARRAY
35229: PPUSH
35230: LD_VAR 0 14
35234: PUSH
35235: LD_VAR 0 9
35239: ARRAY
35240: PUSH
35241: LD_INT 2
35243: ARRAY
35244: PPUSH
35245: CALL_OW 428
35249: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35250: LD_VAR 0 14
35254: PUSH
35255: LD_VAR 0 9
35259: ARRAY
35260: PUSH
35261: LD_INT 1
35263: ARRAY
35264: PPUSH
35265: LD_VAR 0 14
35269: PUSH
35270: LD_VAR 0 9
35274: ARRAY
35275: PUSH
35276: LD_INT 2
35278: ARRAY
35279: PPUSH
35280: CALL_OW 351
35284: PUSH
35285: LD_VAR 0 14
35289: PUSH
35290: LD_VAR 0 9
35294: ARRAY
35295: PUSH
35296: LD_INT 1
35298: ARRAY
35299: PPUSH
35300: LD_VAR 0 14
35304: PUSH
35305: LD_VAR 0 9
35309: ARRAY
35310: PUSH
35311: LD_INT 2
35313: ARRAY
35314: PPUSH
35315: CALL_OW 488
35319: NOT
35320: OR
35321: PUSH
35322: LD_VAR 0 13
35326: PPUSH
35327: CALL_OW 247
35331: PUSH
35332: LD_INT 3
35334: EQUAL
35335: OR
35336: IFFALSE 35342
// exit ;
35338: POP
35339: POP
35340: GO 35886
// if not tmp then
35342: LD_VAR 0 13
35346: NOT
35347: IFFALSE 35351
// continue ;
35349: GO 35207
// result := true ;
35351: LD_ADDR_VAR 0 8
35355: PUSH
35356: LD_INT 1
35358: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35359: LD_VAR 0 6
35363: PUSH
35364: LD_VAR 0 13
35368: PPUSH
35369: CALL_OW 247
35373: PUSH
35374: LD_INT 2
35376: EQUAL
35377: AND
35378: PUSH
35379: LD_VAR 0 13
35383: PPUSH
35384: CALL_OW 263
35388: PUSH
35389: LD_INT 1
35391: EQUAL
35392: AND
35393: IFFALSE 35557
// begin if IsDrivenBy ( tmp ) then
35395: LD_VAR 0 13
35399: PPUSH
35400: CALL_OW 311
35404: IFFALSE 35408
// continue ;
35406: GO 35207
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35408: LD_VAR 0 6
35412: PPUSH
35413: LD_INT 3
35415: PUSH
35416: LD_INT 60
35418: PUSH
35419: EMPTY
35420: LIST
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: LD_INT 55
35431: PUSH
35432: EMPTY
35433: LIST
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PPUSH
35443: CALL_OW 72
35447: IFFALSE 35555
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35449: LD_ADDR_VAR 0 18
35453: PUSH
35454: LD_VAR 0 6
35458: PPUSH
35459: LD_INT 3
35461: PUSH
35462: LD_INT 60
35464: PUSH
35465: EMPTY
35466: LIST
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 3
35474: PUSH
35475: LD_INT 55
35477: PUSH
35478: EMPTY
35479: LIST
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PPUSH
35489: CALL_OW 72
35493: PUSH
35494: LD_INT 1
35496: ARRAY
35497: ST_TO_ADDR
// if IsInUnit ( driver ) then
35498: LD_VAR 0 18
35502: PPUSH
35503: CALL_OW 310
35507: IFFALSE 35518
// ComExit ( driver ) ;
35509: LD_VAR 0 18
35513: PPUSH
35514: CALL 60920 0 1
// AddComEnterUnit ( driver , tmp ) ;
35518: LD_VAR 0 18
35522: PPUSH
35523: LD_VAR 0 13
35527: PPUSH
35528: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35532: LD_VAR 0 18
35536: PPUSH
35537: LD_VAR 0 7
35541: PPUSH
35542: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35546: LD_VAR 0 18
35550: PPUSH
35551: CALL_OW 181
// end ; continue ;
35555: GO 35207
// end ; if not cleaners or not tmp in cleaners then
35557: LD_VAR 0 6
35561: NOT
35562: PUSH
35563: LD_VAR 0 13
35567: PUSH
35568: LD_VAR 0 6
35572: IN
35573: NOT
35574: OR
35575: IFFALSE 35882
// begin if dep then
35577: LD_VAR 0 17
35581: IFFALSE 35717
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35583: LD_ADDR_VAR 0 16
35587: PUSH
35588: LD_VAR 0 17
35592: PUSH
35593: LD_INT 1
35595: ARRAY
35596: PPUSH
35597: CALL_OW 250
35601: PPUSH
35602: LD_VAR 0 17
35606: PUSH
35607: LD_INT 1
35609: ARRAY
35610: PPUSH
35611: CALL_OW 254
35615: PPUSH
35616: LD_INT 5
35618: PPUSH
35619: CALL_OW 272
35623: PUSH
35624: LD_VAR 0 17
35628: PUSH
35629: LD_INT 1
35631: ARRAY
35632: PPUSH
35633: CALL_OW 251
35637: PPUSH
35638: LD_VAR 0 17
35642: PUSH
35643: LD_INT 1
35645: ARRAY
35646: PPUSH
35647: CALL_OW 254
35651: PPUSH
35652: LD_INT 5
35654: PPUSH
35655: CALL_OW 273
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35664: LD_VAR 0 16
35668: PUSH
35669: LD_INT 1
35671: ARRAY
35672: PPUSH
35673: LD_VAR 0 16
35677: PUSH
35678: LD_INT 2
35680: ARRAY
35681: PPUSH
35682: CALL_OW 488
35686: IFFALSE 35717
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35688: LD_VAR 0 13
35692: PPUSH
35693: LD_VAR 0 16
35697: PUSH
35698: LD_INT 1
35700: ARRAY
35701: PPUSH
35702: LD_VAR 0 16
35706: PUSH
35707: LD_INT 2
35709: ARRAY
35710: PPUSH
35711: CALL_OW 111
// continue ;
35715: GO 35207
// end ; end ; r := GetDir ( tmp ) ;
35717: LD_ADDR_VAR 0 15
35721: PUSH
35722: LD_VAR 0 13
35726: PPUSH
35727: CALL_OW 254
35731: ST_TO_ADDR
// if r = 5 then
35732: LD_VAR 0 15
35736: PUSH
35737: LD_INT 5
35739: EQUAL
35740: IFFALSE 35750
// r := 0 ;
35742: LD_ADDR_VAR 0 15
35746: PUSH
35747: LD_INT 0
35749: ST_TO_ADDR
// for j = r to 5 do
35750: LD_ADDR_VAR 0 10
35754: PUSH
35755: DOUBLE
35756: LD_VAR 0 15
35760: DEC
35761: ST_TO_ADDR
35762: LD_INT 5
35764: PUSH
35765: FOR_TO
35766: IFFALSE 35880
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35768: LD_ADDR_VAR 0 11
35772: PUSH
35773: LD_VAR 0 13
35777: PPUSH
35778: CALL_OW 250
35782: PPUSH
35783: LD_VAR 0 10
35787: PPUSH
35788: LD_INT 2
35790: PPUSH
35791: CALL_OW 272
35795: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35796: LD_ADDR_VAR 0 12
35800: PUSH
35801: LD_VAR 0 13
35805: PPUSH
35806: CALL_OW 251
35810: PPUSH
35811: LD_VAR 0 10
35815: PPUSH
35816: LD_INT 2
35818: PPUSH
35819: CALL_OW 273
35823: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35824: LD_VAR 0 11
35828: PPUSH
35829: LD_VAR 0 12
35833: PPUSH
35834: CALL_OW 488
35838: PUSH
35839: LD_VAR 0 11
35843: PPUSH
35844: LD_VAR 0 12
35848: PPUSH
35849: CALL_OW 428
35853: NOT
35854: AND
35855: IFFALSE 35878
// begin ComMoveXY ( tmp , _x , _y ) ;
35857: LD_VAR 0 13
35861: PPUSH
35862: LD_VAR 0 11
35866: PPUSH
35867: LD_VAR 0 12
35871: PPUSH
35872: CALL_OW 111
// break ;
35876: GO 35880
// end ; end ;
35878: GO 35765
35880: POP
35881: POP
// end ; end ;
35882: GO 35207
35884: POP
35885: POP
// end ;
35886: LD_VAR 0 8
35890: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35891: LD_INT 0
35893: PPUSH
// result := true ;
35894: LD_ADDR_VAR 0 3
35898: PUSH
35899: LD_INT 1
35901: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35902: LD_VAR 0 2
35906: PUSH
35907: LD_INT 24
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35921
35913: LD_INT 33
35915: DOUBLE
35916: EQUAL
35917: IFTRUE 35921
35919: GO 35946
35921: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35922: LD_ADDR_VAR 0 3
35926: PUSH
35927: LD_INT 32
35929: PPUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 321
35939: PUSH
35940: LD_INT 2
35942: EQUAL
35943: ST_TO_ADDR
35944: GO 36262
35946: LD_INT 20
35948: DOUBLE
35949: EQUAL
35950: IFTRUE 35954
35952: GO 35979
35954: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35955: LD_ADDR_VAR 0 3
35959: PUSH
35960: LD_INT 6
35962: PPUSH
35963: LD_VAR 0 1
35967: PPUSH
35968: CALL_OW 321
35972: PUSH
35973: LD_INT 2
35975: EQUAL
35976: ST_TO_ADDR
35977: GO 36262
35979: LD_INT 22
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 35993
35985: LD_INT 36
35987: DOUBLE
35988: EQUAL
35989: IFTRUE 35993
35991: GO 36018
35993: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35994: LD_ADDR_VAR 0 3
35998: PUSH
35999: LD_INT 15
36001: PPUSH
36002: LD_VAR 0 1
36006: PPUSH
36007: CALL_OW 321
36011: PUSH
36012: LD_INT 2
36014: EQUAL
36015: ST_TO_ADDR
36016: GO 36262
36018: LD_INT 30
36020: DOUBLE
36021: EQUAL
36022: IFTRUE 36026
36024: GO 36051
36026: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36027: LD_ADDR_VAR 0 3
36031: PUSH
36032: LD_INT 20
36034: PPUSH
36035: LD_VAR 0 1
36039: PPUSH
36040: CALL_OW 321
36044: PUSH
36045: LD_INT 2
36047: EQUAL
36048: ST_TO_ADDR
36049: GO 36262
36051: LD_INT 28
36053: DOUBLE
36054: EQUAL
36055: IFTRUE 36065
36057: LD_INT 21
36059: DOUBLE
36060: EQUAL
36061: IFTRUE 36065
36063: GO 36090
36065: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36066: LD_ADDR_VAR 0 3
36070: PUSH
36071: LD_INT 21
36073: PPUSH
36074: LD_VAR 0 1
36078: PPUSH
36079: CALL_OW 321
36083: PUSH
36084: LD_INT 2
36086: EQUAL
36087: ST_TO_ADDR
36088: GO 36262
36090: LD_INT 16
36092: DOUBLE
36093: EQUAL
36094: IFTRUE 36098
36096: GO 36123
36098: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36099: LD_ADDR_VAR 0 3
36103: PUSH
36104: LD_INT 84
36106: PPUSH
36107: LD_VAR 0 1
36111: PPUSH
36112: CALL_OW 321
36116: PUSH
36117: LD_INT 2
36119: EQUAL
36120: ST_TO_ADDR
36121: GO 36262
36123: LD_INT 19
36125: DOUBLE
36126: EQUAL
36127: IFTRUE 36137
36129: LD_INT 23
36131: DOUBLE
36132: EQUAL
36133: IFTRUE 36137
36135: GO 36162
36137: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36138: LD_ADDR_VAR 0 3
36142: PUSH
36143: LD_INT 83
36145: PPUSH
36146: LD_VAR 0 1
36150: PPUSH
36151: CALL_OW 321
36155: PUSH
36156: LD_INT 2
36158: EQUAL
36159: ST_TO_ADDR
36160: GO 36262
36162: LD_INT 17
36164: DOUBLE
36165: EQUAL
36166: IFTRUE 36170
36168: GO 36195
36170: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36171: LD_ADDR_VAR 0 3
36175: PUSH
36176: LD_INT 39
36178: PPUSH
36179: LD_VAR 0 1
36183: PPUSH
36184: CALL_OW 321
36188: PUSH
36189: LD_INT 2
36191: EQUAL
36192: ST_TO_ADDR
36193: GO 36262
36195: LD_INT 18
36197: DOUBLE
36198: EQUAL
36199: IFTRUE 36203
36201: GO 36228
36203: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36204: LD_ADDR_VAR 0 3
36208: PUSH
36209: LD_INT 40
36211: PPUSH
36212: LD_VAR 0 1
36216: PPUSH
36217: CALL_OW 321
36221: PUSH
36222: LD_INT 2
36224: EQUAL
36225: ST_TO_ADDR
36226: GO 36262
36228: LD_INT 27
36230: DOUBLE
36231: EQUAL
36232: IFTRUE 36236
36234: GO 36261
36236: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36237: LD_ADDR_VAR 0 3
36241: PUSH
36242: LD_INT 35
36244: PPUSH
36245: LD_VAR 0 1
36249: PPUSH
36250: CALL_OW 321
36254: PUSH
36255: LD_INT 2
36257: EQUAL
36258: ST_TO_ADDR
36259: GO 36262
36261: POP
// end ;
36262: LD_VAR 0 3
36266: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36267: LD_INT 0
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
// result := false ;
36280: LD_ADDR_VAR 0 6
36284: PUSH
36285: LD_INT 0
36287: ST_TO_ADDR
// if btype = b_depot then
36288: LD_VAR 0 2
36292: PUSH
36293: LD_INT 0
36295: EQUAL
36296: IFFALSE 36308
// begin result := true ;
36298: LD_ADDR_VAR 0 6
36302: PUSH
36303: LD_INT 1
36305: ST_TO_ADDR
// exit ;
36306: GO 37134
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36308: LD_VAR 0 1
36312: NOT
36313: PUSH
36314: LD_VAR 0 1
36318: PPUSH
36319: CALL_OW 266
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: IN
36334: NOT
36335: OR
36336: PUSH
36337: LD_VAR 0 2
36341: NOT
36342: OR
36343: PUSH
36344: LD_VAR 0 5
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 3
36360: PUSH
36361: LD_INT 4
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: IN
36375: NOT
36376: OR
36377: PUSH
36378: LD_VAR 0 3
36382: PPUSH
36383: LD_VAR 0 4
36387: PPUSH
36388: CALL_OW 488
36392: NOT
36393: OR
36394: IFFALSE 36398
// exit ;
36396: GO 37134
// side := GetSide ( depot ) ;
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 255
36412: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36413: LD_VAR 0 9
36417: PPUSH
36418: LD_VAR 0 2
36422: PPUSH
36423: CALL 35891 0 2
36427: NOT
36428: IFFALSE 36432
// exit ;
36430: GO 37134
// pom := GetBase ( depot ) ;
36432: LD_ADDR_VAR 0 10
36436: PUSH
36437: LD_VAR 0 1
36441: PPUSH
36442: CALL_OW 274
36446: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36447: LD_ADDR_VAR 0 11
36451: PUSH
36452: LD_VAR 0 2
36456: PPUSH
36457: LD_VAR 0 1
36461: PPUSH
36462: CALL_OW 248
36466: PPUSH
36467: CALL_OW 450
36471: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36472: LD_VAR 0 10
36476: PPUSH
36477: LD_INT 1
36479: PPUSH
36480: CALL_OW 275
36484: PUSH
36485: LD_VAR 0 11
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: GREATEREQUAL
36494: PUSH
36495: LD_VAR 0 10
36499: PPUSH
36500: LD_INT 2
36502: PPUSH
36503: CALL_OW 275
36507: PUSH
36508: LD_VAR 0 11
36512: PUSH
36513: LD_INT 2
36515: ARRAY
36516: GREATEREQUAL
36517: AND
36518: PUSH
36519: LD_VAR 0 10
36523: PPUSH
36524: LD_INT 3
36526: PPUSH
36527: CALL_OW 275
36531: PUSH
36532: LD_VAR 0 11
36536: PUSH
36537: LD_INT 3
36539: ARRAY
36540: GREATEREQUAL
36541: AND
36542: NOT
36543: IFFALSE 36547
// exit ;
36545: GO 37134
// if GetBType ( depot ) = b_depot then
36547: LD_VAR 0 1
36551: PPUSH
36552: CALL_OW 266
36556: PUSH
36557: LD_INT 0
36559: EQUAL
36560: IFFALSE 36572
// dist := 28 else
36562: LD_ADDR_VAR 0 14
36566: PUSH
36567: LD_INT 28
36569: ST_TO_ADDR
36570: GO 36580
// dist := 36 ;
36572: LD_ADDR_VAR 0 14
36576: PUSH
36577: LD_INT 36
36579: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36580: LD_VAR 0 1
36584: PPUSH
36585: LD_VAR 0 3
36589: PPUSH
36590: LD_VAR 0 4
36594: PPUSH
36595: CALL_OW 297
36599: PUSH
36600: LD_VAR 0 14
36604: GREATER
36605: IFFALSE 36609
// exit ;
36607: GO 37134
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36609: LD_ADDR_VAR 0 12
36613: PUSH
36614: LD_VAR 0 2
36618: PPUSH
36619: LD_VAR 0 3
36623: PPUSH
36624: LD_VAR 0 4
36628: PPUSH
36629: LD_VAR 0 5
36633: PPUSH
36634: LD_VAR 0 1
36638: PPUSH
36639: CALL_OW 248
36643: PPUSH
36644: LD_INT 0
36646: PPUSH
36647: CALL 37139 0 6
36651: ST_TO_ADDR
// if not hexes then
36652: LD_VAR 0 12
36656: NOT
36657: IFFALSE 36661
// exit ;
36659: GO 37134
// hex := GetHexInfo ( x , y ) ;
36661: LD_ADDR_VAR 0 15
36665: PUSH
36666: LD_VAR 0 3
36670: PPUSH
36671: LD_VAR 0 4
36675: PPUSH
36676: CALL_OW 546
36680: ST_TO_ADDR
// if hex [ 1 ] then
36681: LD_VAR 0 15
36685: PUSH
36686: LD_INT 1
36688: ARRAY
36689: IFFALSE 36693
// exit ;
36691: GO 37134
// height := hex [ 2 ] ;
36693: LD_ADDR_VAR 0 13
36697: PUSH
36698: LD_VAR 0 15
36702: PUSH
36703: LD_INT 2
36705: ARRAY
36706: ST_TO_ADDR
// for i = 1 to hexes do
36707: LD_ADDR_VAR 0 7
36711: PUSH
36712: DOUBLE
36713: LD_INT 1
36715: DEC
36716: ST_TO_ADDR
36717: LD_VAR 0 12
36721: PUSH
36722: FOR_TO
36723: IFFALSE 37053
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36725: LD_VAR 0 12
36729: PUSH
36730: LD_VAR 0 7
36734: ARRAY
36735: PUSH
36736: LD_INT 1
36738: ARRAY
36739: PPUSH
36740: LD_VAR 0 12
36744: PUSH
36745: LD_VAR 0 7
36749: ARRAY
36750: PUSH
36751: LD_INT 2
36753: ARRAY
36754: PPUSH
36755: CALL_OW 488
36759: NOT
36760: PUSH
36761: LD_VAR 0 12
36765: PUSH
36766: LD_VAR 0 7
36770: ARRAY
36771: PUSH
36772: LD_INT 1
36774: ARRAY
36775: PPUSH
36776: LD_VAR 0 12
36780: PUSH
36781: LD_VAR 0 7
36785: ARRAY
36786: PUSH
36787: LD_INT 2
36789: ARRAY
36790: PPUSH
36791: CALL_OW 428
36795: PUSH
36796: LD_INT 0
36798: GREATER
36799: OR
36800: PUSH
36801: LD_VAR 0 12
36805: PUSH
36806: LD_VAR 0 7
36810: ARRAY
36811: PUSH
36812: LD_INT 1
36814: ARRAY
36815: PPUSH
36816: LD_VAR 0 12
36820: PUSH
36821: LD_VAR 0 7
36825: ARRAY
36826: PUSH
36827: LD_INT 2
36829: ARRAY
36830: PPUSH
36831: CALL_OW 351
36835: OR
36836: IFFALSE 36842
// exit ;
36838: POP
36839: POP
36840: GO 37134
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36842: LD_ADDR_VAR 0 8
36846: PUSH
36847: LD_VAR 0 12
36851: PUSH
36852: LD_VAR 0 7
36856: ARRAY
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: PPUSH
36862: LD_VAR 0 12
36866: PUSH
36867: LD_VAR 0 7
36871: ARRAY
36872: PUSH
36873: LD_INT 2
36875: ARRAY
36876: PPUSH
36877: CALL_OW 546
36881: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36882: LD_VAR 0 8
36886: PUSH
36887: LD_INT 1
36889: ARRAY
36890: PUSH
36891: LD_VAR 0 8
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: PUSH
36900: LD_VAR 0 13
36904: PUSH
36905: LD_INT 2
36907: PLUS
36908: GREATER
36909: OR
36910: PUSH
36911: LD_VAR 0 8
36915: PUSH
36916: LD_INT 2
36918: ARRAY
36919: PUSH
36920: LD_VAR 0 13
36924: PUSH
36925: LD_INT 2
36927: MINUS
36928: LESS
36929: OR
36930: PUSH
36931: LD_VAR 0 8
36935: PUSH
36936: LD_INT 3
36938: ARRAY
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 8
36945: PUSH
36946: LD_INT 9
36948: PUSH
36949: LD_INT 10
36951: PUSH
36952: LD_INT 11
36954: PUSH
36955: LD_INT 12
36957: PUSH
36958: LD_INT 13
36960: PUSH
36961: LD_INT 16
36963: PUSH
36964: LD_INT 17
36966: PUSH
36967: LD_INT 18
36969: PUSH
36970: LD_INT 19
36972: PUSH
36973: LD_INT 20
36975: PUSH
36976: LD_INT 21
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: IN
36994: NOT
36995: OR
36996: PUSH
36997: LD_VAR 0 8
37001: PUSH
37002: LD_INT 5
37004: ARRAY
37005: NOT
37006: OR
37007: PUSH
37008: LD_VAR 0 8
37012: PUSH
37013: LD_INT 6
37015: ARRAY
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 7
37025: PUSH
37026: LD_INT 9
37028: PUSH
37029: LD_INT 10
37031: PUSH
37032: LD_INT 11
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: IN
37043: NOT
37044: OR
37045: IFFALSE 37051
// exit ;
37047: POP
37048: POP
37049: GO 37134
// end ;
37051: GO 36722
37053: POP
37054: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37055: LD_VAR 0 9
37059: PPUSH
37060: LD_VAR 0 3
37064: PPUSH
37065: LD_VAR 0 4
37069: PPUSH
37070: LD_INT 20
37072: PPUSH
37073: CALL 29057 0 4
37077: PUSH
37078: LD_INT 4
37080: ARRAY
37081: IFFALSE 37085
// exit ;
37083: GO 37134
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37085: LD_VAR 0 2
37089: PUSH
37090: LD_INT 29
37092: PUSH
37093: LD_INT 30
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: IN
37100: PUSH
37101: LD_VAR 0 3
37105: PPUSH
37106: LD_VAR 0 4
37110: PPUSH
37111: LD_VAR 0 9
37115: PPUSH
37116: CALL_OW 440
37120: NOT
37121: AND
37122: IFFALSE 37126
// exit ;
37124: GO 37134
// result := true ;
37126: LD_ADDR_VAR 0 6
37130: PUSH
37131: LD_INT 1
37133: ST_TO_ADDR
// end ;
37134: LD_VAR 0 6
37138: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37139: LD_INT 0
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
37151: PPUSH
37152: PPUSH
37153: PPUSH
37154: PPUSH
37155: PPUSH
37156: PPUSH
37157: PPUSH
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
37181: PPUSH
37182: PPUSH
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
37198: PPUSH
// result = [ ] ;
37199: LD_ADDR_VAR 0 7
37203: PUSH
37204: EMPTY
37205: ST_TO_ADDR
// temp_list = [ ] ;
37206: LD_ADDR_VAR 0 9
37210: PUSH
37211: EMPTY
37212: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37213: LD_VAR 0 4
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 3
37229: PUSH
37230: LD_INT 4
37232: PUSH
37233: LD_INT 5
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: IN
37244: NOT
37245: PUSH
37246: LD_VAR 0 1
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: IN
37261: PUSH
37262: LD_VAR 0 5
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 3
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: IN
37281: NOT
37282: AND
37283: OR
37284: IFFALSE 37288
// exit ;
37286: GO 55679
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37288: LD_VAR 0 1
37292: PUSH
37293: LD_INT 6
37295: PUSH
37296: LD_INT 7
37298: PUSH
37299: LD_INT 8
37301: PUSH
37302: LD_INT 13
37304: PUSH
37305: LD_INT 12
37307: PUSH
37308: LD_INT 15
37310: PUSH
37311: LD_INT 11
37313: PUSH
37314: LD_INT 14
37316: PUSH
37317: LD_INT 10
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: IN
37331: IFFALSE 37341
// btype = b_lab ;
37333: LD_ADDR_VAR 0 1
37337: PUSH
37338: LD_INT 6
37340: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37341: LD_VAR 0 6
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: LIST
37359: IN
37360: NOT
37361: PUSH
37362: LD_VAR 0 1
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: LD_INT 3
37378: PUSH
37379: LD_INT 6
37381: PUSH
37382: LD_INT 36
37384: PUSH
37385: LD_INT 4
37387: PUSH
37388: LD_INT 5
37390: PUSH
37391: LD_INT 31
37393: PUSH
37394: LD_INT 32
37396: PUSH
37397: LD_INT 33
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: IN
37413: NOT
37414: PUSH
37415: LD_VAR 0 6
37419: PUSH
37420: LD_INT 1
37422: EQUAL
37423: AND
37424: OR
37425: PUSH
37426: LD_VAR 0 1
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: LD_INT 3
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: IN
37441: NOT
37442: PUSH
37443: LD_VAR 0 6
37447: PUSH
37448: LD_INT 2
37450: EQUAL
37451: AND
37452: OR
37453: IFFALSE 37463
// mode = 0 ;
37455: LD_ADDR_VAR 0 6
37459: PUSH
37460: LD_INT 0
37462: ST_TO_ADDR
// case mode of 0 :
37463: LD_VAR 0 6
37467: PUSH
37468: LD_INT 0
37470: DOUBLE
37471: EQUAL
37472: IFTRUE 37476
37474: GO 48929
37476: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37477: LD_ADDR_VAR 0 11
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 3
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37670: LD_ADDR_VAR 0 12
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 3
37827: NEG
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 3
37838: NEG
37839: PUSH
37840: LD_INT 1
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37866: LD_ADDR_VAR 0 13
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 1
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: NEG
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 2
38001: NEG
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: LD_INT 3
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 3
38037: NEG
38038: PUSH
38039: LD_INT 3
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38065: LD_ADDR_VAR 0 14
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 3
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38261: LD_ADDR_VAR 0 15
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 3
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38454: LD_ADDR_VAR 0 16
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: LD_INT 1
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 3
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 3
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38647: LD_ADDR_VAR 0 17
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: NEG
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 2
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: NEG
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38877: LD_ADDR_VAR 0 18
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: LD_INT 1
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: LD_INT 2
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39107: LD_ADDR_VAR 0 19
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: NEG
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39337: LD_ADDR_VAR 0 20
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: NEG
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39567: LD_ADDR_VAR 0 21
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39797: LD_ADDR_VAR 0 22
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40027: LD_ADDR_VAR 0 23
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: LD_INT 3
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 3
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40307: LD_ADDR_VAR 0 24
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 3
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 3
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40583: LD_ADDR_VAR 0 25
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: NEG
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 3
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40857: LD_ADDR_VAR 0 26
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 3
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41133: LD_ADDR_VAR 0 27
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 3
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 3
41378: NEG
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41413: LD_ADDR_VAR 0 28
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: NEG
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 3
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 3
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 3
41648: NEG
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 3
41660: NEG
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41695: LD_ADDR_VAR 0 29
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: NEG
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 3
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 3
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 3
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41974: LD_ADDR_VAR 0 30
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 2
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 3
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42252: LD_ADDR_VAR 0 31
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: LD_INT 3
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 3
42495: NEG
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42530: LD_ADDR_VAR 0 32
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 3
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42808: LD_ADDR_VAR 0 33
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: LD_INT 2
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: LD_INT 3
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 3
43052: NEG
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43087: LD_ADDR_VAR 0 34
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: NEG
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 3
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: LD_INT 3
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43367: LD_ADDR_VAR 0 35
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43479: LD_ADDR_VAR 0 36
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43591: LD_ADDR_VAR 0 37
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43703: LD_ADDR_VAR 0 38
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43815: LD_ADDR_VAR 0 39
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43927: LD_ADDR_VAR 0 40
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44039: LD_ADDR_VAR 0 41
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: LD_INT 3
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 3
44313: NEG
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 3
44324: NEG
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 3
44336: NEG
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: LD_INT 3
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44389: LD_ADDR_VAR 0 42
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 3
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 3
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 3
44698: NEG
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44739: LD_ADDR_VAR 0 43
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 3
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45087: LD_ADDR_VAR 0 44
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 3
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 3
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: LD_INT 3
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 3
45384: NEG
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: LD_INT 3
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45437: LD_ADDR_VAR 0 45
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 3
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 3
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 3
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: NEG
45747: PUSH
45748: LD_INT 3
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45787: LD_ADDR_VAR 0 46
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 3
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 3
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 3
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 3
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46135: LD_ADDR_VAR 0 47
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46286: LD_ADDR_VAR 0 48
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46433: LD_ADDR_VAR 0 49
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46577: LD_ADDR_VAR 0 50
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46721: LD_ADDR_VAR 0 51
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46868: LD_ADDR_VAR 0 52
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47019: LD_ADDR_VAR 0 53
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47249: LD_ADDR_VAR 0 54
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47479: LD_ADDR_VAR 0 55
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47709: LD_ADDR_VAR 0 56
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47939: LD_ADDR_VAR 0 57
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48169: LD_ADDR_VAR 0 58
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48399: LD_ADDR_VAR 0 59
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48487: LD_ADDR_VAR 0 60
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48575: LD_ADDR_VAR 0 61
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48663: LD_ADDR_VAR 0 62
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48751: LD_ADDR_VAR 0 63
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48839: LD_ADDR_VAR 0 64
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: ST_TO_ADDR
// end ; 1 :
48927: GO 54824
48929: LD_INT 1
48931: DOUBLE
48932: EQUAL
48933: IFTRUE 48937
48935: GO 51560
48937: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48938: LD_ADDR_VAR 0 11
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 3
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48982: LD_ADDR_VAR 0 12
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49023: LD_ADDR_VAR 0 13
49027: PUSH
49028: LD_INT 3
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: PUSH
49041: LD_INT 3
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49063: LD_ADDR_VAR 0 14
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49104: LD_ADDR_VAR 0 15
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 3
49122: NEG
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49148: LD_ADDR_VAR 0 16
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: NEG
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 3
49179: NEG
49180: PUSH
49181: LD_INT 3
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49194: LD_ADDR_VAR 0 17
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 3
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: LIST
49237: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49238: LD_ADDR_VAR 0 18
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49279: LD_ADDR_VAR 0 19
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: LIST
49318: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49319: LD_ADDR_VAR 0 20
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49360: LD_ADDR_VAR 0 21
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: NEG
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49404: LD_ADDR_VAR 0 22
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: LD_INT 3
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 3
49435: NEG
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: LIST
49449: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49450: LD_ADDR_VAR 0 23
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 3
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 4
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 3
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49494: LD_ADDR_VAR 0 24
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49535: LD_ADDR_VAR 0 25
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 4
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: PUSH
49563: LD_INT 4
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49575: LD_ADDR_VAR 0 26
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 4
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49616: LD_ADDR_VAR 0 27
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 4
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49660: LD_ADDR_VAR 0 28
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: LD_INT 4
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 4
49691: NEG
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49706: LD_ADDR_VAR 0 29
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 3
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 4
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 4
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 5
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 5
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: LD_INT 4
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 6
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 6
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 5
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49861: LD_ADDR_VAR 0 30
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 4
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 4
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 4
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 5
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 5
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 5
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 6
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 6
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50004: LD_ADDR_VAR 0 31
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 4
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 4
50051: PUSH
50052: LD_INT 4
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 3
50061: PUSH
50062: LD_INT 4
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 5
50071: PUSH
50072: LD_INT 4
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 5
50081: PUSH
50082: LD_INT 5
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 4
50091: PUSH
50092: LD_INT 5
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 6
50101: PUSH
50102: LD_INT 5
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 6
50111: PUSH
50112: LD_INT 6
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 5
50121: PUSH
50122: LD_INT 6
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50143: LD_ADDR_VAR 0 32
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 3
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 4
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 4
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 5
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 5
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 4
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 6
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 6
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 5
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50286: LD_ADDR_VAR 0 33
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 4
50338: NEG
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 4
50349: NEG
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 4
50361: NEG
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 5
50372: NEG
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 5
50383: NEG
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 5
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 6
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 6
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50441: LD_ADDR_VAR 0 34
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: LD_INT 4
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 4
50496: NEG
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 4
50508: NEG
50509: PUSH
50510: LD_INT 4
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 4
50520: NEG
50521: PUSH
50522: LD_INT 5
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 5
50532: NEG
50533: PUSH
50534: LD_INT 4
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 5
50544: NEG
50545: PUSH
50546: LD_INT 5
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 5
50556: NEG
50557: PUSH
50558: LD_INT 6
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 6
50568: NEG
50569: PUSH
50570: LD_INT 5
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 6
50580: NEG
50581: PUSH
50582: LD_INT 6
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50604: LD_ADDR_VAR 0 41
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 3
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50648: LD_ADDR_VAR 0 42
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50689: LD_ADDR_VAR 0 43
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50729: LD_ADDR_VAR 0 44
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: LIST
50769: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50770: LD_ADDR_VAR 0 45
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: NEG
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: LIST
50813: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50814: LD_ADDR_VAR 0 46
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50860: LD_ADDR_VAR 0 47
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 3
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 3
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50893: LD_ADDR_VAR 0 48
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50924: LD_ADDR_VAR 0 49
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50953: LD_ADDR_VAR 0 50
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50982: LD_ADDR_VAR 0 51
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51013: LD_ADDR_VAR 0 52
51017: PUSH
51018: LD_INT 3
51020: NEG
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51046: LD_ADDR_VAR 0 53
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: LIST
51089: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51090: LD_ADDR_VAR 0 54
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51131: LD_ADDR_VAR 0 55
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51171: LD_ADDR_VAR 0 56
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51212: LD_ADDR_VAR 0 57
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51256: LD_ADDR_VAR 0 58
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51302: LD_ADDR_VAR 0 59
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: LIST
51345: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51346: LD_ADDR_VAR 0 60
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: LIST
51386: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51387: LD_ADDR_VAR 0 61
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51427: LD_ADDR_VAR 0 62
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51468: LD_ADDR_VAR 0 63
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51512: LD_ADDR_VAR 0 64
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: ST_TO_ADDR
// end ; 2 :
51558: GO 54824
51560: LD_INT 2
51562: DOUBLE
51563: EQUAL
51564: IFTRUE 51568
51566: GO 54823
51568: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51569: LD_ADDR_VAR 0 29
51573: PUSH
51574: LD_INT 4
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 4
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 5
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 5
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 4
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 5
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 4
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 4
51699: PUSH
51700: LD_INT 4
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: LD_INT 4
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 4
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 4
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 4
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 5
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 5
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 5
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 3
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 3
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 3
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 4
51908: NEG
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 4
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 4
51931: NEG
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 4
51954: NEG
51955: PUSH
51956: LD_INT 4
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 4
51966: NEG
51967: PUSH
51968: LD_INT 5
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: LD_INT 4
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: NEG
51991: PUSH
51992: LD_INT 3
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 4
52002: NEG
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 5
52014: NEG
52015: PUSH
52016: LD_INT 4
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 5
52026: NEG
52027: PUSH
52028: LD_INT 5
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 5
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 5
52050: NEG
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52107: LD_ADDR_VAR 0 30
52111: PUSH
52112: LD_INT 4
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 4
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 5
52134: PUSH
52135: LD_INT 4
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 5
52144: PUSH
52145: LD_INT 5
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 4
52154: PUSH
52155: LD_INT 5
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 4
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 5
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: LD_INT 5
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 4
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 4
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 3
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: LD_INT 4
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 4
52308: NEG
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 3
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 4
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 5
52353: NEG
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 5
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 5
52376: NEG
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: LD_INT 4
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 4
52459: NEG
52460: PUSH
52461: LD_INT 3
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 4
52471: NEG
52472: PUSH
52473: LD_INT 4
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 4
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 4
52495: NEG
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 4
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 5
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 4
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: LD_INT 3
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 4
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 5
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 5
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52654: LD_ADDR_VAR 0 31
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 4
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 4
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 5
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 5
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 4
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 4
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 4
52833: NEG
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 4
52856: NEG
52857: PUSH
52858: LD_INT 4
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 4
52868: NEG
52869: PUSH
52870: LD_INT 5
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 4
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 4
52904: NEG
52905: PUSH
52906: LD_INT 3
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 5
52916: NEG
52917: PUSH
52918: LD_INT 4
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 5
52928: NEG
52929: PUSH
52930: LD_INT 5
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: NEG
52941: PUSH
52942: LD_INT 5
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 5
52952: NEG
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 3
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 4
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 4
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: LD_INT 4
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 4
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 4
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 5
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 5
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 4
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 5
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53204: LD_ADDR_VAR 0 32
53208: PUSH
53209: LD_INT 4
53211: NEG
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 4
53222: NEG
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 4
53256: NEG
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 5
53267: NEG
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 5
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 5
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: NEG
53326: PUSH
53327: LD_INT 4
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 3
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: NEG
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 4
53373: NEG
53374: PUSH
53375: LD_INT 3
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 4
53385: NEG
53386: PUSH
53387: LD_INT 4
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: LD_INT 4
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 4
53409: NEG
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 4
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 5
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 4
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 4
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 5
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 5
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 4
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 4
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 4
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 4
53616: PUSH
53617: LD_INT 4
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 4
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 5
53636: PUSH
53637: LD_INT 4
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 5
53646: PUSH
53647: LD_INT 5
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: PUSH
53657: LD_INT 5
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: LD_INT 4
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 5
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 5
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53751: LD_ADDR_VAR 0 33
53755: PUSH
53756: LD_INT 4
53758: NEG
53759: PUSH
53760: LD_INT 4
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: NEG
53771: PUSH
53772: LD_INT 5
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: LD_INT 4
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 4
53806: NEG
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 5
53818: NEG
53819: PUSH
53820: LD_INT 4
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 5
53830: NEG
53831: PUSH
53832: LD_INT 5
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: LD_INT 5
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 5
53854: NEG
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 3
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 4
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 3
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 4
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: LD_INT 4
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 4
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 5
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 5
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 4
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 5
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: LD_INT 3
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 4
54081: PUSH
54082: LD_INT 3
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 4
54091: PUSH
54092: LD_INT 4
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 4
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 4
54131: PUSH
54132: LD_INT 2
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 4
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 4
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 3
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 4
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 5
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 4
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: LD_INT 5
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54289: LD_ADDR_VAR 0 34
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 4
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 5
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 4
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 3
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 4
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 5
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 5
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 3
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 4
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 4
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 4
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 4
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 4
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 5
54511: PUSH
54512: LD_INT 4
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: LD_INT 5
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 4
54531: PUSH
54532: LD_INT 5
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: LD_INT 4
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 5
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 3
54571: PUSH
54572: LD_INT 5
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 3
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 4
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 3
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 4
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 4
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 3
54708: NEG
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 5
54730: NEG
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 5
54741: NEG
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 5
54753: NEG
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: ST_TO_ADDR
// end ; end ;
54821: GO 54824
54823: POP
// case btype of b_depot , b_warehouse :
54824: LD_VAR 0 1
54828: PUSH
54829: LD_INT 0
54831: DOUBLE
54832: EQUAL
54833: IFTRUE 54843
54835: LD_INT 1
54837: DOUBLE
54838: EQUAL
54839: IFTRUE 54843
54841: GO 55044
54843: POP
// case nation of nation_american :
54844: LD_VAR 0 5
54848: PUSH
54849: LD_INT 1
54851: DOUBLE
54852: EQUAL
54853: IFTRUE 54857
54855: GO 54913
54857: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54858: LD_ADDR_VAR 0 9
54862: PUSH
54863: LD_VAR 0 11
54867: PUSH
54868: LD_VAR 0 12
54872: PUSH
54873: LD_VAR 0 13
54877: PUSH
54878: LD_VAR 0 14
54882: PUSH
54883: LD_VAR 0 15
54887: PUSH
54888: LD_VAR 0 16
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: PUSH
54901: LD_VAR 0 4
54905: PUSH
54906: LD_INT 1
54908: PLUS
54909: ARRAY
54910: ST_TO_ADDR
54911: GO 55042
54913: LD_INT 2
54915: DOUBLE
54916: EQUAL
54917: IFTRUE 54921
54919: GO 54977
54921: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54922: LD_ADDR_VAR 0 9
54926: PUSH
54927: LD_VAR 0 17
54931: PUSH
54932: LD_VAR 0 18
54936: PUSH
54937: LD_VAR 0 19
54941: PUSH
54942: LD_VAR 0 20
54946: PUSH
54947: LD_VAR 0 21
54951: PUSH
54952: LD_VAR 0 22
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: PUSH
54965: LD_VAR 0 4
54969: PUSH
54970: LD_INT 1
54972: PLUS
54973: ARRAY
54974: ST_TO_ADDR
54975: GO 55042
54977: LD_INT 3
54979: DOUBLE
54980: EQUAL
54981: IFTRUE 54985
54983: GO 55041
54985: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54986: LD_ADDR_VAR 0 9
54990: PUSH
54991: LD_VAR 0 23
54995: PUSH
54996: LD_VAR 0 24
55000: PUSH
55001: LD_VAR 0 25
55005: PUSH
55006: LD_VAR 0 26
55010: PUSH
55011: LD_VAR 0 27
55015: PUSH
55016: LD_VAR 0 28
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: PUSH
55029: LD_VAR 0 4
55033: PUSH
55034: LD_INT 1
55036: PLUS
55037: ARRAY
55038: ST_TO_ADDR
55039: GO 55042
55041: POP
55042: GO 55597
55044: LD_INT 2
55046: DOUBLE
55047: EQUAL
55048: IFTRUE 55058
55050: LD_INT 3
55052: DOUBLE
55053: EQUAL
55054: IFTRUE 55058
55056: GO 55114
55058: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55059: LD_ADDR_VAR 0 9
55063: PUSH
55064: LD_VAR 0 29
55068: PUSH
55069: LD_VAR 0 30
55073: PUSH
55074: LD_VAR 0 31
55078: PUSH
55079: LD_VAR 0 32
55083: PUSH
55084: LD_VAR 0 33
55088: PUSH
55089: LD_VAR 0 34
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: PUSH
55102: LD_VAR 0 4
55106: PUSH
55107: LD_INT 1
55109: PLUS
55110: ARRAY
55111: ST_TO_ADDR
55112: GO 55597
55114: LD_INT 16
55116: DOUBLE
55117: EQUAL
55118: IFTRUE 55176
55120: LD_INT 17
55122: DOUBLE
55123: EQUAL
55124: IFTRUE 55176
55126: LD_INT 18
55128: DOUBLE
55129: EQUAL
55130: IFTRUE 55176
55132: LD_INT 19
55134: DOUBLE
55135: EQUAL
55136: IFTRUE 55176
55138: LD_INT 22
55140: DOUBLE
55141: EQUAL
55142: IFTRUE 55176
55144: LD_INT 20
55146: DOUBLE
55147: EQUAL
55148: IFTRUE 55176
55150: LD_INT 21
55152: DOUBLE
55153: EQUAL
55154: IFTRUE 55176
55156: LD_INT 23
55158: DOUBLE
55159: EQUAL
55160: IFTRUE 55176
55162: LD_INT 24
55164: DOUBLE
55165: EQUAL
55166: IFTRUE 55176
55168: LD_INT 25
55170: DOUBLE
55171: EQUAL
55172: IFTRUE 55176
55174: GO 55232
55176: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55177: LD_ADDR_VAR 0 9
55181: PUSH
55182: LD_VAR 0 35
55186: PUSH
55187: LD_VAR 0 36
55191: PUSH
55192: LD_VAR 0 37
55196: PUSH
55197: LD_VAR 0 38
55201: PUSH
55202: LD_VAR 0 39
55206: PUSH
55207: LD_VAR 0 40
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: PUSH
55220: LD_VAR 0 4
55224: PUSH
55225: LD_INT 1
55227: PLUS
55228: ARRAY
55229: ST_TO_ADDR
55230: GO 55597
55232: LD_INT 6
55234: DOUBLE
55235: EQUAL
55236: IFTRUE 55288
55238: LD_INT 7
55240: DOUBLE
55241: EQUAL
55242: IFTRUE 55288
55244: LD_INT 8
55246: DOUBLE
55247: EQUAL
55248: IFTRUE 55288
55250: LD_INT 13
55252: DOUBLE
55253: EQUAL
55254: IFTRUE 55288
55256: LD_INT 12
55258: DOUBLE
55259: EQUAL
55260: IFTRUE 55288
55262: LD_INT 15
55264: DOUBLE
55265: EQUAL
55266: IFTRUE 55288
55268: LD_INT 11
55270: DOUBLE
55271: EQUAL
55272: IFTRUE 55288
55274: LD_INT 14
55276: DOUBLE
55277: EQUAL
55278: IFTRUE 55288
55280: LD_INT 10
55282: DOUBLE
55283: EQUAL
55284: IFTRUE 55288
55286: GO 55344
55288: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55289: LD_ADDR_VAR 0 9
55293: PUSH
55294: LD_VAR 0 41
55298: PUSH
55299: LD_VAR 0 42
55303: PUSH
55304: LD_VAR 0 43
55308: PUSH
55309: LD_VAR 0 44
55313: PUSH
55314: LD_VAR 0 45
55318: PUSH
55319: LD_VAR 0 46
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: PUSH
55332: LD_VAR 0 4
55336: PUSH
55337: LD_INT 1
55339: PLUS
55340: ARRAY
55341: ST_TO_ADDR
55342: GO 55597
55344: LD_INT 36
55346: DOUBLE
55347: EQUAL
55348: IFTRUE 55352
55350: GO 55408
55352: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55353: LD_ADDR_VAR 0 9
55357: PUSH
55358: LD_VAR 0 47
55362: PUSH
55363: LD_VAR 0 48
55367: PUSH
55368: LD_VAR 0 49
55372: PUSH
55373: LD_VAR 0 50
55377: PUSH
55378: LD_VAR 0 51
55382: PUSH
55383: LD_VAR 0 52
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: PUSH
55396: LD_VAR 0 4
55400: PUSH
55401: LD_INT 1
55403: PLUS
55404: ARRAY
55405: ST_TO_ADDR
55406: GO 55597
55408: LD_INT 4
55410: DOUBLE
55411: EQUAL
55412: IFTRUE 55434
55414: LD_INT 5
55416: DOUBLE
55417: EQUAL
55418: IFTRUE 55434
55420: LD_INT 34
55422: DOUBLE
55423: EQUAL
55424: IFTRUE 55434
55426: LD_INT 37
55428: DOUBLE
55429: EQUAL
55430: IFTRUE 55434
55432: GO 55490
55434: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55435: LD_ADDR_VAR 0 9
55439: PUSH
55440: LD_VAR 0 53
55444: PUSH
55445: LD_VAR 0 54
55449: PUSH
55450: LD_VAR 0 55
55454: PUSH
55455: LD_VAR 0 56
55459: PUSH
55460: LD_VAR 0 57
55464: PUSH
55465: LD_VAR 0 58
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: PUSH
55478: LD_VAR 0 4
55482: PUSH
55483: LD_INT 1
55485: PLUS
55486: ARRAY
55487: ST_TO_ADDR
55488: GO 55597
55490: LD_INT 31
55492: DOUBLE
55493: EQUAL
55494: IFTRUE 55540
55496: LD_INT 32
55498: DOUBLE
55499: EQUAL
55500: IFTRUE 55540
55502: LD_INT 33
55504: DOUBLE
55505: EQUAL
55506: IFTRUE 55540
55508: LD_INT 27
55510: DOUBLE
55511: EQUAL
55512: IFTRUE 55540
55514: LD_INT 26
55516: DOUBLE
55517: EQUAL
55518: IFTRUE 55540
55520: LD_INT 28
55522: DOUBLE
55523: EQUAL
55524: IFTRUE 55540
55526: LD_INT 29
55528: DOUBLE
55529: EQUAL
55530: IFTRUE 55540
55532: LD_INT 30
55534: DOUBLE
55535: EQUAL
55536: IFTRUE 55540
55538: GO 55596
55540: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55541: LD_ADDR_VAR 0 9
55545: PUSH
55546: LD_VAR 0 59
55550: PUSH
55551: LD_VAR 0 60
55555: PUSH
55556: LD_VAR 0 61
55560: PUSH
55561: LD_VAR 0 62
55565: PUSH
55566: LD_VAR 0 63
55570: PUSH
55571: LD_VAR 0 64
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: PUSH
55584: LD_VAR 0 4
55588: PUSH
55589: LD_INT 1
55591: PLUS
55592: ARRAY
55593: ST_TO_ADDR
55594: GO 55597
55596: POP
// temp_list2 = [ ] ;
55597: LD_ADDR_VAR 0 10
55601: PUSH
55602: EMPTY
55603: ST_TO_ADDR
// for i in temp_list do
55604: LD_ADDR_VAR 0 8
55608: PUSH
55609: LD_VAR 0 9
55613: PUSH
55614: FOR_IN
55615: IFFALSE 55667
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55617: LD_ADDR_VAR 0 10
55621: PUSH
55622: LD_VAR 0 10
55626: PUSH
55627: LD_VAR 0 8
55631: PUSH
55632: LD_INT 1
55634: ARRAY
55635: PUSH
55636: LD_VAR 0 2
55640: PLUS
55641: PUSH
55642: LD_VAR 0 8
55646: PUSH
55647: LD_INT 2
55649: ARRAY
55650: PUSH
55651: LD_VAR 0 3
55655: PLUS
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: ADD
55664: ST_TO_ADDR
55665: GO 55614
55667: POP
55668: POP
// result = temp_list2 ;
55669: LD_ADDR_VAR 0 7
55673: PUSH
55674: LD_VAR 0 10
55678: ST_TO_ADDR
// end ;
55679: LD_VAR 0 7
55683: RET
// export function EnemyInRange ( unit , dist ) ; begin
55684: LD_INT 0
55686: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55687: LD_ADDR_VAR 0 3
55691: PUSH
55692: LD_VAR 0 1
55696: PPUSH
55697: CALL_OW 255
55701: PPUSH
55702: LD_VAR 0 1
55706: PPUSH
55707: CALL_OW 250
55711: PPUSH
55712: LD_VAR 0 1
55716: PPUSH
55717: CALL_OW 251
55721: PPUSH
55722: LD_VAR 0 2
55726: PPUSH
55727: CALL 29057 0 4
55731: PUSH
55732: LD_INT 4
55734: ARRAY
55735: ST_TO_ADDR
// end ;
55736: LD_VAR 0 3
55740: RET
// export function PlayerSeeMe ( unit ) ; begin
55741: LD_INT 0
55743: PPUSH
// result := See ( your_side , unit ) ;
55744: LD_ADDR_VAR 0 2
55748: PUSH
55749: LD_OWVAR 2
55753: PPUSH
55754: LD_VAR 0 1
55758: PPUSH
55759: CALL_OW 292
55763: ST_TO_ADDR
// end ;
55764: LD_VAR 0 2
55768: RET
// export function ReverseDir ( unit ) ; begin
55769: LD_INT 0
55771: PPUSH
// if not unit then
55772: LD_VAR 0 1
55776: NOT
55777: IFFALSE 55781
// exit ;
55779: GO 55804
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55781: LD_ADDR_VAR 0 2
55785: PUSH
55786: LD_VAR 0 1
55790: PPUSH
55791: CALL_OW 254
55795: PUSH
55796: LD_INT 3
55798: PLUS
55799: PUSH
55800: LD_INT 6
55802: MOD
55803: ST_TO_ADDR
// end ;
55804: LD_VAR 0 2
55808: RET
// export function ReverseArray ( array ) ; var i ; begin
55809: LD_INT 0
55811: PPUSH
55812: PPUSH
// if not array then
55813: LD_VAR 0 1
55817: NOT
55818: IFFALSE 55822
// exit ;
55820: GO 55877
// result := [ ] ;
55822: LD_ADDR_VAR 0 2
55826: PUSH
55827: EMPTY
55828: ST_TO_ADDR
// for i := array downto 1 do
55829: LD_ADDR_VAR 0 3
55833: PUSH
55834: DOUBLE
55835: LD_VAR 0 1
55839: INC
55840: ST_TO_ADDR
55841: LD_INT 1
55843: PUSH
55844: FOR_DOWNTO
55845: IFFALSE 55875
// result := Join ( result , array [ i ] ) ;
55847: LD_ADDR_VAR 0 2
55851: PUSH
55852: LD_VAR 0 2
55856: PPUSH
55857: LD_VAR 0 1
55861: PUSH
55862: LD_VAR 0 3
55866: ARRAY
55867: PPUSH
55868: CALL 60522 0 2
55872: ST_TO_ADDR
55873: GO 55844
55875: POP
55876: POP
// end ;
55877: LD_VAR 0 2
55881: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55882: LD_INT 0
55884: PPUSH
55885: PPUSH
55886: PPUSH
55887: PPUSH
55888: PPUSH
55889: PPUSH
// if not unit or not hexes then
55890: LD_VAR 0 1
55894: NOT
55895: PUSH
55896: LD_VAR 0 2
55900: NOT
55901: OR
55902: IFFALSE 55906
// exit ;
55904: GO 56029
// dist := 9999 ;
55906: LD_ADDR_VAR 0 5
55910: PUSH
55911: LD_INT 9999
55913: ST_TO_ADDR
// for i = 1 to hexes do
55914: LD_ADDR_VAR 0 4
55918: PUSH
55919: DOUBLE
55920: LD_INT 1
55922: DEC
55923: ST_TO_ADDR
55924: LD_VAR 0 2
55928: PUSH
55929: FOR_TO
55930: IFFALSE 56017
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55932: LD_ADDR_VAR 0 6
55936: PUSH
55937: LD_VAR 0 1
55941: PPUSH
55942: LD_VAR 0 2
55946: PUSH
55947: LD_VAR 0 4
55951: ARRAY
55952: PUSH
55953: LD_INT 1
55955: ARRAY
55956: PPUSH
55957: LD_VAR 0 2
55961: PUSH
55962: LD_VAR 0 4
55966: ARRAY
55967: PUSH
55968: LD_INT 2
55970: ARRAY
55971: PPUSH
55972: CALL_OW 297
55976: ST_TO_ADDR
// if tdist < dist then
55977: LD_VAR 0 6
55981: PUSH
55982: LD_VAR 0 5
55986: LESS
55987: IFFALSE 56015
// begin hex := hexes [ i ] ;
55989: LD_ADDR_VAR 0 8
55993: PUSH
55994: LD_VAR 0 2
55998: PUSH
55999: LD_VAR 0 4
56003: ARRAY
56004: ST_TO_ADDR
// dist := tdist ;
56005: LD_ADDR_VAR 0 5
56009: PUSH
56010: LD_VAR 0 6
56014: ST_TO_ADDR
// end ; end ;
56015: GO 55929
56017: POP
56018: POP
// result := hex ;
56019: LD_ADDR_VAR 0 3
56023: PUSH
56024: LD_VAR 0 8
56028: ST_TO_ADDR
// end ;
56029: LD_VAR 0 3
56033: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56034: LD_INT 0
56036: PPUSH
56037: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56038: LD_VAR 0 1
56042: NOT
56043: PUSH
56044: LD_VAR 0 1
56048: PUSH
56049: LD_INT 21
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 23
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PPUSH
56073: CALL_OW 69
56077: IN
56078: NOT
56079: OR
56080: IFFALSE 56084
// exit ;
56082: GO 56131
// for i = 1 to 3 do
56084: LD_ADDR_VAR 0 3
56088: PUSH
56089: DOUBLE
56090: LD_INT 1
56092: DEC
56093: ST_TO_ADDR
56094: LD_INT 3
56096: PUSH
56097: FOR_TO
56098: IFFALSE 56129
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56100: LD_VAR 0 1
56104: PPUSH
56105: CALL_OW 250
56109: PPUSH
56110: LD_VAR 0 1
56114: PPUSH
56115: CALL_OW 251
56119: PPUSH
56120: LD_INT 1
56122: PPUSH
56123: CALL_OW 453
56127: GO 56097
56129: POP
56130: POP
// end ;
56131: LD_VAR 0 2
56135: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56136: LD_INT 0
56138: PPUSH
56139: PPUSH
56140: PPUSH
56141: PPUSH
56142: PPUSH
56143: PPUSH
// if not unit or not enemy_unit then
56144: LD_VAR 0 1
56148: NOT
56149: PUSH
56150: LD_VAR 0 2
56154: NOT
56155: OR
56156: IFFALSE 56160
// exit ;
56158: GO 56627
// if GetLives ( i ) < 250 then
56160: LD_VAR 0 4
56164: PPUSH
56165: CALL_OW 256
56169: PUSH
56170: LD_INT 250
56172: LESS
56173: IFFALSE 56186
// begin ComAutodestruct ( i ) ;
56175: LD_VAR 0 4
56179: PPUSH
56180: CALL 56034 0 1
// exit ;
56184: GO 56627
// end ; x := GetX ( enemy_unit ) ;
56186: LD_ADDR_VAR 0 7
56190: PUSH
56191: LD_VAR 0 2
56195: PPUSH
56196: CALL_OW 250
56200: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56201: LD_ADDR_VAR 0 8
56205: PUSH
56206: LD_VAR 0 2
56210: PPUSH
56211: CALL_OW 251
56215: ST_TO_ADDR
// if not x or not y then
56216: LD_VAR 0 7
56220: NOT
56221: PUSH
56222: LD_VAR 0 8
56226: NOT
56227: OR
56228: IFFALSE 56232
// exit ;
56230: GO 56627
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56232: LD_ADDR_VAR 0 6
56236: PUSH
56237: LD_VAR 0 7
56241: PPUSH
56242: LD_INT 0
56244: PPUSH
56245: LD_INT 4
56247: PPUSH
56248: CALL_OW 272
56252: PUSH
56253: LD_VAR 0 8
56257: PPUSH
56258: LD_INT 0
56260: PPUSH
56261: LD_INT 4
56263: PPUSH
56264: CALL_OW 273
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_VAR 0 7
56277: PPUSH
56278: LD_INT 1
56280: PPUSH
56281: LD_INT 4
56283: PPUSH
56284: CALL_OW 272
56288: PUSH
56289: LD_VAR 0 8
56293: PPUSH
56294: LD_INT 1
56296: PPUSH
56297: LD_INT 4
56299: PPUSH
56300: CALL_OW 273
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_VAR 0 7
56313: PPUSH
56314: LD_INT 2
56316: PPUSH
56317: LD_INT 4
56319: PPUSH
56320: CALL_OW 272
56324: PUSH
56325: LD_VAR 0 8
56329: PPUSH
56330: LD_INT 2
56332: PPUSH
56333: LD_INT 4
56335: PPUSH
56336: CALL_OW 273
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_VAR 0 7
56349: PPUSH
56350: LD_INT 3
56352: PPUSH
56353: LD_INT 4
56355: PPUSH
56356: CALL_OW 272
56360: PUSH
56361: LD_VAR 0 8
56365: PPUSH
56366: LD_INT 3
56368: PPUSH
56369: LD_INT 4
56371: PPUSH
56372: CALL_OW 273
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_VAR 0 7
56385: PPUSH
56386: LD_INT 4
56388: PPUSH
56389: LD_INT 4
56391: PPUSH
56392: CALL_OW 272
56396: PUSH
56397: LD_VAR 0 8
56401: PPUSH
56402: LD_INT 4
56404: PPUSH
56405: LD_INT 4
56407: PPUSH
56408: CALL_OW 273
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_VAR 0 7
56421: PPUSH
56422: LD_INT 5
56424: PPUSH
56425: LD_INT 4
56427: PPUSH
56428: CALL_OW 272
56432: PUSH
56433: LD_VAR 0 8
56437: PPUSH
56438: LD_INT 5
56440: PPUSH
56441: LD_INT 4
56443: PPUSH
56444: CALL_OW 273
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: ST_TO_ADDR
// for i = tmp downto 1 do
56461: LD_ADDR_VAR 0 4
56465: PUSH
56466: DOUBLE
56467: LD_VAR 0 6
56471: INC
56472: ST_TO_ADDR
56473: LD_INT 1
56475: PUSH
56476: FOR_DOWNTO
56477: IFFALSE 56578
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56479: LD_VAR 0 6
56483: PUSH
56484: LD_VAR 0 4
56488: ARRAY
56489: PUSH
56490: LD_INT 1
56492: ARRAY
56493: PPUSH
56494: LD_VAR 0 6
56498: PUSH
56499: LD_VAR 0 4
56503: ARRAY
56504: PUSH
56505: LD_INT 2
56507: ARRAY
56508: PPUSH
56509: CALL_OW 488
56513: NOT
56514: PUSH
56515: LD_VAR 0 6
56519: PUSH
56520: LD_VAR 0 4
56524: ARRAY
56525: PUSH
56526: LD_INT 1
56528: ARRAY
56529: PPUSH
56530: LD_VAR 0 6
56534: PUSH
56535: LD_VAR 0 4
56539: ARRAY
56540: PUSH
56541: LD_INT 2
56543: ARRAY
56544: PPUSH
56545: CALL_OW 428
56549: PUSH
56550: LD_INT 0
56552: NONEQUAL
56553: OR
56554: IFFALSE 56576
// tmp := Delete ( tmp , i ) ;
56556: LD_ADDR_VAR 0 6
56560: PUSH
56561: LD_VAR 0 6
56565: PPUSH
56566: LD_VAR 0 4
56570: PPUSH
56571: CALL_OW 3
56575: ST_TO_ADDR
56576: GO 56476
56578: POP
56579: POP
// j := GetClosestHex ( unit , tmp ) ;
56580: LD_ADDR_VAR 0 5
56584: PUSH
56585: LD_VAR 0 1
56589: PPUSH
56590: LD_VAR 0 6
56594: PPUSH
56595: CALL 55882 0 2
56599: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56600: LD_VAR 0 1
56604: PPUSH
56605: LD_VAR 0 5
56609: PUSH
56610: LD_INT 1
56612: ARRAY
56613: PPUSH
56614: LD_VAR 0 5
56618: PUSH
56619: LD_INT 2
56621: ARRAY
56622: PPUSH
56623: CALL_OW 111
// end ;
56627: LD_VAR 0 3
56631: RET
// export function PrepareApemanSoldier ( ) ; begin
56632: LD_INT 0
56634: PPUSH
// uc_nation := 0 ;
56635: LD_ADDR_OWVAR 21
56639: PUSH
56640: LD_INT 0
56642: ST_TO_ADDR
// hc_sex := sex_male ;
56643: LD_ADDR_OWVAR 27
56647: PUSH
56648: LD_INT 1
56650: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56651: LD_ADDR_OWVAR 28
56655: PUSH
56656: LD_INT 15
56658: ST_TO_ADDR
// hc_gallery :=  ;
56659: LD_ADDR_OWVAR 33
56663: PUSH
56664: LD_STRING 
56666: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56667: LD_ADDR_OWVAR 31
56671: PUSH
56672: LD_INT 0
56674: PPUSH
56675: LD_INT 3
56677: PPUSH
56678: CALL_OW 12
56682: PUSH
56683: LD_INT 0
56685: PPUSH
56686: LD_INT 3
56688: PPUSH
56689: CALL_OW 12
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// end ;
56706: LD_VAR 0 1
56710: RET
// export function PrepareApemanEngineer ( ) ; begin
56711: LD_INT 0
56713: PPUSH
// uc_nation := 0 ;
56714: LD_ADDR_OWVAR 21
56718: PUSH
56719: LD_INT 0
56721: ST_TO_ADDR
// hc_sex := sex_male ;
56722: LD_ADDR_OWVAR 27
56726: PUSH
56727: LD_INT 1
56729: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56730: LD_ADDR_OWVAR 28
56734: PUSH
56735: LD_INT 16
56737: ST_TO_ADDR
// hc_gallery :=  ;
56738: LD_ADDR_OWVAR 33
56742: PUSH
56743: LD_STRING 
56745: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56746: LD_ADDR_OWVAR 31
56750: PUSH
56751: LD_INT 0
56753: PPUSH
56754: LD_INT 3
56756: PPUSH
56757: CALL_OW 12
56761: PUSH
56762: LD_INT 0
56764: PPUSH
56765: LD_INT 3
56767: PPUSH
56768: CALL_OW 12
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// end ;
56785: LD_VAR 0 1
56789: RET
// export function PrepareApeman ( agressivity ) ; begin
56790: LD_INT 0
56792: PPUSH
// uc_side := 0 ;
56793: LD_ADDR_OWVAR 20
56797: PUSH
56798: LD_INT 0
56800: ST_TO_ADDR
// uc_nation := 0 ;
56801: LD_ADDR_OWVAR 21
56805: PUSH
56806: LD_INT 0
56808: ST_TO_ADDR
// hc_sex := sex_male ;
56809: LD_ADDR_OWVAR 27
56813: PUSH
56814: LD_INT 1
56816: ST_TO_ADDR
// hc_class := class_apeman ;
56817: LD_ADDR_OWVAR 28
56821: PUSH
56822: LD_INT 12
56824: ST_TO_ADDR
// hc_gallery :=  ;
56825: LD_ADDR_OWVAR 33
56829: PUSH
56830: LD_STRING 
56832: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56833: LD_ADDR_OWVAR 35
56837: PUSH
56838: LD_VAR 0 1
56842: NEG
56843: PPUSH
56844: LD_VAR 0 1
56848: PPUSH
56849: CALL_OW 12
56853: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56854: LD_ADDR_OWVAR 31
56858: PUSH
56859: LD_INT 0
56861: PPUSH
56862: LD_INT 3
56864: PPUSH
56865: CALL_OW 12
56869: PUSH
56870: LD_INT 0
56872: PPUSH
56873: LD_INT 3
56875: PPUSH
56876: CALL_OW 12
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: ST_TO_ADDR
// end ;
56893: LD_VAR 0 2
56897: RET
// export function PrepareTiger ( agressivity ) ; begin
56898: LD_INT 0
56900: PPUSH
// uc_side := 0 ;
56901: LD_ADDR_OWVAR 20
56905: PUSH
56906: LD_INT 0
56908: ST_TO_ADDR
// uc_nation := 0 ;
56909: LD_ADDR_OWVAR 21
56913: PUSH
56914: LD_INT 0
56916: ST_TO_ADDR
// hc_class := class_tiger ;
56917: LD_ADDR_OWVAR 28
56921: PUSH
56922: LD_INT 14
56924: ST_TO_ADDR
// hc_gallery :=  ;
56925: LD_ADDR_OWVAR 33
56929: PUSH
56930: LD_STRING 
56932: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56933: LD_ADDR_OWVAR 35
56937: PUSH
56938: LD_VAR 0 1
56942: NEG
56943: PPUSH
56944: LD_VAR 0 1
56948: PPUSH
56949: CALL_OW 12
56953: ST_TO_ADDR
// end ;
56954: LD_VAR 0 2
56958: RET
// export function PrepareEnchidna ( ) ; begin
56959: LD_INT 0
56961: PPUSH
// uc_side := 0 ;
56962: LD_ADDR_OWVAR 20
56966: PUSH
56967: LD_INT 0
56969: ST_TO_ADDR
// uc_nation := 0 ;
56970: LD_ADDR_OWVAR 21
56974: PUSH
56975: LD_INT 0
56977: ST_TO_ADDR
// hc_class := class_baggie ;
56978: LD_ADDR_OWVAR 28
56982: PUSH
56983: LD_INT 13
56985: ST_TO_ADDR
// hc_gallery :=  ;
56986: LD_ADDR_OWVAR 33
56990: PUSH
56991: LD_STRING 
56993: ST_TO_ADDR
// end ;
56994: LD_VAR 0 1
56998: RET
// export function PrepareFrog ( ) ; begin
56999: LD_INT 0
57001: PPUSH
// uc_side := 0 ;
57002: LD_ADDR_OWVAR 20
57006: PUSH
57007: LD_INT 0
57009: ST_TO_ADDR
// uc_nation := 0 ;
57010: LD_ADDR_OWVAR 21
57014: PUSH
57015: LD_INT 0
57017: ST_TO_ADDR
// hc_class := class_frog ;
57018: LD_ADDR_OWVAR 28
57022: PUSH
57023: LD_INT 19
57025: ST_TO_ADDR
// hc_gallery :=  ;
57026: LD_ADDR_OWVAR 33
57030: PUSH
57031: LD_STRING 
57033: ST_TO_ADDR
// end ;
57034: LD_VAR 0 1
57038: RET
// export function PrepareFish ( ) ; begin
57039: LD_INT 0
57041: PPUSH
// uc_side := 0 ;
57042: LD_ADDR_OWVAR 20
57046: PUSH
57047: LD_INT 0
57049: ST_TO_ADDR
// uc_nation := 0 ;
57050: LD_ADDR_OWVAR 21
57054: PUSH
57055: LD_INT 0
57057: ST_TO_ADDR
// hc_class := class_fish ;
57058: LD_ADDR_OWVAR 28
57062: PUSH
57063: LD_INT 20
57065: ST_TO_ADDR
// hc_gallery :=  ;
57066: LD_ADDR_OWVAR 33
57070: PUSH
57071: LD_STRING 
57073: ST_TO_ADDR
// end ;
57074: LD_VAR 0 1
57078: RET
// export function PrepareBird ( ) ; begin
57079: LD_INT 0
57081: PPUSH
// uc_side := 0 ;
57082: LD_ADDR_OWVAR 20
57086: PUSH
57087: LD_INT 0
57089: ST_TO_ADDR
// uc_nation := 0 ;
57090: LD_ADDR_OWVAR 21
57094: PUSH
57095: LD_INT 0
57097: ST_TO_ADDR
// hc_class := class_phororhacos ;
57098: LD_ADDR_OWVAR 28
57102: PUSH
57103: LD_INT 18
57105: ST_TO_ADDR
// hc_gallery :=  ;
57106: LD_ADDR_OWVAR 33
57110: PUSH
57111: LD_STRING 
57113: ST_TO_ADDR
// end ;
57114: LD_VAR 0 1
57118: RET
// export function PrepareHorse ( ) ; begin
57119: LD_INT 0
57121: PPUSH
// uc_side := 0 ;
57122: LD_ADDR_OWVAR 20
57126: PUSH
57127: LD_INT 0
57129: ST_TO_ADDR
// uc_nation := 0 ;
57130: LD_ADDR_OWVAR 21
57134: PUSH
57135: LD_INT 0
57137: ST_TO_ADDR
// hc_class := class_horse ;
57138: LD_ADDR_OWVAR 28
57142: PUSH
57143: LD_INT 21
57145: ST_TO_ADDR
// hc_gallery :=  ;
57146: LD_ADDR_OWVAR 33
57150: PUSH
57151: LD_STRING 
57153: ST_TO_ADDR
// end ;
57154: LD_VAR 0 1
57158: RET
// export function PrepareMastodont ( ) ; begin
57159: LD_INT 0
57161: PPUSH
// uc_side := 0 ;
57162: LD_ADDR_OWVAR 20
57166: PUSH
57167: LD_INT 0
57169: ST_TO_ADDR
// uc_nation := 0 ;
57170: LD_ADDR_OWVAR 21
57174: PUSH
57175: LD_INT 0
57177: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57178: LD_ADDR_OWVAR 37
57182: PUSH
57183: LD_INT 31
57185: ST_TO_ADDR
// vc_control := control_rider ;
57186: LD_ADDR_OWVAR 38
57190: PUSH
57191: LD_INT 4
57193: ST_TO_ADDR
// end ;
57194: LD_VAR 0 1
57198: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57199: LD_INT 0
57201: PPUSH
57202: PPUSH
57203: PPUSH
// uc_side = 0 ;
57204: LD_ADDR_OWVAR 20
57208: PUSH
57209: LD_INT 0
57211: ST_TO_ADDR
// uc_nation = 0 ;
57212: LD_ADDR_OWVAR 21
57216: PUSH
57217: LD_INT 0
57219: ST_TO_ADDR
// InitHc_All ( ) ;
57220: CALL_OW 584
// InitVc ;
57224: CALL_OW 20
// if mastodonts then
57228: LD_VAR 0 6
57232: IFFALSE 57299
// for i = 1 to mastodonts do
57234: LD_ADDR_VAR 0 11
57238: PUSH
57239: DOUBLE
57240: LD_INT 1
57242: DEC
57243: ST_TO_ADDR
57244: LD_VAR 0 6
57248: PUSH
57249: FOR_TO
57250: IFFALSE 57297
// begin vc_chassis := 31 ;
57252: LD_ADDR_OWVAR 37
57256: PUSH
57257: LD_INT 31
57259: ST_TO_ADDR
// vc_control := control_rider ;
57260: LD_ADDR_OWVAR 38
57264: PUSH
57265: LD_INT 4
57267: ST_TO_ADDR
// animal := CreateVehicle ;
57268: LD_ADDR_VAR 0 12
57272: PUSH
57273: CALL_OW 45
57277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57278: LD_VAR 0 12
57282: PPUSH
57283: LD_VAR 0 8
57287: PPUSH
57288: LD_INT 0
57290: PPUSH
57291: CALL 59427 0 3
// end ;
57295: GO 57249
57297: POP
57298: POP
// if horses then
57299: LD_VAR 0 5
57303: IFFALSE 57370
// for i = 1 to horses do
57305: LD_ADDR_VAR 0 11
57309: PUSH
57310: DOUBLE
57311: LD_INT 1
57313: DEC
57314: ST_TO_ADDR
57315: LD_VAR 0 5
57319: PUSH
57320: FOR_TO
57321: IFFALSE 57368
// begin hc_class := 21 ;
57323: LD_ADDR_OWVAR 28
57327: PUSH
57328: LD_INT 21
57330: ST_TO_ADDR
// hc_gallery :=  ;
57331: LD_ADDR_OWVAR 33
57335: PUSH
57336: LD_STRING 
57338: ST_TO_ADDR
// animal := CreateHuman ;
57339: LD_ADDR_VAR 0 12
57343: PUSH
57344: CALL_OW 44
57348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57349: LD_VAR 0 12
57353: PPUSH
57354: LD_VAR 0 8
57358: PPUSH
57359: LD_INT 0
57361: PPUSH
57362: CALL 59427 0 3
// end ;
57366: GO 57320
57368: POP
57369: POP
// if birds then
57370: LD_VAR 0 1
57374: IFFALSE 57441
// for i = 1 to birds do
57376: LD_ADDR_VAR 0 11
57380: PUSH
57381: DOUBLE
57382: LD_INT 1
57384: DEC
57385: ST_TO_ADDR
57386: LD_VAR 0 1
57390: PUSH
57391: FOR_TO
57392: IFFALSE 57439
// begin hc_class := 18 ;
57394: LD_ADDR_OWVAR 28
57398: PUSH
57399: LD_INT 18
57401: ST_TO_ADDR
// hc_gallery =  ;
57402: LD_ADDR_OWVAR 33
57406: PUSH
57407: LD_STRING 
57409: ST_TO_ADDR
// animal := CreateHuman ;
57410: LD_ADDR_VAR 0 12
57414: PUSH
57415: CALL_OW 44
57419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57420: LD_VAR 0 12
57424: PPUSH
57425: LD_VAR 0 8
57429: PPUSH
57430: LD_INT 0
57432: PPUSH
57433: CALL 59427 0 3
// end ;
57437: GO 57391
57439: POP
57440: POP
// if tigers then
57441: LD_VAR 0 2
57445: IFFALSE 57529
// for i = 1 to tigers do
57447: LD_ADDR_VAR 0 11
57451: PUSH
57452: DOUBLE
57453: LD_INT 1
57455: DEC
57456: ST_TO_ADDR
57457: LD_VAR 0 2
57461: PUSH
57462: FOR_TO
57463: IFFALSE 57527
// begin hc_class = class_tiger ;
57465: LD_ADDR_OWVAR 28
57469: PUSH
57470: LD_INT 14
57472: ST_TO_ADDR
// hc_gallery =  ;
57473: LD_ADDR_OWVAR 33
57477: PUSH
57478: LD_STRING 
57480: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57481: LD_ADDR_OWVAR 35
57485: PUSH
57486: LD_INT 7
57488: NEG
57489: PPUSH
57490: LD_INT 7
57492: PPUSH
57493: CALL_OW 12
57497: ST_TO_ADDR
// animal := CreateHuman ;
57498: LD_ADDR_VAR 0 12
57502: PUSH
57503: CALL_OW 44
57507: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57508: LD_VAR 0 12
57512: PPUSH
57513: LD_VAR 0 8
57517: PPUSH
57518: LD_INT 0
57520: PPUSH
57521: CALL 59427 0 3
// end ;
57525: GO 57462
57527: POP
57528: POP
// if apemans then
57529: LD_VAR 0 3
57533: IFFALSE 57656
// for i = 1 to apemans do
57535: LD_ADDR_VAR 0 11
57539: PUSH
57540: DOUBLE
57541: LD_INT 1
57543: DEC
57544: ST_TO_ADDR
57545: LD_VAR 0 3
57549: PUSH
57550: FOR_TO
57551: IFFALSE 57654
// begin hc_class = class_apeman ;
57553: LD_ADDR_OWVAR 28
57557: PUSH
57558: LD_INT 12
57560: ST_TO_ADDR
// hc_gallery =  ;
57561: LD_ADDR_OWVAR 33
57565: PUSH
57566: LD_STRING 
57568: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57569: LD_ADDR_OWVAR 35
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PPUSH
57578: LD_INT 2
57580: PPUSH
57581: CALL_OW 12
57585: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57586: LD_ADDR_OWVAR 31
57590: PUSH
57591: LD_INT 1
57593: PPUSH
57594: LD_INT 3
57596: PPUSH
57597: CALL_OW 12
57601: PUSH
57602: LD_INT 1
57604: PPUSH
57605: LD_INT 3
57607: PPUSH
57608: CALL_OW 12
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// animal := CreateHuman ;
57625: LD_ADDR_VAR 0 12
57629: PUSH
57630: CALL_OW 44
57634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57635: LD_VAR 0 12
57639: PPUSH
57640: LD_VAR 0 8
57644: PPUSH
57645: LD_INT 0
57647: PPUSH
57648: CALL 59427 0 3
// end ;
57652: GO 57550
57654: POP
57655: POP
// if enchidnas then
57656: LD_VAR 0 4
57660: IFFALSE 57727
// for i = 1 to enchidnas do
57662: LD_ADDR_VAR 0 11
57666: PUSH
57667: DOUBLE
57668: LD_INT 1
57670: DEC
57671: ST_TO_ADDR
57672: LD_VAR 0 4
57676: PUSH
57677: FOR_TO
57678: IFFALSE 57725
// begin hc_class = 13 ;
57680: LD_ADDR_OWVAR 28
57684: PUSH
57685: LD_INT 13
57687: ST_TO_ADDR
// hc_gallery =  ;
57688: LD_ADDR_OWVAR 33
57692: PUSH
57693: LD_STRING 
57695: ST_TO_ADDR
// animal := CreateHuman ;
57696: LD_ADDR_VAR 0 12
57700: PUSH
57701: CALL_OW 44
57705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57706: LD_VAR 0 12
57710: PPUSH
57711: LD_VAR 0 8
57715: PPUSH
57716: LD_INT 0
57718: PPUSH
57719: CALL 59427 0 3
// end ;
57723: GO 57677
57725: POP
57726: POP
// if fishes then
57727: LD_VAR 0 7
57731: IFFALSE 57798
// for i = 1 to fishes do
57733: LD_ADDR_VAR 0 11
57737: PUSH
57738: DOUBLE
57739: LD_INT 1
57741: DEC
57742: ST_TO_ADDR
57743: LD_VAR 0 7
57747: PUSH
57748: FOR_TO
57749: IFFALSE 57796
// begin hc_class = 20 ;
57751: LD_ADDR_OWVAR 28
57755: PUSH
57756: LD_INT 20
57758: ST_TO_ADDR
// hc_gallery =  ;
57759: LD_ADDR_OWVAR 33
57763: PUSH
57764: LD_STRING 
57766: ST_TO_ADDR
// animal := CreateHuman ;
57767: LD_ADDR_VAR 0 12
57771: PUSH
57772: CALL_OW 44
57776: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57777: LD_VAR 0 12
57781: PPUSH
57782: LD_VAR 0 9
57786: PPUSH
57787: LD_INT 0
57789: PPUSH
57790: CALL 59427 0 3
// end ;
57794: GO 57748
57796: POP
57797: POP
// end ;
57798: LD_VAR 0 10
57802: RET
// export function WantHeal ( sci , unit ) ; begin
57803: LD_INT 0
57805: PPUSH
// if GetTaskList ( sci ) > 0 then
57806: LD_VAR 0 1
57810: PPUSH
57811: CALL_OW 437
57815: PUSH
57816: LD_INT 0
57818: GREATER
57819: IFFALSE 57889
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57821: LD_VAR 0 1
57825: PPUSH
57826: CALL_OW 437
57830: PUSH
57831: LD_INT 1
57833: ARRAY
57834: PUSH
57835: LD_INT 1
57837: ARRAY
57838: PUSH
57839: LD_STRING l
57841: EQUAL
57842: PUSH
57843: LD_VAR 0 1
57847: PPUSH
57848: CALL_OW 437
57852: PUSH
57853: LD_INT 1
57855: ARRAY
57856: PUSH
57857: LD_INT 4
57859: ARRAY
57860: PUSH
57861: LD_VAR 0 2
57865: EQUAL
57866: AND
57867: IFFALSE 57879
// result := true else
57869: LD_ADDR_VAR 0 3
57873: PUSH
57874: LD_INT 1
57876: ST_TO_ADDR
57877: GO 57887
// result := false ;
57879: LD_ADDR_VAR 0 3
57883: PUSH
57884: LD_INT 0
57886: ST_TO_ADDR
// end else
57887: GO 57897
// result := false ;
57889: LD_ADDR_VAR 0 3
57893: PUSH
57894: LD_INT 0
57896: ST_TO_ADDR
// end ;
57897: LD_VAR 0 3
57901: RET
// export function HealTarget ( sci ) ; begin
57902: LD_INT 0
57904: PPUSH
// if not sci then
57905: LD_VAR 0 1
57909: NOT
57910: IFFALSE 57914
// exit ;
57912: GO 57979
// result := 0 ;
57914: LD_ADDR_VAR 0 2
57918: PUSH
57919: LD_INT 0
57921: ST_TO_ADDR
// if GetTaskList ( sci ) then
57922: LD_VAR 0 1
57926: PPUSH
57927: CALL_OW 437
57931: IFFALSE 57979
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57933: LD_VAR 0 1
57937: PPUSH
57938: CALL_OW 437
57942: PUSH
57943: LD_INT 1
57945: ARRAY
57946: PUSH
57947: LD_INT 1
57949: ARRAY
57950: PUSH
57951: LD_STRING l
57953: EQUAL
57954: IFFALSE 57979
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57956: LD_ADDR_VAR 0 2
57960: PUSH
57961: LD_VAR 0 1
57965: PPUSH
57966: CALL_OW 437
57970: PUSH
57971: LD_INT 1
57973: ARRAY
57974: PUSH
57975: LD_INT 4
57977: ARRAY
57978: ST_TO_ADDR
// end ;
57979: LD_VAR 0 2
57983: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57984: LD_INT 0
57986: PPUSH
57987: PPUSH
57988: PPUSH
57989: PPUSH
// if not base_units then
57990: LD_VAR 0 1
57994: NOT
57995: IFFALSE 57999
// exit ;
57997: GO 58086
// result := false ;
57999: LD_ADDR_VAR 0 2
58003: PUSH
58004: LD_INT 0
58006: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58007: LD_ADDR_VAR 0 5
58011: PUSH
58012: LD_VAR 0 1
58016: PPUSH
58017: LD_INT 21
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PPUSH
58027: CALL_OW 72
58031: ST_TO_ADDR
// if not tmp then
58032: LD_VAR 0 5
58036: NOT
58037: IFFALSE 58041
// exit ;
58039: GO 58086
// for i in tmp do
58041: LD_ADDR_VAR 0 3
58045: PUSH
58046: LD_VAR 0 5
58050: PUSH
58051: FOR_IN
58052: IFFALSE 58084
// begin result := EnemyInRange ( i , 22 ) ;
58054: LD_ADDR_VAR 0 2
58058: PUSH
58059: LD_VAR 0 3
58063: PPUSH
58064: LD_INT 22
58066: PPUSH
58067: CALL 55684 0 2
58071: ST_TO_ADDR
// if result then
58072: LD_VAR 0 2
58076: IFFALSE 58082
// exit ;
58078: POP
58079: POP
58080: GO 58086
// end ;
58082: GO 58051
58084: POP
58085: POP
// end ;
58086: LD_VAR 0 2
58090: RET
// export function FilterByTag ( units , tag ) ; begin
58091: LD_INT 0
58093: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58094: LD_ADDR_VAR 0 3
58098: PUSH
58099: LD_VAR 0 1
58103: PPUSH
58104: LD_INT 120
58106: PUSH
58107: LD_VAR 0 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PPUSH
58116: CALL_OW 72
58120: ST_TO_ADDR
// end ;
58121: LD_VAR 0 3
58125: RET
// export function IsDriver ( un ) ; begin
58126: LD_INT 0
58128: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58129: LD_ADDR_VAR 0 2
58133: PUSH
58134: LD_VAR 0 1
58138: PUSH
58139: LD_INT 55
58141: PUSH
58142: EMPTY
58143: LIST
58144: PPUSH
58145: CALL_OW 69
58149: IN
58150: ST_TO_ADDR
// end ;
58151: LD_VAR 0 2
58155: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58156: LD_INT 0
58158: PPUSH
58159: PPUSH
// list := [ ] ;
58160: LD_ADDR_VAR 0 5
58164: PUSH
58165: EMPTY
58166: ST_TO_ADDR
// case d of 0 :
58167: LD_VAR 0 3
58171: PUSH
58172: LD_INT 0
58174: DOUBLE
58175: EQUAL
58176: IFTRUE 58180
58178: GO 58313
58180: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58181: LD_ADDR_VAR 0 5
58185: PUSH
58186: LD_VAR 0 1
58190: PUSH
58191: LD_INT 4
58193: MINUS
58194: PUSH
58195: LD_VAR 0 2
58199: PUSH
58200: LD_INT 4
58202: MINUS
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: PUSH
58212: LD_VAR 0 1
58216: PUSH
58217: LD_INT 3
58219: MINUS
58220: PUSH
58221: LD_VAR 0 2
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: PUSH
58234: LD_VAR 0 1
58238: PUSH
58239: LD_INT 4
58241: PLUS
58242: PUSH
58243: LD_VAR 0 2
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: PUSH
58256: LD_VAR 0 1
58260: PUSH
58261: LD_INT 3
58263: PLUS
58264: PUSH
58265: LD_VAR 0 2
58269: PUSH
58270: LD_INT 3
58272: PLUS
58273: PUSH
58274: LD_INT 5
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: PUSH
58282: LD_VAR 0 1
58286: PUSH
58287: LD_VAR 0 2
58291: PUSH
58292: LD_INT 4
58294: PLUS
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: ST_TO_ADDR
// end ; 1 :
58311: GO 59011
58313: LD_INT 1
58315: DOUBLE
58316: EQUAL
58317: IFTRUE 58321
58319: GO 58454
58321: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58322: LD_ADDR_VAR 0 5
58326: PUSH
58327: LD_VAR 0 1
58331: PUSH
58332: LD_VAR 0 2
58336: PUSH
58337: LD_INT 4
58339: MINUS
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: PUSH
58349: LD_VAR 0 1
58353: PUSH
58354: LD_INT 3
58356: MINUS
58357: PUSH
58358: LD_VAR 0 2
58362: PUSH
58363: LD_INT 3
58365: MINUS
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: LIST
58374: PUSH
58375: LD_VAR 0 1
58379: PUSH
58380: LD_INT 4
58382: MINUS
58383: PUSH
58384: LD_VAR 0 2
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: PUSH
58397: LD_VAR 0 1
58401: PUSH
58402: LD_VAR 0 2
58406: PUSH
58407: LD_INT 3
58409: PLUS
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: PUSH
58419: LD_VAR 0 1
58423: PUSH
58424: LD_INT 4
58426: PLUS
58427: PUSH
58428: LD_VAR 0 2
58432: PUSH
58433: LD_INT 4
58435: PLUS
58436: PUSH
58437: LD_INT 5
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: ST_TO_ADDR
// end ; 2 :
58452: GO 59011
58454: LD_INT 2
58456: DOUBLE
58457: EQUAL
58458: IFTRUE 58462
58460: GO 58591
58462: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58463: LD_ADDR_VAR 0 5
58467: PUSH
58468: LD_VAR 0 1
58472: PUSH
58473: LD_VAR 0 2
58477: PUSH
58478: LD_INT 3
58480: MINUS
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: PUSH
58490: LD_VAR 0 1
58494: PUSH
58495: LD_INT 4
58497: PLUS
58498: PUSH
58499: LD_VAR 0 2
58503: PUSH
58504: LD_INT 4
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: PUSH
58512: LD_VAR 0 1
58516: PUSH
58517: LD_VAR 0 2
58521: PUSH
58522: LD_INT 4
58524: PLUS
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: LIST
58533: PUSH
58534: LD_VAR 0 1
58538: PUSH
58539: LD_INT 3
58541: MINUS
58542: PUSH
58543: LD_VAR 0 2
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: PUSH
58556: LD_VAR 0 1
58560: PUSH
58561: LD_INT 4
58563: MINUS
58564: PUSH
58565: LD_VAR 0 2
58569: PUSH
58570: LD_INT 4
58572: MINUS
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// end ; 3 :
58589: GO 59011
58591: LD_INT 3
58593: DOUBLE
58594: EQUAL
58595: IFTRUE 58599
58597: GO 58732
58599: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58600: LD_ADDR_VAR 0 5
58604: PUSH
58605: LD_VAR 0 1
58609: PUSH
58610: LD_INT 3
58612: PLUS
58613: PUSH
58614: LD_VAR 0 2
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_INT 4
58634: PLUS
58635: PUSH
58636: LD_VAR 0 2
58640: PUSH
58641: LD_INT 4
58643: PLUS
58644: PUSH
58645: LD_INT 5
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: PUSH
58653: LD_VAR 0 1
58657: PUSH
58658: LD_INT 4
58660: MINUS
58661: PUSH
58662: LD_VAR 0 2
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: PUSH
58675: LD_VAR 0 1
58679: PUSH
58680: LD_VAR 0 2
58684: PUSH
58685: LD_INT 4
58687: MINUS
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: PUSH
58697: LD_VAR 0 1
58701: PUSH
58702: LD_INT 3
58704: MINUS
58705: PUSH
58706: LD_VAR 0 2
58710: PUSH
58711: LD_INT 3
58713: MINUS
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: ST_TO_ADDR
// end ; 4 :
58730: GO 59011
58732: LD_INT 4
58734: DOUBLE
58735: EQUAL
58736: IFTRUE 58740
58738: GO 58873
58740: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58741: LD_ADDR_VAR 0 5
58745: PUSH
58746: LD_VAR 0 1
58750: PUSH
58751: LD_VAR 0 2
58755: PUSH
58756: LD_INT 4
58758: PLUS
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: PUSH
58768: LD_VAR 0 1
58772: PUSH
58773: LD_INT 3
58775: PLUS
58776: PUSH
58777: LD_VAR 0 2
58781: PUSH
58782: LD_INT 3
58784: PLUS
58785: PUSH
58786: LD_INT 5
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: PUSH
58794: LD_VAR 0 1
58798: PUSH
58799: LD_INT 4
58801: PLUS
58802: PUSH
58803: LD_VAR 0 2
58807: PUSH
58808: LD_INT 4
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: PUSH
58816: LD_VAR 0 1
58820: PUSH
58821: LD_VAR 0 2
58825: PUSH
58826: LD_INT 3
58828: MINUS
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: PUSH
58838: LD_VAR 0 1
58842: PUSH
58843: LD_INT 4
58845: MINUS
58846: PUSH
58847: LD_VAR 0 2
58851: PUSH
58852: LD_INT 4
58854: MINUS
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: ST_TO_ADDR
// end ; 5 :
58871: GO 59011
58873: LD_INT 5
58875: DOUBLE
58876: EQUAL
58877: IFTRUE 58881
58879: GO 59010
58881: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58882: LD_ADDR_VAR 0 5
58886: PUSH
58887: LD_VAR 0 1
58891: PUSH
58892: LD_INT 4
58894: MINUS
58895: PUSH
58896: LD_VAR 0 2
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: PUSH
58909: LD_VAR 0 1
58913: PUSH
58914: LD_VAR 0 2
58918: PUSH
58919: LD_INT 4
58921: MINUS
58922: PUSH
58923: LD_INT 3
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: PUSH
58931: LD_VAR 0 1
58935: PUSH
58936: LD_INT 4
58938: PLUS
58939: PUSH
58940: LD_VAR 0 2
58944: PUSH
58945: LD_INT 4
58947: PLUS
58948: PUSH
58949: LD_INT 5
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: LIST
58956: PUSH
58957: LD_VAR 0 1
58961: PUSH
58962: LD_INT 3
58964: PLUS
58965: PUSH
58966: LD_VAR 0 2
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: PUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_VAR 0 2
58988: PUSH
58989: LD_INT 3
58991: PLUS
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: ST_TO_ADDR
// end ; end ;
59008: GO 59011
59010: POP
// result := list ;
59011: LD_ADDR_VAR 0 4
59015: PUSH
59016: LD_VAR 0 5
59020: ST_TO_ADDR
// end ;
59021: LD_VAR 0 4
59025: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59026: LD_INT 0
59028: PPUSH
59029: PPUSH
59030: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59031: LD_VAR 0 1
59035: NOT
59036: PUSH
59037: LD_VAR 0 2
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: LD_INT 4
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: IN
59060: NOT
59061: OR
59062: IFFALSE 59066
// exit ;
59064: GO 59149
// tmp := [ ] ;
59066: LD_ADDR_VAR 0 5
59070: PUSH
59071: EMPTY
59072: ST_TO_ADDR
// for i in units do
59073: LD_ADDR_VAR 0 4
59077: PUSH
59078: LD_VAR 0 1
59082: PUSH
59083: FOR_IN
59084: IFFALSE 59118
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59086: LD_ADDR_VAR 0 5
59090: PUSH
59091: LD_VAR 0 5
59095: PPUSH
59096: LD_VAR 0 4
59100: PPUSH
59101: LD_VAR 0 2
59105: PPUSH
59106: CALL_OW 259
59110: PPUSH
59111: CALL 60522 0 2
59115: ST_TO_ADDR
59116: GO 59083
59118: POP
59119: POP
// if not tmp then
59120: LD_VAR 0 5
59124: NOT
59125: IFFALSE 59129
// exit ;
59127: GO 59149
// result := SortListByListDesc ( units , tmp ) ;
59129: LD_ADDR_VAR 0 3
59133: PUSH
59134: LD_VAR 0 1
59138: PPUSH
59139: LD_VAR 0 5
59143: PPUSH
59144: CALL_OW 77
59148: ST_TO_ADDR
// end ;
59149: LD_VAR 0 3
59153: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59154: LD_INT 0
59156: PPUSH
59157: PPUSH
59158: PPUSH
// result := false ;
59159: LD_ADDR_VAR 0 3
59163: PUSH
59164: LD_INT 0
59166: ST_TO_ADDR
// if not building then
59167: LD_VAR 0 2
59171: NOT
59172: IFFALSE 59176
// exit ;
59174: GO 59314
// x := GetX ( building ) ;
59176: LD_ADDR_VAR 0 4
59180: PUSH
59181: LD_VAR 0 2
59185: PPUSH
59186: CALL_OW 250
59190: ST_TO_ADDR
// y := GetY ( building ) ;
59191: LD_ADDR_VAR 0 5
59195: PUSH
59196: LD_VAR 0 2
59200: PPUSH
59201: CALL_OW 251
59205: ST_TO_ADDR
// if not x or not y then
59206: LD_VAR 0 4
59210: NOT
59211: PUSH
59212: LD_VAR 0 5
59216: NOT
59217: OR
59218: IFFALSE 59222
// exit ;
59220: GO 59314
// if GetTaskList ( unit ) then
59222: LD_VAR 0 1
59226: PPUSH
59227: CALL_OW 437
59231: IFFALSE 59314
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59233: LD_STRING e
59235: PUSH
59236: LD_VAR 0 1
59240: PPUSH
59241: CALL_OW 437
59245: PUSH
59246: LD_INT 1
59248: ARRAY
59249: PUSH
59250: LD_INT 1
59252: ARRAY
59253: EQUAL
59254: PUSH
59255: LD_VAR 0 4
59259: PUSH
59260: LD_VAR 0 1
59264: PPUSH
59265: CALL_OW 437
59269: PUSH
59270: LD_INT 1
59272: ARRAY
59273: PUSH
59274: LD_INT 2
59276: ARRAY
59277: EQUAL
59278: AND
59279: PUSH
59280: LD_VAR 0 5
59284: PUSH
59285: LD_VAR 0 1
59289: PPUSH
59290: CALL_OW 437
59294: PUSH
59295: LD_INT 1
59297: ARRAY
59298: PUSH
59299: LD_INT 3
59301: ARRAY
59302: EQUAL
59303: AND
59304: IFFALSE 59314
// result := true end ;
59306: LD_ADDR_VAR 0 3
59310: PUSH
59311: LD_INT 1
59313: ST_TO_ADDR
// end ;
59314: LD_VAR 0 3
59318: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59319: LD_INT 0
59321: PPUSH
// result := false ;
59322: LD_ADDR_VAR 0 4
59326: PUSH
59327: LD_INT 0
59329: ST_TO_ADDR
// if GetTaskList ( unit ) then
59330: LD_VAR 0 1
59334: PPUSH
59335: CALL_OW 437
59339: IFFALSE 59422
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59341: LD_STRING M
59343: PUSH
59344: LD_VAR 0 1
59348: PPUSH
59349: CALL_OW 437
59353: PUSH
59354: LD_INT 1
59356: ARRAY
59357: PUSH
59358: LD_INT 1
59360: ARRAY
59361: EQUAL
59362: PUSH
59363: LD_VAR 0 2
59367: PUSH
59368: LD_VAR 0 1
59372: PPUSH
59373: CALL_OW 437
59377: PUSH
59378: LD_INT 1
59380: ARRAY
59381: PUSH
59382: LD_INT 2
59384: ARRAY
59385: EQUAL
59386: AND
59387: PUSH
59388: LD_VAR 0 3
59392: PUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 437
59402: PUSH
59403: LD_INT 1
59405: ARRAY
59406: PUSH
59407: LD_INT 3
59409: ARRAY
59410: EQUAL
59411: AND
59412: IFFALSE 59422
// result := true ;
59414: LD_ADDR_VAR 0 4
59418: PUSH
59419: LD_INT 1
59421: ST_TO_ADDR
// end ; end ;
59422: LD_VAR 0 4
59426: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59427: LD_INT 0
59429: PPUSH
59430: PPUSH
59431: PPUSH
59432: PPUSH
// if not unit or not area then
59433: LD_VAR 0 1
59437: NOT
59438: PUSH
59439: LD_VAR 0 2
59443: NOT
59444: OR
59445: IFFALSE 59449
// exit ;
59447: GO 59625
// tmp := AreaToList ( area , i ) ;
59449: LD_ADDR_VAR 0 6
59453: PUSH
59454: LD_VAR 0 2
59458: PPUSH
59459: LD_VAR 0 5
59463: PPUSH
59464: CALL_OW 517
59468: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59469: LD_ADDR_VAR 0 5
59473: PUSH
59474: DOUBLE
59475: LD_INT 1
59477: DEC
59478: ST_TO_ADDR
59479: LD_VAR 0 6
59483: PUSH
59484: LD_INT 1
59486: ARRAY
59487: PUSH
59488: FOR_TO
59489: IFFALSE 59623
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59491: LD_ADDR_VAR 0 7
59495: PUSH
59496: LD_VAR 0 6
59500: PUSH
59501: LD_INT 1
59503: ARRAY
59504: PUSH
59505: LD_VAR 0 5
59509: ARRAY
59510: PUSH
59511: LD_VAR 0 6
59515: PUSH
59516: LD_INT 2
59518: ARRAY
59519: PUSH
59520: LD_VAR 0 5
59524: ARRAY
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59530: LD_INT 92
59532: PUSH
59533: LD_VAR 0 7
59537: PUSH
59538: LD_INT 1
59540: ARRAY
59541: PUSH
59542: LD_VAR 0 7
59546: PUSH
59547: LD_INT 2
59549: ARRAY
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: PPUSH
59560: CALL_OW 69
59564: PUSH
59565: LD_INT 0
59567: EQUAL
59568: IFFALSE 59621
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59570: LD_VAR 0 1
59574: PPUSH
59575: LD_VAR 0 7
59579: PUSH
59580: LD_INT 1
59582: ARRAY
59583: PPUSH
59584: LD_VAR 0 7
59588: PUSH
59589: LD_INT 2
59591: ARRAY
59592: PPUSH
59593: LD_VAR 0 3
59597: PPUSH
59598: CALL_OW 48
// result := IsPlaced ( unit ) ;
59602: LD_ADDR_VAR 0 4
59606: PUSH
59607: LD_VAR 0 1
59611: PPUSH
59612: CALL_OW 305
59616: ST_TO_ADDR
// exit ;
59617: POP
59618: POP
59619: GO 59625
// end ; end ;
59621: GO 59488
59623: POP
59624: POP
// end ;
59625: LD_VAR 0 4
59629: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59630: LD_INT 0
59632: PPUSH
59633: PPUSH
59634: PPUSH
// if not side or side > 8 then
59635: LD_VAR 0 1
59639: NOT
59640: PUSH
59641: LD_VAR 0 1
59645: PUSH
59646: LD_INT 8
59648: GREATER
59649: OR
59650: IFFALSE 59654
// exit ;
59652: GO 59841
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59654: LD_ADDR_VAR 0 4
59658: PUSH
59659: LD_INT 22
59661: PUSH
59662: LD_VAR 0 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 21
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PPUSH
59685: CALL_OW 69
59689: ST_TO_ADDR
// if not tmp then
59690: LD_VAR 0 4
59694: NOT
59695: IFFALSE 59699
// exit ;
59697: GO 59841
// enable_addtolog := true ;
59699: LD_ADDR_OWVAR 81
59703: PUSH
59704: LD_INT 1
59706: ST_TO_ADDR
// AddToLog ( [ ) ;
59707: LD_STRING [
59709: PPUSH
59710: CALL_OW 561
// for i in tmp do
59714: LD_ADDR_VAR 0 3
59718: PUSH
59719: LD_VAR 0 4
59723: PUSH
59724: FOR_IN
59725: IFFALSE 59832
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59727: LD_STRING [
59729: PUSH
59730: LD_VAR 0 3
59734: PPUSH
59735: CALL_OW 266
59739: STR
59740: PUSH
59741: LD_STRING , 
59743: STR
59744: PUSH
59745: LD_VAR 0 3
59749: PPUSH
59750: CALL_OW 250
59754: STR
59755: PUSH
59756: LD_STRING , 
59758: STR
59759: PUSH
59760: LD_VAR 0 3
59764: PPUSH
59765: CALL_OW 251
59769: STR
59770: PUSH
59771: LD_STRING , 
59773: STR
59774: PUSH
59775: LD_VAR 0 3
59779: PPUSH
59780: CALL_OW 254
59784: STR
59785: PUSH
59786: LD_STRING , 
59788: STR
59789: PUSH
59790: LD_VAR 0 3
59794: PPUSH
59795: LD_INT 1
59797: PPUSH
59798: CALL_OW 268
59802: STR
59803: PUSH
59804: LD_STRING , 
59806: STR
59807: PUSH
59808: LD_VAR 0 3
59812: PPUSH
59813: LD_INT 2
59815: PPUSH
59816: CALL_OW 268
59820: STR
59821: PUSH
59822: LD_STRING ],
59824: STR
59825: PPUSH
59826: CALL_OW 561
// end ;
59830: GO 59724
59832: POP
59833: POP
// AddToLog ( ]; ) ;
59834: LD_STRING ];
59836: PPUSH
59837: CALL_OW 561
// end ;
59841: LD_VAR 0 2
59845: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59846: LD_INT 0
59848: PPUSH
59849: PPUSH
59850: PPUSH
59851: PPUSH
59852: PPUSH
// if not area or not rate or not max then
59853: LD_VAR 0 1
59857: NOT
59858: PUSH
59859: LD_VAR 0 2
59863: NOT
59864: OR
59865: PUSH
59866: LD_VAR 0 4
59870: NOT
59871: OR
59872: IFFALSE 59876
// exit ;
59874: GO 60065
// while 1 do
59876: LD_INT 1
59878: IFFALSE 60065
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59880: LD_ADDR_VAR 0 9
59884: PUSH
59885: LD_VAR 0 1
59889: PPUSH
59890: LD_INT 1
59892: PPUSH
59893: CALL_OW 287
59897: PUSH
59898: LD_INT 10
59900: MUL
59901: ST_TO_ADDR
// r := rate / 10 ;
59902: LD_ADDR_VAR 0 7
59906: PUSH
59907: LD_VAR 0 2
59911: PUSH
59912: LD_INT 10
59914: DIVREAL
59915: ST_TO_ADDR
// time := 1 1$00 ;
59916: LD_ADDR_VAR 0 8
59920: PUSH
59921: LD_INT 2100
59923: ST_TO_ADDR
// if amount < min then
59924: LD_VAR 0 9
59928: PUSH
59929: LD_VAR 0 3
59933: LESS
59934: IFFALSE 59952
// r := r * 2 else
59936: LD_ADDR_VAR 0 7
59940: PUSH
59941: LD_VAR 0 7
59945: PUSH
59946: LD_INT 2
59948: MUL
59949: ST_TO_ADDR
59950: GO 59978
// if amount > max then
59952: LD_VAR 0 9
59956: PUSH
59957: LD_VAR 0 4
59961: GREATER
59962: IFFALSE 59978
// r := r / 2 ;
59964: LD_ADDR_VAR 0 7
59968: PUSH
59969: LD_VAR 0 7
59973: PUSH
59974: LD_INT 2
59976: DIVREAL
59977: ST_TO_ADDR
// time := time / r ;
59978: LD_ADDR_VAR 0 8
59982: PUSH
59983: LD_VAR 0 8
59987: PUSH
59988: LD_VAR 0 7
59992: DIVREAL
59993: ST_TO_ADDR
// if time < 0 then
59994: LD_VAR 0 8
59998: PUSH
59999: LD_INT 0
60001: LESS
60002: IFFALSE 60019
// time := time * - 1 ;
60004: LD_ADDR_VAR 0 8
60008: PUSH
60009: LD_VAR 0 8
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: MUL
60018: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60019: LD_VAR 0 8
60023: PUSH
60024: LD_INT 35
60026: PPUSH
60027: LD_INT 875
60029: PPUSH
60030: CALL_OW 12
60034: PLUS
60035: PPUSH
60036: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60040: LD_INT 1
60042: PPUSH
60043: LD_INT 5
60045: PPUSH
60046: CALL_OW 12
60050: PPUSH
60051: LD_VAR 0 1
60055: PPUSH
60056: LD_INT 1
60058: PPUSH
60059: CALL_OW 55
// end ;
60063: GO 59876
// end ;
60065: LD_VAR 0 5
60069: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60070: LD_INT 0
60072: PPUSH
60073: PPUSH
60074: PPUSH
60075: PPUSH
60076: PPUSH
60077: PPUSH
60078: PPUSH
60079: PPUSH
// if not turrets or not factories then
60080: LD_VAR 0 1
60084: NOT
60085: PUSH
60086: LD_VAR 0 2
60090: NOT
60091: OR
60092: IFFALSE 60096
// exit ;
60094: GO 60403
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60096: LD_ADDR_VAR 0 10
60100: PUSH
60101: LD_INT 5
60103: PUSH
60104: LD_INT 6
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 4
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: PUSH
60124: LD_INT 5
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 24
60138: PUSH
60139: LD_INT 25
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 23
60148: PUSH
60149: LD_INT 27
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 42
60162: PUSH
60163: LD_INT 43
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 44
60172: PUSH
60173: LD_INT 46
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 45
60182: PUSH
60183: LD_INT 47
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: LIST
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: ST_TO_ADDR
// result := [ ] ;
60200: LD_ADDR_VAR 0 3
60204: PUSH
60205: EMPTY
60206: ST_TO_ADDR
// for i in turrets do
60207: LD_ADDR_VAR 0 4
60211: PUSH
60212: LD_VAR 0 1
60216: PUSH
60217: FOR_IN
60218: IFFALSE 60401
// begin nat := GetNation ( i ) ;
60220: LD_ADDR_VAR 0 7
60224: PUSH
60225: LD_VAR 0 4
60229: PPUSH
60230: CALL_OW 248
60234: ST_TO_ADDR
// weapon := 0 ;
60235: LD_ADDR_VAR 0 8
60239: PUSH
60240: LD_INT 0
60242: ST_TO_ADDR
// if not nat then
60243: LD_VAR 0 7
60247: NOT
60248: IFFALSE 60252
// continue ;
60250: GO 60217
// for j in list [ nat ] do
60252: LD_ADDR_VAR 0 5
60256: PUSH
60257: LD_VAR 0 10
60261: PUSH
60262: LD_VAR 0 7
60266: ARRAY
60267: PUSH
60268: FOR_IN
60269: IFFALSE 60310
// if GetBWeapon ( i ) = j [ 1 ] then
60271: LD_VAR 0 4
60275: PPUSH
60276: CALL_OW 269
60280: PUSH
60281: LD_VAR 0 5
60285: PUSH
60286: LD_INT 1
60288: ARRAY
60289: EQUAL
60290: IFFALSE 60308
// begin weapon := j [ 2 ] ;
60292: LD_ADDR_VAR 0 8
60296: PUSH
60297: LD_VAR 0 5
60301: PUSH
60302: LD_INT 2
60304: ARRAY
60305: ST_TO_ADDR
// break ;
60306: GO 60310
// end ;
60308: GO 60268
60310: POP
60311: POP
// if not weapon then
60312: LD_VAR 0 8
60316: NOT
60317: IFFALSE 60321
// continue ;
60319: GO 60217
// for k in factories do
60321: LD_ADDR_VAR 0 6
60325: PUSH
60326: LD_VAR 0 2
60330: PUSH
60331: FOR_IN
60332: IFFALSE 60397
// begin weapons := AvailableWeaponList ( k ) ;
60334: LD_ADDR_VAR 0 9
60338: PUSH
60339: LD_VAR 0 6
60343: PPUSH
60344: CALL_OW 478
60348: ST_TO_ADDR
// if not weapons then
60349: LD_VAR 0 9
60353: NOT
60354: IFFALSE 60358
// continue ;
60356: GO 60331
// if weapon in weapons then
60358: LD_VAR 0 8
60362: PUSH
60363: LD_VAR 0 9
60367: IN
60368: IFFALSE 60395
// begin result := [ i , weapon ] ;
60370: LD_ADDR_VAR 0 3
60374: PUSH
60375: LD_VAR 0 4
60379: PUSH
60380: LD_VAR 0 8
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: ST_TO_ADDR
// exit ;
60389: POP
60390: POP
60391: POP
60392: POP
60393: GO 60403
// end ; end ;
60395: GO 60331
60397: POP
60398: POP
// end ;
60399: GO 60217
60401: POP
60402: POP
// end ;
60403: LD_VAR 0 3
60407: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60408: LD_INT 0
60410: PPUSH
// if not side or side > 8 then
60411: LD_VAR 0 3
60415: NOT
60416: PUSH
60417: LD_VAR 0 3
60421: PUSH
60422: LD_INT 8
60424: GREATER
60425: OR
60426: IFFALSE 60430
// exit ;
60428: GO 60489
// if not range then
60430: LD_VAR 0 4
60434: NOT
60435: IFFALSE 60446
// range := - 12 ;
60437: LD_ADDR_VAR 0 4
60441: PUSH
60442: LD_INT 12
60444: NEG
60445: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60446: LD_VAR 0 1
60450: PPUSH
60451: LD_VAR 0 2
60455: PPUSH
60456: LD_VAR 0 3
60460: PPUSH
60461: LD_VAR 0 4
60465: PPUSH
60466: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60470: LD_VAR 0 1
60474: PPUSH
60475: LD_VAR 0 2
60479: PPUSH
60480: LD_VAR 0 3
60484: PPUSH
60485: CALL_OW 331
// end ;
60489: LD_VAR 0 5
60493: RET
// export function Video ( mode ) ; begin
60494: LD_INT 0
60496: PPUSH
// ingame_video = mode ;
60497: LD_ADDR_OWVAR 52
60501: PUSH
60502: LD_VAR 0 1
60506: ST_TO_ADDR
// interface_hidden = mode ;
60507: LD_ADDR_OWVAR 54
60511: PUSH
60512: LD_VAR 0 1
60516: ST_TO_ADDR
// end ;
60517: LD_VAR 0 2
60521: RET
// export function Join ( array , element ) ; begin
60522: LD_INT 0
60524: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60525: LD_ADDR_VAR 0 3
60529: PUSH
60530: LD_VAR 0 1
60534: PPUSH
60535: LD_VAR 0 1
60539: PUSH
60540: LD_INT 1
60542: PLUS
60543: PPUSH
60544: LD_VAR 0 2
60548: PPUSH
60549: CALL_OW 1
60553: ST_TO_ADDR
// end ;
60554: LD_VAR 0 3
60558: RET
// export function JoinUnion ( array , element ) ; begin
60559: LD_INT 0
60561: PPUSH
// result := array union element ;
60562: LD_ADDR_VAR 0 3
60566: PUSH
60567: LD_VAR 0 1
60571: PUSH
60572: LD_VAR 0 2
60576: UNION
60577: ST_TO_ADDR
// end ;
60578: LD_VAR 0 3
60582: RET
// export function GetBehemoths ( side ) ; begin
60583: LD_INT 0
60585: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60586: LD_ADDR_VAR 0 2
60590: PUSH
60591: LD_INT 22
60593: PUSH
60594: LD_VAR 0 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 31
60605: PUSH
60606: LD_INT 25
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PPUSH
60617: CALL_OW 69
60621: ST_TO_ADDR
// end ;
60622: LD_VAR 0 2
60626: RET
// export function Shuffle ( array ) ; var i , index ; begin
60627: LD_INT 0
60629: PPUSH
60630: PPUSH
60631: PPUSH
// result := [ ] ;
60632: LD_ADDR_VAR 0 2
60636: PUSH
60637: EMPTY
60638: ST_TO_ADDR
// if not array then
60639: LD_VAR 0 1
60643: NOT
60644: IFFALSE 60648
// exit ;
60646: GO 60747
// Randomize ;
60648: CALL_OW 10
// for i = array downto 1 do
60652: LD_ADDR_VAR 0 3
60656: PUSH
60657: DOUBLE
60658: LD_VAR 0 1
60662: INC
60663: ST_TO_ADDR
60664: LD_INT 1
60666: PUSH
60667: FOR_DOWNTO
60668: IFFALSE 60745
// begin index := rand ( 1 , array ) ;
60670: LD_ADDR_VAR 0 4
60674: PUSH
60675: LD_INT 1
60677: PPUSH
60678: LD_VAR 0 1
60682: PPUSH
60683: CALL_OW 12
60687: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60688: LD_ADDR_VAR 0 2
60692: PUSH
60693: LD_VAR 0 2
60697: PPUSH
60698: LD_VAR 0 2
60702: PUSH
60703: LD_INT 1
60705: PLUS
60706: PPUSH
60707: LD_VAR 0 1
60711: PUSH
60712: LD_VAR 0 4
60716: ARRAY
60717: PPUSH
60718: CALL_OW 2
60722: ST_TO_ADDR
// array := Delete ( array , index ) ;
60723: LD_ADDR_VAR 0 1
60727: PUSH
60728: LD_VAR 0 1
60732: PPUSH
60733: LD_VAR 0 4
60737: PPUSH
60738: CALL_OW 3
60742: ST_TO_ADDR
// end ;
60743: GO 60667
60745: POP
60746: POP
// end ;
60747: LD_VAR 0 2
60751: RET
// export function GetBaseMaterials ( base ) ; begin
60752: LD_INT 0
60754: PPUSH
// result := [ 0 , 0 , 0 ] ;
60755: LD_ADDR_VAR 0 2
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: LIST
60773: ST_TO_ADDR
// if not base then
60774: LD_VAR 0 1
60778: NOT
60779: IFFALSE 60783
// exit ;
60781: GO 60832
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60783: LD_ADDR_VAR 0 2
60787: PUSH
60788: LD_VAR 0 1
60792: PPUSH
60793: LD_INT 1
60795: PPUSH
60796: CALL_OW 275
60800: PUSH
60801: LD_VAR 0 1
60805: PPUSH
60806: LD_INT 2
60808: PPUSH
60809: CALL_OW 275
60813: PUSH
60814: LD_VAR 0 1
60818: PPUSH
60819: LD_INT 3
60821: PPUSH
60822: CALL_OW 275
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// end ;
60832: LD_VAR 0 2
60836: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60837: LD_INT 0
60839: PPUSH
60840: PPUSH
// result := array ;
60841: LD_ADDR_VAR 0 3
60845: PUSH
60846: LD_VAR 0 1
60850: ST_TO_ADDR
// if size >= result then
60851: LD_VAR 0 2
60855: PUSH
60856: LD_VAR 0 3
60860: GREATEREQUAL
60861: IFFALSE 60865
// exit ;
60863: GO 60915
// if size then
60865: LD_VAR 0 2
60869: IFFALSE 60915
// for i := array downto size do
60871: LD_ADDR_VAR 0 4
60875: PUSH
60876: DOUBLE
60877: LD_VAR 0 1
60881: INC
60882: ST_TO_ADDR
60883: LD_VAR 0 2
60887: PUSH
60888: FOR_DOWNTO
60889: IFFALSE 60913
// result := Delete ( result , result ) ;
60891: LD_ADDR_VAR 0 3
60895: PUSH
60896: LD_VAR 0 3
60900: PPUSH
60901: LD_VAR 0 3
60905: PPUSH
60906: CALL_OW 3
60910: ST_TO_ADDR
60911: GO 60888
60913: POP
60914: POP
// end ;
60915: LD_VAR 0 3
60919: RET
// export function ComExit ( unit ) ; var tmp ; begin
60920: LD_INT 0
60922: PPUSH
60923: PPUSH
// if not IsInUnit ( unit ) then
60924: LD_VAR 0 1
60928: PPUSH
60929: CALL_OW 310
60933: NOT
60934: IFFALSE 60938
// exit ;
60936: GO 60998
// tmp := IsInUnit ( unit ) ;
60938: LD_ADDR_VAR 0 3
60942: PUSH
60943: LD_VAR 0 1
60947: PPUSH
60948: CALL_OW 310
60952: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60953: LD_VAR 0 3
60957: PPUSH
60958: CALL_OW 247
60962: PUSH
60963: LD_INT 2
60965: EQUAL
60966: IFFALSE 60979
// ComExitVehicle ( unit ) else
60968: LD_VAR 0 1
60972: PPUSH
60973: CALL_OW 121
60977: GO 60988
// ComExitBuilding ( unit ) ;
60979: LD_VAR 0 1
60983: PPUSH
60984: CALL_OW 122
// result := tmp ;
60988: LD_ADDR_VAR 0 2
60992: PUSH
60993: LD_VAR 0 3
60997: ST_TO_ADDR
// end ;
60998: LD_VAR 0 2
61002: RET
// export function ComExitAll ( units ) ; var i ; begin
61003: LD_INT 0
61005: PPUSH
61006: PPUSH
// if not units then
61007: LD_VAR 0 1
61011: NOT
61012: IFFALSE 61016
// exit ;
61014: GO 61042
// for i in units do
61016: LD_ADDR_VAR 0 3
61020: PUSH
61021: LD_VAR 0 1
61025: PUSH
61026: FOR_IN
61027: IFFALSE 61040
// ComExit ( i ) ;
61029: LD_VAR 0 3
61033: PPUSH
61034: CALL 60920 0 1
61038: GO 61026
61040: POP
61041: POP
// end ;
61042: LD_VAR 0 2
61046: RET
// export function ResetHc ; begin
61047: LD_INT 0
61049: PPUSH
// InitHc ;
61050: CALL_OW 19
// hc_importance := 0 ;
61054: LD_ADDR_OWVAR 32
61058: PUSH
61059: LD_INT 0
61061: ST_TO_ADDR
// end ;
61062: LD_VAR 0 1
61066: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61067: LD_INT 0
61069: PPUSH
61070: PPUSH
61071: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61072: LD_ADDR_VAR 0 6
61076: PUSH
61077: LD_VAR 0 1
61081: PUSH
61082: LD_VAR 0 3
61086: PLUS
61087: PUSH
61088: LD_INT 2
61090: DIV
61091: ST_TO_ADDR
// if _x < 0 then
61092: LD_VAR 0 6
61096: PUSH
61097: LD_INT 0
61099: LESS
61100: IFFALSE 61117
// _x := _x * - 1 ;
61102: LD_ADDR_VAR 0 6
61106: PUSH
61107: LD_VAR 0 6
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: MUL
61116: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61117: LD_ADDR_VAR 0 7
61121: PUSH
61122: LD_VAR 0 2
61126: PUSH
61127: LD_VAR 0 4
61131: PLUS
61132: PUSH
61133: LD_INT 2
61135: DIV
61136: ST_TO_ADDR
// if _y < 0 then
61137: LD_VAR 0 7
61141: PUSH
61142: LD_INT 0
61144: LESS
61145: IFFALSE 61162
// _y := _y * - 1 ;
61147: LD_ADDR_VAR 0 7
61151: PUSH
61152: LD_VAR 0 7
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: MUL
61161: ST_TO_ADDR
// result := [ _x , _y ] ;
61162: LD_ADDR_VAR 0 5
61166: PUSH
61167: LD_VAR 0 6
61171: PUSH
61172: LD_VAR 0 7
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: ST_TO_ADDR
// end ;
61181: LD_VAR 0 5
61185: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61186: LD_INT 0
61188: PPUSH
61189: PPUSH
61190: PPUSH
61191: PPUSH
// task := GetTaskList ( unit ) ;
61192: LD_ADDR_VAR 0 7
61196: PUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: CALL_OW 437
61206: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61207: LD_VAR 0 7
61211: NOT
61212: PUSH
61213: LD_VAR 0 1
61217: PPUSH
61218: LD_VAR 0 2
61222: PPUSH
61223: CALL_OW 308
61227: NOT
61228: AND
61229: IFFALSE 61233
// exit ;
61231: GO 61351
// if IsInArea ( unit , area ) then
61233: LD_VAR 0 1
61237: PPUSH
61238: LD_VAR 0 2
61242: PPUSH
61243: CALL_OW 308
61247: IFFALSE 61265
// begin ComMoveToArea ( unit , goAway ) ;
61249: LD_VAR 0 1
61253: PPUSH
61254: LD_VAR 0 3
61258: PPUSH
61259: CALL_OW 113
// exit ;
61263: GO 61351
// end ; if task [ 1 ] [ 1 ] <> M then
61265: LD_VAR 0 7
61269: PUSH
61270: LD_INT 1
61272: ARRAY
61273: PUSH
61274: LD_INT 1
61276: ARRAY
61277: PUSH
61278: LD_STRING M
61280: NONEQUAL
61281: IFFALSE 61285
// exit ;
61283: GO 61351
// x := task [ 1 ] [ 2 ] ;
61285: LD_ADDR_VAR 0 5
61289: PUSH
61290: LD_VAR 0 7
61294: PUSH
61295: LD_INT 1
61297: ARRAY
61298: PUSH
61299: LD_INT 2
61301: ARRAY
61302: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61303: LD_ADDR_VAR 0 6
61307: PUSH
61308: LD_VAR 0 7
61312: PUSH
61313: LD_INT 1
61315: ARRAY
61316: PUSH
61317: LD_INT 3
61319: ARRAY
61320: ST_TO_ADDR
// if InArea ( x , y , area ) then
61321: LD_VAR 0 5
61325: PPUSH
61326: LD_VAR 0 6
61330: PPUSH
61331: LD_VAR 0 2
61335: PPUSH
61336: CALL_OW 309
61340: IFFALSE 61351
// ComStop ( unit ) ;
61342: LD_VAR 0 1
61346: PPUSH
61347: CALL_OW 141
// end ;
61351: LD_VAR 0 4
61355: RET
// export function Abs ( value ) ; begin
61356: LD_INT 0
61358: PPUSH
// result := value ;
61359: LD_ADDR_VAR 0 2
61363: PUSH
61364: LD_VAR 0 1
61368: ST_TO_ADDR
// if value < 0 then
61369: LD_VAR 0 1
61373: PUSH
61374: LD_INT 0
61376: LESS
61377: IFFALSE 61394
// result := value * - 1 ;
61379: LD_ADDR_VAR 0 2
61383: PUSH
61384: LD_VAR 0 1
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: MUL
61393: ST_TO_ADDR
// end ;
61394: LD_VAR 0 2
61398: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61399: LD_INT 0
61401: PPUSH
61402: PPUSH
61403: PPUSH
61404: PPUSH
61405: PPUSH
61406: PPUSH
61407: PPUSH
61408: PPUSH
// if not unit or not building then
61409: LD_VAR 0 1
61413: NOT
61414: PUSH
61415: LD_VAR 0 2
61419: NOT
61420: OR
61421: IFFALSE 61425
// exit ;
61423: GO 61651
// x := GetX ( building ) ;
61425: LD_ADDR_VAR 0 4
61429: PUSH
61430: LD_VAR 0 2
61434: PPUSH
61435: CALL_OW 250
61439: ST_TO_ADDR
// y := GetY ( building ) ;
61440: LD_ADDR_VAR 0 6
61444: PUSH
61445: LD_VAR 0 2
61449: PPUSH
61450: CALL_OW 251
61454: ST_TO_ADDR
// d := GetDir ( building ) ;
61455: LD_ADDR_VAR 0 8
61459: PUSH
61460: LD_VAR 0 2
61464: PPUSH
61465: CALL_OW 254
61469: ST_TO_ADDR
// r := 4 ;
61470: LD_ADDR_VAR 0 9
61474: PUSH
61475: LD_INT 4
61477: ST_TO_ADDR
// for i := 1 to 5 do
61478: LD_ADDR_VAR 0 10
61482: PUSH
61483: DOUBLE
61484: LD_INT 1
61486: DEC
61487: ST_TO_ADDR
61488: LD_INT 5
61490: PUSH
61491: FOR_TO
61492: IFFALSE 61649
// begin _x := ShiftX ( x , d , r + i ) ;
61494: LD_ADDR_VAR 0 5
61498: PUSH
61499: LD_VAR 0 4
61503: PPUSH
61504: LD_VAR 0 8
61508: PPUSH
61509: LD_VAR 0 9
61513: PUSH
61514: LD_VAR 0 10
61518: PLUS
61519: PPUSH
61520: CALL_OW 272
61524: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61525: LD_ADDR_VAR 0 7
61529: PUSH
61530: LD_VAR 0 6
61534: PPUSH
61535: LD_VAR 0 8
61539: PPUSH
61540: LD_VAR 0 9
61544: PUSH
61545: LD_VAR 0 10
61549: PLUS
61550: PPUSH
61551: CALL_OW 273
61555: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61556: LD_VAR 0 5
61560: PPUSH
61561: LD_VAR 0 7
61565: PPUSH
61566: CALL_OW 488
61570: PUSH
61571: LD_VAR 0 5
61575: PPUSH
61576: LD_VAR 0 7
61580: PPUSH
61581: CALL_OW 428
61585: PPUSH
61586: CALL_OW 247
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: IN
61601: NOT
61602: AND
61603: IFFALSE 61647
// begin ComMoveXY ( unit , _x , _y ) ;
61605: LD_VAR 0 1
61609: PPUSH
61610: LD_VAR 0 5
61614: PPUSH
61615: LD_VAR 0 7
61619: PPUSH
61620: CALL_OW 111
// result := [ _x , _y ] ;
61624: LD_ADDR_VAR 0 3
61628: PUSH
61629: LD_VAR 0 5
61633: PUSH
61634: LD_VAR 0 7
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: ST_TO_ADDR
// exit ;
61643: POP
61644: POP
61645: GO 61651
// end ; end ;
61647: GO 61491
61649: POP
61650: POP
// end ;
61651: LD_VAR 0 3
61655: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61656: LD_INT 0
61658: PPUSH
61659: PPUSH
61660: PPUSH
// result := 0 ;
61661: LD_ADDR_VAR 0 3
61665: PUSH
61666: LD_INT 0
61668: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61669: LD_VAR 0 1
61673: PUSH
61674: LD_INT 0
61676: LESS
61677: PUSH
61678: LD_VAR 0 1
61682: PUSH
61683: LD_INT 8
61685: GREATER
61686: OR
61687: PUSH
61688: LD_VAR 0 2
61692: PUSH
61693: LD_INT 0
61695: LESS
61696: OR
61697: PUSH
61698: LD_VAR 0 2
61702: PUSH
61703: LD_INT 8
61705: GREATER
61706: OR
61707: IFFALSE 61711
// exit ;
61709: GO 61786
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61711: LD_ADDR_VAR 0 4
61715: PUSH
61716: LD_INT 22
61718: PUSH
61719: LD_VAR 0 2
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PPUSH
61728: CALL_OW 69
61732: PUSH
61733: FOR_IN
61734: IFFALSE 61784
// begin un := UnitShoot ( i ) ;
61736: LD_ADDR_VAR 0 5
61740: PUSH
61741: LD_VAR 0 4
61745: PPUSH
61746: CALL_OW 504
61750: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61751: LD_VAR 0 5
61755: PPUSH
61756: CALL_OW 255
61760: PUSH
61761: LD_VAR 0 1
61765: EQUAL
61766: IFFALSE 61782
// begin result := un ;
61768: LD_ADDR_VAR 0 3
61772: PUSH
61773: LD_VAR 0 5
61777: ST_TO_ADDR
// exit ;
61778: POP
61779: POP
61780: GO 61786
// end ; end ;
61782: GO 61733
61784: POP
61785: POP
// end ;
61786: LD_VAR 0 3
61790: RET
// export function GetCargoBay ( units ) ; begin
61791: LD_INT 0
61793: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61794: LD_ADDR_VAR 0 2
61798: PUSH
61799: LD_VAR 0 1
61803: PPUSH
61804: LD_INT 2
61806: PUSH
61807: LD_INT 34
61809: PUSH
61810: LD_INT 12
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 34
61819: PUSH
61820: LD_INT 51
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 34
61829: PUSH
61830: LD_INT 32
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 34
61839: PUSH
61840: LD_INT 89
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: PPUSH
61854: CALL_OW 72
61858: ST_TO_ADDR
// end ;
61859: LD_VAR 0 2
61863: RET
// export function Negate ( value ) ; begin
61864: LD_INT 0
61866: PPUSH
// result := not value ;
61867: LD_ADDR_VAR 0 2
61871: PUSH
61872: LD_VAR 0 1
61876: NOT
61877: ST_TO_ADDR
// end ;
61878: LD_VAR 0 2
61882: RET
// export function Inc ( value ) ; begin
61883: LD_INT 0
61885: PPUSH
// result := value + 1 ;
61886: LD_ADDR_VAR 0 2
61890: PUSH
61891: LD_VAR 0 1
61895: PUSH
61896: LD_INT 1
61898: PLUS
61899: ST_TO_ADDR
// end ;
61900: LD_VAR 0 2
61904: RET
// export function Dec ( value ) ; begin
61905: LD_INT 0
61907: PPUSH
// result := value - 1 ;
61908: LD_ADDR_VAR 0 2
61912: PUSH
61913: LD_VAR 0 1
61917: PUSH
61918: LD_INT 1
61920: MINUS
61921: ST_TO_ADDR
// end ;
61922: LD_VAR 0 2
61926: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61927: LD_INT 0
61929: PPUSH
61930: PPUSH
61931: PPUSH
61932: PPUSH
61933: PPUSH
61934: PPUSH
61935: PPUSH
61936: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61937: LD_VAR 0 1
61941: PPUSH
61942: LD_VAR 0 2
61946: PPUSH
61947: CALL_OW 488
61951: NOT
61952: PUSH
61953: LD_VAR 0 3
61957: PPUSH
61958: LD_VAR 0 4
61962: PPUSH
61963: CALL_OW 488
61967: NOT
61968: OR
61969: IFFALSE 61982
// begin result := - 1 ;
61971: LD_ADDR_VAR 0 5
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: ST_TO_ADDR
// exit ;
61980: GO 62217
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61982: LD_ADDR_VAR 0 12
61986: PUSH
61987: LD_VAR 0 1
61991: PPUSH
61992: LD_VAR 0 2
61996: PPUSH
61997: LD_VAR 0 3
62001: PPUSH
62002: LD_VAR 0 4
62006: PPUSH
62007: CALL 61067 0 4
62011: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62012: LD_ADDR_VAR 0 11
62016: PUSH
62017: LD_VAR 0 1
62021: PPUSH
62022: LD_VAR 0 2
62026: PPUSH
62027: LD_VAR 0 12
62031: PUSH
62032: LD_INT 1
62034: ARRAY
62035: PPUSH
62036: LD_VAR 0 12
62040: PUSH
62041: LD_INT 2
62043: ARRAY
62044: PPUSH
62045: CALL_OW 298
62049: ST_TO_ADDR
// distance := 9999 ;
62050: LD_ADDR_VAR 0 10
62054: PUSH
62055: LD_INT 9999
62057: ST_TO_ADDR
// for i := 0 to 5 do
62058: LD_ADDR_VAR 0 6
62062: PUSH
62063: DOUBLE
62064: LD_INT 0
62066: DEC
62067: ST_TO_ADDR
62068: LD_INT 5
62070: PUSH
62071: FOR_TO
62072: IFFALSE 62215
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62074: LD_ADDR_VAR 0 7
62078: PUSH
62079: LD_VAR 0 1
62083: PPUSH
62084: LD_VAR 0 6
62088: PPUSH
62089: LD_VAR 0 11
62093: PPUSH
62094: CALL_OW 272
62098: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62099: LD_ADDR_VAR 0 8
62103: PUSH
62104: LD_VAR 0 2
62108: PPUSH
62109: LD_VAR 0 6
62113: PPUSH
62114: LD_VAR 0 11
62118: PPUSH
62119: CALL_OW 273
62123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62124: LD_VAR 0 7
62128: PPUSH
62129: LD_VAR 0 8
62133: PPUSH
62134: CALL_OW 488
62138: NOT
62139: IFFALSE 62143
// continue ;
62141: GO 62071
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62143: LD_ADDR_VAR 0 9
62147: PUSH
62148: LD_VAR 0 12
62152: PUSH
62153: LD_INT 1
62155: ARRAY
62156: PPUSH
62157: LD_VAR 0 12
62161: PUSH
62162: LD_INT 2
62164: ARRAY
62165: PPUSH
62166: LD_VAR 0 7
62170: PPUSH
62171: LD_VAR 0 8
62175: PPUSH
62176: CALL_OW 298
62180: ST_TO_ADDR
// if tmp < distance then
62181: LD_VAR 0 9
62185: PUSH
62186: LD_VAR 0 10
62190: LESS
62191: IFFALSE 62213
// begin result := i ;
62193: LD_ADDR_VAR 0 5
62197: PUSH
62198: LD_VAR 0 6
62202: ST_TO_ADDR
// distance := tmp ;
62203: LD_ADDR_VAR 0 10
62207: PUSH
62208: LD_VAR 0 9
62212: ST_TO_ADDR
// end ; end ;
62213: GO 62071
62215: POP
62216: POP
// end ;
62217: LD_VAR 0 5
62221: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62222: LD_INT 0
62224: PPUSH
62225: PPUSH
// if not driver or not IsInUnit ( driver ) then
62226: LD_VAR 0 1
62230: NOT
62231: PUSH
62232: LD_VAR 0 1
62236: PPUSH
62237: CALL_OW 310
62241: NOT
62242: OR
62243: IFFALSE 62247
// exit ;
62245: GO 62337
// vehicle := IsInUnit ( driver ) ;
62247: LD_ADDR_VAR 0 3
62251: PUSH
62252: LD_VAR 0 1
62256: PPUSH
62257: CALL_OW 310
62261: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62262: LD_VAR 0 1
62266: PPUSH
62267: LD_STRING \
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: PUSH
62297: LD_STRING E
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_VAR 0 3
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PPUSH
62333: CALL_OW 446
// end ;
62337: LD_VAR 0 2
62341: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62342: LD_INT 0
62344: PPUSH
62345: PPUSH
// if not driver or not IsInUnit ( driver ) then
62346: LD_VAR 0 1
62350: NOT
62351: PUSH
62352: LD_VAR 0 1
62356: PPUSH
62357: CALL_OW 310
62361: NOT
62362: OR
62363: IFFALSE 62367
// exit ;
62365: GO 62457
// vehicle := IsInUnit ( driver ) ;
62367: LD_ADDR_VAR 0 3
62371: PUSH
62372: LD_VAR 0 1
62376: PPUSH
62377: CALL_OW 310
62381: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62382: LD_VAR 0 1
62386: PPUSH
62387: LD_STRING \
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: PUSH
62417: LD_STRING E
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_VAR 0 3
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PPUSH
62453: CALL_OW 447
// end ;
62457: LD_VAR 0 2
62461: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62462: LD_INT 0
62464: PPUSH
62465: PPUSH
62466: PPUSH
// tmp := [ ] ;
62467: LD_ADDR_VAR 0 5
62471: PUSH
62472: EMPTY
62473: ST_TO_ADDR
// for i in units do
62474: LD_ADDR_VAR 0 4
62478: PUSH
62479: LD_VAR 0 1
62483: PUSH
62484: FOR_IN
62485: IFFALSE 62523
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62487: LD_ADDR_VAR 0 5
62491: PUSH
62492: LD_VAR 0 5
62496: PPUSH
62497: LD_VAR 0 5
62501: PUSH
62502: LD_INT 1
62504: PLUS
62505: PPUSH
62506: LD_VAR 0 4
62510: PPUSH
62511: CALL_OW 256
62515: PPUSH
62516: CALL_OW 2
62520: ST_TO_ADDR
62521: GO 62484
62523: POP
62524: POP
// if not tmp then
62525: LD_VAR 0 5
62529: NOT
62530: IFFALSE 62534
// exit ;
62532: GO 62582
// if asc then
62534: LD_VAR 0 2
62538: IFFALSE 62562
// result := SortListByListAsc ( units , tmp ) else
62540: LD_ADDR_VAR 0 3
62544: PUSH
62545: LD_VAR 0 1
62549: PPUSH
62550: LD_VAR 0 5
62554: PPUSH
62555: CALL_OW 76
62559: ST_TO_ADDR
62560: GO 62582
// result := SortListByListDesc ( units , tmp ) ;
62562: LD_ADDR_VAR 0 3
62566: PUSH
62567: LD_VAR 0 1
62571: PPUSH
62572: LD_VAR 0 5
62576: PPUSH
62577: CALL_OW 77
62581: ST_TO_ADDR
// end ;
62582: LD_VAR 0 3
62586: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62587: LD_INT 0
62589: PPUSH
62590: PPUSH
// task := GetTaskList ( mech ) ;
62591: LD_ADDR_VAR 0 4
62595: PUSH
62596: LD_VAR 0 1
62600: PPUSH
62601: CALL_OW 437
62605: ST_TO_ADDR
// if not task then
62606: LD_VAR 0 4
62610: NOT
62611: IFFALSE 62615
// exit ;
62613: GO 62657
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62615: LD_ADDR_VAR 0 3
62619: PUSH
62620: LD_VAR 0 4
62624: PUSH
62625: LD_INT 1
62627: ARRAY
62628: PUSH
62629: LD_INT 1
62631: ARRAY
62632: PUSH
62633: LD_STRING r
62635: EQUAL
62636: PUSH
62637: LD_VAR 0 4
62641: PUSH
62642: LD_INT 1
62644: ARRAY
62645: PUSH
62646: LD_INT 4
62648: ARRAY
62649: PUSH
62650: LD_VAR 0 2
62654: EQUAL
62655: AND
62656: ST_TO_ADDR
// end ;
62657: LD_VAR 0 3
62661: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62662: LD_INT 0
62664: PPUSH
// SetDir ( unit , d ) ;
62665: LD_VAR 0 1
62669: PPUSH
62670: LD_VAR 0 4
62674: PPUSH
62675: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62679: LD_VAR 0 1
62683: PPUSH
62684: LD_VAR 0 2
62688: PPUSH
62689: LD_VAR 0 3
62693: PPUSH
62694: LD_VAR 0 5
62698: PPUSH
62699: CALL_OW 48
// end ;
62703: LD_VAR 0 6
62707: RET
// export function ToNaturalNumber ( number ) ; begin
62708: LD_INT 0
62710: PPUSH
// result := number div 1 ;
62711: LD_ADDR_VAR 0 2
62715: PUSH
62716: LD_VAR 0 1
62720: PUSH
62721: LD_INT 1
62723: DIV
62724: ST_TO_ADDR
// if number < 0 then
62725: LD_VAR 0 1
62729: PUSH
62730: LD_INT 0
62732: LESS
62733: IFFALSE 62743
// result := 0 ;
62735: LD_ADDR_VAR 0 2
62739: PUSH
62740: LD_INT 0
62742: ST_TO_ADDR
// end ;
62743: LD_VAR 0 2
62747: RET
// export function SortByClass ( units , class ) ; var un ; begin
62748: LD_INT 0
62750: PPUSH
62751: PPUSH
// if not units or not class then
62752: LD_VAR 0 1
62756: NOT
62757: PUSH
62758: LD_VAR 0 2
62762: NOT
62763: OR
62764: IFFALSE 62768
// exit ;
62766: GO 62863
// result := [ ] ;
62768: LD_ADDR_VAR 0 3
62772: PUSH
62773: EMPTY
62774: ST_TO_ADDR
// for un in units do
62775: LD_ADDR_VAR 0 4
62779: PUSH
62780: LD_VAR 0 1
62784: PUSH
62785: FOR_IN
62786: IFFALSE 62861
// if GetClass ( un ) = class then
62788: LD_VAR 0 4
62792: PPUSH
62793: CALL_OW 257
62797: PUSH
62798: LD_VAR 0 2
62802: EQUAL
62803: IFFALSE 62830
// result := Insert ( result , 1 , un ) else
62805: LD_ADDR_VAR 0 3
62809: PUSH
62810: LD_VAR 0 3
62814: PPUSH
62815: LD_INT 1
62817: PPUSH
62818: LD_VAR 0 4
62822: PPUSH
62823: CALL_OW 2
62827: ST_TO_ADDR
62828: GO 62859
// result := Replace ( result , result + 1 , un ) ;
62830: LD_ADDR_VAR 0 3
62834: PUSH
62835: LD_VAR 0 3
62839: PPUSH
62840: LD_VAR 0 3
62844: PUSH
62845: LD_INT 1
62847: PLUS
62848: PPUSH
62849: LD_VAR 0 4
62853: PPUSH
62854: CALL_OW 1
62858: ST_TO_ADDR
62859: GO 62785
62861: POP
62862: POP
// end ;
62863: LD_VAR 0 3
62867: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62868: LD_INT 0
62870: PPUSH
62871: PPUSH
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
// result := [ ] ;
62877: LD_ADDR_VAR 0 4
62881: PUSH
62882: EMPTY
62883: ST_TO_ADDR
// if x - r < 0 then
62884: LD_VAR 0 1
62888: PUSH
62889: LD_VAR 0 3
62893: MINUS
62894: PUSH
62895: LD_INT 0
62897: LESS
62898: IFFALSE 62910
// min_x := 0 else
62900: LD_ADDR_VAR 0 8
62904: PUSH
62905: LD_INT 0
62907: ST_TO_ADDR
62908: GO 62926
// min_x := x - r ;
62910: LD_ADDR_VAR 0 8
62914: PUSH
62915: LD_VAR 0 1
62919: PUSH
62920: LD_VAR 0 3
62924: MINUS
62925: ST_TO_ADDR
// if y - r < 0 then
62926: LD_VAR 0 2
62930: PUSH
62931: LD_VAR 0 3
62935: MINUS
62936: PUSH
62937: LD_INT 0
62939: LESS
62940: IFFALSE 62952
// min_y := 0 else
62942: LD_ADDR_VAR 0 7
62946: PUSH
62947: LD_INT 0
62949: ST_TO_ADDR
62950: GO 62968
// min_y := y - r ;
62952: LD_ADDR_VAR 0 7
62956: PUSH
62957: LD_VAR 0 2
62961: PUSH
62962: LD_VAR 0 3
62966: MINUS
62967: ST_TO_ADDR
// max_x := x + r ;
62968: LD_ADDR_VAR 0 9
62972: PUSH
62973: LD_VAR 0 1
62977: PUSH
62978: LD_VAR 0 3
62982: PLUS
62983: ST_TO_ADDR
// max_y := y + r ;
62984: LD_ADDR_VAR 0 10
62988: PUSH
62989: LD_VAR 0 2
62993: PUSH
62994: LD_VAR 0 3
62998: PLUS
62999: ST_TO_ADDR
// for _x = min_x to max_x do
63000: LD_ADDR_VAR 0 5
63004: PUSH
63005: DOUBLE
63006: LD_VAR 0 8
63010: DEC
63011: ST_TO_ADDR
63012: LD_VAR 0 9
63016: PUSH
63017: FOR_TO
63018: IFFALSE 63119
// for _y = min_y to max_y do
63020: LD_ADDR_VAR 0 6
63024: PUSH
63025: DOUBLE
63026: LD_VAR 0 7
63030: DEC
63031: ST_TO_ADDR
63032: LD_VAR 0 10
63036: PUSH
63037: FOR_TO
63038: IFFALSE 63115
// begin if not ValidHex ( _x , _y ) then
63040: LD_VAR 0 5
63044: PPUSH
63045: LD_VAR 0 6
63049: PPUSH
63050: CALL_OW 488
63054: NOT
63055: IFFALSE 63059
// continue ;
63057: GO 63037
// if GetResourceTypeXY ( _x , _y ) then
63059: LD_VAR 0 5
63063: PPUSH
63064: LD_VAR 0 6
63068: PPUSH
63069: CALL_OW 283
63073: IFFALSE 63113
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63075: LD_ADDR_VAR 0 4
63079: PUSH
63080: LD_VAR 0 4
63084: PPUSH
63085: LD_VAR 0 4
63089: PUSH
63090: LD_INT 1
63092: PLUS
63093: PPUSH
63094: LD_VAR 0 5
63098: PUSH
63099: LD_VAR 0 6
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PPUSH
63108: CALL_OW 1
63112: ST_TO_ADDR
// end ;
63113: GO 63037
63115: POP
63116: POP
63117: GO 63017
63119: POP
63120: POP
// end ;
63121: LD_VAR 0 4
63125: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63126: LD_INT 0
63128: PPUSH
63129: PPUSH
63130: PPUSH
63131: PPUSH
63132: PPUSH
63133: PPUSH
63134: PPUSH
63135: PPUSH
// if not units then
63136: LD_VAR 0 1
63140: NOT
63141: IFFALSE 63145
// exit ;
63143: GO 63669
// result := UnitFilter ( units , [ f_ok ] ) ;
63145: LD_ADDR_VAR 0 3
63149: PUSH
63150: LD_VAR 0 1
63154: PPUSH
63155: LD_INT 50
63157: PUSH
63158: EMPTY
63159: LIST
63160: PPUSH
63161: CALL_OW 72
63165: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63166: LD_ADDR_VAR 0 8
63170: PUSH
63171: LD_VAR 0 1
63175: PUSH
63176: LD_INT 1
63178: ARRAY
63179: PPUSH
63180: CALL_OW 255
63184: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63185: LD_ADDR_VAR 0 10
63189: PUSH
63190: LD_INT 29
63192: PUSH
63193: LD_INT 91
63195: PUSH
63196: LD_INT 49
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: LIST
63203: ST_TO_ADDR
// if not result then
63204: LD_VAR 0 3
63208: NOT
63209: IFFALSE 63213
// exit ;
63211: GO 63669
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63213: LD_ADDR_VAR 0 5
63217: PUSH
63218: LD_INT 81
63220: PUSH
63221: LD_VAR 0 8
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PPUSH
63230: CALL_OW 69
63234: ST_TO_ADDR
// for i in result do
63235: LD_ADDR_VAR 0 4
63239: PUSH
63240: LD_VAR 0 3
63244: PUSH
63245: FOR_IN
63246: IFFALSE 63667
// begin tag := GetTag ( i ) + 1 ;
63248: LD_ADDR_VAR 0 9
63252: PUSH
63253: LD_VAR 0 4
63257: PPUSH
63258: CALL_OW 110
63262: PUSH
63263: LD_INT 1
63265: PLUS
63266: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63267: LD_ADDR_VAR 0 7
63271: PUSH
63272: LD_VAR 0 4
63276: PPUSH
63277: CALL_OW 250
63281: PPUSH
63282: LD_VAR 0 4
63286: PPUSH
63287: CALL_OW 251
63291: PPUSH
63292: LD_INT 6
63294: PPUSH
63295: CALL 62868 0 3
63299: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63300: LD_VAR 0 4
63304: PPUSH
63305: CALL_OW 247
63309: PUSH
63310: LD_INT 2
63312: EQUAL
63313: PUSH
63314: LD_VAR 0 7
63318: AND
63319: PUSH
63320: LD_VAR 0 4
63324: PPUSH
63325: CALL_OW 264
63329: PUSH
63330: LD_VAR 0 10
63334: IN
63335: NOT
63336: AND
63337: IFFALSE 63376
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63339: LD_VAR 0 4
63343: PPUSH
63344: LD_VAR 0 7
63348: PUSH
63349: LD_INT 1
63351: ARRAY
63352: PUSH
63353: LD_INT 1
63355: ARRAY
63356: PPUSH
63357: LD_VAR 0 7
63361: PUSH
63362: LD_INT 1
63364: ARRAY
63365: PUSH
63366: LD_INT 2
63368: ARRAY
63369: PPUSH
63370: CALL_OW 116
63374: GO 63665
// if path > tag then
63376: LD_VAR 0 2
63380: PUSH
63381: LD_VAR 0 9
63385: GREATER
63386: IFFALSE 63594
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63388: LD_ADDR_VAR 0 6
63392: PUSH
63393: LD_VAR 0 5
63397: PPUSH
63398: LD_INT 91
63400: PUSH
63401: LD_VAR 0 4
63405: PUSH
63406: LD_INT 8
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: PPUSH
63414: CALL_OW 72
63418: ST_TO_ADDR
// if nearEnemy then
63419: LD_VAR 0 6
63423: IFFALSE 63492
// begin if GetWeapon ( i ) = ru_time_lapser then
63425: LD_VAR 0 4
63429: PPUSH
63430: CALL_OW 264
63434: PUSH
63435: LD_INT 49
63437: EQUAL
63438: IFFALSE 63466
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63440: LD_VAR 0 4
63444: PPUSH
63445: LD_VAR 0 6
63449: PPUSH
63450: LD_VAR 0 4
63454: PPUSH
63455: CALL_OW 74
63459: PPUSH
63460: CALL_OW 112
63464: GO 63490
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63466: LD_VAR 0 4
63470: PPUSH
63471: LD_VAR 0 6
63475: PPUSH
63476: LD_VAR 0 4
63480: PPUSH
63481: CALL_OW 74
63485: PPUSH
63486: CALL 64594 0 2
// end else
63490: GO 63592
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63492: LD_VAR 0 4
63496: PPUSH
63497: LD_VAR 0 2
63501: PUSH
63502: LD_VAR 0 9
63506: ARRAY
63507: PUSH
63508: LD_INT 1
63510: ARRAY
63511: PPUSH
63512: LD_VAR 0 2
63516: PUSH
63517: LD_VAR 0 9
63521: ARRAY
63522: PUSH
63523: LD_INT 2
63525: ARRAY
63526: PPUSH
63527: CALL_OW 297
63531: PUSH
63532: LD_INT 6
63534: GREATER
63535: IFFALSE 63578
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63537: LD_VAR 0 4
63541: PPUSH
63542: LD_VAR 0 2
63546: PUSH
63547: LD_VAR 0 9
63551: ARRAY
63552: PUSH
63553: LD_INT 1
63555: ARRAY
63556: PPUSH
63557: LD_VAR 0 2
63561: PUSH
63562: LD_VAR 0 9
63566: ARRAY
63567: PUSH
63568: LD_INT 2
63570: ARRAY
63571: PPUSH
63572: CALL_OW 114
63576: GO 63592
// SetTag ( i , tag ) ;
63578: LD_VAR 0 4
63582: PPUSH
63583: LD_VAR 0 9
63587: PPUSH
63588: CALL_OW 109
// end else
63592: GO 63665
// if enemy then
63594: LD_VAR 0 5
63598: IFFALSE 63665
// begin if GetWeapon ( i ) = ru_time_lapser then
63600: LD_VAR 0 4
63604: PPUSH
63605: CALL_OW 264
63609: PUSH
63610: LD_INT 49
63612: EQUAL
63613: IFFALSE 63641
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63615: LD_VAR 0 4
63619: PPUSH
63620: LD_VAR 0 5
63624: PPUSH
63625: LD_VAR 0 4
63629: PPUSH
63630: CALL_OW 74
63634: PPUSH
63635: CALL_OW 112
63639: GO 63665
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63641: LD_VAR 0 4
63645: PPUSH
63646: LD_VAR 0 5
63650: PPUSH
63651: LD_VAR 0 4
63655: PPUSH
63656: CALL_OW 74
63660: PPUSH
63661: CALL 64594 0 2
// end ; end ;
63665: GO 63245
63667: POP
63668: POP
// end ;
63669: LD_VAR 0 3
63673: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63674: LD_INT 0
63676: PPUSH
63677: PPUSH
63678: PPUSH
// if not unit or IsInUnit ( unit ) then
63679: LD_VAR 0 1
63683: NOT
63684: PUSH
63685: LD_VAR 0 1
63689: PPUSH
63690: CALL_OW 310
63694: OR
63695: IFFALSE 63699
// exit ;
63697: GO 63790
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63699: LD_ADDR_VAR 0 4
63703: PUSH
63704: LD_VAR 0 1
63708: PPUSH
63709: CALL_OW 250
63713: PPUSH
63714: LD_VAR 0 2
63718: PPUSH
63719: LD_INT 1
63721: PPUSH
63722: CALL_OW 272
63726: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63727: LD_ADDR_VAR 0 5
63731: PUSH
63732: LD_VAR 0 1
63736: PPUSH
63737: CALL_OW 251
63741: PPUSH
63742: LD_VAR 0 2
63746: PPUSH
63747: LD_INT 1
63749: PPUSH
63750: CALL_OW 273
63754: ST_TO_ADDR
// if ValidHex ( x , y ) then
63755: LD_VAR 0 4
63759: PPUSH
63760: LD_VAR 0 5
63764: PPUSH
63765: CALL_OW 488
63769: IFFALSE 63790
// ComTurnXY ( unit , x , y ) ;
63771: LD_VAR 0 1
63775: PPUSH
63776: LD_VAR 0 4
63780: PPUSH
63781: LD_VAR 0 5
63785: PPUSH
63786: CALL_OW 118
// end ;
63790: LD_VAR 0 3
63794: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63795: LD_INT 0
63797: PPUSH
63798: PPUSH
// result := false ;
63799: LD_ADDR_VAR 0 3
63803: PUSH
63804: LD_INT 0
63806: ST_TO_ADDR
// if not units then
63807: LD_VAR 0 2
63811: NOT
63812: IFFALSE 63816
// exit ;
63814: GO 63861
// for i in units do
63816: LD_ADDR_VAR 0 4
63820: PUSH
63821: LD_VAR 0 2
63825: PUSH
63826: FOR_IN
63827: IFFALSE 63859
// if See ( side , i ) then
63829: LD_VAR 0 1
63833: PPUSH
63834: LD_VAR 0 4
63838: PPUSH
63839: CALL_OW 292
63843: IFFALSE 63857
// begin result := true ;
63845: LD_ADDR_VAR 0 3
63849: PUSH
63850: LD_INT 1
63852: ST_TO_ADDR
// exit ;
63853: POP
63854: POP
63855: GO 63861
// end ;
63857: GO 63826
63859: POP
63860: POP
// end ;
63861: LD_VAR 0 3
63865: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63866: LD_INT 0
63868: PPUSH
63869: PPUSH
63870: PPUSH
63871: PPUSH
// if not unit or not points then
63872: LD_VAR 0 1
63876: NOT
63877: PUSH
63878: LD_VAR 0 2
63882: NOT
63883: OR
63884: IFFALSE 63888
// exit ;
63886: GO 63978
// dist := 99999 ;
63888: LD_ADDR_VAR 0 5
63892: PUSH
63893: LD_INT 99999
63895: ST_TO_ADDR
// for i in points do
63896: LD_ADDR_VAR 0 4
63900: PUSH
63901: LD_VAR 0 2
63905: PUSH
63906: FOR_IN
63907: IFFALSE 63976
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63909: LD_ADDR_VAR 0 6
63913: PUSH
63914: LD_VAR 0 1
63918: PPUSH
63919: LD_VAR 0 4
63923: PUSH
63924: LD_INT 1
63926: ARRAY
63927: PPUSH
63928: LD_VAR 0 4
63932: PUSH
63933: LD_INT 2
63935: ARRAY
63936: PPUSH
63937: CALL_OW 297
63941: ST_TO_ADDR
// if tmpDist < dist then
63942: LD_VAR 0 6
63946: PUSH
63947: LD_VAR 0 5
63951: LESS
63952: IFFALSE 63974
// begin result := i ;
63954: LD_ADDR_VAR 0 3
63958: PUSH
63959: LD_VAR 0 4
63963: ST_TO_ADDR
// dist := tmpDist ;
63964: LD_ADDR_VAR 0 5
63968: PUSH
63969: LD_VAR 0 6
63973: ST_TO_ADDR
// end ; end ;
63974: GO 63906
63976: POP
63977: POP
// end ;
63978: LD_VAR 0 3
63982: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63983: LD_INT 0
63985: PPUSH
// uc_side := side ;
63986: LD_ADDR_OWVAR 20
63990: PUSH
63991: LD_VAR 0 1
63995: ST_TO_ADDR
// uc_nation := 3 ;
63996: LD_ADDR_OWVAR 21
64000: PUSH
64001: LD_INT 3
64003: ST_TO_ADDR
// vc_chassis := 25 ;
64004: LD_ADDR_OWVAR 37
64008: PUSH
64009: LD_INT 25
64011: ST_TO_ADDR
// vc_engine := engine_siberite ;
64012: LD_ADDR_OWVAR 39
64016: PUSH
64017: LD_INT 3
64019: ST_TO_ADDR
// vc_control := control_computer ;
64020: LD_ADDR_OWVAR 38
64024: PUSH
64025: LD_INT 3
64027: ST_TO_ADDR
// vc_weapon := 59 ;
64028: LD_ADDR_OWVAR 40
64032: PUSH
64033: LD_INT 59
64035: ST_TO_ADDR
// result := CreateVehicle ;
64036: LD_ADDR_VAR 0 5
64040: PUSH
64041: CALL_OW 45
64045: ST_TO_ADDR
// SetDir ( result , d ) ;
64046: LD_VAR 0 5
64050: PPUSH
64051: LD_VAR 0 4
64055: PPUSH
64056: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64060: LD_VAR 0 5
64064: PPUSH
64065: LD_VAR 0 2
64069: PPUSH
64070: LD_VAR 0 3
64074: PPUSH
64075: LD_INT 0
64077: PPUSH
64078: CALL_OW 48
// end ;
64082: LD_VAR 0 5
64086: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64087: LD_INT 0
64089: PPUSH
64090: PPUSH
64091: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64092: LD_ADDR_VAR 0 2
64096: PUSH
64097: LD_INT 0
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64115: LD_VAR 0 1
64119: NOT
64120: PUSH
64121: LD_VAR 0 1
64125: PPUSH
64126: CALL_OW 264
64130: PUSH
64131: LD_INT 12
64133: PUSH
64134: LD_INT 51
64136: PUSH
64137: LD_INT 32
64139: PUSH
64140: LD_INT 89
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: IN
64149: NOT
64150: OR
64151: IFFALSE 64155
// exit ;
64153: GO 64253
// for i := 1 to 3 do
64155: LD_ADDR_VAR 0 3
64159: PUSH
64160: DOUBLE
64161: LD_INT 1
64163: DEC
64164: ST_TO_ADDR
64165: LD_INT 3
64167: PUSH
64168: FOR_TO
64169: IFFALSE 64251
// begin tmp := GetCargo ( cargo , i ) ;
64171: LD_ADDR_VAR 0 4
64175: PUSH
64176: LD_VAR 0 1
64180: PPUSH
64181: LD_VAR 0 3
64185: PPUSH
64186: CALL_OW 289
64190: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64191: LD_ADDR_VAR 0 2
64195: PUSH
64196: LD_VAR 0 2
64200: PPUSH
64201: LD_VAR 0 3
64205: PPUSH
64206: LD_VAR 0 4
64210: PPUSH
64211: CALL_OW 1
64215: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64216: LD_ADDR_VAR 0 2
64220: PUSH
64221: LD_VAR 0 2
64225: PPUSH
64226: LD_INT 4
64228: PPUSH
64229: LD_VAR 0 2
64233: PUSH
64234: LD_INT 4
64236: ARRAY
64237: PUSH
64238: LD_VAR 0 4
64242: PLUS
64243: PPUSH
64244: CALL_OW 1
64248: ST_TO_ADDR
// end ;
64249: GO 64168
64251: POP
64252: POP
// end ;
64253: LD_VAR 0 2
64257: RET
// export function Length ( array ) ; begin
64258: LD_INT 0
64260: PPUSH
// result := array + 0 ;
64261: LD_ADDR_VAR 0 2
64265: PUSH
64266: LD_VAR 0 1
64270: PUSH
64271: LD_INT 0
64273: PLUS
64274: ST_TO_ADDR
// end ;
64275: LD_VAR 0 2
64279: RET
// export function PrepareArray ( array ) ; begin
64280: LD_INT 0
64282: PPUSH
// result := array diff 0 ;
64283: LD_ADDR_VAR 0 2
64287: PUSH
64288: LD_VAR 0 1
64292: PUSH
64293: LD_INT 0
64295: DIFF
64296: ST_TO_ADDR
// if not result [ 1 ] then
64297: LD_VAR 0 2
64301: PUSH
64302: LD_INT 1
64304: ARRAY
64305: NOT
64306: IFFALSE 64326
// result := Delete ( result , 1 ) ;
64308: LD_ADDR_VAR 0 2
64312: PUSH
64313: LD_VAR 0 2
64317: PPUSH
64318: LD_INT 1
64320: PPUSH
64321: CALL_OW 3
64325: ST_TO_ADDR
// end ;
64326: LD_VAR 0 2
64330: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64331: LD_INT 0
64333: PPUSH
64334: PPUSH
64335: PPUSH
64336: PPUSH
// sibRocketRange := 25 ;
64337: LD_ADDR_VAR 0 6
64341: PUSH
64342: LD_INT 25
64344: ST_TO_ADDR
// result := false ;
64345: LD_ADDR_VAR 0 4
64349: PUSH
64350: LD_INT 0
64352: ST_TO_ADDR
// for i := 0 to 5 do
64353: LD_ADDR_VAR 0 5
64357: PUSH
64358: DOUBLE
64359: LD_INT 0
64361: DEC
64362: ST_TO_ADDR
64363: LD_INT 5
64365: PUSH
64366: FOR_TO
64367: IFFALSE 64434
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64369: LD_VAR 0 1
64373: PPUSH
64374: LD_VAR 0 5
64378: PPUSH
64379: LD_VAR 0 6
64383: PPUSH
64384: CALL_OW 272
64388: PPUSH
64389: LD_VAR 0 2
64393: PPUSH
64394: LD_VAR 0 5
64398: PPUSH
64399: LD_VAR 0 6
64403: PPUSH
64404: CALL_OW 273
64408: PPUSH
64409: LD_VAR 0 3
64413: PPUSH
64414: CALL_OW 309
64418: IFFALSE 64432
// begin result := true ;
64420: LD_ADDR_VAR 0 4
64424: PUSH
64425: LD_INT 1
64427: ST_TO_ADDR
// exit ;
64428: POP
64429: POP
64430: GO 64436
// end ;
64432: GO 64366
64434: POP
64435: POP
// end ;
64436: LD_VAR 0 4
64440: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64441: LD_INT 0
64443: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64444: LD_VAR 0 1
64448: PPUSH
64449: LD_VAR 0 2
64453: PPUSH
64454: LD_INT 0
64456: PPUSH
64457: LD_INT 0
64459: PPUSH
64460: LD_INT 1
64462: PPUSH
64463: LD_INT 0
64465: PPUSH
64466: CALL_OW 587
// end ;
64470: LD_VAR 0 3
64474: RET
// export function CenterOnNow ( unit ) ; begin
64475: LD_INT 0
64477: PPUSH
// result := IsInUnit ( unit ) ;
64478: LD_ADDR_VAR 0 2
64482: PUSH
64483: LD_VAR 0 1
64487: PPUSH
64488: CALL_OW 310
64492: ST_TO_ADDR
// if not result then
64493: LD_VAR 0 2
64497: NOT
64498: IFFALSE 64510
// result := unit ;
64500: LD_ADDR_VAR 0 2
64504: PUSH
64505: LD_VAR 0 1
64509: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64510: LD_VAR 0 1
64514: PPUSH
64515: CALL_OW 87
// end ;
64519: LD_VAR 0 2
64523: RET
// export function ComMoveHex ( unit , hex ) ; begin
64524: LD_INT 0
64526: PPUSH
// if not hex then
64527: LD_VAR 0 2
64531: NOT
64532: IFFALSE 64536
// exit ;
64534: GO 64589
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64536: LD_VAR 0 2
64540: PUSH
64541: LD_INT 1
64543: ARRAY
64544: PPUSH
64545: LD_VAR 0 2
64549: PUSH
64550: LD_INT 2
64552: ARRAY
64553: PPUSH
64554: CALL_OW 428
64558: IFFALSE 64562
// exit ;
64560: GO 64589
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64562: LD_VAR 0 1
64566: PPUSH
64567: LD_VAR 0 2
64571: PUSH
64572: LD_INT 1
64574: ARRAY
64575: PPUSH
64576: LD_VAR 0 2
64580: PUSH
64581: LD_INT 2
64583: ARRAY
64584: PPUSH
64585: CALL_OW 111
// end ;
64589: LD_VAR 0 3
64593: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64594: LD_INT 0
64596: PPUSH
64597: PPUSH
64598: PPUSH
// if not unit or not enemy then
64599: LD_VAR 0 1
64603: NOT
64604: PUSH
64605: LD_VAR 0 2
64609: NOT
64610: OR
64611: IFFALSE 64615
// exit ;
64613: GO 64739
// x := GetX ( enemy ) ;
64615: LD_ADDR_VAR 0 4
64619: PUSH
64620: LD_VAR 0 2
64624: PPUSH
64625: CALL_OW 250
64629: ST_TO_ADDR
// y := GetY ( enemy ) ;
64630: LD_ADDR_VAR 0 5
64634: PUSH
64635: LD_VAR 0 2
64639: PPUSH
64640: CALL_OW 251
64644: ST_TO_ADDR
// if ValidHex ( x , y ) then
64645: LD_VAR 0 4
64649: PPUSH
64650: LD_VAR 0 5
64654: PPUSH
64655: CALL_OW 488
64659: IFFALSE 64739
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64661: LD_VAR 0 2
64665: PPUSH
64666: CALL_OW 247
64670: PUSH
64671: LD_INT 3
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: IN
64681: PUSH
64682: LD_VAR 0 1
64686: PPUSH
64687: CALL_OW 255
64691: PPUSH
64692: LD_VAR 0 2
64696: PPUSH
64697: CALL_OW 292
64701: OR
64702: IFFALSE 64720
// ComAttackUnit ( unit , enemy ) else
64704: LD_VAR 0 1
64708: PPUSH
64709: LD_VAR 0 2
64713: PPUSH
64714: CALL_OW 115
64718: GO 64739
// ComAgressiveMove ( unit , x , y ) ;
64720: LD_VAR 0 1
64724: PPUSH
64725: LD_VAR 0 4
64729: PPUSH
64730: LD_VAR 0 5
64734: PPUSH
64735: CALL_OW 114
// end ;
64739: LD_VAR 0 3
64743: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64744: LD_INT 0
64746: PPUSH
64747: PPUSH
64748: PPUSH
// list := AreaToList ( area , 0 ) ;
64749: LD_ADDR_VAR 0 5
64753: PUSH
64754: LD_VAR 0 1
64758: PPUSH
64759: LD_INT 0
64761: PPUSH
64762: CALL_OW 517
64766: ST_TO_ADDR
// if not list then
64767: LD_VAR 0 5
64771: NOT
64772: IFFALSE 64776
// exit ;
64774: GO 64906
// if all then
64776: LD_VAR 0 2
64780: IFFALSE 64868
// begin for i := 1 to list [ 1 ] do
64782: LD_ADDR_VAR 0 4
64786: PUSH
64787: DOUBLE
64788: LD_INT 1
64790: DEC
64791: ST_TO_ADDR
64792: LD_VAR 0 5
64796: PUSH
64797: LD_INT 1
64799: ARRAY
64800: PUSH
64801: FOR_TO
64802: IFFALSE 64864
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64804: LD_ADDR_VAR 0 3
64808: PUSH
64809: LD_VAR 0 3
64813: PPUSH
64814: LD_VAR 0 3
64818: PUSH
64819: LD_INT 1
64821: PLUS
64822: PPUSH
64823: LD_VAR 0 5
64827: PUSH
64828: LD_INT 1
64830: ARRAY
64831: PUSH
64832: LD_VAR 0 4
64836: ARRAY
64837: PUSH
64838: LD_VAR 0 5
64842: PUSH
64843: LD_INT 2
64845: ARRAY
64846: PUSH
64847: LD_VAR 0 4
64851: ARRAY
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PPUSH
64857: CALL_OW 1
64861: ST_TO_ADDR
64862: GO 64801
64864: POP
64865: POP
// exit ;
64866: GO 64906
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64868: LD_ADDR_VAR 0 3
64872: PUSH
64873: LD_VAR 0 5
64877: PUSH
64878: LD_INT 1
64880: ARRAY
64881: PUSH
64882: LD_INT 1
64884: ARRAY
64885: PUSH
64886: LD_VAR 0 5
64890: PUSH
64891: LD_INT 2
64893: ARRAY
64894: PUSH
64895: LD_INT 1
64897: ARRAY
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: EMPTY
64904: LIST
64905: ST_TO_ADDR
// end ;
64906: LD_VAR 0 3
64910: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64911: LD_INT 0
64913: PPUSH
64914: PPUSH
// list := AreaToList ( area , 0 ) ;
64915: LD_ADDR_VAR 0 4
64919: PUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: LD_INT 0
64927: PPUSH
64928: CALL_OW 517
64932: ST_TO_ADDR
// if not list then
64933: LD_VAR 0 4
64937: NOT
64938: IFFALSE 64942
// exit ;
64940: GO 64983
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64942: LD_ADDR_VAR 0 3
64946: PUSH
64947: LD_VAR 0 4
64951: PUSH
64952: LD_INT 1
64954: ARRAY
64955: PUSH
64956: LD_INT 1
64958: ARRAY
64959: PUSH
64960: LD_VAR 0 4
64964: PUSH
64965: LD_INT 2
64967: ARRAY
64968: PUSH
64969: LD_INT 1
64971: ARRAY
64972: PUSH
64973: LD_VAR 0 2
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: ST_TO_ADDR
// end ;
64983: LD_VAR 0 3
64987: RET
// export function First ( array ) ; begin
64988: LD_INT 0
64990: PPUSH
// if not array then
64991: LD_VAR 0 1
64995: NOT
64996: IFFALSE 65000
// exit ;
64998: GO 65014
// result := array [ 1 ] ;
65000: LD_ADDR_VAR 0 2
65004: PUSH
65005: LD_VAR 0 1
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: ST_TO_ADDR
// end ;
65014: LD_VAR 0 2
65018: RET
// export function Last ( array ) ; begin
65019: LD_INT 0
65021: PPUSH
// if not array then
65022: LD_VAR 0 1
65026: NOT
65027: IFFALSE 65031
// exit ;
65029: GO 65047
// result := array [ array ] ;
65031: LD_ADDR_VAR 0 2
65035: PUSH
65036: LD_VAR 0 1
65040: PUSH
65041: LD_VAR 0 1
65045: ARRAY
65046: ST_TO_ADDR
// end ;
65047: LD_VAR 0 2
65051: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
65052: LD_INT 0
65054: PPUSH
65055: PPUSH
// result := [ ] ;
65056: LD_ADDR_VAR 0 5
65060: PUSH
65061: EMPTY
65062: ST_TO_ADDR
// if not array then
65063: LD_VAR 0 1
65067: NOT
65068: IFFALSE 65072
// exit ;
65070: GO 65184
// for i := 1 to array do
65072: LD_ADDR_VAR 0 6
65076: PUSH
65077: DOUBLE
65078: LD_INT 1
65080: DEC
65081: ST_TO_ADDR
65082: LD_VAR 0 1
65086: PUSH
65087: FOR_TO
65088: IFFALSE 65182
// if array [ i ] [ index ] = value then
65090: LD_VAR 0 1
65094: PUSH
65095: LD_VAR 0 6
65099: ARRAY
65100: PUSH
65101: LD_VAR 0 2
65105: ARRAY
65106: PUSH
65107: LD_VAR 0 3
65111: EQUAL
65112: IFFALSE 65180
// begin if indexColumn then
65114: LD_VAR 0 4
65118: IFFALSE 65154
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65120: LD_ADDR_VAR 0 5
65124: PUSH
65125: LD_VAR 0 5
65129: PPUSH
65130: LD_VAR 0 1
65134: PUSH
65135: LD_VAR 0 6
65139: ARRAY
65140: PUSH
65141: LD_VAR 0 4
65145: ARRAY
65146: PPUSH
65147: CALL 60522 0 2
65151: ST_TO_ADDR
65152: GO 65180
// result := Join ( result , array [ i ] ) ;
65154: LD_ADDR_VAR 0 5
65158: PUSH
65159: LD_VAR 0 5
65163: PPUSH
65164: LD_VAR 0 1
65168: PUSH
65169: LD_VAR 0 6
65173: ARRAY
65174: PPUSH
65175: CALL 60522 0 2
65179: ST_TO_ADDR
// end ;
65180: GO 65087
65182: POP
65183: POP
// end ;
65184: LD_VAR 0 5
65188: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
65189: LD_INT 0
65191: PPUSH
65192: PPUSH
65193: PPUSH
// if btype = b_depot then
65194: LD_VAR 0 2
65198: PUSH
65199: LD_INT 0
65201: EQUAL
65202: IFFALSE 65214
// begin result := true ;
65204: LD_ADDR_VAR 0 3
65208: PUSH
65209: LD_INT 1
65211: ST_TO_ADDR
// exit ;
65212: GO 65330
// end ; pom := GetBase ( depot ) ;
65214: LD_ADDR_VAR 0 4
65218: PUSH
65219: LD_VAR 0 1
65223: PPUSH
65224: CALL_OW 274
65228: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
65229: LD_ADDR_VAR 0 5
65233: PUSH
65234: LD_VAR 0 2
65238: PPUSH
65239: LD_VAR 0 1
65243: PPUSH
65244: CALL_OW 248
65248: PPUSH
65249: CALL_OW 450
65253: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
65254: LD_ADDR_VAR 0 3
65258: PUSH
65259: LD_VAR 0 4
65263: PPUSH
65264: LD_INT 1
65266: PPUSH
65267: CALL_OW 275
65271: PUSH
65272: LD_VAR 0 5
65276: PUSH
65277: LD_INT 1
65279: ARRAY
65280: GREATEREQUAL
65281: PUSH
65282: LD_VAR 0 4
65286: PPUSH
65287: LD_INT 2
65289: PPUSH
65290: CALL_OW 275
65294: PUSH
65295: LD_VAR 0 5
65299: PUSH
65300: LD_INT 2
65302: ARRAY
65303: GREATEREQUAL
65304: AND
65305: PUSH
65306: LD_VAR 0 4
65310: PPUSH
65311: LD_INT 3
65313: PPUSH
65314: CALL_OW 275
65318: PUSH
65319: LD_VAR 0 5
65323: PUSH
65324: LD_INT 3
65326: ARRAY
65327: GREATEREQUAL
65328: AND
65329: ST_TO_ADDR
// end ;
65330: LD_VAR 0 3
65334: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
65335: LD_INT 0
65337: PPUSH
// if not vehicles or not parkingPoint then
65338: LD_VAR 0 1
65342: NOT
65343: PUSH
65344: LD_VAR 0 2
65348: NOT
65349: OR
65350: IFFALSE 65354
// exit ;
65352: GO 65452
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
65354: LD_ADDR_VAR 0 1
65358: PUSH
65359: LD_VAR 0 1
65363: PPUSH
65364: LD_INT 50
65366: PUSH
65367: EMPTY
65368: LIST
65369: PUSH
65370: LD_INT 3
65372: PUSH
65373: LD_INT 92
65375: PUSH
65376: LD_VAR 0 2
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: PUSH
65385: LD_VAR 0 2
65389: PUSH
65390: LD_INT 2
65392: ARRAY
65393: PUSH
65394: LD_INT 8
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PPUSH
65411: CALL_OW 72
65415: ST_TO_ADDR
// if not vehicles then
65416: LD_VAR 0 1
65420: NOT
65421: IFFALSE 65425
// exit ;
65423: GO 65452
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
65425: LD_VAR 0 1
65429: PPUSH
65430: LD_VAR 0 2
65434: PUSH
65435: LD_INT 1
65437: ARRAY
65438: PPUSH
65439: LD_VAR 0 2
65443: PUSH
65444: LD_INT 2
65446: ARRAY
65447: PPUSH
65448: CALL_OW 111
// end ;
65452: LD_VAR 0 3
65456: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
65457: LD_INT 0
65459: PPUSH
65460: PPUSH
65461: PPUSH
// if not side or not area then
65462: LD_VAR 0 1
65466: NOT
65467: PUSH
65468: LD_VAR 0 2
65472: NOT
65473: OR
65474: IFFALSE 65478
// exit ;
65476: GO 65597
// tmp := AreaToList ( area , 0 ) ;
65478: LD_ADDR_VAR 0 5
65482: PUSH
65483: LD_VAR 0 2
65487: PPUSH
65488: LD_INT 0
65490: PPUSH
65491: CALL_OW 517
65495: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65496: LD_ADDR_VAR 0 4
65500: PUSH
65501: DOUBLE
65502: LD_INT 1
65504: DEC
65505: ST_TO_ADDR
65506: LD_VAR 0 5
65510: PUSH
65511: LD_INT 1
65513: ARRAY
65514: PUSH
65515: FOR_TO
65516: IFFALSE 65595
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65518: LD_VAR 0 5
65522: PUSH
65523: LD_INT 1
65525: ARRAY
65526: PUSH
65527: LD_VAR 0 4
65531: ARRAY
65532: PPUSH
65533: LD_VAR 0 5
65537: PUSH
65538: LD_INT 2
65540: ARRAY
65541: PUSH
65542: LD_VAR 0 4
65546: ARRAY
65547: PPUSH
65548: CALL_OW 351
65552: IFFALSE 65593
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65554: LD_VAR 0 5
65558: PUSH
65559: LD_INT 1
65561: ARRAY
65562: PUSH
65563: LD_VAR 0 4
65567: ARRAY
65568: PPUSH
65569: LD_VAR 0 5
65573: PUSH
65574: LD_INT 2
65576: ARRAY
65577: PUSH
65578: LD_VAR 0 4
65582: ARRAY
65583: PPUSH
65584: LD_VAR 0 1
65588: PPUSH
65589: CALL_OW 244
// end ;
65593: GO 65515
65595: POP
65596: POP
// end ; end_of_file
65597: LD_VAR 0 3
65601: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65602: LD_VAR 0 1
65606: PPUSH
65607: LD_VAR 0 2
65611: PPUSH
65612: LD_VAR 0 3
65616: PPUSH
65617: LD_VAR 0 4
65621: PPUSH
65622: LD_VAR 0 5
65626: PPUSH
65627: LD_VAR 0 6
65631: PPUSH
65632: CALL 2127 0 6
// end ;
65636: PPOPN 6
65638: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65639: LD_INT 0
65641: PPUSH
// begin if not units then
65642: LD_VAR 0 1
65646: NOT
65647: IFFALSE 65651
// exit ;
65649: GO 65651
// end ;
65651: PPOPN 7
65653: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65654: CALL 2014 0 0
// end ;
65658: PPOPN 1
65660: END
