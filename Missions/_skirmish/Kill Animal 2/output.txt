// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 83 0 0
// InitGlobalVariables ;
  18: CALL 60029 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 3
  60: PUSH
  61: LD_INT 3
  63: PUSH
  64: EMPTY
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: LIST
  70: LIST
  71: LIST
  72: LIST
  73: PPUSH
  74: CALL 395 0 3
// PrepareHunters ( ) ;
  78: CALL 241 0 0
// end ;
  82: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// if debug then
  94: LD_EXP 1
  98: IFFALSE 133
// begin FogOff ( 1 ) ;
 100: LD_INT 1
 102: PPUSH
 103: CALL_OW 344
// Difficulty := 2 ;
 107: LD_ADDR_OWVAR 67
 111: PUSH
 112: LD_INT 2
 114: ST_TO_ADDR
// hunterClass := 3 ;
 115: LD_ADDR_EXP 2
 119: PUSH
 120: LD_INT 3
 122: ST_TO_ADDR
// animalAmount := 2 ;
 123: LD_ADDR_EXP 4
 127: PUSH
 128: LD_INT 2
 130: ST_TO_ADDR
// end else
 131: GO 172
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 133: LD_ADDR_OWVAR 67
 137: PUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL_OW 426
 145: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 146: LD_ADDR_EXP 2
 150: PUSH
 151: LD_INT 2
 153: PPUSH
 154: CALL_OW 426
 158: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 159: LD_ADDR_EXP 4
 163: PUSH
 164: LD_INT 1
 166: PPUSH
 167: CALL_OW 426
 171: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 3
 176: PUSH
 177: LD_INT 4
 179: PUSH
 180: LD_INT 6
 182: PUSH
 183: LD_INT 8
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: LIST
 234: LIST
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// export function PrepareHunters ; var i , un ; begin
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
 245: PPUSH
// for i := 1 to huntersAmount do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_EXP 3
 260: PUSH
 261: FOR_TO
 262: IFFALSE 388
// begin uc_side := i ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_VAR 0 2
 283: PUSH
 284: LD_INT 3
 286: MOD
 287: PUSH
 288: LD_INT 1
 290: PLUS
 291: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 292: LD_INT 0
 294: PPUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 5
 300: PUSH
 301: LD_INT 11
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_EXP 2
 313: ARRAY
 314: PPUSH
 315: LD_INT 10
 317: PUSH
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: MUL
 326: MINUS
 327: PPUSH
 328: CALL_OW 380
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 3
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 342: LD_ADDR_EXP 6
 346: PUSH
 347: LD_EXP 6
 351: PPUSH
 352: LD_EXP 6
 356: PUSH
 357: LD_INT 1
 359: PLUS
 360: PPUSH
 361: LD_VAR 0 3
 365: PPUSH
 366: CALL_OW 1
 370: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 371: LD_VAR 0 3
 375: PPUSH
 376: LD_INT 3
 378: PPUSH
 379: LD_INT 0
 381: PPUSH
 382: CALL_OW 49
// end ;
 386: GO 261
 388: POP
 389: POP
// end ; end_of_file
 390: LD_VAR 0 1
 394: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
// uc_side = 0 ;
 402: LD_ADDR_OWVAR 20
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// uc_nation = 0 ;
 410: LD_ADDR_OWVAR 21
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 418: LD_ADDR_VAR 0 7
 422: PUSH
 423: LD_INT 12
 425: PUSH
 426: LD_INT 15
 428: PUSH
 429: LD_INT 13
 431: PUSH
 432: LD_INT 18
 434: PUSH
 435: LD_INT 14
 437: PUSH
 438: LD_EXP 95
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: LD_INT 20
 458: PUSH
 459: LD_INT 19
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: ST_TO_ADDR
// InitHc_All ( ) ;
 466: CALL_OW 584
// for i := 1 to numbers - 2 do
 470: LD_ADDR_VAR 0 5
 474: PUSH
 475: DOUBLE
 476: LD_INT 1
 478: DEC
 479: ST_TO_ADDR
 480: LD_VAR 0 3
 484: PUSH
 485: LD_INT 2
 487: MINUS
 488: PUSH
 489: FOR_TO
 490: IFFALSE 631
// begin if numbers [ i ] = 0 then
 492: LD_VAR 0 3
 496: PUSH
 497: LD_VAR 0 5
 501: ARRAY
 502: PUSH
 503: LD_INT 0
 505: EQUAL
 506: IFFALSE 510
// continue ;
 508: GO 489
// hc_class := classes [ i ] ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_VAR 0 7
 519: PUSH
 520: LD_VAR 0 5
 524: ARRAY
 525: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 526: LD_ADDR_OWVAR 29
 530: PUSH
 531: LD_INT 8
 533: PPUSH
 534: LD_INT 12
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 8
 544: PPUSH
 545: LD_INT 12
 547: PPUSH
 548: CALL_OW 12
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 557: LD_ADDR_OWVAR 35
 561: PUSH
 562: LD_INT 5
 564: NEG
 565: PPUSH
 566: LD_INT 5
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_OWVAR 67
 578: PUSH
 579: LD_INT 5
 581: MUL
 582: PLUS
 583: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 584: LD_ADDR_VAR 0 6
 588: PUSH
 589: DOUBLE
 590: LD_INT 1
 592: DEC
 593: ST_TO_ADDR
 594: LD_VAR 0 3
 598: PUSH
 599: LD_VAR 0 5
 603: ARRAY
 604: PUSH
 605: FOR_TO
 606: IFFALSE 627
// PlaceUnitArea ( CreateHuman , area , false ) ;
 608: CALL_OW 44
 612: PPUSH
 613: LD_VAR 0 1
 617: PPUSH
 618: LD_INT 0
 620: PPUSH
 621: CALL_OW 49
 625: GO 605
 627: POP
 628: POP
// end ;
 629: GO 489
 631: POP
 632: POP
// if not waterArea then
 633: LD_VAR 0 2
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 802
// hc_class := waterClass [ 1 ] ;
 642: LD_ADDR_OWVAR 28
 646: PUSH
 647: LD_VAR 0 8
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 656: LD_ADDR_OWVAR 29
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 10
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// hc_agressivity := 0 ;
 671: LD_ADDR_OWVAR 35
 675: PUSH
 676: LD_INT 0
 678: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 679: LD_ADDR_VAR 0 6
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_VAR 0 3
 693: PUSH
 694: LD_INT 7
 696: ARRAY
 697: PUSH
 698: FOR_TO
 699: IFFALSE 720
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 701: CALL_OW 44
 705: PPUSH
 706: LD_VAR 0 2
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: CALL_OW 49
 718: GO 698
 720: POP
 721: POP
// hc_class := waterClass [ 2 ] ;
 722: LD_ADDR_OWVAR 28
 726: PUSH
 727: LD_VAR 0 8
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 736: LD_ADDR_OWVAR 29
 740: PUSH
 741: LD_INT 10
 743: PUSH
 744: LD_INT 10
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// hc_agressivity := 0 ;
 751: LD_ADDR_OWVAR 35
 755: PUSH
 756: LD_INT 0
 758: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 759: LD_ADDR_VAR 0 6
 763: PUSH
 764: DOUBLE
 765: LD_INT 1
 767: DEC
 768: ST_TO_ADDR
 769: LD_VAR 0 3
 773: PUSH
 774: LD_INT 8
 776: ARRAY
 777: PUSH
 778: FOR_TO
 779: IFFALSE 800
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 781: CALL_OW 44
 785: PPUSH
 786: LD_VAR 0 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
 798: GO 778
 800: POP
 801: POP
// end ; end_of_file
 802: LD_VAR 0 4
 806: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 807: LD_INT 22
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 25
 819: PUSH
 820: LD_INT 15
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: IFFALSE 941
 837: GO 839
 839: DISABLE
 840: LD_INT 0
 842: PPUSH
// begin enable ;
 843: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 844: LD_ADDR_VAR 0 1
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 25
 861: PUSH
 862: LD_INT 15
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: PUSH
 878: FOR_IN
 879: IFFALSE 939
// if GetLives ( i ) < 1000 then
 881: LD_VAR 0 1
 885: PPUSH
 886: CALL_OW 256
 890: PUSH
 891: LD_INT 1000
 893: LESS
 894: IFFALSE 937
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 896: LD_VAR 0 1
 900: PPUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 22
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PPUSH
 923: LD_VAR 0 1
 927: PPUSH
 928: CALL_OW 74
 932: PPUSH
 933: CALL_OW 115
 937: GO 878
 939: POP
 940: POP
// end ;
 941: PPOPN 1
 943: END
// every 3 do var i , enemy , x , y , d ;
 944: GO 946
 946: DISABLE
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
// begin enable ;
 954: ENABLE
// for i := 2 to huntersAmount do
 955: LD_ADDR_VAR 0 1
 959: PUSH
 960: DOUBLE
 961: LD_INT 2
 963: DEC
 964: ST_TO_ADDR
 965: LD_EXP 3
 969: PUSH
 970: FOR_TO
 971: IFFALSE 1310
// begin if not HasTask ( hunters [ i ] ) then
 973: LD_EXP 6
 977: PUSH
 978: LD_VAR 0 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 314
 988: NOT
 989: IFFALSE 1308
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: LD_INT 22
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: PPUSH
1011: LD_EXP 6
1015: PUSH
1016: LD_VAR 0 1
1020: ARRAY
1021: PPUSH
1022: CALL_OW 74
1026: ST_TO_ADDR
// if not enemy then
1027: LD_VAR 0 2
1031: NOT
1032: IFFALSE 1036
// continue ;
1034: GO 970
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1036: LD_EXP 6
1040: PUSH
1041: LD_VAR 0 1
1045: ARRAY
1046: PPUSH
1047: LD_VAR 0 2
1051: PPUSH
1052: CALL_OW 296
1056: PUSH
1057: LD_INT 17
1059: LESS
1060: IFFALSE 1163
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1062: LD_EXP 6
1066: PUSH
1067: LD_VAR 0 1
1071: ARRAY
1072: PPUSH
1073: CALL_OW 257
1077: PUSH
1078: LD_INT 11
1080: EQUAL
1081: IFFALSE 1141
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1083: LD_VAR 0 2
1087: PPUSH
1088: CALL_OW 257
1092: PUSH
1093: LD_INT 19
1095: PUSH
1096: LD_INT 20
1098: PUSH
1099: LD_INT 13
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: IN
1107: IFFALSE 1126
// ComCarabine ( hunters [ i ] ) else
1109: LD_EXP 6
1113: PUSH
1114: LD_VAR 0 1
1118: ARRAY
1119: PPUSH
1120: CALL_OW 162
1124: GO 1141
// ComSabre ( hunters [ i ] ) ;
1126: LD_EXP 6
1130: PUSH
1131: LD_VAR 0 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1141: LD_EXP 6
1145: PUSH
1146: LD_VAR 0 1
1150: ARRAY
1151: PPUSH
1152: LD_VAR 0 2
1156: PPUSH
1157: CALL_OW 115
// end else
1161: GO 1308
// begin d := rand ( 0 , 5 ) ;
1163: LD_ADDR_VAR 0 5
1167: PUSH
1168: LD_INT 0
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 12
1178: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1179: LD_ADDR_VAR 0 3
1183: PUSH
1184: LD_EXP 6
1188: PUSH
1189: LD_VAR 0 1
1193: ARRAY
1194: PPUSH
1195: CALL_OW 250
1199: PPUSH
1200: LD_VAR 0 5
1204: PPUSH
1205: LD_INT 8
1207: PPUSH
1208: CALL_OW 272
1212: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1213: LD_ADDR_VAR 0 4
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_VAR 0 1
1227: ARRAY
1228: PPUSH
1229: CALL_OW 251
1233: PPUSH
1234: LD_VAR 0 5
1238: PPUSH
1239: LD_INT 8
1241: PPUSH
1242: CALL_OW 273
1246: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1247: LD_VAR 0 3
1251: PPUSH
1252: LD_VAR 0 4
1256: PPUSH
1257: CALL_OW 488
1261: PUSH
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_VAR 0 4
1271: PPUSH
1272: CALL_OW 428
1276: PUSH
1277: LD_INT 0
1279: EQUAL
1280: AND
1281: IFFALSE 1308
// ComMoveXY ( hunters [ i ] , x , y ) ;
1283: LD_EXP 6
1287: PUSH
1288: LD_VAR 0 1
1292: ARRAY
1293: PPUSH
1294: LD_VAR 0 3
1298: PPUSH
1299: LD_VAR 0 4
1303: PPUSH
1304: CALL_OW 111
// end ; end ; end ;
1308: GO 970
1310: POP
1311: POP
// end ; end_of_file
1312: PPOPN 5
1314: END
// on UnitGoesToRed ( un ) do var i ;
1315: LD_INT 0
1317: PPUSH
// begin if GetSide ( un ) = 1 then
1318: LD_VAR 0 1
1322: PPUSH
1323: CALL_OW 255
1327: PUSH
1328: LD_INT 1
1330: EQUAL
1331: IFFALSE 1340
// YouLost ( hunt2 ) ;
1333: LD_STRING hunt2
1335: PPUSH
1336: CALL_OW 104
// if GetSide ( un ) > 1 then
1340: LD_VAR 0 1
1344: PPUSH
1345: CALL_OW 255
1349: PUSH
1350: LD_INT 1
1352: GREATER
1353: IFFALSE 1406
// begin for i := 1 to 6 do
1355: LD_ADDR_VAR 0 2
1359: PUSH
1360: DOUBLE
1361: LD_INT 1
1363: DEC
1364: ST_TO_ADDR
1365: LD_INT 6
1367: PUSH
1368: FOR_TO
1369: IFFALSE 1392
// begin wait ( 0 0$1 ) ;
1371: LD_INT 35
1373: PPUSH
1374: CALL_OW 67
// SetLives ( un , 249 ) ;
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 249
1385: PPUSH
1386: CALL_OW 234
// end ;
1390: GO 1368
1392: POP
1393: POP
// SetLives ( un , 1000 ) ;
1394: LD_VAR 0 1
1398: PPUSH
1399: LD_INT 1000
1401: PPUSH
1402: CALL_OW 234
// end ; end ;
1406: PPOPN 2
1408: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1409: LD_VAR 0 1
1413: PUSH
1414: LD_INT 1
1416: EQUAL
1417: PUSH
1418: LD_VAR 0 2
1422: PUSH
1423: LD_INT 1
1425: GREATER
1426: AND
1427: IFFALSE 1436
// YouLost ( hunt1 ) ;
1429: LD_STRING hunt1
1431: PPUSH
1432: CALL_OW 104
// end ;
1436: PPOPN 2
1438: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1439: LD_INT 0
1441: PPUSH
// begin point := 0 ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1450: LD_VAR 0 1
1454: PPUSH
1455: CALL_OW 257
1459: PUSH
1460: LD_INT 20
1462: DOUBLE
1463: EQUAL
1464: IFTRUE 1468
1466: GO 1479
1468: POP
// point := 10 ; class_horse :
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: LD_INT 10
1476: ST_TO_ADDR
1477: GO 1615
1479: LD_EXP 95
1483: DOUBLE
1484: EQUAL
1485: IFTRUE 1489
1487: GO 1500
1489: POP
// point := 10 ; class_baggie :
1490: LD_ADDR_VAR 0 4
1494: PUSH
1495: LD_INT 10
1497: ST_TO_ADDR
1498: GO 1615
1500: LD_INT 13
1502: DOUBLE
1503: EQUAL
1504: IFTRUE 1508
1506: GO 1519
1508: POP
// point := 5 ; class_phororhacos :
1509: LD_ADDR_VAR 0 4
1513: PUSH
1514: LD_INT 5
1516: ST_TO_ADDR
1517: GO 1615
1519: LD_INT 18
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1538
1527: POP
// point := 10 ; class_tiger :
1528: LD_ADDR_VAR 0 4
1532: PUSH
1533: LD_INT 10
1535: ST_TO_ADDR
1536: GO 1615
1538: LD_INT 14
1540: DOUBLE
1541: EQUAL
1542: IFTRUE 1546
1544: GO 1557
1546: POP
// point := 20 ; class_apeman :
1547: LD_ADDR_VAR 0 4
1551: PUSH
1552: LD_INT 20
1554: ST_TO_ADDR
1555: GO 1615
1557: LD_INT 12
1559: DOUBLE
1560: EQUAL
1561: IFTRUE 1565
1563: GO 1576
1565: POP
// point := 30 ; class_apeman_soldier :
1566: LD_ADDR_VAR 0 4
1570: PUSH
1571: LD_INT 30
1573: ST_TO_ADDR
1574: GO 1615
1576: LD_INT 15
1578: DOUBLE
1579: EQUAL
1580: IFTRUE 1584
1582: GO 1595
1584: POP
// point := 50 ; class_frog :
1585: LD_ADDR_VAR 0 4
1589: PUSH
1590: LD_INT 50
1592: ST_TO_ADDR
1593: GO 1615
1595: LD_INT 19
1597: DOUBLE
1598: EQUAL
1599: IFTRUE 1603
1601: GO 1614
1603: POP
// point := 10 ; end ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: LD_INT 10
1611: ST_TO_ADDR
1612: GO 1615
1614: POP
// if point then
1615: LD_VAR 0 4
1619: IFFALSE 1658
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1621: LD_ADDR_EXP 5
1625: PUSH
1626: LD_EXP 5
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: LD_EXP 5
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: PUSH
1647: LD_VAR 0 4
1651: PLUS
1652: PPUSH
1653: CALL_OW 1
1657: ST_TO_ADDR
// end ;
1658: PPOPN 4
1660: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1661: LD_INT 22
1663: PUSH
1664: LD_INT 0
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PPUSH
1671: CALL_OW 69
1675: PUSH
1676: LD_INT 10
1678: LESS
1679: IFFALSE 1793
1681: GO 1683
1683: DISABLE
// begin enable ;
1684: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1685: LD_INT 2
1687: PPUSH
1688: LD_INT 1
1690: PPUSH
1691: LD_INT 0
1693: PPUSH
1694: LD_INT 4
1696: PPUSH
1697: CALL_OW 12
1701: PUSH
1702: LD_INT 0
1704: PPUSH
1705: LD_INT 2
1707: PPUSH
1708: CALL_OW 12
1712: PUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 4
1718: PPUSH
1719: CALL_OW 12
1723: PUSH
1724: LD_INT 2
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: PUSH
1735: LD_INT 2
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: CALL_OW 12
1745: PUSH
1746: LD_INT 0
1748: PPUSH
1749: LD_INT 2
1751: PPUSH
1752: CALL_OW 12
1756: PUSH
1757: LD_INT 0
1759: PPUSH
1760: LD_INT 4
1762: PPUSH
1763: CALL_OW 12
1767: PUSH
1768: LD_INT 0
1770: PPUSH
1771: LD_INT 2
1773: PPUSH
1774: CALL_OW 12
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: PPUSH
1789: CALL 395 0 3
// end ;
1793: END
// every 0 0$1 do var i ;
1794: GO 1796
1796: DISABLE
1797: LD_INT 0
1799: PPUSH
// begin enable ;
1800: ENABLE
// display_strings := [ ] ;
1801: LD_ADDR_OWVAR 47
1805: PUSH
1806: EMPTY
1807: ST_TO_ADDR
// for i := 1 to huntersAmount do
1808: LD_ADDR_VAR 0 1
1812: PUSH
1813: DOUBLE
1814: LD_INT 1
1816: DEC
1817: ST_TO_ADDR
1818: LD_EXP 3
1822: PUSH
1823: FOR_TO
1824: IFFALSE 1958
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1826: LD_ADDR_OWVAR 47
1830: PUSH
1831: LD_OWVAR 47
1835: PUSH
1836: LD_STRING #player
1838: PUSH
1839: LD_VAR 0 1
1843: STR
1844: PUSH
1845: LD_VAR 0 1
1849: PUSH
1850: LD_EXP 5
1854: PUSH
1855: LD_VAR 0 1
1859: ARRAY
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: ADD
1866: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1867: LD_EXP 5
1871: PUSH
1872: LD_VAR 0 1
1876: ARRAY
1877: PUSH
1878: LD_INT 750
1880: PUSH
1881: LD_INT 1250
1883: PUSH
1884: LD_INT 2000
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_OWVAR 67
1896: ARRAY
1897: GREATEREQUAL
1898: IFFALSE 1956
// begin if i = 1 then
1900: LD_VAR 0 1
1904: PUSH
1905: LD_INT 1
1907: EQUAL
1908: IFFALSE 1949
// begin DialogueOn ;
1910: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1914: LD_STRING ACH_HUNT
1916: PPUSH
1917: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1921: LD_ADDR_OWVAR 47
1925: PUSH
1926: LD_STRING #hunting-win
1928: PUSH
1929: EMPTY
1930: LIST
1931: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1932: LD_INT 175
1934: PPUSH
1935: CALL_OW 68
// YouWin ;
1939: CALL_OW 103
// DialogueOff ;
1943: CALL_OW 7
// end else
1947: GO 1956
// YouLost ( hunt3 ) ;
1949: LD_STRING hunt3
1951: PPUSH
1952: CALL_OW 104
// end ; end ;
1956: GO 1823
1958: POP
1959: POP
// end ; end_of_file end_of_file
1960: PPOPN 1
1962: END
// every 0 0$1 do
1963: GO 1965
1965: DISABLE
// begin enable ;
1966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1967: LD_STRING updateTimer(
1969: PUSH
1970: LD_OWVAR 1
1974: STR
1975: PUSH
1976: LD_STRING );
1978: STR
1979: PPUSH
1980: CALL_OW 559
// end ;
1984: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1985: LD_INT 0
1987: PPUSH
// if p2 = 100 then
1988: LD_VAR 0 2
1992: PUSH
1993: LD_INT 100
1995: EQUAL
1996: IFFALSE 2999
// begin if not StreamModeActive then
1998: LD_EXP 7
2002: NOT
2003: IFFALSE 2013
// StreamModeActive := true ;
2005: LD_ADDR_EXP 7
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// if p3 = 0 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 0
2020: EQUAL
2021: IFFALSE 2027
// InitStreamMode ;
2023: CALL 3159 0 0
// if p3 = 1 then
2027: LD_VAR 0 3
2031: PUSH
2032: LD_INT 1
2034: EQUAL
2035: IFFALSE 2045
// sRocket := true ;
2037: LD_ADDR_EXP 12
2041: PUSH
2042: LD_INT 1
2044: ST_TO_ADDR
// if p3 = 2 then
2045: LD_VAR 0 3
2049: PUSH
2050: LD_INT 2
2052: EQUAL
2053: IFFALSE 2063
// sSpeed := true ;
2055: LD_ADDR_EXP 11
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// if p3 = 3 then
2063: LD_VAR 0 3
2067: PUSH
2068: LD_INT 3
2070: EQUAL
2071: IFFALSE 2081
// sEngine := true ;
2073: LD_ADDR_EXP 13
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// if p3 = 4 then
2081: LD_VAR 0 3
2085: PUSH
2086: LD_INT 4
2088: EQUAL
2089: IFFALSE 2099
// sSpec := true ;
2091: LD_ADDR_EXP 10
2095: PUSH
2096: LD_INT 1
2098: ST_TO_ADDR
// if p3 = 5 then
2099: LD_VAR 0 3
2103: PUSH
2104: LD_INT 5
2106: EQUAL
2107: IFFALSE 2117
// sLevel := true ;
2109: LD_ADDR_EXP 14
2113: PUSH
2114: LD_INT 1
2116: ST_TO_ADDR
// if p3 = 6 then
2117: LD_VAR 0 3
2121: PUSH
2122: LD_INT 6
2124: EQUAL
2125: IFFALSE 2135
// sArmoury := true ;
2127: LD_ADDR_EXP 15
2131: PUSH
2132: LD_INT 1
2134: ST_TO_ADDR
// if p3 = 7 then
2135: LD_VAR 0 3
2139: PUSH
2140: LD_INT 7
2142: EQUAL
2143: IFFALSE 2153
// sRadar := true ;
2145: LD_ADDR_EXP 16
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// if p3 = 8 then
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 8
2160: EQUAL
2161: IFFALSE 2171
// sBunker := true ;
2163: LD_ADDR_EXP 17
2167: PUSH
2168: LD_INT 1
2170: ST_TO_ADDR
// if p3 = 9 then
2171: LD_VAR 0 3
2175: PUSH
2176: LD_INT 9
2178: EQUAL
2179: IFFALSE 2189
// sHack := true ;
2181: LD_ADDR_EXP 18
2185: PUSH
2186: LD_INT 1
2188: ST_TO_ADDR
// if p3 = 10 then
2189: LD_VAR 0 3
2193: PUSH
2194: LD_INT 10
2196: EQUAL
2197: IFFALSE 2207
// sFire := true ;
2199: LD_ADDR_EXP 19
2203: PUSH
2204: LD_INT 1
2206: ST_TO_ADDR
// if p3 = 11 then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 11
2214: EQUAL
2215: IFFALSE 2225
// sRefresh := true ;
2217: LD_ADDR_EXP 20
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// if p3 = 12 then
2225: LD_VAR 0 3
2229: PUSH
2230: LD_INT 12
2232: EQUAL
2233: IFFALSE 2243
// sExp := true ;
2235: LD_ADDR_EXP 21
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// if p3 = 13 then
2243: LD_VAR 0 3
2247: PUSH
2248: LD_INT 13
2250: EQUAL
2251: IFFALSE 2261
// sDepot := true ;
2253: LD_ADDR_EXP 22
2257: PUSH
2258: LD_INT 1
2260: ST_TO_ADDR
// if p3 = 14 then
2261: LD_VAR 0 3
2265: PUSH
2266: LD_INT 14
2268: EQUAL
2269: IFFALSE 2279
// sFlag := true ;
2271: LD_ADDR_EXP 23
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// if p3 = 15 then
2279: LD_VAR 0 3
2283: PUSH
2284: LD_INT 15
2286: EQUAL
2287: IFFALSE 2297
// sKamikadze := true ;
2289: LD_ADDR_EXP 31
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// if p3 = 16 then
2297: LD_VAR 0 3
2301: PUSH
2302: LD_INT 16
2304: EQUAL
2305: IFFALSE 2315
// sTroll := true ;
2307: LD_ADDR_EXP 32
2311: PUSH
2312: LD_INT 1
2314: ST_TO_ADDR
// if p3 = 17 then
2315: LD_VAR 0 3
2319: PUSH
2320: LD_INT 17
2322: EQUAL
2323: IFFALSE 2333
// sSlow := true ;
2325: LD_ADDR_EXP 33
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// if p3 = 18 then
2333: LD_VAR 0 3
2337: PUSH
2338: LD_INT 18
2340: EQUAL
2341: IFFALSE 2351
// sLack := true ;
2343: LD_ADDR_EXP 34
2347: PUSH
2348: LD_INT 1
2350: ST_TO_ADDR
// if p3 = 19 then
2351: LD_VAR 0 3
2355: PUSH
2356: LD_INT 19
2358: EQUAL
2359: IFFALSE 2369
// sTank := true ;
2361: LD_ADDR_EXP 36
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// if p3 = 20 then
2369: LD_VAR 0 3
2373: PUSH
2374: LD_INT 20
2376: EQUAL
2377: IFFALSE 2387
// sRemote := true ;
2379: LD_ADDR_EXP 37
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// if p3 = 21 then
2387: LD_VAR 0 3
2391: PUSH
2392: LD_INT 21
2394: EQUAL
2395: IFFALSE 2405
// sPowell := true ;
2397: LD_ADDR_EXP 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// if p3 = 22 then
2405: LD_VAR 0 3
2409: PUSH
2410: LD_INT 22
2412: EQUAL
2413: IFFALSE 2423
// sTeleport := true ;
2415: LD_ADDR_EXP 41
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
// if p3 = 23 then
2423: LD_VAR 0 3
2427: PUSH
2428: LD_INT 23
2430: EQUAL
2431: IFFALSE 2441
// sOilTower := true ;
2433: LD_ADDR_EXP 43
2437: PUSH
2438: LD_INT 1
2440: ST_TO_ADDR
// if p3 = 24 then
2441: LD_VAR 0 3
2445: PUSH
2446: LD_INT 24
2448: EQUAL
2449: IFFALSE 2459
// sShovel := true ;
2451: LD_ADDR_EXP 44
2455: PUSH
2456: LD_INT 1
2458: ST_TO_ADDR
// if p3 = 25 then
2459: LD_VAR 0 3
2463: PUSH
2464: LD_INT 25
2466: EQUAL
2467: IFFALSE 2477
// sSheik := true ;
2469: LD_ADDR_EXP 45
2473: PUSH
2474: LD_INT 1
2476: ST_TO_ADDR
// if p3 = 26 then
2477: LD_VAR 0 3
2481: PUSH
2482: LD_INT 26
2484: EQUAL
2485: IFFALSE 2495
// sEarthquake := true ;
2487: LD_ADDR_EXP 47
2491: PUSH
2492: LD_INT 1
2494: ST_TO_ADDR
// if p3 = 27 then
2495: LD_VAR 0 3
2499: PUSH
2500: LD_INT 27
2502: EQUAL
2503: IFFALSE 2513
// sAI := true ;
2505: LD_ADDR_EXP 48
2509: PUSH
2510: LD_INT 1
2512: ST_TO_ADDR
// if p3 = 28 then
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 28
2520: EQUAL
2521: IFFALSE 2531
// sCargo := true ;
2523: LD_ADDR_EXP 51
2527: PUSH
2528: LD_INT 1
2530: ST_TO_ADDR
// if p3 = 29 then
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 29
2538: EQUAL
2539: IFFALSE 2549
// sDLaser := true ;
2541: LD_ADDR_EXP 52
2545: PUSH
2546: LD_INT 1
2548: ST_TO_ADDR
// if p3 = 30 then
2549: LD_VAR 0 3
2553: PUSH
2554: LD_INT 30
2556: EQUAL
2557: IFFALSE 2567
// sExchange := true ;
2559: LD_ADDR_EXP 53
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// if p3 = 31 then
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 31
2574: EQUAL
2575: IFFALSE 2585
// sFac := true ;
2577: LD_ADDR_EXP 54
2581: PUSH
2582: LD_INT 1
2584: ST_TO_ADDR
// if p3 = 32 then
2585: LD_VAR 0 3
2589: PUSH
2590: LD_INT 32
2592: EQUAL
2593: IFFALSE 2603
// sPower := true ;
2595: LD_ADDR_EXP 55
2599: PUSH
2600: LD_INT 1
2602: ST_TO_ADDR
// if p3 = 33 then
2603: LD_VAR 0 3
2607: PUSH
2608: LD_INT 33
2610: EQUAL
2611: IFFALSE 2621
// sRandom := true ;
2613: LD_ADDR_EXP 56
2617: PUSH
2618: LD_INT 1
2620: ST_TO_ADDR
// if p3 = 34 then
2621: LD_VAR 0 3
2625: PUSH
2626: LD_INT 34
2628: EQUAL
2629: IFFALSE 2639
// sShield := true ;
2631: LD_ADDR_EXP 57
2635: PUSH
2636: LD_INT 1
2638: ST_TO_ADDR
// if p3 = 35 then
2639: LD_VAR 0 3
2643: PUSH
2644: LD_INT 35
2646: EQUAL
2647: IFFALSE 2657
// sTime := true ;
2649: LD_ADDR_EXP 58
2653: PUSH
2654: LD_INT 1
2656: ST_TO_ADDR
// if p3 = 36 then
2657: LD_VAR 0 3
2661: PUSH
2662: LD_INT 36
2664: EQUAL
2665: IFFALSE 2675
// sTools := true ;
2667: LD_ADDR_EXP 59
2671: PUSH
2672: LD_INT 1
2674: ST_TO_ADDR
// if p3 = 101 then
2675: LD_VAR 0 3
2679: PUSH
2680: LD_INT 101
2682: EQUAL
2683: IFFALSE 2693
// sSold := true ;
2685: LD_ADDR_EXP 24
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// if p3 = 102 then
2693: LD_VAR 0 3
2697: PUSH
2698: LD_INT 102
2700: EQUAL
2701: IFFALSE 2711
// sDiff := true ;
2703: LD_ADDR_EXP 25
2707: PUSH
2708: LD_INT 1
2710: ST_TO_ADDR
// if p3 = 103 then
2711: LD_VAR 0 3
2715: PUSH
2716: LD_INT 103
2718: EQUAL
2719: IFFALSE 2729
// sFog := true ;
2721: LD_ADDR_EXP 28
2725: PUSH
2726: LD_INT 1
2728: ST_TO_ADDR
// if p3 = 104 then
2729: LD_VAR 0 3
2733: PUSH
2734: LD_INT 104
2736: EQUAL
2737: IFFALSE 2747
// sReset := true ;
2739: LD_ADDR_EXP 29
2743: PUSH
2744: LD_INT 1
2746: ST_TO_ADDR
// if p3 = 105 then
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 105
2754: EQUAL
2755: IFFALSE 2765
// sSun := true ;
2757: LD_ADDR_EXP 30
2761: PUSH
2762: LD_INT 1
2764: ST_TO_ADDR
// if p3 = 106 then
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 106
2772: EQUAL
2773: IFFALSE 2783
// sTiger := true ;
2775: LD_ADDR_EXP 26
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// if p3 = 107 then
2783: LD_VAR 0 3
2787: PUSH
2788: LD_INT 107
2790: EQUAL
2791: IFFALSE 2801
// sBomb := true ;
2793: LD_ADDR_EXP 27
2797: PUSH
2798: LD_INT 1
2800: ST_TO_ADDR
// if p3 = 108 then
2801: LD_VAR 0 3
2805: PUSH
2806: LD_INT 108
2808: EQUAL
2809: IFFALSE 2819
// sWound := true ;
2811: LD_ADDR_EXP 35
2815: PUSH
2816: LD_INT 1
2818: ST_TO_ADDR
// if p3 = 109 then
2819: LD_VAR 0 3
2823: PUSH
2824: LD_INT 109
2826: EQUAL
2827: IFFALSE 2837
// sBetray := true ;
2829: LD_ADDR_EXP 39
2833: PUSH
2834: LD_INT 1
2836: ST_TO_ADDR
// if p3 = 110 then
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 110
2844: EQUAL
2845: IFFALSE 2855
// sContamin := true ;
2847: LD_ADDR_EXP 40
2851: PUSH
2852: LD_INT 1
2854: ST_TO_ADDR
// if p3 = 111 then
2855: LD_VAR 0 3
2859: PUSH
2860: LD_INT 111
2862: EQUAL
2863: IFFALSE 2873
// sOil := true ;
2865: LD_ADDR_EXP 42
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// if p3 = 112 then
2873: LD_VAR 0 3
2877: PUSH
2878: LD_INT 112
2880: EQUAL
2881: IFFALSE 2891
// sStu := true ;
2883: LD_ADDR_EXP 46
2887: PUSH
2888: LD_INT 1
2890: ST_TO_ADDR
// if p3 = 113 then
2891: LD_VAR 0 3
2895: PUSH
2896: LD_INT 113
2898: EQUAL
2899: IFFALSE 2909
// sBazooka := true ;
2901: LD_ADDR_EXP 49
2905: PUSH
2906: LD_INT 1
2908: ST_TO_ADDR
// if p3 = 114 then
2909: LD_VAR 0 3
2913: PUSH
2914: LD_INT 114
2916: EQUAL
2917: IFFALSE 2927
// sMortar := true ;
2919: LD_ADDR_EXP 50
2923: PUSH
2924: LD_INT 1
2926: ST_TO_ADDR
// if p3 = 115 then
2927: LD_VAR 0 3
2931: PUSH
2932: LD_INT 115
2934: EQUAL
2935: IFFALSE 2945
// sRanger := true ;
2937: LD_ADDR_EXP 60
2941: PUSH
2942: LD_INT 1
2944: ST_TO_ADDR
// if p3 = 116 then
2945: LD_VAR 0 3
2949: PUSH
2950: LD_INT 116
2952: EQUAL
2953: IFFALSE 2963
// sComputer := true ;
2955: LD_ADDR_EXP 61
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// if p3 = 117 then
2963: LD_VAR 0 3
2967: PUSH
2968: LD_INT 117
2970: EQUAL
2971: IFFALSE 2981
// s30 := true ;
2973: LD_ADDR_EXP 62
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// if p3 = 118 then
2981: LD_VAR 0 3
2985: PUSH
2986: LD_INT 118
2988: EQUAL
2989: IFFALSE 2999
// s60 := true ;
2991: LD_ADDR_EXP 63
2995: PUSH
2996: LD_INT 1
2998: ST_TO_ADDR
// end ; if p2 = 101 then
2999: LD_VAR 0 2
3003: PUSH
3004: LD_INT 101
3006: EQUAL
3007: IFFALSE 3135
// begin case p3 of 1 :
3009: LD_VAR 0 3
3013: PUSH
3014: LD_INT 1
3016: DOUBLE
3017: EQUAL
3018: IFTRUE 3022
3020: GO 3029
3022: POP
// hHackUnlimitedResources ; 2 :
3023: CALL 14731 0 0
3027: GO 3135
3029: LD_INT 2
3031: DOUBLE
3032: EQUAL
3033: IFTRUE 3037
3035: GO 3044
3037: POP
// hHackSetLevel10 ; 3 :
3038: CALL 14864 0 0
3042: GO 3135
3044: LD_INT 3
3046: DOUBLE
3047: EQUAL
3048: IFTRUE 3052
3050: GO 3059
3052: POP
// hHackSetLevel10YourUnits ; 4 :
3053: CALL 14949 0 0
3057: GO 3135
3059: LD_INT 4
3061: DOUBLE
3062: EQUAL
3063: IFTRUE 3067
3065: GO 3074
3067: POP
// hHackInvincible ; 5 :
3068: CALL 15397 0 0
3072: GO 3135
3074: LD_INT 5
3076: DOUBLE
3077: EQUAL
3078: IFTRUE 3082
3080: GO 3089
3082: POP
// hHackInvisible ; 6 :
3083: CALL 15508 0 0
3087: GO 3135
3089: LD_INT 6
3091: DOUBLE
3092: EQUAL
3093: IFTRUE 3097
3095: GO 3104
3097: POP
// hHackChangeYourSide ; 7 :
3098: CALL 15565 0 0
3102: GO 3135
3104: LD_INT 7
3106: DOUBLE
3107: EQUAL
3108: IFTRUE 3112
3110: GO 3119
3112: POP
// hHackChangeUnitSide ; 8 :
3113: CALL 15607 0 0
3117: GO 3135
3119: LD_INT 8
3121: DOUBLE
3122: EQUAL
3123: IFTRUE 3127
3125: GO 3134
3127: POP
// hHackFog ; end ;
3128: CALL 15708 0 0
3132: GO 3135
3134: POP
// end ; end ;
3135: LD_VAR 0 7
3139: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3140: GO 3142
3142: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3143: LD_STRING initStreamRollete();
3145: PPUSH
3146: CALL_OW 559
// InitStreamMode ;
3150: CALL 3159 0 0
// DefineStreamItems ( ) ;
3154: CALL 3623 0 0
// end ;
3158: END
// function InitStreamMode ; begin
3159: LD_INT 0
3161: PPUSH
// streamModeActive := false ;
3162: LD_ADDR_EXP 7
3166: PUSH
3167: LD_INT 0
3169: ST_TO_ADDR
// normalCounter := 36 ;
3170: LD_ADDR_EXP 8
3174: PUSH
3175: LD_INT 36
3177: ST_TO_ADDR
// hardcoreCounter := 16 ;
3178: LD_ADDR_EXP 9
3182: PUSH
3183: LD_INT 16
3185: ST_TO_ADDR
// sRocket := false ;
3186: LD_ADDR_EXP 12
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// sSpeed := false ;
3194: LD_ADDR_EXP 11
3198: PUSH
3199: LD_INT 0
3201: ST_TO_ADDR
// sEngine := false ;
3202: LD_ADDR_EXP 13
3206: PUSH
3207: LD_INT 0
3209: ST_TO_ADDR
// sSpec := false ;
3210: LD_ADDR_EXP 10
3214: PUSH
3215: LD_INT 0
3217: ST_TO_ADDR
// sLevel := false ;
3218: LD_ADDR_EXP 14
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// sArmoury := false ;
3226: LD_ADDR_EXP 15
3230: PUSH
3231: LD_INT 0
3233: ST_TO_ADDR
// sRadar := false ;
3234: LD_ADDR_EXP 16
3238: PUSH
3239: LD_INT 0
3241: ST_TO_ADDR
// sBunker := false ;
3242: LD_ADDR_EXP 17
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// sHack := false ;
3250: LD_ADDR_EXP 18
3254: PUSH
3255: LD_INT 0
3257: ST_TO_ADDR
// sFire := false ;
3258: LD_ADDR_EXP 19
3262: PUSH
3263: LD_INT 0
3265: ST_TO_ADDR
// sRefresh := false ;
3266: LD_ADDR_EXP 20
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// sExp := false ;
3274: LD_ADDR_EXP 21
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// sDepot := false ;
3282: LD_ADDR_EXP 22
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// sFlag := false ;
3290: LD_ADDR_EXP 23
3294: PUSH
3295: LD_INT 0
3297: ST_TO_ADDR
// sKamikadze := false ;
3298: LD_ADDR_EXP 31
3302: PUSH
3303: LD_INT 0
3305: ST_TO_ADDR
// sTroll := false ;
3306: LD_ADDR_EXP 32
3310: PUSH
3311: LD_INT 0
3313: ST_TO_ADDR
// sSlow := false ;
3314: LD_ADDR_EXP 33
3318: PUSH
3319: LD_INT 0
3321: ST_TO_ADDR
// sLack := false ;
3322: LD_ADDR_EXP 34
3326: PUSH
3327: LD_INT 0
3329: ST_TO_ADDR
// sTank := false ;
3330: LD_ADDR_EXP 36
3334: PUSH
3335: LD_INT 0
3337: ST_TO_ADDR
// sRemote := false ;
3338: LD_ADDR_EXP 37
3342: PUSH
3343: LD_INT 0
3345: ST_TO_ADDR
// sPowell := false ;
3346: LD_ADDR_EXP 38
3350: PUSH
3351: LD_INT 0
3353: ST_TO_ADDR
// sTeleport := false ;
3354: LD_ADDR_EXP 41
3358: PUSH
3359: LD_INT 0
3361: ST_TO_ADDR
// sOilTower := false ;
3362: LD_ADDR_EXP 43
3366: PUSH
3367: LD_INT 0
3369: ST_TO_ADDR
// sShovel := false ;
3370: LD_ADDR_EXP 44
3374: PUSH
3375: LD_INT 0
3377: ST_TO_ADDR
// sSheik := false ;
3378: LD_ADDR_EXP 45
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// sEarthquake := false ;
3386: LD_ADDR_EXP 47
3390: PUSH
3391: LD_INT 0
3393: ST_TO_ADDR
// sAI := false ;
3394: LD_ADDR_EXP 48
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// sCargo := false ;
3402: LD_ADDR_EXP 51
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// sDLaser := false ;
3410: LD_ADDR_EXP 52
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// sExchange := false ;
3418: LD_ADDR_EXP 53
3422: PUSH
3423: LD_INT 0
3425: ST_TO_ADDR
// sFac := false ;
3426: LD_ADDR_EXP 54
3430: PUSH
3431: LD_INT 0
3433: ST_TO_ADDR
// sPower := false ;
3434: LD_ADDR_EXP 55
3438: PUSH
3439: LD_INT 0
3441: ST_TO_ADDR
// sRandom := false ;
3442: LD_ADDR_EXP 56
3446: PUSH
3447: LD_INT 0
3449: ST_TO_ADDR
// sShield := false ;
3450: LD_ADDR_EXP 57
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// sTime := false ;
3458: LD_ADDR_EXP 58
3462: PUSH
3463: LD_INT 0
3465: ST_TO_ADDR
// sTools := false ;
3466: LD_ADDR_EXP 59
3470: PUSH
3471: LD_INT 0
3473: ST_TO_ADDR
// sSold := false ;
3474: LD_ADDR_EXP 24
3478: PUSH
3479: LD_INT 0
3481: ST_TO_ADDR
// sDiff := false ;
3482: LD_ADDR_EXP 25
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
// sFog := false ;
3490: LD_ADDR_EXP 28
3494: PUSH
3495: LD_INT 0
3497: ST_TO_ADDR
// sReset := false ;
3498: LD_ADDR_EXP 29
3502: PUSH
3503: LD_INT 0
3505: ST_TO_ADDR
// sSun := false ;
3506: LD_ADDR_EXP 30
3510: PUSH
3511: LD_INT 0
3513: ST_TO_ADDR
// sTiger := false ;
3514: LD_ADDR_EXP 26
3518: PUSH
3519: LD_INT 0
3521: ST_TO_ADDR
// sBomb := false ;
3522: LD_ADDR_EXP 27
3526: PUSH
3527: LD_INT 0
3529: ST_TO_ADDR
// sWound := false ;
3530: LD_ADDR_EXP 35
3534: PUSH
3535: LD_INT 0
3537: ST_TO_ADDR
// sBetray := false ;
3538: LD_ADDR_EXP 39
3542: PUSH
3543: LD_INT 0
3545: ST_TO_ADDR
// sContamin := false ;
3546: LD_ADDR_EXP 40
3550: PUSH
3551: LD_INT 0
3553: ST_TO_ADDR
// sOil := false ;
3554: LD_ADDR_EXP 42
3558: PUSH
3559: LD_INT 0
3561: ST_TO_ADDR
// sStu := false ;
3562: LD_ADDR_EXP 46
3566: PUSH
3567: LD_INT 0
3569: ST_TO_ADDR
// sBazooka := false ;
3570: LD_ADDR_EXP 49
3574: PUSH
3575: LD_INT 0
3577: ST_TO_ADDR
// sMortar := false ;
3578: LD_ADDR_EXP 50
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// sRanger := false ;
3586: LD_ADDR_EXP 60
3590: PUSH
3591: LD_INT 0
3593: ST_TO_ADDR
// sComputer := false ;
3594: LD_ADDR_EXP 61
3598: PUSH
3599: LD_INT 0
3601: ST_TO_ADDR
// s30 := false ;
3602: LD_ADDR_EXP 62
3606: PUSH
3607: LD_INT 0
3609: ST_TO_ADDR
// s60 := false ;
3610: LD_ADDR_EXP 63
3614: PUSH
3615: LD_INT 0
3617: ST_TO_ADDR
// end ;
3618: LD_VAR 0 1
3622: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3623: LD_INT 0
3625: PPUSH
3626: PPUSH
3627: PPUSH
3628: PPUSH
3629: PPUSH
// result := [ ] ;
3630: LD_ADDR_VAR 0 1
3634: PUSH
3635: EMPTY
3636: ST_TO_ADDR
// if campaign_id = 1 then
3637: LD_OWVAR 69
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: IFFALSE 6811
// begin case mission_number of 1 :
3647: LD_OWVAR 70
3651: PUSH
3652: LD_INT 1
3654: DOUBLE
3655: EQUAL
3656: IFTRUE 3660
3658: GO 3736
3660: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3661: LD_ADDR_VAR 0 1
3665: PUSH
3666: LD_INT 2
3668: PUSH
3669: LD_INT 4
3671: PUSH
3672: LD_INT 11
3674: PUSH
3675: LD_INT 12
3677: PUSH
3678: LD_INT 15
3680: PUSH
3681: LD_INT 16
3683: PUSH
3684: LD_INT 22
3686: PUSH
3687: LD_INT 23
3689: PUSH
3690: LD_INT 26
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 101
3706: PUSH
3707: LD_INT 102
3709: PUSH
3710: LD_INT 106
3712: PUSH
3713: LD_INT 116
3715: PUSH
3716: LD_INT 117
3718: PUSH
3719: LD_INT 118
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: ST_TO_ADDR
3734: GO 6809
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3828
3744: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3745: LD_ADDR_VAR 0 1
3749: PUSH
3750: LD_INT 2
3752: PUSH
3753: LD_INT 4
3755: PUSH
3756: LD_INT 11
3758: PUSH
3759: LD_INT 12
3761: PUSH
3762: LD_INT 15
3764: PUSH
3765: LD_INT 16
3767: PUSH
3768: LD_INT 22
3770: PUSH
3771: LD_INT 23
3773: PUSH
3774: LD_INT 26
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 101
3790: PUSH
3791: LD_INT 102
3793: PUSH
3794: LD_INT 105
3796: PUSH
3797: LD_INT 106
3799: PUSH
3800: LD_INT 108
3802: PUSH
3803: LD_INT 116
3805: PUSH
3806: LD_INT 117
3808: PUSH
3809: LD_INT 118
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: ST_TO_ADDR
3826: GO 6809
3828: LD_INT 3
3830: DOUBLE
3831: EQUAL
3832: IFTRUE 3836
3834: GO 3924
3836: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3837: LD_ADDR_VAR 0 1
3841: PUSH
3842: LD_INT 2
3844: PUSH
3845: LD_INT 4
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: LD_INT 11
3853: PUSH
3854: LD_INT 12
3856: PUSH
3857: LD_INT 15
3859: PUSH
3860: LD_INT 16
3862: PUSH
3863: LD_INT 22
3865: PUSH
3866: LD_INT 26
3868: PUSH
3869: LD_INT 36
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: PUSH
3884: LD_INT 101
3886: PUSH
3887: LD_INT 102
3889: PUSH
3890: LD_INT 105
3892: PUSH
3893: LD_INT 106
3895: PUSH
3896: LD_INT 108
3898: PUSH
3899: LD_INT 116
3901: PUSH
3902: LD_INT 117
3904: PUSH
3905: LD_INT 118
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: ST_TO_ADDR
3922: GO 6809
3924: LD_INT 4
3926: DOUBLE
3927: EQUAL
3928: IFTRUE 3932
3930: GO 4028
3932: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3933: LD_ADDR_VAR 0 1
3937: PUSH
3938: LD_INT 2
3940: PUSH
3941: LD_INT 4
3943: PUSH
3944: LD_INT 5
3946: PUSH
3947: LD_INT 8
3949: PUSH
3950: LD_INT 11
3952: PUSH
3953: LD_INT 12
3955: PUSH
3956: LD_INT 15
3958: PUSH
3959: LD_INT 16
3961: PUSH
3962: LD_INT 22
3964: PUSH
3965: LD_INT 23
3967: PUSH
3968: LD_INT 26
3970: PUSH
3971: LD_INT 36
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: PUSH
3988: LD_INT 101
3990: PUSH
3991: LD_INT 102
3993: PUSH
3994: LD_INT 105
3996: PUSH
3997: LD_INT 106
3999: PUSH
4000: LD_INT 108
4002: PUSH
4003: LD_INT 116
4005: PUSH
4006: LD_INT 117
4008: PUSH
4009: LD_INT 118
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: ST_TO_ADDR
4026: GO 6809
4028: LD_INT 5
4030: DOUBLE
4031: EQUAL
4032: IFTRUE 4036
4034: GO 4148
4036: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4037: LD_ADDR_VAR 0 1
4041: PUSH
4042: LD_INT 2
4044: PUSH
4045: LD_INT 4
4047: PUSH
4048: LD_INT 5
4050: PUSH
4051: LD_INT 6
4053: PUSH
4054: LD_INT 8
4056: PUSH
4057: LD_INT 11
4059: PUSH
4060: LD_INT 12
4062: PUSH
4063: LD_INT 15
4065: PUSH
4066: LD_INT 16
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 23
4074: PUSH
4075: LD_INT 25
4077: PUSH
4078: LD_INT 26
4080: PUSH
4081: LD_INT 36
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 101
4102: PUSH
4103: LD_INT 102
4105: PUSH
4106: LD_INT 105
4108: PUSH
4109: LD_INT 106
4111: PUSH
4112: LD_INT 108
4114: PUSH
4115: LD_INT 109
4117: PUSH
4118: LD_INT 112
4120: PUSH
4121: LD_INT 116
4123: PUSH
4124: LD_INT 117
4126: PUSH
4127: LD_INT 118
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: ST_TO_ADDR
4146: GO 6809
4148: LD_INT 6
4150: DOUBLE
4151: EQUAL
4152: IFTRUE 4156
4154: GO 4288
4156: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4157: LD_ADDR_VAR 0 1
4161: PUSH
4162: LD_INT 2
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: LD_INT 5
4170: PUSH
4171: LD_INT 6
4173: PUSH
4174: LD_INT 8
4176: PUSH
4177: LD_INT 11
4179: PUSH
4180: LD_INT 12
4182: PUSH
4183: LD_INT 15
4185: PUSH
4186: LD_INT 16
4188: PUSH
4189: LD_INT 20
4191: PUSH
4192: LD_INT 21
4194: PUSH
4195: LD_INT 22
4197: PUSH
4198: LD_INT 23
4200: PUSH
4201: LD_INT 25
4203: PUSH
4204: LD_INT 26
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 31
4212: PUSH
4213: LD_INT 32
4215: PUSH
4216: LD_INT 36
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 101
4242: PUSH
4243: LD_INT 102
4245: PUSH
4246: LD_INT 105
4248: PUSH
4249: LD_INT 106
4251: PUSH
4252: LD_INT 108
4254: PUSH
4255: LD_INT 109
4257: PUSH
4258: LD_INT 112
4260: PUSH
4261: LD_INT 116
4263: PUSH
4264: LD_INT 117
4266: PUSH
4267: LD_INT 118
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: ST_TO_ADDR
4286: GO 6809
4288: LD_INT 7
4290: DOUBLE
4291: EQUAL
4292: IFTRUE 4296
4294: GO 4408
4296: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4297: LD_ADDR_VAR 0 1
4301: PUSH
4302: LD_INT 2
4304: PUSH
4305: LD_INT 4
4307: PUSH
4308: LD_INT 5
4310: PUSH
4311: LD_INT 7
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: LD_INT 12
4319: PUSH
4320: LD_INT 15
4322: PUSH
4323: LD_INT 16
4325: PUSH
4326: LD_INT 20
4328: PUSH
4329: LD_INT 21
4331: PUSH
4332: LD_INT 22
4334: PUSH
4335: LD_INT 23
4337: PUSH
4338: LD_INT 25
4340: PUSH
4341: LD_INT 26
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 101
4362: PUSH
4363: LD_INT 102
4365: PUSH
4366: LD_INT 103
4368: PUSH
4369: LD_INT 105
4371: PUSH
4372: LD_INT 106
4374: PUSH
4375: LD_INT 108
4377: PUSH
4378: LD_INT 112
4380: PUSH
4381: LD_INT 116
4383: PUSH
4384: LD_INT 117
4386: PUSH
4387: LD_INT 118
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: ST_TO_ADDR
4406: GO 6809
4408: LD_INT 8
4410: DOUBLE
4411: EQUAL
4412: IFTRUE 4416
4414: GO 4556
4416: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4417: LD_ADDR_VAR 0 1
4421: PUSH
4422: LD_INT 2
4424: PUSH
4425: LD_INT 4
4427: PUSH
4428: LD_INT 5
4430: PUSH
4431: LD_INT 6
4433: PUSH
4434: LD_INT 7
4436: PUSH
4437: LD_INT 8
4439: PUSH
4440: LD_INT 11
4442: PUSH
4443: LD_INT 12
4445: PUSH
4446: LD_INT 15
4448: PUSH
4449: LD_INT 16
4451: PUSH
4452: LD_INT 20
4454: PUSH
4455: LD_INT 21
4457: PUSH
4458: LD_INT 22
4460: PUSH
4461: LD_INT 23
4463: PUSH
4464: LD_INT 25
4466: PUSH
4467: LD_INT 26
4469: PUSH
4470: LD_INT 30
4472: PUSH
4473: LD_INT 31
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: LD_INT 36
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 101
4506: PUSH
4507: LD_INT 102
4509: PUSH
4510: LD_INT 103
4512: PUSH
4513: LD_INT 105
4515: PUSH
4516: LD_INT 106
4518: PUSH
4519: LD_INT 108
4521: PUSH
4522: LD_INT 109
4524: PUSH
4525: LD_INT 112
4527: PUSH
4528: LD_INT 116
4530: PUSH
4531: LD_INT 117
4533: PUSH
4534: LD_INT 118
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: ST_TO_ADDR
4554: GO 6809
4556: LD_INT 9
4558: DOUBLE
4559: EQUAL
4560: IFTRUE 4564
4562: GO 4712
4564: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4565: LD_ADDR_VAR 0 1
4569: PUSH
4570: LD_INT 2
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: LD_INT 5
4578: PUSH
4579: LD_INT 6
4581: PUSH
4582: LD_INT 7
4584: PUSH
4585: LD_INT 8
4587: PUSH
4588: LD_INT 11
4590: PUSH
4591: LD_INT 12
4593: PUSH
4594: LD_INT 15
4596: PUSH
4597: LD_INT 16
4599: PUSH
4600: LD_INT 20
4602: PUSH
4603: LD_INT 21
4605: PUSH
4606: LD_INT 22
4608: PUSH
4609: LD_INT 23
4611: PUSH
4612: LD_INT 25
4614: PUSH
4615: LD_INT 26
4617: PUSH
4618: LD_INT 28
4620: PUSH
4621: LD_INT 30
4623: PUSH
4624: LD_INT 31
4626: PUSH
4627: LD_INT 32
4629: PUSH
4630: LD_INT 36
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 101
4658: PUSH
4659: LD_INT 102
4661: PUSH
4662: LD_INT 103
4664: PUSH
4665: LD_INT 105
4667: PUSH
4668: LD_INT 106
4670: PUSH
4671: LD_INT 108
4673: PUSH
4674: LD_INT 109
4676: PUSH
4677: LD_INT 112
4679: PUSH
4680: LD_INT 114
4682: PUSH
4683: LD_INT 116
4685: PUSH
4686: LD_INT 117
4688: PUSH
4689: LD_INT 118
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: ST_TO_ADDR
4710: GO 6809
4712: LD_INT 10
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4916
4720: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4721: LD_ADDR_VAR 0 1
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: LD_INT 5
4734: PUSH
4735: LD_INT 6
4737: PUSH
4738: LD_INT 7
4740: PUSH
4741: LD_INT 8
4743: PUSH
4744: LD_INT 9
4746: PUSH
4747: LD_INT 10
4749: PUSH
4750: LD_INT 11
4752: PUSH
4753: LD_INT 12
4755: PUSH
4756: LD_INT 13
4758: PUSH
4759: LD_INT 14
4761: PUSH
4762: LD_INT 15
4764: PUSH
4765: LD_INT 16
4767: PUSH
4768: LD_INT 17
4770: PUSH
4771: LD_INT 18
4773: PUSH
4774: LD_INT 19
4776: PUSH
4777: LD_INT 20
4779: PUSH
4780: LD_INT 21
4782: PUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 23
4788: PUSH
4789: LD_INT 24
4791: PUSH
4792: LD_INT 25
4794: PUSH
4795: LD_INT 26
4797: PUSH
4798: LD_INT 28
4800: PUSH
4801: LD_INT 30
4803: PUSH
4804: LD_INT 31
4806: PUSH
4807: LD_INT 32
4809: PUSH
4810: LD_INT 36
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 101
4846: PUSH
4847: LD_INT 102
4849: PUSH
4850: LD_INT 103
4852: PUSH
4853: LD_INT 104
4855: PUSH
4856: LD_INT 105
4858: PUSH
4859: LD_INT 106
4861: PUSH
4862: LD_INT 107
4864: PUSH
4865: LD_INT 108
4867: PUSH
4868: LD_INT 109
4870: PUSH
4871: LD_INT 110
4873: PUSH
4874: LD_INT 111
4876: PUSH
4877: LD_INT 112
4879: PUSH
4880: LD_INT 114
4882: PUSH
4883: LD_INT 116
4885: PUSH
4886: LD_INT 117
4888: PUSH
4889: LD_INT 118
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: ST_TO_ADDR
4914: GO 6809
4916: LD_INT 11
4918: DOUBLE
4919: EQUAL
4920: IFTRUE 4924
4922: GO 5128
4924: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4925: LD_ADDR_VAR 0 1
4929: PUSH
4930: LD_INT 2
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: LD_INT 4
4938: PUSH
4939: LD_INT 5
4941: PUSH
4942: LD_INT 6
4944: PUSH
4945: LD_INT 7
4947: PUSH
4948: LD_INT 8
4950: PUSH
4951: LD_INT 9
4953: PUSH
4954: LD_INT 10
4956: PUSH
4957: LD_INT 11
4959: PUSH
4960: LD_INT 12
4962: PUSH
4963: LD_INT 13
4965: PUSH
4966: LD_INT 14
4968: PUSH
4969: LD_INT 15
4971: PUSH
4972: LD_INT 16
4974: PUSH
4975: LD_INT 17
4977: PUSH
4978: LD_INT 18
4980: PUSH
4981: LD_INT 19
4983: PUSH
4984: LD_INT 20
4986: PUSH
4987: LD_INT 21
4989: PUSH
4990: LD_INT 22
4992: PUSH
4993: LD_INT 23
4995: PUSH
4996: LD_INT 24
4998: PUSH
4999: LD_INT 25
5001: PUSH
5002: LD_INT 26
5004: PUSH
5005: LD_INT 28
5007: PUSH
5008: LD_INT 30
5010: PUSH
5011: LD_INT 31
5013: PUSH
5014: LD_INT 32
5016: PUSH
5017: LD_INT 34
5019: PUSH
5020: LD_INT 36
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: PUSH
5056: LD_INT 101
5058: PUSH
5059: LD_INT 102
5061: PUSH
5062: LD_INT 103
5064: PUSH
5065: LD_INT 104
5067: PUSH
5068: LD_INT 105
5070: PUSH
5071: LD_INT 106
5073: PUSH
5074: LD_INT 107
5076: PUSH
5077: LD_INT 108
5079: PUSH
5080: LD_INT 109
5082: PUSH
5083: LD_INT 110
5085: PUSH
5086: LD_INT 111
5088: PUSH
5089: LD_INT 112
5091: PUSH
5092: LD_INT 114
5094: PUSH
5095: LD_INT 116
5097: PUSH
5098: LD_INT 117
5100: PUSH
5101: LD_INT 118
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: ST_TO_ADDR
5126: GO 6809
5128: LD_INT 12
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5136
5134: GO 5356
5136: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: LD_INT 2
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 4
5153: PUSH
5154: LD_INT 5
5156: PUSH
5157: LD_INT 6
5159: PUSH
5160: LD_INT 7
5162: PUSH
5163: LD_INT 8
5165: PUSH
5166: LD_INT 9
5168: PUSH
5169: LD_INT 10
5171: PUSH
5172: LD_INT 11
5174: PUSH
5175: LD_INT 12
5177: PUSH
5178: LD_INT 13
5180: PUSH
5181: LD_INT 14
5183: PUSH
5184: LD_INT 15
5186: PUSH
5187: LD_INT 16
5189: PUSH
5190: LD_INT 17
5192: PUSH
5193: LD_INT 18
5195: PUSH
5196: LD_INT 19
5198: PUSH
5199: LD_INT 20
5201: PUSH
5202: LD_INT 21
5204: PUSH
5205: LD_INT 22
5207: PUSH
5208: LD_INT 23
5210: PUSH
5211: LD_INT 24
5213: PUSH
5214: LD_INT 25
5216: PUSH
5217: LD_INT 26
5219: PUSH
5220: LD_INT 27
5222: PUSH
5223: LD_INT 28
5225: PUSH
5226: LD_INT 30
5228: PUSH
5229: LD_INT 31
5231: PUSH
5232: LD_INT 32
5234: PUSH
5235: LD_INT 33
5237: PUSH
5238: LD_INT 34
5240: PUSH
5241: LD_INT 36
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 101
5282: PUSH
5283: LD_INT 102
5285: PUSH
5286: LD_INT 103
5288: PUSH
5289: LD_INT 104
5291: PUSH
5292: LD_INT 105
5294: PUSH
5295: LD_INT 106
5297: PUSH
5298: LD_INT 107
5300: PUSH
5301: LD_INT 108
5303: PUSH
5304: LD_INT 109
5306: PUSH
5307: LD_INT 110
5309: PUSH
5310: LD_INT 111
5312: PUSH
5313: LD_INT 112
5315: PUSH
5316: LD_INT 113
5318: PUSH
5319: LD_INT 114
5321: PUSH
5322: LD_INT 116
5324: PUSH
5325: LD_INT 117
5327: PUSH
5328: LD_INT 118
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: ST_TO_ADDR
5354: GO 6809
5356: LD_INT 13
5358: DOUBLE
5359: EQUAL
5360: IFTRUE 5364
5362: GO 5572
5364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5365: LD_ADDR_VAR 0 1
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: LD_INT 2
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 4
5381: PUSH
5382: LD_INT 5
5384: PUSH
5385: LD_INT 8
5387: PUSH
5388: LD_INT 9
5390: PUSH
5391: LD_INT 10
5393: PUSH
5394: LD_INT 11
5396: PUSH
5397: LD_INT 12
5399: PUSH
5400: LD_INT 14
5402: PUSH
5403: LD_INT 15
5405: PUSH
5406: LD_INT 16
5408: PUSH
5409: LD_INT 17
5411: PUSH
5412: LD_INT 18
5414: PUSH
5415: LD_INT 19
5417: PUSH
5418: LD_INT 20
5420: PUSH
5421: LD_INT 21
5423: PUSH
5424: LD_INT 22
5426: PUSH
5427: LD_INT 23
5429: PUSH
5430: LD_INT 24
5432: PUSH
5433: LD_INT 25
5435: PUSH
5436: LD_INT 26
5438: PUSH
5439: LD_INT 27
5441: PUSH
5442: LD_INT 28
5444: PUSH
5445: LD_INT 30
5447: PUSH
5448: LD_INT 31
5450: PUSH
5451: LD_INT 32
5453: PUSH
5454: LD_INT 33
5456: PUSH
5457: LD_INT 34
5459: PUSH
5460: LD_INT 36
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 101
5498: PUSH
5499: LD_INT 102
5501: PUSH
5502: LD_INT 103
5504: PUSH
5505: LD_INT 104
5507: PUSH
5508: LD_INT 105
5510: PUSH
5511: LD_INT 106
5513: PUSH
5514: LD_INT 107
5516: PUSH
5517: LD_INT 108
5519: PUSH
5520: LD_INT 109
5522: PUSH
5523: LD_INT 110
5525: PUSH
5526: LD_INT 111
5528: PUSH
5529: LD_INT 112
5531: PUSH
5532: LD_INT 113
5534: PUSH
5535: LD_INT 114
5537: PUSH
5538: LD_INT 116
5540: PUSH
5541: LD_INT 117
5543: PUSH
5544: LD_INT 118
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: ST_TO_ADDR
5570: GO 6809
5572: LD_INT 14
5574: DOUBLE
5575: EQUAL
5576: IFTRUE 5580
5578: GO 5804
5580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5581: LD_ADDR_VAR 0 1
5585: PUSH
5586: LD_INT 1
5588: PUSH
5589: LD_INT 2
5591: PUSH
5592: LD_INT 3
5594: PUSH
5595: LD_INT 4
5597: PUSH
5598: LD_INT 5
5600: PUSH
5601: LD_INT 6
5603: PUSH
5604: LD_INT 7
5606: PUSH
5607: LD_INT 8
5609: PUSH
5610: LD_INT 9
5612: PUSH
5613: LD_INT 10
5615: PUSH
5616: LD_INT 11
5618: PUSH
5619: LD_INT 12
5621: PUSH
5622: LD_INT 13
5624: PUSH
5625: LD_INT 14
5627: PUSH
5628: LD_INT 15
5630: PUSH
5631: LD_INT 16
5633: PUSH
5634: LD_INT 17
5636: PUSH
5637: LD_INT 18
5639: PUSH
5640: LD_INT 19
5642: PUSH
5643: LD_INT 20
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 23
5654: PUSH
5655: LD_INT 24
5657: PUSH
5658: LD_INT 25
5660: PUSH
5661: LD_INT 26
5663: PUSH
5664: LD_INT 27
5666: PUSH
5667: LD_INT 28
5669: PUSH
5670: LD_INT 29
5672: PUSH
5673: LD_INT 30
5675: PUSH
5676: LD_INT 31
5678: PUSH
5679: LD_INT 32
5681: PUSH
5682: LD_INT 33
5684: PUSH
5685: LD_INT 34
5687: PUSH
5688: LD_INT 36
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 101
5730: PUSH
5731: LD_INT 102
5733: PUSH
5734: LD_INT 103
5736: PUSH
5737: LD_INT 104
5739: PUSH
5740: LD_INT 105
5742: PUSH
5743: LD_INT 106
5745: PUSH
5746: LD_INT 107
5748: PUSH
5749: LD_INT 108
5751: PUSH
5752: LD_INT 109
5754: PUSH
5755: LD_INT 110
5757: PUSH
5758: LD_INT 111
5760: PUSH
5761: LD_INT 112
5763: PUSH
5764: LD_INT 113
5766: PUSH
5767: LD_INT 114
5769: PUSH
5770: LD_INT 116
5772: PUSH
5773: LD_INT 117
5775: PUSH
5776: LD_INT 118
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: ST_TO_ADDR
5802: GO 6809
5804: LD_INT 15
5806: DOUBLE
5807: EQUAL
5808: IFTRUE 5812
5810: GO 6036
5812: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5813: LD_ADDR_VAR 0 1
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: LD_INT 2
5823: PUSH
5824: LD_INT 3
5826: PUSH
5827: LD_INT 4
5829: PUSH
5830: LD_INT 5
5832: PUSH
5833: LD_INT 6
5835: PUSH
5836: LD_INT 7
5838: PUSH
5839: LD_INT 8
5841: PUSH
5842: LD_INT 9
5844: PUSH
5845: LD_INT 10
5847: PUSH
5848: LD_INT 11
5850: PUSH
5851: LD_INT 12
5853: PUSH
5854: LD_INT 13
5856: PUSH
5857: LD_INT 14
5859: PUSH
5860: LD_INT 15
5862: PUSH
5863: LD_INT 16
5865: PUSH
5866: LD_INT 17
5868: PUSH
5869: LD_INT 18
5871: PUSH
5872: LD_INT 19
5874: PUSH
5875: LD_INT 20
5877: PUSH
5878: LD_INT 21
5880: PUSH
5881: LD_INT 22
5883: PUSH
5884: LD_INT 23
5886: PUSH
5887: LD_INT 24
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 26
5895: PUSH
5896: LD_INT 27
5898: PUSH
5899: LD_INT 28
5901: PUSH
5902: LD_INT 29
5904: PUSH
5905: LD_INT 30
5907: PUSH
5908: LD_INT 31
5910: PUSH
5911: LD_INT 32
5913: PUSH
5914: LD_INT 33
5916: PUSH
5917: LD_INT 34
5919: PUSH
5920: LD_INT 36
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 101
5962: PUSH
5963: LD_INT 102
5965: PUSH
5966: LD_INT 103
5968: PUSH
5969: LD_INT 104
5971: PUSH
5972: LD_INT 105
5974: PUSH
5975: LD_INT 106
5977: PUSH
5978: LD_INT 107
5980: PUSH
5981: LD_INT 108
5983: PUSH
5984: LD_INT 109
5986: PUSH
5987: LD_INT 110
5989: PUSH
5990: LD_INT 111
5992: PUSH
5993: LD_INT 112
5995: PUSH
5996: LD_INT 113
5998: PUSH
5999: LD_INT 114
6001: PUSH
6002: LD_INT 116
6004: PUSH
6005: LD_INT 117
6007: PUSH
6008: LD_INT 118
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: ST_TO_ADDR
6034: GO 6809
6036: LD_INT 16
6038: DOUBLE
6039: EQUAL
6040: IFTRUE 6044
6042: GO 6180
6044: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6045: LD_ADDR_VAR 0 1
6049: PUSH
6050: LD_INT 2
6052: PUSH
6053: LD_INT 4
6055: PUSH
6056: LD_INT 5
6058: PUSH
6059: LD_INT 7
6061: PUSH
6062: LD_INT 11
6064: PUSH
6065: LD_INT 12
6067: PUSH
6068: LD_INT 15
6070: PUSH
6071: LD_INT 16
6073: PUSH
6074: LD_INT 20
6076: PUSH
6077: LD_INT 21
6079: PUSH
6080: LD_INT 22
6082: PUSH
6083: LD_INT 23
6085: PUSH
6086: LD_INT 25
6088: PUSH
6089: LD_INT 26
6091: PUSH
6092: LD_INT 30
6094: PUSH
6095: LD_INT 31
6097: PUSH
6098: LD_INT 32
6100: PUSH
6101: LD_INT 33
6103: PUSH
6104: LD_INT 34
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 101
6130: PUSH
6131: LD_INT 102
6133: PUSH
6134: LD_INT 103
6136: PUSH
6137: LD_INT 106
6139: PUSH
6140: LD_INT 108
6142: PUSH
6143: LD_INT 112
6145: PUSH
6146: LD_INT 113
6148: PUSH
6149: LD_INT 114
6151: PUSH
6152: LD_INT 116
6154: PUSH
6155: LD_INT 117
6157: PUSH
6158: LD_INT 118
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: ST_TO_ADDR
6178: GO 6809
6180: LD_INT 17
6182: DOUBLE
6183: EQUAL
6184: IFTRUE 6188
6186: GO 6412
6188: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6189: LD_ADDR_VAR 0 1
6193: PUSH
6194: LD_INT 1
6196: PUSH
6197: LD_INT 2
6199: PUSH
6200: LD_INT 3
6202: PUSH
6203: LD_INT 4
6205: PUSH
6206: LD_INT 5
6208: PUSH
6209: LD_INT 6
6211: PUSH
6212: LD_INT 7
6214: PUSH
6215: LD_INT 8
6217: PUSH
6218: LD_INT 9
6220: PUSH
6221: LD_INT 10
6223: PUSH
6224: LD_INT 11
6226: PUSH
6227: LD_INT 12
6229: PUSH
6230: LD_INT 13
6232: PUSH
6233: LD_INT 14
6235: PUSH
6236: LD_INT 15
6238: PUSH
6239: LD_INT 16
6241: PUSH
6242: LD_INT 17
6244: PUSH
6245: LD_INT 18
6247: PUSH
6248: LD_INT 19
6250: PUSH
6251: LD_INT 20
6253: PUSH
6254: LD_INT 21
6256: PUSH
6257: LD_INT 22
6259: PUSH
6260: LD_INT 23
6262: PUSH
6263: LD_INT 24
6265: PUSH
6266: LD_INT 25
6268: PUSH
6269: LD_INT 26
6271: PUSH
6272: LD_INT 27
6274: PUSH
6275: LD_INT 28
6277: PUSH
6278: LD_INT 29
6280: PUSH
6281: LD_INT 30
6283: PUSH
6284: LD_INT 31
6286: PUSH
6287: LD_INT 32
6289: PUSH
6290: LD_INT 33
6292: PUSH
6293: LD_INT 34
6295: PUSH
6296: LD_INT 36
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 101
6338: PUSH
6339: LD_INT 102
6341: PUSH
6342: LD_INT 103
6344: PUSH
6345: LD_INT 104
6347: PUSH
6348: LD_INT 105
6350: PUSH
6351: LD_INT 106
6353: PUSH
6354: LD_INT 107
6356: PUSH
6357: LD_INT 108
6359: PUSH
6360: LD_INT 109
6362: PUSH
6363: LD_INT 110
6365: PUSH
6366: LD_INT 111
6368: PUSH
6369: LD_INT 112
6371: PUSH
6372: LD_INT 113
6374: PUSH
6375: LD_INT 114
6377: PUSH
6378: LD_INT 116
6380: PUSH
6381: LD_INT 117
6383: PUSH
6384: LD_INT 118
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
6410: GO 6809
6412: LD_INT 18
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6568
6420: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6421: LD_ADDR_VAR 0 1
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: LD_INT 4
6431: PUSH
6432: LD_INT 5
6434: PUSH
6435: LD_INT 7
6437: PUSH
6438: LD_INT 11
6440: PUSH
6441: LD_INT 12
6443: PUSH
6444: LD_INT 15
6446: PUSH
6447: LD_INT 16
6449: PUSH
6450: LD_INT 20
6452: PUSH
6453: LD_INT 21
6455: PUSH
6456: LD_INT 22
6458: PUSH
6459: LD_INT 23
6461: PUSH
6462: LD_INT 25
6464: PUSH
6465: LD_INT 26
6467: PUSH
6468: LD_INT 30
6470: PUSH
6471: LD_INT 31
6473: PUSH
6474: LD_INT 32
6476: PUSH
6477: LD_INT 33
6479: PUSH
6480: LD_INT 34
6482: PUSH
6483: LD_INT 35
6485: PUSH
6486: LD_INT 36
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: PUSH
6512: LD_INT 101
6514: PUSH
6515: LD_INT 102
6517: PUSH
6518: LD_INT 103
6520: PUSH
6521: LD_INT 106
6523: PUSH
6524: LD_INT 108
6526: PUSH
6527: LD_INT 112
6529: PUSH
6530: LD_INT 113
6532: PUSH
6533: LD_INT 114
6535: PUSH
6536: LD_INT 115
6538: PUSH
6539: LD_INT 116
6541: PUSH
6542: LD_INT 117
6544: PUSH
6545: LD_INT 118
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: ST_TO_ADDR
6566: GO 6809
6568: LD_INT 19
6570: DOUBLE
6571: EQUAL
6572: IFTRUE 6576
6574: GO 6808
6576: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6577: LD_ADDR_VAR 0 1
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: LD_INT 3
6590: PUSH
6591: LD_INT 4
6593: PUSH
6594: LD_INT 5
6596: PUSH
6597: LD_INT 6
6599: PUSH
6600: LD_INT 7
6602: PUSH
6603: LD_INT 8
6605: PUSH
6606: LD_INT 9
6608: PUSH
6609: LD_INT 10
6611: PUSH
6612: LD_INT 11
6614: PUSH
6615: LD_INT 12
6617: PUSH
6618: LD_INT 13
6620: PUSH
6621: LD_INT 14
6623: PUSH
6624: LD_INT 15
6626: PUSH
6627: LD_INT 16
6629: PUSH
6630: LD_INT 17
6632: PUSH
6633: LD_INT 18
6635: PUSH
6636: LD_INT 19
6638: PUSH
6639: LD_INT 20
6641: PUSH
6642: LD_INT 21
6644: PUSH
6645: LD_INT 22
6647: PUSH
6648: LD_INT 23
6650: PUSH
6651: LD_INT 24
6653: PUSH
6654: LD_INT 25
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 27
6662: PUSH
6663: LD_INT 28
6665: PUSH
6666: LD_INT 29
6668: PUSH
6669: LD_INT 30
6671: PUSH
6672: LD_INT 31
6674: PUSH
6675: LD_INT 32
6677: PUSH
6678: LD_INT 33
6680: PUSH
6681: LD_INT 34
6683: PUSH
6684: LD_INT 35
6686: PUSH
6687: LD_INT 36
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 101
6730: PUSH
6731: LD_INT 102
6733: PUSH
6734: LD_INT 103
6736: PUSH
6737: LD_INT 104
6739: PUSH
6740: LD_INT 105
6742: PUSH
6743: LD_INT 106
6745: PUSH
6746: LD_INT 107
6748: PUSH
6749: LD_INT 108
6751: PUSH
6752: LD_INT 109
6754: PUSH
6755: LD_INT 110
6757: PUSH
6758: LD_INT 111
6760: PUSH
6761: LD_INT 112
6763: PUSH
6764: LD_INT 113
6766: PUSH
6767: LD_INT 114
6769: PUSH
6770: LD_INT 115
6772: PUSH
6773: LD_INT 116
6775: PUSH
6776: LD_INT 117
6778: PUSH
6779: LD_INT 118
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: ST_TO_ADDR
6806: GO 6809
6808: POP
// end else
6809: GO 7040
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6811: LD_ADDR_VAR 0 1
6815: PUSH
6816: LD_INT 1
6818: PUSH
6819: LD_INT 2
6821: PUSH
6822: LD_INT 3
6824: PUSH
6825: LD_INT 4
6827: PUSH
6828: LD_INT 5
6830: PUSH
6831: LD_INT 6
6833: PUSH
6834: LD_INT 7
6836: PUSH
6837: LD_INT 8
6839: PUSH
6840: LD_INT 9
6842: PUSH
6843: LD_INT 10
6845: PUSH
6846: LD_INT 11
6848: PUSH
6849: LD_INT 12
6851: PUSH
6852: LD_INT 13
6854: PUSH
6855: LD_INT 14
6857: PUSH
6858: LD_INT 15
6860: PUSH
6861: LD_INT 16
6863: PUSH
6864: LD_INT 17
6866: PUSH
6867: LD_INT 18
6869: PUSH
6870: LD_INT 19
6872: PUSH
6873: LD_INT 20
6875: PUSH
6876: LD_INT 21
6878: PUSH
6879: LD_INT 22
6881: PUSH
6882: LD_INT 23
6884: PUSH
6885: LD_INT 24
6887: PUSH
6888: LD_INT 25
6890: PUSH
6891: LD_INT 26
6893: PUSH
6894: LD_INT 27
6896: PUSH
6897: LD_INT 28
6899: PUSH
6900: LD_INT 29
6902: PUSH
6903: LD_INT 30
6905: PUSH
6906: LD_INT 31
6908: PUSH
6909: LD_INT 32
6911: PUSH
6912: LD_INT 33
6914: PUSH
6915: LD_INT 34
6917: PUSH
6918: LD_INT 35
6920: PUSH
6921: LD_INT 36
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 101
6964: PUSH
6965: LD_INT 102
6967: PUSH
6968: LD_INT 103
6970: PUSH
6971: LD_INT 104
6973: PUSH
6974: LD_INT 105
6976: PUSH
6977: LD_INT 106
6979: PUSH
6980: LD_INT 107
6982: PUSH
6983: LD_INT 108
6985: PUSH
6986: LD_INT 109
6988: PUSH
6989: LD_INT 110
6991: PUSH
6992: LD_INT 111
6994: PUSH
6995: LD_INT 112
6997: PUSH
6998: LD_INT 113
7000: PUSH
7001: LD_INT 114
7003: PUSH
7004: LD_INT 115
7006: PUSH
7007: LD_INT 116
7009: PUSH
7010: LD_INT 117
7012: PUSH
7013: LD_INT 118
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
// if result then
7040: LD_VAR 0 1
7044: IFFALSE 7333
// begin normal :=  ;
7046: LD_ADDR_VAR 0 3
7050: PUSH
7051: LD_STRING 
7053: ST_TO_ADDR
// hardcore :=  ;
7054: LD_ADDR_VAR 0 4
7058: PUSH
7059: LD_STRING 
7061: ST_TO_ADDR
// for i = 1 to normalCounter do
7062: LD_ADDR_VAR 0 5
7066: PUSH
7067: DOUBLE
7068: LD_INT 1
7070: DEC
7071: ST_TO_ADDR
7072: LD_EXP 8
7076: PUSH
7077: FOR_TO
7078: IFFALSE 7179
// begin tmp := 0 ;
7080: LD_ADDR_VAR 0 2
7084: PUSH
7085: LD_STRING 0
7087: ST_TO_ADDR
// if result [ 1 ] then
7088: LD_VAR 0 1
7092: PUSH
7093: LD_INT 1
7095: ARRAY
7096: IFFALSE 7161
// if result [ 1 ] [ 1 ] = i then
7098: LD_VAR 0 1
7102: PUSH
7103: LD_INT 1
7105: ARRAY
7106: PUSH
7107: LD_INT 1
7109: ARRAY
7110: PUSH
7111: LD_VAR 0 5
7115: EQUAL
7116: IFFALSE 7161
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7118: LD_ADDR_VAR 0 1
7122: PUSH
7123: LD_VAR 0 1
7127: PPUSH
7128: LD_INT 1
7130: PPUSH
7131: LD_VAR 0 1
7135: PUSH
7136: LD_INT 1
7138: ARRAY
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 3
7147: PPUSH
7148: CALL_OW 1
7152: ST_TO_ADDR
// tmp := 1 ;
7153: LD_ADDR_VAR 0 2
7157: PUSH
7158: LD_STRING 1
7160: ST_TO_ADDR
// end ; normal := normal & tmp ;
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_VAR 0 3
7170: PUSH
7171: LD_VAR 0 2
7175: STR
7176: ST_TO_ADDR
// end ;
7177: GO 7077
7179: POP
7180: POP
// for i = 1 to hardcoreCounter do
7181: LD_ADDR_VAR 0 5
7185: PUSH
7186: DOUBLE
7187: LD_INT 1
7189: DEC
7190: ST_TO_ADDR
7191: LD_EXP 9
7195: PUSH
7196: FOR_TO
7197: IFFALSE 7302
// begin tmp := 0 ;
7199: LD_ADDR_VAR 0 2
7203: PUSH
7204: LD_STRING 0
7206: ST_TO_ADDR
// if result [ 2 ] then
7207: LD_VAR 0 1
7211: PUSH
7212: LD_INT 2
7214: ARRAY
7215: IFFALSE 7284
// if result [ 2 ] [ 1 ] = 100 + i then
7217: LD_VAR 0 1
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: LD_INT 1
7228: ARRAY
7229: PUSH
7230: LD_INT 100
7232: PUSH
7233: LD_VAR 0 5
7237: PLUS
7238: EQUAL
7239: IFFALSE 7284
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7241: LD_ADDR_VAR 0 1
7245: PUSH
7246: LD_VAR 0 1
7250: PPUSH
7251: LD_INT 2
7253: PPUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_INT 2
7261: ARRAY
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: CALL_OW 3
7270: PPUSH
7271: CALL_OW 1
7275: ST_TO_ADDR
// tmp := 1 ;
7276: LD_ADDR_VAR 0 2
7280: PUSH
7281: LD_STRING 1
7283: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7284: LD_ADDR_VAR 0 4
7288: PUSH
7289: LD_VAR 0 4
7293: PUSH
7294: LD_VAR 0 2
7298: STR
7299: ST_TO_ADDR
// end ;
7300: GO 7196
7302: POP
7303: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7304: LD_STRING getStreamItemsFromMission("
7306: PUSH
7307: LD_VAR 0 3
7311: STR
7312: PUSH
7313: LD_STRING ","
7315: STR
7316: PUSH
7317: LD_VAR 0 4
7321: STR
7322: PUSH
7323: LD_STRING ")
7325: STR
7326: PPUSH
7327: CALL_OW 559
// end else
7331: GO 7340
// ToLua ( getStreamItemsFromMission("","") ) ;
7333: LD_STRING getStreamItemsFromMission("","")
7335: PPUSH
7336: CALL_OW 559
// end ;
7340: LD_VAR 0 1
7344: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7345: LD_EXP 7
7349: PUSH
7350: LD_EXP 12
7354: AND
7355: IFFALSE 7479
7357: GO 7359
7359: DISABLE
7360: LD_INT 0
7362: PPUSH
7363: PPUSH
// begin enable ;
7364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7365: LD_ADDR_VAR 0 2
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_OWVAR 2
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 34
7387: PUSH
7388: LD_INT 7
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 34
7397: PUSH
7398: LD_INT 45
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 34
7407: PUSH
7408: LD_INT 28
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 34
7417: PUSH
7418: LD_INT 47
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PPUSH
7436: CALL_OW 69
7440: ST_TO_ADDR
// if not tmp then
7441: LD_VAR 0 2
7445: NOT
7446: IFFALSE 7450
// exit ;
7448: GO 7479
// for i in tmp do
7450: LD_ADDR_VAR 0 1
7454: PUSH
7455: LD_VAR 0 2
7459: PUSH
7460: FOR_IN
7461: IFFALSE 7477
// begin SetLives ( i , 0 ) ;
7463: LD_VAR 0 1
7467: PPUSH
7468: LD_INT 0
7470: PPUSH
7471: CALL_OW 234
// end ;
7475: GO 7460
7477: POP
7478: POP
// end ;
7479: PPOPN 2
7481: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7482: LD_EXP 7
7486: PUSH
7487: LD_EXP 13
7491: AND
7492: IFFALSE 7576
7494: GO 7496
7496: DISABLE
7497: LD_INT 0
7499: PPUSH
7500: PPUSH
// begin enable ;
7501: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7502: LD_ADDR_VAR 0 2
7506: PUSH
7507: LD_INT 22
7509: PUSH
7510: LD_OWVAR 2
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 32
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: ST_TO_ADDR
// if not tmp then
7538: LD_VAR 0 2
7542: NOT
7543: IFFALSE 7547
// exit ;
7545: GO 7576
// for i in tmp do
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: FOR_IN
7558: IFFALSE 7574
// begin SetLives ( i , 0 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 0
7567: PPUSH
7568: CALL_OW 234
// end ;
7572: GO 7557
7574: POP
7575: POP
// end ;
7576: PPOPN 2
7578: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7579: LD_EXP 7
7583: PUSH
7584: LD_EXP 10
7588: AND
7589: IFFALSE 7682
7591: GO 7593
7593: DISABLE
7594: LD_INT 0
7596: PPUSH
// begin enable ;
7597: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7598: LD_ADDR_VAR 0 1
7602: PUSH
7603: LD_INT 22
7605: PUSH
7606: LD_OWVAR 2
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 2
7617: PUSH
7618: LD_INT 25
7620: PUSH
7621: LD_INT 5
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 25
7630: PUSH
7631: LD_INT 9
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 25
7640: PUSH
7641: LD_INT 8
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: PUSH
7663: FOR_IN
7664: IFFALSE 7680
// begin SetClass ( i , 1 ) ;
7666: LD_VAR 0 1
7670: PPUSH
7671: LD_INT 1
7673: PPUSH
7674: CALL_OW 336
// end ;
7678: GO 7663
7680: POP
7681: POP
// end ;
7682: PPOPN 1
7684: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7685: LD_EXP 7
7689: PUSH
7690: LD_EXP 11
7694: AND
7695: PUSH
7696: LD_OWVAR 65
7700: PUSH
7701: LD_INT 7
7703: LESS
7704: AND
7705: IFFALSE 7719
7707: GO 7709
7709: DISABLE
// begin enable ;
7710: ENABLE
// game_speed := 7 ;
7711: LD_ADDR_OWVAR 65
7715: PUSH
7716: LD_INT 7
7718: ST_TO_ADDR
// end ;
7719: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7720: LD_EXP 7
7724: PUSH
7725: LD_EXP 14
7729: AND
7730: IFFALSE 7932
7732: GO 7734
7734: DISABLE
7735: LD_INT 0
7737: PPUSH
7738: PPUSH
7739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7740: LD_ADDR_VAR 0 3
7744: PUSH
7745: LD_INT 81
7747: PUSH
7748: LD_OWVAR 2
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 21
7759: PUSH
7760: LD_INT 1
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PPUSH
7771: CALL_OW 69
7775: ST_TO_ADDR
// if not tmp then
7776: LD_VAR 0 3
7780: NOT
7781: IFFALSE 7785
// exit ;
7783: GO 7932
// if tmp > 5 then
7785: LD_VAR 0 3
7789: PUSH
7790: LD_INT 5
7792: GREATER
7793: IFFALSE 7805
// k := 5 else
7795: LD_ADDR_VAR 0 2
7799: PUSH
7800: LD_INT 5
7802: ST_TO_ADDR
7803: GO 7815
// k := tmp ;
7805: LD_ADDR_VAR 0 2
7809: PUSH
7810: LD_VAR 0 3
7814: ST_TO_ADDR
// for i := 1 to k do
7815: LD_ADDR_VAR 0 1
7819: PUSH
7820: DOUBLE
7821: LD_INT 1
7823: DEC
7824: ST_TO_ADDR
7825: LD_VAR 0 2
7829: PUSH
7830: FOR_TO
7831: IFFALSE 7930
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7833: LD_VAR 0 3
7837: PUSH
7838: LD_VAR 0 1
7842: ARRAY
7843: PPUSH
7844: LD_VAR 0 1
7848: PUSH
7849: LD_INT 4
7851: MOD
7852: PUSH
7853: LD_INT 1
7855: PLUS
7856: PPUSH
7857: CALL_OW 259
7861: PUSH
7862: LD_INT 10
7864: LESS
7865: IFFALSE 7928
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7867: LD_VAR 0 3
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PPUSH
7878: LD_VAR 0 1
7882: PUSH
7883: LD_INT 4
7885: MOD
7886: PUSH
7887: LD_INT 1
7889: PLUS
7890: PPUSH
7891: LD_VAR 0 3
7895: PUSH
7896: LD_VAR 0 1
7900: ARRAY
7901: PPUSH
7902: LD_VAR 0 1
7906: PUSH
7907: LD_INT 4
7909: MOD
7910: PUSH
7911: LD_INT 1
7913: PLUS
7914: PPUSH
7915: CALL_OW 259
7919: PUSH
7920: LD_INT 1
7922: PLUS
7923: PPUSH
7924: CALL_OW 237
7928: GO 7830
7930: POP
7931: POP
// end ;
7932: PPOPN 3
7934: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7935: LD_EXP 7
7939: PUSH
7940: LD_EXP 15
7944: AND
7945: IFFALSE 7965
7947: GO 7949
7949: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7950: LD_INT 4
7952: PPUSH
7953: LD_OWVAR 2
7957: PPUSH
7958: LD_INT 0
7960: PPUSH
7961: CALL_OW 324
7965: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7966: LD_EXP 7
7970: PUSH
7971: LD_EXP 44
7975: AND
7976: IFFALSE 7996
7978: GO 7980
7980: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7981: LD_INT 19
7983: PPUSH
7984: LD_OWVAR 2
7988: PPUSH
7989: LD_INT 0
7991: PPUSH
7992: CALL_OW 324
7996: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7997: LD_EXP 7
8001: PUSH
8002: LD_EXP 16
8006: AND
8007: IFFALSE 8109
8009: GO 8011
8011: DISABLE
8012: LD_INT 0
8014: PPUSH
8015: PPUSH
// begin enable ;
8016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8017: LD_ADDR_VAR 0 2
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_OWVAR 2
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 2
8036: PUSH
8037: LD_INT 34
8039: PUSH
8040: LD_INT 11
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 34
8049: PUSH
8050: LD_INT 30
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: PPUSH
8066: CALL_OW 69
8070: ST_TO_ADDR
// if not tmp then
8071: LD_VAR 0 2
8075: NOT
8076: IFFALSE 8080
// exit ;
8078: GO 8109
// for i in tmp do
8080: LD_ADDR_VAR 0 1
8084: PUSH
8085: LD_VAR 0 2
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8107
// begin SetLives ( i , 0 ) ;
8093: LD_VAR 0 1
8097: PPUSH
8098: LD_INT 0
8100: PPUSH
8101: CALL_OW 234
// end ;
8105: GO 8090
8107: POP
8108: POP
// end ;
8109: PPOPN 2
8111: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8112: LD_EXP 7
8116: PUSH
8117: LD_EXP 17
8121: AND
8122: IFFALSE 8142
8124: GO 8126
8126: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8127: LD_INT 32
8129: PPUSH
8130: LD_OWVAR 2
8134: PPUSH
8135: LD_INT 0
8137: PPUSH
8138: CALL_OW 324
8142: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8143: LD_EXP 7
8147: PUSH
8148: LD_EXP 18
8152: AND
8153: IFFALSE 8334
8155: GO 8157
8157: DISABLE
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
8162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8163: LD_ADDR_VAR 0 2
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_OWVAR 2
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 33
8182: PUSH
8183: LD_INT 3
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PPUSH
8194: CALL_OW 69
8198: ST_TO_ADDR
// if not tmp then
8199: LD_VAR 0 2
8203: NOT
8204: IFFALSE 8208
// exit ;
8206: GO 8334
// side := 0 ;
8208: LD_ADDR_VAR 0 3
8212: PUSH
8213: LD_INT 0
8215: ST_TO_ADDR
// for i := 1 to 8 do
8216: LD_ADDR_VAR 0 1
8220: PUSH
8221: DOUBLE
8222: LD_INT 1
8224: DEC
8225: ST_TO_ADDR
8226: LD_INT 8
8228: PUSH
8229: FOR_TO
8230: IFFALSE 8278
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8232: LD_OWVAR 2
8236: PUSH
8237: LD_VAR 0 1
8241: NONEQUAL
8242: PUSH
8243: LD_OWVAR 2
8247: PPUSH
8248: LD_VAR 0 1
8252: PPUSH
8253: CALL_OW 81
8257: PUSH
8258: LD_INT 2
8260: EQUAL
8261: AND
8262: IFFALSE 8276
// begin side := i ;
8264: LD_ADDR_VAR 0 3
8268: PUSH
8269: LD_VAR 0 1
8273: ST_TO_ADDR
// break ;
8274: GO 8278
// end ;
8276: GO 8229
8278: POP
8279: POP
// if not side then
8280: LD_VAR 0 3
8284: NOT
8285: IFFALSE 8289
// exit ;
8287: GO 8334
// for i := 1 to tmp do
8289: LD_ADDR_VAR 0 1
8293: PUSH
8294: DOUBLE
8295: LD_INT 1
8297: DEC
8298: ST_TO_ADDR
8299: LD_VAR 0 2
8303: PUSH
8304: FOR_TO
8305: IFFALSE 8332
// if Prob ( 60 ) then
8307: LD_INT 60
8309: PPUSH
8310: CALL_OW 13
8314: IFFALSE 8330
// SetSide ( i , side ) ;
8316: LD_VAR 0 1
8320: PPUSH
8321: LD_VAR 0 3
8325: PPUSH
8326: CALL_OW 235
8330: GO 8304
8332: POP
8333: POP
// end ;
8334: PPOPN 3
8336: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8337: LD_EXP 7
8341: PUSH
8342: LD_EXP 20
8346: AND
8347: IFFALSE 8466
8349: GO 8351
8351: DISABLE
8352: LD_INT 0
8354: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8355: LD_ADDR_VAR 0 1
8359: PUSH
8360: LD_INT 22
8362: PUSH
8363: LD_OWVAR 2
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PUSH
8372: LD_INT 21
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 3
8384: PUSH
8385: LD_INT 23
8387: PUSH
8388: LD_INT 0
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 69
8408: PUSH
8409: FOR_IN
8410: IFFALSE 8464
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8412: LD_VAR 0 1
8416: PPUSH
8417: CALL_OW 257
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: LD_INT 2
8427: PUSH
8428: LD_INT 3
8430: PUSH
8431: LD_INT 4
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: IN
8440: IFFALSE 8462
// SetClass ( un , rand ( 1 , 4 ) ) ;
8442: LD_VAR 0 1
8446: PPUSH
8447: LD_INT 1
8449: PPUSH
8450: LD_INT 4
8452: PPUSH
8453: CALL_OW 12
8457: PPUSH
8458: CALL_OW 336
8462: GO 8409
8464: POP
8465: POP
// end ;
8466: PPOPN 1
8468: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8469: LD_EXP 7
8473: PUSH
8474: LD_EXP 19
8478: AND
8479: IFFALSE 8558
8481: GO 8483
8483: DISABLE
8484: LD_INT 0
8486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8487: LD_ADDR_VAR 0 1
8491: PUSH
8492: LD_INT 22
8494: PUSH
8495: LD_OWVAR 2
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 21
8506: PUSH
8507: LD_INT 3
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PPUSH
8518: CALL_OW 69
8522: ST_TO_ADDR
// if not tmp then
8523: LD_VAR 0 1
8527: NOT
8528: IFFALSE 8532
// exit ;
8530: GO 8558
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8532: LD_VAR 0 1
8536: PUSH
8537: LD_INT 1
8539: PPUSH
8540: LD_VAR 0 1
8544: PPUSH
8545: CALL_OW 12
8549: ARRAY
8550: PPUSH
8551: LD_INT 100
8553: PPUSH
8554: CALL_OW 234
// end ;
8558: PPOPN 1
8560: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8561: LD_EXP 7
8565: PUSH
8566: LD_EXP 21
8570: AND
8571: IFFALSE 8669
8573: GO 8575
8575: DISABLE
8576: LD_INT 0
8578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: LD_INT 22
8586: PUSH
8587: LD_OWVAR 2
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 21
8598: PUSH
8599: LD_INT 1
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL_OW 69
8614: ST_TO_ADDR
// if not tmp then
8615: LD_VAR 0 1
8619: NOT
8620: IFFALSE 8624
// exit ;
8622: GO 8669
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8624: LD_VAR 0 1
8628: PUSH
8629: LD_INT 1
8631: PPUSH
8632: LD_VAR 0 1
8636: PPUSH
8637: CALL_OW 12
8641: ARRAY
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: LD_INT 4
8648: PPUSH
8649: CALL_OW 12
8653: PPUSH
8654: LD_INT 3000
8656: PPUSH
8657: LD_INT 9000
8659: PPUSH
8660: CALL_OW 12
8664: PPUSH
8665: CALL_OW 492
// end ;
8669: PPOPN 1
8671: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8672: LD_EXP 7
8676: PUSH
8677: LD_EXP 22
8681: AND
8682: IFFALSE 8702
8684: GO 8686
8686: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8687: LD_INT 1
8689: PPUSH
8690: LD_OWVAR 2
8694: PPUSH
8695: LD_INT 0
8697: PPUSH
8698: CALL_OW 324
8702: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8703: LD_EXP 7
8707: PUSH
8708: LD_EXP 23
8712: AND
8713: IFFALSE 8796
8715: GO 8717
8717: DISABLE
8718: LD_INT 0
8720: PPUSH
8721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8722: LD_ADDR_VAR 0 2
8726: PUSH
8727: LD_INT 22
8729: PUSH
8730: LD_OWVAR 2
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 21
8741: PUSH
8742: LD_INT 3
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 69
8757: ST_TO_ADDR
// if not tmp then
8758: LD_VAR 0 2
8762: NOT
8763: IFFALSE 8767
// exit ;
8765: GO 8796
// for i in tmp do
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_VAR 0 2
8776: PUSH
8777: FOR_IN
8778: IFFALSE 8794
// SetBLevel ( i , 10 ) ;
8780: LD_VAR 0 1
8784: PPUSH
8785: LD_INT 10
8787: PPUSH
8788: CALL_OW 241
8792: GO 8777
8794: POP
8795: POP
// end ;
8796: PPOPN 2
8798: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8799: LD_EXP 7
8803: PUSH
8804: LD_EXP 24
8808: AND
8809: IFFALSE 8920
8811: GO 8813
8813: DISABLE
8814: LD_INT 0
8816: PPUSH
8817: PPUSH
8818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: LD_INT 22
8826: PUSH
8827: LD_OWVAR 2
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 25
8838: PUSH
8839: LD_INT 1
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: ST_TO_ADDR
// if not tmp then
8855: LD_VAR 0 3
8859: NOT
8860: IFFALSE 8864
// exit ;
8862: GO 8920
// un := tmp [ rand ( 1 , tmp ) ] ;
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: LD_VAR 0 3
8873: PUSH
8874: LD_INT 1
8876: PPUSH
8877: LD_VAR 0 3
8881: PPUSH
8882: CALL_OW 12
8886: ARRAY
8887: ST_TO_ADDR
// if Crawls ( un ) then
8888: LD_VAR 0 2
8892: PPUSH
8893: CALL_OW 318
8897: IFFALSE 8908
// ComWalk ( un ) ;
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8908: LD_VAR 0 2
8912: PPUSH
8913: LD_INT 5
8915: PPUSH
8916: CALL_OW 336
// end ;
8920: PPOPN 3
8922: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8923: LD_EXP 7
8927: PUSH
8928: LD_EXP 25
8932: AND
8933: PUSH
8934: LD_OWVAR 67
8938: PUSH
8939: LD_INT 4
8941: LESS
8942: AND
8943: IFFALSE 8962
8945: GO 8947
8947: DISABLE
// begin Difficulty := Difficulty + 1 ;
8948: LD_ADDR_OWVAR 67
8952: PUSH
8953: LD_OWVAR 67
8957: PUSH
8958: LD_INT 1
8960: PLUS
8961: ST_TO_ADDR
// end ;
8962: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8963: LD_EXP 7
8967: PUSH
8968: LD_EXP 26
8972: AND
8973: IFFALSE 9076
8975: GO 8977
8977: DISABLE
8978: LD_INT 0
8980: PPUSH
// begin for i := 1 to 5 do
8981: LD_ADDR_VAR 0 1
8985: PUSH
8986: DOUBLE
8987: LD_INT 1
8989: DEC
8990: ST_TO_ADDR
8991: LD_INT 5
8993: PUSH
8994: FOR_TO
8995: IFFALSE 9074
// begin uc_nation := nation_nature ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_INT 0
9004: ST_TO_ADDR
// uc_side := 0 ;
9005: LD_ADDR_OWVAR 20
9009: PUSH
9010: LD_INT 0
9012: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9013: LD_ADDR_OWVAR 29
9017: PUSH
9018: LD_INT 12
9020: PUSH
9021: LD_INT 12
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: ST_TO_ADDR
// hc_agressivity := 20 ;
9028: LD_ADDR_OWVAR 35
9032: PUSH
9033: LD_INT 20
9035: ST_TO_ADDR
// hc_class := class_tiger ;
9036: LD_ADDR_OWVAR 28
9040: PUSH
9041: LD_INT 14
9043: ST_TO_ADDR
// hc_gallery :=  ;
9044: LD_ADDR_OWVAR 33
9048: PUSH
9049: LD_STRING 
9051: ST_TO_ADDR
// hc_name :=  ;
9052: LD_ADDR_OWVAR 26
9056: PUSH
9057: LD_STRING 
9059: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9060: CALL_OW 44
9064: PPUSH
9065: LD_INT 0
9067: PPUSH
9068: CALL_OW 51
// end ;
9072: GO 8994
9074: POP
9075: POP
// end ;
9076: PPOPN 1
9078: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9079: LD_EXP 7
9083: PUSH
9084: LD_EXP 27
9088: AND
9089: IFFALSE 9098
9091: GO 9093
9093: DISABLE
// StreamSibBomb ;
9094: CALL 9099 0 0
9098: END
// export function StreamSibBomb ; var i , x , y ; begin
9099: LD_INT 0
9101: PPUSH
9102: PPUSH
9103: PPUSH
9104: PPUSH
// result := false ;
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_INT 0
9112: ST_TO_ADDR
// for i := 1 to 16 do
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: DOUBLE
9119: LD_INT 1
9121: DEC
9122: ST_TO_ADDR
9123: LD_INT 16
9125: PUSH
9126: FOR_TO
9127: IFFALSE 9326
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9129: LD_ADDR_VAR 0 3
9133: PUSH
9134: LD_INT 10
9136: PUSH
9137: LD_INT 20
9139: PUSH
9140: LD_INT 30
9142: PUSH
9143: LD_INT 40
9145: PUSH
9146: LD_INT 50
9148: PUSH
9149: LD_INT 60
9151: PUSH
9152: LD_INT 70
9154: PUSH
9155: LD_INT 80
9157: PUSH
9158: LD_INT 90
9160: PUSH
9161: LD_INT 100
9163: PUSH
9164: LD_INT 110
9166: PUSH
9167: LD_INT 120
9169: PUSH
9170: LD_INT 130
9172: PUSH
9173: LD_INT 140
9175: PUSH
9176: LD_INT 150
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 1
9198: PPUSH
9199: LD_INT 15
9201: PPUSH
9202: CALL_OW 12
9206: ARRAY
9207: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9208: LD_ADDR_VAR 0 4
9212: PUSH
9213: LD_INT 10
9215: PUSH
9216: LD_INT 20
9218: PUSH
9219: LD_INT 30
9221: PUSH
9222: LD_INT 40
9224: PUSH
9225: LD_INT 50
9227: PUSH
9228: LD_INT 60
9230: PUSH
9231: LD_INT 70
9233: PUSH
9234: LD_INT 80
9236: PUSH
9237: LD_INT 90
9239: PUSH
9240: LD_INT 100
9242: PUSH
9243: LD_INT 110
9245: PUSH
9246: LD_INT 120
9248: PUSH
9249: LD_INT 130
9251: PUSH
9252: LD_INT 140
9254: PUSH
9255: LD_INT 150
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 1
9277: PPUSH
9278: LD_INT 15
9280: PPUSH
9281: CALL_OW 12
9285: ARRAY
9286: ST_TO_ADDR
// if ValidHex ( x , y ) then
9287: LD_VAR 0 3
9291: PPUSH
9292: LD_VAR 0 4
9296: PPUSH
9297: CALL_OW 488
9301: IFFALSE 9324
// begin result := [ x , y ] ;
9303: LD_ADDR_VAR 0 1
9307: PUSH
9308: LD_VAR 0 3
9312: PUSH
9313: LD_VAR 0 4
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: ST_TO_ADDR
// break ;
9322: GO 9326
// end ; end ;
9324: GO 9126
9326: POP
9327: POP
// if result then
9328: LD_VAR 0 1
9332: IFFALSE 9392
// begin ToLua ( playSibBomb() ) ;
9334: LD_STRING playSibBomb()
9336: PPUSH
9337: CALL_OW 559
// wait ( 0 0$14 ) ;
9341: LD_INT 490
9343: PPUSH
9344: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9348: LD_VAR 0 1
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PPUSH
9357: LD_VAR 0 1
9361: PUSH
9362: LD_INT 2
9364: ARRAY
9365: PPUSH
9366: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9370: LD_VAR 0 1
9374: PUSH
9375: LD_INT 1
9377: ARRAY
9378: PPUSH
9379: LD_VAR 0 1
9383: PUSH
9384: LD_INT 2
9386: ARRAY
9387: PPUSH
9388: CALL_OW 429
// end ; end ;
9392: LD_VAR 0 1
9396: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9397: LD_EXP 7
9401: PUSH
9402: LD_EXP 29
9406: AND
9407: IFFALSE 9419
9409: GO 9411
9411: DISABLE
// YouLost (  ) ;
9412: LD_STRING 
9414: PPUSH
9415: CALL_OW 104
9419: END
// every 0 0$1 trigger StreamModeActive and sFog do
9420: LD_EXP 7
9424: PUSH
9425: LD_EXP 28
9429: AND
9430: IFFALSE 9444
9432: GO 9434
9434: DISABLE
// FogOff ( your_side ) ;
9435: LD_OWVAR 2
9439: PPUSH
9440: CALL_OW 344
9444: END
// every 0 0$1 trigger StreamModeActive and sSun do
9445: LD_EXP 7
9449: PUSH
9450: LD_EXP 30
9454: AND
9455: IFFALSE 9483
9457: GO 9459
9459: DISABLE
// begin solar_recharge_percent := 0 ;
9460: LD_ADDR_OWVAR 79
9464: PUSH
9465: LD_INT 0
9467: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9468: LD_INT 10500
9470: PPUSH
9471: CALL_OW 67
// solar_recharge_percent := 100 ;
9475: LD_ADDR_OWVAR 79
9479: PUSH
9480: LD_INT 100
9482: ST_TO_ADDR
// end ;
9483: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9484: LD_EXP 7
9488: PUSH
9489: LD_EXP 31
9493: AND
9494: IFFALSE 9733
9496: GO 9498
9498: DISABLE
9499: LD_INT 0
9501: PPUSH
9502: PPUSH
9503: PPUSH
// begin tmp := [ ] ;
9504: LD_ADDR_VAR 0 3
9508: PUSH
9509: EMPTY
9510: ST_TO_ADDR
// for i := 1 to 6 do
9511: LD_ADDR_VAR 0 1
9515: PUSH
9516: DOUBLE
9517: LD_INT 1
9519: DEC
9520: ST_TO_ADDR
9521: LD_INT 6
9523: PUSH
9524: FOR_TO
9525: IFFALSE 9630
// begin uc_nation := nation_nature ;
9527: LD_ADDR_OWVAR 21
9531: PUSH
9532: LD_INT 0
9534: ST_TO_ADDR
// uc_side := 0 ;
9535: LD_ADDR_OWVAR 20
9539: PUSH
9540: LD_INT 0
9542: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9543: LD_ADDR_OWVAR 29
9547: PUSH
9548: LD_INT 12
9550: PUSH
9551: LD_INT 12
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: ST_TO_ADDR
// hc_agressivity := 20 ;
9558: LD_ADDR_OWVAR 35
9562: PUSH
9563: LD_INT 20
9565: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9566: LD_ADDR_OWVAR 28
9570: PUSH
9571: LD_INT 17
9573: ST_TO_ADDR
// hc_gallery :=  ;
9574: LD_ADDR_OWVAR 33
9578: PUSH
9579: LD_STRING 
9581: ST_TO_ADDR
// hc_name :=  ;
9582: LD_ADDR_OWVAR 26
9586: PUSH
9587: LD_STRING 
9589: ST_TO_ADDR
// un := CreateHuman ;
9590: LD_ADDR_VAR 0 2
9594: PUSH
9595: CALL_OW 44
9599: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9600: LD_VAR 0 2
9604: PPUSH
9605: LD_INT 1
9607: PPUSH
9608: CALL_OW 51
// tmp := tmp ^ un ;
9612: LD_ADDR_VAR 0 3
9616: PUSH
9617: LD_VAR 0 3
9621: PUSH
9622: LD_VAR 0 2
9626: ADD
9627: ST_TO_ADDR
// end ;
9628: GO 9524
9630: POP
9631: POP
// repeat wait ( 0 0$1 ) ;
9632: LD_INT 35
9634: PPUSH
9635: CALL_OW 67
// for un in tmp do
9639: LD_ADDR_VAR 0 2
9643: PUSH
9644: LD_VAR 0 3
9648: PUSH
9649: FOR_IN
9650: IFFALSE 9724
// begin if IsDead ( un ) then
9652: LD_VAR 0 2
9656: PPUSH
9657: CALL_OW 301
9661: IFFALSE 9681
// begin tmp := tmp diff un ;
9663: LD_ADDR_VAR 0 3
9667: PUSH
9668: LD_VAR 0 3
9672: PUSH
9673: LD_VAR 0 2
9677: DIFF
9678: ST_TO_ADDR
// continue ;
9679: GO 9649
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9681: LD_VAR 0 2
9685: PPUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 22
9691: PUSH
9692: LD_INT 0
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PPUSH
9703: CALL_OW 69
9707: PPUSH
9708: LD_VAR 0 2
9712: PPUSH
9713: CALL_OW 74
9717: PPUSH
9718: CALL_OW 115
// end ;
9722: GO 9649
9724: POP
9725: POP
// until not tmp ;
9726: LD_VAR 0 3
9730: NOT
9731: IFFALSE 9632
// end ;
9733: PPOPN 3
9735: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9736: LD_EXP 7
9740: PUSH
9741: LD_EXP 32
9745: AND
9746: IFFALSE 9800
9748: GO 9750
9750: DISABLE
// begin ToLua ( displayTroll(); ) ;
9751: LD_STRING displayTroll();
9753: PPUSH
9754: CALL_OW 559
// wait ( 3 3$00 ) ;
9758: LD_INT 6300
9760: PPUSH
9761: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9765: LD_STRING hideTroll();
9767: PPUSH
9768: CALL_OW 559
// wait ( 1 1$00 ) ;
9772: LD_INT 2100
9774: PPUSH
9775: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9779: LD_STRING displayTroll();
9781: PPUSH
9782: CALL_OW 559
// wait ( 1 1$00 ) ;
9786: LD_INT 2100
9788: PPUSH
9789: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9793: LD_STRING hideTroll();
9795: PPUSH
9796: CALL_OW 559
// end ;
9800: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9801: LD_EXP 7
9805: PUSH
9806: LD_EXP 33
9810: AND
9811: IFFALSE 9874
9813: GO 9815
9815: DISABLE
9816: LD_INT 0
9818: PPUSH
// begin p := 0 ;
9819: LD_ADDR_VAR 0 1
9823: PUSH
9824: LD_INT 0
9826: ST_TO_ADDR
// repeat game_speed := 1 ;
9827: LD_ADDR_OWVAR 65
9831: PUSH
9832: LD_INT 1
9834: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9835: LD_INT 35
9837: PPUSH
9838: CALL_OW 67
// p := p + 1 ;
9842: LD_ADDR_VAR 0 1
9846: PUSH
9847: LD_VAR 0 1
9851: PUSH
9852: LD_INT 1
9854: PLUS
9855: ST_TO_ADDR
// until p >= 60 ;
9856: LD_VAR 0 1
9860: PUSH
9861: LD_INT 60
9863: GREATEREQUAL
9864: IFFALSE 9827
// game_speed := 4 ;
9866: LD_ADDR_OWVAR 65
9870: PUSH
9871: LD_INT 4
9873: ST_TO_ADDR
// end ;
9874: PPOPN 1
9876: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9877: LD_EXP 7
9881: PUSH
9882: LD_EXP 34
9886: AND
9887: IFFALSE 10033
9889: GO 9891
9891: DISABLE
9892: LD_INT 0
9894: PPUSH
9895: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_OWVAR 2
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: LD_INT 30
9918: PUSH
9919: LD_INT 0
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 30
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: LIST
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PPUSH
9945: CALL_OW 69
9949: ST_TO_ADDR
// if not depot then
9950: LD_VAR 0 1
9954: NOT
9955: IFFALSE 9959
// exit ;
9957: GO 10033
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: LD_VAR 0 1
9968: PUSH
9969: LD_INT 1
9971: PPUSH
9972: LD_VAR 0 1
9976: PPUSH
9977: CALL_OW 12
9981: ARRAY
9982: PPUSH
9983: CALL_OW 274
9987: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9988: LD_VAR 0 2
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: LD_INT 0
9998: PPUSH
9999: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10003: LD_VAR 0 2
10007: PPUSH
10008: LD_INT 2
10010: PPUSH
10011: LD_INT 0
10013: PPUSH
10014: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_INT 3
10025: PPUSH
10026: LD_INT 0
10028: PPUSH
10029: CALL_OW 277
// end ;
10033: PPOPN 2
10035: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10036: LD_EXP 7
10040: PUSH
10041: LD_EXP 35
10045: AND
10046: IFFALSE 10143
10048: GO 10050
10050: DISABLE
10051: LD_INT 0
10053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10054: LD_ADDR_VAR 0 1
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_OWVAR 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 21
10073: PUSH
10074: LD_INT 1
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 3
10083: PUSH
10084: LD_INT 23
10086: PUSH
10087: LD_INT 0
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: PPUSH
10103: CALL_OW 69
10107: ST_TO_ADDR
// if not tmp then
10108: LD_VAR 0 1
10112: NOT
10113: IFFALSE 10117
// exit ;
10115: GO 10143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10117: LD_VAR 0 1
10121: PUSH
10122: LD_INT 1
10124: PPUSH
10125: LD_VAR 0 1
10129: PPUSH
10130: CALL_OW 12
10134: ARRAY
10135: PPUSH
10136: LD_INT 200
10138: PPUSH
10139: CALL_OW 234
// end ;
10143: PPOPN 1
10145: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10146: LD_EXP 7
10150: PUSH
10151: LD_EXP 36
10155: AND
10156: IFFALSE 10235
10158: GO 10160
10160: DISABLE
10161: LD_INT 0
10163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10164: LD_ADDR_VAR 0 1
10168: PUSH
10169: LD_INT 22
10171: PUSH
10172: LD_OWVAR 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 21
10183: PUSH
10184: LD_INT 2
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PPUSH
10195: CALL_OW 69
10199: ST_TO_ADDR
// if not tmp then
10200: LD_VAR 0 1
10204: NOT
10205: IFFALSE 10209
// exit ;
10207: GO 10235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10209: LD_VAR 0 1
10213: PUSH
10214: LD_INT 1
10216: PPUSH
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 12
10226: ARRAY
10227: PPUSH
10228: LD_INT 60
10230: PPUSH
10231: CALL_OW 234
// end ;
10235: PPOPN 1
10237: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10238: LD_EXP 7
10242: PUSH
10243: LD_EXP 37
10247: AND
10248: IFFALSE 10347
10250: GO 10252
10252: DISABLE
10253: LD_INT 0
10255: PPUSH
10256: PPUSH
// begin enable ;
10257: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10258: LD_ADDR_VAR 0 1
10262: PUSH
10263: LD_INT 22
10265: PUSH
10266: LD_OWVAR 2
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 61
10277: PUSH
10278: EMPTY
10279: LIST
10280: PUSH
10281: LD_INT 33
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: PPUSH
10296: CALL_OW 69
10300: ST_TO_ADDR
// if not tmp then
10301: LD_VAR 0 1
10305: NOT
10306: IFFALSE 10310
// exit ;
10308: GO 10347
// for i in tmp do
10310: LD_ADDR_VAR 0 2
10314: PUSH
10315: LD_VAR 0 1
10319: PUSH
10320: FOR_IN
10321: IFFALSE 10345
// if IsControledBy ( i ) then
10323: LD_VAR 0 2
10327: PPUSH
10328: CALL_OW 312
10332: IFFALSE 10343
// ComUnlink ( i ) ;
10334: LD_VAR 0 2
10338: PPUSH
10339: CALL_OW 136
10343: GO 10320
10345: POP
10346: POP
// end ;
10347: PPOPN 2
10349: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10350: LD_EXP 7
10354: PUSH
10355: LD_EXP 38
10359: AND
10360: IFFALSE 10500
10362: GO 10364
10364: DISABLE
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
// begin ToLua ( displayPowell(); ) ;
10369: LD_STRING displayPowell();
10371: PPUSH
10372: CALL_OW 559
// uc_side := 0 ;
10376: LD_ADDR_OWVAR 20
10380: PUSH
10381: LD_INT 0
10383: ST_TO_ADDR
// uc_nation := 2 ;
10384: LD_ADDR_OWVAR 21
10388: PUSH
10389: LD_INT 2
10391: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10392: LD_ADDR_OWVAR 37
10396: PUSH
10397: LD_INT 14
10399: ST_TO_ADDR
// vc_engine := engine_siberite ;
10400: LD_ADDR_OWVAR 39
10404: PUSH
10405: LD_INT 3
10407: ST_TO_ADDR
// vc_control := control_apeman ;
10408: LD_ADDR_OWVAR 38
10412: PUSH
10413: LD_INT 5
10415: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10416: LD_ADDR_OWVAR 40
10420: PUSH
10421: LD_INT 29
10423: ST_TO_ADDR
// un := CreateVehicle ;
10424: LD_ADDR_VAR 0 2
10428: PUSH
10429: CALL_OW 45
10433: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10434: LD_VAR 0 2
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10446: LD_INT 35
10448: PPUSH
10449: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10453: LD_VAR 0 2
10457: PPUSH
10458: LD_INT 22
10460: PUSH
10461: LD_OWVAR 2
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PPUSH
10470: CALL_OW 69
10474: PPUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 74
10484: PPUSH
10485: CALL_OW 115
// until IsDead ( un ) ;
10489: LD_VAR 0 2
10493: PPUSH
10494: CALL_OW 301
10498: IFFALSE 10446
// end ;
10500: PPOPN 2
10502: END
// every 0 0$1 trigger StreamModeActive and sStu do
10503: LD_EXP 7
10507: PUSH
10508: LD_EXP 46
10512: AND
10513: IFFALSE 10529
10515: GO 10517
10517: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10518: LD_STRING displayStucuk();
10520: PPUSH
10521: CALL_OW 559
// ResetFog ;
10525: CALL_OW 335
// end ;
10529: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10530: LD_EXP 7
10534: PUSH
10535: LD_EXP 39
10539: AND
10540: IFFALSE 10681
10542: GO 10544
10544: DISABLE
10545: LD_INT 0
10547: PPUSH
10548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10549: LD_ADDR_VAR 0 2
10553: PUSH
10554: LD_INT 22
10556: PUSH
10557: LD_OWVAR 2
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 21
10568: PUSH
10569: LD_INT 1
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PPUSH
10580: CALL_OW 69
10584: ST_TO_ADDR
// if not tmp then
10585: LD_VAR 0 2
10589: NOT
10590: IFFALSE 10594
// exit ;
10592: GO 10681
// un := tmp [ rand ( 1 , tmp ) ] ;
10594: LD_ADDR_VAR 0 1
10598: PUSH
10599: LD_VAR 0 2
10603: PUSH
10604: LD_INT 1
10606: PPUSH
10607: LD_VAR 0 2
10611: PPUSH
10612: CALL_OW 12
10616: ARRAY
10617: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10618: LD_VAR 0 1
10622: PPUSH
10623: LD_INT 0
10625: PPUSH
10626: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10630: LD_VAR 0 1
10634: PPUSH
10635: LD_OWVAR 3
10639: PUSH
10640: LD_VAR 0 1
10644: DIFF
10645: PPUSH
10646: LD_VAR 0 1
10650: PPUSH
10651: CALL_OW 74
10655: PPUSH
10656: CALL_OW 115
// wait ( 0 0$20 ) ;
10660: LD_INT 700
10662: PPUSH
10663: CALL_OW 67
// SetSide ( un , your_side ) ;
10667: LD_VAR 0 1
10671: PPUSH
10672: LD_OWVAR 2
10676: PPUSH
10677: CALL_OW 235
// end ;
10681: PPOPN 2
10683: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10684: LD_EXP 7
10688: PUSH
10689: LD_EXP 40
10693: AND
10694: IFFALSE 10800
10696: GO 10698
10698: DISABLE
10699: LD_INT 0
10701: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10702: LD_ADDR_VAR 0 1
10706: PUSH
10707: LD_INT 22
10709: PUSH
10710: LD_OWVAR 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: LD_INT 30
10724: PUSH
10725: LD_INT 0
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 30
10734: PUSH
10735: LD_INT 1
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 69
10755: ST_TO_ADDR
// if not depot then
10756: LD_VAR 0 1
10760: NOT
10761: IFFALSE 10765
// exit ;
10763: GO 10800
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10765: LD_VAR 0 1
10769: PUSH
10770: LD_INT 1
10772: ARRAY
10773: PPUSH
10774: CALL_OW 250
10778: PPUSH
10779: LD_VAR 0 1
10783: PUSH
10784: LD_INT 1
10786: ARRAY
10787: PPUSH
10788: CALL_OW 251
10792: PPUSH
10793: LD_INT 70
10795: PPUSH
10796: CALL_OW 495
// end ;
10800: PPOPN 1
10802: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10803: LD_EXP 7
10807: PUSH
10808: LD_EXP 41
10812: AND
10813: IFFALSE 11024
10815: GO 10817
10817: DISABLE
10818: LD_INT 0
10820: PPUSH
10821: PPUSH
10822: PPUSH
10823: PPUSH
10824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10825: LD_ADDR_VAR 0 5
10829: PUSH
10830: LD_INT 22
10832: PUSH
10833: LD_OWVAR 2
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 21
10844: PUSH
10845: LD_INT 1
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 69
10860: ST_TO_ADDR
// if not tmp then
10861: LD_VAR 0 5
10865: NOT
10866: IFFALSE 10870
// exit ;
10868: GO 11024
// for i in tmp do
10870: LD_ADDR_VAR 0 1
10874: PUSH
10875: LD_VAR 0 5
10879: PUSH
10880: FOR_IN
10881: IFFALSE 11022
// begin d := rand ( 0 , 5 ) ;
10883: LD_ADDR_VAR 0 4
10887: PUSH
10888: LD_INT 0
10890: PPUSH
10891: LD_INT 5
10893: PPUSH
10894: CALL_OW 12
10898: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10899: LD_ADDR_VAR 0 2
10903: PUSH
10904: LD_VAR 0 1
10908: PPUSH
10909: CALL_OW 250
10913: PPUSH
10914: LD_VAR 0 4
10918: PPUSH
10919: LD_INT 3
10921: PPUSH
10922: LD_INT 12
10924: PPUSH
10925: CALL_OW 12
10929: PPUSH
10930: CALL_OW 272
10934: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10935: LD_ADDR_VAR 0 3
10939: PUSH
10940: LD_VAR 0 1
10944: PPUSH
10945: CALL_OW 251
10949: PPUSH
10950: LD_VAR 0 4
10954: PPUSH
10955: LD_INT 3
10957: PPUSH
10958: LD_INT 12
10960: PPUSH
10961: CALL_OW 12
10965: PPUSH
10966: CALL_OW 273
10970: ST_TO_ADDR
// if ValidHex ( x , y ) then
10971: LD_VAR 0 2
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: CALL_OW 488
10985: IFFALSE 11020
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10987: LD_VAR 0 1
10991: PPUSH
10992: LD_VAR 0 2
10996: PPUSH
10997: LD_VAR 0 3
11001: PPUSH
11002: LD_INT 3
11004: PPUSH
11005: LD_INT 6
11007: PPUSH
11008: CALL_OW 12
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 483
// end ;
11020: GO 10880
11022: POP
11023: POP
// end ;
11024: PPOPN 5
11026: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11027: LD_EXP 7
11031: PUSH
11032: LD_EXP 42
11036: AND
11037: IFFALSE 11131
11039: GO 11041
11041: DISABLE
11042: LD_INT 0
11044: PPUSH
11045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11046: LD_ADDR_VAR 0 2
11050: PUSH
11051: LD_INT 22
11053: PUSH
11054: LD_OWVAR 2
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 32
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 21
11075: PUSH
11076: LD_INT 2
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: ST_TO_ADDR
// if not tmp then
11093: LD_VAR 0 2
11097: NOT
11098: IFFALSE 11102
// exit ;
11100: GO 11131
// for i in tmp do
11102: LD_ADDR_VAR 0 1
11106: PUSH
11107: LD_VAR 0 2
11111: PUSH
11112: FOR_IN
11113: IFFALSE 11129
// SetFuel ( i , 0 ) ;
11115: LD_VAR 0 1
11119: PPUSH
11120: LD_INT 0
11122: PPUSH
11123: CALL_OW 240
11127: GO 11112
11129: POP
11130: POP
// end ;
11131: PPOPN 2
11133: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11134: LD_EXP 7
11138: PUSH
11139: LD_EXP 43
11143: AND
11144: IFFALSE 11210
11146: GO 11148
11148: DISABLE
11149: LD_INT 0
11151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11152: LD_ADDR_VAR 0 1
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_OWVAR 2
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 30
11171: PUSH
11172: LD_INT 29
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PPUSH
11183: CALL_OW 69
11187: ST_TO_ADDR
// if not tmp then
11188: LD_VAR 0 1
11192: NOT
11193: IFFALSE 11197
// exit ;
11195: GO 11210
// DestroyUnit ( tmp [ 1 ] ) ;
11197: LD_VAR 0 1
11201: PUSH
11202: LD_INT 1
11204: ARRAY
11205: PPUSH
11206: CALL_OW 65
// end ;
11210: PPOPN 1
11212: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11213: LD_EXP 7
11217: PUSH
11218: LD_EXP 45
11222: AND
11223: IFFALSE 11352
11225: GO 11227
11227: DISABLE
11228: LD_INT 0
11230: PPUSH
// begin uc_side := 0 ;
11231: LD_ADDR_OWVAR 20
11235: PUSH
11236: LD_INT 0
11238: ST_TO_ADDR
// uc_nation := nation_arabian ;
11239: LD_ADDR_OWVAR 21
11243: PUSH
11244: LD_INT 2
11246: ST_TO_ADDR
// hc_gallery :=  ;
11247: LD_ADDR_OWVAR 33
11251: PUSH
11252: LD_STRING 
11254: ST_TO_ADDR
// hc_name :=  ;
11255: LD_ADDR_OWVAR 26
11259: PUSH
11260: LD_STRING 
11262: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11263: LD_INT 1
11265: PPUSH
11266: LD_INT 11
11268: PPUSH
11269: LD_INT 10
11271: PPUSH
11272: CALL_OW 380
// un := CreateHuman ;
11276: LD_ADDR_VAR 0 1
11280: PUSH
11281: CALL_OW 44
11285: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11286: LD_VAR 0 1
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11298: LD_INT 35
11300: PPUSH
11301: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11305: LD_VAR 0 1
11309: PPUSH
11310: LD_INT 22
11312: PUSH
11313: LD_OWVAR 2
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PPUSH
11322: CALL_OW 69
11326: PPUSH
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 74
11336: PPUSH
11337: CALL_OW 115
// until IsDead ( un ) ;
11341: LD_VAR 0 1
11345: PPUSH
11346: CALL_OW 301
11350: IFFALSE 11298
// end ;
11352: PPOPN 1
11354: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11355: LD_EXP 7
11359: PUSH
11360: LD_EXP 47
11364: AND
11365: IFFALSE 11377
11367: GO 11369
11369: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11370: LD_STRING earthquake(getX(game), 0, 32)
11372: PPUSH
11373: CALL_OW 559
11377: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11378: LD_EXP 7
11382: PUSH
11383: LD_EXP 48
11387: AND
11388: IFFALSE 11479
11390: GO 11392
11392: DISABLE
11393: LD_INT 0
11395: PPUSH
// begin enable ;
11396: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11397: LD_ADDR_VAR 0 1
11401: PUSH
11402: LD_INT 22
11404: PUSH
11405: LD_OWVAR 2
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 21
11416: PUSH
11417: LD_INT 2
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 33
11426: PUSH
11427: LD_INT 3
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 69
11443: ST_TO_ADDR
// if not tmp then
11444: LD_VAR 0 1
11448: NOT
11449: IFFALSE 11453
// exit ;
11451: GO 11479
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11453: LD_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 12
11470: ARRAY
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 234
// end ;
11479: PPOPN 1
11481: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11482: LD_EXP 7
11486: PUSH
11487: LD_EXP 49
11491: AND
11492: IFFALSE 11633
11494: GO 11496
11496: DISABLE
11497: LD_INT 0
11499: PPUSH
11500: PPUSH
11501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11502: LD_ADDR_VAR 0 3
11506: PUSH
11507: LD_INT 22
11509: PUSH
11510: LD_OWVAR 2
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 1
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: ST_TO_ADDR
// if not tmp then
11538: LD_VAR 0 3
11542: NOT
11543: IFFALSE 11547
// exit ;
11545: GO 11633
// un := tmp [ rand ( 1 , tmp ) ] ;
11547: LD_ADDR_VAR 0 2
11551: PUSH
11552: LD_VAR 0 3
11556: PUSH
11557: LD_INT 1
11559: PPUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: CALL_OW 12
11569: ARRAY
11570: ST_TO_ADDR
// if Crawls ( un ) then
11571: LD_VAR 0 2
11575: PPUSH
11576: CALL_OW 318
11580: IFFALSE 11591
// ComWalk ( un ) ;
11582: LD_VAR 0 2
11586: PPUSH
11587: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11591: LD_VAR 0 2
11595: PPUSH
11596: LD_INT 9
11598: PPUSH
11599: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11603: LD_INT 28
11605: PPUSH
11606: LD_OWVAR 2
11610: PPUSH
11611: LD_INT 2
11613: PPUSH
11614: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11618: LD_INT 29
11620: PPUSH
11621: LD_OWVAR 2
11625: PPUSH
11626: LD_INT 2
11628: PPUSH
11629: CALL_OW 322
// end ;
11633: PPOPN 3
11635: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11636: LD_EXP 7
11640: PUSH
11641: LD_EXP 50
11645: AND
11646: IFFALSE 11757
11648: GO 11650
11650: DISABLE
11651: LD_INT 0
11653: PPUSH
11654: PPUSH
11655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11656: LD_ADDR_VAR 0 3
11660: PUSH
11661: LD_INT 22
11663: PUSH
11664: LD_OWVAR 2
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 25
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: ST_TO_ADDR
// if not tmp then
11692: LD_VAR 0 3
11696: NOT
11697: IFFALSE 11701
// exit ;
11699: GO 11757
// un := tmp [ rand ( 1 , tmp ) ] ;
11701: LD_ADDR_VAR 0 2
11705: PUSH
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 1
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: CALL_OW 12
11723: ARRAY
11724: ST_TO_ADDR
// if Crawls ( un ) then
11725: LD_VAR 0 2
11729: PPUSH
11730: CALL_OW 318
11734: IFFALSE 11745
// ComWalk ( un ) ;
11736: LD_VAR 0 2
11740: PPUSH
11741: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11745: LD_VAR 0 2
11749: PPUSH
11750: LD_INT 8
11752: PPUSH
11753: CALL_OW 336
// end ;
11757: PPOPN 3
11759: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11760: LD_EXP 7
11764: PUSH
11765: LD_EXP 51
11769: AND
11770: IFFALSE 11914
11772: GO 11774
11774: DISABLE
11775: LD_INT 0
11777: PPUSH
11778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11779: LD_ADDR_VAR 0 2
11783: PUSH
11784: LD_INT 22
11786: PUSH
11787: LD_OWVAR 2
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 21
11798: PUSH
11799: LD_INT 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 2
11808: PUSH
11809: LD_INT 34
11811: PUSH
11812: LD_INT 12
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 34
11821: PUSH
11822: LD_INT 51
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 34
11831: PUSH
11832: LD_INT 32
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: PPUSH
11850: CALL_OW 69
11854: ST_TO_ADDR
// if not tmp then
11855: LD_VAR 0 2
11859: NOT
11860: IFFALSE 11864
// exit ;
11862: GO 11914
// for i in tmp do
11864: LD_ADDR_VAR 0 1
11868: PUSH
11869: LD_VAR 0 2
11873: PUSH
11874: FOR_IN
11875: IFFALSE 11912
// if GetCargo ( i , mat_artifact ) = 0 then
11877: LD_VAR 0 1
11881: PPUSH
11882: LD_INT 4
11884: PPUSH
11885: CALL_OW 289
11889: PUSH
11890: LD_INT 0
11892: EQUAL
11893: IFFALSE 11910
// SetCargo ( i , mat_siberit , 100 ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_INT 3
11902: PPUSH
11903: LD_INT 100
11905: PPUSH
11906: CALL_OW 290
11910: GO 11874
11912: POP
11913: POP
// end ;
11914: PPOPN 2
11916: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11917: LD_EXP 7
11921: PUSH
11922: LD_EXP 52
11926: AND
11927: IFFALSE 12110
11929: GO 11931
11931: DISABLE
11932: LD_INT 0
11934: PPUSH
11935: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11936: LD_ADDR_VAR 0 2
11940: PUSH
11941: LD_INT 22
11943: PUSH
11944: LD_OWVAR 2
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PPUSH
11953: CALL_OW 69
11957: ST_TO_ADDR
// if not tmp then
11958: LD_VAR 0 2
11962: NOT
11963: IFFALSE 11967
// exit ;
11965: GO 12110
// for i := 1 to 2 do
11967: LD_ADDR_VAR 0 1
11971: PUSH
11972: DOUBLE
11973: LD_INT 1
11975: DEC
11976: ST_TO_ADDR
11977: LD_INT 2
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12108
// begin uc_side := your_side ;
11983: LD_ADDR_OWVAR 20
11987: PUSH
11988: LD_OWVAR 2
11992: ST_TO_ADDR
// uc_nation := nation_american ;
11993: LD_ADDR_OWVAR 21
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// vc_chassis := us_morphling ;
12001: LD_ADDR_OWVAR 37
12005: PUSH
12006: LD_INT 5
12008: ST_TO_ADDR
// vc_engine := engine_siberite ;
12009: LD_ADDR_OWVAR 39
12013: PUSH
12014: LD_INT 3
12016: ST_TO_ADDR
// vc_control := control_computer ;
12017: LD_ADDR_OWVAR 38
12021: PUSH
12022: LD_INT 3
12024: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12025: LD_ADDR_OWVAR 40
12029: PUSH
12030: LD_INT 10
12032: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12033: LD_VAR 0 2
12037: PUSH
12038: LD_INT 1
12040: ARRAY
12041: PPUSH
12042: CALL_OW 310
12046: NOT
12047: IFFALSE 12094
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12049: CALL_OW 45
12053: PPUSH
12054: LD_VAR 0 2
12058: PUSH
12059: LD_INT 1
12061: ARRAY
12062: PPUSH
12063: CALL_OW 250
12067: PPUSH
12068: LD_VAR 0 2
12072: PUSH
12073: LD_INT 1
12075: ARRAY
12076: PPUSH
12077: CALL_OW 251
12081: PPUSH
12082: LD_INT 12
12084: PPUSH
12085: LD_INT 1
12087: PPUSH
12088: CALL_OW 50
12092: GO 12106
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12094: CALL_OW 45
12098: PPUSH
12099: LD_INT 1
12101: PPUSH
12102: CALL_OW 51
// end ;
12106: GO 11980
12108: POP
12109: POP
// end ;
12110: PPOPN 2
12112: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12113: LD_EXP 7
12117: PUSH
12118: LD_EXP 53
12122: AND
12123: IFFALSE 12345
12125: GO 12127
12127: DISABLE
12128: LD_INT 0
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12136: LD_ADDR_VAR 0 6
12140: PUSH
12141: LD_INT 22
12143: PUSH
12144: LD_OWVAR 2
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 21
12155: PUSH
12156: LD_INT 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: LD_INT 23
12168: PUSH
12169: LD_INT 0
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 69
12189: ST_TO_ADDR
// if not tmp then
12190: LD_VAR 0 6
12194: NOT
12195: IFFALSE 12199
// exit ;
12197: GO 12345
// s1 := rand ( 1 , 4 ) ;
12199: LD_ADDR_VAR 0 2
12203: PUSH
12204: LD_INT 1
12206: PPUSH
12207: LD_INT 4
12209: PPUSH
12210: CALL_OW 12
12214: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12215: LD_ADDR_VAR 0 4
12219: PUSH
12220: LD_VAR 0 6
12224: PUSH
12225: LD_INT 1
12227: ARRAY
12228: PPUSH
12229: LD_VAR 0 2
12233: PPUSH
12234: CALL_OW 259
12238: ST_TO_ADDR
// if s1 = 1 then
12239: LD_VAR 0 2
12243: PUSH
12244: LD_INT 1
12246: EQUAL
12247: IFFALSE 12267
// s2 := rand ( 2 , 4 ) else
12249: LD_ADDR_VAR 0 3
12253: PUSH
12254: LD_INT 2
12256: PPUSH
12257: LD_INT 4
12259: PPUSH
12260: CALL_OW 12
12264: ST_TO_ADDR
12265: GO 12275
// s2 := 1 ;
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_INT 1
12274: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12275: LD_ADDR_VAR 0 5
12279: PUSH
12280: LD_VAR 0 6
12284: PUSH
12285: LD_INT 1
12287: ARRAY
12288: PPUSH
12289: LD_VAR 0 3
12293: PPUSH
12294: CALL_OW 259
12298: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12299: LD_VAR 0 6
12303: PUSH
12304: LD_INT 1
12306: ARRAY
12307: PPUSH
12308: LD_VAR 0 2
12312: PPUSH
12313: LD_VAR 0 5
12317: PPUSH
12318: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12322: LD_VAR 0 6
12326: PUSH
12327: LD_INT 1
12329: ARRAY
12330: PPUSH
12331: LD_VAR 0 3
12335: PPUSH
12336: LD_VAR 0 4
12340: PPUSH
12341: CALL_OW 237
// end ;
12345: PPOPN 6
12347: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12348: LD_EXP 7
12352: PUSH
12353: LD_EXP 54
12357: AND
12358: IFFALSE 12437
12360: GO 12362
12362: DISABLE
12363: LD_INT 0
12365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12366: LD_ADDR_VAR 0 1
12370: PUSH
12371: LD_INT 22
12373: PUSH
12374: LD_OWVAR 2
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 30
12385: PUSH
12386: LD_INT 3
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PPUSH
12397: CALL_OW 69
12401: ST_TO_ADDR
// if not tmp then
12402: LD_VAR 0 1
12406: NOT
12407: IFFALSE 12411
// exit ;
12409: GO 12437
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12411: LD_VAR 0 1
12415: PUSH
12416: LD_INT 1
12418: PPUSH
12419: LD_VAR 0 1
12423: PPUSH
12424: CALL_OW 12
12428: ARRAY
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: CALL_OW 234
// end ;
12437: PPOPN 1
12439: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12440: LD_EXP 7
12444: PUSH
12445: LD_EXP 55
12449: AND
12450: IFFALSE 12562
12452: GO 12454
12454: DISABLE
12455: LD_INT 0
12457: PPUSH
12458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12459: LD_ADDR_VAR 0 2
12463: PUSH
12464: LD_INT 22
12466: PUSH
12467: LD_OWVAR 2
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: LD_INT 30
12481: PUSH
12482: LD_INT 27
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 30
12491: PUSH
12492: LD_INT 26
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: LD_INT 30
12501: PUSH
12502: LD_INT 28
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 69
12523: ST_TO_ADDR
// if not tmp then
12524: LD_VAR 0 2
12528: NOT
12529: IFFALSE 12533
// exit ;
12531: GO 12562
// for i in tmp do
12533: LD_ADDR_VAR 0 1
12537: PUSH
12538: LD_VAR 0 2
12542: PUSH
12543: FOR_IN
12544: IFFALSE 12560
// SetLives ( i , 1 ) ;
12546: LD_VAR 0 1
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 234
12558: GO 12543
12560: POP
12561: POP
// end ;
12562: PPOPN 2
12564: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12565: LD_EXP 7
12569: PUSH
12570: LD_EXP 56
12574: AND
12575: IFFALSE 12862
12577: GO 12579
12579: DISABLE
12580: LD_INT 0
12582: PPUSH
12583: PPUSH
12584: PPUSH
// begin i := rand ( 1 , 7 ) ;
12585: LD_ADDR_VAR 0 1
12589: PUSH
12590: LD_INT 1
12592: PPUSH
12593: LD_INT 7
12595: PPUSH
12596: CALL_OW 12
12600: ST_TO_ADDR
// case i of 1 :
12601: LD_VAR 0 1
12605: PUSH
12606: LD_INT 1
12608: DOUBLE
12609: EQUAL
12610: IFTRUE 12614
12612: GO 12624
12614: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12615: LD_STRING earthquake(getX(game), 0, 32)
12617: PPUSH
12618: CALL_OW 559
12622: GO 12862
12624: LD_INT 2
12626: DOUBLE
12627: EQUAL
12628: IFTRUE 12632
12630: GO 12646
12632: POP
// begin ToLua ( displayStucuk(); ) ;
12633: LD_STRING displayStucuk();
12635: PPUSH
12636: CALL_OW 559
// ResetFog ;
12640: CALL_OW 335
// end ; 3 :
12644: GO 12862
12646: LD_INT 3
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12758
12654: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12655: LD_ADDR_VAR 0 2
12659: PUSH
12660: LD_INT 22
12662: PUSH
12663: LD_OWVAR 2
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 25
12674: PUSH
12675: LD_INT 1
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PPUSH
12686: CALL_OW 69
12690: ST_TO_ADDR
// if not tmp then
12691: LD_VAR 0 2
12695: NOT
12696: IFFALSE 12700
// exit ;
12698: GO 12862
// un := tmp [ rand ( 1 , tmp ) ] ;
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_VAR 0 2
12709: PUSH
12710: LD_INT 1
12712: PPUSH
12713: LD_VAR 0 2
12717: PPUSH
12718: CALL_OW 12
12722: ARRAY
12723: ST_TO_ADDR
// if Crawls ( un ) then
12724: LD_VAR 0 3
12728: PPUSH
12729: CALL_OW 318
12733: IFFALSE 12744
// ComWalk ( un ) ;
12735: LD_VAR 0 3
12739: PPUSH
12740: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 8
12751: PPUSH
12752: CALL_OW 336
// end ; 4 :
12756: GO 12862
12758: LD_INT 4
12760: DOUBLE
12761: EQUAL
12762: IFTRUE 12766
12764: GO 12840
12766: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: LD_INT 22
12774: PUSH
12775: LD_OWVAR 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 30
12786: PUSH
12787: LD_INT 29
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: ST_TO_ADDR
// if not tmp then
12803: LD_VAR 0 2
12807: NOT
12808: IFFALSE 12812
// exit ;
12810: GO 12862
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12812: LD_VAR 0 2
12816: PUSH
12817: LD_INT 1
12819: ARRAY
12820: PPUSH
12821: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12825: LD_VAR 0 2
12829: PUSH
12830: LD_INT 1
12832: ARRAY
12833: PPUSH
12834: CALL_OW 65
// end ; 5 .. 7 :
12838: GO 12862
12840: LD_INT 5
12842: DOUBLE
12843: GREATEREQUAL
12844: IFFALSE 12852
12846: LD_INT 7
12848: DOUBLE
12849: LESSEQUAL
12850: IFTRUE 12854
12852: GO 12861
12854: POP
// StreamSibBomb ; end ;
12855: CALL 9099 0 0
12859: GO 12862
12861: POP
// end ;
12862: PPOPN 3
12864: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12865: LD_EXP 7
12869: PUSH
12870: LD_EXP 57
12874: AND
12875: IFFALSE 13031
12877: GO 12879
12879: DISABLE
12880: LD_INT 0
12882: PPUSH
12883: PPUSH
12884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12885: LD_ADDR_VAR 0 2
12889: PUSH
12890: LD_INT 81
12892: PUSH
12893: LD_OWVAR 2
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 2
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 21
12917: PUSH
12918: LD_INT 2
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PPUSH
12934: CALL_OW 69
12938: ST_TO_ADDR
// if not tmp then
12939: LD_VAR 0 2
12943: NOT
12944: IFFALSE 12948
// exit ;
12946: GO 13031
// p := 0 ;
12948: LD_ADDR_VAR 0 3
12952: PUSH
12953: LD_INT 0
12955: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12956: LD_INT 35
12958: PPUSH
12959: CALL_OW 67
// p := p + 1 ;
12963: LD_ADDR_VAR 0 3
12967: PUSH
12968: LD_VAR 0 3
12972: PUSH
12973: LD_INT 1
12975: PLUS
12976: ST_TO_ADDR
// for i in tmp do
12977: LD_ADDR_VAR 0 1
12981: PUSH
12982: LD_VAR 0 2
12986: PUSH
12987: FOR_IN
12988: IFFALSE 13019
// if GetLives ( i ) < 1000 then
12990: LD_VAR 0 1
12994: PPUSH
12995: CALL_OW 256
12999: PUSH
13000: LD_INT 1000
13002: LESS
13003: IFFALSE 13017
// SetLives ( i , 1000 ) ;
13005: LD_VAR 0 1
13009: PPUSH
13010: LD_INT 1000
13012: PPUSH
13013: CALL_OW 234
13017: GO 12987
13019: POP
13020: POP
// until p > 20 ;
13021: LD_VAR 0 3
13025: PUSH
13026: LD_INT 20
13028: GREATER
13029: IFFALSE 12956
// end ;
13031: PPOPN 3
13033: END
// every 0 0$1 trigger StreamModeActive and sTime do
13034: LD_EXP 7
13038: PUSH
13039: LD_EXP 58
13043: AND
13044: IFFALSE 13079
13046: GO 13048
13048: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13049: LD_INT 28
13051: PPUSH
13052: LD_OWVAR 2
13056: PPUSH
13057: LD_INT 2
13059: PPUSH
13060: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13064: LD_INT 30
13066: PPUSH
13067: LD_OWVAR 2
13071: PPUSH
13072: LD_INT 2
13074: PPUSH
13075: CALL_OW 322
// end ;
13079: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13080: LD_EXP 7
13084: PUSH
13085: LD_EXP 59
13089: AND
13090: IFFALSE 13211
13092: GO 13094
13094: DISABLE
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13099: LD_ADDR_VAR 0 2
13103: PUSH
13104: LD_INT 22
13106: PUSH
13107: LD_OWVAR 2
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 21
13118: PUSH
13119: LD_INT 1
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 3
13128: PUSH
13129: LD_INT 23
13131: PUSH
13132: LD_INT 0
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: PPUSH
13148: CALL_OW 69
13152: ST_TO_ADDR
// if not tmp then
13153: LD_VAR 0 2
13157: NOT
13158: IFFALSE 13162
// exit ;
13160: GO 13211
// for i in tmp do
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: LD_VAR 0 2
13171: PUSH
13172: FOR_IN
13173: IFFALSE 13209
// begin if Crawls ( i ) then
13175: LD_VAR 0 1
13179: PPUSH
13180: CALL_OW 318
13184: IFFALSE 13195
// ComWalk ( i ) ;
13186: LD_VAR 0 1
13190: PPUSH
13191: CALL_OW 138
// SetClass ( i , 2 ) ;
13195: LD_VAR 0 1
13199: PPUSH
13200: LD_INT 2
13202: PPUSH
13203: CALL_OW 336
// end ;
13207: GO 13172
13209: POP
13210: POP
// end ;
13211: PPOPN 2
13213: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13214: LD_EXP 7
13218: PUSH
13219: LD_EXP 60
13223: AND
13224: IFFALSE 13512
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
13232: PPUSH
13233: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13234: LD_OWVAR 2
13238: PPUSH
13239: LD_INT 9
13241: PPUSH
13242: LD_INT 1
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13252: LD_INT 9
13254: PPUSH
13255: LD_OWVAR 2
13259: PPUSH
13260: CALL_OW 343
// uc_side := 9 ;
13264: LD_ADDR_OWVAR 20
13268: PUSH
13269: LD_INT 9
13271: ST_TO_ADDR
// uc_nation := 2 ;
13272: LD_ADDR_OWVAR 21
13276: PUSH
13277: LD_INT 2
13279: ST_TO_ADDR
// hc_name := Dark Warrior ;
13280: LD_ADDR_OWVAR 26
13284: PUSH
13285: LD_STRING Dark Warrior
13287: ST_TO_ADDR
// hc_gallery :=  ;
13288: LD_ADDR_OWVAR 33
13292: PUSH
13293: LD_STRING 
13295: ST_TO_ADDR
// hc_noskilllimit := true ;
13296: LD_ADDR_OWVAR 76
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13304: LD_ADDR_OWVAR 31
13308: PUSH
13309: LD_INT 30
13311: PUSH
13312: LD_INT 30
13314: PUSH
13315: LD_INT 30
13317: PUSH
13318: LD_INT 30
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: ST_TO_ADDR
// un := CreateHuman ;
13327: LD_ADDR_VAR 0 3
13331: PUSH
13332: CALL_OW 44
13336: ST_TO_ADDR
// hc_noskilllimit := false ;
13337: LD_ADDR_OWVAR 76
13341: PUSH
13342: LD_INT 0
13344: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 51
// ToLua ( playRanger() ) ;
13357: LD_STRING playRanger()
13359: PPUSH
13360: CALL_OW 559
// p := 0 ;
13364: LD_ADDR_VAR 0 2
13368: PUSH
13369: LD_INT 0
13371: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13372: LD_INT 35
13374: PPUSH
13375: CALL_OW 67
// p := p + 1 ;
13379: LD_ADDR_VAR 0 2
13383: PUSH
13384: LD_VAR 0 2
13388: PUSH
13389: LD_INT 1
13391: PLUS
13392: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13393: LD_VAR 0 3
13397: PPUSH
13398: CALL_OW 256
13402: PUSH
13403: LD_INT 1000
13405: LESS
13406: IFFALSE 13420
// SetLives ( un , 1000 ) ;
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 1000
13415: PPUSH
13416: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 81
13427: PUSH
13428: LD_OWVAR 2
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 91
13439: PUSH
13440: LD_VAR 0 3
13444: PUSH
13445: LD_INT 30
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 69
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: CALL_OW 74
13471: PPUSH
13472: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13476: LD_VAR 0 2
13480: PUSH
13481: LD_INT 80
13483: GREATER
13484: PUSH
13485: LD_VAR 0 3
13489: PPUSH
13490: CALL_OW 301
13494: OR
13495: IFFALSE 13372
// if un then
13497: LD_VAR 0 3
13501: IFFALSE 13512
// RemoveUnit ( un ) ;
13503: LD_VAR 0 3
13507: PPUSH
13508: CALL_OW 64
// end ;
13512: PPOPN 3
13514: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13515: LD_EXP 61
13519: IFFALSE 13635
13521: GO 13523
13523: DISABLE
13524: LD_INT 0
13526: PPUSH
13527: PPUSH
13528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_INT 81
13536: PUSH
13537: LD_OWVAR 2
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 1
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13565: LD_STRING playComputer()
13567: PPUSH
13568: CALL_OW 559
// if not tmp then
13572: LD_VAR 0 2
13576: NOT
13577: IFFALSE 13581
// exit ;
13579: GO 13635
// for i in tmp do
13581: LD_ADDR_VAR 0 1
13585: PUSH
13586: LD_VAR 0 2
13590: PUSH
13591: FOR_IN
13592: IFFALSE 13633
// for j := 1 to 4 do
13594: LD_ADDR_VAR 0 3
13598: PUSH
13599: DOUBLE
13600: LD_INT 1
13602: DEC
13603: ST_TO_ADDR
13604: LD_INT 4
13606: PUSH
13607: FOR_TO
13608: IFFALSE 13629
// SetSkill ( i , j , 10 ) ;
13610: LD_VAR 0 1
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: LD_INT 10
13622: PPUSH
13623: CALL_OW 237
13627: GO 13607
13629: POP
13630: POP
13631: GO 13591
13633: POP
13634: POP
// end ;
13635: PPOPN 3
13637: END
// every 0 0$1 trigger s30 do var i , tmp ;
13638: LD_EXP 62
13642: IFFALSE 13711
13644: GO 13646
13646: DISABLE
13647: LD_INT 0
13649: PPUSH
13650: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13651: LD_ADDR_VAR 0 2
13655: PUSH
13656: LD_INT 22
13658: PUSH
13659: LD_OWVAR 2
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PPUSH
13668: CALL_OW 69
13672: ST_TO_ADDR
// if not tmp then
13673: LD_VAR 0 2
13677: NOT
13678: IFFALSE 13682
// exit ;
13680: GO 13711
// for i in tmp do
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_VAR 0 2
13691: PUSH
13692: FOR_IN
13693: IFFALSE 13709
// SetLives ( i , 300 ) ;
13695: LD_VAR 0 1
13699: PPUSH
13700: LD_INT 300
13702: PPUSH
13703: CALL_OW 234
13707: GO 13692
13709: POP
13710: POP
// end ;
13711: PPOPN 2
13713: END
// every 0 0$1 trigger s60 do var i , tmp ;
13714: LD_EXP 63
13718: IFFALSE 13787
13720: GO 13722
13722: DISABLE
13723: LD_INT 0
13725: PPUSH
13726: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13727: LD_ADDR_VAR 0 2
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_OWVAR 2
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if not tmp then
13749: LD_VAR 0 2
13753: NOT
13754: IFFALSE 13758
// exit ;
13756: GO 13787
// for i in tmp do
13758: LD_ADDR_VAR 0 1
13762: PUSH
13763: LD_VAR 0 2
13767: PUSH
13768: FOR_IN
13769: IFFALSE 13785
// SetLives ( i , 600 ) ;
13771: LD_VAR 0 1
13775: PPUSH
13776: LD_INT 600
13778: PPUSH
13779: CALL_OW 234
13783: GO 13768
13785: POP
13786: POP
// end ;
13787: PPOPN 2
13789: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13790: LD_INT 0
13792: PPUSH
// case cmd of 301 :
13793: LD_VAR 0 1
13797: PUSH
13798: LD_INT 301
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13838
13806: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13807: LD_VAR 0 6
13811: PPUSH
13812: LD_VAR 0 7
13816: PPUSH
13817: LD_VAR 0 8
13821: PPUSH
13822: LD_VAR 0 4
13826: PPUSH
13827: LD_VAR 0 5
13831: PPUSH
13832: CALL 15039 0 5
13836: GO 13959
13838: LD_INT 302
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13883
13846: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13847: LD_VAR 0 6
13851: PPUSH
13852: LD_VAR 0 7
13856: PPUSH
13857: LD_VAR 0 8
13861: PPUSH
13862: LD_VAR 0 9
13866: PPUSH
13867: LD_VAR 0 4
13871: PPUSH
13872: LD_VAR 0 5
13876: PPUSH
13877: CALL 15130 0 6
13881: GO 13959
13883: LD_INT 303
13885: DOUBLE
13886: EQUAL
13887: IFTRUE 13891
13889: GO 13928
13891: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13892: LD_VAR 0 6
13896: PPUSH
13897: LD_VAR 0 7
13901: PPUSH
13902: LD_VAR 0 8
13906: PPUSH
13907: LD_VAR 0 9
13911: PPUSH
13912: LD_VAR 0 4
13916: PPUSH
13917: LD_VAR 0 5
13921: PPUSH
13922: CALL 13964 0 6
13926: GO 13959
13928: LD_INT 304
13930: DOUBLE
13931: EQUAL
13932: IFTRUE 13936
13934: GO 13958
13936: POP
// hHackTeleport ( unit , x , y ) ; end ;
13937: LD_VAR 0 2
13941: PPUSH
13942: LD_VAR 0 4
13946: PPUSH
13947: LD_VAR 0 5
13951: PPUSH
13952: CALL 15723 0 3
13956: GO 13959
13958: POP
// end ;
13959: LD_VAR 0 12
13963: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13964: LD_INT 0
13966: PPUSH
13967: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13968: LD_VAR 0 1
13972: PUSH
13973: LD_INT 1
13975: LESS
13976: PUSH
13977: LD_VAR 0 1
13981: PUSH
13982: LD_INT 3
13984: GREATER
13985: OR
13986: PUSH
13987: LD_VAR 0 5
13991: PPUSH
13992: LD_VAR 0 6
13996: PPUSH
13997: CALL_OW 428
14001: OR
14002: IFFALSE 14006
// exit ;
14004: GO 14726
// uc_side := your_side ;
14006: LD_ADDR_OWVAR 20
14010: PUSH
14011: LD_OWVAR 2
14015: ST_TO_ADDR
// uc_nation := nation ;
14016: LD_ADDR_OWVAR 21
14020: PUSH
14021: LD_VAR 0 1
14025: ST_TO_ADDR
// bc_level = 1 ;
14026: LD_ADDR_OWVAR 43
14030: PUSH
14031: LD_INT 1
14033: ST_TO_ADDR
// case btype of 1 :
14034: LD_VAR 0 2
14038: PUSH
14039: LD_INT 1
14041: DOUBLE
14042: EQUAL
14043: IFTRUE 14047
14045: GO 14058
14047: POP
// bc_type := b_depot ; 2 :
14048: LD_ADDR_OWVAR 42
14052: PUSH
14053: LD_INT 0
14055: ST_TO_ADDR
14056: GO 14670
14058: LD_INT 2
14060: DOUBLE
14061: EQUAL
14062: IFTRUE 14066
14064: GO 14077
14066: POP
// bc_type := b_warehouse ; 3 :
14067: LD_ADDR_OWVAR 42
14071: PUSH
14072: LD_INT 1
14074: ST_TO_ADDR
14075: GO 14670
14077: LD_INT 3
14079: DOUBLE
14080: EQUAL
14081: IFTRUE 14085
14083: GO 14096
14085: POP
// bc_type := b_lab ; 4 .. 9 :
14086: LD_ADDR_OWVAR 42
14090: PUSH
14091: LD_INT 6
14093: ST_TO_ADDR
14094: GO 14670
14096: LD_INT 4
14098: DOUBLE
14099: GREATEREQUAL
14100: IFFALSE 14108
14102: LD_INT 9
14104: DOUBLE
14105: LESSEQUAL
14106: IFTRUE 14110
14108: GO 14162
14110: POP
// begin bc_type := b_lab_half ;
14111: LD_ADDR_OWVAR 42
14115: PUSH
14116: LD_INT 7
14118: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14119: LD_ADDR_OWVAR 44
14123: PUSH
14124: LD_INT 10
14126: PUSH
14127: LD_INT 11
14129: PUSH
14130: LD_INT 12
14132: PUSH
14133: LD_INT 15
14135: PUSH
14136: LD_INT 14
14138: PUSH
14139: LD_INT 13
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: PUSH
14150: LD_VAR 0 2
14154: PUSH
14155: LD_INT 3
14157: MINUS
14158: ARRAY
14159: ST_TO_ADDR
// end ; 10 .. 13 :
14160: GO 14670
14162: LD_INT 10
14164: DOUBLE
14165: GREATEREQUAL
14166: IFFALSE 14174
14168: LD_INT 13
14170: DOUBLE
14171: LESSEQUAL
14172: IFTRUE 14176
14174: GO 14253
14176: POP
// begin bc_type := b_lab_full ;
14177: LD_ADDR_OWVAR 42
14181: PUSH
14182: LD_INT 8
14184: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14185: LD_ADDR_OWVAR 44
14189: PUSH
14190: LD_INT 10
14192: PUSH
14193: LD_INT 12
14195: PUSH
14196: LD_INT 14
14198: PUSH
14199: LD_INT 13
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_VAR 0 2
14212: PUSH
14213: LD_INT 9
14215: MINUS
14216: ARRAY
14217: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14218: LD_ADDR_OWVAR 45
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 15
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: LD_INT 15
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: PUSH
14241: LD_VAR 0 2
14245: PUSH
14246: LD_INT 9
14248: MINUS
14249: ARRAY
14250: ST_TO_ADDR
// end ; 14 :
14251: GO 14670
14253: LD_INT 14
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14272
14261: POP
// bc_type := b_workshop ; 15 :
14262: LD_ADDR_OWVAR 42
14266: PUSH
14267: LD_INT 2
14269: ST_TO_ADDR
14270: GO 14670
14272: LD_INT 15
14274: DOUBLE
14275: EQUAL
14276: IFTRUE 14280
14278: GO 14291
14280: POP
// bc_type := b_factory ; 16 :
14281: LD_ADDR_OWVAR 42
14285: PUSH
14286: LD_INT 3
14288: ST_TO_ADDR
14289: GO 14670
14291: LD_INT 16
14293: DOUBLE
14294: EQUAL
14295: IFTRUE 14299
14297: GO 14310
14299: POP
// bc_type := b_ext_gun ; 17 :
14300: LD_ADDR_OWVAR 42
14304: PUSH
14305: LD_INT 17
14307: ST_TO_ADDR
14308: GO 14670
14310: LD_INT 17
14312: DOUBLE
14313: EQUAL
14314: IFTRUE 14318
14316: GO 14346
14318: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14319: LD_ADDR_OWVAR 42
14323: PUSH
14324: LD_INT 19
14326: PUSH
14327: LD_INT 23
14329: PUSH
14330: LD_INT 19
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: PUSH
14338: LD_VAR 0 1
14342: ARRAY
14343: ST_TO_ADDR
14344: GO 14670
14346: LD_INT 18
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14365
14354: POP
// bc_type := b_ext_radar ; 19 :
14355: LD_ADDR_OWVAR 42
14359: PUSH
14360: LD_INT 20
14362: ST_TO_ADDR
14363: GO 14670
14365: LD_INT 19
14367: DOUBLE
14368: EQUAL
14369: IFTRUE 14373
14371: GO 14384
14373: POP
// bc_type := b_ext_radio ; 20 :
14374: LD_ADDR_OWVAR 42
14378: PUSH
14379: LD_INT 22
14381: ST_TO_ADDR
14382: GO 14670
14384: LD_INT 20
14386: DOUBLE
14387: EQUAL
14388: IFTRUE 14392
14390: GO 14403
14392: POP
// bc_type := b_ext_siberium ; 21 :
14393: LD_ADDR_OWVAR 42
14397: PUSH
14398: LD_INT 21
14400: ST_TO_ADDR
14401: GO 14670
14403: LD_INT 21
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14422
14411: POP
// bc_type := b_ext_computer ; 22 :
14412: LD_ADDR_OWVAR 42
14416: PUSH
14417: LD_INT 24
14419: ST_TO_ADDR
14420: GO 14670
14422: LD_INT 22
14424: DOUBLE
14425: EQUAL
14426: IFTRUE 14430
14428: GO 14441
14430: POP
// bc_type := b_ext_track ; 23 :
14431: LD_ADDR_OWVAR 42
14435: PUSH
14436: LD_INT 16
14438: ST_TO_ADDR
14439: GO 14670
14441: LD_INT 23
14443: DOUBLE
14444: EQUAL
14445: IFTRUE 14449
14447: GO 14460
14449: POP
// bc_type := b_ext_laser ; 24 :
14450: LD_ADDR_OWVAR 42
14454: PUSH
14455: LD_INT 25
14457: ST_TO_ADDR
14458: GO 14670
14460: LD_INT 24
14462: DOUBLE
14463: EQUAL
14464: IFTRUE 14468
14466: GO 14479
14468: POP
// bc_type := b_control_tower ; 25 :
14469: LD_ADDR_OWVAR 42
14473: PUSH
14474: LD_INT 36
14476: ST_TO_ADDR
14477: GO 14670
14479: LD_INT 25
14481: DOUBLE
14482: EQUAL
14483: IFTRUE 14487
14485: GO 14498
14487: POP
// bc_type := b_breastwork ; 26 :
14488: LD_ADDR_OWVAR 42
14492: PUSH
14493: LD_INT 31
14495: ST_TO_ADDR
14496: GO 14670
14498: LD_INT 26
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14517
14506: POP
// bc_type := b_bunker ; 27 :
14507: LD_ADDR_OWVAR 42
14511: PUSH
14512: LD_INT 32
14514: ST_TO_ADDR
14515: GO 14670
14517: LD_INT 27
14519: DOUBLE
14520: EQUAL
14521: IFTRUE 14525
14523: GO 14536
14525: POP
// bc_type := b_turret ; 28 :
14526: LD_ADDR_OWVAR 42
14530: PUSH
14531: LD_INT 33
14533: ST_TO_ADDR
14534: GO 14670
14536: LD_INT 28
14538: DOUBLE
14539: EQUAL
14540: IFTRUE 14544
14542: GO 14555
14544: POP
// bc_type := b_armoury ; 29 :
14545: LD_ADDR_OWVAR 42
14549: PUSH
14550: LD_INT 4
14552: ST_TO_ADDR
14553: GO 14670
14555: LD_INT 29
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14574
14563: POP
// bc_type := b_barracks ; 30 :
14564: LD_ADDR_OWVAR 42
14568: PUSH
14569: LD_INT 5
14571: ST_TO_ADDR
14572: GO 14670
14574: LD_INT 30
14576: DOUBLE
14577: EQUAL
14578: IFTRUE 14582
14580: GO 14593
14582: POP
// bc_type := b_solar_power ; 31 :
14583: LD_ADDR_OWVAR 42
14587: PUSH
14588: LD_INT 27
14590: ST_TO_ADDR
14591: GO 14670
14593: LD_INT 31
14595: DOUBLE
14596: EQUAL
14597: IFTRUE 14601
14599: GO 14612
14601: POP
// bc_type := b_oil_power ; 32 :
14602: LD_ADDR_OWVAR 42
14606: PUSH
14607: LD_INT 26
14609: ST_TO_ADDR
14610: GO 14670
14612: LD_INT 32
14614: DOUBLE
14615: EQUAL
14616: IFTRUE 14620
14618: GO 14631
14620: POP
// bc_type := b_siberite_power ; 33 :
14621: LD_ADDR_OWVAR 42
14625: PUSH
14626: LD_INT 28
14628: ST_TO_ADDR
14629: GO 14670
14631: LD_INT 33
14633: DOUBLE
14634: EQUAL
14635: IFTRUE 14639
14637: GO 14650
14639: POP
// bc_type := b_oil_mine ; 34 :
14640: LD_ADDR_OWVAR 42
14644: PUSH
14645: LD_INT 29
14647: ST_TO_ADDR
14648: GO 14670
14650: LD_INT 34
14652: DOUBLE
14653: EQUAL
14654: IFTRUE 14658
14656: GO 14669
14658: POP
// bc_type := b_siberite_mine ; end ;
14659: LD_ADDR_OWVAR 42
14663: PUSH
14664: LD_INT 30
14666: ST_TO_ADDR
14667: GO 14670
14669: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14670: LD_ADDR_VAR 0 8
14674: PUSH
14675: LD_VAR 0 5
14679: PPUSH
14680: LD_VAR 0 6
14684: PPUSH
14685: LD_VAR 0 3
14689: PPUSH
14690: CALL_OW 47
14694: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14695: LD_OWVAR 42
14699: PUSH
14700: LD_INT 32
14702: PUSH
14703: LD_INT 33
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: IN
14710: IFFALSE 14726
// PlaceWeaponTurret ( b , weapon ) ;
14712: LD_VAR 0 8
14716: PPUSH
14717: LD_VAR 0 4
14721: PPUSH
14722: CALL_OW 431
// end ;
14726: LD_VAR 0 7
14730: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14731: LD_INT 0
14733: PPUSH
14734: PPUSH
14735: PPUSH
14736: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14737: LD_ADDR_VAR 0 4
14741: PUSH
14742: LD_INT 22
14744: PUSH
14745: LD_OWVAR 2
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 2
14756: PUSH
14757: LD_INT 30
14759: PUSH
14760: LD_INT 0
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 30
14769: PUSH
14770: LD_INT 1
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: ST_TO_ADDR
// if not tmp then
14791: LD_VAR 0 4
14795: NOT
14796: IFFALSE 14800
// exit ;
14798: GO 14859
// for i in tmp do
14800: LD_ADDR_VAR 0 2
14804: PUSH
14805: LD_VAR 0 4
14809: PUSH
14810: FOR_IN
14811: IFFALSE 14857
// for j = 1 to 3 do
14813: LD_ADDR_VAR 0 3
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_INT 3
14825: PUSH
14826: FOR_TO
14827: IFFALSE 14853
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14829: LD_VAR 0 2
14833: PPUSH
14834: CALL_OW 274
14838: PPUSH
14839: LD_VAR 0 3
14843: PPUSH
14844: LD_INT 99999
14846: PPUSH
14847: CALL_OW 277
14851: GO 14826
14853: POP
14854: POP
14855: GO 14810
14857: POP
14858: POP
// end ;
14859: LD_VAR 0 1
14863: RET
// export function hHackSetLevel10 ; var i , j ; begin
14864: LD_INT 0
14866: PPUSH
14867: PPUSH
14868: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14869: LD_ADDR_VAR 0 2
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 1
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: PUSH
14889: FOR_IN
14890: IFFALSE 14942
// if IsSelected ( i ) then
14892: LD_VAR 0 2
14896: PPUSH
14897: CALL_OW 306
14901: IFFALSE 14940
// begin for j := 1 to 4 do
14903: LD_ADDR_VAR 0 3
14907: PUSH
14908: DOUBLE
14909: LD_INT 1
14911: DEC
14912: ST_TO_ADDR
14913: LD_INT 4
14915: PUSH
14916: FOR_TO
14917: IFFALSE 14938
// SetSkill ( i , j , 10 ) ;
14919: LD_VAR 0 2
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: LD_INT 10
14931: PPUSH
14932: CALL_OW 237
14936: GO 14916
14938: POP
14939: POP
// end ;
14940: GO 14889
14942: POP
14943: POP
// end ;
14944: LD_VAR 0 1
14948: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14949: LD_INT 0
14951: PPUSH
14952: PPUSH
14953: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14954: LD_ADDR_VAR 0 2
14958: PUSH
14959: LD_INT 22
14961: PUSH
14962: LD_OWVAR 2
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 21
14973: PUSH
14974: LD_INT 1
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PPUSH
14985: CALL_OW 69
14989: PUSH
14990: FOR_IN
14991: IFFALSE 15032
// begin for j := 1 to 4 do
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: DOUBLE
14999: LD_INT 1
15001: DEC
15002: ST_TO_ADDR
15003: LD_INT 4
15005: PUSH
15006: FOR_TO
15007: IFFALSE 15028
// SetSkill ( i , j , 10 ) ;
15009: LD_VAR 0 2
15013: PPUSH
15014: LD_VAR 0 3
15018: PPUSH
15019: LD_INT 10
15021: PPUSH
15022: CALL_OW 237
15026: GO 15006
15028: POP
15029: POP
// end ;
15030: GO 14990
15032: POP
15033: POP
// end ;
15034: LD_VAR 0 1
15038: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15039: LD_INT 0
15041: PPUSH
// uc_side := your_side ;
15042: LD_ADDR_OWVAR 20
15046: PUSH
15047: LD_OWVAR 2
15051: ST_TO_ADDR
// uc_nation := nation ;
15052: LD_ADDR_OWVAR 21
15056: PUSH
15057: LD_VAR 0 1
15061: ST_TO_ADDR
// InitHc ;
15062: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15066: LD_INT 0
15068: PPUSH
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_VAR 0 3
15078: PPUSH
15079: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15083: LD_VAR 0 4
15087: PPUSH
15088: LD_VAR 0 5
15092: PPUSH
15093: CALL_OW 428
15097: PUSH
15098: LD_INT 0
15100: EQUAL
15101: IFFALSE 15125
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15103: CALL_OW 44
15107: PPUSH
15108: LD_VAR 0 4
15112: PPUSH
15113: LD_VAR 0 5
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: CALL_OW 48
// end ;
15125: LD_VAR 0 6
15129: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15130: LD_INT 0
15132: PPUSH
15133: PPUSH
// uc_side := your_side ;
15134: LD_ADDR_OWVAR 20
15138: PUSH
15139: LD_OWVAR 2
15143: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15144: LD_VAR 0 1
15148: PUSH
15149: LD_INT 1
15151: PUSH
15152: LD_INT 2
15154: PUSH
15155: LD_INT 3
15157: PUSH
15158: LD_INT 4
15160: PUSH
15161: LD_INT 5
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: IN
15171: IFFALSE 15183
// uc_nation := nation_american else
15173: LD_ADDR_OWVAR 21
15177: PUSH
15178: LD_INT 1
15180: ST_TO_ADDR
15181: GO 15226
// if chassis in [ 11 , 12 , 13 , 14 ] then
15183: LD_VAR 0 1
15187: PUSH
15188: LD_INT 11
15190: PUSH
15191: LD_INT 12
15193: PUSH
15194: LD_INT 13
15196: PUSH
15197: LD_INT 14
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: IN
15206: IFFALSE 15218
// uc_nation := nation_arabian else
15208: LD_ADDR_OWVAR 21
15212: PUSH
15213: LD_INT 2
15215: ST_TO_ADDR
15216: GO 15226
// uc_nation := nation_russian ;
15218: LD_ADDR_OWVAR 21
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// vc_chassis := chassis ;
15226: LD_ADDR_OWVAR 37
15230: PUSH
15231: LD_VAR 0 1
15235: ST_TO_ADDR
// vc_engine := engine ;
15236: LD_ADDR_OWVAR 39
15240: PUSH
15241: LD_VAR 0 2
15245: ST_TO_ADDR
// vc_control := control ;
15246: LD_ADDR_OWVAR 38
15250: PUSH
15251: LD_VAR 0 3
15255: ST_TO_ADDR
// vc_weapon := weapon ;
15256: LD_ADDR_OWVAR 40
15260: PUSH
15261: LD_VAR 0 4
15265: ST_TO_ADDR
// un := CreateVehicle ;
15266: LD_ADDR_VAR 0 8
15270: PUSH
15271: CALL_OW 45
15275: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15276: LD_VAR 0 8
15280: PPUSH
15281: LD_INT 0
15283: PPUSH
15284: LD_INT 5
15286: PPUSH
15287: CALL_OW 12
15291: PPUSH
15292: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15296: LD_VAR 0 8
15300: PPUSH
15301: LD_VAR 0 5
15305: PPUSH
15306: LD_VAR 0 6
15310: PPUSH
15311: LD_INT 1
15313: PPUSH
15314: CALL_OW 48
// end ;
15318: LD_VAR 0 7
15322: RET
// export hInvincible ; every 1 do
15323: GO 15325
15325: DISABLE
// hInvincible := [ ] ;
15326: LD_ADDR_EXP 64
15330: PUSH
15331: EMPTY
15332: ST_TO_ADDR
15333: END
// every 10 do var i ;
15334: GO 15336
15336: DISABLE
15337: LD_INT 0
15339: PPUSH
// begin enable ;
15340: ENABLE
// if not hInvincible then
15341: LD_EXP 64
15345: NOT
15346: IFFALSE 15350
// exit ;
15348: GO 15394
// for i in hInvincible do
15350: LD_ADDR_VAR 0 1
15354: PUSH
15355: LD_EXP 64
15359: PUSH
15360: FOR_IN
15361: IFFALSE 15392
// if GetLives ( i ) < 1000 then
15363: LD_VAR 0 1
15367: PPUSH
15368: CALL_OW 256
15372: PUSH
15373: LD_INT 1000
15375: LESS
15376: IFFALSE 15390
// SetLives ( i , 1000 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 1000
15385: PPUSH
15386: CALL_OW 234
15390: GO 15360
15392: POP
15393: POP
// end ;
15394: PPOPN 1
15396: END
// export function hHackInvincible ; var i ; begin
15397: LD_INT 0
15399: PPUSH
15400: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15401: LD_ADDR_VAR 0 2
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 21
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 21
15421: PUSH
15422: LD_INT 2
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 69
15438: PUSH
15439: FOR_IN
15440: IFFALSE 15501
// if IsSelected ( i ) then
15442: LD_VAR 0 2
15446: PPUSH
15447: CALL_OW 306
15451: IFFALSE 15499
// begin if i in hInvincible then
15453: LD_VAR 0 2
15457: PUSH
15458: LD_EXP 64
15462: IN
15463: IFFALSE 15483
// hInvincible := hInvincible diff i else
15465: LD_ADDR_EXP 64
15469: PUSH
15470: LD_EXP 64
15474: PUSH
15475: LD_VAR 0 2
15479: DIFF
15480: ST_TO_ADDR
15481: GO 15499
// hInvincible := hInvincible union i ;
15483: LD_ADDR_EXP 64
15487: PUSH
15488: LD_EXP 64
15492: PUSH
15493: LD_VAR 0 2
15497: UNION
15498: ST_TO_ADDR
// end ;
15499: GO 15439
15501: POP
15502: POP
// end ;
15503: LD_VAR 0 1
15507: RET
// export function hHackInvisible ; var i , j ; begin
15508: LD_INT 0
15510: PPUSH
15511: PPUSH
15512: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15513: LD_ADDR_VAR 0 2
15517: PUSH
15518: LD_INT 21
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 69
15532: PUSH
15533: FOR_IN
15534: IFFALSE 15558
// if IsSelected ( i ) then
15536: LD_VAR 0 2
15540: PPUSH
15541: CALL_OW 306
15545: IFFALSE 15556
// ComForceInvisible ( i ) ;
15547: LD_VAR 0 2
15551: PPUSH
15552: CALL_OW 496
15556: GO 15533
15558: POP
15559: POP
// end ;
15560: LD_VAR 0 1
15564: RET
// export function hHackChangeYourSide ; begin
15565: LD_INT 0
15567: PPUSH
// if your_side = 8 then
15568: LD_OWVAR 2
15572: PUSH
15573: LD_INT 8
15575: EQUAL
15576: IFFALSE 15588
// your_side := 0 else
15578: LD_ADDR_OWVAR 2
15582: PUSH
15583: LD_INT 0
15585: ST_TO_ADDR
15586: GO 15602
// your_side := your_side + 1 ;
15588: LD_ADDR_OWVAR 2
15592: PUSH
15593: LD_OWVAR 2
15597: PUSH
15598: LD_INT 1
15600: PLUS
15601: ST_TO_ADDR
// end ;
15602: LD_VAR 0 1
15606: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15607: LD_INT 0
15609: PPUSH
15610: PPUSH
15611: PPUSH
// for i in all_units do
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_OWVAR 3
15621: PUSH
15622: FOR_IN
15623: IFFALSE 15701
// if IsSelected ( i ) then
15625: LD_VAR 0 2
15629: PPUSH
15630: CALL_OW 306
15634: IFFALSE 15699
// begin j := GetSide ( i ) ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 255
15650: ST_TO_ADDR
// if j = 8 then
15651: LD_VAR 0 3
15655: PUSH
15656: LD_INT 8
15658: EQUAL
15659: IFFALSE 15671
// j := 0 else
15661: LD_ADDR_VAR 0 3
15665: PUSH
15666: LD_INT 0
15668: ST_TO_ADDR
15669: GO 15685
// j := j + 1 ;
15671: LD_ADDR_VAR 0 3
15675: PUSH
15676: LD_VAR 0 3
15680: PUSH
15681: LD_INT 1
15683: PLUS
15684: ST_TO_ADDR
// SetSide ( i , j ) ;
15685: LD_VAR 0 2
15689: PPUSH
15690: LD_VAR 0 3
15694: PPUSH
15695: CALL_OW 235
// end ;
15699: GO 15622
15701: POP
15702: POP
// end ;
15703: LD_VAR 0 1
15707: RET
// export function hHackFog ; begin
15708: LD_INT 0
15710: PPUSH
// FogOff ( true ) ;
15711: LD_INT 1
15713: PPUSH
15714: CALL_OW 344
// end ;
15718: LD_VAR 0 1
15722: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15723: LD_INT 0
15725: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15726: LD_VAR 0 1
15730: PPUSH
15731: LD_VAR 0 2
15735: PPUSH
15736: LD_VAR 0 3
15740: PPUSH
15741: LD_INT 1
15743: PPUSH
15744: LD_INT 1
15746: PPUSH
15747: CALL_OW 483
// CenterOnXY ( x , y ) ;
15751: LD_VAR 0 2
15755: PPUSH
15756: LD_VAR 0 3
15760: PPUSH
15761: CALL_OW 84
// end ; end_of_file
15765: LD_VAR 0 4
15769: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15770: LD_INT 0
15772: PPUSH
15773: PPUSH
15774: PPUSH
15775: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15776: LD_VAR 0 1
15780: PPUSH
15781: CALL_OW 264
15785: PUSH
15786: LD_EXP 81
15790: EQUAL
15791: IFFALSE 15863
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15793: LD_INT 68
15795: PPUSH
15796: LD_VAR 0 1
15800: PPUSH
15801: CALL_OW 255
15805: PPUSH
15806: CALL_OW 321
15810: PUSH
15811: LD_INT 2
15813: EQUAL
15814: IFFALSE 15826
// eff := 70 else
15816: LD_ADDR_VAR 0 4
15820: PUSH
15821: LD_INT 70
15823: ST_TO_ADDR
15824: GO 15834
// eff := 30 ;
15826: LD_ADDR_VAR 0 4
15830: PUSH
15831: LD_INT 30
15833: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL_OW 250
15843: PPUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL_OW 251
15853: PPUSH
15854: LD_VAR 0 4
15858: PPUSH
15859: CALL_OW 495
// end ; end ;
15863: LD_VAR 0 2
15867: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15868: LD_INT 0
15870: PPUSH
// end ;
15871: LD_VAR 0 4
15875: RET
// export function SOS_Command ( cmd ) ; begin
15876: LD_INT 0
15878: PPUSH
// end ;
15879: LD_VAR 0 2
15883: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15884: LD_INT 0
15886: PPUSH
// end ;
15887: LD_VAR 0 6
15891: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15892: LD_INT 0
15894: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15895: LD_VAR 0 1
15899: PUSH
15900: LD_INT 250
15902: EQUAL
15903: PUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL_OW 264
15913: PUSH
15914: LD_EXP 84
15918: EQUAL
15919: AND
15920: IFFALSE 15941
// MinerPlaceMine ( unit , x , y ) ;
15922: LD_VAR 0 2
15926: PPUSH
15927: LD_VAR 0 4
15931: PPUSH
15932: LD_VAR 0 5
15936: PPUSH
15937: CALL 18290 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15941: LD_VAR 0 1
15945: PUSH
15946: LD_INT 251
15948: EQUAL
15949: PUSH
15950: LD_VAR 0 2
15954: PPUSH
15955: CALL_OW 264
15959: PUSH
15960: LD_EXP 84
15964: EQUAL
15965: AND
15966: IFFALSE 15987
// MinerDetonateMine ( unit , x , y ) ;
15968: LD_VAR 0 2
15972: PPUSH
15973: LD_VAR 0 4
15977: PPUSH
15978: LD_VAR 0 5
15982: PPUSH
15983: CALL 18567 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 252
15994: EQUAL
15995: PUSH
15996: LD_VAR 0 2
16000: PPUSH
16001: CALL_OW 264
16005: PUSH
16006: LD_EXP 84
16010: EQUAL
16011: AND
16012: IFFALSE 16033
// MinerCreateMinefield ( unit , x , y ) ;
16014: LD_VAR 0 2
16018: PPUSH
16019: LD_VAR 0 4
16023: PPUSH
16024: LD_VAR 0 5
16028: PPUSH
16029: CALL 18984 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16033: LD_VAR 0 1
16037: PUSH
16038: LD_INT 253
16040: EQUAL
16041: PUSH
16042: LD_VAR 0 2
16046: PPUSH
16047: CALL_OW 257
16051: PUSH
16052: LD_INT 5
16054: EQUAL
16055: AND
16056: IFFALSE 16077
// ComBinocular ( unit , x , y ) ;
16058: LD_VAR 0 2
16062: PPUSH
16063: LD_VAR 0 4
16067: PPUSH
16068: LD_VAR 0 5
16072: PPUSH
16073: CALL 19355 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16077: LD_VAR 0 1
16081: PUSH
16082: LD_INT 254
16084: EQUAL
16085: PUSH
16086: LD_VAR 0 2
16090: PPUSH
16091: CALL_OW 264
16095: PUSH
16096: LD_EXP 79
16100: EQUAL
16101: AND
16102: PUSH
16103: LD_VAR 0 3
16107: PPUSH
16108: CALL_OW 263
16112: PUSH
16113: LD_INT 3
16115: EQUAL
16116: AND
16117: IFFALSE 16133
// HackDestroyVehicle ( unit , selectedUnit ) ;
16119: LD_VAR 0 2
16123: PPUSH
16124: LD_VAR 0 3
16128: PPUSH
16129: CALL 17650 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16133: LD_VAR 0 1
16137: PUSH
16138: LD_INT 255
16140: EQUAL
16141: PUSH
16142: LD_VAR 0 2
16146: PPUSH
16147: CALL_OW 264
16151: PUSH
16152: LD_INT 14
16154: PUSH
16155: LD_INT 53
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: IN
16162: AND
16163: PUSH
16164: LD_VAR 0 4
16168: PPUSH
16169: LD_VAR 0 5
16173: PPUSH
16174: CALL_OW 488
16178: AND
16179: IFFALSE 16203
// CutTreeXYR ( unit , x , y , 12 ) ;
16181: LD_VAR 0 2
16185: PPUSH
16186: LD_VAR 0 4
16190: PPUSH
16191: LD_VAR 0 5
16195: PPUSH
16196: LD_INT 12
16198: PPUSH
16199: CALL 16216 0 4
// end ;
16203: LD_VAR 0 6
16207: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
16208: LD_INT 0
16210: PPUSH
// end ;
16211: LD_VAR 0 4
16215: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16216: LD_INT 0
16218: PPUSH
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
16223: PPUSH
16224: PPUSH
16225: PPUSH
16226: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16227: LD_VAR 0 1
16231: NOT
16232: PUSH
16233: LD_VAR 0 2
16237: PPUSH
16238: LD_VAR 0 3
16242: PPUSH
16243: CALL_OW 488
16247: NOT
16248: OR
16249: PUSH
16250: LD_VAR 0 4
16254: NOT
16255: OR
16256: IFFALSE 16260
// exit ;
16258: GO 16600
// list := [ ] ;
16260: LD_ADDR_VAR 0 13
16264: PUSH
16265: EMPTY
16266: ST_TO_ADDR
// if x - r < 0 then
16267: LD_VAR 0 2
16271: PUSH
16272: LD_VAR 0 4
16276: MINUS
16277: PUSH
16278: LD_INT 0
16280: LESS
16281: IFFALSE 16293
// min_x := 0 else
16283: LD_ADDR_VAR 0 7
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
16291: GO 16309
// min_x := x - r ;
16293: LD_ADDR_VAR 0 7
16297: PUSH
16298: LD_VAR 0 2
16302: PUSH
16303: LD_VAR 0 4
16307: MINUS
16308: ST_TO_ADDR
// if y - r < 0 then
16309: LD_VAR 0 3
16313: PUSH
16314: LD_VAR 0 4
16318: MINUS
16319: PUSH
16320: LD_INT 0
16322: LESS
16323: IFFALSE 16335
// min_y := 0 else
16325: LD_ADDR_VAR 0 8
16329: PUSH
16330: LD_INT 0
16332: ST_TO_ADDR
16333: GO 16351
// min_y := y - r ;
16335: LD_ADDR_VAR 0 8
16339: PUSH
16340: LD_VAR 0 3
16344: PUSH
16345: LD_VAR 0 4
16349: MINUS
16350: ST_TO_ADDR
// max_x := x + r ;
16351: LD_ADDR_VAR 0 9
16355: PUSH
16356: LD_VAR 0 2
16360: PUSH
16361: LD_VAR 0 4
16365: PLUS
16366: ST_TO_ADDR
// max_y := y + r ;
16367: LD_ADDR_VAR 0 10
16371: PUSH
16372: LD_VAR 0 3
16376: PUSH
16377: LD_VAR 0 4
16381: PLUS
16382: ST_TO_ADDR
// for _x = min_x to max_x do
16383: LD_ADDR_VAR 0 11
16387: PUSH
16388: DOUBLE
16389: LD_VAR 0 7
16393: DEC
16394: ST_TO_ADDR
16395: LD_VAR 0 9
16399: PUSH
16400: FOR_TO
16401: IFFALSE 16518
// for _y = min_y to max_y do
16403: LD_ADDR_VAR 0 12
16407: PUSH
16408: DOUBLE
16409: LD_VAR 0 8
16413: DEC
16414: ST_TO_ADDR
16415: LD_VAR 0 10
16419: PUSH
16420: FOR_TO
16421: IFFALSE 16514
// begin if not ValidHex ( _x , _y ) then
16423: LD_VAR 0 11
16427: PPUSH
16428: LD_VAR 0 12
16432: PPUSH
16433: CALL_OW 488
16437: NOT
16438: IFFALSE 16442
// continue ;
16440: GO 16420
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16442: LD_VAR 0 11
16446: PPUSH
16447: LD_VAR 0 12
16451: PPUSH
16452: CALL_OW 351
16456: PUSH
16457: LD_VAR 0 11
16461: PPUSH
16462: LD_VAR 0 12
16466: PPUSH
16467: CALL_OW 554
16471: AND
16472: IFFALSE 16512
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16474: LD_ADDR_VAR 0 13
16478: PUSH
16479: LD_VAR 0 13
16483: PPUSH
16484: LD_VAR 0 13
16488: PUSH
16489: LD_INT 1
16491: PLUS
16492: PPUSH
16493: LD_VAR 0 11
16497: PUSH
16498: LD_VAR 0 12
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PPUSH
16507: CALL_OW 2
16511: ST_TO_ADDR
// end ;
16512: GO 16420
16514: POP
16515: POP
16516: GO 16400
16518: POP
16519: POP
// if not list then
16520: LD_VAR 0 13
16524: NOT
16525: IFFALSE 16529
// exit ;
16527: GO 16600
// for i in list do
16529: LD_ADDR_VAR 0 6
16533: PUSH
16534: LD_VAR 0 13
16538: PUSH
16539: FOR_IN
16540: IFFALSE 16598
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16542: LD_VAR 0 1
16546: PPUSH
16547: LD_STRING M
16549: PUSH
16550: LD_VAR 0 6
16554: PUSH
16555: LD_INT 1
16557: ARRAY
16558: PUSH
16559: LD_VAR 0 6
16563: PUSH
16564: LD_INT 2
16566: ARRAY
16567: PUSH
16568: LD_INT 0
16570: PUSH
16571: LD_INT 0
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: LD_INT 0
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: PUSH
16589: EMPTY
16590: LIST
16591: PPUSH
16592: CALL_OW 447
16596: GO 16539
16598: POP
16599: POP
// end ;
16600: LD_VAR 0 5
16604: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16605: LD_EXP 67
16609: NOT
16610: IFFALSE 16660
16612: GO 16614
16614: DISABLE
// begin initHack := true ;
16615: LD_ADDR_EXP 67
16619: PUSH
16620: LD_INT 1
16622: ST_TO_ADDR
// hackTanks := [ ] ;
16623: LD_ADDR_EXP 68
16627: PUSH
16628: EMPTY
16629: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16630: LD_ADDR_EXP 69
16634: PUSH
16635: EMPTY
16636: ST_TO_ADDR
// hackLimit := 3 ;
16637: LD_ADDR_EXP 70
16641: PUSH
16642: LD_INT 3
16644: ST_TO_ADDR
// hackDist := 12 ;
16645: LD_ADDR_EXP 71
16649: PUSH
16650: LD_INT 12
16652: ST_TO_ADDR
// hackCounter := [ ] ;
16653: LD_ADDR_EXP 72
16657: PUSH
16658: EMPTY
16659: ST_TO_ADDR
// end ;
16660: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16661: LD_EXP 67
16665: PUSH
16666: LD_INT 34
16668: PUSH
16669: LD_EXP 79
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: AND
16683: IFFALSE 16938
16685: GO 16687
16687: DISABLE
16688: LD_INT 0
16690: PPUSH
16691: PPUSH
// begin enable ;
16692: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16693: LD_ADDR_VAR 0 1
16697: PUSH
16698: LD_INT 34
16700: PUSH
16701: LD_EXP 79
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 69
16714: PUSH
16715: FOR_IN
16716: IFFALSE 16936
// begin if not i in hackTanks then
16718: LD_VAR 0 1
16722: PUSH
16723: LD_EXP 68
16727: IN
16728: NOT
16729: IFFALSE 16812
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16731: LD_ADDR_EXP 68
16735: PUSH
16736: LD_EXP 68
16740: PPUSH
16741: LD_EXP 68
16745: PUSH
16746: LD_INT 1
16748: PLUS
16749: PPUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 1
16759: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16760: LD_ADDR_EXP 69
16764: PUSH
16765: LD_EXP 69
16769: PPUSH
16770: LD_EXP 69
16774: PUSH
16775: LD_INT 1
16777: PLUS
16778: PPUSH
16779: EMPTY
16780: PPUSH
16781: CALL_OW 1
16785: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16786: LD_ADDR_EXP 72
16790: PUSH
16791: LD_EXP 72
16795: PPUSH
16796: LD_EXP 72
16800: PUSH
16801: LD_INT 1
16803: PLUS
16804: PPUSH
16805: EMPTY
16806: PPUSH
16807: CALL_OW 1
16811: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 302
16821: NOT
16822: IFFALSE 16835
// begin HackUnlinkAll ( i ) ;
16824: LD_VAR 0 1
16828: PPUSH
16829: CALL 16941 0 1
// continue ;
16833: GO 16715
// end ; HackCheckCapturedStatus ( i ) ;
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL 17384 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16844: LD_ADDR_VAR 0 2
16848: PUSH
16849: LD_INT 81
16851: PUSH
16852: LD_VAR 0 1
16856: PPUSH
16857: CALL_OW 255
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 33
16868: PUSH
16869: LD_INT 3
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 91
16878: PUSH
16879: LD_VAR 0 1
16883: PUSH
16884: LD_EXP 71
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 50
16896: PUSH
16897: EMPTY
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: PPUSH
16906: CALL_OW 69
16910: ST_TO_ADDR
// if not tmp then
16911: LD_VAR 0 2
16915: NOT
16916: IFFALSE 16920
// continue ;
16918: GO 16715
// HackLink ( i , tmp ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_VAR 0 2
16929: PPUSH
16930: CALL 17077 0 2
// end ;
16934: GO 16715
16936: POP
16937: POP
// end ;
16938: PPOPN 2
16940: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16941: LD_INT 0
16943: PPUSH
16944: PPUSH
16945: PPUSH
// if not hack in hackTanks then
16946: LD_VAR 0 1
16950: PUSH
16951: LD_EXP 68
16955: IN
16956: NOT
16957: IFFALSE 16961
// exit ;
16959: GO 17072
// index := GetElementIndex ( hackTanks , hack ) ;
16961: LD_ADDR_VAR 0 4
16965: PUSH
16966: LD_EXP 68
16970: PPUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL 24709 0 2
16980: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16981: LD_EXP 69
16985: PUSH
16986: LD_VAR 0 4
16990: ARRAY
16991: IFFALSE 17072
// begin for i in hackTanksCaptured [ index ] do
16993: LD_ADDR_VAR 0 3
16997: PUSH
16998: LD_EXP 69
17002: PUSH
17003: LD_VAR 0 4
17007: ARRAY
17008: PUSH
17009: FOR_IN
17010: IFFALSE 17036
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17012: LD_VAR 0 3
17016: PUSH
17017: LD_INT 1
17019: ARRAY
17020: PPUSH
17021: LD_VAR 0 3
17025: PUSH
17026: LD_INT 2
17028: ARRAY
17029: PPUSH
17030: CALL_OW 235
17034: GO 17009
17036: POP
17037: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17038: LD_ADDR_EXP 69
17042: PUSH
17043: LD_EXP 69
17047: PPUSH
17048: LD_VAR 0 4
17052: PPUSH
17053: EMPTY
17054: PPUSH
17055: CALL_OW 1
17059: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17060: LD_VAR 0 1
17064: PPUSH
17065: LD_INT 0
17067: PPUSH
17068: CALL_OW 505
// end ; end ;
17072: LD_VAR 0 2
17076: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17077: LD_INT 0
17079: PPUSH
17080: PPUSH
17081: PPUSH
// if not hack in hackTanks or not vehicles then
17082: LD_VAR 0 1
17086: PUSH
17087: LD_EXP 68
17091: IN
17092: NOT
17093: PUSH
17094: LD_VAR 0 2
17098: NOT
17099: OR
17100: IFFALSE 17104
// exit ;
17102: GO 17379
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17104: LD_ADDR_VAR 0 2
17108: PUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: LD_VAR 0 2
17118: PPUSH
17119: LD_INT 1
17121: PPUSH
17122: LD_INT 1
17124: PPUSH
17125: CALL 25359 0 4
17129: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17130: LD_ADDR_VAR 0 5
17134: PUSH
17135: LD_EXP 68
17139: PPUSH
17140: LD_VAR 0 1
17144: PPUSH
17145: CALL 24709 0 2
17149: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17150: LD_EXP 69
17154: PUSH
17155: LD_VAR 0 5
17159: ARRAY
17160: PUSH
17161: LD_EXP 70
17165: LESS
17166: IFFALSE 17355
// begin for i := 1 to vehicles do
17168: LD_ADDR_VAR 0 4
17172: PUSH
17173: DOUBLE
17174: LD_INT 1
17176: DEC
17177: ST_TO_ADDR
17178: LD_VAR 0 2
17182: PUSH
17183: FOR_TO
17184: IFFALSE 17353
// begin if hackTanksCaptured [ index ] = hackLimit then
17186: LD_EXP 69
17190: PUSH
17191: LD_VAR 0 5
17195: ARRAY
17196: PUSH
17197: LD_EXP 70
17201: EQUAL
17202: IFFALSE 17206
// break ;
17204: GO 17353
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17206: LD_ADDR_EXP 72
17210: PUSH
17211: LD_EXP 72
17215: PPUSH
17216: LD_VAR 0 5
17220: PPUSH
17221: LD_EXP 72
17225: PUSH
17226: LD_VAR 0 5
17230: ARRAY
17231: PUSH
17232: LD_INT 1
17234: PLUS
17235: PPUSH
17236: CALL_OW 1
17240: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17241: LD_ADDR_EXP 69
17245: PUSH
17246: LD_EXP 69
17250: PPUSH
17251: LD_VAR 0 5
17255: PUSH
17256: LD_EXP 69
17260: PUSH
17261: LD_VAR 0 5
17265: ARRAY
17266: PUSH
17267: LD_INT 1
17269: PLUS
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: LD_VAR 0 2
17279: PUSH
17280: LD_VAR 0 4
17284: ARRAY
17285: PUSH
17286: LD_VAR 0 2
17290: PUSH
17291: LD_VAR 0 4
17295: ARRAY
17296: PPUSH
17297: CALL_OW 255
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PPUSH
17306: CALL 24924 0 3
17310: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17311: LD_VAR 0 2
17315: PUSH
17316: LD_VAR 0 4
17320: ARRAY
17321: PPUSH
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL_OW 255
17331: PPUSH
17332: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17336: LD_VAR 0 2
17340: PUSH
17341: LD_VAR 0 4
17345: ARRAY
17346: PPUSH
17347: CALL_OW 141
// end ;
17351: GO 17183
17353: POP
17354: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_EXP 69
17364: PUSH
17365: LD_VAR 0 5
17369: ARRAY
17370: PUSH
17371: LD_INT 0
17373: PLUS
17374: PPUSH
17375: CALL_OW 505
// end ;
17379: LD_VAR 0 3
17383: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17384: LD_INT 0
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
// if not hack in hackTanks then
17390: LD_VAR 0 1
17394: PUSH
17395: LD_EXP 68
17399: IN
17400: NOT
17401: IFFALSE 17405
// exit ;
17403: GO 17645
// index := GetElementIndex ( hackTanks , hack ) ;
17405: LD_ADDR_VAR 0 4
17409: PUSH
17410: LD_EXP 68
17414: PPUSH
17415: LD_VAR 0 1
17419: PPUSH
17420: CALL 24709 0 2
17424: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17425: LD_ADDR_VAR 0 3
17429: PUSH
17430: DOUBLE
17431: LD_EXP 69
17435: PUSH
17436: LD_VAR 0 4
17440: ARRAY
17441: INC
17442: ST_TO_ADDR
17443: LD_INT 1
17445: PUSH
17446: FOR_DOWNTO
17447: IFFALSE 17619
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17449: LD_ADDR_VAR 0 5
17453: PUSH
17454: LD_EXP 69
17458: PUSH
17459: LD_VAR 0 4
17463: ARRAY
17464: PUSH
17465: LD_VAR 0 3
17469: ARRAY
17470: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17471: LD_VAR 0 5
17475: PUSH
17476: LD_INT 1
17478: ARRAY
17479: PPUSH
17480: CALL_OW 302
17484: NOT
17485: PUSH
17486: LD_VAR 0 5
17490: PUSH
17491: LD_INT 1
17493: ARRAY
17494: PPUSH
17495: CALL_OW 255
17499: PUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 255
17509: NONEQUAL
17510: OR
17511: IFFALSE 17617
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17513: LD_VAR 0 5
17517: PUSH
17518: LD_INT 1
17520: ARRAY
17521: PPUSH
17522: CALL_OW 305
17526: PUSH
17527: LD_VAR 0 5
17531: PUSH
17532: LD_INT 1
17534: ARRAY
17535: PPUSH
17536: CALL_OW 255
17540: PUSH
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 255
17550: EQUAL
17551: AND
17552: IFFALSE 17576
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17554: LD_VAR 0 5
17558: PUSH
17559: LD_INT 1
17561: ARRAY
17562: PPUSH
17563: LD_VAR 0 5
17567: PUSH
17568: LD_INT 2
17570: ARRAY
17571: PPUSH
17572: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17576: LD_ADDR_EXP 69
17580: PUSH
17581: LD_EXP 69
17585: PPUSH
17586: LD_VAR 0 4
17590: PPUSH
17591: LD_EXP 69
17595: PUSH
17596: LD_VAR 0 4
17600: ARRAY
17601: PPUSH
17602: LD_VAR 0 3
17606: PPUSH
17607: CALL_OW 3
17611: PPUSH
17612: CALL_OW 1
17616: ST_TO_ADDR
// end ; end ;
17617: GO 17446
17619: POP
17620: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17621: LD_VAR 0 1
17625: PPUSH
17626: LD_EXP 69
17630: PUSH
17631: LD_VAR 0 4
17635: ARRAY
17636: PUSH
17637: LD_INT 0
17639: PLUS
17640: PPUSH
17641: CALL_OW 505
// end ;
17645: LD_VAR 0 2
17649: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17650: LD_INT 0
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
// if not hack in hackTanks then
17656: LD_VAR 0 1
17660: PUSH
17661: LD_EXP 68
17665: IN
17666: NOT
17667: IFFALSE 17671
// exit ;
17669: GO 17756
// index := GetElementIndex ( hackTanks , hack ) ;
17671: LD_ADDR_VAR 0 5
17675: PUSH
17676: LD_EXP 68
17680: PPUSH
17681: LD_VAR 0 1
17685: PPUSH
17686: CALL 24709 0 2
17690: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17691: LD_ADDR_VAR 0 4
17695: PUSH
17696: DOUBLE
17697: LD_INT 1
17699: DEC
17700: ST_TO_ADDR
17701: LD_EXP 69
17705: PUSH
17706: LD_VAR 0 5
17710: ARRAY
17711: PUSH
17712: FOR_TO
17713: IFFALSE 17754
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17715: LD_EXP 69
17719: PUSH
17720: LD_VAR 0 5
17724: ARRAY
17725: PUSH
17726: LD_VAR 0 4
17730: ARRAY
17731: PUSH
17732: LD_INT 1
17734: ARRAY
17735: PUSH
17736: LD_VAR 0 2
17740: EQUAL
17741: IFFALSE 17752
// KillUnit ( vehicle ) ;
17743: LD_VAR 0 2
17747: PPUSH
17748: CALL_OW 66
17752: GO 17712
17754: POP
17755: POP
// end ;
17756: LD_VAR 0 3
17760: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17761: LD_EXP 73
17765: NOT
17766: IFFALSE 17801
17768: GO 17770
17770: DISABLE
// begin initMiner := true ;
17771: LD_ADDR_EXP 73
17775: PUSH
17776: LD_INT 1
17778: ST_TO_ADDR
// minersList := [ ] ;
17779: LD_ADDR_EXP 74
17783: PUSH
17784: EMPTY
17785: ST_TO_ADDR
// minerMinesList := [ ] ;
17786: LD_ADDR_EXP 75
17790: PUSH
17791: EMPTY
17792: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17793: LD_ADDR_EXP 76
17797: PUSH
17798: LD_INT 5
17800: ST_TO_ADDR
// end ;
17801: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17802: LD_EXP 73
17806: PUSH
17807: LD_INT 34
17809: PUSH
17810: LD_EXP 84
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: AND
17824: IFFALSE 18287
17826: GO 17828
17828: DISABLE
17829: LD_INT 0
17831: PPUSH
17832: PPUSH
17833: PPUSH
17834: PPUSH
// begin enable ;
17835: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17836: LD_ADDR_VAR 0 1
17840: PUSH
17841: LD_INT 34
17843: PUSH
17844: LD_EXP 84
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PPUSH
17853: CALL_OW 69
17857: PUSH
17858: FOR_IN
17859: IFFALSE 17931
// begin if not i in minersList then
17861: LD_VAR 0 1
17865: PUSH
17866: LD_EXP 74
17870: IN
17871: NOT
17872: IFFALSE 17929
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17874: LD_ADDR_EXP 74
17878: PUSH
17879: LD_EXP 74
17883: PPUSH
17884: LD_EXP 74
17888: PUSH
17889: LD_INT 1
17891: PLUS
17892: PPUSH
17893: LD_VAR 0 1
17897: PPUSH
17898: CALL_OW 1
17902: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17903: LD_ADDR_EXP 75
17907: PUSH
17908: LD_EXP 75
17912: PPUSH
17913: LD_EXP 75
17917: PUSH
17918: LD_INT 1
17920: PLUS
17921: PPUSH
17922: EMPTY
17923: PPUSH
17924: CALL_OW 1
17928: ST_TO_ADDR
// end end ;
17929: GO 17858
17931: POP
17932: POP
// for i := minerMinesList downto 1 do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: DOUBLE
17939: LD_EXP 75
17943: INC
17944: ST_TO_ADDR
17945: LD_INT 1
17947: PUSH
17948: FOR_DOWNTO
17949: IFFALSE 18285
// begin if IsLive ( minersList [ i ] ) then
17951: LD_EXP 74
17955: PUSH
17956: LD_VAR 0 1
17960: ARRAY
17961: PPUSH
17962: CALL_OW 300
17966: IFFALSE 17994
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17968: LD_EXP 74
17972: PUSH
17973: LD_VAR 0 1
17977: ARRAY
17978: PPUSH
17979: LD_EXP 75
17983: PUSH
17984: LD_VAR 0 1
17988: ARRAY
17989: PPUSH
17990: CALL_OW 505
// if not minerMinesList [ i ] then
17994: LD_EXP 75
17998: PUSH
17999: LD_VAR 0 1
18003: ARRAY
18004: NOT
18005: IFFALSE 18009
// continue ;
18007: GO 17948
// for j := minerMinesList [ i ] downto 1 do
18009: LD_ADDR_VAR 0 2
18013: PUSH
18014: DOUBLE
18015: LD_EXP 75
18019: PUSH
18020: LD_VAR 0 1
18024: ARRAY
18025: INC
18026: ST_TO_ADDR
18027: LD_INT 1
18029: PUSH
18030: FOR_DOWNTO
18031: IFFALSE 18281
// begin side := GetSide ( minersList [ i ] ) ;
18033: LD_ADDR_VAR 0 3
18037: PUSH
18038: LD_EXP 74
18042: PUSH
18043: LD_VAR 0 1
18047: ARRAY
18048: PPUSH
18049: CALL_OW 255
18053: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18054: LD_ADDR_VAR 0 4
18058: PUSH
18059: LD_EXP 75
18063: PUSH
18064: LD_VAR 0 1
18068: ARRAY
18069: PUSH
18070: LD_VAR 0 2
18074: ARRAY
18075: PUSH
18076: LD_INT 1
18078: ARRAY
18079: PPUSH
18080: LD_EXP 75
18084: PUSH
18085: LD_VAR 0 1
18089: ARRAY
18090: PUSH
18091: LD_VAR 0 2
18095: ARRAY
18096: PUSH
18097: LD_INT 2
18099: ARRAY
18100: PPUSH
18101: CALL_OW 428
18105: ST_TO_ADDR
// if not tmp then
18106: LD_VAR 0 4
18110: NOT
18111: IFFALSE 18115
// continue ;
18113: GO 18030
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18115: LD_VAR 0 4
18119: PUSH
18120: LD_INT 81
18122: PUSH
18123: LD_VAR 0 3
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PPUSH
18132: CALL_OW 69
18136: IN
18137: PUSH
18138: LD_EXP 75
18142: PUSH
18143: LD_VAR 0 1
18147: ARRAY
18148: PUSH
18149: LD_VAR 0 2
18153: ARRAY
18154: PUSH
18155: LD_INT 1
18157: ARRAY
18158: PPUSH
18159: LD_EXP 75
18163: PUSH
18164: LD_VAR 0 1
18168: ARRAY
18169: PUSH
18170: LD_VAR 0 2
18174: ARRAY
18175: PUSH
18176: LD_INT 2
18178: ARRAY
18179: PPUSH
18180: CALL_OW 458
18184: AND
18185: IFFALSE 18279
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18187: LD_EXP 75
18191: PUSH
18192: LD_VAR 0 1
18196: ARRAY
18197: PUSH
18198: LD_VAR 0 2
18202: ARRAY
18203: PUSH
18204: LD_INT 1
18206: ARRAY
18207: PPUSH
18208: LD_EXP 75
18212: PUSH
18213: LD_VAR 0 1
18217: ARRAY
18218: PUSH
18219: LD_VAR 0 2
18223: ARRAY
18224: PUSH
18225: LD_INT 2
18227: ARRAY
18228: PPUSH
18229: LD_VAR 0 3
18233: PPUSH
18234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18238: LD_ADDR_EXP 75
18242: PUSH
18243: LD_EXP 75
18247: PPUSH
18248: LD_VAR 0 1
18252: PPUSH
18253: LD_EXP 75
18257: PUSH
18258: LD_VAR 0 1
18262: ARRAY
18263: PPUSH
18264: LD_VAR 0 2
18268: PPUSH
18269: CALL_OW 3
18273: PPUSH
18274: CALL_OW 1
18278: ST_TO_ADDR
// end ; end ;
18279: GO 18030
18281: POP
18282: POP
// end ;
18283: GO 17948
18285: POP
18286: POP
// end ;
18287: PPOPN 4
18289: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18290: LD_INT 0
18292: PPUSH
18293: PPUSH
// result := false ;
18294: LD_ADDR_VAR 0 4
18298: PUSH
18299: LD_INT 0
18301: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18302: LD_VAR 0 1
18306: PPUSH
18307: CALL_OW 264
18311: PUSH
18312: LD_EXP 84
18316: EQUAL
18317: NOT
18318: IFFALSE 18322
// exit ;
18320: GO 18562
// index := GetElementIndex ( minersList , unit ) ;
18322: LD_ADDR_VAR 0 5
18326: PUSH
18327: LD_EXP 74
18331: PPUSH
18332: LD_VAR 0 1
18336: PPUSH
18337: CALL 24709 0 2
18341: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18342: LD_EXP 75
18346: PUSH
18347: LD_VAR 0 5
18351: ARRAY
18352: PUSH
18353: LD_EXP 76
18357: GREATEREQUAL
18358: IFFALSE 18362
// exit ;
18360: GO 18562
// ComMoveXY ( unit , x , y ) ;
18362: LD_VAR 0 1
18366: PPUSH
18367: LD_VAR 0 2
18371: PPUSH
18372: LD_VAR 0 3
18376: PPUSH
18377: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18381: LD_INT 35
18383: PPUSH
18384: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18388: LD_VAR 0 1
18392: PPUSH
18393: LD_VAR 0 2
18397: PPUSH
18398: LD_VAR 0 3
18402: PPUSH
18403: CALL 55481 0 3
18407: NOT
18408: PUSH
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 314
18418: AND
18419: IFFALSE 18423
// exit ;
18421: GO 18562
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18423: LD_VAR 0 2
18427: PPUSH
18428: LD_VAR 0 3
18432: PPUSH
18433: CALL_OW 428
18437: PUSH
18438: LD_VAR 0 1
18442: EQUAL
18443: PUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL_OW 314
18453: NOT
18454: AND
18455: IFFALSE 18381
// PlaySoundXY ( x , y , PlantMine ) ;
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_STRING PlantMine
18469: PPUSH
18470: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18474: LD_VAR 0 2
18478: PPUSH
18479: LD_VAR 0 3
18483: PPUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 255
18493: PPUSH
18494: LD_INT 0
18496: PPUSH
18497: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18501: LD_ADDR_EXP 75
18505: PUSH
18506: LD_EXP 75
18510: PPUSH
18511: LD_VAR 0 5
18515: PUSH
18516: LD_EXP 75
18520: PUSH
18521: LD_VAR 0 5
18525: ARRAY
18526: PUSH
18527: LD_INT 1
18529: PLUS
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PPUSH
18535: LD_VAR 0 2
18539: PUSH
18540: LD_VAR 0 3
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL 24924 0 3
18553: ST_TO_ADDR
// result := true ;
18554: LD_ADDR_VAR 0 4
18558: PUSH
18559: LD_INT 1
18561: ST_TO_ADDR
// end ;
18562: LD_VAR 0 4
18566: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18567: LD_INT 0
18569: PPUSH
18570: PPUSH
18571: PPUSH
// if not unit in minersList then
18572: LD_VAR 0 1
18576: PUSH
18577: LD_EXP 74
18581: IN
18582: NOT
18583: IFFALSE 18587
// exit ;
18585: GO 18979
// index := GetElementIndex ( minersList , unit ) ;
18587: LD_ADDR_VAR 0 6
18591: PUSH
18592: LD_EXP 74
18596: PPUSH
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL 24709 0 2
18606: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18607: LD_ADDR_VAR 0 5
18611: PUSH
18612: DOUBLE
18613: LD_EXP 75
18617: PUSH
18618: LD_VAR 0 6
18622: ARRAY
18623: INC
18624: ST_TO_ADDR
18625: LD_INT 1
18627: PUSH
18628: FOR_DOWNTO
18629: IFFALSE 18790
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18631: LD_EXP 75
18635: PUSH
18636: LD_VAR 0 6
18640: ARRAY
18641: PUSH
18642: LD_VAR 0 5
18646: ARRAY
18647: PUSH
18648: LD_INT 1
18650: ARRAY
18651: PUSH
18652: LD_VAR 0 2
18656: EQUAL
18657: PUSH
18658: LD_EXP 75
18662: PUSH
18663: LD_VAR 0 6
18667: ARRAY
18668: PUSH
18669: LD_VAR 0 5
18673: ARRAY
18674: PUSH
18675: LD_INT 2
18677: ARRAY
18678: PUSH
18679: LD_VAR 0 3
18683: EQUAL
18684: AND
18685: IFFALSE 18788
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18687: LD_EXP 75
18691: PUSH
18692: LD_VAR 0 6
18696: ARRAY
18697: PUSH
18698: LD_VAR 0 5
18702: ARRAY
18703: PUSH
18704: LD_INT 1
18706: ARRAY
18707: PPUSH
18708: LD_EXP 75
18712: PUSH
18713: LD_VAR 0 6
18717: ARRAY
18718: PUSH
18719: LD_VAR 0 5
18723: ARRAY
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 255
18738: PPUSH
18739: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18743: LD_ADDR_EXP 75
18747: PUSH
18748: LD_EXP 75
18752: PPUSH
18753: LD_VAR 0 6
18757: PPUSH
18758: LD_EXP 75
18762: PUSH
18763: LD_VAR 0 6
18767: ARRAY
18768: PPUSH
18769: LD_VAR 0 5
18773: PPUSH
18774: CALL_OW 3
18778: PPUSH
18779: CALL_OW 1
18783: ST_TO_ADDR
// exit ;
18784: POP
18785: POP
18786: GO 18979
// end ; end ;
18788: GO 18628
18790: POP
18791: POP
// for i := minerMinesList [ index ] downto 1 do
18792: LD_ADDR_VAR 0 5
18796: PUSH
18797: DOUBLE
18798: LD_EXP 75
18802: PUSH
18803: LD_VAR 0 6
18807: ARRAY
18808: INC
18809: ST_TO_ADDR
18810: LD_INT 1
18812: PUSH
18813: FOR_DOWNTO
18814: IFFALSE 18977
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18816: LD_EXP 75
18820: PUSH
18821: LD_VAR 0 6
18825: ARRAY
18826: PUSH
18827: LD_VAR 0 5
18831: ARRAY
18832: PUSH
18833: LD_INT 1
18835: ARRAY
18836: PPUSH
18837: LD_EXP 75
18841: PUSH
18842: LD_VAR 0 6
18846: ARRAY
18847: PUSH
18848: LD_VAR 0 5
18852: ARRAY
18853: PUSH
18854: LD_INT 2
18856: ARRAY
18857: PPUSH
18858: LD_VAR 0 2
18862: PPUSH
18863: LD_VAR 0 3
18867: PPUSH
18868: CALL_OW 298
18872: PUSH
18873: LD_INT 6
18875: LESS
18876: IFFALSE 18975
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18878: LD_EXP 75
18882: PUSH
18883: LD_VAR 0 6
18887: ARRAY
18888: PUSH
18889: LD_VAR 0 5
18893: ARRAY
18894: PUSH
18895: LD_INT 1
18897: ARRAY
18898: PPUSH
18899: LD_EXP 75
18903: PUSH
18904: LD_VAR 0 6
18908: ARRAY
18909: PUSH
18910: LD_VAR 0 5
18914: ARRAY
18915: PUSH
18916: LD_INT 2
18918: ARRAY
18919: PPUSH
18920: LD_VAR 0 1
18924: PPUSH
18925: CALL_OW 255
18929: PPUSH
18930: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18934: LD_ADDR_EXP 75
18938: PUSH
18939: LD_EXP 75
18943: PPUSH
18944: LD_VAR 0 6
18948: PPUSH
18949: LD_EXP 75
18953: PUSH
18954: LD_VAR 0 6
18958: ARRAY
18959: PPUSH
18960: LD_VAR 0 5
18964: PPUSH
18965: CALL_OW 3
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// end ; end ;
18975: GO 18813
18977: POP
18978: POP
// end ;
18979: LD_VAR 0 4
18983: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18984: LD_INT 0
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
18993: PPUSH
18994: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18995: LD_VAR 0 1
18999: PPUSH
19000: CALL_OW 264
19004: PUSH
19005: LD_EXP 84
19009: EQUAL
19010: NOT
19011: PUSH
19012: LD_VAR 0 1
19016: PUSH
19017: LD_EXP 74
19021: IN
19022: NOT
19023: OR
19024: IFFALSE 19028
// exit ;
19026: GO 19350
// index := GetElementIndex ( minersList , unit ) ;
19028: LD_ADDR_VAR 0 6
19032: PUSH
19033: LD_EXP 74
19037: PPUSH
19038: LD_VAR 0 1
19042: PPUSH
19043: CALL 24709 0 2
19047: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19048: LD_ADDR_VAR 0 8
19052: PUSH
19053: LD_EXP 76
19057: PUSH
19058: LD_EXP 75
19062: PUSH
19063: LD_VAR 0 6
19067: ARRAY
19068: MINUS
19069: ST_TO_ADDR
// if not minesFreeAmount then
19070: LD_VAR 0 8
19074: NOT
19075: IFFALSE 19079
// exit ;
19077: GO 19350
// tmp := [ ] ;
19079: LD_ADDR_VAR 0 7
19083: PUSH
19084: EMPTY
19085: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19086: LD_ADDR_VAR 0 5
19090: PUSH
19091: DOUBLE
19092: LD_INT 1
19094: DEC
19095: ST_TO_ADDR
19096: LD_VAR 0 8
19100: PUSH
19101: FOR_TO
19102: IFFALSE 19297
// begin _d := rand ( 0 , 5 ) ;
19104: LD_ADDR_VAR 0 11
19108: PUSH
19109: LD_INT 0
19111: PPUSH
19112: LD_INT 5
19114: PPUSH
19115: CALL_OW 12
19119: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19120: LD_ADDR_VAR 0 12
19124: PUSH
19125: LD_INT 2
19127: PPUSH
19128: LD_INT 6
19130: PPUSH
19131: CALL_OW 12
19135: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19136: LD_ADDR_VAR 0 9
19140: PUSH
19141: LD_VAR 0 2
19145: PPUSH
19146: LD_VAR 0 11
19150: PPUSH
19151: LD_VAR 0 12
19155: PPUSH
19156: CALL_OW 272
19160: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19161: LD_ADDR_VAR 0 10
19165: PUSH
19166: LD_VAR 0 3
19170: PPUSH
19171: LD_VAR 0 11
19175: PPUSH
19176: LD_VAR 0 12
19180: PPUSH
19181: CALL_OW 273
19185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19186: LD_VAR 0 9
19190: PPUSH
19191: LD_VAR 0 10
19195: PPUSH
19196: CALL_OW 488
19200: PUSH
19201: LD_VAR 0 9
19205: PUSH
19206: LD_VAR 0 10
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_VAR 0 7
19219: IN
19220: NOT
19221: AND
19222: PUSH
19223: LD_VAR 0 9
19227: PPUSH
19228: LD_VAR 0 10
19232: PPUSH
19233: CALL_OW 458
19237: NOT
19238: AND
19239: IFFALSE 19281
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19241: LD_ADDR_VAR 0 7
19245: PUSH
19246: LD_VAR 0 7
19250: PPUSH
19251: LD_VAR 0 7
19255: PUSH
19256: LD_INT 1
19258: PLUS
19259: PPUSH
19260: LD_VAR 0 9
19264: PUSH
19265: LD_VAR 0 10
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PPUSH
19274: CALL_OW 1
19278: ST_TO_ADDR
19279: GO 19295
// i := i - 1 ;
19281: LD_ADDR_VAR 0 5
19285: PUSH
19286: LD_VAR 0 5
19290: PUSH
19291: LD_INT 1
19293: MINUS
19294: ST_TO_ADDR
// end ;
19295: GO 19101
19297: POP
19298: POP
// for i in tmp do
19299: LD_ADDR_VAR 0 5
19303: PUSH
19304: LD_VAR 0 7
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19348
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_VAR 0 5
19321: PUSH
19322: LD_INT 1
19324: ARRAY
19325: PPUSH
19326: LD_VAR 0 5
19330: PUSH
19331: LD_INT 2
19333: ARRAY
19334: PPUSH
19335: CALL 18290 0 3
19339: NOT
19340: IFFALSE 19346
// exit ;
19342: POP
19343: POP
19344: GO 19350
19346: GO 19309
19348: POP
19349: POP
// end ;
19350: LD_VAR 0 4
19354: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
19359: PPUSH
19360: PPUSH
19361: PPUSH
19362: PPUSH
19363: PPUSH
// if not GetClass ( unit ) = class_sniper then
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 257
19373: PUSH
19374: LD_INT 5
19376: EQUAL
19377: NOT
19378: IFFALSE 19382
// exit ;
19380: GO 19770
// dist := 8 ;
19382: LD_ADDR_VAR 0 5
19386: PUSH
19387: LD_INT 8
19389: ST_TO_ADDR
// viewRange := 12 ;
19390: LD_ADDR_VAR 0 7
19394: PUSH
19395: LD_INT 12
19397: ST_TO_ADDR
// side := GetSide ( unit ) ;
19398: LD_ADDR_VAR 0 6
19402: PUSH
19403: LD_VAR 0 1
19407: PPUSH
19408: CALL_OW 255
19412: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19413: LD_INT 61
19415: PPUSH
19416: LD_VAR 0 6
19420: PPUSH
19421: CALL_OW 321
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: IFFALSE 19439
// viewRange := 16 ;
19431: LD_ADDR_VAR 0 7
19435: PUSH
19436: LD_INT 16
19438: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_VAR 0 3
19453: PPUSH
19454: CALL_OW 297
19458: PUSH
19459: LD_VAR 0 5
19463: GREATER
19464: IFFALSE 19543
// begin ComMoveXY ( unit , x , y ) ;
19466: LD_VAR 0 1
19470: PPUSH
19471: LD_VAR 0 2
19475: PPUSH
19476: LD_VAR 0 3
19480: PPUSH
19481: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19485: LD_INT 35
19487: PPUSH
19488: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19492: LD_VAR 0 1
19496: PPUSH
19497: LD_VAR 0 2
19501: PPUSH
19502: LD_VAR 0 3
19506: PPUSH
19507: CALL 55481 0 3
19511: NOT
19512: IFFALSE 19516
// exit ;
19514: GO 19770
// until GetDistUnitXY ( unit , x , y ) < dist ;
19516: LD_VAR 0 1
19520: PPUSH
19521: LD_VAR 0 2
19525: PPUSH
19526: LD_VAR 0 3
19530: PPUSH
19531: CALL_OW 297
19535: PUSH
19536: LD_VAR 0 5
19540: LESS
19541: IFFALSE 19485
// end ; ComTurnXY ( unit , x , y ) ;
19543: LD_VAR 0 1
19547: PPUSH
19548: LD_VAR 0 2
19552: PPUSH
19553: LD_VAR 0 3
19557: PPUSH
19558: CALL_OW 118
// wait ( 5 ) ;
19562: LD_INT 5
19564: PPUSH
19565: CALL_OW 67
// _d := GetDir ( unit ) ;
19569: LD_ADDR_VAR 0 10
19573: PUSH
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL_OW 254
19583: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19584: LD_ADDR_VAR 0 8
19588: PUSH
19589: LD_VAR 0 1
19593: PPUSH
19594: CALL_OW 250
19598: PPUSH
19599: LD_VAR 0 10
19603: PPUSH
19604: LD_VAR 0 5
19608: PPUSH
19609: CALL_OW 272
19613: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19614: LD_ADDR_VAR 0 9
19618: PUSH
19619: LD_VAR 0 1
19623: PPUSH
19624: CALL_OW 251
19628: PPUSH
19629: LD_VAR 0 10
19633: PPUSH
19634: LD_VAR 0 5
19638: PPUSH
19639: CALL_OW 273
19643: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19644: LD_VAR 0 8
19648: PPUSH
19649: LD_VAR 0 9
19653: PPUSH
19654: CALL_OW 488
19658: NOT
19659: IFFALSE 19663
// exit ;
19661: GO 19770
// ComAnimCustom ( unit , 1 ) ;
19663: LD_VAR 0 1
19667: PPUSH
19668: LD_INT 1
19670: PPUSH
19671: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19675: LD_VAR 0 8
19679: PPUSH
19680: LD_VAR 0 9
19684: PPUSH
19685: LD_VAR 0 6
19689: PPUSH
19690: LD_VAR 0 7
19694: PPUSH
19695: CALL_OW 330
// repeat wait ( 1 ) ;
19699: LD_INT 1
19701: PPUSH
19702: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19706: LD_VAR 0 1
19710: PPUSH
19711: CALL_OW 316
19715: PUSH
19716: LD_VAR 0 1
19720: PPUSH
19721: CALL_OW 314
19725: OR
19726: PUSH
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL_OW 302
19736: NOT
19737: OR
19738: PUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 301
19748: OR
19749: IFFALSE 19699
// RemoveSeeing ( _x , _y , side ) ;
19751: LD_VAR 0 8
19755: PPUSH
19756: LD_VAR 0 9
19760: PPUSH
19761: LD_VAR 0 6
19765: PPUSH
19766: CALL_OW 331
// end ; end_of_file
19770: LD_VAR 0 4
19774: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19775: LD_VAR 0 1
19779: PUSH
19780: LD_INT 200
19782: DOUBLE
19783: GREATEREQUAL
19784: IFFALSE 19792
19786: LD_INT 299
19788: DOUBLE
19789: LESSEQUAL
19790: IFTRUE 19794
19792: GO 19826
19794: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19795: LD_VAR 0 1
19799: PPUSH
19800: LD_VAR 0 2
19804: PPUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: LD_VAR 0 4
19814: PPUSH
19815: LD_VAR 0 5
19819: PPUSH
19820: CALL 15892 0 5
19824: GO 19903
19826: LD_INT 300
19828: DOUBLE
19829: GREATEREQUAL
19830: IFFALSE 19838
19832: LD_INT 399
19834: DOUBLE
19835: LESSEQUAL
19836: IFTRUE 19840
19838: GO 19902
19840: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_VAR 0 2
19850: PPUSH
19851: LD_VAR 0 3
19855: PPUSH
19856: LD_VAR 0 4
19860: PPUSH
19861: LD_VAR 0 5
19865: PPUSH
19866: LD_VAR 0 6
19870: PPUSH
19871: LD_VAR 0 7
19875: PPUSH
19876: LD_VAR 0 8
19880: PPUSH
19881: LD_VAR 0 9
19885: PPUSH
19886: LD_VAR 0 10
19890: PPUSH
19891: LD_VAR 0 11
19895: PPUSH
19896: CALL 13790 0 11
19900: GO 19903
19902: POP
// end ;
19903: PPOPN 11
19905: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
19906: LD_VAR 0 1
19910: PPUSH
19911: LD_VAR 0 2
19915: PPUSH
19916: LD_VAR 0 3
19920: PPUSH
19921: LD_VAR 0 4
19925: PPUSH
19926: LD_VAR 0 5
19930: PPUSH
19931: CALL 15884 0 5
// end ; end_of_file
19935: PPOPN 5
19937: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19938: LD_INT 0
19940: PPUSH
19941: PPUSH
// if exist_mode then
19942: LD_VAR 0 2
19946: IFFALSE 19971
// unit := CreateCharacter ( prefix & ident ) else
19948: LD_ADDR_VAR 0 5
19952: PUSH
19953: LD_VAR 0 3
19957: PUSH
19958: LD_VAR 0 1
19962: STR
19963: PPUSH
19964: CALL_OW 34
19968: ST_TO_ADDR
19969: GO 19986
// unit := NewCharacter ( ident ) ;
19971: LD_ADDR_VAR 0 5
19975: PUSH
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 25
19985: ST_TO_ADDR
// result := unit ;
19986: LD_ADDR_VAR 0 4
19990: PUSH
19991: LD_VAR 0 5
19995: ST_TO_ADDR
// end ;
19996: LD_VAR 0 4
20000: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20001: LD_INT 0
20003: PPUSH
20004: PPUSH
// if not side or not nation then
20005: LD_VAR 0 1
20009: NOT
20010: PUSH
20011: LD_VAR 0 2
20015: NOT
20016: OR
20017: IFFALSE 20021
// exit ;
20019: GO 20789
// case nation of nation_american :
20021: LD_VAR 0 2
20025: PUSH
20026: LD_INT 1
20028: DOUBLE
20029: EQUAL
20030: IFTRUE 20034
20032: GO 20248
20034: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20035: LD_ADDR_VAR 0 4
20039: PUSH
20040: LD_INT 35
20042: PUSH
20043: LD_INT 45
20045: PUSH
20046: LD_INT 46
20048: PUSH
20049: LD_INT 47
20051: PUSH
20052: LD_INT 82
20054: PUSH
20055: LD_INT 83
20057: PUSH
20058: LD_INT 84
20060: PUSH
20061: LD_INT 85
20063: PUSH
20064: LD_INT 86
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 6
20075: PUSH
20076: LD_INT 15
20078: PUSH
20079: LD_INT 16
20081: PUSH
20082: LD_INT 7
20084: PUSH
20085: LD_INT 12
20087: PUSH
20088: LD_INT 13
20090: PUSH
20091: LD_INT 10
20093: PUSH
20094: LD_INT 14
20096: PUSH
20097: LD_INT 20
20099: PUSH
20100: LD_INT 21
20102: PUSH
20103: LD_INT 22
20105: PUSH
20106: LD_INT 25
20108: PUSH
20109: LD_INT 32
20111: PUSH
20112: LD_INT 27
20114: PUSH
20115: LD_INT 36
20117: PUSH
20118: LD_INT 69
20120: PUSH
20121: LD_INT 39
20123: PUSH
20124: LD_INT 34
20126: PUSH
20127: LD_INT 40
20129: PUSH
20130: LD_INT 48
20132: PUSH
20133: LD_INT 49
20135: PUSH
20136: LD_INT 50
20138: PUSH
20139: LD_INT 51
20141: PUSH
20142: LD_INT 52
20144: PUSH
20145: LD_INT 53
20147: PUSH
20148: LD_INT 54
20150: PUSH
20151: LD_INT 55
20153: PUSH
20154: LD_INT 56
20156: PUSH
20157: LD_INT 57
20159: PUSH
20160: LD_INT 58
20162: PUSH
20163: LD_INT 59
20165: PUSH
20166: LD_INT 60
20168: PUSH
20169: LD_INT 61
20171: PUSH
20172: LD_INT 62
20174: PUSH
20175: LD_INT 80
20177: PUSH
20178: LD_INT 82
20180: PUSH
20181: LD_INT 83
20183: PUSH
20184: LD_INT 84
20186: PUSH
20187: LD_INT 85
20189: PUSH
20190: LD_INT 86
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: ST_TO_ADDR
20246: GO 20713
20248: LD_INT 2
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20482
20256: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20257: LD_ADDR_VAR 0 4
20261: PUSH
20262: LD_INT 35
20264: PUSH
20265: LD_INT 45
20267: PUSH
20268: LD_INT 46
20270: PUSH
20271: LD_INT 47
20273: PUSH
20274: LD_INT 82
20276: PUSH
20277: LD_INT 83
20279: PUSH
20280: LD_INT 84
20282: PUSH
20283: LD_INT 85
20285: PUSH
20286: LD_INT 87
20288: PUSH
20289: LD_INT 70
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: LD_INT 11
20297: PUSH
20298: LD_INT 3
20300: PUSH
20301: LD_INT 4
20303: PUSH
20304: LD_INT 5
20306: PUSH
20307: LD_INT 6
20309: PUSH
20310: LD_INT 15
20312: PUSH
20313: LD_INT 18
20315: PUSH
20316: LD_INT 7
20318: PUSH
20319: LD_INT 17
20321: PUSH
20322: LD_INT 8
20324: PUSH
20325: LD_INT 20
20327: PUSH
20328: LD_INT 21
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_INT 72
20336: PUSH
20337: LD_INT 26
20339: PUSH
20340: LD_INT 69
20342: PUSH
20343: LD_INT 39
20345: PUSH
20346: LD_INT 40
20348: PUSH
20349: LD_INT 41
20351: PUSH
20352: LD_INT 42
20354: PUSH
20355: LD_INT 43
20357: PUSH
20358: LD_INT 48
20360: PUSH
20361: LD_INT 49
20363: PUSH
20364: LD_INT 50
20366: PUSH
20367: LD_INT 51
20369: PUSH
20370: LD_INT 52
20372: PUSH
20373: LD_INT 53
20375: PUSH
20376: LD_INT 54
20378: PUSH
20379: LD_INT 55
20381: PUSH
20382: LD_INT 56
20384: PUSH
20385: LD_INT 60
20387: PUSH
20388: LD_INT 61
20390: PUSH
20391: LD_INT 62
20393: PUSH
20394: LD_INT 66
20396: PUSH
20397: LD_INT 67
20399: PUSH
20400: LD_INT 68
20402: PUSH
20403: LD_INT 81
20405: PUSH
20406: LD_INT 82
20408: PUSH
20409: LD_INT 83
20411: PUSH
20412: LD_INT 84
20414: PUSH
20415: LD_INT 85
20417: PUSH
20418: LD_INT 87
20420: PUSH
20421: LD_INT 88
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: ST_TO_ADDR
20480: GO 20713
20482: LD_INT 3
20484: DOUBLE
20485: EQUAL
20486: IFTRUE 20490
20488: GO 20712
20490: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20491: LD_ADDR_VAR 0 4
20495: PUSH
20496: LD_INT 46
20498: PUSH
20499: LD_INT 47
20501: PUSH
20502: LD_INT 1
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 82
20510: PUSH
20511: LD_INT 83
20513: PUSH
20514: LD_INT 84
20516: PUSH
20517: LD_INT 85
20519: PUSH
20520: LD_INT 86
20522: PUSH
20523: LD_INT 11
20525: PUSH
20526: LD_INT 9
20528: PUSH
20529: LD_INT 20
20531: PUSH
20532: LD_INT 19
20534: PUSH
20535: LD_INT 21
20537: PUSH
20538: LD_INT 24
20540: PUSH
20541: LD_INT 22
20543: PUSH
20544: LD_INT 25
20546: PUSH
20547: LD_INT 28
20549: PUSH
20550: LD_INT 29
20552: PUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 31
20558: PUSH
20559: LD_INT 37
20561: PUSH
20562: LD_INT 38
20564: PUSH
20565: LD_INT 32
20567: PUSH
20568: LD_INT 27
20570: PUSH
20571: LD_INT 33
20573: PUSH
20574: LD_INT 69
20576: PUSH
20577: LD_INT 39
20579: PUSH
20580: LD_INT 34
20582: PUSH
20583: LD_INT 40
20585: PUSH
20586: LD_INT 71
20588: PUSH
20589: LD_INT 23
20591: PUSH
20592: LD_INT 44
20594: PUSH
20595: LD_INT 48
20597: PUSH
20598: LD_INT 49
20600: PUSH
20601: LD_INT 50
20603: PUSH
20604: LD_INT 51
20606: PUSH
20607: LD_INT 52
20609: PUSH
20610: LD_INT 53
20612: PUSH
20613: LD_INT 54
20615: PUSH
20616: LD_INT 55
20618: PUSH
20619: LD_INT 56
20621: PUSH
20622: LD_INT 57
20624: PUSH
20625: LD_INT 58
20627: PUSH
20628: LD_INT 59
20630: PUSH
20631: LD_INT 63
20633: PUSH
20634: LD_INT 64
20636: PUSH
20637: LD_INT 65
20639: PUSH
20640: LD_INT 82
20642: PUSH
20643: LD_INT 83
20645: PUSH
20646: LD_INT 84
20648: PUSH
20649: LD_INT 85
20651: PUSH
20652: LD_INT 86
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: ST_TO_ADDR
20710: GO 20713
20712: POP
// if state > - 1 and state < 3 then
20713: LD_VAR 0 3
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: GREATER
20722: PUSH
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 3
20730: LESS
20731: AND
20732: IFFALSE 20789
// for i in result do
20734: LD_ADDR_VAR 0 5
20738: PUSH
20739: LD_VAR 0 4
20743: PUSH
20744: FOR_IN
20745: IFFALSE 20787
// if GetTech ( i , side ) <> state then
20747: LD_VAR 0 5
20751: PPUSH
20752: LD_VAR 0 1
20756: PPUSH
20757: CALL_OW 321
20761: PUSH
20762: LD_VAR 0 3
20766: NONEQUAL
20767: IFFALSE 20785
// result := result diff i ;
20769: LD_ADDR_VAR 0 4
20773: PUSH
20774: LD_VAR 0 4
20778: PUSH
20779: LD_VAR 0 5
20783: DIFF
20784: ST_TO_ADDR
20785: GO 20744
20787: POP
20788: POP
// end ;
20789: LD_VAR 0 4
20793: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20794: LD_INT 0
20796: PPUSH
20797: PPUSH
20798: PPUSH
// result := true ;
20799: LD_ADDR_VAR 0 3
20803: PUSH
20804: LD_INT 1
20806: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20807: LD_ADDR_VAR 0 5
20811: PUSH
20812: LD_VAR 0 2
20816: PPUSH
20817: CALL_OW 480
20821: ST_TO_ADDR
// if not tmp then
20822: LD_VAR 0 5
20826: NOT
20827: IFFALSE 20831
// exit ;
20829: GO 20880
// for i in tmp do
20831: LD_ADDR_VAR 0 4
20835: PUSH
20836: LD_VAR 0 5
20840: PUSH
20841: FOR_IN
20842: IFFALSE 20878
// if GetTech ( i , side ) <> state_researched then
20844: LD_VAR 0 4
20848: PPUSH
20849: LD_VAR 0 1
20853: PPUSH
20854: CALL_OW 321
20858: PUSH
20859: LD_INT 2
20861: NONEQUAL
20862: IFFALSE 20876
// begin result := false ;
20864: LD_ADDR_VAR 0 3
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// exit ;
20872: POP
20873: POP
20874: GO 20880
// end ;
20876: GO 20841
20878: POP
20879: POP
// end ;
20880: LD_VAR 0 3
20884: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20885: LD_INT 0
20887: PPUSH
20888: PPUSH
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
20894: PPUSH
20895: PPUSH
20896: PPUSH
20897: PPUSH
20898: PPUSH
20899: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20900: LD_VAR 0 1
20904: NOT
20905: PUSH
20906: LD_VAR 0 1
20910: PPUSH
20911: CALL_OW 257
20915: PUSH
20916: LD_INT 9
20918: NONEQUAL
20919: OR
20920: IFFALSE 20924
// exit ;
20922: GO 21497
// side := GetSide ( unit ) ;
20924: LD_ADDR_VAR 0 9
20928: PUSH
20929: LD_VAR 0 1
20933: PPUSH
20934: CALL_OW 255
20938: ST_TO_ADDR
// tech_space := tech_spacanom ;
20939: LD_ADDR_VAR 0 12
20943: PUSH
20944: LD_INT 29
20946: ST_TO_ADDR
// tech_time := tech_taurad ;
20947: LD_ADDR_VAR 0 13
20951: PUSH
20952: LD_INT 28
20954: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20955: LD_ADDR_VAR 0 11
20959: PUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 310
20969: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20970: LD_VAR 0 11
20974: PPUSH
20975: CALL_OW 247
20979: PUSH
20980: LD_INT 2
20982: EQUAL
20983: IFFALSE 20987
// exit ;
20985: GO 21497
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20987: LD_ADDR_VAR 0 8
20991: PUSH
20992: LD_INT 81
20994: PUSH
20995: LD_VAR 0 9
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 3
21006: PUSH
21007: LD_INT 21
21009: PUSH
21010: LD_INT 3
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PPUSH
21025: CALL_OW 69
21029: ST_TO_ADDR
// if not tmp then
21030: LD_VAR 0 8
21034: NOT
21035: IFFALSE 21039
// exit ;
21037: GO 21497
// if in_unit then
21039: LD_VAR 0 11
21043: IFFALSE 21067
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21045: LD_ADDR_VAR 0 10
21049: PUSH
21050: LD_VAR 0 8
21054: PPUSH
21055: LD_VAR 0 11
21059: PPUSH
21060: CALL_OW 74
21064: ST_TO_ADDR
21065: GO 21087
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21067: LD_ADDR_VAR 0 10
21071: PUSH
21072: LD_VAR 0 8
21076: PPUSH
21077: LD_VAR 0 1
21081: PPUSH
21082: CALL_OW 74
21086: ST_TO_ADDR
// if not enemy then
21087: LD_VAR 0 10
21091: NOT
21092: IFFALSE 21096
// exit ;
21094: GO 21497
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21096: LD_VAR 0 11
21100: PUSH
21101: LD_VAR 0 11
21105: PPUSH
21106: LD_VAR 0 10
21110: PPUSH
21111: CALL_OW 296
21115: PUSH
21116: LD_INT 13
21118: GREATER
21119: AND
21120: PUSH
21121: LD_VAR 0 1
21125: PPUSH
21126: LD_VAR 0 10
21130: PPUSH
21131: CALL_OW 296
21135: PUSH
21136: LD_INT 12
21138: GREATER
21139: OR
21140: IFFALSE 21144
// exit ;
21142: GO 21497
// missile := [ 1 ] ;
21144: LD_ADDR_VAR 0 14
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21155: LD_VAR 0 9
21159: PPUSH
21160: LD_VAR 0 12
21164: PPUSH
21165: CALL_OW 325
21169: IFFALSE 21198
// missile := Insert ( missile , missile + 1 , 2 ) ;
21171: LD_ADDR_VAR 0 14
21175: PUSH
21176: LD_VAR 0 14
21180: PPUSH
21181: LD_VAR 0 14
21185: PUSH
21186: LD_INT 1
21188: PLUS
21189: PPUSH
21190: LD_INT 2
21192: PPUSH
21193: CALL_OW 2
21197: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21198: LD_VAR 0 9
21202: PPUSH
21203: LD_VAR 0 13
21207: PPUSH
21208: CALL_OW 325
21212: PUSH
21213: LD_VAR 0 10
21217: PPUSH
21218: CALL_OW 255
21222: PPUSH
21223: LD_VAR 0 13
21227: PPUSH
21228: CALL_OW 325
21232: NOT
21233: AND
21234: IFFALSE 21263
// missile := Insert ( missile , missile + 1 , 3 ) ;
21236: LD_ADDR_VAR 0 14
21240: PUSH
21241: LD_VAR 0 14
21245: PPUSH
21246: LD_VAR 0 14
21250: PUSH
21251: LD_INT 1
21253: PLUS
21254: PPUSH
21255: LD_INT 3
21257: PPUSH
21258: CALL_OW 2
21262: ST_TO_ADDR
// if missile < 2 then
21263: LD_VAR 0 14
21267: PUSH
21268: LD_INT 2
21270: LESS
21271: IFFALSE 21275
// exit ;
21273: GO 21497
// x := GetX ( enemy ) ;
21275: LD_ADDR_VAR 0 4
21279: PUSH
21280: LD_VAR 0 10
21284: PPUSH
21285: CALL_OW 250
21289: ST_TO_ADDR
// y := GetY ( enemy ) ;
21290: LD_ADDR_VAR 0 5
21294: PUSH
21295: LD_VAR 0 10
21299: PPUSH
21300: CALL_OW 251
21304: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21305: LD_ADDR_VAR 0 6
21309: PUSH
21310: LD_VAR 0 4
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PPUSH
21319: LD_INT 1
21321: PPUSH
21322: CALL_OW 12
21326: PLUS
21327: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21328: LD_ADDR_VAR 0 7
21332: PUSH
21333: LD_VAR 0 5
21337: PUSH
21338: LD_INT 1
21340: NEG
21341: PPUSH
21342: LD_INT 1
21344: PPUSH
21345: CALL_OW 12
21349: PLUS
21350: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21351: LD_VAR 0 6
21355: PPUSH
21356: LD_VAR 0 7
21360: PPUSH
21361: CALL_OW 488
21365: NOT
21366: IFFALSE 21388
// begin _x := x ;
21368: LD_ADDR_VAR 0 6
21372: PUSH
21373: LD_VAR 0 4
21377: ST_TO_ADDR
// _y := y ;
21378: LD_ADDR_VAR 0 7
21382: PUSH
21383: LD_VAR 0 5
21387: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21388: LD_ADDR_VAR 0 3
21392: PUSH
21393: LD_INT 1
21395: PPUSH
21396: LD_VAR 0 14
21400: PPUSH
21401: CALL_OW 12
21405: ST_TO_ADDR
// case i of 1 :
21406: LD_VAR 0 3
21410: PUSH
21411: LD_INT 1
21413: DOUBLE
21414: EQUAL
21415: IFTRUE 21419
21417: GO 21436
21419: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21420: LD_VAR 0 1
21424: PPUSH
21425: LD_VAR 0 10
21429: PPUSH
21430: CALL_OW 115
21434: GO 21497
21436: LD_INT 2
21438: DOUBLE
21439: EQUAL
21440: IFTRUE 21444
21442: GO 21466
21444: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21445: LD_VAR 0 1
21449: PPUSH
21450: LD_VAR 0 6
21454: PPUSH
21455: LD_VAR 0 7
21459: PPUSH
21460: CALL_OW 153
21464: GO 21497
21466: LD_INT 3
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21496
21474: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21475: LD_VAR 0 1
21479: PPUSH
21480: LD_VAR 0 6
21484: PPUSH
21485: LD_VAR 0 7
21489: PPUSH
21490: CALL_OW 154
21494: GO 21497
21496: POP
// end ;
21497: LD_VAR 0 2
21501: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21502: LD_INT 0
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
21508: PPUSH
21509: PPUSH
// if not unit or not building then
21510: LD_VAR 0 1
21514: NOT
21515: PUSH
21516: LD_VAR 0 2
21520: NOT
21521: OR
21522: IFFALSE 21526
// exit ;
21524: GO 21684
// x := GetX ( building ) ;
21526: LD_ADDR_VAR 0 5
21530: PUSH
21531: LD_VAR 0 2
21535: PPUSH
21536: CALL_OW 250
21540: ST_TO_ADDR
// y := GetY ( building ) ;
21541: LD_ADDR_VAR 0 6
21545: PUSH
21546: LD_VAR 0 2
21550: PPUSH
21551: CALL_OW 251
21555: ST_TO_ADDR
// for i = 0 to 5 do
21556: LD_ADDR_VAR 0 4
21560: PUSH
21561: DOUBLE
21562: LD_INT 0
21564: DEC
21565: ST_TO_ADDR
21566: LD_INT 5
21568: PUSH
21569: FOR_TO
21570: IFFALSE 21682
// begin _x := ShiftX ( x , i , 3 ) ;
21572: LD_ADDR_VAR 0 7
21576: PUSH
21577: LD_VAR 0 5
21581: PPUSH
21582: LD_VAR 0 4
21586: PPUSH
21587: LD_INT 3
21589: PPUSH
21590: CALL_OW 272
21594: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21595: LD_ADDR_VAR 0 8
21599: PUSH
21600: LD_VAR 0 6
21604: PPUSH
21605: LD_VAR 0 4
21609: PPUSH
21610: LD_INT 3
21612: PPUSH
21613: CALL_OW 273
21617: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21618: LD_VAR 0 7
21622: PPUSH
21623: LD_VAR 0 8
21627: PPUSH
21628: CALL_OW 488
21632: NOT
21633: IFFALSE 21637
// continue ;
21635: GO 21569
// if HexInfo ( _x , _y ) = 0 then
21637: LD_VAR 0 7
21641: PPUSH
21642: LD_VAR 0 8
21646: PPUSH
21647: CALL_OW 428
21651: PUSH
21652: LD_INT 0
21654: EQUAL
21655: IFFALSE 21680
// begin ComMoveXY ( unit , _x , _y ) ;
21657: LD_VAR 0 1
21661: PPUSH
21662: LD_VAR 0 7
21666: PPUSH
21667: LD_VAR 0 8
21671: PPUSH
21672: CALL_OW 111
// exit ;
21676: POP
21677: POP
21678: GO 21684
// end ; end ;
21680: GO 21569
21682: POP
21683: POP
// end ;
21684: LD_VAR 0 3
21688: RET
// export function ScanBase ( side , base_area ) ; begin
21689: LD_INT 0
21691: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21692: LD_ADDR_VAR 0 3
21696: PUSH
21697: LD_VAR 0 2
21701: PPUSH
21702: LD_INT 81
21704: PUSH
21705: LD_VAR 0 1
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PPUSH
21714: CALL_OW 70
21718: ST_TO_ADDR
// end ;
21719: LD_VAR 0 3
21723: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21724: LD_INT 0
21726: PPUSH
21727: PPUSH
21728: PPUSH
21729: PPUSH
// result := false ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_INT 0
21737: ST_TO_ADDR
// side := GetSide ( unit ) ;
21738: LD_ADDR_VAR 0 3
21742: PUSH
21743: LD_VAR 0 1
21747: PPUSH
21748: CALL_OW 255
21752: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21753: LD_ADDR_VAR 0 4
21757: PUSH
21758: LD_VAR 0 1
21762: PPUSH
21763: CALL_OW 248
21767: ST_TO_ADDR
// case nat of 1 :
21768: LD_VAR 0 4
21772: PUSH
21773: LD_INT 1
21775: DOUBLE
21776: EQUAL
21777: IFTRUE 21781
21779: GO 21792
21781: POP
// tech := tech_lassight ; 2 :
21782: LD_ADDR_VAR 0 5
21786: PUSH
21787: LD_INT 12
21789: ST_TO_ADDR
21790: GO 21831
21792: LD_INT 2
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21811
21800: POP
// tech := tech_mortar ; 3 :
21801: LD_ADDR_VAR 0 5
21805: PUSH
21806: LD_INT 41
21808: ST_TO_ADDR
21809: GO 21831
21811: LD_INT 3
21813: DOUBLE
21814: EQUAL
21815: IFTRUE 21819
21817: GO 21830
21819: POP
// tech := tech_bazooka ; end ;
21820: LD_ADDR_VAR 0 5
21824: PUSH
21825: LD_INT 44
21827: ST_TO_ADDR
21828: GO 21831
21830: POP
// if Researched ( side , tech ) then
21831: LD_VAR 0 3
21835: PPUSH
21836: LD_VAR 0 5
21840: PPUSH
21841: CALL_OW 325
21845: IFFALSE 21872
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21847: LD_ADDR_VAR 0 2
21851: PUSH
21852: LD_INT 5
21854: PUSH
21855: LD_INT 8
21857: PUSH
21858: LD_INT 9
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: LD_VAR 0 4
21870: ARRAY
21871: ST_TO_ADDR
// end ;
21872: LD_VAR 0 2
21876: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21877: LD_INT 0
21879: PPUSH
21880: PPUSH
21881: PPUSH
// if not mines then
21882: LD_VAR 0 2
21886: NOT
21887: IFFALSE 21891
// exit ;
21889: GO 22035
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21891: LD_ADDR_VAR 0 5
21895: PUSH
21896: LD_INT 81
21898: PUSH
21899: LD_VAR 0 1
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: LD_INT 21
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PPUSH
21929: CALL_OW 69
21933: ST_TO_ADDR
// for i in mines do
21934: LD_ADDR_VAR 0 4
21938: PUSH
21939: LD_VAR 0 2
21943: PUSH
21944: FOR_IN
21945: IFFALSE 22033
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21947: LD_VAR 0 4
21951: PUSH
21952: LD_INT 1
21954: ARRAY
21955: PPUSH
21956: LD_VAR 0 4
21960: PUSH
21961: LD_INT 2
21963: ARRAY
21964: PPUSH
21965: CALL_OW 458
21969: NOT
21970: IFFALSE 21974
// continue ;
21972: GO 21944
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21974: LD_VAR 0 4
21978: PUSH
21979: LD_INT 1
21981: ARRAY
21982: PPUSH
21983: LD_VAR 0 4
21987: PUSH
21988: LD_INT 2
21990: ARRAY
21991: PPUSH
21992: CALL_OW 428
21996: PUSH
21997: LD_VAR 0 5
22001: IN
22002: IFFALSE 22031
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22004: LD_VAR 0 4
22008: PUSH
22009: LD_INT 1
22011: ARRAY
22012: PPUSH
22013: LD_VAR 0 4
22017: PUSH
22018: LD_INT 2
22020: ARRAY
22021: PPUSH
22022: LD_VAR 0 1
22026: PPUSH
22027: CALL_OW 456
// end ;
22031: GO 21944
22033: POP
22034: POP
// end ;
22035: LD_VAR 0 3
22039: RET
// export function Count ( array ) ; var i ; begin
22040: LD_INT 0
22042: PPUSH
22043: PPUSH
// result := 0 ;
22044: LD_ADDR_VAR 0 2
22048: PUSH
22049: LD_INT 0
22051: ST_TO_ADDR
// for i in array do
22052: LD_ADDR_VAR 0 3
22056: PUSH
22057: LD_VAR 0 1
22061: PUSH
22062: FOR_IN
22063: IFFALSE 22087
// if i then
22065: LD_VAR 0 3
22069: IFFALSE 22085
// result := result + 1 ;
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_VAR 0 2
22080: PUSH
22081: LD_INT 1
22083: PLUS
22084: ST_TO_ADDR
22085: GO 22062
22087: POP
22088: POP
// end ;
22089: LD_VAR 0 2
22093: RET
// export function IsEmpty ( building ) ; begin
22094: LD_INT 0
22096: PPUSH
// if not building then
22097: LD_VAR 0 1
22101: NOT
22102: IFFALSE 22106
// exit ;
22104: GO 22149
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22106: LD_ADDR_VAR 0 2
22110: PUSH
22111: LD_VAR 0 1
22115: PUSH
22116: LD_INT 22
22118: PUSH
22119: LD_VAR 0 1
22123: PPUSH
22124: CALL_OW 255
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 58
22135: PUSH
22136: EMPTY
22137: LIST
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: IN
22148: ST_TO_ADDR
// end ;
22149: LD_VAR 0 2
22153: RET
// export function IsNotFull ( building ) ; begin
22154: LD_INT 0
22156: PPUSH
// if not building then
22157: LD_VAR 0 1
22161: NOT
22162: IFFALSE 22166
// exit ;
22164: GO 22185
// result := UnitsInside ( building ) < 6 ;
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_VAR 0 1
22175: PPUSH
22176: CALL_OW 313
22180: PUSH
22181: LD_INT 6
22183: LESS
22184: ST_TO_ADDR
// end ;
22185: LD_VAR 0 2
22189: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22190: LD_INT 0
22192: PPUSH
22193: PPUSH
22194: PPUSH
22195: PPUSH
// tmp := [ ] ;
22196: LD_ADDR_VAR 0 3
22200: PUSH
22201: EMPTY
22202: ST_TO_ADDR
// list := [ ] ;
22203: LD_ADDR_VAR 0 5
22207: PUSH
22208: EMPTY
22209: ST_TO_ADDR
// for i = 16 to 25 do
22210: LD_ADDR_VAR 0 4
22214: PUSH
22215: DOUBLE
22216: LD_INT 16
22218: DEC
22219: ST_TO_ADDR
22220: LD_INT 25
22222: PUSH
22223: FOR_TO
22224: IFFALSE 22297
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22226: LD_ADDR_VAR 0 3
22230: PUSH
22231: LD_VAR 0 3
22235: PUSH
22236: LD_INT 22
22238: PUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 255
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 91
22255: PUSH
22256: LD_VAR 0 1
22260: PUSH
22261: LD_INT 6
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 30
22271: PUSH
22272: LD_VAR 0 4
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: ADD
22294: ST_TO_ADDR
22295: GO 22223
22297: POP
22298: POP
// for i = 1 to tmp do
22299: LD_ADDR_VAR 0 4
22303: PUSH
22304: DOUBLE
22305: LD_INT 1
22307: DEC
22308: ST_TO_ADDR
22309: LD_VAR 0 3
22313: PUSH
22314: FOR_TO
22315: IFFALSE 22403
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22317: LD_ADDR_VAR 0 5
22321: PUSH
22322: LD_VAR 0 5
22326: PUSH
22327: LD_VAR 0 3
22331: PUSH
22332: LD_VAR 0 4
22336: ARRAY
22337: PPUSH
22338: CALL_OW 266
22342: PUSH
22343: LD_VAR 0 3
22347: PUSH
22348: LD_VAR 0 4
22352: ARRAY
22353: PPUSH
22354: CALL_OW 250
22358: PUSH
22359: LD_VAR 0 3
22363: PUSH
22364: LD_VAR 0 4
22368: ARRAY
22369: PPUSH
22370: CALL_OW 251
22374: PUSH
22375: LD_VAR 0 3
22379: PUSH
22380: LD_VAR 0 4
22384: ARRAY
22385: PPUSH
22386: CALL_OW 254
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: PUSH
22397: EMPTY
22398: LIST
22399: ADD
22400: ST_TO_ADDR
22401: GO 22314
22403: POP
22404: POP
// result := list ;
22405: LD_ADDR_VAR 0 2
22409: PUSH
22410: LD_VAR 0 5
22414: ST_TO_ADDR
// end ;
22415: LD_VAR 0 2
22419: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22420: LD_INT 0
22422: PPUSH
22423: PPUSH
22424: PPUSH
22425: PPUSH
22426: PPUSH
22427: PPUSH
22428: PPUSH
// if not factory then
22429: LD_VAR 0 1
22433: NOT
22434: IFFALSE 22438
// exit ;
22436: GO 23031
// if control = control_apeman then
22438: LD_VAR 0 4
22442: PUSH
22443: LD_INT 5
22445: EQUAL
22446: IFFALSE 22555
// begin tmp := UnitsInside ( factory ) ;
22448: LD_ADDR_VAR 0 8
22452: PUSH
22453: LD_VAR 0 1
22457: PPUSH
22458: CALL_OW 313
22462: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22463: LD_VAR 0 8
22467: PPUSH
22468: LD_INT 25
22470: PUSH
22471: LD_INT 12
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PPUSH
22478: CALL_OW 72
22482: NOT
22483: IFFALSE 22493
// control := control_manual ;
22485: LD_ADDR_VAR 0 4
22489: PUSH
22490: LD_INT 1
22492: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22493: LD_ADDR_VAR 0 8
22497: PUSH
22498: LD_VAR 0 1
22502: PPUSH
22503: CALL 22190 0 1
22507: ST_TO_ADDR
// if tmp then
22508: LD_VAR 0 8
22512: IFFALSE 22555
// begin for i in tmp do
22514: LD_ADDR_VAR 0 7
22518: PUSH
22519: LD_VAR 0 8
22523: PUSH
22524: FOR_IN
22525: IFFALSE 22553
// if i [ 1 ] = b_ext_radio then
22527: LD_VAR 0 7
22531: PUSH
22532: LD_INT 1
22534: ARRAY
22535: PUSH
22536: LD_INT 22
22538: EQUAL
22539: IFFALSE 22551
// begin control := control_remote ;
22541: LD_ADDR_VAR 0 4
22545: PUSH
22546: LD_INT 2
22548: ST_TO_ADDR
// break ;
22549: GO 22553
// end ;
22551: GO 22524
22553: POP
22554: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22555: LD_VAR 0 1
22559: PPUSH
22560: LD_VAR 0 2
22564: PPUSH
22565: LD_VAR 0 3
22569: PPUSH
22570: LD_VAR 0 4
22574: PPUSH
22575: LD_VAR 0 5
22579: PPUSH
22580: CALL_OW 448
22584: IFFALSE 22619
// begin result := [ chassis , engine , control , weapon ] ;
22586: LD_ADDR_VAR 0 6
22590: PUSH
22591: LD_VAR 0 2
22595: PUSH
22596: LD_VAR 0 3
22600: PUSH
22601: LD_VAR 0 4
22605: PUSH
22606: LD_VAR 0 5
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: ST_TO_ADDR
// exit ;
22617: GO 23031
// end ; _chassis := AvailableChassisList ( factory ) ;
22619: LD_ADDR_VAR 0 9
22623: PUSH
22624: LD_VAR 0 1
22628: PPUSH
22629: CALL_OW 475
22633: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22634: LD_ADDR_VAR 0 11
22638: PUSH
22639: LD_VAR 0 1
22643: PPUSH
22644: CALL_OW 476
22648: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22649: LD_ADDR_VAR 0 12
22653: PUSH
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 477
22663: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22664: LD_ADDR_VAR 0 10
22668: PUSH
22669: LD_VAR 0 1
22673: PPUSH
22674: CALL_OW 478
22678: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22679: LD_VAR 0 9
22683: NOT
22684: PUSH
22685: LD_VAR 0 11
22689: NOT
22690: OR
22691: PUSH
22692: LD_VAR 0 12
22696: NOT
22697: OR
22698: PUSH
22699: LD_VAR 0 10
22703: NOT
22704: OR
22705: IFFALSE 22740
// begin result := [ chassis , engine , control , weapon ] ;
22707: LD_ADDR_VAR 0 6
22711: PUSH
22712: LD_VAR 0 2
22716: PUSH
22717: LD_VAR 0 3
22721: PUSH
22722: LD_VAR 0 4
22726: PUSH
22727: LD_VAR 0 5
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: ST_TO_ADDR
// exit ;
22738: GO 23031
// end ; if not chassis in _chassis then
22740: LD_VAR 0 2
22744: PUSH
22745: LD_VAR 0 9
22749: IN
22750: NOT
22751: IFFALSE 22777
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22753: LD_ADDR_VAR 0 2
22757: PUSH
22758: LD_VAR 0 9
22762: PUSH
22763: LD_INT 1
22765: PPUSH
22766: LD_VAR 0 9
22770: PPUSH
22771: CALL_OW 12
22775: ARRAY
22776: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22777: LD_VAR 0 2
22781: PPUSH
22782: LD_VAR 0 3
22786: PPUSH
22787: CALL 23036 0 2
22791: NOT
22792: IFFALSE 22851
// repeat engine := _engine [ 1 ] ;
22794: LD_ADDR_VAR 0 3
22798: PUSH
22799: LD_VAR 0 11
22803: PUSH
22804: LD_INT 1
22806: ARRAY
22807: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22808: LD_ADDR_VAR 0 11
22812: PUSH
22813: LD_VAR 0 11
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: CALL_OW 3
22825: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22826: LD_VAR 0 2
22830: PPUSH
22831: LD_VAR 0 3
22835: PPUSH
22836: CALL 23036 0 2
22840: PUSH
22841: LD_VAR 0 11
22845: PUSH
22846: EMPTY
22847: EQUAL
22848: OR
22849: IFFALSE 22794
// if not control in _control then
22851: LD_VAR 0 4
22855: PUSH
22856: LD_VAR 0 12
22860: IN
22861: NOT
22862: IFFALSE 22888
// control := _control [ rand ( 1 , _control ) ] ;
22864: LD_ADDR_VAR 0 4
22868: PUSH
22869: LD_VAR 0 12
22873: PUSH
22874: LD_INT 1
22876: PPUSH
22877: LD_VAR 0 12
22881: PPUSH
22882: CALL_OW 12
22886: ARRAY
22887: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22888: LD_VAR 0 2
22892: PPUSH
22893: LD_VAR 0 5
22897: PPUSH
22898: CALL 23256 0 2
22902: NOT
22903: IFFALSE 22962
// repeat weapon := _weapon [ 1 ] ;
22905: LD_ADDR_VAR 0 5
22909: PUSH
22910: LD_VAR 0 10
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22919: LD_ADDR_VAR 0 10
22923: PUSH
22924: LD_VAR 0 10
22928: PPUSH
22929: LD_INT 1
22931: PPUSH
22932: CALL_OW 3
22936: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22937: LD_VAR 0 2
22941: PPUSH
22942: LD_VAR 0 5
22946: PPUSH
22947: CALL 23256 0 2
22951: PUSH
22952: LD_VAR 0 10
22956: PUSH
22957: EMPTY
22958: EQUAL
22959: OR
22960: IFFALSE 22905
// result := [ ] ;
22962: LD_ADDR_VAR 0 6
22966: PUSH
22967: EMPTY
22968: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22969: LD_VAR 0 1
22973: PPUSH
22974: LD_VAR 0 2
22978: PPUSH
22979: LD_VAR 0 3
22983: PPUSH
22984: LD_VAR 0 4
22988: PPUSH
22989: LD_VAR 0 5
22993: PPUSH
22994: CALL_OW 448
22998: IFFALSE 23031
// result := [ chassis , engine , control , weapon ] ;
23000: LD_ADDR_VAR 0 6
23004: PUSH
23005: LD_VAR 0 2
23009: PUSH
23010: LD_VAR 0 3
23014: PUSH
23015: LD_VAR 0 4
23019: PUSH
23020: LD_VAR 0 5
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: ST_TO_ADDR
// end ;
23031: LD_VAR 0 6
23035: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23036: LD_INT 0
23038: PPUSH
// if not chassis or not engine then
23039: LD_VAR 0 1
23043: NOT
23044: PUSH
23045: LD_VAR 0 2
23049: NOT
23050: OR
23051: IFFALSE 23055
// exit ;
23053: GO 23251
// case engine of engine_solar :
23055: LD_VAR 0 2
23059: PUSH
23060: LD_INT 2
23062: DOUBLE
23063: EQUAL
23064: IFTRUE 23068
23066: GO 23106
23068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23069: LD_ADDR_VAR 0 3
23073: PUSH
23074: LD_INT 11
23076: PUSH
23077: LD_INT 12
23079: PUSH
23080: LD_INT 13
23082: PUSH
23083: LD_INT 14
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: ST_TO_ADDR
23104: GO 23235
23106: LD_INT 1
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23176
23114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: LD_INT 11
23122: PUSH
23123: LD_INT 12
23125: PUSH
23126: LD_INT 13
23128: PUSH
23129: LD_INT 14
23131: PUSH
23132: LD_INT 1
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: LD_INT 3
23140: PUSH
23141: LD_INT 4
23143: PUSH
23144: LD_INT 5
23146: PUSH
23147: LD_INT 21
23149: PUSH
23150: LD_INT 23
23152: PUSH
23153: LD_INT 22
23155: PUSH
23156: LD_INT 24
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: ST_TO_ADDR
23174: GO 23235
23176: LD_INT 3
23178: DOUBLE
23179: EQUAL
23180: IFTRUE 23184
23182: GO 23234
23184: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23185: LD_ADDR_VAR 0 3
23189: PUSH
23190: LD_INT 13
23192: PUSH
23193: LD_INT 14
23195: PUSH
23196: LD_INT 2
23198: PUSH
23199: LD_INT 3
23201: PUSH
23202: LD_INT 4
23204: PUSH
23205: LD_INT 5
23207: PUSH
23208: LD_INT 21
23210: PUSH
23211: LD_INT 22
23213: PUSH
23214: LD_INT 23
23216: PUSH
23217: LD_INT 24
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: ST_TO_ADDR
23232: GO 23235
23234: POP
// result := ( chassis in result ) ;
23235: LD_ADDR_VAR 0 3
23239: PUSH
23240: LD_VAR 0 1
23244: PUSH
23245: LD_VAR 0 3
23249: IN
23250: ST_TO_ADDR
// end ;
23251: LD_VAR 0 3
23255: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23256: LD_INT 0
23258: PPUSH
// if not chassis or not weapon then
23259: LD_VAR 0 1
23263: NOT
23264: PUSH
23265: LD_VAR 0 2
23269: NOT
23270: OR
23271: IFFALSE 23275
// exit ;
23273: GO 24337
// case weapon of us_machine_gun :
23275: LD_VAR 0 2
23279: PUSH
23280: LD_INT 2
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23318
23288: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: LD_INT 3
23302: PUSH
23303: LD_INT 4
23305: PUSH
23306: LD_INT 5
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: ST_TO_ADDR
23316: GO 24321
23318: LD_INT 3
23320: DOUBLE
23321: EQUAL
23322: IFTRUE 23326
23324: GO 23356
23326: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23327: LD_ADDR_VAR 0 3
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 3
23340: PUSH
23341: LD_INT 4
23343: PUSH
23344: LD_INT 5
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: ST_TO_ADDR
23354: GO 24321
23356: LD_INT 11
23358: DOUBLE
23359: EQUAL
23360: IFTRUE 23364
23362: GO 23394
23364: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23365: LD_ADDR_VAR 0 3
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: LD_INT 3
23378: PUSH
23379: LD_INT 4
23381: PUSH
23382: LD_INT 5
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: ST_TO_ADDR
23392: GO 24321
23394: LD_INT 4
23396: DOUBLE
23397: EQUAL
23398: IFTRUE 23402
23400: GO 23428
23402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23403: LD_ADDR_VAR 0 3
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: LD_INT 3
23413: PUSH
23414: LD_INT 4
23416: PUSH
23417: LD_INT 5
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: ST_TO_ADDR
23426: GO 24321
23428: LD_INT 5
23430: DOUBLE
23431: EQUAL
23432: IFTRUE 23436
23434: GO 23462
23436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23437: LD_ADDR_VAR 0 3
23441: PUSH
23442: LD_INT 2
23444: PUSH
23445: LD_INT 3
23447: PUSH
23448: LD_INT 4
23450: PUSH
23451: LD_INT 5
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: ST_TO_ADDR
23460: GO 24321
23462: LD_INT 9
23464: DOUBLE
23465: EQUAL
23466: IFTRUE 23470
23468: GO 23496
23470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23471: LD_ADDR_VAR 0 3
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 3
23481: PUSH
23482: LD_INT 4
23484: PUSH
23485: LD_INT 5
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: ST_TO_ADDR
23494: GO 24321
23496: LD_INT 7
23498: DOUBLE
23499: EQUAL
23500: IFTRUE 23504
23502: GO 23530
23504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23505: LD_ADDR_VAR 0 3
23509: PUSH
23510: LD_INT 2
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: LD_INT 4
23518: PUSH
23519: LD_INT 5
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: ST_TO_ADDR
23528: GO 24321
23530: LD_INT 12
23532: DOUBLE
23533: EQUAL
23534: IFTRUE 23538
23536: GO 23564
23538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23539: LD_ADDR_VAR 0 3
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 24321
23564: LD_INT 13
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23598
23572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: LD_INT 4
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 24321
23598: LD_INT 14
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23624
23606: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23607: LD_ADDR_VAR 0 3
23611: PUSH
23612: LD_INT 4
23614: PUSH
23615: LD_INT 5
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: ST_TO_ADDR
23622: GO 24321
23624: LD_INT 6
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23650
23632: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23633: LD_ADDR_VAR 0 3
23637: PUSH
23638: LD_INT 4
23640: PUSH
23641: LD_INT 5
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: ST_TO_ADDR
23648: GO 24321
23650: LD_INT 10
23652: DOUBLE
23653: EQUAL
23654: IFTRUE 23658
23656: GO 23676
23658: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23659: LD_ADDR_VAR 0 3
23663: PUSH
23664: LD_INT 4
23666: PUSH
23667: LD_INT 5
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: ST_TO_ADDR
23674: GO 24321
23676: LD_INT 22
23678: DOUBLE
23679: EQUAL
23680: IFTRUE 23684
23682: GO 23710
23684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23685: LD_ADDR_VAR 0 3
23689: PUSH
23690: LD_INT 11
23692: PUSH
23693: LD_INT 12
23695: PUSH
23696: LD_INT 13
23698: PUSH
23699: LD_INT 14
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: ST_TO_ADDR
23708: GO 24321
23710: LD_INT 23
23712: DOUBLE
23713: EQUAL
23714: IFTRUE 23718
23716: GO 23744
23718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23719: LD_ADDR_VAR 0 3
23723: PUSH
23724: LD_INT 11
23726: PUSH
23727: LD_INT 12
23729: PUSH
23730: LD_INT 13
23732: PUSH
23733: LD_INT 14
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: ST_TO_ADDR
23742: GO 24321
23744: LD_INT 24
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23752
23750: GO 23778
23752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23753: LD_ADDR_VAR 0 3
23757: PUSH
23758: LD_INT 11
23760: PUSH
23761: LD_INT 12
23763: PUSH
23764: LD_INT 13
23766: PUSH
23767: LD_INT 14
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: ST_TO_ADDR
23776: GO 24321
23778: LD_INT 30
23780: DOUBLE
23781: EQUAL
23782: IFTRUE 23786
23784: GO 23812
23786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_INT 11
23794: PUSH
23795: LD_INT 12
23797: PUSH
23798: LD_INT 13
23800: PUSH
23801: LD_INT 14
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: ST_TO_ADDR
23810: GO 24321
23812: LD_INT 25
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23838
23820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23821: LD_ADDR_VAR 0 3
23825: PUSH
23826: LD_INT 13
23828: PUSH
23829: LD_INT 14
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: ST_TO_ADDR
23836: GO 24321
23838: LD_INT 27
23840: DOUBLE
23841: EQUAL
23842: IFTRUE 23846
23844: GO 23864
23846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23847: LD_ADDR_VAR 0 3
23851: PUSH
23852: LD_INT 13
23854: PUSH
23855: LD_INT 14
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: ST_TO_ADDR
23862: GO 24321
23864: LD_EXP 82
23868: DOUBLE
23869: EQUAL
23870: IFTRUE 23874
23872: GO 23900
23874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23875: LD_ADDR_VAR 0 3
23879: PUSH
23880: LD_INT 11
23882: PUSH
23883: LD_INT 12
23885: PUSH
23886: LD_INT 13
23888: PUSH
23889: LD_INT 14
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: ST_TO_ADDR
23898: GO 24321
23900: LD_INT 28
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23908
23906: GO 23926
23908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23909: LD_ADDR_VAR 0 3
23913: PUSH
23914: LD_INT 13
23916: PUSH
23917: LD_INT 14
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: ST_TO_ADDR
23924: GO 24321
23926: LD_INT 29
23928: DOUBLE
23929: EQUAL
23930: IFTRUE 23934
23932: GO 23952
23934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23935: LD_ADDR_VAR 0 3
23939: PUSH
23940: LD_INT 13
23942: PUSH
23943: LD_INT 14
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: ST_TO_ADDR
23950: GO 24321
23952: LD_INT 31
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 23978
23960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23961: LD_ADDR_VAR 0 3
23965: PUSH
23966: LD_INT 13
23968: PUSH
23969: LD_INT 14
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: ST_TO_ADDR
23976: GO 24321
23978: LD_INT 26
23980: DOUBLE
23981: EQUAL
23982: IFTRUE 23986
23984: GO 24004
23986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23987: LD_ADDR_VAR 0 3
23991: PUSH
23992: LD_INT 13
23994: PUSH
23995: LD_INT 14
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: ST_TO_ADDR
24002: GO 24321
24004: LD_INT 42
24006: DOUBLE
24007: EQUAL
24008: IFTRUE 24012
24010: GO 24038
24012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: LD_INT 21
24020: PUSH
24021: LD_INT 22
24023: PUSH
24024: LD_INT 23
24026: PUSH
24027: LD_INT 24
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: ST_TO_ADDR
24036: GO 24321
24038: LD_INT 43
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24046
24044: GO 24072
24046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24047: LD_ADDR_VAR 0 3
24051: PUSH
24052: LD_INT 21
24054: PUSH
24055: LD_INT 22
24057: PUSH
24058: LD_INT 23
24060: PUSH
24061: LD_INT 24
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: ST_TO_ADDR
24070: GO 24321
24072: LD_INT 44
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24080
24078: GO 24106
24080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24081: LD_ADDR_VAR 0 3
24085: PUSH
24086: LD_INT 21
24088: PUSH
24089: LD_INT 22
24091: PUSH
24092: LD_INT 23
24094: PUSH
24095: LD_INT 24
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: ST_TO_ADDR
24104: GO 24321
24106: LD_INT 45
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24140
24114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24115: LD_ADDR_VAR 0 3
24119: PUSH
24120: LD_INT 21
24122: PUSH
24123: LD_INT 22
24125: PUSH
24126: LD_INT 23
24128: PUSH
24129: LD_INT 24
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: ST_TO_ADDR
24138: GO 24321
24140: LD_INT 49
24142: DOUBLE
24143: EQUAL
24144: IFTRUE 24148
24146: GO 24174
24148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_INT 21
24156: PUSH
24157: LD_INT 22
24159: PUSH
24160: LD_INT 23
24162: PUSH
24163: LD_INT 24
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: ST_TO_ADDR
24172: GO 24321
24174: LD_INT 51
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24208
24182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24183: LD_ADDR_VAR 0 3
24187: PUSH
24188: LD_INT 21
24190: PUSH
24191: LD_INT 22
24193: PUSH
24194: LD_INT 23
24196: PUSH
24197: LD_INT 24
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: ST_TO_ADDR
24206: GO 24321
24208: LD_INT 52
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24242
24216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24217: LD_ADDR_VAR 0 3
24221: PUSH
24222: LD_INT 21
24224: PUSH
24225: LD_INT 22
24227: PUSH
24228: LD_INT 23
24230: PUSH
24231: LD_INT 24
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: ST_TO_ADDR
24240: GO 24321
24242: LD_INT 53
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24268
24250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24251: LD_ADDR_VAR 0 3
24255: PUSH
24256: LD_INT 23
24258: PUSH
24259: LD_INT 24
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: ST_TO_ADDR
24266: GO 24321
24268: LD_INT 46
24270: DOUBLE
24271: EQUAL
24272: IFTRUE 24276
24274: GO 24294
24276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24277: LD_ADDR_VAR 0 3
24281: PUSH
24282: LD_INT 23
24284: PUSH
24285: LD_INT 24
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: ST_TO_ADDR
24292: GO 24321
24294: LD_INT 47
24296: DOUBLE
24297: EQUAL
24298: IFTRUE 24302
24300: GO 24320
24302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24303: LD_ADDR_VAR 0 3
24307: PUSH
24308: LD_INT 23
24310: PUSH
24311: LD_INT 24
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: ST_TO_ADDR
24318: GO 24321
24320: POP
// result := ( chassis in result ) ;
24321: LD_ADDR_VAR 0 3
24325: PUSH
24326: LD_VAR 0 1
24330: PUSH
24331: LD_VAR 0 3
24335: IN
24336: ST_TO_ADDR
// end ;
24337: LD_VAR 0 3
24341: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24342: LD_INT 0
24344: PPUSH
24345: PPUSH
24346: PPUSH
24347: PPUSH
24348: PPUSH
24349: PPUSH
24350: PPUSH
// result := array ;
24351: LD_ADDR_VAR 0 5
24355: PUSH
24356: LD_VAR 0 1
24360: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24361: LD_VAR 0 1
24365: NOT
24366: PUSH
24367: LD_VAR 0 2
24371: NOT
24372: OR
24373: PUSH
24374: LD_VAR 0 3
24378: NOT
24379: OR
24380: PUSH
24381: LD_VAR 0 2
24385: PUSH
24386: LD_VAR 0 1
24390: GREATER
24391: OR
24392: PUSH
24393: LD_VAR 0 3
24397: PUSH
24398: LD_VAR 0 1
24402: GREATER
24403: OR
24404: IFFALSE 24408
// exit ;
24406: GO 24704
// if direction then
24408: LD_VAR 0 4
24412: IFFALSE 24476
// begin d := 1 ;
24414: LD_ADDR_VAR 0 9
24418: PUSH
24419: LD_INT 1
24421: ST_TO_ADDR
// if i_from > i_to then
24422: LD_VAR 0 2
24426: PUSH
24427: LD_VAR 0 3
24431: GREATER
24432: IFFALSE 24458
// length := ( array - i_from ) + i_to else
24434: LD_ADDR_VAR 0 11
24438: PUSH
24439: LD_VAR 0 1
24443: PUSH
24444: LD_VAR 0 2
24448: MINUS
24449: PUSH
24450: LD_VAR 0 3
24454: PLUS
24455: ST_TO_ADDR
24456: GO 24474
// length := i_to - i_from ;
24458: LD_ADDR_VAR 0 11
24462: PUSH
24463: LD_VAR 0 3
24467: PUSH
24468: LD_VAR 0 2
24472: MINUS
24473: ST_TO_ADDR
// end else
24474: GO 24537
// begin d := - 1 ;
24476: LD_ADDR_VAR 0 9
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: ST_TO_ADDR
// if i_from > i_to then
24485: LD_VAR 0 2
24489: PUSH
24490: LD_VAR 0 3
24494: GREATER
24495: IFFALSE 24515
// length := i_from - i_to else
24497: LD_ADDR_VAR 0 11
24501: PUSH
24502: LD_VAR 0 2
24506: PUSH
24507: LD_VAR 0 3
24511: MINUS
24512: ST_TO_ADDR
24513: GO 24537
// length := ( array - i_to ) + i_from ;
24515: LD_ADDR_VAR 0 11
24519: PUSH
24520: LD_VAR 0 1
24524: PUSH
24525: LD_VAR 0 3
24529: MINUS
24530: PUSH
24531: LD_VAR 0 2
24535: PLUS
24536: ST_TO_ADDR
// end ; if not length then
24537: LD_VAR 0 11
24541: NOT
24542: IFFALSE 24546
// exit ;
24544: GO 24704
// tmp := array ;
24546: LD_ADDR_VAR 0 10
24550: PUSH
24551: LD_VAR 0 1
24555: ST_TO_ADDR
// for i = 1 to length do
24556: LD_ADDR_VAR 0 6
24560: PUSH
24561: DOUBLE
24562: LD_INT 1
24564: DEC
24565: ST_TO_ADDR
24566: LD_VAR 0 11
24570: PUSH
24571: FOR_TO
24572: IFFALSE 24692
// begin for j = 1 to array do
24574: LD_ADDR_VAR 0 7
24578: PUSH
24579: DOUBLE
24580: LD_INT 1
24582: DEC
24583: ST_TO_ADDR
24584: LD_VAR 0 1
24588: PUSH
24589: FOR_TO
24590: IFFALSE 24678
// begin k := j + d ;
24592: LD_ADDR_VAR 0 8
24596: PUSH
24597: LD_VAR 0 7
24601: PUSH
24602: LD_VAR 0 9
24606: PLUS
24607: ST_TO_ADDR
// if k > array then
24608: LD_VAR 0 8
24612: PUSH
24613: LD_VAR 0 1
24617: GREATER
24618: IFFALSE 24628
// k := 1 ;
24620: LD_ADDR_VAR 0 8
24624: PUSH
24625: LD_INT 1
24627: ST_TO_ADDR
// if not k then
24628: LD_VAR 0 8
24632: NOT
24633: IFFALSE 24645
// k := array ;
24635: LD_ADDR_VAR 0 8
24639: PUSH
24640: LD_VAR 0 1
24644: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24645: LD_ADDR_VAR 0 10
24649: PUSH
24650: LD_VAR 0 10
24654: PPUSH
24655: LD_VAR 0 8
24659: PPUSH
24660: LD_VAR 0 1
24664: PUSH
24665: LD_VAR 0 7
24669: ARRAY
24670: PPUSH
24671: CALL_OW 1
24675: ST_TO_ADDR
// end ;
24676: GO 24589
24678: POP
24679: POP
// array := tmp ;
24680: LD_ADDR_VAR 0 1
24684: PUSH
24685: LD_VAR 0 10
24689: ST_TO_ADDR
// end ;
24690: GO 24571
24692: POP
24693: POP
// result := array ;
24694: LD_ADDR_VAR 0 5
24698: PUSH
24699: LD_VAR 0 1
24703: ST_TO_ADDR
// end ;
24704: LD_VAR 0 5
24708: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24709: LD_INT 0
24711: PPUSH
24712: PPUSH
// result := 0 ;
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_INT 0
24720: ST_TO_ADDR
// if not array or not value in array then
24721: LD_VAR 0 1
24725: NOT
24726: PUSH
24727: LD_VAR 0 2
24731: PUSH
24732: LD_VAR 0 1
24736: IN
24737: NOT
24738: OR
24739: IFFALSE 24743
// exit ;
24741: GO 24797
// for i = 1 to array do
24743: LD_ADDR_VAR 0 4
24747: PUSH
24748: DOUBLE
24749: LD_INT 1
24751: DEC
24752: ST_TO_ADDR
24753: LD_VAR 0 1
24757: PUSH
24758: FOR_TO
24759: IFFALSE 24795
// if value = array [ i ] then
24761: LD_VAR 0 2
24765: PUSH
24766: LD_VAR 0 1
24770: PUSH
24771: LD_VAR 0 4
24775: ARRAY
24776: EQUAL
24777: IFFALSE 24793
// begin result := i ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 4
24788: ST_TO_ADDR
// exit ;
24789: POP
24790: POP
24791: GO 24797
// end ;
24793: GO 24758
24795: POP
24796: POP
// end ;
24797: LD_VAR 0 3
24801: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24802: LD_INT 0
24804: PPUSH
// vc_chassis := chassis ;
24805: LD_ADDR_OWVAR 37
24809: PUSH
24810: LD_VAR 0 1
24814: ST_TO_ADDR
// vc_engine := engine ;
24815: LD_ADDR_OWVAR 39
24819: PUSH
24820: LD_VAR 0 2
24824: ST_TO_ADDR
// vc_control := control ;
24825: LD_ADDR_OWVAR 38
24829: PUSH
24830: LD_VAR 0 3
24834: ST_TO_ADDR
// vc_weapon := weapon ;
24835: LD_ADDR_OWVAR 40
24839: PUSH
24840: LD_VAR 0 4
24844: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24845: LD_ADDR_OWVAR 41
24849: PUSH
24850: LD_VAR 0 5
24854: ST_TO_ADDR
// end ;
24855: LD_VAR 0 6
24859: RET
// export function WantPlant ( unit ) ; var task ; begin
24860: LD_INT 0
24862: PPUSH
24863: PPUSH
// result := false ;
24864: LD_ADDR_VAR 0 2
24868: PUSH
24869: LD_INT 0
24871: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: LD_VAR 0 1
24881: PPUSH
24882: CALL_OW 437
24886: ST_TO_ADDR
// if task then
24887: LD_VAR 0 3
24891: IFFALSE 24919
// if task [ 1 ] [ 1 ] = p then
24893: LD_VAR 0 3
24897: PUSH
24898: LD_INT 1
24900: ARRAY
24901: PUSH
24902: LD_INT 1
24904: ARRAY
24905: PUSH
24906: LD_STRING p
24908: EQUAL
24909: IFFALSE 24919
// result := true ;
24911: LD_ADDR_VAR 0 2
24915: PUSH
24916: LD_INT 1
24918: ST_TO_ADDR
// end ;
24919: LD_VAR 0 2
24923: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24924: LD_INT 0
24926: PPUSH
24927: PPUSH
24928: PPUSH
24929: PPUSH
// if pos < 1 then
24930: LD_VAR 0 2
24934: PUSH
24935: LD_INT 1
24937: LESS
24938: IFFALSE 24942
// exit ;
24940: GO 25245
// if pos = 1 then
24942: LD_VAR 0 2
24946: PUSH
24947: LD_INT 1
24949: EQUAL
24950: IFFALSE 24983
// result := Replace ( arr , pos [ 1 ] , value ) else
24952: LD_ADDR_VAR 0 4
24956: PUSH
24957: LD_VAR 0 1
24961: PPUSH
24962: LD_VAR 0 2
24966: PUSH
24967: LD_INT 1
24969: ARRAY
24970: PPUSH
24971: LD_VAR 0 3
24975: PPUSH
24976: CALL_OW 1
24980: ST_TO_ADDR
24981: GO 25245
// begin tmp := arr ;
24983: LD_ADDR_VAR 0 6
24987: PUSH
24988: LD_VAR 0 1
24992: ST_TO_ADDR
// s_arr := [ tmp ] ;
24993: LD_ADDR_VAR 0 7
24997: PUSH
24998: LD_VAR 0 6
25002: PUSH
25003: EMPTY
25004: LIST
25005: ST_TO_ADDR
// for i = 1 to pos - 1 do
25006: LD_ADDR_VAR 0 5
25010: PUSH
25011: DOUBLE
25012: LD_INT 1
25014: DEC
25015: ST_TO_ADDR
25016: LD_VAR 0 2
25020: PUSH
25021: LD_INT 1
25023: MINUS
25024: PUSH
25025: FOR_TO
25026: IFFALSE 25071
// begin tmp := tmp [ pos [ i ] ] ;
25028: LD_ADDR_VAR 0 6
25032: PUSH
25033: LD_VAR 0 6
25037: PUSH
25038: LD_VAR 0 2
25042: PUSH
25043: LD_VAR 0 5
25047: ARRAY
25048: ARRAY
25049: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25050: LD_ADDR_VAR 0 7
25054: PUSH
25055: LD_VAR 0 7
25059: PUSH
25060: LD_VAR 0 6
25064: PUSH
25065: EMPTY
25066: LIST
25067: ADD
25068: ST_TO_ADDR
// end ;
25069: GO 25025
25071: POP
25072: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25073: LD_ADDR_VAR 0 6
25077: PUSH
25078: LD_VAR 0 6
25082: PPUSH
25083: LD_VAR 0 2
25087: PUSH
25088: LD_VAR 0 2
25092: ARRAY
25093: PPUSH
25094: LD_VAR 0 3
25098: PPUSH
25099: CALL_OW 1
25103: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25104: LD_ADDR_VAR 0 7
25108: PUSH
25109: LD_VAR 0 7
25113: PPUSH
25114: LD_VAR 0 7
25118: PPUSH
25119: LD_VAR 0 6
25123: PPUSH
25124: CALL_OW 1
25128: ST_TO_ADDR
// for i = s_arr downto 2 do
25129: LD_ADDR_VAR 0 5
25133: PUSH
25134: DOUBLE
25135: LD_VAR 0 7
25139: INC
25140: ST_TO_ADDR
25141: LD_INT 2
25143: PUSH
25144: FOR_DOWNTO
25145: IFFALSE 25229
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25147: LD_ADDR_VAR 0 6
25151: PUSH
25152: LD_VAR 0 7
25156: PUSH
25157: LD_VAR 0 5
25161: PUSH
25162: LD_INT 1
25164: MINUS
25165: ARRAY
25166: PPUSH
25167: LD_VAR 0 2
25171: PUSH
25172: LD_VAR 0 5
25176: PUSH
25177: LD_INT 1
25179: MINUS
25180: ARRAY
25181: PPUSH
25182: LD_VAR 0 7
25186: PUSH
25187: LD_VAR 0 5
25191: ARRAY
25192: PPUSH
25193: CALL_OW 1
25197: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25198: LD_ADDR_VAR 0 7
25202: PUSH
25203: LD_VAR 0 7
25207: PPUSH
25208: LD_VAR 0 5
25212: PUSH
25213: LD_INT 1
25215: MINUS
25216: PPUSH
25217: LD_VAR 0 6
25221: PPUSH
25222: CALL_OW 1
25226: ST_TO_ADDR
// end ;
25227: GO 25144
25229: POP
25230: POP
// result := s_arr [ 1 ] ;
25231: LD_ADDR_VAR 0 4
25235: PUSH
25236: LD_VAR 0 7
25240: PUSH
25241: LD_INT 1
25243: ARRAY
25244: ST_TO_ADDR
// end ; end ;
25245: LD_VAR 0 4
25249: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25250: LD_INT 0
25252: PPUSH
25253: PPUSH
// if not list then
25254: LD_VAR 0 1
25258: NOT
25259: IFFALSE 25263
// exit ;
25261: GO 25354
// i := list [ pos1 ] ;
25263: LD_ADDR_VAR 0 5
25267: PUSH
25268: LD_VAR 0 1
25272: PUSH
25273: LD_VAR 0 2
25277: ARRAY
25278: ST_TO_ADDR
// if not i then
25279: LD_VAR 0 5
25283: NOT
25284: IFFALSE 25288
// exit ;
25286: GO 25354
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25288: LD_ADDR_VAR 0 1
25292: PUSH
25293: LD_VAR 0 1
25297: PPUSH
25298: LD_VAR 0 2
25302: PPUSH
25303: LD_VAR 0 1
25307: PUSH
25308: LD_VAR 0 3
25312: ARRAY
25313: PPUSH
25314: CALL_OW 1
25318: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25319: LD_ADDR_VAR 0 1
25323: PUSH
25324: LD_VAR 0 1
25328: PPUSH
25329: LD_VAR 0 3
25333: PPUSH
25334: LD_VAR 0 5
25338: PPUSH
25339: CALL_OW 1
25343: ST_TO_ADDR
// result := list ;
25344: LD_ADDR_VAR 0 4
25348: PUSH
25349: LD_VAR 0 1
25353: ST_TO_ADDR
// end ;
25354: LD_VAR 0 4
25358: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25359: LD_INT 0
25361: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25362: LD_ADDR_VAR 0 5
25366: PUSH
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL_OW 250
25376: PPUSH
25377: LD_VAR 0 1
25381: PPUSH
25382: CALL_OW 251
25386: PPUSH
25387: LD_VAR 0 2
25391: PPUSH
25392: LD_VAR 0 3
25396: PPUSH
25397: LD_VAR 0 4
25401: PPUSH
25402: CALL 25412 0 5
25406: ST_TO_ADDR
// end ;
25407: LD_VAR 0 5
25411: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25412: LD_INT 0
25414: PPUSH
25415: PPUSH
25416: PPUSH
25417: PPUSH
// if not list then
25418: LD_VAR 0 3
25422: NOT
25423: IFFALSE 25427
// exit ;
25425: GO 25815
// result := [ ] ;
25427: LD_ADDR_VAR 0 6
25431: PUSH
25432: EMPTY
25433: ST_TO_ADDR
// for i in list do
25434: LD_ADDR_VAR 0 7
25438: PUSH
25439: LD_VAR 0 3
25443: PUSH
25444: FOR_IN
25445: IFFALSE 25647
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25447: LD_ADDR_VAR 0 9
25451: PUSH
25452: LD_VAR 0 7
25456: PPUSH
25457: LD_VAR 0 1
25461: PPUSH
25462: LD_VAR 0 2
25466: PPUSH
25467: CALL_OW 297
25471: ST_TO_ADDR
// if not result then
25472: LD_VAR 0 6
25476: NOT
25477: IFFALSE 25503
// result := [ [ i , tmp ] ] else
25479: LD_ADDR_VAR 0 6
25483: PUSH
25484: LD_VAR 0 7
25488: PUSH
25489: LD_VAR 0 9
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: EMPTY
25499: LIST
25500: ST_TO_ADDR
25501: GO 25645
// begin if result [ result ] [ 2 ] < tmp then
25503: LD_VAR 0 6
25507: PUSH
25508: LD_VAR 0 6
25512: ARRAY
25513: PUSH
25514: LD_INT 2
25516: ARRAY
25517: PUSH
25518: LD_VAR 0 9
25522: LESS
25523: IFFALSE 25565
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25525: LD_ADDR_VAR 0 6
25529: PUSH
25530: LD_VAR 0 6
25534: PPUSH
25535: LD_VAR 0 6
25539: PUSH
25540: LD_INT 1
25542: PLUS
25543: PPUSH
25544: LD_VAR 0 7
25548: PUSH
25549: LD_VAR 0 9
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PPUSH
25558: CALL_OW 2
25562: ST_TO_ADDR
25563: GO 25645
// for j = 1 to result do
25565: LD_ADDR_VAR 0 8
25569: PUSH
25570: DOUBLE
25571: LD_INT 1
25573: DEC
25574: ST_TO_ADDR
25575: LD_VAR 0 6
25579: PUSH
25580: FOR_TO
25581: IFFALSE 25643
// begin if tmp < result [ j ] [ 2 ] then
25583: LD_VAR 0 9
25587: PUSH
25588: LD_VAR 0 6
25592: PUSH
25593: LD_VAR 0 8
25597: ARRAY
25598: PUSH
25599: LD_INT 2
25601: ARRAY
25602: LESS
25603: IFFALSE 25641
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25605: LD_ADDR_VAR 0 6
25609: PUSH
25610: LD_VAR 0 6
25614: PPUSH
25615: LD_VAR 0 8
25619: PPUSH
25620: LD_VAR 0 7
25624: PUSH
25625: LD_VAR 0 9
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PPUSH
25634: CALL_OW 2
25638: ST_TO_ADDR
// break ;
25639: GO 25643
// end ; end ;
25641: GO 25580
25643: POP
25644: POP
// end ; end ;
25645: GO 25444
25647: POP
25648: POP
// if result and not asc then
25649: LD_VAR 0 6
25653: PUSH
25654: LD_VAR 0 4
25658: NOT
25659: AND
25660: IFFALSE 25735
// begin tmp := result ;
25662: LD_ADDR_VAR 0 9
25666: PUSH
25667: LD_VAR 0 6
25671: ST_TO_ADDR
// for i = tmp downto 1 do
25672: LD_ADDR_VAR 0 7
25676: PUSH
25677: DOUBLE
25678: LD_VAR 0 9
25682: INC
25683: ST_TO_ADDR
25684: LD_INT 1
25686: PUSH
25687: FOR_DOWNTO
25688: IFFALSE 25733
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25690: LD_ADDR_VAR 0 6
25694: PUSH
25695: LD_VAR 0 6
25699: PPUSH
25700: LD_VAR 0 9
25704: PUSH
25705: LD_VAR 0 7
25709: MINUS
25710: PUSH
25711: LD_INT 1
25713: PLUS
25714: PPUSH
25715: LD_VAR 0 9
25719: PUSH
25720: LD_VAR 0 7
25724: ARRAY
25725: PPUSH
25726: CALL_OW 1
25730: ST_TO_ADDR
25731: GO 25687
25733: POP
25734: POP
// end ; tmp := [ ] ;
25735: LD_ADDR_VAR 0 9
25739: PUSH
25740: EMPTY
25741: ST_TO_ADDR
// if mode then
25742: LD_VAR 0 5
25746: IFFALSE 25815
// begin for i = 1 to result do
25748: LD_ADDR_VAR 0 7
25752: PUSH
25753: DOUBLE
25754: LD_INT 1
25756: DEC
25757: ST_TO_ADDR
25758: LD_VAR 0 6
25762: PUSH
25763: FOR_TO
25764: IFFALSE 25803
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25766: LD_ADDR_VAR 0 9
25770: PUSH
25771: LD_VAR 0 9
25775: PPUSH
25776: LD_VAR 0 7
25780: PPUSH
25781: LD_VAR 0 6
25785: PUSH
25786: LD_VAR 0 7
25790: ARRAY
25791: PUSH
25792: LD_INT 1
25794: ARRAY
25795: PPUSH
25796: CALL_OW 1
25800: ST_TO_ADDR
25801: GO 25763
25803: POP
25804: POP
// result := tmp ;
25805: LD_ADDR_VAR 0 6
25809: PUSH
25810: LD_VAR 0 9
25814: ST_TO_ADDR
// end ; end ;
25815: LD_VAR 0 6
25819: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25820: LD_INT 0
25822: PPUSH
25823: PPUSH
25824: PPUSH
25825: PPUSH
25826: PPUSH
25827: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25828: LD_ADDR_VAR 0 5
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: EMPTY
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: ST_TO_ADDR
// if not x or not y then
25850: LD_VAR 0 2
25854: NOT
25855: PUSH
25856: LD_VAR 0 3
25860: NOT
25861: OR
25862: IFFALSE 25866
// exit ;
25864: GO 27518
// if not range then
25866: LD_VAR 0 4
25870: NOT
25871: IFFALSE 25881
// range := 10 ;
25873: LD_ADDR_VAR 0 4
25877: PUSH
25878: LD_INT 10
25880: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25881: LD_ADDR_VAR 0 8
25885: PUSH
25886: LD_INT 81
25888: PUSH
25889: LD_VAR 0 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 92
25900: PUSH
25901: LD_VAR 0 2
25905: PUSH
25906: LD_VAR 0 3
25910: PUSH
25911: LD_VAR 0 4
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 3
25924: PUSH
25925: LD_INT 21
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: LIST
25943: PPUSH
25944: CALL_OW 69
25948: ST_TO_ADDR
// if not tmp then
25949: LD_VAR 0 8
25953: NOT
25954: IFFALSE 25958
// exit ;
25956: GO 27518
// for i in tmp do
25958: LD_ADDR_VAR 0 6
25962: PUSH
25963: LD_VAR 0 8
25967: PUSH
25968: FOR_IN
25969: IFFALSE 27493
// begin points := [ 0 , 0 , 0 ] ;
25971: LD_ADDR_VAR 0 9
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: ST_TO_ADDR
// bpoints := 1 ;
25990: LD_ADDR_VAR 0 10
25994: PUSH
25995: LD_INT 1
25997: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25998: LD_VAR 0 6
26002: PPUSH
26003: CALL_OW 247
26007: PUSH
26008: LD_INT 1
26010: DOUBLE
26011: EQUAL
26012: IFTRUE 26016
26014: GO 26594
26016: POP
// begin if GetClass ( i ) = 1 then
26017: LD_VAR 0 6
26021: PPUSH
26022: CALL_OW 257
26026: PUSH
26027: LD_INT 1
26029: EQUAL
26030: IFFALSE 26051
// points := [ 10 , 5 , 3 ] ;
26032: LD_ADDR_VAR 0 9
26036: PUSH
26037: LD_INT 10
26039: PUSH
26040: LD_INT 5
26042: PUSH
26043: LD_INT 3
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: LIST
26050: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26051: LD_VAR 0 6
26055: PPUSH
26056: CALL_OW 257
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: LD_INT 3
26066: PUSH
26067: LD_INT 4
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: LIST
26074: IN
26075: IFFALSE 26096
// points := [ 3 , 2 , 1 ] ;
26077: LD_ADDR_VAR 0 9
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: LIST
26095: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26096: LD_VAR 0 6
26100: PPUSH
26101: CALL_OW 257
26105: PUSH
26106: LD_INT 5
26108: EQUAL
26109: IFFALSE 26130
// points := [ 130 , 5 , 2 ] ;
26111: LD_ADDR_VAR 0 9
26115: PUSH
26116: LD_INT 130
26118: PUSH
26119: LD_INT 5
26121: PUSH
26122: LD_INT 2
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26130: LD_VAR 0 6
26134: PPUSH
26135: CALL_OW 257
26139: PUSH
26140: LD_INT 8
26142: EQUAL
26143: IFFALSE 26164
// points := [ 35 , 35 , 30 ] ;
26145: LD_ADDR_VAR 0 9
26149: PUSH
26150: LD_INT 35
26152: PUSH
26153: LD_INT 35
26155: PUSH
26156: LD_INT 30
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: LIST
26163: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26164: LD_VAR 0 6
26168: PPUSH
26169: CALL_OW 257
26173: PUSH
26174: LD_INT 9
26176: EQUAL
26177: IFFALSE 26198
// points := [ 20 , 55 , 40 ] ;
26179: LD_ADDR_VAR 0 9
26183: PUSH
26184: LD_INT 20
26186: PUSH
26187: LD_INT 55
26189: PUSH
26190: LD_INT 40
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26198: LD_VAR 0 6
26202: PPUSH
26203: CALL_OW 257
26207: PUSH
26208: LD_INT 12
26210: PUSH
26211: LD_INT 16
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: IN
26218: IFFALSE 26239
// points := [ 5 , 3 , 2 ] ;
26220: LD_ADDR_VAR 0 9
26224: PUSH
26225: LD_INT 5
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26239: LD_VAR 0 6
26243: PPUSH
26244: CALL_OW 257
26248: PUSH
26249: LD_INT 17
26251: EQUAL
26252: IFFALSE 26273
// points := [ 100 , 50 , 75 ] ;
26254: LD_ADDR_VAR 0 9
26258: PUSH
26259: LD_INT 100
26261: PUSH
26262: LD_INT 50
26264: PUSH
26265: LD_INT 75
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26273: LD_VAR 0 6
26277: PPUSH
26278: CALL_OW 257
26282: PUSH
26283: LD_INT 15
26285: EQUAL
26286: IFFALSE 26307
// points := [ 10 , 5 , 3 ] ;
26288: LD_ADDR_VAR 0 9
26292: PUSH
26293: LD_INT 10
26295: PUSH
26296: LD_INT 5
26298: PUSH
26299: LD_INT 3
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26307: LD_VAR 0 6
26311: PPUSH
26312: CALL_OW 257
26316: PUSH
26317: LD_INT 14
26319: EQUAL
26320: IFFALSE 26341
// points := [ 10 , 0 , 0 ] ;
26322: LD_ADDR_VAR 0 9
26326: PUSH
26327: LD_INT 10
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26341: LD_VAR 0 6
26345: PPUSH
26346: CALL_OW 257
26350: PUSH
26351: LD_INT 11
26353: EQUAL
26354: IFFALSE 26375
// points := [ 30 , 10 , 5 ] ;
26356: LD_ADDR_VAR 0 9
26360: PUSH
26361: LD_INT 30
26363: PUSH
26364: LD_INT 10
26366: PUSH
26367: LD_INT 5
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26375: LD_VAR 0 1
26379: PPUSH
26380: LD_INT 5
26382: PPUSH
26383: CALL_OW 321
26387: PUSH
26388: LD_INT 2
26390: EQUAL
26391: IFFALSE 26408
// bpoints := bpoints * 1.8 ;
26393: LD_ADDR_VAR 0 10
26397: PUSH
26398: LD_VAR 0 10
26402: PUSH
26403: LD_REAL  1.80000000000000E+0000
26406: MUL
26407: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26408: LD_VAR 0 6
26412: PPUSH
26413: CALL_OW 257
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: LD_INT 2
26423: PUSH
26424: LD_INT 3
26426: PUSH
26427: LD_INT 4
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: IN
26436: PUSH
26437: LD_VAR 0 1
26441: PPUSH
26442: LD_INT 51
26444: PPUSH
26445: CALL_OW 321
26449: PUSH
26450: LD_INT 2
26452: EQUAL
26453: AND
26454: IFFALSE 26471
// bpoints := bpoints * 1.2 ;
26456: LD_ADDR_VAR 0 10
26460: PUSH
26461: LD_VAR 0 10
26465: PUSH
26466: LD_REAL  1.20000000000000E+0000
26469: MUL
26470: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26471: LD_VAR 0 6
26475: PPUSH
26476: CALL_OW 257
26480: PUSH
26481: LD_INT 5
26483: PUSH
26484: LD_INT 7
26486: PUSH
26487: LD_INT 9
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: IN
26495: PUSH
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_INT 52
26503: PPUSH
26504: CALL_OW 321
26508: PUSH
26509: LD_INT 2
26511: EQUAL
26512: AND
26513: IFFALSE 26530
// bpoints := bpoints * 1.5 ;
26515: LD_ADDR_VAR 0 10
26519: PUSH
26520: LD_VAR 0 10
26524: PUSH
26525: LD_REAL  1.50000000000000E+0000
26528: MUL
26529: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26530: LD_VAR 0 1
26534: PPUSH
26535: LD_INT 66
26537: PPUSH
26538: CALL_OW 321
26542: PUSH
26543: LD_INT 2
26545: EQUAL
26546: IFFALSE 26563
// bpoints := bpoints * 1.1 ;
26548: LD_ADDR_VAR 0 10
26552: PUSH
26553: LD_VAR 0 10
26557: PUSH
26558: LD_REAL  1.10000000000000E+0000
26561: MUL
26562: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26563: LD_ADDR_VAR 0 10
26567: PUSH
26568: LD_VAR 0 10
26572: PUSH
26573: LD_VAR 0 6
26577: PPUSH
26578: LD_INT 1
26580: PPUSH
26581: CALL_OW 259
26585: PUSH
26586: LD_REAL  1.15000000000000E+0000
26589: MUL
26590: MUL
26591: ST_TO_ADDR
// end ; unit_vehicle :
26592: GO 27422
26594: LD_INT 2
26596: DOUBLE
26597: EQUAL
26598: IFTRUE 26602
26600: GO 27410
26602: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26603: LD_VAR 0 6
26607: PPUSH
26608: CALL_OW 264
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: LD_INT 42
26618: PUSH
26619: LD_INT 24
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: IN
26627: IFFALSE 26648
// points := [ 25 , 5 , 3 ] ;
26629: LD_ADDR_VAR 0 9
26633: PUSH
26634: LD_INT 25
26636: PUSH
26637: LD_INT 5
26639: PUSH
26640: LD_INT 3
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26648: LD_VAR 0 6
26652: PPUSH
26653: CALL_OW 264
26657: PUSH
26658: LD_INT 4
26660: PUSH
26661: LD_INT 43
26663: PUSH
26664: LD_INT 25
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: LIST
26671: IN
26672: IFFALSE 26693
// points := [ 40 , 15 , 5 ] ;
26674: LD_ADDR_VAR 0 9
26678: PUSH
26679: LD_INT 40
26681: PUSH
26682: LD_INT 15
26684: PUSH
26685: LD_INT 5
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: LIST
26692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26693: LD_VAR 0 6
26697: PPUSH
26698: CALL_OW 264
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: LD_INT 23
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: IN
26713: IFFALSE 26734
// points := [ 7 , 25 , 8 ] ;
26715: LD_ADDR_VAR 0 9
26719: PUSH
26720: LD_INT 7
26722: PUSH
26723: LD_INT 25
26725: PUSH
26726: LD_INT 8
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26734: LD_VAR 0 6
26738: PPUSH
26739: CALL_OW 264
26743: PUSH
26744: LD_INT 5
26746: PUSH
26747: LD_INT 27
26749: PUSH
26750: LD_INT 44
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: IN
26758: IFFALSE 26779
// points := [ 14 , 50 , 16 ] ;
26760: LD_ADDR_VAR 0 9
26764: PUSH
26765: LD_INT 14
26767: PUSH
26768: LD_INT 50
26770: PUSH
26771: LD_INT 16
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26779: LD_VAR 0 6
26783: PPUSH
26784: CALL_OW 264
26788: PUSH
26789: LD_INT 6
26791: PUSH
26792: LD_INT 46
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: IN
26799: IFFALSE 26820
// points := [ 32 , 120 , 70 ] ;
26801: LD_ADDR_VAR 0 9
26805: PUSH
26806: LD_INT 32
26808: PUSH
26809: LD_INT 120
26811: PUSH
26812: LD_INT 70
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26820: LD_VAR 0 6
26824: PPUSH
26825: CALL_OW 264
26829: PUSH
26830: LD_INT 7
26832: PUSH
26833: LD_INT 28
26835: PUSH
26836: LD_INT 45
26838: PUSH
26839: LD_EXP 82
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: IN
26850: IFFALSE 26871
// points := [ 35 , 20 , 45 ] ;
26852: LD_ADDR_VAR 0 9
26856: PUSH
26857: LD_INT 35
26859: PUSH
26860: LD_INT 20
26862: PUSH
26863: LD_INT 45
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: LIST
26870: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26871: LD_VAR 0 6
26875: PPUSH
26876: CALL_OW 264
26880: PUSH
26881: LD_INT 47
26883: PUSH
26884: EMPTY
26885: LIST
26886: IN
26887: IFFALSE 26908
// points := [ 67 , 45 , 75 ] ;
26889: LD_ADDR_VAR 0 9
26893: PUSH
26894: LD_INT 67
26896: PUSH
26897: LD_INT 45
26899: PUSH
26900: LD_INT 75
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: LIST
26907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26908: LD_VAR 0 6
26912: PPUSH
26913: CALL_OW 264
26917: PUSH
26918: LD_INT 26
26920: PUSH
26921: EMPTY
26922: LIST
26923: IN
26924: IFFALSE 26945
// points := [ 120 , 30 , 80 ] ;
26926: LD_ADDR_VAR 0 9
26930: PUSH
26931: LD_INT 120
26933: PUSH
26934: LD_INT 30
26936: PUSH
26937: LD_INT 80
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26945: LD_VAR 0 6
26949: PPUSH
26950: CALL_OW 264
26954: PUSH
26955: LD_INT 22
26957: PUSH
26958: EMPTY
26959: LIST
26960: IN
26961: IFFALSE 26982
// points := [ 40 , 1 , 1 ] ;
26963: LD_ADDR_VAR 0 9
26967: PUSH
26968: LD_INT 40
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26982: LD_VAR 0 6
26986: PPUSH
26987: CALL_OW 264
26991: PUSH
26992: LD_INT 29
26994: PUSH
26995: EMPTY
26996: LIST
26997: IN
26998: IFFALSE 27019
// points := [ 70 , 200 , 400 ] ;
27000: LD_ADDR_VAR 0 9
27004: PUSH
27005: LD_INT 70
27007: PUSH
27008: LD_INT 200
27010: PUSH
27011: LD_INT 400
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: LIST
27018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27019: LD_VAR 0 6
27023: PPUSH
27024: CALL_OW 264
27028: PUSH
27029: LD_INT 14
27031: PUSH
27032: LD_INT 53
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: IN
27039: IFFALSE 27060
// points := [ 40 , 10 , 20 ] ;
27041: LD_ADDR_VAR 0 9
27045: PUSH
27046: LD_INT 40
27048: PUSH
27049: LD_INT 10
27051: PUSH
27052: LD_INT 20
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27060: LD_VAR 0 6
27064: PPUSH
27065: CALL_OW 264
27069: PUSH
27070: LD_INT 9
27072: PUSH
27073: EMPTY
27074: LIST
27075: IN
27076: IFFALSE 27097
// points := [ 5 , 70 , 20 ] ;
27078: LD_ADDR_VAR 0 9
27082: PUSH
27083: LD_INT 5
27085: PUSH
27086: LD_INT 70
27088: PUSH
27089: LD_INT 20
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27097: LD_VAR 0 6
27101: PPUSH
27102: CALL_OW 264
27106: PUSH
27107: LD_INT 10
27109: PUSH
27110: EMPTY
27111: LIST
27112: IN
27113: IFFALSE 27134
// points := [ 35 , 110 , 70 ] ;
27115: LD_ADDR_VAR 0 9
27119: PUSH
27120: LD_INT 35
27122: PUSH
27123: LD_INT 110
27125: PUSH
27126: LD_INT 70
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: LIST
27133: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27134: LD_VAR 0 6
27138: PPUSH
27139: CALL_OW 265
27143: PUSH
27144: LD_INT 25
27146: EQUAL
27147: IFFALSE 27168
// points := [ 80 , 65 , 100 ] ;
27149: LD_ADDR_VAR 0 9
27153: PUSH
27154: LD_INT 80
27156: PUSH
27157: LD_INT 65
27159: PUSH
27160: LD_INT 100
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27168: LD_VAR 0 6
27172: PPUSH
27173: CALL_OW 263
27177: PUSH
27178: LD_INT 1
27180: EQUAL
27181: IFFALSE 27216
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27183: LD_ADDR_VAR 0 10
27187: PUSH
27188: LD_VAR 0 10
27192: PUSH
27193: LD_VAR 0 6
27197: PPUSH
27198: CALL_OW 311
27202: PPUSH
27203: LD_INT 3
27205: PPUSH
27206: CALL_OW 259
27210: PUSH
27211: LD_INT 4
27213: MUL
27214: MUL
27215: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27216: LD_VAR 0 6
27220: PPUSH
27221: CALL_OW 263
27225: PUSH
27226: LD_INT 2
27228: EQUAL
27229: IFFALSE 27280
// begin j := IsControledBy ( i ) ;
27231: LD_ADDR_VAR 0 7
27235: PUSH
27236: LD_VAR 0 6
27240: PPUSH
27241: CALL_OW 312
27245: ST_TO_ADDR
// if j then
27246: LD_VAR 0 7
27250: IFFALSE 27280
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27252: LD_ADDR_VAR 0 10
27256: PUSH
27257: LD_VAR 0 10
27261: PUSH
27262: LD_VAR 0 7
27266: PPUSH
27267: LD_INT 3
27269: PPUSH
27270: CALL_OW 259
27274: PUSH
27275: LD_INT 3
27277: MUL
27278: MUL
27279: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27280: LD_VAR 0 6
27284: PPUSH
27285: CALL_OW 264
27289: PUSH
27290: LD_INT 5
27292: PUSH
27293: LD_INT 6
27295: PUSH
27296: LD_INT 46
27298: PUSH
27299: LD_INT 44
27301: PUSH
27302: LD_INT 47
27304: PUSH
27305: LD_INT 45
27307: PUSH
27308: LD_INT 28
27310: PUSH
27311: LD_INT 7
27313: PUSH
27314: LD_INT 27
27316: PUSH
27317: LD_INT 29
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: IN
27332: PUSH
27333: LD_VAR 0 1
27337: PPUSH
27338: LD_INT 52
27340: PPUSH
27341: CALL_OW 321
27345: PUSH
27346: LD_INT 2
27348: EQUAL
27349: AND
27350: IFFALSE 27367
// bpoints := bpoints * 1.2 ;
27352: LD_ADDR_VAR 0 10
27356: PUSH
27357: LD_VAR 0 10
27361: PUSH
27362: LD_REAL  1.20000000000000E+0000
27365: MUL
27366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27367: LD_VAR 0 6
27371: PPUSH
27372: CALL_OW 264
27376: PUSH
27377: LD_INT 6
27379: PUSH
27380: LD_INT 46
27382: PUSH
27383: LD_INT 47
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: IN
27391: IFFALSE 27408
// bpoints := bpoints * 1.2 ;
27393: LD_ADDR_VAR 0 10
27397: PUSH
27398: LD_VAR 0 10
27402: PUSH
27403: LD_REAL  1.20000000000000E+0000
27406: MUL
27407: ST_TO_ADDR
// end ; unit_building :
27408: GO 27422
27410: LD_INT 3
27412: DOUBLE
27413: EQUAL
27414: IFTRUE 27418
27416: GO 27421
27418: POP
// ; end ;
27419: GO 27422
27421: POP
// for j = 1 to 3 do
27422: LD_ADDR_VAR 0 7
27426: PUSH
27427: DOUBLE
27428: LD_INT 1
27430: DEC
27431: ST_TO_ADDR
27432: LD_INT 3
27434: PUSH
27435: FOR_TO
27436: IFFALSE 27489
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27438: LD_ADDR_VAR 0 5
27442: PUSH
27443: LD_VAR 0 5
27447: PPUSH
27448: LD_VAR 0 7
27452: PPUSH
27453: LD_VAR 0 5
27457: PUSH
27458: LD_VAR 0 7
27462: ARRAY
27463: PUSH
27464: LD_VAR 0 9
27468: PUSH
27469: LD_VAR 0 7
27473: ARRAY
27474: PUSH
27475: LD_VAR 0 10
27479: MUL
27480: PLUS
27481: PPUSH
27482: CALL_OW 1
27486: ST_TO_ADDR
27487: GO 27435
27489: POP
27490: POP
// end ;
27491: GO 25968
27493: POP
27494: POP
// result := Replace ( result , 4 , tmp ) ;
27495: LD_ADDR_VAR 0 5
27499: PUSH
27500: LD_VAR 0 5
27504: PPUSH
27505: LD_INT 4
27507: PPUSH
27508: LD_VAR 0 8
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// end ;
27518: LD_VAR 0 5
27522: RET
// export function DangerAtRange ( unit , range ) ; begin
27523: LD_INT 0
27525: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27526: LD_ADDR_VAR 0 3
27530: PUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 255
27540: PPUSH
27541: LD_VAR 0 1
27545: PPUSH
27546: CALL_OW 250
27550: PPUSH
27551: LD_VAR 0 1
27555: PPUSH
27556: CALL_OW 251
27560: PPUSH
27561: LD_VAR 0 2
27565: PPUSH
27566: CALL 25820 0 4
27570: ST_TO_ADDR
// end ;
27571: LD_VAR 0 3
27575: RET
// export function DangerInArea ( side , area ) ; begin
27576: LD_INT 0
27578: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27579: LD_ADDR_VAR 0 3
27583: PUSH
27584: LD_VAR 0 2
27588: PPUSH
27589: LD_INT 81
27591: PUSH
27592: LD_VAR 0 1
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 70
27605: ST_TO_ADDR
// end ;
27606: LD_VAR 0 3
27610: RET
// export function IsExtension ( b ) ; begin
27611: LD_INT 0
27613: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27614: LD_ADDR_VAR 0 2
27618: PUSH
27619: LD_VAR 0 1
27623: PUSH
27624: LD_INT 23
27626: PUSH
27627: LD_INT 20
27629: PUSH
27630: LD_INT 22
27632: PUSH
27633: LD_INT 17
27635: PUSH
27636: LD_INT 24
27638: PUSH
27639: LD_INT 21
27641: PUSH
27642: LD_INT 19
27644: PUSH
27645: LD_INT 16
27647: PUSH
27648: LD_INT 25
27650: PUSH
27651: LD_INT 18
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: IN
27666: ST_TO_ADDR
// end ;
27667: LD_VAR 0 2
27671: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27672: LD_INT 0
27674: PPUSH
27675: PPUSH
27676: PPUSH
// result := [ ] ;
27677: LD_ADDR_VAR 0 4
27681: PUSH
27682: EMPTY
27683: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27684: LD_ADDR_VAR 0 5
27688: PUSH
27689: LD_VAR 0 2
27693: PPUSH
27694: LD_INT 21
27696: PUSH
27697: LD_INT 3
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PPUSH
27704: CALL_OW 70
27708: ST_TO_ADDR
// if not tmp then
27709: LD_VAR 0 5
27713: NOT
27714: IFFALSE 27718
// exit ;
27716: GO 27782
// if checkLink then
27718: LD_VAR 0 3
27722: IFFALSE 27772
// begin for i in tmp do
27724: LD_ADDR_VAR 0 6
27728: PUSH
27729: LD_VAR 0 5
27733: PUSH
27734: FOR_IN
27735: IFFALSE 27770
// if GetBase ( i ) <> base then
27737: LD_VAR 0 6
27741: PPUSH
27742: CALL_OW 274
27746: PUSH
27747: LD_VAR 0 1
27751: NONEQUAL
27752: IFFALSE 27768
// ComLinkToBase ( base , i ) ;
27754: LD_VAR 0 1
27758: PPUSH
27759: LD_VAR 0 6
27763: PPUSH
27764: CALL_OW 169
27768: GO 27734
27770: POP
27771: POP
// end ; result := tmp ;
27772: LD_ADDR_VAR 0 4
27776: PUSH
27777: LD_VAR 0 5
27781: ST_TO_ADDR
// end ;
27782: LD_VAR 0 4
27786: RET
// export function ComComplete ( units , b ) ; var i ; begin
27787: LD_INT 0
27789: PPUSH
27790: PPUSH
// if not units then
27791: LD_VAR 0 1
27795: NOT
27796: IFFALSE 27800
// exit ;
27798: GO 27890
// for i in units do
27800: LD_ADDR_VAR 0 4
27804: PUSH
27805: LD_VAR 0 1
27809: PUSH
27810: FOR_IN
27811: IFFALSE 27888
// if BuildingStatus ( b ) = bs_build then
27813: LD_VAR 0 2
27817: PPUSH
27818: CALL_OW 461
27822: PUSH
27823: LD_INT 1
27825: EQUAL
27826: IFFALSE 27886
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27828: LD_VAR 0 4
27832: PPUSH
27833: LD_STRING h
27835: PUSH
27836: LD_VAR 0 2
27840: PPUSH
27841: CALL_OW 250
27845: PUSH
27846: LD_VAR 0 2
27850: PPUSH
27851: CALL_OW 251
27855: PUSH
27856: LD_VAR 0 2
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: PPUSH
27882: CALL_OW 446
27886: GO 27810
27888: POP
27889: POP
// end ;
27890: LD_VAR 0 3
27894: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27895: LD_INT 0
27897: PPUSH
27898: PPUSH
27899: PPUSH
27900: PPUSH
27901: PPUSH
27902: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27903: LD_VAR 0 1
27907: NOT
27908: PUSH
27909: LD_VAR 0 1
27913: PPUSH
27914: CALL_OW 263
27918: PUSH
27919: LD_INT 2
27921: NONEQUAL
27922: OR
27923: IFFALSE 27927
// exit ;
27925: GO 28243
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27927: LD_ADDR_VAR 0 6
27931: PUSH
27932: LD_INT 22
27934: PUSH
27935: LD_VAR 0 1
27939: PPUSH
27940: CALL_OW 255
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: LD_INT 36
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 34
27964: PUSH
27965: LD_INT 31
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PPUSH
27981: CALL_OW 69
27985: ST_TO_ADDR
// if not tmp then
27986: LD_VAR 0 6
27990: NOT
27991: IFFALSE 27995
// exit ;
27993: GO 28243
// result := [ ] ;
27995: LD_ADDR_VAR 0 2
27999: PUSH
28000: EMPTY
28001: ST_TO_ADDR
// for i in tmp do
28002: LD_ADDR_VAR 0 3
28006: PUSH
28007: LD_VAR 0 6
28011: PUSH
28012: FOR_IN
28013: IFFALSE 28084
// begin t := UnitsInside ( i ) ;
28015: LD_ADDR_VAR 0 4
28019: PUSH
28020: LD_VAR 0 3
28024: PPUSH
28025: CALL_OW 313
28029: ST_TO_ADDR
// if t then
28030: LD_VAR 0 4
28034: IFFALSE 28082
// for j in t do
28036: LD_ADDR_VAR 0 7
28040: PUSH
28041: LD_VAR 0 4
28045: PUSH
28046: FOR_IN
28047: IFFALSE 28080
// result := Replace ( result , result + 1 , j ) ;
28049: LD_ADDR_VAR 0 2
28053: PUSH
28054: LD_VAR 0 2
28058: PPUSH
28059: LD_VAR 0 2
28063: PUSH
28064: LD_INT 1
28066: PLUS
28067: PPUSH
28068: LD_VAR 0 7
28072: PPUSH
28073: CALL_OW 1
28077: ST_TO_ADDR
28078: GO 28046
28080: POP
28081: POP
// end ;
28082: GO 28012
28084: POP
28085: POP
// if not result then
28086: LD_VAR 0 2
28090: NOT
28091: IFFALSE 28095
// exit ;
28093: GO 28243
// mech := result [ 1 ] ;
28095: LD_ADDR_VAR 0 5
28099: PUSH
28100: LD_VAR 0 2
28104: PUSH
28105: LD_INT 1
28107: ARRAY
28108: ST_TO_ADDR
// if result > 1 then
28109: LD_VAR 0 2
28113: PUSH
28114: LD_INT 1
28116: GREATER
28117: IFFALSE 28229
// begin for i = 2 to result do
28119: LD_ADDR_VAR 0 3
28123: PUSH
28124: DOUBLE
28125: LD_INT 2
28127: DEC
28128: ST_TO_ADDR
28129: LD_VAR 0 2
28133: PUSH
28134: FOR_TO
28135: IFFALSE 28227
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28137: LD_ADDR_VAR 0 4
28141: PUSH
28142: LD_VAR 0 2
28146: PUSH
28147: LD_VAR 0 3
28151: ARRAY
28152: PPUSH
28153: LD_INT 3
28155: PPUSH
28156: CALL_OW 259
28160: PUSH
28161: LD_VAR 0 2
28165: PUSH
28166: LD_VAR 0 3
28170: ARRAY
28171: PPUSH
28172: CALL_OW 432
28176: MINUS
28177: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28178: LD_VAR 0 4
28182: PUSH
28183: LD_VAR 0 5
28187: PPUSH
28188: LD_INT 3
28190: PPUSH
28191: CALL_OW 259
28195: PUSH
28196: LD_VAR 0 5
28200: PPUSH
28201: CALL_OW 432
28205: MINUS
28206: GREATEREQUAL
28207: IFFALSE 28225
// mech := result [ i ] ;
28209: LD_ADDR_VAR 0 5
28213: PUSH
28214: LD_VAR 0 2
28218: PUSH
28219: LD_VAR 0 3
28223: ARRAY
28224: ST_TO_ADDR
// end ;
28225: GO 28134
28227: POP
28228: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28229: LD_VAR 0 1
28233: PPUSH
28234: LD_VAR 0 5
28238: PPUSH
28239: CALL_OW 135
// end ;
28243: LD_VAR 0 2
28247: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28248: LD_INT 0
28250: PPUSH
28251: PPUSH
28252: PPUSH
28253: PPUSH
28254: PPUSH
28255: PPUSH
28256: PPUSH
28257: PPUSH
28258: PPUSH
28259: PPUSH
28260: PPUSH
28261: PPUSH
28262: PPUSH
// result := [ ] ;
28263: LD_ADDR_VAR 0 7
28267: PUSH
28268: EMPTY
28269: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28270: LD_VAR 0 1
28274: PPUSH
28275: CALL_OW 266
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: IN
28290: NOT
28291: IFFALSE 28295
// exit ;
28293: GO 29929
// if name then
28295: LD_VAR 0 3
28299: IFFALSE 28315
// SetBName ( base_dep , name ) ;
28301: LD_VAR 0 1
28305: PPUSH
28306: LD_VAR 0 3
28310: PPUSH
28311: CALL_OW 500
// base := GetBase ( base_dep ) ;
28315: LD_ADDR_VAR 0 15
28319: PUSH
28320: LD_VAR 0 1
28324: PPUSH
28325: CALL_OW 274
28329: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28330: LD_ADDR_VAR 0 16
28334: PUSH
28335: LD_VAR 0 1
28339: PPUSH
28340: CALL_OW 255
28344: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28345: LD_ADDR_VAR 0 17
28349: PUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 248
28359: ST_TO_ADDR
// if sources then
28360: LD_VAR 0 5
28364: IFFALSE 28411
// for i = 1 to 3 do
28366: LD_ADDR_VAR 0 8
28370: PUSH
28371: DOUBLE
28372: LD_INT 1
28374: DEC
28375: ST_TO_ADDR
28376: LD_INT 3
28378: PUSH
28379: FOR_TO
28380: IFFALSE 28409
// AddResourceType ( base , i , sources [ i ] ) ;
28382: LD_VAR 0 15
28386: PPUSH
28387: LD_VAR 0 8
28391: PPUSH
28392: LD_VAR 0 5
28396: PUSH
28397: LD_VAR 0 8
28401: ARRAY
28402: PPUSH
28403: CALL_OW 276
28407: GO 28379
28409: POP
28410: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28411: LD_ADDR_VAR 0 18
28415: PUSH
28416: LD_VAR 0 15
28420: PPUSH
28421: LD_VAR 0 2
28425: PPUSH
28426: LD_INT 1
28428: PPUSH
28429: CALL 27672 0 3
28433: ST_TO_ADDR
// InitHc ;
28434: CALL_OW 19
// InitUc ;
28438: CALL_OW 18
// uc_side := side ;
28442: LD_ADDR_OWVAR 20
28446: PUSH
28447: LD_VAR 0 16
28451: ST_TO_ADDR
// uc_nation := nation ;
28452: LD_ADDR_OWVAR 21
28456: PUSH
28457: LD_VAR 0 17
28461: ST_TO_ADDR
// if buildings then
28462: LD_VAR 0 18
28466: IFFALSE 29788
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28468: LD_ADDR_VAR 0 19
28472: PUSH
28473: LD_VAR 0 18
28477: PPUSH
28478: LD_INT 2
28480: PUSH
28481: LD_INT 30
28483: PUSH
28484: LD_INT 29
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 30
28493: PUSH
28494: LD_INT 30
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: PPUSH
28506: CALL_OW 72
28510: ST_TO_ADDR
// if tmp then
28511: LD_VAR 0 19
28515: IFFALSE 28563
// for i in tmp do
28517: LD_ADDR_VAR 0 8
28521: PUSH
28522: LD_VAR 0 19
28526: PUSH
28527: FOR_IN
28528: IFFALSE 28561
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28530: LD_VAR 0 8
28534: PPUSH
28535: CALL_OW 250
28539: PPUSH
28540: LD_VAR 0 8
28544: PPUSH
28545: CALL_OW 251
28549: PPUSH
28550: LD_VAR 0 16
28554: PPUSH
28555: CALL_OW 441
28559: GO 28527
28561: POP
28562: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28563: LD_VAR 0 18
28567: PPUSH
28568: LD_INT 2
28570: PUSH
28571: LD_INT 30
28573: PUSH
28574: LD_INT 32
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 30
28583: PUSH
28584: LD_INT 33
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: PPUSH
28596: CALL_OW 72
28600: IFFALSE 28688
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28602: LD_ADDR_VAR 0 8
28606: PUSH
28607: LD_VAR 0 18
28611: PPUSH
28612: LD_INT 2
28614: PUSH
28615: LD_INT 30
28617: PUSH
28618: LD_INT 32
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 30
28627: PUSH
28628: LD_INT 33
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: PPUSH
28640: CALL_OW 72
28644: PUSH
28645: FOR_IN
28646: IFFALSE 28686
// begin if not GetBWeapon ( i ) then
28648: LD_VAR 0 8
28652: PPUSH
28653: CALL_OW 269
28657: NOT
28658: IFFALSE 28684
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28660: LD_VAR 0 8
28664: PPUSH
28665: LD_VAR 0 8
28669: PPUSH
28670: LD_VAR 0 2
28674: PPUSH
28675: CALL 29934 0 2
28679: PPUSH
28680: CALL_OW 431
// end ;
28684: GO 28645
28686: POP
28687: POP
// end ; for i = 1 to personel do
28688: LD_ADDR_VAR 0 8
28692: PUSH
28693: DOUBLE
28694: LD_INT 1
28696: DEC
28697: ST_TO_ADDR
28698: LD_VAR 0 6
28702: PUSH
28703: FOR_TO
28704: IFFALSE 29768
// begin if i > 4 then
28706: LD_VAR 0 8
28710: PUSH
28711: LD_INT 4
28713: GREATER
28714: IFFALSE 28718
// break ;
28716: GO 29768
// case i of 1 :
28718: LD_VAR 0 8
28722: PUSH
28723: LD_INT 1
28725: DOUBLE
28726: EQUAL
28727: IFTRUE 28731
28729: GO 28811
28731: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28732: LD_ADDR_VAR 0 12
28736: PUSH
28737: LD_VAR 0 18
28741: PPUSH
28742: LD_INT 22
28744: PUSH
28745: LD_VAR 0 16
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 58
28756: PUSH
28757: EMPTY
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 32
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 30
28775: PUSH
28776: LD_INT 4
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 30
28785: PUSH
28786: LD_INT 5
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: PPUSH
28804: CALL_OW 72
28808: ST_TO_ADDR
28809: GO 29033
28811: LD_INT 2
28813: DOUBLE
28814: EQUAL
28815: IFTRUE 28819
28817: GO 28881
28819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28820: LD_ADDR_VAR 0 12
28824: PUSH
28825: LD_VAR 0 18
28829: PPUSH
28830: LD_INT 22
28832: PUSH
28833: LD_VAR 0 16
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: LD_INT 30
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 30
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PPUSH
28874: CALL_OW 72
28878: ST_TO_ADDR
28879: GO 29033
28881: LD_INT 3
28883: DOUBLE
28884: EQUAL
28885: IFTRUE 28889
28887: GO 28951
28889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28890: LD_ADDR_VAR 0 12
28894: PUSH
28895: LD_VAR 0 18
28899: PPUSH
28900: LD_INT 22
28902: PUSH
28903: LD_VAR 0 16
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 2
28914: PUSH
28915: LD_INT 30
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 30
28927: PUSH
28928: LD_INT 3
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PPUSH
28944: CALL_OW 72
28948: ST_TO_ADDR
28949: GO 29033
28951: LD_INT 4
28953: DOUBLE
28954: EQUAL
28955: IFTRUE 28959
28957: GO 29032
28959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28960: LD_ADDR_VAR 0 12
28964: PUSH
28965: LD_VAR 0 18
28969: PPUSH
28970: LD_INT 22
28972: PUSH
28973: LD_VAR 0 16
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: LD_INT 30
28987: PUSH
28988: LD_INT 6
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 30
28997: PUSH
28998: LD_INT 7
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 30
29007: PUSH
29008: LD_INT 8
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PPUSH
29025: CALL_OW 72
29029: ST_TO_ADDR
29030: GO 29033
29032: POP
// if i = 1 then
29033: LD_VAR 0 8
29037: PUSH
29038: LD_INT 1
29040: EQUAL
29041: IFFALSE 29152
// begin tmp := [ ] ;
29043: LD_ADDR_VAR 0 19
29047: PUSH
29048: EMPTY
29049: ST_TO_ADDR
// for j in f do
29050: LD_ADDR_VAR 0 9
29054: PUSH
29055: LD_VAR 0 12
29059: PUSH
29060: FOR_IN
29061: IFFALSE 29134
// if GetBType ( j ) = b_bunker then
29063: LD_VAR 0 9
29067: PPUSH
29068: CALL_OW 266
29072: PUSH
29073: LD_INT 32
29075: EQUAL
29076: IFFALSE 29103
// tmp := Insert ( tmp , 1 , j ) else
29078: LD_ADDR_VAR 0 19
29082: PUSH
29083: LD_VAR 0 19
29087: PPUSH
29088: LD_INT 1
29090: PPUSH
29091: LD_VAR 0 9
29095: PPUSH
29096: CALL_OW 2
29100: ST_TO_ADDR
29101: GO 29132
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29103: LD_ADDR_VAR 0 19
29107: PUSH
29108: LD_VAR 0 19
29112: PPUSH
29113: LD_VAR 0 19
29117: PUSH
29118: LD_INT 1
29120: PLUS
29121: PPUSH
29122: LD_VAR 0 9
29126: PPUSH
29127: CALL_OW 2
29131: ST_TO_ADDR
29132: GO 29060
29134: POP
29135: POP
// if tmp then
29136: LD_VAR 0 19
29140: IFFALSE 29152
// f := tmp ;
29142: LD_ADDR_VAR 0 12
29146: PUSH
29147: LD_VAR 0 19
29151: ST_TO_ADDR
// end ; x := personel [ i ] ;
29152: LD_ADDR_VAR 0 13
29156: PUSH
29157: LD_VAR 0 6
29161: PUSH
29162: LD_VAR 0 8
29166: ARRAY
29167: ST_TO_ADDR
// if x = - 1 then
29168: LD_VAR 0 13
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: EQUAL
29177: IFFALSE 29386
// begin for j in f do
29179: LD_ADDR_VAR 0 9
29183: PUSH
29184: LD_VAR 0 12
29188: PUSH
29189: FOR_IN
29190: IFFALSE 29382
// repeat InitHc ;
29192: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29196: LD_VAR 0 9
29200: PPUSH
29201: CALL_OW 266
29205: PUSH
29206: LD_INT 5
29208: EQUAL
29209: IFFALSE 29279
// begin if UnitsInside ( j ) < 3 then
29211: LD_VAR 0 9
29215: PPUSH
29216: CALL_OW 313
29220: PUSH
29221: LD_INT 3
29223: LESS
29224: IFFALSE 29260
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29226: LD_INT 0
29228: PPUSH
29229: LD_INT 5
29231: PUSH
29232: LD_INT 8
29234: PUSH
29235: LD_INT 9
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: PUSH
29243: LD_VAR 0 17
29247: ARRAY
29248: PPUSH
29249: LD_VAR 0 4
29253: PPUSH
29254: CALL_OW 380
29258: GO 29277
// PrepareHuman ( false , i , skill ) ;
29260: LD_INT 0
29262: PPUSH
29263: LD_VAR 0 8
29267: PPUSH
29268: LD_VAR 0 4
29272: PPUSH
29273: CALL_OW 380
// end else
29277: GO 29296
// PrepareHuman ( false , i , skill ) ;
29279: LD_INT 0
29281: PPUSH
29282: LD_VAR 0 8
29286: PPUSH
29287: LD_VAR 0 4
29291: PPUSH
29292: CALL_OW 380
// un := CreateHuman ;
29296: LD_ADDR_VAR 0 14
29300: PUSH
29301: CALL_OW 44
29305: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29306: LD_ADDR_VAR 0 7
29310: PUSH
29311: LD_VAR 0 7
29315: PPUSH
29316: LD_INT 1
29318: PPUSH
29319: LD_VAR 0 14
29323: PPUSH
29324: CALL_OW 2
29328: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29329: LD_VAR 0 14
29333: PPUSH
29334: LD_VAR 0 9
29338: PPUSH
29339: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29343: LD_VAR 0 9
29347: PPUSH
29348: CALL_OW 313
29352: PUSH
29353: LD_INT 6
29355: EQUAL
29356: PUSH
29357: LD_VAR 0 9
29361: PPUSH
29362: CALL_OW 266
29366: PUSH
29367: LD_INT 32
29369: PUSH
29370: LD_INT 31
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: IN
29377: OR
29378: IFFALSE 29192
29380: GO 29189
29382: POP
29383: POP
// end else
29384: GO 29766
// for j = 1 to x do
29386: LD_ADDR_VAR 0 9
29390: PUSH
29391: DOUBLE
29392: LD_INT 1
29394: DEC
29395: ST_TO_ADDR
29396: LD_VAR 0 13
29400: PUSH
29401: FOR_TO
29402: IFFALSE 29764
// begin InitHc ;
29404: CALL_OW 19
// if not f then
29408: LD_VAR 0 12
29412: NOT
29413: IFFALSE 29502
// begin PrepareHuman ( false , i , skill ) ;
29415: LD_INT 0
29417: PPUSH
29418: LD_VAR 0 8
29422: PPUSH
29423: LD_VAR 0 4
29427: PPUSH
29428: CALL_OW 380
// un := CreateHuman ;
29432: LD_ADDR_VAR 0 14
29436: PUSH
29437: CALL_OW 44
29441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29442: LD_ADDR_VAR 0 7
29446: PUSH
29447: LD_VAR 0 7
29451: PPUSH
29452: LD_INT 1
29454: PPUSH
29455: LD_VAR 0 14
29459: PPUSH
29460: CALL_OW 2
29464: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29465: LD_VAR 0 14
29469: PPUSH
29470: LD_VAR 0 1
29474: PPUSH
29475: CALL_OW 250
29479: PPUSH
29480: LD_VAR 0 1
29484: PPUSH
29485: CALL_OW 251
29489: PPUSH
29490: LD_INT 10
29492: PPUSH
29493: LD_INT 0
29495: PPUSH
29496: CALL_OW 50
// continue ;
29500: GO 29401
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29502: LD_VAR 0 12
29506: PUSH
29507: LD_INT 1
29509: ARRAY
29510: PPUSH
29511: CALL_OW 313
29515: PUSH
29516: LD_VAR 0 12
29520: PUSH
29521: LD_INT 1
29523: ARRAY
29524: PPUSH
29525: CALL_OW 266
29529: PUSH
29530: LD_INT 32
29532: PUSH
29533: LD_INT 31
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: IN
29540: AND
29541: PUSH
29542: LD_VAR 0 12
29546: PUSH
29547: LD_INT 1
29549: ARRAY
29550: PPUSH
29551: CALL_OW 313
29555: PUSH
29556: LD_INT 6
29558: EQUAL
29559: OR
29560: IFFALSE 29580
// f := Delete ( f , 1 ) ;
29562: LD_ADDR_VAR 0 12
29566: PUSH
29567: LD_VAR 0 12
29571: PPUSH
29572: LD_INT 1
29574: PPUSH
29575: CALL_OW 3
29579: ST_TO_ADDR
// if not f then
29580: LD_VAR 0 12
29584: NOT
29585: IFFALSE 29603
// begin x := x + 2 ;
29587: LD_ADDR_VAR 0 13
29591: PUSH
29592: LD_VAR 0 13
29596: PUSH
29597: LD_INT 2
29599: PLUS
29600: ST_TO_ADDR
// continue ;
29601: GO 29401
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29603: LD_VAR 0 12
29607: PUSH
29608: LD_INT 1
29610: ARRAY
29611: PPUSH
29612: CALL_OW 266
29616: PUSH
29617: LD_INT 5
29619: EQUAL
29620: IFFALSE 29694
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29622: LD_VAR 0 12
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: PPUSH
29631: CALL_OW 313
29635: PUSH
29636: LD_INT 3
29638: LESS
29639: IFFALSE 29675
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29641: LD_INT 0
29643: PPUSH
29644: LD_INT 5
29646: PUSH
29647: LD_INT 8
29649: PUSH
29650: LD_INT 9
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: PUSH
29658: LD_VAR 0 17
29662: ARRAY
29663: PPUSH
29664: LD_VAR 0 4
29668: PPUSH
29669: CALL_OW 380
29673: GO 29692
// PrepareHuman ( false , i , skill ) ;
29675: LD_INT 0
29677: PPUSH
29678: LD_VAR 0 8
29682: PPUSH
29683: LD_VAR 0 4
29687: PPUSH
29688: CALL_OW 380
// end else
29692: GO 29711
// PrepareHuman ( false , i , skill ) ;
29694: LD_INT 0
29696: PPUSH
29697: LD_VAR 0 8
29701: PPUSH
29702: LD_VAR 0 4
29706: PPUSH
29707: CALL_OW 380
// un := CreateHuman ;
29711: LD_ADDR_VAR 0 14
29715: PUSH
29716: CALL_OW 44
29720: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29721: LD_ADDR_VAR 0 7
29725: PUSH
29726: LD_VAR 0 7
29730: PPUSH
29731: LD_INT 1
29733: PPUSH
29734: LD_VAR 0 14
29738: PPUSH
29739: CALL_OW 2
29743: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29744: LD_VAR 0 14
29748: PPUSH
29749: LD_VAR 0 12
29753: PUSH
29754: LD_INT 1
29756: ARRAY
29757: PPUSH
29758: CALL_OW 52
// end ;
29762: GO 29401
29764: POP
29765: POP
// end ;
29766: GO 28703
29768: POP
29769: POP
// result := result ^ buildings ;
29770: LD_ADDR_VAR 0 7
29774: PUSH
29775: LD_VAR 0 7
29779: PUSH
29780: LD_VAR 0 18
29784: ADD
29785: ST_TO_ADDR
// end else
29786: GO 29929
// begin for i = 1 to personel do
29788: LD_ADDR_VAR 0 8
29792: PUSH
29793: DOUBLE
29794: LD_INT 1
29796: DEC
29797: ST_TO_ADDR
29798: LD_VAR 0 6
29802: PUSH
29803: FOR_TO
29804: IFFALSE 29927
// begin if i > 4 then
29806: LD_VAR 0 8
29810: PUSH
29811: LD_INT 4
29813: GREATER
29814: IFFALSE 29818
// break ;
29816: GO 29927
// x := personel [ i ] ;
29818: LD_ADDR_VAR 0 13
29822: PUSH
29823: LD_VAR 0 6
29827: PUSH
29828: LD_VAR 0 8
29832: ARRAY
29833: ST_TO_ADDR
// if x = - 1 then
29834: LD_VAR 0 13
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: EQUAL
29843: IFFALSE 29847
// continue ;
29845: GO 29803
// PrepareHuman ( false , i , skill ) ;
29847: LD_INT 0
29849: PPUSH
29850: LD_VAR 0 8
29854: PPUSH
29855: LD_VAR 0 4
29859: PPUSH
29860: CALL_OW 380
// un := CreateHuman ;
29864: LD_ADDR_VAR 0 14
29868: PUSH
29869: CALL_OW 44
29873: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29874: LD_VAR 0 14
29878: PPUSH
29879: LD_VAR 0 1
29883: PPUSH
29884: CALL_OW 250
29888: PPUSH
29889: LD_VAR 0 1
29893: PPUSH
29894: CALL_OW 251
29898: PPUSH
29899: LD_INT 10
29901: PPUSH
29902: LD_INT 0
29904: PPUSH
29905: CALL_OW 50
// result := result ^ un ;
29909: LD_ADDR_VAR 0 7
29913: PUSH
29914: LD_VAR 0 7
29918: PUSH
29919: LD_VAR 0 14
29923: ADD
29924: ST_TO_ADDR
// end ;
29925: GO 29803
29927: POP
29928: POP
// end ; end ;
29929: LD_VAR 0 7
29933: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29934: LD_INT 0
29936: PPUSH
29937: PPUSH
29938: PPUSH
29939: PPUSH
29940: PPUSH
29941: PPUSH
29942: PPUSH
29943: PPUSH
29944: PPUSH
29945: PPUSH
29946: PPUSH
29947: PPUSH
29948: PPUSH
29949: PPUSH
29950: PPUSH
29951: PPUSH
// result := false ;
29952: LD_ADDR_VAR 0 3
29956: PUSH
29957: LD_INT 0
29959: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29960: LD_VAR 0 1
29964: NOT
29965: PUSH
29966: LD_VAR 0 1
29970: PPUSH
29971: CALL_OW 266
29975: PUSH
29976: LD_INT 32
29978: PUSH
29979: LD_INT 33
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: IN
29986: NOT
29987: OR
29988: IFFALSE 29992
// exit ;
29990: GO 31101
// nat := GetNation ( tower ) ;
29992: LD_ADDR_VAR 0 12
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 248
30006: ST_TO_ADDR
// side := GetSide ( tower ) ;
30007: LD_ADDR_VAR 0 16
30011: PUSH
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 255
30021: ST_TO_ADDR
// x := GetX ( tower ) ;
30022: LD_ADDR_VAR 0 10
30026: PUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 250
30036: ST_TO_ADDR
// y := GetY ( tower ) ;
30037: LD_ADDR_VAR 0 11
30041: PUSH
30042: LD_VAR 0 1
30046: PPUSH
30047: CALL_OW 251
30051: ST_TO_ADDR
// if not x or not y then
30052: LD_VAR 0 10
30056: NOT
30057: PUSH
30058: LD_VAR 0 11
30062: NOT
30063: OR
30064: IFFALSE 30068
// exit ;
30066: GO 31101
// weapon := 0 ;
30068: LD_ADDR_VAR 0 18
30072: PUSH
30073: LD_INT 0
30075: ST_TO_ADDR
// fac_list := [ ] ;
30076: LD_ADDR_VAR 0 17
30080: PUSH
30081: EMPTY
30082: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30083: LD_ADDR_VAR 0 6
30087: PUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 274
30097: PPUSH
30098: LD_VAR 0 2
30102: PPUSH
30103: LD_INT 0
30105: PPUSH
30106: CALL 27672 0 3
30110: PPUSH
30111: LD_INT 30
30113: PUSH
30114: LD_INT 3
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PPUSH
30121: CALL_OW 72
30125: ST_TO_ADDR
// if not factories then
30126: LD_VAR 0 6
30130: NOT
30131: IFFALSE 30135
// exit ;
30133: GO 31101
// for i in factories do
30135: LD_ADDR_VAR 0 8
30139: PUSH
30140: LD_VAR 0 6
30144: PUSH
30145: FOR_IN
30146: IFFALSE 30171
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30148: LD_ADDR_VAR 0 17
30152: PUSH
30153: LD_VAR 0 17
30157: PUSH
30158: LD_VAR 0 8
30162: PPUSH
30163: CALL_OW 478
30167: UNION
30168: ST_TO_ADDR
30169: GO 30145
30171: POP
30172: POP
// if not fac_list then
30173: LD_VAR 0 17
30177: NOT
30178: IFFALSE 30182
// exit ;
30180: GO 31101
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30182: LD_ADDR_VAR 0 5
30186: PUSH
30187: LD_INT 4
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: LD_INT 9
30195: PUSH
30196: LD_INT 10
30198: PUSH
30199: LD_INT 6
30201: PUSH
30202: LD_INT 7
30204: PUSH
30205: LD_INT 11
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 27
30219: PUSH
30220: LD_INT 28
30222: PUSH
30223: LD_INT 26
30225: PUSH
30226: LD_INT 30
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 43
30237: PUSH
30238: LD_INT 44
30240: PUSH
30241: LD_INT 46
30243: PUSH
30244: LD_INT 45
30246: PUSH
30247: LD_INT 47
30249: PUSH
30250: LD_INT 49
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: PUSH
30266: LD_VAR 0 12
30270: ARRAY
30271: ST_TO_ADDR
// list := list isect fac_list ;
30272: LD_ADDR_VAR 0 5
30276: PUSH
30277: LD_VAR 0 5
30281: PUSH
30282: LD_VAR 0 17
30286: ISECT
30287: ST_TO_ADDR
// if not list then
30288: LD_VAR 0 5
30292: NOT
30293: IFFALSE 30297
// exit ;
30295: GO 31101
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30297: LD_VAR 0 12
30301: PUSH
30302: LD_INT 3
30304: EQUAL
30305: PUSH
30306: LD_INT 49
30308: PUSH
30309: LD_VAR 0 5
30313: IN
30314: AND
30315: PUSH
30316: LD_INT 31
30318: PPUSH
30319: LD_VAR 0 16
30323: PPUSH
30324: CALL_OW 321
30328: PUSH
30329: LD_INT 2
30331: EQUAL
30332: AND
30333: IFFALSE 30393
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30335: LD_INT 22
30337: PUSH
30338: LD_VAR 0 16
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 35
30349: PUSH
30350: LD_INT 49
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 91
30359: PUSH
30360: LD_VAR 0 1
30364: PUSH
30365: LD_INT 10
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: PPUSH
30378: CALL_OW 69
30382: NOT
30383: IFFALSE 30393
// weapon := ru_time_lapser ;
30385: LD_ADDR_VAR 0 18
30389: PUSH
30390: LD_INT 49
30392: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30393: LD_VAR 0 12
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: IN
30408: PUSH
30409: LD_INT 11
30411: PUSH
30412: LD_VAR 0 5
30416: IN
30417: PUSH
30418: LD_INT 30
30420: PUSH
30421: LD_VAR 0 5
30425: IN
30426: OR
30427: AND
30428: PUSH
30429: LD_INT 6
30431: PPUSH
30432: LD_VAR 0 16
30436: PPUSH
30437: CALL_OW 321
30441: PUSH
30442: LD_INT 2
30444: EQUAL
30445: AND
30446: IFFALSE 30611
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30448: LD_INT 22
30450: PUSH
30451: LD_VAR 0 16
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: LD_INT 35
30465: PUSH
30466: LD_INT 11
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 35
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 91
30490: PUSH
30491: LD_VAR 0 1
30495: PUSH
30496: LD_INT 18
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: LIST
30508: PPUSH
30509: CALL_OW 69
30513: NOT
30514: PUSH
30515: LD_INT 22
30517: PUSH
30518: LD_VAR 0 16
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: LD_INT 30
30532: PUSH
30533: LD_INT 32
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 30
30542: PUSH
30543: LD_INT 33
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 91
30557: PUSH
30558: LD_VAR 0 1
30562: PUSH
30563: LD_INT 12
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: PUSH
30576: EMPTY
30577: LIST
30578: PPUSH
30579: CALL_OW 69
30583: PUSH
30584: LD_INT 2
30586: GREATER
30587: AND
30588: IFFALSE 30611
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30590: LD_ADDR_VAR 0 18
30594: PUSH
30595: LD_INT 11
30597: PUSH
30598: LD_INT 30
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_VAR 0 12
30609: ARRAY
30610: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30611: LD_VAR 0 18
30615: NOT
30616: PUSH
30617: LD_INT 40
30619: PPUSH
30620: LD_VAR 0 16
30624: PPUSH
30625: CALL_OW 321
30629: PUSH
30630: LD_INT 2
30632: EQUAL
30633: AND
30634: PUSH
30635: LD_INT 7
30637: PUSH
30638: LD_VAR 0 5
30642: IN
30643: PUSH
30644: LD_INT 28
30646: PUSH
30647: LD_VAR 0 5
30651: IN
30652: OR
30653: PUSH
30654: LD_INT 45
30656: PUSH
30657: LD_VAR 0 5
30661: IN
30662: OR
30663: AND
30664: IFFALSE 30918
// begin hex := GetHexInfo ( x , y ) ;
30666: LD_ADDR_VAR 0 4
30670: PUSH
30671: LD_VAR 0 10
30675: PPUSH
30676: LD_VAR 0 11
30680: PPUSH
30681: CALL_OW 546
30685: ST_TO_ADDR
// if hex [ 1 ] then
30686: LD_VAR 0 4
30690: PUSH
30691: LD_INT 1
30693: ARRAY
30694: IFFALSE 30698
// exit ;
30696: GO 31101
// height := hex [ 2 ] ;
30698: LD_ADDR_VAR 0 15
30702: PUSH
30703: LD_VAR 0 4
30707: PUSH
30708: LD_INT 2
30710: ARRAY
30711: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30712: LD_ADDR_VAR 0 14
30716: PUSH
30717: LD_INT 0
30719: PUSH
30720: LD_INT 2
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: LD_INT 5
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: ST_TO_ADDR
// for i in tmp do
30735: LD_ADDR_VAR 0 8
30739: PUSH
30740: LD_VAR 0 14
30744: PUSH
30745: FOR_IN
30746: IFFALSE 30916
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30748: LD_ADDR_VAR 0 9
30752: PUSH
30753: LD_VAR 0 10
30757: PPUSH
30758: LD_VAR 0 8
30762: PPUSH
30763: LD_INT 5
30765: PPUSH
30766: CALL_OW 272
30770: PUSH
30771: LD_VAR 0 11
30775: PPUSH
30776: LD_VAR 0 8
30780: PPUSH
30781: LD_INT 5
30783: PPUSH
30784: CALL_OW 273
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30793: LD_VAR 0 9
30797: PUSH
30798: LD_INT 1
30800: ARRAY
30801: PPUSH
30802: LD_VAR 0 9
30806: PUSH
30807: LD_INT 2
30809: ARRAY
30810: PPUSH
30811: CALL_OW 488
30815: IFFALSE 30914
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30817: LD_ADDR_VAR 0 4
30821: PUSH
30822: LD_VAR 0 9
30826: PUSH
30827: LD_INT 1
30829: ARRAY
30830: PPUSH
30831: LD_VAR 0 9
30835: PUSH
30836: LD_INT 2
30838: ARRAY
30839: PPUSH
30840: CALL_OW 546
30844: ST_TO_ADDR
// if hex [ 1 ] then
30845: LD_VAR 0 4
30849: PUSH
30850: LD_INT 1
30852: ARRAY
30853: IFFALSE 30857
// continue ;
30855: GO 30745
// h := hex [ 2 ] ;
30857: LD_ADDR_VAR 0 13
30861: PUSH
30862: LD_VAR 0 4
30866: PUSH
30867: LD_INT 2
30869: ARRAY
30870: ST_TO_ADDR
// if h + 7 < height then
30871: LD_VAR 0 13
30875: PUSH
30876: LD_INT 7
30878: PLUS
30879: PUSH
30880: LD_VAR 0 15
30884: LESS
30885: IFFALSE 30914
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30887: LD_ADDR_VAR 0 18
30891: PUSH
30892: LD_INT 7
30894: PUSH
30895: LD_INT 28
30897: PUSH
30898: LD_INT 45
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: LD_VAR 0 12
30910: ARRAY
30911: ST_TO_ADDR
// break ;
30912: GO 30916
// end ; end ; end ;
30914: GO 30745
30916: POP
30917: POP
// end ; if not weapon then
30918: LD_VAR 0 18
30922: NOT
30923: IFFALSE 30983
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30925: LD_ADDR_VAR 0 5
30929: PUSH
30930: LD_VAR 0 5
30934: PUSH
30935: LD_INT 11
30937: PUSH
30938: LD_INT 30
30940: PUSH
30941: LD_INT 49
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: DIFF
30949: ST_TO_ADDR
// if not list then
30950: LD_VAR 0 5
30954: NOT
30955: IFFALSE 30959
// exit ;
30957: GO 31101
// weapon := list [ rand ( 1 , list ) ] ;
30959: LD_ADDR_VAR 0 18
30963: PUSH
30964: LD_VAR 0 5
30968: PUSH
30969: LD_INT 1
30971: PPUSH
30972: LD_VAR 0 5
30976: PPUSH
30977: CALL_OW 12
30981: ARRAY
30982: ST_TO_ADDR
// end ; if weapon then
30983: LD_VAR 0 18
30987: IFFALSE 31101
// begin tmp := CostOfWeapon ( weapon ) ;
30989: LD_ADDR_VAR 0 14
30993: PUSH
30994: LD_VAR 0 18
30998: PPUSH
30999: CALL_OW 451
31003: ST_TO_ADDR
// j := GetBase ( tower ) ;
31004: LD_ADDR_VAR 0 9
31008: PUSH
31009: LD_VAR 0 1
31013: PPUSH
31014: CALL_OW 274
31018: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31019: LD_VAR 0 9
31023: PPUSH
31024: LD_INT 1
31026: PPUSH
31027: CALL_OW 275
31031: PUSH
31032: LD_VAR 0 14
31036: PUSH
31037: LD_INT 1
31039: ARRAY
31040: GREATEREQUAL
31041: PUSH
31042: LD_VAR 0 9
31046: PPUSH
31047: LD_INT 2
31049: PPUSH
31050: CALL_OW 275
31054: PUSH
31055: LD_VAR 0 14
31059: PUSH
31060: LD_INT 2
31062: ARRAY
31063: GREATEREQUAL
31064: AND
31065: PUSH
31066: LD_VAR 0 9
31070: PPUSH
31071: LD_INT 3
31073: PPUSH
31074: CALL_OW 275
31078: PUSH
31079: LD_VAR 0 14
31083: PUSH
31084: LD_INT 3
31086: ARRAY
31087: GREATEREQUAL
31088: AND
31089: IFFALSE 31101
// result := weapon ;
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_VAR 0 18
31100: ST_TO_ADDR
// end ; end ;
31101: LD_VAR 0 3
31105: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31106: LD_INT 0
31108: PPUSH
31109: PPUSH
// result := true ;
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: LD_INT 1
31117: ST_TO_ADDR
// if array1 = array2 then
31118: LD_VAR 0 1
31122: PUSH
31123: LD_VAR 0 2
31127: EQUAL
31128: IFFALSE 31188
// begin for i = 1 to array1 do
31130: LD_ADDR_VAR 0 4
31134: PUSH
31135: DOUBLE
31136: LD_INT 1
31138: DEC
31139: ST_TO_ADDR
31140: LD_VAR 0 1
31144: PUSH
31145: FOR_TO
31146: IFFALSE 31184
// if array1 [ i ] <> array2 [ i ] then
31148: LD_VAR 0 1
31152: PUSH
31153: LD_VAR 0 4
31157: ARRAY
31158: PUSH
31159: LD_VAR 0 2
31163: PUSH
31164: LD_VAR 0 4
31168: ARRAY
31169: NONEQUAL
31170: IFFALSE 31182
// begin result := false ;
31172: LD_ADDR_VAR 0 3
31176: PUSH
31177: LD_INT 0
31179: ST_TO_ADDR
// break ;
31180: GO 31184
// end ;
31182: GO 31145
31184: POP
31185: POP
// end else
31186: GO 31196
// result := false ;
31188: LD_ADDR_VAR 0 3
31192: PUSH
31193: LD_INT 0
31195: ST_TO_ADDR
// end ;
31196: LD_VAR 0 3
31200: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31201: LD_INT 0
31203: PPUSH
31204: PPUSH
// if not array1 or not array2 then
31205: LD_VAR 0 1
31209: NOT
31210: PUSH
31211: LD_VAR 0 2
31215: NOT
31216: OR
31217: IFFALSE 31221
// exit ;
31219: GO 31285
// result := true ;
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: LD_INT 1
31228: ST_TO_ADDR
// for i = 1 to array1 do
31229: LD_ADDR_VAR 0 4
31233: PUSH
31234: DOUBLE
31235: LD_INT 1
31237: DEC
31238: ST_TO_ADDR
31239: LD_VAR 0 1
31243: PUSH
31244: FOR_TO
31245: IFFALSE 31283
// if array1 [ i ] <> array2 [ i ] then
31247: LD_VAR 0 1
31251: PUSH
31252: LD_VAR 0 4
31256: ARRAY
31257: PUSH
31258: LD_VAR 0 2
31262: PUSH
31263: LD_VAR 0 4
31267: ARRAY
31268: NONEQUAL
31269: IFFALSE 31281
// begin result := false ;
31271: LD_ADDR_VAR 0 3
31275: PUSH
31276: LD_INT 0
31278: ST_TO_ADDR
// break ;
31279: GO 31283
// end ;
31281: GO 31244
31283: POP
31284: POP
// end ;
31285: LD_VAR 0 3
31289: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31290: LD_INT 0
31292: PPUSH
31293: PPUSH
31294: PPUSH
// pom := GetBase ( fac ) ;
31295: LD_ADDR_VAR 0 5
31299: PUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 274
31309: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31310: LD_ADDR_VAR 0 4
31314: PUSH
31315: LD_VAR 0 2
31319: PUSH
31320: LD_INT 1
31322: ARRAY
31323: PPUSH
31324: LD_VAR 0 2
31328: PUSH
31329: LD_INT 2
31331: ARRAY
31332: PPUSH
31333: LD_VAR 0 2
31337: PUSH
31338: LD_INT 3
31340: ARRAY
31341: PPUSH
31342: LD_VAR 0 2
31346: PUSH
31347: LD_INT 4
31349: ARRAY
31350: PPUSH
31351: CALL_OW 449
31355: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31356: LD_ADDR_VAR 0 3
31360: PUSH
31361: LD_VAR 0 5
31365: PPUSH
31366: LD_INT 1
31368: PPUSH
31369: CALL_OW 275
31373: PUSH
31374: LD_VAR 0 4
31378: PUSH
31379: LD_INT 1
31381: ARRAY
31382: GREATEREQUAL
31383: PUSH
31384: LD_VAR 0 5
31388: PPUSH
31389: LD_INT 2
31391: PPUSH
31392: CALL_OW 275
31396: PUSH
31397: LD_VAR 0 4
31401: PUSH
31402: LD_INT 2
31404: ARRAY
31405: GREATEREQUAL
31406: AND
31407: PUSH
31408: LD_VAR 0 5
31412: PPUSH
31413: LD_INT 3
31415: PPUSH
31416: CALL_OW 275
31420: PUSH
31421: LD_VAR 0 4
31425: PUSH
31426: LD_INT 3
31428: ARRAY
31429: GREATEREQUAL
31430: AND
31431: ST_TO_ADDR
// end ;
31432: LD_VAR 0 3
31436: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31437: LD_INT 0
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
// pom := GetBase ( building ) ;
31443: LD_ADDR_VAR 0 3
31447: PUSH
31448: LD_VAR 0 1
31452: PPUSH
31453: CALL_OW 274
31457: ST_TO_ADDR
// if not pom then
31458: LD_VAR 0 3
31462: NOT
31463: IFFALSE 31467
// exit ;
31465: GO 31637
// btype := GetBType ( building ) ;
31467: LD_ADDR_VAR 0 5
31471: PUSH
31472: LD_VAR 0 1
31476: PPUSH
31477: CALL_OW 266
31481: ST_TO_ADDR
// if btype = b_armoury then
31482: LD_VAR 0 5
31486: PUSH
31487: LD_INT 4
31489: EQUAL
31490: IFFALSE 31500
// btype := b_barracks ;
31492: LD_ADDR_VAR 0 5
31496: PUSH
31497: LD_INT 5
31499: ST_TO_ADDR
// if btype = b_depot then
31500: LD_VAR 0 5
31504: PUSH
31505: LD_INT 0
31507: EQUAL
31508: IFFALSE 31518
// btype := b_warehouse ;
31510: LD_ADDR_VAR 0 5
31514: PUSH
31515: LD_INT 1
31517: ST_TO_ADDR
// if btype = b_workshop then
31518: LD_VAR 0 5
31522: PUSH
31523: LD_INT 2
31525: EQUAL
31526: IFFALSE 31536
// btype := b_factory ;
31528: LD_ADDR_VAR 0 5
31532: PUSH
31533: LD_INT 3
31535: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31536: LD_ADDR_VAR 0 4
31540: PUSH
31541: LD_VAR 0 5
31545: PPUSH
31546: LD_VAR 0 1
31550: PPUSH
31551: CALL_OW 248
31555: PPUSH
31556: CALL_OW 450
31560: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31561: LD_ADDR_VAR 0 2
31565: PUSH
31566: LD_VAR 0 3
31570: PPUSH
31571: LD_INT 1
31573: PPUSH
31574: CALL_OW 275
31578: PUSH
31579: LD_VAR 0 4
31583: PUSH
31584: LD_INT 1
31586: ARRAY
31587: GREATEREQUAL
31588: PUSH
31589: LD_VAR 0 3
31593: PPUSH
31594: LD_INT 2
31596: PPUSH
31597: CALL_OW 275
31601: PUSH
31602: LD_VAR 0 4
31606: PUSH
31607: LD_INT 2
31609: ARRAY
31610: GREATEREQUAL
31611: AND
31612: PUSH
31613: LD_VAR 0 3
31617: PPUSH
31618: LD_INT 3
31620: PPUSH
31621: CALL_OW 275
31625: PUSH
31626: LD_VAR 0 4
31630: PUSH
31631: LD_INT 3
31633: ARRAY
31634: GREATEREQUAL
31635: AND
31636: ST_TO_ADDR
// end ;
31637: LD_VAR 0 2
31641: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31642: LD_INT 0
31644: PPUSH
31645: PPUSH
31646: PPUSH
// pom := GetBase ( building ) ;
31647: LD_ADDR_VAR 0 4
31651: PUSH
31652: LD_VAR 0 1
31656: PPUSH
31657: CALL_OW 274
31661: ST_TO_ADDR
// if not pom then
31662: LD_VAR 0 4
31666: NOT
31667: IFFALSE 31671
// exit ;
31669: GO 31772
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31671: LD_ADDR_VAR 0 5
31675: PUSH
31676: LD_VAR 0 2
31680: PPUSH
31681: LD_VAR 0 1
31685: PPUSH
31686: CALL_OW 248
31690: PPUSH
31691: CALL_OW 450
31695: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31696: LD_ADDR_VAR 0 3
31700: PUSH
31701: LD_VAR 0 4
31705: PPUSH
31706: LD_INT 1
31708: PPUSH
31709: CALL_OW 275
31713: PUSH
31714: LD_VAR 0 5
31718: PUSH
31719: LD_INT 1
31721: ARRAY
31722: GREATEREQUAL
31723: PUSH
31724: LD_VAR 0 4
31728: PPUSH
31729: LD_INT 2
31731: PPUSH
31732: CALL_OW 275
31736: PUSH
31737: LD_VAR 0 5
31741: PUSH
31742: LD_INT 2
31744: ARRAY
31745: GREATEREQUAL
31746: AND
31747: PUSH
31748: LD_VAR 0 4
31752: PPUSH
31753: LD_INT 3
31755: PPUSH
31756: CALL_OW 275
31760: PUSH
31761: LD_VAR 0 5
31765: PUSH
31766: LD_INT 3
31768: ARRAY
31769: GREATEREQUAL
31770: AND
31771: ST_TO_ADDR
// end ;
31772: LD_VAR 0 3
31776: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31777: LD_INT 0
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
31787: PPUSH
31788: PPUSH
31789: PPUSH
// result := false ;
31790: LD_ADDR_VAR 0 8
31794: PUSH
31795: LD_INT 0
31797: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31798: LD_VAR 0 5
31802: NOT
31803: PUSH
31804: LD_VAR 0 1
31808: NOT
31809: OR
31810: PUSH
31811: LD_VAR 0 2
31815: NOT
31816: OR
31817: PUSH
31818: LD_VAR 0 3
31822: NOT
31823: OR
31824: IFFALSE 31828
// exit ;
31826: GO 32642
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31828: LD_ADDR_VAR 0 14
31832: PUSH
31833: LD_VAR 0 1
31837: PPUSH
31838: LD_VAR 0 2
31842: PPUSH
31843: LD_VAR 0 3
31847: PPUSH
31848: LD_VAR 0 4
31852: PPUSH
31853: LD_VAR 0 5
31857: PUSH
31858: LD_INT 1
31860: ARRAY
31861: PPUSH
31862: CALL_OW 248
31866: PPUSH
31867: LD_INT 0
31869: PPUSH
31870: CALL 33879 0 6
31874: ST_TO_ADDR
// if not hexes then
31875: LD_VAR 0 14
31879: NOT
31880: IFFALSE 31884
// exit ;
31882: GO 32642
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31884: LD_ADDR_VAR 0 17
31888: PUSH
31889: LD_VAR 0 5
31893: PPUSH
31894: LD_INT 22
31896: PUSH
31897: LD_VAR 0 13
31901: PPUSH
31902: CALL_OW 255
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: PUSH
31914: LD_INT 30
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 30
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PPUSH
31943: CALL_OW 72
31947: ST_TO_ADDR
// for i = 1 to hexes do
31948: LD_ADDR_VAR 0 9
31952: PUSH
31953: DOUBLE
31954: LD_INT 1
31956: DEC
31957: ST_TO_ADDR
31958: LD_VAR 0 14
31962: PUSH
31963: FOR_TO
31964: IFFALSE 32640
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31966: LD_ADDR_VAR 0 13
31970: PUSH
31971: LD_VAR 0 14
31975: PUSH
31976: LD_VAR 0 9
31980: ARRAY
31981: PUSH
31982: LD_INT 1
31984: ARRAY
31985: PPUSH
31986: LD_VAR 0 14
31990: PUSH
31991: LD_VAR 0 9
31995: ARRAY
31996: PUSH
31997: LD_INT 2
31999: ARRAY
32000: PPUSH
32001: CALL_OW 428
32005: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32006: LD_VAR 0 14
32010: PUSH
32011: LD_VAR 0 9
32015: ARRAY
32016: PUSH
32017: LD_INT 1
32019: ARRAY
32020: PPUSH
32021: LD_VAR 0 14
32025: PUSH
32026: LD_VAR 0 9
32030: ARRAY
32031: PUSH
32032: LD_INT 2
32034: ARRAY
32035: PPUSH
32036: CALL_OW 351
32040: PUSH
32041: LD_VAR 0 14
32045: PUSH
32046: LD_VAR 0 9
32050: ARRAY
32051: PUSH
32052: LD_INT 1
32054: ARRAY
32055: PPUSH
32056: LD_VAR 0 14
32060: PUSH
32061: LD_VAR 0 9
32065: ARRAY
32066: PUSH
32067: LD_INT 2
32069: ARRAY
32070: PPUSH
32071: CALL_OW 488
32075: NOT
32076: OR
32077: PUSH
32078: LD_VAR 0 13
32082: PPUSH
32083: CALL_OW 247
32087: PUSH
32088: LD_INT 3
32090: EQUAL
32091: OR
32092: IFFALSE 32098
// exit ;
32094: POP
32095: POP
32096: GO 32642
// if not tmp then
32098: LD_VAR 0 13
32102: NOT
32103: IFFALSE 32107
// continue ;
32105: GO 31963
// result := true ;
32107: LD_ADDR_VAR 0 8
32111: PUSH
32112: LD_INT 1
32114: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32115: LD_VAR 0 6
32119: PUSH
32120: LD_VAR 0 13
32124: PPUSH
32125: CALL_OW 247
32129: PUSH
32130: LD_INT 2
32132: EQUAL
32133: AND
32134: PUSH
32135: LD_VAR 0 13
32139: PPUSH
32140: CALL_OW 263
32144: PUSH
32145: LD_INT 1
32147: EQUAL
32148: AND
32149: IFFALSE 32313
// begin if IsDrivenBy ( tmp ) then
32151: LD_VAR 0 13
32155: PPUSH
32156: CALL_OW 311
32160: IFFALSE 32164
// continue ;
32162: GO 31963
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32164: LD_VAR 0 6
32168: PPUSH
32169: LD_INT 3
32171: PUSH
32172: LD_INT 60
32174: PUSH
32175: EMPTY
32176: LIST
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: LD_INT 55
32187: PUSH
32188: EMPTY
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PPUSH
32199: CALL_OW 72
32203: IFFALSE 32311
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32205: LD_ADDR_VAR 0 18
32209: PUSH
32210: LD_VAR 0 6
32214: PPUSH
32215: LD_INT 3
32217: PUSH
32218: LD_INT 60
32220: PUSH
32221: EMPTY
32222: LIST
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: LD_INT 55
32233: PUSH
32234: EMPTY
32235: LIST
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PPUSH
32245: CALL_OW 72
32249: PUSH
32250: LD_INT 1
32252: ARRAY
32253: ST_TO_ADDR
// if IsInUnit ( driver ) then
32254: LD_VAR 0 18
32258: PPUSH
32259: CALL_OW 310
32263: IFFALSE 32274
// ComExit ( driver ) ;
32265: LD_VAR 0 18
32269: PPUSH
32270: CALL 57063 0 1
// AddComEnterUnit ( driver , tmp ) ;
32274: LD_VAR 0 18
32278: PPUSH
32279: LD_VAR 0 13
32283: PPUSH
32284: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32288: LD_VAR 0 18
32292: PPUSH
32293: LD_VAR 0 7
32297: PPUSH
32298: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32302: LD_VAR 0 18
32306: PPUSH
32307: CALL_OW 181
// end ; continue ;
32311: GO 31963
// end ; if not cleaners or not tmp in cleaners then
32313: LD_VAR 0 6
32317: NOT
32318: PUSH
32319: LD_VAR 0 13
32323: PUSH
32324: LD_VAR 0 6
32328: IN
32329: NOT
32330: OR
32331: IFFALSE 32638
// begin if dep then
32333: LD_VAR 0 17
32337: IFFALSE 32473
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32339: LD_ADDR_VAR 0 16
32343: PUSH
32344: LD_VAR 0 17
32348: PUSH
32349: LD_INT 1
32351: ARRAY
32352: PPUSH
32353: CALL_OW 250
32357: PPUSH
32358: LD_VAR 0 17
32362: PUSH
32363: LD_INT 1
32365: ARRAY
32366: PPUSH
32367: CALL_OW 254
32371: PPUSH
32372: LD_INT 5
32374: PPUSH
32375: CALL_OW 272
32379: PUSH
32380: LD_VAR 0 17
32384: PUSH
32385: LD_INT 1
32387: ARRAY
32388: PPUSH
32389: CALL_OW 251
32393: PPUSH
32394: LD_VAR 0 17
32398: PUSH
32399: LD_INT 1
32401: ARRAY
32402: PPUSH
32403: CALL_OW 254
32407: PPUSH
32408: LD_INT 5
32410: PPUSH
32411: CALL_OW 273
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32420: LD_VAR 0 16
32424: PUSH
32425: LD_INT 1
32427: ARRAY
32428: PPUSH
32429: LD_VAR 0 16
32433: PUSH
32434: LD_INT 2
32436: ARRAY
32437: PPUSH
32438: CALL_OW 488
32442: IFFALSE 32473
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32444: LD_VAR 0 13
32448: PPUSH
32449: LD_VAR 0 16
32453: PUSH
32454: LD_INT 1
32456: ARRAY
32457: PPUSH
32458: LD_VAR 0 16
32462: PUSH
32463: LD_INT 2
32465: ARRAY
32466: PPUSH
32467: CALL_OW 111
// continue ;
32471: GO 31963
// end ; end ; r := GetDir ( tmp ) ;
32473: LD_ADDR_VAR 0 15
32477: PUSH
32478: LD_VAR 0 13
32482: PPUSH
32483: CALL_OW 254
32487: ST_TO_ADDR
// if r = 5 then
32488: LD_VAR 0 15
32492: PUSH
32493: LD_INT 5
32495: EQUAL
32496: IFFALSE 32506
// r := 0 ;
32498: LD_ADDR_VAR 0 15
32502: PUSH
32503: LD_INT 0
32505: ST_TO_ADDR
// for j = r to 5 do
32506: LD_ADDR_VAR 0 10
32510: PUSH
32511: DOUBLE
32512: LD_VAR 0 15
32516: DEC
32517: ST_TO_ADDR
32518: LD_INT 5
32520: PUSH
32521: FOR_TO
32522: IFFALSE 32636
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32524: LD_ADDR_VAR 0 11
32528: PUSH
32529: LD_VAR 0 13
32533: PPUSH
32534: CALL_OW 250
32538: PPUSH
32539: LD_VAR 0 10
32543: PPUSH
32544: LD_INT 2
32546: PPUSH
32547: CALL_OW 272
32551: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32552: LD_ADDR_VAR 0 12
32556: PUSH
32557: LD_VAR 0 13
32561: PPUSH
32562: CALL_OW 251
32566: PPUSH
32567: LD_VAR 0 10
32571: PPUSH
32572: LD_INT 2
32574: PPUSH
32575: CALL_OW 273
32579: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32580: LD_VAR 0 11
32584: PPUSH
32585: LD_VAR 0 12
32589: PPUSH
32590: CALL_OW 488
32594: PUSH
32595: LD_VAR 0 11
32599: PPUSH
32600: LD_VAR 0 12
32604: PPUSH
32605: CALL_OW 428
32609: NOT
32610: AND
32611: IFFALSE 32634
// begin ComMoveXY ( tmp , _x , _y ) ;
32613: LD_VAR 0 13
32617: PPUSH
32618: LD_VAR 0 11
32622: PPUSH
32623: LD_VAR 0 12
32627: PPUSH
32628: CALL_OW 111
// break ;
32632: GO 32636
// end ; end ;
32634: GO 32521
32636: POP
32637: POP
// end ; end ;
32638: GO 31963
32640: POP
32641: POP
// end ;
32642: LD_VAR 0 8
32646: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32647: LD_INT 0
32649: PPUSH
// result := true ;
32650: LD_ADDR_VAR 0 3
32654: PUSH
32655: LD_INT 1
32657: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32658: LD_VAR 0 2
32662: PUSH
32663: LD_INT 24
32665: DOUBLE
32666: EQUAL
32667: IFTRUE 32677
32669: LD_INT 33
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32677
32675: GO 32702
32677: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32678: LD_ADDR_VAR 0 3
32682: PUSH
32683: LD_INT 32
32685: PPUSH
32686: LD_VAR 0 1
32690: PPUSH
32691: CALL_OW 321
32695: PUSH
32696: LD_INT 2
32698: EQUAL
32699: ST_TO_ADDR
32700: GO 33022
32702: LD_INT 20
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32710
32708: GO 32735
32710: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32711: LD_ADDR_VAR 0 3
32715: PUSH
32716: LD_INT 6
32718: PPUSH
32719: LD_VAR 0 1
32723: PPUSH
32724: CALL_OW 321
32728: PUSH
32729: LD_INT 2
32731: EQUAL
32732: ST_TO_ADDR
32733: GO 33022
32735: LD_INT 22
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32749
32741: LD_INT 36
32743: DOUBLE
32744: EQUAL
32745: IFTRUE 32749
32747: GO 32774
32749: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32750: LD_ADDR_VAR 0 3
32754: PUSH
32755: LD_INT 15
32757: PPUSH
32758: LD_VAR 0 1
32762: PPUSH
32763: CALL_OW 321
32767: PUSH
32768: LD_INT 2
32770: EQUAL
32771: ST_TO_ADDR
32772: GO 33022
32774: LD_INT 30
32776: DOUBLE
32777: EQUAL
32778: IFTRUE 32782
32780: GO 32807
32782: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32783: LD_ADDR_VAR 0 3
32787: PUSH
32788: LD_INT 20
32790: PPUSH
32791: LD_VAR 0 1
32795: PPUSH
32796: CALL_OW 321
32800: PUSH
32801: LD_INT 2
32803: EQUAL
32804: ST_TO_ADDR
32805: GO 33022
32807: LD_INT 28
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32821
32813: LD_INT 21
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32846
32821: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32822: LD_ADDR_VAR 0 3
32826: PUSH
32827: LD_INT 21
32829: PPUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 321
32839: PUSH
32840: LD_INT 2
32842: EQUAL
32843: ST_TO_ADDR
32844: GO 33022
32846: LD_INT 16
32848: DOUBLE
32849: EQUAL
32850: IFTRUE 32854
32852: GO 32881
32854: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32855: LD_ADDR_VAR 0 3
32859: PUSH
32860: LD_EXP 89
32864: PPUSH
32865: LD_VAR 0 1
32869: PPUSH
32870: CALL_OW 321
32874: PUSH
32875: LD_INT 2
32877: EQUAL
32878: ST_TO_ADDR
32879: GO 33022
32881: LD_INT 19
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32895
32887: LD_INT 23
32889: DOUBLE
32890: EQUAL
32891: IFTRUE 32895
32893: GO 32922
32895: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32896: LD_ADDR_VAR 0 3
32900: PUSH
32901: LD_EXP 88
32905: PPUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 321
32915: PUSH
32916: LD_INT 2
32918: EQUAL
32919: ST_TO_ADDR
32920: GO 33022
32922: LD_INT 17
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32955
32930: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: LD_INT 39
32938: PPUSH
32939: LD_VAR 0 1
32943: PPUSH
32944: CALL_OW 321
32948: PUSH
32949: LD_INT 2
32951: EQUAL
32952: ST_TO_ADDR
32953: GO 33022
32955: LD_INT 18
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32988
32963: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32964: LD_ADDR_VAR 0 3
32968: PUSH
32969: LD_INT 40
32971: PPUSH
32972: LD_VAR 0 1
32976: PPUSH
32977: CALL_OW 321
32981: PUSH
32982: LD_INT 2
32984: EQUAL
32985: ST_TO_ADDR
32986: GO 33022
32988: LD_INT 27
32990: DOUBLE
32991: EQUAL
32992: IFTRUE 32996
32994: GO 33021
32996: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32997: LD_ADDR_VAR 0 3
33001: PUSH
33002: LD_INT 35
33004: PPUSH
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL_OW 321
33014: PUSH
33015: LD_INT 2
33017: EQUAL
33018: ST_TO_ADDR
33019: GO 33022
33021: POP
// end ;
33022: LD_VAR 0 3
33026: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33027: LD_INT 0
33029: PPUSH
33030: PPUSH
33031: PPUSH
33032: PPUSH
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
33038: PPUSH
33039: PPUSH
// result := false ;
33040: LD_ADDR_VAR 0 6
33044: PUSH
33045: LD_INT 0
33047: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33048: LD_VAR 0 1
33052: NOT
33053: PUSH
33054: LD_VAR 0 1
33058: PPUSH
33059: CALL_OW 266
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: IN
33074: NOT
33075: OR
33076: PUSH
33077: LD_VAR 0 2
33081: NOT
33082: OR
33083: PUSH
33084: LD_VAR 0 5
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: LD_INT 3
33100: PUSH
33101: LD_INT 4
33103: PUSH
33104: LD_INT 5
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: IN
33115: NOT
33116: OR
33117: PUSH
33118: LD_VAR 0 3
33122: PPUSH
33123: LD_VAR 0 4
33127: PPUSH
33128: CALL_OW 488
33132: NOT
33133: OR
33134: IFFALSE 33138
// exit ;
33136: GO 33874
// side := GetSide ( depot ) ;
33138: LD_ADDR_VAR 0 9
33142: PUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: CALL_OW 255
33152: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33153: LD_VAR 0 9
33157: PPUSH
33158: LD_VAR 0 2
33162: PPUSH
33163: CALL 32647 0 2
33167: NOT
33168: IFFALSE 33172
// exit ;
33170: GO 33874
// pom := GetBase ( depot ) ;
33172: LD_ADDR_VAR 0 10
33176: PUSH
33177: LD_VAR 0 1
33181: PPUSH
33182: CALL_OW 274
33186: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33187: LD_ADDR_VAR 0 11
33191: PUSH
33192: LD_VAR 0 2
33196: PPUSH
33197: LD_VAR 0 1
33201: PPUSH
33202: CALL_OW 248
33206: PPUSH
33207: CALL_OW 450
33211: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33212: LD_VAR 0 10
33216: PPUSH
33217: LD_INT 1
33219: PPUSH
33220: CALL_OW 275
33224: PUSH
33225: LD_VAR 0 11
33229: PUSH
33230: LD_INT 1
33232: ARRAY
33233: GREATEREQUAL
33234: PUSH
33235: LD_VAR 0 10
33239: PPUSH
33240: LD_INT 2
33242: PPUSH
33243: CALL_OW 275
33247: PUSH
33248: LD_VAR 0 11
33252: PUSH
33253: LD_INT 2
33255: ARRAY
33256: GREATEREQUAL
33257: AND
33258: PUSH
33259: LD_VAR 0 10
33263: PPUSH
33264: LD_INT 3
33266: PPUSH
33267: CALL_OW 275
33271: PUSH
33272: LD_VAR 0 11
33276: PUSH
33277: LD_INT 3
33279: ARRAY
33280: GREATEREQUAL
33281: AND
33282: NOT
33283: IFFALSE 33287
// exit ;
33285: GO 33874
// if GetBType ( depot ) = b_depot then
33287: LD_VAR 0 1
33291: PPUSH
33292: CALL_OW 266
33296: PUSH
33297: LD_INT 0
33299: EQUAL
33300: IFFALSE 33312
// dist := 28 else
33302: LD_ADDR_VAR 0 14
33306: PUSH
33307: LD_INT 28
33309: ST_TO_ADDR
33310: GO 33320
// dist := 36 ;
33312: LD_ADDR_VAR 0 14
33316: PUSH
33317: LD_INT 36
33319: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33320: LD_VAR 0 1
33324: PPUSH
33325: LD_VAR 0 3
33329: PPUSH
33330: LD_VAR 0 4
33334: PPUSH
33335: CALL_OW 297
33339: PUSH
33340: LD_VAR 0 14
33344: GREATER
33345: IFFALSE 33349
// exit ;
33347: GO 33874
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33349: LD_ADDR_VAR 0 12
33353: PUSH
33354: LD_VAR 0 2
33358: PPUSH
33359: LD_VAR 0 3
33363: PPUSH
33364: LD_VAR 0 4
33368: PPUSH
33369: LD_VAR 0 5
33373: PPUSH
33374: LD_VAR 0 1
33378: PPUSH
33379: CALL_OW 248
33383: PPUSH
33384: LD_INT 0
33386: PPUSH
33387: CALL 33879 0 6
33391: ST_TO_ADDR
// if not hexes then
33392: LD_VAR 0 12
33396: NOT
33397: IFFALSE 33401
// exit ;
33399: GO 33874
// hex := GetHexInfo ( x , y ) ;
33401: LD_ADDR_VAR 0 15
33405: PUSH
33406: LD_VAR 0 3
33410: PPUSH
33411: LD_VAR 0 4
33415: PPUSH
33416: CALL_OW 546
33420: ST_TO_ADDR
// if hex [ 1 ] then
33421: LD_VAR 0 15
33425: PUSH
33426: LD_INT 1
33428: ARRAY
33429: IFFALSE 33433
// exit ;
33431: GO 33874
// height := hex [ 2 ] ;
33433: LD_ADDR_VAR 0 13
33437: PUSH
33438: LD_VAR 0 15
33442: PUSH
33443: LD_INT 2
33445: ARRAY
33446: ST_TO_ADDR
// for i = 1 to hexes do
33447: LD_ADDR_VAR 0 7
33451: PUSH
33452: DOUBLE
33453: LD_INT 1
33455: DEC
33456: ST_TO_ADDR
33457: LD_VAR 0 12
33461: PUSH
33462: FOR_TO
33463: IFFALSE 33793
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33465: LD_VAR 0 12
33469: PUSH
33470: LD_VAR 0 7
33474: ARRAY
33475: PUSH
33476: LD_INT 1
33478: ARRAY
33479: PPUSH
33480: LD_VAR 0 12
33484: PUSH
33485: LD_VAR 0 7
33489: ARRAY
33490: PUSH
33491: LD_INT 2
33493: ARRAY
33494: PPUSH
33495: CALL_OW 488
33499: NOT
33500: PUSH
33501: LD_VAR 0 12
33505: PUSH
33506: LD_VAR 0 7
33510: ARRAY
33511: PUSH
33512: LD_INT 1
33514: ARRAY
33515: PPUSH
33516: LD_VAR 0 12
33520: PUSH
33521: LD_VAR 0 7
33525: ARRAY
33526: PUSH
33527: LD_INT 2
33529: ARRAY
33530: PPUSH
33531: CALL_OW 428
33535: PUSH
33536: LD_INT 0
33538: GREATER
33539: OR
33540: PUSH
33541: LD_VAR 0 12
33545: PUSH
33546: LD_VAR 0 7
33550: ARRAY
33551: PUSH
33552: LD_INT 1
33554: ARRAY
33555: PPUSH
33556: LD_VAR 0 12
33560: PUSH
33561: LD_VAR 0 7
33565: ARRAY
33566: PUSH
33567: LD_INT 2
33569: ARRAY
33570: PPUSH
33571: CALL_OW 351
33575: OR
33576: IFFALSE 33582
// exit ;
33578: POP
33579: POP
33580: GO 33874
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33582: LD_ADDR_VAR 0 8
33586: PUSH
33587: LD_VAR 0 12
33591: PUSH
33592: LD_VAR 0 7
33596: ARRAY
33597: PUSH
33598: LD_INT 1
33600: ARRAY
33601: PPUSH
33602: LD_VAR 0 12
33606: PUSH
33607: LD_VAR 0 7
33611: ARRAY
33612: PUSH
33613: LD_INT 2
33615: ARRAY
33616: PPUSH
33617: CALL_OW 546
33621: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33622: LD_VAR 0 8
33626: PUSH
33627: LD_INT 1
33629: ARRAY
33630: PUSH
33631: LD_VAR 0 8
33635: PUSH
33636: LD_INT 2
33638: ARRAY
33639: PUSH
33640: LD_VAR 0 13
33644: PUSH
33645: LD_INT 2
33647: PLUS
33648: GREATER
33649: OR
33650: PUSH
33651: LD_VAR 0 8
33655: PUSH
33656: LD_INT 2
33658: ARRAY
33659: PUSH
33660: LD_VAR 0 13
33664: PUSH
33665: LD_INT 2
33667: MINUS
33668: LESS
33669: OR
33670: PUSH
33671: LD_VAR 0 8
33675: PUSH
33676: LD_INT 3
33678: ARRAY
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: LD_INT 8
33685: PUSH
33686: LD_INT 9
33688: PUSH
33689: LD_INT 10
33691: PUSH
33692: LD_INT 11
33694: PUSH
33695: LD_INT 12
33697: PUSH
33698: LD_INT 13
33700: PUSH
33701: LD_INT 16
33703: PUSH
33704: LD_INT 17
33706: PUSH
33707: LD_INT 18
33709: PUSH
33710: LD_INT 19
33712: PUSH
33713: LD_INT 20
33715: PUSH
33716: LD_INT 21
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: IN
33734: NOT
33735: OR
33736: PUSH
33737: LD_VAR 0 8
33741: PUSH
33742: LD_INT 5
33744: ARRAY
33745: NOT
33746: OR
33747: PUSH
33748: LD_VAR 0 8
33752: PUSH
33753: LD_INT 6
33755: ARRAY
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: LD_INT 7
33765: PUSH
33766: LD_INT 9
33768: PUSH
33769: LD_INT 10
33771: PUSH
33772: LD_INT 11
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: IN
33783: NOT
33784: OR
33785: IFFALSE 33791
// exit ;
33787: POP
33788: POP
33789: GO 33874
// end ;
33791: GO 33462
33793: POP
33794: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33795: LD_VAR 0 9
33799: PPUSH
33800: LD_VAR 0 3
33804: PPUSH
33805: LD_VAR 0 4
33809: PPUSH
33810: LD_INT 20
33812: PPUSH
33813: CALL 25820 0 4
33817: PUSH
33818: LD_INT 4
33820: ARRAY
33821: IFFALSE 33825
// exit ;
33823: GO 33874
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33825: LD_VAR 0 2
33829: PUSH
33830: LD_INT 29
33832: PUSH
33833: LD_INT 30
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: IN
33840: PUSH
33841: LD_VAR 0 3
33845: PPUSH
33846: LD_VAR 0 4
33850: PPUSH
33851: LD_VAR 0 9
33855: PPUSH
33856: CALL_OW 440
33860: NOT
33861: AND
33862: IFFALSE 33866
// exit ;
33864: GO 33874
// result := true ;
33866: LD_ADDR_VAR 0 6
33870: PUSH
33871: LD_INT 1
33873: ST_TO_ADDR
// end ;
33874: LD_VAR 0 6
33878: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33879: LD_INT 0
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
33935: PPUSH
33936: PPUSH
33937: PPUSH
33938: PPUSH
// result = [ ] ;
33939: LD_ADDR_VAR 0 7
33943: PUSH
33944: EMPTY
33945: ST_TO_ADDR
// temp_list = [ ] ;
33946: LD_ADDR_VAR 0 9
33950: PUSH
33951: EMPTY
33952: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33953: LD_VAR 0 4
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: LD_INT 4
33972: PUSH
33973: LD_INT 5
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: IN
33984: NOT
33985: PUSH
33986: LD_VAR 0 1
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: IN
34001: PUSH
34002: LD_VAR 0 5
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: IN
34021: NOT
34022: AND
34023: OR
34024: IFFALSE 34028
// exit ;
34026: GO 52419
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34028: LD_VAR 0 1
34032: PUSH
34033: LD_INT 6
34035: PUSH
34036: LD_INT 7
34038: PUSH
34039: LD_INT 8
34041: PUSH
34042: LD_INT 13
34044: PUSH
34045: LD_INT 12
34047: PUSH
34048: LD_INT 15
34050: PUSH
34051: LD_INT 11
34053: PUSH
34054: LD_INT 14
34056: PUSH
34057: LD_INT 10
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: IN
34071: IFFALSE 34081
// btype = b_lab ;
34073: LD_ADDR_VAR 0 1
34077: PUSH
34078: LD_INT 6
34080: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34081: LD_VAR 0 6
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: LIST
34099: IN
34100: NOT
34101: PUSH
34102: LD_VAR 0 1
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: LD_INT 6
34121: PUSH
34122: LD_INT 36
34124: PUSH
34125: LD_INT 4
34127: PUSH
34128: LD_INT 5
34130: PUSH
34131: LD_INT 31
34133: PUSH
34134: LD_INT 32
34136: PUSH
34137: LD_INT 33
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: IN
34153: NOT
34154: PUSH
34155: LD_VAR 0 6
34159: PUSH
34160: LD_INT 1
34162: EQUAL
34163: AND
34164: OR
34165: PUSH
34166: LD_VAR 0 1
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: IN
34181: NOT
34182: PUSH
34183: LD_VAR 0 6
34187: PUSH
34188: LD_INT 2
34190: EQUAL
34191: AND
34192: OR
34193: IFFALSE 34203
// mode = 0 ;
34195: LD_ADDR_VAR 0 6
34199: PUSH
34200: LD_INT 0
34202: ST_TO_ADDR
// case mode of 0 :
34203: LD_VAR 0 6
34207: PUSH
34208: LD_INT 0
34210: DOUBLE
34211: EQUAL
34212: IFTRUE 34216
34214: GO 45669
34216: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34217: LD_ADDR_VAR 0 11
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 2
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 3
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: LD_INT 3
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: NEG
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34410: LD_ADDR_VAR 0 12
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: LD_INT 1
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: NEG
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 2
34556: NEG
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 3
34567: NEG
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 3
34578: NEG
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34606: LD_ADDR_VAR 0 13
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 1
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 1
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: LD_INT 2
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: LD_INT 3
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: NEG
34778: PUSH
34779: LD_INT 3
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34805: LD_ADDR_VAR 0 14
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: LD_INT 3
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: LD_INT 3
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35001: LD_ADDR_VAR 0 15
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: NEG
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: NEG
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 3
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 3
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35194: LD_ADDR_VAR 0 16
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: LD_INT 2
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: NEG
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 3
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 3
35351: PUSH
35352: LD_INT 3
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 2
35361: PUSH
35362: LD_INT 3
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35387: LD_ADDR_VAR 0 17
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 2
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: LD_INT 2
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 2
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35617: LD_ADDR_VAR 0 18
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: LD_INT 2
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35847: LD_ADDR_VAR 0 19
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 2
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 2
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: NEG
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: LD_INT 2
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36077: LD_ADDR_VAR 0 20
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 2
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 2
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 2
36253: NEG
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: LD_INT 2
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36307: LD_ADDR_VAR 0 21
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 2
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: LD_INT 2
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 2
36506: NEG
36507: PUSH
36508: LD_INT 2
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36537: LD_ADDR_VAR 0 22
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 0
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 2
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 2
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 2
36724: NEG
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: LD_INT 2
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36767: LD_ADDR_VAR 0 23
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 2
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 2
36954: NEG
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: LD_INT 2
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: NEG
36979: PUSH
36980: LD_INT 3
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: LD_INT 3
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 2
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37047: LD_ADDR_VAR 0 24
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 2
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: NEG
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 2
37234: NEG
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: LD_INT 2
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 2
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 3
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37323: LD_ADDR_VAR 0 25
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 2
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: NEG
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 3
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: LD_INT 3
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: LD_INT 3
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37597: LD_ADDR_VAR 0 26
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 0
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: LD_INT 2
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: NEG
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37873: LD_ADDR_VAR 0 27
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 2
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 3
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 3
38118: NEG
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38153: LD_ADDR_VAR 0 28
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: LD_INT 3
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: LD_INT 3
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 3
38388: NEG
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 3
38400: NEG
38401: PUSH
38402: LD_INT 2
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38435: LD_ADDR_VAR 0 29
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: LD_INT 2
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 2
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: LD_INT 3
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 3
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 3
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 3
38679: NEG
38680: PUSH
38681: LD_INT 2
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38714: LD_ADDR_VAR 0 30
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 2
38891: NEG
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 3
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: LD_INT 3
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 3
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38992: LD_ADDR_VAR 0 31
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: LD_INT 3
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 3
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 3
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 3
39235: NEG
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39270: LD_ADDR_VAR 0 32
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 2
39502: NEG
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 3
39513: NEG
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39548: LD_ADDR_VAR 0 33
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: LD_INT 2
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: NEG
39739: PUSH
39740: LD_INT 3
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: LD_INT 1
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 3
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 3
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 3
39792: NEG
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39827: LD_ADDR_VAR 0 34
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 3
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 3
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 3
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 3
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40107: LD_ADDR_VAR 0 35
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40219: LD_ADDR_VAR 0 36
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 2
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40331: LD_ADDR_VAR 0 37
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40443: LD_ADDR_VAR 0 38
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 2
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40555: LD_ADDR_VAR 0 39
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40667: LD_ADDR_VAR 0 40
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40779: LD_ADDR_VAR 0 41
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: LD_INT 3
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 3
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 3
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 3
41022: PUSH
41023: LD_INT 3
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 3
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 3
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 3
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: NEG
41089: PUSH
41090: LD_INT 3
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41129: LD_ADDR_VAR 0 42
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: LD_INT 3
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: LD_INT 3
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 3
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 3
41375: PUSH
41376: LD_INT 3
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 3
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 3
41426: NEG
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 3
41438: NEG
41439: PUSH
41440: LD_INT 3
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41479: LD_ADDR_VAR 0 43
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: LD_INT 3
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 3
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 3
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 3
41775: NEG
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 3
41786: NEG
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41827: LD_ADDR_VAR 0 44
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: LD_INT 3
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 3
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 3
42101: NEG
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 3
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 3
42136: NEG
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42177: LD_ADDR_VAR 0 45
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: LD_INT 3
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 3
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 3
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 3
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 3
42474: NEG
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 3
42486: NEG
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42527: LD_ADDR_VAR 0 46
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 3
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 3
42823: NEG
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 3
42834: NEG
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42875: LD_ADDR_VAR 0 47
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43026: LD_ADDR_VAR 0 48
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43173: LD_ADDR_VAR 0 49
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43317: LD_ADDR_VAR 0 50
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43461: LD_ADDR_VAR 0 51
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43608: LD_ADDR_VAR 0 52
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43759: LD_ADDR_VAR 0 53
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43989: LD_ADDR_VAR 0 54
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 2
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44219: LD_ADDR_VAR 0 55
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44449: LD_ADDR_VAR 0 56
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44679: LD_ADDR_VAR 0 57
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44909: LD_ADDR_VAR 0 58
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45139: LD_ADDR_VAR 0 59
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45227: LD_ADDR_VAR 0 60
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45315: LD_ADDR_VAR 0 61
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45403: LD_ADDR_VAR 0 62
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45491: LD_ADDR_VAR 0 63
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45579: LD_ADDR_VAR 0 64
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: ST_TO_ADDR
// end ; 1 :
45667: GO 51564
45669: LD_INT 1
45671: DOUBLE
45672: EQUAL
45673: IFTRUE 45677
45675: GO 48300
45677: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45678: LD_ADDR_VAR 0 11
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 3
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45722: LD_ADDR_VAR 0 12
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45763: LD_ADDR_VAR 0 13
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: LD_INT 3
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45803: LD_ADDR_VAR 0 14
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 3
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45844: LD_ADDR_VAR 0 15
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45888: LD_ADDR_VAR 0 16
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: LD_INT 3
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45934: LD_ADDR_VAR 0 17
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 3
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45978: LD_ADDR_VAR 0 18
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 3
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 3
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46019: LD_ADDR_VAR 0 19
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 3
46036: PUSH
46037: LD_INT 3
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 3
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46059: LD_ADDR_VAR 0 20
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46100: LD_ADDR_VAR 0 21
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 3
46118: NEG
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46144: LD_ADDR_VAR 0 22
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 3
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: LD_INT 3
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46190: LD_ADDR_VAR 0 23
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 4
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 3
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46234: LD_ADDR_VAR 0 24
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 4
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46275: LD_ADDR_VAR 0 25
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 4
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: LD_INT 4
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46315: LD_ADDR_VAR 0 26
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 4
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 3
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46356: LD_ADDR_VAR 0 27
46360: PUSH
46361: LD_INT 3
46363: NEG
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 3
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 4
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46400: LD_ADDR_VAR 0 28
46404: PUSH
46405: LD_INT 3
46407: NEG
46408: PUSH
46409: LD_INT 3
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 3
46419: NEG
46420: PUSH
46421: LD_INT 4
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 4
46431: NEG
46432: PUSH
46433: LD_INT 3
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46446: LD_ADDR_VAR 0 29
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 3
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 3
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 4
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 4
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 3
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 5
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 5
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 4
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 6
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 6
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 5
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46601: LD_ADDR_VAR 0 30
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 4
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 4
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 4
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 5
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 5
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 5
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 6
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 6
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46744: LD_ADDR_VAR 0 31
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 3
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 4
46781: PUSH
46782: LD_INT 3
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: PUSH
46792: LD_INT 4
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: LD_INT 4
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 5
46811: PUSH
46812: LD_INT 4
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 5
46821: PUSH
46822: LD_INT 5
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 4
46831: PUSH
46832: LD_INT 5
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 6
46841: PUSH
46842: LD_INT 5
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 6
46851: PUSH
46852: LD_INT 6
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 5
46861: PUSH
46862: LD_INT 6
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46883: LD_ADDR_VAR 0 32
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 4
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 4
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 5
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 5
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 4
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 6
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 6
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: LD_INT 5
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47026: LD_ADDR_VAR 0 33
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 3
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 4
47078: NEG
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 4
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 4
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 5
47112: NEG
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 5
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 5
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 6
47146: NEG
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 6
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47181: LD_ADDR_VAR 0 34
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 3
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 3
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: LD_INT 3
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: LD_INT 4
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 4
47236: NEG
47237: PUSH
47238: LD_INT 3
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 4
47248: NEG
47249: PUSH
47250: LD_INT 4
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 4
47260: NEG
47261: PUSH
47262: LD_INT 5
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 5
47272: NEG
47273: PUSH
47274: LD_INT 4
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 5
47284: NEG
47285: PUSH
47286: LD_INT 5
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 5
47296: NEG
47297: PUSH
47298: LD_INT 6
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 6
47308: NEG
47309: PUSH
47310: LD_INT 5
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 6
47320: NEG
47321: PUSH
47322: LD_INT 6
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47344: LD_ADDR_VAR 0 41
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: LIST
47387: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47388: LD_ADDR_VAR 0 42
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47429: LD_ADDR_VAR 0 43
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47469: LD_ADDR_VAR 0 44
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47510: LD_ADDR_VAR 0 45
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47554: LD_ADDR_VAR 0 46
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 3
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47600: LD_ADDR_VAR 0 47
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 3
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 3
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47633: LD_ADDR_VAR 0 48
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47664: LD_ADDR_VAR 0 49
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47693: LD_ADDR_VAR 0 50
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 3
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47722: LD_ADDR_VAR 0 51
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47753: LD_ADDR_VAR 0 52
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47786: LD_ADDR_VAR 0 53
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47830: LD_ADDR_VAR 0 54
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47871: LD_ADDR_VAR 0 55
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47911: LD_ADDR_VAR 0 56
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47952: LD_ADDR_VAR 0 57
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 3
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: LIST
47995: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47996: LD_ADDR_VAR 0 58
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 3
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48042: LD_ADDR_VAR 0 59
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: LIST
48085: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48086: LD_ADDR_VAR 0 60
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48127: LD_ADDR_VAR 0 61
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: LIST
48166: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48167: LD_ADDR_VAR 0 62
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48208: LD_ADDR_VAR 0 63
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48252: LD_ADDR_VAR 0 64
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: ST_TO_ADDR
// end ; 2 :
48298: GO 51564
48300: LD_INT 2
48302: DOUBLE
48303: EQUAL
48304: IFTRUE 48308
48306: GO 51563
48308: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48309: LD_ADDR_VAR 0 29
48313: PUSH
48314: LD_INT 4
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 4
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 5
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 5
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 4
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 5
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: LD_INT 3
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 4
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 4
48439: PUSH
48440: LD_INT 4
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: LD_INT 4
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 4
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 4
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 4
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 4
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 5
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 5
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 4
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 5
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 3
48592: NEG
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 4
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 4
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 4
48671: NEG
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 4
48694: NEG
48695: PUSH
48696: LD_INT 4
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 4
48706: NEG
48707: PUSH
48708: LD_INT 5
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: LD_INT 4
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: NEG
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 4
48742: NEG
48743: PUSH
48744: LD_INT 3
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 5
48754: NEG
48755: PUSH
48756: LD_INT 4
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 5
48766: NEG
48767: PUSH
48768: LD_INT 5
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: NEG
48779: PUSH
48780: LD_INT 5
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 5
48790: NEG
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48847: LD_ADDR_VAR 0 30
48851: PUSH
48852: LD_INT 4
48854: PUSH
48855: LD_INT 4
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 4
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 5
48874: PUSH
48875: LD_INT 4
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 5
48884: PUSH
48885: LD_INT 5
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 4
48894: PUSH
48895: LD_INT 5
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: LD_INT 4
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 5
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: LD_INT 5
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: LD_INT 4
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 4
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: LD_INT 4
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 4
49037: NEG
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 4
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 4
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 5
49093: NEG
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 5
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 5
49116: NEG
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: NEG
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: NEG
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 3
49151: NEG
49152: PUSH
49153: LD_INT 4
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 3
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: NEG
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 4
49199: NEG
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 4
49211: NEG
49212: PUSH
49213: LD_INT 4
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: LD_INT 4
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 4
49235: NEG
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 4
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 5
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 4
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 3
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 3
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 4
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 5
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 5
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49394: LD_ADDR_VAR 0 31
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 4
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 4
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 5
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 5
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 4
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 5
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: NEG
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 4
49550: NEG
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 4
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 4
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 4
49596: NEG
49597: PUSH
49598: LD_INT 4
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 4
49608: NEG
49609: PUSH
49610: LD_INT 5
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: LD_INT 4
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 4
49644: NEG
49645: PUSH
49646: LD_INT 3
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 5
49656: NEG
49657: PUSH
49658: LD_INT 4
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 5
49668: NEG
49669: PUSH
49670: LD_INT 5
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 3
49680: NEG
49681: PUSH
49682: LD_INT 5
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 5
49692: NEG
49693: PUSH
49694: LD_INT 3
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 3
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 4
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 3
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 3
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 4
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: LD_INT 4
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 4
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 4
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 5
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 5
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 4
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 3
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 5
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49944: LD_ADDR_VAR 0 32
49948: PUSH
49949: LD_INT 4
49951: NEG
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 4
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 4
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 5
50007: NEG
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 5
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 5
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: NEG
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 3
50053: NEG
50054: PUSH
50055: LD_INT 3
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: LD_INT 4
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 4
50113: NEG
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 4
50125: NEG
50126: PUSH
50127: LD_INT 4
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 4
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 4
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 5
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 4
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 3
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 4
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 5
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: LD_INT 3
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: LD_INT 5
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 3
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 4
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 4
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 4
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 4
50356: PUSH
50357: LD_INT 4
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 4
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 5
50376: PUSH
50377: LD_INT 4
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 5
50386: PUSH
50387: LD_INT 5
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 4
50396: PUSH
50397: LD_INT 5
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: LD_INT 4
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 5
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: LD_INT 5
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50491: LD_ADDR_VAR 0 33
50495: PUSH
50496: LD_INT 4
50498: NEG
50499: PUSH
50500: LD_INT 4
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 4
50510: NEG
50511: PUSH
50512: LD_INT 5
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: LD_INT 4
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: NEG
50535: PUSH
50536: LD_INT 3
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 4
50546: NEG
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 5
50558: NEG
50559: PUSH
50560: LD_INT 4
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 5
50570: NEG
50571: PUSH
50572: LD_INT 5
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 3
50582: NEG
50583: PUSH
50584: LD_INT 5
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 5
50594: NEG
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 4
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 3
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 4
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: LD_INT 4
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 4
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 4
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 5
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 4
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 5
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 4
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 4
50831: PUSH
50832: LD_INT 4
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: LD_INT 4
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: LD_INT 3
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 4
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 4
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 4
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 4
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 5
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 5
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 4
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 5
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51029: LD_ADDR_VAR 0 34
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 5
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 4
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 4
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 5
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 5
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 4
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 4
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 3
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 4
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 4
51231: PUSH
51232: LD_INT 4
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 4
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 5
51251: PUSH
51252: LD_INT 4
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 5
51261: PUSH
51262: LD_INT 5
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: LD_INT 5
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 3
51281: PUSH
51282: LD_INT 4
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 5
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 3
51311: PUSH
51312: LD_INT 5
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 4
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: LD_INT 4
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 4
51414: NEG
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 4
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 3
51448: NEG
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 4
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 5
51470: NEG
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 5
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 5
51493: NEG
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 3
51505: NEG
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: ST_TO_ADDR
// end ; end ;
51561: GO 51564
51563: POP
// case btype of b_depot , b_warehouse :
51564: LD_VAR 0 1
51568: PUSH
51569: LD_INT 0
51571: DOUBLE
51572: EQUAL
51573: IFTRUE 51583
51575: LD_INT 1
51577: DOUBLE
51578: EQUAL
51579: IFTRUE 51583
51581: GO 51784
51583: POP
// case nation of nation_american :
51584: LD_VAR 0 5
51588: PUSH
51589: LD_INT 1
51591: DOUBLE
51592: EQUAL
51593: IFTRUE 51597
51595: GO 51653
51597: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51598: LD_ADDR_VAR 0 9
51602: PUSH
51603: LD_VAR 0 11
51607: PUSH
51608: LD_VAR 0 12
51612: PUSH
51613: LD_VAR 0 13
51617: PUSH
51618: LD_VAR 0 14
51622: PUSH
51623: LD_VAR 0 15
51627: PUSH
51628: LD_VAR 0 16
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: PUSH
51641: LD_VAR 0 4
51645: PUSH
51646: LD_INT 1
51648: PLUS
51649: ARRAY
51650: ST_TO_ADDR
51651: GO 51782
51653: LD_INT 2
51655: DOUBLE
51656: EQUAL
51657: IFTRUE 51661
51659: GO 51717
51661: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51662: LD_ADDR_VAR 0 9
51666: PUSH
51667: LD_VAR 0 17
51671: PUSH
51672: LD_VAR 0 18
51676: PUSH
51677: LD_VAR 0 19
51681: PUSH
51682: LD_VAR 0 20
51686: PUSH
51687: LD_VAR 0 21
51691: PUSH
51692: LD_VAR 0 22
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: PUSH
51705: LD_VAR 0 4
51709: PUSH
51710: LD_INT 1
51712: PLUS
51713: ARRAY
51714: ST_TO_ADDR
51715: GO 51782
51717: LD_INT 3
51719: DOUBLE
51720: EQUAL
51721: IFTRUE 51725
51723: GO 51781
51725: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51726: LD_ADDR_VAR 0 9
51730: PUSH
51731: LD_VAR 0 23
51735: PUSH
51736: LD_VAR 0 24
51740: PUSH
51741: LD_VAR 0 25
51745: PUSH
51746: LD_VAR 0 26
51750: PUSH
51751: LD_VAR 0 27
51755: PUSH
51756: LD_VAR 0 28
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: PUSH
51769: LD_VAR 0 4
51773: PUSH
51774: LD_INT 1
51776: PLUS
51777: ARRAY
51778: ST_TO_ADDR
51779: GO 51782
51781: POP
51782: GO 52337
51784: LD_INT 2
51786: DOUBLE
51787: EQUAL
51788: IFTRUE 51798
51790: LD_INT 3
51792: DOUBLE
51793: EQUAL
51794: IFTRUE 51798
51796: GO 51854
51798: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51799: LD_ADDR_VAR 0 9
51803: PUSH
51804: LD_VAR 0 29
51808: PUSH
51809: LD_VAR 0 30
51813: PUSH
51814: LD_VAR 0 31
51818: PUSH
51819: LD_VAR 0 32
51823: PUSH
51824: LD_VAR 0 33
51828: PUSH
51829: LD_VAR 0 34
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: PUSH
51842: LD_VAR 0 4
51846: PUSH
51847: LD_INT 1
51849: PLUS
51850: ARRAY
51851: ST_TO_ADDR
51852: GO 52337
51854: LD_INT 16
51856: DOUBLE
51857: EQUAL
51858: IFTRUE 51916
51860: LD_INT 17
51862: DOUBLE
51863: EQUAL
51864: IFTRUE 51916
51866: LD_INT 18
51868: DOUBLE
51869: EQUAL
51870: IFTRUE 51916
51872: LD_INT 19
51874: DOUBLE
51875: EQUAL
51876: IFTRUE 51916
51878: LD_INT 22
51880: DOUBLE
51881: EQUAL
51882: IFTRUE 51916
51884: LD_INT 20
51886: DOUBLE
51887: EQUAL
51888: IFTRUE 51916
51890: LD_INT 21
51892: DOUBLE
51893: EQUAL
51894: IFTRUE 51916
51896: LD_INT 23
51898: DOUBLE
51899: EQUAL
51900: IFTRUE 51916
51902: LD_INT 24
51904: DOUBLE
51905: EQUAL
51906: IFTRUE 51916
51908: LD_INT 25
51910: DOUBLE
51911: EQUAL
51912: IFTRUE 51916
51914: GO 51972
51916: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51917: LD_ADDR_VAR 0 9
51921: PUSH
51922: LD_VAR 0 35
51926: PUSH
51927: LD_VAR 0 36
51931: PUSH
51932: LD_VAR 0 37
51936: PUSH
51937: LD_VAR 0 38
51941: PUSH
51942: LD_VAR 0 39
51946: PUSH
51947: LD_VAR 0 40
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: PUSH
51960: LD_VAR 0 4
51964: PUSH
51965: LD_INT 1
51967: PLUS
51968: ARRAY
51969: ST_TO_ADDR
51970: GO 52337
51972: LD_INT 6
51974: DOUBLE
51975: EQUAL
51976: IFTRUE 52028
51978: LD_INT 7
51980: DOUBLE
51981: EQUAL
51982: IFTRUE 52028
51984: LD_INT 8
51986: DOUBLE
51987: EQUAL
51988: IFTRUE 52028
51990: LD_INT 13
51992: DOUBLE
51993: EQUAL
51994: IFTRUE 52028
51996: LD_INT 12
51998: DOUBLE
51999: EQUAL
52000: IFTRUE 52028
52002: LD_INT 15
52004: DOUBLE
52005: EQUAL
52006: IFTRUE 52028
52008: LD_INT 11
52010: DOUBLE
52011: EQUAL
52012: IFTRUE 52028
52014: LD_INT 14
52016: DOUBLE
52017: EQUAL
52018: IFTRUE 52028
52020: LD_INT 10
52022: DOUBLE
52023: EQUAL
52024: IFTRUE 52028
52026: GO 52084
52028: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52029: LD_ADDR_VAR 0 9
52033: PUSH
52034: LD_VAR 0 41
52038: PUSH
52039: LD_VAR 0 42
52043: PUSH
52044: LD_VAR 0 43
52048: PUSH
52049: LD_VAR 0 44
52053: PUSH
52054: LD_VAR 0 45
52058: PUSH
52059: LD_VAR 0 46
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: PUSH
52072: LD_VAR 0 4
52076: PUSH
52077: LD_INT 1
52079: PLUS
52080: ARRAY
52081: ST_TO_ADDR
52082: GO 52337
52084: LD_INT 36
52086: DOUBLE
52087: EQUAL
52088: IFTRUE 52092
52090: GO 52148
52092: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52093: LD_ADDR_VAR 0 9
52097: PUSH
52098: LD_VAR 0 47
52102: PUSH
52103: LD_VAR 0 48
52107: PUSH
52108: LD_VAR 0 49
52112: PUSH
52113: LD_VAR 0 50
52117: PUSH
52118: LD_VAR 0 51
52122: PUSH
52123: LD_VAR 0 52
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: PUSH
52136: LD_VAR 0 4
52140: PUSH
52141: LD_INT 1
52143: PLUS
52144: ARRAY
52145: ST_TO_ADDR
52146: GO 52337
52148: LD_INT 4
52150: DOUBLE
52151: EQUAL
52152: IFTRUE 52174
52154: LD_INT 5
52156: DOUBLE
52157: EQUAL
52158: IFTRUE 52174
52160: LD_INT 34
52162: DOUBLE
52163: EQUAL
52164: IFTRUE 52174
52166: LD_INT 37
52168: DOUBLE
52169: EQUAL
52170: IFTRUE 52174
52172: GO 52230
52174: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52175: LD_ADDR_VAR 0 9
52179: PUSH
52180: LD_VAR 0 53
52184: PUSH
52185: LD_VAR 0 54
52189: PUSH
52190: LD_VAR 0 55
52194: PUSH
52195: LD_VAR 0 56
52199: PUSH
52200: LD_VAR 0 57
52204: PUSH
52205: LD_VAR 0 58
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: PUSH
52218: LD_VAR 0 4
52222: PUSH
52223: LD_INT 1
52225: PLUS
52226: ARRAY
52227: ST_TO_ADDR
52228: GO 52337
52230: LD_INT 31
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52280
52236: LD_INT 32
52238: DOUBLE
52239: EQUAL
52240: IFTRUE 52280
52242: LD_INT 33
52244: DOUBLE
52245: EQUAL
52246: IFTRUE 52280
52248: LD_INT 27
52250: DOUBLE
52251: EQUAL
52252: IFTRUE 52280
52254: LD_INT 26
52256: DOUBLE
52257: EQUAL
52258: IFTRUE 52280
52260: LD_INT 28
52262: DOUBLE
52263: EQUAL
52264: IFTRUE 52280
52266: LD_INT 29
52268: DOUBLE
52269: EQUAL
52270: IFTRUE 52280
52272: LD_INT 30
52274: DOUBLE
52275: EQUAL
52276: IFTRUE 52280
52278: GO 52336
52280: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52281: LD_ADDR_VAR 0 9
52285: PUSH
52286: LD_VAR 0 59
52290: PUSH
52291: LD_VAR 0 60
52295: PUSH
52296: LD_VAR 0 61
52300: PUSH
52301: LD_VAR 0 62
52305: PUSH
52306: LD_VAR 0 63
52310: PUSH
52311: LD_VAR 0 64
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: PUSH
52324: LD_VAR 0 4
52328: PUSH
52329: LD_INT 1
52331: PLUS
52332: ARRAY
52333: ST_TO_ADDR
52334: GO 52337
52336: POP
// temp_list2 = [ ] ;
52337: LD_ADDR_VAR 0 10
52341: PUSH
52342: EMPTY
52343: ST_TO_ADDR
// for i in temp_list do
52344: LD_ADDR_VAR 0 8
52348: PUSH
52349: LD_VAR 0 9
52353: PUSH
52354: FOR_IN
52355: IFFALSE 52407
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52357: LD_ADDR_VAR 0 10
52361: PUSH
52362: LD_VAR 0 10
52366: PUSH
52367: LD_VAR 0 8
52371: PUSH
52372: LD_INT 1
52374: ARRAY
52375: PUSH
52376: LD_VAR 0 2
52380: PLUS
52381: PUSH
52382: LD_VAR 0 8
52386: PUSH
52387: LD_INT 2
52389: ARRAY
52390: PUSH
52391: LD_VAR 0 3
52395: PLUS
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: ADD
52404: ST_TO_ADDR
52405: GO 52354
52407: POP
52408: POP
// result = temp_list2 ;
52409: LD_ADDR_VAR 0 7
52413: PUSH
52414: LD_VAR 0 10
52418: ST_TO_ADDR
// end ;
52419: LD_VAR 0 7
52423: RET
// export function EnemyInRange ( unit , dist ) ; begin
52424: LD_INT 0
52426: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52427: LD_ADDR_VAR 0 3
52431: PUSH
52432: LD_VAR 0 1
52436: PPUSH
52437: CALL_OW 255
52441: PPUSH
52442: LD_VAR 0 1
52446: PPUSH
52447: CALL_OW 250
52451: PPUSH
52452: LD_VAR 0 1
52456: PPUSH
52457: CALL_OW 251
52461: PPUSH
52462: LD_VAR 0 2
52466: PPUSH
52467: CALL 25820 0 4
52471: PUSH
52472: LD_INT 4
52474: ARRAY
52475: ST_TO_ADDR
// end ;
52476: LD_VAR 0 3
52480: RET
// export function PlayerSeeMe ( unit ) ; begin
52481: LD_INT 0
52483: PPUSH
// result := See ( your_side , unit ) ;
52484: LD_ADDR_VAR 0 2
52488: PUSH
52489: LD_OWVAR 2
52493: PPUSH
52494: LD_VAR 0 1
52498: PPUSH
52499: CALL_OW 292
52503: ST_TO_ADDR
// end ;
52504: LD_VAR 0 2
52508: RET
// export function ReverseDir ( unit ) ; begin
52509: LD_INT 0
52511: PPUSH
// if not unit then
52512: LD_VAR 0 1
52516: NOT
52517: IFFALSE 52521
// exit ;
52519: GO 52544
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52521: LD_ADDR_VAR 0 2
52525: PUSH
52526: LD_VAR 0 1
52530: PPUSH
52531: CALL_OW 254
52535: PUSH
52536: LD_INT 3
52538: PLUS
52539: PUSH
52540: LD_INT 6
52542: MOD
52543: ST_TO_ADDR
// end ;
52544: LD_VAR 0 2
52548: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52549: LD_INT 0
52551: PPUSH
52552: PPUSH
52553: PPUSH
52554: PPUSH
52555: PPUSH
// if not hexes then
52556: LD_VAR 0 2
52560: NOT
52561: IFFALSE 52565
// exit ;
52563: GO 52713
// dist := 9999 ;
52565: LD_ADDR_VAR 0 5
52569: PUSH
52570: LD_INT 9999
52572: ST_TO_ADDR
// for i = 1 to hexes do
52573: LD_ADDR_VAR 0 4
52577: PUSH
52578: DOUBLE
52579: LD_INT 1
52581: DEC
52582: ST_TO_ADDR
52583: LD_VAR 0 2
52587: PUSH
52588: FOR_TO
52589: IFFALSE 52701
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52591: LD_VAR 0 1
52595: PPUSH
52596: LD_VAR 0 2
52600: PUSH
52601: LD_VAR 0 4
52605: ARRAY
52606: PUSH
52607: LD_INT 1
52609: ARRAY
52610: PPUSH
52611: LD_VAR 0 2
52615: PUSH
52616: LD_VAR 0 4
52620: ARRAY
52621: PUSH
52622: LD_INT 2
52624: ARRAY
52625: PPUSH
52626: CALL_OW 297
52630: PUSH
52631: LD_VAR 0 5
52635: LESS
52636: IFFALSE 52699
// begin hex := hexes [ i ] ;
52638: LD_ADDR_VAR 0 7
52642: PUSH
52643: LD_VAR 0 2
52647: PUSH
52648: LD_VAR 0 4
52652: ARRAY
52653: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52654: LD_ADDR_VAR 0 5
52658: PUSH
52659: LD_VAR 0 1
52663: PPUSH
52664: LD_VAR 0 2
52668: PUSH
52669: LD_VAR 0 4
52673: ARRAY
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: PPUSH
52679: LD_VAR 0 2
52683: PUSH
52684: LD_VAR 0 4
52688: ARRAY
52689: PUSH
52690: LD_INT 2
52692: ARRAY
52693: PPUSH
52694: CALL_OW 297
52698: ST_TO_ADDR
// end ; end ;
52699: GO 52588
52701: POP
52702: POP
// result := hex ;
52703: LD_ADDR_VAR 0 3
52707: PUSH
52708: LD_VAR 0 7
52712: ST_TO_ADDR
// end ;
52713: LD_VAR 0 3
52717: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52718: LD_INT 0
52720: PPUSH
52721: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52722: LD_VAR 0 1
52726: NOT
52727: PUSH
52728: LD_VAR 0 1
52732: PUSH
52733: LD_INT 21
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 23
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PPUSH
52757: CALL_OW 69
52761: IN
52762: NOT
52763: OR
52764: IFFALSE 52768
// exit ;
52766: GO 52815
// for i = 1 to 3 do
52768: LD_ADDR_VAR 0 3
52772: PUSH
52773: DOUBLE
52774: LD_INT 1
52776: DEC
52777: ST_TO_ADDR
52778: LD_INT 3
52780: PUSH
52781: FOR_TO
52782: IFFALSE 52813
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52784: LD_VAR 0 1
52788: PPUSH
52789: CALL_OW 250
52793: PPUSH
52794: LD_VAR 0 1
52798: PPUSH
52799: CALL_OW 251
52803: PPUSH
52804: LD_INT 1
52806: PPUSH
52807: CALL_OW 453
52811: GO 52781
52813: POP
52814: POP
// end ;
52815: LD_VAR 0 2
52819: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52820: LD_INT 0
52822: PPUSH
52823: PPUSH
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52828: LD_VAR 0 1
52832: NOT
52833: PUSH
52834: LD_VAR 0 2
52838: NOT
52839: OR
52840: PUSH
52841: LD_VAR 0 1
52845: PPUSH
52846: CALL_OW 314
52850: OR
52851: IFFALSE 52855
// exit ;
52853: GO 53296
// x := GetX ( enemy_unit ) ;
52855: LD_ADDR_VAR 0 7
52859: PUSH
52860: LD_VAR 0 2
52864: PPUSH
52865: CALL_OW 250
52869: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52870: LD_ADDR_VAR 0 8
52874: PUSH
52875: LD_VAR 0 2
52879: PPUSH
52880: CALL_OW 251
52884: ST_TO_ADDR
// if not x or not y then
52885: LD_VAR 0 7
52889: NOT
52890: PUSH
52891: LD_VAR 0 8
52895: NOT
52896: OR
52897: IFFALSE 52901
// exit ;
52899: GO 53296
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52901: LD_ADDR_VAR 0 6
52905: PUSH
52906: LD_VAR 0 7
52910: PPUSH
52911: LD_INT 0
52913: PPUSH
52914: LD_INT 4
52916: PPUSH
52917: CALL_OW 272
52921: PUSH
52922: LD_VAR 0 8
52926: PPUSH
52927: LD_INT 0
52929: PPUSH
52930: LD_INT 4
52932: PPUSH
52933: CALL_OW 273
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_VAR 0 7
52946: PPUSH
52947: LD_INT 1
52949: PPUSH
52950: LD_INT 4
52952: PPUSH
52953: CALL_OW 272
52957: PUSH
52958: LD_VAR 0 8
52962: PPUSH
52963: LD_INT 1
52965: PPUSH
52966: LD_INT 4
52968: PPUSH
52969: CALL_OW 273
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_VAR 0 7
52982: PPUSH
52983: LD_INT 2
52985: PPUSH
52986: LD_INT 4
52988: PPUSH
52989: CALL_OW 272
52993: PUSH
52994: LD_VAR 0 8
52998: PPUSH
52999: LD_INT 2
53001: PPUSH
53002: LD_INT 4
53004: PPUSH
53005: CALL_OW 273
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_VAR 0 7
53018: PPUSH
53019: LD_INT 3
53021: PPUSH
53022: LD_INT 4
53024: PPUSH
53025: CALL_OW 272
53029: PUSH
53030: LD_VAR 0 8
53034: PPUSH
53035: LD_INT 3
53037: PPUSH
53038: LD_INT 4
53040: PPUSH
53041: CALL_OW 273
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_VAR 0 7
53054: PPUSH
53055: LD_INT 4
53057: PPUSH
53058: LD_INT 4
53060: PPUSH
53061: CALL_OW 272
53065: PUSH
53066: LD_VAR 0 8
53070: PPUSH
53071: LD_INT 4
53073: PPUSH
53074: LD_INT 4
53076: PPUSH
53077: CALL_OW 273
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_VAR 0 7
53090: PPUSH
53091: LD_INT 5
53093: PPUSH
53094: LD_INT 4
53096: PPUSH
53097: CALL_OW 272
53101: PUSH
53102: LD_VAR 0 8
53106: PPUSH
53107: LD_INT 5
53109: PPUSH
53110: LD_INT 4
53112: PPUSH
53113: CALL_OW 273
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: ST_TO_ADDR
// for i = tmp downto 1 do
53130: LD_ADDR_VAR 0 4
53134: PUSH
53135: DOUBLE
53136: LD_VAR 0 6
53140: INC
53141: ST_TO_ADDR
53142: LD_INT 1
53144: PUSH
53145: FOR_DOWNTO
53146: IFFALSE 53247
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53148: LD_VAR 0 6
53152: PUSH
53153: LD_VAR 0 4
53157: ARRAY
53158: PUSH
53159: LD_INT 1
53161: ARRAY
53162: PPUSH
53163: LD_VAR 0 6
53167: PUSH
53168: LD_VAR 0 4
53172: ARRAY
53173: PUSH
53174: LD_INT 2
53176: ARRAY
53177: PPUSH
53178: CALL_OW 488
53182: NOT
53183: PUSH
53184: LD_VAR 0 6
53188: PUSH
53189: LD_VAR 0 4
53193: ARRAY
53194: PUSH
53195: LD_INT 1
53197: ARRAY
53198: PPUSH
53199: LD_VAR 0 6
53203: PUSH
53204: LD_VAR 0 4
53208: ARRAY
53209: PUSH
53210: LD_INT 2
53212: ARRAY
53213: PPUSH
53214: CALL_OW 428
53218: PUSH
53219: LD_INT 0
53221: NONEQUAL
53222: OR
53223: IFFALSE 53245
// tmp := Delete ( tmp , i ) ;
53225: LD_ADDR_VAR 0 6
53229: PUSH
53230: LD_VAR 0 6
53234: PPUSH
53235: LD_VAR 0 4
53239: PPUSH
53240: CALL_OW 3
53244: ST_TO_ADDR
53245: GO 53145
53247: POP
53248: POP
// j := GetClosestHex ( unit , tmp ) ;
53249: LD_ADDR_VAR 0 5
53253: PUSH
53254: LD_VAR 0 1
53258: PPUSH
53259: LD_VAR 0 6
53263: PPUSH
53264: CALL 52549 0 2
53268: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53269: LD_VAR 0 1
53273: PPUSH
53274: LD_VAR 0 5
53278: PUSH
53279: LD_INT 1
53281: ARRAY
53282: PPUSH
53283: LD_VAR 0 5
53287: PUSH
53288: LD_INT 2
53290: ARRAY
53291: PPUSH
53292: CALL_OW 111
// end ;
53296: LD_VAR 0 3
53300: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53301: LD_INT 0
53303: PPUSH
53304: PPUSH
53305: PPUSH
// uc_side = 0 ;
53306: LD_ADDR_OWVAR 20
53310: PUSH
53311: LD_INT 0
53313: ST_TO_ADDR
// uc_nation = 0 ;
53314: LD_ADDR_OWVAR 21
53318: PUSH
53319: LD_INT 0
53321: ST_TO_ADDR
// InitHc_All ( ) ;
53322: CALL_OW 584
// InitVc ;
53326: CALL_OW 20
// if mastodonts then
53330: LD_VAR 0 6
53334: IFFALSE 53401
// for i = 1 to mastodonts do
53336: LD_ADDR_VAR 0 11
53340: PUSH
53341: DOUBLE
53342: LD_INT 1
53344: DEC
53345: ST_TO_ADDR
53346: LD_VAR 0 6
53350: PUSH
53351: FOR_TO
53352: IFFALSE 53399
// begin vc_chassis := 31 ;
53354: LD_ADDR_OWVAR 37
53358: PUSH
53359: LD_INT 31
53361: ST_TO_ADDR
// vc_control := control_rider ;
53362: LD_ADDR_OWVAR 38
53366: PUSH
53367: LD_INT 4
53369: ST_TO_ADDR
// animal := CreateVehicle ;
53370: LD_ADDR_VAR 0 12
53374: PUSH
53375: CALL_OW 45
53379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53380: LD_VAR 0 12
53384: PPUSH
53385: LD_VAR 0 8
53389: PPUSH
53390: LD_INT 0
53392: PPUSH
53393: CALL 55589 0 3
// end ;
53397: GO 53351
53399: POP
53400: POP
// if horses then
53401: LD_VAR 0 5
53405: IFFALSE 53472
// for i = 1 to horses do
53407: LD_ADDR_VAR 0 11
53411: PUSH
53412: DOUBLE
53413: LD_INT 1
53415: DEC
53416: ST_TO_ADDR
53417: LD_VAR 0 5
53421: PUSH
53422: FOR_TO
53423: IFFALSE 53470
// begin hc_class := 21 ;
53425: LD_ADDR_OWVAR 28
53429: PUSH
53430: LD_INT 21
53432: ST_TO_ADDR
// hc_gallery :=  ;
53433: LD_ADDR_OWVAR 33
53437: PUSH
53438: LD_STRING 
53440: ST_TO_ADDR
// animal := CreateHuman ;
53441: LD_ADDR_VAR 0 12
53445: PUSH
53446: CALL_OW 44
53450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53451: LD_VAR 0 12
53455: PPUSH
53456: LD_VAR 0 8
53460: PPUSH
53461: LD_INT 0
53463: PPUSH
53464: CALL 55589 0 3
// end ;
53468: GO 53422
53470: POP
53471: POP
// if birds then
53472: LD_VAR 0 1
53476: IFFALSE 53543
// for i = 1 to birds do
53478: LD_ADDR_VAR 0 11
53482: PUSH
53483: DOUBLE
53484: LD_INT 1
53486: DEC
53487: ST_TO_ADDR
53488: LD_VAR 0 1
53492: PUSH
53493: FOR_TO
53494: IFFALSE 53541
// begin hc_class = 18 ;
53496: LD_ADDR_OWVAR 28
53500: PUSH
53501: LD_INT 18
53503: ST_TO_ADDR
// hc_gallery =  ;
53504: LD_ADDR_OWVAR 33
53508: PUSH
53509: LD_STRING 
53511: ST_TO_ADDR
// animal := CreateHuman ;
53512: LD_ADDR_VAR 0 12
53516: PUSH
53517: CALL_OW 44
53521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53522: LD_VAR 0 12
53526: PPUSH
53527: LD_VAR 0 8
53531: PPUSH
53532: LD_INT 0
53534: PPUSH
53535: CALL 55589 0 3
// end ;
53539: GO 53493
53541: POP
53542: POP
// if tigers then
53543: LD_VAR 0 2
53547: IFFALSE 53631
// for i = 1 to tigers do
53549: LD_ADDR_VAR 0 11
53553: PUSH
53554: DOUBLE
53555: LD_INT 1
53557: DEC
53558: ST_TO_ADDR
53559: LD_VAR 0 2
53563: PUSH
53564: FOR_TO
53565: IFFALSE 53629
// begin hc_class = class_tiger ;
53567: LD_ADDR_OWVAR 28
53571: PUSH
53572: LD_INT 14
53574: ST_TO_ADDR
// hc_gallery =  ;
53575: LD_ADDR_OWVAR 33
53579: PUSH
53580: LD_STRING 
53582: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53583: LD_ADDR_OWVAR 35
53587: PUSH
53588: LD_INT 7
53590: NEG
53591: PPUSH
53592: LD_INT 7
53594: PPUSH
53595: CALL_OW 12
53599: ST_TO_ADDR
// animal := CreateHuman ;
53600: LD_ADDR_VAR 0 12
53604: PUSH
53605: CALL_OW 44
53609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53610: LD_VAR 0 12
53614: PPUSH
53615: LD_VAR 0 8
53619: PPUSH
53620: LD_INT 0
53622: PPUSH
53623: CALL 55589 0 3
// end ;
53627: GO 53564
53629: POP
53630: POP
// if apemans then
53631: LD_VAR 0 3
53635: IFFALSE 53758
// for i = 1 to apemans do
53637: LD_ADDR_VAR 0 11
53641: PUSH
53642: DOUBLE
53643: LD_INT 1
53645: DEC
53646: ST_TO_ADDR
53647: LD_VAR 0 3
53651: PUSH
53652: FOR_TO
53653: IFFALSE 53756
// begin hc_class = class_apeman ;
53655: LD_ADDR_OWVAR 28
53659: PUSH
53660: LD_INT 12
53662: ST_TO_ADDR
// hc_gallery =  ;
53663: LD_ADDR_OWVAR 33
53667: PUSH
53668: LD_STRING 
53670: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53671: LD_ADDR_OWVAR 35
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PPUSH
53680: LD_INT 2
53682: PPUSH
53683: CALL_OW 12
53687: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53688: LD_ADDR_OWVAR 31
53692: PUSH
53693: LD_INT 1
53695: PPUSH
53696: LD_INT 3
53698: PPUSH
53699: CALL_OW 12
53703: PUSH
53704: LD_INT 1
53706: PPUSH
53707: LD_INT 3
53709: PPUSH
53710: CALL_OW 12
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: ST_TO_ADDR
// animal := CreateHuman ;
53727: LD_ADDR_VAR 0 12
53731: PUSH
53732: CALL_OW 44
53736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53737: LD_VAR 0 12
53741: PPUSH
53742: LD_VAR 0 8
53746: PPUSH
53747: LD_INT 0
53749: PPUSH
53750: CALL 55589 0 3
// end ;
53754: GO 53652
53756: POP
53757: POP
// if enchidnas then
53758: LD_VAR 0 4
53762: IFFALSE 53829
// for i = 1 to enchidnas do
53764: LD_ADDR_VAR 0 11
53768: PUSH
53769: DOUBLE
53770: LD_INT 1
53772: DEC
53773: ST_TO_ADDR
53774: LD_VAR 0 4
53778: PUSH
53779: FOR_TO
53780: IFFALSE 53827
// begin hc_class = 13 ;
53782: LD_ADDR_OWVAR 28
53786: PUSH
53787: LD_INT 13
53789: ST_TO_ADDR
// hc_gallery =  ;
53790: LD_ADDR_OWVAR 33
53794: PUSH
53795: LD_STRING 
53797: ST_TO_ADDR
// animal := CreateHuman ;
53798: LD_ADDR_VAR 0 12
53802: PUSH
53803: CALL_OW 44
53807: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53808: LD_VAR 0 12
53812: PPUSH
53813: LD_VAR 0 8
53817: PPUSH
53818: LD_INT 0
53820: PPUSH
53821: CALL 55589 0 3
// end ;
53825: GO 53779
53827: POP
53828: POP
// if fishes then
53829: LD_VAR 0 7
53833: IFFALSE 53900
// for i = 1 to fishes do
53835: LD_ADDR_VAR 0 11
53839: PUSH
53840: DOUBLE
53841: LD_INT 1
53843: DEC
53844: ST_TO_ADDR
53845: LD_VAR 0 7
53849: PUSH
53850: FOR_TO
53851: IFFALSE 53898
// begin hc_class = 20 ;
53853: LD_ADDR_OWVAR 28
53857: PUSH
53858: LD_INT 20
53860: ST_TO_ADDR
// hc_gallery =  ;
53861: LD_ADDR_OWVAR 33
53865: PUSH
53866: LD_STRING 
53868: ST_TO_ADDR
// animal := CreateHuman ;
53869: LD_ADDR_VAR 0 12
53873: PUSH
53874: CALL_OW 44
53878: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53879: LD_VAR 0 12
53883: PPUSH
53884: LD_VAR 0 9
53888: PPUSH
53889: LD_INT 0
53891: PPUSH
53892: CALL 55589 0 3
// end ;
53896: GO 53850
53898: POP
53899: POP
// end ;
53900: LD_VAR 0 10
53904: RET
// export function WantHeal ( sci , unit ) ; begin
53905: LD_INT 0
53907: PPUSH
// if GetTaskList ( sci ) > 0 then
53908: LD_VAR 0 1
53912: PPUSH
53913: CALL_OW 437
53917: PUSH
53918: LD_INT 0
53920: GREATER
53921: IFFALSE 53991
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53923: LD_VAR 0 1
53927: PPUSH
53928: CALL_OW 437
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PUSH
53937: LD_INT 1
53939: ARRAY
53940: PUSH
53941: LD_STRING l
53943: EQUAL
53944: PUSH
53945: LD_VAR 0 1
53949: PPUSH
53950: CALL_OW 437
53954: PUSH
53955: LD_INT 1
53957: ARRAY
53958: PUSH
53959: LD_INT 4
53961: ARRAY
53962: PUSH
53963: LD_VAR 0 2
53967: EQUAL
53968: AND
53969: IFFALSE 53981
// result := true else
53971: LD_ADDR_VAR 0 3
53975: PUSH
53976: LD_INT 1
53978: ST_TO_ADDR
53979: GO 53989
// result := false ;
53981: LD_ADDR_VAR 0 3
53985: PUSH
53986: LD_INT 0
53988: ST_TO_ADDR
// end else
53989: GO 53999
// result := false ;
53991: LD_ADDR_VAR 0 3
53995: PUSH
53996: LD_INT 0
53998: ST_TO_ADDR
// end ;
53999: LD_VAR 0 3
54003: RET
// export function HealTarget ( sci ) ; begin
54004: LD_INT 0
54006: PPUSH
// if not sci then
54007: LD_VAR 0 1
54011: NOT
54012: IFFALSE 54016
// exit ;
54014: GO 54081
// result := 0 ;
54016: LD_ADDR_VAR 0 2
54020: PUSH
54021: LD_INT 0
54023: ST_TO_ADDR
// if GetTaskList ( sci ) then
54024: LD_VAR 0 1
54028: PPUSH
54029: CALL_OW 437
54033: IFFALSE 54081
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54035: LD_VAR 0 1
54039: PPUSH
54040: CALL_OW 437
54044: PUSH
54045: LD_INT 1
54047: ARRAY
54048: PUSH
54049: LD_INT 1
54051: ARRAY
54052: PUSH
54053: LD_STRING l
54055: EQUAL
54056: IFFALSE 54081
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54058: LD_ADDR_VAR 0 2
54062: PUSH
54063: LD_VAR 0 1
54067: PPUSH
54068: CALL_OW 437
54072: PUSH
54073: LD_INT 1
54075: ARRAY
54076: PUSH
54077: LD_INT 4
54079: ARRAY
54080: ST_TO_ADDR
// end ;
54081: LD_VAR 0 2
54085: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54086: LD_INT 0
54088: PPUSH
54089: PPUSH
54090: PPUSH
54091: PPUSH
// if not base_units then
54092: LD_VAR 0 1
54096: NOT
54097: IFFALSE 54101
// exit ;
54099: GO 54188
// result := false ;
54101: LD_ADDR_VAR 0 2
54105: PUSH
54106: LD_INT 0
54108: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54109: LD_ADDR_VAR 0 5
54113: PUSH
54114: LD_VAR 0 1
54118: PPUSH
54119: LD_INT 21
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PPUSH
54129: CALL_OW 72
54133: ST_TO_ADDR
// if not tmp then
54134: LD_VAR 0 5
54138: NOT
54139: IFFALSE 54143
// exit ;
54141: GO 54188
// for i in tmp do
54143: LD_ADDR_VAR 0 3
54147: PUSH
54148: LD_VAR 0 5
54152: PUSH
54153: FOR_IN
54154: IFFALSE 54186
// begin result := EnemyInRange ( i , 22 ) ;
54156: LD_ADDR_VAR 0 2
54160: PUSH
54161: LD_VAR 0 3
54165: PPUSH
54166: LD_INT 22
54168: PPUSH
54169: CALL 52424 0 2
54173: ST_TO_ADDR
// if result then
54174: LD_VAR 0 2
54178: IFFALSE 54184
// exit ;
54180: POP
54181: POP
54182: GO 54188
// end ;
54184: GO 54153
54186: POP
54187: POP
// end ;
54188: LD_VAR 0 2
54192: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54193: LD_INT 0
54195: PPUSH
54196: PPUSH
// if not units then
54197: LD_VAR 0 1
54201: NOT
54202: IFFALSE 54206
// exit ;
54204: GO 54276
// result := [ ] ;
54206: LD_ADDR_VAR 0 3
54210: PUSH
54211: EMPTY
54212: ST_TO_ADDR
// for i in units do
54213: LD_ADDR_VAR 0 4
54217: PUSH
54218: LD_VAR 0 1
54222: PUSH
54223: FOR_IN
54224: IFFALSE 54274
// if GetTag ( i ) = tag then
54226: LD_VAR 0 4
54230: PPUSH
54231: CALL_OW 110
54235: PUSH
54236: LD_VAR 0 2
54240: EQUAL
54241: IFFALSE 54272
// result := Replace ( result , result + 1 , i ) ;
54243: LD_ADDR_VAR 0 3
54247: PUSH
54248: LD_VAR 0 3
54252: PPUSH
54253: LD_VAR 0 3
54257: PUSH
54258: LD_INT 1
54260: PLUS
54261: PPUSH
54262: LD_VAR 0 4
54266: PPUSH
54267: CALL_OW 1
54271: ST_TO_ADDR
54272: GO 54223
54274: POP
54275: POP
// end ;
54276: LD_VAR 0 3
54280: RET
// export function IsDriver ( un ) ; begin
54281: LD_INT 0
54283: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54284: LD_ADDR_VAR 0 2
54288: PUSH
54289: LD_VAR 0 1
54293: PUSH
54294: LD_INT 55
54296: PUSH
54297: EMPTY
54298: LIST
54299: PPUSH
54300: CALL_OW 69
54304: IN
54305: ST_TO_ADDR
// end ;
54306: LD_VAR 0 2
54310: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54311: LD_INT 0
54313: PPUSH
54314: PPUSH
// list := [ ] ;
54315: LD_ADDR_VAR 0 5
54319: PUSH
54320: EMPTY
54321: ST_TO_ADDR
// case d of 0 :
54322: LD_VAR 0 3
54326: PUSH
54327: LD_INT 0
54329: DOUBLE
54330: EQUAL
54331: IFTRUE 54335
54333: GO 54468
54335: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54336: LD_ADDR_VAR 0 5
54340: PUSH
54341: LD_VAR 0 1
54345: PUSH
54346: LD_INT 4
54348: MINUS
54349: PUSH
54350: LD_VAR 0 2
54354: PUSH
54355: LD_INT 4
54357: MINUS
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: PUSH
54367: LD_VAR 0 1
54371: PUSH
54372: LD_INT 3
54374: MINUS
54375: PUSH
54376: LD_VAR 0 2
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: PUSH
54389: LD_VAR 0 1
54393: PUSH
54394: LD_INT 4
54396: PLUS
54397: PUSH
54398: LD_VAR 0 2
54402: PUSH
54403: LD_INT 4
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: LIST
54410: PUSH
54411: LD_VAR 0 1
54415: PUSH
54416: LD_INT 3
54418: PLUS
54419: PUSH
54420: LD_VAR 0 2
54424: PUSH
54425: LD_INT 3
54427: PLUS
54428: PUSH
54429: LD_INT 5
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: LIST
54436: PUSH
54437: LD_VAR 0 1
54441: PUSH
54442: LD_VAR 0 2
54446: PUSH
54447: LD_INT 4
54449: PLUS
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: ST_TO_ADDR
// end ; 1 :
54466: GO 55166
54468: LD_INT 1
54470: DOUBLE
54471: EQUAL
54472: IFTRUE 54476
54474: GO 54609
54476: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54477: LD_ADDR_VAR 0 5
54481: PUSH
54482: LD_VAR 0 1
54486: PUSH
54487: LD_VAR 0 2
54491: PUSH
54492: LD_INT 4
54494: MINUS
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: PUSH
54504: LD_VAR 0 1
54508: PUSH
54509: LD_INT 3
54511: MINUS
54512: PUSH
54513: LD_VAR 0 2
54517: PUSH
54518: LD_INT 3
54520: MINUS
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: LIST
54529: PUSH
54530: LD_VAR 0 1
54534: PUSH
54535: LD_INT 4
54537: MINUS
54538: PUSH
54539: LD_VAR 0 2
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: LIST
54551: PUSH
54552: LD_VAR 0 1
54556: PUSH
54557: LD_VAR 0 2
54561: PUSH
54562: LD_INT 3
54564: PLUS
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: PUSH
54574: LD_VAR 0 1
54578: PUSH
54579: LD_INT 4
54581: PLUS
54582: PUSH
54583: LD_VAR 0 2
54587: PUSH
54588: LD_INT 4
54590: PLUS
54591: PUSH
54592: LD_INT 5
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: LIST
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// end ; 2 :
54607: GO 55166
54609: LD_INT 2
54611: DOUBLE
54612: EQUAL
54613: IFTRUE 54617
54615: GO 54746
54617: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54618: LD_ADDR_VAR 0 5
54622: PUSH
54623: LD_VAR 0 1
54627: PUSH
54628: LD_VAR 0 2
54632: PUSH
54633: LD_INT 3
54635: MINUS
54636: PUSH
54637: LD_INT 3
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: LIST
54644: PUSH
54645: LD_VAR 0 1
54649: PUSH
54650: LD_INT 4
54652: PLUS
54653: PUSH
54654: LD_VAR 0 2
54658: PUSH
54659: LD_INT 4
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: PUSH
54667: LD_VAR 0 1
54671: PUSH
54672: LD_VAR 0 2
54676: PUSH
54677: LD_INT 4
54679: PLUS
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: PUSH
54689: LD_VAR 0 1
54693: PUSH
54694: LD_INT 3
54696: MINUS
54697: PUSH
54698: LD_VAR 0 2
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: PUSH
54711: LD_VAR 0 1
54715: PUSH
54716: LD_INT 4
54718: MINUS
54719: PUSH
54720: LD_VAR 0 2
54724: PUSH
54725: LD_INT 4
54727: MINUS
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// end ; 3 :
54744: GO 55166
54746: LD_INT 3
54748: DOUBLE
54749: EQUAL
54750: IFTRUE 54754
54752: GO 54887
54754: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54755: LD_ADDR_VAR 0 5
54759: PUSH
54760: LD_VAR 0 1
54764: PUSH
54765: LD_INT 3
54767: PLUS
54768: PUSH
54769: LD_VAR 0 2
54773: PUSH
54774: LD_INT 4
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: PUSH
54782: LD_VAR 0 1
54786: PUSH
54787: LD_INT 4
54789: PLUS
54790: PUSH
54791: LD_VAR 0 2
54795: PUSH
54796: LD_INT 4
54798: PLUS
54799: PUSH
54800: LD_INT 5
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: PUSH
54808: LD_VAR 0 1
54812: PUSH
54813: LD_INT 4
54815: MINUS
54816: PUSH
54817: LD_VAR 0 2
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: PUSH
54830: LD_VAR 0 1
54834: PUSH
54835: LD_VAR 0 2
54839: PUSH
54840: LD_INT 4
54842: MINUS
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: PUSH
54852: LD_VAR 0 1
54856: PUSH
54857: LD_INT 3
54859: MINUS
54860: PUSH
54861: LD_VAR 0 2
54865: PUSH
54866: LD_INT 3
54868: MINUS
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: LIST
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: ST_TO_ADDR
// end ; 4 :
54885: GO 55166
54887: LD_INT 4
54889: DOUBLE
54890: EQUAL
54891: IFTRUE 54895
54893: GO 55028
54895: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54896: LD_ADDR_VAR 0 5
54900: PUSH
54901: LD_VAR 0 1
54905: PUSH
54906: LD_VAR 0 2
54910: PUSH
54911: LD_INT 4
54913: PLUS
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: PUSH
54923: LD_VAR 0 1
54927: PUSH
54928: LD_INT 3
54930: PLUS
54931: PUSH
54932: LD_VAR 0 2
54936: PUSH
54937: LD_INT 3
54939: PLUS
54940: PUSH
54941: LD_INT 5
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: LIST
54948: PUSH
54949: LD_VAR 0 1
54953: PUSH
54954: LD_INT 4
54956: PLUS
54957: PUSH
54958: LD_VAR 0 2
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: LIST
54970: PUSH
54971: LD_VAR 0 1
54975: PUSH
54976: LD_VAR 0 2
54980: PUSH
54981: LD_INT 3
54983: MINUS
54984: PUSH
54985: LD_INT 3
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: PUSH
54993: LD_VAR 0 1
54997: PUSH
54998: LD_INT 4
55000: MINUS
55001: PUSH
55002: LD_VAR 0 2
55006: PUSH
55007: LD_INT 4
55009: MINUS
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// end ; 5 :
55026: GO 55166
55028: LD_INT 5
55030: DOUBLE
55031: EQUAL
55032: IFTRUE 55036
55034: GO 55165
55036: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55037: LD_ADDR_VAR 0 5
55041: PUSH
55042: LD_VAR 0 1
55046: PUSH
55047: LD_INT 4
55049: MINUS
55050: PUSH
55051: LD_VAR 0 2
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: PUSH
55064: LD_VAR 0 1
55068: PUSH
55069: LD_VAR 0 2
55073: PUSH
55074: LD_INT 4
55076: MINUS
55077: PUSH
55078: LD_INT 3
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: PUSH
55086: LD_VAR 0 1
55090: PUSH
55091: LD_INT 4
55093: PLUS
55094: PUSH
55095: LD_VAR 0 2
55099: PUSH
55100: LD_INT 4
55102: PLUS
55103: PUSH
55104: LD_INT 5
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: LIST
55111: PUSH
55112: LD_VAR 0 1
55116: PUSH
55117: LD_INT 3
55119: PLUS
55120: PUSH
55121: LD_VAR 0 2
55125: PUSH
55126: LD_INT 4
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: PUSH
55134: LD_VAR 0 1
55138: PUSH
55139: LD_VAR 0 2
55143: PUSH
55144: LD_INT 3
55146: PLUS
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// end ; end ;
55163: GO 55166
55165: POP
// result := list ;
55166: LD_ADDR_VAR 0 4
55170: PUSH
55171: LD_VAR 0 5
55175: ST_TO_ADDR
// end ;
55176: LD_VAR 0 4
55180: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55181: LD_INT 0
55183: PPUSH
55184: PPUSH
55185: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55186: LD_VAR 0 1
55190: NOT
55191: PUSH
55192: LD_VAR 0 2
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 3
55205: PUSH
55206: LD_INT 4
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: IN
55215: NOT
55216: OR
55217: IFFALSE 55221
// exit ;
55219: GO 55313
// tmp := [ ] ;
55221: LD_ADDR_VAR 0 5
55225: PUSH
55226: EMPTY
55227: ST_TO_ADDR
// for i in units do
55228: LD_ADDR_VAR 0 4
55232: PUSH
55233: LD_VAR 0 1
55237: PUSH
55238: FOR_IN
55239: IFFALSE 55282
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55241: LD_ADDR_VAR 0 5
55245: PUSH
55246: LD_VAR 0 5
55250: PPUSH
55251: LD_VAR 0 5
55255: PUSH
55256: LD_INT 1
55258: PLUS
55259: PPUSH
55260: LD_VAR 0 4
55264: PPUSH
55265: LD_VAR 0 2
55269: PPUSH
55270: CALL_OW 259
55274: PPUSH
55275: CALL_OW 2
55279: ST_TO_ADDR
55280: GO 55238
55282: POP
55283: POP
// if not tmp then
55284: LD_VAR 0 5
55288: NOT
55289: IFFALSE 55293
// exit ;
55291: GO 55313
// result := SortListByListDesc ( units , tmp ) ;
55293: LD_ADDR_VAR 0 3
55297: PUSH
55298: LD_VAR 0 1
55302: PPUSH
55303: LD_VAR 0 5
55307: PPUSH
55308: CALL_OW 77
55312: ST_TO_ADDR
// end ;
55313: LD_VAR 0 3
55317: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55318: LD_INT 0
55320: PPUSH
55321: PPUSH
55322: PPUSH
// result := false ;
55323: LD_ADDR_VAR 0 3
55327: PUSH
55328: LD_INT 0
55330: ST_TO_ADDR
// x := GetX ( building ) ;
55331: LD_ADDR_VAR 0 4
55335: PUSH
55336: LD_VAR 0 2
55340: PPUSH
55341: CALL_OW 250
55345: ST_TO_ADDR
// y := GetY ( building ) ;
55346: LD_ADDR_VAR 0 5
55350: PUSH
55351: LD_VAR 0 2
55355: PPUSH
55356: CALL_OW 251
55360: ST_TO_ADDR
// if not building or not x or not y then
55361: LD_VAR 0 2
55365: NOT
55366: PUSH
55367: LD_VAR 0 4
55371: NOT
55372: OR
55373: PUSH
55374: LD_VAR 0 5
55378: NOT
55379: OR
55380: IFFALSE 55384
// exit ;
55382: GO 55476
// if GetTaskList ( unit ) then
55384: LD_VAR 0 1
55388: PPUSH
55389: CALL_OW 437
55393: IFFALSE 55476
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55395: LD_STRING e
55397: PUSH
55398: LD_VAR 0 1
55402: PPUSH
55403: CALL_OW 437
55407: PUSH
55408: LD_INT 1
55410: ARRAY
55411: PUSH
55412: LD_INT 1
55414: ARRAY
55415: EQUAL
55416: PUSH
55417: LD_VAR 0 4
55421: PUSH
55422: LD_VAR 0 1
55426: PPUSH
55427: CALL_OW 437
55431: PUSH
55432: LD_INT 1
55434: ARRAY
55435: PUSH
55436: LD_INT 2
55438: ARRAY
55439: EQUAL
55440: AND
55441: PUSH
55442: LD_VAR 0 5
55446: PUSH
55447: LD_VAR 0 1
55451: PPUSH
55452: CALL_OW 437
55456: PUSH
55457: LD_INT 1
55459: ARRAY
55460: PUSH
55461: LD_INT 3
55463: ARRAY
55464: EQUAL
55465: AND
55466: IFFALSE 55476
// result := true end ;
55468: LD_ADDR_VAR 0 3
55472: PUSH
55473: LD_INT 1
55475: ST_TO_ADDR
// end ;
55476: LD_VAR 0 3
55480: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55481: LD_INT 0
55483: PPUSH
// result := false ;
55484: LD_ADDR_VAR 0 4
55488: PUSH
55489: LD_INT 0
55491: ST_TO_ADDR
// if GetTaskList ( unit ) then
55492: LD_VAR 0 1
55496: PPUSH
55497: CALL_OW 437
55501: IFFALSE 55584
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55503: LD_STRING M
55505: PUSH
55506: LD_VAR 0 1
55510: PPUSH
55511: CALL_OW 437
55515: PUSH
55516: LD_INT 1
55518: ARRAY
55519: PUSH
55520: LD_INT 1
55522: ARRAY
55523: EQUAL
55524: PUSH
55525: LD_VAR 0 2
55529: PUSH
55530: LD_VAR 0 1
55534: PPUSH
55535: CALL_OW 437
55539: PUSH
55540: LD_INT 1
55542: ARRAY
55543: PUSH
55544: LD_INT 2
55546: ARRAY
55547: EQUAL
55548: AND
55549: PUSH
55550: LD_VAR 0 3
55554: PUSH
55555: LD_VAR 0 1
55559: PPUSH
55560: CALL_OW 437
55564: PUSH
55565: LD_INT 1
55567: ARRAY
55568: PUSH
55569: LD_INT 3
55571: ARRAY
55572: EQUAL
55573: AND
55574: IFFALSE 55584
// result := true ;
55576: LD_ADDR_VAR 0 4
55580: PUSH
55581: LD_INT 1
55583: ST_TO_ADDR
// end ; end ;
55584: LD_VAR 0 4
55588: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55589: LD_INT 0
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
// if not unit or not area then
55595: LD_VAR 0 1
55599: NOT
55600: PUSH
55601: LD_VAR 0 2
55605: NOT
55606: OR
55607: IFFALSE 55611
// exit ;
55609: GO 55775
// tmp := AreaToList ( area , i ) ;
55611: LD_ADDR_VAR 0 6
55615: PUSH
55616: LD_VAR 0 2
55620: PPUSH
55621: LD_VAR 0 5
55625: PPUSH
55626: CALL_OW 517
55630: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55631: LD_ADDR_VAR 0 5
55635: PUSH
55636: DOUBLE
55637: LD_INT 1
55639: DEC
55640: ST_TO_ADDR
55641: LD_VAR 0 6
55645: PUSH
55646: LD_INT 1
55648: ARRAY
55649: PUSH
55650: FOR_TO
55651: IFFALSE 55773
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55653: LD_ADDR_VAR 0 7
55657: PUSH
55658: LD_VAR 0 6
55662: PUSH
55663: LD_INT 1
55665: ARRAY
55666: PUSH
55667: LD_VAR 0 5
55671: ARRAY
55672: PUSH
55673: LD_VAR 0 6
55677: PUSH
55678: LD_INT 2
55680: ARRAY
55681: PUSH
55682: LD_VAR 0 5
55686: ARRAY
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55692: LD_VAR 0 7
55696: PUSH
55697: LD_INT 1
55699: ARRAY
55700: PPUSH
55701: LD_VAR 0 7
55705: PUSH
55706: LD_INT 2
55708: ARRAY
55709: PPUSH
55710: CALL_OW 428
55714: PUSH
55715: LD_INT 0
55717: EQUAL
55718: IFFALSE 55771
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55720: LD_VAR 0 1
55724: PPUSH
55725: LD_VAR 0 7
55729: PUSH
55730: LD_INT 1
55732: ARRAY
55733: PPUSH
55734: LD_VAR 0 7
55738: PUSH
55739: LD_INT 2
55741: ARRAY
55742: PPUSH
55743: LD_VAR 0 3
55747: PPUSH
55748: CALL_OW 48
// result := IsPlaced ( unit ) ;
55752: LD_ADDR_VAR 0 4
55756: PUSH
55757: LD_VAR 0 1
55761: PPUSH
55762: CALL_OW 305
55766: ST_TO_ADDR
// exit ;
55767: POP
55768: POP
55769: GO 55775
// end ; end ;
55771: GO 55650
55773: POP
55774: POP
// end ;
55775: LD_VAR 0 4
55779: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55780: LD_INT 0
55782: PPUSH
55783: PPUSH
55784: PPUSH
// if not side or side > 8 then
55785: LD_VAR 0 1
55789: NOT
55790: PUSH
55791: LD_VAR 0 1
55795: PUSH
55796: LD_INT 8
55798: GREATER
55799: OR
55800: IFFALSE 55804
// exit ;
55802: GO 55991
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55804: LD_ADDR_VAR 0 4
55808: PUSH
55809: LD_INT 22
55811: PUSH
55812: LD_VAR 0 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 21
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PPUSH
55835: CALL_OW 69
55839: ST_TO_ADDR
// if not tmp then
55840: LD_VAR 0 4
55844: NOT
55845: IFFALSE 55849
// exit ;
55847: GO 55991
// enable_addtolog := true ;
55849: LD_ADDR_OWVAR 81
55853: PUSH
55854: LD_INT 1
55856: ST_TO_ADDR
// AddToLog ( [ ) ;
55857: LD_STRING [
55859: PPUSH
55860: CALL_OW 561
// for i in tmp do
55864: LD_ADDR_VAR 0 3
55868: PUSH
55869: LD_VAR 0 4
55873: PUSH
55874: FOR_IN
55875: IFFALSE 55982
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55877: LD_STRING [
55879: PUSH
55880: LD_VAR 0 3
55884: PPUSH
55885: CALL_OW 266
55889: STR
55890: PUSH
55891: LD_STRING , 
55893: STR
55894: PUSH
55895: LD_VAR 0 3
55899: PPUSH
55900: CALL_OW 250
55904: STR
55905: PUSH
55906: LD_STRING , 
55908: STR
55909: PUSH
55910: LD_VAR 0 3
55914: PPUSH
55915: CALL_OW 251
55919: STR
55920: PUSH
55921: LD_STRING , 
55923: STR
55924: PUSH
55925: LD_VAR 0 3
55929: PPUSH
55930: CALL_OW 254
55934: STR
55935: PUSH
55936: LD_STRING , 
55938: STR
55939: PUSH
55940: LD_VAR 0 3
55944: PPUSH
55945: LD_INT 1
55947: PPUSH
55948: CALL_OW 268
55952: STR
55953: PUSH
55954: LD_STRING , 
55956: STR
55957: PUSH
55958: LD_VAR 0 3
55962: PPUSH
55963: LD_INT 2
55965: PPUSH
55966: CALL_OW 268
55970: STR
55971: PUSH
55972: LD_STRING ],
55974: STR
55975: PPUSH
55976: CALL_OW 561
// end ;
55980: GO 55874
55982: POP
55983: POP
// AddToLog ( ]; ) ;
55984: LD_STRING ];
55986: PPUSH
55987: CALL_OW 561
// end ;
55991: LD_VAR 0 2
55995: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55996: LD_INT 0
55998: PPUSH
55999: PPUSH
56000: PPUSH
56001: PPUSH
56002: PPUSH
// if not area or not rate or not max then
56003: LD_VAR 0 1
56007: NOT
56008: PUSH
56009: LD_VAR 0 2
56013: NOT
56014: OR
56015: PUSH
56016: LD_VAR 0 4
56020: NOT
56021: OR
56022: IFFALSE 56026
// exit ;
56024: GO 56218
// while 1 do
56026: LD_INT 1
56028: IFFALSE 56218
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56030: LD_ADDR_VAR 0 9
56034: PUSH
56035: LD_VAR 0 1
56039: PPUSH
56040: LD_INT 1
56042: PPUSH
56043: CALL_OW 287
56047: PUSH
56048: LD_INT 10
56050: MUL
56051: ST_TO_ADDR
// r := rate / 10 ;
56052: LD_ADDR_VAR 0 7
56056: PUSH
56057: LD_VAR 0 2
56061: PUSH
56062: LD_INT 10
56064: DIVREAL
56065: ST_TO_ADDR
// time := 1 1$00 ;
56066: LD_ADDR_VAR 0 8
56070: PUSH
56071: LD_INT 2100
56073: ST_TO_ADDR
// if amount < min then
56074: LD_VAR 0 9
56078: PUSH
56079: LD_VAR 0 3
56083: LESS
56084: IFFALSE 56102
// r := r * 2 else
56086: LD_ADDR_VAR 0 7
56090: PUSH
56091: LD_VAR 0 7
56095: PUSH
56096: LD_INT 2
56098: MUL
56099: ST_TO_ADDR
56100: GO 56128
// if amount > max then
56102: LD_VAR 0 9
56106: PUSH
56107: LD_VAR 0 4
56111: GREATER
56112: IFFALSE 56128
// r := r / 2 ;
56114: LD_ADDR_VAR 0 7
56118: PUSH
56119: LD_VAR 0 7
56123: PUSH
56124: LD_INT 2
56126: DIVREAL
56127: ST_TO_ADDR
// time := time / r ;
56128: LD_ADDR_VAR 0 8
56132: PUSH
56133: LD_VAR 0 8
56137: PUSH
56138: LD_VAR 0 7
56142: DIVREAL
56143: ST_TO_ADDR
// if time < 0 then
56144: LD_VAR 0 8
56148: PUSH
56149: LD_INT 0
56151: LESS
56152: IFFALSE 56169
// time := time * - 1 ;
56154: LD_ADDR_VAR 0 8
56158: PUSH
56159: LD_VAR 0 8
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: MUL
56168: ST_TO_ADDR
// wait ( time ) ;
56169: LD_VAR 0 8
56173: PPUSH
56174: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56178: LD_INT 35
56180: PPUSH
56181: LD_INT 875
56183: PPUSH
56184: CALL_OW 12
56188: PPUSH
56189: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56193: LD_INT 1
56195: PPUSH
56196: LD_INT 5
56198: PPUSH
56199: CALL_OW 12
56203: PPUSH
56204: LD_VAR 0 1
56208: PPUSH
56209: LD_INT 1
56211: PPUSH
56212: CALL_OW 55
// end ;
56216: GO 56026
// end ;
56218: LD_VAR 0 5
56222: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56223: LD_INT 0
56225: PPUSH
56226: PPUSH
56227: PPUSH
56228: PPUSH
56229: PPUSH
56230: PPUSH
56231: PPUSH
56232: PPUSH
// if not turrets or not factories then
56233: LD_VAR 0 1
56237: NOT
56238: PUSH
56239: LD_VAR 0 2
56243: NOT
56244: OR
56245: IFFALSE 56249
// exit ;
56247: GO 56556
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56249: LD_ADDR_VAR 0 10
56253: PUSH
56254: LD_INT 5
56256: PUSH
56257: LD_INT 6
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 4
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 3
56276: PUSH
56277: LD_INT 5
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 24
56291: PUSH
56292: LD_INT 25
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 23
56301: PUSH
56302: LD_INT 27
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 42
56315: PUSH
56316: LD_INT 43
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 44
56325: PUSH
56326: LD_INT 46
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 45
56335: PUSH
56336: LD_INT 47
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: ST_TO_ADDR
// result := [ ] ;
56353: LD_ADDR_VAR 0 3
56357: PUSH
56358: EMPTY
56359: ST_TO_ADDR
// for i in turrets do
56360: LD_ADDR_VAR 0 4
56364: PUSH
56365: LD_VAR 0 1
56369: PUSH
56370: FOR_IN
56371: IFFALSE 56554
// begin nat := GetNation ( i ) ;
56373: LD_ADDR_VAR 0 7
56377: PUSH
56378: LD_VAR 0 4
56382: PPUSH
56383: CALL_OW 248
56387: ST_TO_ADDR
// weapon := 0 ;
56388: LD_ADDR_VAR 0 8
56392: PUSH
56393: LD_INT 0
56395: ST_TO_ADDR
// if not nat then
56396: LD_VAR 0 7
56400: NOT
56401: IFFALSE 56405
// continue ;
56403: GO 56370
// for j in list [ nat ] do
56405: LD_ADDR_VAR 0 5
56409: PUSH
56410: LD_VAR 0 10
56414: PUSH
56415: LD_VAR 0 7
56419: ARRAY
56420: PUSH
56421: FOR_IN
56422: IFFALSE 56463
// if GetBWeapon ( i ) = j [ 1 ] then
56424: LD_VAR 0 4
56428: PPUSH
56429: CALL_OW 269
56433: PUSH
56434: LD_VAR 0 5
56438: PUSH
56439: LD_INT 1
56441: ARRAY
56442: EQUAL
56443: IFFALSE 56461
// begin weapon := j [ 2 ] ;
56445: LD_ADDR_VAR 0 8
56449: PUSH
56450: LD_VAR 0 5
56454: PUSH
56455: LD_INT 2
56457: ARRAY
56458: ST_TO_ADDR
// break ;
56459: GO 56463
// end ;
56461: GO 56421
56463: POP
56464: POP
// if not weapon then
56465: LD_VAR 0 8
56469: NOT
56470: IFFALSE 56474
// continue ;
56472: GO 56370
// for k in factories do
56474: LD_ADDR_VAR 0 6
56478: PUSH
56479: LD_VAR 0 2
56483: PUSH
56484: FOR_IN
56485: IFFALSE 56550
// begin weapons := AvailableWeaponList ( k ) ;
56487: LD_ADDR_VAR 0 9
56491: PUSH
56492: LD_VAR 0 6
56496: PPUSH
56497: CALL_OW 478
56501: ST_TO_ADDR
// if not weapons then
56502: LD_VAR 0 9
56506: NOT
56507: IFFALSE 56511
// continue ;
56509: GO 56484
// if weapon in weapons then
56511: LD_VAR 0 8
56515: PUSH
56516: LD_VAR 0 9
56520: IN
56521: IFFALSE 56548
// begin result := [ i , weapon ] ;
56523: LD_ADDR_VAR 0 3
56527: PUSH
56528: LD_VAR 0 4
56532: PUSH
56533: LD_VAR 0 8
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: ST_TO_ADDR
// exit ;
56542: POP
56543: POP
56544: POP
56545: POP
56546: GO 56556
// end ; end ;
56548: GO 56484
56550: POP
56551: POP
// end ;
56552: GO 56370
56554: POP
56555: POP
// end ;
56556: LD_VAR 0 3
56560: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56561: LD_INT 0
56563: PPUSH
// if not side or side > 8 then
56564: LD_VAR 0 3
56568: NOT
56569: PUSH
56570: LD_VAR 0 3
56574: PUSH
56575: LD_INT 8
56577: GREATER
56578: OR
56579: IFFALSE 56583
// exit ;
56581: GO 56642
// if not range then
56583: LD_VAR 0 4
56587: NOT
56588: IFFALSE 56599
// range := - 12 ;
56590: LD_ADDR_VAR 0 4
56594: PUSH
56595: LD_INT 12
56597: NEG
56598: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56599: LD_VAR 0 1
56603: PPUSH
56604: LD_VAR 0 2
56608: PPUSH
56609: LD_VAR 0 3
56613: PPUSH
56614: LD_VAR 0 4
56618: PPUSH
56619: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56623: LD_VAR 0 1
56627: PPUSH
56628: LD_VAR 0 2
56632: PPUSH
56633: LD_VAR 0 3
56637: PPUSH
56638: CALL_OW 331
// end ;
56642: LD_VAR 0 5
56646: RET
// export function Video ( mode ) ; begin
56647: LD_INT 0
56649: PPUSH
// ingame_video = mode ;
56650: LD_ADDR_OWVAR 52
56654: PUSH
56655: LD_VAR 0 1
56659: ST_TO_ADDR
// interface_hidden = mode ;
56660: LD_ADDR_OWVAR 54
56664: PUSH
56665: LD_VAR 0 1
56669: ST_TO_ADDR
// end ;
56670: LD_VAR 0 2
56674: RET
// export function Join ( array , element ) ; begin
56675: LD_INT 0
56677: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56678: LD_ADDR_VAR 0 3
56682: PUSH
56683: LD_VAR 0 1
56687: PPUSH
56688: LD_VAR 0 1
56692: PUSH
56693: LD_INT 1
56695: PLUS
56696: PPUSH
56697: LD_VAR 0 2
56701: PPUSH
56702: CALL_OW 1
56706: ST_TO_ADDR
// end ;
56707: LD_VAR 0 3
56711: RET
// export function JoinUnion ( array , element ) ; begin
56712: LD_INT 0
56714: PPUSH
// result := array union element ;
56715: LD_ADDR_VAR 0 3
56719: PUSH
56720: LD_VAR 0 1
56724: PUSH
56725: LD_VAR 0 2
56729: UNION
56730: ST_TO_ADDR
// end ;
56731: LD_VAR 0 3
56735: RET
// export function GetBehemoths ( side ) ; begin
56736: LD_INT 0
56738: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56739: LD_ADDR_VAR 0 2
56743: PUSH
56744: LD_INT 22
56746: PUSH
56747: LD_VAR 0 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 31
56758: PUSH
56759: LD_INT 25
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PPUSH
56770: CALL_OW 69
56774: ST_TO_ADDR
// end ;
56775: LD_VAR 0 2
56779: RET
// export function Shuffle ( array ) ; var i , index ; begin
56780: LD_INT 0
56782: PPUSH
56783: PPUSH
56784: PPUSH
// result := [ ] ;
56785: LD_ADDR_VAR 0 2
56789: PUSH
56790: EMPTY
56791: ST_TO_ADDR
// if not array then
56792: LD_VAR 0 1
56796: NOT
56797: IFFALSE 56801
// exit ;
56799: GO 56900
// Randomize ;
56801: CALL_OW 10
// for i = array downto 1 do
56805: LD_ADDR_VAR 0 3
56809: PUSH
56810: DOUBLE
56811: LD_VAR 0 1
56815: INC
56816: ST_TO_ADDR
56817: LD_INT 1
56819: PUSH
56820: FOR_DOWNTO
56821: IFFALSE 56898
// begin index := rand ( 1 , array ) ;
56823: LD_ADDR_VAR 0 4
56827: PUSH
56828: LD_INT 1
56830: PPUSH
56831: LD_VAR 0 1
56835: PPUSH
56836: CALL_OW 12
56840: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56841: LD_ADDR_VAR 0 2
56845: PUSH
56846: LD_VAR 0 2
56850: PPUSH
56851: LD_VAR 0 2
56855: PUSH
56856: LD_INT 1
56858: PLUS
56859: PPUSH
56860: LD_VAR 0 1
56864: PUSH
56865: LD_VAR 0 4
56869: ARRAY
56870: PPUSH
56871: CALL_OW 2
56875: ST_TO_ADDR
// array := Delete ( array , index ) ;
56876: LD_ADDR_VAR 0 1
56880: PUSH
56881: LD_VAR 0 1
56885: PPUSH
56886: LD_VAR 0 4
56890: PPUSH
56891: CALL_OW 3
56895: ST_TO_ADDR
// end ;
56896: GO 56820
56898: POP
56899: POP
// end ;
56900: LD_VAR 0 2
56904: RET
// export function GetBaseMaterials ( base ) ; begin
56905: LD_INT 0
56907: PPUSH
// result := [ 0 , 0 , 0 ] ;
56908: LD_ADDR_VAR 0 2
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// if not base then
56927: LD_VAR 0 1
56931: NOT
56932: IFFALSE 56936
// exit ;
56934: GO 56985
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56936: LD_ADDR_VAR 0 2
56940: PUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: LD_INT 1
56948: PPUSH
56949: CALL_OW 275
56953: PUSH
56954: LD_VAR 0 1
56958: PPUSH
56959: LD_INT 2
56961: PPUSH
56962: CALL_OW 275
56966: PUSH
56967: LD_VAR 0 1
56971: PPUSH
56972: LD_INT 3
56974: PPUSH
56975: CALL_OW 275
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// end ;
56985: LD_VAR 0 2
56989: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56990: LD_INT 0
56992: PPUSH
56993: PPUSH
// result := array ;
56994: LD_ADDR_VAR 0 3
56998: PUSH
56999: LD_VAR 0 1
57003: ST_TO_ADDR
// if size > 0 then
57004: LD_VAR 0 2
57008: PUSH
57009: LD_INT 0
57011: GREATER
57012: IFFALSE 57058
// for i := array downto size do
57014: LD_ADDR_VAR 0 4
57018: PUSH
57019: DOUBLE
57020: LD_VAR 0 1
57024: INC
57025: ST_TO_ADDR
57026: LD_VAR 0 2
57030: PUSH
57031: FOR_DOWNTO
57032: IFFALSE 57056
// result := Delete ( result , result ) ;
57034: LD_ADDR_VAR 0 3
57038: PUSH
57039: LD_VAR 0 3
57043: PPUSH
57044: LD_VAR 0 3
57048: PPUSH
57049: CALL_OW 3
57053: ST_TO_ADDR
57054: GO 57031
57056: POP
57057: POP
// end ;
57058: LD_VAR 0 3
57062: RET
// export function ComExit ( unit ) ; var tmp ; begin
57063: LD_INT 0
57065: PPUSH
57066: PPUSH
// if not IsInUnit ( unit ) then
57067: LD_VAR 0 1
57071: PPUSH
57072: CALL_OW 310
57076: NOT
57077: IFFALSE 57081
// exit ;
57079: GO 57141
// tmp := IsInUnit ( unit ) ;
57081: LD_ADDR_VAR 0 3
57085: PUSH
57086: LD_VAR 0 1
57090: PPUSH
57091: CALL_OW 310
57095: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57096: LD_VAR 0 3
57100: PPUSH
57101: CALL_OW 247
57105: PUSH
57106: LD_INT 2
57108: EQUAL
57109: IFFALSE 57122
// ComExitVehicle ( unit ) else
57111: LD_VAR 0 1
57115: PPUSH
57116: CALL_OW 121
57120: GO 57131
// ComExitBuilding ( unit ) ;
57122: LD_VAR 0 1
57126: PPUSH
57127: CALL_OW 122
// result := tmp ;
57131: LD_ADDR_VAR 0 2
57135: PUSH
57136: LD_VAR 0 3
57140: ST_TO_ADDR
// end ;
57141: LD_VAR 0 2
57145: RET
// export function ComExitAll ( units ) ; var i ; begin
57146: LD_INT 0
57148: PPUSH
57149: PPUSH
// if not units then
57150: LD_VAR 0 1
57154: NOT
57155: IFFALSE 57159
// exit ;
57157: GO 57185
// for i in units do
57159: LD_ADDR_VAR 0 3
57163: PUSH
57164: LD_VAR 0 1
57168: PUSH
57169: FOR_IN
57170: IFFALSE 57183
// ComExit ( i ) ;
57172: LD_VAR 0 3
57176: PPUSH
57177: CALL 57063 0 1
57181: GO 57169
57183: POP
57184: POP
// end ;
57185: LD_VAR 0 2
57189: RET
// export function ResetHc ; begin
57190: LD_INT 0
57192: PPUSH
// InitHc ;
57193: CALL_OW 19
// hc_importance := 0 ;
57197: LD_ADDR_OWVAR 32
57201: PUSH
57202: LD_INT 0
57204: ST_TO_ADDR
// end ;
57205: LD_VAR 0 1
57209: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57210: LD_INT 0
57212: PPUSH
57213: PPUSH
57214: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57215: LD_ADDR_VAR 0 6
57219: PUSH
57220: LD_VAR 0 1
57224: PUSH
57225: LD_VAR 0 3
57229: PLUS
57230: PUSH
57231: LD_INT 2
57233: DIV
57234: ST_TO_ADDR
// if _x < 0 then
57235: LD_VAR 0 6
57239: PUSH
57240: LD_INT 0
57242: LESS
57243: IFFALSE 57260
// _x := _x * - 1 ;
57245: LD_ADDR_VAR 0 6
57249: PUSH
57250: LD_VAR 0 6
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: MUL
57259: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57260: LD_ADDR_VAR 0 7
57264: PUSH
57265: LD_VAR 0 2
57269: PUSH
57270: LD_VAR 0 4
57274: PLUS
57275: PUSH
57276: LD_INT 2
57278: DIV
57279: ST_TO_ADDR
// if _y < 0 then
57280: LD_VAR 0 7
57284: PUSH
57285: LD_INT 0
57287: LESS
57288: IFFALSE 57305
// _y := _y * - 1 ;
57290: LD_ADDR_VAR 0 7
57294: PUSH
57295: LD_VAR 0 7
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: MUL
57304: ST_TO_ADDR
// result := [ _x , _y ] ;
57305: LD_ADDR_VAR 0 5
57309: PUSH
57310: LD_VAR 0 6
57314: PUSH
57315: LD_VAR 0 7
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: ST_TO_ADDR
// end ;
57324: LD_VAR 0 5
57328: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57329: LD_INT 0
57331: PPUSH
57332: PPUSH
57333: PPUSH
57334: PPUSH
// task := GetTaskList ( unit ) ;
57335: LD_ADDR_VAR 0 7
57339: PUSH
57340: LD_VAR 0 1
57344: PPUSH
57345: CALL_OW 437
57349: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57350: LD_VAR 0 7
57354: NOT
57355: PUSH
57356: LD_VAR 0 1
57360: PPUSH
57361: LD_VAR 0 2
57365: PPUSH
57366: CALL_OW 308
57370: NOT
57371: AND
57372: IFFALSE 57376
// exit ;
57374: GO 57494
// if IsInArea ( unit , area ) then
57376: LD_VAR 0 1
57380: PPUSH
57381: LD_VAR 0 2
57385: PPUSH
57386: CALL_OW 308
57390: IFFALSE 57408
// begin ComMoveToArea ( unit , goAway ) ;
57392: LD_VAR 0 1
57396: PPUSH
57397: LD_VAR 0 3
57401: PPUSH
57402: CALL_OW 113
// exit ;
57406: GO 57494
// end ; if task [ 1 ] [ 1 ] <> M then
57408: LD_VAR 0 7
57412: PUSH
57413: LD_INT 1
57415: ARRAY
57416: PUSH
57417: LD_INT 1
57419: ARRAY
57420: PUSH
57421: LD_STRING M
57423: NONEQUAL
57424: IFFALSE 57428
// exit ;
57426: GO 57494
// x := task [ 1 ] [ 2 ] ;
57428: LD_ADDR_VAR 0 5
57432: PUSH
57433: LD_VAR 0 7
57437: PUSH
57438: LD_INT 1
57440: ARRAY
57441: PUSH
57442: LD_INT 2
57444: ARRAY
57445: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57446: LD_ADDR_VAR 0 6
57450: PUSH
57451: LD_VAR 0 7
57455: PUSH
57456: LD_INT 1
57458: ARRAY
57459: PUSH
57460: LD_INT 3
57462: ARRAY
57463: ST_TO_ADDR
// if InArea ( x , y , area ) then
57464: LD_VAR 0 5
57468: PPUSH
57469: LD_VAR 0 6
57473: PPUSH
57474: LD_VAR 0 2
57478: PPUSH
57479: CALL_OW 309
57483: IFFALSE 57494
// ComStop ( unit ) ;
57485: LD_VAR 0 1
57489: PPUSH
57490: CALL_OW 141
// end ;
57494: LD_VAR 0 4
57498: RET
// export function Abs ( value ) ; begin
57499: LD_INT 0
57501: PPUSH
// result := value ;
57502: LD_ADDR_VAR 0 2
57506: PUSH
57507: LD_VAR 0 1
57511: ST_TO_ADDR
// if value < 0 then
57512: LD_VAR 0 1
57516: PUSH
57517: LD_INT 0
57519: LESS
57520: IFFALSE 57537
// result := value * - 1 ;
57522: LD_ADDR_VAR 0 2
57526: PUSH
57527: LD_VAR 0 1
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: MUL
57536: ST_TO_ADDR
// end ;
57537: LD_VAR 0 2
57541: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57542: LD_INT 0
57544: PPUSH
57545: PPUSH
57546: PPUSH
57547: PPUSH
57548: PPUSH
57549: PPUSH
57550: PPUSH
57551: PPUSH
// if not unit or not building then
57552: LD_VAR 0 1
57556: NOT
57557: PUSH
57558: LD_VAR 0 2
57562: NOT
57563: OR
57564: IFFALSE 57568
// exit ;
57566: GO 57794
// x := GetX ( building ) ;
57568: LD_ADDR_VAR 0 4
57572: PUSH
57573: LD_VAR 0 2
57577: PPUSH
57578: CALL_OW 250
57582: ST_TO_ADDR
// y := GetY ( building ) ;
57583: LD_ADDR_VAR 0 6
57587: PUSH
57588: LD_VAR 0 2
57592: PPUSH
57593: CALL_OW 251
57597: ST_TO_ADDR
// d := GetDir ( building ) ;
57598: LD_ADDR_VAR 0 8
57602: PUSH
57603: LD_VAR 0 2
57607: PPUSH
57608: CALL_OW 254
57612: ST_TO_ADDR
// r := 4 ;
57613: LD_ADDR_VAR 0 9
57617: PUSH
57618: LD_INT 4
57620: ST_TO_ADDR
// for i := 1 to 5 do
57621: LD_ADDR_VAR 0 10
57625: PUSH
57626: DOUBLE
57627: LD_INT 1
57629: DEC
57630: ST_TO_ADDR
57631: LD_INT 5
57633: PUSH
57634: FOR_TO
57635: IFFALSE 57792
// begin _x := ShiftX ( x , d , r + i ) ;
57637: LD_ADDR_VAR 0 5
57641: PUSH
57642: LD_VAR 0 4
57646: PPUSH
57647: LD_VAR 0 8
57651: PPUSH
57652: LD_VAR 0 9
57656: PUSH
57657: LD_VAR 0 10
57661: PLUS
57662: PPUSH
57663: CALL_OW 272
57667: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57668: LD_ADDR_VAR 0 7
57672: PUSH
57673: LD_VAR 0 6
57677: PPUSH
57678: LD_VAR 0 8
57682: PPUSH
57683: LD_VAR 0 9
57687: PUSH
57688: LD_VAR 0 10
57692: PLUS
57693: PPUSH
57694: CALL_OW 273
57698: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57699: LD_VAR 0 5
57703: PPUSH
57704: LD_VAR 0 7
57708: PPUSH
57709: CALL_OW 488
57713: PUSH
57714: LD_VAR 0 5
57718: PPUSH
57719: LD_VAR 0 7
57723: PPUSH
57724: CALL_OW 428
57728: PPUSH
57729: CALL_OW 247
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: IN
57744: NOT
57745: AND
57746: IFFALSE 57790
// begin ComMoveXY ( unit , _x , _y ) ;
57748: LD_VAR 0 1
57752: PPUSH
57753: LD_VAR 0 5
57757: PPUSH
57758: LD_VAR 0 7
57762: PPUSH
57763: CALL_OW 111
// result := [ _x , _y ] ;
57767: LD_ADDR_VAR 0 3
57771: PUSH
57772: LD_VAR 0 5
57776: PUSH
57777: LD_VAR 0 7
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// exit ;
57786: POP
57787: POP
57788: GO 57794
// end ; end ;
57790: GO 57634
57792: POP
57793: POP
// end ;
57794: LD_VAR 0 3
57798: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57799: LD_INT 0
57801: PPUSH
57802: PPUSH
57803: PPUSH
// result := 0 ;
57804: LD_ADDR_VAR 0 3
57808: PUSH
57809: LD_INT 0
57811: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57812: LD_VAR 0 1
57816: PUSH
57817: LD_INT 0
57819: LESS
57820: PUSH
57821: LD_VAR 0 1
57825: PUSH
57826: LD_INT 8
57828: GREATER
57829: OR
57830: PUSH
57831: LD_VAR 0 2
57835: PUSH
57836: LD_INT 0
57838: LESS
57839: OR
57840: PUSH
57841: LD_VAR 0 2
57845: PUSH
57846: LD_INT 8
57848: GREATER
57849: OR
57850: IFFALSE 57854
// exit ;
57852: GO 57929
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57854: LD_ADDR_VAR 0 4
57858: PUSH
57859: LD_INT 22
57861: PUSH
57862: LD_VAR 0 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PPUSH
57871: CALL_OW 69
57875: PUSH
57876: FOR_IN
57877: IFFALSE 57927
// begin un := UnitShoot ( i ) ;
57879: LD_ADDR_VAR 0 5
57883: PUSH
57884: LD_VAR 0 4
57888: PPUSH
57889: CALL_OW 504
57893: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57894: LD_VAR 0 5
57898: PPUSH
57899: CALL_OW 255
57903: PUSH
57904: LD_VAR 0 1
57908: EQUAL
57909: IFFALSE 57925
// begin result := un ;
57911: LD_ADDR_VAR 0 3
57915: PUSH
57916: LD_VAR 0 5
57920: ST_TO_ADDR
// exit ;
57921: POP
57922: POP
57923: GO 57929
// end ; end ;
57925: GO 57876
57927: POP
57928: POP
// end ;
57929: LD_VAR 0 3
57933: RET
// export function GetCargoBay ( units ) ; begin
57934: LD_INT 0
57936: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57937: LD_ADDR_VAR 0 2
57941: PUSH
57942: LD_VAR 0 1
57946: PPUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 34
57952: PUSH
57953: LD_INT 12
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 34
57962: PUSH
57963: LD_INT 51
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 34
57972: PUSH
57973: LD_INT 32
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 34
57982: PUSH
57983: LD_EXP 78
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: PPUSH
57999: CALL_OW 72
58003: ST_TO_ADDR
// end ;
58004: LD_VAR 0 2
58008: RET
// export function Negate ( value ) ; begin
58009: LD_INT 0
58011: PPUSH
// result := not value ;
58012: LD_ADDR_VAR 0 2
58016: PUSH
58017: LD_VAR 0 1
58021: NOT
58022: ST_TO_ADDR
// end ;
58023: LD_VAR 0 2
58027: RET
// export function Inc ( value ) ; begin
58028: LD_INT 0
58030: PPUSH
// result := value + 1 ;
58031: LD_ADDR_VAR 0 2
58035: PUSH
58036: LD_VAR 0 1
58040: PUSH
58041: LD_INT 1
58043: PLUS
58044: ST_TO_ADDR
// end ;
58045: LD_VAR 0 2
58049: RET
// export function Dec ( value ) ; begin
58050: LD_INT 0
58052: PPUSH
// result := value - 1 ;
58053: LD_ADDR_VAR 0 2
58057: PUSH
58058: LD_VAR 0 1
58062: PUSH
58063: LD_INT 1
58065: MINUS
58066: ST_TO_ADDR
// end ;
58067: LD_VAR 0 2
58071: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58072: LD_INT 0
58074: PPUSH
58075: PPUSH
58076: PPUSH
58077: PPUSH
58078: PPUSH
58079: PPUSH
58080: PPUSH
58081: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58082: LD_VAR 0 1
58086: PPUSH
58087: LD_VAR 0 2
58091: PPUSH
58092: CALL_OW 488
58096: NOT
58097: PUSH
58098: LD_VAR 0 3
58102: PPUSH
58103: LD_VAR 0 4
58107: PPUSH
58108: CALL_OW 488
58112: NOT
58113: OR
58114: IFFALSE 58127
// begin result := - 1 ;
58116: LD_ADDR_VAR 0 5
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: ST_TO_ADDR
// exit ;
58125: GO 58362
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58127: LD_ADDR_VAR 0 12
58131: PUSH
58132: LD_VAR 0 1
58136: PPUSH
58137: LD_VAR 0 2
58141: PPUSH
58142: LD_VAR 0 3
58146: PPUSH
58147: LD_VAR 0 4
58151: PPUSH
58152: CALL 57210 0 4
58156: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58157: LD_ADDR_VAR 0 11
58161: PUSH
58162: LD_VAR 0 1
58166: PPUSH
58167: LD_VAR 0 2
58171: PPUSH
58172: LD_VAR 0 12
58176: PUSH
58177: LD_INT 1
58179: ARRAY
58180: PPUSH
58181: LD_VAR 0 12
58185: PUSH
58186: LD_INT 2
58188: ARRAY
58189: PPUSH
58190: CALL_OW 298
58194: ST_TO_ADDR
// distance := 9999 ;
58195: LD_ADDR_VAR 0 10
58199: PUSH
58200: LD_INT 9999
58202: ST_TO_ADDR
// for i := 0 to 5 do
58203: LD_ADDR_VAR 0 6
58207: PUSH
58208: DOUBLE
58209: LD_INT 0
58211: DEC
58212: ST_TO_ADDR
58213: LD_INT 5
58215: PUSH
58216: FOR_TO
58217: IFFALSE 58360
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58219: LD_ADDR_VAR 0 7
58223: PUSH
58224: LD_VAR 0 1
58228: PPUSH
58229: LD_VAR 0 6
58233: PPUSH
58234: LD_VAR 0 11
58238: PPUSH
58239: CALL_OW 272
58243: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58244: LD_ADDR_VAR 0 8
58248: PUSH
58249: LD_VAR 0 2
58253: PPUSH
58254: LD_VAR 0 6
58258: PPUSH
58259: LD_VAR 0 11
58263: PPUSH
58264: CALL_OW 273
58268: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58269: LD_VAR 0 7
58273: PPUSH
58274: LD_VAR 0 8
58278: PPUSH
58279: CALL_OW 488
58283: NOT
58284: IFFALSE 58288
// continue ;
58286: GO 58216
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
58288: LD_ADDR_VAR 0 9
58292: PUSH
58293: LD_VAR 0 12
58297: PUSH
58298: LD_INT 1
58300: ARRAY
58301: PPUSH
58302: LD_VAR 0 12
58306: PUSH
58307: LD_INT 2
58309: ARRAY
58310: PPUSH
58311: LD_VAR 0 7
58315: PPUSH
58316: LD_VAR 0 8
58320: PPUSH
58321: CALL_OW 298
58325: ST_TO_ADDR
// if tmp < distance then
58326: LD_VAR 0 9
58330: PUSH
58331: LD_VAR 0 10
58335: LESS
58336: IFFALSE 58358
// begin result := i ;
58338: LD_ADDR_VAR 0 5
58342: PUSH
58343: LD_VAR 0 6
58347: ST_TO_ADDR
// distance := tmp ;
58348: LD_ADDR_VAR 0 10
58352: PUSH
58353: LD_VAR 0 9
58357: ST_TO_ADDR
// end ; end ;
58358: GO 58216
58360: POP
58361: POP
// end ;
58362: LD_VAR 0 5
58366: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58367: LD_INT 0
58369: PPUSH
58370: PPUSH
// if not driver or not IsInUnit ( driver ) then
58371: LD_VAR 0 1
58375: NOT
58376: PUSH
58377: LD_VAR 0 1
58381: PPUSH
58382: CALL_OW 310
58386: NOT
58387: OR
58388: IFFALSE 58392
// exit ;
58390: GO 58482
// vehicle := IsInUnit ( driver ) ;
58392: LD_ADDR_VAR 0 3
58396: PUSH
58397: LD_VAR 0 1
58401: PPUSH
58402: CALL_OW 310
58406: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58407: LD_VAR 0 1
58411: PPUSH
58412: LD_STRING \
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: PUSH
58442: LD_STRING E
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_VAR 0 3
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PPUSH
58478: CALL_OW 446
// end ;
58482: LD_VAR 0 2
58486: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58487: LD_INT 0
58489: PPUSH
58490: PPUSH
// if not driver or not IsInUnit ( driver ) then
58491: LD_VAR 0 1
58495: NOT
58496: PUSH
58497: LD_VAR 0 1
58501: PPUSH
58502: CALL_OW 310
58506: NOT
58507: OR
58508: IFFALSE 58512
// exit ;
58510: GO 58602
// vehicle := IsInUnit ( driver ) ;
58512: LD_ADDR_VAR 0 3
58516: PUSH
58517: LD_VAR 0 1
58521: PPUSH
58522: CALL_OW 310
58526: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58527: LD_VAR 0 1
58531: PPUSH
58532: LD_STRING \
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: PUSH
58562: LD_STRING E
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_VAR 0 3
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PPUSH
58598: CALL_OW 447
// end ;
58602: LD_VAR 0 2
58606: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58607: LD_INT 0
58609: PPUSH
58610: PPUSH
58611: PPUSH
// tmp := [ ] ;
58612: LD_ADDR_VAR 0 5
58616: PUSH
58617: EMPTY
58618: ST_TO_ADDR
// for i in units do
58619: LD_ADDR_VAR 0 4
58623: PUSH
58624: LD_VAR 0 1
58628: PUSH
58629: FOR_IN
58630: IFFALSE 58668
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58632: LD_ADDR_VAR 0 5
58636: PUSH
58637: LD_VAR 0 5
58641: PPUSH
58642: LD_VAR 0 5
58646: PUSH
58647: LD_INT 1
58649: PLUS
58650: PPUSH
58651: LD_VAR 0 4
58655: PPUSH
58656: CALL_OW 256
58660: PPUSH
58661: CALL_OW 2
58665: ST_TO_ADDR
58666: GO 58629
58668: POP
58669: POP
// if not tmp then
58670: LD_VAR 0 5
58674: NOT
58675: IFFALSE 58679
// exit ;
58677: GO 58727
// if asc then
58679: LD_VAR 0 2
58683: IFFALSE 58707
// result := SortListByListAsc ( units , tmp ) else
58685: LD_ADDR_VAR 0 3
58689: PUSH
58690: LD_VAR 0 1
58694: PPUSH
58695: LD_VAR 0 5
58699: PPUSH
58700: CALL_OW 76
58704: ST_TO_ADDR
58705: GO 58727
// result := SortListByListDesc ( units , tmp ) ;
58707: LD_ADDR_VAR 0 3
58711: PUSH
58712: LD_VAR 0 1
58716: PPUSH
58717: LD_VAR 0 5
58721: PPUSH
58722: CALL_OW 77
58726: ST_TO_ADDR
// end ;
58727: LD_VAR 0 3
58731: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58732: LD_INT 0
58734: PPUSH
58735: PPUSH
// task := GetTaskList ( mech ) ;
58736: LD_ADDR_VAR 0 4
58740: PUSH
58741: LD_VAR 0 1
58745: PPUSH
58746: CALL_OW 437
58750: ST_TO_ADDR
// if not task then
58751: LD_VAR 0 4
58755: NOT
58756: IFFALSE 58760
// exit ;
58758: GO 58802
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58760: LD_ADDR_VAR 0 3
58764: PUSH
58765: LD_VAR 0 4
58769: PUSH
58770: LD_INT 1
58772: ARRAY
58773: PUSH
58774: LD_INT 1
58776: ARRAY
58777: PUSH
58778: LD_STRING r
58780: EQUAL
58781: PUSH
58782: LD_VAR 0 4
58786: PUSH
58787: LD_INT 1
58789: ARRAY
58790: PUSH
58791: LD_INT 4
58793: ARRAY
58794: PUSH
58795: LD_VAR 0 2
58799: EQUAL
58800: AND
58801: ST_TO_ADDR
// end ;
58802: LD_VAR 0 3
58806: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58807: LD_INT 0
58809: PPUSH
// SetDir ( unit , d ) ;
58810: LD_VAR 0 1
58814: PPUSH
58815: LD_VAR 0 4
58819: PPUSH
58820: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58824: LD_VAR 0 1
58828: PPUSH
58829: LD_VAR 0 2
58833: PPUSH
58834: LD_VAR 0 3
58838: PPUSH
58839: LD_VAR 0 5
58843: PPUSH
58844: CALL_OW 48
// end ;
58848: LD_VAR 0 6
58852: RET
// export function ToNaturalNumber ( number ) ; begin
58853: LD_INT 0
58855: PPUSH
// result := number div 1 ;
58856: LD_ADDR_VAR 0 2
58860: PUSH
58861: LD_VAR 0 1
58865: PUSH
58866: LD_INT 1
58868: DIV
58869: ST_TO_ADDR
// if number < 0 then
58870: LD_VAR 0 1
58874: PUSH
58875: LD_INT 0
58877: LESS
58878: IFFALSE 58888
// result := 0 ;
58880: LD_ADDR_VAR 0 2
58884: PUSH
58885: LD_INT 0
58887: ST_TO_ADDR
// end ;
58888: LD_VAR 0 2
58892: RET
// export function SortByClass ( units , class ) ; var un ; begin
58893: LD_INT 0
58895: PPUSH
58896: PPUSH
// if not units or not class then
58897: LD_VAR 0 1
58901: NOT
58902: PUSH
58903: LD_VAR 0 2
58907: NOT
58908: OR
58909: IFFALSE 58913
// exit ;
58911: GO 59008
// result := [ ] ;
58913: LD_ADDR_VAR 0 3
58917: PUSH
58918: EMPTY
58919: ST_TO_ADDR
// for un in units do
58920: LD_ADDR_VAR 0 4
58924: PUSH
58925: LD_VAR 0 1
58929: PUSH
58930: FOR_IN
58931: IFFALSE 59006
// if GetClass ( un ) = class then
58933: LD_VAR 0 4
58937: PPUSH
58938: CALL_OW 257
58942: PUSH
58943: LD_VAR 0 2
58947: EQUAL
58948: IFFALSE 58975
// result := Insert ( result , 1 , un ) else
58950: LD_ADDR_VAR 0 3
58954: PUSH
58955: LD_VAR 0 3
58959: PPUSH
58960: LD_INT 1
58962: PPUSH
58963: LD_VAR 0 4
58967: PPUSH
58968: CALL_OW 2
58972: ST_TO_ADDR
58973: GO 59004
// result := Replace ( result , result + 1 , un ) ;
58975: LD_ADDR_VAR 0 3
58979: PUSH
58980: LD_VAR 0 3
58984: PPUSH
58985: LD_VAR 0 3
58989: PUSH
58990: LD_INT 1
58992: PLUS
58993: PPUSH
58994: LD_VAR 0 4
58998: PPUSH
58999: CALL_OW 1
59003: ST_TO_ADDR
59004: GO 58930
59006: POP
59007: POP
// end ;
59008: LD_VAR 0 3
59012: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59013: LD_INT 0
59015: PPUSH
59016: PPUSH
59017: PPUSH
59018: PPUSH
59019: PPUSH
59020: PPUSH
59021: PPUSH
// result := [ ] ;
59022: LD_ADDR_VAR 0 4
59026: PUSH
59027: EMPTY
59028: ST_TO_ADDR
// if x - r < 0 then
59029: LD_VAR 0 1
59033: PUSH
59034: LD_VAR 0 3
59038: MINUS
59039: PUSH
59040: LD_INT 0
59042: LESS
59043: IFFALSE 59055
// min_x := 0 else
59045: LD_ADDR_VAR 0 8
59049: PUSH
59050: LD_INT 0
59052: ST_TO_ADDR
59053: GO 59071
// min_x := x - r ;
59055: LD_ADDR_VAR 0 8
59059: PUSH
59060: LD_VAR 0 1
59064: PUSH
59065: LD_VAR 0 3
59069: MINUS
59070: ST_TO_ADDR
// if y - r < 0 then
59071: LD_VAR 0 2
59075: PUSH
59076: LD_VAR 0 3
59080: MINUS
59081: PUSH
59082: LD_INT 0
59084: LESS
59085: IFFALSE 59097
// min_y := 0 else
59087: LD_ADDR_VAR 0 7
59091: PUSH
59092: LD_INT 0
59094: ST_TO_ADDR
59095: GO 59113
// min_y := y - r ;
59097: LD_ADDR_VAR 0 7
59101: PUSH
59102: LD_VAR 0 2
59106: PUSH
59107: LD_VAR 0 3
59111: MINUS
59112: ST_TO_ADDR
// max_x := x + r ;
59113: LD_ADDR_VAR 0 9
59117: PUSH
59118: LD_VAR 0 1
59122: PUSH
59123: LD_VAR 0 3
59127: PLUS
59128: ST_TO_ADDR
// max_y := y + r ;
59129: LD_ADDR_VAR 0 10
59133: PUSH
59134: LD_VAR 0 2
59138: PUSH
59139: LD_VAR 0 3
59143: PLUS
59144: ST_TO_ADDR
// for _x = min_x to max_x do
59145: LD_ADDR_VAR 0 5
59149: PUSH
59150: DOUBLE
59151: LD_VAR 0 8
59155: DEC
59156: ST_TO_ADDR
59157: LD_VAR 0 9
59161: PUSH
59162: FOR_TO
59163: IFFALSE 59264
// for _y = min_y to max_y do
59165: LD_ADDR_VAR 0 6
59169: PUSH
59170: DOUBLE
59171: LD_VAR 0 7
59175: DEC
59176: ST_TO_ADDR
59177: LD_VAR 0 10
59181: PUSH
59182: FOR_TO
59183: IFFALSE 59260
// begin if not ValidHex ( _x , _y ) then
59185: LD_VAR 0 5
59189: PPUSH
59190: LD_VAR 0 6
59194: PPUSH
59195: CALL_OW 488
59199: NOT
59200: IFFALSE 59204
// continue ;
59202: GO 59182
// if GetResourceTypeXY ( _x , _y ) then
59204: LD_VAR 0 5
59208: PPUSH
59209: LD_VAR 0 6
59213: PPUSH
59214: CALL_OW 283
59218: IFFALSE 59258
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59220: LD_ADDR_VAR 0 4
59224: PUSH
59225: LD_VAR 0 4
59229: PPUSH
59230: LD_VAR 0 4
59234: PUSH
59235: LD_INT 1
59237: PLUS
59238: PPUSH
59239: LD_VAR 0 5
59243: PUSH
59244: LD_VAR 0 6
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PPUSH
59253: CALL_OW 1
59257: ST_TO_ADDR
// end ;
59258: GO 59182
59260: POP
59261: POP
59262: GO 59162
59264: POP
59265: POP
// end ;
59266: LD_VAR 0 4
59270: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
59271: LD_INT 0
59273: PPUSH
59274: PPUSH
59275: PPUSH
59276: PPUSH
59277: PPUSH
59278: PPUSH
59279: PPUSH
59280: PPUSH
// if not units then
59281: LD_VAR 0 1
59285: NOT
59286: IFFALSE 59290
// exit ;
59288: GO 59715
// result := UnitFilter ( units , [ f_ok ] ) ;
59290: LD_ADDR_VAR 0 3
59294: PUSH
59295: LD_VAR 0 1
59299: PPUSH
59300: LD_INT 50
59302: PUSH
59303: EMPTY
59304: LIST
59305: PPUSH
59306: CALL_OW 72
59310: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59311: LD_ADDR_VAR 0 8
59315: PUSH
59316: LD_VAR 0 1
59320: PUSH
59321: LD_INT 1
59323: ARRAY
59324: PPUSH
59325: CALL_OW 255
59329: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
59330: LD_ADDR_VAR 0 10
59334: PUSH
59335: LD_INT 29
59337: PUSH
59338: LD_EXP 81
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: ST_TO_ADDR
// if not result then
59347: LD_VAR 0 3
59351: NOT
59352: IFFALSE 59356
// exit ;
59354: GO 59715
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59356: LD_ADDR_VAR 0 5
59360: PUSH
59361: LD_INT 81
59363: PUSH
59364: LD_VAR 0 8
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PPUSH
59373: CALL_OW 69
59377: ST_TO_ADDR
// for i in result do
59378: LD_ADDR_VAR 0 4
59382: PUSH
59383: LD_VAR 0 3
59387: PUSH
59388: FOR_IN
59389: IFFALSE 59713
// begin tag := GetTag ( i ) + 1 ;
59391: LD_ADDR_VAR 0 9
59395: PUSH
59396: LD_VAR 0 4
59400: PPUSH
59401: CALL_OW 110
59405: PUSH
59406: LD_INT 1
59408: PLUS
59409: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59410: LD_ADDR_VAR 0 7
59414: PUSH
59415: LD_VAR 0 4
59419: PPUSH
59420: CALL_OW 250
59424: PPUSH
59425: LD_VAR 0 4
59429: PPUSH
59430: CALL_OW 251
59434: PPUSH
59435: LD_INT 6
59437: PPUSH
59438: CALL 59013 0 3
59442: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
59443: LD_VAR 0 7
59447: PUSH
59448: LD_VAR 0 4
59452: PPUSH
59453: CALL_OW 264
59457: PUSH
59458: LD_VAR 0 10
59462: IN
59463: NOT
59464: AND
59465: IFFALSE 59504
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59467: LD_VAR 0 4
59471: PPUSH
59472: LD_VAR 0 7
59476: PUSH
59477: LD_INT 1
59479: ARRAY
59480: PUSH
59481: LD_INT 1
59483: ARRAY
59484: PPUSH
59485: LD_VAR 0 7
59489: PUSH
59490: LD_INT 1
59492: ARRAY
59493: PUSH
59494: LD_INT 2
59496: ARRAY
59497: PPUSH
59498: CALL_OW 116
59502: GO 59711
// if path > tag then
59504: LD_VAR 0 2
59508: PUSH
59509: LD_VAR 0 9
59513: GREATER
59514: IFFALSE 59681
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
59516: LD_ADDR_VAR 0 6
59520: PUSH
59521: LD_VAR 0 5
59525: PPUSH
59526: LD_INT 91
59528: PUSH
59529: LD_VAR 0 4
59533: PUSH
59534: LD_INT 12
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: PPUSH
59542: CALL_OW 72
59546: ST_TO_ADDR
// if nearEnemy then
59547: LD_VAR 0 6
59551: IFFALSE 59579
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
59553: LD_VAR 0 4
59557: PPUSH
59558: LD_VAR 0 6
59562: PPUSH
59563: LD_VAR 0 4
59567: PPUSH
59568: CALL_OW 74
59572: PPUSH
59573: CALL_OW 115
59577: GO 59679
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59579: LD_VAR 0 4
59583: PPUSH
59584: LD_VAR 0 2
59588: PUSH
59589: LD_VAR 0 9
59593: ARRAY
59594: PUSH
59595: LD_INT 1
59597: ARRAY
59598: PPUSH
59599: LD_VAR 0 2
59603: PUSH
59604: LD_VAR 0 9
59608: ARRAY
59609: PUSH
59610: LD_INT 2
59612: ARRAY
59613: PPUSH
59614: CALL_OW 297
59618: PUSH
59619: LD_INT 6
59621: GREATER
59622: IFFALSE 59665
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59624: LD_VAR 0 4
59628: PPUSH
59629: LD_VAR 0 2
59633: PUSH
59634: LD_VAR 0 9
59638: ARRAY
59639: PUSH
59640: LD_INT 1
59642: ARRAY
59643: PPUSH
59644: LD_VAR 0 2
59648: PUSH
59649: LD_VAR 0 9
59653: ARRAY
59654: PUSH
59655: LD_INT 2
59657: ARRAY
59658: PPUSH
59659: CALL_OW 114
59663: GO 59679
// SetTag ( i , tag ) ;
59665: LD_VAR 0 4
59669: PPUSH
59670: LD_VAR 0 9
59674: PPUSH
59675: CALL_OW 109
// end else
59679: GO 59711
// if enemy then
59681: LD_VAR 0 5
59685: IFFALSE 59711
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59687: LD_VAR 0 4
59691: PPUSH
59692: LD_VAR 0 5
59696: PPUSH
59697: LD_VAR 0 4
59701: PPUSH
59702: CALL_OW 74
59706: PPUSH
59707: CALL_OW 115
// end ;
59711: GO 59388
59713: POP
59714: POP
// end ;
59715: LD_VAR 0 3
59719: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59720: LD_INT 0
59722: PPUSH
59723: PPUSH
59724: PPUSH
// if not unit or IsInUnit ( unit ) then
59725: LD_VAR 0 1
59729: NOT
59730: PUSH
59731: LD_VAR 0 1
59735: PPUSH
59736: CALL_OW 310
59740: OR
59741: IFFALSE 59745
// exit ;
59743: GO 59836
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59745: LD_ADDR_VAR 0 4
59749: PUSH
59750: LD_VAR 0 1
59754: PPUSH
59755: CALL_OW 250
59759: PPUSH
59760: LD_VAR 0 2
59764: PPUSH
59765: LD_INT 1
59767: PPUSH
59768: CALL_OW 272
59772: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59773: LD_ADDR_VAR 0 5
59777: PUSH
59778: LD_VAR 0 1
59782: PPUSH
59783: CALL_OW 251
59787: PPUSH
59788: LD_VAR 0 2
59792: PPUSH
59793: LD_INT 1
59795: PPUSH
59796: CALL_OW 273
59800: ST_TO_ADDR
// if ValidHex ( x , y ) then
59801: LD_VAR 0 4
59805: PPUSH
59806: LD_VAR 0 5
59810: PPUSH
59811: CALL_OW 488
59815: IFFALSE 59836
// ComTurnXY ( unit , x , y ) ;
59817: LD_VAR 0 1
59821: PPUSH
59822: LD_VAR 0 4
59826: PPUSH
59827: LD_VAR 0 5
59831: PPUSH
59832: CALL_OW 118
// end ;
59836: LD_VAR 0 3
59840: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59841: LD_INT 0
59843: PPUSH
59844: PPUSH
// result := false ;
59845: LD_ADDR_VAR 0 3
59849: PUSH
59850: LD_INT 0
59852: ST_TO_ADDR
// if not units then
59853: LD_VAR 0 2
59857: NOT
59858: IFFALSE 59862
// exit ;
59860: GO 59907
// for i in units do
59862: LD_ADDR_VAR 0 4
59866: PUSH
59867: LD_VAR 0 2
59871: PUSH
59872: FOR_IN
59873: IFFALSE 59905
// if See ( side , i ) then
59875: LD_VAR 0 1
59879: PPUSH
59880: LD_VAR 0 4
59884: PPUSH
59885: CALL_OW 292
59889: IFFALSE 59903
// begin result := true ;
59891: LD_ADDR_VAR 0 3
59895: PUSH
59896: LD_INT 1
59898: ST_TO_ADDR
// exit ;
59899: POP
59900: POP
59901: GO 59907
// end ;
59903: GO 59872
59905: POP
59906: POP
// end ;
59907: LD_VAR 0 3
59911: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59912: LD_INT 0
59914: PPUSH
59915: PPUSH
59916: PPUSH
59917: PPUSH
// if not unit or not points then
59918: LD_VAR 0 1
59922: NOT
59923: PUSH
59924: LD_VAR 0 2
59928: NOT
59929: OR
59930: IFFALSE 59934
// exit ;
59932: GO 60024
// dist := 99999 ;
59934: LD_ADDR_VAR 0 5
59938: PUSH
59939: LD_INT 99999
59941: ST_TO_ADDR
// for i in points do
59942: LD_ADDR_VAR 0 4
59946: PUSH
59947: LD_VAR 0 2
59951: PUSH
59952: FOR_IN
59953: IFFALSE 60022
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59955: LD_ADDR_VAR 0 6
59959: PUSH
59960: LD_VAR 0 1
59964: PPUSH
59965: LD_VAR 0 4
59969: PUSH
59970: LD_INT 1
59972: ARRAY
59973: PPUSH
59974: LD_VAR 0 4
59978: PUSH
59979: LD_INT 2
59981: ARRAY
59982: PPUSH
59983: CALL_OW 297
59987: ST_TO_ADDR
// if tmpDist < dist then
59988: LD_VAR 0 6
59992: PUSH
59993: LD_VAR 0 5
59997: LESS
59998: IFFALSE 60020
// begin result := i ;
60000: LD_ADDR_VAR 0 3
60004: PUSH
60005: LD_VAR 0 4
60009: ST_TO_ADDR
// dist := tmpDist ;
60010: LD_ADDR_VAR 0 5
60014: PUSH
60015: LD_VAR 0 6
60019: ST_TO_ADDR
// end ; end ;
60020: GO 59952
60022: POP
60023: POP
// end ; end_of_file
60024: LD_VAR 0 3
60028: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
60029: LD_INT 0
60031: PPUSH
// ar_miner := 81 ;
60032: LD_ADDR_EXP 84
60036: PUSH
60037: LD_INT 81
60039: ST_TO_ADDR
// ar_crane := 88 ;
60040: LD_ADDR_EXP 83
60044: PUSH
60045: LD_INT 88
60047: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
60048: LD_ADDR_EXP 78
60052: PUSH
60053: LD_INT 89
60055: ST_TO_ADDR
// us_hack := 99 ;
60056: LD_ADDR_EXP 79
60060: PUSH
60061: LD_INT 99
60063: ST_TO_ADDR
// us_artillery := 97 ;
60064: LD_ADDR_EXP 80
60068: PUSH
60069: LD_INT 97
60071: ST_TO_ADDR
// ar_bio_bomb := 91 ;
60072: LD_ADDR_EXP 81
60076: PUSH
60077: LD_INT 91
60079: ST_TO_ADDR
// ar_mortar := 92 ;
60080: LD_ADDR_EXP 82
60084: PUSH
60085: LD_INT 92
60087: ST_TO_ADDR
// ru_radar := 98 ;
60088: LD_ADDR_EXP 77
60092: PUSH
60093: LD_INT 98
60095: ST_TO_ADDR
// tech_Artillery := 80 ;
60096: LD_ADDR_EXP 85
60100: PUSH
60101: LD_INT 80
60103: ST_TO_ADDR
// tech_RadMat := 81 ;
60104: LD_ADDR_EXP 86
60108: PUSH
60109: LD_INT 81
60111: ST_TO_ADDR
// tech_BasicTools := 82 ;
60112: LD_ADDR_EXP 87
60116: PUSH
60117: LD_INT 82
60119: ST_TO_ADDR
// tech_Cargo := 83 ;
60120: LD_ADDR_EXP 88
60124: PUSH
60125: LD_INT 83
60127: ST_TO_ADDR
// tech_Track := 84 ;
60128: LD_ADDR_EXP 89
60132: PUSH
60133: LD_INT 84
60135: ST_TO_ADDR
// tech_Crane := 85 ;
60136: LD_ADDR_EXP 90
60140: PUSH
60141: LD_INT 85
60143: ST_TO_ADDR
// tech_Bulldozer := 86 ;
60144: LD_ADDR_EXP 91
60148: PUSH
60149: LD_INT 86
60151: ST_TO_ADDR
// tech_Hovercraft := 87 ;
60152: LD_ADDR_EXP 92
60156: PUSH
60157: LD_INT 87
60159: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
60160: LD_ADDR_EXP 93
60164: PUSH
60165: LD_INT 88
60167: ST_TO_ADDR
// class_mastodont := 31 ;
60168: LD_ADDR_EXP 94
60172: PUSH
60173: LD_INT 31
60175: ST_TO_ADDR
// class_horse := 21 ;
60176: LD_ADDR_EXP 95
60180: PUSH
60181: LD_INT 21
60183: ST_TO_ADDR
// end ;
60184: LD_VAR 0 1
60188: RET
// every 1 do
60189: GO 60191
60191: DISABLE
// InitGlobalVariables ; end_of_file
60192: CALL 60029 0 0
60196: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
60197: LD_VAR 0 1
60201: PPUSH
60202: LD_VAR 0 2
60206: PPUSH
60207: LD_VAR 0 3
60211: PPUSH
60212: LD_VAR 0 4
60216: PPUSH
60217: LD_VAR 0 5
60221: PPUSH
60222: LD_VAR 0 6
60226: PPUSH
60227: CALL 1985 0 6
// end ;
60231: PPOPN 6
60233: END
