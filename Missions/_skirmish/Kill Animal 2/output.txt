// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 83 0 0
// InitGlobalVariables ;
  18: CALL 61186 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 3
  60: PUSH
  61: LD_INT 3
  63: PUSH
  64: EMPTY
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: LIST
  70: LIST
  71: LIST
  72: LIST
  73: PPUSH
  74: CALL 395 0 3
// PrepareHunters ( ) ;
  78: CALL 241 0 0
// end ;
  82: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// if debug then
  94: LD_EXP 1
  98: IFFALSE 133
// begin FogOff ( 1 ) ;
 100: LD_INT 1
 102: PPUSH
 103: CALL_OW 344
// Difficulty := 2 ;
 107: LD_ADDR_OWVAR 67
 111: PUSH
 112: LD_INT 2
 114: ST_TO_ADDR
// hunterClass := 3 ;
 115: LD_ADDR_EXP 2
 119: PUSH
 120: LD_INT 3
 122: ST_TO_ADDR
// animalAmount := 2 ;
 123: LD_ADDR_EXP 4
 127: PUSH
 128: LD_INT 2
 130: ST_TO_ADDR
// end else
 131: GO 172
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 133: LD_ADDR_OWVAR 67
 137: PUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL_OW 426
 145: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 146: LD_ADDR_EXP 2
 150: PUSH
 151: LD_INT 2
 153: PPUSH
 154: CALL_OW 426
 158: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 159: LD_ADDR_EXP 4
 163: PUSH
 164: LD_INT 1
 166: PPUSH
 167: CALL_OW 426
 171: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 3
 176: PUSH
 177: LD_INT 4
 179: PUSH
 180: LD_INT 6
 182: PUSH
 183: LD_INT 8
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: LIST
 234: LIST
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// export function PrepareHunters ; var i , un ; begin
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
 245: PPUSH
// for i := 1 to huntersAmount do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_EXP 3
 260: PUSH
 261: FOR_TO
 262: IFFALSE 388
// begin uc_side := i ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_VAR 0 2
 283: PUSH
 284: LD_INT 3
 286: MOD
 287: PUSH
 288: LD_INT 1
 290: PLUS
 291: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 292: LD_INT 0
 294: PPUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 5
 300: PUSH
 301: LD_INT 11
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_EXP 2
 313: ARRAY
 314: PPUSH
 315: LD_INT 10
 317: PUSH
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: MUL
 326: MINUS
 327: PPUSH
 328: CALL_OW 380
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 3
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 342: LD_ADDR_EXP 6
 346: PUSH
 347: LD_EXP 6
 351: PPUSH
 352: LD_EXP 6
 356: PUSH
 357: LD_INT 1
 359: PLUS
 360: PPUSH
 361: LD_VAR 0 3
 365: PPUSH
 366: CALL_OW 1
 370: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 371: LD_VAR 0 3
 375: PPUSH
 376: LD_INT 3
 378: PPUSH
 379: LD_INT 0
 381: PPUSH
 382: CALL_OW 49
// end ;
 386: GO 261
 388: POP
 389: POP
// end ; end_of_file
 390: LD_VAR 0 1
 394: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
// uc_side = 0 ;
 402: LD_ADDR_OWVAR 20
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// uc_nation = 0 ;
 410: LD_ADDR_OWVAR 21
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 418: LD_ADDR_VAR 0 7
 422: PUSH
 423: LD_INT 12
 425: PUSH
 426: LD_INT 15
 428: PUSH
 429: LD_INT 13
 431: PUSH
 432: LD_INT 18
 434: PUSH
 435: LD_INT 14
 437: PUSH
 438: LD_EXP 94
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: LD_INT 20
 458: PUSH
 459: LD_INT 19
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: ST_TO_ADDR
// InitHc_All ( ) ;
 466: CALL_OW 584
// for i := 1 to numbers - 2 do
 470: LD_ADDR_VAR 0 5
 474: PUSH
 475: DOUBLE
 476: LD_INT 1
 478: DEC
 479: ST_TO_ADDR
 480: LD_VAR 0 3
 484: PUSH
 485: LD_INT 2
 487: MINUS
 488: PUSH
 489: FOR_TO
 490: IFFALSE 631
// begin if numbers [ i ] = 0 then
 492: LD_VAR 0 3
 496: PUSH
 497: LD_VAR 0 5
 501: ARRAY
 502: PUSH
 503: LD_INT 0
 505: EQUAL
 506: IFFALSE 510
// continue ;
 508: GO 489
// hc_class := classes [ i ] ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_VAR 0 7
 519: PUSH
 520: LD_VAR 0 5
 524: ARRAY
 525: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 526: LD_ADDR_OWVAR 29
 530: PUSH
 531: LD_INT 8
 533: PPUSH
 534: LD_INT 12
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 8
 544: PPUSH
 545: LD_INT 12
 547: PPUSH
 548: CALL_OW 12
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 557: LD_ADDR_OWVAR 35
 561: PUSH
 562: LD_INT 5
 564: NEG
 565: PPUSH
 566: LD_INT 5
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_OWVAR 67
 578: PUSH
 579: LD_INT 5
 581: MUL
 582: PLUS
 583: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 584: LD_ADDR_VAR 0 6
 588: PUSH
 589: DOUBLE
 590: LD_INT 1
 592: DEC
 593: ST_TO_ADDR
 594: LD_VAR 0 3
 598: PUSH
 599: LD_VAR 0 5
 603: ARRAY
 604: PUSH
 605: FOR_TO
 606: IFFALSE 627
// PlaceUnitArea ( CreateHuman , area , false ) ;
 608: CALL_OW 44
 612: PPUSH
 613: LD_VAR 0 1
 617: PPUSH
 618: LD_INT 0
 620: PPUSH
 621: CALL_OW 49
 625: GO 605
 627: POP
 628: POP
// end ;
 629: GO 489
 631: POP
 632: POP
// if not waterArea then
 633: LD_VAR 0 2
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 802
// hc_class := waterClass [ 1 ] ;
 642: LD_ADDR_OWVAR 28
 646: PUSH
 647: LD_VAR 0 8
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 656: LD_ADDR_OWVAR 29
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 10
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// hc_agressivity := 0 ;
 671: LD_ADDR_OWVAR 35
 675: PUSH
 676: LD_INT 0
 678: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 679: LD_ADDR_VAR 0 6
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_VAR 0 3
 693: PUSH
 694: LD_INT 7
 696: ARRAY
 697: PUSH
 698: FOR_TO
 699: IFFALSE 720
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 701: CALL_OW 44
 705: PPUSH
 706: LD_VAR 0 2
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: CALL_OW 49
 718: GO 698
 720: POP
 721: POP
// hc_class := waterClass [ 2 ] ;
 722: LD_ADDR_OWVAR 28
 726: PUSH
 727: LD_VAR 0 8
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 736: LD_ADDR_OWVAR 29
 740: PUSH
 741: LD_INT 10
 743: PUSH
 744: LD_INT 10
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// hc_agressivity := 0 ;
 751: LD_ADDR_OWVAR 35
 755: PUSH
 756: LD_INT 0
 758: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 759: LD_ADDR_VAR 0 6
 763: PUSH
 764: DOUBLE
 765: LD_INT 1
 767: DEC
 768: ST_TO_ADDR
 769: LD_VAR 0 3
 773: PUSH
 774: LD_INT 8
 776: ARRAY
 777: PUSH
 778: FOR_TO
 779: IFFALSE 800
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 781: CALL_OW 44
 785: PPUSH
 786: LD_VAR 0 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
 798: GO 778
 800: POP
 801: POP
// end ; end_of_file
 802: LD_VAR 0 4
 806: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 807: LD_INT 22
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 25
 819: PUSH
 820: LD_INT 15
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: IFFALSE 941
 837: GO 839
 839: DISABLE
 840: LD_INT 0
 842: PPUSH
// begin enable ;
 843: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 844: LD_ADDR_VAR 0 1
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 25
 861: PUSH
 862: LD_INT 15
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: PUSH
 878: FOR_IN
 879: IFFALSE 939
// if GetLives ( i ) < 1000 then
 881: LD_VAR 0 1
 885: PPUSH
 886: CALL_OW 256
 890: PUSH
 891: LD_INT 1000
 893: LESS
 894: IFFALSE 937
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 896: LD_VAR 0 1
 900: PPUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 22
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PPUSH
 923: LD_VAR 0 1
 927: PPUSH
 928: CALL_OW 74
 932: PPUSH
 933: CALL_OW 115
 937: GO 878
 939: POP
 940: POP
// end ;
 941: PPOPN 1
 943: END
// every 3 do var i , enemy , x , y , d ;
 944: GO 946
 946: DISABLE
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
// begin enable ;
 954: ENABLE
// for i := 2 to huntersAmount do
 955: LD_ADDR_VAR 0 1
 959: PUSH
 960: DOUBLE
 961: LD_INT 2
 963: DEC
 964: ST_TO_ADDR
 965: LD_EXP 3
 969: PUSH
 970: FOR_TO
 971: IFFALSE 1310
// begin if not HasTask ( hunters [ i ] ) then
 973: LD_EXP 6
 977: PUSH
 978: LD_VAR 0 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 314
 988: NOT
 989: IFFALSE 1308
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: LD_INT 22
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: PPUSH
1011: LD_EXP 6
1015: PUSH
1016: LD_VAR 0 1
1020: ARRAY
1021: PPUSH
1022: CALL_OW 74
1026: ST_TO_ADDR
// if not enemy then
1027: LD_VAR 0 2
1031: NOT
1032: IFFALSE 1036
// continue ;
1034: GO 970
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1036: LD_EXP 6
1040: PUSH
1041: LD_VAR 0 1
1045: ARRAY
1046: PPUSH
1047: LD_VAR 0 2
1051: PPUSH
1052: CALL_OW 296
1056: PUSH
1057: LD_INT 17
1059: LESS
1060: IFFALSE 1163
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1062: LD_EXP 6
1066: PUSH
1067: LD_VAR 0 1
1071: ARRAY
1072: PPUSH
1073: CALL_OW 257
1077: PUSH
1078: LD_INT 11
1080: EQUAL
1081: IFFALSE 1141
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1083: LD_VAR 0 2
1087: PPUSH
1088: CALL_OW 257
1092: PUSH
1093: LD_INT 19
1095: PUSH
1096: LD_INT 20
1098: PUSH
1099: LD_INT 13
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: IN
1107: IFFALSE 1126
// ComCarabine ( hunters [ i ] ) else
1109: LD_EXP 6
1113: PUSH
1114: LD_VAR 0 1
1118: ARRAY
1119: PPUSH
1120: CALL_OW 162
1124: GO 1141
// ComSabre ( hunters [ i ] ) ;
1126: LD_EXP 6
1130: PUSH
1131: LD_VAR 0 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1141: LD_EXP 6
1145: PUSH
1146: LD_VAR 0 1
1150: ARRAY
1151: PPUSH
1152: LD_VAR 0 2
1156: PPUSH
1157: CALL_OW 115
// end else
1161: GO 1308
// begin d := rand ( 0 , 5 ) ;
1163: LD_ADDR_VAR 0 5
1167: PUSH
1168: LD_INT 0
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 12
1178: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1179: LD_ADDR_VAR 0 3
1183: PUSH
1184: LD_EXP 6
1188: PUSH
1189: LD_VAR 0 1
1193: ARRAY
1194: PPUSH
1195: CALL_OW 250
1199: PPUSH
1200: LD_VAR 0 5
1204: PPUSH
1205: LD_INT 8
1207: PPUSH
1208: CALL_OW 272
1212: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1213: LD_ADDR_VAR 0 4
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_VAR 0 1
1227: ARRAY
1228: PPUSH
1229: CALL_OW 251
1233: PPUSH
1234: LD_VAR 0 5
1238: PPUSH
1239: LD_INT 8
1241: PPUSH
1242: CALL_OW 273
1246: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1247: LD_VAR 0 3
1251: PPUSH
1252: LD_VAR 0 4
1256: PPUSH
1257: CALL_OW 488
1261: PUSH
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_VAR 0 4
1271: PPUSH
1272: CALL_OW 428
1276: PUSH
1277: LD_INT 0
1279: EQUAL
1280: AND
1281: IFFALSE 1308
// ComMoveXY ( hunters [ i ] , x , y ) ;
1283: LD_EXP 6
1287: PUSH
1288: LD_VAR 0 1
1292: ARRAY
1293: PPUSH
1294: LD_VAR 0 3
1298: PPUSH
1299: LD_VAR 0 4
1303: PPUSH
1304: CALL_OW 111
// end ; end ; end ;
1308: GO 970
1310: POP
1311: POP
// end ; end_of_file
1312: PPOPN 5
1314: END
// on UnitGoesToRed ( un ) do var i ;
1315: LD_INT 0
1317: PPUSH
// begin if GetSide ( un ) = 1 then
1318: LD_VAR 0 1
1322: PPUSH
1323: CALL_OW 255
1327: PUSH
1328: LD_INT 1
1330: EQUAL
1331: IFFALSE 1340
// YouLost ( hunt2 ) ;
1333: LD_STRING hunt2
1335: PPUSH
1336: CALL_OW 104
// if GetSide ( un ) > 1 then
1340: LD_VAR 0 1
1344: PPUSH
1345: CALL_OW 255
1349: PUSH
1350: LD_INT 1
1352: GREATER
1353: IFFALSE 1406
// begin for i := 1 to 6 do
1355: LD_ADDR_VAR 0 2
1359: PUSH
1360: DOUBLE
1361: LD_INT 1
1363: DEC
1364: ST_TO_ADDR
1365: LD_INT 6
1367: PUSH
1368: FOR_TO
1369: IFFALSE 1392
// begin wait ( 0 0$1 ) ;
1371: LD_INT 35
1373: PPUSH
1374: CALL_OW 67
// SetLives ( un , 249 ) ;
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 249
1385: PPUSH
1386: CALL_OW 234
// end ;
1390: GO 1368
1392: POP
1393: POP
// SetLives ( un , 1000 ) ;
1394: LD_VAR 0 1
1398: PPUSH
1399: LD_INT 1000
1401: PPUSH
1402: CALL_OW 234
// end ; end ;
1406: PPOPN 2
1408: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1409: LD_VAR 0 1
1413: PUSH
1414: LD_INT 1
1416: EQUAL
1417: PUSH
1418: LD_VAR 0 2
1422: PUSH
1423: LD_INT 1
1425: GREATER
1426: AND
1427: IFFALSE 1436
// YouLost ( hunt1 ) ;
1429: LD_STRING hunt1
1431: PPUSH
1432: CALL_OW 104
// end ;
1436: PPOPN 2
1438: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1439: LD_INT 0
1441: PPUSH
// begin point := 0 ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1450: LD_VAR 0 1
1454: PPUSH
1455: CALL_OW 257
1459: PUSH
1460: LD_INT 20
1462: DOUBLE
1463: EQUAL
1464: IFTRUE 1468
1466: GO 1479
1468: POP
// point := 10 ; class_horse :
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: LD_INT 10
1476: ST_TO_ADDR
1477: GO 1615
1479: LD_EXP 94
1483: DOUBLE
1484: EQUAL
1485: IFTRUE 1489
1487: GO 1500
1489: POP
// point := 10 ; class_baggie :
1490: LD_ADDR_VAR 0 4
1494: PUSH
1495: LD_INT 10
1497: ST_TO_ADDR
1498: GO 1615
1500: LD_INT 13
1502: DOUBLE
1503: EQUAL
1504: IFTRUE 1508
1506: GO 1519
1508: POP
// point := 5 ; class_phororhacos :
1509: LD_ADDR_VAR 0 4
1513: PUSH
1514: LD_INT 5
1516: ST_TO_ADDR
1517: GO 1615
1519: LD_INT 18
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1538
1527: POP
// point := 10 ; class_tiger :
1528: LD_ADDR_VAR 0 4
1532: PUSH
1533: LD_INT 10
1535: ST_TO_ADDR
1536: GO 1615
1538: LD_INT 14
1540: DOUBLE
1541: EQUAL
1542: IFTRUE 1546
1544: GO 1557
1546: POP
// point := 20 ; class_apeman :
1547: LD_ADDR_VAR 0 4
1551: PUSH
1552: LD_INT 20
1554: ST_TO_ADDR
1555: GO 1615
1557: LD_INT 12
1559: DOUBLE
1560: EQUAL
1561: IFTRUE 1565
1563: GO 1576
1565: POP
// point := 30 ; class_apeman_soldier :
1566: LD_ADDR_VAR 0 4
1570: PUSH
1571: LD_INT 30
1573: ST_TO_ADDR
1574: GO 1615
1576: LD_INT 15
1578: DOUBLE
1579: EQUAL
1580: IFTRUE 1584
1582: GO 1595
1584: POP
// point := 50 ; class_frog :
1585: LD_ADDR_VAR 0 4
1589: PUSH
1590: LD_INT 50
1592: ST_TO_ADDR
1593: GO 1615
1595: LD_INT 19
1597: DOUBLE
1598: EQUAL
1599: IFTRUE 1603
1601: GO 1614
1603: POP
// point := 10 ; end ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: LD_INT 10
1611: ST_TO_ADDR
1612: GO 1615
1614: POP
// if point then
1615: LD_VAR 0 4
1619: IFFALSE 1658
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1621: LD_ADDR_EXP 5
1625: PUSH
1626: LD_EXP 5
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: LD_EXP 5
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: PUSH
1647: LD_VAR 0 4
1651: PLUS
1652: PPUSH
1653: CALL_OW 1
1657: ST_TO_ADDR
// end ;
1658: PPOPN 4
1660: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1661: LD_INT 22
1663: PUSH
1664: LD_INT 0
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PPUSH
1671: CALL_OW 69
1675: PUSH
1676: LD_INT 10
1678: LESS
1679: IFFALSE 1793
1681: GO 1683
1683: DISABLE
// begin enable ;
1684: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1685: LD_INT 2
1687: PPUSH
1688: LD_INT 1
1690: PPUSH
1691: LD_INT 0
1693: PPUSH
1694: LD_INT 4
1696: PPUSH
1697: CALL_OW 12
1701: PUSH
1702: LD_INT 0
1704: PPUSH
1705: LD_INT 2
1707: PPUSH
1708: CALL_OW 12
1712: PUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 4
1718: PPUSH
1719: CALL_OW 12
1723: PUSH
1724: LD_INT 2
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: PUSH
1735: LD_INT 2
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: CALL_OW 12
1745: PUSH
1746: LD_INT 0
1748: PPUSH
1749: LD_INT 2
1751: PPUSH
1752: CALL_OW 12
1756: PUSH
1757: LD_INT 0
1759: PPUSH
1760: LD_INT 4
1762: PPUSH
1763: CALL_OW 12
1767: PUSH
1768: LD_INT 0
1770: PPUSH
1771: LD_INT 2
1773: PPUSH
1774: CALL_OW 12
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: PPUSH
1789: CALL 395 0 3
// end ;
1793: END
// every 0 0$1 do var i ;
1794: GO 1796
1796: DISABLE
1797: LD_INT 0
1799: PPUSH
// begin enable ;
1800: ENABLE
// display_strings := [ ] ;
1801: LD_ADDR_OWVAR 47
1805: PUSH
1806: EMPTY
1807: ST_TO_ADDR
// for i := 1 to huntersAmount do
1808: LD_ADDR_VAR 0 1
1812: PUSH
1813: DOUBLE
1814: LD_INT 1
1816: DEC
1817: ST_TO_ADDR
1818: LD_EXP 3
1822: PUSH
1823: FOR_TO
1824: IFFALSE 1958
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1826: LD_ADDR_OWVAR 47
1830: PUSH
1831: LD_OWVAR 47
1835: PUSH
1836: LD_STRING #player
1838: PUSH
1839: LD_VAR 0 1
1843: STR
1844: PUSH
1845: LD_VAR 0 1
1849: PUSH
1850: LD_EXP 5
1854: PUSH
1855: LD_VAR 0 1
1859: ARRAY
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: ADD
1866: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1867: LD_EXP 5
1871: PUSH
1872: LD_VAR 0 1
1876: ARRAY
1877: PUSH
1878: LD_INT 750
1880: PUSH
1881: LD_INT 1250
1883: PUSH
1884: LD_INT 2000
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_OWVAR 67
1896: ARRAY
1897: GREATEREQUAL
1898: IFFALSE 1956
// begin if i = 1 then
1900: LD_VAR 0 1
1904: PUSH
1905: LD_INT 1
1907: EQUAL
1908: IFFALSE 1949
// begin DialogueOn ;
1910: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1914: LD_STRING ACH_HUNT
1916: PPUSH
1917: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1921: LD_ADDR_OWVAR 47
1925: PUSH
1926: LD_STRING #hunting-win
1928: PUSH
1929: EMPTY
1930: LIST
1931: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1932: LD_INT 175
1934: PPUSH
1935: CALL_OW 68
// YouWin ;
1939: CALL_OW 103
// DialogueOff ;
1943: CALL_OW 7
// end else
1947: GO 1956
// YouLost ( hunt3 ) ;
1949: LD_STRING hunt3
1951: PPUSH
1952: CALL_OW 104
// end ; end ;
1956: GO 1823
1958: POP
1959: POP
// end ; end_of_file end_of_file
1960: PPOPN 1
1962: END
// every 0 0$1 do
1963: GO 1965
1965: DISABLE
// begin enable ;
1966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1967: LD_STRING updateTimer(
1969: PUSH
1970: LD_OWVAR 1
1974: STR
1975: PUSH
1976: LD_STRING );
1978: STR
1979: PPUSH
1980: CALL_OW 559
// end ;
1984: END
// on MapStart ( p ) do begin if streamModeActive then
1985: LD_EXP 7
1989: IFFALSE 1998
// DefineStreamItems ( true ) ;
1991: LD_INT 1
1993: PPUSH
1994: CALL 3646 0 1
// UpdateFactoryWaypoints ( ) ;
1998: CALL 17230 0 0
// end ;
2002: PPOPN 1
2004: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2005: LD_INT 0
2007: PPUSH
// if p2 = 100 then
2008: LD_VAR 0 2
2012: PUSH
2013: LD_INT 100
2015: EQUAL
2016: IFFALSE 3019
// begin if not StreamModeActive then
2018: LD_EXP 7
2022: NOT
2023: IFFALSE 2033
// StreamModeActive := true ;
2025: LD_ADDR_EXP 7
2029: PUSH
2030: LD_INT 1
2032: ST_TO_ADDR
// if p3 = 0 then
2033: LD_VAR 0 3
2037: PUSH
2038: LD_INT 0
2040: EQUAL
2041: IFFALSE 2047
// InitStreamMode ;
2043: CALL 3182 0 0
// if p3 = 1 then
2047: LD_VAR 0 3
2051: PUSH
2052: LD_INT 1
2054: EQUAL
2055: IFFALSE 2065
// sRocket := true ;
2057: LD_ADDR_EXP 12
2061: PUSH
2062: LD_INT 1
2064: ST_TO_ADDR
// if p3 = 2 then
2065: LD_VAR 0 3
2069: PUSH
2070: LD_INT 2
2072: EQUAL
2073: IFFALSE 2083
// sSpeed := true ;
2075: LD_ADDR_EXP 11
2079: PUSH
2080: LD_INT 1
2082: ST_TO_ADDR
// if p3 = 3 then
2083: LD_VAR 0 3
2087: PUSH
2088: LD_INT 3
2090: EQUAL
2091: IFFALSE 2101
// sEngine := true ;
2093: LD_ADDR_EXP 13
2097: PUSH
2098: LD_INT 1
2100: ST_TO_ADDR
// if p3 = 4 then
2101: LD_VAR 0 3
2105: PUSH
2106: LD_INT 4
2108: EQUAL
2109: IFFALSE 2119
// sSpec := true ;
2111: LD_ADDR_EXP 10
2115: PUSH
2116: LD_INT 1
2118: ST_TO_ADDR
// if p3 = 5 then
2119: LD_VAR 0 3
2123: PUSH
2124: LD_INT 5
2126: EQUAL
2127: IFFALSE 2137
// sLevel := true ;
2129: LD_ADDR_EXP 14
2133: PUSH
2134: LD_INT 1
2136: ST_TO_ADDR
// if p3 = 6 then
2137: LD_VAR 0 3
2141: PUSH
2142: LD_INT 6
2144: EQUAL
2145: IFFALSE 2155
// sArmoury := true ;
2147: LD_ADDR_EXP 15
2151: PUSH
2152: LD_INT 1
2154: ST_TO_ADDR
// if p3 = 7 then
2155: LD_VAR 0 3
2159: PUSH
2160: LD_INT 7
2162: EQUAL
2163: IFFALSE 2173
// sRadar := true ;
2165: LD_ADDR_EXP 16
2169: PUSH
2170: LD_INT 1
2172: ST_TO_ADDR
// if p3 = 8 then
2173: LD_VAR 0 3
2177: PUSH
2178: LD_INT 8
2180: EQUAL
2181: IFFALSE 2191
// sBunker := true ;
2183: LD_ADDR_EXP 17
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// if p3 = 9 then
2191: LD_VAR 0 3
2195: PUSH
2196: LD_INT 9
2198: EQUAL
2199: IFFALSE 2209
// sHack := true ;
2201: LD_ADDR_EXP 18
2205: PUSH
2206: LD_INT 1
2208: ST_TO_ADDR
// if p3 = 10 then
2209: LD_VAR 0 3
2213: PUSH
2214: LD_INT 10
2216: EQUAL
2217: IFFALSE 2227
// sFire := true ;
2219: LD_ADDR_EXP 19
2223: PUSH
2224: LD_INT 1
2226: ST_TO_ADDR
// if p3 = 11 then
2227: LD_VAR 0 3
2231: PUSH
2232: LD_INT 11
2234: EQUAL
2235: IFFALSE 2245
// sRefresh := true ;
2237: LD_ADDR_EXP 20
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// if p3 = 12 then
2245: LD_VAR 0 3
2249: PUSH
2250: LD_INT 12
2252: EQUAL
2253: IFFALSE 2263
// sExp := true ;
2255: LD_ADDR_EXP 21
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// if p3 = 13 then
2263: LD_VAR 0 3
2267: PUSH
2268: LD_INT 13
2270: EQUAL
2271: IFFALSE 2281
// sDepot := true ;
2273: LD_ADDR_EXP 22
2277: PUSH
2278: LD_INT 1
2280: ST_TO_ADDR
// if p3 = 14 then
2281: LD_VAR 0 3
2285: PUSH
2286: LD_INT 14
2288: EQUAL
2289: IFFALSE 2299
// sFlag := true ;
2291: LD_ADDR_EXP 23
2295: PUSH
2296: LD_INT 1
2298: ST_TO_ADDR
// if p3 = 15 then
2299: LD_VAR 0 3
2303: PUSH
2304: LD_INT 15
2306: EQUAL
2307: IFFALSE 2317
// sKamikadze := true ;
2309: LD_ADDR_EXP 31
2313: PUSH
2314: LD_INT 1
2316: ST_TO_ADDR
// if p3 = 16 then
2317: LD_VAR 0 3
2321: PUSH
2322: LD_INT 16
2324: EQUAL
2325: IFFALSE 2335
// sTroll := true ;
2327: LD_ADDR_EXP 32
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// if p3 = 17 then
2335: LD_VAR 0 3
2339: PUSH
2340: LD_INT 17
2342: EQUAL
2343: IFFALSE 2353
// sSlow := true ;
2345: LD_ADDR_EXP 33
2349: PUSH
2350: LD_INT 1
2352: ST_TO_ADDR
// if p3 = 18 then
2353: LD_VAR 0 3
2357: PUSH
2358: LD_INT 18
2360: EQUAL
2361: IFFALSE 2371
// sLack := true ;
2363: LD_ADDR_EXP 34
2367: PUSH
2368: LD_INT 1
2370: ST_TO_ADDR
// if p3 = 19 then
2371: LD_VAR 0 3
2375: PUSH
2376: LD_INT 19
2378: EQUAL
2379: IFFALSE 2389
// sTank := true ;
2381: LD_ADDR_EXP 36
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// if p3 = 20 then
2389: LD_VAR 0 3
2393: PUSH
2394: LD_INT 20
2396: EQUAL
2397: IFFALSE 2407
// sRemote := true ;
2399: LD_ADDR_EXP 37
2403: PUSH
2404: LD_INT 1
2406: ST_TO_ADDR
// if p3 = 21 then
2407: LD_VAR 0 3
2411: PUSH
2412: LD_INT 21
2414: EQUAL
2415: IFFALSE 2425
// sPowell := true ;
2417: LD_ADDR_EXP 38
2421: PUSH
2422: LD_INT 1
2424: ST_TO_ADDR
// if p3 = 22 then
2425: LD_VAR 0 3
2429: PUSH
2430: LD_INT 22
2432: EQUAL
2433: IFFALSE 2443
// sTeleport := true ;
2435: LD_ADDR_EXP 41
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// if p3 = 23 then
2443: LD_VAR 0 3
2447: PUSH
2448: LD_INT 23
2450: EQUAL
2451: IFFALSE 2461
// sOilTower := true ;
2453: LD_ADDR_EXP 43
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// if p3 = 24 then
2461: LD_VAR 0 3
2465: PUSH
2466: LD_INT 24
2468: EQUAL
2469: IFFALSE 2479
// sShovel := true ;
2471: LD_ADDR_EXP 44
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// if p3 = 25 then
2479: LD_VAR 0 3
2483: PUSH
2484: LD_INT 25
2486: EQUAL
2487: IFFALSE 2497
// sSheik := true ;
2489: LD_ADDR_EXP 45
2493: PUSH
2494: LD_INT 1
2496: ST_TO_ADDR
// if p3 = 26 then
2497: LD_VAR 0 3
2501: PUSH
2502: LD_INT 26
2504: EQUAL
2505: IFFALSE 2515
// sEarthquake := true ;
2507: LD_ADDR_EXP 47
2511: PUSH
2512: LD_INT 1
2514: ST_TO_ADDR
// if p3 = 27 then
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 27
2522: EQUAL
2523: IFFALSE 2533
// sAI := true ;
2525: LD_ADDR_EXP 48
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// if p3 = 28 then
2533: LD_VAR 0 3
2537: PUSH
2538: LD_INT 28
2540: EQUAL
2541: IFFALSE 2551
// sCargo := true ;
2543: LD_ADDR_EXP 51
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// if p3 = 29 then
2551: LD_VAR 0 3
2555: PUSH
2556: LD_INT 29
2558: EQUAL
2559: IFFALSE 2569
// sDLaser := true ;
2561: LD_ADDR_EXP 52
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// if p3 = 30 then
2569: LD_VAR 0 3
2573: PUSH
2574: LD_INT 30
2576: EQUAL
2577: IFFALSE 2587
// sExchange := true ;
2579: LD_ADDR_EXP 53
2583: PUSH
2584: LD_INT 1
2586: ST_TO_ADDR
// if p3 = 31 then
2587: LD_VAR 0 3
2591: PUSH
2592: LD_INT 31
2594: EQUAL
2595: IFFALSE 2605
// sFac := true ;
2597: LD_ADDR_EXP 54
2601: PUSH
2602: LD_INT 1
2604: ST_TO_ADDR
// if p3 = 32 then
2605: LD_VAR 0 3
2609: PUSH
2610: LD_INT 32
2612: EQUAL
2613: IFFALSE 2623
// sPower := true ;
2615: LD_ADDR_EXP 55
2619: PUSH
2620: LD_INT 1
2622: ST_TO_ADDR
// if p3 = 33 then
2623: LD_VAR 0 3
2627: PUSH
2628: LD_INT 33
2630: EQUAL
2631: IFFALSE 2641
// sRandom := true ;
2633: LD_ADDR_EXP 56
2637: PUSH
2638: LD_INT 1
2640: ST_TO_ADDR
// if p3 = 34 then
2641: LD_VAR 0 3
2645: PUSH
2646: LD_INT 34
2648: EQUAL
2649: IFFALSE 2659
// sShield := true ;
2651: LD_ADDR_EXP 57
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// if p3 = 35 then
2659: LD_VAR 0 3
2663: PUSH
2664: LD_INT 35
2666: EQUAL
2667: IFFALSE 2677
// sTime := true ;
2669: LD_ADDR_EXP 58
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// if p3 = 36 then
2677: LD_VAR 0 3
2681: PUSH
2682: LD_INT 36
2684: EQUAL
2685: IFFALSE 2695
// sTools := true ;
2687: LD_ADDR_EXP 59
2691: PUSH
2692: LD_INT 1
2694: ST_TO_ADDR
// if p3 = 101 then
2695: LD_VAR 0 3
2699: PUSH
2700: LD_INT 101
2702: EQUAL
2703: IFFALSE 2713
// sSold := true ;
2705: LD_ADDR_EXP 24
2709: PUSH
2710: LD_INT 1
2712: ST_TO_ADDR
// if p3 = 102 then
2713: LD_VAR 0 3
2717: PUSH
2718: LD_INT 102
2720: EQUAL
2721: IFFALSE 2731
// sDiff := true ;
2723: LD_ADDR_EXP 25
2727: PUSH
2728: LD_INT 1
2730: ST_TO_ADDR
// if p3 = 103 then
2731: LD_VAR 0 3
2735: PUSH
2736: LD_INT 103
2738: EQUAL
2739: IFFALSE 2749
// sFog := true ;
2741: LD_ADDR_EXP 28
2745: PUSH
2746: LD_INT 1
2748: ST_TO_ADDR
// if p3 = 104 then
2749: LD_VAR 0 3
2753: PUSH
2754: LD_INT 104
2756: EQUAL
2757: IFFALSE 2767
// sReset := true ;
2759: LD_ADDR_EXP 29
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// if p3 = 105 then
2767: LD_VAR 0 3
2771: PUSH
2772: LD_INT 105
2774: EQUAL
2775: IFFALSE 2785
// sSun := true ;
2777: LD_ADDR_EXP 30
2781: PUSH
2782: LD_INT 1
2784: ST_TO_ADDR
// if p3 = 106 then
2785: LD_VAR 0 3
2789: PUSH
2790: LD_INT 106
2792: EQUAL
2793: IFFALSE 2803
// sTiger := true ;
2795: LD_ADDR_EXP 26
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// if p3 = 107 then
2803: LD_VAR 0 3
2807: PUSH
2808: LD_INT 107
2810: EQUAL
2811: IFFALSE 2821
// sBomb := true ;
2813: LD_ADDR_EXP 27
2817: PUSH
2818: LD_INT 1
2820: ST_TO_ADDR
// if p3 = 108 then
2821: LD_VAR 0 3
2825: PUSH
2826: LD_INT 108
2828: EQUAL
2829: IFFALSE 2839
// sWound := true ;
2831: LD_ADDR_EXP 35
2835: PUSH
2836: LD_INT 1
2838: ST_TO_ADDR
// if p3 = 109 then
2839: LD_VAR 0 3
2843: PUSH
2844: LD_INT 109
2846: EQUAL
2847: IFFALSE 2857
// sBetray := true ;
2849: LD_ADDR_EXP 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// if p3 = 110 then
2857: LD_VAR 0 3
2861: PUSH
2862: LD_INT 110
2864: EQUAL
2865: IFFALSE 2875
// sContamin := true ;
2867: LD_ADDR_EXP 40
2871: PUSH
2872: LD_INT 1
2874: ST_TO_ADDR
// if p3 = 111 then
2875: LD_VAR 0 3
2879: PUSH
2880: LD_INT 111
2882: EQUAL
2883: IFFALSE 2893
// sOil := true ;
2885: LD_ADDR_EXP 42
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// if p3 = 112 then
2893: LD_VAR 0 3
2897: PUSH
2898: LD_INT 112
2900: EQUAL
2901: IFFALSE 2911
// sStu := true ;
2903: LD_ADDR_EXP 46
2907: PUSH
2908: LD_INT 1
2910: ST_TO_ADDR
// if p3 = 113 then
2911: LD_VAR 0 3
2915: PUSH
2916: LD_INT 113
2918: EQUAL
2919: IFFALSE 2929
// sBazooka := true ;
2921: LD_ADDR_EXP 49
2925: PUSH
2926: LD_INT 1
2928: ST_TO_ADDR
// if p3 = 114 then
2929: LD_VAR 0 3
2933: PUSH
2934: LD_INT 114
2936: EQUAL
2937: IFFALSE 2947
// sMortar := true ;
2939: LD_ADDR_EXP 50
2943: PUSH
2944: LD_INT 1
2946: ST_TO_ADDR
// if p3 = 115 then
2947: LD_VAR 0 3
2951: PUSH
2952: LD_INT 115
2954: EQUAL
2955: IFFALSE 2965
// sRanger := true ;
2957: LD_ADDR_EXP 60
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// if p3 = 116 then
2965: LD_VAR 0 3
2969: PUSH
2970: LD_INT 116
2972: EQUAL
2973: IFFALSE 2983
// sComputer := true ;
2975: LD_ADDR_EXP 61
2979: PUSH
2980: LD_INT 1
2982: ST_TO_ADDR
// if p3 = 117 then
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 117
2990: EQUAL
2991: IFFALSE 3001
// s30 := true ;
2993: LD_ADDR_EXP 62
2997: PUSH
2998: LD_INT 1
3000: ST_TO_ADDR
// if p3 = 118 then
3001: LD_VAR 0 3
3005: PUSH
3006: LD_INT 118
3008: EQUAL
3009: IFFALSE 3019
// s60 := true ;
3011: LD_ADDR_EXP 63
3015: PUSH
3016: LD_INT 1
3018: ST_TO_ADDR
// end ; if p2 = 101 then
3019: LD_VAR 0 2
3023: PUSH
3024: LD_INT 101
3026: EQUAL
3027: IFFALSE 3155
// begin case p3 of 1 :
3029: LD_VAR 0 3
3033: PUSH
3034: LD_INT 1
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3049
3042: POP
// hHackUnlimitedResources ; 2 :
3043: CALL 15253 0 0
3047: GO 3155
3049: LD_INT 2
3051: DOUBLE
3052: EQUAL
3053: IFTRUE 3057
3055: GO 3064
3057: POP
// hHackSetLevel10 ; 3 :
3058: CALL 15386 0 0
3062: GO 3155
3064: LD_INT 3
3066: DOUBLE
3067: EQUAL
3068: IFTRUE 3072
3070: GO 3079
3072: POP
// hHackSetLevel10YourUnits ; 4 :
3073: CALL 15471 0 0
3077: GO 3155
3079: LD_INT 4
3081: DOUBLE
3082: EQUAL
3083: IFTRUE 3087
3085: GO 3094
3087: POP
// hHackInvincible ; 5 :
3088: CALL 15919 0 0
3092: GO 3155
3094: LD_INT 5
3096: DOUBLE
3097: EQUAL
3098: IFTRUE 3102
3100: GO 3109
3102: POP
// hHackInvisible ; 6 :
3103: CALL 16030 0 0
3107: GO 3155
3109: LD_INT 6
3111: DOUBLE
3112: EQUAL
3113: IFTRUE 3117
3115: GO 3124
3117: POP
// hHackChangeYourSide ; 7 :
3118: CALL 16087 0 0
3122: GO 3155
3124: LD_INT 7
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3139
3132: POP
// hHackChangeUnitSide ; 8 :
3133: CALL 16129 0 0
3137: GO 3155
3139: LD_INT 8
3141: DOUBLE
3142: EQUAL
3143: IFTRUE 3147
3145: GO 3154
3147: POP
// hHackFog ; end ;
3148: CALL 16230 0 0
3152: GO 3155
3154: POP
// end ; end ;
3155: LD_VAR 0 7
3159: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3160: GO 3162
3162: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3163: LD_STRING initStreamRollete();
3165: PPUSH
3166: CALL_OW 559
// InitStreamMode ;
3170: CALL 3182 0 0
// DefineStreamItems ( false ) ;
3174: LD_INT 0
3176: PPUSH
3177: CALL 3646 0 1
// end ;
3181: END
// function InitStreamMode ; begin
3182: LD_INT 0
3184: PPUSH
// streamModeActive := false ;
3185: LD_ADDR_EXP 7
3189: PUSH
3190: LD_INT 0
3192: ST_TO_ADDR
// normalCounter := 36 ;
3193: LD_ADDR_EXP 8
3197: PUSH
3198: LD_INT 36
3200: ST_TO_ADDR
// hardcoreCounter := 18 ;
3201: LD_ADDR_EXP 9
3205: PUSH
3206: LD_INT 18
3208: ST_TO_ADDR
// sRocket := false ;
3209: LD_ADDR_EXP 12
3213: PUSH
3214: LD_INT 0
3216: ST_TO_ADDR
// sSpeed := false ;
3217: LD_ADDR_EXP 11
3221: PUSH
3222: LD_INT 0
3224: ST_TO_ADDR
// sEngine := false ;
3225: LD_ADDR_EXP 13
3229: PUSH
3230: LD_INT 0
3232: ST_TO_ADDR
// sSpec := false ;
3233: LD_ADDR_EXP 10
3237: PUSH
3238: LD_INT 0
3240: ST_TO_ADDR
// sLevel := false ;
3241: LD_ADDR_EXP 14
3245: PUSH
3246: LD_INT 0
3248: ST_TO_ADDR
// sArmoury := false ;
3249: LD_ADDR_EXP 15
3253: PUSH
3254: LD_INT 0
3256: ST_TO_ADDR
// sRadar := false ;
3257: LD_ADDR_EXP 16
3261: PUSH
3262: LD_INT 0
3264: ST_TO_ADDR
// sBunker := false ;
3265: LD_ADDR_EXP 17
3269: PUSH
3270: LD_INT 0
3272: ST_TO_ADDR
// sHack := false ;
3273: LD_ADDR_EXP 18
3277: PUSH
3278: LD_INT 0
3280: ST_TO_ADDR
// sFire := false ;
3281: LD_ADDR_EXP 19
3285: PUSH
3286: LD_INT 0
3288: ST_TO_ADDR
// sRefresh := false ;
3289: LD_ADDR_EXP 20
3293: PUSH
3294: LD_INT 0
3296: ST_TO_ADDR
// sExp := false ;
3297: LD_ADDR_EXP 21
3301: PUSH
3302: LD_INT 0
3304: ST_TO_ADDR
// sDepot := false ;
3305: LD_ADDR_EXP 22
3309: PUSH
3310: LD_INT 0
3312: ST_TO_ADDR
// sFlag := false ;
3313: LD_ADDR_EXP 23
3317: PUSH
3318: LD_INT 0
3320: ST_TO_ADDR
// sKamikadze := false ;
3321: LD_ADDR_EXP 31
3325: PUSH
3326: LD_INT 0
3328: ST_TO_ADDR
// sTroll := false ;
3329: LD_ADDR_EXP 32
3333: PUSH
3334: LD_INT 0
3336: ST_TO_ADDR
// sSlow := false ;
3337: LD_ADDR_EXP 33
3341: PUSH
3342: LD_INT 0
3344: ST_TO_ADDR
// sLack := false ;
3345: LD_ADDR_EXP 34
3349: PUSH
3350: LD_INT 0
3352: ST_TO_ADDR
// sTank := false ;
3353: LD_ADDR_EXP 36
3357: PUSH
3358: LD_INT 0
3360: ST_TO_ADDR
// sRemote := false ;
3361: LD_ADDR_EXP 37
3365: PUSH
3366: LD_INT 0
3368: ST_TO_ADDR
// sPowell := false ;
3369: LD_ADDR_EXP 38
3373: PUSH
3374: LD_INT 0
3376: ST_TO_ADDR
// sTeleport := false ;
3377: LD_ADDR_EXP 41
3381: PUSH
3382: LD_INT 0
3384: ST_TO_ADDR
// sOilTower := false ;
3385: LD_ADDR_EXP 43
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// sShovel := false ;
3393: LD_ADDR_EXP 44
3397: PUSH
3398: LD_INT 0
3400: ST_TO_ADDR
// sSheik := false ;
3401: LD_ADDR_EXP 45
3405: PUSH
3406: LD_INT 0
3408: ST_TO_ADDR
// sEarthquake := false ;
3409: LD_ADDR_EXP 47
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// sAI := false ;
3417: LD_ADDR_EXP 48
3421: PUSH
3422: LD_INT 0
3424: ST_TO_ADDR
// sCargo := false ;
3425: LD_ADDR_EXP 51
3429: PUSH
3430: LD_INT 0
3432: ST_TO_ADDR
// sDLaser := false ;
3433: LD_ADDR_EXP 52
3437: PUSH
3438: LD_INT 0
3440: ST_TO_ADDR
// sExchange := false ;
3441: LD_ADDR_EXP 53
3445: PUSH
3446: LD_INT 0
3448: ST_TO_ADDR
// sFac := false ;
3449: LD_ADDR_EXP 54
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// sPower := false ;
3457: LD_ADDR_EXP 55
3461: PUSH
3462: LD_INT 0
3464: ST_TO_ADDR
// sRandom := false ;
3465: LD_ADDR_EXP 56
3469: PUSH
3470: LD_INT 0
3472: ST_TO_ADDR
// sShield := false ;
3473: LD_ADDR_EXP 57
3477: PUSH
3478: LD_INT 0
3480: ST_TO_ADDR
// sTime := false ;
3481: LD_ADDR_EXP 58
3485: PUSH
3486: LD_INT 0
3488: ST_TO_ADDR
// sTools := false ;
3489: LD_ADDR_EXP 59
3493: PUSH
3494: LD_INT 0
3496: ST_TO_ADDR
// sSold := false ;
3497: LD_ADDR_EXP 24
3501: PUSH
3502: LD_INT 0
3504: ST_TO_ADDR
// sDiff := false ;
3505: LD_ADDR_EXP 25
3509: PUSH
3510: LD_INT 0
3512: ST_TO_ADDR
// sFog := false ;
3513: LD_ADDR_EXP 28
3517: PUSH
3518: LD_INT 0
3520: ST_TO_ADDR
// sReset := false ;
3521: LD_ADDR_EXP 29
3525: PUSH
3526: LD_INT 0
3528: ST_TO_ADDR
// sSun := false ;
3529: LD_ADDR_EXP 30
3533: PUSH
3534: LD_INT 0
3536: ST_TO_ADDR
// sTiger := false ;
3537: LD_ADDR_EXP 26
3541: PUSH
3542: LD_INT 0
3544: ST_TO_ADDR
// sBomb := false ;
3545: LD_ADDR_EXP 27
3549: PUSH
3550: LD_INT 0
3552: ST_TO_ADDR
// sWound := false ;
3553: LD_ADDR_EXP 35
3557: PUSH
3558: LD_INT 0
3560: ST_TO_ADDR
// sBetray := false ;
3561: LD_ADDR_EXP 39
3565: PUSH
3566: LD_INT 0
3568: ST_TO_ADDR
// sContamin := false ;
3569: LD_ADDR_EXP 40
3573: PUSH
3574: LD_INT 0
3576: ST_TO_ADDR
// sOil := false ;
3577: LD_ADDR_EXP 42
3581: PUSH
3582: LD_INT 0
3584: ST_TO_ADDR
// sStu := false ;
3585: LD_ADDR_EXP 46
3589: PUSH
3590: LD_INT 0
3592: ST_TO_ADDR
// sBazooka := false ;
3593: LD_ADDR_EXP 49
3597: PUSH
3598: LD_INT 0
3600: ST_TO_ADDR
// sMortar := false ;
3601: LD_ADDR_EXP 50
3605: PUSH
3606: LD_INT 0
3608: ST_TO_ADDR
// sRanger := false ;
3609: LD_ADDR_EXP 60
3613: PUSH
3614: LD_INT 0
3616: ST_TO_ADDR
// sComputer := false ;
3617: LD_ADDR_EXP 61
3621: PUSH
3622: LD_INT 0
3624: ST_TO_ADDR
// s30 := false ;
3625: LD_ADDR_EXP 62
3629: PUSH
3630: LD_INT 0
3632: ST_TO_ADDR
// s60 := false ;
3633: LD_ADDR_EXP 63
3637: PUSH
3638: LD_INT 0
3640: ST_TO_ADDR
// end ;
3641: LD_VAR 0 1
3645: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3646: LD_INT 0
3648: PPUSH
3649: PPUSH
3650: PPUSH
3651: PPUSH
3652: PPUSH
3653: PPUSH
3654: PPUSH
// result := [ ] ;
3655: LD_ADDR_VAR 0 2
3659: PUSH
3660: EMPTY
3661: ST_TO_ADDR
// if campaign_id = 1 then
3662: LD_OWVAR 69
3666: PUSH
3667: LD_INT 1
3669: EQUAL
3670: IFFALSE 6836
// begin case mission_number of 1 :
3672: LD_OWVAR 70
3676: PUSH
3677: LD_INT 1
3679: DOUBLE
3680: EQUAL
3681: IFTRUE 3685
3683: GO 3761
3685: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: LD_INT 2
3693: PUSH
3694: LD_INT 4
3696: PUSH
3697: LD_INT 11
3699: PUSH
3700: LD_INT 12
3702: PUSH
3703: LD_INT 15
3705: PUSH
3706: LD_INT 16
3708: PUSH
3709: LD_INT 22
3711: PUSH
3712: LD_INT 23
3714: PUSH
3715: LD_INT 26
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 101
3731: PUSH
3732: LD_INT 102
3734: PUSH
3735: LD_INT 106
3737: PUSH
3738: LD_INT 116
3740: PUSH
3741: LD_INT 117
3743: PUSH
3744: LD_INT 118
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: ST_TO_ADDR
3759: GO 6834
3761: LD_INT 2
3763: DOUBLE
3764: EQUAL
3765: IFTRUE 3769
3767: GO 3853
3769: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3770: LD_ADDR_VAR 0 2
3774: PUSH
3775: LD_INT 2
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: LD_INT 11
3783: PUSH
3784: LD_INT 12
3786: PUSH
3787: LD_INT 15
3789: PUSH
3790: LD_INT 16
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 23
3798: PUSH
3799: LD_INT 26
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 101
3815: PUSH
3816: LD_INT 102
3818: PUSH
3819: LD_INT 105
3821: PUSH
3822: LD_INT 106
3824: PUSH
3825: LD_INT 108
3827: PUSH
3828: LD_INT 116
3830: PUSH
3831: LD_INT 117
3833: PUSH
3834: LD_INT 118
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: ST_TO_ADDR
3851: GO 6834
3853: LD_INT 3
3855: DOUBLE
3856: EQUAL
3857: IFTRUE 3861
3859: GO 3949
3861: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3862: LD_ADDR_VAR 0 2
3866: PUSH
3867: LD_INT 2
3869: PUSH
3870: LD_INT 4
3872: PUSH
3873: LD_INT 5
3875: PUSH
3876: LD_INT 11
3878: PUSH
3879: LD_INT 12
3881: PUSH
3882: LD_INT 15
3884: PUSH
3885: LD_INT 16
3887: PUSH
3888: LD_INT 22
3890: PUSH
3891: LD_INT 26
3893: PUSH
3894: LD_INT 36
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 101
3911: PUSH
3912: LD_INT 102
3914: PUSH
3915: LD_INT 105
3917: PUSH
3918: LD_INT 106
3920: PUSH
3921: LD_INT 108
3923: PUSH
3924: LD_INT 116
3926: PUSH
3927: LD_INT 117
3929: PUSH
3930: LD_INT 118
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: ST_TO_ADDR
3947: GO 6834
3949: LD_INT 4
3951: DOUBLE
3952: EQUAL
3953: IFTRUE 3957
3955: GO 4053
3957: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3958: LD_ADDR_VAR 0 2
3962: PUSH
3963: LD_INT 2
3965: PUSH
3966: LD_INT 4
3968: PUSH
3969: LD_INT 5
3971: PUSH
3972: LD_INT 8
3974: PUSH
3975: LD_INT 11
3977: PUSH
3978: LD_INT 12
3980: PUSH
3981: LD_INT 15
3983: PUSH
3984: LD_INT 16
3986: PUSH
3987: LD_INT 22
3989: PUSH
3990: LD_INT 23
3992: PUSH
3993: LD_INT 26
3995: PUSH
3996: LD_INT 36
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 101
4015: PUSH
4016: LD_INT 102
4018: PUSH
4019: LD_INT 105
4021: PUSH
4022: LD_INT 106
4024: PUSH
4025: LD_INT 108
4027: PUSH
4028: LD_INT 116
4030: PUSH
4031: LD_INT 117
4033: PUSH
4034: LD_INT 118
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: ST_TO_ADDR
4051: GO 6834
4053: LD_INT 5
4055: DOUBLE
4056: EQUAL
4057: IFTRUE 4061
4059: GO 4173
4061: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: LD_INT 2
4069: PUSH
4070: LD_INT 4
4072: PUSH
4073: LD_INT 5
4075: PUSH
4076: LD_INT 6
4078: PUSH
4079: LD_INT 8
4081: PUSH
4082: LD_INT 11
4084: PUSH
4085: LD_INT 12
4087: PUSH
4088: LD_INT 15
4090: PUSH
4091: LD_INT 16
4093: PUSH
4094: LD_INT 22
4096: PUSH
4097: LD_INT 23
4099: PUSH
4100: LD_INT 25
4102: PUSH
4103: LD_INT 26
4105: PUSH
4106: LD_INT 36
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 101
4127: PUSH
4128: LD_INT 102
4130: PUSH
4131: LD_INT 105
4133: PUSH
4134: LD_INT 106
4136: PUSH
4137: LD_INT 108
4139: PUSH
4140: LD_INT 109
4142: PUSH
4143: LD_INT 112
4145: PUSH
4146: LD_INT 116
4148: PUSH
4149: LD_INT 117
4151: PUSH
4152: LD_INT 118
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: ST_TO_ADDR
4171: GO 6834
4173: LD_INT 6
4175: DOUBLE
4176: EQUAL
4177: IFTRUE 4181
4179: GO 4313
4181: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4182: LD_ADDR_VAR 0 2
4186: PUSH
4187: LD_INT 2
4189: PUSH
4190: LD_INT 4
4192: PUSH
4193: LD_INT 5
4195: PUSH
4196: LD_INT 6
4198: PUSH
4199: LD_INT 8
4201: PUSH
4202: LD_INT 11
4204: PUSH
4205: LD_INT 12
4207: PUSH
4208: LD_INT 15
4210: PUSH
4211: LD_INT 16
4213: PUSH
4214: LD_INT 20
4216: PUSH
4217: LD_INT 21
4219: PUSH
4220: LD_INT 22
4222: PUSH
4223: LD_INT 23
4225: PUSH
4226: LD_INT 25
4228: PUSH
4229: LD_INT 26
4231: PUSH
4232: LD_INT 30
4234: PUSH
4235: LD_INT 31
4237: PUSH
4238: LD_INT 32
4240: PUSH
4241: LD_INT 36
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 101
4267: PUSH
4268: LD_INT 102
4270: PUSH
4271: LD_INT 105
4273: PUSH
4274: LD_INT 106
4276: PUSH
4277: LD_INT 108
4279: PUSH
4280: LD_INT 109
4282: PUSH
4283: LD_INT 112
4285: PUSH
4286: LD_INT 116
4288: PUSH
4289: LD_INT 117
4291: PUSH
4292: LD_INT 118
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: ST_TO_ADDR
4311: GO 6834
4313: LD_INT 7
4315: DOUBLE
4316: EQUAL
4317: IFTRUE 4321
4319: GO 4433
4321: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4322: LD_ADDR_VAR 0 2
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: LD_INT 4
4332: PUSH
4333: LD_INT 5
4335: PUSH
4336: LD_INT 7
4338: PUSH
4339: LD_INT 11
4341: PUSH
4342: LD_INT 12
4344: PUSH
4345: LD_INT 15
4347: PUSH
4348: LD_INT 16
4350: PUSH
4351: LD_INT 20
4353: PUSH
4354: LD_INT 21
4356: PUSH
4357: LD_INT 22
4359: PUSH
4360: LD_INT 23
4362: PUSH
4363: LD_INT 25
4365: PUSH
4366: LD_INT 26
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 101
4387: PUSH
4388: LD_INT 102
4390: PUSH
4391: LD_INT 103
4393: PUSH
4394: LD_INT 105
4396: PUSH
4397: LD_INT 106
4399: PUSH
4400: LD_INT 108
4402: PUSH
4403: LD_INT 112
4405: PUSH
4406: LD_INT 116
4408: PUSH
4409: LD_INT 117
4411: PUSH
4412: LD_INT 118
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: ST_TO_ADDR
4431: GO 6834
4433: LD_INT 8
4435: DOUBLE
4436: EQUAL
4437: IFTRUE 4441
4439: GO 4581
4441: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4442: LD_ADDR_VAR 0 2
4446: PUSH
4447: LD_INT 2
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: LD_INT 5
4455: PUSH
4456: LD_INT 6
4458: PUSH
4459: LD_INT 7
4461: PUSH
4462: LD_INT 8
4464: PUSH
4465: LD_INT 11
4467: PUSH
4468: LD_INT 12
4470: PUSH
4471: LD_INT 15
4473: PUSH
4474: LD_INT 16
4476: PUSH
4477: LD_INT 20
4479: PUSH
4480: LD_INT 21
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 25
4491: PUSH
4492: LD_INT 26
4494: PUSH
4495: LD_INT 30
4497: PUSH
4498: LD_INT 31
4500: PUSH
4501: LD_INT 32
4503: PUSH
4504: LD_INT 36
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 101
4531: PUSH
4532: LD_INT 102
4534: PUSH
4535: LD_INT 103
4537: PUSH
4538: LD_INT 105
4540: PUSH
4541: LD_INT 106
4543: PUSH
4544: LD_INT 108
4546: PUSH
4547: LD_INT 109
4549: PUSH
4550: LD_INT 112
4552: PUSH
4553: LD_INT 116
4555: PUSH
4556: LD_INT 117
4558: PUSH
4559: LD_INT 118
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: ST_TO_ADDR
4579: GO 6834
4581: LD_INT 9
4583: DOUBLE
4584: EQUAL
4585: IFTRUE 4589
4587: GO 4737
4589: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4590: LD_ADDR_VAR 0 2
4594: PUSH
4595: LD_INT 2
4597: PUSH
4598: LD_INT 4
4600: PUSH
4601: LD_INT 5
4603: PUSH
4604: LD_INT 6
4606: PUSH
4607: LD_INT 7
4609: PUSH
4610: LD_INT 8
4612: PUSH
4613: LD_INT 11
4615: PUSH
4616: LD_INT 12
4618: PUSH
4619: LD_INT 15
4621: PUSH
4622: LD_INT 16
4624: PUSH
4625: LD_INT 20
4627: PUSH
4628: LD_INT 21
4630: PUSH
4631: LD_INT 22
4633: PUSH
4634: LD_INT 23
4636: PUSH
4637: LD_INT 25
4639: PUSH
4640: LD_INT 26
4642: PUSH
4643: LD_INT 28
4645: PUSH
4646: LD_INT 30
4648: PUSH
4649: LD_INT 31
4651: PUSH
4652: LD_INT 32
4654: PUSH
4655: LD_INT 36
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 101
4683: PUSH
4684: LD_INT 102
4686: PUSH
4687: LD_INT 103
4689: PUSH
4690: LD_INT 105
4692: PUSH
4693: LD_INT 106
4695: PUSH
4696: LD_INT 108
4698: PUSH
4699: LD_INT 109
4701: PUSH
4702: LD_INT 112
4704: PUSH
4705: LD_INT 114
4707: PUSH
4708: LD_INT 116
4710: PUSH
4711: LD_INT 117
4713: PUSH
4714: LD_INT 118
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: ST_TO_ADDR
4735: GO 6834
4737: LD_INT 10
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4941
4745: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4746: LD_ADDR_VAR 0 2
4750: PUSH
4751: LD_INT 2
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: LD_INT 5
4759: PUSH
4760: LD_INT 6
4762: PUSH
4763: LD_INT 7
4765: PUSH
4766: LD_INT 8
4768: PUSH
4769: LD_INT 9
4771: PUSH
4772: LD_INT 10
4774: PUSH
4775: LD_INT 11
4777: PUSH
4778: LD_INT 12
4780: PUSH
4781: LD_INT 13
4783: PUSH
4784: LD_INT 14
4786: PUSH
4787: LD_INT 15
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: LD_INT 17
4795: PUSH
4796: LD_INT 18
4798: PUSH
4799: LD_INT 19
4801: PUSH
4802: LD_INT 20
4804: PUSH
4805: LD_INT 21
4807: PUSH
4808: LD_INT 22
4810: PUSH
4811: LD_INT 23
4813: PUSH
4814: LD_INT 24
4816: PUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 26
4822: PUSH
4823: LD_INT 28
4825: PUSH
4826: LD_INT 30
4828: PUSH
4829: LD_INT 31
4831: PUSH
4832: LD_INT 32
4834: PUSH
4835: LD_INT 36
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 101
4871: PUSH
4872: LD_INT 102
4874: PUSH
4875: LD_INT 103
4877: PUSH
4878: LD_INT 104
4880: PUSH
4881: LD_INT 105
4883: PUSH
4884: LD_INT 106
4886: PUSH
4887: LD_INT 107
4889: PUSH
4890: LD_INT 108
4892: PUSH
4893: LD_INT 109
4895: PUSH
4896: LD_INT 110
4898: PUSH
4899: LD_INT 111
4901: PUSH
4902: LD_INT 112
4904: PUSH
4905: LD_INT 114
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: LD_INT 117
4913: PUSH
4914: LD_INT 118
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
4939: GO 6834
4941: LD_INT 11
4943: DOUBLE
4944: EQUAL
4945: IFTRUE 4949
4947: GO 5153
4949: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4950: LD_ADDR_VAR 0 2
4954: PUSH
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 5
4966: PUSH
4967: LD_INT 6
4969: PUSH
4970: LD_INT 7
4972: PUSH
4973: LD_INT 8
4975: PUSH
4976: LD_INT 9
4978: PUSH
4979: LD_INT 10
4981: PUSH
4982: LD_INT 11
4984: PUSH
4985: LD_INT 12
4987: PUSH
4988: LD_INT 13
4990: PUSH
4991: LD_INT 14
4993: PUSH
4994: LD_INT 15
4996: PUSH
4997: LD_INT 16
4999: PUSH
5000: LD_INT 17
5002: PUSH
5003: LD_INT 18
5005: PUSH
5006: LD_INT 19
5008: PUSH
5009: LD_INT 20
5011: PUSH
5012: LD_INT 21
5014: PUSH
5015: LD_INT 22
5017: PUSH
5018: LD_INT 23
5020: PUSH
5021: LD_INT 24
5023: PUSH
5024: LD_INT 25
5026: PUSH
5027: LD_INT 26
5029: PUSH
5030: LD_INT 28
5032: PUSH
5033: LD_INT 30
5035: PUSH
5036: LD_INT 31
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: LD_INT 34
5044: PUSH
5045: LD_INT 36
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 101
5083: PUSH
5084: LD_INT 102
5086: PUSH
5087: LD_INT 103
5089: PUSH
5090: LD_INT 104
5092: PUSH
5093: LD_INT 105
5095: PUSH
5096: LD_INT 106
5098: PUSH
5099: LD_INT 107
5101: PUSH
5102: LD_INT 108
5104: PUSH
5105: LD_INT 109
5107: PUSH
5108: LD_INT 110
5110: PUSH
5111: LD_INT 111
5113: PUSH
5114: LD_INT 112
5116: PUSH
5117: LD_INT 114
5119: PUSH
5120: LD_INT 116
5122: PUSH
5123: LD_INT 117
5125: PUSH
5126: LD_INT 118
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: ST_TO_ADDR
5151: GO 6834
5153: LD_INT 12
5155: DOUBLE
5156: EQUAL
5157: IFTRUE 5161
5159: GO 5381
5161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_INT 1
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: LD_INT 3
5175: PUSH
5176: LD_INT 4
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: LD_INT 6
5184: PUSH
5185: LD_INT 7
5187: PUSH
5188: LD_INT 8
5190: PUSH
5191: LD_INT 9
5193: PUSH
5194: LD_INT 10
5196: PUSH
5197: LD_INT 11
5199: PUSH
5200: LD_INT 12
5202: PUSH
5203: LD_INT 13
5205: PUSH
5206: LD_INT 14
5208: PUSH
5209: LD_INT 15
5211: PUSH
5212: LD_INT 16
5214: PUSH
5215: LD_INT 17
5217: PUSH
5218: LD_INT 18
5220: PUSH
5221: LD_INT 19
5223: PUSH
5224: LD_INT 20
5226: PUSH
5227: LD_INT 21
5229: PUSH
5230: LD_INT 22
5232: PUSH
5233: LD_INT 23
5235: PUSH
5236: LD_INT 24
5238: PUSH
5239: LD_INT 25
5241: PUSH
5242: LD_INT 26
5244: PUSH
5245: LD_INT 27
5247: PUSH
5248: LD_INT 28
5250: PUSH
5251: LD_INT 30
5253: PUSH
5254: LD_INT 31
5256: PUSH
5257: LD_INT 32
5259: PUSH
5260: LD_INT 33
5262: PUSH
5263: LD_INT 34
5265: PUSH
5266: LD_INT 36
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 101
5307: PUSH
5308: LD_INT 102
5310: PUSH
5311: LD_INT 103
5313: PUSH
5314: LD_INT 104
5316: PUSH
5317: LD_INT 105
5319: PUSH
5320: LD_INT 106
5322: PUSH
5323: LD_INT 107
5325: PUSH
5326: LD_INT 108
5328: PUSH
5329: LD_INT 109
5331: PUSH
5332: LD_INT 110
5334: PUSH
5335: LD_INT 111
5337: PUSH
5338: LD_INT 112
5340: PUSH
5341: LD_INT 113
5343: PUSH
5344: LD_INT 114
5346: PUSH
5347: LD_INT 116
5349: PUSH
5350: LD_INT 117
5352: PUSH
5353: LD_INT 118
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: ST_TO_ADDR
5379: GO 6834
5381: LD_INT 13
5383: DOUBLE
5384: EQUAL
5385: IFTRUE 5389
5387: GO 5597
5389: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5390: LD_ADDR_VAR 0 2
5394: PUSH
5395: LD_INT 1
5397: PUSH
5398: LD_INT 2
5400: PUSH
5401: LD_INT 3
5403: PUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 8
5412: PUSH
5413: LD_INT 9
5415: PUSH
5416: LD_INT 10
5418: PUSH
5419: LD_INT 11
5421: PUSH
5422: LD_INT 12
5424: PUSH
5425: LD_INT 14
5427: PUSH
5428: LD_INT 15
5430: PUSH
5431: LD_INT 16
5433: PUSH
5434: LD_INT 17
5436: PUSH
5437: LD_INT 18
5439: PUSH
5440: LD_INT 19
5442: PUSH
5443: LD_INT 20
5445: PUSH
5446: LD_INT 21
5448: PUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 23
5454: PUSH
5455: LD_INT 24
5457: PUSH
5458: LD_INT 25
5460: PUSH
5461: LD_INT 26
5463: PUSH
5464: LD_INT 27
5466: PUSH
5467: LD_INT 28
5469: PUSH
5470: LD_INT 30
5472: PUSH
5473: LD_INT 31
5475: PUSH
5476: LD_INT 32
5478: PUSH
5479: LD_INT 33
5481: PUSH
5482: LD_INT 34
5484: PUSH
5485: LD_INT 36
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 101
5523: PUSH
5524: LD_INT 102
5526: PUSH
5527: LD_INT 103
5529: PUSH
5530: LD_INT 104
5532: PUSH
5533: LD_INT 105
5535: PUSH
5536: LD_INT 106
5538: PUSH
5539: LD_INT 107
5541: PUSH
5542: LD_INT 108
5544: PUSH
5545: LD_INT 109
5547: PUSH
5548: LD_INT 110
5550: PUSH
5551: LD_INT 111
5553: PUSH
5554: LD_INT 112
5556: PUSH
5557: LD_INT 113
5559: PUSH
5560: LD_INT 114
5562: PUSH
5563: LD_INT 116
5565: PUSH
5566: LD_INT 117
5568: PUSH
5569: LD_INT 118
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: ST_TO_ADDR
5595: GO 6834
5597: LD_INT 14
5599: DOUBLE
5600: EQUAL
5601: IFTRUE 5605
5603: GO 5829
5605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5606: LD_ADDR_VAR 0 2
5610: PUSH
5611: LD_INT 1
5613: PUSH
5614: LD_INT 2
5616: PUSH
5617: LD_INT 3
5619: PUSH
5620: LD_INT 4
5622: PUSH
5623: LD_INT 5
5625: PUSH
5626: LD_INT 6
5628: PUSH
5629: LD_INT 7
5631: PUSH
5632: LD_INT 8
5634: PUSH
5635: LD_INT 9
5637: PUSH
5638: LD_INT 10
5640: PUSH
5641: LD_INT 11
5643: PUSH
5644: LD_INT 12
5646: PUSH
5647: LD_INT 13
5649: PUSH
5650: LD_INT 14
5652: PUSH
5653: LD_INT 15
5655: PUSH
5656: LD_INT 16
5658: PUSH
5659: LD_INT 17
5661: PUSH
5662: LD_INT 18
5664: PUSH
5665: LD_INT 19
5667: PUSH
5668: LD_INT 20
5670: PUSH
5671: LD_INT 21
5673: PUSH
5674: LD_INT 22
5676: PUSH
5677: LD_INT 23
5679: PUSH
5680: LD_INT 24
5682: PUSH
5683: LD_INT 25
5685: PUSH
5686: LD_INT 26
5688: PUSH
5689: LD_INT 27
5691: PUSH
5692: LD_INT 28
5694: PUSH
5695: LD_INT 29
5697: PUSH
5698: LD_INT 30
5700: PUSH
5701: LD_INT 31
5703: PUSH
5704: LD_INT 32
5706: PUSH
5707: LD_INT 33
5709: PUSH
5710: LD_INT 34
5712: PUSH
5713: LD_INT 36
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: PUSH
5753: LD_INT 101
5755: PUSH
5756: LD_INT 102
5758: PUSH
5759: LD_INT 103
5761: PUSH
5762: LD_INT 104
5764: PUSH
5765: LD_INT 105
5767: PUSH
5768: LD_INT 106
5770: PUSH
5771: LD_INT 107
5773: PUSH
5774: LD_INT 108
5776: PUSH
5777: LD_INT 109
5779: PUSH
5780: LD_INT 110
5782: PUSH
5783: LD_INT 111
5785: PUSH
5786: LD_INT 112
5788: PUSH
5789: LD_INT 113
5791: PUSH
5792: LD_INT 114
5794: PUSH
5795: LD_INT 116
5797: PUSH
5798: LD_INT 117
5800: PUSH
5801: LD_INT 118
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: ST_TO_ADDR
5827: GO 6834
5829: LD_INT 15
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5837
5835: GO 6061
5837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5838: LD_ADDR_VAR 0 2
5842: PUSH
5843: LD_INT 1
5845: PUSH
5846: LD_INT 2
5848: PUSH
5849: LD_INT 3
5851: PUSH
5852: LD_INT 4
5854: PUSH
5855: LD_INT 5
5857: PUSH
5858: LD_INT 6
5860: PUSH
5861: LD_INT 7
5863: PUSH
5864: LD_INT 8
5866: PUSH
5867: LD_INT 9
5869: PUSH
5870: LD_INT 10
5872: PUSH
5873: LD_INT 11
5875: PUSH
5876: LD_INT 12
5878: PUSH
5879: LD_INT 13
5881: PUSH
5882: LD_INT 14
5884: PUSH
5885: LD_INT 15
5887: PUSH
5888: LD_INT 16
5890: PUSH
5891: LD_INT 17
5893: PUSH
5894: LD_INT 18
5896: PUSH
5897: LD_INT 19
5899: PUSH
5900: LD_INT 20
5902: PUSH
5903: LD_INT 21
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 23
5911: PUSH
5912: LD_INT 24
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 26
5920: PUSH
5921: LD_INT 27
5923: PUSH
5924: LD_INT 28
5926: PUSH
5927: LD_INT 29
5929: PUSH
5930: LD_INT 30
5932: PUSH
5933: LD_INT 31
5935: PUSH
5936: LD_INT 32
5938: PUSH
5939: LD_INT 33
5941: PUSH
5942: LD_INT 34
5944: PUSH
5945: LD_INT 36
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 101
5987: PUSH
5988: LD_INT 102
5990: PUSH
5991: LD_INT 103
5993: PUSH
5994: LD_INT 104
5996: PUSH
5997: LD_INT 105
5999: PUSH
6000: LD_INT 106
6002: PUSH
6003: LD_INT 107
6005: PUSH
6006: LD_INT 108
6008: PUSH
6009: LD_INT 109
6011: PUSH
6012: LD_INT 110
6014: PUSH
6015: LD_INT 111
6017: PUSH
6018: LD_INT 112
6020: PUSH
6021: LD_INT 113
6023: PUSH
6024: LD_INT 114
6026: PUSH
6027: LD_INT 116
6029: PUSH
6030: LD_INT 117
6032: PUSH
6033: LD_INT 118
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: ST_TO_ADDR
6059: GO 6834
6061: LD_INT 16
6063: DOUBLE
6064: EQUAL
6065: IFTRUE 6069
6067: GO 6205
6069: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6070: LD_ADDR_VAR 0 2
6074: PUSH
6075: LD_INT 2
6077: PUSH
6078: LD_INT 4
6080: PUSH
6081: LD_INT 5
6083: PUSH
6084: LD_INT 7
6086: PUSH
6087: LD_INT 11
6089: PUSH
6090: LD_INT 12
6092: PUSH
6093: LD_INT 15
6095: PUSH
6096: LD_INT 16
6098: PUSH
6099: LD_INT 20
6101: PUSH
6102: LD_INT 21
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 23
6110: PUSH
6111: LD_INT 25
6113: PUSH
6114: LD_INT 26
6116: PUSH
6117: LD_INT 30
6119: PUSH
6120: LD_INT 31
6122: PUSH
6123: LD_INT 32
6125: PUSH
6126: LD_INT 33
6128: PUSH
6129: LD_INT 34
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 101
6155: PUSH
6156: LD_INT 102
6158: PUSH
6159: LD_INT 103
6161: PUSH
6162: LD_INT 106
6164: PUSH
6165: LD_INT 108
6167: PUSH
6168: LD_INT 112
6170: PUSH
6171: LD_INT 113
6173: PUSH
6174: LD_INT 114
6176: PUSH
6177: LD_INT 116
6179: PUSH
6180: LD_INT 117
6182: PUSH
6183: LD_INT 118
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: ST_TO_ADDR
6203: GO 6834
6205: LD_INT 17
6207: DOUBLE
6208: EQUAL
6209: IFTRUE 6213
6211: GO 6437
6213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_INT 1
6221: PUSH
6222: LD_INT 2
6224: PUSH
6225: LD_INT 3
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: LD_INT 6
6236: PUSH
6237: LD_INT 7
6239: PUSH
6240: LD_INT 8
6242: PUSH
6243: LD_INT 9
6245: PUSH
6246: LD_INT 10
6248: PUSH
6249: LD_INT 11
6251: PUSH
6252: LD_INT 12
6254: PUSH
6255: LD_INT 13
6257: PUSH
6258: LD_INT 14
6260: PUSH
6261: LD_INT 15
6263: PUSH
6264: LD_INT 16
6266: PUSH
6267: LD_INT 17
6269: PUSH
6270: LD_INT 18
6272: PUSH
6273: LD_INT 19
6275: PUSH
6276: LD_INT 20
6278: PUSH
6279: LD_INT 21
6281: PUSH
6282: LD_INT 22
6284: PUSH
6285: LD_INT 23
6287: PUSH
6288: LD_INT 24
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 26
6296: PUSH
6297: LD_INT 27
6299: PUSH
6300: LD_INT 28
6302: PUSH
6303: LD_INT 29
6305: PUSH
6306: LD_INT 30
6308: PUSH
6309: LD_INT 31
6311: PUSH
6312: LD_INT 32
6314: PUSH
6315: LD_INT 33
6317: PUSH
6318: LD_INT 34
6320: PUSH
6321: LD_INT 36
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 101
6363: PUSH
6364: LD_INT 102
6366: PUSH
6367: LD_INT 103
6369: PUSH
6370: LD_INT 104
6372: PUSH
6373: LD_INT 105
6375: PUSH
6376: LD_INT 106
6378: PUSH
6379: LD_INT 107
6381: PUSH
6382: LD_INT 108
6384: PUSH
6385: LD_INT 109
6387: PUSH
6388: LD_INT 110
6390: PUSH
6391: LD_INT 111
6393: PUSH
6394: LD_INT 112
6396: PUSH
6397: LD_INT 113
6399: PUSH
6400: LD_INT 114
6402: PUSH
6403: LD_INT 116
6405: PUSH
6406: LD_INT 117
6408: PUSH
6409: LD_INT 118
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: ST_TO_ADDR
6435: GO 6834
6437: LD_INT 18
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6593
6445: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6446: LD_ADDR_VAR 0 2
6450: PUSH
6451: LD_INT 2
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: LD_INT 5
6459: PUSH
6460: LD_INT 7
6462: PUSH
6463: LD_INT 11
6465: PUSH
6466: LD_INT 12
6468: PUSH
6469: LD_INT 15
6471: PUSH
6472: LD_INT 16
6474: PUSH
6475: LD_INT 20
6477: PUSH
6478: LD_INT 21
6480: PUSH
6481: LD_INT 22
6483: PUSH
6484: LD_INT 23
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 26
6492: PUSH
6493: LD_INT 30
6495: PUSH
6496: LD_INT 31
6498: PUSH
6499: LD_INT 32
6501: PUSH
6502: LD_INT 33
6504: PUSH
6505: LD_INT 34
6507: PUSH
6508: LD_INT 35
6510: PUSH
6511: LD_INT 36
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 101
6539: PUSH
6540: LD_INT 102
6542: PUSH
6543: LD_INT 103
6545: PUSH
6546: LD_INT 106
6548: PUSH
6549: LD_INT 108
6551: PUSH
6552: LD_INT 112
6554: PUSH
6555: LD_INT 113
6557: PUSH
6558: LD_INT 114
6560: PUSH
6561: LD_INT 115
6563: PUSH
6564: LD_INT 116
6566: PUSH
6567: LD_INT 117
6569: PUSH
6570: LD_INT 118
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: ST_TO_ADDR
6591: GO 6834
6593: LD_INT 19
6595: DOUBLE
6596: EQUAL
6597: IFTRUE 6601
6599: GO 6833
6601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6602: LD_ADDR_VAR 0 2
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: LD_INT 6
6624: PUSH
6625: LD_INT 7
6627: PUSH
6628: LD_INT 8
6630: PUSH
6631: LD_INT 9
6633: PUSH
6634: LD_INT 10
6636: PUSH
6637: LD_INT 11
6639: PUSH
6640: LD_INT 12
6642: PUSH
6643: LD_INT 13
6645: PUSH
6646: LD_INT 14
6648: PUSH
6649: LD_INT 15
6651: PUSH
6652: LD_INT 16
6654: PUSH
6655: LD_INT 17
6657: PUSH
6658: LD_INT 18
6660: PUSH
6661: LD_INT 19
6663: PUSH
6664: LD_INT 20
6666: PUSH
6667: LD_INT 21
6669: PUSH
6670: LD_INT 22
6672: PUSH
6673: LD_INT 23
6675: PUSH
6676: LD_INT 24
6678: PUSH
6679: LD_INT 25
6681: PUSH
6682: LD_INT 26
6684: PUSH
6685: LD_INT 27
6687: PUSH
6688: LD_INT 28
6690: PUSH
6691: LD_INT 29
6693: PUSH
6694: LD_INT 30
6696: PUSH
6697: LD_INT 31
6699: PUSH
6700: LD_INT 32
6702: PUSH
6703: LD_INT 33
6705: PUSH
6706: LD_INT 34
6708: PUSH
6709: LD_INT 35
6711: PUSH
6712: LD_INT 36
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: PUSH
6753: LD_INT 101
6755: PUSH
6756: LD_INT 102
6758: PUSH
6759: LD_INT 103
6761: PUSH
6762: LD_INT 104
6764: PUSH
6765: LD_INT 105
6767: PUSH
6768: LD_INT 106
6770: PUSH
6771: LD_INT 107
6773: PUSH
6774: LD_INT 108
6776: PUSH
6777: LD_INT 109
6779: PUSH
6780: LD_INT 110
6782: PUSH
6783: LD_INT 111
6785: PUSH
6786: LD_INT 112
6788: PUSH
6789: LD_INT 113
6791: PUSH
6792: LD_INT 114
6794: PUSH
6795: LD_INT 115
6797: PUSH
6798: LD_INT 116
6800: PUSH
6801: LD_INT 117
6803: PUSH
6804: LD_INT 118
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: ST_TO_ADDR
6831: GO 6834
6833: POP
// end else
6834: GO 7065
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6836: LD_ADDR_VAR 0 2
6840: PUSH
6841: LD_INT 1
6843: PUSH
6844: LD_INT 2
6846: PUSH
6847: LD_INT 3
6849: PUSH
6850: LD_INT 4
6852: PUSH
6853: LD_INT 5
6855: PUSH
6856: LD_INT 6
6858: PUSH
6859: LD_INT 7
6861: PUSH
6862: LD_INT 8
6864: PUSH
6865: LD_INT 9
6867: PUSH
6868: LD_INT 10
6870: PUSH
6871: LD_INT 11
6873: PUSH
6874: LD_INT 12
6876: PUSH
6877: LD_INT 13
6879: PUSH
6880: LD_INT 14
6882: PUSH
6883: LD_INT 15
6885: PUSH
6886: LD_INT 16
6888: PUSH
6889: LD_INT 17
6891: PUSH
6892: LD_INT 18
6894: PUSH
6895: LD_INT 19
6897: PUSH
6898: LD_INT 20
6900: PUSH
6901: LD_INT 21
6903: PUSH
6904: LD_INT 22
6906: PUSH
6907: LD_INT 23
6909: PUSH
6910: LD_INT 24
6912: PUSH
6913: LD_INT 25
6915: PUSH
6916: LD_INT 26
6918: PUSH
6919: LD_INT 27
6921: PUSH
6922: LD_INT 28
6924: PUSH
6925: LD_INT 29
6927: PUSH
6928: LD_INT 30
6930: PUSH
6931: LD_INT 31
6933: PUSH
6934: LD_INT 32
6936: PUSH
6937: LD_INT 33
6939: PUSH
6940: LD_INT 34
6942: PUSH
6943: LD_INT 35
6945: PUSH
6946: LD_INT 36
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 101
6989: PUSH
6990: LD_INT 102
6992: PUSH
6993: LD_INT 103
6995: PUSH
6996: LD_INT 104
6998: PUSH
6999: LD_INT 105
7001: PUSH
7002: LD_INT 106
7004: PUSH
7005: LD_INT 107
7007: PUSH
7008: LD_INT 108
7010: PUSH
7011: LD_INT 109
7013: PUSH
7014: LD_INT 110
7016: PUSH
7017: LD_INT 111
7019: PUSH
7020: LD_INT 112
7022: PUSH
7023: LD_INT 113
7025: PUSH
7026: LD_INT 114
7028: PUSH
7029: LD_INT 115
7031: PUSH
7032: LD_INT 116
7034: PUSH
7035: LD_INT 117
7037: PUSH
7038: LD_INT 118
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: ST_TO_ADDR
// if result then
7065: LD_VAR 0 2
7069: IFFALSE 7855
// begin normal :=  ;
7071: LD_ADDR_VAR 0 5
7075: PUSH
7076: LD_STRING 
7078: ST_TO_ADDR
// hardcore :=  ;
7079: LD_ADDR_VAR 0 6
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// active :=  ;
7087: LD_ADDR_VAR 0 7
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// for i = 1 to normalCounter do
7095: LD_ADDR_VAR 0 8
7099: PUSH
7100: DOUBLE
7101: LD_INT 1
7103: DEC
7104: ST_TO_ADDR
7105: LD_EXP 8
7109: PUSH
7110: FOR_TO
7111: IFFALSE 7212
// begin tmp := 0 ;
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_STRING 0
7120: ST_TO_ADDR
// if result [ 1 ] then
7121: LD_VAR 0 2
7125: PUSH
7126: LD_INT 1
7128: ARRAY
7129: IFFALSE 7194
// if result [ 1 ] [ 1 ] = i then
7131: LD_VAR 0 2
7135: PUSH
7136: LD_INT 1
7138: ARRAY
7139: PUSH
7140: LD_INT 1
7142: ARRAY
7143: PUSH
7144: LD_VAR 0 8
7148: EQUAL
7149: IFFALSE 7194
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7151: LD_ADDR_VAR 0 2
7155: PUSH
7156: LD_VAR 0 2
7160: PPUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_VAR 0 2
7168: PUSH
7169: LD_INT 1
7171: ARRAY
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: CALL_OW 3
7180: PPUSH
7181: CALL_OW 1
7185: ST_TO_ADDR
// tmp := 1 ;
7186: LD_ADDR_VAR 0 3
7190: PUSH
7191: LD_STRING 1
7193: ST_TO_ADDR
// end ; normal := normal & tmp ;
7194: LD_ADDR_VAR 0 5
7198: PUSH
7199: LD_VAR 0 5
7203: PUSH
7204: LD_VAR 0 3
7208: STR
7209: ST_TO_ADDR
// end ;
7210: GO 7110
7212: POP
7213: POP
// for i = 1 to hardcoreCounter do
7214: LD_ADDR_VAR 0 8
7218: PUSH
7219: DOUBLE
7220: LD_INT 1
7222: DEC
7223: ST_TO_ADDR
7224: LD_EXP 9
7228: PUSH
7229: FOR_TO
7230: IFFALSE 7335
// begin tmp := 0 ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_STRING 0
7239: ST_TO_ADDR
// if result [ 2 ] then
7240: LD_VAR 0 2
7244: PUSH
7245: LD_INT 2
7247: ARRAY
7248: IFFALSE 7317
// if result [ 2 ] [ 1 ] = 100 + i then
7250: LD_VAR 0 2
7254: PUSH
7255: LD_INT 2
7257: ARRAY
7258: PUSH
7259: LD_INT 1
7261: ARRAY
7262: PUSH
7263: LD_INT 100
7265: PUSH
7266: LD_VAR 0 8
7270: PLUS
7271: EQUAL
7272: IFFALSE 7317
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7274: LD_ADDR_VAR 0 2
7278: PUSH
7279: LD_VAR 0 2
7283: PPUSH
7284: LD_INT 2
7286: PPUSH
7287: LD_VAR 0 2
7291: PUSH
7292: LD_INT 2
7294: ARRAY
7295: PPUSH
7296: LD_INT 1
7298: PPUSH
7299: CALL_OW 3
7303: PPUSH
7304: CALL_OW 1
7308: ST_TO_ADDR
// tmp := 1 ;
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_STRING 1
7316: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7317: LD_ADDR_VAR 0 6
7321: PUSH
7322: LD_VAR 0 6
7326: PUSH
7327: LD_VAR 0 3
7331: STR
7332: ST_TO_ADDR
// end ;
7333: GO 7229
7335: POP
7336: POP
// if isGameLoad then
7337: LD_VAR 0 1
7341: IFFALSE 7816
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: LD_EXP 12
7352: PUSH
7353: LD_EXP 11
7357: PUSH
7358: LD_EXP 13
7362: PUSH
7363: LD_EXP 10
7367: PUSH
7368: LD_EXP 14
7372: PUSH
7373: LD_EXP 15
7377: PUSH
7378: LD_EXP 16
7382: PUSH
7383: LD_EXP 17
7387: PUSH
7388: LD_EXP 18
7392: PUSH
7393: LD_EXP 19
7397: PUSH
7398: LD_EXP 20
7402: PUSH
7403: LD_EXP 21
7407: PUSH
7408: LD_EXP 22
7412: PUSH
7413: LD_EXP 23
7417: PUSH
7418: LD_EXP 31
7422: PUSH
7423: LD_EXP 32
7427: PUSH
7428: LD_EXP 33
7432: PUSH
7433: LD_EXP 34
7437: PUSH
7438: LD_EXP 36
7442: PUSH
7443: LD_EXP 37
7447: PUSH
7448: LD_EXP 38
7452: PUSH
7453: LD_EXP 41
7457: PUSH
7458: LD_EXP 43
7462: PUSH
7463: LD_EXP 44
7467: PUSH
7468: LD_EXP 45
7472: PUSH
7473: LD_EXP 47
7477: PUSH
7478: LD_EXP 48
7482: PUSH
7483: LD_EXP 51
7487: PUSH
7488: LD_EXP 52
7492: PUSH
7493: LD_EXP 53
7497: PUSH
7498: LD_EXP 54
7502: PUSH
7503: LD_EXP 55
7507: PUSH
7508: LD_EXP 56
7512: PUSH
7513: LD_EXP 57
7517: PUSH
7518: LD_EXP 58
7522: PUSH
7523: LD_EXP 59
7527: PUSH
7528: LD_EXP 24
7532: PUSH
7533: LD_EXP 25
7537: PUSH
7538: LD_EXP 28
7542: PUSH
7543: LD_EXP 29
7547: PUSH
7548: LD_EXP 30
7552: PUSH
7553: LD_EXP 26
7557: PUSH
7558: LD_EXP 27
7562: PUSH
7563: LD_EXP 35
7567: PUSH
7568: LD_EXP 39
7572: PUSH
7573: LD_EXP 40
7577: PUSH
7578: LD_EXP 42
7582: PUSH
7583: LD_EXP 46
7587: PUSH
7588: LD_EXP 49
7592: PUSH
7593: LD_EXP 50
7597: PUSH
7598: LD_EXP 60
7602: PUSH
7603: LD_EXP 61
7607: PUSH
7608: LD_EXP 62
7612: PUSH
7613: LD_EXP 63
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// tmp :=  ;
7674: LD_ADDR_VAR 0 3
7678: PUSH
7679: LD_STRING 
7681: ST_TO_ADDR
// for i = 1 to normalCounter do
7682: LD_ADDR_VAR 0 8
7686: PUSH
7687: DOUBLE
7688: LD_INT 1
7690: DEC
7691: ST_TO_ADDR
7692: LD_EXP 8
7696: PUSH
7697: FOR_TO
7698: IFFALSE 7734
// begin if flags [ i ] then
7700: LD_VAR 0 4
7704: PUSH
7705: LD_VAR 0 8
7709: ARRAY
7710: IFFALSE 7732
// tmp := tmp & i & ; ;
7712: LD_ADDR_VAR 0 3
7716: PUSH
7717: LD_VAR 0 3
7721: PUSH
7722: LD_VAR 0 8
7726: STR
7727: PUSH
7728: LD_STRING ;
7730: STR
7731: ST_TO_ADDR
// end ;
7732: GO 7697
7734: POP
7735: POP
// for i = 1 to hardcoreCounter do
7736: LD_ADDR_VAR 0 8
7740: PUSH
7741: DOUBLE
7742: LD_INT 1
7744: DEC
7745: ST_TO_ADDR
7746: LD_EXP 9
7750: PUSH
7751: FOR_TO
7752: IFFALSE 7798
// begin if flags [ normalCounter + i ] then
7754: LD_VAR 0 4
7758: PUSH
7759: LD_EXP 8
7763: PUSH
7764: LD_VAR 0 8
7768: PLUS
7769: ARRAY
7770: IFFALSE 7796
// tmp := tmp & ( 100 + i ) & ; ;
7772: LD_ADDR_VAR 0 3
7776: PUSH
7777: LD_VAR 0 3
7781: PUSH
7782: LD_INT 100
7784: PUSH
7785: LD_VAR 0 8
7789: PLUS
7790: STR
7791: PUSH
7792: LD_STRING ;
7794: STR
7795: ST_TO_ADDR
// end ;
7796: GO 7751
7798: POP
7799: POP
// if tmp then
7800: LD_VAR 0 3
7804: IFFALSE 7816
// active := tmp ;
7806: LD_ADDR_VAR 0 7
7810: PUSH
7811: LD_VAR 0 3
7815: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7816: LD_STRING getStreamItemsFromMission("
7818: PUSH
7819: LD_VAR 0 5
7823: STR
7824: PUSH
7825: LD_STRING ","
7827: STR
7828: PUSH
7829: LD_VAR 0 6
7833: STR
7834: PUSH
7835: LD_STRING ","
7837: STR
7838: PUSH
7839: LD_VAR 0 7
7843: STR
7844: PUSH
7845: LD_STRING ")
7847: STR
7848: PPUSH
7849: CALL_OW 559
// end else
7853: GO 7862
// ToLua ( getStreamItemsFromMission("","","") ) ;
7855: LD_STRING getStreamItemsFromMission("","","")
7857: PPUSH
7858: CALL_OW 559
// end ;
7862: LD_VAR 0 2
7866: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7867: LD_EXP 7
7871: PUSH
7872: LD_EXP 12
7876: AND
7877: IFFALSE 8001
7879: GO 7881
7881: DISABLE
7882: LD_INT 0
7884: PPUSH
7885: PPUSH
// begin enable ;
7886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7887: LD_ADDR_VAR 0 2
7891: PUSH
7892: LD_INT 22
7894: PUSH
7895: LD_OWVAR 2
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 2
7906: PUSH
7907: LD_INT 34
7909: PUSH
7910: LD_INT 7
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 34
7919: PUSH
7920: LD_INT 45
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 34
7929: PUSH
7930: LD_INT 28
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 34
7939: PUSH
7940: LD_INT 47
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PPUSH
7958: CALL_OW 69
7962: ST_TO_ADDR
// if not tmp then
7963: LD_VAR 0 2
7967: NOT
7968: IFFALSE 7972
// exit ;
7970: GO 8001
// for i in tmp do
7972: LD_ADDR_VAR 0 1
7976: PUSH
7977: LD_VAR 0 2
7981: PUSH
7982: FOR_IN
7983: IFFALSE 7999
// begin SetLives ( i , 0 ) ;
7985: LD_VAR 0 1
7989: PPUSH
7990: LD_INT 0
7992: PPUSH
7993: CALL_OW 234
// end ;
7997: GO 7982
7999: POP
8000: POP
// end ;
8001: PPOPN 2
8003: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8004: LD_EXP 7
8008: PUSH
8009: LD_EXP 13
8013: AND
8014: IFFALSE 8098
8016: GO 8018
8018: DISABLE
8019: LD_INT 0
8021: PPUSH
8022: PPUSH
// begin enable ;
8023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: LD_INT 22
8031: PUSH
8032: LD_OWVAR 2
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 32
8043: PUSH
8044: LD_INT 3
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PPUSH
8055: CALL_OW 69
8059: ST_TO_ADDR
// if not tmp then
8060: LD_VAR 0 2
8064: NOT
8065: IFFALSE 8069
// exit ;
8067: GO 8098
// for i in tmp do
8069: LD_ADDR_VAR 0 1
8073: PUSH
8074: LD_VAR 0 2
8078: PUSH
8079: FOR_IN
8080: IFFALSE 8096
// begin SetLives ( i , 0 ) ;
8082: LD_VAR 0 1
8086: PPUSH
8087: LD_INT 0
8089: PPUSH
8090: CALL_OW 234
// end ;
8094: GO 8079
8096: POP
8097: POP
// end ;
8098: PPOPN 2
8100: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8101: LD_EXP 7
8105: PUSH
8106: LD_EXP 10
8110: AND
8111: IFFALSE 8204
8113: GO 8115
8115: DISABLE
8116: LD_INT 0
8118: PPUSH
// begin enable ;
8119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8120: LD_ADDR_VAR 0 1
8124: PUSH
8125: LD_INT 22
8127: PUSH
8128: LD_OWVAR 2
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: LD_INT 25
8142: PUSH
8143: LD_INT 5
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: LD_INT 25
8152: PUSH
8153: LD_INT 9
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 25
8162: PUSH
8163: LD_INT 8
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PPUSH
8180: CALL_OW 69
8184: PUSH
8185: FOR_IN
8186: IFFALSE 8202
// begin SetClass ( i , 1 ) ;
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 1
8195: PPUSH
8196: CALL_OW 336
// end ;
8200: GO 8185
8202: POP
8203: POP
// end ;
8204: PPOPN 1
8206: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8207: LD_EXP 7
8211: PUSH
8212: LD_EXP 11
8216: AND
8217: PUSH
8218: LD_OWVAR 65
8222: PUSH
8223: LD_INT 7
8225: LESS
8226: AND
8227: IFFALSE 8241
8229: GO 8231
8231: DISABLE
// begin enable ;
8232: ENABLE
// game_speed := 7 ;
8233: LD_ADDR_OWVAR 65
8237: PUSH
8238: LD_INT 7
8240: ST_TO_ADDR
// end ;
8241: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8242: LD_EXP 7
8246: PUSH
8247: LD_EXP 14
8251: AND
8252: IFFALSE 8454
8254: GO 8256
8256: DISABLE
8257: LD_INT 0
8259: PPUSH
8260: PPUSH
8261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8262: LD_ADDR_VAR 0 3
8266: PUSH
8267: LD_INT 81
8269: PUSH
8270: LD_OWVAR 2
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 21
8281: PUSH
8282: LD_INT 1
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PPUSH
8293: CALL_OW 69
8297: ST_TO_ADDR
// if not tmp then
8298: LD_VAR 0 3
8302: NOT
8303: IFFALSE 8307
// exit ;
8305: GO 8454
// if tmp > 5 then
8307: LD_VAR 0 3
8311: PUSH
8312: LD_INT 5
8314: GREATER
8315: IFFALSE 8327
// k := 5 else
8317: LD_ADDR_VAR 0 2
8321: PUSH
8322: LD_INT 5
8324: ST_TO_ADDR
8325: GO 8337
// k := tmp ;
8327: LD_ADDR_VAR 0 2
8331: PUSH
8332: LD_VAR 0 3
8336: ST_TO_ADDR
// for i := 1 to k do
8337: LD_ADDR_VAR 0 1
8341: PUSH
8342: DOUBLE
8343: LD_INT 1
8345: DEC
8346: ST_TO_ADDR
8347: LD_VAR 0 2
8351: PUSH
8352: FOR_TO
8353: IFFALSE 8452
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8355: LD_VAR 0 3
8359: PUSH
8360: LD_VAR 0 1
8364: ARRAY
8365: PPUSH
8366: LD_VAR 0 1
8370: PUSH
8371: LD_INT 4
8373: MOD
8374: PUSH
8375: LD_INT 1
8377: PLUS
8378: PPUSH
8379: CALL_OW 259
8383: PUSH
8384: LD_INT 10
8386: LESS
8387: IFFALSE 8450
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8389: LD_VAR 0 3
8393: PUSH
8394: LD_VAR 0 1
8398: ARRAY
8399: PPUSH
8400: LD_VAR 0 1
8404: PUSH
8405: LD_INT 4
8407: MOD
8408: PUSH
8409: LD_INT 1
8411: PLUS
8412: PPUSH
8413: LD_VAR 0 3
8417: PUSH
8418: LD_VAR 0 1
8422: ARRAY
8423: PPUSH
8424: LD_VAR 0 1
8428: PUSH
8429: LD_INT 4
8431: MOD
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: PPUSH
8437: CALL_OW 259
8441: PUSH
8442: LD_INT 1
8444: PLUS
8445: PPUSH
8446: CALL_OW 237
8450: GO 8352
8452: POP
8453: POP
// end ;
8454: PPOPN 3
8456: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8457: LD_EXP 7
8461: PUSH
8462: LD_EXP 15
8466: AND
8467: IFFALSE 8487
8469: GO 8471
8471: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8472: LD_INT 4
8474: PPUSH
8475: LD_OWVAR 2
8479: PPUSH
8480: LD_INT 0
8482: PPUSH
8483: CALL_OW 324
8487: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8488: LD_EXP 7
8492: PUSH
8493: LD_EXP 44
8497: AND
8498: IFFALSE 8518
8500: GO 8502
8502: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8503: LD_INT 19
8505: PPUSH
8506: LD_OWVAR 2
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 324
8518: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8519: LD_EXP 7
8523: PUSH
8524: LD_EXP 16
8528: AND
8529: IFFALSE 8631
8531: GO 8533
8533: DISABLE
8534: LD_INT 0
8536: PPUSH
8537: PPUSH
// begin enable ;
8538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8539: LD_ADDR_VAR 0 2
8543: PUSH
8544: LD_INT 22
8546: PUSH
8547: LD_OWVAR 2
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: LD_INT 34
8561: PUSH
8562: LD_INT 11
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 34
8571: PUSH
8572: LD_INT 30
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: LIST
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PPUSH
8588: CALL_OW 69
8592: ST_TO_ADDR
// if not tmp then
8593: LD_VAR 0 2
8597: NOT
8598: IFFALSE 8602
// exit ;
8600: GO 8631
// for i in tmp do
8602: LD_ADDR_VAR 0 1
8606: PUSH
8607: LD_VAR 0 2
8611: PUSH
8612: FOR_IN
8613: IFFALSE 8629
// begin SetLives ( i , 0 ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: LD_INT 0
8622: PPUSH
8623: CALL_OW 234
// end ;
8627: GO 8612
8629: POP
8630: POP
// end ;
8631: PPOPN 2
8633: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8634: LD_EXP 7
8638: PUSH
8639: LD_EXP 17
8643: AND
8644: IFFALSE 8664
8646: GO 8648
8648: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8649: LD_INT 32
8651: PPUSH
8652: LD_OWVAR 2
8656: PPUSH
8657: LD_INT 0
8659: PPUSH
8660: CALL_OW 324
8664: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8665: LD_EXP 7
8669: PUSH
8670: LD_EXP 18
8674: AND
8675: IFFALSE 8856
8677: GO 8679
8679: DISABLE
8680: LD_INT 0
8682: PPUSH
8683: PPUSH
8684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8685: LD_ADDR_VAR 0 2
8689: PUSH
8690: LD_INT 22
8692: PUSH
8693: LD_OWVAR 2
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 33
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PPUSH
8716: CALL_OW 69
8720: ST_TO_ADDR
// if not tmp then
8721: LD_VAR 0 2
8725: NOT
8726: IFFALSE 8730
// exit ;
8728: GO 8856
// side := 0 ;
8730: LD_ADDR_VAR 0 3
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// for i := 1 to 8 do
8738: LD_ADDR_VAR 0 1
8742: PUSH
8743: DOUBLE
8744: LD_INT 1
8746: DEC
8747: ST_TO_ADDR
8748: LD_INT 8
8750: PUSH
8751: FOR_TO
8752: IFFALSE 8800
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8754: LD_OWVAR 2
8758: PUSH
8759: LD_VAR 0 1
8763: NONEQUAL
8764: PUSH
8765: LD_OWVAR 2
8769: PPUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: CALL_OW 81
8779: PUSH
8780: LD_INT 2
8782: EQUAL
8783: AND
8784: IFFALSE 8798
// begin side := i ;
8786: LD_ADDR_VAR 0 3
8790: PUSH
8791: LD_VAR 0 1
8795: ST_TO_ADDR
// break ;
8796: GO 8800
// end ;
8798: GO 8751
8800: POP
8801: POP
// if not side then
8802: LD_VAR 0 3
8806: NOT
8807: IFFALSE 8811
// exit ;
8809: GO 8856
// for i := 1 to tmp do
8811: LD_ADDR_VAR 0 1
8815: PUSH
8816: DOUBLE
8817: LD_INT 1
8819: DEC
8820: ST_TO_ADDR
8821: LD_VAR 0 2
8825: PUSH
8826: FOR_TO
8827: IFFALSE 8854
// if Prob ( 60 ) then
8829: LD_INT 60
8831: PPUSH
8832: CALL_OW 13
8836: IFFALSE 8852
// SetSide ( i , side ) ;
8838: LD_VAR 0 1
8842: PPUSH
8843: LD_VAR 0 3
8847: PPUSH
8848: CALL_OW 235
8852: GO 8826
8854: POP
8855: POP
// end ;
8856: PPOPN 3
8858: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8859: LD_EXP 7
8863: PUSH
8864: LD_EXP 20
8868: AND
8869: IFFALSE 8988
8871: GO 8873
8873: DISABLE
8874: LD_INT 0
8876: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8877: LD_ADDR_VAR 0 1
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_OWVAR 2
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 21
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 3
8906: PUSH
8907: LD_INT 23
8909: PUSH
8910: LD_INT 0
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: PUSH
8931: FOR_IN
8932: IFFALSE 8986
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8934: LD_VAR 0 1
8938: PPUSH
8939: CALL_OW 257
8943: PUSH
8944: LD_INT 1
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: LD_INT 3
8952: PUSH
8953: LD_INT 4
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: IN
8962: IFFALSE 8984
// SetClass ( un , rand ( 1 , 4 ) ) ;
8964: LD_VAR 0 1
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: LD_INT 4
8974: PPUSH
8975: CALL_OW 12
8979: PPUSH
8980: CALL_OW 336
8984: GO 8931
8986: POP
8987: POP
// end ;
8988: PPOPN 1
8990: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8991: LD_EXP 7
8995: PUSH
8996: LD_EXP 19
9000: AND
9001: IFFALSE 9080
9003: GO 9005
9005: DISABLE
9006: LD_INT 0
9008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9009: LD_ADDR_VAR 0 1
9013: PUSH
9014: LD_INT 22
9016: PUSH
9017: LD_OWVAR 2
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 21
9028: PUSH
9029: LD_INT 3
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PPUSH
9040: CALL_OW 69
9044: ST_TO_ADDR
// if not tmp then
9045: LD_VAR 0 1
9049: NOT
9050: IFFALSE 9054
// exit ;
9052: GO 9080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9054: LD_VAR 0 1
9058: PUSH
9059: LD_INT 1
9061: PPUSH
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL_OW 12
9071: ARRAY
9072: PPUSH
9073: LD_INT 100
9075: PPUSH
9076: CALL_OW 234
// end ;
9080: PPOPN 1
9082: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9083: LD_EXP 7
9087: PUSH
9088: LD_EXP 21
9092: AND
9093: IFFALSE 9191
9095: GO 9097
9097: DISABLE
9098: LD_INT 0
9100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9101: LD_ADDR_VAR 0 1
9105: PUSH
9106: LD_INT 22
9108: PUSH
9109: LD_OWVAR 2
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PUSH
9118: LD_INT 21
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PPUSH
9132: CALL_OW 69
9136: ST_TO_ADDR
// if not tmp then
9137: LD_VAR 0 1
9141: NOT
9142: IFFALSE 9146
// exit ;
9144: GO 9191
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9146: LD_VAR 0 1
9150: PUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_VAR 0 1
9158: PPUSH
9159: CALL_OW 12
9163: ARRAY
9164: PPUSH
9165: LD_INT 1
9167: PPUSH
9168: LD_INT 4
9170: PPUSH
9171: CALL_OW 12
9175: PPUSH
9176: LD_INT 3000
9178: PPUSH
9179: LD_INT 9000
9181: PPUSH
9182: CALL_OW 12
9186: PPUSH
9187: CALL_OW 492
// end ;
9191: PPOPN 1
9193: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9194: LD_EXP 7
9198: PUSH
9199: LD_EXP 22
9203: AND
9204: IFFALSE 9224
9206: GO 9208
9208: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9209: LD_INT 1
9211: PPUSH
9212: LD_OWVAR 2
9216: PPUSH
9217: LD_INT 0
9219: PPUSH
9220: CALL_OW 324
9224: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9225: LD_EXP 7
9229: PUSH
9230: LD_EXP 23
9234: AND
9235: IFFALSE 9318
9237: GO 9239
9239: DISABLE
9240: LD_INT 0
9242: PPUSH
9243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9244: LD_ADDR_VAR 0 2
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_OWVAR 2
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: LD_INT 21
9263: PUSH
9264: LD_INT 3
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PPUSH
9275: CALL_OW 69
9279: ST_TO_ADDR
// if not tmp then
9280: LD_VAR 0 2
9284: NOT
9285: IFFALSE 9289
// exit ;
9287: GO 9318
// for i in tmp do
9289: LD_ADDR_VAR 0 1
9293: PUSH
9294: LD_VAR 0 2
9298: PUSH
9299: FOR_IN
9300: IFFALSE 9316
// SetBLevel ( i , 10 ) ;
9302: LD_VAR 0 1
9306: PPUSH
9307: LD_INT 10
9309: PPUSH
9310: CALL_OW 241
9314: GO 9299
9316: POP
9317: POP
// end ;
9318: PPOPN 2
9320: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9321: LD_EXP 7
9325: PUSH
9326: LD_EXP 24
9330: AND
9331: IFFALSE 9442
9333: GO 9335
9335: DISABLE
9336: LD_INT 0
9338: PPUSH
9339: PPUSH
9340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9341: LD_ADDR_VAR 0 3
9345: PUSH
9346: LD_INT 22
9348: PUSH
9349: LD_OWVAR 2
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: LD_INT 25
9360: PUSH
9361: LD_INT 1
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PPUSH
9372: CALL_OW 69
9376: ST_TO_ADDR
// if not tmp then
9377: LD_VAR 0 3
9381: NOT
9382: IFFALSE 9386
// exit ;
9384: GO 9442
// un := tmp [ rand ( 1 , tmp ) ] ;
9386: LD_ADDR_VAR 0 2
9390: PUSH
9391: LD_VAR 0 3
9395: PUSH
9396: LD_INT 1
9398: PPUSH
9399: LD_VAR 0 3
9403: PPUSH
9404: CALL_OW 12
9408: ARRAY
9409: ST_TO_ADDR
// if Crawls ( un ) then
9410: LD_VAR 0 2
9414: PPUSH
9415: CALL_OW 318
9419: IFFALSE 9430
// ComWalk ( un ) ;
9421: LD_VAR 0 2
9425: PPUSH
9426: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9430: LD_VAR 0 2
9434: PPUSH
9435: LD_INT 5
9437: PPUSH
9438: CALL_OW 336
// end ;
9442: PPOPN 3
9444: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9445: LD_EXP 7
9449: PUSH
9450: LD_EXP 25
9454: AND
9455: PUSH
9456: LD_OWVAR 67
9460: PUSH
9461: LD_INT 4
9463: LESS
9464: AND
9465: IFFALSE 9484
9467: GO 9469
9469: DISABLE
// begin Difficulty := Difficulty + 1 ;
9470: LD_ADDR_OWVAR 67
9474: PUSH
9475: LD_OWVAR 67
9479: PUSH
9480: LD_INT 1
9482: PLUS
9483: ST_TO_ADDR
// end ;
9484: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9485: LD_EXP 7
9489: PUSH
9490: LD_EXP 26
9494: AND
9495: IFFALSE 9598
9497: GO 9499
9499: DISABLE
9500: LD_INT 0
9502: PPUSH
// begin for i := 1 to 5 do
9503: LD_ADDR_VAR 0 1
9507: PUSH
9508: DOUBLE
9509: LD_INT 1
9511: DEC
9512: ST_TO_ADDR
9513: LD_INT 5
9515: PUSH
9516: FOR_TO
9517: IFFALSE 9596
// begin uc_nation := nation_nature ;
9519: LD_ADDR_OWVAR 21
9523: PUSH
9524: LD_INT 0
9526: ST_TO_ADDR
// uc_side := 0 ;
9527: LD_ADDR_OWVAR 20
9531: PUSH
9532: LD_INT 0
9534: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9535: LD_ADDR_OWVAR 29
9539: PUSH
9540: LD_INT 12
9542: PUSH
9543: LD_INT 12
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: ST_TO_ADDR
// hc_agressivity := 20 ;
9550: LD_ADDR_OWVAR 35
9554: PUSH
9555: LD_INT 20
9557: ST_TO_ADDR
// hc_class := class_tiger ;
9558: LD_ADDR_OWVAR 28
9562: PUSH
9563: LD_INT 14
9565: ST_TO_ADDR
// hc_gallery :=  ;
9566: LD_ADDR_OWVAR 33
9570: PUSH
9571: LD_STRING 
9573: ST_TO_ADDR
// hc_name :=  ;
9574: LD_ADDR_OWVAR 26
9578: PUSH
9579: LD_STRING 
9581: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9582: CALL_OW 44
9586: PPUSH
9587: LD_INT 0
9589: PPUSH
9590: CALL_OW 51
// end ;
9594: GO 9516
9596: POP
9597: POP
// end ;
9598: PPOPN 1
9600: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9601: LD_EXP 7
9605: PUSH
9606: LD_EXP 27
9610: AND
9611: IFFALSE 9620
9613: GO 9615
9615: DISABLE
// StreamSibBomb ;
9616: CALL 9621 0 0
9620: END
// export function StreamSibBomb ; var i , x , y ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
// result := false ;
9627: LD_ADDR_VAR 0 1
9631: PUSH
9632: LD_INT 0
9634: ST_TO_ADDR
// for i := 1 to 16 do
9635: LD_ADDR_VAR 0 2
9639: PUSH
9640: DOUBLE
9641: LD_INT 1
9643: DEC
9644: ST_TO_ADDR
9645: LD_INT 16
9647: PUSH
9648: FOR_TO
9649: IFFALSE 9848
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9651: LD_ADDR_VAR 0 3
9655: PUSH
9656: LD_INT 10
9658: PUSH
9659: LD_INT 20
9661: PUSH
9662: LD_INT 30
9664: PUSH
9665: LD_INT 40
9667: PUSH
9668: LD_INT 50
9670: PUSH
9671: LD_INT 60
9673: PUSH
9674: LD_INT 70
9676: PUSH
9677: LD_INT 80
9679: PUSH
9680: LD_INT 90
9682: PUSH
9683: LD_INT 100
9685: PUSH
9686: LD_INT 110
9688: PUSH
9689: LD_INT 120
9691: PUSH
9692: LD_INT 130
9694: PUSH
9695: LD_INT 140
9697: PUSH
9698: LD_INT 150
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 1
9720: PPUSH
9721: LD_INT 15
9723: PPUSH
9724: CALL_OW 12
9728: ARRAY
9729: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9730: LD_ADDR_VAR 0 4
9734: PUSH
9735: LD_INT 10
9737: PUSH
9738: LD_INT 20
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 40
9746: PUSH
9747: LD_INT 50
9749: PUSH
9750: LD_INT 60
9752: PUSH
9753: LD_INT 70
9755: PUSH
9756: LD_INT 80
9758: PUSH
9759: LD_INT 90
9761: PUSH
9762: LD_INT 100
9764: PUSH
9765: LD_INT 110
9767: PUSH
9768: LD_INT 120
9770: PUSH
9771: LD_INT 130
9773: PUSH
9774: LD_INT 140
9776: PUSH
9777: LD_INT 150
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 1
9799: PPUSH
9800: LD_INT 15
9802: PPUSH
9803: CALL_OW 12
9807: ARRAY
9808: ST_TO_ADDR
// if ValidHex ( x , y ) then
9809: LD_VAR 0 3
9813: PPUSH
9814: LD_VAR 0 4
9818: PPUSH
9819: CALL_OW 488
9823: IFFALSE 9846
// begin result := [ x , y ] ;
9825: LD_ADDR_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: PUSH
9835: LD_VAR 0 4
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: ST_TO_ADDR
// break ;
9844: GO 9848
// end ; end ;
9846: GO 9648
9848: POP
9849: POP
// if result then
9850: LD_VAR 0 1
9854: IFFALSE 9914
// begin ToLua ( playSibBomb() ) ;
9856: LD_STRING playSibBomb()
9858: PPUSH
9859: CALL_OW 559
// wait ( 0 0$14 ) ;
9863: LD_INT 490
9865: PPUSH
9866: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9870: LD_VAR 0 1
9874: PUSH
9875: LD_INT 1
9877: ARRAY
9878: PPUSH
9879: LD_VAR 0 1
9883: PUSH
9884: LD_INT 2
9886: ARRAY
9887: PPUSH
9888: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9892: LD_VAR 0 1
9896: PUSH
9897: LD_INT 1
9899: ARRAY
9900: PPUSH
9901: LD_VAR 0 1
9905: PUSH
9906: LD_INT 2
9908: ARRAY
9909: PPUSH
9910: CALL_OW 429
// end ; end ;
9914: LD_VAR 0 1
9918: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9919: LD_EXP 7
9923: PUSH
9924: LD_EXP 29
9928: AND
9929: IFFALSE 9941
9931: GO 9933
9933: DISABLE
// YouLost (  ) ;
9934: LD_STRING 
9936: PPUSH
9937: CALL_OW 104
9941: END
// every 0 0$1 trigger StreamModeActive and sFog do
9942: LD_EXP 7
9946: PUSH
9947: LD_EXP 28
9951: AND
9952: IFFALSE 9966
9954: GO 9956
9956: DISABLE
// FogOff ( your_side ) ;
9957: LD_OWVAR 2
9961: PPUSH
9962: CALL_OW 344
9966: END
// every 0 0$1 trigger StreamModeActive and sSun do
9967: LD_EXP 7
9971: PUSH
9972: LD_EXP 30
9976: AND
9977: IFFALSE 10005
9979: GO 9981
9981: DISABLE
// begin solar_recharge_percent := 0 ;
9982: LD_ADDR_OWVAR 79
9986: PUSH
9987: LD_INT 0
9989: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9990: LD_INT 10500
9992: PPUSH
9993: CALL_OW 67
// solar_recharge_percent := 100 ;
9997: LD_ADDR_OWVAR 79
10001: PUSH
10002: LD_INT 100
10004: ST_TO_ADDR
// end ;
10005: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10006: LD_EXP 7
10010: PUSH
10011: LD_EXP 31
10015: AND
10016: IFFALSE 10255
10018: GO 10020
10020: DISABLE
10021: LD_INT 0
10023: PPUSH
10024: PPUSH
10025: PPUSH
// begin tmp := [ ] ;
10026: LD_ADDR_VAR 0 3
10030: PUSH
10031: EMPTY
10032: ST_TO_ADDR
// for i := 1 to 6 do
10033: LD_ADDR_VAR 0 1
10037: PUSH
10038: DOUBLE
10039: LD_INT 1
10041: DEC
10042: ST_TO_ADDR
10043: LD_INT 6
10045: PUSH
10046: FOR_TO
10047: IFFALSE 10152
// begin uc_nation := nation_nature ;
10049: LD_ADDR_OWVAR 21
10053: PUSH
10054: LD_INT 0
10056: ST_TO_ADDR
// uc_side := 0 ;
10057: LD_ADDR_OWVAR 20
10061: PUSH
10062: LD_INT 0
10064: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10065: LD_ADDR_OWVAR 29
10069: PUSH
10070: LD_INT 12
10072: PUSH
10073: LD_INT 12
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: ST_TO_ADDR
// hc_agressivity := 20 ;
10080: LD_ADDR_OWVAR 35
10084: PUSH
10085: LD_INT 20
10087: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10088: LD_ADDR_OWVAR 28
10092: PUSH
10093: LD_INT 17
10095: ST_TO_ADDR
// hc_gallery :=  ;
10096: LD_ADDR_OWVAR 33
10100: PUSH
10101: LD_STRING 
10103: ST_TO_ADDR
// hc_name :=  ;
10104: LD_ADDR_OWVAR 26
10108: PUSH
10109: LD_STRING 
10111: ST_TO_ADDR
// un := CreateHuman ;
10112: LD_ADDR_VAR 0 2
10116: PUSH
10117: CALL_OW 44
10121: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10122: LD_VAR 0 2
10126: PPUSH
10127: LD_INT 1
10129: PPUSH
10130: CALL_OW 51
// tmp := tmp ^ un ;
10134: LD_ADDR_VAR 0 3
10138: PUSH
10139: LD_VAR 0 3
10143: PUSH
10144: LD_VAR 0 2
10148: ADD
10149: ST_TO_ADDR
// end ;
10150: GO 10046
10152: POP
10153: POP
// repeat wait ( 0 0$1 ) ;
10154: LD_INT 35
10156: PPUSH
10157: CALL_OW 67
// for un in tmp do
10161: LD_ADDR_VAR 0 2
10165: PUSH
10166: LD_VAR 0 3
10170: PUSH
10171: FOR_IN
10172: IFFALSE 10246
// begin if IsDead ( un ) then
10174: LD_VAR 0 2
10178: PPUSH
10179: CALL_OW 301
10183: IFFALSE 10203
// begin tmp := tmp diff un ;
10185: LD_ADDR_VAR 0 3
10189: PUSH
10190: LD_VAR 0 3
10194: PUSH
10195: LD_VAR 0 2
10199: DIFF
10200: ST_TO_ADDR
// continue ;
10201: GO 10171
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10203: LD_VAR 0 2
10207: PPUSH
10208: LD_INT 3
10210: PUSH
10211: LD_INT 22
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 69
10229: PPUSH
10230: LD_VAR 0 2
10234: PPUSH
10235: CALL_OW 74
10239: PPUSH
10240: CALL_OW 115
// end ;
10244: GO 10171
10246: POP
10247: POP
// until not tmp ;
10248: LD_VAR 0 3
10252: NOT
10253: IFFALSE 10154
// end ;
10255: PPOPN 3
10257: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10258: LD_EXP 7
10262: PUSH
10263: LD_EXP 32
10267: AND
10268: IFFALSE 10322
10270: GO 10272
10272: DISABLE
// begin ToLua ( displayTroll(); ) ;
10273: LD_STRING displayTroll();
10275: PPUSH
10276: CALL_OW 559
// wait ( 3 3$00 ) ;
10280: LD_INT 6300
10282: PPUSH
10283: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10287: LD_STRING hideTroll();
10289: PPUSH
10290: CALL_OW 559
// wait ( 1 1$00 ) ;
10294: LD_INT 2100
10296: PPUSH
10297: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10301: LD_STRING displayTroll();
10303: PPUSH
10304: CALL_OW 559
// wait ( 1 1$00 ) ;
10308: LD_INT 2100
10310: PPUSH
10311: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10315: LD_STRING hideTroll();
10317: PPUSH
10318: CALL_OW 559
// end ;
10322: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10323: LD_EXP 7
10327: PUSH
10328: LD_EXP 33
10332: AND
10333: IFFALSE 10396
10335: GO 10337
10337: DISABLE
10338: LD_INT 0
10340: PPUSH
// begin p := 0 ;
10341: LD_ADDR_VAR 0 1
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// repeat game_speed := 1 ;
10349: LD_ADDR_OWVAR 65
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10357: LD_INT 35
10359: PPUSH
10360: CALL_OW 67
// p := p + 1 ;
10364: LD_ADDR_VAR 0 1
10368: PUSH
10369: LD_VAR 0 1
10373: PUSH
10374: LD_INT 1
10376: PLUS
10377: ST_TO_ADDR
// until p >= 60 ;
10378: LD_VAR 0 1
10382: PUSH
10383: LD_INT 60
10385: GREATEREQUAL
10386: IFFALSE 10349
// game_speed := 4 ;
10388: LD_ADDR_OWVAR 65
10392: PUSH
10393: LD_INT 4
10395: ST_TO_ADDR
// end ;
10396: PPOPN 1
10398: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10399: LD_EXP 7
10403: PUSH
10404: LD_EXP 34
10408: AND
10409: IFFALSE 10555
10411: GO 10413
10413: DISABLE
10414: LD_INT 0
10416: PPUSH
10417: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_OWVAR 2
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 2
10437: PUSH
10438: LD_INT 30
10440: PUSH
10441: LD_INT 0
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 30
10450: PUSH
10451: LD_INT 1
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 69
10471: ST_TO_ADDR
// if not depot then
10472: LD_VAR 0 1
10476: NOT
10477: IFFALSE 10481
// exit ;
10479: GO 10555
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10481: LD_ADDR_VAR 0 2
10485: PUSH
10486: LD_VAR 0 1
10490: PUSH
10491: LD_INT 1
10493: PPUSH
10494: LD_VAR 0 1
10498: PPUSH
10499: CALL_OW 12
10503: ARRAY
10504: PPUSH
10505: CALL_OW 274
10509: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10510: LD_VAR 0 2
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: LD_INT 0
10520: PPUSH
10521: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10525: LD_VAR 0 2
10529: PPUSH
10530: LD_INT 2
10532: PPUSH
10533: LD_INT 0
10535: PPUSH
10536: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10540: LD_VAR 0 2
10544: PPUSH
10545: LD_INT 3
10547: PPUSH
10548: LD_INT 0
10550: PPUSH
10551: CALL_OW 277
// end ;
10555: PPOPN 2
10557: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10558: LD_EXP 7
10562: PUSH
10563: LD_EXP 35
10567: AND
10568: IFFALSE 10665
10570: GO 10572
10572: DISABLE
10573: LD_INT 0
10575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10576: LD_ADDR_VAR 0 1
10580: PUSH
10581: LD_INT 22
10583: PUSH
10584: LD_OWVAR 2
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 21
10595: PUSH
10596: LD_INT 1
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 3
10605: PUSH
10606: LD_INT 23
10608: PUSH
10609: LD_INT 0
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 69
10629: ST_TO_ADDR
// if not tmp then
10630: LD_VAR 0 1
10634: NOT
10635: IFFALSE 10639
// exit ;
10637: GO 10665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10639: LD_VAR 0 1
10643: PUSH
10644: LD_INT 1
10646: PPUSH
10647: LD_VAR 0 1
10651: PPUSH
10652: CALL_OW 12
10656: ARRAY
10657: PPUSH
10658: LD_INT 200
10660: PPUSH
10661: CALL_OW 234
// end ;
10665: PPOPN 1
10667: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10668: LD_EXP 7
10672: PUSH
10673: LD_EXP 36
10677: AND
10678: IFFALSE 10757
10680: GO 10682
10682: DISABLE
10683: LD_INT 0
10685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10686: LD_ADDR_VAR 0 1
10690: PUSH
10691: LD_INT 22
10693: PUSH
10694: LD_OWVAR 2
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 21
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PPUSH
10717: CALL_OW 69
10721: ST_TO_ADDR
// if not tmp then
10722: LD_VAR 0 1
10726: NOT
10727: IFFALSE 10731
// exit ;
10729: GO 10757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10731: LD_VAR 0 1
10735: PUSH
10736: LD_INT 1
10738: PPUSH
10739: LD_VAR 0 1
10743: PPUSH
10744: CALL_OW 12
10748: ARRAY
10749: PPUSH
10750: LD_INT 60
10752: PPUSH
10753: CALL_OW 234
// end ;
10757: PPOPN 1
10759: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10760: LD_EXP 7
10764: PUSH
10765: LD_EXP 37
10769: AND
10770: IFFALSE 10869
10772: GO 10774
10774: DISABLE
10775: LD_INT 0
10777: PPUSH
10778: PPUSH
// begin enable ;
10779: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10780: LD_ADDR_VAR 0 1
10784: PUSH
10785: LD_INT 22
10787: PUSH
10788: LD_OWVAR 2
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 61
10799: PUSH
10800: EMPTY
10801: LIST
10802: PUSH
10803: LD_INT 33
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 69
10822: ST_TO_ADDR
// if not tmp then
10823: LD_VAR 0 1
10827: NOT
10828: IFFALSE 10832
// exit ;
10830: GO 10869
// for i in tmp do
10832: LD_ADDR_VAR 0 2
10836: PUSH
10837: LD_VAR 0 1
10841: PUSH
10842: FOR_IN
10843: IFFALSE 10867
// if IsControledBy ( i ) then
10845: LD_VAR 0 2
10849: PPUSH
10850: CALL_OW 312
10854: IFFALSE 10865
// ComUnlink ( i ) ;
10856: LD_VAR 0 2
10860: PPUSH
10861: CALL_OW 136
10865: GO 10842
10867: POP
10868: POP
// end ;
10869: PPOPN 2
10871: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10872: LD_EXP 7
10876: PUSH
10877: LD_EXP 38
10881: AND
10882: IFFALSE 11022
10884: GO 10886
10886: DISABLE
10887: LD_INT 0
10889: PPUSH
10890: PPUSH
// begin ToLua ( displayPowell(); ) ;
10891: LD_STRING displayPowell();
10893: PPUSH
10894: CALL_OW 559
// uc_side := 0 ;
10898: LD_ADDR_OWVAR 20
10902: PUSH
10903: LD_INT 0
10905: ST_TO_ADDR
// uc_nation := 2 ;
10906: LD_ADDR_OWVAR 21
10910: PUSH
10911: LD_INT 2
10913: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10914: LD_ADDR_OWVAR 37
10918: PUSH
10919: LD_INT 14
10921: ST_TO_ADDR
// vc_engine := engine_siberite ;
10922: LD_ADDR_OWVAR 39
10926: PUSH
10927: LD_INT 3
10929: ST_TO_ADDR
// vc_control := control_apeman ;
10930: LD_ADDR_OWVAR 38
10934: PUSH
10935: LD_INT 5
10937: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10938: LD_ADDR_OWVAR 40
10942: PUSH
10943: LD_INT 29
10945: ST_TO_ADDR
// un := CreateVehicle ;
10946: LD_ADDR_VAR 0 2
10950: PUSH
10951: CALL_OW 45
10955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10968: LD_INT 35
10970: PPUSH
10971: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10975: LD_VAR 0 2
10979: PPUSH
10980: LD_INT 22
10982: PUSH
10983: LD_OWVAR 2
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PPUSH
10992: CALL_OW 69
10996: PPUSH
10997: LD_VAR 0 2
11001: PPUSH
11002: CALL_OW 74
11006: PPUSH
11007: CALL_OW 115
// until IsDead ( un ) ;
11011: LD_VAR 0 2
11015: PPUSH
11016: CALL_OW 301
11020: IFFALSE 10968
// end ;
11022: PPOPN 2
11024: END
// every 0 0$1 trigger StreamModeActive and sStu do
11025: LD_EXP 7
11029: PUSH
11030: LD_EXP 46
11034: AND
11035: IFFALSE 11051
11037: GO 11039
11039: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11040: LD_STRING displayStucuk();
11042: PPUSH
11043: CALL_OW 559
// ResetFog ;
11047: CALL_OW 335
// end ;
11051: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11052: LD_EXP 7
11056: PUSH
11057: LD_EXP 39
11061: AND
11062: IFFALSE 11203
11064: GO 11066
11066: DISABLE
11067: LD_INT 0
11069: PPUSH
11070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11071: LD_ADDR_VAR 0 2
11075: PUSH
11076: LD_INT 22
11078: PUSH
11079: LD_OWVAR 2
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 21
11090: PUSH
11091: LD_INT 1
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PPUSH
11102: CALL_OW 69
11106: ST_TO_ADDR
// if not tmp then
11107: LD_VAR 0 2
11111: NOT
11112: IFFALSE 11116
// exit ;
11114: GO 11203
// un := tmp [ rand ( 1 , tmp ) ] ;
11116: LD_ADDR_VAR 0 1
11120: PUSH
11121: LD_VAR 0 2
11125: PUSH
11126: LD_INT 1
11128: PPUSH
11129: LD_VAR 0 2
11133: PPUSH
11134: CALL_OW 12
11138: ARRAY
11139: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11140: LD_VAR 0 1
11144: PPUSH
11145: LD_INT 0
11147: PPUSH
11148: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11152: LD_VAR 0 1
11156: PPUSH
11157: LD_OWVAR 3
11161: PUSH
11162: LD_VAR 0 1
11166: DIFF
11167: PPUSH
11168: LD_VAR 0 1
11172: PPUSH
11173: CALL_OW 74
11177: PPUSH
11178: CALL_OW 115
// wait ( 0 0$20 ) ;
11182: LD_INT 700
11184: PPUSH
11185: CALL_OW 67
// SetSide ( un , your_side ) ;
11189: LD_VAR 0 1
11193: PPUSH
11194: LD_OWVAR 2
11198: PPUSH
11199: CALL_OW 235
// end ;
11203: PPOPN 2
11205: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11206: LD_EXP 7
11210: PUSH
11211: LD_EXP 40
11215: AND
11216: IFFALSE 11322
11218: GO 11220
11220: DISABLE
11221: LD_INT 0
11223: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11224: LD_ADDR_VAR 0 1
11228: PUSH
11229: LD_INT 22
11231: PUSH
11232: LD_OWVAR 2
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 2
11243: PUSH
11244: LD_INT 30
11246: PUSH
11247: LD_INT 0
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 30
11256: PUSH
11257: LD_INT 1
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PPUSH
11273: CALL_OW 69
11277: ST_TO_ADDR
// if not depot then
11278: LD_VAR 0 1
11282: NOT
11283: IFFALSE 11287
// exit ;
11285: GO 11322
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11287: LD_VAR 0 1
11291: PUSH
11292: LD_INT 1
11294: ARRAY
11295: PPUSH
11296: CALL_OW 250
11300: PPUSH
11301: LD_VAR 0 1
11305: PUSH
11306: LD_INT 1
11308: ARRAY
11309: PPUSH
11310: CALL_OW 251
11314: PPUSH
11315: LD_INT 70
11317: PPUSH
11318: CALL_OW 495
// end ;
11322: PPOPN 1
11324: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11325: LD_EXP 7
11329: PUSH
11330: LD_EXP 41
11334: AND
11335: IFFALSE 11546
11337: GO 11339
11339: DISABLE
11340: LD_INT 0
11342: PPUSH
11343: PPUSH
11344: PPUSH
11345: PPUSH
11346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11347: LD_ADDR_VAR 0 5
11351: PUSH
11352: LD_INT 22
11354: PUSH
11355: LD_OWVAR 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 21
11366: PUSH
11367: LD_INT 1
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PPUSH
11378: CALL_OW 69
11382: ST_TO_ADDR
// if not tmp then
11383: LD_VAR 0 5
11387: NOT
11388: IFFALSE 11392
// exit ;
11390: GO 11546
// for i in tmp do
11392: LD_ADDR_VAR 0 1
11396: PUSH
11397: LD_VAR 0 5
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11544
// begin d := rand ( 0 , 5 ) ;
11405: LD_ADDR_VAR 0 4
11409: PUSH
11410: LD_INT 0
11412: PPUSH
11413: LD_INT 5
11415: PPUSH
11416: CALL_OW 12
11420: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11421: LD_ADDR_VAR 0 2
11425: PUSH
11426: LD_VAR 0 1
11430: PPUSH
11431: CALL_OW 250
11435: PPUSH
11436: LD_VAR 0 4
11440: PPUSH
11441: LD_INT 3
11443: PPUSH
11444: LD_INT 12
11446: PPUSH
11447: CALL_OW 12
11451: PPUSH
11452: CALL_OW 272
11456: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11457: LD_ADDR_VAR 0 3
11461: PUSH
11462: LD_VAR 0 1
11466: PPUSH
11467: CALL_OW 251
11471: PPUSH
11472: LD_VAR 0 4
11476: PPUSH
11477: LD_INT 3
11479: PPUSH
11480: LD_INT 12
11482: PPUSH
11483: CALL_OW 12
11487: PPUSH
11488: CALL_OW 273
11492: ST_TO_ADDR
// if ValidHex ( x , y ) then
11493: LD_VAR 0 2
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: CALL_OW 488
11507: IFFALSE 11542
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11509: LD_VAR 0 1
11513: PPUSH
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_VAR 0 3
11523: PPUSH
11524: LD_INT 3
11526: PPUSH
11527: LD_INT 6
11529: PPUSH
11530: CALL_OW 12
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 483
// end ;
11542: GO 11402
11544: POP
11545: POP
// end ;
11546: PPOPN 5
11548: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11549: LD_EXP 7
11553: PUSH
11554: LD_EXP 42
11558: AND
11559: IFFALSE 11653
11561: GO 11563
11563: DISABLE
11564: LD_INT 0
11566: PPUSH
11567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11568: LD_ADDR_VAR 0 2
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_OWVAR 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 32
11587: PUSH
11588: LD_INT 1
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 21
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: PPUSH
11610: CALL_OW 69
11614: ST_TO_ADDR
// if not tmp then
11615: LD_VAR 0 2
11619: NOT
11620: IFFALSE 11624
// exit ;
11622: GO 11653
// for i in tmp do
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_VAR 0 2
11633: PUSH
11634: FOR_IN
11635: IFFALSE 11651
// SetFuel ( i , 0 ) ;
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_INT 0
11644: PPUSH
11645: CALL_OW 240
11649: GO 11634
11651: POP
11652: POP
// end ;
11653: PPOPN 2
11655: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11656: LD_EXP 7
11660: PUSH
11661: LD_EXP 43
11665: AND
11666: IFFALSE 11732
11668: GO 11670
11670: DISABLE
11671: LD_INT 0
11673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_INT 22
11681: PUSH
11682: LD_OWVAR 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 30
11693: PUSH
11694: LD_INT 29
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PPUSH
11705: CALL_OW 69
11709: ST_TO_ADDR
// if not tmp then
11710: LD_VAR 0 1
11714: NOT
11715: IFFALSE 11719
// exit ;
11717: GO 11732
// DestroyUnit ( tmp [ 1 ] ) ;
11719: LD_VAR 0 1
11723: PUSH
11724: LD_INT 1
11726: ARRAY
11727: PPUSH
11728: CALL_OW 65
// end ;
11732: PPOPN 1
11734: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11735: LD_EXP 7
11739: PUSH
11740: LD_EXP 45
11744: AND
11745: IFFALSE 11874
11747: GO 11749
11749: DISABLE
11750: LD_INT 0
11752: PPUSH
// begin uc_side := 0 ;
11753: LD_ADDR_OWVAR 20
11757: PUSH
11758: LD_INT 0
11760: ST_TO_ADDR
// uc_nation := nation_arabian ;
11761: LD_ADDR_OWVAR 21
11765: PUSH
11766: LD_INT 2
11768: ST_TO_ADDR
// hc_gallery :=  ;
11769: LD_ADDR_OWVAR 33
11773: PUSH
11774: LD_STRING 
11776: ST_TO_ADDR
// hc_name :=  ;
11777: LD_ADDR_OWVAR 26
11781: PUSH
11782: LD_STRING 
11784: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11785: LD_INT 1
11787: PPUSH
11788: LD_INT 11
11790: PPUSH
11791: LD_INT 10
11793: PPUSH
11794: CALL_OW 380
// un := CreateHuman ;
11798: LD_ADDR_VAR 0 1
11802: PUSH
11803: CALL_OW 44
11807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11820: LD_INT 35
11822: PPUSH
11823: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_INT 22
11834: PUSH
11835: LD_OWVAR 2
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PPUSH
11844: CALL_OW 69
11848: PPUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 74
11858: PPUSH
11859: CALL_OW 115
// until IsDead ( un ) ;
11863: LD_VAR 0 1
11867: PPUSH
11868: CALL_OW 301
11872: IFFALSE 11820
// end ;
11874: PPOPN 1
11876: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11877: LD_EXP 7
11881: PUSH
11882: LD_EXP 47
11886: AND
11887: IFFALSE 11899
11889: GO 11891
11891: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11892: LD_STRING earthquake(getX(game), 0, 32)
11894: PPUSH
11895: CALL_OW 559
11899: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11900: LD_EXP 7
11904: PUSH
11905: LD_EXP 48
11909: AND
11910: IFFALSE 12001
11912: GO 11914
11914: DISABLE
11915: LD_INT 0
11917: PPUSH
// begin enable ;
11918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11919: LD_ADDR_VAR 0 1
11923: PUSH
11924: LD_INT 22
11926: PUSH
11927: LD_OWVAR 2
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 21
11938: PUSH
11939: LD_INT 2
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 33
11948: PUSH
11949: LD_INT 3
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 69
11965: ST_TO_ADDR
// if not tmp then
11966: LD_VAR 0 1
11970: NOT
11971: IFFALSE 11975
// exit ;
11973: GO 12001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11975: LD_VAR 0 1
11979: PUSH
11980: LD_INT 1
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 12
11992: ARRAY
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: CALL_OW 234
// end ;
12001: PPOPN 1
12003: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12004: LD_EXP 7
12008: PUSH
12009: LD_EXP 49
12013: AND
12014: IFFALSE 12155
12016: GO 12018
12018: DISABLE
12019: LD_INT 0
12021: PPUSH
12022: PPUSH
12023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12024: LD_ADDR_VAR 0 3
12028: PUSH
12029: LD_INT 22
12031: PUSH
12032: LD_OWVAR 2
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 25
12043: PUSH
12044: LD_INT 1
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PPUSH
12055: CALL_OW 69
12059: ST_TO_ADDR
// if not tmp then
12060: LD_VAR 0 3
12064: NOT
12065: IFFALSE 12069
// exit ;
12067: GO 12155
// un := tmp [ rand ( 1 , tmp ) ] ;
12069: LD_ADDR_VAR 0 2
12073: PUSH
12074: LD_VAR 0 3
12078: PUSH
12079: LD_INT 1
12081: PPUSH
12082: LD_VAR 0 3
12086: PPUSH
12087: CALL_OW 12
12091: ARRAY
12092: ST_TO_ADDR
// if Crawls ( un ) then
12093: LD_VAR 0 2
12097: PPUSH
12098: CALL_OW 318
12102: IFFALSE 12113
// ComWalk ( un ) ;
12104: LD_VAR 0 2
12108: PPUSH
12109: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12113: LD_VAR 0 2
12117: PPUSH
12118: LD_INT 9
12120: PPUSH
12121: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12125: LD_INT 28
12127: PPUSH
12128: LD_OWVAR 2
12132: PPUSH
12133: LD_INT 2
12135: PPUSH
12136: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12140: LD_INT 29
12142: PPUSH
12143: LD_OWVAR 2
12147: PPUSH
12148: LD_INT 2
12150: PPUSH
12151: CALL_OW 322
// end ;
12155: PPOPN 3
12157: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12158: LD_EXP 7
12162: PUSH
12163: LD_EXP 50
12167: AND
12168: IFFALSE 12279
12170: GO 12172
12172: DISABLE
12173: LD_INT 0
12175: PPUSH
12176: PPUSH
12177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12178: LD_ADDR_VAR 0 3
12182: PUSH
12183: LD_INT 22
12185: PUSH
12186: LD_OWVAR 2
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 25
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 69
12213: ST_TO_ADDR
// if not tmp then
12214: LD_VAR 0 3
12218: NOT
12219: IFFALSE 12223
// exit ;
12221: GO 12279
// un := tmp [ rand ( 1 , tmp ) ] ;
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_VAR 0 3
12232: PUSH
12233: LD_INT 1
12235: PPUSH
12236: LD_VAR 0 3
12240: PPUSH
12241: CALL_OW 12
12245: ARRAY
12246: ST_TO_ADDR
// if Crawls ( un ) then
12247: LD_VAR 0 2
12251: PPUSH
12252: CALL_OW 318
12256: IFFALSE 12267
// ComWalk ( un ) ;
12258: LD_VAR 0 2
12262: PPUSH
12263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12267: LD_VAR 0 2
12271: PPUSH
12272: LD_INT 8
12274: PPUSH
12275: CALL_OW 336
// end ;
12279: PPOPN 3
12281: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12282: LD_EXP 7
12286: PUSH
12287: LD_EXP 51
12291: AND
12292: IFFALSE 12436
12294: GO 12296
12296: DISABLE
12297: LD_INT 0
12299: PPUSH
12300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12301: LD_ADDR_VAR 0 2
12305: PUSH
12306: LD_INT 22
12308: PUSH
12309: LD_OWVAR 2
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 21
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: LD_INT 34
12333: PUSH
12334: LD_INT 12
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 34
12343: PUSH
12344: LD_INT 51
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 34
12353: PUSH
12354: LD_INT 32
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// if not tmp then
12377: LD_VAR 0 2
12381: NOT
12382: IFFALSE 12386
// exit ;
12384: GO 12436
// for i in tmp do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12434
// if GetCargo ( i , mat_artifact ) = 0 then
12399: LD_VAR 0 1
12403: PPUSH
12404: LD_INT 4
12406: PPUSH
12407: CALL_OW 289
12411: PUSH
12412: LD_INT 0
12414: EQUAL
12415: IFFALSE 12432
// SetCargo ( i , mat_siberit , 100 ) ;
12417: LD_VAR 0 1
12421: PPUSH
12422: LD_INT 3
12424: PPUSH
12425: LD_INT 100
12427: PPUSH
12428: CALL_OW 290
12432: GO 12396
12434: POP
12435: POP
// end ;
12436: PPOPN 2
12438: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12439: LD_EXP 7
12443: PUSH
12444: LD_EXP 52
12448: AND
12449: IFFALSE 12632
12451: GO 12453
12453: DISABLE
12454: LD_INT 0
12456: PPUSH
12457: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12458: LD_ADDR_VAR 0 2
12462: PUSH
12463: LD_INT 22
12465: PUSH
12466: LD_OWVAR 2
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PPUSH
12475: CALL_OW 69
12479: ST_TO_ADDR
// if not tmp then
12480: LD_VAR 0 2
12484: NOT
12485: IFFALSE 12489
// exit ;
12487: GO 12632
// for i := 1 to 2 do
12489: LD_ADDR_VAR 0 1
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 2
12501: PUSH
12502: FOR_TO
12503: IFFALSE 12630
// begin uc_side := your_side ;
12505: LD_ADDR_OWVAR 20
12509: PUSH
12510: LD_OWVAR 2
12514: ST_TO_ADDR
// uc_nation := nation_american ;
12515: LD_ADDR_OWVAR 21
12519: PUSH
12520: LD_INT 1
12522: ST_TO_ADDR
// vc_chassis := us_morphling ;
12523: LD_ADDR_OWVAR 37
12527: PUSH
12528: LD_INT 5
12530: ST_TO_ADDR
// vc_engine := engine_siberite ;
12531: LD_ADDR_OWVAR 39
12535: PUSH
12536: LD_INT 3
12538: ST_TO_ADDR
// vc_control := control_computer ;
12539: LD_ADDR_OWVAR 38
12543: PUSH
12544: LD_INT 3
12546: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12547: LD_ADDR_OWVAR 40
12551: PUSH
12552: LD_INT 10
12554: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12555: LD_VAR 0 2
12559: PUSH
12560: LD_INT 1
12562: ARRAY
12563: PPUSH
12564: CALL_OW 310
12568: NOT
12569: IFFALSE 12616
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12571: CALL_OW 45
12575: PPUSH
12576: LD_VAR 0 2
12580: PUSH
12581: LD_INT 1
12583: ARRAY
12584: PPUSH
12585: CALL_OW 250
12589: PPUSH
12590: LD_VAR 0 2
12594: PUSH
12595: LD_INT 1
12597: ARRAY
12598: PPUSH
12599: CALL_OW 251
12603: PPUSH
12604: LD_INT 12
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 50
12614: GO 12628
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12616: CALL_OW 45
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 51
// end ;
12628: GO 12502
12630: POP
12631: POP
// end ;
12632: PPOPN 2
12634: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12635: LD_EXP 7
12639: PUSH
12640: LD_EXP 53
12644: AND
12645: IFFALSE 12867
12647: GO 12649
12649: DISABLE
12650: LD_INT 0
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12658: LD_ADDR_VAR 0 6
12662: PUSH
12663: LD_INT 22
12665: PUSH
12666: LD_OWVAR 2
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 3
12687: PUSH
12688: LD_INT 23
12690: PUSH
12691: LD_INT 0
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 69
12711: ST_TO_ADDR
// if not tmp then
12712: LD_VAR 0 6
12716: NOT
12717: IFFALSE 12721
// exit ;
12719: GO 12867
// s1 := rand ( 1 , 4 ) ;
12721: LD_ADDR_VAR 0 2
12725: PUSH
12726: LD_INT 1
12728: PPUSH
12729: LD_INT 4
12731: PPUSH
12732: CALL_OW 12
12736: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12737: LD_ADDR_VAR 0 4
12741: PUSH
12742: LD_VAR 0 6
12746: PUSH
12747: LD_INT 1
12749: ARRAY
12750: PPUSH
12751: LD_VAR 0 2
12755: PPUSH
12756: CALL_OW 259
12760: ST_TO_ADDR
// if s1 = 1 then
12761: LD_VAR 0 2
12765: PUSH
12766: LD_INT 1
12768: EQUAL
12769: IFFALSE 12789
// s2 := rand ( 2 , 4 ) else
12771: LD_ADDR_VAR 0 3
12775: PUSH
12776: LD_INT 2
12778: PPUSH
12779: LD_INT 4
12781: PPUSH
12782: CALL_OW 12
12786: ST_TO_ADDR
12787: GO 12797
// s2 := 1 ;
12789: LD_ADDR_VAR 0 3
12793: PUSH
12794: LD_INT 1
12796: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12797: LD_ADDR_VAR 0 5
12801: PUSH
12802: LD_VAR 0 6
12806: PUSH
12807: LD_INT 1
12809: ARRAY
12810: PPUSH
12811: LD_VAR 0 3
12815: PPUSH
12816: CALL_OW 259
12820: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12821: LD_VAR 0 6
12825: PUSH
12826: LD_INT 1
12828: ARRAY
12829: PPUSH
12830: LD_VAR 0 2
12834: PPUSH
12835: LD_VAR 0 5
12839: PPUSH
12840: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12844: LD_VAR 0 6
12848: PUSH
12849: LD_INT 1
12851: ARRAY
12852: PPUSH
12853: LD_VAR 0 3
12857: PPUSH
12858: LD_VAR 0 4
12862: PPUSH
12863: CALL_OW 237
// end ;
12867: PPOPN 6
12869: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12870: LD_EXP 7
12874: PUSH
12875: LD_EXP 54
12879: AND
12880: IFFALSE 12959
12882: GO 12884
12884: DISABLE
12885: LD_INT 0
12887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12888: LD_ADDR_VAR 0 1
12892: PUSH
12893: LD_INT 22
12895: PUSH
12896: LD_OWVAR 2
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 30
12907: PUSH
12908: LD_INT 3
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: ST_TO_ADDR
// if not tmp then
12924: LD_VAR 0 1
12928: NOT
12929: IFFALSE 12933
// exit ;
12931: GO 12959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12933: LD_VAR 0 1
12937: PUSH
12938: LD_INT 1
12940: PPUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 12
12950: ARRAY
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 234
// end ;
12959: PPOPN 1
12961: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12962: LD_EXP 7
12966: PUSH
12967: LD_EXP 55
12971: AND
12972: IFFALSE 13084
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12981: LD_ADDR_VAR 0 2
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_OWVAR 2
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 30
13003: PUSH
13004: LD_INT 27
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 30
13013: PUSH
13014: LD_INT 26
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 30
13023: PUSH
13024: LD_INT 28
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: ST_TO_ADDR
// if not tmp then
13046: LD_VAR 0 2
13050: NOT
13051: IFFALSE 13055
// exit ;
13053: GO 13084
// for i in tmp do
13055: LD_ADDR_VAR 0 1
13059: PUSH
13060: LD_VAR 0 2
13064: PUSH
13065: FOR_IN
13066: IFFALSE 13082
// SetLives ( i , 1 ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_INT 1
13075: PPUSH
13076: CALL_OW 234
13080: GO 13065
13082: POP
13083: POP
// end ;
13084: PPOPN 2
13086: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13087: LD_EXP 7
13091: PUSH
13092: LD_EXP 56
13096: AND
13097: IFFALSE 13384
13099: GO 13101
13101: DISABLE
13102: LD_INT 0
13104: PPUSH
13105: PPUSH
13106: PPUSH
// begin i := rand ( 1 , 7 ) ;
13107: LD_ADDR_VAR 0 1
13111: PUSH
13112: LD_INT 1
13114: PPUSH
13115: LD_INT 7
13117: PPUSH
13118: CALL_OW 12
13122: ST_TO_ADDR
// case i of 1 :
13123: LD_VAR 0 1
13127: PUSH
13128: LD_INT 1
13130: DOUBLE
13131: EQUAL
13132: IFTRUE 13136
13134: GO 13146
13136: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13137: LD_STRING earthquake(getX(game), 0, 32)
13139: PPUSH
13140: CALL_OW 559
13144: GO 13384
13146: LD_INT 2
13148: DOUBLE
13149: EQUAL
13150: IFTRUE 13154
13152: GO 13168
13154: POP
// begin ToLua ( displayStucuk(); ) ;
13155: LD_STRING displayStucuk();
13157: PPUSH
13158: CALL_OW 559
// ResetFog ;
13162: CALL_OW 335
// end ; 3 :
13166: GO 13384
13168: LD_INT 3
13170: DOUBLE
13171: EQUAL
13172: IFTRUE 13176
13174: GO 13280
13176: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13177: LD_ADDR_VAR 0 2
13181: PUSH
13182: LD_INT 22
13184: PUSH
13185: LD_OWVAR 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 25
13196: PUSH
13197: LD_INT 1
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PPUSH
13208: CALL_OW 69
13212: ST_TO_ADDR
// if not tmp then
13213: LD_VAR 0 2
13217: NOT
13218: IFFALSE 13222
// exit ;
13220: GO 13384
// un := tmp [ rand ( 1 , tmp ) ] ;
13222: LD_ADDR_VAR 0 3
13226: PUSH
13227: LD_VAR 0 2
13231: PUSH
13232: LD_INT 1
13234: PPUSH
13235: LD_VAR 0 2
13239: PPUSH
13240: CALL_OW 12
13244: ARRAY
13245: ST_TO_ADDR
// if Crawls ( un ) then
13246: LD_VAR 0 3
13250: PPUSH
13251: CALL_OW 318
13255: IFFALSE 13266
// ComWalk ( un ) ;
13257: LD_VAR 0 3
13261: PPUSH
13262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13266: LD_VAR 0 3
13270: PPUSH
13271: LD_INT 8
13273: PPUSH
13274: CALL_OW 336
// end ; 4 :
13278: GO 13384
13280: LD_INT 4
13282: DOUBLE
13283: EQUAL
13284: IFTRUE 13288
13286: GO 13362
13288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13289: LD_ADDR_VAR 0 2
13293: PUSH
13294: LD_INT 22
13296: PUSH
13297: LD_OWVAR 2
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 30
13308: PUSH
13309: LD_INT 29
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PPUSH
13320: CALL_OW 69
13324: ST_TO_ADDR
// if not tmp then
13325: LD_VAR 0 2
13329: NOT
13330: IFFALSE 13334
// exit ;
13332: GO 13384
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13334: LD_VAR 0 2
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: PPUSH
13343: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13347: LD_VAR 0 2
13351: PUSH
13352: LD_INT 1
13354: ARRAY
13355: PPUSH
13356: CALL_OW 65
// end ; 5 .. 7 :
13360: GO 13384
13362: LD_INT 5
13364: DOUBLE
13365: GREATEREQUAL
13366: IFFALSE 13374
13368: LD_INT 7
13370: DOUBLE
13371: LESSEQUAL
13372: IFTRUE 13376
13374: GO 13383
13376: POP
// StreamSibBomb ; end ;
13377: CALL 9621 0 0
13381: GO 13384
13383: POP
// end ;
13384: PPOPN 3
13386: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13387: LD_EXP 7
13391: PUSH
13392: LD_EXP 57
13396: AND
13397: IFFALSE 13553
13399: GO 13401
13401: DISABLE
13402: LD_INT 0
13404: PPUSH
13405: PPUSH
13406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_INT 81
13414: PUSH
13415: LD_OWVAR 2
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 2
13426: PUSH
13427: LD_INT 21
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 2
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PPUSH
13456: CALL_OW 69
13460: ST_TO_ADDR
// if not tmp then
13461: LD_VAR 0 2
13465: NOT
13466: IFFALSE 13470
// exit ;
13468: GO 13553
// p := 0 ;
13470: LD_ADDR_VAR 0 3
13474: PUSH
13475: LD_INT 0
13477: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13478: LD_INT 35
13480: PPUSH
13481: CALL_OW 67
// p := p + 1 ;
13485: LD_ADDR_VAR 0 3
13489: PUSH
13490: LD_VAR 0 3
13494: PUSH
13495: LD_INT 1
13497: PLUS
13498: ST_TO_ADDR
// for i in tmp do
13499: LD_ADDR_VAR 0 1
13503: PUSH
13504: LD_VAR 0 2
13508: PUSH
13509: FOR_IN
13510: IFFALSE 13541
// if GetLives ( i ) < 1000 then
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 256
13521: PUSH
13522: LD_INT 1000
13524: LESS
13525: IFFALSE 13539
// SetLives ( i , 1000 ) ;
13527: LD_VAR 0 1
13531: PPUSH
13532: LD_INT 1000
13534: PPUSH
13535: CALL_OW 234
13539: GO 13509
13541: POP
13542: POP
// until p > 20 ;
13543: LD_VAR 0 3
13547: PUSH
13548: LD_INT 20
13550: GREATER
13551: IFFALSE 13478
// end ;
13553: PPOPN 3
13555: END
// every 0 0$1 trigger StreamModeActive and sTime do
13556: LD_EXP 7
13560: PUSH
13561: LD_EXP 58
13565: AND
13566: IFFALSE 13601
13568: GO 13570
13570: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13571: LD_INT 28
13573: PPUSH
13574: LD_OWVAR 2
13578: PPUSH
13579: LD_INT 2
13581: PPUSH
13582: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13586: LD_INT 30
13588: PPUSH
13589: LD_OWVAR 2
13593: PPUSH
13594: LD_INT 2
13596: PPUSH
13597: CALL_OW 322
// end ;
13601: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13602: LD_EXP 7
13606: PUSH
13607: LD_EXP 59
13611: AND
13612: IFFALSE 13733
13614: GO 13616
13616: DISABLE
13617: LD_INT 0
13619: PPUSH
13620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13621: LD_ADDR_VAR 0 2
13625: PUSH
13626: LD_INT 22
13628: PUSH
13629: LD_OWVAR 2
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: LD_INT 21
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 23
13653: PUSH
13654: LD_INT 0
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: PPUSH
13670: CALL_OW 69
13674: ST_TO_ADDR
// if not tmp then
13675: LD_VAR 0 2
13679: NOT
13680: IFFALSE 13684
// exit ;
13682: GO 13733
// for i in tmp do
13684: LD_ADDR_VAR 0 1
13688: PUSH
13689: LD_VAR 0 2
13693: PUSH
13694: FOR_IN
13695: IFFALSE 13731
// begin if Crawls ( i ) then
13697: LD_VAR 0 1
13701: PPUSH
13702: CALL_OW 318
13706: IFFALSE 13717
// ComWalk ( i ) ;
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 138
// SetClass ( i , 2 ) ;
13717: LD_VAR 0 1
13721: PPUSH
13722: LD_INT 2
13724: PPUSH
13725: CALL_OW 336
// end ;
13729: GO 13694
13731: POP
13732: POP
// end ;
13733: PPOPN 2
13735: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13736: LD_EXP 7
13740: PUSH
13741: LD_EXP 60
13745: AND
13746: IFFALSE 14034
13748: GO 13750
13750: DISABLE
13751: LD_INT 0
13753: PPUSH
13754: PPUSH
13755: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13756: LD_OWVAR 2
13760: PPUSH
13761: LD_INT 9
13763: PPUSH
13764: LD_INT 1
13766: PPUSH
13767: LD_INT 1
13769: PPUSH
13770: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13774: LD_INT 9
13776: PPUSH
13777: LD_OWVAR 2
13781: PPUSH
13782: CALL_OW 343
// uc_side := 9 ;
13786: LD_ADDR_OWVAR 20
13790: PUSH
13791: LD_INT 9
13793: ST_TO_ADDR
// uc_nation := 2 ;
13794: LD_ADDR_OWVAR 21
13798: PUSH
13799: LD_INT 2
13801: ST_TO_ADDR
// hc_name := Dark Warrior ;
13802: LD_ADDR_OWVAR 26
13806: PUSH
13807: LD_STRING Dark Warrior
13809: ST_TO_ADDR
// hc_gallery :=  ;
13810: LD_ADDR_OWVAR 33
13814: PUSH
13815: LD_STRING 
13817: ST_TO_ADDR
// hc_noskilllimit := true ;
13818: LD_ADDR_OWVAR 76
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13826: LD_ADDR_OWVAR 31
13830: PUSH
13831: LD_INT 30
13833: PUSH
13834: LD_INT 30
13836: PUSH
13837: LD_INT 30
13839: PUSH
13840: LD_INT 30
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: ST_TO_ADDR
// un := CreateHuman ;
13849: LD_ADDR_VAR 0 3
13853: PUSH
13854: CALL_OW 44
13858: ST_TO_ADDR
// hc_noskilllimit := false ;
13859: LD_ADDR_OWVAR 76
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13867: LD_VAR 0 3
13871: PPUSH
13872: LD_INT 1
13874: PPUSH
13875: CALL_OW 51
// ToLua ( playRanger() ) ;
13879: LD_STRING playRanger()
13881: PPUSH
13882: CALL_OW 559
// p := 0 ;
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13894: LD_INT 35
13896: PPUSH
13897: CALL_OW 67
// p := p + 1 ;
13901: LD_ADDR_VAR 0 2
13905: PUSH
13906: LD_VAR 0 2
13910: PUSH
13911: LD_INT 1
13913: PLUS
13914: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13915: LD_VAR 0 3
13919: PPUSH
13920: CALL_OW 256
13924: PUSH
13925: LD_INT 1000
13927: LESS
13928: IFFALSE 13942
// SetLives ( un , 1000 ) ;
13930: LD_VAR 0 3
13934: PPUSH
13935: LD_INT 1000
13937: PPUSH
13938: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13942: LD_VAR 0 3
13946: PPUSH
13947: LD_INT 81
13949: PUSH
13950: LD_OWVAR 2
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 91
13961: PUSH
13962: LD_VAR 0 3
13966: PUSH
13967: LD_INT 30
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 69
13983: PPUSH
13984: LD_VAR 0 3
13988: PPUSH
13989: CALL_OW 74
13993: PPUSH
13994: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13998: LD_VAR 0 2
14002: PUSH
14003: LD_INT 80
14005: GREATER
14006: PUSH
14007: LD_VAR 0 3
14011: PPUSH
14012: CALL_OW 301
14016: OR
14017: IFFALSE 13894
// if un then
14019: LD_VAR 0 3
14023: IFFALSE 14034
// RemoveUnit ( un ) ;
14025: LD_VAR 0 3
14029: PPUSH
14030: CALL_OW 64
// end ;
14034: PPOPN 3
14036: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14037: LD_EXP 61
14041: IFFALSE 14157
14043: GO 14045
14045: DISABLE
14046: LD_INT 0
14048: PPUSH
14049: PPUSH
14050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14051: LD_ADDR_VAR 0 2
14055: PUSH
14056: LD_INT 81
14058: PUSH
14059: LD_OWVAR 2
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 21
14070: PUSH
14071: LD_INT 1
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PPUSH
14082: CALL_OW 69
14086: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14087: LD_STRING playComputer()
14089: PPUSH
14090: CALL_OW 559
// if not tmp then
14094: LD_VAR 0 2
14098: NOT
14099: IFFALSE 14103
// exit ;
14101: GO 14157
// for i in tmp do
14103: LD_ADDR_VAR 0 1
14107: PUSH
14108: LD_VAR 0 2
14112: PUSH
14113: FOR_IN
14114: IFFALSE 14155
// for j := 1 to 4 do
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: DOUBLE
14122: LD_INT 1
14124: DEC
14125: ST_TO_ADDR
14126: LD_INT 4
14128: PUSH
14129: FOR_TO
14130: IFFALSE 14151
// SetSkill ( i , j , 10 ) ;
14132: LD_VAR 0 1
14136: PPUSH
14137: LD_VAR 0 3
14141: PPUSH
14142: LD_INT 10
14144: PPUSH
14145: CALL_OW 237
14149: GO 14129
14151: POP
14152: POP
14153: GO 14113
14155: POP
14156: POP
// end ;
14157: PPOPN 3
14159: END
// every 0 0$1 trigger s30 do var i , tmp ;
14160: LD_EXP 62
14164: IFFALSE 14233
14166: GO 14168
14168: DISABLE
14169: LD_INT 0
14171: PPUSH
14172: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14173: LD_ADDR_VAR 0 2
14177: PUSH
14178: LD_INT 22
14180: PUSH
14181: LD_OWVAR 2
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL_OW 69
14194: ST_TO_ADDR
// if not tmp then
14195: LD_VAR 0 2
14199: NOT
14200: IFFALSE 14204
// exit ;
14202: GO 14233
// for i in tmp do
14204: LD_ADDR_VAR 0 1
14208: PUSH
14209: LD_VAR 0 2
14213: PUSH
14214: FOR_IN
14215: IFFALSE 14231
// SetLives ( i , 300 ) ;
14217: LD_VAR 0 1
14221: PPUSH
14222: LD_INT 300
14224: PPUSH
14225: CALL_OW 234
14229: GO 14214
14231: POP
14232: POP
// end ;
14233: PPOPN 2
14235: END
// every 0 0$1 trigger s60 do var i , tmp ;
14236: LD_EXP 63
14240: IFFALSE 14309
14242: GO 14244
14244: DISABLE
14245: LD_INT 0
14247: PPUSH
14248: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14249: LD_ADDR_VAR 0 2
14253: PUSH
14254: LD_INT 22
14256: PUSH
14257: LD_OWVAR 2
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: ST_TO_ADDR
// if not tmp then
14271: LD_VAR 0 2
14275: NOT
14276: IFFALSE 14280
// exit ;
14278: GO 14309
// for i in tmp do
14280: LD_ADDR_VAR 0 1
14284: PUSH
14285: LD_VAR 0 2
14289: PUSH
14290: FOR_IN
14291: IFFALSE 14307
// SetLives ( i , 600 ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 600
14300: PPUSH
14301: CALL_OW 234
14305: GO 14290
14307: POP
14308: POP
// end ;
14309: PPOPN 2
14311: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14312: LD_INT 0
14314: PPUSH
// case cmd of 301 :
14315: LD_VAR 0 1
14319: PUSH
14320: LD_INT 301
14322: DOUBLE
14323: EQUAL
14324: IFTRUE 14328
14326: GO 14360
14328: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14329: LD_VAR 0 6
14333: PPUSH
14334: LD_VAR 0 7
14338: PPUSH
14339: LD_VAR 0 8
14343: PPUSH
14344: LD_VAR 0 4
14348: PPUSH
14349: LD_VAR 0 5
14353: PPUSH
14354: CALL 15561 0 5
14358: GO 14481
14360: LD_INT 302
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14368
14366: GO 14405
14368: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14369: LD_VAR 0 6
14373: PPUSH
14374: LD_VAR 0 7
14378: PPUSH
14379: LD_VAR 0 8
14383: PPUSH
14384: LD_VAR 0 9
14388: PPUSH
14389: LD_VAR 0 4
14393: PPUSH
14394: LD_VAR 0 5
14398: PPUSH
14399: CALL 15652 0 6
14403: GO 14481
14405: LD_INT 303
14407: DOUBLE
14408: EQUAL
14409: IFTRUE 14413
14411: GO 14450
14413: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14414: LD_VAR 0 6
14418: PPUSH
14419: LD_VAR 0 7
14423: PPUSH
14424: LD_VAR 0 8
14428: PPUSH
14429: LD_VAR 0 9
14433: PPUSH
14434: LD_VAR 0 4
14438: PPUSH
14439: LD_VAR 0 5
14443: PPUSH
14444: CALL 14486 0 6
14448: GO 14481
14450: LD_INT 304
14452: DOUBLE
14453: EQUAL
14454: IFTRUE 14458
14456: GO 14480
14458: POP
// hHackTeleport ( unit , x , y ) ; end ;
14459: LD_VAR 0 2
14463: PPUSH
14464: LD_VAR 0 4
14468: PPUSH
14469: LD_VAR 0 5
14473: PPUSH
14474: CALL 16245 0 3
14478: GO 14481
14480: POP
// end ;
14481: LD_VAR 0 12
14485: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14486: LD_INT 0
14488: PPUSH
14489: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14490: LD_VAR 0 1
14494: PUSH
14495: LD_INT 1
14497: LESS
14498: PUSH
14499: LD_VAR 0 1
14503: PUSH
14504: LD_INT 3
14506: GREATER
14507: OR
14508: PUSH
14509: LD_VAR 0 5
14513: PPUSH
14514: LD_VAR 0 6
14518: PPUSH
14519: CALL_OW 428
14523: OR
14524: IFFALSE 14528
// exit ;
14526: GO 15248
// uc_side := your_side ;
14528: LD_ADDR_OWVAR 20
14532: PUSH
14533: LD_OWVAR 2
14537: ST_TO_ADDR
// uc_nation := nation ;
14538: LD_ADDR_OWVAR 21
14542: PUSH
14543: LD_VAR 0 1
14547: ST_TO_ADDR
// bc_level = 1 ;
14548: LD_ADDR_OWVAR 43
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// case btype of 1 :
14556: LD_VAR 0 2
14560: PUSH
14561: LD_INT 1
14563: DOUBLE
14564: EQUAL
14565: IFTRUE 14569
14567: GO 14580
14569: POP
// bc_type := b_depot ; 2 :
14570: LD_ADDR_OWVAR 42
14574: PUSH
14575: LD_INT 0
14577: ST_TO_ADDR
14578: GO 15192
14580: LD_INT 2
14582: DOUBLE
14583: EQUAL
14584: IFTRUE 14588
14586: GO 14599
14588: POP
// bc_type := b_warehouse ; 3 :
14589: LD_ADDR_OWVAR 42
14593: PUSH
14594: LD_INT 1
14596: ST_TO_ADDR
14597: GO 15192
14599: LD_INT 3
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14618
14607: POP
// bc_type := b_lab ; 4 .. 9 :
14608: LD_ADDR_OWVAR 42
14612: PUSH
14613: LD_INT 6
14615: ST_TO_ADDR
14616: GO 15192
14618: LD_INT 4
14620: DOUBLE
14621: GREATEREQUAL
14622: IFFALSE 14630
14624: LD_INT 9
14626: DOUBLE
14627: LESSEQUAL
14628: IFTRUE 14632
14630: GO 14684
14632: POP
// begin bc_type := b_lab_half ;
14633: LD_ADDR_OWVAR 42
14637: PUSH
14638: LD_INT 7
14640: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14641: LD_ADDR_OWVAR 44
14645: PUSH
14646: LD_INT 10
14648: PUSH
14649: LD_INT 11
14651: PUSH
14652: LD_INT 12
14654: PUSH
14655: LD_INT 15
14657: PUSH
14658: LD_INT 14
14660: PUSH
14661: LD_INT 13
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: PUSH
14672: LD_VAR 0 2
14676: PUSH
14677: LD_INT 3
14679: MINUS
14680: ARRAY
14681: ST_TO_ADDR
// end ; 10 .. 13 :
14682: GO 15192
14684: LD_INT 10
14686: DOUBLE
14687: GREATEREQUAL
14688: IFFALSE 14696
14690: LD_INT 13
14692: DOUBLE
14693: LESSEQUAL
14694: IFTRUE 14698
14696: GO 14775
14698: POP
// begin bc_type := b_lab_full ;
14699: LD_ADDR_OWVAR 42
14703: PUSH
14704: LD_INT 8
14706: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14707: LD_ADDR_OWVAR 44
14711: PUSH
14712: LD_INT 10
14714: PUSH
14715: LD_INT 12
14717: PUSH
14718: LD_INT 14
14720: PUSH
14721: LD_INT 13
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: PUSH
14730: LD_VAR 0 2
14734: PUSH
14735: LD_INT 9
14737: MINUS
14738: ARRAY
14739: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14740: LD_ADDR_OWVAR 45
14744: PUSH
14745: LD_INT 11
14747: PUSH
14748: LD_INT 15
14750: PUSH
14751: LD_INT 12
14753: PUSH
14754: LD_INT 15
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_VAR 0 2
14767: PUSH
14768: LD_INT 9
14770: MINUS
14771: ARRAY
14772: ST_TO_ADDR
// end ; 14 :
14773: GO 15192
14775: LD_INT 14
14777: DOUBLE
14778: EQUAL
14779: IFTRUE 14783
14781: GO 14794
14783: POP
// bc_type := b_workshop ; 15 :
14784: LD_ADDR_OWVAR 42
14788: PUSH
14789: LD_INT 2
14791: ST_TO_ADDR
14792: GO 15192
14794: LD_INT 15
14796: DOUBLE
14797: EQUAL
14798: IFTRUE 14802
14800: GO 14813
14802: POP
// bc_type := b_factory ; 16 :
14803: LD_ADDR_OWVAR 42
14807: PUSH
14808: LD_INT 3
14810: ST_TO_ADDR
14811: GO 15192
14813: LD_INT 16
14815: DOUBLE
14816: EQUAL
14817: IFTRUE 14821
14819: GO 14832
14821: POP
// bc_type := b_ext_gun ; 17 :
14822: LD_ADDR_OWVAR 42
14826: PUSH
14827: LD_INT 17
14829: ST_TO_ADDR
14830: GO 15192
14832: LD_INT 17
14834: DOUBLE
14835: EQUAL
14836: IFTRUE 14840
14838: GO 14868
14840: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14841: LD_ADDR_OWVAR 42
14845: PUSH
14846: LD_INT 19
14848: PUSH
14849: LD_INT 23
14851: PUSH
14852: LD_INT 19
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: PUSH
14860: LD_VAR 0 1
14864: ARRAY
14865: ST_TO_ADDR
14866: GO 15192
14868: LD_INT 18
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 14887
14876: POP
// bc_type := b_ext_radar ; 19 :
14877: LD_ADDR_OWVAR 42
14881: PUSH
14882: LD_INT 20
14884: ST_TO_ADDR
14885: GO 15192
14887: LD_INT 19
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 14906
14895: POP
// bc_type := b_ext_radio ; 20 :
14896: LD_ADDR_OWVAR 42
14900: PUSH
14901: LD_INT 22
14903: ST_TO_ADDR
14904: GO 15192
14906: LD_INT 20
14908: DOUBLE
14909: EQUAL
14910: IFTRUE 14914
14912: GO 14925
14914: POP
// bc_type := b_ext_siberium ; 21 :
14915: LD_ADDR_OWVAR 42
14919: PUSH
14920: LD_INT 21
14922: ST_TO_ADDR
14923: GO 15192
14925: LD_INT 21
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14933
14931: GO 14944
14933: POP
// bc_type := b_ext_computer ; 22 :
14934: LD_ADDR_OWVAR 42
14938: PUSH
14939: LD_INT 24
14941: ST_TO_ADDR
14942: GO 15192
14944: LD_INT 22
14946: DOUBLE
14947: EQUAL
14948: IFTRUE 14952
14950: GO 14963
14952: POP
// bc_type := b_ext_track ; 23 :
14953: LD_ADDR_OWVAR 42
14957: PUSH
14958: LD_INT 16
14960: ST_TO_ADDR
14961: GO 15192
14963: LD_INT 23
14965: DOUBLE
14966: EQUAL
14967: IFTRUE 14971
14969: GO 14982
14971: POP
// bc_type := b_ext_laser ; 24 :
14972: LD_ADDR_OWVAR 42
14976: PUSH
14977: LD_INT 25
14979: ST_TO_ADDR
14980: GO 15192
14982: LD_INT 24
14984: DOUBLE
14985: EQUAL
14986: IFTRUE 14990
14988: GO 15001
14990: POP
// bc_type := b_control_tower ; 25 :
14991: LD_ADDR_OWVAR 42
14995: PUSH
14996: LD_INT 36
14998: ST_TO_ADDR
14999: GO 15192
15001: LD_INT 25
15003: DOUBLE
15004: EQUAL
15005: IFTRUE 15009
15007: GO 15020
15009: POP
// bc_type := b_breastwork ; 26 :
15010: LD_ADDR_OWVAR 42
15014: PUSH
15015: LD_INT 31
15017: ST_TO_ADDR
15018: GO 15192
15020: LD_INT 26
15022: DOUBLE
15023: EQUAL
15024: IFTRUE 15028
15026: GO 15039
15028: POP
// bc_type := b_bunker ; 27 :
15029: LD_ADDR_OWVAR 42
15033: PUSH
15034: LD_INT 32
15036: ST_TO_ADDR
15037: GO 15192
15039: LD_INT 27
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15047
15045: GO 15058
15047: POP
// bc_type := b_turret ; 28 :
15048: LD_ADDR_OWVAR 42
15052: PUSH
15053: LD_INT 33
15055: ST_TO_ADDR
15056: GO 15192
15058: LD_INT 28
15060: DOUBLE
15061: EQUAL
15062: IFTRUE 15066
15064: GO 15077
15066: POP
// bc_type := b_armoury ; 29 :
15067: LD_ADDR_OWVAR 42
15071: PUSH
15072: LD_INT 4
15074: ST_TO_ADDR
15075: GO 15192
15077: LD_INT 29
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15085
15083: GO 15096
15085: POP
// bc_type := b_barracks ; 30 :
15086: LD_ADDR_OWVAR 42
15090: PUSH
15091: LD_INT 5
15093: ST_TO_ADDR
15094: GO 15192
15096: LD_INT 30
15098: DOUBLE
15099: EQUAL
15100: IFTRUE 15104
15102: GO 15115
15104: POP
// bc_type := b_solar_power ; 31 :
15105: LD_ADDR_OWVAR 42
15109: PUSH
15110: LD_INT 27
15112: ST_TO_ADDR
15113: GO 15192
15115: LD_INT 31
15117: DOUBLE
15118: EQUAL
15119: IFTRUE 15123
15121: GO 15134
15123: POP
// bc_type := b_oil_power ; 32 :
15124: LD_ADDR_OWVAR 42
15128: PUSH
15129: LD_INT 26
15131: ST_TO_ADDR
15132: GO 15192
15134: LD_INT 32
15136: DOUBLE
15137: EQUAL
15138: IFTRUE 15142
15140: GO 15153
15142: POP
// bc_type := b_siberite_power ; 33 :
15143: LD_ADDR_OWVAR 42
15147: PUSH
15148: LD_INT 28
15150: ST_TO_ADDR
15151: GO 15192
15153: LD_INT 33
15155: DOUBLE
15156: EQUAL
15157: IFTRUE 15161
15159: GO 15172
15161: POP
// bc_type := b_oil_mine ; 34 :
15162: LD_ADDR_OWVAR 42
15166: PUSH
15167: LD_INT 29
15169: ST_TO_ADDR
15170: GO 15192
15172: LD_INT 34
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15191
15180: POP
// bc_type := b_siberite_mine ; end ;
15181: LD_ADDR_OWVAR 42
15185: PUSH
15186: LD_INT 30
15188: ST_TO_ADDR
15189: GO 15192
15191: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15192: LD_ADDR_VAR 0 8
15196: PUSH
15197: LD_VAR 0 5
15201: PPUSH
15202: LD_VAR 0 6
15206: PPUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: CALL_OW 47
15216: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15217: LD_OWVAR 42
15221: PUSH
15222: LD_INT 32
15224: PUSH
15225: LD_INT 33
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: IN
15232: IFFALSE 15248
// PlaceWeaponTurret ( b , weapon ) ;
15234: LD_VAR 0 8
15238: PPUSH
15239: LD_VAR 0 4
15243: PPUSH
15244: CALL_OW 431
// end ;
15248: LD_VAR 0 7
15252: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15259: LD_ADDR_VAR 0 4
15263: PUSH
15264: LD_INT 22
15266: PUSH
15267: LD_OWVAR 2
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 2
15278: PUSH
15279: LD_INT 30
15281: PUSH
15282: LD_INT 0
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 30
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PPUSH
15308: CALL_OW 69
15312: ST_TO_ADDR
// if not tmp then
15313: LD_VAR 0 4
15317: NOT
15318: IFFALSE 15322
// exit ;
15320: GO 15381
// for i in tmp do
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: LD_VAR 0 4
15331: PUSH
15332: FOR_IN
15333: IFFALSE 15379
// for j = 1 to 3 do
15335: LD_ADDR_VAR 0 3
15339: PUSH
15340: DOUBLE
15341: LD_INT 1
15343: DEC
15344: ST_TO_ADDR
15345: LD_INT 3
15347: PUSH
15348: FOR_TO
15349: IFFALSE 15375
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15351: LD_VAR 0 2
15355: PPUSH
15356: CALL_OW 274
15360: PPUSH
15361: LD_VAR 0 3
15365: PPUSH
15366: LD_INT 99999
15368: PPUSH
15369: CALL_OW 277
15373: GO 15348
15375: POP
15376: POP
15377: GO 15332
15379: POP
15380: POP
// end ;
15381: LD_VAR 0 1
15385: RET
// export function hHackSetLevel10 ; var i , j ; begin
15386: LD_INT 0
15388: PPUSH
15389: PPUSH
15390: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15391: LD_ADDR_VAR 0 2
15395: PUSH
15396: LD_INT 21
15398: PUSH
15399: LD_INT 1
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PPUSH
15406: CALL_OW 69
15410: PUSH
15411: FOR_IN
15412: IFFALSE 15464
// if IsSelected ( i ) then
15414: LD_VAR 0 2
15418: PPUSH
15419: CALL_OW 306
15423: IFFALSE 15462
// begin for j := 1 to 4 do
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: DOUBLE
15431: LD_INT 1
15433: DEC
15434: ST_TO_ADDR
15435: LD_INT 4
15437: PUSH
15438: FOR_TO
15439: IFFALSE 15460
// SetSkill ( i , j , 10 ) ;
15441: LD_VAR 0 2
15445: PPUSH
15446: LD_VAR 0 3
15450: PPUSH
15451: LD_INT 10
15453: PPUSH
15454: CALL_OW 237
15458: GO 15438
15460: POP
15461: POP
// end ;
15462: GO 15411
15464: POP
15465: POP
// end ;
15466: LD_VAR 0 1
15470: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15471: LD_INT 0
15473: PPUSH
15474: PPUSH
15475: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15476: LD_ADDR_VAR 0 2
15480: PUSH
15481: LD_INT 22
15483: PUSH
15484: LD_OWVAR 2
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 21
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PPUSH
15507: CALL_OW 69
15511: PUSH
15512: FOR_IN
15513: IFFALSE 15554
// begin for j := 1 to 4 do
15515: LD_ADDR_VAR 0 3
15519: PUSH
15520: DOUBLE
15521: LD_INT 1
15523: DEC
15524: ST_TO_ADDR
15525: LD_INT 4
15527: PUSH
15528: FOR_TO
15529: IFFALSE 15550
// SetSkill ( i , j , 10 ) ;
15531: LD_VAR 0 2
15535: PPUSH
15536: LD_VAR 0 3
15540: PPUSH
15541: LD_INT 10
15543: PPUSH
15544: CALL_OW 237
15548: GO 15528
15550: POP
15551: POP
// end ;
15552: GO 15512
15554: POP
15555: POP
// end ;
15556: LD_VAR 0 1
15560: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15561: LD_INT 0
15563: PPUSH
// uc_side := your_side ;
15564: LD_ADDR_OWVAR 20
15568: PUSH
15569: LD_OWVAR 2
15573: ST_TO_ADDR
// uc_nation := nation ;
15574: LD_ADDR_OWVAR 21
15578: PUSH
15579: LD_VAR 0 1
15583: ST_TO_ADDR
// InitHc ;
15584: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15588: LD_INT 0
15590: PPUSH
15591: LD_VAR 0 2
15595: PPUSH
15596: LD_VAR 0 3
15600: PPUSH
15601: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15605: LD_VAR 0 4
15609: PPUSH
15610: LD_VAR 0 5
15614: PPUSH
15615: CALL_OW 428
15619: PUSH
15620: LD_INT 0
15622: EQUAL
15623: IFFALSE 15647
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15625: CALL_OW 44
15629: PPUSH
15630: LD_VAR 0 4
15634: PPUSH
15635: LD_VAR 0 5
15639: PPUSH
15640: LD_INT 1
15642: PPUSH
15643: CALL_OW 48
// end ;
15647: LD_VAR 0 6
15651: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15652: LD_INT 0
15654: PPUSH
15655: PPUSH
// uc_side := your_side ;
15656: LD_ADDR_OWVAR 20
15660: PUSH
15661: LD_OWVAR 2
15665: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15666: LD_VAR 0 1
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: LD_INT 3
15679: PUSH
15680: LD_INT 4
15682: PUSH
15683: LD_INT 5
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: IN
15693: IFFALSE 15705
// uc_nation := nation_american else
15695: LD_ADDR_OWVAR 21
15699: PUSH
15700: LD_INT 1
15702: ST_TO_ADDR
15703: GO 15748
// if chassis in [ 11 , 12 , 13 , 14 ] then
15705: LD_VAR 0 1
15709: PUSH
15710: LD_INT 11
15712: PUSH
15713: LD_INT 12
15715: PUSH
15716: LD_INT 13
15718: PUSH
15719: LD_INT 14
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: IN
15728: IFFALSE 15740
// uc_nation := nation_arabian else
15730: LD_ADDR_OWVAR 21
15734: PUSH
15735: LD_INT 2
15737: ST_TO_ADDR
15738: GO 15748
// uc_nation := nation_russian ;
15740: LD_ADDR_OWVAR 21
15744: PUSH
15745: LD_INT 3
15747: ST_TO_ADDR
// vc_chassis := chassis ;
15748: LD_ADDR_OWVAR 37
15752: PUSH
15753: LD_VAR 0 1
15757: ST_TO_ADDR
// vc_engine := engine ;
15758: LD_ADDR_OWVAR 39
15762: PUSH
15763: LD_VAR 0 2
15767: ST_TO_ADDR
// vc_control := control ;
15768: LD_ADDR_OWVAR 38
15772: PUSH
15773: LD_VAR 0 3
15777: ST_TO_ADDR
// vc_weapon := weapon ;
15778: LD_ADDR_OWVAR 40
15782: PUSH
15783: LD_VAR 0 4
15787: ST_TO_ADDR
// un := CreateVehicle ;
15788: LD_ADDR_VAR 0 8
15792: PUSH
15793: CALL_OW 45
15797: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15798: LD_VAR 0 8
15802: PPUSH
15803: LD_INT 0
15805: PPUSH
15806: LD_INT 5
15808: PPUSH
15809: CALL_OW 12
15813: PPUSH
15814: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15818: LD_VAR 0 8
15822: PPUSH
15823: LD_VAR 0 5
15827: PPUSH
15828: LD_VAR 0 6
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: CALL_OW 48
// end ;
15840: LD_VAR 0 7
15844: RET
// export hInvincible ; every 1 do
15845: GO 15847
15847: DISABLE
// hInvincible := [ ] ;
15848: LD_ADDR_EXP 64
15852: PUSH
15853: EMPTY
15854: ST_TO_ADDR
15855: END
// every 10 do var i ;
15856: GO 15858
15858: DISABLE
15859: LD_INT 0
15861: PPUSH
// begin enable ;
15862: ENABLE
// if not hInvincible then
15863: LD_EXP 64
15867: NOT
15868: IFFALSE 15872
// exit ;
15870: GO 15916
// for i in hInvincible do
15872: LD_ADDR_VAR 0 1
15876: PUSH
15877: LD_EXP 64
15881: PUSH
15882: FOR_IN
15883: IFFALSE 15914
// if GetLives ( i ) < 1000 then
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 256
15894: PUSH
15895: LD_INT 1000
15897: LESS
15898: IFFALSE 15912
// SetLives ( i , 1000 ) ;
15900: LD_VAR 0 1
15904: PPUSH
15905: LD_INT 1000
15907: PPUSH
15908: CALL_OW 234
15912: GO 15882
15914: POP
15915: POP
// end ;
15916: PPOPN 1
15918: END
// export function hHackInvincible ; var i ; begin
15919: LD_INT 0
15921: PPUSH
15922: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15923: LD_ADDR_VAR 0 2
15927: PUSH
15928: LD_INT 2
15930: PUSH
15931: LD_INT 21
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 21
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: PUSH
15961: FOR_IN
15962: IFFALSE 16023
// if IsSelected ( i ) then
15964: LD_VAR 0 2
15968: PPUSH
15969: CALL_OW 306
15973: IFFALSE 16021
// begin if i in hInvincible then
15975: LD_VAR 0 2
15979: PUSH
15980: LD_EXP 64
15984: IN
15985: IFFALSE 16005
// hInvincible := hInvincible diff i else
15987: LD_ADDR_EXP 64
15991: PUSH
15992: LD_EXP 64
15996: PUSH
15997: LD_VAR 0 2
16001: DIFF
16002: ST_TO_ADDR
16003: GO 16021
// hInvincible := hInvincible union i ;
16005: LD_ADDR_EXP 64
16009: PUSH
16010: LD_EXP 64
16014: PUSH
16015: LD_VAR 0 2
16019: UNION
16020: ST_TO_ADDR
// end ;
16021: GO 15961
16023: POP
16024: POP
// end ;
16025: LD_VAR 0 1
16029: RET
// export function hHackInvisible ; var i , j ; begin
16030: LD_INT 0
16032: PPUSH
16033: PPUSH
16034: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16035: LD_ADDR_VAR 0 2
16039: PUSH
16040: LD_INT 21
16042: PUSH
16043: LD_INT 1
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: PUSH
16055: FOR_IN
16056: IFFALSE 16080
// if IsSelected ( i ) then
16058: LD_VAR 0 2
16062: PPUSH
16063: CALL_OW 306
16067: IFFALSE 16078
// ComForceInvisible ( i ) ;
16069: LD_VAR 0 2
16073: PPUSH
16074: CALL_OW 496
16078: GO 16055
16080: POP
16081: POP
// end ;
16082: LD_VAR 0 1
16086: RET
// export function hHackChangeYourSide ; begin
16087: LD_INT 0
16089: PPUSH
// if your_side = 8 then
16090: LD_OWVAR 2
16094: PUSH
16095: LD_INT 8
16097: EQUAL
16098: IFFALSE 16110
// your_side := 0 else
16100: LD_ADDR_OWVAR 2
16104: PUSH
16105: LD_INT 0
16107: ST_TO_ADDR
16108: GO 16124
// your_side := your_side + 1 ;
16110: LD_ADDR_OWVAR 2
16114: PUSH
16115: LD_OWVAR 2
16119: PUSH
16120: LD_INT 1
16122: PLUS
16123: ST_TO_ADDR
// end ;
16124: LD_VAR 0 1
16128: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16129: LD_INT 0
16131: PPUSH
16132: PPUSH
16133: PPUSH
// for i in all_units do
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_OWVAR 3
16143: PUSH
16144: FOR_IN
16145: IFFALSE 16223
// if IsSelected ( i ) then
16147: LD_VAR 0 2
16151: PPUSH
16152: CALL_OW 306
16156: IFFALSE 16221
// begin j := GetSide ( i ) ;
16158: LD_ADDR_VAR 0 3
16162: PUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 255
16172: ST_TO_ADDR
// if j = 8 then
16173: LD_VAR 0 3
16177: PUSH
16178: LD_INT 8
16180: EQUAL
16181: IFFALSE 16193
// j := 0 else
16183: LD_ADDR_VAR 0 3
16187: PUSH
16188: LD_INT 0
16190: ST_TO_ADDR
16191: GO 16207
// j := j + 1 ;
16193: LD_ADDR_VAR 0 3
16197: PUSH
16198: LD_VAR 0 3
16202: PUSH
16203: LD_INT 1
16205: PLUS
16206: ST_TO_ADDR
// SetSide ( i , j ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_VAR 0 3
16216: PPUSH
16217: CALL_OW 235
// end ;
16221: GO 16144
16223: POP
16224: POP
// end ;
16225: LD_VAR 0 1
16229: RET
// export function hHackFog ; begin
16230: LD_INT 0
16232: PPUSH
// FogOff ( true ) ;
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 344
// end ;
16240: LD_VAR 0 1
16244: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16245: LD_INT 0
16247: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16248: LD_VAR 0 1
16252: PPUSH
16253: LD_VAR 0 2
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_INT 1
16268: PPUSH
16269: CALL_OW 483
// CenterOnXY ( x , y ) ;
16273: LD_VAR 0 2
16277: PPUSH
16278: LD_VAR 0 3
16282: PPUSH
16283: CALL_OW 84
// end ; end_of_file
16287: LD_VAR 0 4
16291: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
16292: LD_INT 0
16294: PPUSH
16295: PPUSH
16296: PPUSH
16297: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 264
16307: PUSH
16308: LD_EXP 80
16312: EQUAL
16313: IFFALSE 16385
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16315: LD_INT 68
16317: PPUSH
16318: LD_VAR 0 1
16322: PPUSH
16323: CALL_OW 255
16327: PPUSH
16328: CALL_OW 321
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: IFFALSE 16348
// eff := 70 else
16338: LD_ADDR_VAR 0 4
16342: PUSH
16343: LD_INT 70
16345: ST_TO_ADDR
16346: GO 16356
// eff := 30 ;
16348: LD_ADDR_VAR 0 4
16352: PUSH
16353: LD_INT 30
16355: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 250
16365: PPUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 251
16375: PPUSH
16376: LD_VAR 0 4
16380: PPUSH
16381: CALL_OW 495
// end ; end ;
16385: LD_VAR 0 2
16389: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16390: LD_INT 0
16392: PPUSH
// end ;
16393: LD_VAR 0 4
16397: RET
// export function SOS_Command ( cmd ) ; begin
16398: LD_INT 0
16400: PPUSH
// end ;
16401: LD_VAR 0 2
16405: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16406: LD_INT 0
16408: PPUSH
// end ;
16409: LD_VAR 0 6
16413: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
16414: LD_INT 0
16416: PPUSH
16417: PPUSH
// if not vehicle or not factory then
16418: LD_VAR 0 1
16422: NOT
16423: PUSH
16424: LD_VAR 0 2
16428: NOT
16429: OR
16430: IFFALSE 16434
// exit ;
16432: GO 16665
// if factoryWaypoints >= factory then
16434: LD_EXP 65
16438: PUSH
16439: LD_VAR 0 2
16443: GREATEREQUAL
16444: IFFALSE 16665
// if factoryWaypoints [ factory ] then
16446: LD_EXP 65
16450: PUSH
16451: LD_VAR 0 2
16455: ARRAY
16456: IFFALSE 16665
// begin if GetControl ( vehicle ) = control_manual then
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 263
16467: PUSH
16468: LD_INT 1
16470: EQUAL
16471: IFFALSE 16552
// begin driver := IsDrivenBy ( vehicle ) ;
16473: LD_ADDR_VAR 0 4
16477: PUSH
16478: LD_VAR 0 1
16482: PPUSH
16483: CALL_OW 311
16487: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
16488: LD_VAR 0 4
16492: PPUSH
16493: LD_EXP 65
16497: PUSH
16498: LD_VAR 0 2
16502: ARRAY
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PPUSH
16508: LD_EXP 65
16512: PUSH
16513: LD_VAR 0 2
16517: ARRAY
16518: PUSH
16519: LD_INT 2
16521: ARRAY
16522: PPUSH
16523: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16527: LD_VAR 0 4
16531: PPUSH
16532: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
16536: LD_VAR 0 4
16540: PPUSH
16541: LD_VAR 0 2
16545: PPUSH
16546: CALL_OW 180
// end else
16550: GO 16665
// if GetControl ( vehicle ) = control_remote then
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL_OW 263
16561: PUSH
16562: LD_INT 2
16564: EQUAL
16565: IFFALSE 16626
// begin wait ( 0 0$2 ) ;
16567: LD_INT 70
16569: PPUSH
16570: CALL_OW 67
// if Connect ( vehicle ) then
16574: LD_VAR 0 1
16578: PPUSH
16579: CALL 29052 0 1
16583: IFFALSE 16624
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
16585: LD_VAR 0 1
16589: PPUSH
16590: LD_EXP 65
16594: PUSH
16595: LD_VAR 0 2
16599: ARRAY
16600: PUSH
16601: LD_INT 1
16603: ARRAY
16604: PPUSH
16605: LD_EXP 65
16609: PUSH
16610: LD_VAR 0 2
16614: ARRAY
16615: PUSH
16616: LD_INT 2
16618: ARRAY
16619: PPUSH
16620: CALL_OW 171
// end else
16624: GO 16665
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
16626: LD_VAR 0 1
16630: PPUSH
16631: LD_EXP 65
16635: PUSH
16636: LD_VAR 0 2
16640: ARRAY
16641: PUSH
16642: LD_INT 1
16644: ARRAY
16645: PPUSH
16646: LD_EXP 65
16650: PUSH
16651: LD_VAR 0 2
16655: ARRAY
16656: PUSH
16657: LD_INT 2
16659: ARRAY
16660: PPUSH
16661: CALL_OW 171
// end ; end ;
16665: LD_VAR 0 3
16669: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16670: LD_INT 0
16672: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16673: LD_VAR 0 1
16677: PUSH
16678: LD_INT 250
16680: EQUAL
16681: PUSH
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 264
16691: PUSH
16692: LD_EXP 83
16696: EQUAL
16697: AND
16698: IFFALSE 16719
// MinerPlaceMine ( unit , x , y ) ;
16700: LD_VAR 0 2
16704: PPUSH
16705: LD_VAR 0 4
16709: PPUSH
16710: LD_VAR 0 5
16714: PPUSH
16715: CALL 19447 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16719: LD_VAR 0 1
16723: PUSH
16724: LD_INT 251
16726: EQUAL
16727: PUSH
16728: LD_VAR 0 2
16732: PPUSH
16733: CALL_OW 264
16737: PUSH
16738: LD_EXP 83
16742: EQUAL
16743: AND
16744: IFFALSE 16765
// MinerDetonateMine ( unit , x , y ) ;
16746: LD_VAR 0 2
16750: PPUSH
16751: LD_VAR 0 4
16755: PPUSH
16756: LD_VAR 0 5
16760: PPUSH
16761: CALL 19724 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16765: LD_VAR 0 1
16769: PUSH
16770: LD_INT 252
16772: EQUAL
16773: PUSH
16774: LD_VAR 0 2
16778: PPUSH
16779: CALL_OW 264
16783: PUSH
16784: LD_EXP 83
16788: EQUAL
16789: AND
16790: IFFALSE 16811
// MinerCreateMinefield ( unit , x , y ) ;
16792: LD_VAR 0 2
16796: PPUSH
16797: LD_VAR 0 4
16801: PPUSH
16802: LD_VAR 0 5
16806: PPUSH
16807: CALL 20141 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 253
16818: EQUAL
16819: PUSH
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL_OW 257
16829: PUSH
16830: LD_INT 5
16832: EQUAL
16833: AND
16834: IFFALSE 16855
// ComBinocular ( unit , x , y ) ;
16836: LD_VAR 0 2
16840: PPUSH
16841: LD_VAR 0 4
16845: PPUSH
16846: LD_VAR 0 5
16850: PPUSH
16851: CALL 20512 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16855: LD_VAR 0 1
16859: PUSH
16860: LD_INT 254
16862: EQUAL
16863: PUSH
16864: LD_VAR 0 2
16868: PPUSH
16869: CALL_OW 264
16873: PUSH
16874: LD_EXP 78
16878: EQUAL
16879: AND
16880: PUSH
16881: LD_VAR 0 3
16885: PPUSH
16886: CALL_OW 263
16890: PUSH
16891: LD_INT 3
16893: EQUAL
16894: AND
16895: IFFALSE 16911
// HackDestroyVehicle ( unit , selectedUnit ) ;
16897: LD_VAR 0 2
16901: PPUSH
16902: LD_VAR 0 3
16906: PPUSH
16907: CALL 18807 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16911: LD_VAR 0 1
16915: PUSH
16916: LD_INT 255
16918: EQUAL
16919: PUSH
16920: LD_VAR 0 2
16924: PPUSH
16925: CALL_OW 264
16929: PUSH
16930: LD_INT 14
16932: PUSH
16933: LD_INT 53
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: IN
16940: AND
16941: PUSH
16942: LD_VAR 0 4
16946: PPUSH
16947: LD_VAR 0 5
16951: PPUSH
16952: CALL_OW 488
16956: AND
16957: IFFALSE 16981
// CutTreeXYR ( unit , x , y , 12 ) ;
16959: LD_VAR 0 2
16963: PPUSH
16964: LD_VAR 0 4
16968: PPUSH
16969: LD_VAR 0 5
16973: PPUSH
16974: LD_INT 12
16976: PPUSH
16977: CALL 17373 0 4
// if cmd = 256 then
16981: LD_VAR 0 1
16985: PUSH
16986: LD_INT 256
16988: EQUAL
16989: IFFALSE 17010
// SetFactoryWaypoint ( unit , x , y ) ;
16991: LD_VAR 0 2
16995: PPUSH
16996: LD_VAR 0 4
17000: PPUSH
17001: LD_VAR 0 5
17005: PPUSH
17006: CALL 17015 0 3
// end ;
17010: LD_VAR 0 6
17014: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
17015: LD_INT 0
17017: PPUSH
17018: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
17019: LD_VAR 0 1
17023: NOT
17024: PUSH
17025: LD_VAR 0 2
17029: PPUSH
17030: LD_VAR 0 3
17034: PPUSH
17035: CALL_OW 488
17039: NOT
17040: OR
17041: PUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 266
17051: PUSH
17052: LD_INT 3
17054: NONEQUAL
17055: PUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 247
17065: PUSH
17066: LD_INT 1
17068: EQUAL
17069: NOT
17070: AND
17071: OR
17072: IFFALSE 17076
// exit ;
17074: GO 17225
// if GetType ( factory ) = unit_human then
17076: LD_VAR 0 1
17080: PPUSH
17081: CALL_OW 247
17085: PUSH
17086: LD_INT 1
17088: EQUAL
17089: IFFALSE 17106
// factory := IsInUnit ( factory ) ;
17091: LD_ADDR_VAR 0 1
17095: PUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 310
17105: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 266
17115: PUSH
17116: LD_INT 3
17118: NONEQUAL
17119: IFFALSE 17123
// exit ;
17121: GO 17225
// if HexInfo ( x , y ) = factory then
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: CALL_OW 428
17137: PUSH
17138: LD_VAR 0 1
17142: EQUAL
17143: IFFALSE 17170
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
17145: LD_ADDR_EXP 65
17149: PUSH
17150: LD_EXP 65
17154: PPUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: LD_INT 0
17162: PPUSH
17163: CALL_OW 1
17167: ST_TO_ADDR
17168: GO 17221
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
17170: LD_ADDR_EXP 65
17174: PUSH
17175: LD_EXP 65
17179: PPUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 255
17194: PUSH
17195: LD_VAR 0 1
17199: PUSH
17200: LD_VAR 0 2
17204: PUSH
17205: LD_VAR 0 3
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: PPUSH
17216: CALL_OW 1
17220: ST_TO_ADDR
// UpdateFactoryWaypoints ;
17221: CALL 17230 0 0
// end ;
17225: LD_VAR 0 4
17229: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
17230: LD_INT 0
17232: PPUSH
17233: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
17234: LD_STRING resetFactoryWaypoint();
17236: PPUSH
17237: CALL_OW 559
// if factoryWaypoints then
17241: LD_EXP 65
17245: IFFALSE 17368
// begin for i := 1 to factoryWaypoints do
17247: LD_ADDR_VAR 0 2
17251: PUSH
17252: DOUBLE
17253: LD_INT 1
17255: DEC
17256: ST_TO_ADDR
17257: LD_EXP 65
17261: PUSH
17262: FOR_TO
17263: IFFALSE 17366
// if factoryWaypoints [ i ] then
17265: LD_EXP 65
17269: PUSH
17270: LD_VAR 0 2
17274: ARRAY
17275: IFFALSE 17364
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
17277: LD_STRING setFactoryWaypointXY(
17279: PUSH
17280: LD_EXP 65
17284: PUSH
17285: LD_VAR 0 2
17289: ARRAY
17290: PUSH
17291: LD_INT 1
17293: ARRAY
17294: STR
17295: PUSH
17296: LD_STRING ,
17298: STR
17299: PUSH
17300: LD_EXP 65
17304: PUSH
17305: LD_VAR 0 2
17309: ARRAY
17310: PUSH
17311: LD_INT 2
17313: ARRAY
17314: STR
17315: PUSH
17316: LD_STRING ,
17318: STR
17319: PUSH
17320: LD_EXP 65
17324: PUSH
17325: LD_VAR 0 2
17329: ARRAY
17330: PUSH
17331: LD_INT 3
17333: ARRAY
17334: STR
17335: PUSH
17336: LD_STRING ,
17338: STR
17339: PUSH
17340: LD_EXP 65
17344: PUSH
17345: LD_VAR 0 2
17349: ARRAY
17350: PUSH
17351: LD_INT 4
17353: ARRAY
17354: STR
17355: PUSH
17356: LD_STRING )
17358: STR
17359: PPUSH
17360: CALL_OW 559
17364: GO 17262
17366: POP
17367: POP
// end ; end ;
17368: LD_VAR 0 1
17372: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17373: LD_INT 0
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17384: LD_VAR 0 1
17388: NOT
17389: PUSH
17390: LD_VAR 0 2
17394: PPUSH
17395: LD_VAR 0 3
17399: PPUSH
17400: CALL_OW 488
17404: NOT
17405: OR
17406: PUSH
17407: LD_VAR 0 4
17411: NOT
17412: OR
17413: IFFALSE 17417
// exit ;
17415: GO 17757
// list := [ ] ;
17417: LD_ADDR_VAR 0 13
17421: PUSH
17422: EMPTY
17423: ST_TO_ADDR
// if x - r < 0 then
17424: LD_VAR 0 2
17428: PUSH
17429: LD_VAR 0 4
17433: MINUS
17434: PUSH
17435: LD_INT 0
17437: LESS
17438: IFFALSE 17450
// min_x := 0 else
17440: LD_ADDR_VAR 0 7
17444: PUSH
17445: LD_INT 0
17447: ST_TO_ADDR
17448: GO 17466
// min_x := x - r ;
17450: LD_ADDR_VAR 0 7
17454: PUSH
17455: LD_VAR 0 2
17459: PUSH
17460: LD_VAR 0 4
17464: MINUS
17465: ST_TO_ADDR
// if y - r < 0 then
17466: LD_VAR 0 3
17470: PUSH
17471: LD_VAR 0 4
17475: MINUS
17476: PUSH
17477: LD_INT 0
17479: LESS
17480: IFFALSE 17492
// min_y := 0 else
17482: LD_ADDR_VAR 0 8
17486: PUSH
17487: LD_INT 0
17489: ST_TO_ADDR
17490: GO 17508
// min_y := y - r ;
17492: LD_ADDR_VAR 0 8
17496: PUSH
17497: LD_VAR 0 3
17501: PUSH
17502: LD_VAR 0 4
17506: MINUS
17507: ST_TO_ADDR
// max_x := x + r ;
17508: LD_ADDR_VAR 0 9
17512: PUSH
17513: LD_VAR 0 2
17517: PUSH
17518: LD_VAR 0 4
17522: PLUS
17523: ST_TO_ADDR
// max_y := y + r ;
17524: LD_ADDR_VAR 0 10
17528: PUSH
17529: LD_VAR 0 3
17533: PUSH
17534: LD_VAR 0 4
17538: PLUS
17539: ST_TO_ADDR
// for _x = min_x to max_x do
17540: LD_ADDR_VAR 0 11
17544: PUSH
17545: DOUBLE
17546: LD_VAR 0 7
17550: DEC
17551: ST_TO_ADDR
17552: LD_VAR 0 9
17556: PUSH
17557: FOR_TO
17558: IFFALSE 17675
// for _y = min_y to max_y do
17560: LD_ADDR_VAR 0 12
17564: PUSH
17565: DOUBLE
17566: LD_VAR 0 8
17570: DEC
17571: ST_TO_ADDR
17572: LD_VAR 0 10
17576: PUSH
17577: FOR_TO
17578: IFFALSE 17671
// begin if not ValidHex ( _x , _y ) then
17580: LD_VAR 0 11
17584: PPUSH
17585: LD_VAR 0 12
17589: PPUSH
17590: CALL_OW 488
17594: NOT
17595: IFFALSE 17599
// continue ;
17597: GO 17577
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17599: LD_VAR 0 11
17603: PPUSH
17604: LD_VAR 0 12
17608: PPUSH
17609: CALL_OW 351
17613: PUSH
17614: LD_VAR 0 11
17618: PPUSH
17619: LD_VAR 0 12
17623: PPUSH
17624: CALL_OW 554
17628: AND
17629: IFFALSE 17669
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17631: LD_ADDR_VAR 0 13
17635: PUSH
17636: LD_VAR 0 13
17640: PPUSH
17641: LD_VAR 0 13
17645: PUSH
17646: LD_INT 1
17648: PLUS
17649: PPUSH
17650: LD_VAR 0 11
17654: PUSH
17655: LD_VAR 0 12
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PPUSH
17664: CALL_OW 2
17668: ST_TO_ADDR
// end ;
17669: GO 17577
17671: POP
17672: POP
17673: GO 17557
17675: POP
17676: POP
// if not list then
17677: LD_VAR 0 13
17681: NOT
17682: IFFALSE 17686
// exit ;
17684: GO 17757
// for i in list do
17686: LD_ADDR_VAR 0 6
17690: PUSH
17691: LD_VAR 0 13
17695: PUSH
17696: FOR_IN
17697: IFFALSE 17755
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17699: LD_VAR 0 1
17703: PPUSH
17704: LD_STRING M
17706: PUSH
17707: LD_VAR 0 6
17711: PUSH
17712: LD_INT 1
17714: ARRAY
17715: PUSH
17716: LD_VAR 0 6
17720: PUSH
17721: LD_INT 2
17723: ARRAY
17724: PUSH
17725: LD_INT 0
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: LD_INT 0
17733: PUSH
17734: LD_INT 0
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: PUSH
17746: EMPTY
17747: LIST
17748: PPUSH
17749: CALL_OW 447
17753: GO 17696
17755: POP
17756: POP
// end ;
17757: LD_VAR 0 5
17761: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17762: LD_EXP 66
17766: NOT
17767: IFFALSE 17817
17769: GO 17771
17771: DISABLE
// begin initHack := true ;
17772: LD_ADDR_EXP 66
17776: PUSH
17777: LD_INT 1
17779: ST_TO_ADDR
// hackTanks := [ ] ;
17780: LD_ADDR_EXP 67
17784: PUSH
17785: EMPTY
17786: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17787: LD_ADDR_EXP 68
17791: PUSH
17792: EMPTY
17793: ST_TO_ADDR
// hackLimit := 3 ;
17794: LD_ADDR_EXP 69
17798: PUSH
17799: LD_INT 3
17801: ST_TO_ADDR
// hackDist := 12 ;
17802: LD_ADDR_EXP 70
17806: PUSH
17807: LD_INT 12
17809: ST_TO_ADDR
// hackCounter := [ ] ;
17810: LD_ADDR_EXP 71
17814: PUSH
17815: EMPTY
17816: ST_TO_ADDR
// end ;
17817: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17818: LD_EXP 66
17822: PUSH
17823: LD_INT 34
17825: PUSH
17826: LD_EXP 78
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PPUSH
17835: CALL_OW 69
17839: AND
17840: IFFALSE 18095
17842: GO 17844
17844: DISABLE
17845: LD_INT 0
17847: PPUSH
17848: PPUSH
// begin enable ;
17849: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17850: LD_ADDR_VAR 0 1
17854: PUSH
17855: LD_INT 34
17857: PUSH
17858: LD_EXP 78
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PPUSH
17867: CALL_OW 69
17871: PUSH
17872: FOR_IN
17873: IFFALSE 18093
// begin if not i in hackTanks then
17875: LD_VAR 0 1
17879: PUSH
17880: LD_EXP 67
17884: IN
17885: NOT
17886: IFFALSE 17969
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17888: LD_ADDR_EXP 67
17892: PUSH
17893: LD_EXP 67
17897: PPUSH
17898: LD_EXP 67
17902: PUSH
17903: LD_INT 1
17905: PLUS
17906: PPUSH
17907: LD_VAR 0 1
17911: PPUSH
17912: CALL_OW 1
17916: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17917: LD_ADDR_EXP 68
17921: PUSH
17922: LD_EXP 68
17926: PPUSH
17927: LD_EXP 68
17931: PUSH
17932: LD_INT 1
17934: PLUS
17935: PPUSH
17936: EMPTY
17937: PPUSH
17938: CALL_OW 1
17942: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17943: LD_ADDR_EXP 71
17947: PUSH
17948: LD_EXP 71
17952: PPUSH
17953: LD_EXP 71
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: PPUSH
17962: EMPTY
17963: PPUSH
17964: CALL_OW 1
17968: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 302
17978: NOT
17979: IFFALSE 17992
// begin HackUnlinkAll ( i ) ;
17981: LD_VAR 0 1
17985: PPUSH
17986: CALL 18098 0 1
// continue ;
17990: GO 17872
// end ; HackCheckCapturedStatus ( i ) ;
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL 18541 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18001: LD_ADDR_VAR 0 2
18005: PUSH
18006: LD_INT 81
18008: PUSH
18009: LD_VAR 0 1
18013: PPUSH
18014: CALL_OW 255
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 33
18025: PUSH
18026: LD_INT 3
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 91
18035: PUSH
18036: LD_VAR 0 1
18040: PUSH
18041: LD_EXP 70
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 50
18053: PUSH
18054: EMPTY
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: PPUSH
18063: CALL_OW 69
18067: ST_TO_ADDR
// if not tmp then
18068: LD_VAR 0 2
18072: NOT
18073: IFFALSE 18077
// continue ;
18075: GO 17872
// HackLink ( i , tmp ) ;
18077: LD_VAR 0 1
18081: PPUSH
18082: LD_VAR 0 2
18086: PPUSH
18087: CALL 18234 0 2
// end ;
18091: GO 17872
18093: POP
18094: POP
// end ;
18095: PPOPN 2
18097: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18098: LD_INT 0
18100: PPUSH
18101: PPUSH
18102: PPUSH
// if not hack in hackTanks then
18103: LD_VAR 0 1
18107: PUSH
18108: LD_EXP 67
18112: IN
18113: NOT
18114: IFFALSE 18118
// exit ;
18116: GO 18229
// index := GetElementIndex ( hackTanks , hack ) ;
18118: LD_ADDR_VAR 0 4
18122: PUSH
18123: LD_EXP 67
18127: PPUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL 25866 0 2
18137: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18138: LD_EXP 68
18142: PUSH
18143: LD_VAR 0 4
18147: ARRAY
18148: IFFALSE 18229
// begin for i in hackTanksCaptured [ index ] do
18150: LD_ADDR_VAR 0 3
18154: PUSH
18155: LD_EXP 68
18159: PUSH
18160: LD_VAR 0 4
18164: ARRAY
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18193
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18169: LD_VAR 0 3
18173: PUSH
18174: LD_INT 1
18176: ARRAY
18177: PPUSH
18178: LD_VAR 0 3
18182: PUSH
18183: LD_INT 2
18185: ARRAY
18186: PPUSH
18187: CALL_OW 235
18191: GO 18166
18193: POP
18194: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18195: LD_ADDR_EXP 68
18199: PUSH
18200: LD_EXP 68
18204: PPUSH
18205: LD_VAR 0 4
18209: PPUSH
18210: EMPTY
18211: PPUSH
18212: CALL_OW 1
18216: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18217: LD_VAR 0 1
18221: PPUSH
18222: LD_INT 0
18224: PPUSH
18225: CALL_OW 505
// end ; end ;
18229: LD_VAR 0 2
18233: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18234: LD_INT 0
18236: PPUSH
18237: PPUSH
18238: PPUSH
// if not hack in hackTanks or not vehicles then
18239: LD_VAR 0 1
18243: PUSH
18244: LD_EXP 67
18248: IN
18249: NOT
18250: PUSH
18251: LD_VAR 0 2
18255: NOT
18256: OR
18257: IFFALSE 18261
// exit ;
18259: GO 18536
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18261: LD_ADDR_VAR 0 2
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_VAR 0 2
18275: PPUSH
18276: LD_INT 1
18278: PPUSH
18279: LD_INT 1
18281: PPUSH
18282: CALL 26516 0 4
18286: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18287: LD_ADDR_VAR 0 5
18291: PUSH
18292: LD_EXP 67
18296: PPUSH
18297: LD_VAR 0 1
18301: PPUSH
18302: CALL 25866 0 2
18306: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18307: LD_EXP 68
18311: PUSH
18312: LD_VAR 0 5
18316: ARRAY
18317: PUSH
18318: LD_EXP 69
18322: LESS
18323: IFFALSE 18512
// begin for i := 1 to vehicles do
18325: LD_ADDR_VAR 0 4
18329: PUSH
18330: DOUBLE
18331: LD_INT 1
18333: DEC
18334: ST_TO_ADDR
18335: LD_VAR 0 2
18339: PUSH
18340: FOR_TO
18341: IFFALSE 18510
// begin if hackTanksCaptured [ index ] = hackLimit then
18343: LD_EXP 68
18347: PUSH
18348: LD_VAR 0 5
18352: ARRAY
18353: PUSH
18354: LD_EXP 69
18358: EQUAL
18359: IFFALSE 18363
// break ;
18361: GO 18510
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18363: LD_ADDR_EXP 71
18367: PUSH
18368: LD_EXP 71
18372: PPUSH
18373: LD_VAR 0 5
18377: PPUSH
18378: LD_EXP 71
18382: PUSH
18383: LD_VAR 0 5
18387: ARRAY
18388: PUSH
18389: LD_INT 1
18391: PLUS
18392: PPUSH
18393: CALL_OW 1
18397: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18398: LD_ADDR_EXP 68
18402: PUSH
18403: LD_EXP 68
18407: PPUSH
18408: LD_VAR 0 5
18412: PUSH
18413: LD_EXP 68
18417: PUSH
18418: LD_VAR 0 5
18422: ARRAY
18423: PUSH
18424: LD_INT 1
18426: PLUS
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PPUSH
18432: LD_VAR 0 2
18436: PUSH
18437: LD_VAR 0 4
18441: ARRAY
18442: PUSH
18443: LD_VAR 0 2
18447: PUSH
18448: LD_VAR 0 4
18452: ARRAY
18453: PPUSH
18454: CALL_OW 255
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL 26081 0 3
18467: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18468: LD_VAR 0 2
18472: PUSH
18473: LD_VAR 0 4
18477: ARRAY
18478: PPUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 255
18488: PPUSH
18489: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18493: LD_VAR 0 2
18497: PUSH
18498: LD_VAR 0 4
18502: ARRAY
18503: PPUSH
18504: CALL_OW 141
// end ;
18508: GO 18340
18510: POP
18511: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18512: LD_VAR 0 1
18516: PPUSH
18517: LD_EXP 68
18521: PUSH
18522: LD_VAR 0 5
18526: ARRAY
18527: PUSH
18528: LD_INT 0
18530: PLUS
18531: PPUSH
18532: CALL_OW 505
// end ;
18536: LD_VAR 0 3
18540: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18541: LD_INT 0
18543: PPUSH
18544: PPUSH
18545: PPUSH
18546: PPUSH
// if not hack in hackTanks then
18547: LD_VAR 0 1
18551: PUSH
18552: LD_EXP 67
18556: IN
18557: NOT
18558: IFFALSE 18562
// exit ;
18560: GO 18802
// index := GetElementIndex ( hackTanks , hack ) ;
18562: LD_ADDR_VAR 0 4
18566: PUSH
18567: LD_EXP 67
18571: PPUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL 25866 0 2
18581: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18582: LD_ADDR_VAR 0 3
18586: PUSH
18587: DOUBLE
18588: LD_EXP 68
18592: PUSH
18593: LD_VAR 0 4
18597: ARRAY
18598: INC
18599: ST_TO_ADDR
18600: LD_INT 1
18602: PUSH
18603: FOR_DOWNTO
18604: IFFALSE 18776
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18606: LD_ADDR_VAR 0 5
18610: PUSH
18611: LD_EXP 68
18615: PUSH
18616: LD_VAR 0 4
18620: ARRAY
18621: PUSH
18622: LD_VAR 0 3
18626: ARRAY
18627: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18628: LD_VAR 0 5
18632: PUSH
18633: LD_INT 1
18635: ARRAY
18636: PPUSH
18637: CALL_OW 302
18641: NOT
18642: PUSH
18643: LD_VAR 0 5
18647: PUSH
18648: LD_INT 1
18650: ARRAY
18651: PPUSH
18652: CALL_OW 255
18656: PUSH
18657: LD_VAR 0 1
18661: PPUSH
18662: CALL_OW 255
18666: NONEQUAL
18667: OR
18668: IFFALSE 18774
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18670: LD_VAR 0 5
18674: PUSH
18675: LD_INT 1
18677: ARRAY
18678: PPUSH
18679: CALL_OW 305
18683: PUSH
18684: LD_VAR 0 5
18688: PUSH
18689: LD_INT 1
18691: ARRAY
18692: PPUSH
18693: CALL_OW 255
18697: PUSH
18698: LD_VAR 0 1
18702: PPUSH
18703: CALL_OW 255
18707: EQUAL
18708: AND
18709: IFFALSE 18733
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18711: LD_VAR 0 5
18715: PUSH
18716: LD_INT 1
18718: ARRAY
18719: PPUSH
18720: LD_VAR 0 5
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18733: LD_ADDR_EXP 68
18737: PUSH
18738: LD_EXP 68
18742: PPUSH
18743: LD_VAR 0 4
18747: PPUSH
18748: LD_EXP 68
18752: PUSH
18753: LD_VAR 0 4
18757: ARRAY
18758: PPUSH
18759: LD_VAR 0 3
18763: PPUSH
18764: CALL_OW 3
18768: PPUSH
18769: CALL_OW 1
18773: ST_TO_ADDR
// end ; end ;
18774: GO 18603
18776: POP
18777: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18778: LD_VAR 0 1
18782: PPUSH
18783: LD_EXP 68
18787: PUSH
18788: LD_VAR 0 4
18792: ARRAY
18793: PUSH
18794: LD_INT 0
18796: PLUS
18797: PPUSH
18798: CALL_OW 505
// end ;
18802: LD_VAR 0 2
18806: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18807: LD_INT 0
18809: PPUSH
18810: PPUSH
18811: PPUSH
18812: PPUSH
// if not hack in hackTanks then
18813: LD_VAR 0 1
18817: PUSH
18818: LD_EXP 67
18822: IN
18823: NOT
18824: IFFALSE 18828
// exit ;
18826: GO 18913
// index := GetElementIndex ( hackTanks , hack ) ;
18828: LD_ADDR_VAR 0 5
18832: PUSH
18833: LD_EXP 67
18837: PPUSH
18838: LD_VAR 0 1
18842: PPUSH
18843: CALL 25866 0 2
18847: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18848: LD_ADDR_VAR 0 4
18852: PUSH
18853: DOUBLE
18854: LD_INT 1
18856: DEC
18857: ST_TO_ADDR
18858: LD_EXP 68
18862: PUSH
18863: LD_VAR 0 5
18867: ARRAY
18868: PUSH
18869: FOR_TO
18870: IFFALSE 18911
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18872: LD_EXP 68
18876: PUSH
18877: LD_VAR 0 5
18881: ARRAY
18882: PUSH
18883: LD_VAR 0 4
18887: ARRAY
18888: PUSH
18889: LD_INT 1
18891: ARRAY
18892: PUSH
18893: LD_VAR 0 2
18897: EQUAL
18898: IFFALSE 18909
// KillUnit ( vehicle ) ;
18900: LD_VAR 0 2
18904: PPUSH
18905: CALL_OW 66
18909: GO 18869
18911: POP
18912: POP
// end ;
18913: LD_VAR 0 3
18917: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18918: LD_EXP 72
18922: NOT
18923: IFFALSE 18958
18925: GO 18927
18927: DISABLE
// begin initMiner := true ;
18928: LD_ADDR_EXP 72
18932: PUSH
18933: LD_INT 1
18935: ST_TO_ADDR
// minersList := [ ] ;
18936: LD_ADDR_EXP 73
18940: PUSH
18941: EMPTY
18942: ST_TO_ADDR
// minerMinesList := [ ] ;
18943: LD_ADDR_EXP 74
18947: PUSH
18948: EMPTY
18949: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18950: LD_ADDR_EXP 75
18954: PUSH
18955: LD_INT 5
18957: ST_TO_ADDR
// end ;
18958: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18959: LD_EXP 72
18963: PUSH
18964: LD_INT 34
18966: PUSH
18967: LD_EXP 83
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: AND
18981: IFFALSE 19444
18983: GO 18985
18985: DISABLE
18986: LD_INT 0
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
// begin enable ;
18992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18993: LD_ADDR_VAR 0 1
18997: PUSH
18998: LD_INT 34
19000: PUSH
19001: LD_EXP 83
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PPUSH
19010: CALL_OW 69
19014: PUSH
19015: FOR_IN
19016: IFFALSE 19088
// begin if not i in minersList then
19018: LD_VAR 0 1
19022: PUSH
19023: LD_EXP 73
19027: IN
19028: NOT
19029: IFFALSE 19086
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19031: LD_ADDR_EXP 73
19035: PUSH
19036: LD_EXP 73
19040: PPUSH
19041: LD_EXP 73
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: PPUSH
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19060: LD_ADDR_EXP 74
19064: PUSH
19065: LD_EXP 74
19069: PPUSH
19070: LD_EXP 74
19074: PUSH
19075: LD_INT 1
19077: PLUS
19078: PPUSH
19079: EMPTY
19080: PPUSH
19081: CALL_OW 1
19085: ST_TO_ADDR
// end end ;
19086: GO 19015
19088: POP
19089: POP
// for i := minerMinesList downto 1 do
19090: LD_ADDR_VAR 0 1
19094: PUSH
19095: DOUBLE
19096: LD_EXP 74
19100: INC
19101: ST_TO_ADDR
19102: LD_INT 1
19104: PUSH
19105: FOR_DOWNTO
19106: IFFALSE 19442
// begin if IsLive ( minersList [ i ] ) then
19108: LD_EXP 73
19112: PUSH
19113: LD_VAR 0 1
19117: ARRAY
19118: PPUSH
19119: CALL_OW 300
19123: IFFALSE 19151
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19125: LD_EXP 73
19129: PUSH
19130: LD_VAR 0 1
19134: ARRAY
19135: PPUSH
19136: LD_EXP 74
19140: PUSH
19141: LD_VAR 0 1
19145: ARRAY
19146: PPUSH
19147: CALL_OW 505
// if not minerMinesList [ i ] then
19151: LD_EXP 74
19155: PUSH
19156: LD_VAR 0 1
19160: ARRAY
19161: NOT
19162: IFFALSE 19166
// continue ;
19164: GO 19105
// for j := minerMinesList [ i ] downto 1 do
19166: LD_ADDR_VAR 0 2
19170: PUSH
19171: DOUBLE
19172: LD_EXP 74
19176: PUSH
19177: LD_VAR 0 1
19181: ARRAY
19182: INC
19183: ST_TO_ADDR
19184: LD_INT 1
19186: PUSH
19187: FOR_DOWNTO
19188: IFFALSE 19438
// begin side := GetSide ( minersList [ i ] ) ;
19190: LD_ADDR_VAR 0 3
19194: PUSH
19195: LD_EXP 73
19199: PUSH
19200: LD_VAR 0 1
19204: ARRAY
19205: PPUSH
19206: CALL_OW 255
19210: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19211: LD_ADDR_VAR 0 4
19215: PUSH
19216: LD_EXP 74
19220: PUSH
19221: LD_VAR 0 1
19225: ARRAY
19226: PUSH
19227: LD_VAR 0 2
19231: ARRAY
19232: PUSH
19233: LD_INT 1
19235: ARRAY
19236: PPUSH
19237: LD_EXP 74
19241: PUSH
19242: LD_VAR 0 1
19246: ARRAY
19247: PUSH
19248: LD_VAR 0 2
19252: ARRAY
19253: PUSH
19254: LD_INT 2
19256: ARRAY
19257: PPUSH
19258: CALL_OW 428
19262: ST_TO_ADDR
// if not tmp then
19263: LD_VAR 0 4
19267: NOT
19268: IFFALSE 19272
// continue ;
19270: GO 19187
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19272: LD_VAR 0 4
19276: PUSH
19277: LD_INT 81
19279: PUSH
19280: LD_VAR 0 3
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: IN
19294: PUSH
19295: LD_EXP 74
19299: PUSH
19300: LD_VAR 0 1
19304: ARRAY
19305: PUSH
19306: LD_VAR 0 2
19310: ARRAY
19311: PUSH
19312: LD_INT 1
19314: ARRAY
19315: PPUSH
19316: LD_EXP 74
19320: PUSH
19321: LD_VAR 0 1
19325: ARRAY
19326: PUSH
19327: LD_VAR 0 2
19331: ARRAY
19332: PUSH
19333: LD_INT 2
19335: ARRAY
19336: PPUSH
19337: CALL_OW 458
19341: AND
19342: IFFALSE 19436
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19344: LD_EXP 74
19348: PUSH
19349: LD_VAR 0 1
19353: ARRAY
19354: PUSH
19355: LD_VAR 0 2
19359: ARRAY
19360: PUSH
19361: LD_INT 1
19363: ARRAY
19364: PPUSH
19365: LD_EXP 74
19369: PUSH
19370: LD_VAR 0 1
19374: ARRAY
19375: PUSH
19376: LD_VAR 0 2
19380: ARRAY
19381: PUSH
19382: LD_INT 2
19384: ARRAY
19385: PPUSH
19386: LD_VAR 0 3
19390: PPUSH
19391: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19395: LD_ADDR_EXP 74
19399: PUSH
19400: LD_EXP 74
19404: PPUSH
19405: LD_VAR 0 1
19409: PPUSH
19410: LD_EXP 74
19414: PUSH
19415: LD_VAR 0 1
19419: ARRAY
19420: PPUSH
19421: LD_VAR 0 2
19425: PPUSH
19426: CALL_OW 3
19430: PPUSH
19431: CALL_OW 1
19435: ST_TO_ADDR
// end ; end ;
19436: GO 19187
19438: POP
19439: POP
// end ;
19440: GO 19105
19442: POP
19443: POP
// end ;
19444: PPOPN 4
19446: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19447: LD_INT 0
19449: PPUSH
19450: PPUSH
// result := false ;
19451: LD_ADDR_VAR 0 4
19455: PUSH
19456: LD_INT 0
19458: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 264
19468: PUSH
19469: LD_EXP 83
19473: EQUAL
19474: NOT
19475: IFFALSE 19479
// exit ;
19477: GO 19719
// index := GetElementIndex ( minersList , unit ) ;
19479: LD_ADDR_VAR 0 5
19483: PUSH
19484: LD_EXP 73
19488: PPUSH
19489: LD_VAR 0 1
19493: PPUSH
19494: CALL 25866 0 2
19498: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19499: LD_EXP 74
19503: PUSH
19504: LD_VAR 0 5
19508: ARRAY
19509: PUSH
19510: LD_EXP 75
19514: GREATEREQUAL
19515: IFFALSE 19519
// exit ;
19517: GO 19719
// ComMoveXY ( unit , x , y ) ;
19519: LD_VAR 0 1
19523: PPUSH
19524: LD_VAR 0 2
19528: PPUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19538: LD_INT 35
19540: PPUSH
19541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19545: LD_VAR 0 1
19549: PPUSH
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 3
19559: PPUSH
19560: CALL 56638 0 3
19564: NOT
19565: PUSH
19566: LD_VAR 0 1
19570: PPUSH
19571: CALL_OW 314
19575: AND
19576: IFFALSE 19580
// exit ;
19578: GO 19719
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19580: LD_VAR 0 2
19584: PPUSH
19585: LD_VAR 0 3
19589: PPUSH
19590: CALL_OW 428
19594: PUSH
19595: LD_VAR 0 1
19599: EQUAL
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 314
19610: NOT
19611: AND
19612: IFFALSE 19538
// PlaySoundXY ( x , y , PlantMine ) ;
19614: LD_VAR 0 2
19618: PPUSH
19619: LD_VAR 0 3
19623: PPUSH
19624: LD_STRING PlantMine
19626: PPUSH
19627: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19631: LD_VAR 0 2
19635: PPUSH
19636: LD_VAR 0 3
19640: PPUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 255
19650: PPUSH
19651: LD_INT 0
19653: PPUSH
19654: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19658: LD_ADDR_EXP 74
19662: PUSH
19663: LD_EXP 74
19667: PPUSH
19668: LD_VAR 0 5
19672: PUSH
19673: LD_EXP 74
19677: PUSH
19678: LD_VAR 0 5
19682: ARRAY
19683: PUSH
19684: LD_INT 1
19686: PLUS
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PPUSH
19692: LD_VAR 0 2
19696: PUSH
19697: LD_VAR 0 3
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PPUSH
19706: CALL 26081 0 3
19710: ST_TO_ADDR
// result := true ;
19711: LD_ADDR_VAR 0 4
19715: PUSH
19716: LD_INT 1
19718: ST_TO_ADDR
// end ;
19719: LD_VAR 0 4
19723: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19724: LD_INT 0
19726: PPUSH
19727: PPUSH
19728: PPUSH
// if not unit in minersList then
19729: LD_VAR 0 1
19733: PUSH
19734: LD_EXP 73
19738: IN
19739: NOT
19740: IFFALSE 19744
// exit ;
19742: GO 20136
// index := GetElementIndex ( minersList , unit ) ;
19744: LD_ADDR_VAR 0 6
19748: PUSH
19749: LD_EXP 73
19753: PPUSH
19754: LD_VAR 0 1
19758: PPUSH
19759: CALL 25866 0 2
19763: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19764: LD_ADDR_VAR 0 5
19768: PUSH
19769: DOUBLE
19770: LD_EXP 74
19774: PUSH
19775: LD_VAR 0 6
19779: ARRAY
19780: INC
19781: ST_TO_ADDR
19782: LD_INT 1
19784: PUSH
19785: FOR_DOWNTO
19786: IFFALSE 19947
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19788: LD_EXP 74
19792: PUSH
19793: LD_VAR 0 6
19797: ARRAY
19798: PUSH
19799: LD_VAR 0 5
19803: ARRAY
19804: PUSH
19805: LD_INT 1
19807: ARRAY
19808: PUSH
19809: LD_VAR 0 2
19813: EQUAL
19814: PUSH
19815: LD_EXP 74
19819: PUSH
19820: LD_VAR 0 6
19824: ARRAY
19825: PUSH
19826: LD_VAR 0 5
19830: ARRAY
19831: PUSH
19832: LD_INT 2
19834: ARRAY
19835: PUSH
19836: LD_VAR 0 3
19840: EQUAL
19841: AND
19842: IFFALSE 19945
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19844: LD_EXP 74
19848: PUSH
19849: LD_VAR 0 6
19853: ARRAY
19854: PUSH
19855: LD_VAR 0 5
19859: ARRAY
19860: PUSH
19861: LD_INT 1
19863: ARRAY
19864: PPUSH
19865: LD_EXP 74
19869: PUSH
19870: LD_VAR 0 6
19874: ARRAY
19875: PUSH
19876: LD_VAR 0 5
19880: ARRAY
19881: PUSH
19882: LD_INT 2
19884: ARRAY
19885: PPUSH
19886: LD_VAR 0 1
19890: PPUSH
19891: CALL_OW 255
19895: PPUSH
19896: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19900: LD_ADDR_EXP 74
19904: PUSH
19905: LD_EXP 74
19909: PPUSH
19910: LD_VAR 0 6
19914: PPUSH
19915: LD_EXP 74
19919: PUSH
19920: LD_VAR 0 6
19924: ARRAY
19925: PPUSH
19926: LD_VAR 0 5
19930: PPUSH
19931: CALL_OW 3
19935: PPUSH
19936: CALL_OW 1
19940: ST_TO_ADDR
// exit ;
19941: POP
19942: POP
19943: GO 20136
// end ; end ;
19945: GO 19785
19947: POP
19948: POP
// for i := minerMinesList [ index ] downto 1 do
19949: LD_ADDR_VAR 0 5
19953: PUSH
19954: DOUBLE
19955: LD_EXP 74
19959: PUSH
19960: LD_VAR 0 6
19964: ARRAY
19965: INC
19966: ST_TO_ADDR
19967: LD_INT 1
19969: PUSH
19970: FOR_DOWNTO
19971: IFFALSE 20134
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19973: LD_EXP 74
19977: PUSH
19978: LD_VAR 0 6
19982: ARRAY
19983: PUSH
19984: LD_VAR 0 5
19988: ARRAY
19989: PUSH
19990: LD_INT 1
19992: ARRAY
19993: PPUSH
19994: LD_EXP 74
19998: PUSH
19999: LD_VAR 0 6
20003: ARRAY
20004: PUSH
20005: LD_VAR 0 5
20009: ARRAY
20010: PUSH
20011: LD_INT 2
20013: ARRAY
20014: PPUSH
20015: LD_VAR 0 2
20019: PPUSH
20020: LD_VAR 0 3
20024: PPUSH
20025: CALL_OW 298
20029: PUSH
20030: LD_INT 6
20032: LESS
20033: IFFALSE 20132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20035: LD_EXP 74
20039: PUSH
20040: LD_VAR 0 6
20044: ARRAY
20045: PUSH
20046: LD_VAR 0 5
20050: ARRAY
20051: PUSH
20052: LD_INT 1
20054: ARRAY
20055: PPUSH
20056: LD_EXP 74
20060: PUSH
20061: LD_VAR 0 6
20065: ARRAY
20066: PUSH
20067: LD_VAR 0 5
20071: ARRAY
20072: PUSH
20073: LD_INT 2
20075: ARRAY
20076: PPUSH
20077: LD_VAR 0 1
20081: PPUSH
20082: CALL_OW 255
20086: PPUSH
20087: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20091: LD_ADDR_EXP 74
20095: PUSH
20096: LD_EXP 74
20100: PPUSH
20101: LD_VAR 0 6
20105: PPUSH
20106: LD_EXP 74
20110: PUSH
20111: LD_VAR 0 6
20115: ARRAY
20116: PPUSH
20117: LD_VAR 0 5
20121: PPUSH
20122: CALL_OW 3
20126: PPUSH
20127: CALL_OW 1
20131: ST_TO_ADDR
// end ; end ;
20132: GO 19970
20134: POP
20135: POP
// end ;
20136: LD_VAR 0 4
20140: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20141: LD_INT 0
20143: PPUSH
20144: PPUSH
20145: PPUSH
20146: PPUSH
20147: PPUSH
20148: PPUSH
20149: PPUSH
20150: PPUSH
20151: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20152: LD_VAR 0 1
20156: PPUSH
20157: CALL_OW 264
20161: PUSH
20162: LD_EXP 83
20166: EQUAL
20167: NOT
20168: PUSH
20169: LD_VAR 0 1
20173: PUSH
20174: LD_EXP 73
20178: IN
20179: NOT
20180: OR
20181: IFFALSE 20185
// exit ;
20183: GO 20507
// index := GetElementIndex ( minersList , unit ) ;
20185: LD_ADDR_VAR 0 6
20189: PUSH
20190: LD_EXP 73
20194: PPUSH
20195: LD_VAR 0 1
20199: PPUSH
20200: CALL 25866 0 2
20204: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20205: LD_ADDR_VAR 0 8
20209: PUSH
20210: LD_EXP 75
20214: PUSH
20215: LD_EXP 74
20219: PUSH
20220: LD_VAR 0 6
20224: ARRAY
20225: MINUS
20226: ST_TO_ADDR
// if not minesFreeAmount then
20227: LD_VAR 0 8
20231: NOT
20232: IFFALSE 20236
// exit ;
20234: GO 20507
// tmp := [ ] ;
20236: LD_ADDR_VAR 0 7
20240: PUSH
20241: EMPTY
20242: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20243: LD_ADDR_VAR 0 5
20247: PUSH
20248: DOUBLE
20249: LD_INT 1
20251: DEC
20252: ST_TO_ADDR
20253: LD_VAR 0 8
20257: PUSH
20258: FOR_TO
20259: IFFALSE 20454
// begin _d := rand ( 0 , 5 ) ;
20261: LD_ADDR_VAR 0 11
20265: PUSH
20266: LD_INT 0
20268: PPUSH
20269: LD_INT 5
20271: PPUSH
20272: CALL_OW 12
20276: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20277: LD_ADDR_VAR 0 12
20281: PUSH
20282: LD_INT 2
20284: PPUSH
20285: LD_INT 6
20287: PPUSH
20288: CALL_OW 12
20292: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20293: LD_ADDR_VAR 0 9
20297: PUSH
20298: LD_VAR 0 2
20302: PPUSH
20303: LD_VAR 0 11
20307: PPUSH
20308: LD_VAR 0 12
20312: PPUSH
20313: CALL_OW 272
20317: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20318: LD_ADDR_VAR 0 10
20322: PUSH
20323: LD_VAR 0 3
20327: PPUSH
20328: LD_VAR 0 11
20332: PPUSH
20333: LD_VAR 0 12
20337: PPUSH
20338: CALL_OW 273
20342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20343: LD_VAR 0 9
20347: PPUSH
20348: LD_VAR 0 10
20352: PPUSH
20353: CALL_OW 488
20357: PUSH
20358: LD_VAR 0 9
20362: PUSH
20363: LD_VAR 0 10
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_VAR 0 7
20376: IN
20377: NOT
20378: AND
20379: PUSH
20380: LD_VAR 0 9
20384: PPUSH
20385: LD_VAR 0 10
20389: PPUSH
20390: CALL_OW 458
20394: NOT
20395: AND
20396: IFFALSE 20438
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20398: LD_ADDR_VAR 0 7
20402: PUSH
20403: LD_VAR 0 7
20407: PPUSH
20408: LD_VAR 0 7
20412: PUSH
20413: LD_INT 1
20415: PLUS
20416: PPUSH
20417: LD_VAR 0 9
20421: PUSH
20422: LD_VAR 0 10
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 1
20435: ST_TO_ADDR
20436: GO 20452
// i := i - 1 ;
20438: LD_ADDR_VAR 0 5
20442: PUSH
20443: LD_VAR 0 5
20447: PUSH
20448: LD_INT 1
20450: MINUS
20451: ST_TO_ADDR
// end ;
20452: GO 20258
20454: POP
20455: POP
// for i in tmp do
20456: LD_ADDR_VAR 0 5
20460: PUSH
20461: LD_VAR 0 7
20465: PUSH
20466: FOR_IN
20467: IFFALSE 20505
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20469: LD_VAR 0 1
20473: PPUSH
20474: LD_VAR 0 5
20478: PUSH
20479: LD_INT 1
20481: ARRAY
20482: PPUSH
20483: LD_VAR 0 5
20487: PUSH
20488: LD_INT 2
20490: ARRAY
20491: PPUSH
20492: CALL 19447 0 3
20496: NOT
20497: IFFALSE 20503
// exit ;
20499: POP
20500: POP
20501: GO 20507
20503: GO 20466
20505: POP
20506: POP
// end ;
20507: LD_VAR 0 4
20511: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
// if not GetClass ( unit ) = class_sniper then
20521: LD_VAR 0 1
20525: PPUSH
20526: CALL_OW 257
20530: PUSH
20531: LD_INT 5
20533: EQUAL
20534: NOT
20535: IFFALSE 20539
// exit ;
20537: GO 20927
// dist := 8 ;
20539: LD_ADDR_VAR 0 5
20543: PUSH
20544: LD_INT 8
20546: ST_TO_ADDR
// viewRange := 12 ;
20547: LD_ADDR_VAR 0 7
20551: PUSH
20552: LD_INT 12
20554: ST_TO_ADDR
// side := GetSide ( unit ) ;
20555: LD_ADDR_VAR 0 6
20559: PUSH
20560: LD_VAR 0 1
20564: PPUSH
20565: CALL_OW 255
20569: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20570: LD_INT 61
20572: PPUSH
20573: LD_VAR 0 6
20577: PPUSH
20578: CALL_OW 321
20582: PUSH
20583: LD_INT 2
20585: EQUAL
20586: IFFALSE 20596
// viewRange := 16 ;
20588: LD_ADDR_VAR 0 7
20592: PUSH
20593: LD_INT 16
20595: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20596: LD_VAR 0 1
20600: PPUSH
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_VAR 0 3
20610: PPUSH
20611: CALL_OW 297
20615: PUSH
20616: LD_VAR 0 5
20620: GREATER
20621: IFFALSE 20700
// begin ComMoveXY ( unit , x , y ) ;
20623: LD_VAR 0 1
20627: PPUSH
20628: LD_VAR 0 2
20632: PPUSH
20633: LD_VAR 0 3
20637: PPUSH
20638: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20642: LD_INT 35
20644: PPUSH
20645: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_VAR 0 2
20658: PPUSH
20659: LD_VAR 0 3
20663: PPUSH
20664: CALL 56638 0 3
20668: NOT
20669: IFFALSE 20673
// exit ;
20671: GO 20927
// until GetDistUnitXY ( unit , x , y ) < dist ;
20673: LD_VAR 0 1
20677: PPUSH
20678: LD_VAR 0 2
20682: PPUSH
20683: LD_VAR 0 3
20687: PPUSH
20688: CALL_OW 297
20692: PUSH
20693: LD_VAR 0 5
20697: LESS
20698: IFFALSE 20642
// end ; ComTurnXY ( unit , x , y ) ;
20700: LD_VAR 0 1
20704: PPUSH
20705: LD_VAR 0 2
20709: PPUSH
20710: LD_VAR 0 3
20714: PPUSH
20715: CALL_OW 118
// wait ( 5 ) ;
20719: LD_INT 5
20721: PPUSH
20722: CALL_OW 67
// _d := GetDir ( unit ) ;
20726: LD_ADDR_VAR 0 10
20730: PUSH
20731: LD_VAR 0 1
20735: PPUSH
20736: CALL_OW 254
20740: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20741: LD_ADDR_VAR 0 8
20745: PUSH
20746: LD_VAR 0 1
20750: PPUSH
20751: CALL_OW 250
20755: PPUSH
20756: LD_VAR 0 10
20760: PPUSH
20761: LD_VAR 0 5
20765: PPUSH
20766: CALL_OW 272
20770: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20771: LD_ADDR_VAR 0 9
20775: PUSH
20776: LD_VAR 0 1
20780: PPUSH
20781: CALL_OW 251
20785: PPUSH
20786: LD_VAR 0 10
20790: PPUSH
20791: LD_VAR 0 5
20795: PPUSH
20796: CALL_OW 273
20800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20801: LD_VAR 0 8
20805: PPUSH
20806: LD_VAR 0 9
20810: PPUSH
20811: CALL_OW 488
20815: NOT
20816: IFFALSE 20820
// exit ;
20818: GO 20927
// ComAnimCustom ( unit , 1 ) ;
20820: LD_VAR 0 1
20824: PPUSH
20825: LD_INT 1
20827: PPUSH
20828: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20832: LD_VAR 0 8
20836: PPUSH
20837: LD_VAR 0 9
20841: PPUSH
20842: LD_VAR 0 6
20846: PPUSH
20847: LD_VAR 0 7
20851: PPUSH
20852: CALL_OW 330
// repeat wait ( 1 ) ;
20856: LD_INT 1
20858: PPUSH
20859: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL_OW 316
20872: PUSH
20873: LD_VAR 0 1
20877: PPUSH
20878: CALL_OW 314
20882: OR
20883: PUSH
20884: LD_VAR 0 1
20888: PPUSH
20889: CALL_OW 302
20893: NOT
20894: OR
20895: PUSH
20896: LD_VAR 0 1
20900: PPUSH
20901: CALL_OW 301
20905: OR
20906: IFFALSE 20856
// RemoveSeeing ( _x , _y , side ) ;
20908: LD_VAR 0 8
20912: PPUSH
20913: LD_VAR 0 9
20917: PPUSH
20918: LD_VAR 0 6
20922: PPUSH
20923: CALL_OW 331
// end ; end_of_file
20927: LD_VAR 0 4
20931: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20932: LD_VAR 0 1
20936: PUSH
20937: LD_INT 200
20939: DOUBLE
20940: GREATEREQUAL
20941: IFFALSE 20949
20943: LD_INT 299
20945: DOUBLE
20946: LESSEQUAL
20947: IFTRUE 20951
20949: GO 20983
20951: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20952: LD_VAR 0 1
20956: PPUSH
20957: LD_VAR 0 2
20961: PPUSH
20962: LD_VAR 0 3
20966: PPUSH
20967: LD_VAR 0 4
20971: PPUSH
20972: LD_VAR 0 5
20976: PPUSH
20977: CALL 16670 0 5
20981: GO 21060
20983: LD_INT 300
20985: DOUBLE
20986: GREATEREQUAL
20987: IFFALSE 20995
20989: LD_INT 399
20991: DOUBLE
20992: LESSEQUAL
20993: IFTRUE 20997
20995: GO 21059
20997: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20998: LD_VAR 0 1
21002: PPUSH
21003: LD_VAR 0 2
21007: PPUSH
21008: LD_VAR 0 3
21012: PPUSH
21013: LD_VAR 0 4
21017: PPUSH
21018: LD_VAR 0 5
21022: PPUSH
21023: LD_VAR 0 6
21027: PPUSH
21028: LD_VAR 0 7
21032: PPUSH
21033: LD_VAR 0 8
21037: PPUSH
21038: LD_VAR 0 9
21042: PPUSH
21043: LD_VAR 0 10
21047: PPUSH
21048: LD_VAR 0 11
21052: PPUSH
21053: CALL 14312 0 11
21057: GO 21060
21059: POP
// end ;
21060: PPOPN 11
21062: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21063: LD_VAR 0 1
21067: PPUSH
21068: LD_VAR 0 2
21072: PPUSH
21073: LD_VAR 0 3
21077: PPUSH
21078: LD_VAR 0 4
21082: PPUSH
21083: LD_VAR 0 5
21087: PPUSH
21088: CALL 16406 0 5
// end ; end_of_file
21092: PPOPN 5
21094: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
// if exist_mode then
21099: LD_VAR 0 2
21103: IFFALSE 21128
// unit := CreateCharacter ( prefix & ident ) else
21105: LD_ADDR_VAR 0 5
21109: PUSH
21110: LD_VAR 0 3
21114: PUSH
21115: LD_VAR 0 1
21119: STR
21120: PPUSH
21121: CALL_OW 34
21125: ST_TO_ADDR
21126: GO 21143
// unit := NewCharacter ( ident ) ;
21128: LD_ADDR_VAR 0 5
21132: PUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 25
21142: ST_TO_ADDR
// result := unit ;
21143: LD_ADDR_VAR 0 4
21147: PUSH
21148: LD_VAR 0 5
21152: ST_TO_ADDR
// end ;
21153: LD_VAR 0 4
21157: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21158: LD_INT 0
21160: PPUSH
21161: PPUSH
// if not side or not nation then
21162: LD_VAR 0 1
21166: NOT
21167: PUSH
21168: LD_VAR 0 2
21172: NOT
21173: OR
21174: IFFALSE 21178
// exit ;
21176: GO 21946
// case nation of nation_american :
21178: LD_VAR 0 2
21182: PUSH
21183: LD_INT 1
21185: DOUBLE
21186: EQUAL
21187: IFTRUE 21191
21189: GO 21405
21191: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21192: LD_ADDR_VAR 0 4
21196: PUSH
21197: LD_INT 35
21199: PUSH
21200: LD_INT 45
21202: PUSH
21203: LD_INT 46
21205: PUSH
21206: LD_INT 47
21208: PUSH
21209: LD_INT 82
21211: PUSH
21212: LD_INT 83
21214: PUSH
21215: LD_INT 84
21217: PUSH
21218: LD_INT 85
21220: PUSH
21221: LD_INT 86
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 6
21232: PUSH
21233: LD_INT 15
21235: PUSH
21236: LD_INT 16
21238: PUSH
21239: LD_INT 7
21241: PUSH
21242: LD_INT 12
21244: PUSH
21245: LD_INT 13
21247: PUSH
21248: LD_INT 10
21250: PUSH
21251: LD_INT 14
21253: PUSH
21254: LD_INT 20
21256: PUSH
21257: LD_INT 21
21259: PUSH
21260: LD_INT 22
21262: PUSH
21263: LD_INT 25
21265: PUSH
21266: LD_INT 32
21268: PUSH
21269: LD_INT 27
21271: PUSH
21272: LD_INT 36
21274: PUSH
21275: LD_INT 69
21277: PUSH
21278: LD_INT 39
21280: PUSH
21281: LD_INT 34
21283: PUSH
21284: LD_INT 40
21286: PUSH
21287: LD_INT 48
21289: PUSH
21290: LD_INT 49
21292: PUSH
21293: LD_INT 50
21295: PUSH
21296: LD_INT 51
21298: PUSH
21299: LD_INT 52
21301: PUSH
21302: LD_INT 53
21304: PUSH
21305: LD_INT 54
21307: PUSH
21308: LD_INT 55
21310: PUSH
21311: LD_INT 56
21313: PUSH
21314: LD_INT 57
21316: PUSH
21317: LD_INT 58
21319: PUSH
21320: LD_INT 59
21322: PUSH
21323: LD_INT 60
21325: PUSH
21326: LD_INT 61
21328: PUSH
21329: LD_INT 62
21331: PUSH
21332: LD_INT 80
21334: PUSH
21335: LD_INT 82
21337: PUSH
21338: LD_INT 83
21340: PUSH
21341: LD_INT 84
21343: PUSH
21344: LD_INT 85
21346: PUSH
21347: LD_INT 86
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: ST_TO_ADDR
21403: GO 21870
21405: LD_INT 2
21407: DOUBLE
21408: EQUAL
21409: IFTRUE 21413
21411: GO 21639
21413: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21414: LD_ADDR_VAR 0 4
21418: PUSH
21419: LD_INT 35
21421: PUSH
21422: LD_INT 45
21424: PUSH
21425: LD_INT 46
21427: PUSH
21428: LD_INT 47
21430: PUSH
21431: LD_INT 82
21433: PUSH
21434: LD_INT 83
21436: PUSH
21437: LD_INT 84
21439: PUSH
21440: LD_INT 85
21442: PUSH
21443: LD_INT 87
21445: PUSH
21446: LD_INT 70
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 11
21454: PUSH
21455: LD_INT 3
21457: PUSH
21458: LD_INT 4
21460: PUSH
21461: LD_INT 5
21463: PUSH
21464: LD_INT 6
21466: PUSH
21467: LD_INT 15
21469: PUSH
21470: LD_INT 18
21472: PUSH
21473: LD_INT 7
21475: PUSH
21476: LD_INT 17
21478: PUSH
21479: LD_INT 8
21481: PUSH
21482: LD_INT 20
21484: PUSH
21485: LD_INT 21
21487: PUSH
21488: LD_INT 22
21490: PUSH
21491: LD_INT 72
21493: PUSH
21494: LD_INT 26
21496: PUSH
21497: LD_INT 69
21499: PUSH
21500: LD_INT 39
21502: PUSH
21503: LD_INT 40
21505: PUSH
21506: LD_INT 41
21508: PUSH
21509: LD_INT 42
21511: PUSH
21512: LD_INT 43
21514: PUSH
21515: LD_INT 48
21517: PUSH
21518: LD_INT 49
21520: PUSH
21521: LD_INT 50
21523: PUSH
21524: LD_INT 51
21526: PUSH
21527: LD_INT 52
21529: PUSH
21530: LD_INT 53
21532: PUSH
21533: LD_INT 54
21535: PUSH
21536: LD_INT 55
21538: PUSH
21539: LD_INT 56
21541: PUSH
21542: LD_INT 60
21544: PUSH
21545: LD_INT 61
21547: PUSH
21548: LD_INT 62
21550: PUSH
21551: LD_INT 66
21553: PUSH
21554: LD_INT 67
21556: PUSH
21557: LD_INT 68
21559: PUSH
21560: LD_INT 81
21562: PUSH
21563: LD_INT 82
21565: PUSH
21566: LD_INT 83
21568: PUSH
21569: LD_INT 84
21571: PUSH
21572: LD_INT 85
21574: PUSH
21575: LD_INT 87
21577: PUSH
21578: LD_INT 88
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
21637: GO 21870
21639: LD_INT 3
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21869
21647: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21648: LD_ADDR_VAR 0 4
21652: PUSH
21653: LD_INT 46
21655: PUSH
21656: LD_INT 47
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 82
21667: PUSH
21668: LD_INT 83
21670: PUSH
21671: LD_INT 84
21673: PUSH
21674: LD_INT 85
21676: PUSH
21677: LD_INT 86
21679: PUSH
21680: LD_INT 11
21682: PUSH
21683: LD_INT 9
21685: PUSH
21686: LD_INT 20
21688: PUSH
21689: LD_INT 19
21691: PUSH
21692: LD_INT 21
21694: PUSH
21695: LD_INT 24
21697: PUSH
21698: LD_INT 22
21700: PUSH
21701: LD_INT 25
21703: PUSH
21704: LD_INT 28
21706: PUSH
21707: LD_INT 29
21709: PUSH
21710: LD_INT 30
21712: PUSH
21713: LD_INT 31
21715: PUSH
21716: LD_INT 37
21718: PUSH
21719: LD_INT 38
21721: PUSH
21722: LD_INT 32
21724: PUSH
21725: LD_INT 27
21727: PUSH
21728: LD_INT 33
21730: PUSH
21731: LD_INT 69
21733: PUSH
21734: LD_INT 39
21736: PUSH
21737: LD_INT 34
21739: PUSH
21740: LD_INT 40
21742: PUSH
21743: LD_INT 71
21745: PUSH
21746: LD_INT 23
21748: PUSH
21749: LD_INT 44
21751: PUSH
21752: LD_INT 48
21754: PUSH
21755: LD_INT 49
21757: PUSH
21758: LD_INT 50
21760: PUSH
21761: LD_INT 51
21763: PUSH
21764: LD_INT 52
21766: PUSH
21767: LD_INT 53
21769: PUSH
21770: LD_INT 54
21772: PUSH
21773: LD_INT 55
21775: PUSH
21776: LD_INT 56
21778: PUSH
21779: LD_INT 57
21781: PUSH
21782: LD_INT 58
21784: PUSH
21785: LD_INT 59
21787: PUSH
21788: LD_INT 63
21790: PUSH
21791: LD_INT 64
21793: PUSH
21794: LD_INT 65
21796: PUSH
21797: LD_INT 82
21799: PUSH
21800: LD_INT 83
21802: PUSH
21803: LD_INT 84
21805: PUSH
21806: LD_INT 85
21808: PUSH
21809: LD_INT 86
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: ST_TO_ADDR
21867: GO 21870
21869: POP
// if state > - 1 and state < 3 then
21870: LD_VAR 0 3
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: GREATER
21879: PUSH
21880: LD_VAR 0 3
21884: PUSH
21885: LD_INT 3
21887: LESS
21888: AND
21889: IFFALSE 21946
// for i in result do
21891: LD_ADDR_VAR 0 5
21895: PUSH
21896: LD_VAR 0 4
21900: PUSH
21901: FOR_IN
21902: IFFALSE 21944
// if GetTech ( i , side ) <> state then
21904: LD_VAR 0 5
21908: PPUSH
21909: LD_VAR 0 1
21913: PPUSH
21914: CALL_OW 321
21918: PUSH
21919: LD_VAR 0 3
21923: NONEQUAL
21924: IFFALSE 21942
// result := result diff i ;
21926: LD_ADDR_VAR 0 4
21930: PUSH
21931: LD_VAR 0 4
21935: PUSH
21936: LD_VAR 0 5
21940: DIFF
21941: ST_TO_ADDR
21942: GO 21901
21944: POP
21945: POP
// end ;
21946: LD_VAR 0 4
21950: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21951: LD_INT 0
21953: PPUSH
21954: PPUSH
21955: PPUSH
// result := true ;
21956: LD_ADDR_VAR 0 3
21960: PUSH
21961: LD_INT 1
21963: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21964: LD_ADDR_VAR 0 5
21968: PUSH
21969: LD_VAR 0 2
21973: PPUSH
21974: CALL_OW 480
21978: ST_TO_ADDR
// if not tmp then
21979: LD_VAR 0 5
21983: NOT
21984: IFFALSE 21988
// exit ;
21986: GO 22037
// for i in tmp do
21988: LD_ADDR_VAR 0 4
21992: PUSH
21993: LD_VAR 0 5
21997: PUSH
21998: FOR_IN
21999: IFFALSE 22035
// if GetTech ( i , side ) <> state_researched then
22001: LD_VAR 0 4
22005: PPUSH
22006: LD_VAR 0 1
22010: PPUSH
22011: CALL_OW 321
22015: PUSH
22016: LD_INT 2
22018: NONEQUAL
22019: IFFALSE 22033
// begin result := false ;
22021: LD_ADDR_VAR 0 3
22025: PUSH
22026: LD_INT 0
22028: ST_TO_ADDR
// exit ;
22029: POP
22030: POP
22031: GO 22037
// end ;
22033: GO 21998
22035: POP
22036: POP
// end ;
22037: LD_VAR 0 3
22041: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22042: LD_INT 0
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
22054: PPUSH
22055: PPUSH
22056: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22057: LD_VAR 0 1
22061: NOT
22062: PUSH
22063: LD_VAR 0 1
22067: PPUSH
22068: CALL_OW 257
22072: PUSH
22073: LD_INT 9
22075: NONEQUAL
22076: OR
22077: IFFALSE 22081
// exit ;
22079: GO 22654
// side := GetSide ( unit ) ;
22081: LD_ADDR_VAR 0 9
22085: PUSH
22086: LD_VAR 0 1
22090: PPUSH
22091: CALL_OW 255
22095: ST_TO_ADDR
// tech_space := tech_spacanom ;
22096: LD_ADDR_VAR 0 12
22100: PUSH
22101: LD_INT 29
22103: ST_TO_ADDR
// tech_time := tech_taurad ;
22104: LD_ADDR_VAR 0 13
22108: PUSH
22109: LD_INT 28
22111: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22112: LD_ADDR_VAR 0 11
22116: PUSH
22117: LD_VAR 0 1
22121: PPUSH
22122: CALL_OW 310
22126: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22127: LD_VAR 0 11
22131: PPUSH
22132: CALL_OW 247
22136: PUSH
22137: LD_INT 2
22139: EQUAL
22140: IFFALSE 22144
// exit ;
22142: GO 22654
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22144: LD_ADDR_VAR 0 8
22148: PUSH
22149: LD_INT 81
22151: PUSH
22152: LD_VAR 0 9
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: LD_INT 21
22166: PUSH
22167: LD_INT 3
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PPUSH
22182: CALL_OW 69
22186: ST_TO_ADDR
// if not tmp then
22187: LD_VAR 0 8
22191: NOT
22192: IFFALSE 22196
// exit ;
22194: GO 22654
// if in_unit then
22196: LD_VAR 0 11
22200: IFFALSE 22224
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22202: LD_ADDR_VAR 0 10
22206: PUSH
22207: LD_VAR 0 8
22211: PPUSH
22212: LD_VAR 0 11
22216: PPUSH
22217: CALL_OW 74
22221: ST_TO_ADDR
22222: GO 22244
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22224: LD_ADDR_VAR 0 10
22228: PUSH
22229: LD_VAR 0 8
22233: PPUSH
22234: LD_VAR 0 1
22238: PPUSH
22239: CALL_OW 74
22243: ST_TO_ADDR
// if not enemy then
22244: LD_VAR 0 10
22248: NOT
22249: IFFALSE 22253
// exit ;
22251: GO 22654
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22253: LD_VAR 0 11
22257: PUSH
22258: LD_VAR 0 11
22262: PPUSH
22263: LD_VAR 0 10
22267: PPUSH
22268: CALL_OW 296
22272: PUSH
22273: LD_INT 13
22275: GREATER
22276: AND
22277: PUSH
22278: LD_VAR 0 1
22282: PPUSH
22283: LD_VAR 0 10
22287: PPUSH
22288: CALL_OW 296
22292: PUSH
22293: LD_INT 12
22295: GREATER
22296: OR
22297: IFFALSE 22301
// exit ;
22299: GO 22654
// missile := [ 1 ] ;
22301: LD_ADDR_VAR 0 14
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22312: LD_VAR 0 9
22316: PPUSH
22317: LD_VAR 0 12
22321: PPUSH
22322: CALL_OW 325
22326: IFFALSE 22355
// missile := Insert ( missile , missile + 1 , 2 ) ;
22328: LD_ADDR_VAR 0 14
22332: PUSH
22333: LD_VAR 0 14
22337: PPUSH
22338: LD_VAR 0 14
22342: PUSH
22343: LD_INT 1
22345: PLUS
22346: PPUSH
22347: LD_INT 2
22349: PPUSH
22350: CALL_OW 2
22354: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22355: LD_VAR 0 9
22359: PPUSH
22360: LD_VAR 0 13
22364: PPUSH
22365: CALL_OW 325
22369: PUSH
22370: LD_VAR 0 10
22374: PPUSH
22375: CALL_OW 255
22379: PPUSH
22380: LD_VAR 0 13
22384: PPUSH
22385: CALL_OW 325
22389: NOT
22390: AND
22391: IFFALSE 22420
// missile := Insert ( missile , missile + 1 , 3 ) ;
22393: LD_ADDR_VAR 0 14
22397: PUSH
22398: LD_VAR 0 14
22402: PPUSH
22403: LD_VAR 0 14
22407: PUSH
22408: LD_INT 1
22410: PLUS
22411: PPUSH
22412: LD_INT 3
22414: PPUSH
22415: CALL_OW 2
22419: ST_TO_ADDR
// if missile < 2 then
22420: LD_VAR 0 14
22424: PUSH
22425: LD_INT 2
22427: LESS
22428: IFFALSE 22432
// exit ;
22430: GO 22654
// x := GetX ( enemy ) ;
22432: LD_ADDR_VAR 0 4
22436: PUSH
22437: LD_VAR 0 10
22441: PPUSH
22442: CALL_OW 250
22446: ST_TO_ADDR
// y := GetY ( enemy ) ;
22447: LD_ADDR_VAR 0 5
22451: PUSH
22452: LD_VAR 0 10
22456: PPUSH
22457: CALL_OW 251
22461: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22462: LD_ADDR_VAR 0 6
22466: PUSH
22467: LD_VAR 0 4
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PPUSH
22476: LD_INT 1
22478: PPUSH
22479: CALL_OW 12
22483: PLUS
22484: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22485: LD_ADDR_VAR 0 7
22489: PUSH
22490: LD_VAR 0 5
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PPUSH
22499: LD_INT 1
22501: PPUSH
22502: CALL_OW 12
22506: PLUS
22507: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22508: LD_VAR 0 6
22512: PPUSH
22513: LD_VAR 0 7
22517: PPUSH
22518: CALL_OW 488
22522: NOT
22523: IFFALSE 22545
// begin _x := x ;
22525: LD_ADDR_VAR 0 6
22529: PUSH
22530: LD_VAR 0 4
22534: ST_TO_ADDR
// _y := y ;
22535: LD_ADDR_VAR 0 7
22539: PUSH
22540: LD_VAR 0 5
22544: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22545: LD_ADDR_VAR 0 3
22549: PUSH
22550: LD_INT 1
22552: PPUSH
22553: LD_VAR 0 14
22557: PPUSH
22558: CALL_OW 12
22562: ST_TO_ADDR
// case i of 1 :
22563: LD_VAR 0 3
22567: PUSH
22568: LD_INT 1
22570: DOUBLE
22571: EQUAL
22572: IFTRUE 22576
22574: GO 22593
22576: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22577: LD_VAR 0 1
22581: PPUSH
22582: LD_VAR 0 10
22586: PPUSH
22587: CALL_OW 115
22591: GO 22654
22593: LD_INT 2
22595: DOUBLE
22596: EQUAL
22597: IFTRUE 22601
22599: GO 22623
22601: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22602: LD_VAR 0 1
22606: PPUSH
22607: LD_VAR 0 6
22611: PPUSH
22612: LD_VAR 0 7
22616: PPUSH
22617: CALL_OW 153
22621: GO 22654
22623: LD_INT 3
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22653
22631: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22632: LD_VAR 0 1
22636: PPUSH
22637: LD_VAR 0 6
22641: PPUSH
22642: LD_VAR 0 7
22646: PPUSH
22647: CALL_OW 154
22651: GO 22654
22653: POP
// end ;
22654: LD_VAR 0 2
22658: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22659: LD_INT 0
22661: PPUSH
22662: PPUSH
22663: PPUSH
22664: PPUSH
22665: PPUSH
22666: PPUSH
// if not unit or not building then
22667: LD_VAR 0 1
22671: NOT
22672: PUSH
22673: LD_VAR 0 2
22677: NOT
22678: OR
22679: IFFALSE 22683
// exit ;
22681: GO 22841
// x := GetX ( building ) ;
22683: LD_ADDR_VAR 0 5
22687: PUSH
22688: LD_VAR 0 2
22692: PPUSH
22693: CALL_OW 250
22697: ST_TO_ADDR
// y := GetY ( building ) ;
22698: LD_ADDR_VAR 0 6
22702: PUSH
22703: LD_VAR 0 2
22707: PPUSH
22708: CALL_OW 251
22712: ST_TO_ADDR
// for i = 0 to 5 do
22713: LD_ADDR_VAR 0 4
22717: PUSH
22718: DOUBLE
22719: LD_INT 0
22721: DEC
22722: ST_TO_ADDR
22723: LD_INT 5
22725: PUSH
22726: FOR_TO
22727: IFFALSE 22839
// begin _x := ShiftX ( x , i , 3 ) ;
22729: LD_ADDR_VAR 0 7
22733: PUSH
22734: LD_VAR 0 5
22738: PPUSH
22739: LD_VAR 0 4
22743: PPUSH
22744: LD_INT 3
22746: PPUSH
22747: CALL_OW 272
22751: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22752: LD_ADDR_VAR 0 8
22756: PUSH
22757: LD_VAR 0 6
22761: PPUSH
22762: LD_VAR 0 4
22766: PPUSH
22767: LD_INT 3
22769: PPUSH
22770: CALL_OW 273
22774: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22775: LD_VAR 0 7
22779: PPUSH
22780: LD_VAR 0 8
22784: PPUSH
22785: CALL_OW 488
22789: NOT
22790: IFFALSE 22794
// continue ;
22792: GO 22726
// if HexInfo ( _x , _y ) = 0 then
22794: LD_VAR 0 7
22798: PPUSH
22799: LD_VAR 0 8
22803: PPUSH
22804: CALL_OW 428
22808: PUSH
22809: LD_INT 0
22811: EQUAL
22812: IFFALSE 22837
// begin ComMoveXY ( unit , _x , _y ) ;
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_VAR 0 7
22823: PPUSH
22824: LD_VAR 0 8
22828: PPUSH
22829: CALL_OW 111
// exit ;
22833: POP
22834: POP
22835: GO 22841
// end ; end ;
22837: GO 22726
22839: POP
22840: POP
// end ;
22841: LD_VAR 0 3
22845: RET
// export function ScanBase ( side , base_area ) ; begin
22846: LD_INT 0
22848: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22849: LD_ADDR_VAR 0 3
22853: PUSH
22854: LD_VAR 0 2
22858: PPUSH
22859: LD_INT 81
22861: PUSH
22862: LD_VAR 0 1
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PPUSH
22871: CALL_OW 70
22875: ST_TO_ADDR
// end ;
22876: LD_VAR 0 3
22880: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22881: LD_INT 0
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
// result := false ;
22887: LD_ADDR_VAR 0 2
22891: PUSH
22892: LD_INT 0
22894: ST_TO_ADDR
// side := GetSide ( unit ) ;
22895: LD_ADDR_VAR 0 3
22899: PUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 255
22909: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22910: LD_ADDR_VAR 0 4
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 248
22924: ST_TO_ADDR
// case nat of 1 :
22925: LD_VAR 0 4
22929: PUSH
22930: LD_INT 1
22932: DOUBLE
22933: EQUAL
22934: IFTRUE 22938
22936: GO 22949
22938: POP
// tech := tech_lassight ; 2 :
22939: LD_ADDR_VAR 0 5
22943: PUSH
22944: LD_INT 12
22946: ST_TO_ADDR
22947: GO 22988
22949: LD_INT 2
22951: DOUBLE
22952: EQUAL
22953: IFTRUE 22957
22955: GO 22968
22957: POP
// tech := tech_mortar ; 3 :
22958: LD_ADDR_VAR 0 5
22962: PUSH
22963: LD_INT 41
22965: ST_TO_ADDR
22966: GO 22988
22968: LD_INT 3
22970: DOUBLE
22971: EQUAL
22972: IFTRUE 22976
22974: GO 22987
22976: POP
// tech := tech_bazooka ; end ;
22977: LD_ADDR_VAR 0 5
22981: PUSH
22982: LD_INT 44
22984: ST_TO_ADDR
22985: GO 22988
22987: POP
// if Researched ( side , tech ) then
22988: LD_VAR 0 3
22992: PPUSH
22993: LD_VAR 0 5
22997: PPUSH
22998: CALL_OW 325
23002: IFFALSE 23029
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23004: LD_ADDR_VAR 0 2
23008: PUSH
23009: LD_INT 5
23011: PUSH
23012: LD_INT 8
23014: PUSH
23015: LD_INT 9
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: PUSH
23023: LD_VAR 0 4
23027: ARRAY
23028: ST_TO_ADDR
// end ;
23029: LD_VAR 0 2
23033: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23034: LD_INT 0
23036: PPUSH
23037: PPUSH
23038: PPUSH
// if not mines then
23039: LD_VAR 0 2
23043: NOT
23044: IFFALSE 23048
// exit ;
23046: GO 23192
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23048: LD_ADDR_VAR 0 5
23052: PUSH
23053: LD_INT 81
23055: PUSH
23056: LD_VAR 0 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 3
23067: PUSH
23068: LD_INT 21
23070: PUSH
23071: LD_INT 3
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PPUSH
23086: CALL_OW 69
23090: ST_TO_ADDR
// for i in mines do
23091: LD_ADDR_VAR 0 4
23095: PUSH
23096: LD_VAR 0 2
23100: PUSH
23101: FOR_IN
23102: IFFALSE 23190
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23104: LD_VAR 0 4
23108: PUSH
23109: LD_INT 1
23111: ARRAY
23112: PPUSH
23113: LD_VAR 0 4
23117: PUSH
23118: LD_INT 2
23120: ARRAY
23121: PPUSH
23122: CALL_OW 458
23126: NOT
23127: IFFALSE 23131
// continue ;
23129: GO 23101
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23131: LD_VAR 0 4
23135: PUSH
23136: LD_INT 1
23138: ARRAY
23139: PPUSH
23140: LD_VAR 0 4
23144: PUSH
23145: LD_INT 2
23147: ARRAY
23148: PPUSH
23149: CALL_OW 428
23153: PUSH
23154: LD_VAR 0 5
23158: IN
23159: IFFALSE 23188
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23161: LD_VAR 0 4
23165: PUSH
23166: LD_INT 1
23168: ARRAY
23169: PPUSH
23170: LD_VAR 0 4
23174: PUSH
23175: LD_INT 2
23177: ARRAY
23178: PPUSH
23179: LD_VAR 0 1
23183: PPUSH
23184: CALL_OW 456
// end ;
23188: GO 23101
23190: POP
23191: POP
// end ;
23192: LD_VAR 0 3
23196: RET
// export function Count ( array ) ; var i ; begin
23197: LD_INT 0
23199: PPUSH
23200: PPUSH
// result := 0 ;
23201: LD_ADDR_VAR 0 2
23205: PUSH
23206: LD_INT 0
23208: ST_TO_ADDR
// for i in array do
23209: LD_ADDR_VAR 0 3
23213: PUSH
23214: LD_VAR 0 1
23218: PUSH
23219: FOR_IN
23220: IFFALSE 23244
// if i then
23222: LD_VAR 0 3
23226: IFFALSE 23242
// result := result + 1 ;
23228: LD_ADDR_VAR 0 2
23232: PUSH
23233: LD_VAR 0 2
23237: PUSH
23238: LD_INT 1
23240: PLUS
23241: ST_TO_ADDR
23242: GO 23219
23244: POP
23245: POP
// end ;
23246: LD_VAR 0 2
23250: RET
// export function IsEmpty ( building ) ; begin
23251: LD_INT 0
23253: PPUSH
// if not building then
23254: LD_VAR 0 1
23258: NOT
23259: IFFALSE 23263
// exit ;
23261: GO 23306
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23263: LD_ADDR_VAR 0 2
23267: PUSH
23268: LD_VAR 0 1
23272: PUSH
23273: LD_INT 22
23275: PUSH
23276: LD_VAR 0 1
23280: PPUSH
23281: CALL_OW 255
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 58
23292: PUSH
23293: EMPTY
23294: LIST
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PPUSH
23300: CALL_OW 69
23304: IN
23305: ST_TO_ADDR
// end ;
23306: LD_VAR 0 2
23310: RET
// export function IsNotFull ( building ) ; begin
23311: LD_INT 0
23313: PPUSH
// if not building then
23314: LD_VAR 0 1
23318: NOT
23319: IFFALSE 23323
// exit ;
23321: GO 23342
// result := UnitsInside ( building ) < 6 ;
23323: LD_ADDR_VAR 0 2
23327: PUSH
23328: LD_VAR 0 1
23332: PPUSH
23333: CALL_OW 313
23337: PUSH
23338: LD_INT 6
23340: LESS
23341: ST_TO_ADDR
// end ;
23342: LD_VAR 0 2
23346: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23347: LD_INT 0
23349: PPUSH
23350: PPUSH
23351: PPUSH
23352: PPUSH
// tmp := [ ] ;
23353: LD_ADDR_VAR 0 3
23357: PUSH
23358: EMPTY
23359: ST_TO_ADDR
// list := [ ] ;
23360: LD_ADDR_VAR 0 5
23364: PUSH
23365: EMPTY
23366: ST_TO_ADDR
// for i = 16 to 25 do
23367: LD_ADDR_VAR 0 4
23371: PUSH
23372: DOUBLE
23373: LD_INT 16
23375: DEC
23376: ST_TO_ADDR
23377: LD_INT 25
23379: PUSH
23380: FOR_TO
23381: IFFALSE 23454
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: LD_VAR 0 3
23392: PUSH
23393: LD_INT 22
23395: PUSH
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 255
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 91
23412: PUSH
23413: LD_VAR 0 1
23417: PUSH
23418: LD_INT 6
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 30
23428: PUSH
23429: LD_VAR 0 4
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: PUSH
23443: EMPTY
23444: LIST
23445: PPUSH
23446: CALL_OW 69
23450: ADD
23451: ST_TO_ADDR
23452: GO 23380
23454: POP
23455: POP
// for i = 1 to tmp do
23456: LD_ADDR_VAR 0 4
23460: PUSH
23461: DOUBLE
23462: LD_INT 1
23464: DEC
23465: ST_TO_ADDR
23466: LD_VAR 0 3
23470: PUSH
23471: FOR_TO
23472: IFFALSE 23560
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23474: LD_ADDR_VAR 0 5
23478: PUSH
23479: LD_VAR 0 5
23483: PUSH
23484: LD_VAR 0 3
23488: PUSH
23489: LD_VAR 0 4
23493: ARRAY
23494: PPUSH
23495: CALL_OW 266
23499: PUSH
23500: LD_VAR 0 3
23504: PUSH
23505: LD_VAR 0 4
23509: ARRAY
23510: PPUSH
23511: CALL_OW 250
23515: PUSH
23516: LD_VAR 0 3
23520: PUSH
23521: LD_VAR 0 4
23525: ARRAY
23526: PPUSH
23527: CALL_OW 251
23531: PUSH
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 4
23541: ARRAY
23542: PPUSH
23543: CALL_OW 254
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: PUSH
23554: EMPTY
23555: LIST
23556: ADD
23557: ST_TO_ADDR
23558: GO 23471
23560: POP
23561: POP
// result := list ;
23562: LD_ADDR_VAR 0 2
23566: PUSH
23567: LD_VAR 0 5
23571: ST_TO_ADDR
// end ;
23572: LD_VAR 0 2
23576: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23577: LD_INT 0
23579: PPUSH
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
23585: PPUSH
// if not factory then
23586: LD_VAR 0 1
23590: NOT
23591: IFFALSE 23595
// exit ;
23593: GO 24188
// if control = control_apeman then
23595: LD_VAR 0 4
23599: PUSH
23600: LD_INT 5
23602: EQUAL
23603: IFFALSE 23712
// begin tmp := UnitsInside ( factory ) ;
23605: LD_ADDR_VAR 0 8
23609: PUSH
23610: LD_VAR 0 1
23614: PPUSH
23615: CALL_OW 313
23619: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23620: LD_VAR 0 8
23624: PPUSH
23625: LD_INT 25
23627: PUSH
23628: LD_INT 12
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PPUSH
23635: CALL_OW 72
23639: NOT
23640: IFFALSE 23650
// control := control_manual ;
23642: LD_ADDR_VAR 0 4
23646: PUSH
23647: LD_INT 1
23649: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23650: LD_ADDR_VAR 0 8
23654: PUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL 23347 0 1
23664: ST_TO_ADDR
// if tmp then
23665: LD_VAR 0 8
23669: IFFALSE 23712
// begin for i in tmp do
23671: LD_ADDR_VAR 0 7
23675: PUSH
23676: LD_VAR 0 8
23680: PUSH
23681: FOR_IN
23682: IFFALSE 23710
// if i [ 1 ] = b_ext_radio then
23684: LD_VAR 0 7
23688: PUSH
23689: LD_INT 1
23691: ARRAY
23692: PUSH
23693: LD_INT 22
23695: EQUAL
23696: IFFALSE 23708
// begin control := control_remote ;
23698: LD_ADDR_VAR 0 4
23702: PUSH
23703: LD_INT 2
23705: ST_TO_ADDR
// break ;
23706: GO 23710
// end ;
23708: GO 23681
23710: POP
23711: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23712: LD_VAR 0 1
23716: PPUSH
23717: LD_VAR 0 2
23721: PPUSH
23722: LD_VAR 0 3
23726: PPUSH
23727: LD_VAR 0 4
23731: PPUSH
23732: LD_VAR 0 5
23736: PPUSH
23737: CALL_OW 448
23741: IFFALSE 23776
// begin result := [ chassis , engine , control , weapon ] ;
23743: LD_ADDR_VAR 0 6
23747: PUSH
23748: LD_VAR 0 2
23752: PUSH
23753: LD_VAR 0 3
23757: PUSH
23758: LD_VAR 0 4
23762: PUSH
23763: LD_VAR 0 5
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: ST_TO_ADDR
// exit ;
23774: GO 24188
// end ; _chassis := AvailableChassisList ( factory ) ;
23776: LD_ADDR_VAR 0 9
23780: PUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 475
23790: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23791: LD_ADDR_VAR 0 11
23795: PUSH
23796: LD_VAR 0 1
23800: PPUSH
23801: CALL_OW 476
23805: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23806: LD_ADDR_VAR 0 12
23810: PUSH
23811: LD_VAR 0 1
23815: PPUSH
23816: CALL_OW 477
23820: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23821: LD_ADDR_VAR 0 10
23825: PUSH
23826: LD_VAR 0 1
23830: PPUSH
23831: CALL_OW 478
23835: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23836: LD_VAR 0 9
23840: NOT
23841: PUSH
23842: LD_VAR 0 11
23846: NOT
23847: OR
23848: PUSH
23849: LD_VAR 0 12
23853: NOT
23854: OR
23855: PUSH
23856: LD_VAR 0 10
23860: NOT
23861: OR
23862: IFFALSE 23897
// begin result := [ chassis , engine , control , weapon ] ;
23864: LD_ADDR_VAR 0 6
23868: PUSH
23869: LD_VAR 0 2
23873: PUSH
23874: LD_VAR 0 3
23878: PUSH
23879: LD_VAR 0 4
23883: PUSH
23884: LD_VAR 0 5
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: ST_TO_ADDR
// exit ;
23895: GO 24188
// end ; if not chassis in _chassis then
23897: LD_VAR 0 2
23901: PUSH
23902: LD_VAR 0 9
23906: IN
23907: NOT
23908: IFFALSE 23934
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23910: LD_ADDR_VAR 0 2
23914: PUSH
23915: LD_VAR 0 9
23919: PUSH
23920: LD_INT 1
23922: PPUSH
23923: LD_VAR 0 9
23927: PPUSH
23928: CALL_OW 12
23932: ARRAY
23933: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23934: LD_VAR 0 2
23938: PPUSH
23939: LD_VAR 0 3
23943: PPUSH
23944: CALL 24193 0 2
23948: NOT
23949: IFFALSE 24008
// repeat engine := _engine [ 1 ] ;
23951: LD_ADDR_VAR 0 3
23955: PUSH
23956: LD_VAR 0 11
23960: PUSH
23961: LD_INT 1
23963: ARRAY
23964: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23965: LD_ADDR_VAR 0 11
23969: PUSH
23970: LD_VAR 0 11
23974: PPUSH
23975: LD_INT 1
23977: PPUSH
23978: CALL_OW 3
23982: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23983: LD_VAR 0 2
23987: PPUSH
23988: LD_VAR 0 3
23992: PPUSH
23993: CALL 24193 0 2
23997: PUSH
23998: LD_VAR 0 11
24002: PUSH
24003: EMPTY
24004: EQUAL
24005: OR
24006: IFFALSE 23951
// if not control in _control then
24008: LD_VAR 0 4
24012: PUSH
24013: LD_VAR 0 12
24017: IN
24018: NOT
24019: IFFALSE 24045
// control := _control [ rand ( 1 , _control ) ] ;
24021: LD_ADDR_VAR 0 4
24025: PUSH
24026: LD_VAR 0 12
24030: PUSH
24031: LD_INT 1
24033: PPUSH
24034: LD_VAR 0 12
24038: PPUSH
24039: CALL_OW 12
24043: ARRAY
24044: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24045: LD_VAR 0 2
24049: PPUSH
24050: LD_VAR 0 5
24054: PPUSH
24055: CALL 24413 0 2
24059: NOT
24060: IFFALSE 24119
// repeat weapon := _weapon [ 1 ] ;
24062: LD_ADDR_VAR 0 5
24066: PUSH
24067: LD_VAR 0 10
24071: PUSH
24072: LD_INT 1
24074: ARRAY
24075: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24076: LD_ADDR_VAR 0 10
24080: PUSH
24081: LD_VAR 0 10
24085: PPUSH
24086: LD_INT 1
24088: PPUSH
24089: CALL_OW 3
24093: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24094: LD_VAR 0 2
24098: PPUSH
24099: LD_VAR 0 5
24103: PPUSH
24104: CALL 24413 0 2
24108: PUSH
24109: LD_VAR 0 10
24113: PUSH
24114: EMPTY
24115: EQUAL
24116: OR
24117: IFFALSE 24062
// result := [ ] ;
24119: LD_ADDR_VAR 0 6
24123: PUSH
24124: EMPTY
24125: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24126: LD_VAR 0 1
24130: PPUSH
24131: LD_VAR 0 2
24135: PPUSH
24136: LD_VAR 0 3
24140: PPUSH
24141: LD_VAR 0 4
24145: PPUSH
24146: LD_VAR 0 5
24150: PPUSH
24151: CALL_OW 448
24155: IFFALSE 24188
// result := [ chassis , engine , control , weapon ] ;
24157: LD_ADDR_VAR 0 6
24161: PUSH
24162: LD_VAR 0 2
24166: PUSH
24167: LD_VAR 0 3
24171: PUSH
24172: LD_VAR 0 4
24176: PUSH
24177: LD_VAR 0 5
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: ST_TO_ADDR
// end ;
24188: LD_VAR 0 6
24192: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24193: LD_INT 0
24195: PPUSH
// if not chassis or not engine then
24196: LD_VAR 0 1
24200: NOT
24201: PUSH
24202: LD_VAR 0 2
24206: NOT
24207: OR
24208: IFFALSE 24212
// exit ;
24210: GO 24408
// case engine of engine_solar :
24212: LD_VAR 0 2
24216: PUSH
24217: LD_INT 2
24219: DOUBLE
24220: EQUAL
24221: IFTRUE 24225
24223: GO 24263
24225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24226: LD_ADDR_VAR 0 3
24230: PUSH
24231: LD_INT 11
24233: PUSH
24234: LD_INT 12
24236: PUSH
24237: LD_INT 13
24239: PUSH
24240: LD_INT 14
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: LD_INT 3
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: ST_TO_ADDR
24261: GO 24392
24263: LD_INT 1
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24333
24271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24272: LD_ADDR_VAR 0 3
24276: PUSH
24277: LD_INT 11
24279: PUSH
24280: LD_INT 12
24282: PUSH
24283: LD_INT 13
24285: PUSH
24286: LD_INT 14
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: LD_INT 2
24294: PUSH
24295: LD_INT 3
24297: PUSH
24298: LD_INT 4
24300: PUSH
24301: LD_INT 5
24303: PUSH
24304: LD_INT 21
24306: PUSH
24307: LD_INT 23
24309: PUSH
24310: LD_INT 22
24312: PUSH
24313: LD_INT 24
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: ST_TO_ADDR
24331: GO 24392
24333: LD_INT 3
24335: DOUBLE
24336: EQUAL
24337: IFTRUE 24341
24339: GO 24391
24341: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_INT 13
24349: PUSH
24350: LD_INT 14
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 3
24358: PUSH
24359: LD_INT 4
24361: PUSH
24362: LD_INT 5
24364: PUSH
24365: LD_INT 21
24367: PUSH
24368: LD_INT 22
24370: PUSH
24371: LD_INT 23
24373: PUSH
24374: LD_INT 24
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: ST_TO_ADDR
24389: GO 24392
24391: POP
// result := ( chassis in result ) ;
24392: LD_ADDR_VAR 0 3
24396: PUSH
24397: LD_VAR 0 1
24401: PUSH
24402: LD_VAR 0 3
24406: IN
24407: ST_TO_ADDR
// end ;
24408: LD_VAR 0 3
24412: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24413: LD_INT 0
24415: PPUSH
// if not chassis or not weapon then
24416: LD_VAR 0 1
24420: NOT
24421: PUSH
24422: LD_VAR 0 2
24426: NOT
24427: OR
24428: IFFALSE 24432
// exit ;
24430: GO 25494
// case weapon of us_machine_gun :
24432: LD_VAR 0 2
24436: PUSH
24437: LD_INT 2
24439: DOUBLE
24440: EQUAL
24441: IFTRUE 24445
24443: GO 24475
24445: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24446: LD_ADDR_VAR 0 3
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: LD_INT 4
24462: PUSH
24463: LD_INT 5
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 25478
24475: LD_INT 3
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24513
24483: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: LD_INT 4
24500: PUSH
24501: LD_INT 5
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: ST_TO_ADDR
24511: GO 25478
24513: LD_INT 11
24515: DOUBLE
24516: EQUAL
24517: IFTRUE 24521
24519: GO 24551
24521: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24522: LD_ADDR_VAR 0 3
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: LD_INT 3
24535: PUSH
24536: LD_INT 4
24538: PUSH
24539: LD_INT 5
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: ST_TO_ADDR
24549: GO 25478
24551: LD_INT 4
24553: DOUBLE
24554: EQUAL
24555: IFTRUE 24559
24557: GO 24585
24559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24560: LD_ADDR_VAR 0 3
24564: PUSH
24565: LD_INT 2
24567: PUSH
24568: LD_INT 3
24570: PUSH
24571: LD_INT 4
24573: PUSH
24574: LD_INT 5
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: ST_TO_ADDR
24583: GO 25478
24585: LD_INT 5
24587: DOUBLE
24588: EQUAL
24589: IFTRUE 24593
24591: GO 24619
24593: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24594: LD_ADDR_VAR 0 3
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: LD_INT 3
24604: PUSH
24605: LD_INT 4
24607: PUSH
24608: LD_INT 5
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: ST_TO_ADDR
24617: GO 25478
24619: LD_INT 9
24621: DOUBLE
24622: EQUAL
24623: IFTRUE 24627
24625: GO 24653
24627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24628: LD_ADDR_VAR 0 3
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 3
24638: PUSH
24639: LD_INT 4
24641: PUSH
24642: LD_INT 5
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: ST_TO_ADDR
24651: GO 25478
24653: LD_INT 7
24655: DOUBLE
24656: EQUAL
24657: IFTRUE 24661
24659: GO 24687
24661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24662: LD_ADDR_VAR 0 3
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: LD_INT 3
24672: PUSH
24673: LD_INT 4
24675: PUSH
24676: LD_INT 5
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: ST_TO_ADDR
24685: GO 25478
24687: LD_INT 12
24689: DOUBLE
24690: EQUAL
24691: IFTRUE 24695
24693: GO 24721
24695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 3
24706: PUSH
24707: LD_INT 4
24709: PUSH
24710: LD_INT 5
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: ST_TO_ADDR
24719: GO 25478
24721: LD_INT 13
24723: DOUBLE
24724: EQUAL
24725: IFTRUE 24729
24727: GO 24755
24729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_INT 2
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: LD_INT 4
24743: PUSH
24744: LD_INT 5
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: ST_TO_ADDR
24753: GO 25478
24755: LD_INT 14
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24781
24763: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24764: LD_ADDR_VAR 0 3
24768: PUSH
24769: LD_INT 4
24771: PUSH
24772: LD_INT 5
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: ST_TO_ADDR
24779: GO 25478
24781: LD_INT 6
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 24807
24789: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24790: LD_ADDR_VAR 0 3
24794: PUSH
24795: LD_INT 4
24797: PUSH
24798: LD_INT 5
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: ST_TO_ADDR
24805: GO 25478
24807: LD_INT 10
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 24833
24815: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24816: LD_ADDR_VAR 0 3
24820: PUSH
24821: LD_INT 4
24823: PUSH
24824: LD_INT 5
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: ST_TO_ADDR
24831: GO 25478
24833: LD_INT 22
24835: DOUBLE
24836: EQUAL
24837: IFTRUE 24841
24839: GO 24867
24841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24842: LD_ADDR_VAR 0 3
24846: PUSH
24847: LD_INT 11
24849: PUSH
24850: LD_INT 12
24852: PUSH
24853: LD_INT 13
24855: PUSH
24856: LD_INT 14
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: ST_TO_ADDR
24865: GO 25478
24867: LD_INT 23
24869: DOUBLE
24870: EQUAL
24871: IFTRUE 24875
24873: GO 24901
24875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24876: LD_ADDR_VAR 0 3
24880: PUSH
24881: LD_INT 11
24883: PUSH
24884: LD_INT 12
24886: PUSH
24887: LD_INT 13
24889: PUSH
24890: LD_INT 14
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: ST_TO_ADDR
24899: GO 25478
24901: LD_INT 24
24903: DOUBLE
24904: EQUAL
24905: IFTRUE 24909
24907: GO 24935
24909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24910: LD_ADDR_VAR 0 3
24914: PUSH
24915: LD_INT 11
24917: PUSH
24918: LD_INT 12
24920: PUSH
24921: LD_INT 13
24923: PUSH
24924: LD_INT 14
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: ST_TO_ADDR
24933: GO 25478
24935: LD_INT 30
24937: DOUBLE
24938: EQUAL
24939: IFTRUE 24943
24941: GO 24969
24943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_INT 11
24951: PUSH
24952: LD_INT 12
24954: PUSH
24955: LD_INT 13
24957: PUSH
24958: LD_INT 14
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: ST_TO_ADDR
24967: GO 25478
24969: LD_INT 25
24971: DOUBLE
24972: EQUAL
24973: IFTRUE 24977
24975: GO 24995
24977: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24978: LD_ADDR_VAR 0 3
24982: PUSH
24983: LD_INT 13
24985: PUSH
24986: LD_INT 14
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: ST_TO_ADDR
24993: GO 25478
24995: LD_INT 27
24997: DOUBLE
24998: EQUAL
24999: IFTRUE 25003
25001: GO 25021
25003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25004: LD_ADDR_VAR 0 3
25008: PUSH
25009: LD_INT 13
25011: PUSH
25012: LD_INT 14
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: ST_TO_ADDR
25019: GO 25478
25021: LD_EXP 81
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25057
25031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25032: LD_ADDR_VAR 0 3
25036: PUSH
25037: LD_INT 11
25039: PUSH
25040: LD_INT 12
25042: PUSH
25043: LD_INT 13
25045: PUSH
25046: LD_INT 14
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: ST_TO_ADDR
25055: GO 25478
25057: LD_INT 28
25059: DOUBLE
25060: EQUAL
25061: IFTRUE 25065
25063: GO 25083
25065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_INT 13
25073: PUSH
25074: LD_INT 14
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: ST_TO_ADDR
25081: GO 25478
25083: LD_INT 29
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25109
25091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_INT 13
25099: PUSH
25100: LD_INT 14
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: ST_TO_ADDR
25107: GO 25478
25109: LD_INT 31
25111: DOUBLE
25112: EQUAL
25113: IFTRUE 25117
25115: GO 25135
25117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_INT 13
25125: PUSH
25126: LD_INT 14
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: ST_TO_ADDR
25133: GO 25478
25135: LD_INT 26
25137: DOUBLE
25138: EQUAL
25139: IFTRUE 25143
25141: GO 25161
25143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25144: LD_ADDR_VAR 0 3
25148: PUSH
25149: LD_INT 13
25151: PUSH
25152: LD_INT 14
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: ST_TO_ADDR
25159: GO 25478
25161: LD_INT 42
25163: DOUBLE
25164: EQUAL
25165: IFTRUE 25169
25167: GO 25195
25169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25170: LD_ADDR_VAR 0 3
25174: PUSH
25175: LD_INT 21
25177: PUSH
25178: LD_INT 22
25180: PUSH
25181: LD_INT 23
25183: PUSH
25184: LD_INT 24
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: ST_TO_ADDR
25193: GO 25478
25195: LD_INT 43
25197: DOUBLE
25198: EQUAL
25199: IFTRUE 25203
25201: GO 25229
25203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25204: LD_ADDR_VAR 0 3
25208: PUSH
25209: LD_INT 21
25211: PUSH
25212: LD_INT 22
25214: PUSH
25215: LD_INT 23
25217: PUSH
25218: LD_INT 24
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: ST_TO_ADDR
25227: GO 25478
25229: LD_INT 44
25231: DOUBLE
25232: EQUAL
25233: IFTRUE 25237
25235: GO 25263
25237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25238: LD_ADDR_VAR 0 3
25242: PUSH
25243: LD_INT 21
25245: PUSH
25246: LD_INT 22
25248: PUSH
25249: LD_INT 23
25251: PUSH
25252: LD_INT 24
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: ST_TO_ADDR
25261: GO 25478
25263: LD_INT 45
25265: DOUBLE
25266: EQUAL
25267: IFTRUE 25271
25269: GO 25297
25271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: LD_INT 21
25279: PUSH
25280: LD_INT 22
25282: PUSH
25283: LD_INT 23
25285: PUSH
25286: LD_INT 24
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: ST_TO_ADDR
25295: GO 25478
25297: LD_INT 49
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25331
25305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25306: LD_ADDR_VAR 0 3
25310: PUSH
25311: LD_INT 21
25313: PUSH
25314: LD_INT 22
25316: PUSH
25317: LD_INT 23
25319: PUSH
25320: LD_INT 24
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: ST_TO_ADDR
25329: GO 25478
25331: LD_INT 51
25333: DOUBLE
25334: EQUAL
25335: IFTRUE 25339
25337: GO 25365
25339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25340: LD_ADDR_VAR 0 3
25344: PUSH
25345: LD_INT 21
25347: PUSH
25348: LD_INT 22
25350: PUSH
25351: LD_INT 23
25353: PUSH
25354: LD_INT 24
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: ST_TO_ADDR
25363: GO 25478
25365: LD_INT 52
25367: DOUBLE
25368: EQUAL
25369: IFTRUE 25373
25371: GO 25399
25373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25374: LD_ADDR_VAR 0 3
25378: PUSH
25379: LD_INT 21
25381: PUSH
25382: LD_INT 22
25384: PUSH
25385: LD_INT 23
25387: PUSH
25388: LD_INT 24
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: ST_TO_ADDR
25397: GO 25478
25399: LD_INT 53
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25425
25407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25408: LD_ADDR_VAR 0 3
25412: PUSH
25413: LD_INT 23
25415: PUSH
25416: LD_INT 24
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: ST_TO_ADDR
25423: GO 25478
25425: LD_INT 46
25427: DOUBLE
25428: EQUAL
25429: IFTRUE 25433
25431: GO 25451
25433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25434: LD_ADDR_VAR 0 3
25438: PUSH
25439: LD_INT 23
25441: PUSH
25442: LD_INT 24
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: ST_TO_ADDR
25449: GO 25478
25451: LD_INT 47
25453: DOUBLE
25454: EQUAL
25455: IFTRUE 25459
25457: GO 25477
25459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_INT 23
25467: PUSH
25468: LD_INT 24
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: ST_TO_ADDR
25475: GO 25478
25477: POP
// result := ( chassis in result ) ;
25478: LD_ADDR_VAR 0 3
25482: PUSH
25483: LD_VAR 0 1
25487: PUSH
25488: LD_VAR 0 3
25492: IN
25493: ST_TO_ADDR
// end ;
25494: LD_VAR 0 3
25498: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25499: LD_INT 0
25501: PPUSH
25502: PPUSH
25503: PPUSH
25504: PPUSH
25505: PPUSH
25506: PPUSH
25507: PPUSH
// result := array ;
25508: LD_ADDR_VAR 0 5
25512: PUSH
25513: LD_VAR 0 1
25517: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25518: LD_VAR 0 1
25522: NOT
25523: PUSH
25524: LD_VAR 0 2
25528: NOT
25529: OR
25530: PUSH
25531: LD_VAR 0 3
25535: NOT
25536: OR
25537: PUSH
25538: LD_VAR 0 2
25542: PUSH
25543: LD_VAR 0 1
25547: GREATER
25548: OR
25549: PUSH
25550: LD_VAR 0 3
25554: PUSH
25555: LD_VAR 0 1
25559: GREATER
25560: OR
25561: IFFALSE 25565
// exit ;
25563: GO 25861
// if direction then
25565: LD_VAR 0 4
25569: IFFALSE 25633
// begin d := 1 ;
25571: LD_ADDR_VAR 0 9
25575: PUSH
25576: LD_INT 1
25578: ST_TO_ADDR
// if i_from > i_to then
25579: LD_VAR 0 2
25583: PUSH
25584: LD_VAR 0 3
25588: GREATER
25589: IFFALSE 25615
// length := ( array - i_from ) + i_to else
25591: LD_ADDR_VAR 0 11
25595: PUSH
25596: LD_VAR 0 1
25600: PUSH
25601: LD_VAR 0 2
25605: MINUS
25606: PUSH
25607: LD_VAR 0 3
25611: PLUS
25612: ST_TO_ADDR
25613: GO 25631
// length := i_to - i_from ;
25615: LD_ADDR_VAR 0 11
25619: PUSH
25620: LD_VAR 0 3
25624: PUSH
25625: LD_VAR 0 2
25629: MINUS
25630: ST_TO_ADDR
// end else
25631: GO 25694
// begin d := - 1 ;
25633: LD_ADDR_VAR 0 9
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: ST_TO_ADDR
// if i_from > i_to then
25642: LD_VAR 0 2
25646: PUSH
25647: LD_VAR 0 3
25651: GREATER
25652: IFFALSE 25672
// length := i_from - i_to else
25654: LD_ADDR_VAR 0 11
25658: PUSH
25659: LD_VAR 0 2
25663: PUSH
25664: LD_VAR 0 3
25668: MINUS
25669: ST_TO_ADDR
25670: GO 25694
// length := ( array - i_to ) + i_from ;
25672: LD_ADDR_VAR 0 11
25676: PUSH
25677: LD_VAR 0 1
25681: PUSH
25682: LD_VAR 0 3
25686: MINUS
25687: PUSH
25688: LD_VAR 0 2
25692: PLUS
25693: ST_TO_ADDR
// end ; if not length then
25694: LD_VAR 0 11
25698: NOT
25699: IFFALSE 25703
// exit ;
25701: GO 25861
// tmp := array ;
25703: LD_ADDR_VAR 0 10
25707: PUSH
25708: LD_VAR 0 1
25712: ST_TO_ADDR
// for i = 1 to length do
25713: LD_ADDR_VAR 0 6
25717: PUSH
25718: DOUBLE
25719: LD_INT 1
25721: DEC
25722: ST_TO_ADDR
25723: LD_VAR 0 11
25727: PUSH
25728: FOR_TO
25729: IFFALSE 25849
// begin for j = 1 to array do
25731: LD_ADDR_VAR 0 7
25735: PUSH
25736: DOUBLE
25737: LD_INT 1
25739: DEC
25740: ST_TO_ADDR
25741: LD_VAR 0 1
25745: PUSH
25746: FOR_TO
25747: IFFALSE 25835
// begin k := j + d ;
25749: LD_ADDR_VAR 0 8
25753: PUSH
25754: LD_VAR 0 7
25758: PUSH
25759: LD_VAR 0 9
25763: PLUS
25764: ST_TO_ADDR
// if k > array then
25765: LD_VAR 0 8
25769: PUSH
25770: LD_VAR 0 1
25774: GREATER
25775: IFFALSE 25785
// k := 1 ;
25777: LD_ADDR_VAR 0 8
25781: PUSH
25782: LD_INT 1
25784: ST_TO_ADDR
// if not k then
25785: LD_VAR 0 8
25789: NOT
25790: IFFALSE 25802
// k := array ;
25792: LD_ADDR_VAR 0 8
25796: PUSH
25797: LD_VAR 0 1
25801: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25802: LD_ADDR_VAR 0 10
25806: PUSH
25807: LD_VAR 0 10
25811: PPUSH
25812: LD_VAR 0 8
25816: PPUSH
25817: LD_VAR 0 1
25821: PUSH
25822: LD_VAR 0 7
25826: ARRAY
25827: PPUSH
25828: CALL_OW 1
25832: ST_TO_ADDR
// end ;
25833: GO 25746
25835: POP
25836: POP
// array := tmp ;
25837: LD_ADDR_VAR 0 1
25841: PUSH
25842: LD_VAR 0 10
25846: ST_TO_ADDR
// end ;
25847: GO 25728
25849: POP
25850: POP
// result := array ;
25851: LD_ADDR_VAR 0 5
25855: PUSH
25856: LD_VAR 0 1
25860: ST_TO_ADDR
// end ;
25861: LD_VAR 0 5
25865: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25866: LD_INT 0
25868: PPUSH
25869: PPUSH
// result := 0 ;
25870: LD_ADDR_VAR 0 3
25874: PUSH
25875: LD_INT 0
25877: ST_TO_ADDR
// if not array or not value in array then
25878: LD_VAR 0 1
25882: NOT
25883: PUSH
25884: LD_VAR 0 2
25888: PUSH
25889: LD_VAR 0 1
25893: IN
25894: NOT
25895: OR
25896: IFFALSE 25900
// exit ;
25898: GO 25954
// for i = 1 to array do
25900: LD_ADDR_VAR 0 4
25904: PUSH
25905: DOUBLE
25906: LD_INT 1
25908: DEC
25909: ST_TO_ADDR
25910: LD_VAR 0 1
25914: PUSH
25915: FOR_TO
25916: IFFALSE 25952
// if value = array [ i ] then
25918: LD_VAR 0 2
25922: PUSH
25923: LD_VAR 0 1
25927: PUSH
25928: LD_VAR 0 4
25932: ARRAY
25933: EQUAL
25934: IFFALSE 25950
// begin result := i ;
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: LD_VAR 0 4
25945: ST_TO_ADDR
// exit ;
25946: POP
25947: POP
25948: GO 25954
// end ;
25950: GO 25915
25952: POP
25953: POP
// end ;
25954: LD_VAR 0 3
25958: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25959: LD_INT 0
25961: PPUSH
// vc_chassis := chassis ;
25962: LD_ADDR_OWVAR 37
25966: PUSH
25967: LD_VAR 0 1
25971: ST_TO_ADDR
// vc_engine := engine ;
25972: LD_ADDR_OWVAR 39
25976: PUSH
25977: LD_VAR 0 2
25981: ST_TO_ADDR
// vc_control := control ;
25982: LD_ADDR_OWVAR 38
25986: PUSH
25987: LD_VAR 0 3
25991: ST_TO_ADDR
// vc_weapon := weapon ;
25992: LD_ADDR_OWVAR 40
25996: PUSH
25997: LD_VAR 0 4
26001: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26002: LD_ADDR_OWVAR 41
26006: PUSH
26007: LD_VAR 0 5
26011: ST_TO_ADDR
// end ;
26012: LD_VAR 0 6
26016: RET
// export function WantPlant ( unit ) ; var task ; begin
26017: LD_INT 0
26019: PPUSH
26020: PPUSH
// result := false ;
26021: LD_ADDR_VAR 0 2
26025: PUSH
26026: LD_INT 0
26028: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26029: LD_ADDR_VAR 0 3
26033: PUSH
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 437
26043: ST_TO_ADDR
// if task then
26044: LD_VAR 0 3
26048: IFFALSE 26076
// if task [ 1 ] [ 1 ] = p then
26050: LD_VAR 0 3
26054: PUSH
26055: LD_INT 1
26057: ARRAY
26058: PUSH
26059: LD_INT 1
26061: ARRAY
26062: PUSH
26063: LD_STRING p
26065: EQUAL
26066: IFFALSE 26076
// result := true ;
26068: LD_ADDR_VAR 0 2
26072: PUSH
26073: LD_INT 1
26075: ST_TO_ADDR
// end ;
26076: LD_VAR 0 2
26080: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26081: LD_INT 0
26083: PPUSH
26084: PPUSH
26085: PPUSH
26086: PPUSH
// if pos < 1 then
26087: LD_VAR 0 2
26091: PUSH
26092: LD_INT 1
26094: LESS
26095: IFFALSE 26099
// exit ;
26097: GO 26402
// if pos = 1 then
26099: LD_VAR 0 2
26103: PUSH
26104: LD_INT 1
26106: EQUAL
26107: IFFALSE 26140
// result := Replace ( arr , pos [ 1 ] , value ) else
26109: LD_ADDR_VAR 0 4
26113: PUSH
26114: LD_VAR 0 1
26118: PPUSH
26119: LD_VAR 0 2
26123: PUSH
26124: LD_INT 1
26126: ARRAY
26127: PPUSH
26128: LD_VAR 0 3
26132: PPUSH
26133: CALL_OW 1
26137: ST_TO_ADDR
26138: GO 26402
// begin tmp := arr ;
26140: LD_ADDR_VAR 0 6
26144: PUSH
26145: LD_VAR 0 1
26149: ST_TO_ADDR
// s_arr := [ tmp ] ;
26150: LD_ADDR_VAR 0 7
26154: PUSH
26155: LD_VAR 0 6
26159: PUSH
26160: EMPTY
26161: LIST
26162: ST_TO_ADDR
// for i = 1 to pos - 1 do
26163: LD_ADDR_VAR 0 5
26167: PUSH
26168: DOUBLE
26169: LD_INT 1
26171: DEC
26172: ST_TO_ADDR
26173: LD_VAR 0 2
26177: PUSH
26178: LD_INT 1
26180: MINUS
26181: PUSH
26182: FOR_TO
26183: IFFALSE 26228
// begin tmp := tmp [ pos [ i ] ] ;
26185: LD_ADDR_VAR 0 6
26189: PUSH
26190: LD_VAR 0 6
26194: PUSH
26195: LD_VAR 0 2
26199: PUSH
26200: LD_VAR 0 5
26204: ARRAY
26205: ARRAY
26206: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26207: LD_ADDR_VAR 0 7
26211: PUSH
26212: LD_VAR 0 7
26216: PUSH
26217: LD_VAR 0 6
26221: PUSH
26222: EMPTY
26223: LIST
26224: ADD
26225: ST_TO_ADDR
// end ;
26226: GO 26182
26228: POP
26229: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26230: LD_ADDR_VAR 0 6
26234: PUSH
26235: LD_VAR 0 6
26239: PPUSH
26240: LD_VAR 0 2
26244: PUSH
26245: LD_VAR 0 2
26249: ARRAY
26250: PPUSH
26251: LD_VAR 0 3
26255: PPUSH
26256: CALL_OW 1
26260: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26261: LD_ADDR_VAR 0 7
26265: PUSH
26266: LD_VAR 0 7
26270: PPUSH
26271: LD_VAR 0 7
26275: PPUSH
26276: LD_VAR 0 6
26280: PPUSH
26281: CALL_OW 1
26285: ST_TO_ADDR
// for i = s_arr downto 2 do
26286: LD_ADDR_VAR 0 5
26290: PUSH
26291: DOUBLE
26292: LD_VAR 0 7
26296: INC
26297: ST_TO_ADDR
26298: LD_INT 2
26300: PUSH
26301: FOR_DOWNTO
26302: IFFALSE 26386
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26304: LD_ADDR_VAR 0 6
26308: PUSH
26309: LD_VAR 0 7
26313: PUSH
26314: LD_VAR 0 5
26318: PUSH
26319: LD_INT 1
26321: MINUS
26322: ARRAY
26323: PPUSH
26324: LD_VAR 0 2
26328: PUSH
26329: LD_VAR 0 5
26333: PUSH
26334: LD_INT 1
26336: MINUS
26337: ARRAY
26338: PPUSH
26339: LD_VAR 0 7
26343: PUSH
26344: LD_VAR 0 5
26348: ARRAY
26349: PPUSH
26350: CALL_OW 1
26354: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26355: LD_ADDR_VAR 0 7
26359: PUSH
26360: LD_VAR 0 7
26364: PPUSH
26365: LD_VAR 0 5
26369: PUSH
26370: LD_INT 1
26372: MINUS
26373: PPUSH
26374: LD_VAR 0 6
26378: PPUSH
26379: CALL_OW 1
26383: ST_TO_ADDR
// end ;
26384: GO 26301
26386: POP
26387: POP
// result := s_arr [ 1 ] ;
26388: LD_ADDR_VAR 0 4
26392: PUSH
26393: LD_VAR 0 7
26397: PUSH
26398: LD_INT 1
26400: ARRAY
26401: ST_TO_ADDR
// end ; end ;
26402: LD_VAR 0 4
26406: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26407: LD_INT 0
26409: PPUSH
26410: PPUSH
// if not list then
26411: LD_VAR 0 1
26415: NOT
26416: IFFALSE 26420
// exit ;
26418: GO 26511
// i := list [ pos1 ] ;
26420: LD_ADDR_VAR 0 5
26424: PUSH
26425: LD_VAR 0 1
26429: PUSH
26430: LD_VAR 0 2
26434: ARRAY
26435: ST_TO_ADDR
// if not i then
26436: LD_VAR 0 5
26440: NOT
26441: IFFALSE 26445
// exit ;
26443: GO 26511
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: LD_VAR 0 1
26454: PPUSH
26455: LD_VAR 0 2
26459: PPUSH
26460: LD_VAR 0 1
26464: PUSH
26465: LD_VAR 0 3
26469: ARRAY
26470: PPUSH
26471: CALL_OW 1
26475: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26476: LD_ADDR_VAR 0 1
26480: PUSH
26481: LD_VAR 0 1
26485: PPUSH
26486: LD_VAR 0 3
26490: PPUSH
26491: LD_VAR 0 5
26495: PPUSH
26496: CALL_OW 1
26500: ST_TO_ADDR
// result := list ;
26501: LD_ADDR_VAR 0 4
26505: PUSH
26506: LD_VAR 0 1
26510: ST_TO_ADDR
// end ;
26511: LD_VAR 0 4
26515: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26516: LD_INT 0
26518: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: LD_VAR 0 1
26528: PPUSH
26529: CALL_OW 250
26533: PPUSH
26534: LD_VAR 0 1
26538: PPUSH
26539: CALL_OW 251
26543: PPUSH
26544: LD_VAR 0 2
26548: PPUSH
26549: LD_VAR 0 3
26553: PPUSH
26554: LD_VAR 0 4
26558: PPUSH
26559: CALL 26569 0 5
26563: ST_TO_ADDR
// end ;
26564: LD_VAR 0 5
26568: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26569: LD_INT 0
26571: PPUSH
26572: PPUSH
26573: PPUSH
26574: PPUSH
// if not list then
26575: LD_VAR 0 3
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26972
// result := [ ] ;
26584: LD_ADDR_VAR 0 6
26588: PUSH
26589: EMPTY
26590: ST_TO_ADDR
// for i in list do
26591: LD_ADDR_VAR 0 7
26595: PUSH
26596: LD_VAR 0 3
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26804
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26604: LD_ADDR_VAR 0 9
26608: PUSH
26609: LD_VAR 0 7
26613: PPUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: LD_VAR 0 2
26623: PPUSH
26624: CALL_OW 297
26628: ST_TO_ADDR
// if not result then
26629: LD_VAR 0 6
26633: NOT
26634: IFFALSE 26660
// result := [ [ i , tmp ] ] else
26636: LD_ADDR_VAR 0 6
26640: PUSH
26641: LD_VAR 0 7
26645: PUSH
26646: LD_VAR 0 9
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: ST_TO_ADDR
26658: GO 26802
// begin if result [ result ] [ 2 ] < tmp then
26660: LD_VAR 0 6
26664: PUSH
26665: LD_VAR 0 6
26669: ARRAY
26670: PUSH
26671: LD_INT 2
26673: ARRAY
26674: PUSH
26675: LD_VAR 0 9
26679: LESS
26680: IFFALSE 26722
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26682: LD_ADDR_VAR 0 6
26686: PUSH
26687: LD_VAR 0 6
26691: PPUSH
26692: LD_VAR 0 6
26696: PUSH
26697: LD_INT 1
26699: PLUS
26700: PPUSH
26701: LD_VAR 0 7
26705: PUSH
26706: LD_VAR 0 9
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PPUSH
26715: CALL_OW 2
26719: ST_TO_ADDR
26720: GO 26802
// for j = 1 to result do
26722: LD_ADDR_VAR 0 8
26726: PUSH
26727: DOUBLE
26728: LD_INT 1
26730: DEC
26731: ST_TO_ADDR
26732: LD_VAR 0 6
26736: PUSH
26737: FOR_TO
26738: IFFALSE 26800
// begin if tmp < result [ j ] [ 2 ] then
26740: LD_VAR 0 9
26744: PUSH
26745: LD_VAR 0 6
26749: PUSH
26750: LD_VAR 0 8
26754: ARRAY
26755: PUSH
26756: LD_INT 2
26758: ARRAY
26759: LESS
26760: IFFALSE 26798
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26762: LD_ADDR_VAR 0 6
26766: PUSH
26767: LD_VAR 0 6
26771: PPUSH
26772: LD_VAR 0 8
26776: PPUSH
26777: LD_VAR 0 7
26781: PUSH
26782: LD_VAR 0 9
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 2
26795: ST_TO_ADDR
// break ;
26796: GO 26800
// end ; end ;
26798: GO 26737
26800: POP
26801: POP
// end ; end ;
26802: GO 26601
26804: POP
26805: POP
// if result and not asc then
26806: LD_VAR 0 6
26810: PUSH
26811: LD_VAR 0 4
26815: NOT
26816: AND
26817: IFFALSE 26892
// begin tmp := result ;
26819: LD_ADDR_VAR 0 9
26823: PUSH
26824: LD_VAR 0 6
26828: ST_TO_ADDR
// for i = tmp downto 1 do
26829: LD_ADDR_VAR 0 7
26833: PUSH
26834: DOUBLE
26835: LD_VAR 0 9
26839: INC
26840: ST_TO_ADDR
26841: LD_INT 1
26843: PUSH
26844: FOR_DOWNTO
26845: IFFALSE 26890
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26847: LD_ADDR_VAR 0 6
26851: PUSH
26852: LD_VAR 0 6
26856: PPUSH
26857: LD_VAR 0 9
26861: PUSH
26862: LD_VAR 0 7
26866: MINUS
26867: PUSH
26868: LD_INT 1
26870: PLUS
26871: PPUSH
26872: LD_VAR 0 9
26876: PUSH
26877: LD_VAR 0 7
26881: ARRAY
26882: PPUSH
26883: CALL_OW 1
26887: ST_TO_ADDR
26888: GO 26844
26890: POP
26891: POP
// end ; tmp := [ ] ;
26892: LD_ADDR_VAR 0 9
26896: PUSH
26897: EMPTY
26898: ST_TO_ADDR
// if mode then
26899: LD_VAR 0 5
26903: IFFALSE 26972
// begin for i = 1 to result do
26905: LD_ADDR_VAR 0 7
26909: PUSH
26910: DOUBLE
26911: LD_INT 1
26913: DEC
26914: ST_TO_ADDR
26915: LD_VAR 0 6
26919: PUSH
26920: FOR_TO
26921: IFFALSE 26960
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26923: LD_ADDR_VAR 0 9
26927: PUSH
26928: LD_VAR 0 9
26932: PPUSH
26933: LD_VAR 0 7
26937: PPUSH
26938: LD_VAR 0 6
26942: PUSH
26943: LD_VAR 0 7
26947: ARRAY
26948: PUSH
26949: LD_INT 1
26951: ARRAY
26952: PPUSH
26953: CALL_OW 1
26957: ST_TO_ADDR
26958: GO 26920
26960: POP
26961: POP
// result := tmp ;
26962: LD_ADDR_VAR 0 6
26966: PUSH
26967: LD_VAR 0 9
26971: ST_TO_ADDR
// end ; end ;
26972: LD_VAR 0 6
26976: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26977: LD_INT 0
26979: PPUSH
26980: PPUSH
26981: PPUSH
26982: PPUSH
26983: PPUSH
26984: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26985: LD_ADDR_VAR 0 5
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: EMPTY
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: ST_TO_ADDR
// if not x or not y then
27007: LD_VAR 0 2
27011: NOT
27012: PUSH
27013: LD_VAR 0 3
27017: NOT
27018: OR
27019: IFFALSE 27023
// exit ;
27021: GO 28675
// if not range then
27023: LD_VAR 0 4
27027: NOT
27028: IFFALSE 27038
// range := 10 ;
27030: LD_ADDR_VAR 0 4
27034: PUSH
27035: LD_INT 10
27037: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27038: LD_ADDR_VAR 0 8
27042: PUSH
27043: LD_INT 81
27045: PUSH
27046: LD_VAR 0 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 92
27057: PUSH
27058: LD_VAR 0 2
27062: PUSH
27063: LD_VAR 0 3
27067: PUSH
27068: LD_VAR 0 4
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: PPUSH
27101: CALL_OW 69
27105: ST_TO_ADDR
// if not tmp then
27106: LD_VAR 0 8
27110: NOT
27111: IFFALSE 27115
// exit ;
27113: GO 28675
// for i in tmp do
27115: LD_ADDR_VAR 0 6
27119: PUSH
27120: LD_VAR 0 8
27124: PUSH
27125: FOR_IN
27126: IFFALSE 28650
// begin points := [ 0 , 0 , 0 ] ;
27128: LD_ADDR_VAR 0 9
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: LIST
27146: ST_TO_ADDR
// bpoints := 1 ;
27147: LD_ADDR_VAR 0 10
27151: PUSH
27152: LD_INT 1
27154: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27155: LD_VAR 0 6
27159: PPUSH
27160: CALL_OW 247
27164: PUSH
27165: LD_INT 1
27167: DOUBLE
27168: EQUAL
27169: IFTRUE 27173
27171: GO 27751
27173: POP
// begin if GetClass ( i ) = 1 then
27174: LD_VAR 0 6
27178: PPUSH
27179: CALL_OW 257
27183: PUSH
27184: LD_INT 1
27186: EQUAL
27187: IFFALSE 27208
// points := [ 10 , 5 , 3 ] ;
27189: LD_ADDR_VAR 0 9
27193: PUSH
27194: LD_INT 10
27196: PUSH
27197: LD_INT 5
27199: PUSH
27200: LD_INT 3
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27208: LD_VAR 0 6
27212: PPUSH
27213: CALL_OW 257
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: LD_INT 3
27223: PUSH
27224: LD_INT 4
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: IN
27232: IFFALSE 27253
// points := [ 3 , 2 , 1 ] ;
27234: LD_ADDR_VAR 0 9
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27253: LD_VAR 0 6
27257: PPUSH
27258: CALL_OW 257
27262: PUSH
27263: LD_INT 5
27265: EQUAL
27266: IFFALSE 27287
// points := [ 130 , 5 , 2 ] ;
27268: LD_ADDR_VAR 0 9
27272: PUSH
27273: LD_INT 130
27275: PUSH
27276: LD_INT 5
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27287: LD_VAR 0 6
27291: PPUSH
27292: CALL_OW 257
27296: PUSH
27297: LD_INT 8
27299: EQUAL
27300: IFFALSE 27321
// points := [ 35 , 35 , 30 ] ;
27302: LD_ADDR_VAR 0 9
27306: PUSH
27307: LD_INT 35
27309: PUSH
27310: LD_INT 35
27312: PUSH
27313: LD_INT 30
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27321: LD_VAR 0 6
27325: PPUSH
27326: CALL_OW 257
27330: PUSH
27331: LD_INT 9
27333: EQUAL
27334: IFFALSE 27355
// points := [ 20 , 55 , 40 ] ;
27336: LD_ADDR_VAR 0 9
27340: PUSH
27341: LD_INT 20
27343: PUSH
27344: LD_INT 55
27346: PUSH
27347: LD_INT 40
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27355: LD_VAR 0 6
27359: PPUSH
27360: CALL_OW 257
27364: PUSH
27365: LD_INT 12
27367: PUSH
27368: LD_INT 16
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: IN
27375: IFFALSE 27396
// points := [ 5 , 3 , 2 ] ;
27377: LD_ADDR_VAR 0 9
27381: PUSH
27382: LD_INT 5
27384: PUSH
27385: LD_INT 3
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27396: LD_VAR 0 6
27400: PPUSH
27401: CALL_OW 257
27405: PUSH
27406: LD_INT 17
27408: EQUAL
27409: IFFALSE 27430
// points := [ 100 , 50 , 75 ] ;
27411: LD_ADDR_VAR 0 9
27415: PUSH
27416: LD_INT 100
27418: PUSH
27419: LD_INT 50
27421: PUSH
27422: LD_INT 75
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27430: LD_VAR 0 6
27434: PPUSH
27435: CALL_OW 257
27439: PUSH
27440: LD_INT 15
27442: EQUAL
27443: IFFALSE 27464
// points := [ 10 , 5 , 3 ] ;
27445: LD_ADDR_VAR 0 9
27449: PUSH
27450: LD_INT 10
27452: PUSH
27453: LD_INT 5
27455: PUSH
27456: LD_INT 3
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27464: LD_VAR 0 6
27468: PPUSH
27469: CALL_OW 257
27473: PUSH
27474: LD_INT 14
27476: EQUAL
27477: IFFALSE 27498
// points := [ 10 , 0 , 0 ] ;
27479: LD_ADDR_VAR 0 9
27483: PUSH
27484: LD_INT 10
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27498: LD_VAR 0 6
27502: PPUSH
27503: CALL_OW 257
27507: PUSH
27508: LD_INT 11
27510: EQUAL
27511: IFFALSE 27532
// points := [ 30 , 10 , 5 ] ;
27513: LD_ADDR_VAR 0 9
27517: PUSH
27518: LD_INT 30
27520: PUSH
27521: LD_INT 10
27523: PUSH
27524: LD_INT 5
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27532: LD_VAR 0 1
27536: PPUSH
27537: LD_INT 5
27539: PPUSH
27540: CALL_OW 321
27544: PUSH
27545: LD_INT 2
27547: EQUAL
27548: IFFALSE 27565
// bpoints := bpoints * 1.8 ;
27550: LD_ADDR_VAR 0 10
27554: PUSH
27555: LD_VAR 0 10
27559: PUSH
27560: LD_REAL  1.80000000000000E+0000
27563: MUL
27564: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27565: LD_VAR 0 6
27569: PPUSH
27570: CALL_OW 257
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: LD_INT 3
27583: PUSH
27584: LD_INT 4
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: IN
27593: PUSH
27594: LD_VAR 0 1
27598: PPUSH
27599: LD_INT 51
27601: PPUSH
27602: CALL_OW 321
27606: PUSH
27607: LD_INT 2
27609: EQUAL
27610: AND
27611: IFFALSE 27628
// bpoints := bpoints * 1.2 ;
27613: LD_ADDR_VAR 0 10
27617: PUSH
27618: LD_VAR 0 10
27622: PUSH
27623: LD_REAL  1.20000000000000E+0000
27626: MUL
27627: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27628: LD_VAR 0 6
27632: PPUSH
27633: CALL_OW 257
27637: PUSH
27638: LD_INT 5
27640: PUSH
27641: LD_INT 7
27643: PUSH
27644: LD_INT 9
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: IN
27652: PUSH
27653: LD_VAR 0 1
27657: PPUSH
27658: LD_INT 52
27660: PPUSH
27661: CALL_OW 321
27665: PUSH
27666: LD_INT 2
27668: EQUAL
27669: AND
27670: IFFALSE 27687
// bpoints := bpoints * 1.5 ;
27672: LD_ADDR_VAR 0 10
27676: PUSH
27677: LD_VAR 0 10
27681: PUSH
27682: LD_REAL  1.50000000000000E+0000
27685: MUL
27686: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27687: LD_VAR 0 1
27691: PPUSH
27692: LD_INT 66
27694: PPUSH
27695: CALL_OW 321
27699: PUSH
27700: LD_INT 2
27702: EQUAL
27703: IFFALSE 27720
// bpoints := bpoints * 1.1 ;
27705: LD_ADDR_VAR 0 10
27709: PUSH
27710: LD_VAR 0 10
27714: PUSH
27715: LD_REAL  1.10000000000000E+0000
27718: MUL
27719: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27720: LD_ADDR_VAR 0 10
27724: PUSH
27725: LD_VAR 0 10
27729: PUSH
27730: LD_VAR 0 6
27734: PPUSH
27735: LD_INT 1
27737: PPUSH
27738: CALL_OW 259
27742: PUSH
27743: LD_REAL  1.15000000000000E+0000
27746: MUL
27747: MUL
27748: ST_TO_ADDR
// end ; unit_vehicle :
27749: GO 28579
27751: LD_INT 2
27753: DOUBLE
27754: EQUAL
27755: IFTRUE 27759
27757: GO 28567
27759: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27760: LD_VAR 0 6
27764: PPUSH
27765: CALL_OW 264
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: LD_INT 42
27775: PUSH
27776: LD_INT 24
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: IN
27784: IFFALSE 27805
// points := [ 25 , 5 , 3 ] ;
27786: LD_ADDR_VAR 0 9
27790: PUSH
27791: LD_INT 25
27793: PUSH
27794: LD_INT 5
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 264
27814: PUSH
27815: LD_INT 4
27817: PUSH
27818: LD_INT 43
27820: PUSH
27821: LD_INT 25
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: IN
27829: IFFALSE 27850
// points := [ 40 , 15 , 5 ] ;
27831: LD_ADDR_VAR 0 9
27835: PUSH
27836: LD_INT 40
27838: PUSH
27839: LD_INT 15
27841: PUSH
27842: LD_INT 5
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27850: LD_VAR 0 6
27854: PPUSH
27855: CALL_OW 264
27859: PUSH
27860: LD_INT 3
27862: PUSH
27863: LD_INT 23
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: IN
27870: IFFALSE 27891
// points := [ 7 , 25 , 8 ] ;
27872: LD_ADDR_VAR 0 9
27876: PUSH
27877: LD_INT 7
27879: PUSH
27880: LD_INT 25
27882: PUSH
27883: LD_INT 8
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27891: LD_VAR 0 6
27895: PPUSH
27896: CALL_OW 264
27900: PUSH
27901: LD_INT 5
27903: PUSH
27904: LD_INT 27
27906: PUSH
27907: LD_INT 44
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: IN
27915: IFFALSE 27936
// points := [ 14 , 50 , 16 ] ;
27917: LD_ADDR_VAR 0 9
27921: PUSH
27922: LD_INT 14
27924: PUSH
27925: LD_INT 50
27927: PUSH
27928: LD_INT 16
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27936: LD_VAR 0 6
27940: PPUSH
27941: CALL_OW 264
27945: PUSH
27946: LD_INT 6
27948: PUSH
27949: LD_INT 46
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: IN
27956: IFFALSE 27977
// points := [ 32 , 120 , 70 ] ;
27958: LD_ADDR_VAR 0 9
27962: PUSH
27963: LD_INT 32
27965: PUSH
27966: LD_INT 120
27968: PUSH
27969: LD_INT 70
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27977: LD_VAR 0 6
27981: PPUSH
27982: CALL_OW 264
27986: PUSH
27987: LD_INT 7
27989: PUSH
27990: LD_INT 28
27992: PUSH
27993: LD_INT 45
27995: PUSH
27996: LD_EXP 81
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: IN
28007: IFFALSE 28028
// points := [ 35 , 20 , 45 ] ;
28009: LD_ADDR_VAR 0 9
28013: PUSH
28014: LD_INT 35
28016: PUSH
28017: LD_INT 20
28019: PUSH
28020: LD_INT 45
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28028: LD_VAR 0 6
28032: PPUSH
28033: CALL_OW 264
28037: PUSH
28038: LD_INT 47
28040: PUSH
28041: EMPTY
28042: LIST
28043: IN
28044: IFFALSE 28065
// points := [ 67 , 45 , 75 ] ;
28046: LD_ADDR_VAR 0 9
28050: PUSH
28051: LD_INT 67
28053: PUSH
28054: LD_INT 45
28056: PUSH
28057: LD_INT 75
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28065: LD_VAR 0 6
28069: PPUSH
28070: CALL_OW 264
28074: PUSH
28075: LD_INT 26
28077: PUSH
28078: EMPTY
28079: LIST
28080: IN
28081: IFFALSE 28102
// points := [ 120 , 30 , 80 ] ;
28083: LD_ADDR_VAR 0 9
28087: PUSH
28088: LD_INT 120
28090: PUSH
28091: LD_INT 30
28093: PUSH
28094: LD_INT 80
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28102: LD_VAR 0 6
28106: PPUSH
28107: CALL_OW 264
28111: PUSH
28112: LD_INT 22
28114: PUSH
28115: EMPTY
28116: LIST
28117: IN
28118: IFFALSE 28139
// points := [ 40 , 1 , 1 ] ;
28120: LD_ADDR_VAR 0 9
28124: PUSH
28125: LD_INT 40
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28139: LD_VAR 0 6
28143: PPUSH
28144: CALL_OW 264
28148: PUSH
28149: LD_INT 29
28151: PUSH
28152: EMPTY
28153: LIST
28154: IN
28155: IFFALSE 28176
// points := [ 70 , 200 , 400 ] ;
28157: LD_ADDR_VAR 0 9
28161: PUSH
28162: LD_INT 70
28164: PUSH
28165: LD_INT 200
28167: PUSH
28168: LD_INT 400
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: LIST
28175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28176: LD_VAR 0 6
28180: PPUSH
28181: CALL_OW 264
28185: PUSH
28186: LD_INT 14
28188: PUSH
28189: LD_INT 53
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: IN
28196: IFFALSE 28217
// points := [ 40 , 10 , 20 ] ;
28198: LD_ADDR_VAR 0 9
28202: PUSH
28203: LD_INT 40
28205: PUSH
28206: LD_INT 10
28208: PUSH
28209: LD_INT 20
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: LIST
28216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28217: LD_VAR 0 6
28221: PPUSH
28222: CALL_OW 264
28226: PUSH
28227: LD_INT 9
28229: PUSH
28230: EMPTY
28231: LIST
28232: IN
28233: IFFALSE 28254
// points := [ 5 , 70 , 20 ] ;
28235: LD_ADDR_VAR 0 9
28239: PUSH
28240: LD_INT 5
28242: PUSH
28243: LD_INT 70
28245: PUSH
28246: LD_INT 20
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: LIST
28253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28254: LD_VAR 0 6
28258: PPUSH
28259: CALL_OW 264
28263: PUSH
28264: LD_INT 10
28266: PUSH
28267: EMPTY
28268: LIST
28269: IN
28270: IFFALSE 28291
// points := [ 35 , 110 , 70 ] ;
28272: LD_ADDR_VAR 0 9
28276: PUSH
28277: LD_INT 35
28279: PUSH
28280: LD_INT 110
28282: PUSH
28283: LD_INT 70
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28291: LD_VAR 0 6
28295: PPUSH
28296: CALL_OW 265
28300: PUSH
28301: LD_INT 25
28303: EQUAL
28304: IFFALSE 28325
// points := [ 80 , 65 , 100 ] ;
28306: LD_ADDR_VAR 0 9
28310: PUSH
28311: LD_INT 80
28313: PUSH
28314: LD_INT 65
28316: PUSH
28317: LD_INT 100
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28325: LD_VAR 0 6
28329: PPUSH
28330: CALL_OW 263
28334: PUSH
28335: LD_INT 1
28337: EQUAL
28338: IFFALSE 28373
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28340: LD_ADDR_VAR 0 10
28344: PUSH
28345: LD_VAR 0 10
28349: PUSH
28350: LD_VAR 0 6
28354: PPUSH
28355: CALL_OW 311
28359: PPUSH
28360: LD_INT 3
28362: PPUSH
28363: CALL_OW 259
28367: PUSH
28368: LD_INT 4
28370: MUL
28371: MUL
28372: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28373: LD_VAR 0 6
28377: PPUSH
28378: CALL_OW 263
28382: PUSH
28383: LD_INT 2
28385: EQUAL
28386: IFFALSE 28437
// begin j := IsControledBy ( i ) ;
28388: LD_ADDR_VAR 0 7
28392: PUSH
28393: LD_VAR 0 6
28397: PPUSH
28398: CALL_OW 312
28402: ST_TO_ADDR
// if j then
28403: LD_VAR 0 7
28407: IFFALSE 28437
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28409: LD_ADDR_VAR 0 10
28413: PUSH
28414: LD_VAR 0 10
28418: PUSH
28419: LD_VAR 0 7
28423: PPUSH
28424: LD_INT 3
28426: PPUSH
28427: CALL_OW 259
28431: PUSH
28432: LD_INT 3
28434: MUL
28435: MUL
28436: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28437: LD_VAR 0 6
28441: PPUSH
28442: CALL_OW 264
28446: PUSH
28447: LD_INT 5
28449: PUSH
28450: LD_INT 6
28452: PUSH
28453: LD_INT 46
28455: PUSH
28456: LD_INT 44
28458: PUSH
28459: LD_INT 47
28461: PUSH
28462: LD_INT 45
28464: PUSH
28465: LD_INT 28
28467: PUSH
28468: LD_INT 7
28470: PUSH
28471: LD_INT 27
28473: PUSH
28474: LD_INT 29
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: IN
28489: PUSH
28490: LD_VAR 0 1
28494: PPUSH
28495: LD_INT 52
28497: PPUSH
28498: CALL_OW 321
28502: PUSH
28503: LD_INT 2
28505: EQUAL
28506: AND
28507: IFFALSE 28524
// bpoints := bpoints * 1.2 ;
28509: LD_ADDR_VAR 0 10
28513: PUSH
28514: LD_VAR 0 10
28518: PUSH
28519: LD_REAL  1.20000000000000E+0000
28522: MUL
28523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28524: LD_VAR 0 6
28528: PPUSH
28529: CALL_OW 264
28533: PUSH
28534: LD_INT 6
28536: PUSH
28537: LD_INT 46
28539: PUSH
28540: LD_INT 47
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: IN
28548: IFFALSE 28565
// bpoints := bpoints * 1.2 ;
28550: LD_ADDR_VAR 0 10
28554: PUSH
28555: LD_VAR 0 10
28559: PUSH
28560: LD_REAL  1.20000000000000E+0000
28563: MUL
28564: ST_TO_ADDR
// end ; unit_building :
28565: GO 28579
28567: LD_INT 3
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28578
28575: POP
// ; end ;
28576: GO 28579
28578: POP
// for j = 1 to 3 do
28579: LD_ADDR_VAR 0 7
28583: PUSH
28584: DOUBLE
28585: LD_INT 1
28587: DEC
28588: ST_TO_ADDR
28589: LD_INT 3
28591: PUSH
28592: FOR_TO
28593: IFFALSE 28646
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28595: LD_ADDR_VAR 0 5
28599: PUSH
28600: LD_VAR 0 5
28604: PPUSH
28605: LD_VAR 0 7
28609: PPUSH
28610: LD_VAR 0 5
28614: PUSH
28615: LD_VAR 0 7
28619: ARRAY
28620: PUSH
28621: LD_VAR 0 9
28625: PUSH
28626: LD_VAR 0 7
28630: ARRAY
28631: PUSH
28632: LD_VAR 0 10
28636: MUL
28637: PLUS
28638: PPUSH
28639: CALL_OW 1
28643: ST_TO_ADDR
28644: GO 28592
28646: POP
28647: POP
// end ;
28648: GO 27125
28650: POP
28651: POP
// result := Replace ( result , 4 , tmp ) ;
28652: LD_ADDR_VAR 0 5
28656: PUSH
28657: LD_VAR 0 5
28661: PPUSH
28662: LD_INT 4
28664: PPUSH
28665: LD_VAR 0 8
28669: PPUSH
28670: CALL_OW 1
28674: ST_TO_ADDR
// end ;
28675: LD_VAR 0 5
28679: RET
// export function DangerAtRange ( unit , range ) ; begin
28680: LD_INT 0
28682: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28683: LD_ADDR_VAR 0 3
28687: PUSH
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL_OW 255
28697: PPUSH
28698: LD_VAR 0 1
28702: PPUSH
28703: CALL_OW 250
28707: PPUSH
28708: LD_VAR 0 1
28712: PPUSH
28713: CALL_OW 251
28717: PPUSH
28718: LD_VAR 0 2
28722: PPUSH
28723: CALL 26977 0 4
28727: ST_TO_ADDR
// end ;
28728: LD_VAR 0 3
28732: RET
// export function DangerInArea ( side , area ) ; begin
28733: LD_INT 0
28735: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28736: LD_ADDR_VAR 0 3
28740: PUSH
28741: LD_VAR 0 2
28745: PPUSH
28746: LD_INT 81
28748: PUSH
28749: LD_VAR 0 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PPUSH
28758: CALL_OW 70
28762: ST_TO_ADDR
// end ;
28763: LD_VAR 0 3
28767: RET
// export function IsExtension ( b ) ; begin
28768: LD_INT 0
28770: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28771: LD_ADDR_VAR 0 2
28775: PUSH
28776: LD_VAR 0 1
28780: PUSH
28781: LD_INT 23
28783: PUSH
28784: LD_INT 20
28786: PUSH
28787: LD_INT 22
28789: PUSH
28790: LD_INT 17
28792: PUSH
28793: LD_INT 24
28795: PUSH
28796: LD_INT 21
28798: PUSH
28799: LD_INT 19
28801: PUSH
28802: LD_INT 16
28804: PUSH
28805: LD_INT 25
28807: PUSH
28808: LD_INT 18
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: IN
28823: ST_TO_ADDR
// end ;
28824: LD_VAR 0 2
28828: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28829: LD_INT 0
28831: PPUSH
28832: PPUSH
28833: PPUSH
// result := [ ] ;
28834: LD_ADDR_VAR 0 4
28838: PUSH
28839: EMPTY
28840: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28841: LD_ADDR_VAR 0 5
28845: PUSH
28846: LD_VAR 0 2
28850: PPUSH
28851: LD_INT 21
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PPUSH
28861: CALL_OW 70
28865: ST_TO_ADDR
// if not tmp then
28866: LD_VAR 0 5
28870: NOT
28871: IFFALSE 28875
// exit ;
28873: GO 28939
// if checkLink then
28875: LD_VAR 0 3
28879: IFFALSE 28929
// begin for i in tmp do
28881: LD_ADDR_VAR 0 6
28885: PUSH
28886: LD_VAR 0 5
28890: PUSH
28891: FOR_IN
28892: IFFALSE 28927
// if GetBase ( i ) <> base then
28894: LD_VAR 0 6
28898: PPUSH
28899: CALL_OW 274
28903: PUSH
28904: LD_VAR 0 1
28908: NONEQUAL
28909: IFFALSE 28925
// ComLinkToBase ( base , i ) ;
28911: LD_VAR 0 1
28915: PPUSH
28916: LD_VAR 0 6
28920: PPUSH
28921: CALL_OW 169
28925: GO 28891
28927: POP
28928: POP
// end ; result := tmp ;
28929: LD_ADDR_VAR 0 4
28933: PUSH
28934: LD_VAR 0 5
28938: ST_TO_ADDR
// end ;
28939: LD_VAR 0 4
28943: RET
// export function ComComplete ( units , b ) ; var i ; begin
28944: LD_INT 0
28946: PPUSH
28947: PPUSH
// if not units then
28948: LD_VAR 0 1
28952: NOT
28953: IFFALSE 28957
// exit ;
28955: GO 29047
// for i in units do
28957: LD_ADDR_VAR 0 4
28961: PUSH
28962: LD_VAR 0 1
28966: PUSH
28967: FOR_IN
28968: IFFALSE 29045
// if BuildingStatus ( b ) = bs_build then
28970: LD_VAR 0 2
28974: PPUSH
28975: CALL_OW 461
28979: PUSH
28980: LD_INT 1
28982: EQUAL
28983: IFFALSE 29043
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28985: LD_VAR 0 4
28989: PPUSH
28990: LD_STRING h
28992: PUSH
28993: LD_VAR 0 2
28997: PPUSH
28998: CALL_OW 250
29002: PUSH
29003: LD_VAR 0 2
29007: PPUSH
29008: CALL_OW 251
29012: PUSH
29013: LD_VAR 0 2
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: PPUSH
29039: CALL_OW 446
29043: GO 28967
29045: POP
29046: POP
// end ;
29047: LD_VAR 0 3
29051: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29052: LD_INT 0
29054: PPUSH
29055: PPUSH
29056: PPUSH
29057: PPUSH
29058: PPUSH
29059: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29060: LD_VAR 0 1
29064: NOT
29065: PUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 263
29075: PUSH
29076: LD_INT 2
29078: NONEQUAL
29079: OR
29080: IFFALSE 29084
// exit ;
29082: GO 29400
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29084: LD_ADDR_VAR 0 6
29088: PUSH
29089: LD_INT 22
29091: PUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 255
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 2
29108: PUSH
29109: LD_INT 30
29111: PUSH
29112: LD_INT 36
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 34
29121: PUSH
29122: LD_INT 31
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 69
29142: ST_TO_ADDR
// if not tmp then
29143: LD_VAR 0 6
29147: NOT
29148: IFFALSE 29152
// exit ;
29150: GO 29400
// result := [ ] ;
29152: LD_ADDR_VAR 0 2
29156: PUSH
29157: EMPTY
29158: ST_TO_ADDR
// for i in tmp do
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: LD_VAR 0 6
29168: PUSH
29169: FOR_IN
29170: IFFALSE 29241
// begin t := UnitsInside ( i ) ;
29172: LD_ADDR_VAR 0 4
29176: PUSH
29177: LD_VAR 0 3
29181: PPUSH
29182: CALL_OW 313
29186: ST_TO_ADDR
// if t then
29187: LD_VAR 0 4
29191: IFFALSE 29239
// for j in t do
29193: LD_ADDR_VAR 0 7
29197: PUSH
29198: LD_VAR 0 4
29202: PUSH
29203: FOR_IN
29204: IFFALSE 29237
// result := Replace ( result , result + 1 , j ) ;
29206: LD_ADDR_VAR 0 2
29210: PUSH
29211: LD_VAR 0 2
29215: PPUSH
29216: LD_VAR 0 2
29220: PUSH
29221: LD_INT 1
29223: PLUS
29224: PPUSH
29225: LD_VAR 0 7
29229: PPUSH
29230: CALL_OW 1
29234: ST_TO_ADDR
29235: GO 29203
29237: POP
29238: POP
// end ;
29239: GO 29169
29241: POP
29242: POP
// if not result then
29243: LD_VAR 0 2
29247: NOT
29248: IFFALSE 29252
// exit ;
29250: GO 29400
// mech := result [ 1 ] ;
29252: LD_ADDR_VAR 0 5
29256: PUSH
29257: LD_VAR 0 2
29261: PUSH
29262: LD_INT 1
29264: ARRAY
29265: ST_TO_ADDR
// if result > 1 then
29266: LD_VAR 0 2
29270: PUSH
29271: LD_INT 1
29273: GREATER
29274: IFFALSE 29386
// begin for i = 2 to result do
29276: LD_ADDR_VAR 0 3
29280: PUSH
29281: DOUBLE
29282: LD_INT 2
29284: DEC
29285: ST_TO_ADDR
29286: LD_VAR 0 2
29290: PUSH
29291: FOR_TO
29292: IFFALSE 29384
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29294: LD_ADDR_VAR 0 4
29298: PUSH
29299: LD_VAR 0 2
29303: PUSH
29304: LD_VAR 0 3
29308: ARRAY
29309: PPUSH
29310: LD_INT 3
29312: PPUSH
29313: CALL_OW 259
29317: PUSH
29318: LD_VAR 0 2
29322: PUSH
29323: LD_VAR 0 3
29327: ARRAY
29328: PPUSH
29329: CALL_OW 432
29333: MINUS
29334: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29335: LD_VAR 0 4
29339: PUSH
29340: LD_VAR 0 5
29344: PPUSH
29345: LD_INT 3
29347: PPUSH
29348: CALL_OW 259
29352: PUSH
29353: LD_VAR 0 5
29357: PPUSH
29358: CALL_OW 432
29362: MINUS
29363: GREATEREQUAL
29364: IFFALSE 29382
// mech := result [ i ] ;
29366: LD_ADDR_VAR 0 5
29370: PUSH
29371: LD_VAR 0 2
29375: PUSH
29376: LD_VAR 0 3
29380: ARRAY
29381: ST_TO_ADDR
// end ;
29382: GO 29291
29384: POP
29385: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29386: LD_VAR 0 1
29390: PPUSH
29391: LD_VAR 0 5
29395: PPUSH
29396: CALL_OW 135
// end ;
29400: LD_VAR 0 2
29404: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29405: LD_INT 0
29407: PPUSH
29408: PPUSH
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
// result := [ ] ;
29420: LD_ADDR_VAR 0 7
29424: PUSH
29425: EMPTY
29426: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29427: LD_VAR 0 1
29431: PPUSH
29432: CALL_OW 266
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: IN
29447: NOT
29448: IFFALSE 29452
// exit ;
29450: GO 31086
// if name then
29452: LD_VAR 0 3
29456: IFFALSE 29472
// SetBName ( base_dep , name ) ;
29458: LD_VAR 0 1
29462: PPUSH
29463: LD_VAR 0 3
29467: PPUSH
29468: CALL_OW 500
// base := GetBase ( base_dep ) ;
29472: LD_ADDR_VAR 0 15
29476: PUSH
29477: LD_VAR 0 1
29481: PPUSH
29482: CALL_OW 274
29486: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29487: LD_ADDR_VAR 0 16
29491: PUSH
29492: LD_VAR 0 1
29496: PPUSH
29497: CALL_OW 255
29501: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29502: LD_ADDR_VAR 0 17
29506: PUSH
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 248
29516: ST_TO_ADDR
// if sources then
29517: LD_VAR 0 5
29521: IFFALSE 29568
// for i = 1 to 3 do
29523: LD_ADDR_VAR 0 8
29527: PUSH
29528: DOUBLE
29529: LD_INT 1
29531: DEC
29532: ST_TO_ADDR
29533: LD_INT 3
29535: PUSH
29536: FOR_TO
29537: IFFALSE 29566
// AddResourceType ( base , i , sources [ i ] ) ;
29539: LD_VAR 0 15
29543: PPUSH
29544: LD_VAR 0 8
29548: PPUSH
29549: LD_VAR 0 5
29553: PUSH
29554: LD_VAR 0 8
29558: ARRAY
29559: PPUSH
29560: CALL_OW 276
29564: GO 29536
29566: POP
29567: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29568: LD_ADDR_VAR 0 18
29572: PUSH
29573: LD_VAR 0 15
29577: PPUSH
29578: LD_VAR 0 2
29582: PPUSH
29583: LD_INT 1
29585: PPUSH
29586: CALL 28829 0 3
29590: ST_TO_ADDR
// InitHc ;
29591: CALL_OW 19
// InitUc ;
29595: CALL_OW 18
// uc_side := side ;
29599: LD_ADDR_OWVAR 20
29603: PUSH
29604: LD_VAR 0 16
29608: ST_TO_ADDR
// uc_nation := nation ;
29609: LD_ADDR_OWVAR 21
29613: PUSH
29614: LD_VAR 0 17
29618: ST_TO_ADDR
// if buildings then
29619: LD_VAR 0 18
29623: IFFALSE 30945
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29625: LD_ADDR_VAR 0 19
29629: PUSH
29630: LD_VAR 0 18
29634: PPUSH
29635: LD_INT 2
29637: PUSH
29638: LD_INT 30
29640: PUSH
29641: LD_INT 29
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 30
29650: PUSH
29651: LD_INT 30
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: PPUSH
29663: CALL_OW 72
29667: ST_TO_ADDR
// if tmp then
29668: LD_VAR 0 19
29672: IFFALSE 29720
// for i in tmp do
29674: LD_ADDR_VAR 0 8
29678: PUSH
29679: LD_VAR 0 19
29683: PUSH
29684: FOR_IN
29685: IFFALSE 29718
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29687: LD_VAR 0 8
29691: PPUSH
29692: CALL_OW 250
29696: PPUSH
29697: LD_VAR 0 8
29701: PPUSH
29702: CALL_OW 251
29706: PPUSH
29707: LD_VAR 0 16
29711: PPUSH
29712: CALL_OW 441
29716: GO 29684
29718: POP
29719: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29720: LD_VAR 0 18
29724: PPUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 30
29730: PUSH
29731: LD_INT 32
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 30
29740: PUSH
29741: LD_INT 33
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: PPUSH
29753: CALL_OW 72
29757: IFFALSE 29845
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29759: LD_ADDR_VAR 0 8
29763: PUSH
29764: LD_VAR 0 18
29768: PPUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 30
29774: PUSH
29775: LD_INT 32
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 30
29784: PUSH
29785: LD_INT 33
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: PPUSH
29797: CALL_OW 72
29801: PUSH
29802: FOR_IN
29803: IFFALSE 29843
// begin if not GetBWeapon ( i ) then
29805: LD_VAR 0 8
29809: PPUSH
29810: CALL_OW 269
29814: NOT
29815: IFFALSE 29841
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29817: LD_VAR 0 8
29821: PPUSH
29822: LD_VAR 0 8
29826: PPUSH
29827: LD_VAR 0 2
29831: PPUSH
29832: CALL 31091 0 2
29836: PPUSH
29837: CALL_OW 431
// end ;
29841: GO 29802
29843: POP
29844: POP
// end ; for i = 1 to personel do
29845: LD_ADDR_VAR 0 8
29849: PUSH
29850: DOUBLE
29851: LD_INT 1
29853: DEC
29854: ST_TO_ADDR
29855: LD_VAR 0 6
29859: PUSH
29860: FOR_TO
29861: IFFALSE 30925
// begin if i > 4 then
29863: LD_VAR 0 8
29867: PUSH
29868: LD_INT 4
29870: GREATER
29871: IFFALSE 29875
// break ;
29873: GO 30925
// case i of 1 :
29875: LD_VAR 0 8
29879: PUSH
29880: LD_INT 1
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29968
29888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29889: LD_ADDR_VAR 0 12
29893: PUSH
29894: LD_VAR 0 18
29898: PPUSH
29899: LD_INT 22
29901: PUSH
29902: LD_VAR 0 16
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 58
29913: PUSH
29914: EMPTY
29915: LIST
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: LD_INT 30
29922: PUSH
29923: LD_INT 32
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 30
29932: PUSH
29933: LD_INT 4
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 30
29942: PUSH
29943: LD_INT 5
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: LIST
29960: PPUSH
29961: CALL_OW 72
29965: ST_TO_ADDR
29966: GO 30190
29968: LD_INT 2
29970: DOUBLE
29971: EQUAL
29972: IFTRUE 29976
29974: GO 30038
29976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29977: LD_ADDR_VAR 0 12
29981: PUSH
29982: LD_VAR 0 18
29986: PPUSH
29987: LD_INT 22
29989: PUSH
29990: LD_VAR 0 16
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 30
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 30
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PPUSH
30031: CALL_OW 72
30035: ST_TO_ADDR
30036: GO 30190
30038: LD_INT 3
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30108
30046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30047: LD_ADDR_VAR 0 12
30051: PUSH
30052: LD_VAR 0 18
30056: PPUSH
30057: LD_INT 22
30059: PUSH
30060: LD_VAR 0 16
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: LD_INT 30
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 30
30084: PUSH
30085: LD_INT 3
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PPUSH
30101: CALL_OW 72
30105: ST_TO_ADDR
30106: GO 30190
30108: LD_INT 4
30110: DOUBLE
30111: EQUAL
30112: IFTRUE 30116
30114: GO 30189
30116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30117: LD_ADDR_VAR 0 12
30121: PUSH
30122: LD_VAR 0 18
30126: PPUSH
30127: LD_INT 22
30129: PUSH
30130: LD_VAR 0 16
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: PUSH
30142: LD_INT 30
30144: PUSH
30145: LD_INT 6
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 30
30154: PUSH
30155: LD_INT 7
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: LD_INT 8
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PPUSH
30182: CALL_OW 72
30186: ST_TO_ADDR
30187: GO 30190
30189: POP
// if i = 1 then
30190: LD_VAR 0 8
30194: PUSH
30195: LD_INT 1
30197: EQUAL
30198: IFFALSE 30309
// begin tmp := [ ] ;
30200: LD_ADDR_VAR 0 19
30204: PUSH
30205: EMPTY
30206: ST_TO_ADDR
// for j in f do
30207: LD_ADDR_VAR 0 9
30211: PUSH
30212: LD_VAR 0 12
30216: PUSH
30217: FOR_IN
30218: IFFALSE 30291
// if GetBType ( j ) = b_bunker then
30220: LD_VAR 0 9
30224: PPUSH
30225: CALL_OW 266
30229: PUSH
30230: LD_INT 32
30232: EQUAL
30233: IFFALSE 30260
// tmp := Insert ( tmp , 1 , j ) else
30235: LD_ADDR_VAR 0 19
30239: PUSH
30240: LD_VAR 0 19
30244: PPUSH
30245: LD_INT 1
30247: PPUSH
30248: LD_VAR 0 9
30252: PPUSH
30253: CALL_OW 2
30257: ST_TO_ADDR
30258: GO 30289
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30260: LD_ADDR_VAR 0 19
30264: PUSH
30265: LD_VAR 0 19
30269: PPUSH
30270: LD_VAR 0 19
30274: PUSH
30275: LD_INT 1
30277: PLUS
30278: PPUSH
30279: LD_VAR 0 9
30283: PPUSH
30284: CALL_OW 2
30288: ST_TO_ADDR
30289: GO 30217
30291: POP
30292: POP
// if tmp then
30293: LD_VAR 0 19
30297: IFFALSE 30309
// f := tmp ;
30299: LD_ADDR_VAR 0 12
30303: PUSH
30304: LD_VAR 0 19
30308: ST_TO_ADDR
// end ; x := personel [ i ] ;
30309: LD_ADDR_VAR 0 13
30313: PUSH
30314: LD_VAR 0 6
30318: PUSH
30319: LD_VAR 0 8
30323: ARRAY
30324: ST_TO_ADDR
// if x = - 1 then
30325: LD_VAR 0 13
30329: PUSH
30330: LD_INT 1
30332: NEG
30333: EQUAL
30334: IFFALSE 30543
// begin for j in f do
30336: LD_ADDR_VAR 0 9
30340: PUSH
30341: LD_VAR 0 12
30345: PUSH
30346: FOR_IN
30347: IFFALSE 30539
// repeat InitHc ;
30349: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30353: LD_VAR 0 9
30357: PPUSH
30358: CALL_OW 266
30362: PUSH
30363: LD_INT 5
30365: EQUAL
30366: IFFALSE 30436
// begin if UnitsInside ( j ) < 3 then
30368: LD_VAR 0 9
30372: PPUSH
30373: CALL_OW 313
30377: PUSH
30378: LD_INT 3
30380: LESS
30381: IFFALSE 30417
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30383: LD_INT 0
30385: PPUSH
30386: LD_INT 5
30388: PUSH
30389: LD_INT 8
30391: PUSH
30392: LD_INT 9
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: PUSH
30400: LD_VAR 0 17
30404: ARRAY
30405: PPUSH
30406: LD_VAR 0 4
30410: PPUSH
30411: CALL_OW 380
30415: GO 30434
// PrepareHuman ( false , i , skill ) ;
30417: LD_INT 0
30419: PPUSH
30420: LD_VAR 0 8
30424: PPUSH
30425: LD_VAR 0 4
30429: PPUSH
30430: CALL_OW 380
// end else
30434: GO 30453
// PrepareHuman ( false , i , skill ) ;
30436: LD_INT 0
30438: PPUSH
30439: LD_VAR 0 8
30443: PPUSH
30444: LD_VAR 0 4
30448: PPUSH
30449: CALL_OW 380
// un := CreateHuman ;
30453: LD_ADDR_VAR 0 14
30457: PUSH
30458: CALL_OW 44
30462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30463: LD_ADDR_VAR 0 7
30467: PUSH
30468: LD_VAR 0 7
30472: PPUSH
30473: LD_INT 1
30475: PPUSH
30476: LD_VAR 0 14
30480: PPUSH
30481: CALL_OW 2
30485: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30486: LD_VAR 0 14
30490: PPUSH
30491: LD_VAR 0 9
30495: PPUSH
30496: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30500: LD_VAR 0 9
30504: PPUSH
30505: CALL_OW 313
30509: PUSH
30510: LD_INT 6
30512: EQUAL
30513: PUSH
30514: LD_VAR 0 9
30518: PPUSH
30519: CALL_OW 266
30523: PUSH
30524: LD_INT 32
30526: PUSH
30527: LD_INT 31
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: IN
30534: OR
30535: IFFALSE 30349
30537: GO 30346
30539: POP
30540: POP
// end else
30541: GO 30923
// for j = 1 to x do
30543: LD_ADDR_VAR 0 9
30547: PUSH
30548: DOUBLE
30549: LD_INT 1
30551: DEC
30552: ST_TO_ADDR
30553: LD_VAR 0 13
30557: PUSH
30558: FOR_TO
30559: IFFALSE 30921
// begin InitHc ;
30561: CALL_OW 19
// if not f then
30565: LD_VAR 0 12
30569: NOT
30570: IFFALSE 30659
// begin PrepareHuman ( false , i , skill ) ;
30572: LD_INT 0
30574: PPUSH
30575: LD_VAR 0 8
30579: PPUSH
30580: LD_VAR 0 4
30584: PPUSH
30585: CALL_OW 380
// un := CreateHuman ;
30589: LD_ADDR_VAR 0 14
30593: PUSH
30594: CALL_OW 44
30598: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30599: LD_ADDR_VAR 0 7
30603: PUSH
30604: LD_VAR 0 7
30608: PPUSH
30609: LD_INT 1
30611: PPUSH
30612: LD_VAR 0 14
30616: PPUSH
30617: CALL_OW 2
30621: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30622: LD_VAR 0 14
30626: PPUSH
30627: LD_VAR 0 1
30631: PPUSH
30632: CALL_OW 250
30636: PPUSH
30637: LD_VAR 0 1
30641: PPUSH
30642: CALL_OW 251
30646: PPUSH
30647: LD_INT 10
30649: PPUSH
30650: LD_INT 0
30652: PPUSH
30653: CALL_OW 50
// continue ;
30657: GO 30558
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30659: LD_VAR 0 12
30663: PUSH
30664: LD_INT 1
30666: ARRAY
30667: PPUSH
30668: CALL_OW 313
30672: PUSH
30673: LD_VAR 0 12
30677: PUSH
30678: LD_INT 1
30680: ARRAY
30681: PPUSH
30682: CALL_OW 266
30686: PUSH
30687: LD_INT 32
30689: PUSH
30690: LD_INT 31
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: IN
30697: AND
30698: PUSH
30699: LD_VAR 0 12
30703: PUSH
30704: LD_INT 1
30706: ARRAY
30707: PPUSH
30708: CALL_OW 313
30712: PUSH
30713: LD_INT 6
30715: EQUAL
30716: OR
30717: IFFALSE 30737
// f := Delete ( f , 1 ) ;
30719: LD_ADDR_VAR 0 12
30723: PUSH
30724: LD_VAR 0 12
30728: PPUSH
30729: LD_INT 1
30731: PPUSH
30732: CALL_OW 3
30736: ST_TO_ADDR
// if not f then
30737: LD_VAR 0 12
30741: NOT
30742: IFFALSE 30760
// begin x := x + 2 ;
30744: LD_ADDR_VAR 0 13
30748: PUSH
30749: LD_VAR 0 13
30753: PUSH
30754: LD_INT 2
30756: PLUS
30757: ST_TO_ADDR
// continue ;
30758: GO 30558
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30760: LD_VAR 0 12
30764: PUSH
30765: LD_INT 1
30767: ARRAY
30768: PPUSH
30769: CALL_OW 266
30773: PUSH
30774: LD_INT 5
30776: EQUAL
30777: IFFALSE 30851
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30779: LD_VAR 0 12
30783: PUSH
30784: LD_INT 1
30786: ARRAY
30787: PPUSH
30788: CALL_OW 313
30792: PUSH
30793: LD_INT 3
30795: LESS
30796: IFFALSE 30832
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30798: LD_INT 0
30800: PPUSH
30801: LD_INT 5
30803: PUSH
30804: LD_INT 8
30806: PUSH
30807: LD_INT 9
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: LIST
30814: PUSH
30815: LD_VAR 0 17
30819: ARRAY
30820: PPUSH
30821: LD_VAR 0 4
30825: PPUSH
30826: CALL_OW 380
30830: GO 30849
// PrepareHuman ( false , i , skill ) ;
30832: LD_INT 0
30834: PPUSH
30835: LD_VAR 0 8
30839: PPUSH
30840: LD_VAR 0 4
30844: PPUSH
30845: CALL_OW 380
// end else
30849: GO 30868
// PrepareHuman ( false , i , skill ) ;
30851: LD_INT 0
30853: PPUSH
30854: LD_VAR 0 8
30858: PPUSH
30859: LD_VAR 0 4
30863: PPUSH
30864: CALL_OW 380
// un := CreateHuman ;
30868: LD_ADDR_VAR 0 14
30872: PUSH
30873: CALL_OW 44
30877: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30878: LD_ADDR_VAR 0 7
30882: PUSH
30883: LD_VAR 0 7
30887: PPUSH
30888: LD_INT 1
30890: PPUSH
30891: LD_VAR 0 14
30895: PPUSH
30896: CALL_OW 2
30900: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30901: LD_VAR 0 14
30905: PPUSH
30906: LD_VAR 0 12
30910: PUSH
30911: LD_INT 1
30913: ARRAY
30914: PPUSH
30915: CALL_OW 52
// end ;
30919: GO 30558
30921: POP
30922: POP
// end ;
30923: GO 29860
30925: POP
30926: POP
// result := result ^ buildings ;
30927: LD_ADDR_VAR 0 7
30931: PUSH
30932: LD_VAR 0 7
30936: PUSH
30937: LD_VAR 0 18
30941: ADD
30942: ST_TO_ADDR
// end else
30943: GO 31086
// begin for i = 1 to personel do
30945: LD_ADDR_VAR 0 8
30949: PUSH
30950: DOUBLE
30951: LD_INT 1
30953: DEC
30954: ST_TO_ADDR
30955: LD_VAR 0 6
30959: PUSH
30960: FOR_TO
30961: IFFALSE 31084
// begin if i > 4 then
30963: LD_VAR 0 8
30967: PUSH
30968: LD_INT 4
30970: GREATER
30971: IFFALSE 30975
// break ;
30973: GO 31084
// x := personel [ i ] ;
30975: LD_ADDR_VAR 0 13
30979: PUSH
30980: LD_VAR 0 6
30984: PUSH
30985: LD_VAR 0 8
30989: ARRAY
30990: ST_TO_ADDR
// if x = - 1 then
30991: LD_VAR 0 13
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: EQUAL
31000: IFFALSE 31004
// continue ;
31002: GO 30960
// PrepareHuman ( false , i , skill ) ;
31004: LD_INT 0
31006: PPUSH
31007: LD_VAR 0 8
31011: PPUSH
31012: LD_VAR 0 4
31016: PPUSH
31017: CALL_OW 380
// un := CreateHuman ;
31021: LD_ADDR_VAR 0 14
31025: PUSH
31026: CALL_OW 44
31030: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31031: LD_VAR 0 14
31035: PPUSH
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 250
31045: PPUSH
31046: LD_VAR 0 1
31050: PPUSH
31051: CALL_OW 251
31055: PPUSH
31056: LD_INT 10
31058: PPUSH
31059: LD_INT 0
31061: PPUSH
31062: CALL_OW 50
// result := result ^ un ;
31066: LD_ADDR_VAR 0 7
31070: PUSH
31071: LD_VAR 0 7
31075: PUSH
31076: LD_VAR 0 14
31080: ADD
31081: ST_TO_ADDR
// end ;
31082: GO 30960
31084: POP
31085: POP
// end ; end ;
31086: LD_VAR 0 7
31090: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31091: LD_INT 0
31093: PPUSH
31094: PPUSH
31095: PPUSH
31096: PPUSH
31097: PPUSH
31098: PPUSH
31099: PPUSH
31100: PPUSH
31101: PPUSH
31102: PPUSH
31103: PPUSH
31104: PPUSH
31105: PPUSH
31106: PPUSH
31107: PPUSH
31108: PPUSH
// result := false ;
31109: LD_ADDR_VAR 0 3
31113: PUSH
31114: LD_INT 0
31116: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31117: LD_VAR 0 1
31121: NOT
31122: PUSH
31123: LD_VAR 0 1
31127: PPUSH
31128: CALL_OW 266
31132: PUSH
31133: LD_INT 32
31135: PUSH
31136: LD_INT 33
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: IN
31143: NOT
31144: OR
31145: IFFALSE 31149
// exit ;
31147: GO 32258
// nat := GetNation ( tower ) ;
31149: LD_ADDR_VAR 0 12
31153: PUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL_OW 248
31163: ST_TO_ADDR
// side := GetSide ( tower ) ;
31164: LD_ADDR_VAR 0 16
31168: PUSH
31169: LD_VAR 0 1
31173: PPUSH
31174: CALL_OW 255
31178: ST_TO_ADDR
// x := GetX ( tower ) ;
31179: LD_ADDR_VAR 0 10
31183: PUSH
31184: LD_VAR 0 1
31188: PPUSH
31189: CALL_OW 250
31193: ST_TO_ADDR
// y := GetY ( tower ) ;
31194: LD_ADDR_VAR 0 11
31198: PUSH
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 251
31208: ST_TO_ADDR
// if not x or not y then
31209: LD_VAR 0 10
31213: NOT
31214: PUSH
31215: LD_VAR 0 11
31219: NOT
31220: OR
31221: IFFALSE 31225
// exit ;
31223: GO 32258
// weapon := 0 ;
31225: LD_ADDR_VAR 0 18
31229: PUSH
31230: LD_INT 0
31232: ST_TO_ADDR
// fac_list := [ ] ;
31233: LD_ADDR_VAR 0 17
31237: PUSH
31238: EMPTY
31239: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31240: LD_ADDR_VAR 0 6
31244: PUSH
31245: LD_VAR 0 1
31249: PPUSH
31250: CALL_OW 274
31254: PPUSH
31255: LD_VAR 0 2
31259: PPUSH
31260: LD_INT 0
31262: PPUSH
31263: CALL 28829 0 3
31267: PPUSH
31268: LD_INT 30
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PPUSH
31278: CALL_OW 72
31282: ST_TO_ADDR
// if not factories then
31283: LD_VAR 0 6
31287: NOT
31288: IFFALSE 31292
// exit ;
31290: GO 32258
// for i in factories do
31292: LD_ADDR_VAR 0 8
31296: PUSH
31297: LD_VAR 0 6
31301: PUSH
31302: FOR_IN
31303: IFFALSE 31328
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31305: LD_ADDR_VAR 0 17
31309: PUSH
31310: LD_VAR 0 17
31314: PUSH
31315: LD_VAR 0 8
31319: PPUSH
31320: CALL_OW 478
31324: UNION
31325: ST_TO_ADDR
31326: GO 31302
31328: POP
31329: POP
// if not fac_list then
31330: LD_VAR 0 17
31334: NOT
31335: IFFALSE 31339
// exit ;
31337: GO 32258
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31339: LD_ADDR_VAR 0 5
31343: PUSH
31344: LD_INT 4
31346: PUSH
31347: LD_INT 5
31349: PUSH
31350: LD_INT 9
31352: PUSH
31353: LD_INT 10
31355: PUSH
31356: LD_INT 6
31358: PUSH
31359: LD_INT 7
31361: PUSH
31362: LD_INT 11
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 27
31376: PUSH
31377: LD_INT 28
31379: PUSH
31380: LD_INT 26
31382: PUSH
31383: LD_INT 30
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 43
31394: PUSH
31395: LD_INT 44
31397: PUSH
31398: LD_INT 46
31400: PUSH
31401: LD_INT 45
31403: PUSH
31404: LD_INT 47
31406: PUSH
31407: LD_INT 49
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: LIST
31422: PUSH
31423: LD_VAR 0 12
31427: ARRAY
31428: ST_TO_ADDR
// list := list isect fac_list ;
31429: LD_ADDR_VAR 0 5
31433: PUSH
31434: LD_VAR 0 5
31438: PUSH
31439: LD_VAR 0 17
31443: ISECT
31444: ST_TO_ADDR
// if not list then
31445: LD_VAR 0 5
31449: NOT
31450: IFFALSE 31454
// exit ;
31452: GO 32258
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31454: LD_VAR 0 12
31458: PUSH
31459: LD_INT 3
31461: EQUAL
31462: PUSH
31463: LD_INT 49
31465: PUSH
31466: LD_VAR 0 5
31470: IN
31471: AND
31472: PUSH
31473: LD_INT 31
31475: PPUSH
31476: LD_VAR 0 16
31480: PPUSH
31481: CALL_OW 321
31485: PUSH
31486: LD_INT 2
31488: EQUAL
31489: AND
31490: IFFALSE 31550
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31492: LD_INT 22
31494: PUSH
31495: LD_VAR 0 16
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 35
31506: PUSH
31507: LD_INT 49
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 91
31516: PUSH
31517: LD_VAR 0 1
31521: PUSH
31522: LD_INT 10
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: PPUSH
31535: CALL_OW 69
31539: NOT
31540: IFFALSE 31550
// weapon := ru_time_lapser ;
31542: LD_ADDR_VAR 0 18
31546: PUSH
31547: LD_INT 49
31549: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31550: LD_VAR 0 12
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: IN
31565: PUSH
31566: LD_INT 11
31568: PUSH
31569: LD_VAR 0 5
31573: IN
31574: PUSH
31575: LD_INT 30
31577: PUSH
31578: LD_VAR 0 5
31582: IN
31583: OR
31584: AND
31585: PUSH
31586: LD_INT 6
31588: PPUSH
31589: LD_VAR 0 16
31593: PPUSH
31594: CALL_OW 321
31598: PUSH
31599: LD_INT 2
31601: EQUAL
31602: AND
31603: IFFALSE 31768
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31605: LD_INT 22
31607: PUSH
31608: LD_VAR 0 16
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 35
31622: PUSH
31623: LD_INT 11
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 35
31632: PUSH
31633: LD_INT 30
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 91
31647: PUSH
31648: LD_VAR 0 1
31652: PUSH
31653: LD_INT 18
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: PPUSH
31666: CALL_OW 69
31670: NOT
31671: PUSH
31672: LD_INT 22
31674: PUSH
31675: LD_VAR 0 16
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 30
31689: PUSH
31690: LD_INT 32
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 30
31699: PUSH
31700: LD_INT 33
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 91
31714: PUSH
31715: LD_VAR 0 1
31719: PUSH
31720: LD_INT 12
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: PUSH
31733: EMPTY
31734: LIST
31735: PPUSH
31736: CALL_OW 69
31740: PUSH
31741: LD_INT 2
31743: GREATER
31744: AND
31745: IFFALSE 31768
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31747: LD_ADDR_VAR 0 18
31751: PUSH
31752: LD_INT 11
31754: PUSH
31755: LD_INT 30
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_VAR 0 12
31766: ARRAY
31767: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31768: LD_VAR 0 18
31772: NOT
31773: PUSH
31774: LD_INT 40
31776: PPUSH
31777: LD_VAR 0 16
31781: PPUSH
31782: CALL_OW 321
31786: PUSH
31787: LD_INT 2
31789: EQUAL
31790: AND
31791: PUSH
31792: LD_INT 7
31794: PUSH
31795: LD_VAR 0 5
31799: IN
31800: PUSH
31801: LD_INT 28
31803: PUSH
31804: LD_VAR 0 5
31808: IN
31809: OR
31810: PUSH
31811: LD_INT 45
31813: PUSH
31814: LD_VAR 0 5
31818: IN
31819: OR
31820: AND
31821: IFFALSE 32075
// begin hex := GetHexInfo ( x , y ) ;
31823: LD_ADDR_VAR 0 4
31827: PUSH
31828: LD_VAR 0 10
31832: PPUSH
31833: LD_VAR 0 11
31837: PPUSH
31838: CALL_OW 546
31842: ST_TO_ADDR
// if hex [ 1 ] then
31843: LD_VAR 0 4
31847: PUSH
31848: LD_INT 1
31850: ARRAY
31851: IFFALSE 31855
// exit ;
31853: GO 32258
// height := hex [ 2 ] ;
31855: LD_ADDR_VAR 0 15
31859: PUSH
31860: LD_VAR 0 4
31864: PUSH
31865: LD_INT 2
31867: ARRAY
31868: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31869: LD_ADDR_VAR 0 14
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: LD_INT 3
31882: PUSH
31883: LD_INT 5
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: ST_TO_ADDR
// for i in tmp do
31892: LD_ADDR_VAR 0 8
31896: PUSH
31897: LD_VAR 0 14
31901: PUSH
31902: FOR_IN
31903: IFFALSE 32073
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31905: LD_ADDR_VAR 0 9
31909: PUSH
31910: LD_VAR 0 10
31914: PPUSH
31915: LD_VAR 0 8
31919: PPUSH
31920: LD_INT 5
31922: PPUSH
31923: CALL_OW 272
31927: PUSH
31928: LD_VAR 0 11
31932: PPUSH
31933: LD_VAR 0 8
31937: PPUSH
31938: LD_INT 5
31940: PPUSH
31941: CALL_OW 273
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31950: LD_VAR 0 9
31954: PUSH
31955: LD_INT 1
31957: ARRAY
31958: PPUSH
31959: LD_VAR 0 9
31963: PUSH
31964: LD_INT 2
31966: ARRAY
31967: PPUSH
31968: CALL_OW 488
31972: IFFALSE 32071
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31974: LD_ADDR_VAR 0 4
31978: PUSH
31979: LD_VAR 0 9
31983: PUSH
31984: LD_INT 1
31986: ARRAY
31987: PPUSH
31988: LD_VAR 0 9
31992: PUSH
31993: LD_INT 2
31995: ARRAY
31996: PPUSH
31997: CALL_OW 546
32001: ST_TO_ADDR
// if hex [ 1 ] then
32002: LD_VAR 0 4
32006: PUSH
32007: LD_INT 1
32009: ARRAY
32010: IFFALSE 32014
// continue ;
32012: GO 31902
// h := hex [ 2 ] ;
32014: LD_ADDR_VAR 0 13
32018: PUSH
32019: LD_VAR 0 4
32023: PUSH
32024: LD_INT 2
32026: ARRAY
32027: ST_TO_ADDR
// if h + 7 < height then
32028: LD_VAR 0 13
32032: PUSH
32033: LD_INT 7
32035: PLUS
32036: PUSH
32037: LD_VAR 0 15
32041: LESS
32042: IFFALSE 32071
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32044: LD_ADDR_VAR 0 18
32048: PUSH
32049: LD_INT 7
32051: PUSH
32052: LD_INT 28
32054: PUSH
32055: LD_INT 45
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: PUSH
32063: LD_VAR 0 12
32067: ARRAY
32068: ST_TO_ADDR
// break ;
32069: GO 32073
// end ; end ; end ;
32071: GO 31902
32073: POP
32074: POP
// end ; if not weapon then
32075: LD_VAR 0 18
32079: NOT
32080: IFFALSE 32140
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32082: LD_ADDR_VAR 0 5
32086: PUSH
32087: LD_VAR 0 5
32091: PUSH
32092: LD_INT 11
32094: PUSH
32095: LD_INT 30
32097: PUSH
32098: LD_INT 49
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: DIFF
32106: ST_TO_ADDR
// if not list then
32107: LD_VAR 0 5
32111: NOT
32112: IFFALSE 32116
// exit ;
32114: GO 32258
// weapon := list [ rand ( 1 , list ) ] ;
32116: LD_ADDR_VAR 0 18
32120: PUSH
32121: LD_VAR 0 5
32125: PUSH
32126: LD_INT 1
32128: PPUSH
32129: LD_VAR 0 5
32133: PPUSH
32134: CALL_OW 12
32138: ARRAY
32139: ST_TO_ADDR
// end ; if weapon then
32140: LD_VAR 0 18
32144: IFFALSE 32258
// begin tmp := CostOfWeapon ( weapon ) ;
32146: LD_ADDR_VAR 0 14
32150: PUSH
32151: LD_VAR 0 18
32155: PPUSH
32156: CALL_OW 451
32160: ST_TO_ADDR
// j := GetBase ( tower ) ;
32161: LD_ADDR_VAR 0 9
32165: PUSH
32166: LD_VAR 0 1
32170: PPUSH
32171: CALL_OW 274
32175: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32176: LD_VAR 0 9
32180: PPUSH
32181: LD_INT 1
32183: PPUSH
32184: CALL_OW 275
32188: PUSH
32189: LD_VAR 0 14
32193: PUSH
32194: LD_INT 1
32196: ARRAY
32197: GREATEREQUAL
32198: PUSH
32199: LD_VAR 0 9
32203: PPUSH
32204: LD_INT 2
32206: PPUSH
32207: CALL_OW 275
32211: PUSH
32212: LD_VAR 0 14
32216: PUSH
32217: LD_INT 2
32219: ARRAY
32220: GREATEREQUAL
32221: AND
32222: PUSH
32223: LD_VAR 0 9
32227: PPUSH
32228: LD_INT 3
32230: PPUSH
32231: CALL_OW 275
32235: PUSH
32236: LD_VAR 0 14
32240: PUSH
32241: LD_INT 3
32243: ARRAY
32244: GREATEREQUAL
32245: AND
32246: IFFALSE 32258
// result := weapon ;
32248: LD_ADDR_VAR 0 3
32252: PUSH
32253: LD_VAR 0 18
32257: ST_TO_ADDR
// end ; end ;
32258: LD_VAR 0 3
32262: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32263: LD_INT 0
32265: PPUSH
32266: PPUSH
// result := true ;
32267: LD_ADDR_VAR 0 3
32271: PUSH
32272: LD_INT 1
32274: ST_TO_ADDR
// if array1 = array2 then
32275: LD_VAR 0 1
32279: PUSH
32280: LD_VAR 0 2
32284: EQUAL
32285: IFFALSE 32345
// begin for i = 1 to array1 do
32287: LD_ADDR_VAR 0 4
32291: PUSH
32292: DOUBLE
32293: LD_INT 1
32295: DEC
32296: ST_TO_ADDR
32297: LD_VAR 0 1
32301: PUSH
32302: FOR_TO
32303: IFFALSE 32341
// if array1 [ i ] <> array2 [ i ] then
32305: LD_VAR 0 1
32309: PUSH
32310: LD_VAR 0 4
32314: ARRAY
32315: PUSH
32316: LD_VAR 0 2
32320: PUSH
32321: LD_VAR 0 4
32325: ARRAY
32326: NONEQUAL
32327: IFFALSE 32339
// begin result := false ;
32329: LD_ADDR_VAR 0 3
32333: PUSH
32334: LD_INT 0
32336: ST_TO_ADDR
// break ;
32337: GO 32341
// end ;
32339: GO 32302
32341: POP
32342: POP
// end else
32343: GO 32353
// result := false ;
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: LD_INT 0
32352: ST_TO_ADDR
// end ;
32353: LD_VAR 0 3
32357: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32358: LD_INT 0
32360: PPUSH
32361: PPUSH
// if not array1 or not array2 then
32362: LD_VAR 0 1
32366: NOT
32367: PUSH
32368: LD_VAR 0 2
32372: NOT
32373: OR
32374: IFFALSE 32378
// exit ;
32376: GO 32442
// result := true ;
32378: LD_ADDR_VAR 0 3
32382: PUSH
32383: LD_INT 1
32385: ST_TO_ADDR
// for i = 1 to array1 do
32386: LD_ADDR_VAR 0 4
32390: PUSH
32391: DOUBLE
32392: LD_INT 1
32394: DEC
32395: ST_TO_ADDR
32396: LD_VAR 0 1
32400: PUSH
32401: FOR_TO
32402: IFFALSE 32440
// if array1 [ i ] <> array2 [ i ] then
32404: LD_VAR 0 1
32408: PUSH
32409: LD_VAR 0 4
32413: ARRAY
32414: PUSH
32415: LD_VAR 0 2
32419: PUSH
32420: LD_VAR 0 4
32424: ARRAY
32425: NONEQUAL
32426: IFFALSE 32438
// begin result := false ;
32428: LD_ADDR_VAR 0 3
32432: PUSH
32433: LD_INT 0
32435: ST_TO_ADDR
// break ;
32436: GO 32440
// end ;
32438: GO 32401
32440: POP
32441: POP
// end ;
32442: LD_VAR 0 3
32446: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32447: LD_INT 0
32449: PPUSH
32450: PPUSH
32451: PPUSH
// pom := GetBase ( fac ) ;
32452: LD_ADDR_VAR 0 5
32456: PUSH
32457: LD_VAR 0 1
32461: PPUSH
32462: CALL_OW 274
32466: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32467: LD_ADDR_VAR 0 4
32471: PUSH
32472: LD_VAR 0 2
32476: PUSH
32477: LD_INT 1
32479: ARRAY
32480: PPUSH
32481: LD_VAR 0 2
32485: PUSH
32486: LD_INT 2
32488: ARRAY
32489: PPUSH
32490: LD_VAR 0 2
32494: PUSH
32495: LD_INT 3
32497: ARRAY
32498: PPUSH
32499: LD_VAR 0 2
32503: PUSH
32504: LD_INT 4
32506: ARRAY
32507: PPUSH
32508: CALL_OW 449
32512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32513: LD_ADDR_VAR 0 3
32517: PUSH
32518: LD_VAR 0 5
32522: PPUSH
32523: LD_INT 1
32525: PPUSH
32526: CALL_OW 275
32530: PUSH
32531: LD_VAR 0 4
32535: PUSH
32536: LD_INT 1
32538: ARRAY
32539: GREATEREQUAL
32540: PUSH
32541: LD_VAR 0 5
32545: PPUSH
32546: LD_INT 2
32548: PPUSH
32549: CALL_OW 275
32553: PUSH
32554: LD_VAR 0 4
32558: PUSH
32559: LD_INT 2
32561: ARRAY
32562: GREATEREQUAL
32563: AND
32564: PUSH
32565: LD_VAR 0 5
32569: PPUSH
32570: LD_INT 3
32572: PPUSH
32573: CALL_OW 275
32577: PUSH
32578: LD_VAR 0 4
32582: PUSH
32583: LD_INT 3
32585: ARRAY
32586: GREATEREQUAL
32587: AND
32588: ST_TO_ADDR
// end ;
32589: LD_VAR 0 3
32593: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32594: LD_INT 0
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
// pom := GetBase ( building ) ;
32600: LD_ADDR_VAR 0 3
32604: PUSH
32605: LD_VAR 0 1
32609: PPUSH
32610: CALL_OW 274
32614: ST_TO_ADDR
// if not pom then
32615: LD_VAR 0 3
32619: NOT
32620: IFFALSE 32624
// exit ;
32622: GO 32794
// btype := GetBType ( building ) ;
32624: LD_ADDR_VAR 0 5
32628: PUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 266
32638: ST_TO_ADDR
// if btype = b_armoury then
32639: LD_VAR 0 5
32643: PUSH
32644: LD_INT 4
32646: EQUAL
32647: IFFALSE 32657
// btype := b_barracks ;
32649: LD_ADDR_VAR 0 5
32653: PUSH
32654: LD_INT 5
32656: ST_TO_ADDR
// if btype = b_depot then
32657: LD_VAR 0 5
32661: PUSH
32662: LD_INT 0
32664: EQUAL
32665: IFFALSE 32675
// btype := b_warehouse ;
32667: LD_ADDR_VAR 0 5
32671: PUSH
32672: LD_INT 1
32674: ST_TO_ADDR
// if btype = b_workshop then
32675: LD_VAR 0 5
32679: PUSH
32680: LD_INT 2
32682: EQUAL
32683: IFFALSE 32693
// btype := b_factory ;
32685: LD_ADDR_VAR 0 5
32689: PUSH
32690: LD_INT 3
32692: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32693: LD_ADDR_VAR 0 4
32697: PUSH
32698: LD_VAR 0 5
32702: PPUSH
32703: LD_VAR 0 1
32707: PPUSH
32708: CALL_OW 248
32712: PPUSH
32713: CALL_OW 450
32717: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32718: LD_ADDR_VAR 0 2
32722: PUSH
32723: LD_VAR 0 3
32727: PPUSH
32728: LD_INT 1
32730: PPUSH
32731: CALL_OW 275
32735: PUSH
32736: LD_VAR 0 4
32740: PUSH
32741: LD_INT 1
32743: ARRAY
32744: GREATEREQUAL
32745: PUSH
32746: LD_VAR 0 3
32750: PPUSH
32751: LD_INT 2
32753: PPUSH
32754: CALL_OW 275
32758: PUSH
32759: LD_VAR 0 4
32763: PUSH
32764: LD_INT 2
32766: ARRAY
32767: GREATEREQUAL
32768: AND
32769: PUSH
32770: LD_VAR 0 3
32774: PPUSH
32775: LD_INT 3
32777: PPUSH
32778: CALL_OW 275
32782: PUSH
32783: LD_VAR 0 4
32787: PUSH
32788: LD_INT 3
32790: ARRAY
32791: GREATEREQUAL
32792: AND
32793: ST_TO_ADDR
// end ;
32794: LD_VAR 0 2
32798: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32799: LD_INT 0
32801: PPUSH
32802: PPUSH
32803: PPUSH
// pom := GetBase ( building ) ;
32804: LD_ADDR_VAR 0 4
32808: PUSH
32809: LD_VAR 0 1
32813: PPUSH
32814: CALL_OW 274
32818: ST_TO_ADDR
// if not pom then
32819: LD_VAR 0 4
32823: NOT
32824: IFFALSE 32828
// exit ;
32826: GO 32929
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32828: LD_ADDR_VAR 0 5
32832: PUSH
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 1
32842: PPUSH
32843: CALL_OW 248
32847: PPUSH
32848: CALL_OW 450
32852: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32853: LD_ADDR_VAR 0 3
32857: PUSH
32858: LD_VAR 0 4
32862: PPUSH
32863: LD_INT 1
32865: PPUSH
32866: CALL_OW 275
32870: PUSH
32871: LD_VAR 0 5
32875: PUSH
32876: LD_INT 1
32878: ARRAY
32879: GREATEREQUAL
32880: PUSH
32881: LD_VAR 0 4
32885: PPUSH
32886: LD_INT 2
32888: PPUSH
32889: CALL_OW 275
32893: PUSH
32894: LD_VAR 0 5
32898: PUSH
32899: LD_INT 2
32901: ARRAY
32902: GREATEREQUAL
32903: AND
32904: PUSH
32905: LD_VAR 0 4
32909: PPUSH
32910: LD_INT 3
32912: PPUSH
32913: CALL_OW 275
32917: PUSH
32918: LD_VAR 0 5
32922: PUSH
32923: LD_INT 3
32925: ARRAY
32926: GREATEREQUAL
32927: AND
32928: ST_TO_ADDR
// end ;
32929: LD_VAR 0 3
32933: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32934: LD_INT 0
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
32946: PPUSH
// result := false ;
32947: LD_ADDR_VAR 0 8
32951: PUSH
32952: LD_INT 0
32954: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32955: LD_VAR 0 5
32959: NOT
32960: PUSH
32961: LD_VAR 0 1
32965: NOT
32966: OR
32967: PUSH
32968: LD_VAR 0 2
32972: NOT
32973: OR
32974: PUSH
32975: LD_VAR 0 3
32979: NOT
32980: OR
32981: IFFALSE 32985
// exit ;
32983: GO 33799
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32985: LD_ADDR_VAR 0 14
32989: PUSH
32990: LD_VAR 0 1
32994: PPUSH
32995: LD_VAR 0 2
32999: PPUSH
33000: LD_VAR 0 3
33004: PPUSH
33005: LD_VAR 0 4
33009: PPUSH
33010: LD_VAR 0 5
33014: PUSH
33015: LD_INT 1
33017: ARRAY
33018: PPUSH
33019: CALL_OW 248
33023: PPUSH
33024: LD_INT 0
33026: PPUSH
33027: CALL 35036 0 6
33031: ST_TO_ADDR
// if not hexes then
33032: LD_VAR 0 14
33036: NOT
33037: IFFALSE 33041
// exit ;
33039: GO 33799
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33041: LD_ADDR_VAR 0 17
33045: PUSH
33046: LD_VAR 0 5
33050: PPUSH
33051: LD_INT 22
33053: PUSH
33054: LD_VAR 0 13
33058: PPUSH
33059: CALL_OW 255
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 30
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 30
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PPUSH
33100: CALL_OW 72
33104: ST_TO_ADDR
// for i = 1 to hexes do
33105: LD_ADDR_VAR 0 9
33109: PUSH
33110: DOUBLE
33111: LD_INT 1
33113: DEC
33114: ST_TO_ADDR
33115: LD_VAR 0 14
33119: PUSH
33120: FOR_TO
33121: IFFALSE 33797
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33123: LD_ADDR_VAR 0 13
33127: PUSH
33128: LD_VAR 0 14
33132: PUSH
33133: LD_VAR 0 9
33137: ARRAY
33138: PUSH
33139: LD_INT 1
33141: ARRAY
33142: PPUSH
33143: LD_VAR 0 14
33147: PUSH
33148: LD_VAR 0 9
33152: ARRAY
33153: PUSH
33154: LD_INT 2
33156: ARRAY
33157: PPUSH
33158: CALL_OW 428
33162: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33163: LD_VAR 0 14
33167: PUSH
33168: LD_VAR 0 9
33172: ARRAY
33173: PUSH
33174: LD_INT 1
33176: ARRAY
33177: PPUSH
33178: LD_VAR 0 14
33182: PUSH
33183: LD_VAR 0 9
33187: ARRAY
33188: PUSH
33189: LD_INT 2
33191: ARRAY
33192: PPUSH
33193: CALL_OW 351
33197: PUSH
33198: LD_VAR 0 14
33202: PUSH
33203: LD_VAR 0 9
33207: ARRAY
33208: PUSH
33209: LD_INT 1
33211: ARRAY
33212: PPUSH
33213: LD_VAR 0 14
33217: PUSH
33218: LD_VAR 0 9
33222: ARRAY
33223: PUSH
33224: LD_INT 2
33226: ARRAY
33227: PPUSH
33228: CALL_OW 488
33232: NOT
33233: OR
33234: PUSH
33235: LD_VAR 0 13
33239: PPUSH
33240: CALL_OW 247
33244: PUSH
33245: LD_INT 3
33247: EQUAL
33248: OR
33249: IFFALSE 33255
// exit ;
33251: POP
33252: POP
33253: GO 33799
// if not tmp then
33255: LD_VAR 0 13
33259: NOT
33260: IFFALSE 33264
// continue ;
33262: GO 33120
// result := true ;
33264: LD_ADDR_VAR 0 8
33268: PUSH
33269: LD_INT 1
33271: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33272: LD_VAR 0 6
33276: PUSH
33277: LD_VAR 0 13
33281: PPUSH
33282: CALL_OW 247
33286: PUSH
33287: LD_INT 2
33289: EQUAL
33290: AND
33291: PUSH
33292: LD_VAR 0 13
33296: PPUSH
33297: CALL_OW 263
33301: PUSH
33302: LD_INT 1
33304: EQUAL
33305: AND
33306: IFFALSE 33470
// begin if IsDrivenBy ( tmp ) then
33308: LD_VAR 0 13
33312: PPUSH
33313: CALL_OW 311
33317: IFFALSE 33321
// continue ;
33319: GO 33120
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33321: LD_VAR 0 6
33325: PPUSH
33326: LD_INT 3
33328: PUSH
33329: LD_INT 60
33331: PUSH
33332: EMPTY
33333: LIST
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: LD_INT 55
33344: PUSH
33345: EMPTY
33346: LIST
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PPUSH
33356: CALL_OW 72
33360: IFFALSE 33468
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33362: LD_ADDR_VAR 0 18
33366: PUSH
33367: LD_VAR 0 6
33371: PPUSH
33372: LD_INT 3
33374: PUSH
33375: LD_INT 60
33377: PUSH
33378: EMPTY
33379: LIST
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 3
33387: PUSH
33388: LD_INT 55
33390: PUSH
33391: EMPTY
33392: LIST
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PPUSH
33402: CALL_OW 72
33406: PUSH
33407: LD_INT 1
33409: ARRAY
33410: ST_TO_ADDR
// if IsInUnit ( driver ) then
33411: LD_VAR 0 18
33415: PPUSH
33416: CALL_OW 310
33420: IFFALSE 33431
// ComExit ( driver ) ;
33422: LD_VAR 0 18
33426: PPUSH
33427: CALL 58220 0 1
// AddComEnterUnit ( driver , tmp ) ;
33431: LD_VAR 0 18
33435: PPUSH
33436: LD_VAR 0 13
33440: PPUSH
33441: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33445: LD_VAR 0 18
33449: PPUSH
33450: LD_VAR 0 7
33454: PPUSH
33455: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33459: LD_VAR 0 18
33463: PPUSH
33464: CALL_OW 181
// end ; continue ;
33468: GO 33120
// end ; if not cleaners or not tmp in cleaners then
33470: LD_VAR 0 6
33474: NOT
33475: PUSH
33476: LD_VAR 0 13
33480: PUSH
33481: LD_VAR 0 6
33485: IN
33486: NOT
33487: OR
33488: IFFALSE 33795
// begin if dep then
33490: LD_VAR 0 17
33494: IFFALSE 33630
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33496: LD_ADDR_VAR 0 16
33500: PUSH
33501: LD_VAR 0 17
33505: PUSH
33506: LD_INT 1
33508: ARRAY
33509: PPUSH
33510: CALL_OW 250
33514: PPUSH
33515: LD_VAR 0 17
33519: PUSH
33520: LD_INT 1
33522: ARRAY
33523: PPUSH
33524: CALL_OW 254
33528: PPUSH
33529: LD_INT 5
33531: PPUSH
33532: CALL_OW 272
33536: PUSH
33537: LD_VAR 0 17
33541: PUSH
33542: LD_INT 1
33544: ARRAY
33545: PPUSH
33546: CALL_OW 251
33550: PPUSH
33551: LD_VAR 0 17
33555: PUSH
33556: LD_INT 1
33558: ARRAY
33559: PPUSH
33560: CALL_OW 254
33564: PPUSH
33565: LD_INT 5
33567: PPUSH
33568: CALL_OW 273
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33577: LD_VAR 0 16
33581: PUSH
33582: LD_INT 1
33584: ARRAY
33585: PPUSH
33586: LD_VAR 0 16
33590: PUSH
33591: LD_INT 2
33593: ARRAY
33594: PPUSH
33595: CALL_OW 488
33599: IFFALSE 33630
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33601: LD_VAR 0 13
33605: PPUSH
33606: LD_VAR 0 16
33610: PUSH
33611: LD_INT 1
33613: ARRAY
33614: PPUSH
33615: LD_VAR 0 16
33619: PUSH
33620: LD_INT 2
33622: ARRAY
33623: PPUSH
33624: CALL_OW 111
// continue ;
33628: GO 33120
// end ; end ; r := GetDir ( tmp ) ;
33630: LD_ADDR_VAR 0 15
33634: PUSH
33635: LD_VAR 0 13
33639: PPUSH
33640: CALL_OW 254
33644: ST_TO_ADDR
// if r = 5 then
33645: LD_VAR 0 15
33649: PUSH
33650: LD_INT 5
33652: EQUAL
33653: IFFALSE 33663
// r := 0 ;
33655: LD_ADDR_VAR 0 15
33659: PUSH
33660: LD_INT 0
33662: ST_TO_ADDR
// for j = r to 5 do
33663: LD_ADDR_VAR 0 10
33667: PUSH
33668: DOUBLE
33669: LD_VAR 0 15
33673: DEC
33674: ST_TO_ADDR
33675: LD_INT 5
33677: PUSH
33678: FOR_TO
33679: IFFALSE 33793
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33681: LD_ADDR_VAR 0 11
33685: PUSH
33686: LD_VAR 0 13
33690: PPUSH
33691: CALL_OW 250
33695: PPUSH
33696: LD_VAR 0 10
33700: PPUSH
33701: LD_INT 2
33703: PPUSH
33704: CALL_OW 272
33708: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33709: LD_ADDR_VAR 0 12
33713: PUSH
33714: LD_VAR 0 13
33718: PPUSH
33719: CALL_OW 251
33723: PPUSH
33724: LD_VAR 0 10
33728: PPUSH
33729: LD_INT 2
33731: PPUSH
33732: CALL_OW 273
33736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33737: LD_VAR 0 11
33741: PPUSH
33742: LD_VAR 0 12
33746: PPUSH
33747: CALL_OW 488
33751: PUSH
33752: LD_VAR 0 11
33756: PPUSH
33757: LD_VAR 0 12
33761: PPUSH
33762: CALL_OW 428
33766: NOT
33767: AND
33768: IFFALSE 33791
// begin ComMoveXY ( tmp , _x , _y ) ;
33770: LD_VAR 0 13
33774: PPUSH
33775: LD_VAR 0 11
33779: PPUSH
33780: LD_VAR 0 12
33784: PPUSH
33785: CALL_OW 111
// break ;
33789: GO 33793
// end ; end ;
33791: GO 33678
33793: POP
33794: POP
// end ; end ;
33795: GO 33120
33797: POP
33798: POP
// end ;
33799: LD_VAR 0 8
33803: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33804: LD_INT 0
33806: PPUSH
// result := true ;
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: LD_INT 1
33814: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33815: LD_VAR 0 2
33819: PUSH
33820: LD_INT 24
33822: DOUBLE
33823: EQUAL
33824: IFTRUE 33834
33826: LD_INT 33
33828: DOUBLE
33829: EQUAL
33830: IFTRUE 33834
33832: GO 33859
33834: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33835: LD_ADDR_VAR 0 3
33839: PUSH
33840: LD_INT 32
33842: PPUSH
33843: LD_VAR 0 1
33847: PPUSH
33848: CALL_OW 321
33852: PUSH
33853: LD_INT 2
33855: EQUAL
33856: ST_TO_ADDR
33857: GO 34179
33859: LD_INT 20
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33892
33867: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: LD_INT 6
33875: PPUSH
33876: LD_VAR 0 1
33880: PPUSH
33881: CALL_OW 321
33885: PUSH
33886: LD_INT 2
33888: EQUAL
33889: ST_TO_ADDR
33890: GO 34179
33892: LD_INT 22
33894: DOUBLE
33895: EQUAL
33896: IFTRUE 33906
33898: LD_INT 36
33900: DOUBLE
33901: EQUAL
33902: IFTRUE 33906
33904: GO 33931
33906: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 15
33914: PPUSH
33915: LD_VAR 0 1
33919: PPUSH
33920: CALL_OW 321
33924: PUSH
33925: LD_INT 2
33927: EQUAL
33928: ST_TO_ADDR
33929: GO 34179
33931: LD_INT 30
33933: DOUBLE
33934: EQUAL
33935: IFTRUE 33939
33937: GO 33964
33939: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: LD_INT 20
33947: PPUSH
33948: LD_VAR 0 1
33952: PPUSH
33953: CALL_OW 321
33957: PUSH
33958: LD_INT 2
33960: EQUAL
33961: ST_TO_ADDR
33962: GO 34179
33964: LD_INT 28
33966: DOUBLE
33967: EQUAL
33968: IFTRUE 33978
33970: LD_INT 21
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 33978
33976: GO 34003
33978: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_INT 21
33986: PPUSH
33987: LD_VAR 0 1
33991: PPUSH
33992: CALL_OW 321
33996: PUSH
33997: LD_INT 2
33999: EQUAL
34000: ST_TO_ADDR
34001: GO 34179
34003: LD_INT 16
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34038
34011: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34012: LD_ADDR_VAR 0 3
34016: PUSH
34017: LD_EXP 88
34021: PPUSH
34022: LD_VAR 0 1
34026: PPUSH
34027: CALL_OW 321
34031: PUSH
34032: LD_INT 2
34034: EQUAL
34035: ST_TO_ADDR
34036: GO 34179
34038: LD_INT 19
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34052
34044: LD_INT 23
34046: DOUBLE
34047: EQUAL
34048: IFTRUE 34052
34050: GO 34079
34052: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34053: LD_ADDR_VAR 0 3
34057: PUSH
34058: LD_EXP 87
34062: PPUSH
34063: LD_VAR 0 1
34067: PPUSH
34068: CALL_OW 321
34072: PUSH
34073: LD_INT 2
34075: EQUAL
34076: ST_TO_ADDR
34077: GO 34179
34079: LD_INT 17
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34087
34085: GO 34112
34087: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: LD_INT 39
34095: PPUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: CALL_OW 321
34105: PUSH
34106: LD_INT 2
34108: EQUAL
34109: ST_TO_ADDR
34110: GO 34179
34112: LD_INT 18
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34120
34118: GO 34145
34120: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34121: LD_ADDR_VAR 0 3
34125: PUSH
34126: LD_INT 40
34128: PPUSH
34129: LD_VAR 0 1
34133: PPUSH
34134: CALL_OW 321
34138: PUSH
34139: LD_INT 2
34141: EQUAL
34142: ST_TO_ADDR
34143: GO 34179
34145: LD_INT 27
34147: DOUBLE
34148: EQUAL
34149: IFTRUE 34153
34151: GO 34178
34153: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34154: LD_ADDR_VAR 0 3
34158: PUSH
34159: LD_INT 35
34161: PPUSH
34162: LD_VAR 0 1
34166: PPUSH
34167: CALL_OW 321
34171: PUSH
34172: LD_INT 2
34174: EQUAL
34175: ST_TO_ADDR
34176: GO 34179
34178: POP
// end ;
34179: LD_VAR 0 3
34183: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34184: LD_INT 0
34186: PPUSH
34187: PPUSH
34188: PPUSH
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
// result := false ;
34197: LD_ADDR_VAR 0 6
34201: PUSH
34202: LD_INT 0
34204: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34205: LD_VAR 0 1
34209: NOT
34210: PUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: CALL_OW 266
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 1
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: IN
34231: NOT
34232: OR
34233: PUSH
34234: LD_VAR 0 2
34238: NOT
34239: OR
34240: PUSH
34241: LD_VAR 0 5
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 3
34257: PUSH
34258: LD_INT 4
34260: PUSH
34261: LD_INT 5
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: IN
34272: NOT
34273: OR
34274: PUSH
34275: LD_VAR 0 3
34279: PPUSH
34280: LD_VAR 0 4
34284: PPUSH
34285: CALL_OW 488
34289: NOT
34290: OR
34291: IFFALSE 34295
// exit ;
34293: GO 35031
// side := GetSide ( depot ) ;
34295: LD_ADDR_VAR 0 9
34299: PUSH
34300: LD_VAR 0 1
34304: PPUSH
34305: CALL_OW 255
34309: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34310: LD_VAR 0 9
34314: PPUSH
34315: LD_VAR 0 2
34319: PPUSH
34320: CALL 33804 0 2
34324: NOT
34325: IFFALSE 34329
// exit ;
34327: GO 35031
// pom := GetBase ( depot ) ;
34329: LD_ADDR_VAR 0 10
34333: PUSH
34334: LD_VAR 0 1
34338: PPUSH
34339: CALL_OW 274
34343: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34344: LD_ADDR_VAR 0 11
34348: PUSH
34349: LD_VAR 0 2
34353: PPUSH
34354: LD_VAR 0 1
34358: PPUSH
34359: CALL_OW 248
34363: PPUSH
34364: CALL_OW 450
34368: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34369: LD_VAR 0 10
34373: PPUSH
34374: LD_INT 1
34376: PPUSH
34377: CALL_OW 275
34381: PUSH
34382: LD_VAR 0 11
34386: PUSH
34387: LD_INT 1
34389: ARRAY
34390: GREATEREQUAL
34391: PUSH
34392: LD_VAR 0 10
34396: PPUSH
34397: LD_INT 2
34399: PPUSH
34400: CALL_OW 275
34404: PUSH
34405: LD_VAR 0 11
34409: PUSH
34410: LD_INT 2
34412: ARRAY
34413: GREATEREQUAL
34414: AND
34415: PUSH
34416: LD_VAR 0 10
34420: PPUSH
34421: LD_INT 3
34423: PPUSH
34424: CALL_OW 275
34428: PUSH
34429: LD_VAR 0 11
34433: PUSH
34434: LD_INT 3
34436: ARRAY
34437: GREATEREQUAL
34438: AND
34439: NOT
34440: IFFALSE 34444
// exit ;
34442: GO 35031
// if GetBType ( depot ) = b_depot then
34444: LD_VAR 0 1
34448: PPUSH
34449: CALL_OW 266
34453: PUSH
34454: LD_INT 0
34456: EQUAL
34457: IFFALSE 34469
// dist := 28 else
34459: LD_ADDR_VAR 0 14
34463: PUSH
34464: LD_INT 28
34466: ST_TO_ADDR
34467: GO 34477
// dist := 36 ;
34469: LD_ADDR_VAR 0 14
34473: PUSH
34474: LD_INT 36
34476: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34477: LD_VAR 0 1
34481: PPUSH
34482: LD_VAR 0 3
34486: PPUSH
34487: LD_VAR 0 4
34491: PPUSH
34492: CALL_OW 297
34496: PUSH
34497: LD_VAR 0 14
34501: GREATER
34502: IFFALSE 34506
// exit ;
34504: GO 35031
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34506: LD_ADDR_VAR 0 12
34510: PUSH
34511: LD_VAR 0 2
34515: PPUSH
34516: LD_VAR 0 3
34520: PPUSH
34521: LD_VAR 0 4
34525: PPUSH
34526: LD_VAR 0 5
34530: PPUSH
34531: LD_VAR 0 1
34535: PPUSH
34536: CALL_OW 248
34540: PPUSH
34541: LD_INT 0
34543: PPUSH
34544: CALL 35036 0 6
34548: ST_TO_ADDR
// if not hexes then
34549: LD_VAR 0 12
34553: NOT
34554: IFFALSE 34558
// exit ;
34556: GO 35031
// hex := GetHexInfo ( x , y ) ;
34558: LD_ADDR_VAR 0 15
34562: PUSH
34563: LD_VAR 0 3
34567: PPUSH
34568: LD_VAR 0 4
34572: PPUSH
34573: CALL_OW 546
34577: ST_TO_ADDR
// if hex [ 1 ] then
34578: LD_VAR 0 15
34582: PUSH
34583: LD_INT 1
34585: ARRAY
34586: IFFALSE 34590
// exit ;
34588: GO 35031
// height := hex [ 2 ] ;
34590: LD_ADDR_VAR 0 13
34594: PUSH
34595: LD_VAR 0 15
34599: PUSH
34600: LD_INT 2
34602: ARRAY
34603: ST_TO_ADDR
// for i = 1 to hexes do
34604: LD_ADDR_VAR 0 7
34608: PUSH
34609: DOUBLE
34610: LD_INT 1
34612: DEC
34613: ST_TO_ADDR
34614: LD_VAR 0 12
34618: PUSH
34619: FOR_TO
34620: IFFALSE 34950
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34622: LD_VAR 0 12
34626: PUSH
34627: LD_VAR 0 7
34631: ARRAY
34632: PUSH
34633: LD_INT 1
34635: ARRAY
34636: PPUSH
34637: LD_VAR 0 12
34641: PUSH
34642: LD_VAR 0 7
34646: ARRAY
34647: PUSH
34648: LD_INT 2
34650: ARRAY
34651: PPUSH
34652: CALL_OW 488
34656: NOT
34657: PUSH
34658: LD_VAR 0 12
34662: PUSH
34663: LD_VAR 0 7
34667: ARRAY
34668: PUSH
34669: LD_INT 1
34671: ARRAY
34672: PPUSH
34673: LD_VAR 0 12
34677: PUSH
34678: LD_VAR 0 7
34682: ARRAY
34683: PUSH
34684: LD_INT 2
34686: ARRAY
34687: PPUSH
34688: CALL_OW 428
34692: PUSH
34693: LD_INT 0
34695: GREATER
34696: OR
34697: PUSH
34698: LD_VAR 0 12
34702: PUSH
34703: LD_VAR 0 7
34707: ARRAY
34708: PUSH
34709: LD_INT 1
34711: ARRAY
34712: PPUSH
34713: LD_VAR 0 12
34717: PUSH
34718: LD_VAR 0 7
34722: ARRAY
34723: PUSH
34724: LD_INT 2
34726: ARRAY
34727: PPUSH
34728: CALL_OW 351
34732: OR
34733: IFFALSE 34739
// exit ;
34735: POP
34736: POP
34737: GO 35031
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34739: LD_ADDR_VAR 0 8
34743: PUSH
34744: LD_VAR 0 12
34748: PUSH
34749: LD_VAR 0 7
34753: ARRAY
34754: PUSH
34755: LD_INT 1
34757: ARRAY
34758: PPUSH
34759: LD_VAR 0 12
34763: PUSH
34764: LD_VAR 0 7
34768: ARRAY
34769: PUSH
34770: LD_INT 2
34772: ARRAY
34773: PPUSH
34774: CALL_OW 546
34778: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34779: LD_VAR 0 8
34783: PUSH
34784: LD_INT 1
34786: ARRAY
34787: PUSH
34788: LD_VAR 0 8
34792: PUSH
34793: LD_INT 2
34795: ARRAY
34796: PUSH
34797: LD_VAR 0 13
34801: PUSH
34802: LD_INT 2
34804: PLUS
34805: GREATER
34806: OR
34807: PUSH
34808: LD_VAR 0 8
34812: PUSH
34813: LD_INT 2
34815: ARRAY
34816: PUSH
34817: LD_VAR 0 13
34821: PUSH
34822: LD_INT 2
34824: MINUS
34825: LESS
34826: OR
34827: PUSH
34828: LD_VAR 0 8
34832: PUSH
34833: LD_INT 3
34835: ARRAY
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 8
34842: PUSH
34843: LD_INT 9
34845: PUSH
34846: LD_INT 10
34848: PUSH
34849: LD_INT 11
34851: PUSH
34852: LD_INT 12
34854: PUSH
34855: LD_INT 13
34857: PUSH
34858: LD_INT 16
34860: PUSH
34861: LD_INT 17
34863: PUSH
34864: LD_INT 18
34866: PUSH
34867: LD_INT 19
34869: PUSH
34870: LD_INT 20
34872: PUSH
34873: LD_INT 21
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: IN
34891: NOT
34892: OR
34893: PUSH
34894: LD_VAR 0 8
34898: PUSH
34899: LD_INT 5
34901: ARRAY
34902: NOT
34903: OR
34904: PUSH
34905: LD_VAR 0 8
34909: PUSH
34910: LD_INT 6
34912: ARRAY
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: LD_INT 7
34922: PUSH
34923: LD_INT 9
34925: PUSH
34926: LD_INT 10
34928: PUSH
34929: LD_INT 11
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: IN
34940: NOT
34941: OR
34942: IFFALSE 34948
// exit ;
34944: POP
34945: POP
34946: GO 35031
// end ;
34948: GO 34619
34950: POP
34951: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34952: LD_VAR 0 9
34956: PPUSH
34957: LD_VAR 0 3
34961: PPUSH
34962: LD_VAR 0 4
34966: PPUSH
34967: LD_INT 20
34969: PPUSH
34970: CALL 26977 0 4
34974: PUSH
34975: LD_INT 4
34977: ARRAY
34978: IFFALSE 34982
// exit ;
34980: GO 35031
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34982: LD_VAR 0 2
34986: PUSH
34987: LD_INT 29
34989: PUSH
34990: LD_INT 30
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: IN
34997: PUSH
34998: LD_VAR 0 3
35002: PPUSH
35003: LD_VAR 0 4
35007: PPUSH
35008: LD_VAR 0 9
35012: PPUSH
35013: CALL_OW 440
35017: NOT
35018: AND
35019: IFFALSE 35023
// exit ;
35021: GO 35031
// result := true ;
35023: LD_ADDR_VAR 0 6
35027: PUSH
35028: LD_INT 1
35030: ST_TO_ADDR
// end ;
35031: LD_VAR 0 6
35035: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35036: LD_INT 0
35038: PPUSH
35039: PPUSH
35040: PPUSH
35041: PPUSH
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
35046: PPUSH
35047: PPUSH
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
35056: PPUSH
35057: PPUSH
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
35064: PPUSH
35065: PPUSH
35066: PPUSH
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
35095: PPUSH
// result = [ ] ;
35096: LD_ADDR_VAR 0 7
35100: PUSH
35101: EMPTY
35102: ST_TO_ADDR
// temp_list = [ ] ;
35103: LD_ADDR_VAR 0 9
35107: PUSH
35108: EMPTY
35109: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35110: LD_VAR 0 4
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: LD_INT 4
35129: PUSH
35130: LD_INT 5
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: IN
35141: NOT
35142: PUSH
35143: LD_VAR 0 1
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: IN
35158: PUSH
35159: LD_VAR 0 5
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: LD_INT 3
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: LIST
35177: IN
35178: NOT
35179: AND
35180: OR
35181: IFFALSE 35185
// exit ;
35183: GO 53576
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35185: LD_VAR 0 1
35189: PUSH
35190: LD_INT 6
35192: PUSH
35193: LD_INT 7
35195: PUSH
35196: LD_INT 8
35198: PUSH
35199: LD_INT 13
35201: PUSH
35202: LD_INT 12
35204: PUSH
35205: LD_INT 15
35207: PUSH
35208: LD_INT 11
35210: PUSH
35211: LD_INT 14
35213: PUSH
35214: LD_INT 10
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: IN
35228: IFFALSE 35238
// btype = b_lab ;
35230: LD_ADDR_VAR 0 1
35234: PUSH
35235: LD_INT 6
35237: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35238: LD_VAR 0 6
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: IN
35257: NOT
35258: PUSH
35259: LD_VAR 0 1
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: LD_INT 6
35278: PUSH
35279: LD_INT 36
35281: PUSH
35282: LD_INT 4
35284: PUSH
35285: LD_INT 5
35287: PUSH
35288: LD_INT 31
35290: PUSH
35291: LD_INT 32
35293: PUSH
35294: LD_INT 33
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: IN
35310: NOT
35311: PUSH
35312: LD_VAR 0 6
35316: PUSH
35317: LD_INT 1
35319: EQUAL
35320: AND
35321: OR
35322: PUSH
35323: LD_VAR 0 1
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: LD_INT 3
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: IN
35338: NOT
35339: PUSH
35340: LD_VAR 0 6
35344: PUSH
35345: LD_INT 2
35347: EQUAL
35348: AND
35349: OR
35350: IFFALSE 35360
// mode = 0 ;
35352: LD_ADDR_VAR 0 6
35356: PUSH
35357: LD_INT 0
35359: ST_TO_ADDR
// case mode of 0 :
35360: LD_VAR 0 6
35364: PUSH
35365: LD_INT 0
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 46826
35373: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35374: LD_ADDR_VAR 0 11
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: LD_INT 3
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 3
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35567: LD_ADDR_VAR 0 12
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 3
35724: NEG
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 3
35735: NEG
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35763: LD_ADDR_VAR 0 13
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: NEG
35845: PUSH
35846: LD_INT 2
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: LD_INT 2
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: LD_INT 3
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 3
35922: NEG
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 3
35934: NEG
35935: PUSH
35936: LD_INT 3
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35962: LD_ADDR_VAR 0 14
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 2
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 3
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 3
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 2
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36158: LD_ADDR_VAR 0 15
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 2
36292: NEG
36293: PUSH
36294: LD_INT 1
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 3
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36351: LD_ADDR_VAR 0 16
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: LD_INT 2
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 2
36474: NEG
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: LD_INT 2
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 3
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 3
36508: PUSH
36509: LD_INT 3
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36544: LD_ADDR_VAR 0 17
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: LD_INT 0
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: NEG
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 2
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 2
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 2
36720: NEG
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 2
36731: NEG
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 2
36743: NEG
36744: PUSH
36745: LD_INT 2
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36774: LD_ADDR_VAR 0 18
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 1
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: LD_INT 2
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 2
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 2
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37004: LD_ADDR_VAR 0 19
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: LD_INT 2
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 2
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: NEG
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: LD_INT 2
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37234: LD_ADDR_VAR 0 20
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: LD_INT 2
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 2
37421: NEG
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: LD_INT 2
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37464: LD_ADDR_VAR 0 21
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 2
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 2
37663: NEG
37664: PUSH
37665: LD_INT 2
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37694: LD_ADDR_VAR 0 22
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: LD_INT 2
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37924: LD_ADDR_VAR 0 23
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: LD_INT 2
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 2
38135: NEG
38136: PUSH
38137: LD_INT 3
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 3
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 2
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38204: LD_ADDR_VAR 0 24
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: NEG
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: LD_INT 1
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 2
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 3
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38480: LD_ADDR_VAR 0 25
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: LD_INT 2
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: LD_INT 2
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 3
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38754: LD_ADDR_VAR 0 26
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 3
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39030: LD_ADDR_VAR 0 27
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 3
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 3
39275: NEG
39276: PUSH
39277: LD_INT 2
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39310: LD_ADDR_VAR 0 28
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: LD_INT 3
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 3
39545: NEG
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 3
39557: NEG
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39592: LD_ADDR_VAR 0 29
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: LD_INT 3
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 3
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39871: LD_ADDR_VAR 0 30
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: NEG
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 3
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 2
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 3
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: LD_INT 3
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 3
40114: NEG
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40149: LD_ADDR_VAR 0 31
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: LD_INT 3
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 3
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: LD_INT 3
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: NEG
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40427: LD_ADDR_VAR 0 32
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: LD_INT 3
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 3
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 3
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40705: LD_ADDR_VAR 0 33
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 3
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 3
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40984: LD_ADDR_VAR 0 34
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 3
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 3
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 3
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 3
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41264: LD_ADDR_VAR 0 35
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41376: LD_ADDR_VAR 0 36
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41488: LD_ADDR_VAR 0 37
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41600: LD_ADDR_VAR 0 38
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41712: LD_ADDR_VAR 0 39
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 2
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41824: LD_ADDR_VAR 0 40
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41936: LD_ADDR_VAR 0 41
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 2
42102: NEG
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: NEG
42127: PUSH
42128: LD_INT 3
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 3
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 3
42210: NEG
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 3
42221: NEG
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 3
42233: NEG
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 3
42245: NEG
42246: PUSH
42247: LD_INT 3
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42286: LD_ADDR_VAR 0 42
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 3
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 3
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 3
42532: PUSH
42533: LD_INT 3
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 3
42583: NEG
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 3
42595: NEG
42596: PUSH
42597: LD_INT 3
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42636: LD_ADDR_VAR 0 43
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 3
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 3
42932: NEG
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 3
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42984: LD_ADDR_VAR 0 44
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: LD_INT 3
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 3
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 2
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 3
43258: NEG
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 3
43269: NEG
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 3
43293: NEG
43294: PUSH
43295: LD_INT 3
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43334: LD_ADDR_VAR 0 45
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 3
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 3
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 3
43580: PUSH
43581: LD_INT 3
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 3
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 3
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 3
43643: NEG
43644: PUSH
43645: LD_INT 3
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43684: LD_ADDR_VAR 0 46
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 3
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 3
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 3
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 3
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 3
43991: NEG
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44032: LD_ADDR_VAR 0 47
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44183: LD_ADDR_VAR 0 48
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44330: LD_ADDR_VAR 0 49
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44474: LD_ADDR_VAR 0 50
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44618: LD_ADDR_VAR 0 51
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44765: LD_ADDR_VAR 0 52
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44916: LD_ADDR_VAR 0 53
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45146: LD_ADDR_VAR 0 54
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45376: LD_ADDR_VAR 0 55
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45606: LD_ADDR_VAR 0 56
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45836: LD_ADDR_VAR 0 57
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46066: LD_ADDR_VAR 0 58
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46296: LD_ADDR_VAR 0 59
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46384: LD_ADDR_VAR 0 60
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46472: LD_ADDR_VAR 0 61
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46560: LD_ADDR_VAR 0 62
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46648: LD_ADDR_VAR 0 63
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46736: LD_ADDR_VAR 0 64
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: ST_TO_ADDR
// end ; 1 :
46824: GO 52721
46826: LD_INT 1
46828: DOUBLE
46829: EQUAL
46830: IFTRUE 46834
46832: GO 49457
46834: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46835: LD_ADDR_VAR 0 11
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 3
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 3
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: LIST
46878: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46879: LD_ADDR_VAR 0 12
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 3
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 3
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46920: LD_ADDR_VAR 0 13
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46960: LD_ADDR_VAR 0 14
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47001: LD_ADDR_VAR 0 15
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 3
47019: NEG
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 3
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47045: LD_ADDR_VAR 0 16
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47091: LD_ADDR_VAR 0 17
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 3
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 3
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47135: LD_ADDR_VAR 0 18
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47176: LD_ADDR_VAR 0 19
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: LIST
47215: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47216: LD_ADDR_VAR 0 20
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47257: LD_ADDR_VAR 0 21
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 3
47275: NEG
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47301: LD_ADDR_VAR 0 22
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: LD_INT 3
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: NEG
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 3
47332: NEG
47333: PUSH
47334: LD_INT 3
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: LIST
47346: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47347: LD_ADDR_VAR 0 23
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 3
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 4
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47391: LD_ADDR_VAR 0 24
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 4
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47432: LD_ADDR_VAR 0 25
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 4
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: LD_INT 4
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47472: LD_ADDR_VAR 0 26
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 4
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 3
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: LIST
47512: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47513: LD_ADDR_VAR 0 27
47517: PUSH
47518: LD_INT 3
47520: NEG
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 4
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: LIST
47556: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47557: LD_ADDR_VAR 0 28
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: LD_INT 3
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: NEG
47577: PUSH
47578: LD_INT 4
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 4
47588: NEG
47589: PUSH
47590: LD_INT 3
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47603: LD_ADDR_VAR 0 29
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 4
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 4
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 3
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 5
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 5
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 4
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 6
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 6
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 5
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47758: LD_ADDR_VAR 0 30
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 4
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 4
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 5
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 5
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 5
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 6
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 6
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47901: LD_ADDR_VAR 0 31
47905: PUSH
47906: LD_INT 3
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 4
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 4
47948: PUSH
47949: LD_INT 4
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: LD_INT 4
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 5
47968: PUSH
47969: LD_INT 4
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 5
47978: PUSH
47979: LD_INT 5
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 4
47988: PUSH
47989: LD_INT 5
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 6
47998: PUSH
47999: LD_INT 5
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 6
48008: PUSH
48009: LD_INT 6
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 5
48018: PUSH
48019: LD_INT 6
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48040: LD_ADDR_VAR 0 32
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 4
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 4
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 3
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 5
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 5
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 4
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 6
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 6
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 5
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48183: LD_ADDR_VAR 0 33
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 4
48235: NEG
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 4
48246: NEG
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 4
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 5
48269: NEG
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 5
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 5
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 6
48303: NEG
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 6
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48338: LD_ADDR_VAR 0 34
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 3
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: LD_INT 3
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: LD_INT 4
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 4
48393: NEG
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 4
48405: NEG
48406: PUSH
48407: LD_INT 4
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 4
48417: NEG
48418: PUSH
48419: LD_INT 5
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 5
48429: NEG
48430: PUSH
48431: LD_INT 4
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 5
48441: NEG
48442: PUSH
48443: LD_INT 5
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 5
48453: NEG
48454: PUSH
48455: LD_INT 6
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 6
48465: NEG
48466: PUSH
48467: LD_INT 5
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 6
48477: NEG
48478: PUSH
48479: LD_INT 6
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48501: LD_ADDR_VAR 0 41
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 3
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: LIST
48544: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48545: LD_ADDR_VAR 0 42
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 3
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48586: LD_ADDR_VAR 0 43
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: LD_INT 3
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48626: LD_ADDR_VAR 0 44
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 3
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48667: LD_ADDR_VAR 0 45
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 3
48696: NEG
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48711: LD_ADDR_VAR 0 46
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48757: LD_ADDR_VAR 0 47
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: LD_INT 3
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 3
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48790: LD_ADDR_VAR 0 48
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48821: LD_ADDR_VAR 0 49
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48850: LD_ADDR_VAR 0 50
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 3
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48879: LD_ADDR_VAR 0 51
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48910: LD_ADDR_VAR 0 52
48914: PUSH
48915: LD_INT 3
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 3
48929: NEG
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48943: LD_ADDR_VAR 0 53
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48987: LD_ADDR_VAR 0 54
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 3
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49028: LD_ADDR_VAR 0 55
49032: PUSH
49033: LD_INT 3
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 3
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49068: LD_ADDR_VAR 0 56
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49109: LD_ADDR_VAR 0 57
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49153: LD_ADDR_VAR 0 58
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: LD_INT 3
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49199: LD_ADDR_VAR 0 59
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: LIST
49242: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49243: LD_ADDR_VAR 0 60
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49284: LD_ADDR_VAR 0 61
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49324: LD_ADDR_VAR 0 62
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49365: LD_ADDR_VAR 0 63
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49409: LD_ADDR_VAR 0 64
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: ST_TO_ADDR
// end ; 2 :
49455: GO 52721
49457: LD_INT 2
49459: DOUBLE
49460: EQUAL
49461: IFTRUE 49465
49463: GO 52720
49465: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49466: LD_ADDR_VAR 0 29
49470: PUSH
49471: LD_INT 4
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 4
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 5
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 5
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 4
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 5
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 3
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 4
49586: PUSH
49587: LD_INT 3
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 4
49596: PUSH
49597: LD_INT 4
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: LD_INT 4
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 4
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 4
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 4
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 3
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 4
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 5
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 5
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 4
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 5
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 3
49794: NEG
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 4
49805: NEG
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 4
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 4
49828: NEG
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 4
49851: NEG
49852: PUSH
49853: LD_INT 4
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 4
49863: NEG
49864: PUSH
49865: LD_INT 5
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: LD_INT 4
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: LD_INT 3
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 4
49899: NEG
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 5
49911: NEG
49912: PUSH
49913: LD_INT 4
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 5
49923: NEG
49924: PUSH
49925: LD_INT 5
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: NEG
49936: PUSH
49937: LD_INT 5
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 5
49947: NEG
49948: PUSH
49949: LD_INT 3
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50004: LD_ADDR_VAR 0 30
50008: PUSH
50009: LD_INT 4
50011: PUSH
50012: LD_INT 4
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 4
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 5
50031: PUSH
50032: LD_INT 4
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 5
50041: PUSH
50042: LD_INT 5
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 4
50051: PUSH
50052: LD_INT 5
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 3
50061: PUSH
50062: LD_INT 4
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 3
50071: PUSH
50072: LD_INT 3
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 5
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: PUSH
50092: LD_INT 5
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 3
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 4
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 4
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 4
50194: NEG
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 4
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 4
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 5
50250: NEG
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 5
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 5
50273: NEG
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: LD_INT 4
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: LD_INT 3
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 4
50356: NEG
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 4
50368: NEG
50369: PUSH
50370: LD_INT 4
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: LD_INT 4
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 4
50392: NEG
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 4
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 5
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 4
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 4
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 5
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: LD_INT 5
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50551: LD_ADDR_VAR 0 31
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 4
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 4
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 5
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 5
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 4
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 5
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 4
50707: NEG
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 4
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 4
50730: NEG
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 4
50753: NEG
50754: PUSH
50755: LD_INT 4
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 4
50765: NEG
50766: PUSH
50767: LD_INT 5
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: LD_INT 4
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 4
50801: NEG
50802: PUSH
50803: LD_INT 3
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 5
50813: NEG
50814: PUSH
50815: LD_INT 4
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 5
50825: NEG
50826: PUSH
50827: LD_INT 5
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: LD_INT 5
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 5
50849: NEG
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 4
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 4
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: LD_INT 4
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 4
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 4
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 5
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 5
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 4
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 3
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 5
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51101: LD_ADDR_VAR 0 32
51105: PUSH
51106: LD_INT 4
51108: NEG
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 4
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 5
51164: NEG
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 5
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 5
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 3
51222: NEG
51223: PUSH
51224: LD_INT 4
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: LD_INT 3
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 4
51270: NEG
51271: PUSH
51272: LD_INT 3
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 4
51282: NEG
51283: PUSH
51284: LD_INT 4
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: LD_INT 4
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 4
51306: NEG
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 4
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 5
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 4
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 3
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 4
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 5
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 5
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 4
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 4
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 4
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 4
51513: PUSH
51514: LD_INT 4
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 5
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 5
51543: PUSH
51544: LD_INT 5
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 4
51553: PUSH
51554: LD_INT 5
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: PUSH
51564: LD_INT 4
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 5
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: LD_INT 5
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51648: LD_ADDR_VAR 0 33
51652: PUSH
51653: LD_INT 4
51655: NEG
51656: PUSH
51657: LD_INT 4
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 4
51667: NEG
51668: PUSH
51669: LD_INT 5
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 4
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 4
51703: NEG
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 5
51715: NEG
51716: PUSH
51717: LD_INT 4
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 5
51727: NEG
51728: PUSH
51729: LD_INT 5
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: LD_INT 5
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 5
51751: NEG
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 4
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 4
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 4
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 4
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 4
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 5
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 5
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 4
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 5
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 4
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 4
51988: PUSH
51989: LD_INT 4
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 4
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 4
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 4
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 5
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 5
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 4
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 5
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52186: LD_ADDR_VAR 0 34
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 4
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 5
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 4
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 4
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 5
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: LD_INT 5
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 4
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 4
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 4
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 4
52388: PUSH
52389: LD_INT 4
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 4
52398: PUSH
52399: LD_INT 3
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 5
52408: PUSH
52409: LD_INT 4
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 5
52418: PUSH
52419: LD_INT 5
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 4
52428: PUSH
52429: LD_INT 5
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: LD_INT 4
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 5
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: LD_INT 5
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 3
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 4
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 4
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 3
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: LD_INT 4
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 4
52571: NEG
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 4
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 3
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 4
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 5
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 5
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 5
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// end ; end ;
52718: GO 52721
52720: POP
// case btype of b_depot , b_warehouse :
52721: LD_VAR 0 1
52725: PUSH
52726: LD_INT 0
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52740
52732: LD_INT 1
52734: DOUBLE
52735: EQUAL
52736: IFTRUE 52740
52738: GO 52941
52740: POP
// case nation of nation_american :
52741: LD_VAR 0 5
52745: PUSH
52746: LD_INT 1
52748: DOUBLE
52749: EQUAL
52750: IFTRUE 52754
52752: GO 52810
52754: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52755: LD_ADDR_VAR 0 9
52759: PUSH
52760: LD_VAR 0 11
52764: PUSH
52765: LD_VAR 0 12
52769: PUSH
52770: LD_VAR 0 13
52774: PUSH
52775: LD_VAR 0 14
52779: PUSH
52780: LD_VAR 0 15
52784: PUSH
52785: LD_VAR 0 16
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: PUSH
52798: LD_VAR 0 4
52802: PUSH
52803: LD_INT 1
52805: PLUS
52806: ARRAY
52807: ST_TO_ADDR
52808: GO 52939
52810: LD_INT 2
52812: DOUBLE
52813: EQUAL
52814: IFTRUE 52818
52816: GO 52874
52818: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52819: LD_ADDR_VAR 0 9
52823: PUSH
52824: LD_VAR 0 17
52828: PUSH
52829: LD_VAR 0 18
52833: PUSH
52834: LD_VAR 0 19
52838: PUSH
52839: LD_VAR 0 20
52843: PUSH
52844: LD_VAR 0 21
52848: PUSH
52849: LD_VAR 0 22
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: PUSH
52862: LD_VAR 0 4
52866: PUSH
52867: LD_INT 1
52869: PLUS
52870: ARRAY
52871: ST_TO_ADDR
52872: GO 52939
52874: LD_INT 3
52876: DOUBLE
52877: EQUAL
52878: IFTRUE 52882
52880: GO 52938
52882: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52883: LD_ADDR_VAR 0 9
52887: PUSH
52888: LD_VAR 0 23
52892: PUSH
52893: LD_VAR 0 24
52897: PUSH
52898: LD_VAR 0 25
52902: PUSH
52903: LD_VAR 0 26
52907: PUSH
52908: LD_VAR 0 27
52912: PUSH
52913: LD_VAR 0 28
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: PUSH
52926: LD_VAR 0 4
52930: PUSH
52931: LD_INT 1
52933: PLUS
52934: ARRAY
52935: ST_TO_ADDR
52936: GO 52939
52938: POP
52939: GO 53494
52941: LD_INT 2
52943: DOUBLE
52944: EQUAL
52945: IFTRUE 52955
52947: LD_INT 3
52949: DOUBLE
52950: EQUAL
52951: IFTRUE 52955
52953: GO 53011
52955: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52956: LD_ADDR_VAR 0 9
52960: PUSH
52961: LD_VAR 0 29
52965: PUSH
52966: LD_VAR 0 30
52970: PUSH
52971: LD_VAR 0 31
52975: PUSH
52976: LD_VAR 0 32
52980: PUSH
52981: LD_VAR 0 33
52985: PUSH
52986: LD_VAR 0 34
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: PUSH
52999: LD_VAR 0 4
53003: PUSH
53004: LD_INT 1
53006: PLUS
53007: ARRAY
53008: ST_TO_ADDR
53009: GO 53494
53011: LD_INT 16
53013: DOUBLE
53014: EQUAL
53015: IFTRUE 53073
53017: LD_INT 17
53019: DOUBLE
53020: EQUAL
53021: IFTRUE 53073
53023: LD_INT 18
53025: DOUBLE
53026: EQUAL
53027: IFTRUE 53073
53029: LD_INT 19
53031: DOUBLE
53032: EQUAL
53033: IFTRUE 53073
53035: LD_INT 22
53037: DOUBLE
53038: EQUAL
53039: IFTRUE 53073
53041: LD_INT 20
53043: DOUBLE
53044: EQUAL
53045: IFTRUE 53073
53047: LD_INT 21
53049: DOUBLE
53050: EQUAL
53051: IFTRUE 53073
53053: LD_INT 23
53055: DOUBLE
53056: EQUAL
53057: IFTRUE 53073
53059: LD_INT 24
53061: DOUBLE
53062: EQUAL
53063: IFTRUE 53073
53065: LD_INT 25
53067: DOUBLE
53068: EQUAL
53069: IFTRUE 53073
53071: GO 53129
53073: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53074: LD_ADDR_VAR 0 9
53078: PUSH
53079: LD_VAR 0 35
53083: PUSH
53084: LD_VAR 0 36
53088: PUSH
53089: LD_VAR 0 37
53093: PUSH
53094: LD_VAR 0 38
53098: PUSH
53099: LD_VAR 0 39
53103: PUSH
53104: LD_VAR 0 40
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: PUSH
53117: LD_VAR 0 4
53121: PUSH
53122: LD_INT 1
53124: PLUS
53125: ARRAY
53126: ST_TO_ADDR
53127: GO 53494
53129: LD_INT 6
53131: DOUBLE
53132: EQUAL
53133: IFTRUE 53185
53135: LD_INT 7
53137: DOUBLE
53138: EQUAL
53139: IFTRUE 53185
53141: LD_INT 8
53143: DOUBLE
53144: EQUAL
53145: IFTRUE 53185
53147: LD_INT 13
53149: DOUBLE
53150: EQUAL
53151: IFTRUE 53185
53153: LD_INT 12
53155: DOUBLE
53156: EQUAL
53157: IFTRUE 53185
53159: LD_INT 15
53161: DOUBLE
53162: EQUAL
53163: IFTRUE 53185
53165: LD_INT 11
53167: DOUBLE
53168: EQUAL
53169: IFTRUE 53185
53171: LD_INT 14
53173: DOUBLE
53174: EQUAL
53175: IFTRUE 53185
53177: LD_INT 10
53179: DOUBLE
53180: EQUAL
53181: IFTRUE 53185
53183: GO 53241
53185: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53186: LD_ADDR_VAR 0 9
53190: PUSH
53191: LD_VAR 0 41
53195: PUSH
53196: LD_VAR 0 42
53200: PUSH
53201: LD_VAR 0 43
53205: PUSH
53206: LD_VAR 0 44
53210: PUSH
53211: LD_VAR 0 45
53215: PUSH
53216: LD_VAR 0 46
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: PUSH
53229: LD_VAR 0 4
53233: PUSH
53234: LD_INT 1
53236: PLUS
53237: ARRAY
53238: ST_TO_ADDR
53239: GO 53494
53241: LD_INT 36
53243: DOUBLE
53244: EQUAL
53245: IFTRUE 53249
53247: GO 53305
53249: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53250: LD_ADDR_VAR 0 9
53254: PUSH
53255: LD_VAR 0 47
53259: PUSH
53260: LD_VAR 0 48
53264: PUSH
53265: LD_VAR 0 49
53269: PUSH
53270: LD_VAR 0 50
53274: PUSH
53275: LD_VAR 0 51
53279: PUSH
53280: LD_VAR 0 52
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: PUSH
53293: LD_VAR 0 4
53297: PUSH
53298: LD_INT 1
53300: PLUS
53301: ARRAY
53302: ST_TO_ADDR
53303: GO 53494
53305: LD_INT 4
53307: DOUBLE
53308: EQUAL
53309: IFTRUE 53331
53311: LD_INT 5
53313: DOUBLE
53314: EQUAL
53315: IFTRUE 53331
53317: LD_INT 34
53319: DOUBLE
53320: EQUAL
53321: IFTRUE 53331
53323: LD_INT 37
53325: DOUBLE
53326: EQUAL
53327: IFTRUE 53331
53329: GO 53387
53331: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53332: LD_ADDR_VAR 0 9
53336: PUSH
53337: LD_VAR 0 53
53341: PUSH
53342: LD_VAR 0 54
53346: PUSH
53347: LD_VAR 0 55
53351: PUSH
53352: LD_VAR 0 56
53356: PUSH
53357: LD_VAR 0 57
53361: PUSH
53362: LD_VAR 0 58
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: PUSH
53375: LD_VAR 0 4
53379: PUSH
53380: LD_INT 1
53382: PLUS
53383: ARRAY
53384: ST_TO_ADDR
53385: GO 53494
53387: LD_INT 31
53389: DOUBLE
53390: EQUAL
53391: IFTRUE 53437
53393: LD_INT 32
53395: DOUBLE
53396: EQUAL
53397: IFTRUE 53437
53399: LD_INT 33
53401: DOUBLE
53402: EQUAL
53403: IFTRUE 53437
53405: LD_INT 27
53407: DOUBLE
53408: EQUAL
53409: IFTRUE 53437
53411: LD_INT 26
53413: DOUBLE
53414: EQUAL
53415: IFTRUE 53437
53417: LD_INT 28
53419: DOUBLE
53420: EQUAL
53421: IFTRUE 53437
53423: LD_INT 29
53425: DOUBLE
53426: EQUAL
53427: IFTRUE 53437
53429: LD_INT 30
53431: DOUBLE
53432: EQUAL
53433: IFTRUE 53437
53435: GO 53493
53437: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53438: LD_ADDR_VAR 0 9
53442: PUSH
53443: LD_VAR 0 59
53447: PUSH
53448: LD_VAR 0 60
53452: PUSH
53453: LD_VAR 0 61
53457: PUSH
53458: LD_VAR 0 62
53462: PUSH
53463: LD_VAR 0 63
53467: PUSH
53468: LD_VAR 0 64
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: PUSH
53481: LD_VAR 0 4
53485: PUSH
53486: LD_INT 1
53488: PLUS
53489: ARRAY
53490: ST_TO_ADDR
53491: GO 53494
53493: POP
// temp_list2 = [ ] ;
53494: LD_ADDR_VAR 0 10
53498: PUSH
53499: EMPTY
53500: ST_TO_ADDR
// for i in temp_list do
53501: LD_ADDR_VAR 0 8
53505: PUSH
53506: LD_VAR 0 9
53510: PUSH
53511: FOR_IN
53512: IFFALSE 53564
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53514: LD_ADDR_VAR 0 10
53518: PUSH
53519: LD_VAR 0 10
53523: PUSH
53524: LD_VAR 0 8
53528: PUSH
53529: LD_INT 1
53531: ARRAY
53532: PUSH
53533: LD_VAR 0 2
53537: PLUS
53538: PUSH
53539: LD_VAR 0 8
53543: PUSH
53544: LD_INT 2
53546: ARRAY
53547: PUSH
53548: LD_VAR 0 3
53552: PLUS
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: ADD
53561: ST_TO_ADDR
53562: GO 53511
53564: POP
53565: POP
// result = temp_list2 ;
53566: LD_ADDR_VAR 0 7
53570: PUSH
53571: LD_VAR 0 10
53575: ST_TO_ADDR
// end ;
53576: LD_VAR 0 7
53580: RET
// export function EnemyInRange ( unit , dist ) ; begin
53581: LD_INT 0
53583: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53584: LD_ADDR_VAR 0 3
53588: PUSH
53589: LD_VAR 0 1
53593: PPUSH
53594: CALL_OW 255
53598: PPUSH
53599: LD_VAR 0 1
53603: PPUSH
53604: CALL_OW 250
53608: PPUSH
53609: LD_VAR 0 1
53613: PPUSH
53614: CALL_OW 251
53618: PPUSH
53619: LD_VAR 0 2
53623: PPUSH
53624: CALL 26977 0 4
53628: PUSH
53629: LD_INT 4
53631: ARRAY
53632: ST_TO_ADDR
// end ;
53633: LD_VAR 0 3
53637: RET
// export function PlayerSeeMe ( unit ) ; begin
53638: LD_INT 0
53640: PPUSH
// result := See ( your_side , unit ) ;
53641: LD_ADDR_VAR 0 2
53645: PUSH
53646: LD_OWVAR 2
53650: PPUSH
53651: LD_VAR 0 1
53655: PPUSH
53656: CALL_OW 292
53660: ST_TO_ADDR
// end ;
53661: LD_VAR 0 2
53665: RET
// export function ReverseDir ( unit ) ; begin
53666: LD_INT 0
53668: PPUSH
// if not unit then
53669: LD_VAR 0 1
53673: NOT
53674: IFFALSE 53678
// exit ;
53676: GO 53701
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53678: LD_ADDR_VAR 0 2
53682: PUSH
53683: LD_VAR 0 1
53687: PPUSH
53688: CALL_OW 254
53692: PUSH
53693: LD_INT 3
53695: PLUS
53696: PUSH
53697: LD_INT 6
53699: MOD
53700: ST_TO_ADDR
// end ;
53701: LD_VAR 0 2
53705: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53706: LD_INT 0
53708: PPUSH
53709: PPUSH
53710: PPUSH
53711: PPUSH
53712: PPUSH
// if not hexes then
53713: LD_VAR 0 2
53717: NOT
53718: IFFALSE 53722
// exit ;
53720: GO 53870
// dist := 9999 ;
53722: LD_ADDR_VAR 0 5
53726: PUSH
53727: LD_INT 9999
53729: ST_TO_ADDR
// for i = 1 to hexes do
53730: LD_ADDR_VAR 0 4
53734: PUSH
53735: DOUBLE
53736: LD_INT 1
53738: DEC
53739: ST_TO_ADDR
53740: LD_VAR 0 2
53744: PUSH
53745: FOR_TO
53746: IFFALSE 53858
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53748: LD_VAR 0 1
53752: PPUSH
53753: LD_VAR 0 2
53757: PUSH
53758: LD_VAR 0 4
53762: ARRAY
53763: PUSH
53764: LD_INT 1
53766: ARRAY
53767: PPUSH
53768: LD_VAR 0 2
53772: PUSH
53773: LD_VAR 0 4
53777: ARRAY
53778: PUSH
53779: LD_INT 2
53781: ARRAY
53782: PPUSH
53783: CALL_OW 297
53787: PUSH
53788: LD_VAR 0 5
53792: LESS
53793: IFFALSE 53856
// begin hex := hexes [ i ] ;
53795: LD_ADDR_VAR 0 7
53799: PUSH
53800: LD_VAR 0 2
53804: PUSH
53805: LD_VAR 0 4
53809: ARRAY
53810: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53811: LD_ADDR_VAR 0 5
53815: PUSH
53816: LD_VAR 0 1
53820: PPUSH
53821: LD_VAR 0 2
53825: PUSH
53826: LD_VAR 0 4
53830: ARRAY
53831: PUSH
53832: LD_INT 1
53834: ARRAY
53835: PPUSH
53836: LD_VAR 0 2
53840: PUSH
53841: LD_VAR 0 4
53845: ARRAY
53846: PUSH
53847: LD_INT 2
53849: ARRAY
53850: PPUSH
53851: CALL_OW 297
53855: ST_TO_ADDR
// end ; end ;
53856: GO 53745
53858: POP
53859: POP
// result := hex ;
53860: LD_ADDR_VAR 0 3
53864: PUSH
53865: LD_VAR 0 7
53869: ST_TO_ADDR
// end ;
53870: LD_VAR 0 3
53874: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53875: LD_INT 0
53877: PPUSH
53878: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53879: LD_VAR 0 1
53883: NOT
53884: PUSH
53885: LD_VAR 0 1
53889: PUSH
53890: LD_INT 21
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 23
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PPUSH
53914: CALL_OW 69
53918: IN
53919: NOT
53920: OR
53921: IFFALSE 53925
// exit ;
53923: GO 53972
// for i = 1 to 3 do
53925: LD_ADDR_VAR 0 3
53929: PUSH
53930: DOUBLE
53931: LD_INT 1
53933: DEC
53934: ST_TO_ADDR
53935: LD_INT 3
53937: PUSH
53938: FOR_TO
53939: IFFALSE 53970
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53941: LD_VAR 0 1
53945: PPUSH
53946: CALL_OW 250
53950: PPUSH
53951: LD_VAR 0 1
53955: PPUSH
53956: CALL_OW 251
53960: PPUSH
53961: LD_INT 1
53963: PPUSH
53964: CALL_OW 453
53968: GO 53938
53970: POP
53971: POP
// end ;
53972: LD_VAR 0 2
53976: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53977: LD_INT 0
53979: PPUSH
53980: PPUSH
53981: PPUSH
53982: PPUSH
53983: PPUSH
53984: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53985: LD_VAR 0 1
53989: NOT
53990: PUSH
53991: LD_VAR 0 2
53995: NOT
53996: OR
53997: PUSH
53998: LD_VAR 0 1
54002: PPUSH
54003: CALL_OW 314
54007: OR
54008: IFFALSE 54012
// exit ;
54010: GO 54453
// x := GetX ( enemy_unit ) ;
54012: LD_ADDR_VAR 0 7
54016: PUSH
54017: LD_VAR 0 2
54021: PPUSH
54022: CALL_OW 250
54026: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54027: LD_ADDR_VAR 0 8
54031: PUSH
54032: LD_VAR 0 2
54036: PPUSH
54037: CALL_OW 251
54041: ST_TO_ADDR
// if not x or not y then
54042: LD_VAR 0 7
54046: NOT
54047: PUSH
54048: LD_VAR 0 8
54052: NOT
54053: OR
54054: IFFALSE 54058
// exit ;
54056: GO 54453
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54058: LD_ADDR_VAR 0 6
54062: PUSH
54063: LD_VAR 0 7
54067: PPUSH
54068: LD_INT 0
54070: PPUSH
54071: LD_INT 4
54073: PPUSH
54074: CALL_OW 272
54078: PUSH
54079: LD_VAR 0 8
54083: PPUSH
54084: LD_INT 0
54086: PPUSH
54087: LD_INT 4
54089: PPUSH
54090: CALL_OW 273
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_VAR 0 7
54103: PPUSH
54104: LD_INT 1
54106: PPUSH
54107: LD_INT 4
54109: PPUSH
54110: CALL_OW 272
54114: PUSH
54115: LD_VAR 0 8
54119: PPUSH
54120: LD_INT 1
54122: PPUSH
54123: LD_INT 4
54125: PPUSH
54126: CALL_OW 273
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_VAR 0 7
54139: PPUSH
54140: LD_INT 2
54142: PPUSH
54143: LD_INT 4
54145: PPUSH
54146: CALL_OW 272
54150: PUSH
54151: LD_VAR 0 8
54155: PPUSH
54156: LD_INT 2
54158: PPUSH
54159: LD_INT 4
54161: PPUSH
54162: CALL_OW 273
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_VAR 0 7
54175: PPUSH
54176: LD_INT 3
54178: PPUSH
54179: LD_INT 4
54181: PPUSH
54182: CALL_OW 272
54186: PUSH
54187: LD_VAR 0 8
54191: PPUSH
54192: LD_INT 3
54194: PPUSH
54195: LD_INT 4
54197: PPUSH
54198: CALL_OW 273
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_VAR 0 7
54211: PPUSH
54212: LD_INT 4
54214: PPUSH
54215: LD_INT 4
54217: PPUSH
54218: CALL_OW 272
54222: PUSH
54223: LD_VAR 0 8
54227: PPUSH
54228: LD_INT 4
54230: PPUSH
54231: LD_INT 4
54233: PPUSH
54234: CALL_OW 273
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_VAR 0 7
54247: PPUSH
54248: LD_INT 5
54250: PPUSH
54251: LD_INT 4
54253: PPUSH
54254: CALL_OW 272
54258: PUSH
54259: LD_VAR 0 8
54263: PPUSH
54264: LD_INT 5
54266: PPUSH
54267: LD_INT 4
54269: PPUSH
54270: CALL_OW 273
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// for i = tmp downto 1 do
54287: LD_ADDR_VAR 0 4
54291: PUSH
54292: DOUBLE
54293: LD_VAR 0 6
54297: INC
54298: ST_TO_ADDR
54299: LD_INT 1
54301: PUSH
54302: FOR_DOWNTO
54303: IFFALSE 54404
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54305: LD_VAR 0 6
54309: PUSH
54310: LD_VAR 0 4
54314: ARRAY
54315: PUSH
54316: LD_INT 1
54318: ARRAY
54319: PPUSH
54320: LD_VAR 0 6
54324: PUSH
54325: LD_VAR 0 4
54329: ARRAY
54330: PUSH
54331: LD_INT 2
54333: ARRAY
54334: PPUSH
54335: CALL_OW 488
54339: NOT
54340: PUSH
54341: LD_VAR 0 6
54345: PUSH
54346: LD_VAR 0 4
54350: ARRAY
54351: PUSH
54352: LD_INT 1
54354: ARRAY
54355: PPUSH
54356: LD_VAR 0 6
54360: PUSH
54361: LD_VAR 0 4
54365: ARRAY
54366: PUSH
54367: LD_INT 2
54369: ARRAY
54370: PPUSH
54371: CALL_OW 428
54375: PUSH
54376: LD_INT 0
54378: NONEQUAL
54379: OR
54380: IFFALSE 54402
// tmp := Delete ( tmp , i ) ;
54382: LD_ADDR_VAR 0 6
54386: PUSH
54387: LD_VAR 0 6
54391: PPUSH
54392: LD_VAR 0 4
54396: PPUSH
54397: CALL_OW 3
54401: ST_TO_ADDR
54402: GO 54302
54404: POP
54405: POP
// j := GetClosestHex ( unit , tmp ) ;
54406: LD_ADDR_VAR 0 5
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: LD_VAR 0 6
54420: PPUSH
54421: CALL 53706 0 2
54425: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54426: LD_VAR 0 1
54430: PPUSH
54431: LD_VAR 0 5
54435: PUSH
54436: LD_INT 1
54438: ARRAY
54439: PPUSH
54440: LD_VAR 0 5
54444: PUSH
54445: LD_INT 2
54447: ARRAY
54448: PPUSH
54449: CALL_OW 111
// end ;
54453: LD_VAR 0 3
54457: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54458: LD_INT 0
54460: PPUSH
54461: PPUSH
54462: PPUSH
// uc_side = 0 ;
54463: LD_ADDR_OWVAR 20
54467: PUSH
54468: LD_INT 0
54470: ST_TO_ADDR
// uc_nation = 0 ;
54471: LD_ADDR_OWVAR 21
54475: PUSH
54476: LD_INT 0
54478: ST_TO_ADDR
// InitHc_All ( ) ;
54479: CALL_OW 584
// InitVc ;
54483: CALL_OW 20
// if mastodonts then
54487: LD_VAR 0 6
54491: IFFALSE 54558
// for i = 1 to mastodonts do
54493: LD_ADDR_VAR 0 11
54497: PUSH
54498: DOUBLE
54499: LD_INT 1
54501: DEC
54502: ST_TO_ADDR
54503: LD_VAR 0 6
54507: PUSH
54508: FOR_TO
54509: IFFALSE 54556
// begin vc_chassis := 31 ;
54511: LD_ADDR_OWVAR 37
54515: PUSH
54516: LD_INT 31
54518: ST_TO_ADDR
// vc_control := control_rider ;
54519: LD_ADDR_OWVAR 38
54523: PUSH
54524: LD_INT 4
54526: ST_TO_ADDR
// animal := CreateVehicle ;
54527: LD_ADDR_VAR 0 12
54531: PUSH
54532: CALL_OW 45
54536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54537: LD_VAR 0 12
54541: PPUSH
54542: LD_VAR 0 8
54546: PPUSH
54547: LD_INT 0
54549: PPUSH
54550: CALL 56746 0 3
// end ;
54554: GO 54508
54556: POP
54557: POP
// if horses then
54558: LD_VAR 0 5
54562: IFFALSE 54629
// for i = 1 to horses do
54564: LD_ADDR_VAR 0 11
54568: PUSH
54569: DOUBLE
54570: LD_INT 1
54572: DEC
54573: ST_TO_ADDR
54574: LD_VAR 0 5
54578: PUSH
54579: FOR_TO
54580: IFFALSE 54627
// begin hc_class := 21 ;
54582: LD_ADDR_OWVAR 28
54586: PUSH
54587: LD_INT 21
54589: ST_TO_ADDR
// hc_gallery :=  ;
54590: LD_ADDR_OWVAR 33
54594: PUSH
54595: LD_STRING 
54597: ST_TO_ADDR
// animal := CreateHuman ;
54598: LD_ADDR_VAR 0 12
54602: PUSH
54603: CALL_OW 44
54607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54608: LD_VAR 0 12
54612: PPUSH
54613: LD_VAR 0 8
54617: PPUSH
54618: LD_INT 0
54620: PPUSH
54621: CALL 56746 0 3
// end ;
54625: GO 54579
54627: POP
54628: POP
// if birds then
54629: LD_VAR 0 1
54633: IFFALSE 54700
// for i = 1 to birds do
54635: LD_ADDR_VAR 0 11
54639: PUSH
54640: DOUBLE
54641: LD_INT 1
54643: DEC
54644: ST_TO_ADDR
54645: LD_VAR 0 1
54649: PUSH
54650: FOR_TO
54651: IFFALSE 54698
// begin hc_class = 18 ;
54653: LD_ADDR_OWVAR 28
54657: PUSH
54658: LD_INT 18
54660: ST_TO_ADDR
// hc_gallery =  ;
54661: LD_ADDR_OWVAR 33
54665: PUSH
54666: LD_STRING 
54668: ST_TO_ADDR
// animal := CreateHuman ;
54669: LD_ADDR_VAR 0 12
54673: PUSH
54674: CALL_OW 44
54678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54679: LD_VAR 0 12
54683: PPUSH
54684: LD_VAR 0 8
54688: PPUSH
54689: LD_INT 0
54691: PPUSH
54692: CALL 56746 0 3
// end ;
54696: GO 54650
54698: POP
54699: POP
// if tigers then
54700: LD_VAR 0 2
54704: IFFALSE 54788
// for i = 1 to tigers do
54706: LD_ADDR_VAR 0 11
54710: PUSH
54711: DOUBLE
54712: LD_INT 1
54714: DEC
54715: ST_TO_ADDR
54716: LD_VAR 0 2
54720: PUSH
54721: FOR_TO
54722: IFFALSE 54786
// begin hc_class = class_tiger ;
54724: LD_ADDR_OWVAR 28
54728: PUSH
54729: LD_INT 14
54731: ST_TO_ADDR
// hc_gallery =  ;
54732: LD_ADDR_OWVAR 33
54736: PUSH
54737: LD_STRING 
54739: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54740: LD_ADDR_OWVAR 35
54744: PUSH
54745: LD_INT 7
54747: NEG
54748: PPUSH
54749: LD_INT 7
54751: PPUSH
54752: CALL_OW 12
54756: ST_TO_ADDR
// animal := CreateHuman ;
54757: LD_ADDR_VAR 0 12
54761: PUSH
54762: CALL_OW 44
54766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54767: LD_VAR 0 12
54771: PPUSH
54772: LD_VAR 0 8
54776: PPUSH
54777: LD_INT 0
54779: PPUSH
54780: CALL 56746 0 3
// end ;
54784: GO 54721
54786: POP
54787: POP
// if apemans then
54788: LD_VAR 0 3
54792: IFFALSE 54915
// for i = 1 to apemans do
54794: LD_ADDR_VAR 0 11
54798: PUSH
54799: DOUBLE
54800: LD_INT 1
54802: DEC
54803: ST_TO_ADDR
54804: LD_VAR 0 3
54808: PUSH
54809: FOR_TO
54810: IFFALSE 54913
// begin hc_class = class_apeman ;
54812: LD_ADDR_OWVAR 28
54816: PUSH
54817: LD_INT 12
54819: ST_TO_ADDR
// hc_gallery =  ;
54820: LD_ADDR_OWVAR 33
54824: PUSH
54825: LD_STRING 
54827: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54828: LD_ADDR_OWVAR 35
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PPUSH
54837: LD_INT 2
54839: PPUSH
54840: CALL_OW 12
54844: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54845: LD_ADDR_OWVAR 31
54849: PUSH
54850: LD_INT 1
54852: PPUSH
54853: LD_INT 3
54855: PPUSH
54856: CALL_OW 12
54860: PUSH
54861: LD_INT 1
54863: PPUSH
54864: LD_INT 3
54866: PPUSH
54867: CALL_OW 12
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: ST_TO_ADDR
// animal := CreateHuman ;
54884: LD_ADDR_VAR 0 12
54888: PUSH
54889: CALL_OW 44
54893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54894: LD_VAR 0 12
54898: PPUSH
54899: LD_VAR 0 8
54903: PPUSH
54904: LD_INT 0
54906: PPUSH
54907: CALL 56746 0 3
// end ;
54911: GO 54809
54913: POP
54914: POP
// if enchidnas then
54915: LD_VAR 0 4
54919: IFFALSE 54986
// for i = 1 to enchidnas do
54921: LD_ADDR_VAR 0 11
54925: PUSH
54926: DOUBLE
54927: LD_INT 1
54929: DEC
54930: ST_TO_ADDR
54931: LD_VAR 0 4
54935: PUSH
54936: FOR_TO
54937: IFFALSE 54984
// begin hc_class = 13 ;
54939: LD_ADDR_OWVAR 28
54943: PUSH
54944: LD_INT 13
54946: ST_TO_ADDR
// hc_gallery =  ;
54947: LD_ADDR_OWVAR 33
54951: PUSH
54952: LD_STRING 
54954: ST_TO_ADDR
// animal := CreateHuman ;
54955: LD_ADDR_VAR 0 12
54959: PUSH
54960: CALL_OW 44
54964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54965: LD_VAR 0 12
54969: PPUSH
54970: LD_VAR 0 8
54974: PPUSH
54975: LD_INT 0
54977: PPUSH
54978: CALL 56746 0 3
// end ;
54982: GO 54936
54984: POP
54985: POP
// if fishes then
54986: LD_VAR 0 7
54990: IFFALSE 55057
// for i = 1 to fishes do
54992: LD_ADDR_VAR 0 11
54996: PUSH
54997: DOUBLE
54998: LD_INT 1
55000: DEC
55001: ST_TO_ADDR
55002: LD_VAR 0 7
55006: PUSH
55007: FOR_TO
55008: IFFALSE 55055
// begin hc_class = 20 ;
55010: LD_ADDR_OWVAR 28
55014: PUSH
55015: LD_INT 20
55017: ST_TO_ADDR
// hc_gallery =  ;
55018: LD_ADDR_OWVAR 33
55022: PUSH
55023: LD_STRING 
55025: ST_TO_ADDR
// animal := CreateHuman ;
55026: LD_ADDR_VAR 0 12
55030: PUSH
55031: CALL_OW 44
55035: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55036: LD_VAR 0 12
55040: PPUSH
55041: LD_VAR 0 9
55045: PPUSH
55046: LD_INT 0
55048: PPUSH
55049: CALL 56746 0 3
// end ;
55053: GO 55007
55055: POP
55056: POP
// end ;
55057: LD_VAR 0 10
55061: RET
// export function WantHeal ( sci , unit ) ; begin
55062: LD_INT 0
55064: PPUSH
// if GetTaskList ( sci ) > 0 then
55065: LD_VAR 0 1
55069: PPUSH
55070: CALL_OW 437
55074: PUSH
55075: LD_INT 0
55077: GREATER
55078: IFFALSE 55148
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55080: LD_VAR 0 1
55084: PPUSH
55085: CALL_OW 437
55089: PUSH
55090: LD_INT 1
55092: ARRAY
55093: PUSH
55094: LD_INT 1
55096: ARRAY
55097: PUSH
55098: LD_STRING l
55100: EQUAL
55101: PUSH
55102: LD_VAR 0 1
55106: PPUSH
55107: CALL_OW 437
55111: PUSH
55112: LD_INT 1
55114: ARRAY
55115: PUSH
55116: LD_INT 4
55118: ARRAY
55119: PUSH
55120: LD_VAR 0 2
55124: EQUAL
55125: AND
55126: IFFALSE 55138
// result := true else
55128: LD_ADDR_VAR 0 3
55132: PUSH
55133: LD_INT 1
55135: ST_TO_ADDR
55136: GO 55146
// result := false ;
55138: LD_ADDR_VAR 0 3
55142: PUSH
55143: LD_INT 0
55145: ST_TO_ADDR
// end else
55146: GO 55156
// result := false ;
55148: LD_ADDR_VAR 0 3
55152: PUSH
55153: LD_INT 0
55155: ST_TO_ADDR
// end ;
55156: LD_VAR 0 3
55160: RET
// export function HealTarget ( sci ) ; begin
55161: LD_INT 0
55163: PPUSH
// if not sci then
55164: LD_VAR 0 1
55168: NOT
55169: IFFALSE 55173
// exit ;
55171: GO 55238
// result := 0 ;
55173: LD_ADDR_VAR 0 2
55177: PUSH
55178: LD_INT 0
55180: ST_TO_ADDR
// if GetTaskList ( sci ) then
55181: LD_VAR 0 1
55185: PPUSH
55186: CALL_OW 437
55190: IFFALSE 55238
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55192: LD_VAR 0 1
55196: PPUSH
55197: CALL_OW 437
55201: PUSH
55202: LD_INT 1
55204: ARRAY
55205: PUSH
55206: LD_INT 1
55208: ARRAY
55209: PUSH
55210: LD_STRING l
55212: EQUAL
55213: IFFALSE 55238
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55215: LD_ADDR_VAR 0 2
55219: PUSH
55220: LD_VAR 0 1
55224: PPUSH
55225: CALL_OW 437
55229: PUSH
55230: LD_INT 1
55232: ARRAY
55233: PUSH
55234: LD_INT 4
55236: ARRAY
55237: ST_TO_ADDR
// end ;
55238: LD_VAR 0 2
55242: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55243: LD_INT 0
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
// if not base_units then
55249: LD_VAR 0 1
55253: NOT
55254: IFFALSE 55258
// exit ;
55256: GO 55345
// result := false ;
55258: LD_ADDR_VAR 0 2
55262: PUSH
55263: LD_INT 0
55265: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55266: LD_ADDR_VAR 0 5
55270: PUSH
55271: LD_VAR 0 1
55275: PPUSH
55276: LD_INT 21
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PPUSH
55286: CALL_OW 72
55290: ST_TO_ADDR
// if not tmp then
55291: LD_VAR 0 5
55295: NOT
55296: IFFALSE 55300
// exit ;
55298: GO 55345
// for i in tmp do
55300: LD_ADDR_VAR 0 3
55304: PUSH
55305: LD_VAR 0 5
55309: PUSH
55310: FOR_IN
55311: IFFALSE 55343
// begin result := EnemyInRange ( i , 22 ) ;
55313: LD_ADDR_VAR 0 2
55317: PUSH
55318: LD_VAR 0 3
55322: PPUSH
55323: LD_INT 22
55325: PPUSH
55326: CALL 53581 0 2
55330: ST_TO_ADDR
// if result then
55331: LD_VAR 0 2
55335: IFFALSE 55341
// exit ;
55337: POP
55338: POP
55339: GO 55345
// end ;
55341: GO 55310
55343: POP
55344: POP
// end ;
55345: LD_VAR 0 2
55349: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55350: LD_INT 0
55352: PPUSH
55353: PPUSH
// if not units then
55354: LD_VAR 0 1
55358: NOT
55359: IFFALSE 55363
// exit ;
55361: GO 55433
// result := [ ] ;
55363: LD_ADDR_VAR 0 3
55367: PUSH
55368: EMPTY
55369: ST_TO_ADDR
// for i in units do
55370: LD_ADDR_VAR 0 4
55374: PUSH
55375: LD_VAR 0 1
55379: PUSH
55380: FOR_IN
55381: IFFALSE 55431
// if GetTag ( i ) = tag then
55383: LD_VAR 0 4
55387: PPUSH
55388: CALL_OW 110
55392: PUSH
55393: LD_VAR 0 2
55397: EQUAL
55398: IFFALSE 55429
// result := Replace ( result , result + 1 , i ) ;
55400: LD_ADDR_VAR 0 3
55404: PUSH
55405: LD_VAR 0 3
55409: PPUSH
55410: LD_VAR 0 3
55414: PUSH
55415: LD_INT 1
55417: PLUS
55418: PPUSH
55419: LD_VAR 0 4
55423: PPUSH
55424: CALL_OW 1
55428: ST_TO_ADDR
55429: GO 55380
55431: POP
55432: POP
// end ;
55433: LD_VAR 0 3
55437: RET
// export function IsDriver ( un ) ; begin
55438: LD_INT 0
55440: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55441: LD_ADDR_VAR 0 2
55445: PUSH
55446: LD_VAR 0 1
55450: PUSH
55451: LD_INT 55
55453: PUSH
55454: EMPTY
55455: LIST
55456: PPUSH
55457: CALL_OW 69
55461: IN
55462: ST_TO_ADDR
// end ;
55463: LD_VAR 0 2
55467: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55468: LD_INT 0
55470: PPUSH
55471: PPUSH
// list := [ ] ;
55472: LD_ADDR_VAR 0 5
55476: PUSH
55477: EMPTY
55478: ST_TO_ADDR
// case d of 0 :
55479: LD_VAR 0 3
55483: PUSH
55484: LD_INT 0
55486: DOUBLE
55487: EQUAL
55488: IFTRUE 55492
55490: GO 55625
55492: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55493: LD_ADDR_VAR 0 5
55497: PUSH
55498: LD_VAR 0 1
55502: PUSH
55503: LD_INT 4
55505: MINUS
55506: PUSH
55507: LD_VAR 0 2
55511: PUSH
55512: LD_INT 4
55514: MINUS
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: PUSH
55524: LD_VAR 0 1
55528: PUSH
55529: LD_INT 3
55531: MINUS
55532: PUSH
55533: LD_VAR 0 2
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: PUSH
55546: LD_VAR 0 1
55550: PUSH
55551: LD_INT 4
55553: PLUS
55554: PUSH
55555: LD_VAR 0 2
55559: PUSH
55560: LD_INT 4
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: PUSH
55568: LD_VAR 0 1
55572: PUSH
55573: LD_INT 3
55575: PLUS
55576: PUSH
55577: LD_VAR 0 2
55581: PUSH
55582: LD_INT 3
55584: PLUS
55585: PUSH
55586: LD_INT 5
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: PUSH
55594: LD_VAR 0 1
55598: PUSH
55599: LD_VAR 0 2
55603: PUSH
55604: LD_INT 4
55606: PLUS
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// end ; 1 :
55623: GO 56323
55625: LD_INT 1
55627: DOUBLE
55628: EQUAL
55629: IFTRUE 55633
55631: GO 55766
55633: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55634: LD_ADDR_VAR 0 5
55638: PUSH
55639: LD_VAR 0 1
55643: PUSH
55644: LD_VAR 0 2
55648: PUSH
55649: LD_INT 4
55651: MINUS
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: PUSH
55661: LD_VAR 0 1
55665: PUSH
55666: LD_INT 3
55668: MINUS
55669: PUSH
55670: LD_VAR 0 2
55674: PUSH
55675: LD_INT 3
55677: MINUS
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: LIST
55686: PUSH
55687: LD_VAR 0 1
55691: PUSH
55692: LD_INT 4
55694: MINUS
55695: PUSH
55696: LD_VAR 0 2
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: PUSH
55709: LD_VAR 0 1
55713: PUSH
55714: LD_VAR 0 2
55718: PUSH
55719: LD_INT 3
55721: PLUS
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: LIST
55730: PUSH
55731: LD_VAR 0 1
55735: PUSH
55736: LD_INT 4
55738: PLUS
55739: PUSH
55740: LD_VAR 0 2
55744: PUSH
55745: LD_INT 4
55747: PLUS
55748: PUSH
55749: LD_INT 5
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: ST_TO_ADDR
// end ; 2 :
55764: GO 56323
55766: LD_INT 2
55768: DOUBLE
55769: EQUAL
55770: IFTRUE 55774
55772: GO 55903
55774: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55775: LD_ADDR_VAR 0 5
55779: PUSH
55780: LD_VAR 0 1
55784: PUSH
55785: LD_VAR 0 2
55789: PUSH
55790: LD_INT 3
55792: MINUS
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: PUSH
55802: LD_VAR 0 1
55806: PUSH
55807: LD_INT 4
55809: PLUS
55810: PUSH
55811: LD_VAR 0 2
55815: PUSH
55816: LD_INT 4
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: LIST
55823: PUSH
55824: LD_VAR 0 1
55828: PUSH
55829: LD_VAR 0 2
55833: PUSH
55834: LD_INT 4
55836: PLUS
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: PUSH
55846: LD_VAR 0 1
55850: PUSH
55851: LD_INT 3
55853: MINUS
55854: PUSH
55855: LD_VAR 0 2
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: LIST
55867: PUSH
55868: LD_VAR 0 1
55872: PUSH
55873: LD_INT 4
55875: MINUS
55876: PUSH
55877: LD_VAR 0 2
55881: PUSH
55882: LD_INT 4
55884: MINUS
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// end ; 3 :
55901: GO 56323
55903: LD_INT 3
55905: DOUBLE
55906: EQUAL
55907: IFTRUE 55911
55909: GO 56044
55911: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55912: LD_ADDR_VAR 0 5
55916: PUSH
55917: LD_VAR 0 1
55921: PUSH
55922: LD_INT 3
55924: PLUS
55925: PUSH
55926: LD_VAR 0 2
55930: PUSH
55931: LD_INT 4
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: PUSH
55939: LD_VAR 0 1
55943: PUSH
55944: LD_INT 4
55946: PLUS
55947: PUSH
55948: LD_VAR 0 2
55952: PUSH
55953: LD_INT 4
55955: PLUS
55956: PUSH
55957: LD_INT 5
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: PUSH
55965: LD_VAR 0 1
55969: PUSH
55970: LD_INT 4
55972: MINUS
55973: PUSH
55974: LD_VAR 0 2
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: PUSH
55987: LD_VAR 0 1
55991: PUSH
55992: LD_VAR 0 2
55996: PUSH
55997: LD_INT 4
55999: MINUS
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: PUSH
56009: LD_VAR 0 1
56013: PUSH
56014: LD_INT 3
56016: MINUS
56017: PUSH
56018: LD_VAR 0 2
56022: PUSH
56023: LD_INT 3
56025: MINUS
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: ST_TO_ADDR
// end ; 4 :
56042: GO 56323
56044: LD_INT 4
56046: DOUBLE
56047: EQUAL
56048: IFTRUE 56052
56050: GO 56185
56052: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56053: LD_ADDR_VAR 0 5
56057: PUSH
56058: LD_VAR 0 1
56062: PUSH
56063: LD_VAR 0 2
56067: PUSH
56068: LD_INT 4
56070: PLUS
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: LIST
56079: PUSH
56080: LD_VAR 0 1
56084: PUSH
56085: LD_INT 3
56087: PLUS
56088: PUSH
56089: LD_VAR 0 2
56093: PUSH
56094: LD_INT 3
56096: PLUS
56097: PUSH
56098: LD_INT 5
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: PUSH
56106: LD_VAR 0 1
56110: PUSH
56111: LD_INT 4
56113: PLUS
56114: PUSH
56115: LD_VAR 0 2
56119: PUSH
56120: LD_INT 4
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: PUSH
56128: LD_VAR 0 1
56132: PUSH
56133: LD_VAR 0 2
56137: PUSH
56138: LD_INT 3
56140: MINUS
56141: PUSH
56142: LD_INT 3
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: PUSH
56150: LD_VAR 0 1
56154: PUSH
56155: LD_INT 4
56157: MINUS
56158: PUSH
56159: LD_VAR 0 2
56163: PUSH
56164: LD_INT 4
56166: MINUS
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// end ; 5 :
56183: GO 56323
56185: LD_INT 5
56187: DOUBLE
56188: EQUAL
56189: IFTRUE 56193
56191: GO 56322
56193: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56194: LD_ADDR_VAR 0 5
56198: PUSH
56199: LD_VAR 0 1
56203: PUSH
56204: LD_INT 4
56206: MINUS
56207: PUSH
56208: LD_VAR 0 2
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: PUSH
56221: LD_VAR 0 1
56225: PUSH
56226: LD_VAR 0 2
56230: PUSH
56231: LD_INT 4
56233: MINUS
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: PUSH
56243: LD_VAR 0 1
56247: PUSH
56248: LD_INT 4
56250: PLUS
56251: PUSH
56252: LD_VAR 0 2
56256: PUSH
56257: LD_INT 4
56259: PLUS
56260: PUSH
56261: LD_INT 5
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: PUSH
56269: LD_VAR 0 1
56273: PUSH
56274: LD_INT 3
56276: PLUS
56277: PUSH
56278: LD_VAR 0 2
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: LIST
56290: PUSH
56291: LD_VAR 0 1
56295: PUSH
56296: LD_VAR 0 2
56300: PUSH
56301: LD_INT 3
56303: PLUS
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: ST_TO_ADDR
// end ; end ;
56320: GO 56323
56322: POP
// result := list ;
56323: LD_ADDR_VAR 0 4
56327: PUSH
56328: LD_VAR 0 5
56332: ST_TO_ADDR
// end ;
56333: LD_VAR 0 4
56337: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56338: LD_INT 0
56340: PPUSH
56341: PPUSH
56342: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56343: LD_VAR 0 1
56347: NOT
56348: PUSH
56349: LD_VAR 0 2
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: LD_INT 4
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: IN
56372: NOT
56373: OR
56374: IFFALSE 56378
// exit ;
56376: GO 56470
// tmp := [ ] ;
56378: LD_ADDR_VAR 0 5
56382: PUSH
56383: EMPTY
56384: ST_TO_ADDR
// for i in units do
56385: LD_ADDR_VAR 0 4
56389: PUSH
56390: LD_VAR 0 1
56394: PUSH
56395: FOR_IN
56396: IFFALSE 56439
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56398: LD_ADDR_VAR 0 5
56402: PUSH
56403: LD_VAR 0 5
56407: PPUSH
56408: LD_VAR 0 5
56412: PUSH
56413: LD_INT 1
56415: PLUS
56416: PPUSH
56417: LD_VAR 0 4
56421: PPUSH
56422: LD_VAR 0 2
56426: PPUSH
56427: CALL_OW 259
56431: PPUSH
56432: CALL_OW 2
56436: ST_TO_ADDR
56437: GO 56395
56439: POP
56440: POP
// if not tmp then
56441: LD_VAR 0 5
56445: NOT
56446: IFFALSE 56450
// exit ;
56448: GO 56470
// result := SortListByListDesc ( units , tmp ) ;
56450: LD_ADDR_VAR 0 3
56454: PUSH
56455: LD_VAR 0 1
56459: PPUSH
56460: LD_VAR 0 5
56464: PPUSH
56465: CALL_OW 77
56469: ST_TO_ADDR
// end ;
56470: LD_VAR 0 3
56474: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56475: LD_INT 0
56477: PPUSH
56478: PPUSH
56479: PPUSH
// result := false ;
56480: LD_ADDR_VAR 0 3
56484: PUSH
56485: LD_INT 0
56487: ST_TO_ADDR
// x := GetX ( building ) ;
56488: LD_ADDR_VAR 0 4
56492: PUSH
56493: LD_VAR 0 2
56497: PPUSH
56498: CALL_OW 250
56502: ST_TO_ADDR
// y := GetY ( building ) ;
56503: LD_ADDR_VAR 0 5
56507: PUSH
56508: LD_VAR 0 2
56512: PPUSH
56513: CALL_OW 251
56517: ST_TO_ADDR
// if not building or not x or not y then
56518: LD_VAR 0 2
56522: NOT
56523: PUSH
56524: LD_VAR 0 4
56528: NOT
56529: OR
56530: PUSH
56531: LD_VAR 0 5
56535: NOT
56536: OR
56537: IFFALSE 56541
// exit ;
56539: GO 56633
// if GetTaskList ( unit ) then
56541: LD_VAR 0 1
56545: PPUSH
56546: CALL_OW 437
56550: IFFALSE 56633
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56552: LD_STRING e
56554: PUSH
56555: LD_VAR 0 1
56559: PPUSH
56560: CALL_OW 437
56564: PUSH
56565: LD_INT 1
56567: ARRAY
56568: PUSH
56569: LD_INT 1
56571: ARRAY
56572: EQUAL
56573: PUSH
56574: LD_VAR 0 4
56578: PUSH
56579: LD_VAR 0 1
56583: PPUSH
56584: CALL_OW 437
56588: PUSH
56589: LD_INT 1
56591: ARRAY
56592: PUSH
56593: LD_INT 2
56595: ARRAY
56596: EQUAL
56597: AND
56598: PUSH
56599: LD_VAR 0 5
56603: PUSH
56604: LD_VAR 0 1
56608: PPUSH
56609: CALL_OW 437
56613: PUSH
56614: LD_INT 1
56616: ARRAY
56617: PUSH
56618: LD_INT 3
56620: ARRAY
56621: EQUAL
56622: AND
56623: IFFALSE 56633
// result := true end ;
56625: LD_ADDR_VAR 0 3
56629: PUSH
56630: LD_INT 1
56632: ST_TO_ADDR
// end ;
56633: LD_VAR 0 3
56637: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56638: LD_INT 0
56640: PPUSH
// result := false ;
56641: LD_ADDR_VAR 0 4
56645: PUSH
56646: LD_INT 0
56648: ST_TO_ADDR
// if GetTaskList ( unit ) then
56649: LD_VAR 0 1
56653: PPUSH
56654: CALL_OW 437
56658: IFFALSE 56741
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56660: LD_STRING M
56662: PUSH
56663: LD_VAR 0 1
56667: PPUSH
56668: CALL_OW 437
56672: PUSH
56673: LD_INT 1
56675: ARRAY
56676: PUSH
56677: LD_INT 1
56679: ARRAY
56680: EQUAL
56681: PUSH
56682: LD_VAR 0 2
56686: PUSH
56687: LD_VAR 0 1
56691: PPUSH
56692: CALL_OW 437
56696: PUSH
56697: LD_INT 1
56699: ARRAY
56700: PUSH
56701: LD_INT 2
56703: ARRAY
56704: EQUAL
56705: AND
56706: PUSH
56707: LD_VAR 0 3
56711: PUSH
56712: LD_VAR 0 1
56716: PPUSH
56717: CALL_OW 437
56721: PUSH
56722: LD_INT 1
56724: ARRAY
56725: PUSH
56726: LD_INT 3
56728: ARRAY
56729: EQUAL
56730: AND
56731: IFFALSE 56741
// result := true ;
56733: LD_ADDR_VAR 0 4
56737: PUSH
56738: LD_INT 1
56740: ST_TO_ADDR
// end ; end ;
56741: LD_VAR 0 4
56745: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56746: LD_INT 0
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
// if not unit or not area then
56752: LD_VAR 0 1
56756: NOT
56757: PUSH
56758: LD_VAR 0 2
56762: NOT
56763: OR
56764: IFFALSE 56768
// exit ;
56766: GO 56932
// tmp := AreaToList ( area , i ) ;
56768: LD_ADDR_VAR 0 6
56772: PUSH
56773: LD_VAR 0 2
56777: PPUSH
56778: LD_VAR 0 5
56782: PPUSH
56783: CALL_OW 517
56787: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56788: LD_ADDR_VAR 0 5
56792: PUSH
56793: DOUBLE
56794: LD_INT 1
56796: DEC
56797: ST_TO_ADDR
56798: LD_VAR 0 6
56802: PUSH
56803: LD_INT 1
56805: ARRAY
56806: PUSH
56807: FOR_TO
56808: IFFALSE 56930
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56810: LD_ADDR_VAR 0 7
56814: PUSH
56815: LD_VAR 0 6
56819: PUSH
56820: LD_INT 1
56822: ARRAY
56823: PUSH
56824: LD_VAR 0 5
56828: ARRAY
56829: PUSH
56830: LD_VAR 0 6
56834: PUSH
56835: LD_INT 2
56837: ARRAY
56838: PUSH
56839: LD_VAR 0 5
56843: ARRAY
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56849: LD_VAR 0 7
56853: PUSH
56854: LD_INT 1
56856: ARRAY
56857: PPUSH
56858: LD_VAR 0 7
56862: PUSH
56863: LD_INT 2
56865: ARRAY
56866: PPUSH
56867: CALL_OW 428
56871: PUSH
56872: LD_INT 0
56874: EQUAL
56875: IFFALSE 56928
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56877: LD_VAR 0 1
56881: PPUSH
56882: LD_VAR 0 7
56886: PUSH
56887: LD_INT 1
56889: ARRAY
56890: PPUSH
56891: LD_VAR 0 7
56895: PUSH
56896: LD_INT 2
56898: ARRAY
56899: PPUSH
56900: LD_VAR 0 3
56904: PPUSH
56905: CALL_OW 48
// result := IsPlaced ( unit ) ;
56909: LD_ADDR_VAR 0 4
56913: PUSH
56914: LD_VAR 0 1
56918: PPUSH
56919: CALL_OW 305
56923: ST_TO_ADDR
// exit ;
56924: POP
56925: POP
56926: GO 56932
// end ; end ;
56928: GO 56807
56930: POP
56931: POP
// end ;
56932: LD_VAR 0 4
56936: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56937: LD_INT 0
56939: PPUSH
56940: PPUSH
56941: PPUSH
// if not side or side > 8 then
56942: LD_VAR 0 1
56946: NOT
56947: PUSH
56948: LD_VAR 0 1
56952: PUSH
56953: LD_INT 8
56955: GREATER
56956: OR
56957: IFFALSE 56961
// exit ;
56959: GO 57148
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56961: LD_ADDR_VAR 0 4
56965: PUSH
56966: LD_INT 22
56968: PUSH
56969: LD_VAR 0 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 21
56980: PUSH
56981: LD_INT 3
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PPUSH
56992: CALL_OW 69
56996: ST_TO_ADDR
// if not tmp then
56997: LD_VAR 0 4
57001: NOT
57002: IFFALSE 57006
// exit ;
57004: GO 57148
// enable_addtolog := true ;
57006: LD_ADDR_OWVAR 81
57010: PUSH
57011: LD_INT 1
57013: ST_TO_ADDR
// AddToLog ( [ ) ;
57014: LD_STRING [
57016: PPUSH
57017: CALL_OW 561
// for i in tmp do
57021: LD_ADDR_VAR 0 3
57025: PUSH
57026: LD_VAR 0 4
57030: PUSH
57031: FOR_IN
57032: IFFALSE 57139
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57034: LD_STRING [
57036: PUSH
57037: LD_VAR 0 3
57041: PPUSH
57042: CALL_OW 266
57046: STR
57047: PUSH
57048: LD_STRING , 
57050: STR
57051: PUSH
57052: LD_VAR 0 3
57056: PPUSH
57057: CALL_OW 250
57061: STR
57062: PUSH
57063: LD_STRING , 
57065: STR
57066: PUSH
57067: LD_VAR 0 3
57071: PPUSH
57072: CALL_OW 251
57076: STR
57077: PUSH
57078: LD_STRING , 
57080: STR
57081: PUSH
57082: LD_VAR 0 3
57086: PPUSH
57087: CALL_OW 254
57091: STR
57092: PUSH
57093: LD_STRING , 
57095: STR
57096: PUSH
57097: LD_VAR 0 3
57101: PPUSH
57102: LD_INT 1
57104: PPUSH
57105: CALL_OW 268
57109: STR
57110: PUSH
57111: LD_STRING , 
57113: STR
57114: PUSH
57115: LD_VAR 0 3
57119: PPUSH
57120: LD_INT 2
57122: PPUSH
57123: CALL_OW 268
57127: STR
57128: PUSH
57129: LD_STRING ],
57131: STR
57132: PPUSH
57133: CALL_OW 561
// end ;
57137: GO 57031
57139: POP
57140: POP
// AddToLog ( ]; ) ;
57141: LD_STRING ];
57143: PPUSH
57144: CALL_OW 561
// end ;
57148: LD_VAR 0 2
57152: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57153: LD_INT 0
57155: PPUSH
57156: PPUSH
57157: PPUSH
57158: PPUSH
57159: PPUSH
// if not area or not rate or not max then
57160: LD_VAR 0 1
57164: NOT
57165: PUSH
57166: LD_VAR 0 2
57170: NOT
57171: OR
57172: PUSH
57173: LD_VAR 0 4
57177: NOT
57178: OR
57179: IFFALSE 57183
// exit ;
57181: GO 57375
// while 1 do
57183: LD_INT 1
57185: IFFALSE 57375
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57187: LD_ADDR_VAR 0 9
57191: PUSH
57192: LD_VAR 0 1
57196: PPUSH
57197: LD_INT 1
57199: PPUSH
57200: CALL_OW 287
57204: PUSH
57205: LD_INT 10
57207: MUL
57208: ST_TO_ADDR
// r := rate / 10 ;
57209: LD_ADDR_VAR 0 7
57213: PUSH
57214: LD_VAR 0 2
57218: PUSH
57219: LD_INT 10
57221: DIVREAL
57222: ST_TO_ADDR
// time := 1 1$00 ;
57223: LD_ADDR_VAR 0 8
57227: PUSH
57228: LD_INT 2100
57230: ST_TO_ADDR
// if amount < min then
57231: LD_VAR 0 9
57235: PUSH
57236: LD_VAR 0 3
57240: LESS
57241: IFFALSE 57259
// r := r * 2 else
57243: LD_ADDR_VAR 0 7
57247: PUSH
57248: LD_VAR 0 7
57252: PUSH
57253: LD_INT 2
57255: MUL
57256: ST_TO_ADDR
57257: GO 57285
// if amount > max then
57259: LD_VAR 0 9
57263: PUSH
57264: LD_VAR 0 4
57268: GREATER
57269: IFFALSE 57285
// r := r / 2 ;
57271: LD_ADDR_VAR 0 7
57275: PUSH
57276: LD_VAR 0 7
57280: PUSH
57281: LD_INT 2
57283: DIVREAL
57284: ST_TO_ADDR
// time := time / r ;
57285: LD_ADDR_VAR 0 8
57289: PUSH
57290: LD_VAR 0 8
57294: PUSH
57295: LD_VAR 0 7
57299: DIVREAL
57300: ST_TO_ADDR
// if time < 0 then
57301: LD_VAR 0 8
57305: PUSH
57306: LD_INT 0
57308: LESS
57309: IFFALSE 57326
// time := time * - 1 ;
57311: LD_ADDR_VAR 0 8
57315: PUSH
57316: LD_VAR 0 8
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: MUL
57325: ST_TO_ADDR
// wait ( time ) ;
57326: LD_VAR 0 8
57330: PPUSH
57331: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57335: LD_INT 35
57337: PPUSH
57338: LD_INT 875
57340: PPUSH
57341: CALL_OW 12
57345: PPUSH
57346: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57350: LD_INT 1
57352: PPUSH
57353: LD_INT 5
57355: PPUSH
57356: CALL_OW 12
57360: PPUSH
57361: LD_VAR 0 1
57365: PPUSH
57366: LD_INT 1
57368: PPUSH
57369: CALL_OW 55
// end ;
57373: GO 57183
// end ;
57375: LD_VAR 0 5
57379: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57380: LD_INT 0
57382: PPUSH
57383: PPUSH
57384: PPUSH
57385: PPUSH
57386: PPUSH
57387: PPUSH
57388: PPUSH
57389: PPUSH
// if not turrets or not factories then
57390: LD_VAR 0 1
57394: NOT
57395: PUSH
57396: LD_VAR 0 2
57400: NOT
57401: OR
57402: IFFALSE 57406
// exit ;
57404: GO 57713
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57406: LD_ADDR_VAR 0 10
57410: PUSH
57411: LD_INT 5
57413: PUSH
57414: LD_INT 6
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 4
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: LD_INT 5
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 24
57448: PUSH
57449: LD_INT 25
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 23
57458: PUSH
57459: LD_INT 27
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 42
57472: PUSH
57473: LD_INT 43
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 44
57482: PUSH
57483: LD_INT 46
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 45
57492: PUSH
57493: LD_INT 47
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// result := [ ] ;
57510: LD_ADDR_VAR 0 3
57514: PUSH
57515: EMPTY
57516: ST_TO_ADDR
// for i in turrets do
57517: LD_ADDR_VAR 0 4
57521: PUSH
57522: LD_VAR 0 1
57526: PUSH
57527: FOR_IN
57528: IFFALSE 57711
// begin nat := GetNation ( i ) ;
57530: LD_ADDR_VAR 0 7
57534: PUSH
57535: LD_VAR 0 4
57539: PPUSH
57540: CALL_OW 248
57544: ST_TO_ADDR
// weapon := 0 ;
57545: LD_ADDR_VAR 0 8
57549: PUSH
57550: LD_INT 0
57552: ST_TO_ADDR
// if not nat then
57553: LD_VAR 0 7
57557: NOT
57558: IFFALSE 57562
// continue ;
57560: GO 57527
// for j in list [ nat ] do
57562: LD_ADDR_VAR 0 5
57566: PUSH
57567: LD_VAR 0 10
57571: PUSH
57572: LD_VAR 0 7
57576: ARRAY
57577: PUSH
57578: FOR_IN
57579: IFFALSE 57620
// if GetBWeapon ( i ) = j [ 1 ] then
57581: LD_VAR 0 4
57585: PPUSH
57586: CALL_OW 269
57590: PUSH
57591: LD_VAR 0 5
57595: PUSH
57596: LD_INT 1
57598: ARRAY
57599: EQUAL
57600: IFFALSE 57618
// begin weapon := j [ 2 ] ;
57602: LD_ADDR_VAR 0 8
57606: PUSH
57607: LD_VAR 0 5
57611: PUSH
57612: LD_INT 2
57614: ARRAY
57615: ST_TO_ADDR
// break ;
57616: GO 57620
// end ;
57618: GO 57578
57620: POP
57621: POP
// if not weapon then
57622: LD_VAR 0 8
57626: NOT
57627: IFFALSE 57631
// continue ;
57629: GO 57527
// for k in factories do
57631: LD_ADDR_VAR 0 6
57635: PUSH
57636: LD_VAR 0 2
57640: PUSH
57641: FOR_IN
57642: IFFALSE 57707
// begin weapons := AvailableWeaponList ( k ) ;
57644: LD_ADDR_VAR 0 9
57648: PUSH
57649: LD_VAR 0 6
57653: PPUSH
57654: CALL_OW 478
57658: ST_TO_ADDR
// if not weapons then
57659: LD_VAR 0 9
57663: NOT
57664: IFFALSE 57668
// continue ;
57666: GO 57641
// if weapon in weapons then
57668: LD_VAR 0 8
57672: PUSH
57673: LD_VAR 0 9
57677: IN
57678: IFFALSE 57705
// begin result := [ i , weapon ] ;
57680: LD_ADDR_VAR 0 3
57684: PUSH
57685: LD_VAR 0 4
57689: PUSH
57690: LD_VAR 0 8
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: ST_TO_ADDR
// exit ;
57699: POP
57700: POP
57701: POP
57702: POP
57703: GO 57713
// end ; end ;
57705: GO 57641
57707: POP
57708: POP
// end ;
57709: GO 57527
57711: POP
57712: POP
// end ;
57713: LD_VAR 0 3
57717: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57718: LD_INT 0
57720: PPUSH
// if not side or side > 8 then
57721: LD_VAR 0 3
57725: NOT
57726: PUSH
57727: LD_VAR 0 3
57731: PUSH
57732: LD_INT 8
57734: GREATER
57735: OR
57736: IFFALSE 57740
// exit ;
57738: GO 57799
// if not range then
57740: LD_VAR 0 4
57744: NOT
57745: IFFALSE 57756
// range := - 12 ;
57747: LD_ADDR_VAR 0 4
57751: PUSH
57752: LD_INT 12
57754: NEG
57755: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57756: LD_VAR 0 1
57760: PPUSH
57761: LD_VAR 0 2
57765: PPUSH
57766: LD_VAR 0 3
57770: PPUSH
57771: LD_VAR 0 4
57775: PPUSH
57776: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57780: LD_VAR 0 1
57784: PPUSH
57785: LD_VAR 0 2
57789: PPUSH
57790: LD_VAR 0 3
57794: PPUSH
57795: CALL_OW 331
// end ;
57799: LD_VAR 0 5
57803: RET
// export function Video ( mode ) ; begin
57804: LD_INT 0
57806: PPUSH
// ingame_video = mode ;
57807: LD_ADDR_OWVAR 52
57811: PUSH
57812: LD_VAR 0 1
57816: ST_TO_ADDR
// interface_hidden = mode ;
57817: LD_ADDR_OWVAR 54
57821: PUSH
57822: LD_VAR 0 1
57826: ST_TO_ADDR
// end ;
57827: LD_VAR 0 2
57831: RET
// export function Join ( array , element ) ; begin
57832: LD_INT 0
57834: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57835: LD_ADDR_VAR 0 3
57839: PUSH
57840: LD_VAR 0 1
57844: PPUSH
57845: LD_VAR 0 1
57849: PUSH
57850: LD_INT 1
57852: PLUS
57853: PPUSH
57854: LD_VAR 0 2
57858: PPUSH
57859: CALL_OW 1
57863: ST_TO_ADDR
// end ;
57864: LD_VAR 0 3
57868: RET
// export function JoinUnion ( array , element ) ; begin
57869: LD_INT 0
57871: PPUSH
// result := array union element ;
57872: LD_ADDR_VAR 0 3
57876: PUSH
57877: LD_VAR 0 1
57881: PUSH
57882: LD_VAR 0 2
57886: UNION
57887: ST_TO_ADDR
// end ;
57888: LD_VAR 0 3
57892: RET
// export function GetBehemoths ( side ) ; begin
57893: LD_INT 0
57895: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57896: LD_ADDR_VAR 0 2
57900: PUSH
57901: LD_INT 22
57903: PUSH
57904: LD_VAR 0 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 31
57915: PUSH
57916: LD_INT 25
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PPUSH
57927: CALL_OW 69
57931: ST_TO_ADDR
// end ;
57932: LD_VAR 0 2
57936: RET
// export function Shuffle ( array ) ; var i , index ; begin
57937: LD_INT 0
57939: PPUSH
57940: PPUSH
57941: PPUSH
// result := [ ] ;
57942: LD_ADDR_VAR 0 2
57946: PUSH
57947: EMPTY
57948: ST_TO_ADDR
// if not array then
57949: LD_VAR 0 1
57953: NOT
57954: IFFALSE 57958
// exit ;
57956: GO 58057
// Randomize ;
57958: CALL_OW 10
// for i = array downto 1 do
57962: LD_ADDR_VAR 0 3
57966: PUSH
57967: DOUBLE
57968: LD_VAR 0 1
57972: INC
57973: ST_TO_ADDR
57974: LD_INT 1
57976: PUSH
57977: FOR_DOWNTO
57978: IFFALSE 58055
// begin index := rand ( 1 , array ) ;
57980: LD_ADDR_VAR 0 4
57984: PUSH
57985: LD_INT 1
57987: PPUSH
57988: LD_VAR 0 1
57992: PPUSH
57993: CALL_OW 12
57997: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57998: LD_ADDR_VAR 0 2
58002: PUSH
58003: LD_VAR 0 2
58007: PPUSH
58008: LD_VAR 0 2
58012: PUSH
58013: LD_INT 1
58015: PLUS
58016: PPUSH
58017: LD_VAR 0 1
58021: PUSH
58022: LD_VAR 0 4
58026: ARRAY
58027: PPUSH
58028: CALL_OW 2
58032: ST_TO_ADDR
// array := Delete ( array , index ) ;
58033: LD_ADDR_VAR 0 1
58037: PUSH
58038: LD_VAR 0 1
58042: PPUSH
58043: LD_VAR 0 4
58047: PPUSH
58048: CALL_OW 3
58052: ST_TO_ADDR
// end ;
58053: GO 57977
58055: POP
58056: POP
// end ;
58057: LD_VAR 0 2
58061: RET
// export function GetBaseMaterials ( base ) ; begin
58062: LD_INT 0
58064: PPUSH
// result := [ 0 , 0 , 0 ] ;
58065: LD_ADDR_VAR 0 2
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// if not base then
58084: LD_VAR 0 1
58088: NOT
58089: IFFALSE 58093
// exit ;
58091: GO 58142
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58093: LD_ADDR_VAR 0 2
58097: PUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: LD_INT 1
58105: PPUSH
58106: CALL_OW 275
58110: PUSH
58111: LD_VAR 0 1
58115: PPUSH
58116: LD_INT 2
58118: PPUSH
58119: CALL_OW 275
58123: PUSH
58124: LD_VAR 0 1
58128: PPUSH
58129: LD_INT 3
58131: PPUSH
58132: CALL_OW 275
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: ST_TO_ADDR
// end ;
58142: LD_VAR 0 2
58146: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58147: LD_INT 0
58149: PPUSH
58150: PPUSH
// result := array ;
58151: LD_ADDR_VAR 0 3
58155: PUSH
58156: LD_VAR 0 1
58160: ST_TO_ADDR
// if size > 0 then
58161: LD_VAR 0 2
58165: PUSH
58166: LD_INT 0
58168: GREATER
58169: IFFALSE 58215
// for i := array downto size do
58171: LD_ADDR_VAR 0 4
58175: PUSH
58176: DOUBLE
58177: LD_VAR 0 1
58181: INC
58182: ST_TO_ADDR
58183: LD_VAR 0 2
58187: PUSH
58188: FOR_DOWNTO
58189: IFFALSE 58213
// result := Delete ( result , result ) ;
58191: LD_ADDR_VAR 0 3
58195: PUSH
58196: LD_VAR 0 3
58200: PPUSH
58201: LD_VAR 0 3
58205: PPUSH
58206: CALL_OW 3
58210: ST_TO_ADDR
58211: GO 58188
58213: POP
58214: POP
// end ;
58215: LD_VAR 0 3
58219: RET
// export function ComExit ( unit ) ; var tmp ; begin
58220: LD_INT 0
58222: PPUSH
58223: PPUSH
// if not IsInUnit ( unit ) then
58224: LD_VAR 0 1
58228: PPUSH
58229: CALL_OW 310
58233: NOT
58234: IFFALSE 58238
// exit ;
58236: GO 58298
// tmp := IsInUnit ( unit ) ;
58238: LD_ADDR_VAR 0 3
58242: PUSH
58243: LD_VAR 0 1
58247: PPUSH
58248: CALL_OW 310
58252: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58253: LD_VAR 0 3
58257: PPUSH
58258: CALL_OW 247
58262: PUSH
58263: LD_INT 2
58265: EQUAL
58266: IFFALSE 58279
// ComExitVehicle ( unit ) else
58268: LD_VAR 0 1
58272: PPUSH
58273: CALL_OW 121
58277: GO 58288
// ComExitBuilding ( unit ) ;
58279: LD_VAR 0 1
58283: PPUSH
58284: CALL_OW 122
// result := tmp ;
58288: LD_ADDR_VAR 0 2
58292: PUSH
58293: LD_VAR 0 3
58297: ST_TO_ADDR
// end ;
58298: LD_VAR 0 2
58302: RET
// export function ComExitAll ( units ) ; var i ; begin
58303: LD_INT 0
58305: PPUSH
58306: PPUSH
// if not units then
58307: LD_VAR 0 1
58311: NOT
58312: IFFALSE 58316
// exit ;
58314: GO 58342
// for i in units do
58316: LD_ADDR_VAR 0 3
58320: PUSH
58321: LD_VAR 0 1
58325: PUSH
58326: FOR_IN
58327: IFFALSE 58340
// ComExit ( i ) ;
58329: LD_VAR 0 3
58333: PPUSH
58334: CALL 58220 0 1
58338: GO 58326
58340: POP
58341: POP
// end ;
58342: LD_VAR 0 2
58346: RET
// export function ResetHc ; begin
58347: LD_INT 0
58349: PPUSH
// InitHc ;
58350: CALL_OW 19
// hc_importance := 0 ;
58354: LD_ADDR_OWVAR 32
58358: PUSH
58359: LD_INT 0
58361: ST_TO_ADDR
// end ;
58362: LD_VAR 0 1
58366: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58367: LD_INT 0
58369: PPUSH
58370: PPUSH
58371: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58372: LD_ADDR_VAR 0 6
58376: PUSH
58377: LD_VAR 0 1
58381: PUSH
58382: LD_VAR 0 3
58386: PLUS
58387: PUSH
58388: LD_INT 2
58390: DIV
58391: ST_TO_ADDR
// if _x < 0 then
58392: LD_VAR 0 6
58396: PUSH
58397: LD_INT 0
58399: LESS
58400: IFFALSE 58417
// _x := _x * - 1 ;
58402: LD_ADDR_VAR 0 6
58406: PUSH
58407: LD_VAR 0 6
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: MUL
58416: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58417: LD_ADDR_VAR 0 7
58421: PUSH
58422: LD_VAR 0 2
58426: PUSH
58427: LD_VAR 0 4
58431: PLUS
58432: PUSH
58433: LD_INT 2
58435: DIV
58436: ST_TO_ADDR
// if _y < 0 then
58437: LD_VAR 0 7
58441: PUSH
58442: LD_INT 0
58444: LESS
58445: IFFALSE 58462
// _y := _y * - 1 ;
58447: LD_ADDR_VAR 0 7
58451: PUSH
58452: LD_VAR 0 7
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: MUL
58461: ST_TO_ADDR
// result := [ _x , _y ] ;
58462: LD_ADDR_VAR 0 5
58466: PUSH
58467: LD_VAR 0 6
58471: PUSH
58472: LD_VAR 0 7
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: ST_TO_ADDR
// end ;
58481: LD_VAR 0 5
58485: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58486: LD_INT 0
58488: PPUSH
58489: PPUSH
58490: PPUSH
58491: PPUSH
// task := GetTaskList ( unit ) ;
58492: LD_ADDR_VAR 0 7
58496: PUSH
58497: LD_VAR 0 1
58501: PPUSH
58502: CALL_OW 437
58506: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58507: LD_VAR 0 7
58511: NOT
58512: PUSH
58513: LD_VAR 0 1
58517: PPUSH
58518: LD_VAR 0 2
58522: PPUSH
58523: CALL_OW 308
58527: NOT
58528: AND
58529: IFFALSE 58533
// exit ;
58531: GO 58651
// if IsInArea ( unit , area ) then
58533: LD_VAR 0 1
58537: PPUSH
58538: LD_VAR 0 2
58542: PPUSH
58543: CALL_OW 308
58547: IFFALSE 58565
// begin ComMoveToArea ( unit , goAway ) ;
58549: LD_VAR 0 1
58553: PPUSH
58554: LD_VAR 0 3
58558: PPUSH
58559: CALL_OW 113
// exit ;
58563: GO 58651
// end ; if task [ 1 ] [ 1 ] <> M then
58565: LD_VAR 0 7
58569: PUSH
58570: LD_INT 1
58572: ARRAY
58573: PUSH
58574: LD_INT 1
58576: ARRAY
58577: PUSH
58578: LD_STRING M
58580: NONEQUAL
58581: IFFALSE 58585
// exit ;
58583: GO 58651
// x := task [ 1 ] [ 2 ] ;
58585: LD_ADDR_VAR 0 5
58589: PUSH
58590: LD_VAR 0 7
58594: PUSH
58595: LD_INT 1
58597: ARRAY
58598: PUSH
58599: LD_INT 2
58601: ARRAY
58602: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58603: LD_ADDR_VAR 0 6
58607: PUSH
58608: LD_VAR 0 7
58612: PUSH
58613: LD_INT 1
58615: ARRAY
58616: PUSH
58617: LD_INT 3
58619: ARRAY
58620: ST_TO_ADDR
// if InArea ( x , y , area ) then
58621: LD_VAR 0 5
58625: PPUSH
58626: LD_VAR 0 6
58630: PPUSH
58631: LD_VAR 0 2
58635: PPUSH
58636: CALL_OW 309
58640: IFFALSE 58651
// ComStop ( unit ) ;
58642: LD_VAR 0 1
58646: PPUSH
58647: CALL_OW 141
// end ;
58651: LD_VAR 0 4
58655: RET
// export function Abs ( value ) ; begin
58656: LD_INT 0
58658: PPUSH
// result := value ;
58659: LD_ADDR_VAR 0 2
58663: PUSH
58664: LD_VAR 0 1
58668: ST_TO_ADDR
// if value < 0 then
58669: LD_VAR 0 1
58673: PUSH
58674: LD_INT 0
58676: LESS
58677: IFFALSE 58694
// result := value * - 1 ;
58679: LD_ADDR_VAR 0 2
58683: PUSH
58684: LD_VAR 0 1
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: MUL
58693: ST_TO_ADDR
// end ;
58694: LD_VAR 0 2
58698: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58699: LD_INT 0
58701: PPUSH
58702: PPUSH
58703: PPUSH
58704: PPUSH
58705: PPUSH
58706: PPUSH
58707: PPUSH
58708: PPUSH
// if not unit or not building then
58709: LD_VAR 0 1
58713: NOT
58714: PUSH
58715: LD_VAR 0 2
58719: NOT
58720: OR
58721: IFFALSE 58725
// exit ;
58723: GO 58951
// x := GetX ( building ) ;
58725: LD_ADDR_VAR 0 4
58729: PUSH
58730: LD_VAR 0 2
58734: PPUSH
58735: CALL_OW 250
58739: ST_TO_ADDR
// y := GetY ( building ) ;
58740: LD_ADDR_VAR 0 6
58744: PUSH
58745: LD_VAR 0 2
58749: PPUSH
58750: CALL_OW 251
58754: ST_TO_ADDR
// d := GetDir ( building ) ;
58755: LD_ADDR_VAR 0 8
58759: PUSH
58760: LD_VAR 0 2
58764: PPUSH
58765: CALL_OW 254
58769: ST_TO_ADDR
// r := 4 ;
58770: LD_ADDR_VAR 0 9
58774: PUSH
58775: LD_INT 4
58777: ST_TO_ADDR
// for i := 1 to 5 do
58778: LD_ADDR_VAR 0 10
58782: PUSH
58783: DOUBLE
58784: LD_INT 1
58786: DEC
58787: ST_TO_ADDR
58788: LD_INT 5
58790: PUSH
58791: FOR_TO
58792: IFFALSE 58949
// begin _x := ShiftX ( x , d , r + i ) ;
58794: LD_ADDR_VAR 0 5
58798: PUSH
58799: LD_VAR 0 4
58803: PPUSH
58804: LD_VAR 0 8
58808: PPUSH
58809: LD_VAR 0 9
58813: PUSH
58814: LD_VAR 0 10
58818: PLUS
58819: PPUSH
58820: CALL_OW 272
58824: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58825: LD_ADDR_VAR 0 7
58829: PUSH
58830: LD_VAR 0 6
58834: PPUSH
58835: LD_VAR 0 8
58839: PPUSH
58840: LD_VAR 0 9
58844: PUSH
58845: LD_VAR 0 10
58849: PLUS
58850: PPUSH
58851: CALL_OW 273
58855: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58856: LD_VAR 0 5
58860: PPUSH
58861: LD_VAR 0 7
58865: PPUSH
58866: CALL_OW 488
58870: PUSH
58871: LD_VAR 0 5
58875: PPUSH
58876: LD_VAR 0 7
58880: PPUSH
58881: CALL_OW 428
58885: PPUSH
58886: CALL_OW 247
58890: PUSH
58891: LD_INT 3
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: IN
58901: NOT
58902: AND
58903: IFFALSE 58947
// begin ComMoveXY ( unit , _x , _y ) ;
58905: LD_VAR 0 1
58909: PPUSH
58910: LD_VAR 0 5
58914: PPUSH
58915: LD_VAR 0 7
58919: PPUSH
58920: CALL_OW 111
// result := [ _x , _y ] ;
58924: LD_ADDR_VAR 0 3
58928: PUSH
58929: LD_VAR 0 5
58933: PUSH
58934: LD_VAR 0 7
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// exit ;
58943: POP
58944: POP
58945: GO 58951
// end ; end ;
58947: GO 58791
58949: POP
58950: POP
// end ;
58951: LD_VAR 0 3
58955: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58956: LD_INT 0
58958: PPUSH
58959: PPUSH
58960: PPUSH
// result := 0 ;
58961: LD_ADDR_VAR 0 3
58965: PUSH
58966: LD_INT 0
58968: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58969: LD_VAR 0 1
58973: PUSH
58974: LD_INT 0
58976: LESS
58977: PUSH
58978: LD_VAR 0 1
58982: PUSH
58983: LD_INT 8
58985: GREATER
58986: OR
58987: PUSH
58988: LD_VAR 0 2
58992: PUSH
58993: LD_INT 0
58995: LESS
58996: OR
58997: PUSH
58998: LD_VAR 0 2
59002: PUSH
59003: LD_INT 8
59005: GREATER
59006: OR
59007: IFFALSE 59011
// exit ;
59009: GO 59086
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59011: LD_ADDR_VAR 0 4
59015: PUSH
59016: LD_INT 22
59018: PUSH
59019: LD_VAR 0 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PPUSH
59028: CALL_OW 69
59032: PUSH
59033: FOR_IN
59034: IFFALSE 59084
// begin un := UnitShoot ( i ) ;
59036: LD_ADDR_VAR 0 5
59040: PUSH
59041: LD_VAR 0 4
59045: PPUSH
59046: CALL_OW 504
59050: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59051: LD_VAR 0 5
59055: PPUSH
59056: CALL_OW 255
59060: PUSH
59061: LD_VAR 0 1
59065: EQUAL
59066: IFFALSE 59082
// begin result := un ;
59068: LD_ADDR_VAR 0 3
59072: PUSH
59073: LD_VAR 0 5
59077: ST_TO_ADDR
// exit ;
59078: POP
59079: POP
59080: GO 59086
// end ; end ;
59082: GO 59033
59084: POP
59085: POP
// end ;
59086: LD_VAR 0 3
59090: RET
// export function GetCargoBay ( units ) ; begin
59091: LD_INT 0
59093: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59094: LD_ADDR_VAR 0 2
59098: PUSH
59099: LD_VAR 0 1
59103: PPUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 34
59109: PUSH
59110: LD_INT 12
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 34
59119: PUSH
59120: LD_INT 51
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 34
59129: PUSH
59130: LD_INT 32
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 34
59139: PUSH
59140: LD_EXP 77
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: PPUSH
59156: CALL_OW 72
59160: ST_TO_ADDR
// end ;
59161: LD_VAR 0 2
59165: RET
// export function Negate ( value ) ; begin
59166: LD_INT 0
59168: PPUSH
// result := not value ;
59169: LD_ADDR_VAR 0 2
59173: PUSH
59174: LD_VAR 0 1
59178: NOT
59179: ST_TO_ADDR
// end ;
59180: LD_VAR 0 2
59184: RET
// export function Inc ( value ) ; begin
59185: LD_INT 0
59187: PPUSH
// result := value + 1 ;
59188: LD_ADDR_VAR 0 2
59192: PUSH
59193: LD_VAR 0 1
59197: PUSH
59198: LD_INT 1
59200: PLUS
59201: ST_TO_ADDR
// end ;
59202: LD_VAR 0 2
59206: RET
// export function Dec ( value ) ; begin
59207: LD_INT 0
59209: PPUSH
// result := value - 1 ;
59210: LD_ADDR_VAR 0 2
59214: PUSH
59215: LD_VAR 0 1
59219: PUSH
59220: LD_INT 1
59222: MINUS
59223: ST_TO_ADDR
// end ;
59224: LD_VAR 0 2
59228: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59229: LD_INT 0
59231: PPUSH
59232: PPUSH
59233: PPUSH
59234: PPUSH
59235: PPUSH
59236: PPUSH
59237: PPUSH
59238: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59239: LD_VAR 0 1
59243: PPUSH
59244: LD_VAR 0 2
59248: PPUSH
59249: CALL_OW 488
59253: NOT
59254: PUSH
59255: LD_VAR 0 3
59259: PPUSH
59260: LD_VAR 0 4
59264: PPUSH
59265: CALL_OW 488
59269: NOT
59270: OR
59271: IFFALSE 59284
// begin result := - 1 ;
59273: LD_ADDR_VAR 0 5
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: ST_TO_ADDR
// exit ;
59282: GO 59519
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59284: LD_ADDR_VAR 0 12
59288: PUSH
59289: LD_VAR 0 1
59293: PPUSH
59294: LD_VAR 0 2
59298: PPUSH
59299: LD_VAR 0 3
59303: PPUSH
59304: LD_VAR 0 4
59308: PPUSH
59309: CALL 58367 0 4
59313: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59314: LD_ADDR_VAR 0 11
59318: PUSH
59319: LD_VAR 0 1
59323: PPUSH
59324: LD_VAR 0 2
59328: PPUSH
59329: LD_VAR 0 12
59333: PUSH
59334: LD_INT 1
59336: ARRAY
59337: PPUSH
59338: LD_VAR 0 12
59342: PUSH
59343: LD_INT 2
59345: ARRAY
59346: PPUSH
59347: CALL_OW 298
59351: ST_TO_ADDR
// distance := 9999 ;
59352: LD_ADDR_VAR 0 10
59356: PUSH
59357: LD_INT 9999
59359: ST_TO_ADDR
// for i := 0 to 5 do
59360: LD_ADDR_VAR 0 6
59364: PUSH
59365: DOUBLE
59366: LD_INT 0
59368: DEC
59369: ST_TO_ADDR
59370: LD_INT 5
59372: PUSH
59373: FOR_TO
59374: IFFALSE 59517
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59376: LD_ADDR_VAR 0 7
59380: PUSH
59381: LD_VAR 0 1
59385: PPUSH
59386: LD_VAR 0 6
59390: PPUSH
59391: LD_VAR 0 11
59395: PPUSH
59396: CALL_OW 272
59400: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59401: LD_ADDR_VAR 0 8
59405: PUSH
59406: LD_VAR 0 2
59410: PPUSH
59411: LD_VAR 0 6
59415: PPUSH
59416: LD_VAR 0 11
59420: PPUSH
59421: CALL_OW 273
59425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59426: LD_VAR 0 7
59430: PPUSH
59431: LD_VAR 0 8
59435: PPUSH
59436: CALL_OW 488
59440: NOT
59441: IFFALSE 59445
// continue ;
59443: GO 59373
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59445: LD_ADDR_VAR 0 9
59449: PUSH
59450: LD_VAR 0 12
59454: PUSH
59455: LD_INT 1
59457: ARRAY
59458: PPUSH
59459: LD_VAR 0 12
59463: PUSH
59464: LD_INT 2
59466: ARRAY
59467: PPUSH
59468: LD_VAR 0 7
59472: PPUSH
59473: LD_VAR 0 8
59477: PPUSH
59478: CALL_OW 298
59482: ST_TO_ADDR
// if tmp < distance then
59483: LD_VAR 0 9
59487: PUSH
59488: LD_VAR 0 10
59492: LESS
59493: IFFALSE 59515
// begin result := i ;
59495: LD_ADDR_VAR 0 5
59499: PUSH
59500: LD_VAR 0 6
59504: ST_TO_ADDR
// distance := tmp ;
59505: LD_ADDR_VAR 0 10
59509: PUSH
59510: LD_VAR 0 9
59514: ST_TO_ADDR
// end ; end ;
59515: GO 59373
59517: POP
59518: POP
// end ;
59519: LD_VAR 0 5
59523: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59524: LD_INT 0
59526: PPUSH
59527: PPUSH
// if not driver or not IsInUnit ( driver ) then
59528: LD_VAR 0 1
59532: NOT
59533: PUSH
59534: LD_VAR 0 1
59538: PPUSH
59539: CALL_OW 310
59543: NOT
59544: OR
59545: IFFALSE 59549
// exit ;
59547: GO 59639
// vehicle := IsInUnit ( driver ) ;
59549: LD_ADDR_VAR 0 3
59553: PUSH
59554: LD_VAR 0 1
59558: PPUSH
59559: CALL_OW 310
59563: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59564: LD_VAR 0 1
59568: PPUSH
59569: LD_STRING \
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: PUSH
59599: LD_STRING E
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_VAR 0 3
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PPUSH
59635: CALL_OW 446
// end ;
59639: LD_VAR 0 2
59643: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59644: LD_INT 0
59646: PPUSH
59647: PPUSH
// if not driver or not IsInUnit ( driver ) then
59648: LD_VAR 0 1
59652: NOT
59653: PUSH
59654: LD_VAR 0 1
59658: PPUSH
59659: CALL_OW 310
59663: NOT
59664: OR
59665: IFFALSE 59669
// exit ;
59667: GO 59759
// vehicle := IsInUnit ( driver ) ;
59669: LD_ADDR_VAR 0 3
59673: PUSH
59674: LD_VAR 0 1
59678: PPUSH
59679: CALL_OW 310
59683: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59684: LD_VAR 0 1
59688: PPUSH
59689: LD_STRING \
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: PUSH
59719: LD_STRING E
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_VAR 0 3
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PPUSH
59755: CALL_OW 447
// end ;
59759: LD_VAR 0 2
59763: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59764: LD_INT 0
59766: PPUSH
59767: PPUSH
59768: PPUSH
// tmp := [ ] ;
59769: LD_ADDR_VAR 0 5
59773: PUSH
59774: EMPTY
59775: ST_TO_ADDR
// for i in units do
59776: LD_ADDR_VAR 0 4
59780: PUSH
59781: LD_VAR 0 1
59785: PUSH
59786: FOR_IN
59787: IFFALSE 59825
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59789: LD_ADDR_VAR 0 5
59793: PUSH
59794: LD_VAR 0 5
59798: PPUSH
59799: LD_VAR 0 5
59803: PUSH
59804: LD_INT 1
59806: PLUS
59807: PPUSH
59808: LD_VAR 0 4
59812: PPUSH
59813: CALL_OW 256
59817: PPUSH
59818: CALL_OW 2
59822: ST_TO_ADDR
59823: GO 59786
59825: POP
59826: POP
// if not tmp then
59827: LD_VAR 0 5
59831: NOT
59832: IFFALSE 59836
// exit ;
59834: GO 59884
// if asc then
59836: LD_VAR 0 2
59840: IFFALSE 59864
// result := SortListByListAsc ( units , tmp ) else
59842: LD_ADDR_VAR 0 3
59846: PUSH
59847: LD_VAR 0 1
59851: PPUSH
59852: LD_VAR 0 5
59856: PPUSH
59857: CALL_OW 76
59861: ST_TO_ADDR
59862: GO 59884
// result := SortListByListDesc ( units , tmp ) ;
59864: LD_ADDR_VAR 0 3
59868: PUSH
59869: LD_VAR 0 1
59873: PPUSH
59874: LD_VAR 0 5
59878: PPUSH
59879: CALL_OW 77
59883: ST_TO_ADDR
// end ;
59884: LD_VAR 0 3
59888: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59889: LD_INT 0
59891: PPUSH
59892: PPUSH
// task := GetTaskList ( mech ) ;
59893: LD_ADDR_VAR 0 4
59897: PUSH
59898: LD_VAR 0 1
59902: PPUSH
59903: CALL_OW 437
59907: ST_TO_ADDR
// if not task then
59908: LD_VAR 0 4
59912: NOT
59913: IFFALSE 59917
// exit ;
59915: GO 59959
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59917: LD_ADDR_VAR 0 3
59921: PUSH
59922: LD_VAR 0 4
59926: PUSH
59927: LD_INT 1
59929: ARRAY
59930: PUSH
59931: LD_INT 1
59933: ARRAY
59934: PUSH
59935: LD_STRING r
59937: EQUAL
59938: PUSH
59939: LD_VAR 0 4
59943: PUSH
59944: LD_INT 1
59946: ARRAY
59947: PUSH
59948: LD_INT 4
59950: ARRAY
59951: PUSH
59952: LD_VAR 0 2
59956: EQUAL
59957: AND
59958: ST_TO_ADDR
// end ;
59959: LD_VAR 0 3
59963: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59964: LD_INT 0
59966: PPUSH
// SetDir ( unit , d ) ;
59967: LD_VAR 0 1
59971: PPUSH
59972: LD_VAR 0 4
59976: PPUSH
59977: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59981: LD_VAR 0 1
59985: PPUSH
59986: LD_VAR 0 2
59990: PPUSH
59991: LD_VAR 0 3
59995: PPUSH
59996: LD_VAR 0 5
60000: PPUSH
60001: CALL_OW 48
// end ;
60005: LD_VAR 0 6
60009: RET
// export function ToNaturalNumber ( number ) ; begin
60010: LD_INT 0
60012: PPUSH
// result := number div 1 ;
60013: LD_ADDR_VAR 0 2
60017: PUSH
60018: LD_VAR 0 1
60022: PUSH
60023: LD_INT 1
60025: DIV
60026: ST_TO_ADDR
// if number < 0 then
60027: LD_VAR 0 1
60031: PUSH
60032: LD_INT 0
60034: LESS
60035: IFFALSE 60045
// result := 0 ;
60037: LD_ADDR_VAR 0 2
60041: PUSH
60042: LD_INT 0
60044: ST_TO_ADDR
// end ;
60045: LD_VAR 0 2
60049: RET
// export function SortByClass ( units , class ) ; var un ; begin
60050: LD_INT 0
60052: PPUSH
60053: PPUSH
// if not units or not class then
60054: LD_VAR 0 1
60058: NOT
60059: PUSH
60060: LD_VAR 0 2
60064: NOT
60065: OR
60066: IFFALSE 60070
// exit ;
60068: GO 60165
// result := [ ] ;
60070: LD_ADDR_VAR 0 3
60074: PUSH
60075: EMPTY
60076: ST_TO_ADDR
// for un in units do
60077: LD_ADDR_VAR 0 4
60081: PUSH
60082: LD_VAR 0 1
60086: PUSH
60087: FOR_IN
60088: IFFALSE 60163
// if GetClass ( un ) = class then
60090: LD_VAR 0 4
60094: PPUSH
60095: CALL_OW 257
60099: PUSH
60100: LD_VAR 0 2
60104: EQUAL
60105: IFFALSE 60132
// result := Insert ( result , 1 , un ) else
60107: LD_ADDR_VAR 0 3
60111: PUSH
60112: LD_VAR 0 3
60116: PPUSH
60117: LD_INT 1
60119: PPUSH
60120: LD_VAR 0 4
60124: PPUSH
60125: CALL_OW 2
60129: ST_TO_ADDR
60130: GO 60161
// result := Replace ( result , result + 1 , un ) ;
60132: LD_ADDR_VAR 0 3
60136: PUSH
60137: LD_VAR 0 3
60141: PPUSH
60142: LD_VAR 0 3
60146: PUSH
60147: LD_INT 1
60149: PLUS
60150: PPUSH
60151: LD_VAR 0 4
60155: PPUSH
60156: CALL_OW 1
60160: ST_TO_ADDR
60161: GO 60087
60163: POP
60164: POP
// end ;
60165: LD_VAR 0 3
60169: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60170: LD_INT 0
60172: PPUSH
60173: PPUSH
60174: PPUSH
60175: PPUSH
60176: PPUSH
60177: PPUSH
60178: PPUSH
// result := [ ] ;
60179: LD_ADDR_VAR 0 4
60183: PUSH
60184: EMPTY
60185: ST_TO_ADDR
// if x - r < 0 then
60186: LD_VAR 0 1
60190: PUSH
60191: LD_VAR 0 3
60195: MINUS
60196: PUSH
60197: LD_INT 0
60199: LESS
60200: IFFALSE 60212
// min_x := 0 else
60202: LD_ADDR_VAR 0 8
60206: PUSH
60207: LD_INT 0
60209: ST_TO_ADDR
60210: GO 60228
// min_x := x - r ;
60212: LD_ADDR_VAR 0 8
60216: PUSH
60217: LD_VAR 0 1
60221: PUSH
60222: LD_VAR 0 3
60226: MINUS
60227: ST_TO_ADDR
// if y - r < 0 then
60228: LD_VAR 0 2
60232: PUSH
60233: LD_VAR 0 3
60237: MINUS
60238: PUSH
60239: LD_INT 0
60241: LESS
60242: IFFALSE 60254
// min_y := 0 else
60244: LD_ADDR_VAR 0 7
60248: PUSH
60249: LD_INT 0
60251: ST_TO_ADDR
60252: GO 60270
// min_y := y - r ;
60254: LD_ADDR_VAR 0 7
60258: PUSH
60259: LD_VAR 0 2
60263: PUSH
60264: LD_VAR 0 3
60268: MINUS
60269: ST_TO_ADDR
// max_x := x + r ;
60270: LD_ADDR_VAR 0 9
60274: PUSH
60275: LD_VAR 0 1
60279: PUSH
60280: LD_VAR 0 3
60284: PLUS
60285: ST_TO_ADDR
// max_y := y + r ;
60286: LD_ADDR_VAR 0 10
60290: PUSH
60291: LD_VAR 0 2
60295: PUSH
60296: LD_VAR 0 3
60300: PLUS
60301: ST_TO_ADDR
// for _x = min_x to max_x do
60302: LD_ADDR_VAR 0 5
60306: PUSH
60307: DOUBLE
60308: LD_VAR 0 8
60312: DEC
60313: ST_TO_ADDR
60314: LD_VAR 0 9
60318: PUSH
60319: FOR_TO
60320: IFFALSE 60421
// for _y = min_y to max_y do
60322: LD_ADDR_VAR 0 6
60326: PUSH
60327: DOUBLE
60328: LD_VAR 0 7
60332: DEC
60333: ST_TO_ADDR
60334: LD_VAR 0 10
60338: PUSH
60339: FOR_TO
60340: IFFALSE 60417
// begin if not ValidHex ( _x , _y ) then
60342: LD_VAR 0 5
60346: PPUSH
60347: LD_VAR 0 6
60351: PPUSH
60352: CALL_OW 488
60356: NOT
60357: IFFALSE 60361
// continue ;
60359: GO 60339
// if GetResourceTypeXY ( _x , _y ) then
60361: LD_VAR 0 5
60365: PPUSH
60366: LD_VAR 0 6
60370: PPUSH
60371: CALL_OW 283
60375: IFFALSE 60415
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60377: LD_ADDR_VAR 0 4
60381: PUSH
60382: LD_VAR 0 4
60386: PPUSH
60387: LD_VAR 0 4
60391: PUSH
60392: LD_INT 1
60394: PLUS
60395: PPUSH
60396: LD_VAR 0 5
60400: PUSH
60401: LD_VAR 0 6
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PPUSH
60410: CALL_OW 1
60414: ST_TO_ADDR
// end ;
60415: GO 60339
60417: POP
60418: POP
60419: GO 60319
60421: POP
60422: POP
// end ;
60423: LD_VAR 0 4
60427: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60428: LD_INT 0
60430: PPUSH
60431: PPUSH
60432: PPUSH
60433: PPUSH
60434: PPUSH
60435: PPUSH
60436: PPUSH
60437: PPUSH
// if not units then
60438: LD_VAR 0 1
60442: NOT
60443: IFFALSE 60447
// exit ;
60445: GO 60872
// result := UnitFilter ( units , [ f_ok ] ) ;
60447: LD_ADDR_VAR 0 3
60451: PUSH
60452: LD_VAR 0 1
60456: PPUSH
60457: LD_INT 50
60459: PUSH
60460: EMPTY
60461: LIST
60462: PPUSH
60463: CALL_OW 72
60467: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60468: LD_ADDR_VAR 0 8
60472: PUSH
60473: LD_VAR 0 1
60477: PUSH
60478: LD_INT 1
60480: ARRAY
60481: PPUSH
60482: CALL_OW 255
60486: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
60487: LD_ADDR_VAR 0 10
60491: PUSH
60492: LD_INT 29
60494: PUSH
60495: LD_EXP 80
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: ST_TO_ADDR
// if not result then
60504: LD_VAR 0 3
60508: NOT
60509: IFFALSE 60513
// exit ;
60511: GO 60872
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60513: LD_ADDR_VAR 0 5
60517: PUSH
60518: LD_INT 81
60520: PUSH
60521: LD_VAR 0 8
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PPUSH
60530: CALL_OW 69
60534: ST_TO_ADDR
// for i in result do
60535: LD_ADDR_VAR 0 4
60539: PUSH
60540: LD_VAR 0 3
60544: PUSH
60545: FOR_IN
60546: IFFALSE 60870
// begin tag := GetTag ( i ) + 1 ;
60548: LD_ADDR_VAR 0 9
60552: PUSH
60553: LD_VAR 0 4
60557: PPUSH
60558: CALL_OW 110
60562: PUSH
60563: LD_INT 1
60565: PLUS
60566: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60567: LD_ADDR_VAR 0 7
60571: PUSH
60572: LD_VAR 0 4
60576: PPUSH
60577: CALL_OW 250
60581: PPUSH
60582: LD_VAR 0 4
60586: PPUSH
60587: CALL_OW 251
60591: PPUSH
60592: LD_INT 6
60594: PPUSH
60595: CALL 60170 0 3
60599: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60600: LD_VAR 0 7
60604: PUSH
60605: LD_VAR 0 4
60609: PPUSH
60610: CALL_OW 264
60614: PUSH
60615: LD_VAR 0 10
60619: IN
60620: NOT
60621: AND
60622: IFFALSE 60661
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60624: LD_VAR 0 4
60628: PPUSH
60629: LD_VAR 0 7
60633: PUSH
60634: LD_INT 1
60636: ARRAY
60637: PUSH
60638: LD_INT 1
60640: ARRAY
60641: PPUSH
60642: LD_VAR 0 7
60646: PUSH
60647: LD_INT 1
60649: ARRAY
60650: PUSH
60651: LD_INT 2
60653: ARRAY
60654: PPUSH
60655: CALL_OW 116
60659: GO 60868
// if path > tag then
60661: LD_VAR 0 2
60665: PUSH
60666: LD_VAR 0 9
60670: GREATER
60671: IFFALSE 60838
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
60673: LD_ADDR_VAR 0 6
60677: PUSH
60678: LD_VAR 0 5
60682: PPUSH
60683: LD_INT 91
60685: PUSH
60686: LD_VAR 0 4
60690: PUSH
60691: LD_INT 12
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: LIST
60698: PPUSH
60699: CALL_OW 72
60703: ST_TO_ADDR
// if nearEnemy then
60704: LD_VAR 0 6
60708: IFFALSE 60736
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60710: LD_VAR 0 4
60714: PPUSH
60715: LD_VAR 0 6
60719: PPUSH
60720: LD_VAR 0 4
60724: PPUSH
60725: CALL_OW 74
60729: PPUSH
60730: CALL_OW 115
60734: GO 60836
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60736: LD_VAR 0 4
60740: PPUSH
60741: LD_VAR 0 2
60745: PUSH
60746: LD_VAR 0 9
60750: ARRAY
60751: PUSH
60752: LD_INT 1
60754: ARRAY
60755: PPUSH
60756: LD_VAR 0 2
60760: PUSH
60761: LD_VAR 0 9
60765: ARRAY
60766: PUSH
60767: LD_INT 2
60769: ARRAY
60770: PPUSH
60771: CALL_OW 297
60775: PUSH
60776: LD_INT 6
60778: GREATER
60779: IFFALSE 60822
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60781: LD_VAR 0 4
60785: PPUSH
60786: LD_VAR 0 2
60790: PUSH
60791: LD_VAR 0 9
60795: ARRAY
60796: PUSH
60797: LD_INT 1
60799: ARRAY
60800: PPUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_VAR 0 9
60810: ARRAY
60811: PUSH
60812: LD_INT 2
60814: ARRAY
60815: PPUSH
60816: CALL_OW 114
60820: GO 60836
// SetTag ( i , tag ) ;
60822: LD_VAR 0 4
60826: PPUSH
60827: LD_VAR 0 9
60831: PPUSH
60832: CALL_OW 109
// end else
60836: GO 60868
// if enemy then
60838: LD_VAR 0 5
60842: IFFALSE 60868
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60844: LD_VAR 0 4
60848: PPUSH
60849: LD_VAR 0 5
60853: PPUSH
60854: LD_VAR 0 4
60858: PPUSH
60859: CALL_OW 74
60863: PPUSH
60864: CALL_OW 115
// end ;
60868: GO 60545
60870: POP
60871: POP
// end ;
60872: LD_VAR 0 3
60876: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60877: LD_INT 0
60879: PPUSH
60880: PPUSH
60881: PPUSH
// if not unit or IsInUnit ( unit ) then
60882: LD_VAR 0 1
60886: NOT
60887: PUSH
60888: LD_VAR 0 1
60892: PPUSH
60893: CALL_OW 310
60897: OR
60898: IFFALSE 60902
// exit ;
60900: GO 60993
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60902: LD_ADDR_VAR 0 4
60906: PUSH
60907: LD_VAR 0 1
60911: PPUSH
60912: CALL_OW 250
60916: PPUSH
60917: LD_VAR 0 2
60921: PPUSH
60922: LD_INT 1
60924: PPUSH
60925: CALL_OW 272
60929: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60930: LD_ADDR_VAR 0 5
60934: PUSH
60935: LD_VAR 0 1
60939: PPUSH
60940: CALL_OW 251
60944: PPUSH
60945: LD_VAR 0 2
60949: PPUSH
60950: LD_INT 1
60952: PPUSH
60953: CALL_OW 273
60957: ST_TO_ADDR
// if ValidHex ( x , y ) then
60958: LD_VAR 0 4
60962: PPUSH
60963: LD_VAR 0 5
60967: PPUSH
60968: CALL_OW 488
60972: IFFALSE 60993
// ComTurnXY ( unit , x , y ) ;
60974: LD_VAR 0 1
60978: PPUSH
60979: LD_VAR 0 4
60983: PPUSH
60984: LD_VAR 0 5
60988: PPUSH
60989: CALL_OW 118
// end ;
60993: LD_VAR 0 3
60997: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60998: LD_INT 0
61000: PPUSH
61001: PPUSH
// result := false ;
61002: LD_ADDR_VAR 0 3
61006: PUSH
61007: LD_INT 0
61009: ST_TO_ADDR
// if not units then
61010: LD_VAR 0 2
61014: NOT
61015: IFFALSE 61019
// exit ;
61017: GO 61064
// for i in units do
61019: LD_ADDR_VAR 0 4
61023: PUSH
61024: LD_VAR 0 2
61028: PUSH
61029: FOR_IN
61030: IFFALSE 61062
// if See ( side , i ) then
61032: LD_VAR 0 1
61036: PPUSH
61037: LD_VAR 0 4
61041: PPUSH
61042: CALL_OW 292
61046: IFFALSE 61060
// begin result := true ;
61048: LD_ADDR_VAR 0 3
61052: PUSH
61053: LD_INT 1
61055: ST_TO_ADDR
// exit ;
61056: POP
61057: POP
61058: GO 61064
// end ;
61060: GO 61029
61062: POP
61063: POP
// end ;
61064: LD_VAR 0 3
61068: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61069: LD_INT 0
61071: PPUSH
61072: PPUSH
61073: PPUSH
61074: PPUSH
// if not unit or not points then
61075: LD_VAR 0 1
61079: NOT
61080: PUSH
61081: LD_VAR 0 2
61085: NOT
61086: OR
61087: IFFALSE 61091
// exit ;
61089: GO 61181
// dist := 99999 ;
61091: LD_ADDR_VAR 0 5
61095: PUSH
61096: LD_INT 99999
61098: ST_TO_ADDR
// for i in points do
61099: LD_ADDR_VAR 0 4
61103: PUSH
61104: LD_VAR 0 2
61108: PUSH
61109: FOR_IN
61110: IFFALSE 61179
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61112: LD_ADDR_VAR 0 6
61116: PUSH
61117: LD_VAR 0 1
61121: PPUSH
61122: LD_VAR 0 4
61126: PUSH
61127: LD_INT 1
61129: ARRAY
61130: PPUSH
61131: LD_VAR 0 4
61135: PUSH
61136: LD_INT 2
61138: ARRAY
61139: PPUSH
61140: CALL_OW 297
61144: ST_TO_ADDR
// if tmpDist < dist then
61145: LD_VAR 0 6
61149: PUSH
61150: LD_VAR 0 5
61154: LESS
61155: IFFALSE 61177
// begin result := i ;
61157: LD_ADDR_VAR 0 3
61161: PUSH
61162: LD_VAR 0 4
61166: ST_TO_ADDR
// dist := tmpDist ;
61167: LD_ADDR_VAR 0 5
61171: PUSH
61172: LD_VAR 0 6
61176: ST_TO_ADDR
// end ; end ;
61177: GO 61109
61179: POP
61180: POP
// end ; end_of_file
61181: LD_VAR 0 3
61185: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
61186: LD_INT 0
61188: PPUSH
// ar_miner := 81 ;
61189: LD_ADDR_EXP 83
61193: PUSH
61194: LD_INT 81
61196: ST_TO_ADDR
// ar_crane := 88 ;
61197: LD_ADDR_EXP 82
61201: PUSH
61202: LD_INT 88
61204: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61205: LD_ADDR_EXP 77
61209: PUSH
61210: LD_INT 89
61212: ST_TO_ADDR
// us_hack := 99 ;
61213: LD_ADDR_EXP 78
61217: PUSH
61218: LD_INT 99
61220: ST_TO_ADDR
// us_artillery := 97 ;
61221: LD_ADDR_EXP 79
61225: PUSH
61226: LD_INT 97
61228: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61229: LD_ADDR_EXP 80
61233: PUSH
61234: LD_INT 91
61236: ST_TO_ADDR
// ar_mortar := 92 ;
61237: LD_ADDR_EXP 81
61241: PUSH
61242: LD_INT 92
61244: ST_TO_ADDR
// ru_radar := 98 ;
61245: LD_ADDR_EXP 76
61249: PUSH
61250: LD_INT 98
61252: ST_TO_ADDR
// tech_Artillery := 80 ;
61253: LD_ADDR_EXP 84
61257: PUSH
61258: LD_INT 80
61260: ST_TO_ADDR
// tech_RadMat := 81 ;
61261: LD_ADDR_EXP 85
61265: PUSH
61266: LD_INT 81
61268: ST_TO_ADDR
// tech_BasicTools := 82 ;
61269: LD_ADDR_EXP 86
61273: PUSH
61274: LD_INT 82
61276: ST_TO_ADDR
// tech_Cargo := 83 ;
61277: LD_ADDR_EXP 87
61281: PUSH
61282: LD_INT 83
61284: ST_TO_ADDR
// tech_Track := 84 ;
61285: LD_ADDR_EXP 88
61289: PUSH
61290: LD_INT 84
61292: ST_TO_ADDR
// tech_Crane := 85 ;
61293: LD_ADDR_EXP 89
61297: PUSH
61298: LD_INT 85
61300: ST_TO_ADDR
// tech_Bulldozer := 86 ;
61301: LD_ADDR_EXP 90
61305: PUSH
61306: LD_INT 86
61308: ST_TO_ADDR
// tech_Hovercraft := 87 ;
61309: LD_ADDR_EXP 91
61313: PUSH
61314: LD_INT 87
61316: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
61317: LD_ADDR_EXP 92
61321: PUSH
61322: LD_INT 88
61324: ST_TO_ADDR
// class_mastodont := 31 ;
61325: LD_ADDR_EXP 93
61329: PUSH
61330: LD_INT 31
61332: ST_TO_ADDR
// class_horse := 21 ;
61333: LD_ADDR_EXP 94
61337: PUSH
61338: LD_INT 21
61340: ST_TO_ADDR
// end ;
61341: LD_VAR 0 1
61345: RET
// every 1 do
61346: GO 61348
61348: DISABLE
// InitGlobalVariables ; end_of_file
61349: CALL 61186 0 0
61353: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61354: LD_VAR 0 1
61358: PPUSH
61359: LD_VAR 0 2
61363: PPUSH
61364: LD_VAR 0 3
61368: PPUSH
61369: LD_VAR 0 4
61373: PPUSH
61374: LD_VAR 0 5
61378: PPUSH
61379: LD_VAR 0 6
61383: PPUSH
61384: CALL 2005 0 6
// end ;
61388: PPOPN 6
61390: END
