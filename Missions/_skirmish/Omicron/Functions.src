// Funkcje Globalne
Export function PrepareAnimals(num1,num2,num3, area);
var l,                     apeman, tiger, bird;
begin


          uc_nation = nation_nature;
          uc_side = 0;

          l = 0;

          // Ma³py
          repeat
          begin
          uc_direction = Rand(0,5);
          hc_agressivity = Rand(-5, 5);
          hc_gallery = '';
          hc_class = class_apeman;
          hc_attr = [Rand(11,13),Rand(10,11)];
          hc_sex = sex_male;
          hc_skills = [Rand(0,2),0,0,0];

          apeman = CreateHuman;
          PlaceUnitArea(apeman, area, false);

          l = l + 1;
          end until l = num1;

          l = 0;

          // Tygrysy
          repeat
          begin
          hc_agressivity = Rand(0, 25);
          hc_class = class_tiger;
          hc_sex = sex_male;
          hc_gallery = 'sandnature';
          hc_face_number = 3;

          tiger = CreateHuman;
          PlaceUnitArea(tiger, area, false);

          l = l + 1;
          end until l = num2;

          l = 0;

          // Ptaki
          repeat
          begin
          hc_class = class_phororhacos;
          hc_gallery = 'sandnature';
          hc_face_number = 1;

          bird = CreateHuman;
          PlaceUnitAnywhere(bird, false);

          l = l + 1;
          end until l = num3;


end;




Export Function CreateHumanWithClass(clas, lvl);
var skill_com, skill_eng, skill_mech, skill_sci, bonus;
begin

     hc_class := clas;

     // randomize lvl
        skill_com  := (lvl + Rand(-1, 1));
        skill_eng  := (lvl + Rand(-1, 1));
        skill_mech := (lvl + Rand(-1, 1));
        skill_sci  := (lvl + Rand(-1, 1));

     // add bonus level for class
        If clas = 1 or clas = 9 then
        bonus := [2,0,0,0];
        If clas = 2 then
        bonus := [0,2,0,0];
        If clas = 3 then
        bonus := [0,0,2,0];
        If clas = 4 then
        bonus := [0,0,0,2];
        If clas > 4 and not clas = 9 then
        bonus := [0,0,0,0];

     // set main skills
        hc_skills := [skill_com + bonus[1], skill_eng + bonus[2], skill_mech + bonus[3], skill_sci + bonus[4] ];

     // other hc_
        hc_sex     := Rand(sex_male, sex_female); // random
        hc_gallery := ''; // random gall
        hc_attr    := [Rand(8,12), Rand(9,11)];
        hc_name    := '';
        { place for rest hc_'s }

     // final result
        result := CreateHuman;

End;

Export Function SeeSide(unit, side);
var i;
begin
result := false;
i := NearestUnitToUnit(FilterAllUnits([f_side, side]), unit);

if GetDistUnits(unit, i) < 9 then
   result := true;
End;

//Destination Reachable Function by Serpent
Export unreachableList;
On DestinationUnreachable(unit) Do
begin
if not unit in unreachableList then
   unreachableList := Insert(unreachableList, unreachableList+1, unit);
end;

// ignore_list [ [building_types], [vehicle_weapons], [human_classes] ]
Export Function ComAttack(unit, ignore_list);
var i, j, target, enemy_list, _list, types_list;
begin
if not IsPlaced(unit) then
   exit;

// get enemy list
enemy_list := FilterAllUnits([f_enemy, GetSide(unit)]);

if not enemy_list then
   exit;

if ignore_list then
   begin
   _list := [];
   types_list := [f_btype, f_weapon, f_class];

   for i = 1 to 3 do
       begin
       if not ignore_list[i] then
          continue
           else
            for j in ignore_list[i] do
                begin
                _list := Insert(_list, _list+1, UnitFilter(enemy_list, [types_list[i], j]));
                end;
       end;
   end;

if enemy_list diff _list > 0 then
   enemy_list := enemy_list diff _list;

// get target
target := NearestUnitToUnit(enemy_list, unit);

if not DestinationReachable(unit, GetX(target), GetY(target)) then
   ComAttackUnit(unit, NearestUnitToUnit(FilterAllUnits([f_enemy, GetSide(unit)]), unit));
End;

Export Function DestinationReachable(unit, x, y);
begin
if unit in unreachableList then
   unreachableList := unreachableList diff unit;

   if ValidHex(x, y) then
      ComAttackUnit(unit, HexInfo(x, y));

   Wait(1);

if unit in unreachableList then
   result := false
    else
     result := true;
End;

