// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 68200 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7137 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 33349 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 38369 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 38369 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 72074 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 33349 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 33349 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 33349 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 38369 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 33349 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 72074 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 38369 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4060
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 72074 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4022
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: IFFALSE 3782
3761: PUSH
3762: LD_EXP 23
3766: PUSH
3767: LD_VAR 0 2
3771: ARRAY
3772: PPUSH
3773: CALL_OW 110
3777: PUSH
3778: LD_INT 1
3780: EQUAL
3781: AND
3782: IFFALSE 3810
// begin spottedByPatrol := true ;
3784: LD_ADDR_EXP 4
3788: PUSH
3789: LD_INT 1
3791: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3792: LD_EXP 23
3796: PUSH
3797: LD_VAR 0 2
3801: ARRAY
3802: PPUSH
3803: LD_INT 2
3805: PPUSH
3806: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3810: LD_EXP 23
3814: PUSH
3815: LD_VAR 0 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 110
3825: PUSH
3826: LD_INT 2
3828: EQUAL
3829: IFFALSE 3920
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3831: LD_EXP 23
3835: PUSH
3836: LD_VAR 0 2
3840: ARRAY
3841: PPUSH
3842: LD_INT 166
3844: PPUSH
3845: LD_INT 101
3847: PPUSH
3848: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3852: LD_EXP 23
3856: PUSH
3857: LD_VAR 0 2
3861: ARRAY
3862: PPUSH
3863: LD_INT 71
3865: PPUSH
3866: CALL_OW 296
3870: PUSH
3871: LD_INT 10
3873: LESS
3874: IFFALSE 3918
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3876: LD_ADDR_EXP 20
3880: PUSH
3881: LD_EXP 20
3885: PUSH
3886: LD_EXP 23
3890: PUSH
3891: LD_VAR 0 2
3895: ARRAY
3896: UNION
3897: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3898: LD_ADDR_EXP 23
3902: PUSH
3903: LD_EXP 23
3907: PPUSH
3908: LD_VAR 0 2
3912: PPUSH
3913: CALL_OW 3
3917: ST_TO_ADDR
// end ; continue ;
3918: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3920: LD_EXP 23
3924: PUSH
3925: LD_VAR 0 2
3929: ARRAY
3930: PPUSH
3931: CALL_OW 314
3935: NOT
3936: IFFALSE 4020
// for j in patrol [ i ] do
3938: LD_ADDR_VAR 0 3
3942: PUSH
3943: LD_VAR 0 4
3947: PUSH
3948: LD_VAR 0 2
3952: ARRAY
3953: PUSH
3954: FOR_IN
3955: IFFALSE 4018
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3957: LD_EXP 23
3961: PUSH
3962: LD_VAR 0 2
3966: ARRAY
3967: PPUSH
3968: LD_INT 35
3970: PPUSH
3971: LD_INT 175
3973: PPUSH
3974: CALL_OW 12
3978: PPUSH
3979: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3983: LD_EXP 23
3987: PUSH
3988: LD_VAR 0 2
3992: ARRAY
3993: PPUSH
3994: LD_VAR 0 3
3998: PUSH
3999: LD_INT 1
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 3
4007: PUSH
4008: LD_INT 2
4010: ARRAY
4011: PPUSH
4012: CALL_OW 174
// end ;
4016: GO 3954
4018: POP
4019: POP
// end ;
4020: GO 3737
4022: POP
4023: POP
// until not russianPatrol or russianAlert ;
4024: LD_EXP 23
4028: NOT
4029: IFTRUE 4037
4031: PUSH
4032: LD_EXP 5
4036: OR
4037: IFFALSE 3715
// if russianPatrol then
4039: LD_EXP 23
4043: IFFALSE 4060
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4045: LD_EXP 23
4049: PPUSH
4050: LD_INT 161
4052: PPUSH
4053: LD_INT 107
4055: PPUSH
4056: CALL_OW 114
// end ;
4060: PPOPN 4
4062: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4063: LD_EXP 6
4067: IFFALSE 4076
4069: PUSH
4070: LD_EXP 8
4074: NOT
4075: AND
4076: IFFALSE 4658
4078: GO 4080
4080: DISABLE
4081: LD_INT 0
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// begin enable ;
4090: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4091: LD_ADDR_VAR 0 2
4095: PUSH
4096: LD_EXP 24
4100: PPUSH
4101: LD_INT 21
4103: PUSH
4104: LD_INT 2
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 72
4115: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: LD_INT 22
4123: PUSH
4124: LD_INT 1
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4136: LD_ADDR_VAR 0 6
4140: PUSH
4141: LD_INT 44
4143: PUSH
4144: LD_INT 15
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 54
4153: PUSH
4154: LD_INT 39
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: ST_TO_ADDR
// for i in filter do
4165: LD_ADDR_VAR 0 1
4169: PUSH
4170: LD_VAR 0 2
4174: PUSH
4175: FOR_IN
4176: IFFALSE 4656
// begin tmp := IsDrivenBy ( i ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 311
4192: ST_TO_ADDR
// if not tmp then
4193: LD_VAR 0 3
4197: NOT
4198: IFFALSE 4202
// continue ;
4200: GO 4175
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4202: LD_VAR 0 1
4206: PPUSH
4207: CALL_OW 261
4211: PUSH
4212: LD_INT 90
4214: GREATER
4215: IFFALSE 4232
4217: PUSH
4218: LD_VAR 0 1
4222: PPUSH
4223: CALL_OW 110
4227: PUSH
4228: LD_INT 2
4230: EQUAL
4231: AND
4232: IFFALSE 4248
// SetTag ( i , 0 ) else
4234: LD_VAR 0 1
4238: PPUSH
4239: LD_INT 0
4241: PPUSH
4242: CALL_OW 109
4246: GO 4344
// if GetTag ( i ) = 2 then
4248: LD_VAR 0 1
4252: PPUSH
4253: CALL_OW 110
4257: PUSH
4258: LD_INT 2
4260: EQUAL
4261: IFFALSE 4344
// begin x := rand ( 1 , 2 ) ;
4263: LD_ADDR_VAR 0 5
4267: PUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_INT 2
4273: PPUSH
4274: CALL_OW 12
4278: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4279: LD_VAR 0 1
4283: PPUSH
4284: LD_EXP 25
4288: PUSH
4289: LD_VAR 0 5
4293: ARRAY
4294: PPUSH
4295: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4299: LD_EXP 25
4303: PUSH
4304: LD_VAR 0 5
4308: ARRAY
4309: PPUSH
4310: LD_INT 2
4312: PPUSH
4313: CALL_OW 289
4317: PUSH
4318: LD_INT 20
4320: LESS
4321: IFFALSE 4344
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4323: LD_EXP 25
4327: PUSH
4328: LD_VAR 0 5
4332: ARRAY
4333: PPUSH
4334: LD_INT 2
4336: PPUSH
4337: LD_INT 100
4339: PPUSH
4340: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 256
4353: PUSH
4354: LD_INT 600
4356: GREATEREQUAL
4357: IFFALSE 4371
4359: PUSH
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 110
4369: NOT
4370: AND
4371: IFFALSE 4397
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4373: LD_VAR 0 1
4377: PPUSH
4378: LD_VAR 0 4
4382: PPUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 74
4392: PPUSH
4393: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4397: LD_VAR 0 1
4401: PPUSH
4402: CALL_OW 256
4406: PUSH
4407: LD_INT 600
4409: LESS
4410: IFFALSE 4424
4412: PUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: CALL_OW 110
4422: NOT
4423: AND
4424: IFFALSE 4500
// begin SetTag ( i , 1 ) ;
4426: LD_VAR 0 1
4430: PPUSH
4431: LD_INT 1
4433: PPUSH
4434: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4438: LD_ADDR_VAR 0 7
4442: PUSH
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_VAR 0 6
4452: PPUSH
4453: CALL 75065 0 2
4457: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4458: LD_VAR 0 1
4462: PPUSH
4463: LD_VAR 0 7
4467: PUSH
4468: LD_INT 1
4470: ARRAY
4471: PPUSH
4472: LD_VAR 0 7
4476: PUSH
4477: LD_INT 2
4479: ARRAY
4480: PPUSH
4481: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 71
4492: PPUSH
4493: LD_INT 29
4495: PPUSH
4496: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4500: LD_VAR 0 1
4504: PPUSH
4505: CALL_OW 110
4509: PUSH
4510: LD_INT 1
4512: EQUAL
4513: IFFALSE 4536
4515: PUSH
4516: LD_VAR 0 1
4520: PPUSH
4521: LD_INT 71
4523: PPUSH
4524: LD_INT 29
4526: PPUSH
4527: CALL_OW 297
4531: PUSH
4532: LD_INT 9
4534: LESS
4535: AND
4536: IFFALSE 4544
4538: PUSH
4539: LD_VAR 0 3
4543: AND
4544: IFFALSE 4654
// begin ComExitVehicle ( tmp ) ;
4546: LD_VAR 0 3
4550: PPUSH
4551: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4555: LD_VAR 0 3
4559: PPUSH
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4576: LD_VAR 0 1
4580: PPUSH
4581: CALL_OW 256
4585: PUSH
4586: LD_INT 1000
4588: EQUAL
4589: IFFALSE 4569
// ComEnterUnit ( tmp , i ) ;
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_VAR 0 1
4600: PPUSH
4601: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 261
4614: PUSH
4615: LD_INT 90
4617: LESSEQUAL
4618: IFFALSE 4626
4620: PUSH
4621: LD_EXP 25
4625: AND
4626: IFFALSE 4642
// SetTag ( i , 2 ) else
4628: LD_VAR 0 1
4632: PPUSH
4633: LD_INT 2
4635: PPUSH
4636: CALL_OW 109
4640: GO 4654
// SetTag ( i , 0 ) ;
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 109
// end ; end ;
4654: GO 4175
4656: POP
4657: POP
// end ;
4658: PPOPN 7
4660: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4661: LD_EXP 6
4665: IFFALSE 4674
4667: PUSH
4668: LD_EXP 8
4672: NOT
4673: AND
4674: IFFALSE 4703
4676: PUSH
4677: LD_EXP 24
4681: PUSH
4682: LD_INT 12
4684: PUSH
4685: LD_INT 14
4687: PUSH
4688: LD_INT 16
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: LD_OWVAR 67
4700: ARRAY
4701: LESS
4702: AND
4703: IFFALSE 4716
4705: GO 4707
4707: DISABLE
// begin enable ;
4708: ENABLE
// ProduceNew ( 0 ) ;
4709: LD_INT 0
4711: PPUSH
4712: CALL 4717 0 1
// end ;
4716: END
// export function ProduceNew ( type ) ; var un ; begin
4717: LD_INT 0
4719: PPUSH
4720: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4721: LD_EXP 12
4725: PUSH
4726: LD_INT 7
4728: PUSH
4729: LD_INT 12
4731: PUSH
4732: LD_INT 15
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: LIST
4739: PUSH
4740: LD_OWVAR 67
4744: ARRAY
4745: LESS
4746: IFFALSE 4820
// begin uc_side := 3 ;
4748: LD_ADDR_OWVAR 20
4752: PUSH
4753: LD_INT 3
4755: ST_TO_ADDR
// uc_nation := 3 ;
4756: LD_ADDR_OWVAR 21
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// ResetHc ;
4764: CALL 72074 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4768: LD_INT 0
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 4
4779: PUSH
4780: LD_INT 5
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: PUSH
4788: LD_OWVAR 67
4792: ARRAY
4793: PPUSH
4794: CALL_OW 380
// un := CreateHuman ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: CALL_OW 44
4807: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 143
4815: PPUSH
4816: CALL_OW 52
// end ; if type = 1 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 1
4827: EQUAL
4828: IFFALSE 4851
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4830: LD_INT 143
4832: PPUSH
4833: LD_INT 21
4835: PPUSH
4836: LD_INT 1
4838: PPUSH
4839: LD_INT 1
4841: PPUSH
4842: LD_INT 51
4844: PPUSH
4845: CALL_OW 185
4849: GO 4930
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4851: LD_INT 143
4853: PPUSH
4854: LD_INT 21
4856: PUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 23
4862: PUSH
4863: LD_INT 24
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 1
4874: PPUSH
4875: LD_OWVAR 67
4879: PUSH
4880: LD_INT 1
4882: PLUS
4883: PPUSH
4884: CALL_OW 12
4888: ARRAY
4889: PPUSH
4890: LD_INT 1
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_INT 44
4898: PUSH
4899: LD_INT 44
4901: PUSH
4902: LD_INT 43
4904: PUSH
4905: LD_INT 42
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 1
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: CALL_OW 12
4924: ARRAY
4925: PPUSH
4926: CALL_OW 185
// end ;
4930: LD_VAR 0 2
4934: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4935: LD_EXP 8
4939: IFFALSE 5141
4941: GO 4943
4943: DISABLE
4944: LD_INT 0
4946: PPUSH
4947: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4948: LD_EXP 25
4952: PPUSH
4953: LD_INT 79
4955: PPUSH
4956: LD_INT 155
4958: PPUSH
4959: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4963: LD_EXP 25
4967: PPUSH
4968: LD_INT 4
4970: PPUSH
4971: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4975: LD_ADDR_VAR 0 2
4979: PUSH
4980: LD_EXP 24
4984: PPUSH
4985: LD_INT 50
4987: PUSH
4988: EMPTY
4989: LIST
4990: PPUSH
4991: CALL_OW 72
4995: ST_TO_ADDR
// for i in tmp do
4996: LD_ADDR_VAR 0 1
5000: PUSH
5001: LD_VAR 0 2
5005: PUSH
5006: FOR_IN
5007: IFFALSE 5041
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5009: LD_VAR 0 1
5013: PPUSH
5014: LD_INT 123
5016: PPUSH
5017: LD_INT 60
5019: PPUSH
5020: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5024: LD_VAR 0 1
5028: PPUSH
5029: LD_INT 153
5031: PPUSH
5032: LD_INT 103
5034: PPUSH
5035: CALL_OW 174
// end ;
5039: GO 5006
5041: POP
5042: POP
// repeat wait ( 0 0$1 ) ;
5043: LD_INT 35
5045: PPUSH
5046: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5050: LD_ADDR_VAR 0 2
5054: PUSH
5055: LD_EXP 24
5059: PPUSH
5060: LD_INT 50
5062: PUSH
5063: EMPTY
5064: LIST
5065: PPUSH
5066: CALL_OW 72
5070: ST_TO_ADDR
// for i in tmp do
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: LD_VAR 0 2
5080: PUSH
5081: FOR_IN
5082: IFFALSE 5132
// if not HasTask ( i ) then
5084: LD_VAR 0 1
5088: PPUSH
5089: CALL_OW 314
5093: NOT
5094: IFFALSE 5130
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5096: LD_VAR 0 1
5100: PPUSH
5101: LD_INT 81
5103: PUSH
5104: LD_INT 3
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PPUSH
5111: CALL_OW 69
5115: PPUSH
5116: LD_VAR 0 1
5120: PPUSH
5121: CALL_OW 74
5125: PPUSH
5126: CALL_OW 115
5130: GO 5081
5132: POP
5133: POP
5134: LD_VAR 0 2
5138: NOT
5139: IFFALSE 5043
// end ;
5141: PPOPN 2
5143: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5144: LD_INT 5
5146: PPUSH
5147: LD_INT 81
5149: PUSH
5150: LD_INT 6
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PPUSH
5157: CALL_OW 70
5161: IFFALSE 5174
5163: GO 5165
5165: DISABLE
// russianAlert := true ;
5166: LD_ADDR_EXP 5
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
5174: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5175: LD_INT 106
5177: PPUSH
5178: CALL_OW 302
5182: IFFALSE 5197
5184: PUSH
5185: LD_INT 106
5187: PPUSH
5188: CALL_OW 255
5192: PUSH
5193: LD_INT 3
5195: EQUAL
5196: AND
5197: IFFALSE 5220
5199: PUSH
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 275
5215: PUSH
5216: LD_INT 100
5218: LESS
5219: AND
5220: IFFALSE 5244
5222: GO 5224
5224: DISABLE
// begin enable ;
5225: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5226: LD_INT 106
5228: PPUSH
5229: CALL_OW 274
5233: PPUSH
5234: LD_INT 1
5236: PPUSH
5237: LD_INT 200
5239: PPUSH
5240: CALL_OW 276
// end ;
5244: END
// every 0 0$1 do var i , un , tmp ;
5245: GO 5247
5247: DISABLE
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
// begin uc_side := 3 ;
5253: LD_ADDR_OWVAR 20
5257: PUSH
5258: LD_INT 3
5260: ST_TO_ADDR
// uc_nation := 3 ;
5261: LD_ADDR_OWVAR 21
5265: PUSH
5266: LD_INT 3
5268: ST_TO_ADDR
// tmp := [ ] ;
5269: LD_ADDR_VAR 0 3
5273: PUSH
5274: EMPTY
5275: ST_TO_ADDR
// for i := 1 to 2 do
5276: LD_ADDR_VAR 0 1
5280: PUSH
5281: DOUBLE
5282: LD_INT 1
5284: DEC
5285: ST_TO_ADDR
5286: LD_INT 2
5288: PUSH
5289: FOR_TO
5290: IFFALSE 5367
// begin PrepareHuman ( false , 2 , 2 ) ;
5292: LD_INT 0
5294: PPUSH
5295: LD_INT 2
5297: PPUSH
5298: LD_INT 2
5300: PPUSH
5301: CALL_OW 380
// un := CreateHuman ;
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: CALL_OW 44
5314: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5315: LD_ADDR_VAR 0 3
5319: PUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_VAR 0 3
5329: PUSH
5330: LD_INT 1
5332: PLUS
5333: PPUSH
5334: LD_VAR 0 2
5338: PPUSH
5339: CALL_OW 1
5343: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5344: LD_VAR 0 2
5348: PPUSH
5349: LD_INT 74
5351: PPUSH
5352: LD_INT 112
5354: PPUSH
5355: LD_INT 3
5357: PPUSH
5358: LD_INT 0
5360: PPUSH
5361: CALL_OW 50
// end ;
5365: GO 5289
5367: POP
5368: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5369: LD_INT 112
5371: PPUSH
5372: CALL_OW 274
5376: PPUSH
5377: LD_INT 2
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5387: LD_INT 35
5389: PPUSH
5390: CALL_OW 67
// for i in tmp do
5394: LD_ADDR_VAR 0 1
5398: PUSH
5399: LD_VAR 0 3
5403: PUSH
5404: FOR_IN
5405: IFFALSE 5489
// begin if IsDead ( i ) then
5407: LD_VAR 0 1
5411: PPUSH
5412: CALL_OW 301
5416: IFFALSE 5434
// tmp := tmp diff i ;
5418: LD_ADDR_VAR 0 3
5422: PUSH
5423: LD_VAR 0 3
5427: PUSH
5428: LD_VAR 0 1
5432: DIFF
5433: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 314
5443: NOT
5444: IFFALSE 5458
5446: PUSH
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 281
5456: NOT
5457: AND
5458: IFFALSE 5487
// begin ComTransport ( i , kagan , mat_oil ) ;
5460: LD_VAR 0 1
5464: PPUSH
5465: LD_INT 112
5467: PPUSH
5468: LD_INT 2
5470: PPUSH
5471: CALL_OW 151
// AddComGive ( i , beria ) ;
5475: LD_VAR 0 1
5479: PPUSH
5480: LD_INT 106
5482: PPUSH
5483: CALL_OW 221
// end ; end ;
5487: GO 5404
5489: POP
5490: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5491: LD_VAR 0 3
5495: NOT
5496: IFTRUE 5507
5498: PUSH
5499: LD_INT 112
5501: PPUSH
5502: CALL_OW 301
5506: OR
5507: IFTRUE 5518
5509: PUSH
5510: LD_INT 106
5512: PPUSH
5513: CALL_OW 301
5517: OR
5518: IFFALSE 5387
// end ;
5520: PPOPN 3
5522: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5523: GO 5525
5525: DISABLE
5526: LD_INT 0
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
// begin enable ;
5533: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5534: LD_ADDR_VAR 0 4
5538: PUSH
5539: LD_INT 22
5541: PUSH
5542: LD_INT 3
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 34
5551: PUSH
5552: LD_INT 51
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 24
5561: PUSH
5562: LD_INT 600
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: PPUSH
5574: CALL_OW 69
5578: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5579: LD_ADDR_VAR 0 5
5583: PUSH
5584: LD_INT 22
5586: PUSH
5587: LD_INT 3
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: LD_INT 30
5599: PUSH
5600: LD_INT 0
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 30
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PPUSH
5626: CALL_OW 69
5630: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: LD_INT 9
5638: PPUSH
5639: CALL_OW 435
5643: ST_TO_ADDR
// if not cargo or not skr or not dep then
5644: LD_VAR 0 4
5648: NOT
5649: IFTRUE 5658
5651: PUSH
5652: LD_VAR 0 3
5656: NOT
5657: OR
5658: IFTRUE 5667
5660: PUSH
5661: LD_VAR 0 5
5665: NOT
5666: OR
5667: IFFALSE 5671
// exit ;
5669: GO 5837
// for i in cargo do
5671: LD_ADDR_VAR 0 1
5675: PUSH
5676: LD_VAR 0 4
5680: PUSH
5681: FOR_IN
5682: IFFALSE 5835
// begin if not skr then
5684: LD_VAR 0 3
5688: NOT
5689: IFFALSE 5695
// exit ;
5691: POP
5692: POP
5693: GO 5837
// if not HasTask ( i ) then
5695: LD_VAR 0 1
5699: PPUSH
5700: CALL_OW 314
5704: NOT
5705: IFFALSE 5774
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_VAR 0 3
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 3
5725: PUSH
5726: LD_INT 2
5728: ARRAY
5729: PPUSH
5730: CALL_OW 117
// for j := 1 to 2 do
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_INT 2
5746: PUSH
5747: FOR_TO
5748: IFFALSE 5770
// skr := Delete ( skr , 1 ) ;
5750: LD_ADDR_VAR 0 3
5754: PUSH
5755: LD_VAR 0 3
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 3
5767: ST_TO_ADDR
5768: GO 5747
5770: POP
5771: POP
// end else
5772: GO 5833
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5774: LD_VAR 0 1
5778: PPUSH
5779: CALL_OW 261
5783: PUSH
5784: LD_INT 3
5786: LESS
5787: IFFALSE 5819
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 5
5799: PPUSH
5800: LD_VAR 0 1
5804: PPUSH
5805: CALL_OW 74
5809: PPUSH
5810: CALL_OW 296
5814: PUSH
5815: LD_INT 6
5817: LESS
5818: AND
5819: IFFALSE 5833
// SetFuel ( i , 100 ) ;
5821: LD_VAR 0 1
5825: PPUSH
5826: LD_INT 100
5828: PPUSH
5829: CALL_OW 240
// end ;
5833: GO 5681
5835: POP
5836: POP
// end ;
5837: PPOPN 5
5839: END
// export function SendSupport ; var i , un ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// uc_nation := 3 ;
5845: LD_ADDR_OWVAR 21
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// uc_side := 3 ;
5853: LD_ADDR_OWVAR 20
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// ResetHc ;
5861: CALL 72074 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5865: LD_ADDR_VAR 0 2
5869: PUSH
5870: DOUBLE
5871: LD_INT 1
5873: DEC
5874: ST_TO_ADDR
5875: LD_INT 3
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_OWVAR 67
5893: ARRAY
5894: PUSH
5895: FOR_TO
5896: IFFALSE 5970
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5898: LD_INT 0
5900: PPUSH
5901: LD_INT 1
5903: PPUSH
5904: LD_OWVAR 67
5908: PPUSH
5909: CALL_OW 380
// un := CreateHuman ;
5913: LD_ADDR_VAR 0 3
5917: PUSH
5918: CALL_OW 44
5922: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5923: LD_VAR 0 3
5927: PPUSH
5928: LD_INT 107
5930: PPUSH
5931: LD_INT 95
5933: PPUSH
5934: LD_INT 4
5936: PPUSH
5937: LD_INT 0
5939: PPUSH
5940: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5944: LD_VAR 0 3
5948: PPUSH
5949: LD_INT 56
5951: PPUSH
5952: LD_INT 27
5954: PPUSH
5955: CALL_OW 114
// AddComHold ( un ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: CALL_OW 200
// end ;
5968: GO 5895
5970: POP
5971: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5972: LD_INT 0
5974: PPUSH
5975: LD_INT 4
5977: PPUSH
5978: LD_OWVAR 67
5982: PPUSH
5983: CALL_OW 380
// un := CreateHuman ;
5987: LD_ADDR_VAR 0 3
5991: PUSH
5992: CALL_OW 44
5996: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_INT 107
6004: PPUSH
6005: LD_INT 95
6007: PPUSH
6008: LD_INT 4
6010: PPUSH
6011: LD_INT 0
6013: PPUSH
6014: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
6018: LD_VAR 0 3
6022: PPUSH
6023: LD_INT 59
6025: PPUSH
6026: LD_INT 25
6028: PPUSH
6029: CALL_OW 111
// if Difficulty > 1 then
6033: LD_OWVAR 67
6037: PUSH
6038: LD_INT 1
6040: GREATER
6041: IFFALSE 6150
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: DOUBLE
6049: LD_INT 1
6051: DEC
6052: ST_TO_ADDR
6053: LD_INT 2
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: LD_OWVAR 67
6071: ARRAY
6072: PUSH
6073: FOR_TO
6074: IFFALSE 6148
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6076: LD_INT 0
6078: PPUSH
6079: LD_INT 1
6081: PPUSH
6082: LD_OWVAR 67
6086: PPUSH
6087: CALL_OW 380
// un := CreateHuman ;
6091: LD_ADDR_VAR 0 3
6095: PUSH
6096: CALL_OW 44
6100: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6101: LD_VAR 0 3
6105: PPUSH
6106: LD_INT 107
6108: PPUSH
6109: LD_INT 95
6111: PPUSH
6112: LD_INT 4
6114: PPUSH
6115: LD_INT 0
6117: PPUSH
6118: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_INT 45
6129: PPUSH
6130: LD_INT 76
6132: PPUSH
6133: CALL_OW 114
// AddComHold ( un ) ;
6137: LD_VAR 0 3
6141: PPUSH
6142: CALL_OW 200
// end ;
6146: GO 6073
6148: POP
6149: POP
// end ; end ;
6150: LD_VAR 0 1
6154: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6155: LD_OWVAR 1
6159: PUSH
6160: LD_INT 42000
6162: GREATEREQUAL
6163: IFFALSE 6175
6165: PUSH
6166: LD_OWVAR 67
6170: PUSH
6171: LD_INT 1
6173: GREATER
6174: AND
6175: IFFALSE 6187
6177: PUSH
6178: LD_EXP 24
6182: PUSH
6183: LD_INT 4
6185: GREATER
6186: AND
6187: IFFALSE 6196
6189: PUSH
6190: LD_EXP 8
6194: NOT
6195: AND
6196: IFFALSE 6489
6198: GO 6200
6200: DISABLE
6201: LD_INT 0
6203: PPUSH
6204: PPUSH
6205: PPUSH
6206: PPUSH
// begin enable ;
6207: ENABLE
// tmp := [ ] ;
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: LD_INT 55
6222: PUSH
6223: LD_INT 91
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 47
6232: PUSH
6233: LD_INT 80
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 39
6242: PUSH
6243: LD_INT 67
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 36
6252: PUSH
6253: LD_INT 60
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 33
6262: PUSH
6263: LD_INT 52
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: LD_INT 3
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_OWVAR 67
6305: PUSH
6306: LD_INT 1
6308: MINUS
6309: ARRAY
6310: PUSH
6311: FOR_TO
6312: IFFALSE 6463
// begin uc_side := 3 ;
6314: LD_ADDR_OWVAR 20
6318: PUSH
6319: LD_INT 3
6321: ST_TO_ADDR
// uc_nation := 3 ;
6322: LD_ADDR_OWVAR 21
6326: PUSH
6327: LD_INT 3
6329: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6330: LD_INT 22
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_INT 1
6338: PPUSH
6339: LD_INT 42
6341: PUSH
6342: LD_INT 42
6344: PUSH
6345: LD_INT 44
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 3
6360: MOD
6361: PUSH
6362: LD_INT 1
6364: PLUS
6365: ARRAY
6366: PPUSH
6367: LD_INT 100
6369: PPUSH
6370: CALL 38369 0 5
// un := CreateVehicle ;
6374: LD_ADDR_VAR 0 2
6378: PUSH
6379: CALL_OW 45
6383: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6384: LD_VAR 0 2
6388: PPUSH
6389: LD_INT 57
6391: PPUSH
6392: LD_INT 103
6394: PPUSH
6395: LD_INT 4
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6405: LD_ADDR_VAR 0 3
6409: PUSH
6410: LD_VAR 0 3
6414: PPUSH
6415: LD_VAR 0 3
6419: PUSH
6420: LD_INT 1
6422: PLUS
6423: PPUSH
6424: LD_VAR 0 2
6428: PPUSH
6429: CALL_OW 1
6433: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6434: LD_INT 0
6436: PPUSH
6437: LD_INT 3
6439: PPUSH
6440: LD_INT 5
6442: PPUSH
6443: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6447: CALL_OW 44
6451: PPUSH
6452: LD_VAR 0 2
6456: PPUSH
6457: CALL_OW 52
// end ;
6461: GO 6311
6463: POP
6464: POP
// repeat wait ( 0 0$1 ) ;
6465: LD_INT 35
6467: PPUSH
6468: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6472: LD_VAR 0 3
6476: PPUSH
6477: LD_VAR 0 4
6481: PPUSH
6482: CALL 74315 0 2
6486: NOT
6487: IFFALSE 6465
// end ;
6489: PPOPN 4
6491: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6492: LD_INT 3
6494: PUSH
6495: LD_INT 22
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 1
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PPUSH
6523: CALL_OW 69
6527: IFFALSE 6611
6529: GO 6531
6531: DISABLE
6532: LD_INT 0
6534: PPUSH
// begin enable ;
6535: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6536: LD_ADDR_VAR 0 1
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 1
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 32
6560: PUSH
6561: LD_INT 1
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PPUSH
6572: CALL_OW 69
6576: PUSH
6577: FOR_IN
6578: IFFALSE 6609
// if GetFuel ( i ) < 3 then
6580: LD_VAR 0 1
6584: PPUSH
6585: CALL_OW 261
6589: PUSH
6590: LD_INT 3
6592: LESS
6593: IFFALSE 6607
// SetFuel ( i , 3 ) ;
6595: LD_VAR 0 1
6599: PPUSH
6600: LD_INT 3
6602: PPUSH
6603: CALL_OW 240
6607: GO 6577
6609: POP
6610: POP
// end ; end_of_file
6611: PPOPN 1
6613: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6614: LD_INT 0
6616: PPUSH
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
6621: PPUSH
// uc_side := 2 ;
6622: LD_ADDR_OWVAR 20
6626: PUSH
6627: LD_INT 2
6629: ST_TO_ADDR
// uc_nation := 2 ;
6630: LD_ADDR_OWVAR 21
6634: PUSH
6635: LD_INT 2
6637: ST_TO_ADDR
// InitVc ;
6638: CALL_OW 20
// ResetHc ;
6642: CALL 72074 0 0
// for j := 1 to 2 do
6646: LD_ADDR_VAR 0 3
6650: PUSH
6651: DOUBLE
6652: LD_INT 1
6654: DEC
6655: ST_TO_ADDR
6656: LD_INT 2
6658: PUSH
6659: FOR_TO
6660: IFFALSE 6884
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6662: LD_ADDR_VAR 0 6
6666: PUSH
6667: LD_INT 178
6669: PUSH
6670: LD_INT 3
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 268
6679: PUSH
6680: LD_INT 121
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_VAR 0 3
6695: ARRAY
6696: ST_TO_ADDR
// for i := 1 to 8 do
6697: LD_ADDR_VAR 0 2
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_INT 8
6709: PUSH
6710: FOR_TO
6711: IFFALSE 6880
// begin uc_side := 2 ;
6713: LD_ADDR_OWVAR 20
6717: PUSH
6718: LD_INT 2
6720: ST_TO_ADDR
// uc_nation := 2 ;
6721: LD_ADDR_OWVAR 21
6725: PUSH
6726: LD_INT 2
6728: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6729: LD_INT 14
6731: PPUSH
6732: LD_INT 1
6734: PPUSH
6735: LD_INT 1
6737: PPUSH
6738: LD_INT 26
6740: PUSH
6741: LD_INT 27
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 1
6750: PPUSH
6751: LD_INT 2
6753: PPUSH
6754: CALL_OW 12
6758: ARRAY
6759: PPUSH
6760: LD_INT 99
6762: PPUSH
6763: CALL 38369 0 5
// veh := CreateVehicle ;
6767: LD_ADDR_VAR 0 5
6771: PUSH
6772: CALL_OW 45
6776: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6777: LD_VAR 0 5
6781: PPUSH
6782: LD_INT 3
6784: PPUSH
6785: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6789: LD_VAR 0 5
6793: PPUSH
6794: LD_VAR 0 6
6798: PUSH
6799: LD_INT 1
6801: ARRAY
6802: PPUSH
6803: LD_VAR 0 6
6807: PUSH
6808: LD_INT 2
6810: ARRAY
6811: PPUSH
6812: LD_INT 0
6814: PPUSH
6815: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6819: LD_INT 0
6821: PPUSH
6822: LD_INT 3
6824: PPUSH
6825: LD_INT 6
6827: PPUSH
6828: CALL_OW 380
// un := CreateHuman ;
6832: LD_ADDR_VAR 0 4
6836: PUSH
6837: CALL_OW 44
6841: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6842: LD_VAR 0 4
6846: PPUSH
6847: LD_VAR 0 5
6851: PPUSH
6852: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6856: LD_VAR 0 4
6860: PPUSH
6861: LD_INT 186
6863: PPUSH
6864: LD_INT 17
6866: PPUSH
6867: CALL_OW 111
// wait ( 0 0$2 ) ;
6871: LD_INT 70
6873: PPUSH
6874: CALL_OW 67
// end ;
6878: GO 6710
6880: POP
6881: POP
// end ;
6882: GO 6659
6884: POP
6885: POP
// for i := 1 to 10 do
6886: LD_ADDR_VAR 0 2
6890: PUSH
6891: DOUBLE
6892: LD_INT 1
6894: DEC
6895: ST_TO_ADDR
6896: LD_INT 10
6898: PUSH
6899: FOR_TO
6900: IFFALSE 6967
// begin PrepareHuman ( false , 1 , 5 ) ;
6902: LD_INT 0
6904: PPUSH
6905: LD_INT 1
6907: PPUSH
6908: LD_INT 5
6910: PPUSH
6911: CALL_OW 380
// un := CreateHuman ;
6915: LD_ADDR_VAR 0 4
6919: PUSH
6920: CALL_OW 44
6924: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6925: LD_VAR 0 4
6929: PPUSH
6930: LD_INT 178
6932: PPUSH
6933: LD_INT 3
6935: PPUSH
6936: LD_INT 0
6938: PPUSH
6939: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6943: LD_VAR 0 4
6947: PPUSH
6948: LD_INT 186
6950: PPUSH
6951: LD_INT 17
6953: PPUSH
6954: CALL_OW 111
// wait ( 0 0$2 ) ;
6958: LD_INT 70
6960: PPUSH
6961: CALL_OW 67
// end ;
6965: GO 6899
6967: POP
6968: POP
// end ;
6969: LD_VAR 0 1
6973: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6974: LD_INT 22
6976: PUSH
6977: LD_INT 2
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 50
6986: PUSH
6987: EMPTY
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 69
6998: IFFALSE 7134
7000: GO 7002
7002: DISABLE
7003: LD_INT 0
7005: PPUSH
7006: PPUSH
// begin enable ;
7007: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7008: LD_ADDR_VAR 0 2
7012: PUSH
7013: LD_INT 2
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_INT 3
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 22
7028: PUSH
7029: LD_INT 6
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: PPUSH
7041: CALL_OW 69
7045: ST_TO_ADDR
// if not enemy then
7046: LD_VAR 0 2
7050: NOT
7051: IFFALSE 7073
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: LD_INT 22
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PPUSH
7068: CALL_OW 69
7072: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7073: LD_ADDR_VAR 0 1
7077: PUSH
7078: LD_INT 22
7080: PUSH
7081: LD_INT 2
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 50
7090: PUSH
7091: EMPTY
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 69
7102: PUSH
7103: FOR_IN
7104: IFFALSE 7132
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7106: LD_VAR 0 1
7110: PPUSH
7111: LD_VAR 0 2
7115: PPUSH
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 74
7125: PPUSH
7126: CALL_OW 115
7130: GO 7103
7132: POP
7133: POP
// end ; end_of_file
7134: PPOPN 2
7136: END
// export function Action ; begin
7137: LD_INT 0
7139: PPUSH
// InGameOn ;
7140: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7144: LD_INT 106
7146: PPUSH
7147: LD_INT 3
7149: PPUSH
7150: CALL_OW 86
// wait ( 0 0$2 ) ;
7154: LD_INT 70
7156: PPUSH
7157: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7161: LD_STRING target1
7163: PPUSH
7164: CALL_OW 337
// InGameOff ;
7168: CALL_OW 9
// SaveForQuickRestart ;
7172: CALL_OW 22
// end ;
7176: LD_VAR 0 1
7180: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7181: LD_INT 64
7183: PPUSH
7184: CALL_OW 301
7188: IFFALSE 7197
7190: PUSH
7191: LD_EXP 8
7195: NOT
7196: AND
7197: IFFALSE 7217
7199: GO 7201
7201: DISABLE
// begin omicronFall := true ;
7202: LD_ADDR_EXP 7
7206: PUSH
7207: LD_INT 1
7209: ST_TO_ADDR
// YouLost ( omi ) ;
7210: LD_STRING omi
7212: PPUSH
7213: CALL_OW 104
// end ;
7217: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7218: LD_INT 4
7220: PPUSH
7221: LD_EXP 14
7225: PPUSH
7226: CALL_OW 292
7230: IFTRUE 7251
7232: PUSH
7233: LD_INT 4
7235: PPUSH
7236: LD_EXP 14
7240: PPUSH
7241: CALL_OW 310
7245: PPUSH
7246: CALL_OW 292
7250: OR
7251: IFFALSE 7262
7253: PUSH
7254: LD_INT 64
7256: PPUSH
7257: CALL_OW 302
7261: AND
7262: IFFALSE 7817
7264: GO 7266
7266: DISABLE
7267: LD_INT 0
7269: PPUSH
7270: PPUSH
7271: PPUSH
7272: PPUSH
// begin InGameOn ;
7273: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7277: LD_ADDR_VAR 0 2
7281: PUSH
7282: LD_INT 22
7284: PUSH
7285: LD_INT 4
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PPUSH
7292: CALL_OW 69
7296: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: LD_INT 26
7309: PUSH
7310: LD_INT 1
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PPUSH
7317: CALL_OW 72
7321: PUSH
7322: LD_INT 1
7324: ARRAY
7325: ST_TO_ADDR
// for i in tmp do
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_VAR 0 2
7335: PUSH
7336: FOR_IN
7337: IFFALSE 7353
// SetSide ( i , 1 ) ;
7339: LD_VAR 0 1
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 235
7351: GO 7336
7353: POP
7354: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7355: LD_EXP 14
7359: PPUSH
7360: LD_INT 37
7362: PPUSH
7363: LD_INT 40
7365: PPUSH
7366: CALL_OW 111
// wait ( 0 0$5 ) ;
7370: LD_INT 175
7372: PPUSH
7373: CALL_OW 67
// ComExit ( Sikorski ) ;
7377: LD_EXP 14
7381: PPUSH
7382: CALL 71947 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7386: LD_EXP 14
7390: PPUSH
7391: LD_INT 37
7393: PPUSH
7394: LD_INT 40
7396: PPUSH
7397: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7401: LD_EXP 14
7405: PPUSH
7406: CALL_OW 85
// wait ( 0 0$2 ) ;
7410: LD_INT 70
7412: PPUSH
7413: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7417: LD_ADDR_VAR 0 4
7421: PUSH
7422: LD_VAR 0 3
7426: PPUSH
7427: CALL 71947 0 1
7431: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7432: LD_VAR 0 3
7436: PPUSH
7437: LD_EXP 14
7441: PPUSH
7442: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7446: LD_INT 35
7448: PPUSH
7449: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7453: LD_VAR 0 3
7457: PPUSH
7458: LD_EXP 14
7462: PPUSH
7463: CALL_OW 296
7467: PUSH
7468: LD_INT 5
7470: LESS
7471: IFFALSE 7485
7473: PUSH
7474: LD_EXP 14
7478: PPUSH
7479: CALL_OW 310
7483: NOT
7484: AND
7485: IFFALSE 7446
// ComTurnUnit ( Sikorski , speaker ) ;
7487: LD_EXP 14
7491: PPUSH
7492: LD_VAR 0 3
7496: PPUSH
7497: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7501: LD_VAR 0 3
7505: PPUSH
7506: LD_EXP 14
7510: PPUSH
7511: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7515: LD_EXP 14
7519: PPUSH
7520: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7524: LD_EXP 14
7528: PPUSH
7529: LD_STRING DS-1
7531: PPUSH
7532: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7536: LD_VAR 0 3
7540: PPUSH
7541: LD_STRING DP-1
7543: PPUSH
7544: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7548: LD_EXP 14
7552: PPUSH
7553: LD_STRING DS-2
7555: PPUSH
7556: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7560: LD_VAR 0 3
7564: PPUSH
7565: LD_STRING DP-2
7567: PPUSH
7568: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7572: LD_EXP 14
7576: PPUSH
7577: LD_STRING DS-3
7579: PPUSH
7580: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7584: LD_VAR 0 3
7588: PPUSH
7589: LD_STRING DP-3
7591: PPUSH
7592: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7596: LD_EXP 14
7600: PPUSH
7601: LD_STRING DS-4
7603: PPUSH
7604: CALL_OW 88
// wait ( 0 0$1 ) ;
7608: LD_INT 35
7610: PPUSH
7611: CALL_OW 67
// if whereHeWas then
7615: LD_VAR 0 4
7619: IFFALSE 7635
// ComEnterUnit ( speaker , whereHeWas ) ;
7621: LD_VAR 0 3
7625: PPUSH
7626: LD_VAR 0 4
7630: PPUSH
7631: CALL_OW 120
// ComHold ( Sikorski ) ;
7635: LD_EXP 14
7639: PPUSH
7640: CALL_OW 140
// wait ( 0 0$1 ) ;
7644: LD_INT 35
7646: PPUSH
7647: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7651: LD_EXP 15
7655: PPUSH
7656: LD_STRING DR-1
7658: PPUSH
7659: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7663: LD_EXP 14
7667: PPUSH
7668: LD_STRING DS-5
7670: PPUSH
7671: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7675: LD_EXP 15
7679: PPUSH
7680: LD_STRING DR-2
7682: PPUSH
7683: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7687: LD_EXP 14
7691: PPUSH
7692: LD_STRING DS-6
7694: PPUSH
7695: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7699: LD_EXP 15
7703: PPUSH
7704: LD_STRING DR-3
7706: PPUSH
7707: CALL_OW 94
// InGameOff ;
7711: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7715: LD_STRING target2
7717: PPUSH
7718: CALL_OW 337
// sikorskiInOmicron := true ;
7722: LD_ADDR_EXP 9
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7730: LD_INT 70
7732: PPUSH
7733: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7737: LD_EXP 14
7741: PPUSH
7742: LD_STRING DS-7
7744: PPUSH
7745: CALL_OW 88
// wait ( 3 3$00 ) ;
7749: LD_INT 6300
7751: PPUSH
7752: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7756: LD_EXP 15
7760: PPUSH
7761: LD_STRING DRforce-5
7763: PPUSH
7764: CALL_OW 94
// wait ( 4 4$50 ) ;
7768: LD_INT 10150
7770: PPUSH
7771: CALL_OW 67
// FirstReinforcements ;
7775: CALL 7996 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7779: LD_INT 25200
7781: PPUSH
7782: LD_INT 31500
7784: PPUSH
7785: CALL_OW 12
7789: PPUSH
7790: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7794: LD_EXP 15
7798: PPUSH
7799: LD_STRING DRforce-10
7801: PPUSH
7802: CALL_OW 94
// wait ( 9 9$50 ) ;
7806: LD_INT 20650
7808: PPUSH
7809: CALL_OW 67
// SecondReinforcements ;
7813: CALL 8843 0 0
// end ;
7817: PPOPN 4
7819: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7820: LD_EXP 14
7824: PPUSH
7825: CALL_OW 256
7829: PUSH
7830: LD_INT 1000
7832: LESS
7833: IFFALSE 7883
7835: PUSH
7836: LD_INT 22
7838: PUSH
7839: LD_INT 1
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 2
7848: PUSH
7849: LD_INT 101
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 101
7861: PUSH
7862: LD_INT 6
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 69
7882: AND
7883: IFFALSE 7900
7885: GO 7887
7887: DISABLE
// Say ( Sikorski , DRus ) ;
7888: LD_EXP 14
7892: PPUSH
7893: LD_STRING DRus
7895: PPUSH
7896: CALL_OW 88
7900: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7901: LD_OWVAR 1
7905: PUSH
7906: LD_INT 23100
7908: PUSH
7909: LD_INT 22050
7911: PUSH
7912: LD_INT 20300
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_OWVAR 67
7924: ARRAY
7925: GREATEREQUAL
7926: IFFALSE 7995
7928: GO 7930
7930: DISABLE
// begin SendSupport ;
7931: CALL 5840 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7935: LD_EXP 24
7939: PPUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 2
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PPUSH
7950: CALL_OW 72
7954: PPUSH
7955: LD_INT 62
7957: PPUSH
7958: LD_INT 22
7960: PPUSH
7961: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7965: LD_EXP 25
7969: PPUSH
7970: LD_INT 69
7972: PPUSH
7973: LD_INT 27
7975: PPUSH
7976: CALL_OW 111
// wait ( 1 1$00 ) ;
7980: LD_INT 2100
7982: PPUSH
7983: CALL_OW 67
// startAttackOnOmicron := true ;
7987: LD_ADDR_EXP 6
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// end ;
7995: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7996: LD_INT 0
7998: PPUSH
7999: PPUSH
8000: PPUSH
8001: PPUSH
8002: PPUSH
8003: PPUSH
// uc_side := 4 ;
8004: LD_ADDR_OWVAR 20
8008: PUSH
8009: LD_INT 4
8011: ST_TO_ADDR
// uc_nation := 1 ;
8012: LD_ADDR_OWVAR 21
8016: PUSH
8017: LD_INT 1
8019: ST_TO_ADDR
// tmp := [ ] ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: EMPTY
8026: ST_TO_ADDR
// ResetHc ;
8027: CALL 72074 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
8031: LD_INT 2
8033: PPUSH
8034: LD_INT 1
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 4
8042: PPUSH
8043: LD_INT 77
8045: PPUSH
8046: CALL 38369 0 5
// un := CreateVehicle ;
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: CALL_OW 45
8059: ST_TO_ADDR
// tmp := tmp union un ;
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_VAR 0 4
8069: PUSH
8070: LD_VAR 0 3
8074: UNION
8075: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8076: LD_VAR 0 3
8080: PPUSH
8081: LD_INT 2
8083: PPUSH
8084: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_INT 106
8095: PPUSH
8096: LD_INT 3
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 3
8111: PPUSH
8112: LD_INT 2
8114: PPUSH
8115: CALL_OW 380
// un := CreateHuman ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: CALL_OW 44
8128: ST_TO_ADDR
// tmp := tmp union un ;
8129: LD_ADDR_VAR 0 4
8133: PUSH
8134: LD_VAR 0 4
8138: PUSH
8139: LD_VAR 0 3
8143: UNION
8144: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8145: LD_VAR 0 3
8149: PPUSH
8150: LD_VAR 0 4
8154: PUSH
8155: LD_VAR 0 4
8159: PUSH
8160: LD_INT 1
8162: MINUS
8163: ARRAY
8164: PPUSH
8165: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_INT 109
8176: PPUSH
8177: LD_INT 9
8179: PPUSH
8180: CALL_OW 111
// wait ( 0 0$1 ) ;
8184: LD_INT 35
8186: PPUSH
8187: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8191: LD_ADDR_VAR 0 2
8195: PUSH
8196: DOUBLE
8197: LD_INT 1
8199: DEC
8200: ST_TO_ADDR
8201: LD_INT 2
8203: PUSH
8204: LD_INT 2
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_OWVAR 67
8219: ARRAY
8220: PUSH
8221: FOR_TO
8222: IFFALSE 8286
// begin PrepareHuman ( false , 1 , 2 ) ;
8224: LD_INT 0
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: LD_INT 2
8232: PPUSH
8233: CALL_OW 380
// un := CreateHuman ;
8237: LD_ADDR_VAR 0 3
8241: PUSH
8242: CALL_OW 44
8246: ST_TO_ADDR
// tmp := tmp union un ;
8247: LD_ADDR_VAR 0 4
8251: PUSH
8252: LD_VAR 0 4
8256: PUSH
8257: LD_VAR 0 3
8261: UNION
8262: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8263: LD_VAR 0 3
8267: PPUSH
8268: LD_INT 105
8270: PPUSH
8271: LD_INT 2
8273: PPUSH
8274: LD_INT 2
8276: PPUSH
8277: LD_INT 0
8279: PPUSH
8280: CALL_OW 50
// end ;
8284: GO 8221
8286: POP
8287: POP
// PrepareHuman ( false , 4 , 2 ) ;
8288: LD_INT 0
8290: PPUSH
8291: LD_INT 4
8293: PPUSH
8294: LD_INT 2
8296: PPUSH
8297: CALL_OW 380
// un := CreateHuman ;
8301: LD_ADDR_VAR 0 3
8305: PUSH
8306: CALL_OW 44
8310: ST_TO_ADDR
// tmp := tmp union un ;
8311: LD_ADDR_VAR 0 4
8315: PUSH
8316: LD_VAR 0 4
8320: PUSH
8321: LD_VAR 0 3
8325: UNION
8326: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8327: LD_VAR 0 3
8331: PPUSH
8332: LD_INT 105
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: LD_INT 2
8340: PPUSH
8341: LD_INT 0
8343: PPUSH
8344: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8348: LD_VAR 0 4
8352: PPUSH
8353: LD_INT 26
8355: PPUSH
8356: LD_INT 35
8358: PPUSH
8359: CALL_OW 114
// spotted := false ;
8363: LD_ADDR_VAR 0 5
8367: PUSH
8368: LD_INT 0
8370: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8371: LD_ADDR_VAR 0 6
8375: PUSH
8376: LD_INT 0
8378: PUSH
8379: LD_INT 0
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8386: LD_INT 35
8388: PPUSH
8389: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8393: LD_VAR 0 4
8397: PPUSH
8398: LD_INT 3
8400: PUSH
8401: LD_INT 24
8403: PUSH
8404: LD_INT 1000
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 72
8419: IFFALSE 8428
8421: PUSH
8422: LD_VAR 0 5
8426: NOT
8427: AND
8428: IFFALSE 8554
// begin spotted := true ;
8430: LD_ADDR_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8438: LD_ADDR_VAR 0 3
8442: PUSH
8443: LD_VAR 0 4
8447: PPUSH
8448: LD_INT 3
8450: PUSH
8451: LD_INT 24
8453: PUSH
8454: LD_INT 1000
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 72
8469: PUSH
8470: LD_INT 1
8472: ARRAY
8473: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8474: LD_ADDR_VAR 0 6
8478: PUSH
8479: LD_VAR 0 3
8483: PPUSH
8484: CALL_OW 250
8488: PUSH
8489: LD_VAR 0 3
8493: PPUSH
8494: CALL_OW 251
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8503: LD_VAR 0 6
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 6
8516: PUSH
8517: LD_INT 2
8519: ARRAY
8520: PPUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_INT 12
8526: NEG
8527: PPUSH
8528: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: ARRAY
8540: PPUSH
8541: LD_VAR 0 6
8545: PUSH
8546: LD_INT 2
8548: ARRAY
8549: PPUSH
8550: CALL_OW 84
// end ; for i in tmp do
8554: LD_ADDR_VAR 0 2
8558: PUSH
8559: LD_VAR 0 4
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8596
// if not HasTask ( i ) then
8567: LD_VAR 0 2
8571: PPUSH
8572: CALL_OW 314
8576: NOT
8577: IFFALSE 8594
// ComAgressiveMove ( i , 26 , 35 ) ;
8579: LD_VAR 0 2
8583: PPUSH
8584: LD_INT 26
8586: PPUSH
8587: LD_INT 35
8589: PPUSH
8590: CALL_OW 114
8594: GO 8564
8596: POP
8597: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8598: LD_VAR 0 4
8602: PPUSH
8603: LD_INT 50
8605: PUSH
8606: EMPTY
8607: LIST
8608: PPUSH
8609: CALL_OW 72
8613: NOT
8614: IFFALSE 8649
// begin if spotted then
8616: LD_VAR 0 5
8620: IFFALSE 8647
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8622: LD_VAR 0 6
8626: PUSH
8627: LD_INT 1
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 6
8635: PUSH
8636: LD_INT 2
8638: ARRAY
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: CALL_OW 331
// exit ;
8647: GO 8838
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8649: LD_VAR 0 4
8653: PPUSH
8654: LD_INT 91
8656: PUSH
8657: LD_INT 64
8659: PUSH
8660: LD_INT 12
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 72
8672: IFTRUE 8688
8674: PUSH
8675: LD_INT 4
8677: PPUSH
8678: LD_EXP 14
8682: PPUSH
8683: CALL_OW 292
8687: OR
8688: IFFALSE 8386
// omicronSquad := omicronSquad union tmp ;
8690: LD_ADDR_EXP 13
8694: PUSH
8695: LD_EXP 13
8699: PUSH
8700: LD_VAR 0 4
8704: UNION
8705: ST_TO_ADDR
// if spotted then
8706: LD_VAR 0 5
8710: IFFALSE 8737
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8712: LD_VAR 0 6
8716: PUSH
8717: LD_INT 1
8719: ARRAY
8720: PPUSH
8721: LD_VAR 0 6
8725: PUSH
8726: LD_INT 2
8728: ARRAY
8729: PPUSH
8730: LD_INT 1
8732: PPUSH
8733: CALL_OW 331
// for i in tmp do
8737: LD_ADDR_VAR 0 2
8741: PUSH
8742: LD_VAR 0 4
8746: PUSH
8747: FOR_IN
8748: IFFALSE 8764
// SetSide ( i , 1 ) ;
8750: LD_VAR 0 2
8754: PPUSH
8755: LD_INT 1
8757: PPUSH
8758: CALL_OW 235
8762: GO 8747
8764: POP
8765: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8766: LD_VAR 0 4
8770: PPUSH
8771: LD_INT 26
8773: PUSH
8774: LD_INT 1
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 50
8783: PUSH
8784: EMPTY
8785: LIST
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PPUSH
8791: CALL_OW 72
8795: IFFALSE 8838
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8797: LD_VAR 0 4
8801: PPUSH
8802: LD_INT 26
8804: PUSH
8805: LD_INT 1
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 50
8814: PUSH
8815: EMPTY
8816: LIST
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PPUSH
8822: CALL_OW 72
8826: PUSH
8827: LD_INT 1
8829: ARRAY
8830: PPUSH
8831: LD_STRING Dcargo
8833: PPUSH
8834: CALL_OW 88
// end ;
8838: LD_VAR 0 1
8842: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
8847: PPUSH
8848: PPUSH
// uc_side := 1 ;
8849: LD_ADDR_OWVAR 20
8853: PUSH
8854: LD_INT 1
8856: ST_TO_ADDR
// uc_nation := 1 ;
8857: LD_ADDR_OWVAR 21
8861: PUSH
8862: LD_INT 1
8864: ST_TO_ADDR
// ResetHc ;
8865: CALL 72074 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8869: LD_INT 0
8871: PPUSH
8872: LD_INT 3
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: CALL_OW 380
// un := CreateHuman ;
8882: LD_ADDR_VAR 0 2
8886: PUSH
8887: CALL_OW 44
8891: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8892: LD_INT 3
8894: PPUSH
8895: LD_INT 1
8897: PPUSH
8898: LD_INT 1
8900: PPUSH
8901: LD_INT 5
8903: PPUSH
8904: LD_INT 90
8906: PPUSH
8907: CALL 38369 0 5
// veh := CreateVehicle ;
8911: LD_ADDR_VAR 0 3
8915: PUSH
8916: CALL_OW 45
8920: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8921: LD_VAR 0 3
8925: PPUSH
8926: LD_INT 2
8928: PPUSH
8929: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8933: LD_VAR 0 3
8937: PPUSH
8938: LD_INT 83
8940: PPUSH
8941: LD_INT 154
8943: PPUSH
8944: LD_INT 10
8946: PPUSH
8947: LD_INT 0
8949: PPUSH
8950: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8954: LD_VAR 0 2
8958: PPUSH
8959: LD_VAR 0 3
8963: PPUSH
8964: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8968: LD_ADDR_VAR 0 4
8972: PUSH
8973: DOUBLE
8974: LD_INT 1
8976: DEC
8977: ST_TO_ADDR
8978: LD_INT 4
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 3
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: PUSH
8992: LD_OWVAR 67
8996: ARRAY
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9047
// begin PrepareHuman ( false , 1 , 3 ) ;
9001: LD_INT 0
9003: PPUSH
9004: LD_INT 1
9006: PPUSH
9007: LD_INT 3
9009: PPUSH
9010: CALL_OW 380
// un := CreateHuman ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: CALL_OW 44
9023: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9024: LD_VAR 0 2
9028: PPUSH
9029: LD_INT 83
9031: PPUSH
9032: LD_INT 154
9034: PPUSH
9035: LD_INT 10
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 50
// end ;
9045: GO 8998
9047: POP
9048: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
9049: LD_INT 1
9051: PPUSH
9052: LD_INT 1
9054: PPUSH
9055: LD_INT 3
9057: PPUSH
9058: CALL_OW 380
// un := CreateHuman ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: CALL_OW 44
9071: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9072: LD_VAR 0 2
9076: PPUSH
9077: LD_INT 83
9079: PPUSH
9080: LD_INT 154
9082: PPUSH
9083: LD_INT 10
9085: PPUSH
9086: LD_INT 0
9088: PPUSH
9089: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9093: LD_VAR 0 2
9097: PPUSH
9098: LD_STRING Dhelp
9100: PPUSH
9101: CALL_OW 94
// ResetHc ;
9105: CALL 72074 0 0
// end ;
9109: LD_VAR 0 1
9113: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9114: LD_EXP 5
9118: IFFALSE 9260
9120: GO 9122
9122: DISABLE
9123: LD_INT 0
9125: PPUSH
9126: PPUSH
9127: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9128: LD_ADDR_VAR 0 2
9132: PUSH
9133: LD_EXP 20
9137: PPUSH
9138: LD_INT 25
9140: PUSH
9141: LD_INT 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 54
9150: PUSH
9151: EMPTY
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PPUSH
9158: CALL_OW 72
9162: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9163: LD_ADDR_VAR 0 3
9167: PUSH
9168: LD_INT 22
9170: PUSH
9171: LD_INT 6
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 30
9180: PUSH
9181: LD_INT 32
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 69
9196: ST_TO_ADDR
// for i := 1 to tmp do
9197: LD_ADDR_VAR 0 1
9201: PUSH
9202: DOUBLE
9203: LD_INT 1
9205: DEC
9206: ST_TO_ADDR
9207: LD_VAR 0 2
9211: PUSH
9212: FOR_TO
9213: IFFALSE 9258
// begin ComExitBuilding ( tmp [ i ] ) ;
9215: LD_VAR 0 2
9219: PUSH
9220: LD_VAR 0 1
9224: ARRAY
9225: PPUSH
9226: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9230: LD_VAR 0 2
9234: PUSH
9235: LD_VAR 0 1
9239: ARRAY
9240: PPUSH
9241: LD_VAR 0 3
9245: PUSH
9246: LD_VAR 0 1
9250: ARRAY
9251: PPUSH
9252: CALL_OW 180
// end ;
9256: GO 9212
9258: POP
9259: POP
// end ;
9260: PPOPN 3
9262: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9263: LD_EXP 5
9267: IFFALSE 9299
9269: PUSH
9270: LD_INT 22
9272: PUSH
9273: LD_INT 2
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 101
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PPUSH
9294: CALL_OW 69
9298: AND
9299: IFFALSE 9445
9301: GO 9303
9303: DISABLE
9304: LD_INT 0
9306: PPUSH
9307: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9308: LD_EXP 16
9312: PPUSH
9313: LD_STRING D9a-Kur-1
9315: PPUSH
9316: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9320: LD_EXP 19
9324: PPUSH
9325: LD_STRING D9a-Bur-1
9327: PPUSH
9328: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9332: LD_EXP 16
9336: PPUSH
9337: LD_STRING D9a-Kur-2
9339: PPUSH
9340: CALL_OW 94
// retreatFromOmicron := true ;
9344: LD_ADDR_EXP 8
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9352: LD_ADDR_VAR 0 2
9356: PUSH
9357: LD_EXP 18
9361: PUSH
9362: LD_EXP 20
9366: PUSH
9367: LD_EXP 21
9371: UNION
9372: PPUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 25
9378: PUSH
9379: LD_INT 1
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 72
9394: UNION
9395: ST_TO_ADDR
// for i in noncombat do
9396: LD_ADDR_VAR 0 1
9400: PUSH
9401: LD_VAR 0 2
9405: PUSH
9406: FOR_IN
9407: IFFALSE 9443
// begin if IsInUnit ( i ) then
9409: LD_VAR 0 1
9413: PPUSH
9414: CALL_OW 310
9418: IFFALSE 9429
// ComExitBuilding ( i ) ;
9420: LD_VAR 0 1
9424: PPUSH
9425: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_INT 4
9436: PPUSH
9437: CALL_OW 173
// end ;
9441: GO 9406
9443: POP
9444: POP
// end ;
9445: PPOPN 2
9447: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9448: LD_OWVAR 1
9452: PUSH
9453: LD_INT 42000
9455: PPUSH
9456: LD_INT 63000
9458: PPUSH
9459: CALL_OW 12
9463: GREATER
9464: IFFALSE 9609
9466: GO 9468
9468: DISABLE
9469: LD_INT 0
9471: PPUSH
// begin uc_side := 4 ;
9472: LD_ADDR_OWVAR 20
9476: PUSH
9477: LD_INT 4
9479: ST_TO_ADDR
// uc_nation := 4 ;
9480: LD_ADDR_OWVAR 21
9484: PUSH
9485: LD_INT 4
9487: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9488: LD_INT 1
9490: PPUSH
9491: LD_INT 4
9493: PPUSH
9494: LD_INT 3
9496: PPUSH
9497: CALL_OW 380
// hc_name :=  ;
9501: LD_ADDR_OWVAR 26
9505: PUSH
9506: LD_STRING 
9508: ST_TO_ADDR
// un := CreateHuman ;
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: CALL_OW 44
9518: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9519: LD_VAR 0 1
9523: PPUSH
9524: LD_INT 161
9526: PPUSH
9527: LD_INT 162
9529: PPUSH
9530: LD_INT 3
9532: PPUSH
9533: LD_INT 1
9535: PPUSH
9536: CALL_OW 50
// ResetHc ;
9540: CALL 72074 0 0
// wait ( 0 0$3 ) ;
9544: LD_INT 105
9546: PPUSH
9547: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9551: LD_VAR 0 1
9555: PPUSH
9556: LD_STRING Dun1
9558: PPUSH
9559: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9563: LD_INT 35
9565: PPUSH
9566: CALL_OW 67
// if IsDead ( un ) then
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 301
9579: IFFALSE 9583
// exit ;
9581: GO 9609
// until See ( 1 , un ) ;
9583: LD_INT 1
9585: PPUSH
9586: LD_VAR 0 1
9590: PPUSH
9591: CALL_OW 292
9595: IFFALSE 9563
// SetSide ( un , 1 ) ;
9597: LD_VAR 0 1
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL_OW 235
// end ;
9609: PPOPN 1
9611: END
// every 0 0$1 trigger tanksCounter >= 20 do
9612: LD_EXP 12
9616: PUSH
9617: LD_INT 20
9619: GREATEREQUAL
9620: IFFALSE 9632
9622: GO 9624
9624: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9625: LD_STRING ACH_PANZERKNACKER
9627: PPUSH
9628: CALL_OW 543
9632: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9633: LD_OWVAR 1
9637: PUSH
9638: LD_INT 94500
9640: PPUSH
9641: LD_INT 109200
9643: PPUSH
9644: CALL_OW 12
9648: GREATER
9649: IFFALSE 9914
9651: GO 9653
9653: DISABLE
9654: LD_INT 0
9656: PPUSH
// begin PrepareArabian ;
9657: CALL 6614 0 0
// uc_side := 4 ;
9661: LD_ADDR_OWVAR 20
9665: PUSH
9666: LD_INT 4
9668: ST_TO_ADDR
// uc_nation := 1 ;
9669: LD_ADDR_OWVAR 21
9673: PUSH
9674: LD_INT 1
9676: ST_TO_ADDR
// ResetHc ;
9677: CALL 72074 0 0
// un := CreateHuman ;
9681: LD_ADDR_VAR 0 1
9685: PUSH
9686: CALL_OW 44
9690: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9691: LD_VAR 0 1
9695: PPUSH
9696: LD_STRING ar_come
9698: PPUSH
9699: CALL_OW 94
// wait ( 0 0$20 ) ;
9703: LD_INT 700
9705: PPUSH
9706: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9710: LD_EXP 15
9714: PPUSH
9715: LD_STRING DR-Back
9717: PPUSH
9718: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9722: LD_STRING target3
9724: PPUSH
9725: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9729: LD_INT 10
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9739: LD_INT 35
9741: PPUSH
9742: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9746: LD_EXP 14
9750: PPUSH
9751: LD_INT 10
9753: PPUSH
9754: CALL_OW 308
9758: IFTRUE 9779
9760: PUSH
9761: LD_INT 10
9763: PPUSH
9764: LD_INT 22
9766: PUSH
9767: LD_INT 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PPUSH
9774: CALL_OW 70
9778: OR
9779: IFFALSE 9739
// SayRadio ( Harrison , you_win ) ;
9781: LD_EXP 15
9785: PPUSH
9786: LD_STRING you_win
9788: PPUSH
9789: CALL_OW 94
// AddMedal ( med , 1 ) ;
9793: LD_STRING med
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9803: LD_EXP 11
9807: PUSH
9808: LD_INT 27
9810: PUSH
9811: LD_INT 32
9813: PUSH
9814: LD_INT 36
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: LD_OWVAR 67
9826: ARRAY
9827: GREATER
9828: IFFALSE 9842
// AddMedal ( ru , 1 ) else
9830: LD_STRING ru
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: CALL_OW 101
9840: GO 9853
// AddMedal ( ru , - 1 ) ;
9842: LD_STRING ru
9844: PPUSH
9845: LD_INT 1
9847: NEG
9848: PPUSH
9849: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9853: LD_EXP 10
9857: PUSH
9858: LD_INT 4
9860: PUSH
9861: LD_INT 3
9863: PUSH
9864: LD_INT 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: LD_OWVAR 67
9876: ARRAY
9877: LESS
9878: IFFALSE 9892
// AddMedal ( pep , 1 ) else
9880: LD_STRING pep
9882: PPUSH
9883: LD_INT 1
9885: PPUSH
9886: CALL_OW 101
9890: GO 9903
// AddMedal ( pep , - 1 ) ;
9892: LD_STRING pep
9894: PPUSH
9895: LD_INT 1
9897: NEG
9898: PPUSH
9899: CALL_OW 101
// GiveMedals ( MAIN ) ;
9903: LD_STRING MAIN
9905: PPUSH
9906: CALL_OW 102
// YouWin ;
9910: CALL_OW 103
// end ; end_of_file
9914: PPOPN 1
9916: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL 10789 0 1
// if un = Sikorski then
9926: LD_VAR 0 1
9930: PUSH
9931: LD_EXP 14
9935: EQUAL
9936: IFFALSE 9945
// YouLost ( sik ) ;
9938: LD_STRING sik
9940: PPUSH
9941: CALL_OW 104
// if un in russianOmicronAttackers then
9945: LD_VAR 0 1
9949: PUSH
9950: LD_EXP 24
9954: IN
9955: IFFALSE 9973
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9957: LD_ADDR_EXP 24
9961: PUSH
9962: LD_EXP 24
9966: PUSH
9967: LD_VAR 0 1
9971: DIFF
9972: ST_TO_ADDR
// if un in russianCargo then
9973: LD_VAR 0 1
9977: PUSH
9978: LD_EXP 25
9982: IN
9983: IFFALSE 10001
// russianCargo := russianCargo diff un ;
9985: LD_ADDR_EXP 25
9989: PUSH
9990: LD_EXP 25
9994: PUSH
9995: LD_VAR 0 1
9999: DIFF
10000: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
10001: LD_VAR 0 1
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 3
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 34
10018: PUSH
10019: LD_INT 51
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PPUSH
10030: CALL_OW 69
10034: IN
10035: IFFALSE 10044
// ProduceNew ( 1 ) ;
10037: LD_INT 1
10039: PPUSH
10040: CALL 4717 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 255
10053: PUSH
10054: LD_INT 1
10056: PUSH
10057: LD_INT 4
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: IN
10064: IFFALSE 10081
10066: PUSH
10067: LD_VAR 0 1
10071: PPUSH
10072: CALL_OW 247
10076: PUSH
10077: LD_INT 1
10079: EQUAL
10080: AND
10081: IFFALSE 10098
10083: PUSH
10084: LD_VAR 0 1
10088: PPUSH
10089: CALL_OW 248
10093: PUSH
10094: LD_INT 1
10096: EQUAL
10097: AND
10098: IFFALSE 10114
// usLoseCounter := usLoseCounter + 1 ;
10100: LD_ADDR_EXP 10
10104: PUSH
10105: LD_EXP 10
10109: PUSH
10110: LD_INT 1
10112: PLUS
10113: ST_TO_ADDR
// end ;
10114: PPOPN 1
10116: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10117: LD_VAR 0 1
10121: PPUSH
10122: LD_VAR 0 2
10126: PPUSH
10127: CALL 10847 0 2
// if GetSide ( factory ) <> 3 then
10131: LD_VAR 0 2
10135: PPUSH
10136: CALL_OW 255
10140: PUSH
10141: LD_INT 3
10143: NONEQUAL
10144: IFFALSE 10148
// exit ;
10146: GO 10210
// if GetWeapon ( veh ) = ru_cargo_bay then
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 264
10157: PUSH
10158: LD_INT 51
10160: EQUAL
10161: IFFALSE 10165
// exit ;
10163: GO 10210
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10165: LD_ADDR_EXP 24
10169: PUSH
10170: LD_EXP 24
10174: PUSH
10175: LD_VAR 0 1
10179: PUSH
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL_OW 310
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: UNION
10194: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10195: LD_VAR 0 1
10199: PPUSH
10200: LD_INT 71
10202: PPUSH
10203: LD_INT 37
10205: PPUSH
10206: CALL_OW 174
// end ;
10210: PPOPN 2
10212: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10213: LD_VAR 0 2
10217: PUSH
10218: LD_EXP 24
10222: IN
10223: IFFALSE 10241
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10225: LD_ADDR_EXP 24
10229: PUSH
10230: LD_EXP 24
10234: PUSH
10235: LD_VAR 0 2
10239: DIFF
10240: ST_TO_ADDR
// if oldId in russianCargo then
10241: LD_VAR 0 2
10245: PUSH
10246: LD_EXP 25
10250: IN
10251: IFFALSE 10269
// russianCargo := russianCargo diff oldId ;
10253: LD_ADDR_EXP 25
10257: PUSH
10258: LD_EXP 25
10262: PUSH
10263: LD_VAR 0 2
10267: DIFF
10268: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10269: LD_VAR 0 1
10273: PUSH
10274: LD_EXP 24
10278: IN
10279: IFFALSE 10297
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10281: LD_ADDR_EXP 24
10285: PUSH
10286: LD_EXP 24
10290: PUSH
10291: LD_VAR 0 1
10295: DIFF
10296: ST_TO_ADDR
// if newId in russianCargo then
10297: LD_VAR 0 1
10301: PUSH
10302: LD_EXP 25
10306: IN
10307: IFFALSE 10325
// russianCargo := russianCargo diff newId ;
10309: LD_ADDR_EXP 25
10313: PUSH
10314: LD_EXP 25
10318: PUSH
10319: LD_VAR 0 1
10323: DIFF
10324: ST_TO_ADDR
// end ;
10325: PPOPN 4
10327: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10328: LD_VAR 0 1
10332: PPUSH
10333: LD_VAR 0 2
10337: PPUSH
10338: LD_VAR 0 3
10342: PPUSH
10343: CALL 10823 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10347: LD_VAR 0 2
10351: PUSH
10352: LD_INT 1
10354: PUSH
10355: LD_INT 4
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: IN
10362: IFFALSE 10386
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// ruLoseCounter := ruLoseCounter + 1 ;
10388: LD_ADDR_EXP 11
10392: PUSH
10393: LD_EXP 11
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10402: LD_VAR 0 2
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: LD_INT 4
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: IN
10417: IFFALSE 10434
10419: PUSH
10420: LD_VAR 0 1
10424: PPUSH
10425: CALL_OW 247
10429: PUSH
10430: LD_INT 2
10432: EQUAL
10433: AND
10434: IFFALSE 10458
10436: PUSH
10437: LD_VAR 0 1
10441: PPUSH
10442: CALL_OW 255
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: LD_INT 6
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: IN
10457: AND
10458: IFFALSE 10474
// tanksCounter := tanksCounter + 1 ;
10460: LD_ADDR_EXP 12
10464: PUSH
10465: LD_EXP 12
10469: PUSH
10470: LD_INT 1
10472: PLUS
10473: ST_TO_ADDR
// end ;
10474: PPOPN 3
10476: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10477: LD_VAR 0 1
10481: PPUSH
10482: CALL_OW 255
10486: PUSH
10487: LD_INT 3
10489: PUSH
10490: LD_INT 6
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: IN
10497: IFFALSE 10650
// begin ComRepairVehicle ( driver , veh ) ;
10499: LD_VAR 0 1
10503: PPUSH
10504: LD_VAR 0 2
10508: PPUSH
10509: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10513: LD_INT 35
10515: PPUSH
10516: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10520: LD_VAR 0 2
10524: PPUSH
10525: CALL_OW 301
10529: IFTRUE 10542
10531: PUSH
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 301
10541: OR
10542: IFTRUE 10559
10544: PUSH
10545: LD_VAR 0 2
10549: PPUSH
10550: CALL_OW 256
10554: PUSH
10555: LD_INT 250
10557: GREATER
10558: OR
10559: IFFALSE 10513
// if GetLives ( veh ) > 250 then
10561: LD_VAR 0 2
10565: PPUSH
10566: CALL_OW 256
10570: PUSH
10571: LD_INT 250
10573: GREATER
10574: IFFALSE 10650
// begin ComEnterUnit ( driver , veh ) ;
10576: LD_VAR 0 1
10580: PPUSH
10581: LD_VAR 0 2
10585: PPUSH
10586: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 71
10597: PPUSH
10598: LD_INT 29
10600: PPUSH
10601: CALL_OW 171
// SetTag ( veh , 1 ) ;
10605: LD_VAR 0 2
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 109
// if not veh in russianOmicronAttackers then
10617: LD_VAR 0 2
10621: PUSH
10622: LD_EXP 24
10626: IN
10627: NOT
10628: IFFALSE 10650
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10630: LD_ADDR_EXP 24
10634: PUSH
10635: LD_EXP 24
10639: PPUSH
10640: LD_VAR 0 2
10644: PPUSH
10645: CALL 71549 0 2
10649: ST_TO_ADDR
// end ; end ; end ;
10650: PPOPN 4
10652: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10653: LD_VAR 0 1
10657: PPUSH
10658: CALL 10831 0 1
// end ; end_of_file
10662: PPOPN 1
10664: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10665: LD_EXP 9
10669: IFFALSE 10704
10671: PUSH
10672: LD_INT 6
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 287
10682: PUSH
10683: LD_INT 18
10685: PUSH
10686: LD_INT 15
10688: PUSH
10689: LD_INT 12
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: LD_OWVAR 67
10701: ARRAY
10702: LESS
10703: AND
10704: IFFALSE 10746
10706: GO 10708
10708: DISABLE
// begin enable ;
10709: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10710: LD_INT 350
10712: PPUSH
10713: LD_INT 1050
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10725: LD_INT 2
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: PPUSH
10736: LD_INT 6
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 55
// end ;
10746: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10747: LD_INT 7
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: CALL_OW 287
10757: PUSH
10758: LD_INT 5
10760: LESS
10761: IFFALSE 10788
10763: GO 10765
10765: DISABLE
// begin enable ;
10766: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10767: LD_INT 2
10769: PPUSH
10770: LD_INT 5
10772: PPUSH
10773: CALL_OW 12
10777: PPUSH
10778: LD_INT 7
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: CALL_OW 55
// end ; end_of_file end_of_file
10788: END
// export function SOS_UnitDestroyed ( un ) ; begin
10789: LD_INT 0
10791: PPUSH
// ComRadiation ( un ) ;
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL 11959 0 1
// end ;
10801: LD_VAR 0 2
10805: RET
// export function SOS_UnitKamikazed ( un ) ; begin
10806: LD_INT 0
10808: PPUSH
// ComRadiation ( un ) ;
10809: LD_VAR 0 1
10813: PPUSH
10814: CALL 11959 0 1
// end ;
10818: LD_VAR 0 2
10822: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10823: LD_INT 0
10825: PPUSH
// end ;
10826: LD_VAR 0 4
10830: RET
// export function SOS_Command ( cmd ) ; begin
10831: LD_INT 0
10833: PPUSH
// end ;
10834: LD_VAR 0 2
10838: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10839: LD_INT 0
10841: PPUSH
// end ;
10842: LD_VAR 0 6
10846: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
10847: LD_INT 0
10849: PPUSH
10850: PPUSH
10851: PPUSH
10852: PPUSH
10853: PPUSH
// if not vehicle or not factory then
10854: LD_VAR 0 1
10858: NOT
10859: IFTRUE 10868
10861: PUSH
10862: LD_VAR 0 2
10866: NOT
10867: OR
10868: IFFALSE 10872
// exit ;
10870: GO 11534
// weapon := GetWeapon ( vehicle ) ;
10872: LD_ADDR_VAR 0 7
10876: PUSH
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 264
10886: ST_TO_ADDR
// if weapon = ar_miner then
10887: LD_VAR 0 7
10891: PUSH
10892: LD_INT 81
10894: EQUAL
10895: IFFALSE 10952
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
10897: LD_ADDR_EXP 33
10901: PUSH
10902: LD_EXP 33
10906: PPUSH
10907: LD_EXP 33
10911: PUSH
10912: LD_INT 1
10914: PLUS
10915: PPUSH
10916: LD_VAR 0 1
10920: PPUSH
10921: CALL_OW 1
10925: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10926: LD_ADDR_EXP 34
10930: PUSH
10931: LD_EXP 34
10935: PPUSH
10936: LD_EXP 34
10940: PUSH
10941: LD_INT 1
10943: PLUS
10944: PPUSH
10945: EMPTY
10946: PPUSH
10947: CALL_OW 1
10951: ST_TO_ADDR
// end ; if not factoryWaypoints then
10952: LD_EXP 95
10956: NOT
10957: IFFALSE 10961
// exit ;
10959: GO 11534
// for i := 1 to Count ( factoryWaypoints ) do
10961: LD_ADDR_VAR 0 4
10965: PUSH
10966: DOUBLE
10967: LD_INT 1
10969: DEC
10970: ST_TO_ADDR
10971: LD_EXP 95
10975: PPUSH
10976: CALL 35573 0 1
10980: PUSH
10981: FOR_TO
10982: IFFALSE 11532
// if factoryWaypoints [ i ] [ 2 ] = factory then
10984: LD_EXP 95
10988: PUSH
10989: LD_VAR 0 4
10993: ARRAY
10994: PUSH
10995: LD_INT 2
10997: ARRAY
10998: PUSH
10999: LD_VAR 0 2
11003: EQUAL
11004: IFFALSE 11530
// begin if GetControl ( vehicle ) = control_manual then
11006: LD_VAR 0 1
11010: PPUSH
11011: CALL_OW 263
11015: PUSH
11016: LD_INT 1
11018: EQUAL
11019: IFFALSE 11383
// begin driver := IsDrivenBy ( vehicle ) ;
11021: LD_ADDR_VAR 0 5
11025: PUSH
11026: LD_VAR 0 1
11030: PPUSH
11031: CALL_OW 311
11035: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
11036: LD_VAR 0 5
11040: PUSH
11041: LD_EXP 96
11045: IN
11046: IFTRUE 11060
11048: PUSH
11049: LD_VAR 0 1
11053: PUSH
11054: LD_EXP 96
11058: IN
11059: OR
11060: IFFALSE 11066
// exit ;
11062: POP
11063: POP
11064: GO 11534
// if not HasTask ( driver ) then
11066: LD_VAR 0 5
11070: PPUSH
11071: CALL_OW 314
11075: NOT
11076: IFFALSE 11381
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
11078: LD_ADDR_EXP 96
11082: PUSH
11083: LD_EXP 96
11087: PPUSH
11088: LD_VAR 0 5
11092: PPUSH
11093: CALL 71549 0 2
11097: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
11098: LD_ADDR_EXP 96
11102: PUSH
11103: LD_EXP 96
11107: PPUSH
11108: LD_VAR 0 1
11112: PPUSH
11113: CALL 71549 0 2
11117: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11118: LD_ADDR_VAR 0 6
11122: PUSH
11123: LD_EXP 95
11127: PUSH
11128: LD_VAR 0 4
11132: ARRAY
11133: PUSH
11134: LD_INT 3
11136: ARRAY
11137: PPUSH
11138: LD_EXP 95
11142: PUSH
11143: LD_VAR 0 4
11147: ARRAY
11148: PUSH
11149: LD_INT 4
11151: ARRAY
11152: PPUSH
11153: CALL_OW 428
11157: ST_TO_ADDR
// if hex then
11158: LD_VAR 0 6
11162: IFFALSE 11180
// ComMoveUnit ( driver , hex ) else
11164: LD_VAR 0 5
11168: PPUSH
11169: LD_VAR 0 6
11173: PPUSH
11174: CALL_OW 112
11178: GO 11264
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
11180: LD_VAR 0 1
11184: PPUSH
11185: LD_EXP 95
11189: PUSH
11190: LD_VAR 0 4
11194: ARRAY
11195: PUSH
11196: LD_INT 3
11198: ARRAY
11199: PPUSH
11200: LD_EXP 95
11204: PUSH
11205: LD_VAR 0 4
11209: ARRAY
11210: PUSH
11211: LD_INT 4
11213: ARRAY
11214: PPUSH
11215: CALL_OW 297
11219: PUSH
11220: LD_INT 0
11222: GREATER
11223: IFFALSE 11264
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11225: LD_VAR 0 5
11229: PPUSH
11230: LD_EXP 95
11234: PUSH
11235: LD_VAR 0 4
11239: ARRAY
11240: PUSH
11241: LD_INT 3
11243: ARRAY
11244: PPUSH
11245: LD_EXP 95
11249: PUSH
11250: LD_VAR 0 4
11254: ARRAY
11255: PUSH
11256: LD_INT 4
11258: ARRAY
11259: PPUSH
11260: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11264: LD_VAR 0 5
11268: PPUSH
11269: CALL_OW 181
// if Multiplayer then
11273: LD_OWVAR 4
11277: IFFALSE 11326
// begin repeat wait ( 10 ) ;
11279: LD_INT 10
11281: PPUSH
11282: CALL_OW 67
// until not IsInUnit ( driver ) ;
11286: LD_VAR 0 5
11290: PPUSH
11291: CALL_OW 310
11295: NOT
11296: IFFALSE 11279
// if not HasTask ( driver ) then
11298: LD_VAR 0 5
11302: PPUSH
11303: CALL_OW 314
11307: NOT
11308: IFFALSE 11324
// ComEnterUnit ( driver , factory ) ;
11310: LD_VAR 0 5
11314: PPUSH
11315: LD_VAR 0 2
11319: PPUSH
11320: CALL_OW 120
// end else
11324: GO 11340
// AddComEnterUnit ( driver , factory ) ;
11326: LD_VAR 0 5
11330: PPUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL_OW 180
// wait ( 0 0$1 ) ;
11340: LD_INT 35
11342: PPUSH
11343: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
11347: LD_ADDR_EXP 96
11351: PUSH
11352: LD_EXP 96
11356: PUSH
11357: LD_VAR 0 5
11361: DIFF
11362: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
11363: LD_ADDR_EXP 96
11367: PUSH
11368: LD_EXP 96
11372: PUSH
11373: LD_VAR 0 1
11377: DIFF
11378: ST_TO_ADDR
// break ;
11379: GO 11532
// end ; end else
11381: GO 11530
// if GetControl ( vehicle ) = control_remote then
11383: LD_VAR 0 1
11387: PPUSH
11388: CALL_OW 263
11392: PUSH
11393: LD_INT 2
11395: EQUAL
11396: IFFALSE 11482
// begin wait ( 0 0$2 ) ;
11398: LD_INT 70
11400: PPUSH
11401: CALL_OW 67
// repeat wait ( 10 ) ;
11405: LD_INT 10
11407: PPUSH
11408: CALL_OW 67
// Connect ( vehicle ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL 41851 0 1
// until IsControledBy ( vehicle ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: CALL_OW 312
11430: IFFALSE 11405
// wait ( 10 ) ;
11432: LD_INT 10
11434: PPUSH
11435: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11439: LD_VAR 0 1
11443: PPUSH
11444: LD_EXP 95
11448: PUSH
11449: LD_VAR 0 4
11453: ARRAY
11454: PUSH
11455: LD_INT 3
11457: ARRAY
11458: PPUSH
11459: LD_EXP 95
11463: PUSH
11464: LD_VAR 0 4
11468: ARRAY
11469: PUSH
11470: LD_INT 4
11472: ARRAY
11473: PPUSH
11474: CALL_OW 111
// break ;
11478: GO 11532
// end else
11480: GO 11530
// begin wait ( 0 0$3 ) ;
11482: LD_INT 105
11484: PPUSH
11485: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11489: LD_VAR 0 1
11493: PPUSH
11494: LD_EXP 95
11498: PUSH
11499: LD_VAR 0 4
11503: ARRAY
11504: PUSH
11505: LD_INT 3
11507: ARRAY
11508: PPUSH
11509: LD_EXP 95
11513: PUSH
11514: LD_VAR 0 4
11518: ARRAY
11519: PUSH
11520: LD_INT 4
11522: ARRAY
11523: PPUSH
11524: CALL_OW 111
// break ;
11528: GO 11532
// end ; end ;
11530: GO 10981
11532: POP
11533: POP
// end ;
11534: LD_VAR 0 3
11538: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11539: LD_INT 0
11541: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11542: LD_VAR 0 1
11546: PUSH
11547: LD_INT 250
11549: EQUAL
11550: IFFALSE 11567
11552: PUSH
11553: LD_VAR 0 2
11557: PPUSH
11558: CALL_OW 264
11562: PUSH
11563: LD_INT 81
11565: EQUAL
11566: AND
11567: IFFALSE 11588
// MinerPlaceMine ( unit , x , y ) ;
11569: LD_VAR 0 2
11573: PPUSH
11574: LD_VAR 0 4
11578: PPUSH
11579: LD_VAR 0 5
11583: PPUSH
11584: CALL 14934 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11588: LD_VAR 0 1
11592: PUSH
11593: LD_INT 251
11595: EQUAL
11596: IFFALSE 11613
11598: PUSH
11599: LD_VAR 0 2
11603: PPUSH
11604: CALL_OW 264
11608: PUSH
11609: LD_INT 81
11611: EQUAL
11612: AND
11613: IFFALSE 11634
// MinerDetonateMine ( unit , x , y ) ;
11615: LD_VAR 0 2
11619: PPUSH
11620: LD_VAR 0 4
11624: PPUSH
11625: LD_VAR 0 5
11629: PPUSH
11630: CALL 15341 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11634: LD_VAR 0 1
11638: PUSH
11639: LD_INT 252
11641: EQUAL
11642: IFFALSE 11659
11644: PUSH
11645: LD_VAR 0 2
11649: PPUSH
11650: CALL_OW 264
11654: PUSH
11655: LD_INT 81
11657: EQUAL
11658: AND
11659: IFFALSE 11680
// MinerCreateMinefield ( unit , x , y ) ;
11661: LD_VAR 0 2
11665: PPUSH
11666: LD_VAR 0 4
11670: PPUSH
11671: LD_VAR 0 5
11675: PPUSH
11676: CALL 15573 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11680: LD_VAR 0 1
11684: PUSH
11685: LD_INT 253
11687: EQUAL
11688: IFFALSE 11705
11690: PUSH
11691: LD_VAR 0 2
11695: PPUSH
11696: CALL_OW 257
11700: PUSH
11701: LD_INT 5
11703: EQUAL
11704: AND
11705: IFFALSE 11726
// ComBinocular ( unit , x , y ) ;
11707: LD_VAR 0 2
11711: PPUSH
11712: LD_VAR 0 4
11716: PPUSH
11717: LD_VAR 0 5
11721: PPUSH
11722: CALL 15948 0 3
// if selectedUnit then
11726: LD_VAR 0 3
11730: IFFALSE 11790
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11732: LD_VAR 0 1
11736: PUSH
11737: LD_INT 254
11739: EQUAL
11740: IFFALSE 11757
11742: PUSH
11743: LD_VAR 0 2
11747: PPUSH
11748: CALL_OW 264
11752: PUSH
11753: LD_INT 99
11755: EQUAL
11756: AND
11757: IFFALSE 11774
11759: PUSH
11760: LD_VAR 0 3
11764: PPUSH
11765: CALL_OW 263
11769: PUSH
11770: LD_INT 3
11772: EQUAL
11773: AND
11774: IFFALSE 11790
// HackDestroyVehicle ( unit , selectedUnit ) ;
11776: LD_VAR 0 2
11780: PPUSH
11781: LD_VAR 0 3
11785: PPUSH
11786: CALL 14124 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11790: LD_VAR 0 1
11794: PUSH
11795: LD_INT 255
11797: EQUAL
11798: IFFALSE 11822
11800: PUSH
11801: LD_VAR 0 2
11805: PPUSH
11806: CALL_OW 264
11810: PUSH
11811: LD_INT 14
11813: PUSH
11814: LD_INT 53
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: IN
11821: AND
11822: IFFALSE 11840
11824: PUSH
11825: LD_VAR 0 4
11829: PPUSH
11830: LD_VAR 0 5
11834: PPUSH
11835: CALL_OW 488
11839: AND
11840: IFFALSE 11864
// CutTreeXYR ( unit , x , y , 12 ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_VAR 0 4
11851: PPUSH
11852: LD_VAR 0 5
11856: PPUSH
11857: LD_INT 12
11859: PPUSH
11860: CALL 12055 0 4
// if cmd = 256 then
11864: LD_VAR 0 1
11868: PUSH
11869: LD_INT 256
11871: EQUAL
11872: IFFALSE 11893
// SetFactoryWaypoint ( unit , x , y ) ;
11874: LD_VAR 0 2
11878: PPUSH
11879: LD_VAR 0 4
11883: PPUSH
11884: LD_VAR 0 5
11888: PPUSH
11889: CALL 31894 0 3
// if cmd = 257 then
11893: LD_VAR 0 1
11897: PUSH
11898: LD_INT 257
11900: EQUAL
11901: IFFALSE 11922
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11903: LD_VAR 0 2
11907: PPUSH
11908: LD_VAR 0 4
11912: PPUSH
11913: LD_VAR 0 5
11917: PPUSH
11918: CALL 32390 0 3
// if cmd = 258 then
11922: LD_VAR 0 1
11926: PUSH
11927: LD_INT 258
11929: EQUAL
11930: IFFALSE 11954
// BurnTreeXYR ( unit , x , y , 8 ) ;
11932: LD_VAR 0 2
11936: PPUSH
11937: LD_VAR 0 4
11941: PPUSH
11942: LD_VAR 0 5
11946: PPUSH
11947: LD_INT 8
11949: PPUSH
11950: CALL 12477 0 4
// end ;
11954: LD_VAR 0 6
11958: RET
// export function ComRadiation ( un ) ; var eff ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
11963: LD_VAR 0 1
11967: PPUSH
11968: CALL_OW 264
11972: PUSH
11973: LD_INT 91
11975: NONEQUAL
11976: IFFALSE 11980
// exit ;
11978: GO 12050
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
11980: LD_INT 68
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 255
11992: PPUSH
11993: CALL_OW 321
11997: PUSH
11998: LD_INT 2
12000: EQUAL
12001: IFFALSE 12013
// eff := 50 else
12003: LD_ADDR_VAR 0 3
12007: PUSH
12008: LD_INT 50
12010: ST_TO_ADDR
12011: GO 12021
// eff := 25 ;
12013: LD_ADDR_VAR 0 3
12017: PUSH
12018: LD_INT 25
12020: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 250
12030: PPUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: CALL_OW 251
12040: PPUSH
12041: LD_VAR 0 3
12045: PPUSH
12046: CALL_OW 495
// end ;
12050: LD_VAR 0 2
12054: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12055: LD_INT 0
12057: PPUSH
12058: PPUSH
12059: PPUSH
12060: PPUSH
12061: PPUSH
12062: PPUSH
12063: PPUSH
12064: PPUSH
12065: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
12066: LD_VAR 0 1
12070: PPUSH
12071: CALL_OW 302
12075: NOT
12076: IFTRUE 12095
12078: PUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 488
12093: NOT
12094: OR
12095: IFTRUE 12104
12097: PUSH
12098: LD_VAR 0 4
12102: NOT
12103: OR
12104: IFFALSE 12108
// exit ;
12106: GO 12472
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 437
12117: PPUSH
12118: CALL 35573 0 1
12122: PUSH
12123: LD_INT 10
12125: GREATER
12126: IFFALSE 12130
// exit ;
12128: GO 12472
// list := [ ] ;
12130: LD_ADDR_VAR 0 13
12134: PUSH
12135: EMPTY
12136: ST_TO_ADDR
// if x - r < 0 then
12137: LD_VAR 0 2
12141: PUSH
12142: LD_VAR 0 4
12146: MINUS
12147: PUSH
12148: LD_INT 0
12150: LESS
12151: IFFALSE 12163
// min_x := 0 else
12153: LD_ADDR_VAR 0 7
12157: PUSH
12158: LD_INT 0
12160: ST_TO_ADDR
12161: GO 12179
// min_x := x - r ;
12163: LD_ADDR_VAR 0 7
12167: PUSH
12168: LD_VAR 0 2
12172: PUSH
12173: LD_VAR 0 4
12177: MINUS
12178: ST_TO_ADDR
// if y - r < 0 then
12179: LD_VAR 0 3
12183: PUSH
12184: LD_VAR 0 4
12188: MINUS
12189: PUSH
12190: LD_INT 0
12192: LESS
12193: IFFALSE 12205
// min_y := 0 else
12195: LD_ADDR_VAR 0 8
12199: PUSH
12200: LD_INT 0
12202: ST_TO_ADDR
12203: GO 12221
// min_y := y - r ;
12205: LD_ADDR_VAR 0 8
12209: PUSH
12210: LD_VAR 0 3
12214: PUSH
12215: LD_VAR 0 4
12219: MINUS
12220: ST_TO_ADDR
// max_x := x + r ;
12221: LD_ADDR_VAR 0 9
12225: PUSH
12226: LD_VAR 0 2
12230: PUSH
12231: LD_VAR 0 4
12235: PLUS
12236: ST_TO_ADDR
// max_y := y + r ;
12237: LD_ADDR_VAR 0 10
12241: PUSH
12242: LD_VAR 0 3
12246: PUSH
12247: LD_VAR 0 4
12251: PLUS
12252: ST_TO_ADDR
// for _x = min_x to max_x do
12253: LD_ADDR_VAR 0 11
12257: PUSH
12258: DOUBLE
12259: LD_VAR 0 7
12263: DEC
12264: ST_TO_ADDR
12265: LD_VAR 0 9
12269: PUSH
12270: FOR_TO
12271: IFFALSE 12390
// for _y = min_y to max_y do
12273: LD_ADDR_VAR 0 12
12277: PUSH
12278: DOUBLE
12279: LD_VAR 0 8
12283: DEC
12284: ST_TO_ADDR
12285: LD_VAR 0 10
12289: PUSH
12290: FOR_TO
12291: IFFALSE 12386
// begin if not ValidHex ( _x , _y ) then
12293: LD_VAR 0 11
12297: PPUSH
12298: LD_VAR 0 12
12302: PPUSH
12303: CALL_OW 488
12307: NOT
12308: IFFALSE 12312
// continue ;
12310: GO 12290
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12312: LD_VAR 0 11
12316: PPUSH
12317: LD_VAR 0 12
12321: PPUSH
12322: CALL_OW 351
12326: IFFALSE 12344
12328: PUSH
12329: LD_VAR 0 11
12333: PPUSH
12334: LD_VAR 0 12
12338: PPUSH
12339: CALL_OW 554
12343: AND
12344: IFFALSE 12384
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12346: LD_ADDR_VAR 0 13
12350: PUSH
12351: LD_VAR 0 13
12355: PPUSH
12356: LD_VAR 0 13
12360: PUSH
12361: LD_INT 1
12363: PLUS
12364: PPUSH
12365: LD_VAR 0 11
12369: PUSH
12370: LD_VAR 0 12
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 2
12383: ST_TO_ADDR
// end ;
12384: GO 12290
12386: POP
12387: POP
12388: GO 12270
12390: POP
12391: POP
// if not list then
12392: LD_VAR 0 13
12396: NOT
12397: IFFALSE 12401
// exit ;
12399: GO 12472
// for i in list do
12401: LD_ADDR_VAR 0 6
12405: PUSH
12406: LD_VAR 0 13
12410: PUSH
12411: FOR_IN
12412: IFFALSE 12470
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12414: LD_VAR 0 1
12418: PPUSH
12419: LD_STRING M
12421: PUSH
12422: LD_VAR 0 6
12426: PUSH
12427: LD_INT 1
12429: ARRAY
12430: PUSH
12431: LD_VAR 0 6
12435: PUSH
12436: LD_INT 2
12438: ARRAY
12439: PUSH
12440: LD_INT 0
12442: PUSH
12443: LD_INT 0
12445: PUSH
12446: LD_INT 0
12448: PUSH
12449: LD_INT 0
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: PUSH
12461: EMPTY
12462: LIST
12463: PPUSH
12464: CALL_OW 447
12468: GO 12411
12470: POP
12471: POP
// end ;
12472: LD_VAR 0 5
12476: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12477: LD_INT 0
12479: PPUSH
12480: PPUSH
12481: PPUSH
12482: PPUSH
12483: PPUSH
12484: PPUSH
12485: PPUSH
12486: PPUSH
12487: PPUSH
12488: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12489: LD_VAR 0 1
12493: PPUSH
12494: CALL_OW 302
12498: NOT
12499: IFTRUE 12518
12501: PUSH
12502: LD_VAR 0 2
12506: PPUSH
12507: LD_VAR 0 3
12511: PPUSH
12512: CALL_OW 488
12516: NOT
12517: OR
12518: IFTRUE 12527
12520: PUSH
12521: LD_VAR 0 4
12525: NOT
12526: OR
12527: IFFALSE 12531
// exit ;
12529: GO 13070
// if Count ( GetTaskList ( flame ) ) > 10 then
12531: LD_VAR 0 1
12535: PPUSH
12536: CALL_OW 437
12540: PPUSH
12541: CALL 35573 0 1
12545: PUSH
12546: LD_INT 10
12548: GREATER
12549: IFFALSE 12553
// exit ;
12551: GO 13070
// list := [ ] ;
12553: LD_ADDR_VAR 0 13
12557: PUSH
12558: EMPTY
12559: ST_TO_ADDR
// if x - r < 0 then
12560: LD_VAR 0 2
12564: PUSH
12565: LD_VAR 0 4
12569: MINUS
12570: PUSH
12571: LD_INT 0
12573: LESS
12574: IFFALSE 12586
// min_x := 0 else
12576: LD_ADDR_VAR 0 7
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
12584: GO 12602
// min_x := x - r ;
12586: LD_ADDR_VAR 0 7
12590: PUSH
12591: LD_VAR 0 2
12595: PUSH
12596: LD_VAR 0 4
12600: MINUS
12601: ST_TO_ADDR
// if y - r < 0 then
12602: LD_VAR 0 3
12606: PUSH
12607: LD_VAR 0 4
12611: MINUS
12612: PUSH
12613: LD_INT 0
12615: LESS
12616: IFFALSE 12628
// min_y := 0 else
12618: LD_ADDR_VAR 0 8
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
12626: GO 12644
// min_y := y - r ;
12628: LD_ADDR_VAR 0 8
12632: PUSH
12633: LD_VAR 0 3
12637: PUSH
12638: LD_VAR 0 4
12642: MINUS
12643: ST_TO_ADDR
// max_x := x + r ;
12644: LD_ADDR_VAR 0 9
12648: PUSH
12649: LD_VAR 0 2
12653: PUSH
12654: LD_VAR 0 4
12658: PLUS
12659: ST_TO_ADDR
// max_y := y + r ;
12660: LD_ADDR_VAR 0 10
12664: PUSH
12665: LD_VAR 0 3
12669: PUSH
12670: LD_VAR 0 4
12674: PLUS
12675: ST_TO_ADDR
// for _x = min_x to max_x do
12676: LD_ADDR_VAR 0 11
12680: PUSH
12681: DOUBLE
12682: LD_VAR 0 7
12686: DEC
12687: ST_TO_ADDR
12688: LD_VAR 0 9
12692: PUSH
12693: FOR_TO
12694: IFFALSE 12813
// for _y = min_y to max_y do
12696: LD_ADDR_VAR 0 12
12700: PUSH
12701: DOUBLE
12702: LD_VAR 0 8
12706: DEC
12707: ST_TO_ADDR
12708: LD_VAR 0 10
12712: PUSH
12713: FOR_TO
12714: IFFALSE 12809
// begin if not ValidHex ( _x , _y ) then
12716: LD_VAR 0 11
12720: PPUSH
12721: LD_VAR 0 12
12725: PPUSH
12726: CALL_OW 488
12730: NOT
12731: IFFALSE 12735
// continue ;
12733: GO 12713
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12735: LD_VAR 0 11
12739: PPUSH
12740: LD_VAR 0 12
12744: PPUSH
12745: CALL_OW 351
12749: IFFALSE 12767
12751: PUSH
12752: LD_VAR 0 11
12756: PPUSH
12757: LD_VAR 0 12
12761: PPUSH
12762: CALL_OW 554
12766: AND
12767: IFFALSE 12807
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12769: LD_ADDR_VAR 0 13
12773: PUSH
12774: LD_VAR 0 13
12778: PPUSH
12779: LD_VAR 0 13
12783: PUSH
12784: LD_INT 1
12786: PLUS
12787: PPUSH
12788: LD_VAR 0 11
12792: PUSH
12793: LD_VAR 0 12
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PPUSH
12802: CALL_OW 2
12806: ST_TO_ADDR
// end ;
12807: GO 12713
12809: POP
12810: POP
12811: GO 12693
12813: POP
12814: POP
// if not list then
12815: LD_VAR 0 13
12819: NOT
12820: IFFALSE 12824
// exit ;
12822: GO 13070
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
12824: LD_ADDR_VAR 0 13
12828: PUSH
12829: LD_VAR 0 1
12833: PPUSH
12834: LD_VAR 0 13
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: CALL 38979 0 4
12849: ST_TO_ADDR
// ComStop ( flame ) ;
12850: LD_VAR 0 1
12854: PPUSH
12855: CALL_OW 141
// for i in list do
12859: LD_ADDR_VAR 0 6
12863: PUSH
12864: LD_VAR 0 13
12868: PUSH
12869: FOR_IN
12870: IFFALSE 12901
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
12872: LD_VAR 0 1
12876: PPUSH
12877: LD_VAR 0 6
12881: PUSH
12882: LD_INT 1
12884: ARRAY
12885: PPUSH
12886: LD_VAR 0 6
12890: PUSH
12891: LD_INT 2
12893: ARRAY
12894: PPUSH
12895: CALL_OW 176
12899: GO 12869
12901: POP
12902: POP
// repeat wait ( 0 0$1 ) ;
12903: LD_INT 35
12905: PPUSH
12906: CALL_OW 67
// task := GetTaskList ( flame ) ;
12910: LD_ADDR_VAR 0 14
12914: PUSH
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 437
12924: ST_TO_ADDR
// if not task then
12925: LD_VAR 0 14
12929: NOT
12930: IFFALSE 12934
// exit ;
12932: GO 13070
// if task [ 1 ] [ 1 ] <> | then
12934: LD_VAR 0 14
12938: PUSH
12939: LD_INT 1
12941: ARRAY
12942: PUSH
12943: LD_INT 1
12945: ARRAY
12946: PUSH
12947: LD_STRING |
12949: NONEQUAL
12950: IFFALSE 12954
// exit ;
12952: GO 13070
// _x := task [ 1 ] [ 2 ] ;
12954: LD_ADDR_VAR 0 11
12958: PUSH
12959: LD_VAR 0 14
12963: PUSH
12964: LD_INT 1
12966: ARRAY
12967: PUSH
12968: LD_INT 2
12970: ARRAY
12971: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
12972: LD_ADDR_VAR 0 12
12976: PUSH
12977: LD_VAR 0 14
12981: PUSH
12982: LD_INT 1
12984: ARRAY
12985: PUSH
12986: LD_INT 3
12988: ARRAY
12989: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
12990: LD_VAR 0 11
12994: PPUSH
12995: LD_VAR 0 12
12999: PPUSH
13000: CALL_OW 351
13004: NOT
13005: IFTRUE 13024
13007: PUSH
13008: LD_VAR 0 11
13012: PPUSH
13013: LD_VAR 0 12
13017: PPUSH
13018: CALL_OW 554
13022: NOT
13023: OR
13024: IFFALSE 13058
// begin task := Delete ( task , 1 ) ;
13026: LD_ADDR_VAR 0 14
13030: PUSH
13031: LD_VAR 0 14
13035: PPUSH
13036: LD_INT 1
13038: PPUSH
13039: CALL_OW 3
13043: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
13044: LD_VAR 0 1
13048: PPUSH
13049: LD_VAR 0 14
13053: PPUSH
13054: CALL_OW 446
// end ; until not HasTask ( flame ) ;
13058: LD_VAR 0 1
13062: PPUSH
13063: CALL_OW 314
13067: NOT
13068: IFFALSE 12903
// end ;
13070: LD_VAR 0 5
13074: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
13075: LD_EXP 26
13079: NOT
13080: IFFALSE 13130
13082: GO 13084
13084: DISABLE
// begin initHack := true ;
13085: LD_ADDR_EXP 26
13089: PUSH
13090: LD_INT 1
13092: ST_TO_ADDR
// hackTanks := [ ] ;
13093: LD_ADDR_EXP 27
13097: PUSH
13098: EMPTY
13099: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
13100: LD_ADDR_EXP 28
13104: PUSH
13105: EMPTY
13106: ST_TO_ADDR
// hackLimit := 3 ;
13107: LD_ADDR_EXP 29
13111: PUSH
13112: LD_INT 3
13114: ST_TO_ADDR
// hackDist := 12 ;
13115: LD_ADDR_EXP 30
13119: PUSH
13120: LD_INT 12
13122: ST_TO_ADDR
// hackCounter := [ ] ;
13123: LD_ADDR_EXP 31
13127: PUSH
13128: EMPTY
13129: ST_TO_ADDR
// end ;
13130: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
13131: LD_EXP 26
13135: IFFALSE 13153
13137: PUSH
13138: LD_INT 34
13140: PUSH
13141: LD_INT 99
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PPUSH
13148: CALL_OW 69
13152: AND
13153: IFFALSE 13406
13155: GO 13157
13157: DISABLE
13158: LD_INT 0
13160: PPUSH
13161: PPUSH
// begin enable ;
13162: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: LD_INT 34
13170: PUSH
13171: LD_INT 99
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PPUSH
13178: CALL_OW 69
13182: PUSH
13183: FOR_IN
13184: IFFALSE 13404
// begin if not i in hackTanks then
13186: LD_VAR 0 1
13190: PUSH
13191: LD_EXP 27
13195: IN
13196: NOT
13197: IFFALSE 13280
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
13199: LD_ADDR_EXP 27
13203: PUSH
13204: LD_EXP 27
13208: PPUSH
13209: LD_EXP 27
13213: PUSH
13214: LD_INT 1
13216: PLUS
13217: PPUSH
13218: LD_VAR 0 1
13222: PPUSH
13223: CALL_OW 1
13227: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
13228: LD_ADDR_EXP 28
13232: PUSH
13233: LD_EXP 28
13237: PPUSH
13238: LD_EXP 28
13242: PUSH
13243: LD_INT 1
13245: PLUS
13246: PPUSH
13247: EMPTY
13248: PPUSH
13249: CALL_OW 1
13253: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
13254: LD_ADDR_EXP 31
13258: PUSH
13259: LD_EXP 31
13263: PPUSH
13264: LD_EXP 31
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PPUSH
13273: EMPTY
13274: PPUSH
13275: CALL_OW 1
13279: ST_TO_ADDR
// end ; if not IsOk ( i ) then
13280: LD_VAR 0 1
13284: PPUSH
13285: CALL_OW 302
13289: NOT
13290: IFFALSE 13303
// begin HackUnlinkAll ( i ) ;
13292: LD_VAR 0 1
13296: PPUSH
13297: CALL 13409 0 1
// continue ;
13301: GO 13183
// end ; HackCheckCapturedStatus ( i ) ;
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL 13854 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
13312: LD_ADDR_VAR 0 2
13316: PUSH
13317: LD_INT 81
13319: PUSH
13320: LD_VAR 0 1
13324: PPUSH
13325: CALL_OW 255
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 33
13336: PUSH
13337: LD_INT 3
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 91
13346: PUSH
13347: LD_VAR 0 1
13351: PUSH
13352: LD_EXP 30
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 50
13364: PUSH
13365: EMPTY
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 69
13378: ST_TO_ADDR
// if not tmp then
13379: LD_VAR 0 2
13383: NOT
13384: IFFALSE 13388
// continue ;
13386: GO 13183
// HackLink ( i , tmp ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: LD_VAR 0 2
13397: PPUSH
13398: CALL 13545 0 2
// end ;
13402: GO 13183
13404: POP
13405: POP
// end ;
13406: PPOPN 2
13408: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
13409: LD_INT 0
13411: PPUSH
13412: PPUSH
13413: PPUSH
// if not hack in hackTanks then
13414: LD_VAR 0 1
13418: PUSH
13419: LD_EXP 27
13423: IN
13424: NOT
13425: IFFALSE 13429
// exit ;
13427: GO 13540
// index := GetElementIndex ( hackTanks , hack ) ;
13429: LD_ADDR_VAR 0 4
13433: PUSH
13434: LD_EXP 27
13438: PPUSH
13439: LD_VAR 0 1
13443: PPUSH
13444: CALL 38274 0 2
13448: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13449: LD_EXP 28
13453: PUSH
13454: LD_VAR 0 4
13458: ARRAY
13459: IFFALSE 13540
// begin for i in hackTanksCaptured [ index ] do
13461: LD_ADDR_VAR 0 3
13465: PUSH
13466: LD_EXP 28
13470: PUSH
13471: LD_VAR 0 4
13475: ARRAY
13476: PUSH
13477: FOR_IN
13478: IFFALSE 13504
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13480: LD_VAR 0 3
13484: PUSH
13485: LD_INT 1
13487: ARRAY
13488: PPUSH
13489: LD_VAR 0 3
13493: PUSH
13494: LD_INT 2
13496: ARRAY
13497: PPUSH
13498: CALL_OW 235
13502: GO 13477
13504: POP
13505: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13506: LD_ADDR_EXP 28
13510: PUSH
13511: LD_EXP 28
13515: PPUSH
13516: LD_VAR 0 4
13520: PPUSH
13521: EMPTY
13522: PPUSH
13523: CALL_OW 1
13527: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13528: LD_VAR 0 1
13532: PPUSH
13533: LD_INT 0
13535: PPUSH
13536: CALL_OW 505
// end ; end ;
13540: LD_VAR 0 2
13544: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13545: LD_INT 0
13547: PPUSH
13548: PPUSH
13549: PPUSH
// if not hack in hackTanks or not vehicles then
13550: LD_VAR 0 1
13554: PUSH
13555: LD_EXP 27
13559: IN
13560: NOT
13561: IFTRUE 13570
13563: PUSH
13564: LD_VAR 0 2
13568: NOT
13569: OR
13570: IFFALSE 13574
// exit ;
13572: GO 13849
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13574: LD_ADDR_VAR 0 2
13578: PUSH
13579: LD_VAR 0 1
13583: PPUSH
13584: LD_VAR 0 2
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL 38926 0 4
13599: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13600: LD_ADDR_VAR 0 5
13604: PUSH
13605: LD_EXP 27
13609: PPUSH
13610: LD_VAR 0 1
13614: PPUSH
13615: CALL 38274 0 2
13619: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13620: LD_EXP 28
13624: PUSH
13625: LD_VAR 0 5
13629: ARRAY
13630: PUSH
13631: LD_EXP 29
13635: LESS
13636: IFFALSE 13825
// begin for i := 1 to vehicles do
13638: LD_ADDR_VAR 0 4
13642: PUSH
13643: DOUBLE
13644: LD_INT 1
13646: DEC
13647: ST_TO_ADDR
13648: LD_VAR 0 2
13652: PUSH
13653: FOR_TO
13654: IFFALSE 13823
// begin if hackTanksCaptured [ index ] = hackLimit then
13656: LD_EXP 28
13660: PUSH
13661: LD_VAR 0 5
13665: ARRAY
13666: PUSH
13667: LD_EXP 29
13671: EQUAL
13672: IFFALSE 13676
// break ;
13674: GO 13823
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13676: LD_ADDR_EXP 31
13680: PUSH
13681: LD_EXP 31
13685: PPUSH
13686: LD_VAR 0 5
13690: PPUSH
13691: LD_EXP 31
13695: PUSH
13696: LD_VAR 0 5
13700: ARRAY
13701: PUSH
13702: LD_INT 1
13704: PLUS
13705: PPUSH
13706: CALL_OW 1
13710: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13711: LD_ADDR_EXP 28
13715: PUSH
13716: LD_EXP 28
13720: PPUSH
13721: LD_VAR 0 5
13725: PUSH
13726: LD_EXP 28
13730: PUSH
13731: LD_VAR 0 5
13735: ARRAY
13736: PUSH
13737: LD_INT 1
13739: PLUS
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PPUSH
13745: LD_VAR 0 2
13749: PUSH
13750: LD_VAR 0 4
13754: ARRAY
13755: PUSH
13756: LD_VAR 0 2
13760: PUSH
13761: LD_VAR 0 4
13765: ARRAY
13766: PPUSH
13767: CALL_OW 255
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL 38491 0 3
13780: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13781: LD_VAR 0 2
13785: PUSH
13786: LD_VAR 0 4
13790: ARRAY
13791: PPUSH
13792: LD_VAR 0 1
13796: PPUSH
13797: CALL_OW 255
13801: PPUSH
13802: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13806: LD_VAR 0 2
13810: PUSH
13811: LD_VAR 0 4
13815: ARRAY
13816: PPUSH
13817: CALL_OW 141
// end ;
13821: GO 13653
13823: POP
13824: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13825: LD_VAR 0 1
13829: PPUSH
13830: LD_EXP 28
13834: PUSH
13835: LD_VAR 0 5
13839: ARRAY
13840: PUSH
13841: LD_INT 0
13843: PLUS
13844: PPUSH
13845: CALL_OW 505
// end ;
13849: LD_VAR 0 3
13853: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13854: LD_INT 0
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// if not hack in hackTanks then
13860: LD_VAR 0 1
13864: PUSH
13865: LD_EXP 27
13869: IN
13870: NOT
13871: IFFALSE 13875
// exit ;
13873: GO 14119
// index := GetElementIndex ( hackTanks , hack ) ;
13875: LD_ADDR_VAR 0 4
13879: PUSH
13880: LD_EXP 27
13884: PPUSH
13885: LD_VAR 0 1
13889: PPUSH
13890: CALL 38274 0 2
13894: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: DOUBLE
13901: LD_EXP 28
13905: PUSH
13906: LD_VAR 0 4
13910: ARRAY
13911: INC
13912: ST_TO_ADDR
13913: LD_INT 1
13915: PUSH
13916: FOR_DOWNTO
13917: IFFALSE 14093
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13919: LD_ADDR_VAR 0 5
13923: PUSH
13924: LD_EXP 28
13928: PUSH
13929: LD_VAR 0 4
13933: ARRAY
13934: PUSH
13935: LD_VAR 0 3
13939: ARRAY
13940: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13941: LD_VAR 0 5
13945: PUSH
13946: LD_INT 1
13948: ARRAY
13949: PPUSH
13950: CALL_OW 302
13954: NOT
13955: IFTRUE 13983
13957: PUSH
13958: LD_VAR 0 5
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PPUSH
13967: CALL_OW 255
13971: PUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 255
13981: NONEQUAL
13982: OR
13983: IFFALSE 14091
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13985: LD_VAR 0 5
13989: PUSH
13990: LD_INT 1
13992: ARRAY
13993: PPUSH
13994: CALL_OW 305
13998: IFFALSE 14026
14000: PUSH
14001: LD_VAR 0 5
14005: PUSH
14006: LD_INT 1
14008: ARRAY
14009: PPUSH
14010: CALL_OW 255
14014: PUSH
14015: LD_VAR 0 1
14019: PPUSH
14020: CALL_OW 255
14024: EQUAL
14025: AND
14026: IFFALSE 14050
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
14028: LD_VAR 0 5
14032: PUSH
14033: LD_INT 1
14035: ARRAY
14036: PPUSH
14037: LD_VAR 0 5
14041: PUSH
14042: LD_INT 2
14044: ARRAY
14045: PPUSH
14046: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
14050: LD_ADDR_EXP 28
14054: PUSH
14055: LD_EXP 28
14059: PPUSH
14060: LD_VAR 0 4
14064: PPUSH
14065: LD_EXP 28
14069: PUSH
14070: LD_VAR 0 4
14074: ARRAY
14075: PPUSH
14076: LD_VAR 0 3
14080: PPUSH
14081: CALL_OW 3
14085: PPUSH
14086: CALL_OW 1
14090: ST_TO_ADDR
// end ; end ;
14091: GO 13916
14093: POP
14094: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14095: LD_VAR 0 1
14099: PPUSH
14100: LD_EXP 28
14104: PUSH
14105: LD_VAR 0 4
14109: ARRAY
14110: PUSH
14111: LD_INT 0
14113: PLUS
14114: PPUSH
14115: CALL_OW 505
// end ;
14119: LD_VAR 0 2
14123: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
14128: PPUSH
14129: PPUSH
// if not hack in hackTanks then
14130: LD_VAR 0 1
14134: PUSH
14135: LD_EXP 27
14139: IN
14140: NOT
14141: IFFALSE 14145
// exit ;
14143: GO 14230
// index := GetElementIndex ( hackTanks , hack ) ;
14145: LD_ADDR_VAR 0 5
14149: PUSH
14150: LD_EXP 27
14154: PPUSH
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL 38274 0 2
14164: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
14165: LD_ADDR_VAR 0 4
14169: PUSH
14170: DOUBLE
14171: LD_INT 1
14173: DEC
14174: ST_TO_ADDR
14175: LD_EXP 28
14179: PUSH
14180: LD_VAR 0 5
14184: ARRAY
14185: PUSH
14186: FOR_TO
14187: IFFALSE 14228
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
14189: LD_EXP 28
14193: PUSH
14194: LD_VAR 0 5
14198: ARRAY
14199: PUSH
14200: LD_VAR 0 4
14204: ARRAY
14205: PUSH
14206: LD_INT 1
14208: ARRAY
14209: PUSH
14210: LD_VAR 0 2
14214: EQUAL
14215: IFFALSE 14226
// KillUnit ( vehicle ) ;
14217: LD_VAR 0 2
14221: PPUSH
14222: CALL_OW 66
14226: GO 14186
14228: POP
14229: POP
// end ;
14230: LD_VAR 0 3
14234: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
14235: LD_EXP 32
14239: NOT
14240: IFFALSE 14373
14242: GO 14244
14244: DISABLE
14245: LD_INT 0
14247: PPUSH
// begin initMiner := true ;
14248: LD_ADDR_EXP 32
14252: PUSH
14253: LD_INT 1
14255: ST_TO_ADDR
// minersList := [ ] ;
14256: LD_ADDR_EXP 33
14260: PUSH
14261: EMPTY
14262: ST_TO_ADDR
// minerMinesList := [ ] ;
14263: LD_ADDR_EXP 34
14267: PUSH
14268: EMPTY
14269: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
14270: LD_ADDR_EXP 35
14274: PUSH
14275: LD_INT 10
14277: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: LD_INT 34
14285: PUSH
14286: LD_INT 81
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: PUSH
14298: FOR_IN
14299: IFFALSE 14371
// begin if not i in minersList then
14301: LD_VAR 0 1
14305: PUSH
14306: LD_EXP 33
14310: IN
14311: NOT
14312: IFFALSE 14369
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
14314: LD_ADDR_EXP 33
14318: PUSH
14319: LD_EXP 33
14323: PPUSH
14324: LD_EXP 33
14328: PUSH
14329: LD_INT 1
14331: PLUS
14332: PPUSH
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 1
14342: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14343: LD_ADDR_EXP 34
14347: PUSH
14348: LD_EXP 34
14352: PPUSH
14353: LD_EXP 34
14357: PUSH
14358: LD_INT 1
14360: PLUS
14361: PPUSH
14362: EMPTY
14363: PPUSH
14364: CALL_OW 1
14368: ST_TO_ADDR
// end end ;
14369: GO 14298
14371: POP
14372: POP
// end ;
14373: PPOPN 1
14375: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
14376: LD_EXP 32
14380: IFFALSE 14411
14382: PUSH
14383: LD_EXP 34
14387: PPUSH
14388: CALL 35573 0 1
14392: IFTRUE 14410
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 81
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PPUSH
14405: CALL_OW 69
14409: OR
14410: AND
14411: IFFALSE 14931
14413: GO 14415
14415: DISABLE
14416: LD_INT 0
14418: PPUSH
14419: PPUSH
14420: PPUSH
14421: PPUSH
// begin enable ;
14422: ENABLE
// for i := minerMinesList downto 1 do
14423: LD_ADDR_VAR 0 1
14427: PUSH
14428: DOUBLE
14429: LD_EXP 34
14433: INC
14434: ST_TO_ADDR
14435: LD_INT 1
14437: PUSH
14438: FOR_DOWNTO
14439: IFFALSE 14929
// begin side := GetSide ( minersList [ i ] ) ;
14441: LD_ADDR_VAR 0 3
14445: PUSH
14446: LD_EXP 33
14450: PUSH
14451: LD_VAR 0 1
14455: ARRAY
14456: PPUSH
14457: CALL_OW 255
14461: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
14462: LD_EXP 33
14466: PUSH
14467: LD_VAR 0 1
14471: ARRAY
14472: PPUSH
14473: CALL_OW 300
14477: IFFALSE 14498
14479: PUSH
14480: LD_VAR 0 3
14484: PUSH
14485: LD_OWVAR 2
14489: PUSH
14490: LD_INT 9
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: IN
14497: AND
14498: IFFALSE 14531
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
14500: LD_EXP 33
14504: PUSH
14505: LD_VAR 0 1
14509: ARRAY
14510: PPUSH
14511: LD_EXP 34
14515: PUSH
14516: LD_VAR 0 1
14520: ARRAY
14521: PPUSH
14522: CALL 35573 0 1
14526: PPUSH
14527: CALL_OW 505
// if not minerMinesList [ i ] then
14531: LD_EXP 34
14535: PUSH
14536: LD_VAR 0 1
14540: ARRAY
14541: NOT
14542: IFFALSE 14546
// continue ;
14544: GO 14438
// for j := minerMinesList [ i ] downto 1 do
14546: LD_ADDR_VAR 0 2
14550: PUSH
14551: DOUBLE
14552: LD_EXP 34
14556: PUSH
14557: LD_VAR 0 1
14561: ARRAY
14562: INC
14563: ST_TO_ADDR
14564: LD_INT 1
14566: PUSH
14567: FOR_DOWNTO
14568: IFFALSE 14925
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
14570: LD_EXP 33
14574: PUSH
14575: LD_VAR 0 1
14579: ARRAY
14580: PPUSH
14581: CALL_OW 301
14585: IFTRUE 14605
14587: PUSH
14588: LD_EXP 33
14592: PUSH
14593: LD_VAR 0 1
14597: ARRAY
14598: PPUSH
14599: CALL_OW 305
14603: NOT
14604: OR
14605: IFFALSE 14696
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14607: LD_EXP 34
14611: PUSH
14612: LD_VAR 0 1
14616: ARRAY
14617: PUSH
14618: LD_VAR 0 2
14622: ARRAY
14623: PUSH
14624: LD_INT 1
14626: ARRAY
14627: PPUSH
14628: LD_EXP 34
14632: PUSH
14633: LD_VAR 0 1
14637: ARRAY
14638: PUSH
14639: LD_VAR 0 2
14643: ARRAY
14644: PUSH
14645: LD_INT 2
14647: ARRAY
14648: PPUSH
14649: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14653: LD_ADDR_EXP 34
14657: PUSH
14658: LD_EXP 34
14662: PPUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_EXP 34
14672: PUSH
14673: LD_VAR 0 1
14677: ARRAY
14678: PPUSH
14679: LD_VAR 0 2
14683: PPUSH
14684: CALL_OW 3
14688: PPUSH
14689: CALL_OW 1
14693: ST_TO_ADDR
// continue ;
14694: GO 14567
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14696: LD_ADDR_VAR 0 4
14700: PUSH
14701: LD_EXP 34
14705: PUSH
14706: LD_VAR 0 1
14710: ARRAY
14711: PUSH
14712: LD_VAR 0 2
14716: ARRAY
14717: PUSH
14718: LD_INT 1
14720: ARRAY
14721: PPUSH
14722: LD_EXP 34
14726: PUSH
14727: LD_VAR 0 1
14731: ARRAY
14732: PUSH
14733: LD_VAR 0 2
14737: ARRAY
14738: PUSH
14739: LD_INT 2
14741: ARRAY
14742: PPUSH
14743: CALL_OW 428
14747: ST_TO_ADDR
// if not tmp then
14748: LD_VAR 0 4
14752: NOT
14753: IFFALSE 14757
// continue ;
14755: GO 14567
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14757: LD_VAR 0 4
14761: PUSH
14762: LD_INT 81
14764: PUSH
14765: LD_VAR 0 3
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: IN
14779: IFFALSE 14829
14781: PUSH
14782: LD_EXP 34
14786: PUSH
14787: LD_VAR 0 1
14791: ARRAY
14792: PUSH
14793: LD_VAR 0 2
14797: ARRAY
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: PPUSH
14803: LD_EXP 34
14807: PUSH
14808: LD_VAR 0 1
14812: ARRAY
14813: PUSH
14814: LD_VAR 0 2
14818: ARRAY
14819: PUSH
14820: LD_INT 2
14822: ARRAY
14823: PPUSH
14824: CALL_OW 458
14828: AND
14829: IFFALSE 14923
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14831: LD_EXP 34
14835: PUSH
14836: LD_VAR 0 1
14840: ARRAY
14841: PUSH
14842: LD_VAR 0 2
14846: ARRAY
14847: PUSH
14848: LD_INT 1
14850: ARRAY
14851: PPUSH
14852: LD_EXP 34
14856: PUSH
14857: LD_VAR 0 1
14861: ARRAY
14862: PUSH
14863: LD_VAR 0 2
14867: ARRAY
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_VAR 0 3
14877: PPUSH
14878: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14882: LD_ADDR_EXP 34
14886: PUSH
14887: LD_EXP 34
14891: PPUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: LD_EXP 34
14901: PUSH
14902: LD_VAR 0 1
14906: ARRAY
14907: PPUSH
14908: LD_VAR 0 2
14912: PPUSH
14913: CALL_OW 3
14917: PPUSH
14918: CALL_OW 1
14922: ST_TO_ADDR
// end ; end ;
14923: GO 14567
14925: POP
14926: POP
// end ;
14927: GO 14438
14929: POP
14930: POP
// end ;
14931: PPOPN 4
14933: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
14934: LD_INT 0
14936: PPUSH
14937: PPUSH
14938: PPUSH
14939: PPUSH
// result := false ;
14940: LD_ADDR_VAR 0 4
14944: PUSH
14945: LD_INT 0
14947: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 264
14957: PUSH
14958: LD_INT 81
14960: EQUAL
14961: NOT
14962: IFFALSE 14966
// exit ;
14964: GO 15336
// side := GetSide ( unit ) ;
14966: LD_ADDR_VAR 0 6
14970: PUSH
14971: LD_VAR 0 1
14975: PPUSH
14976: CALL_OW 255
14980: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
14981: LD_ADDR_VAR 0 5
14985: PUSH
14986: LD_EXP 33
14990: PPUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL 38274 0 2
15000: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
15001: LD_EXP 34
15005: PUSH
15006: LD_VAR 0 5
15010: ARRAY
15011: PUSH
15012: LD_EXP 35
15016: GREATEREQUAL
15017: IFFALSE 15021
// exit ;
15019: GO 15336
// ComMoveXY ( unit , x , y ) ;
15021: LD_VAR 0 1
15025: PPUSH
15026: LD_VAR 0 2
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15040: LD_INT 35
15042: PPUSH
15043: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
15047: LD_VAR 0 1
15051: PPUSH
15052: LD_VAR 0 2
15056: PPUSH
15057: LD_VAR 0 3
15061: PPUSH
15062: CALL 70330 0 3
15066: NOT
15067: IFFALSE 15080
15069: PUSH
15070: LD_VAR 0 1
15074: PPUSH
15075: CALL_OW 314
15079: AND
15080: IFFALSE 15084
// exit ;
15082: GO 15336
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
15084: LD_VAR 0 2
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: CALL_OW 428
15098: PUSH
15099: LD_VAR 0 1
15103: EQUAL
15104: IFFALSE 15118
15106: PUSH
15107: LD_VAR 0 1
15111: PPUSH
15112: CALL_OW 314
15116: NOT
15117: AND
15118: IFFALSE 15040
// if MineAtPos ( x , y ) then
15120: LD_VAR 0 2
15124: PPUSH
15125: LD_VAR 0 3
15129: PPUSH
15130: CALL_OW 458
15134: IFFALSE 15138
// exit ;
15136: GO 15336
// if your_side = side then
15138: LD_OWVAR 2
15142: PUSH
15143: LD_VAR 0 6
15147: EQUAL
15148: IFFALSE 15167
// PlaySoundXY ( x , y , PlantMine ) ;
15150: LD_VAR 0 2
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: LD_STRING PlantMine
15162: PPUSH
15163: CALL_OW 366
// repeat wait ( 1 ) ;
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
15174: LD_VAR 0 2
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: LD_VAR 0 6
15188: PPUSH
15189: LD_INT 0
15191: PPUSH
15192: CALL_OW 454
15196: IFFALSE 15167
// if MineAtPos ( x , y ) then
15198: LD_VAR 0 2
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: CALL_OW 458
15212: IFFALSE 15328
// begin for i in minerMinesList [ index ] do
15214: LD_ADDR_VAR 0 7
15218: PUSH
15219: LD_EXP 34
15223: PUSH
15224: LD_VAR 0 5
15228: ARRAY
15229: PUSH
15230: FOR_IN
15231: IFFALSE 15273
// if i [ 1 ] = x and i [ 2 ] = y then
15233: LD_VAR 0 7
15237: PUSH
15238: LD_INT 1
15240: ARRAY
15241: PUSH
15242: LD_VAR 0 2
15246: EQUAL
15247: IFFALSE 15265
15249: PUSH
15250: LD_VAR 0 7
15254: PUSH
15255: LD_INT 2
15257: ARRAY
15258: PUSH
15259: LD_VAR 0 3
15263: EQUAL
15264: AND
15265: IFFALSE 15271
// exit ;
15267: POP
15268: POP
15269: GO 15336
15271: GO 15230
15273: POP
15274: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
15275: LD_ADDR_EXP 34
15279: PUSH
15280: LD_EXP 34
15284: PPUSH
15285: LD_VAR 0 5
15289: PUSH
15290: LD_EXP 34
15294: PUSH
15295: LD_VAR 0 5
15299: ARRAY
15300: PUSH
15301: LD_INT 1
15303: PLUS
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PPUSH
15309: LD_VAR 0 2
15313: PUSH
15314: LD_VAR 0 3
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PPUSH
15323: CALL 38491 0 3
15327: ST_TO_ADDR
// end ; result := true ;
15328: LD_ADDR_VAR 0 4
15332: PUSH
15333: LD_INT 1
15335: ST_TO_ADDR
// end ;
15336: LD_VAR 0 4
15340: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
15345: PPUSH
// if not unit in minersList then
15346: LD_VAR 0 1
15350: PUSH
15351: LD_EXP 33
15355: IN
15356: NOT
15357: IFFALSE 15361
// exit ;
15359: GO 15568
// index := GetElementIndex ( minersList , unit ) ;
15361: LD_ADDR_VAR 0 6
15365: PUSH
15366: LD_EXP 33
15370: PPUSH
15371: LD_VAR 0 1
15375: PPUSH
15376: CALL 38274 0 2
15380: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
15381: LD_ADDR_VAR 0 5
15385: PUSH
15386: DOUBLE
15387: LD_EXP 34
15391: PUSH
15392: LD_VAR 0 6
15396: ARRAY
15397: INC
15398: ST_TO_ADDR
15399: LD_INT 1
15401: PUSH
15402: FOR_DOWNTO
15403: IFFALSE 15566
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
15405: LD_EXP 34
15409: PUSH
15410: LD_VAR 0 6
15414: ARRAY
15415: PUSH
15416: LD_VAR 0 5
15420: ARRAY
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: LD_EXP 34
15430: PUSH
15431: LD_VAR 0 6
15435: ARRAY
15436: PUSH
15437: LD_VAR 0 5
15441: ARRAY
15442: PUSH
15443: LD_INT 2
15445: ARRAY
15446: PPUSH
15447: LD_VAR 0 2
15451: PPUSH
15452: LD_VAR 0 3
15456: PPUSH
15457: CALL_OW 298
15461: PUSH
15462: LD_INT 6
15464: LESS
15465: IFFALSE 15564
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15467: LD_EXP 34
15471: PUSH
15472: LD_VAR 0 6
15476: ARRAY
15477: PUSH
15478: LD_VAR 0 5
15482: ARRAY
15483: PUSH
15484: LD_INT 1
15486: ARRAY
15487: PPUSH
15488: LD_EXP 34
15492: PUSH
15493: LD_VAR 0 6
15497: ARRAY
15498: PUSH
15499: LD_VAR 0 5
15503: ARRAY
15504: PUSH
15505: LD_INT 2
15507: ARRAY
15508: PPUSH
15509: LD_VAR 0 1
15513: PPUSH
15514: CALL_OW 255
15518: PPUSH
15519: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15523: LD_ADDR_EXP 34
15527: PUSH
15528: LD_EXP 34
15532: PPUSH
15533: LD_VAR 0 6
15537: PPUSH
15538: LD_EXP 34
15542: PUSH
15543: LD_VAR 0 6
15547: ARRAY
15548: PPUSH
15549: LD_VAR 0 5
15553: PPUSH
15554: CALL_OW 3
15558: PPUSH
15559: CALL_OW 1
15563: ST_TO_ADDR
// end ; end ;
15564: GO 15402
15566: POP
15567: POP
// end ;
15568: LD_VAR 0 4
15572: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15573: LD_INT 0
15575: PPUSH
15576: PPUSH
15577: PPUSH
15578: PPUSH
15579: PPUSH
15580: PPUSH
15581: PPUSH
15582: PPUSH
15583: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15584: LD_VAR 0 1
15588: PPUSH
15589: CALL_OW 264
15593: PUSH
15594: LD_INT 81
15596: EQUAL
15597: NOT
15598: IFTRUE 15613
15600: PUSH
15601: LD_VAR 0 1
15605: PUSH
15606: LD_EXP 33
15610: IN
15611: NOT
15612: OR
15613: IFFALSE 15617
// exit ;
15615: GO 15943
// index := GetElementIndex ( minersList , unit ) ;
15617: LD_ADDR_VAR 0 6
15621: PUSH
15622: LD_EXP 33
15626: PPUSH
15627: LD_VAR 0 1
15631: PPUSH
15632: CALL 38274 0 2
15636: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15637: LD_ADDR_VAR 0 8
15641: PUSH
15642: LD_EXP 35
15646: PUSH
15647: LD_EXP 34
15651: PUSH
15652: LD_VAR 0 6
15656: ARRAY
15657: MINUS
15658: ST_TO_ADDR
// if not minesFreeAmount then
15659: LD_VAR 0 8
15663: NOT
15664: IFFALSE 15668
// exit ;
15666: GO 15943
// tmp := [ ] ;
15668: LD_ADDR_VAR 0 7
15672: PUSH
15673: EMPTY
15674: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15675: LD_ADDR_VAR 0 5
15679: PUSH
15680: DOUBLE
15681: LD_INT 1
15683: DEC
15684: ST_TO_ADDR
15685: LD_VAR 0 8
15689: PUSH
15690: FOR_TO
15691: IFFALSE 15890
// begin _d := rand ( 0 , 5 ) ;
15693: LD_ADDR_VAR 0 11
15697: PUSH
15698: LD_INT 0
15700: PPUSH
15701: LD_INT 5
15703: PPUSH
15704: CALL_OW 12
15708: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15709: LD_ADDR_VAR 0 12
15713: PUSH
15714: LD_INT 2
15716: PPUSH
15717: LD_INT 6
15719: PPUSH
15720: CALL_OW 12
15724: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15725: LD_ADDR_VAR 0 9
15729: PUSH
15730: LD_VAR 0 2
15734: PPUSH
15735: LD_VAR 0 11
15739: PPUSH
15740: LD_VAR 0 12
15744: PPUSH
15745: CALL_OW 272
15749: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15750: LD_ADDR_VAR 0 10
15754: PUSH
15755: LD_VAR 0 3
15759: PPUSH
15760: LD_VAR 0 11
15764: PPUSH
15765: LD_VAR 0 12
15769: PPUSH
15770: CALL_OW 273
15774: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15775: LD_VAR 0 9
15779: PPUSH
15780: LD_VAR 0 10
15784: PPUSH
15785: CALL_OW 488
15789: IFFALSE 15813
15791: PUSH
15792: LD_VAR 0 9
15796: PUSH
15797: LD_VAR 0 10
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_VAR 0 7
15810: IN
15811: NOT
15812: AND
15813: IFFALSE 15832
15815: PUSH
15816: LD_VAR 0 9
15820: PPUSH
15821: LD_VAR 0 10
15825: PPUSH
15826: CALL_OW 458
15830: NOT
15831: AND
15832: IFFALSE 15874
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15834: LD_ADDR_VAR 0 7
15838: PUSH
15839: LD_VAR 0 7
15843: PPUSH
15844: LD_VAR 0 7
15848: PUSH
15849: LD_INT 1
15851: PLUS
15852: PPUSH
15853: LD_VAR 0 9
15857: PUSH
15858: LD_VAR 0 10
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 1
15871: ST_TO_ADDR
15872: GO 15888
// i := i - 1 ;
15874: LD_ADDR_VAR 0 5
15878: PUSH
15879: LD_VAR 0 5
15883: PUSH
15884: LD_INT 1
15886: MINUS
15887: ST_TO_ADDR
// end ;
15888: GO 15690
15890: POP
15891: POP
// for i in tmp do
15892: LD_ADDR_VAR 0 5
15896: PUSH
15897: LD_VAR 0 7
15901: PUSH
15902: FOR_IN
15903: IFFALSE 15941
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15905: LD_VAR 0 1
15909: PPUSH
15910: LD_VAR 0 5
15914: PUSH
15915: LD_INT 1
15917: ARRAY
15918: PPUSH
15919: LD_VAR 0 5
15923: PUSH
15924: LD_INT 2
15926: ARRAY
15927: PPUSH
15928: CALL 14934 0 3
15932: NOT
15933: IFFALSE 15939
// exit ;
15935: POP
15936: POP
15937: GO 15943
15939: GO 15902
15941: POP
15942: POP
// end ;
15943: LD_VAR 0 4
15947: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
15948: LD_INT 0
15950: PPUSH
15951: PPUSH
15952: PPUSH
15953: PPUSH
15954: PPUSH
15955: PPUSH
15956: PPUSH
15957: PPUSH
15958: PPUSH
// if GetClass ( unit ) <> class_sniper then
15959: LD_VAR 0 1
15963: PPUSH
15964: CALL_OW 257
15968: PUSH
15969: LD_INT 5
15971: NONEQUAL
15972: IFFALSE 15976
// exit ;
15974: GO 16446
// dist := 8 ;
15976: LD_ADDR_VAR 0 5
15980: PUSH
15981: LD_INT 8
15983: ST_TO_ADDR
// viewRange := 12 ;
15984: LD_ADDR_VAR 0 8
15988: PUSH
15989: LD_INT 12
15991: ST_TO_ADDR
// side := GetSide ( unit ) ;
15992: LD_ADDR_VAR 0 6
15996: PUSH
15997: LD_VAR 0 1
16001: PPUSH
16002: CALL_OW 255
16006: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
16007: LD_INT 61
16009: PPUSH
16010: LD_VAR 0 6
16014: PPUSH
16015: CALL_OW 321
16019: PUSH
16020: LD_INT 2
16022: EQUAL
16023: IFFALSE 16033
// viewRange := 16 ;
16025: LD_ADDR_VAR 0 8
16029: PUSH
16030: LD_INT 16
16032: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
16033: LD_VAR 0 1
16037: PPUSH
16038: LD_VAR 0 2
16042: PPUSH
16043: LD_VAR 0 3
16047: PPUSH
16048: CALL_OW 297
16052: PUSH
16053: LD_VAR 0 5
16057: GREATER
16058: IFFALSE 16137
// begin ComMoveXY ( unit , x , y ) ;
16060: LD_VAR 0 1
16064: PPUSH
16065: LD_VAR 0 2
16069: PPUSH
16070: LD_VAR 0 3
16074: PPUSH
16075: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16079: LD_INT 35
16081: PPUSH
16082: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
16086: LD_VAR 0 1
16090: PPUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_VAR 0 3
16100: PPUSH
16101: CALL 70330 0 3
16105: NOT
16106: IFFALSE 16110
// exit ;
16108: GO 16446
// until GetDistUnitXY ( unit , x , y ) < dist ;
16110: LD_VAR 0 1
16114: PPUSH
16115: LD_VAR 0 2
16119: PPUSH
16120: LD_VAR 0 3
16124: PPUSH
16125: CALL_OW 297
16129: PUSH
16130: LD_VAR 0 5
16134: LESS
16135: IFFALSE 16079
// end ; ComTurnXY ( unit , x , y ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_VAR 0 2
16146: PPUSH
16147: LD_VAR 0 3
16151: PPUSH
16152: CALL_OW 118
// repeat if Multiplayer then
16156: LD_OWVAR 4
16160: IFFALSE 16171
// wait ( 35 ) else
16162: LD_INT 35
16164: PPUSH
16165: CALL_OW 67
16169: GO 16178
// wait ( 5 ) ;
16171: LD_INT 5
16173: PPUSH
16174: CALL_OW 67
// _d := GetDir ( unit ) ;
16178: LD_ADDR_VAR 0 11
16182: PUSH
16183: LD_VAR 0 1
16187: PPUSH
16188: CALL_OW 254
16192: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
16193: LD_ADDR_VAR 0 7
16197: PUSH
16198: LD_VAR 0 1
16202: PPUSH
16203: CALL_OW 250
16207: PPUSH
16208: LD_VAR 0 1
16212: PPUSH
16213: CALL_OW 251
16217: PPUSH
16218: LD_VAR 0 2
16222: PPUSH
16223: LD_VAR 0 3
16227: PPUSH
16228: CALL 72966 0 4
16232: ST_TO_ADDR
// until dir = _d ;
16233: LD_VAR 0 7
16237: PUSH
16238: LD_VAR 0 11
16242: EQUAL
16243: IFFALSE 16156
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
16245: LD_ADDR_VAR 0 9
16249: PUSH
16250: LD_VAR 0 1
16254: PPUSH
16255: CALL_OW 250
16259: PPUSH
16260: LD_VAR 0 7
16264: PPUSH
16265: LD_VAR 0 5
16269: PPUSH
16270: CALL_OW 272
16274: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
16275: LD_ADDR_VAR 0 10
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 251
16289: PPUSH
16290: LD_VAR 0 7
16294: PPUSH
16295: LD_VAR 0 5
16299: PPUSH
16300: CALL_OW 273
16304: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16305: LD_VAR 0 9
16309: PPUSH
16310: LD_VAR 0 10
16314: PPUSH
16315: CALL_OW 488
16319: NOT
16320: IFFALSE 16324
// exit ;
16322: GO 16446
// ComAnimCustom ( unit , 1 ) ;
16324: LD_VAR 0 1
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 592
// p := 0 ;
16336: LD_ADDR_VAR 0 12
16340: PUSH
16341: LD_INT 0
16343: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
16344: LD_VAR 0 9
16348: PPUSH
16349: LD_VAR 0 10
16353: PPUSH
16354: LD_VAR 0 6
16358: PPUSH
16359: LD_VAR 0 8
16363: PPUSH
16364: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
16368: LD_INT 35
16370: PPUSH
16371: CALL_OW 67
// p := Inc ( p ) ;
16375: LD_ADDR_VAR 0 12
16379: PUSH
16380: LD_VAR 0 12
16384: PPUSH
16385: CALL 72922 0 1
16389: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
16390: LD_VAR 0 12
16394: PUSH
16395: LD_INT 3
16397: EQUAL
16398: IFTRUE 16412
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 302
16410: NOT
16411: OR
16412: IFTRUE 16425
16414: PUSH
16415: LD_VAR 0 1
16419: PPUSH
16420: CALL_OW 301
16424: OR
16425: IFFALSE 16368
// RemoveSeeing ( _x , _y , side ) ;
16427: LD_VAR 0 9
16431: PPUSH
16432: LD_VAR 0 10
16436: PPUSH
16437: LD_VAR 0 6
16441: PPUSH
16442: CALL_OW 331
// end ;
16446: LD_VAR 0 4
16450: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
16451: LD_INT 0
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
16460: PPUSH
16461: PPUSH
16462: PPUSH
16463: PPUSH
// if not unit then
16464: LD_VAR 0 1
16468: NOT
16469: IFFALSE 16473
// exit ;
16471: GO 16744
// side := GetSide ( unit ) ;
16473: LD_ADDR_VAR 0 3
16477: PUSH
16478: LD_VAR 0 1
16482: PPUSH
16483: CALL_OW 255
16487: ST_TO_ADDR
// x := GetX ( unit ) ;
16488: LD_ADDR_VAR 0 5
16492: PUSH
16493: LD_VAR 0 1
16497: PPUSH
16498: CALL_OW 250
16502: ST_TO_ADDR
// y := GetY ( unit ) ;
16503: LD_ADDR_VAR 0 6
16507: PUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 251
16517: ST_TO_ADDR
// r := 8 ;
16518: LD_ADDR_VAR 0 4
16522: PUSH
16523: LD_INT 8
16525: ST_TO_ADDR
// if x - r < 0 then
16526: LD_VAR 0 5
16530: PUSH
16531: LD_VAR 0 4
16535: MINUS
16536: PUSH
16537: LD_INT 0
16539: LESS
16540: IFFALSE 16552
// min_x := 0 else
16542: LD_ADDR_VAR 0 7
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
16550: GO 16568
// min_x := x - r ;
16552: LD_ADDR_VAR 0 7
16556: PUSH
16557: LD_VAR 0 5
16561: PUSH
16562: LD_VAR 0 4
16566: MINUS
16567: ST_TO_ADDR
// if y - r < 0 then
16568: LD_VAR 0 6
16572: PUSH
16573: LD_VAR 0 4
16577: MINUS
16578: PUSH
16579: LD_INT 0
16581: LESS
16582: IFFALSE 16594
// min_y := 0 else
16584: LD_ADDR_VAR 0 8
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
16592: GO 16610
// min_y := y - r ;
16594: LD_ADDR_VAR 0 8
16598: PUSH
16599: LD_VAR 0 6
16603: PUSH
16604: LD_VAR 0 4
16608: MINUS
16609: ST_TO_ADDR
// max_x := x + r ;
16610: LD_ADDR_VAR 0 9
16614: PUSH
16615: LD_VAR 0 5
16619: PUSH
16620: LD_VAR 0 4
16624: PLUS
16625: ST_TO_ADDR
// max_y := y + r ;
16626: LD_ADDR_VAR 0 10
16630: PUSH
16631: LD_VAR 0 6
16635: PUSH
16636: LD_VAR 0 4
16640: PLUS
16641: ST_TO_ADDR
// for _x = min_x to max_x do
16642: LD_ADDR_VAR 0 11
16646: PUSH
16647: DOUBLE
16648: LD_VAR 0 7
16652: DEC
16653: ST_TO_ADDR
16654: LD_VAR 0 9
16658: PUSH
16659: FOR_TO
16660: IFFALSE 16742
// for _y = min_y to max_y do
16662: LD_ADDR_VAR 0 12
16666: PUSH
16667: DOUBLE
16668: LD_VAR 0 8
16672: DEC
16673: ST_TO_ADDR
16674: LD_VAR 0 10
16678: PUSH
16679: FOR_TO
16680: IFFALSE 16738
// begin if not ValidHex ( _x , _y ) then
16682: LD_VAR 0 11
16686: PPUSH
16687: LD_VAR 0 12
16691: PPUSH
16692: CALL_OW 488
16696: NOT
16697: IFFALSE 16701
// continue ;
16699: GO 16679
// if MineAtPos ( _x , _y ) then
16701: LD_VAR 0 11
16705: PPUSH
16706: LD_VAR 0 12
16710: PPUSH
16711: CALL_OW 458
16715: IFFALSE 16736
// ViewMineAtPos ( _x , _y , side ) ;
16717: LD_VAR 0 11
16721: PPUSH
16722: LD_VAR 0 12
16726: PPUSH
16727: LD_VAR 0 3
16731: PPUSH
16732: CALL_OW 457
// end ;
16736: GO 16679
16738: POP
16739: POP
16740: GO 16659
16742: POP
16743: POP
// end ;
16744: LD_VAR 0 2
16748: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
16749: LD_INT 0
16751: PPUSH
16752: PPUSH
16753: PPUSH
16754: PPUSH
16755: PPUSH
16756: PPUSH
16757: PPUSH
// if not units then
16758: LD_VAR 0 1
16762: NOT
16763: IFFALSE 16767
// exit ;
16765: GO 17231
// scaners := [ ] ;
16767: LD_ADDR_VAR 0 6
16771: PUSH
16772: EMPTY
16773: ST_TO_ADDR
// for i in units do
16774: LD_ADDR_VAR 0 3
16778: PUSH
16779: LD_VAR 0 1
16783: PUSH
16784: FOR_IN
16785: IFFALSE 16942
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
16787: LD_VAR 0 3
16791: PPUSH
16792: CALL_OW 264
16796: PUSH
16797: LD_INT 11
16799: NONEQUAL
16800: IFTRUE 16814
16802: PUSH
16803: LD_VAR 0 3
16807: PPUSH
16808: CALL_OW 302
16812: NOT
16813: OR
16814: IFTRUE 16831
16816: PUSH
16817: LD_VAR 0 3
16821: PPUSH
16822: CALL_OW 110
16826: PUSH
16827: LD_INT 502
16829: EQUAL
16830: OR
16831: IFFALSE 16835
// continue ;
16833: GO 16784
// ComStop ( i ) ;
16835: LD_VAR 0 3
16839: PPUSH
16840: CALL_OW 141
// x := GetX ( i ) ;
16844: LD_ADDR_VAR 0 4
16848: PUSH
16849: LD_VAR 0 3
16853: PPUSH
16854: CALL_OW 250
16858: ST_TO_ADDR
// y := GetY ( i ) ;
16859: LD_ADDR_VAR 0 5
16863: PUSH
16864: LD_VAR 0 3
16868: PPUSH
16869: CALL_OW 251
16873: ST_TO_ADDR
// if GetSide ( i ) = your_side then
16874: LD_VAR 0 3
16878: PPUSH
16879: CALL_OW 255
16883: PUSH
16884: LD_OWVAR 2
16888: EQUAL
16889: IFFALSE 16908
// PlaySoundXY ( x , y , mineDetector ) ;
16891: LD_VAR 0 4
16895: PPUSH
16896: LD_VAR 0 5
16900: PPUSH
16901: LD_STRING mineDetector
16903: PPUSH
16904: CALL_OW 366
// scaners := Join ( scaners , i ) ;
16908: LD_ADDR_VAR 0 6
16912: PUSH
16913: LD_VAR 0 6
16917: PPUSH
16918: LD_VAR 0 3
16922: PPUSH
16923: CALL 71549 0 2
16927: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
16928: LD_VAR 0 3
16932: PPUSH
16933: LD_INT 502
16935: PPUSH
16936: CALL_OW 109
// end ;
16940: GO 16784
16942: POP
16943: POP
// if not scaners then
16944: LD_VAR 0 6
16948: NOT
16949: IFFALSE 16953
// exit ;
16951: GO 17231
// wait ( 3 ) ;
16953: LD_INT 3
16955: PPUSH
16956: CALL_OW 67
// timer := 6 ;
16960: LD_ADDR_VAR 0 7
16964: PUSH
16965: LD_INT 6
16967: ST_TO_ADDR
// repeat for i in scaners do
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: LD_VAR 0 6
16977: PUSH
16978: FOR_IN
16979: IFFALSE 17129
// begin side := GetSide ( i ) ;
16981: LD_ADDR_VAR 0 8
16985: PUSH
16986: LD_VAR 0 3
16990: PPUSH
16991: CALL_OW 255
16995: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
16996: LD_VAR 0 3
17000: PPUSH
17001: CALL_OW 302
17005: NOT
17006: IFTRUE 17019
17008: PUSH
17009: LD_VAR 0 3
17013: PPUSH
17014: CALL_OW 314
17018: OR
17019: IFTRUE 17050
17021: PUSH
17022: LD_VAR 0 3
17026: PPUSH
17027: CALL_OW 263
17031: PUSH
17032: LD_INT 1
17034: EQUAL
17035: IFFALSE 17049
17037: PUSH
17038: LD_VAR 0 3
17042: PPUSH
17043: CALL_OW 311
17047: NOT
17048: AND
17049: OR
17050: IFFALSE 17094
// begin SetUnitDisplayNumber ( i , 0 ) ;
17052: LD_VAR 0 3
17056: PPUSH
17057: LD_INT 0
17059: PPUSH
17060: CALL_OW 505
// SetTag ( i , 0 ) ;
17064: LD_VAR 0 3
17068: PPUSH
17069: LD_INT 0
17071: PPUSH
17072: CALL_OW 109
// scaners := scaners diff i ;
17076: LD_ADDR_VAR 0 6
17080: PUSH
17081: LD_VAR 0 6
17085: PUSH
17086: LD_VAR 0 3
17090: DIFF
17091: ST_TO_ADDR
// continue ;
17092: GO 16978
// end ; if side in [ your_side , 9 ] then
17094: LD_VAR 0 8
17098: PUSH
17099: LD_OWVAR 2
17103: PUSH
17104: LD_INT 9
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: IN
17111: IFFALSE 17127
// SetUnitDisplayNumber ( i , timer ) ;
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_VAR 0 7
17122: PPUSH
17123: CALL_OW 505
// end ;
17127: GO 16978
17129: POP
17130: POP
// if not scaners then
17131: LD_VAR 0 6
17135: NOT
17136: IFFALSE 17140
// exit ;
17138: GO 17231
// timer := Dec ( timer ) ;
17140: LD_ADDR_VAR 0 7
17144: PUSH
17145: LD_VAR 0 7
17149: PPUSH
17150: CALL 72944 0 1
17154: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17155: LD_INT 35
17157: PPUSH
17158: CALL_OW 67
// until timer = 0 ;
17162: LD_VAR 0 7
17166: PUSH
17167: LD_INT 0
17169: EQUAL
17170: IFFALSE 16968
// if not scaners then
17172: LD_VAR 0 6
17176: NOT
17177: IFFALSE 17181
// exit ;
17179: GO 17231
// for i in scaners do
17181: LD_ADDR_VAR 0 3
17185: PUSH
17186: LD_VAR 0 6
17190: PUSH
17191: FOR_IN
17192: IFFALSE 17229
// begin SetUnitDisplayNumber ( i , 0 ) ;
17194: LD_VAR 0 3
17198: PPUSH
17199: LD_INT 0
17201: PPUSH
17202: CALL_OW 505
// SetTag ( i , 0 ) ;
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_INT 0
17213: PPUSH
17214: CALL_OW 109
// RevealDetectorMine ( i ) ;
17218: LD_VAR 0 3
17222: PPUSH
17223: CALL 16451 0 1
// end ;
17227: GO 17191
17229: POP
17230: POP
// end ;
17231: LD_VAR 0 2
17235: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
17236: LD_INT 0
17238: PPUSH
// if p1 = mine_detector_mode then
17239: LD_VAR 0 2
17243: PUSH
17244: LD_INT 103
17246: EQUAL
17247: IFFALSE 17258
// DetectMine ( units ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL 16749 0 1
// end ; end_of_file
17258: LD_VAR 0 7
17262: RET
// export globalGameSaveCounter ; every 0 0$1 do
17263: GO 17265
17265: DISABLE
// begin enable ;
17266: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17267: LD_STRING updateTimer(
17269: PUSH
17270: LD_OWVAR 1
17274: STR
17275: PUSH
17276: LD_STRING );
17278: STR
17279: PPUSH
17280: CALL_OW 559
// end ;
17284: END
// every 0 0$1 do
17285: GO 17287
17287: DISABLE
// begin globalGameSaveCounter := 0 ;
17288: LD_ADDR_EXP 36
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17296: LD_STRING setGameSaveCounter(0)
17298: PPUSH
17299: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17303: LD_STRING initStreamRollete();
17305: PPUSH
17306: CALL_OW 559
// InitStreamMode ;
17310: CALL 18662 0 0
// DefineStreamItems ( false ) ;
17314: LD_INT 0
17316: PPUSH
17317: CALL 19126 0 1
// end ;
17321: END
// export function SOS_MapStart ( ) ; begin
17322: LD_INT 0
17324: PPUSH
// if streamModeActive then
17325: LD_EXP 37
17329: IFFALSE 17338
// DefineStreamItems ( true ) ;
17331: LD_INT 1
17333: PPUSH
17334: CALL 19126 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
17338: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
17340: PPUSH
17341: CALL_OW 559
// UpdateLuaVariables ( ) ;
17345: CALL 17362 0 0
// UpdateFactoryWaypoints ( ) ;
17349: CALL 32248 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17353: CALL 32500 0 0
// end ;
17357: LD_VAR 0 1
17361: RET
// function UpdateLuaVariables ( ) ; begin
17362: LD_INT 0
17364: PPUSH
// if globalGameSaveCounter then
17365: LD_EXP 36
17369: IFFALSE 17403
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17371: LD_ADDR_EXP 36
17375: PUSH
17376: LD_EXP 36
17380: PPUSH
17381: CALL 72922 0 1
17385: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17386: LD_STRING setGameSaveCounter(
17388: PUSH
17389: LD_EXP 36
17393: STR
17394: PUSH
17395: LD_STRING )
17397: STR
17398: PPUSH
17399: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17403: LD_STRING setGameDifficulty(
17405: PUSH
17406: LD_OWVAR 67
17410: STR
17411: PUSH
17412: LD_STRING )
17414: STR
17415: PPUSH
17416: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17420: LD_STRING displayDifficulty(
17422: PUSH
17423: LD_OWVAR 67
17427: STR
17428: PUSH
17429: LD_STRING )
17431: STR
17432: PPUSH
17433: CALL_OW 559
// end ;
17437: LD_VAR 0 1
17441: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17442: LD_INT 0
17444: PPUSH
// if p2 = stream_mode then
17445: LD_VAR 0 2
17449: PUSH
17450: LD_INT 100
17452: EQUAL
17453: IFFALSE 18456
// begin if not StreamModeActive then
17455: LD_EXP 37
17459: NOT
17460: IFFALSE 17470
// StreamModeActive := true ;
17462: LD_ADDR_EXP 37
17466: PUSH
17467: LD_INT 1
17469: ST_TO_ADDR
// if p3 = 0 then
17470: LD_VAR 0 3
17474: PUSH
17475: LD_INT 0
17477: EQUAL
17478: IFFALSE 17484
// InitStreamMode ;
17480: CALL 18662 0 0
// if p3 = 1 then
17484: LD_VAR 0 3
17488: PUSH
17489: LD_INT 1
17491: EQUAL
17492: IFFALSE 17502
// sRocket := true ;
17494: LD_ADDR_EXP 42
17498: PUSH
17499: LD_INT 1
17501: ST_TO_ADDR
// if p3 = 2 then
17502: LD_VAR 0 3
17506: PUSH
17507: LD_INT 2
17509: EQUAL
17510: IFFALSE 17520
// sSpeed := true ;
17512: LD_ADDR_EXP 41
17516: PUSH
17517: LD_INT 1
17519: ST_TO_ADDR
// if p3 = 3 then
17520: LD_VAR 0 3
17524: PUSH
17525: LD_INT 3
17527: EQUAL
17528: IFFALSE 17538
// sEngine := true ;
17530: LD_ADDR_EXP 43
17534: PUSH
17535: LD_INT 1
17537: ST_TO_ADDR
// if p3 = 4 then
17538: LD_VAR 0 3
17542: PUSH
17543: LD_INT 4
17545: EQUAL
17546: IFFALSE 17556
// sSpec := true ;
17548: LD_ADDR_EXP 40
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// if p3 = 5 then
17556: LD_VAR 0 3
17560: PUSH
17561: LD_INT 5
17563: EQUAL
17564: IFFALSE 17574
// sLevel := true ;
17566: LD_ADDR_EXP 44
17570: PUSH
17571: LD_INT 1
17573: ST_TO_ADDR
// if p3 = 6 then
17574: LD_VAR 0 3
17578: PUSH
17579: LD_INT 6
17581: EQUAL
17582: IFFALSE 17592
// sArmoury := true ;
17584: LD_ADDR_EXP 45
17588: PUSH
17589: LD_INT 1
17591: ST_TO_ADDR
// if p3 = 7 then
17592: LD_VAR 0 3
17596: PUSH
17597: LD_INT 7
17599: EQUAL
17600: IFFALSE 17610
// sRadar := true ;
17602: LD_ADDR_EXP 46
17606: PUSH
17607: LD_INT 1
17609: ST_TO_ADDR
// if p3 = 8 then
17610: LD_VAR 0 3
17614: PUSH
17615: LD_INT 8
17617: EQUAL
17618: IFFALSE 17628
// sBunker := true ;
17620: LD_ADDR_EXP 47
17624: PUSH
17625: LD_INT 1
17627: ST_TO_ADDR
// if p3 = 9 then
17628: LD_VAR 0 3
17632: PUSH
17633: LD_INT 9
17635: EQUAL
17636: IFFALSE 17646
// sHack := true ;
17638: LD_ADDR_EXP 48
17642: PUSH
17643: LD_INT 1
17645: ST_TO_ADDR
// if p3 = 10 then
17646: LD_VAR 0 3
17650: PUSH
17651: LD_INT 10
17653: EQUAL
17654: IFFALSE 17664
// sFire := true ;
17656: LD_ADDR_EXP 49
17660: PUSH
17661: LD_INT 1
17663: ST_TO_ADDR
// if p3 = 11 then
17664: LD_VAR 0 3
17668: PUSH
17669: LD_INT 11
17671: EQUAL
17672: IFFALSE 17682
// sRefresh := true ;
17674: LD_ADDR_EXP 50
17678: PUSH
17679: LD_INT 1
17681: ST_TO_ADDR
// if p3 = 12 then
17682: LD_VAR 0 3
17686: PUSH
17687: LD_INT 12
17689: EQUAL
17690: IFFALSE 17700
// sExp := true ;
17692: LD_ADDR_EXP 51
17696: PUSH
17697: LD_INT 1
17699: ST_TO_ADDR
// if p3 = 13 then
17700: LD_VAR 0 3
17704: PUSH
17705: LD_INT 13
17707: EQUAL
17708: IFFALSE 17718
// sDepot := true ;
17710: LD_ADDR_EXP 52
17714: PUSH
17715: LD_INT 1
17717: ST_TO_ADDR
// if p3 = 14 then
17718: LD_VAR 0 3
17722: PUSH
17723: LD_INT 14
17725: EQUAL
17726: IFFALSE 17736
// sFlag := true ;
17728: LD_ADDR_EXP 53
17732: PUSH
17733: LD_INT 1
17735: ST_TO_ADDR
// if p3 = 15 then
17736: LD_VAR 0 3
17740: PUSH
17741: LD_INT 15
17743: EQUAL
17744: IFFALSE 17754
// sKamikadze := true ;
17746: LD_ADDR_EXP 61
17750: PUSH
17751: LD_INT 1
17753: ST_TO_ADDR
// if p3 = 16 then
17754: LD_VAR 0 3
17758: PUSH
17759: LD_INT 16
17761: EQUAL
17762: IFFALSE 17772
// sTroll := true ;
17764: LD_ADDR_EXP 62
17768: PUSH
17769: LD_INT 1
17771: ST_TO_ADDR
// if p3 = 17 then
17772: LD_VAR 0 3
17776: PUSH
17777: LD_INT 17
17779: EQUAL
17780: IFFALSE 17790
// sSlow := true ;
17782: LD_ADDR_EXP 63
17786: PUSH
17787: LD_INT 1
17789: ST_TO_ADDR
// if p3 = 18 then
17790: LD_VAR 0 3
17794: PUSH
17795: LD_INT 18
17797: EQUAL
17798: IFFALSE 17808
// sLack := true ;
17800: LD_ADDR_EXP 64
17804: PUSH
17805: LD_INT 1
17807: ST_TO_ADDR
// if p3 = 19 then
17808: LD_VAR 0 3
17812: PUSH
17813: LD_INT 19
17815: EQUAL
17816: IFFALSE 17826
// sTank := true ;
17818: LD_ADDR_EXP 66
17822: PUSH
17823: LD_INT 1
17825: ST_TO_ADDR
// if p3 = 20 then
17826: LD_VAR 0 3
17830: PUSH
17831: LD_INT 20
17833: EQUAL
17834: IFFALSE 17844
// sRemote := true ;
17836: LD_ADDR_EXP 67
17840: PUSH
17841: LD_INT 1
17843: ST_TO_ADDR
// if p3 = 21 then
17844: LD_VAR 0 3
17848: PUSH
17849: LD_INT 21
17851: EQUAL
17852: IFFALSE 17862
// sPowell := true ;
17854: LD_ADDR_EXP 68
17858: PUSH
17859: LD_INT 1
17861: ST_TO_ADDR
// if p3 = 22 then
17862: LD_VAR 0 3
17866: PUSH
17867: LD_INT 22
17869: EQUAL
17870: IFFALSE 17880
// sTeleport := true ;
17872: LD_ADDR_EXP 71
17876: PUSH
17877: LD_INT 1
17879: ST_TO_ADDR
// if p3 = 23 then
17880: LD_VAR 0 3
17884: PUSH
17885: LD_INT 23
17887: EQUAL
17888: IFFALSE 17898
// sOilTower := true ;
17890: LD_ADDR_EXP 73
17894: PUSH
17895: LD_INT 1
17897: ST_TO_ADDR
// if p3 = 24 then
17898: LD_VAR 0 3
17902: PUSH
17903: LD_INT 24
17905: EQUAL
17906: IFFALSE 17916
// sShovel := true ;
17908: LD_ADDR_EXP 74
17912: PUSH
17913: LD_INT 1
17915: ST_TO_ADDR
// if p3 = 25 then
17916: LD_VAR 0 3
17920: PUSH
17921: LD_INT 25
17923: EQUAL
17924: IFFALSE 17934
// sSheik := true ;
17926: LD_ADDR_EXP 75
17930: PUSH
17931: LD_INT 1
17933: ST_TO_ADDR
// if p3 = 26 then
17934: LD_VAR 0 3
17938: PUSH
17939: LD_INT 26
17941: EQUAL
17942: IFFALSE 17952
// sEarthquake := true ;
17944: LD_ADDR_EXP 77
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// if p3 = 27 then
17952: LD_VAR 0 3
17956: PUSH
17957: LD_INT 27
17959: EQUAL
17960: IFFALSE 17970
// sAI := true ;
17962: LD_ADDR_EXP 78
17966: PUSH
17967: LD_INT 1
17969: ST_TO_ADDR
// if p3 = 28 then
17970: LD_VAR 0 3
17974: PUSH
17975: LD_INT 28
17977: EQUAL
17978: IFFALSE 17988
// sCargo := true ;
17980: LD_ADDR_EXP 81
17984: PUSH
17985: LD_INT 1
17987: ST_TO_ADDR
// if p3 = 29 then
17988: LD_VAR 0 3
17992: PUSH
17993: LD_INT 29
17995: EQUAL
17996: IFFALSE 18006
// sDLaser := true ;
17998: LD_ADDR_EXP 82
18002: PUSH
18003: LD_INT 1
18005: ST_TO_ADDR
// if p3 = 30 then
18006: LD_VAR 0 3
18010: PUSH
18011: LD_INT 30
18013: EQUAL
18014: IFFALSE 18024
// sExchange := true ;
18016: LD_ADDR_EXP 83
18020: PUSH
18021: LD_INT 1
18023: ST_TO_ADDR
// if p3 = 31 then
18024: LD_VAR 0 3
18028: PUSH
18029: LD_INT 31
18031: EQUAL
18032: IFFALSE 18042
// sFac := true ;
18034: LD_ADDR_EXP 84
18038: PUSH
18039: LD_INT 1
18041: ST_TO_ADDR
// if p3 = 32 then
18042: LD_VAR 0 3
18046: PUSH
18047: LD_INT 32
18049: EQUAL
18050: IFFALSE 18060
// sPower := true ;
18052: LD_ADDR_EXP 85
18056: PUSH
18057: LD_INT 1
18059: ST_TO_ADDR
// if p3 = 33 then
18060: LD_VAR 0 3
18064: PUSH
18065: LD_INT 33
18067: EQUAL
18068: IFFALSE 18078
// sRandom := true ;
18070: LD_ADDR_EXP 86
18074: PUSH
18075: LD_INT 1
18077: ST_TO_ADDR
// if p3 = 34 then
18078: LD_VAR 0 3
18082: PUSH
18083: LD_INT 34
18085: EQUAL
18086: IFFALSE 18096
// sShield := true ;
18088: LD_ADDR_EXP 87
18092: PUSH
18093: LD_INT 1
18095: ST_TO_ADDR
// if p3 = 35 then
18096: LD_VAR 0 3
18100: PUSH
18101: LD_INT 35
18103: EQUAL
18104: IFFALSE 18114
// sTime := true ;
18106: LD_ADDR_EXP 88
18110: PUSH
18111: LD_INT 1
18113: ST_TO_ADDR
// if p3 = 36 then
18114: LD_VAR 0 3
18118: PUSH
18119: LD_INT 36
18121: EQUAL
18122: IFFALSE 18132
// sTools := true ;
18124: LD_ADDR_EXP 89
18128: PUSH
18129: LD_INT 1
18131: ST_TO_ADDR
// if p3 = 101 then
18132: LD_VAR 0 3
18136: PUSH
18137: LD_INT 101
18139: EQUAL
18140: IFFALSE 18150
// sSold := true ;
18142: LD_ADDR_EXP 54
18146: PUSH
18147: LD_INT 1
18149: ST_TO_ADDR
// if p3 = 102 then
18150: LD_VAR 0 3
18154: PUSH
18155: LD_INT 102
18157: EQUAL
18158: IFFALSE 18168
// sDiff := true ;
18160: LD_ADDR_EXP 55
18164: PUSH
18165: LD_INT 1
18167: ST_TO_ADDR
// if p3 = 103 then
18168: LD_VAR 0 3
18172: PUSH
18173: LD_INT 103
18175: EQUAL
18176: IFFALSE 18186
// sFog := true ;
18178: LD_ADDR_EXP 58
18182: PUSH
18183: LD_INT 1
18185: ST_TO_ADDR
// if p3 = 104 then
18186: LD_VAR 0 3
18190: PUSH
18191: LD_INT 104
18193: EQUAL
18194: IFFALSE 18204
// sReset := true ;
18196: LD_ADDR_EXP 59
18200: PUSH
18201: LD_INT 1
18203: ST_TO_ADDR
// if p3 = 105 then
18204: LD_VAR 0 3
18208: PUSH
18209: LD_INT 105
18211: EQUAL
18212: IFFALSE 18222
// sSun := true ;
18214: LD_ADDR_EXP 60
18218: PUSH
18219: LD_INT 1
18221: ST_TO_ADDR
// if p3 = 106 then
18222: LD_VAR 0 3
18226: PUSH
18227: LD_INT 106
18229: EQUAL
18230: IFFALSE 18240
// sTiger := true ;
18232: LD_ADDR_EXP 56
18236: PUSH
18237: LD_INT 1
18239: ST_TO_ADDR
// if p3 = 107 then
18240: LD_VAR 0 3
18244: PUSH
18245: LD_INT 107
18247: EQUAL
18248: IFFALSE 18258
// sBomb := true ;
18250: LD_ADDR_EXP 57
18254: PUSH
18255: LD_INT 1
18257: ST_TO_ADDR
// if p3 = 108 then
18258: LD_VAR 0 3
18262: PUSH
18263: LD_INT 108
18265: EQUAL
18266: IFFALSE 18276
// sWound := true ;
18268: LD_ADDR_EXP 65
18272: PUSH
18273: LD_INT 1
18275: ST_TO_ADDR
// if p3 = 109 then
18276: LD_VAR 0 3
18280: PUSH
18281: LD_INT 109
18283: EQUAL
18284: IFFALSE 18294
// sBetray := true ;
18286: LD_ADDR_EXP 69
18290: PUSH
18291: LD_INT 1
18293: ST_TO_ADDR
// if p3 = 110 then
18294: LD_VAR 0 3
18298: PUSH
18299: LD_INT 110
18301: EQUAL
18302: IFFALSE 18312
// sContamin := true ;
18304: LD_ADDR_EXP 70
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// if p3 = 111 then
18312: LD_VAR 0 3
18316: PUSH
18317: LD_INT 111
18319: EQUAL
18320: IFFALSE 18330
// sOil := true ;
18322: LD_ADDR_EXP 72
18326: PUSH
18327: LD_INT 1
18329: ST_TO_ADDR
// if p3 = 112 then
18330: LD_VAR 0 3
18334: PUSH
18335: LD_INT 112
18337: EQUAL
18338: IFFALSE 18348
// sStu := true ;
18340: LD_ADDR_EXP 76
18344: PUSH
18345: LD_INT 1
18347: ST_TO_ADDR
// if p3 = 113 then
18348: LD_VAR 0 3
18352: PUSH
18353: LD_INT 113
18355: EQUAL
18356: IFFALSE 18366
// sBazooka := true ;
18358: LD_ADDR_EXP 79
18362: PUSH
18363: LD_INT 1
18365: ST_TO_ADDR
// if p3 = 114 then
18366: LD_VAR 0 3
18370: PUSH
18371: LD_INT 114
18373: EQUAL
18374: IFFALSE 18384
// sMortar := true ;
18376: LD_ADDR_EXP 80
18380: PUSH
18381: LD_INT 1
18383: ST_TO_ADDR
// if p3 = 115 then
18384: LD_VAR 0 3
18388: PUSH
18389: LD_INT 115
18391: EQUAL
18392: IFFALSE 18402
// sRanger := true ;
18394: LD_ADDR_EXP 90
18398: PUSH
18399: LD_INT 1
18401: ST_TO_ADDR
// if p3 = 116 then
18402: LD_VAR 0 3
18406: PUSH
18407: LD_INT 116
18409: EQUAL
18410: IFFALSE 18420
// sComputer := true ;
18412: LD_ADDR_EXP 91
18416: PUSH
18417: LD_INT 1
18419: ST_TO_ADDR
// if p3 = 117 then
18420: LD_VAR 0 3
18424: PUSH
18425: LD_INT 117
18427: EQUAL
18428: IFFALSE 18438
// s30 := true ;
18430: LD_ADDR_EXP 92
18434: PUSH
18435: LD_INT 1
18437: ST_TO_ADDR
// if p3 = 118 then
18438: LD_VAR 0 3
18442: PUSH
18443: LD_INT 118
18445: EQUAL
18446: IFFALSE 18456
// s60 := true ;
18448: LD_ADDR_EXP 93
18452: PUSH
18453: LD_INT 1
18455: ST_TO_ADDR
// end ; if p2 = hack_mode then
18456: LD_VAR 0 2
18460: PUSH
18461: LD_INT 101
18463: EQUAL
18464: IFFALSE 18592
// begin case p3 of 1 :
18466: LD_VAR 0 3
18470: PUSH
18471: LD_INT 1
18473: DOUBLE
18474: EQUAL
18475: IFTRUE 18479
18477: GO 18486
18479: POP
// hHackUnlimitedResources ; 2 :
18480: CALL 30855 0 0
18484: GO 18592
18486: LD_INT 2
18488: DOUBLE
18489: EQUAL
18490: IFTRUE 18494
18492: GO 18501
18494: POP
// hHackSetLevel10 ; 3 :
18495: CALL 30988 0 0
18499: GO 18592
18501: LD_INT 3
18503: DOUBLE
18504: EQUAL
18505: IFTRUE 18509
18507: GO 18516
18509: POP
// hHackSetLevel10YourUnits ; 4 :
18510: CALL 31073 0 0
18514: GO 18592
18516: LD_INT 4
18518: DOUBLE
18519: EQUAL
18520: IFTRUE 18524
18522: GO 18531
18524: POP
// hHackInvincible ; 5 :
18525: CALL 31521 0 0
18529: GO 18592
18531: LD_INT 5
18533: DOUBLE
18534: EQUAL
18535: IFTRUE 18539
18537: GO 18546
18539: POP
// hHackInvisible ; 6 :
18540: CALL 31632 0 0
18544: GO 18592
18546: LD_INT 6
18548: DOUBLE
18549: EQUAL
18550: IFTRUE 18554
18552: GO 18561
18554: POP
// hHackChangeYourSide ; 7 :
18555: CALL 31689 0 0
18559: GO 18592
18561: LD_INT 7
18563: DOUBLE
18564: EQUAL
18565: IFTRUE 18569
18567: GO 18576
18569: POP
// hHackChangeUnitSide ; 8 :
18570: CALL 31731 0 0
18574: GO 18592
18576: LD_INT 8
18578: DOUBLE
18579: EQUAL
18580: IFTRUE 18584
18582: GO 18591
18584: POP
// hHackFog ; end ;
18585: CALL 31832 0 0
18589: GO 18592
18591: POP
// end ; if p2 = game_save_mode then
18592: LD_VAR 0 2
18596: PUSH
18597: LD_INT 102
18599: EQUAL
18600: IFFALSE 18657
// begin if p3 = 1 then
18602: LD_VAR 0 3
18606: PUSH
18607: LD_INT 1
18609: EQUAL
18610: IFFALSE 18622
// globalGameSaveCounter := p4 ;
18612: LD_ADDR_EXP 36
18616: PUSH
18617: LD_VAR 0 4
18621: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18622: LD_VAR 0 3
18626: PUSH
18627: LD_INT 2
18629: EQUAL
18630: IFFALSE 18638
18632: PUSH
18633: LD_EXP 36
18637: AND
18638: IFFALSE 18657
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18640: LD_STRING setGameSaveCounter(
18642: PUSH
18643: LD_EXP 36
18647: STR
18648: PUSH
18649: LD_STRING )
18651: STR
18652: PPUSH
18653: CALL_OW 559
// end ; end ;
18657: LD_VAR 0 7
18661: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18662: LD_INT 0
18664: PPUSH
// streamModeActive := false ;
18665: LD_ADDR_EXP 37
18669: PUSH
18670: LD_INT 0
18672: ST_TO_ADDR
// normalCounter := 36 ;
18673: LD_ADDR_EXP 38
18677: PUSH
18678: LD_INT 36
18680: ST_TO_ADDR
// hardcoreCounter := 18 ;
18681: LD_ADDR_EXP 39
18685: PUSH
18686: LD_INT 18
18688: ST_TO_ADDR
// sRocket := false ;
18689: LD_ADDR_EXP 42
18693: PUSH
18694: LD_INT 0
18696: ST_TO_ADDR
// sSpeed := false ;
18697: LD_ADDR_EXP 41
18701: PUSH
18702: LD_INT 0
18704: ST_TO_ADDR
// sEngine := false ;
18705: LD_ADDR_EXP 43
18709: PUSH
18710: LD_INT 0
18712: ST_TO_ADDR
// sSpec := false ;
18713: LD_ADDR_EXP 40
18717: PUSH
18718: LD_INT 0
18720: ST_TO_ADDR
// sLevel := false ;
18721: LD_ADDR_EXP 44
18725: PUSH
18726: LD_INT 0
18728: ST_TO_ADDR
// sArmoury := false ;
18729: LD_ADDR_EXP 45
18733: PUSH
18734: LD_INT 0
18736: ST_TO_ADDR
// sRadar := false ;
18737: LD_ADDR_EXP 46
18741: PUSH
18742: LD_INT 0
18744: ST_TO_ADDR
// sBunker := false ;
18745: LD_ADDR_EXP 47
18749: PUSH
18750: LD_INT 0
18752: ST_TO_ADDR
// sHack := false ;
18753: LD_ADDR_EXP 48
18757: PUSH
18758: LD_INT 0
18760: ST_TO_ADDR
// sFire := false ;
18761: LD_ADDR_EXP 49
18765: PUSH
18766: LD_INT 0
18768: ST_TO_ADDR
// sRefresh := false ;
18769: LD_ADDR_EXP 50
18773: PUSH
18774: LD_INT 0
18776: ST_TO_ADDR
// sExp := false ;
18777: LD_ADDR_EXP 51
18781: PUSH
18782: LD_INT 0
18784: ST_TO_ADDR
// sDepot := false ;
18785: LD_ADDR_EXP 52
18789: PUSH
18790: LD_INT 0
18792: ST_TO_ADDR
// sFlag := false ;
18793: LD_ADDR_EXP 53
18797: PUSH
18798: LD_INT 0
18800: ST_TO_ADDR
// sKamikadze := false ;
18801: LD_ADDR_EXP 61
18805: PUSH
18806: LD_INT 0
18808: ST_TO_ADDR
// sTroll := false ;
18809: LD_ADDR_EXP 62
18813: PUSH
18814: LD_INT 0
18816: ST_TO_ADDR
// sSlow := false ;
18817: LD_ADDR_EXP 63
18821: PUSH
18822: LD_INT 0
18824: ST_TO_ADDR
// sLack := false ;
18825: LD_ADDR_EXP 64
18829: PUSH
18830: LD_INT 0
18832: ST_TO_ADDR
// sTank := false ;
18833: LD_ADDR_EXP 66
18837: PUSH
18838: LD_INT 0
18840: ST_TO_ADDR
// sRemote := false ;
18841: LD_ADDR_EXP 67
18845: PUSH
18846: LD_INT 0
18848: ST_TO_ADDR
// sPowell := false ;
18849: LD_ADDR_EXP 68
18853: PUSH
18854: LD_INT 0
18856: ST_TO_ADDR
// sTeleport := false ;
18857: LD_ADDR_EXP 71
18861: PUSH
18862: LD_INT 0
18864: ST_TO_ADDR
// sOilTower := false ;
18865: LD_ADDR_EXP 73
18869: PUSH
18870: LD_INT 0
18872: ST_TO_ADDR
// sShovel := false ;
18873: LD_ADDR_EXP 74
18877: PUSH
18878: LD_INT 0
18880: ST_TO_ADDR
// sSheik := false ;
18881: LD_ADDR_EXP 75
18885: PUSH
18886: LD_INT 0
18888: ST_TO_ADDR
// sEarthquake := false ;
18889: LD_ADDR_EXP 77
18893: PUSH
18894: LD_INT 0
18896: ST_TO_ADDR
// sAI := false ;
18897: LD_ADDR_EXP 78
18901: PUSH
18902: LD_INT 0
18904: ST_TO_ADDR
// sCargo := false ;
18905: LD_ADDR_EXP 81
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// sDLaser := false ;
18913: LD_ADDR_EXP 82
18917: PUSH
18918: LD_INT 0
18920: ST_TO_ADDR
// sExchange := false ;
18921: LD_ADDR_EXP 83
18925: PUSH
18926: LD_INT 0
18928: ST_TO_ADDR
// sFac := false ;
18929: LD_ADDR_EXP 84
18933: PUSH
18934: LD_INT 0
18936: ST_TO_ADDR
// sPower := false ;
18937: LD_ADDR_EXP 85
18941: PUSH
18942: LD_INT 0
18944: ST_TO_ADDR
// sRandom := false ;
18945: LD_ADDR_EXP 86
18949: PUSH
18950: LD_INT 0
18952: ST_TO_ADDR
// sShield := false ;
18953: LD_ADDR_EXP 87
18957: PUSH
18958: LD_INT 0
18960: ST_TO_ADDR
// sTime := false ;
18961: LD_ADDR_EXP 88
18965: PUSH
18966: LD_INT 0
18968: ST_TO_ADDR
// sTools := false ;
18969: LD_ADDR_EXP 89
18973: PUSH
18974: LD_INT 0
18976: ST_TO_ADDR
// sSold := false ;
18977: LD_ADDR_EXP 54
18981: PUSH
18982: LD_INT 0
18984: ST_TO_ADDR
// sDiff := false ;
18985: LD_ADDR_EXP 55
18989: PUSH
18990: LD_INT 0
18992: ST_TO_ADDR
// sFog := false ;
18993: LD_ADDR_EXP 58
18997: PUSH
18998: LD_INT 0
19000: ST_TO_ADDR
// sReset := false ;
19001: LD_ADDR_EXP 59
19005: PUSH
19006: LD_INT 0
19008: ST_TO_ADDR
// sSun := false ;
19009: LD_ADDR_EXP 60
19013: PUSH
19014: LD_INT 0
19016: ST_TO_ADDR
// sTiger := false ;
19017: LD_ADDR_EXP 56
19021: PUSH
19022: LD_INT 0
19024: ST_TO_ADDR
// sBomb := false ;
19025: LD_ADDR_EXP 57
19029: PUSH
19030: LD_INT 0
19032: ST_TO_ADDR
// sWound := false ;
19033: LD_ADDR_EXP 65
19037: PUSH
19038: LD_INT 0
19040: ST_TO_ADDR
// sBetray := false ;
19041: LD_ADDR_EXP 69
19045: PUSH
19046: LD_INT 0
19048: ST_TO_ADDR
// sContamin := false ;
19049: LD_ADDR_EXP 70
19053: PUSH
19054: LD_INT 0
19056: ST_TO_ADDR
// sOil := false ;
19057: LD_ADDR_EXP 72
19061: PUSH
19062: LD_INT 0
19064: ST_TO_ADDR
// sStu := false ;
19065: LD_ADDR_EXP 76
19069: PUSH
19070: LD_INT 0
19072: ST_TO_ADDR
// sBazooka := false ;
19073: LD_ADDR_EXP 79
19077: PUSH
19078: LD_INT 0
19080: ST_TO_ADDR
// sMortar := false ;
19081: LD_ADDR_EXP 80
19085: PUSH
19086: LD_INT 0
19088: ST_TO_ADDR
// sRanger := false ;
19089: LD_ADDR_EXP 90
19093: PUSH
19094: LD_INT 0
19096: ST_TO_ADDR
// sComputer := false ;
19097: LD_ADDR_EXP 91
19101: PUSH
19102: LD_INT 0
19104: ST_TO_ADDR
// s30 := false ;
19105: LD_ADDR_EXP 92
19109: PUSH
19110: LD_INT 0
19112: ST_TO_ADDR
// s60 := false ;
19113: LD_ADDR_EXP 93
19117: PUSH
19118: LD_INT 0
19120: ST_TO_ADDR
// end ;
19121: LD_VAR 0 1
19125: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19126: LD_INT 0
19128: PPUSH
19129: PPUSH
19130: PPUSH
19131: PPUSH
19132: PPUSH
19133: PPUSH
19134: PPUSH
// result := [ ] ;
19135: LD_ADDR_VAR 0 2
19139: PUSH
19140: EMPTY
19141: ST_TO_ADDR
// if campaign_id = 1 then
19142: LD_OWVAR 69
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: IFFALSE 22316
// begin case mission_number of 1 :
19152: LD_OWVAR 70
19156: PUSH
19157: LD_INT 1
19159: DOUBLE
19160: EQUAL
19161: IFTRUE 19165
19163: GO 19241
19165: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19166: LD_ADDR_VAR 0 2
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 4
19176: PUSH
19177: LD_INT 11
19179: PUSH
19180: LD_INT 12
19182: PUSH
19183: LD_INT 15
19185: PUSH
19186: LD_INT 16
19188: PUSH
19189: LD_INT 22
19191: PUSH
19192: LD_INT 23
19194: PUSH
19195: LD_INT 26
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 101
19211: PUSH
19212: LD_INT 102
19214: PUSH
19215: LD_INT 106
19217: PUSH
19218: LD_INT 116
19220: PUSH
19221: LD_INT 117
19223: PUSH
19224: LD_INT 118
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: ST_TO_ADDR
19239: GO 22314
19241: LD_INT 2
19243: DOUBLE
19244: EQUAL
19245: IFTRUE 19249
19247: GO 19333
19249: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19250: LD_ADDR_VAR 0 2
19254: PUSH
19255: LD_INT 2
19257: PUSH
19258: LD_INT 4
19260: PUSH
19261: LD_INT 11
19263: PUSH
19264: LD_INT 12
19266: PUSH
19267: LD_INT 15
19269: PUSH
19270: LD_INT 16
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_INT 23
19278: PUSH
19279: LD_INT 26
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 101
19295: PUSH
19296: LD_INT 102
19298: PUSH
19299: LD_INT 105
19301: PUSH
19302: LD_INT 106
19304: PUSH
19305: LD_INT 108
19307: PUSH
19308: LD_INT 116
19310: PUSH
19311: LD_INT 117
19313: PUSH
19314: LD_INT 118
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: ST_TO_ADDR
19331: GO 22314
19333: LD_INT 3
19335: DOUBLE
19336: EQUAL
19337: IFTRUE 19341
19339: GO 19429
19341: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19342: LD_ADDR_VAR 0 2
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: LD_INT 4
19352: PUSH
19353: LD_INT 5
19355: PUSH
19356: LD_INT 11
19358: PUSH
19359: LD_INT 12
19361: PUSH
19362: LD_INT 15
19364: PUSH
19365: LD_INT 16
19367: PUSH
19368: LD_INT 22
19370: PUSH
19371: LD_INT 26
19373: PUSH
19374: LD_INT 36
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 101
19391: PUSH
19392: LD_INT 102
19394: PUSH
19395: LD_INT 105
19397: PUSH
19398: LD_INT 106
19400: PUSH
19401: LD_INT 108
19403: PUSH
19404: LD_INT 116
19406: PUSH
19407: LD_INT 117
19409: PUSH
19410: LD_INT 118
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: ST_TO_ADDR
19427: GO 22314
19429: LD_INT 4
19431: DOUBLE
19432: EQUAL
19433: IFTRUE 19437
19435: GO 19533
19437: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19438: LD_ADDR_VAR 0 2
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: LD_INT 4
19448: PUSH
19449: LD_INT 5
19451: PUSH
19452: LD_INT 8
19454: PUSH
19455: LD_INT 11
19457: PUSH
19458: LD_INT 12
19460: PUSH
19461: LD_INT 15
19463: PUSH
19464: LD_INT 16
19466: PUSH
19467: LD_INT 22
19469: PUSH
19470: LD_INT 23
19472: PUSH
19473: LD_INT 26
19475: PUSH
19476: LD_INT 36
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 101
19495: PUSH
19496: LD_INT 102
19498: PUSH
19499: LD_INT 105
19501: PUSH
19502: LD_INT 106
19504: PUSH
19505: LD_INT 108
19507: PUSH
19508: LD_INT 116
19510: PUSH
19511: LD_INT 117
19513: PUSH
19514: LD_INT 118
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: ST_TO_ADDR
19531: GO 22314
19533: LD_INT 5
19535: DOUBLE
19536: EQUAL
19537: IFTRUE 19541
19539: GO 19653
19541: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19542: LD_ADDR_VAR 0 2
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: LD_INT 4
19552: PUSH
19553: LD_INT 5
19555: PUSH
19556: LD_INT 6
19558: PUSH
19559: LD_INT 8
19561: PUSH
19562: LD_INT 11
19564: PUSH
19565: LD_INT 12
19567: PUSH
19568: LD_INT 15
19570: PUSH
19571: LD_INT 16
19573: PUSH
19574: LD_INT 22
19576: PUSH
19577: LD_INT 23
19579: PUSH
19580: LD_INT 25
19582: PUSH
19583: LD_INT 26
19585: PUSH
19586: LD_INT 36
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 101
19607: PUSH
19608: LD_INT 102
19610: PUSH
19611: LD_INT 105
19613: PUSH
19614: LD_INT 106
19616: PUSH
19617: LD_INT 108
19619: PUSH
19620: LD_INT 109
19622: PUSH
19623: LD_INT 112
19625: PUSH
19626: LD_INT 116
19628: PUSH
19629: LD_INT 117
19631: PUSH
19632: LD_INT 118
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: ST_TO_ADDR
19651: GO 22314
19653: LD_INT 6
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19793
19661: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19662: LD_ADDR_VAR 0 2
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 4
19672: PUSH
19673: LD_INT 5
19675: PUSH
19676: LD_INT 6
19678: PUSH
19679: LD_INT 8
19681: PUSH
19682: LD_INT 11
19684: PUSH
19685: LD_INT 12
19687: PUSH
19688: LD_INT 15
19690: PUSH
19691: LD_INT 16
19693: PUSH
19694: LD_INT 20
19696: PUSH
19697: LD_INT 21
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_INT 23
19705: PUSH
19706: LD_INT 25
19708: PUSH
19709: LD_INT 26
19711: PUSH
19712: LD_INT 30
19714: PUSH
19715: LD_INT 31
19717: PUSH
19718: LD_INT 32
19720: PUSH
19721: LD_INT 36
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 101
19747: PUSH
19748: LD_INT 102
19750: PUSH
19751: LD_INT 105
19753: PUSH
19754: LD_INT 106
19756: PUSH
19757: LD_INT 108
19759: PUSH
19760: LD_INT 109
19762: PUSH
19763: LD_INT 112
19765: PUSH
19766: LD_INT 116
19768: PUSH
19769: LD_INT 117
19771: PUSH
19772: LD_INT 118
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: ST_TO_ADDR
19791: GO 22314
19793: LD_INT 7
19795: DOUBLE
19796: EQUAL
19797: IFTRUE 19801
19799: GO 19913
19801: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19802: LD_ADDR_VAR 0 2
19806: PUSH
19807: LD_INT 2
19809: PUSH
19810: LD_INT 4
19812: PUSH
19813: LD_INT 5
19815: PUSH
19816: LD_INT 7
19818: PUSH
19819: LD_INT 11
19821: PUSH
19822: LD_INT 12
19824: PUSH
19825: LD_INT 15
19827: PUSH
19828: LD_INT 16
19830: PUSH
19831: LD_INT 20
19833: PUSH
19834: LD_INT 21
19836: PUSH
19837: LD_INT 22
19839: PUSH
19840: LD_INT 23
19842: PUSH
19843: LD_INT 25
19845: PUSH
19846: LD_INT 26
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 101
19867: PUSH
19868: LD_INT 102
19870: PUSH
19871: LD_INT 103
19873: PUSH
19874: LD_INT 105
19876: PUSH
19877: LD_INT 106
19879: PUSH
19880: LD_INT 108
19882: PUSH
19883: LD_INT 112
19885: PUSH
19886: LD_INT 116
19888: PUSH
19889: LD_INT 117
19891: PUSH
19892: LD_INT 118
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: ST_TO_ADDR
19911: GO 22314
19913: LD_INT 8
19915: DOUBLE
19916: EQUAL
19917: IFTRUE 19921
19919: GO 20061
19921: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19922: LD_ADDR_VAR 0 2
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: LD_INT 4
19932: PUSH
19933: LD_INT 5
19935: PUSH
19936: LD_INT 6
19938: PUSH
19939: LD_INT 7
19941: PUSH
19942: LD_INT 8
19944: PUSH
19945: LD_INT 11
19947: PUSH
19948: LD_INT 12
19950: PUSH
19951: LD_INT 15
19953: PUSH
19954: LD_INT 16
19956: PUSH
19957: LD_INT 20
19959: PUSH
19960: LD_INT 21
19962: PUSH
19963: LD_INT 22
19965: PUSH
19966: LD_INT 23
19968: PUSH
19969: LD_INT 25
19971: PUSH
19972: LD_INT 26
19974: PUSH
19975: LD_INT 30
19977: PUSH
19978: LD_INT 31
19980: PUSH
19981: LD_INT 32
19983: PUSH
19984: LD_INT 36
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 101
20011: PUSH
20012: LD_INT 102
20014: PUSH
20015: LD_INT 103
20017: PUSH
20018: LD_INT 105
20020: PUSH
20021: LD_INT 106
20023: PUSH
20024: LD_INT 108
20026: PUSH
20027: LD_INT 109
20029: PUSH
20030: LD_INT 112
20032: PUSH
20033: LD_INT 116
20035: PUSH
20036: LD_INT 117
20038: PUSH
20039: LD_INT 118
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: ST_TO_ADDR
20059: GO 22314
20061: LD_INT 9
20063: DOUBLE
20064: EQUAL
20065: IFTRUE 20069
20067: GO 20217
20069: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20070: LD_ADDR_VAR 0 2
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: LD_INT 4
20080: PUSH
20081: LD_INT 5
20083: PUSH
20084: LD_INT 6
20086: PUSH
20087: LD_INT 7
20089: PUSH
20090: LD_INT 8
20092: PUSH
20093: LD_INT 11
20095: PUSH
20096: LD_INT 12
20098: PUSH
20099: LD_INT 15
20101: PUSH
20102: LD_INT 16
20104: PUSH
20105: LD_INT 20
20107: PUSH
20108: LD_INT 21
20110: PUSH
20111: LD_INT 22
20113: PUSH
20114: LD_INT 23
20116: PUSH
20117: LD_INT 25
20119: PUSH
20120: LD_INT 26
20122: PUSH
20123: LD_INT 28
20125: PUSH
20126: LD_INT 30
20128: PUSH
20129: LD_INT 31
20131: PUSH
20132: LD_INT 32
20134: PUSH
20135: LD_INT 36
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 101
20163: PUSH
20164: LD_INT 102
20166: PUSH
20167: LD_INT 103
20169: PUSH
20170: LD_INT 105
20172: PUSH
20173: LD_INT 106
20175: PUSH
20176: LD_INT 108
20178: PUSH
20179: LD_INT 109
20181: PUSH
20182: LD_INT 112
20184: PUSH
20185: LD_INT 114
20187: PUSH
20188: LD_INT 116
20190: PUSH
20191: LD_INT 117
20193: PUSH
20194: LD_INT 118
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: ST_TO_ADDR
20215: GO 22314
20217: LD_INT 10
20219: DOUBLE
20220: EQUAL
20221: IFTRUE 20225
20223: GO 20421
20225: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 4
20236: PUSH
20237: LD_INT 5
20239: PUSH
20240: LD_INT 6
20242: PUSH
20243: LD_INT 7
20245: PUSH
20246: LD_INT 8
20248: PUSH
20249: LD_INT 9
20251: PUSH
20252: LD_INT 10
20254: PUSH
20255: LD_INT 11
20257: PUSH
20258: LD_INT 12
20260: PUSH
20261: LD_INT 13
20263: PUSH
20264: LD_INT 14
20266: PUSH
20267: LD_INT 15
20269: PUSH
20270: LD_INT 16
20272: PUSH
20273: LD_INT 17
20275: PUSH
20276: LD_INT 18
20278: PUSH
20279: LD_INT 19
20281: PUSH
20282: LD_INT 20
20284: PUSH
20285: LD_INT 21
20287: PUSH
20288: LD_INT 22
20290: PUSH
20291: LD_INT 23
20293: PUSH
20294: LD_INT 24
20296: PUSH
20297: LD_INT 25
20299: PUSH
20300: LD_INT 26
20302: PUSH
20303: LD_INT 28
20305: PUSH
20306: LD_INT 30
20308: PUSH
20309: LD_INT 31
20311: PUSH
20312: LD_INT 32
20314: PUSH
20315: LD_INT 36
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 101
20351: PUSH
20352: LD_INT 102
20354: PUSH
20355: LD_INT 103
20357: PUSH
20358: LD_INT 104
20360: PUSH
20361: LD_INT 105
20363: PUSH
20364: LD_INT 106
20366: PUSH
20367: LD_INT 107
20369: PUSH
20370: LD_INT 108
20372: PUSH
20373: LD_INT 109
20375: PUSH
20376: LD_INT 110
20378: PUSH
20379: LD_INT 111
20381: PUSH
20382: LD_INT 112
20384: PUSH
20385: LD_INT 114
20387: PUSH
20388: LD_INT 116
20390: PUSH
20391: LD_INT 117
20393: PUSH
20394: LD_INT 118
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: ST_TO_ADDR
20419: GO 22314
20421: LD_INT 11
20423: DOUBLE
20424: EQUAL
20425: IFTRUE 20429
20427: GO 20633
20429: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20430: LD_ADDR_VAR 0 2
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 3
20440: PUSH
20441: LD_INT 4
20443: PUSH
20444: LD_INT 5
20446: PUSH
20447: LD_INT 6
20449: PUSH
20450: LD_INT 7
20452: PUSH
20453: LD_INT 8
20455: PUSH
20456: LD_INT 9
20458: PUSH
20459: LD_INT 10
20461: PUSH
20462: LD_INT 11
20464: PUSH
20465: LD_INT 12
20467: PUSH
20468: LD_INT 13
20470: PUSH
20471: LD_INT 14
20473: PUSH
20474: LD_INT 15
20476: PUSH
20477: LD_INT 16
20479: PUSH
20480: LD_INT 17
20482: PUSH
20483: LD_INT 18
20485: PUSH
20486: LD_INT 19
20488: PUSH
20489: LD_INT 20
20491: PUSH
20492: LD_INT 21
20494: PUSH
20495: LD_INT 22
20497: PUSH
20498: LD_INT 23
20500: PUSH
20501: LD_INT 24
20503: PUSH
20504: LD_INT 25
20506: PUSH
20507: LD_INT 26
20509: PUSH
20510: LD_INT 28
20512: PUSH
20513: LD_INT 30
20515: PUSH
20516: LD_INT 31
20518: PUSH
20519: LD_INT 32
20521: PUSH
20522: LD_INT 34
20524: PUSH
20525: LD_INT 36
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 101
20563: PUSH
20564: LD_INT 102
20566: PUSH
20567: LD_INT 103
20569: PUSH
20570: LD_INT 104
20572: PUSH
20573: LD_INT 105
20575: PUSH
20576: LD_INT 106
20578: PUSH
20579: LD_INT 107
20581: PUSH
20582: LD_INT 108
20584: PUSH
20585: LD_INT 109
20587: PUSH
20588: LD_INT 110
20590: PUSH
20591: LD_INT 111
20593: PUSH
20594: LD_INT 112
20596: PUSH
20597: LD_INT 114
20599: PUSH
20600: LD_INT 116
20602: PUSH
20603: LD_INT 117
20605: PUSH
20606: LD_INT 118
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: ST_TO_ADDR
20631: GO 22314
20633: LD_INT 12
20635: DOUBLE
20636: EQUAL
20637: IFTRUE 20641
20639: GO 20861
20641: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20642: LD_ADDR_VAR 0 2
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 2
20652: PUSH
20653: LD_INT 3
20655: PUSH
20656: LD_INT 4
20658: PUSH
20659: LD_INT 5
20661: PUSH
20662: LD_INT 6
20664: PUSH
20665: LD_INT 7
20667: PUSH
20668: LD_INT 8
20670: PUSH
20671: LD_INT 9
20673: PUSH
20674: LD_INT 10
20676: PUSH
20677: LD_INT 11
20679: PUSH
20680: LD_INT 12
20682: PUSH
20683: LD_INT 13
20685: PUSH
20686: LD_INT 14
20688: PUSH
20689: LD_INT 15
20691: PUSH
20692: LD_INT 16
20694: PUSH
20695: LD_INT 17
20697: PUSH
20698: LD_INT 18
20700: PUSH
20701: LD_INT 19
20703: PUSH
20704: LD_INT 20
20706: PUSH
20707: LD_INT 21
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_INT 23
20715: PUSH
20716: LD_INT 24
20718: PUSH
20719: LD_INT 25
20721: PUSH
20722: LD_INT 26
20724: PUSH
20725: LD_INT 27
20727: PUSH
20728: LD_INT 28
20730: PUSH
20731: LD_INT 30
20733: PUSH
20734: LD_INT 31
20736: PUSH
20737: LD_INT 32
20739: PUSH
20740: LD_INT 33
20742: PUSH
20743: LD_INT 34
20745: PUSH
20746: LD_INT 36
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 101
20787: PUSH
20788: LD_INT 102
20790: PUSH
20791: LD_INT 103
20793: PUSH
20794: LD_INT 104
20796: PUSH
20797: LD_INT 105
20799: PUSH
20800: LD_INT 106
20802: PUSH
20803: LD_INT 107
20805: PUSH
20806: LD_INT 108
20808: PUSH
20809: LD_INT 109
20811: PUSH
20812: LD_INT 110
20814: PUSH
20815: LD_INT 111
20817: PUSH
20818: LD_INT 112
20820: PUSH
20821: LD_INT 113
20823: PUSH
20824: LD_INT 114
20826: PUSH
20827: LD_INT 116
20829: PUSH
20830: LD_INT 117
20832: PUSH
20833: LD_INT 118
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: ST_TO_ADDR
20859: GO 22314
20861: LD_INT 13
20863: DOUBLE
20864: EQUAL
20865: IFTRUE 20869
20867: GO 21077
20869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20870: LD_ADDR_VAR 0 2
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 2
20880: PUSH
20881: LD_INT 3
20883: PUSH
20884: LD_INT 4
20886: PUSH
20887: LD_INT 5
20889: PUSH
20890: LD_INT 8
20892: PUSH
20893: LD_INT 9
20895: PUSH
20896: LD_INT 10
20898: PUSH
20899: LD_INT 11
20901: PUSH
20902: LD_INT 12
20904: PUSH
20905: LD_INT 14
20907: PUSH
20908: LD_INT 15
20910: PUSH
20911: LD_INT 16
20913: PUSH
20914: LD_INT 17
20916: PUSH
20917: LD_INT 18
20919: PUSH
20920: LD_INT 19
20922: PUSH
20923: LD_INT 20
20925: PUSH
20926: LD_INT 21
20928: PUSH
20929: LD_INT 22
20931: PUSH
20932: LD_INT 23
20934: PUSH
20935: LD_INT 24
20937: PUSH
20938: LD_INT 25
20940: PUSH
20941: LD_INT 26
20943: PUSH
20944: LD_INT 27
20946: PUSH
20947: LD_INT 28
20949: PUSH
20950: LD_INT 30
20952: PUSH
20953: LD_INT 31
20955: PUSH
20956: LD_INT 32
20958: PUSH
20959: LD_INT 33
20961: PUSH
20962: LD_INT 34
20964: PUSH
20965: LD_INT 36
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 101
21003: PUSH
21004: LD_INT 102
21006: PUSH
21007: LD_INT 103
21009: PUSH
21010: LD_INT 104
21012: PUSH
21013: LD_INT 105
21015: PUSH
21016: LD_INT 106
21018: PUSH
21019: LD_INT 107
21021: PUSH
21022: LD_INT 108
21024: PUSH
21025: LD_INT 109
21027: PUSH
21028: LD_INT 110
21030: PUSH
21031: LD_INT 111
21033: PUSH
21034: LD_INT 112
21036: PUSH
21037: LD_INT 113
21039: PUSH
21040: LD_INT 114
21042: PUSH
21043: LD_INT 116
21045: PUSH
21046: LD_INT 117
21048: PUSH
21049: LD_INT 118
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: ST_TO_ADDR
21075: GO 22314
21077: LD_INT 14
21079: DOUBLE
21080: EQUAL
21081: IFTRUE 21085
21083: GO 21309
21085: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21086: LD_ADDR_VAR 0 2
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: LD_INT 4
21102: PUSH
21103: LD_INT 5
21105: PUSH
21106: LD_INT 6
21108: PUSH
21109: LD_INT 7
21111: PUSH
21112: LD_INT 8
21114: PUSH
21115: LD_INT 9
21117: PUSH
21118: LD_INT 10
21120: PUSH
21121: LD_INT 11
21123: PUSH
21124: LD_INT 12
21126: PUSH
21127: LD_INT 13
21129: PUSH
21130: LD_INT 14
21132: PUSH
21133: LD_INT 15
21135: PUSH
21136: LD_INT 16
21138: PUSH
21139: LD_INT 17
21141: PUSH
21142: LD_INT 18
21144: PUSH
21145: LD_INT 19
21147: PUSH
21148: LD_INT 20
21150: PUSH
21151: LD_INT 21
21153: PUSH
21154: LD_INT 22
21156: PUSH
21157: LD_INT 23
21159: PUSH
21160: LD_INT 24
21162: PUSH
21163: LD_INT 25
21165: PUSH
21166: LD_INT 26
21168: PUSH
21169: LD_INT 27
21171: PUSH
21172: LD_INT 28
21174: PUSH
21175: LD_INT 29
21177: PUSH
21178: LD_INT 30
21180: PUSH
21181: LD_INT 31
21183: PUSH
21184: LD_INT 32
21186: PUSH
21187: LD_INT 33
21189: PUSH
21190: LD_INT 34
21192: PUSH
21193: LD_INT 36
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 101
21235: PUSH
21236: LD_INT 102
21238: PUSH
21239: LD_INT 103
21241: PUSH
21242: LD_INT 104
21244: PUSH
21245: LD_INT 105
21247: PUSH
21248: LD_INT 106
21250: PUSH
21251: LD_INT 107
21253: PUSH
21254: LD_INT 108
21256: PUSH
21257: LD_INT 109
21259: PUSH
21260: LD_INT 110
21262: PUSH
21263: LD_INT 111
21265: PUSH
21266: LD_INT 112
21268: PUSH
21269: LD_INT 113
21271: PUSH
21272: LD_INT 114
21274: PUSH
21275: LD_INT 116
21277: PUSH
21278: LD_INT 117
21280: PUSH
21281: LD_INT 118
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: ST_TO_ADDR
21307: GO 22314
21309: LD_INT 15
21311: DOUBLE
21312: EQUAL
21313: IFTRUE 21317
21315: GO 21541
21317: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21318: LD_ADDR_VAR 0 2
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 3
21331: PUSH
21332: LD_INT 4
21334: PUSH
21335: LD_INT 5
21337: PUSH
21338: LD_INT 6
21340: PUSH
21341: LD_INT 7
21343: PUSH
21344: LD_INT 8
21346: PUSH
21347: LD_INT 9
21349: PUSH
21350: LD_INT 10
21352: PUSH
21353: LD_INT 11
21355: PUSH
21356: LD_INT 12
21358: PUSH
21359: LD_INT 13
21361: PUSH
21362: LD_INT 14
21364: PUSH
21365: LD_INT 15
21367: PUSH
21368: LD_INT 16
21370: PUSH
21371: LD_INT 17
21373: PUSH
21374: LD_INT 18
21376: PUSH
21377: LD_INT 19
21379: PUSH
21380: LD_INT 20
21382: PUSH
21383: LD_INT 21
21385: PUSH
21386: LD_INT 22
21388: PUSH
21389: LD_INT 23
21391: PUSH
21392: LD_INT 24
21394: PUSH
21395: LD_INT 25
21397: PUSH
21398: LD_INT 26
21400: PUSH
21401: LD_INT 27
21403: PUSH
21404: LD_INT 28
21406: PUSH
21407: LD_INT 29
21409: PUSH
21410: LD_INT 30
21412: PUSH
21413: LD_INT 31
21415: PUSH
21416: LD_INT 32
21418: PUSH
21419: LD_INT 33
21421: PUSH
21422: LD_INT 34
21424: PUSH
21425: LD_INT 36
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 101
21467: PUSH
21468: LD_INT 102
21470: PUSH
21471: LD_INT 103
21473: PUSH
21474: LD_INT 104
21476: PUSH
21477: LD_INT 105
21479: PUSH
21480: LD_INT 106
21482: PUSH
21483: LD_INT 107
21485: PUSH
21486: LD_INT 108
21488: PUSH
21489: LD_INT 109
21491: PUSH
21492: LD_INT 110
21494: PUSH
21495: LD_INT 111
21497: PUSH
21498: LD_INT 112
21500: PUSH
21501: LD_INT 113
21503: PUSH
21504: LD_INT 114
21506: PUSH
21507: LD_INT 116
21509: PUSH
21510: LD_INT 117
21512: PUSH
21513: LD_INT 118
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: ST_TO_ADDR
21539: GO 22314
21541: LD_INT 16
21543: DOUBLE
21544: EQUAL
21545: IFTRUE 21549
21547: GO 21685
21549: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21550: LD_ADDR_VAR 0 2
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 4
21560: PUSH
21561: LD_INT 5
21563: PUSH
21564: LD_INT 7
21566: PUSH
21567: LD_INT 11
21569: PUSH
21570: LD_INT 12
21572: PUSH
21573: LD_INT 15
21575: PUSH
21576: LD_INT 16
21578: PUSH
21579: LD_INT 20
21581: PUSH
21582: LD_INT 21
21584: PUSH
21585: LD_INT 22
21587: PUSH
21588: LD_INT 23
21590: PUSH
21591: LD_INT 25
21593: PUSH
21594: LD_INT 26
21596: PUSH
21597: LD_INT 30
21599: PUSH
21600: LD_INT 31
21602: PUSH
21603: LD_INT 32
21605: PUSH
21606: LD_INT 33
21608: PUSH
21609: LD_INT 34
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 101
21635: PUSH
21636: LD_INT 102
21638: PUSH
21639: LD_INT 103
21641: PUSH
21642: LD_INT 106
21644: PUSH
21645: LD_INT 108
21647: PUSH
21648: LD_INT 112
21650: PUSH
21651: LD_INT 113
21653: PUSH
21654: LD_INT 114
21656: PUSH
21657: LD_INT 116
21659: PUSH
21660: LD_INT 117
21662: PUSH
21663: LD_INT 118
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: ST_TO_ADDR
21683: GO 22314
21685: LD_INT 17
21687: DOUBLE
21688: EQUAL
21689: IFTRUE 21693
21691: GO 21917
21693: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21694: LD_ADDR_VAR 0 2
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: LD_INT 2
21704: PUSH
21705: LD_INT 3
21707: PUSH
21708: LD_INT 4
21710: PUSH
21711: LD_INT 5
21713: PUSH
21714: LD_INT 6
21716: PUSH
21717: LD_INT 7
21719: PUSH
21720: LD_INT 8
21722: PUSH
21723: LD_INT 9
21725: PUSH
21726: LD_INT 10
21728: PUSH
21729: LD_INT 11
21731: PUSH
21732: LD_INT 12
21734: PUSH
21735: LD_INT 13
21737: PUSH
21738: LD_INT 14
21740: PUSH
21741: LD_INT 15
21743: PUSH
21744: LD_INT 16
21746: PUSH
21747: LD_INT 17
21749: PUSH
21750: LD_INT 18
21752: PUSH
21753: LD_INT 19
21755: PUSH
21756: LD_INT 20
21758: PUSH
21759: LD_INT 21
21761: PUSH
21762: LD_INT 22
21764: PUSH
21765: LD_INT 23
21767: PUSH
21768: LD_INT 24
21770: PUSH
21771: LD_INT 25
21773: PUSH
21774: LD_INT 26
21776: PUSH
21777: LD_INT 27
21779: PUSH
21780: LD_INT 28
21782: PUSH
21783: LD_INT 29
21785: PUSH
21786: LD_INT 30
21788: PUSH
21789: LD_INT 31
21791: PUSH
21792: LD_INT 32
21794: PUSH
21795: LD_INT 33
21797: PUSH
21798: LD_INT 34
21800: PUSH
21801: LD_INT 36
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 101
21843: PUSH
21844: LD_INT 102
21846: PUSH
21847: LD_INT 103
21849: PUSH
21850: LD_INT 104
21852: PUSH
21853: LD_INT 105
21855: PUSH
21856: LD_INT 106
21858: PUSH
21859: LD_INT 107
21861: PUSH
21862: LD_INT 108
21864: PUSH
21865: LD_INT 109
21867: PUSH
21868: LD_INT 110
21870: PUSH
21871: LD_INT 111
21873: PUSH
21874: LD_INT 112
21876: PUSH
21877: LD_INT 113
21879: PUSH
21880: LD_INT 114
21882: PUSH
21883: LD_INT 116
21885: PUSH
21886: LD_INT 117
21888: PUSH
21889: LD_INT 118
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: ST_TO_ADDR
21915: GO 22314
21917: LD_INT 18
21919: DOUBLE
21920: EQUAL
21921: IFTRUE 21925
21923: GO 22073
21925: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: LD_INT 4
21936: PUSH
21937: LD_INT 5
21939: PUSH
21940: LD_INT 7
21942: PUSH
21943: LD_INT 11
21945: PUSH
21946: LD_INT 12
21948: PUSH
21949: LD_INT 15
21951: PUSH
21952: LD_INT 16
21954: PUSH
21955: LD_INT 20
21957: PUSH
21958: LD_INT 21
21960: PUSH
21961: LD_INT 22
21963: PUSH
21964: LD_INT 23
21966: PUSH
21967: LD_INT 25
21969: PUSH
21970: LD_INT 26
21972: PUSH
21973: LD_INT 30
21975: PUSH
21976: LD_INT 31
21978: PUSH
21979: LD_INT 32
21981: PUSH
21982: LD_INT 33
21984: PUSH
21985: LD_INT 34
21987: PUSH
21988: LD_INT 35
21990: PUSH
21991: LD_INT 36
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 101
22019: PUSH
22020: LD_INT 102
22022: PUSH
22023: LD_INT 103
22025: PUSH
22026: LD_INT 106
22028: PUSH
22029: LD_INT 108
22031: PUSH
22032: LD_INT 112
22034: PUSH
22035: LD_INT 113
22037: PUSH
22038: LD_INT 114
22040: PUSH
22041: LD_INT 115
22043: PUSH
22044: LD_INT 116
22046: PUSH
22047: LD_INT 117
22049: PUSH
22050: LD_INT 118
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: ST_TO_ADDR
22071: GO 22314
22073: LD_INT 19
22075: DOUBLE
22076: EQUAL
22077: IFTRUE 22081
22079: GO 22313
22081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22082: LD_ADDR_VAR 0 2
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 3
22095: PUSH
22096: LD_INT 4
22098: PUSH
22099: LD_INT 5
22101: PUSH
22102: LD_INT 6
22104: PUSH
22105: LD_INT 7
22107: PUSH
22108: LD_INT 8
22110: PUSH
22111: LD_INT 9
22113: PUSH
22114: LD_INT 10
22116: PUSH
22117: LD_INT 11
22119: PUSH
22120: LD_INT 12
22122: PUSH
22123: LD_INT 13
22125: PUSH
22126: LD_INT 14
22128: PUSH
22129: LD_INT 15
22131: PUSH
22132: LD_INT 16
22134: PUSH
22135: LD_INT 17
22137: PUSH
22138: LD_INT 18
22140: PUSH
22141: LD_INT 19
22143: PUSH
22144: LD_INT 20
22146: PUSH
22147: LD_INT 21
22149: PUSH
22150: LD_INT 22
22152: PUSH
22153: LD_INT 23
22155: PUSH
22156: LD_INT 24
22158: PUSH
22159: LD_INT 25
22161: PUSH
22162: LD_INT 26
22164: PUSH
22165: LD_INT 27
22167: PUSH
22168: LD_INT 28
22170: PUSH
22171: LD_INT 29
22173: PUSH
22174: LD_INT 30
22176: PUSH
22177: LD_INT 31
22179: PUSH
22180: LD_INT 32
22182: PUSH
22183: LD_INT 33
22185: PUSH
22186: LD_INT 34
22188: PUSH
22189: LD_INT 35
22191: PUSH
22192: LD_INT 36
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 101
22235: PUSH
22236: LD_INT 102
22238: PUSH
22239: LD_INT 103
22241: PUSH
22242: LD_INT 104
22244: PUSH
22245: LD_INT 105
22247: PUSH
22248: LD_INT 106
22250: PUSH
22251: LD_INT 107
22253: PUSH
22254: LD_INT 108
22256: PUSH
22257: LD_INT 109
22259: PUSH
22260: LD_INT 110
22262: PUSH
22263: LD_INT 111
22265: PUSH
22266: LD_INT 112
22268: PUSH
22269: LD_INT 113
22271: PUSH
22272: LD_INT 114
22274: PUSH
22275: LD_INT 115
22277: PUSH
22278: LD_INT 116
22280: PUSH
22281: LD_INT 117
22283: PUSH
22284: LD_INT 118
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: ST_TO_ADDR
22311: GO 22314
22313: POP
// end else
22314: GO 22545
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22316: LD_ADDR_VAR 0 2
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: LD_INT 4
22332: PUSH
22333: LD_INT 5
22335: PUSH
22336: LD_INT 6
22338: PUSH
22339: LD_INT 7
22341: PUSH
22342: LD_INT 8
22344: PUSH
22345: LD_INT 9
22347: PUSH
22348: LD_INT 10
22350: PUSH
22351: LD_INT 11
22353: PUSH
22354: LD_INT 12
22356: PUSH
22357: LD_INT 13
22359: PUSH
22360: LD_INT 14
22362: PUSH
22363: LD_INT 15
22365: PUSH
22366: LD_INT 16
22368: PUSH
22369: LD_INT 17
22371: PUSH
22372: LD_INT 18
22374: PUSH
22375: LD_INT 19
22377: PUSH
22378: LD_INT 20
22380: PUSH
22381: LD_INT 21
22383: PUSH
22384: LD_INT 22
22386: PUSH
22387: LD_INT 23
22389: PUSH
22390: LD_INT 24
22392: PUSH
22393: LD_INT 25
22395: PUSH
22396: LD_INT 26
22398: PUSH
22399: LD_INT 27
22401: PUSH
22402: LD_INT 28
22404: PUSH
22405: LD_INT 29
22407: PUSH
22408: LD_INT 30
22410: PUSH
22411: LD_INT 31
22413: PUSH
22414: LD_INT 32
22416: PUSH
22417: LD_INT 33
22419: PUSH
22420: LD_INT 34
22422: PUSH
22423: LD_INT 35
22425: PUSH
22426: LD_INT 36
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 101
22469: PUSH
22470: LD_INT 102
22472: PUSH
22473: LD_INT 103
22475: PUSH
22476: LD_INT 104
22478: PUSH
22479: LD_INT 105
22481: PUSH
22482: LD_INT 106
22484: PUSH
22485: LD_INT 107
22487: PUSH
22488: LD_INT 108
22490: PUSH
22491: LD_INT 109
22493: PUSH
22494: LD_INT 110
22496: PUSH
22497: LD_INT 111
22499: PUSH
22500: LD_INT 112
22502: PUSH
22503: LD_INT 113
22505: PUSH
22506: LD_INT 114
22508: PUSH
22509: LD_INT 115
22511: PUSH
22512: LD_INT 116
22514: PUSH
22515: LD_INT 117
22517: PUSH
22518: LD_INT 118
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: ST_TO_ADDR
// if result then
22545: LD_VAR 0 2
22549: IFFALSE 23335
// begin normal :=  ;
22551: LD_ADDR_VAR 0 5
22555: PUSH
22556: LD_STRING 
22558: ST_TO_ADDR
// hardcore :=  ;
22559: LD_ADDR_VAR 0 6
22563: PUSH
22564: LD_STRING 
22566: ST_TO_ADDR
// active :=  ;
22567: LD_ADDR_VAR 0 7
22571: PUSH
22572: LD_STRING 
22574: ST_TO_ADDR
// for i = 1 to normalCounter do
22575: LD_ADDR_VAR 0 8
22579: PUSH
22580: DOUBLE
22581: LD_INT 1
22583: DEC
22584: ST_TO_ADDR
22585: LD_EXP 38
22589: PUSH
22590: FOR_TO
22591: IFFALSE 22692
// begin tmp := 0 ;
22593: LD_ADDR_VAR 0 3
22597: PUSH
22598: LD_STRING 0
22600: ST_TO_ADDR
// if result [ 1 ] then
22601: LD_VAR 0 2
22605: PUSH
22606: LD_INT 1
22608: ARRAY
22609: IFFALSE 22674
// if result [ 1 ] [ 1 ] = i then
22611: LD_VAR 0 2
22615: PUSH
22616: LD_INT 1
22618: ARRAY
22619: PUSH
22620: LD_INT 1
22622: ARRAY
22623: PUSH
22624: LD_VAR 0 8
22628: EQUAL
22629: IFFALSE 22674
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22631: LD_ADDR_VAR 0 2
22635: PUSH
22636: LD_VAR 0 2
22640: PPUSH
22641: LD_INT 1
22643: PPUSH
22644: LD_VAR 0 2
22648: PUSH
22649: LD_INT 1
22651: ARRAY
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: CALL_OW 3
22660: PPUSH
22661: CALL_OW 1
22665: ST_TO_ADDR
// tmp := 1 ;
22666: LD_ADDR_VAR 0 3
22670: PUSH
22671: LD_STRING 1
22673: ST_TO_ADDR
// end ; normal := normal & tmp ;
22674: LD_ADDR_VAR 0 5
22678: PUSH
22679: LD_VAR 0 5
22683: PUSH
22684: LD_VAR 0 3
22688: STR
22689: ST_TO_ADDR
// end ;
22690: GO 22590
22692: POP
22693: POP
// for i = 1 to hardcoreCounter do
22694: LD_ADDR_VAR 0 8
22698: PUSH
22699: DOUBLE
22700: LD_INT 1
22702: DEC
22703: ST_TO_ADDR
22704: LD_EXP 39
22708: PUSH
22709: FOR_TO
22710: IFFALSE 22815
// begin tmp := 0 ;
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_STRING 0
22719: ST_TO_ADDR
// if result [ 2 ] then
22720: LD_VAR 0 2
22724: PUSH
22725: LD_INT 2
22727: ARRAY
22728: IFFALSE 22797
// if result [ 2 ] [ 1 ] = 100 + i then
22730: LD_VAR 0 2
22734: PUSH
22735: LD_INT 2
22737: ARRAY
22738: PUSH
22739: LD_INT 1
22741: ARRAY
22742: PUSH
22743: LD_INT 100
22745: PUSH
22746: LD_VAR 0 8
22750: PLUS
22751: EQUAL
22752: IFFALSE 22797
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22754: LD_ADDR_VAR 0 2
22758: PUSH
22759: LD_VAR 0 2
22763: PPUSH
22764: LD_INT 2
22766: PPUSH
22767: LD_VAR 0 2
22771: PUSH
22772: LD_INT 2
22774: ARRAY
22775: PPUSH
22776: LD_INT 1
22778: PPUSH
22779: CALL_OW 3
22783: PPUSH
22784: CALL_OW 1
22788: ST_TO_ADDR
// tmp := 1 ;
22789: LD_ADDR_VAR 0 3
22793: PUSH
22794: LD_STRING 1
22796: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22797: LD_ADDR_VAR 0 6
22801: PUSH
22802: LD_VAR 0 6
22806: PUSH
22807: LD_VAR 0 3
22811: STR
22812: ST_TO_ADDR
// end ;
22813: GO 22709
22815: POP
22816: POP
// if isGameLoad then
22817: LD_VAR 0 1
22821: IFFALSE 23296
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22823: LD_ADDR_VAR 0 4
22827: PUSH
22828: LD_EXP 42
22832: PUSH
22833: LD_EXP 41
22837: PUSH
22838: LD_EXP 43
22842: PUSH
22843: LD_EXP 40
22847: PUSH
22848: LD_EXP 44
22852: PUSH
22853: LD_EXP 45
22857: PUSH
22858: LD_EXP 46
22862: PUSH
22863: LD_EXP 47
22867: PUSH
22868: LD_EXP 48
22872: PUSH
22873: LD_EXP 49
22877: PUSH
22878: LD_EXP 50
22882: PUSH
22883: LD_EXP 51
22887: PUSH
22888: LD_EXP 52
22892: PUSH
22893: LD_EXP 53
22897: PUSH
22898: LD_EXP 61
22902: PUSH
22903: LD_EXP 62
22907: PUSH
22908: LD_EXP 63
22912: PUSH
22913: LD_EXP 64
22917: PUSH
22918: LD_EXP 66
22922: PUSH
22923: LD_EXP 67
22927: PUSH
22928: LD_EXP 68
22932: PUSH
22933: LD_EXP 71
22937: PUSH
22938: LD_EXP 73
22942: PUSH
22943: LD_EXP 74
22947: PUSH
22948: LD_EXP 75
22952: PUSH
22953: LD_EXP 77
22957: PUSH
22958: LD_EXP 78
22962: PUSH
22963: LD_EXP 81
22967: PUSH
22968: LD_EXP 82
22972: PUSH
22973: LD_EXP 83
22977: PUSH
22978: LD_EXP 84
22982: PUSH
22983: LD_EXP 85
22987: PUSH
22988: LD_EXP 86
22992: PUSH
22993: LD_EXP 87
22997: PUSH
22998: LD_EXP 88
23002: PUSH
23003: LD_EXP 89
23007: PUSH
23008: LD_EXP 54
23012: PUSH
23013: LD_EXP 55
23017: PUSH
23018: LD_EXP 58
23022: PUSH
23023: LD_EXP 59
23027: PUSH
23028: LD_EXP 60
23032: PUSH
23033: LD_EXP 56
23037: PUSH
23038: LD_EXP 57
23042: PUSH
23043: LD_EXP 65
23047: PUSH
23048: LD_EXP 69
23052: PUSH
23053: LD_EXP 70
23057: PUSH
23058: LD_EXP 72
23062: PUSH
23063: LD_EXP 76
23067: PUSH
23068: LD_EXP 79
23072: PUSH
23073: LD_EXP 80
23077: PUSH
23078: LD_EXP 90
23082: PUSH
23083: LD_EXP 91
23087: PUSH
23088: LD_EXP 92
23092: PUSH
23093: LD_EXP 93
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: ST_TO_ADDR
// tmp :=  ;
23154: LD_ADDR_VAR 0 3
23158: PUSH
23159: LD_STRING 
23161: ST_TO_ADDR
// for i = 1 to normalCounter do
23162: LD_ADDR_VAR 0 8
23166: PUSH
23167: DOUBLE
23168: LD_INT 1
23170: DEC
23171: ST_TO_ADDR
23172: LD_EXP 38
23176: PUSH
23177: FOR_TO
23178: IFFALSE 23214
// begin if flags [ i ] then
23180: LD_VAR 0 4
23184: PUSH
23185: LD_VAR 0 8
23189: ARRAY
23190: IFFALSE 23212
// tmp := tmp & i & ; ;
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_VAR 0 3
23201: PUSH
23202: LD_VAR 0 8
23206: STR
23207: PUSH
23208: LD_STRING ;
23210: STR
23211: ST_TO_ADDR
// end ;
23212: GO 23177
23214: POP
23215: POP
// for i = 1 to hardcoreCounter do
23216: LD_ADDR_VAR 0 8
23220: PUSH
23221: DOUBLE
23222: LD_INT 1
23224: DEC
23225: ST_TO_ADDR
23226: LD_EXP 39
23230: PUSH
23231: FOR_TO
23232: IFFALSE 23278
// begin if flags [ normalCounter + i ] then
23234: LD_VAR 0 4
23238: PUSH
23239: LD_EXP 38
23243: PUSH
23244: LD_VAR 0 8
23248: PLUS
23249: ARRAY
23250: IFFALSE 23276
// tmp := tmp & ( 100 + i ) & ; ;
23252: LD_ADDR_VAR 0 3
23256: PUSH
23257: LD_VAR 0 3
23261: PUSH
23262: LD_INT 100
23264: PUSH
23265: LD_VAR 0 8
23269: PLUS
23270: STR
23271: PUSH
23272: LD_STRING ;
23274: STR
23275: ST_TO_ADDR
// end ;
23276: GO 23231
23278: POP
23279: POP
// if tmp then
23280: LD_VAR 0 3
23284: IFFALSE 23296
// active := tmp ;
23286: LD_ADDR_VAR 0 7
23290: PUSH
23291: LD_VAR 0 3
23295: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23296: LD_STRING getStreamItemsFromMission("
23298: PUSH
23299: LD_VAR 0 5
23303: STR
23304: PUSH
23305: LD_STRING ","
23307: STR
23308: PUSH
23309: LD_VAR 0 6
23313: STR
23314: PUSH
23315: LD_STRING ","
23317: STR
23318: PUSH
23319: LD_VAR 0 7
23323: STR
23324: PUSH
23325: LD_STRING ")
23327: STR
23328: PPUSH
23329: CALL_OW 559
// end else
23333: GO 23342
// ToLua ( getStreamItemsFromMission("","","") ) ;
23335: LD_STRING getStreamItemsFromMission("","","")
23337: PPUSH
23338: CALL_OW 559
// end ;
23342: LD_VAR 0 2
23346: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23347: LD_EXP 37
23351: IFFALSE 23359
23353: PUSH
23354: LD_EXP 42
23358: AND
23359: IFFALSE 23483
23361: GO 23363
23363: DISABLE
23364: LD_INT 0
23366: PPUSH
23367: PPUSH
// begin enable ;
23368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23369: LD_ADDR_VAR 0 2
23373: PUSH
23374: LD_INT 22
23376: PUSH
23377: LD_OWVAR 2
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: LD_INT 34
23391: PUSH
23392: LD_INT 7
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 34
23401: PUSH
23402: LD_INT 45
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 34
23411: PUSH
23412: LD_INT 28
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 34
23421: PUSH
23422: LD_INT 47
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PPUSH
23440: CALL_OW 69
23444: ST_TO_ADDR
// if not tmp then
23445: LD_VAR 0 2
23449: NOT
23450: IFFALSE 23454
// exit ;
23452: GO 23483
// for i in tmp do
23454: LD_ADDR_VAR 0 1
23458: PUSH
23459: LD_VAR 0 2
23463: PUSH
23464: FOR_IN
23465: IFFALSE 23481
// begin SetLives ( i , 0 ) ;
23467: LD_VAR 0 1
23471: PPUSH
23472: LD_INT 0
23474: PPUSH
23475: CALL_OW 234
// end ;
23479: GO 23464
23481: POP
23482: POP
// end ;
23483: PPOPN 2
23485: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23486: LD_EXP 37
23490: IFFALSE 23498
23492: PUSH
23493: LD_EXP 43
23497: AND
23498: IFFALSE 23582
23500: GO 23502
23502: DISABLE
23503: LD_INT 0
23505: PPUSH
23506: PPUSH
// begin enable ;
23507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23508: LD_ADDR_VAR 0 2
23512: PUSH
23513: LD_INT 22
23515: PUSH
23516: LD_OWVAR 2
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 32
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PPUSH
23539: CALL_OW 69
23543: ST_TO_ADDR
// if not tmp then
23544: LD_VAR 0 2
23548: NOT
23549: IFFALSE 23553
// exit ;
23551: GO 23582
// for i in tmp do
23553: LD_ADDR_VAR 0 1
23557: PUSH
23558: LD_VAR 0 2
23562: PUSH
23563: FOR_IN
23564: IFFALSE 23580
// begin SetLives ( i , 0 ) ;
23566: LD_VAR 0 1
23570: PPUSH
23571: LD_INT 0
23573: PPUSH
23574: CALL_OW 234
// end ;
23578: GO 23563
23580: POP
23581: POP
// end ;
23582: PPOPN 2
23584: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23585: LD_EXP 37
23589: IFFALSE 23597
23591: PUSH
23592: LD_EXP 40
23596: AND
23597: IFFALSE 23690
23599: GO 23601
23601: DISABLE
23602: LD_INT 0
23604: PPUSH
// begin enable ;
23605: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23606: LD_ADDR_VAR 0 1
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_OWVAR 2
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 2
23625: PUSH
23626: LD_INT 25
23628: PUSH
23629: LD_INT 5
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 25
23638: PUSH
23639: LD_INT 9
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 25
23648: PUSH
23649: LD_INT 8
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PPUSH
23666: CALL_OW 69
23670: PUSH
23671: FOR_IN
23672: IFFALSE 23688
// begin SetClass ( i , 1 ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_INT 1
23681: PPUSH
23682: CALL_OW 336
// end ;
23686: GO 23671
23688: POP
23689: POP
// end ;
23690: PPOPN 1
23692: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23693: LD_EXP 37
23697: IFFALSE 23705
23699: PUSH
23700: LD_EXP 41
23704: AND
23705: IFFALSE 23717
23707: PUSH
23708: LD_OWVAR 65
23712: PUSH
23713: LD_INT 7
23715: LESS
23716: AND
23717: IFFALSE 23731
23719: GO 23721
23721: DISABLE
// begin enable ;
23722: ENABLE
// game_speed := 7 ;
23723: LD_ADDR_OWVAR 65
23727: PUSH
23728: LD_INT 7
23730: ST_TO_ADDR
// end ;
23731: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23732: LD_EXP 37
23736: IFFALSE 23744
23738: PUSH
23739: LD_EXP 44
23743: AND
23744: IFFALSE 23946
23746: GO 23748
23748: DISABLE
23749: LD_INT 0
23751: PPUSH
23752: PPUSH
23753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23754: LD_ADDR_VAR 0 3
23758: PUSH
23759: LD_INT 81
23761: PUSH
23762: LD_OWVAR 2
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 21
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PPUSH
23785: CALL_OW 69
23789: ST_TO_ADDR
// if not tmp then
23790: LD_VAR 0 3
23794: NOT
23795: IFFALSE 23799
// exit ;
23797: GO 23946
// if tmp > 5 then
23799: LD_VAR 0 3
23803: PUSH
23804: LD_INT 5
23806: GREATER
23807: IFFALSE 23819
// k := 5 else
23809: LD_ADDR_VAR 0 2
23813: PUSH
23814: LD_INT 5
23816: ST_TO_ADDR
23817: GO 23829
// k := tmp ;
23819: LD_ADDR_VAR 0 2
23823: PUSH
23824: LD_VAR 0 3
23828: ST_TO_ADDR
// for i := 1 to k do
23829: LD_ADDR_VAR 0 1
23833: PUSH
23834: DOUBLE
23835: LD_INT 1
23837: DEC
23838: ST_TO_ADDR
23839: LD_VAR 0 2
23843: PUSH
23844: FOR_TO
23845: IFFALSE 23944
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23847: LD_VAR 0 3
23851: PUSH
23852: LD_VAR 0 1
23856: ARRAY
23857: PPUSH
23858: LD_VAR 0 1
23862: PUSH
23863: LD_INT 4
23865: MOD
23866: PUSH
23867: LD_INT 1
23869: PLUS
23870: PPUSH
23871: CALL_OW 259
23875: PUSH
23876: LD_INT 10
23878: LESS
23879: IFFALSE 23942
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23881: LD_VAR 0 3
23885: PUSH
23886: LD_VAR 0 1
23890: ARRAY
23891: PPUSH
23892: LD_VAR 0 1
23896: PUSH
23897: LD_INT 4
23899: MOD
23900: PUSH
23901: LD_INT 1
23903: PLUS
23904: PPUSH
23905: LD_VAR 0 3
23909: PUSH
23910: LD_VAR 0 1
23914: ARRAY
23915: PPUSH
23916: LD_VAR 0 1
23920: PUSH
23921: LD_INT 4
23923: MOD
23924: PUSH
23925: LD_INT 1
23927: PLUS
23928: PPUSH
23929: CALL_OW 259
23933: PUSH
23934: LD_INT 1
23936: PLUS
23937: PPUSH
23938: CALL_OW 237
23942: GO 23844
23944: POP
23945: POP
// end ;
23946: PPOPN 3
23948: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23949: LD_EXP 37
23953: IFFALSE 23961
23955: PUSH
23956: LD_EXP 45
23960: AND
23961: IFFALSE 23981
23963: GO 23965
23965: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23966: LD_INT 4
23968: PPUSH
23969: LD_OWVAR 2
23973: PPUSH
23974: LD_INT 0
23976: PPUSH
23977: CALL_OW 324
23981: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23982: LD_EXP 37
23986: IFFALSE 23994
23988: PUSH
23989: LD_EXP 74
23993: AND
23994: IFFALSE 24014
23996: GO 23998
23998: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23999: LD_INT 19
24001: PPUSH
24002: LD_OWVAR 2
24006: PPUSH
24007: LD_INT 0
24009: PPUSH
24010: CALL_OW 324
24014: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24015: LD_EXP 37
24019: IFFALSE 24027
24021: PUSH
24022: LD_EXP 46
24026: AND
24027: IFFALSE 24129
24029: GO 24031
24031: DISABLE
24032: LD_INT 0
24034: PPUSH
24035: PPUSH
// begin enable ;
24036: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24037: LD_ADDR_VAR 0 2
24041: PUSH
24042: LD_INT 22
24044: PUSH
24045: LD_OWVAR 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 34
24059: PUSH
24060: LD_INT 11
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 34
24069: PUSH
24070: LD_INT 30
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PPUSH
24086: CALL_OW 69
24090: ST_TO_ADDR
// if not tmp then
24091: LD_VAR 0 2
24095: NOT
24096: IFFALSE 24100
// exit ;
24098: GO 24129
// for i in tmp do
24100: LD_ADDR_VAR 0 1
24104: PUSH
24105: LD_VAR 0 2
24109: PUSH
24110: FOR_IN
24111: IFFALSE 24127
// begin SetLives ( i , 0 ) ;
24113: LD_VAR 0 1
24117: PPUSH
24118: LD_INT 0
24120: PPUSH
24121: CALL_OW 234
// end ;
24125: GO 24110
24127: POP
24128: POP
// end ;
24129: PPOPN 2
24131: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24132: LD_EXP 37
24136: IFFALSE 24144
24138: PUSH
24139: LD_EXP 47
24143: AND
24144: IFFALSE 24164
24146: GO 24148
24148: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24149: LD_INT 32
24151: PPUSH
24152: LD_OWVAR 2
24156: PPUSH
24157: LD_INT 0
24159: PPUSH
24160: CALL_OW 324
24164: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24165: LD_EXP 37
24169: IFFALSE 24177
24171: PUSH
24172: LD_EXP 48
24176: AND
24177: IFFALSE 24360
24179: GO 24181
24181: DISABLE
24182: LD_INT 0
24184: PPUSH
24185: PPUSH
24186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24187: LD_ADDR_VAR 0 2
24191: PUSH
24192: LD_INT 22
24194: PUSH
24195: LD_OWVAR 2
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 33
24206: PUSH
24207: LD_INT 3
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PPUSH
24218: CALL_OW 69
24222: ST_TO_ADDR
// if not tmp then
24223: LD_VAR 0 2
24227: NOT
24228: IFFALSE 24232
// exit ;
24230: GO 24360
// side := 0 ;
24232: LD_ADDR_VAR 0 3
24236: PUSH
24237: LD_INT 0
24239: ST_TO_ADDR
// for i := 1 to 8 do
24240: LD_ADDR_VAR 0 1
24244: PUSH
24245: DOUBLE
24246: LD_INT 1
24248: DEC
24249: ST_TO_ADDR
24250: LD_INT 8
24252: PUSH
24253: FOR_TO
24254: IFFALSE 24304
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24256: LD_OWVAR 2
24260: PUSH
24261: LD_VAR 0 1
24265: NONEQUAL
24266: IFFALSE 24288
24268: PUSH
24269: LD_OWVAR 2
24273: PPUSH
24274: LD_VAR 0 1
24278: PPUSH
24279: CALL_OW 81
24283: PUSH
24284: LD_INT 2
24286: EQUAL
24287: AND
24288: IFFALSE 24302
// begin side := i ;
24290: LD_ADDR_VAR 0 3
24294: PUSH
24295: LD_VAR 0 1
24299: ST_TO_ADDR
// break ;
24300: GO 24304
// end ;
24302: GO 24253
24304: POP
24305: POP
// if not side then
24306: LD_VAR 0 3
24310: NOT
24311: IFFALSE 24315
// exit ;
24313: GO 24360
// for i := 1 to tmp do
24315: LD_ADDR_VAR 0 1
24319: PUSH
24320: DOUBLE
24321: LD_INT 1
24323: DEC
24324: ST_TO_ADDR
24325: LD_VAR 0 2
24329: PUSH
24330: FOR_TO
24331: IFFALSE 24358
// if Prob ( 60 ) then
24333: LD_INT 60
24335: PPUSH
24336: CALL_OW 13
24340: IFFALSE 24356
// SetSide ( i , side ) ;
24342: LD_VAR 0 1
24346: PPUSH
24347: LD_VAR 0 3
24351: PPUSH
24352: CALL_OW 235
24356: GO 24330
24358: POP
24359: POP
// end ;
24360: PPOPN 3
24362: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24363: LD_EXP 37
24367: IFFALSE 24375
24369: PUSH
24370: LD_EXP 50
24374: AND
24375: IFFALSE 24494
24377: GO 24379
24379: DISABLE
24380: LD_INT 0
24382: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24383: LD_ADDR_VAR 0 1
24387: PUSH
24388: LD_INT 22
24390: PUSH
24391: LD_OWVAR 2
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 21
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 3
24412: PUSH
24413: LD_INT 23
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL_OW 69
24436: PUSH
24437: FOR_IN
24438: IFFALSE 24492
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24440: LD_VAR 0 1
24444: PPUSH
24445: CALL_OW 257
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: LD_INT 3
24458: PUSH
24459: LD_INT 4
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: IN
24468: IFFALSE 24490
// SetClass ( un , rand ( 1 , 4 ) ) ;
24470: LD_VAR 0 1
24474: PPUSH
24475: LD_INT 1
24477: PPUSH
24478: LD_INT 4
24480: PPUSH
24481: CALL_OW 12
24485: PPUSH
24486: CALL_OW 336
24490: GO 24437
24492: POP
24493: POP
// end ;
24494: PPOPN 1
24496: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24497: LD_EXP 37
24501: IFFALSE 24509
24503: PUSH
24504: LD_EXP 49
24508: AND
24509: IFFALSE 24588
24511: GO 24513
24513: DISABLE
24514: LD_INT 0
24516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24517: LD_ADDR_VAR 0 1
24521: PUSH
24522: LD_INT 22
24524: PUSH
24525: LD_OWVAR 2
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 21
24536: PUSH
24537: LD_INT 3
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PPUSH
24548: CALL_OW 69
24552: ST_TO_ADDR
// if not tmp then
24553: LD_VAR 0 1
24557: NOT
24558: IFFALSE 24562
// exit ;
24560: GO 24588
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24562: LD_VAR 0 1
24566: PUSH
24567: LD_INT 1
24569: PPUSH
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 12
24579: ARRAY
24580: PPUSH
24581: LD_INT 100
24583: PPUSH
24584: CALL_OW 234
// end ;
24588: PPOPN 1
24590: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24591: LD_EXP 37
24595: IFFALSE 24603
24597: PUSH
24598: LD_EXP 51
24602: AND
24603: IFFALSE 24701
24605: GO 24607
24607: DISABLE
24608: LD_INT 0
24610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24611: LD_ADDR_VAR 0 1
24615: PUSH
24616: LD_INT 22
24618: PUSH
24619: LD_OWVAR 2
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 21
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PPUSH
24642: CALL_OW 69
24646: ST_TO_ADDR
// if not tmp then
24647: LD_VAR 0 1
24651: NOT
24652: IFFALSE 24656
// exit ;
24654: GO 24701
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24656: LD_VAR 0 1
24660: PUSH
24661: LD_INT 1
24663: PPUSH
24664: LD_VAR 0 1
24668: PPUSH
24669: CALL_OW 12
24673: ARRAY
24674: PPUSH
24675: LD_INT 1
24677: PPUSH
24678: LD_INT 4
24680: PPUSH
24681: CALL_OW 12
24685: PPUSH
24686: LD_INT 3000
24688: PPUSH
24689: LD_INT 9000
24691: PPUSH
24692: CALL_OW 12
24696: PPUSH
24697: CALL_OW 492
// end ;
24701: PPOPN 1
24703: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24704: LD_EXP 37
24708: IFFALSE 24716
24710: PUSH
24711: LD_EXP 52
24715: AND
24716: IFFALSE 24736
24718: GO 24720
24720: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24721: LD_INT 1
24723: PPUSH
24724: LD_OWVAR 2
24728: PPUSH
24729: LD_INT 0
24731: PPUSH
24732: CALL_OW 324
24736: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24737: LD_EXP 37
24741: IFFALSE 24749
24743: PUSH
24744: LD_EXP 53
24748: AND
24749: IFFALSE 24832
24751: GO 24753
24753: DISABLE
24754: LD_INT 0
24756: PPUSH
24757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24758: LD_ADDR_VAR 0 2
24762: PUSH
24763: LD_INT 22
24765: PUSH
24766: LD_OWVAR 2
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 21
24777: PUSH
24778: LD_INT 3
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PPUSH
24789: CALL_OW 69
24793: ST_TO_ADDR
// if not tmp then
24794: LD_VAR 0 2
24798: NOT
24799: IFFALSE 24803
// exit ;
24801: GO 24832
// for i in tmp do
24803: LD_ADDR_VAR 0 1
24807: PUSH
24808: LD_VAR 0 2
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24830
// SetBLevel ( i , 10 ) ;
24816: LD_VAR 0 1
24820: PPUSH
24821: LD_INT 10
24823: PPUSH
24824: CALL_OW 241
24828: GO 24813
24830: POP
24831: POP
// end ;
24832: PPOPN 2
24834: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24835: LD_EXP 37
24839: IFFALSE 24847
24841: PUSH
24842: LD_EXP 54
24846: AND
24847: IFFALSE 24958
24849: GO 24851
24851: DISABLE
24852: LD_INT 0
24854: PPUSH
24855: PPUSH
24856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24857: LD_ADDR_VAR 0 3
24861: PUSH
24862: LD_INT 22
24864: PUSH
24865: LD_OWVAR 2
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 25
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 69
24892: ST_TO_ADDR
// if not tmp then
24893: LD_VAR 0 3
24897: NOT
24898: IFFALSE 24902
// exit ;
24900: GO 24958
// un := tmp [ rand ( 1 , tmp ) ] ;
24902: LD_ADDR_VAR 0 2
24906: PUSH
24907: LD_VAR 0 3
24911: PUSH
24912: LD_INT 1
24914: PPUSH
24915: LD_VAR 0 3
24919: PPUSH
24920: CALL_OW 12
24924: ARRAY
24925: ST_TO_ADDR
// if Crawls ( un ) then
24926: LD_VAR 0 2
24930: PPUSH
24931: CALL_OW 318
24935: IFFALSE 24946
// ComWalk ( un ) ;
24937: LD_VAR 0 2
24941: PPUSH
24942: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24946: LD_VAR 0 2
24950: PPUSH
24951: LD_INT 5
24953: PPUSH
24954: CALL_OW 336
// end ;
24958: PPOPN 3
24960: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24961: LD_EXP 37
24965: IFFALSE 24973
24967: PUSH
24968: LD_EXP 55
24972: AND
24973: IFFALSE 24985
24975: PUSH
24976: LD_OWVAR 67
24980: PUSH
24981: LD_INT 4
24983: LESS
24984: AND
24985: IFFALSE 25004
24987: GO 24989
24989: DISABLE
// begin Difficulty := Difficulty + 1 ;
24990: LD_ADDR_OWVAR 67
24994: PUSH
24995: LD_OWVAR 67
24999: PUSH
25000: LD_INT 1
25002: PLUS
25003: ST_TO_ADDR
// end ;
25004: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25005: LD_EXP 37
25009: IFFALSE 25017
25011: PUSH
25012: LD_EXP 56
25016: AND
25017: IFFALSE 25120
25019: GO 25021
25021: DISABLE
25022: LD_INT 0
25024: PPUSH
// begin for i := 1 to 5 do
25025: LD_ADDR_VAR 0 1
25029: PUSH
25030: DOUBLE
25031: LD_INT 1
25033: DEC
25034: ST_TO_ADDR
25035: LD_INT 5
25037: PUSH
25038: FOR_TO
25039: IFFALSE 25118
// begin uc_nation := nation_nature ;
25041: LD_ADDR_OWVAR 21
25045: PUSH
25046: LD_INT 0
25048: ST_TO_ADDR
// uc_side := 0 ;
25049: LD_ADDR_OWVAR 20
25053: PUSH
25054: LD_INT 0
25056: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25057: LD_ADDR_OWVAR 29
25061: PUSH
25062: LD_INT 12
25064: PUSH
25065: LD_INT 12
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: ST_TO_ADDR
// hc_agressivity := 20 ;
25072: LD_ADDR_OWVAR 35
25076: PUSH
25077: LD_INT 20
25079: ST_TO_ADDR
// hc_class := class_tiger ;
25080: LD_ADDR_OWVAR 28
25084: PUSH
25085: LD_INT 14
25087: ST_TO_ADDR
// hc_gallery :=  ;
25088: LD_ADDR_OWVAR 33
25092: PUSH
25093: LD_STRING 
25095: ST_TO_ADDR
// hc_name :=  ;
25096: LD_ADDR_OWVAR 26
25100: PUSH
25101: LD_STRING 
25103: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25104: CALL_OW 44
25108: PPUSH
25109: LD_INT 0
25111: PPUSH
25112: CALL_OW 51
// end ;
25116: GO 25038
25118: POP
25119: POP
// end ;
25120: PPOPN 1
25122: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25123: LD_EXP 37
25127: IFFALSE 25135
25129: PUSH
25130: LD_EXP 57
25134: AND
25135: IFFALSE 25144
25137: GO 25139
25139: DISABLE
// StreamSibBomb ;
25140: CALL 25145 0 0
25144: END
// export function StreamSibBomb ; var i , x , y ; begin
25145: LD_INT 0
25147: PPUSH
25148: PPUSH
25149: PPUSH
25150: PPUSH
// result := false ;
25151: LD_ADDR_VAR 0 1
25155: PUSH
25156: LD_INT 0
25158: ST_TO_ADDR
// for i := 1 to 16 do
25159: LD_ADDR_VAR 0 2
25163: PUSH
25164: DOUBLE
25165: LD_INT 1
25167: DEC
25168: ST_TO_ADDR
25169: LD_INT 16
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25372
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_INT 10
25182: PUSH
25183: LD_INT 20
25185: PUSH
25186: LD_INT 30
25188: PUSH
25189: LD_INT 40
25191: PUSH
25192: LD_INT 50
25194: PUSH
25195: LD_INT 60
25197: PUSH
25198: LD_INT 70
25200: PUSH
25201: LD_INT 80
25203: PUSH
25204: LD_INT 90
25206: PUSH
25207: LD_INT 100
25209: PUSH
25210: LD_INT 110
25212: PUSH
25213: LD_INT 120
25215: PUSH
25216: LD_INT 130
25218: PUSH
25219: LD_INT 140
25221: PUSH
25222: LD_INT 150
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: PPUSH
25245: LD_INT 15
25247: PPUSH
25248: CALL_OW 12
25252: ARRAY
25253: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25254: LD_ADDR_VAR 0 4
25258: PUSH
25259: LD_INT 10
25261: PUSH
25262: LD_INT 20
25264: PUSH
25265: LD_INT 30
25267: PUSH
25268: LD_INT 40
25270: PUSH
25271: LD_INT 50
25273: PUSH
25274: LD_INT 60
25276: PUSH
25277: LD_INT 70
25279: PUSH
25280: LD_INT 80
25282: PUSH
25283: LD_INT 90
25285: PUSH
25286: LD_INT 100
25288: PUSH
25289: LD_INT 110
25291: PUSH
25292: LD_INT 120
25294: PUSH
25295: LD_INT 130
25297: PUSH
25298: LD_INT 140
25300: PUSH
25301: LD_INT 150
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: PPUSH
25324: LD_INT 15
25326: PPUSH
25327: CALL_OW 12
25331: ARRAY
25332: ST_TO_ADDR
// if ValidHex ( x , y ) then
25333: LD_VAR 0 3
25337: PPUSH
25338: LD_VAR 0 4
25342: PPUSH
25343: CALL_OW 488
25347: IFFALSE 25370
// begin result := [ x , y ] ;
25349: LD_ADDR_VAR 0 1
25353: PUSH
25354: LD_VAR 0 3
25358: PUSH
25359: LD_VAR 0 4
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: ST_TO_ADDR
// break ;
25368: GO 25372
// end ; end ;
25370: GO 25172
25372: POP
25373: POP
// if result then
25374: LD_VAR 0 1
25378: IFFALSE 25438
// begin ToLua ( playSibBomb() ) ;
25380: LD_STRING playSibBomb()
25382: PPUSH
25383: CALL_OW 559
// wait ( 0 0$14 ) ;
25387: LD_INT 490
25389: PPUSH
25390: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25394: LD_VAR 0 1
25398: PUSH
25399: LD_INT 1
25401: ARRAY
25402: PPUSH
25403: LD_VAR 0 1
25407: PUSH
25408: LD_INT 2
25410: ARRAY
25411: PPUSH
25412: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25416: LD_VAR 0 1
25420: PUSH
25421: LD_INT 1
25423: ARRAY
25424: PPUSH
25425: LD_VAR 0 1
25429: PUSH
25430: LD_INT 2
25432: ARRAY
25433: PPUSH
25434: CALL_OW 429
// end ; end ;
25438: LD_VAR 0 1
25442: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25443: LD_EXP 37
25447: IFFALSE 25455
25449: PUSH
25450: LD_EXP 59
25454: AND
25455: IFFALSE 25467
25457: GO 25459
25459: DISABLE
// YouLost (  ) ;
25460: LD_STRING 
25462: PPUSH
25463: CALL_OW 104
25467: END
// every 0 0$1 trigger StreamModeActive and sFog do
25468: LD_EXP 37
25472: IFFALSE 25480
25474: PUSH
25475: LD_EXP 58
25479: AND
25480: IFFALSE 25494
25482: GO 25484
25484: DISABLE
// FogOff ( your_side ) ;
25485: LD_OWVAR 2
25489: PPUSH
25490: CALL_OW 344
25494: END
// every 0 0$1 trigger StreamModeActive and sSun do
25495: LD_EXP 37
25499: IFFALSE 25507
25501: PUSH
25502: LD_EXP 60
25506: AND
25507: IFFALSE 25535
25509: GO 25511
25511: DISABLE
// begin solar_recharge_percent := 0 ;
25512: LD_ADDR_OWVAR 79
25516: PUSH
25517: LD_INT 0
25519: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25520: LD_INT 10500
25522: PPUSH
25523: CALL_OW 67
// solar_recharge_percent := 100 ;
25527: LD_ADDR_OWVAR 79
25531: PUSH
25532: LD_INT 100
25534: ST_TO_ADDR
// end ;
25535: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25536: LD_EXP 37
25540: IFFALSE 25548
25542: PUSH
25543: LD_EXP 61
25547: AND
25548: IFFALSE 25787
25550: GO 25552
25552: DISABLE
25553: LD_INT 0
25555: PPUSH
25556: PPUSH
25557: PPUSH
// begin tmp := [ ] ;
25558: LD_ADDR_VAR 0 3
25562: PUSH
25563: EMPTY
25564: ST_TO_ADDR
// for i := 1 to 6 do
25565: LD_ADDR_VAR 0 1
25569: PUSH
25570: DOUBLE
25571: LD_INT 1
25573: DEC
25574: ST_TO_ADDR
25575: LD_INT 6
25577: PUSH
25578: FOR_TO
25579: IFFALSE 25684
// begin uc_nation := nation_nature ;
25581: LD_ADDR_OWVAR 21
25585: PUSH
25586: LD_INT 0
25588: ST_TO_ADDR
// uc_side := 0 ;
25589: LD_ADDR_OWVAR 20
25593: PUSH
25594: LD_INT 0
25596: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25597: LD_ADDR_OWVAR 29
25601: PUSH
25602: LD_INT 12
25604: PUSH
25605: LD_INT 12
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: ST_TO_ADDR
// hc_agressivity := 20 ;
25612: LD_ADDR_OWVAR 35
25616: PUSH
25617: LD_INT 20
25619: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25620: LD_ADDR_OWVAR 28
25624: PUSH
25625: LD_INT 17
25627: ST_TO_ADDR
// hc_gallery :=  ;
25628: LD_ADDR_OWVAR 33
25632: PUSH
25633: LD_STRING 
25635: ST_TO_ADDR
// hc_name :=  ;
25636: LD_ADDR_OWVAR 26
25640: PUSH
25641: LD_STRING 
25643: ST_TO_ADDR
// un := CreateHuman ;
25644: LD_ADDR_VAR 0 2
25648: PUSH
25649: CALL_OW 44
25653: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25654: LD_VAR 0 2
25658: PPUSH
25659: LD_INT 1
25661: PPUSH
25662: CALL_OW 51
// tmp := tmp ^ un ;
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: LD_VAR 0 3
25675: PUSH
25676: LD_VAR 0 2
25680: ADD
25681: ST_TO_ADDR
// end ;
25682: GO 25578
25684: POP
25685: POP
// repeat wait ( 0 0$1 ) ;
25686: LD_INT 35
25688: PPUSH
25689: CALL_OW 67
// for un in tmp do
25693: LD_ADDR_VAR 0 2
25697: PUSH
25698: LD_VAR 0 3
25702: PUSH
25703: FOR_IN
25704: IFFALSE 25778
// begin if IsDead ( un ) then
25706: LD_VAR 0 2
25710: PPUSH
25711: CALL_OW 301
25715: IFFALSE 25735
// begin tmp := tmp diff un ;
25717: LD_ADDR_VAR 0 3
25721: PUSH
25722: LD_VAR 0 3
25726: PUSH
25727: LD_VAR 0 2
25731: DIFF
25732: ST_TO_ADDR
// continue ;
25733: GO 25703
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25735: LD_VAR 0 2
25739: PPUSH
25740: LD_INT 3
25742: PUSH
25743: LD_INT 22
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PPUSH
25757: CALL_OW 69
25761: PPUSH
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL_OW 74
25771: PPUSH
25772: CALL_OW 115
// end ;
25776: GO 25703
25778: POP
25779: POP
// until not tmp ;
25780: LD_VAR 0 3
25784: NOT
25785: IFFALSE 25686
// end ;
25787: PPOPN 3
25789: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25790: LD_EXP 37
25794: IFFALSE 25802
25796: PUSH
25797: LD_EXP 62
25801: AND
25802: IFFALSE 25856
25804: GO 25806
25806: DISABLE
// begin ToLua ( displayTroll(); ) ;
25807: LD_STRING displayTroll();
25809: PPUSH
25810: CALL_OW 559
// wait ( 3 3$00 ) ;
25814: LD_INT 6300
25816: PPUSH
25817: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25821: LD_STRING hideTroll();
25823: PPUSH
25824: CALL_OW 559
// wait ( 1 1$00 ) ;
25828: LD_INT 2100
25830: PPUSH
25831: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25835: LD_STRING displayTroll();
25837: PPUSH
25838: CALL_OW 559
// wait ( 1 1$00 ) ;
25842: LD_INT 2100
25844: PPUSH
25845: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25849: LD_STRING hideTroll();
25851: PPUSH
25852: CALL_OW 559
// end ;
25856: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25857: LD_EXP 37
25861: IFFALSE 25869
25863: PUSH
25864: LD_EXP 63
25868: AND
25869: IFFALSE 25932
25871: GO 25873
25873: DISABLE
25874: LD_INT 0
25876: PPUSH
// begin p := 0 ;
25877: LD_ADDR_VAR 0 1
25881: PUSH
25882: LD_INT 0
25884: ST_TO_ADDR
// repeat game_speed := 1 ;
25885: LD_ADDR_OWVAR 65
25889: PUSH
25890: LD_INT 1
25892: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25893: LD_INT 35
25895: PPUSH
25896: CALL_OW 67
// p := p + 1 ;
25900: LD_ADDR_VAR 0 1
25904: PUSH
25905: LD_VAR 0 1
25909: PUSH
25910: LD_INT 1
25912: PLUS
25913: ST_TO_ADDR
// until p >= 60 ;
25914: LD_VAR 0 1
25918: PUSH
25919: LD_INT 60
25921: GREATEREQUAL
25922: IFFALSE 25885
// game_speed := 4 ;
25924: LD_ADDR_OWVAR 65
25928: PUSH
25929: LD_INT 4
25931: ST_TO_ADDR
// end ;
25932: PPOPN 1
25934: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25935: LD_EXP 37
25939: IFFALSE 25947
25941: PUSH
25942: LD_EXP 64
25946: AND
25947: IFFALSE 26093
25949: GO 25951
25951: DISABLE
25952: LD_INT 0
25954: PPUSH
25955: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25956: LD_ADDR_VAR 0 1
25960: PUSH
25961: LD_INT 22
25963: PUSH
25964: LD_OWVAR 2
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: LD_INT 30
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 30
25988: PUSH
25989: LD_INT 1
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: LIST
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PPUSH
26005: CALL_OW 69
26009: ST_TO_ADDR
// if not depot then
26010: LD_VAR 0 1
26014: NOT
26015: IFFALSE 26019
// exit ;
26017: GO 26093
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26019: LD_ADDR_VAR 0 2
26023: PUSH
26024: LD_VAR 0 1
26028: PUSH
26029: LD_INT 1
26031: PPUSH
26032: LD_VAR 0 1
26036: PPUSH
26037: CALL_OW 12
26041: ARRAY
26042: PPUSH
26043: CALL_OW 274
26047: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26048: LD_VAR 0 2
26052: PPUSH
26053: LD_INT 1
26055: PPUSH
26056: LD_INT 0
26058: PPUSH
26059: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26063: LD_VAR 0 2
26067: PPUSH
26068: LD_INT 2
26070: PPUSH
26071: LD_INT 0
26073: PPUSH
26074: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26078: LD_VAR 0 2
26082: PPUSH
26083: LD_INT 3
26085: PPUSH
26086: LD_INT 0
26088: PPUSH
26089: CALL_OW 277
// end ;
26093: PPOPN 2
26095: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26096: LD_EXP 37
26100: IFFALSE 26108
26102: PUSH
26103: LD_EXP 65
26107: AND
26108: IFFALSE 26205
26110: GO 26112
26112: DISABLE
26113: LD_INT 0
26115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26116: LD_ADDR_VAR 0 1
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_OWVAR 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 21
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: LD_INT 23
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: PPUSH
26165: CALL_OW 69
26169: ST_TO_ADDR
// if not tmp then
26170: LD_VAR 0 1
26174: NOT
26175: IFFALSE 26179
// exit ;
26177: GO 26205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26179: LD_VAR 0 1
26183: PUSH
26184: LD_INT 1
26186: PPUSH
26187: LD_VAR 0 1
26191: PPUSH
26192: CALL_OW 12
26196: ARRAY
26197: PPUSH
26198: LD_INT 200
26200: PPUSH
26201: CALL_OW 234
// end ;
26205: PPOPN 1
26207: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26208: LD_EXP 37
26212: IFFALSE 26220
26214: PUSH
26215: LD_EXP 66
26219: AND
26220: IFFALSE 26299
26222: GO 26224
26224: DISABLE
26225: LD_INT 0
26227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26228: LD_ADDR_VAR 0 1
26232: PUSH
26233: LD_INT 22
26235: PUSH
26236: LD_OWVAR 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 21
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PPUSH
26259: CALL_OW 69
26263: ST_TO_ADDR
// if not tmp then
26264: LD_VAR 0 1
26268: NOT
26269: IFFALSE 26273
// exit ;
26271: GO 26299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26273: LD_VAR 0 1
26277: PUSH
26278: LD_INT 1
26280: PPUSH
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 12
26290: ARRAY
26291: PPUSH
26292: LD_INT 60
26294: PPUSH
26295: CALL_OW 234
// end ;
26299: PPOPN 1
26301: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26302: LD_EXP 37
26306: IFFALSE 26314
26308: PUSH
26309: LD_EXP 67
26313: AND
26314: IFFALSE 26413
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
26322: PPUSH
// begin enable ;
26323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26324: LD_ADDR_VAR 0 1
26328: PUSH
26329: LD_INT 22
26331: PUSH
26332: LD_OWVAR 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 61
26343: PUSH
26344: EMPTY
26345: LIST
26346: PUSH
26347: LD_INT 33
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: ST_TO_ADDR
// if not tmp then
26367: LD_VAR 0 1
26371: NOT
26372: IFFALSE 26376
// exit ;
26374: GO 26413
// for i in tmp do
26376: LD_ADDR_VAR 0 2
26380: PUSH
26381: LD_VAR 0 1
26385: PUSH
26386: FOR_IN
26387: IFFALSE 26411
// if IsControledBy ( i ) then
26389: LD_VAR 0 2
26393: PPUSH
26394: CALL_OW 312
26398: IFFALSE 26409
// ComUnlink ( i ) ;
26400: LD_VAR 0 2
26404: PPUSH
26405: CALL_OW 136
26409: GO 26386
26411: POP
26412: POP
// end ;
26413: PPOPN 2
26415: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26416: LD_EXP 37
26420: IFFALSE 26428
26422: PUSH
26423: LD_EXP 68
26427: AND
26428: IFFALSE 26568
26430: GO 26432
26432: DISABLE
26433: LD_INT 0
26435: PPUSH
26436: PPUSH
// begin ToLua ( displayPowell(); ) ;
26437: LD_STRING displayPowell();
26439: PPUSH
26440: CALL_OW 559
// uc_side := 0 ;
26444: LD_ADDR_OWVAR 20
26448: PUSH
26449: LD_INT 0
26451: ST_TO_ADDR
// uc_nation := 2 ;
26452: LD_ADDR_OWVAR 21
26456: PUSH
26457: LD_INT 2
26459: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26460: LD_ADDR_OWVAR 37
26464: PUSH
26465: LD_INT 14
26467: ST_TO_ADDR
// vc_engine := engine_siberite ;
26468: LD_ADDR_OWVAR 39
26472: PUSH
26473: LD_INT 3
26475: ST_TO_ADDR
// vc_control := control_apeman ;
26476: LD_ADDR_OWVAR 38
26480: PUSH
26481: LD_INT 5
26483: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26484: LD_ADDR_OWVAR 40
26488: PUSH
26489: LD_INT 29
26491: ST_TO_ADDR
// un := CreateVehicle ;
26492: LD_ADDR_VAR 0 2
26496: PUSH
26497: CALL_OW 45
26501: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26502: LD_VAR 0 2
26506: PPUSH
26507: LD_INT 1
26509: PPUSH
26510: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26514: LD_INT 35
26516: PPUSH
26517: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26521: LD_VAR 0 2
26525: PPUSH
26526: LD_INT 22
26528: PUSH
26529: LD_OWVAR 2
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PPUSH
26538: CALL_OW 69
26542: PPUSH
26543: LD_VAR 0 2
26547: PPUSH
26548: CALL_OW 74
26552: PPUSH
26553: CALL_OW 115
// until IsDead ( un ) ;
26557: LD_VAR 0 2
26561: PPUSH
26562: CALL_OW 301
26566: IFFALSE 26514
// end ;
26568: PPOPN 2
26570: END
// every 0 0$1 trigger StreamModeActive and sStu do
26571: LD_EXP 37
26575: IFFALSE 26583
26577: PUSH
26578: LD_EXP 76
26582: AND
26583: IFFALSE 26599
26585: GO 26587
26587: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26588: LD_STRING displayStucuk();
26590: PPUSH
26591: CALL_OW 559
// ResetFog ;
26595: CALL_OW 335
// end ;
26599: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26600: LD_EXP 37
26604: IFFALSE 26612
26606: PUSH
26607: LD_EXP 69
26611: AND
26612: IFFALSE 26753
26614: GO 26616
26616: DISABLE
26617: LD_INT 0
26619: PPUSH
26620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26621: LD_ADDR_VAR 0 2
26625: PUSH
26626: LD_INT 22
26628: PUSH
26629: LD_OWVAR 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 21
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PPUSH
26652: CALL_OW 69
26656: ST_TO_ADDR
// if not tmp then
26657: LD_VAR 0 2
26661: NOT
26662: IFFALSE 26666
// exit ;
26664: GO 26753
// un := tmp [ rand ( 1 , tmp ) ] ;
26666: LD_ADDR_VAR 0 1
26670: PUSH
26671: LD_VAR 0 2
26675: PUSH
26676: LD_INT 1
26678: PPUSH
26679: LD_VAR 0 2
26683: PPUSH
26684: CALL_OW 12
26688: ARRAY
26689: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26690: LD_VAR 0 1
26694: PPUSH
26695: LD_INT 0
26697: PPUSH
26698: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_OWVAR 3
26711: PUSH
26712: LD_VAR 0 1
26716: DIFF
26717: PPUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: CALL_OW 74
26727: PPUSH
26728: CALL_OW 115
// wait ( 0 0$20 ) ;
26732: LD_INT 700
26734: PPUSH
26735: CALL_OW 67
// SetSide ( un , your_side ) ;
26739: LD_VAR 0 1
26743: PPUSH
26744: LD_OWVAR 2
26748: PPUSH
26749: CALL_OW 235
// end ;
26753: PPOPN 2
26755: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26756: LD_EXP 37
26760: IFFALSE 26768
26762: PUSH
26763: LD_EXP 70
26767: AND
26768: IFFALSE 26874
26770: GO 26772
26772: DISABLE
26773: LD_INT 0
26775: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26776: LD_ADDR_VAR 0 1
26780: PUSH
26781: LD_INT 22
26783: PUSH
26784: LD_OWVAR 2
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 30
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 30
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PPUSH
26825: CALL_OW 69
26829: ST_TO_ADDR
// if not depot then
26830: LD_VAR 0 1
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 26874
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26839: LD_VAR 0 1
26843: PUSH
26844: LD_INT 1
26846: ARRAY
26847: PPUSH
26848: CALL_OW 250
26852: PPUSH
26853: LD_VAR 0 1
26857: PUSH
26858: LD_INT 1
26860: ARRAY
26861: PPUSH
26862: CALL_OW 251
26866: PPUSH
26867: LD_INT 70
26869: PPUSH
26870: CALL_OW 495
// end ;
26874: PPOPN 1
26876: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26877: LD_EXP 37
26881: IFFALSE 26889
26883: PUSH
26884: LD_EXP 71
26888: AND
26889: IFFALSE 27100
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
26899: PPUSH
26900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26901: LD_ADDR_VAR 0 5
26905: PUSH
26906: LD_INT 22
26908: PUSH
26909: LD_OWVAR 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 21
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PPUSH
26932: CALL_OW 69
26936: ST_TO_ADDR
// if not tmp then
26937: LD_VAR 0 5
26941: NOT
26942: IFFALSE 26946
// exit ;
26944: GO 27100
// for i in tmp do
26946: LD_ADDR_VAR 0 1
26950: PUSH
26951: LD_VAR 0 5
26955: PUSH
26956: FOR_IN
26957: IFFALSE 27098
// begin d := rand ( 0 , 5 ) ;
26959: LD_ADDR_VAR 0 4
26963: PUSH
26964: LD_INT 0
26966: PPUSH
26967: LD_INT 5
26969: PPUSH
26970: CALL_OW 12
26974: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26975: LD_ADDR_VAR 0 2
26979: PUSH
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 250
26989: PPUSH
26990: LD_VAR 0 4
26994: PPUSH
26995: LD_INT 3
26997: PPUSH
26998: LD_INT 12
27000: PPUSH
27001: CALL_OW 12
27005: PPUSH
27006: CALL_OW 272
27010: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27011: LD_ADDR_VAR 0 3
27015: PUSH
27016: LD_VAR 0 1
27020: PPUSH
27021: CALL_OW 251
27025: PPUSH
27026: LD_VAR 0 4
27030: PPUSH
27031: LD_INT 3
27033: PPUSH
27034: LD_INT 12
27036: PPUSH
27037: CALL_OW 12
27041: PPUSH
27042: CALL_OW 273
27046: ST_TO_ADDR
// if ValidHex ( x , y ) then
27047: LD_VAR 0 2
27051: PPUSH
27052: LD_VAR 0 3
27056: PPUSH
27057: CALL_OW 488
27061: IFFALSE 27096
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27063: LD_VAR 0 1
27067: PPUSH
27068: LD_VAR 0 2
27072: PPUSH
27073: LD_VAR 0 3
27077: PPUSH
27078: LD_INT 3
27080: PPUSH
27081: LD_INT 6
27083: PPUSH
27084: CALL_OW 12
27088: PPUSH
27089: LD_INT 1
27091: PPUSH
27092: CALL_OW 483
// end ;
27096: GO 26956
27098: POP
27099: POP
// end ;
27100: PPOPN 5
27102: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27103: LD_EXP 37
27107: IFFALSE 27115
27109: PUSH
27110: LD_EXP 72
27114: AND
27115: IFFALSE 27209
27117: GO 27119
27119: DISABLE
27120: LD_INT 0
27122: PPUSH
27123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27124: LD_ADDR_VAR 0 2
27128: PUSH
27129: LD_INT 22
27131: PUSH
27132: LD_OWVAR 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 32
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 21
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: PPUSH
27166: CALL_OW 69
27170: ST_TO_ADDR
// if not tmp then
27171: LD_VAR 0 2
27175: NOT
27176: IFFALSE 27180
// exit ;
27178: GO 27209
// for i in tmp do
27180: LD_ADDR_VAR 0 1
27184: PUSH
27185: LD_VAR 0 2
27189: PUSH
27190: FOR_IN
27191: IFFALSE 27207
// SetFuel ( i , 0 ) ;
27193: LD_VAR 0 1
27197: PPUSH
27198: LD_INT 0
27200: PPUSH
27201: CALL_OW 240
27205: GO 27190
27207: POP
27208: POP
// end ;
27209: PPOPN 2
27211: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27212: LD_EXP 37
27216: IFFALSE 27224
27218: PUSH
27219: LD_EXP 73
27223: AND
27224: IFFALSE 27290
27226: GO 27228
27228: DISABLE
27229: LD_INT 0
27231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27232: LD_ADDR_VAR 0 1
27236: PUSH
27237: LD_INT 22
27239: PUSH
27240: LD_OWVAR 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 30
27251: PUSH
27252: LD_INT 29
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PPUSH
27263: CALL_OW 69
27267: ST_TO_ADDR
// if not tmp then
27268: LD_VAR 0 1
27272: NOT
27273: IFFALSE 27277
// exit ;
27275: GO 27290
// DestroyUnit ( tmp [ 1 ] ) ;
27277: LD_VAR 0 1
27281: PUSH
27282: LD_INT 1
27284: ARRAY
27285: PPUSH
27286: CALL_OW 65
// end ;
27290: PPOPN 1
27292: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27293: LD_EXP 37
27297: IFFALSE 27305
27299: PUSH
27300: LD_EXP 75
27304: AND
27305: IFFALSE 27434
27307: GO 27309
27309: DISABLE
27310: LD_INT 0
27312: PPUSH
// begin uc_side := 0 ;
27313: LD_ADDR_OWVAR 20
27317: PUSH
27318: LD_INT 0
27320: ST_TO_ADDR
// uc_nation := nation_arabian ;
27321: LD_ADDR_OWVAR 21
27325: PUSH
27326: LD_INT 2
27328: ST_TO_ADDR
// hc_gallery :=  ;
27329: LD_ADDR_OWVAR 33
27333: PUSH
27334: LD_STRING 
27336: ST_TO_ADDR
// hc_name :=  ;
27337: LD_ADDR_OWVAR 26
27341: PUSH
27342: LD_STRING 
27344: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27345: LD_INT 1
27347: PPUSH
27348: LD_INT 11
27350: PPUSH
27351: LD_INT 10
27353: PPUSH
27354: CALL_OW 380
// un := CreateHuman ;
27358: LD_ADDR_VAR 0 1
27362: PUSH
27363: CALL_OW 44
27367: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27368: LD_VAR 0 1
27372: PPUSH
27373: LD_INT 1
27375: PPUSH
27376: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27380: LD_INT 35
27382: PPUSH
27383: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27387: LD_VAR 0 1
27391: PPUSH
27392: LD_INT 22
27394: PUSH
27395: LD_OWVAR 2
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PPUSH
27404: CALL_OW 69
27408: PPUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 74
27418: PPUSH
27419: CALL_OW 115
// until IsDead ( un ) ;
27423: LD_VAR 0 1
27427: PPUSH
27428: CALL_OW 301
27432: IFFALSE 27380
// end ;
27434: PPOPN 1
27436: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27437: LD_EXP 37
27441: IFFALSE 27449
27443: PUSH
27444: LD_EXP 77
27448: AND
27449: IFFALSE 27461
27451: GO 27453
27453: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27454: LD_STRING earthquake(getX(game), 0, 32)
27456: PPUSH
27457: CALL_OW 559
27461: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27462: LD_EXP 37
27466: IFFALSE 27474
27468: PUSH
27469: LD_EXP 78
27473: AND
27474: IFFALSE 27565
27476: GO 27478
27478: DISABLE
27479: LD_INT 0
27481: PPUSH
// begin enable ;
27482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27483: LD_ADDR_VAR 0 1
27487: PUSH
27488: LD_INT 22
27490: PUSH
27491: LD_OWVAR 2
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 21
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 33
27512: PUSH
27513: LD_INT 3
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: PPUSH
27525: CALL_OW 69
27529: ST_TO_ADDR
// if not tmp then
27530: LD_VAR 0 1
27534: NOT
27535: IFFALSE 27539
// exit ;
27537: GO 27565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27539: LD_VAR 0 1
27543: PUSH
27544: LD_INT 1
27546: PPUSH
27547: LD_VAR 0 1
27551: PPUSH
27552: CALL_OW 12
27556: ARRAY
27557: PPUSH
27558: LD_INT 1
27560: PPUSH
27561: CALL_OW 234
// end ;
27565: PPOPN 1
27567: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27568: LD_EXP 37
27572: IFFALSE 27580
27574: PUSH
27575: LD_EXP 79
27579: AND
27580: IFFALSE 27721
27582: GO 27584
27584: DISABLE
27585: LD_INT 0
27587: PPUSH
27588: PPUSH
27589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27590: LD_ADDR_VAR 0 3
27594: PUSH
27595: LD_INT 22
27597: PUSH
27598: LD_OWVAR 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 25
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PPUSH
27621: CALL_OW 69
27625: ST_TO_ADDR
// if not tmp then
27626: LD_VAR 0 3
27630: NOT
27631: IFFALSE 27635
// exit ;
27633: GO 27721
// un := tmp [ rand ( 1 , tmp ) ] ;
27635: LD_ADDR_VAR 0 2
27639: PUSH
27640: LD_VAR 0 3
27644: PUSH
27645: LD_INT 1
27647: PPUSH
27648: LD_VAR 0 3
27652: PPUSH
27653: CALL_OW 12
27657: ARRAY
27658: ST_TO_ADDR
// if Crawls ( un ) then
27659: LD_VAR 0 2
27663: PPUSH
27664: CALL_OW 318
27668: IFFALSE 27679
// ComWalk ( un ) ;
27670: LD_VAR 0 2
27674: PPUSH
27675: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27679: LD_VAR 0 2
27683: PPUSH
27684: LD_INT 9
27686: PPUSH
27687: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27691: LD_INT 28
27693: PPUSH
27694: LD_OWVAR 2
27698: PPUSH
27699: LD_INT 2
27701: PPUSH
27702: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27706: LD_INT 29
27708: PPUSH
27709: LD_OWVAR 2
27713: PPUSH
27714: LD_INT 2
27716: PPUSH
27717: CALL_OW 322
// end ;
27721: PPOPN 3
27723: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27724: LD_EXP 37
27728: IFFALSE 27736
27730: PUSH
27731: LD_EXP 80
27735: AND
27736: IFFALSE 27847
27738: GO 27740
27740: DISABLE
27741: LD_INT 0
27743: PPUSH
27744: PPUSH
27745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: LD_INT 22
27753: PUSH
27754: LD_OWVAR 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 25
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PPUSH
27777: CALL_OW 69
27781: ST_TO_ADDR
// if not tmp then
27782: LD_VAR 0 3
27786: NOT
27787: IFFALSE 27791
// exit ;
27789: GO 27847
// un := tmp [ rand ( 1 , tmp ) ] ;
27791: LD_ADDR_VAR 0 2
27795: PUSH
27796: LD_VAR 0 3
27800: PUSH
27801: LD_INT 1
27803: PPUSH
27804: LD_VAR 0 3
27808: PPUSH
27809: CALL_OW 12
27813: ARRAY
27814: ST_TO_ADDR
// if Crawls ( un ) then
27815: LD_VAR 0 2
27819: PPUSH
27820: CALL_OW 318
27824: IFFALSE 27835
// ComWalk ( un ) ;
27826: LD_VAR 0 2
27830: PPUSH
27831: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27835: LD_VAR 0 2
27839: PPUSH
27840: LD_INT 8
27842: PPUSH
27843: CALL_OW 336
// end ;
27847: PPOPN 3
27849: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27850: LD_EXP 37
27854: IFFALSE 27862
27856: PUSH
27857: LD_EXP 81
27861: AND
27862: IFFALSE 28006
27864: GO 27866
27866: DISABLE
27867: LD_INT 0
27869: PPUSH
27870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27871: LD_ADDR_VAR 0 2
27875: PUSH
27876: LD_INT 22
27878: PUSH
27879: LD_OWVAR 2
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 21
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 2
27900: PUSH
27901: LD_INT 34
27903: PUSH
27904: LD_INT 12
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 34
27913: PUSH
27914: LD_INT 51
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 34
27923: PUSH
27924: LD_INT 32
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 69
27946: ST_TO_ADDR
// if not tmp then
27947: LD_VAR 0 2
27951: NOT
27952: IFFALSE 27956
// exit ;
27954: GO 28006
// for i in tmp do
27956: LD_ADDR_VAR 0 1
27960: PUSH
27961: LD_VAR 0 2
27965: PUSH
27966: FOR_IN
27967: IFFALSE 28004
// if GetCargo ( i , mat_artifact ) = 0 then
27969: LD_VAR 0 1
27973: PPUSH
27974: LD_INT 4
27976: PPUSH
27977: CALL_OW 289
27981: PUSH
27982: LD_INT 0
27984: EQUAL
27985: IFFALSE 28002
// SetCargo ( i , mat_siberit , 100 ) ;
27987: LD_VAR 0 1
27991: PPUSH
27992: LD_INT 3
27994: PPUSH
27995: LD_INT 100
27997: PPUSH
27998: CALL_OW 290
28002: GO 27966
28004: POP
28005: POP
// end ;
28006: PPOPN 2
28008: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28009: LD_EXP 37
28013: IFFALSE 28021
28015: PUSH
28016: LD_EXP 82
28020: AND
28021: IFFALSE 28204
28023: GO 28025
28025: DISABLE
28026: LD_INT 0
28028: PPUSH
28029: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28030: LD_ADDR_VAR 0 2
28034: PUSH
28035: LD_INT 22
28037: PUSH
28038: LD_OWVAR 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 69
28051: ST_TO_ADDR
// if not tmp then
28052: LD_VAR 0 2
28056: NOT
28057: IFFALSE 28061
// exit ;
28059: GO 28204
// for i := 1 to 2 do
28061: LD_ADDR_VAR 0 1
28065: PUSH
28066: DOUBLE
28067: LD_INT 1
28069: DEC
28070: ST_TO_ADDR
28071: LD_INT 2
28073: PUSH
28074: FOR_TO
28075: IFFALSE 28202
// begin uc_side := your_side ;
28077: LD_ADDR_OWVAR 20
28081: PUSH
28082: LD_OWVAR 2
28086: ST_TO_ADDR
// uc_nation := nation_american ;
28087: LD_ADDR_OWVAR 21
28091: PUSH
28092: LD_INT 1
28094: ST_TO_ADDR
// vc_chassis := us_morphling ;
28095: LD_ADDR_OWVAR 37
28099: PUSH
28100: LD_INT 5
28102: ST_TO_ADDR
// vc_engine := engine_siberite ;
28103: LD_ADDR_OWVAR 39
28107: PUSH
28108: LD_INT 3
28110: ST_TO_ADDR
// vc_control := control_computer ;
28111: LD_ADDR_OWVAR 38
28115: PUSH
28116: LD_INT 3
28118: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28119: LD_ADDR_OWVAR 40
28123: PUSH
28124: LD_INT 10
28126: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28127: LD_VAR 0 2
28131: PUSH
28132: LD_INT 1
28134: ARRAY
28135: PPUSH
28136: CALL_OW 310
28140: NOT
28141: IFFALSE 28188
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28143: CALL_OW 45
28147: PPUSH
28148: LD_VAR 0 2
28152: PUSH
28153: LD_INT 1
28155: ARRAY
28156: PPUSH
28157: CALL_OW 250
28161: PPUSH
28162: LD_VAR 0 2
28166: PUSH
28167: LD_INT 1
28169: ARRAY
28170: PPUSH
28171: CALL_OW 251
28175: PPUSH
28176: LD_INT 12
28178: PPUSH
28179: LD_INT 1
28181: PPUSH
28182: CALL_OW 50
28186: GO 28200
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28188: CALL_OW 45
28192: PPUSH
28193: LD_INT 1
28195: PPUSH
28196: CALL_OW 51
// end ;
28200: GO 28074
28202: POP
28203: POP
// end ;
28204: PPOPN 2
28206: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28207: LD_EXP 37
28211: IFFALSE 28219
28213: PUSH
28214: LD_EXP 83
28218: AND
28219: IFFALSE 28441
28221: GO 28223
28223: DISABLE
28224: LD_INT 0
28226: PPUSH
28227: PPUSH
28228: PPUSH
28229: PPUSH
28230: PPUSH
28231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28232: LD_ADDR_VAR 0 6
28236: PUSH
28237: LD_INT 22
28239: PUSH
28240: LD_OWVAR 2
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 21
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 3
28261: PUSH
28262: LD_INT 23
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: PPUSH
28281: CALL_OW 69
28285: ST_TO_ADDR
// if not tmp then
28286: LD_VAR 0 6
28290: NOT
28291: IFFALSE 28295
// exit ;
28293: GO 28441
// s1 := rand ( 1 , 4 ) ;
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: LD_INT 1
28302: PPUSH
28303: LD_INT 4
28305: PPUSH
28306: CALL_OW 12
28310: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28311: LD_ADDR_VAR 0 4
28315: PUSH
28316: LD_VAR 0 6
28320: PUSH
28321: LD_INT 1
28323: ARRAY
28324: PPUSH
28325: LD_VAR 0 2
28329: PPUSH
28330: CALL_OW 259
28334: ST_TO_ADDR
// if s1 = 1 then
28335: LD_VAR 0 2
28339: PUSH
28340: LD_INT 1
28342: EQUAL
28343: IFFALSE 28363
// s2 := rand ( 2 , 4 ) else
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 2
28352: PPUSH
28353: LD_INT 4
28355: PPUSH
28356: CALL_OW 12
28360: ST_TO_ADDR
28361: GO 28371
// s2 := 1 ;
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_INT 1
28370: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28371: LD_ADDR_VAR 0 5
28375: PUSH
28376: LD_VAR 0 6
28380: PUSH
28381: LD_INT 1
28383: ARRAY
28384: PPUSH
28385: LD_VAR 0 3
28389: PPUSH
28390: CALL_OW 259
28394: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28395: LD_VAR 0 6
28399: PUSH
28400: LD_INT 1
28402: ARRAY
28403: PPUSH
28404: LD_VAR 0 2
28408: PPUSH
28409: LD_VAR 0 5
28413: PPUSH
28414: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28418: LD_VAR 0 6
28422: PUSH
28423: LD_INT 1
28425: ARRAY
28426: PPUSH
28427: LD_VAR 0 3
28431: PPUSH
28432: LD_VAR 0 4
28436: PPUSH
28437: CALL_OW 237
// end ;
28441: PPOPN 6
28443: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28444: LD_EXP 37
28448: IFFALSE 28456
28450: PUSH
28451: LD_EXP 84
28455: AND
28456: IFFALSE 28535
28458: GO 28460
28460: DISABLE
28461: LD_INT 0
28463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28464: LD_ADDR_VAR 0 1
28468: PUSH
28469: LD_INT 22
28471: PUSH
28472: LD_OWVAR 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 30
28483: PUSH
28484: LD_INT 3
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PPUSH
28495: CALL_OW 69
28499: ST_TO_ADDR
// if not tmp then
28500: LD_VAR 0 1
28504: NOT
28505: IFFALSE 28509
// exit ;
28507: GO 28535
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28509: LD_VAR 0 1
28513: PUSH
28514: LD_INT 1
28516: PPUSH
28517: LD_VAR 0 1
28521: PPUSH
28522: CALL_OW 12
28526: ARRAY
28527: PPUSH
28528: LD_INT 1
28530: PPUSH
28531: CALL_OW 234
// end ;
28535: PPOPN 1
28537: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28538: LD_EXP 37
28542: IFFALSE 28550
28544: PUSH
28545: LD_EXP 85
28549: AND
28550: IFFALSE 28662
28552: GO 28554
28554: DISABLE
28555: LD_INT 0
28557: PPUSH
28558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28559: LD_ADDR_VAR 0 2
28563: PUSH
28564: LD_INT 22
28566: PUSH
28567: LD_OWVAR 2
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: LD_INT 30
28581: PUSH
28582: LD_INT 27
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 30
28591: PUSH
28592: LD_INT 26
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 30
28601: PUSH
28602: LD_INT 28
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PPUSH
28619: CALL_OW 69
28623: ST_TO_ADDR
// if not tmp then
28624: LD_VAR 0 2
28628: NOT
28629: IFFALSE 28633
// exit ;
28631: GO 28662
// for i in tmp do
28633: LD_ADDR_VAR 0 1
28637: PUSH
28638: LD_VAR 0 2
28642: PUSH
28643: FOR_IN
28644: IFFALSE 28660
// SetLives ( i , 1 ) ;
28646: LD_VAR 0 1
28650: PPUSH
28651: LD_INT 1
28653: PPUSH
28654: CALL_OW 234
28658: GO 28643
28660: POP
28661: POP
// end ;
28662: PPOPN 2
28664: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28665: LD_EXP 37
28669: IFFALSE 28677
28671: PUSH
28672: LD_EXP 86
28676: AND
28677: IFFALSE 28964
28679: GO 28681
28681: DISABLE
28682: LD_INT 0
28684: PPUSH
28685: PPUSH
28686: PPUSH
// begin i := rand ( 1 , 7 ) ;
28687: LD_ADDR_VAR 0 1
28691: PUSH
28692: LD_INT 1
28694: PPUSH
28695: LD_INT 7
28697: PPUSH
28698: CALL_OW 12
28702: ST_TO_ADDR
// case i of 1 :
28703: LD_VAR 0 1
28707: PUSH
28708: LD_INT 1
28710: DOUBLE
28711: EQUAL
28712: IFTRUE 28716
28714: GO 28726
28716: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28717: LD_STRING earthquake(getX(game), 0, 32)
28719: PPUSH
28720: CALL_OW 559
28724: GO 28964
28726: LD_INT 2
28728: DOUBLE
28729: EQUAL
28730: IFTRUE 28734
28732: GO 28748
28734: POP
// begin ToLua ( displayStucuk(); ) ;
28735: LD_STRING displayStucuk();
28737: PPUSH
28738: CALL_OW 559
// ResetFog ;
28742: CALL_OW 335
// end ; 3 :
28746: GO 28964
28748: LD_INT 3
28750: DOUBLE
28751: EQUAL
28752: IFTRUE 28756
28754: GO 28860
28756: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28757: LD_ADDR_VAR 0 2
28761: PUSH
28762: LD_INT 22
28764: PUSH
28765: LD_OWVAR 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 25
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PPUSH
28788: CALL_OW 69
28792: ST_TO_ADDR
// if not tmp then
28793: LD_VAR 0 2
28797: NOT
28798: IFFALSE 28802
// exit ;
28800: GO 28964
// un := tmp [ rand ( 1 , tmp ) ] ;
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_VAR 0 2
28811: PUSH
28812: LD_INT 1
28814: PPUSH
28815: LD_VAR 0 2
28819: PPUSH
28820: CALL_OW 12
28824: ARRAY
28825: ST_TO_ADDR
// if Crawls ( un ) then
28826: LD_VAR 0 3
28830: PPUSH
28831: CALL_OW 318
28835: IFFALSE 28846
// ComWalk ( un ) ;
28837: LD_VAR 0 3
28841: PPUSH
28842: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28846: LD_VAR 0 3
28850: PPUSH
28851: LD_INT 8
28853: PPUSH
28854: CALL_OW 336
// end ; 4 :
28858: GO 28964
28860: LD_INT 4
28862: DOUBLE
28863: EQUAL
28864: IFTRUE 28868
28866: GO 28942
28868: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28869: LD_ADDR_VAR 0 2
28873: PUSH
28874: LD_INT 22
28876: PUSH
28877: LD_OWVAR 2
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 30
28888: PUSH
28889: LD_INT 29
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 2
28909: NOT
28910: IFFALSE 28914
// exit ;
28912: GO 28964
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28914: LD_VAR 0 2
28918: PUSH
28919: LD_INT 1
28921: ARRAY
28922: PPUSH
28923: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28927: LD_VAR 0 2
28931: PUSH
28932: LD_INT 1
28934: ARRAY
28935: PPUSH
28936: CALL_OW 65
// end ; 5 .. 7 :
28940: GO 28964
28942: LD_INT 5
28944: DOUBLE
28945: GREATEREQUAL
28946: IFFALSE 28954
28948: LD_INT 7
28950: DOUBLE
28951: LESSEQUAL
28952: IFTRUE 28956
28954: GO 28963
28956: POP
// StreamSibBomb ; end ;
28957: CALL 25145 0 0
28961: GO 28964
28963: POP
// end ;
28964: PPOPN 3
28966: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28967: LD_EXP 37
28971: IFFALSE 28979
28973: PUSH
28974: LD_EXP 87
28978: AND
28979: IFFALSE 29135
28981: GO 28983
28983: DISABLE
28984: LD_INT 0
28986: PPUSH
28987: PPUSH
28988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28989: LD_ADDR_VAR 0 2
28993: PUSH
28994: LD_INT 81
28996: PUSH
28997: LD_OWVAR 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 21
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 21
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PPUSH
29038: CALL_OW 69
29042: ST_TO_ADDR
// if not tmp then
29043: LD_VAR 0 2
29047: NOT
29048: IFFALSE 29052
// exit ;
29050: GO 29135
// p := 0 ;
29052: LD_ADDR_VAR 0 3
29056: PUSH
29057: LD_INT 0
29059: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29060: LD_INT 35
29062: PPUSH
29063: CALL_OW 67
// p := p + 1 ;
29067: LD_ADDR_VAR 0 3
29071: PUSH
29072: LD_VAR 0 3
29076: PUSH
29077: LD_INT 1
29079: PLUS
29080: ST_TO_ADDR
// for i in tmp do
29081: LD_ADDR_VAR 0 1
29085: PUSH
29086: LD_VAR 0 2
29090: PUSH
29091: FOR_IN
29092: IFFALSE 29123
// if GetLives ( i ) < 1000 then
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 256
29103: PUSH
29104: LD_INT 1000
29106: LESS
29107: IFFALSE 29121
// SetLives ( i , 1000 ) ;
29109: LD_VAR 0 1
29113: PPUSH
29114: LD_INT 1000
29116: PPUSH
29117: CALL_OW 234
29121: GO 29091
29123: POP
29124: POP
// until p > 20 ;
29125: LD_VAR 0 3
29129: PUSH
29130: LD_INT 20
29132: GREATER
29133: IFFALSE 29060
// end ;
29135: PPOPN 3
29137: END
// every 0 0$1 trigger StreamModeActive and sTime do
29138: LD_EXP 37
29142: IFFALSE 29150
29144: PUSH
29145: LD_EXP 88
29149: AND
29150: IFFALSE 29185
29152: GO 29154
29154: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29155: LD_INT 28
29157: PPUSH
29158: LD_OWVAR 2
29162: PPUSH
29163: LD_INT 2
29165: PPUSH
29166: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29170: LD_INT 30
29172: PPUSH
29173: LD_OWVAR 2
29177: PPUSH
29178: LD_INT 2
29180: PPUSH
29181: CALL_OW 322
// end ;
29185: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29186: LD_EXP 37
29190: IFFALSE 29198
29192: PUSH
29193: LD_EXP 89
29197: AND
29198: IFFALSE 29319
29200: GO 29202
29202: DISABLE
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29207: LD_ADDR_VAR 0 2
29211: PUSH
29212: LD_INT 22
29214: PUSH
29215: LD_OWVAR 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 21
29226: PUSH
29227: LD_INT 1
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 3
29236: PUSH
29237: LD_INT 23
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: PPUSH
29256: CALL_OW 69
29260: ST_TO_ADDR
// if not tmp then
29261: LD_VAR 0 2
29265: NOT
29266: IFFALSE 29270
// exit ;
29268: GO 29319
// for i in tmp do
29270: LD_ADDR_VAR 0 1
29274: PUSH
29275: LD_VAR 0 2
29279: PUSH
29280: FOR_IN
29281: IFFALSE 29317
// begin if Crawls ( i ) then
29283: LD_VAR 0 1
29287: PPUSH
29288: CALL_OW 318
29292: IFFALSE 29303
// ComWalk ( i ) ;
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL_OW 138
// SetClass ( i , 2 ) ;
29303: LD_VAR 0 1
29307: PPUSH
29308: LD_INT 2
29310: PPUSH
29311: CALL_OW 336
// end ;
29315: GO 29280
29317: POP
29318: POP
// end ;
29319: PPOPN 2
29321: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29322: LD_EXP 37
29326: IFFALSE 29334
29328: PUSH
29329: LD_EXP 90
29333: AND
29334: IFFALSE 29624
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
29343: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29344: LD_OWVAR 2
29348: PPUSH
29349: LD_INT 9
29351: PPUSH
29352: LD_INT 1
29354: PPUSH
29355: LD_INT 1
29357: PPUSH
29358: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29362: LD_INT 9
29364: PPUSH
29365: LD_OWVAR 2
29369: PPUSH
29370: CALL_OW 343
// uc_side := 9 ;
29374: LD_ADDR_OWVAR 20
29378: PUSH
29379: LD_INT 9
29381: ST_TO_ADDR
// uc_nation := 2 ;
29382: LD_ADDR_OWVAR 21
29386: PUSH
29387: LD_INT 2
29389: ST_TO_ADDR
// hc_name := Dark Warrior ;
29390: LD_ADDR_OWVAR 26
29394: PUSH
29395: LD_STRING Dark Warrior
29397: ST_TO_ADDR
// hc_gallery :=  ;
29398: LD_ADDR_OWVAR 33
29402: PUSH
29403: LD_STRING 
29405: ST_TO_ADDR
// hc_noskilllimit := true ;
29406: LD_ADDR_OWVAR 76
29410: PUSH
29411: LD_INT 1
29413: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29414: LD_ADDR_OWVAR 31
29418: PUSH
29419: LD_INT 30
29421: PUSH
29422: LD_INT 30
29424: PUSH
29425: LD_INT 30
29427: PUSH
29428: LD_INT 30
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: ST_TO_ADDR
// un := CreateHuman ;
29437: LD_ADDR_VAR 0 3
29441: PUSH
29442: CALL_OW 44
29446: ST_TO_ADDR
// hc_noskilllimit := false ;
29447: LD_ADDR_OWVAR 76
29451: PUSH
29452: LD_INT 0
29454: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29455: LD_VAR 0 3
29459: PPUSH
29460: LD_INT 1
29462: PPUSH
29463: CALL_OW 51
// ToLua ( playRanger() ) ;
29467: LD_STRING playRanger()
29469: PPUSH
29470: CALL_OW 559
// p := 0 ;
29474: LD_ADDR_VAR 0 2
29478: PUSH
29479: LD_INT 0
29481: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29482: LD_INT 35
29484: PPUSH
29485: CALL_OW 67
// p := p + 1 ;
29489: LD_ADDR_VAR 0 2
29493: PUSH
29494: LD_VAR 0 2
29498: PUSH
29499: LD_INT 1
29501: PLUS
29502: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29503: LD_VAR 0 3
29507: PPUSH
29508: CALL_OW 256
29512: PUSH
29513: LD_INT 1000
29515: LESS
29516: IFFALSE 29530
// SetLives ( un , 1000 ) ;
29518: LD_VAR 0 3
29522: PPUSH
29523: LD_INT 1000
29525: PPUSH
29526: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29530: LD_VAR 0 3
29534: PPUSH
29535: LD_INT 81
29537: PUSH
29538: LD_OWVAR 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 91
29549: PUSH
29550: LD_VAR 0 3
29554: PUSH
29555: LD_INT 30
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PPUSH
29567: CALL_OW 69
29571: PPUSH
29572: LD_VAR 0 3
29576: PPUSH
29577: CALL_OW 74
29581: PPUSH
29582: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29586: LD_VAR 0 2
29590: PUSH
29591: LD_INT 80
29593: GREATER
29594: IFTRUE 29607
29596: PUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL_OW 301
29606: OR
29607: IFFALSE 29482
// if un then
29609: LD_VAR 0 3
29613: IFFALSE 29624
// RemoveUnit ( un ) ;
29615: LD_VAR 0 3
29619: PPUSH
29620: CALL_OW 64
// end ;
29624: PPOPN 3
29626: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29627: LD_EXP 91
29631: IFFALSE 29747
29633: GO 29635
29635: DISABLE
29636: LD_INT 0
29638: PPUSH
29639: PPUSH
29640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29641: LD_ADDR_VAR 0 2
29645: PUSH
29646: LD_INT 81
29648: PUSH
29649: LD_OWVAR 2
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 21
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PPUSH
29672: CALL_OW 69
29676: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29677: LD_STRING playComputer()
29679: PPUSH
29680: CALL_OW 559
// if not tmp then
29684: LD_VAR 0 2
29688: NOT
29689: IFFALSE 29693
// exit ;
29691: GO 29747
// for i in tmp do
29693: LD_ADDR_VAR 0 1
29697: PUSH
29698: LD_VAR 0 2
29702: PUSH
29703: FOR_IN
29704: IFFALSE 29745
// for j := 1 to 4 do
29706: LD_ADDR_VAR 0 3
29710: PUSH
29711: DOUBLE
29712: LD_INT 1
29714: DEC
29715: ST_TO_ADDR
29716: LD_INT 4
29718: PUSH
29719: FOR_TO
29720: IFFALSE 29741
// SetSkill ( i , j , 10 ) ;
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: LD_INT 10
29734: PPUSH
29735: CALL_OW 237
29739: GO 29719
29741: POP
29742: POP
29743: GO 29703
29745: POP
29746: POP
// end ;
29747: PPOPN 3
29749: END
// every 0 0$1 trigger s30 do var i , tmp ;
29750: LD_EXP 92
29754: IFFALSE 29823
29756: GO 29758
29758: DISABLE
29759: LD_INT 0
29761: PPUSH
29762: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29763: LD_ADDR_VAR 0 2
29767: PUSH
29768: LD_INT 22
29770: PUSH
29771: LD_OWVAR 2
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PPUSH
29780: CALL_OW 69
29784: ST_TO_ADDR
// if not tmp then
29785: LD_VAR 0 2
29789: NOT
29790: IFFALSE 29794
// exit ;
29792: GO 29823
// for i in tmp do
29794: LD_ADDR_VAR 0 1
29798: PUSH
29799: LD_VAR 0 2
29803: PUSH
29804: FOR_IN
29805: IFFALSE 29821
// SetLives ( i , 300 ) ;
29807: LD_VAR 0 1
29811: PPUSH
29812: LD_INT 300
29814: PPUSH
29815: CALL_OW 234
29819: GO 29804
29821: POP
29822: POP
// end ;
29823: PPOPN 2
29825: END
// every 0 0$1 trigger s60 do var i , tmp ;
29826: LD_EXP 93
29830: IFFALSE 29899
29832: GO 29834
29834: DISABLE
29835: LD_INT 0
29837: PPUSH
29838: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29839: LD_ADDR_VAR 0 2
29843: PUSH
29844: LD_INT 22
29846: PUSH
29847: LD_OWVAR 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PPUSH
29856: CALL_OW 69
29860: ST_TO_ADDR
// if not tmp then
29861: LD_VAR 0 2
29865: NOT
29866: IFFALSE 29870
// exit ;
29868: GO 29899
// for i in tmp do
29870: LD_ADDR_VAR 0 1
29874: PUSH
29875: LD_VAR 0 2
29879: PUSH
29880: FOR_IN
29881: IFFALSE 29897
// SetLives ( i , 600 ) ;
29883: LD_VAR 0 1
29887: PPUSH
29888: LD_INT 600
29890: PPUSH
29891: CALL_OW 234
29895: GO 29880
29897: POP
29898: POP
// end ;
29899: PPOPN 2
29901: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29902: LD_INT 0
29904: PPUSH
// case cmd of 301 :
29905: LD_VAR 0 1
29909: PUSH
29910: LD_INT 301
29912: DOUBLE
29913: EQUAL
29914: IFTRUE 29918
29916: GO 29950
29918: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29919: LD_VAR 0 6
29923: PPUSH
29924: LD_VAR 0 7
29928: PPUSH
29929: LD_VAR 0 8
29933: PPUSH
29934: LD_VAR 0 4
29938: PPUSH
29939: LD_VAR 0 5
29943: PPUSH
29944: CALL 31163 0 5
29948: GO 30071
29950: LD_INT 302
29952: DOUBLE
29953: EQUAL
29954: IFTRUE 29958
29956: GO 29995
29958: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29959: LD_VAR 0 6
29963: PPUSH
29964: LD_VAR 0 7
29968: PPUSH
29969: LD_VAR 0 8
29973: PPUSH
29974: LD_VAR 0 9
29978: PPUSH
29979: LD_VAR 0 4
29983: PPUSH
29984: LD_VAR 0 5
29988: PPUSH
29989: CALL 31254 0 6
29993: GO 30071
29995: LD_INT 303
29997: DOUBLE
29998: EQUAL
29999: IFTRUE 30003
30001: GO 30040
30003: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30004: LD_VAR 0 6
30008: PPUSH
30009: LD_VAR 0 7
30013: PPUSH
30014: LD_VAR 0 8
30018: PPUSH
30019: LD_VAR 0 9
30023: PPUSH
30024: LD_VAR 0 4
30028: PPUSH
30029: LD_VAR 0 5
30033: PPUSH
30034: CALL 30076 0 6
30038: GO 30071
30040: LD_INT 304
30042: DOUBLE
30043: EQUAL
30044: IFTRUE 30048
30046: GO 30070
30048: POP
// hHackTeleport ( unit , x , y ) ; end ;
30049: LD_VAR 0 2
30053: PPUSH
30054: LD_VAR 0 4
30058: PPUSH
30059: LD_VAR 0 5
30063: PPUSH
30064: CALL 31847 0 3
30068: GO 30071
30070: POP
// end ;
30071: LD_VAR 0 12
30075: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30076: LD_INT 0
30078: PPUSH
30079: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30080: LD_VAR 0 1
30084: PUSH
30085: LD_INT 1
30087: LESS
30088: IFTRUE 30100
30090: PUSH
30091: LD_VAR 0 1
30095: PUSH
30096: LD_INT 3
30098: GREATER
30099: OR
30100: IFTRUE 30118
30102: PUSH
30103: LD_VAR 0 5
30107: PPUSH
30108: LD_VAR 0 6
30112: PPUSH
30113: CALL_OW 428
30117: OR
30118: IFFALSE 30122
// exit ;
30120: GO 30850
// uc_side := your_side ;
30122: LD_ADDR_OWVAR 20
30126: PUSH
30127: LD_OWVAR 2
30131: ST_TO_ADDR
// uc_nation := nation ;
30132: LD_ADDR_OWVAR 21
30136: PUSH
30137: LD_VAR 0 1
30141: ST_TO_ADDR
// bc_level = 1 ;
30142: LD_ADDR_OWVAR 43
30146: PUSH
30147: LD_INT 1
30149: ST_TO_ADDR
// case btype of 1 :
30150: LD_VAR 0 2
30154: PUSH
30155: LD_INT 1
30157: DOUBLE
30158: EQUAL
30159: IFTRUE 30163
30161: GO 30174
30163: POP
// bc_type := b_depot ; 2 :
30164: LD_ADDR_OWVAR 42
30168: PUSH
30169: LD_INT 0
30171: ST_TO_ADDR
30172: GO 30794
30174: LD_INT 2
30176: DOUBLE
30177: EQUAL
30178: IFTRUE 30182
30180: GO 30193
30182: POP
// bc_type := b_warehouse ; 3 :
30183: LD_ADDR_OWVAR 42
30187: PUSH
30188: LD_INT 1
30190: ST_TO_ADDR
30191: GO 30794
30193: LD_INT 3
30195: DOUBLE
30196: EQUAL
30197: IFTRUE 30201
30199: GO 30212
30201: POP
// bc_type := b_lab ; 4 .. 9 :
30202: LD_ADDR_OWVAR 42
30206: PUSH
30207: LD_INT 6
30209: ST_TO_ADDR
30210: GO 30794
30212: LD_INT 4
30214: DOUBLE
30215: GREATEREQUAL
30216: IFFALSE 30224
30218: LD_INT 9
30220: DOUBLE
30221: LESSEQUAL
30222: IFTRUE 30226
30224: GO 30286
30226: POP
// begin bc_type := b_lab_half ;
30227: LD_ADDR_OWVAR 42
30231: PUSH
30232: LD_INT 7
30234: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30235: LD_ADDR_OWVAR 44
30239: PUSH
30240: LD_INT 10
30242: PUSH
30243: LD_INT 11
30245: PUSH
30246: LD_INT 12
30248: PUSH
30249: LD_INT 15
30251: PUSH
30252: LD_INT 14
30254: PUSH
30255: LD_INT 13
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: PUSH
30266: LD_VAR 0 2
30270: PUSH
30271: LD_INT 3
30273: MINUS
30274: ARRAY
30275: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30276: LD_ADDR_OWVAR 45
30280: PUSH
30281: LD_INT 9
30283: ST_TO_ADDR
// end ; 10 .. 13 :
30284: GO 30794
30286: LD_INT 10
30288: DOUBLE
30289: GREATEREQUAL
30290: IFFALSE 30298
30292: LD_INT 13
30294: DOUBLE
30295: LESSEQUAL
30296: IFTRUE 30300
30298: GO 30377
30300: POP
// begin bc_type := b_lab_full ;
30301: LD_ADDR_OWVAR 42
30305: PUSH
30306: LD_INT 8
30308: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30309: LD_ADDR_OWVAR 44
30313: PUSH
30314: LD_INT 10
30316: PUSH
30317: LD_INT 12
30319: PUSH
30320: LD_INT 14
30322: PUSH
30323: LD_INT 13
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: PUSH
30332: LD_VAR 0 2
30336: PUSH
30337: LD_INT 9
30339: MINUS
30340: ARRAY
30341: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30342: LD_ADDR_OWVAR 45
30346: PUSH
30347: LD_INT 11
30349: PUSH
30350: LD_INT 15
30352: PUSH
30353: LD_INT 12
30355: PUSH
30356: LD_INT 15
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: PUSH
30365: LD_VAR 0 2
30369: PUSH
30370: LD_INT 9
30372: MINUS
30373: ARRAY
30374: ST_TO_ADDR
// end ; 14 :
30375: GO 30794
30377: LD_INT 14
30379: DOUBLE
30380: EQUAL
30381: IFTRUE 30385
30383: GO 30396
30385: POP
// bc_type := b_workshop ; 15 :
30386: LD_ADDR_OWVAR 42
30390: PUSH
30391: LD_INT 2
30393: ST_TO_ADDR
30394: GO 30794
30396: LD_INT 15
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30415
30404: POP
// bc_type := b_factory ; 16 :
30405: LD_ADDR_OWVAR 42
30409: PUSH
30410: LD_INT 3
30412: ST_TO_ADDR
30413: GO 30794
30415: LD_INT 16
30417: DOUBLE
30418: EQUAL
30419: IFTRUE 30423
30421: GO 30434
30423: POP
// bc_type := b_ext_gun ; 17 :
30424: LD_ADDR_OWVAR 42
30428: PUSH
30429: LD_INT 17
30431: ST_TO_ADDR
30432: GO 30794
30434: LD_INT 17
30436: DOUBLE
30437: EQUAL
30438: IFTRUE 30442
30440: GO 30470
30442: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30443: LD_ADDR_OWVAR 42
30447: PUSH
30448: LD_INT 19
30450: PUSH
30451: LD_INT 23
30453: PUSH
30454: LD_INT 19
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: PUSH
30462: LD_VAR 0 1
30466: ARRAY
30467: ST_TO_ADDR
30468: GO 30794
30470: LD_INT 18
30472: DOUBLE
30473: EQUAL
30474: IFTRUE 30478
30476: GO 30489
30478: POP
// bc_type := b_ext_radar ; 19 :
30479: LD_ADDR_OWVAR 42
30483: PUSH
30484: LD_INT 20
30486: ST_TO_ADDR
30487: GO 30794
30489: LD_INT 19
30491: DOUBLE
30492: EQUAL
30493: IFTRUE 30497
30495: GO 30508
30497: POP
// bc_type := b_ext_radio ; 20 :
30498: LD_ADDR_OWVAR 42
30502: PUSH
30503: LD_INT 22
30505: ST_TO_ADDR
30506: GO 30794
30508: LD_INT 20
30510: DOUBLE
30511: EQUAL
30512: IFTRUE 30516
30514: GO 30527
30516: POP
// bc_type := b_ext_siberium ; 21 :
30517: LD_ADDR_OWVAR 42
30521: PUSH
30522: LD_INT 21
30524: ST_TO_ADDR
30525: GO 30794
30527: LD_INT 21
30529: DOUBLE
30530: EQUAL
30531: IFTRUE 30535
30533: GO 30546
30535: POP
// bc_type := b_ext_computer ; 22 :
30536: LD_ADDR_OWVAR 42
30540: PUSH
30541: LD_INT 24
30543: ST_TO_ADDR
30544: GO 30794
30546: LD_INT 22
30548: DOUBLE
30549: EQUAL
30550: IFTRUE 30554
30552: GO 30565
30554: POP
// bc_type := b_ext_track ; 23 :
30555: LD_ADDR_OWVAR 42
30559: PUSH
30560: LD_INT 16
30562: ST_TO_ADDR
30563: GO 30794
30565: LD_INT 23
30567: DOUBLE
30568: EQUAL
30569: IFTRUE 30573
30571: GO 30584
30573: POP
// bc_type := b_ext_laser ; 24 :
30574: LD_ADDR_OWVAR 42
30578: PUSH
30579: LD_INT 25
30581: ST_TO_ADDR
30582: GO 30794
30584: LD_INT 24
30586: DOUBLE
30587: EQUAL
30588: IFTRUE 30592
30590: GO 30603
30592: POP
// bc_type := b_control_tower ; 25 :
30593: LD_ADDR_OWVAR 42
30597: PUSH
30598: LD_INT 36
30600: ST_TO_ADDR
30601: GO 30794
30603: LD_INT 25
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30622
30611: POP
// bc_type := b_breastwork ; 26 :
30612: LD_ADDR_OWVAR 42
30616: PUSH
30617: LD_INT 31
30619: ST_TO_ADDR
30620: GO 30794
30622: LD_INT 26
30624: DOUBLE
30625: EQUAL
30626: IFTRUE 30630
30628: GO 30641
30630: POP
// bc_type := b_bunker ; 27 :
30631: LD_ADDR_OWVAR 42
30635: PUSH
30636: LD_INT 32
30638: ST_TO_ADDR
30639: GO 30794
30641: LD_INT 27
30643: DOUBLE
30644: EQUAL
30645: IFTRUE 30649
30647: GO 30660
30649: POP
// bc_type := b_turret ; 28 :
30650: LD_ADDR_OWVAR 42
30654: PUSH
30655: LD_INT 33
30657: ST_TO_ADDR
30658: GO 30794
30660: LD_INT 28
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30679
30668: POP
// bc_type := b_armoury ; 29 :
30669: LD_ADDR_OWVAR 42
30673: PUSH
30674: LD_INT 4
30676: ST_TO_ADDR
30677: GO 30794
30679: LD_INT 29
30681: DOUBLE
30682: EQUAL
30683: IFTRUE 30687
30685: GO 30698
30687: POP
// bc_type := b_barracks ; 30 :
30688: LD_ADDR_OWVAR 42
30692: PUSH
30693: LD_INT 5
30695: ST_TO_ADDR
30696: GO 30794
30698: LD_INT 30
30700: DOUBLE
30701: EQUAL
30702: IFTRUE 30706
30704: GO 30717
30706: POP
// bc_type := b_solar_power ; 31 :
30707: LD_ADDR_OWVAR 42
30711: PUSH
30712: LD_INT 27
30714: ST_TO_ADDR
30715: GO 30794
30717: LD_INT 31
30719: DOUBLE
30720: EQUAL
30721: IFTRUE 30725
30723: GO 30736
30725: POP
// bc_type := b_oil_power ; 32 :
30726: LD_ADDR_OWVAR 42
30730: PUSH
30731: LD_INT 26
30733: ST_TO_ADDR
30734: GO 30794
30736: LD_INT 32
30738: DOUBLE
30739: EQUAL
30740: IFTRUE 30744
30742: GO 30755
30744: POP
// bc_type := b_siberite_power ; 33 :
30745: LD_ADDR_OWVAR 42
30749: PUSH
30750: LD_INT 28
30752: ST_TO_ADDR
30753: GO 30794
30755: LD_INT 33
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30774
30763: POP
// bc_type := b_oil_mine ; 34 :
30764: LD_ADDR_OWVAR 42
30768: PUSH
30769: LD_INT 29
30771: ST_TO_ADDR
30772: GO 30794
30774: LD_INT 34
30776: DOUBLE
30777: EQUAL
30778: IFTRUE 30782
30780: GO 30793
30782: POP
// bc_type := b_siberite_mine ; end ;
30783: LD_ADDR_OWVAR 42
30787: PUSH
30788: LD_INT 30
30790: ST_TO_ADDR
30791: GO 30794
30793: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30794: LD_ADDR_VAR 0 8
30798: PUSH
30799: LD_VAR 0 5
30803: PPUSH
30804: LD_VAR 0 6
30808: PPUSH
30809: LD_VAR 0 3
30813: PPUSH
30814: CALL_OW 47
30818: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30819: LD_OWVAR 42
30823: PUSH
30824: LD_INT 32
30826: PUSH
30827: LD_INT 33
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: IN
30834: IFFALSE 30850
// PlaceWeaponTurret ( b , weapon ) ;
30836: LD_VAR 0 8
30840: PPUSH
30841: LD_VAR 0 4
30845: PPUSH
30846: CALL_OW 431
// end ;
30850: LD_VAR 0 7
30854: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30855: LD_INT 0
30857: PPUSH
30858: PPUSH
30859: PPUSH
30860: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30861: LD_ADDR_VAR 0 4
30865: PUSH
30866: LD_INT 22
30868: PUSH
30869: LD_OWVAR 2
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 30
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 30
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PPUSH
30910: CALL_OW 69
30914: ST_TO_ADDR
// if not tmp then
30915: LD_VAR 0 4
30919: NOT
30920: IFFALSE 30924
// exit ;
30922: GO 30983
// for i in tmp do
30924: LD_ADDR_VAR 0 2
30928: PUSH
30929: LD_VAR 0 4
30933: PUSH
30934: FOR_IN
30935: IFFALSE 30981
// for j = 1 to 3 do
30937: LD_ADDR_VAR 0 3
30941: PUSH
30942: DOUBLE
30943: LD_INT 1
30945: DEC
30946: ST_TO_ADDR
30947: LD_INT 3
30949: PUSH
30950: FOR_TO
30951: IFFALSE 30977
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30953: LD_VAR 0 2
30957: PPUSH
30958: CALL_OW 274
30962: PPUSH
30963: LD_VAR 0 3
30967: PPUSH
30968: LD_INT 99999
30970: PPUSH
30971: CALL_OW 277
30975: GO 30950
30977: POP
30978: POP
30979: GO 30934
30981: POP
30982: POP
// end ;
30983: LD_VAR 0 1
30987: RET
// export function hHackSetLevel10 ; var i , j ; begin
30988: LD_INT 0
30990: PPUSH
30991: PPUSH
30992: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30993: LD_ADDR_VAR 0 2
30997: PUSH
30998: LD_INT 21
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PPUSH
31008: CALL_OW 69
31012: PUSH
31013: FOR_IN
31014: IFFALSE 31066
// if IsSelected ( i ) then
31016: LD_VAR 0 2
31020: PPUSH
31021: CALL_OW 306
31025: IFFALSE 31064
// begin for j := 1 to 4 do
31027: LD_ADDR_VAR 0 3
31031: PUSH
31032: DOUBLE
31033: LD_INT 1
31035: DEC
31036: ST_TO_ADDR
31037: LD_INT 4
31039: PUSH
31040: FOR_TO
31041: IFFALSE 31062
// SetSkill ( i , j , 10 ) ;
31043: LD_VAR 0 2
31047: PPUSH
31048: LD_VAR 0 3
31052: PPUSH
31053: LD_INT 10
31055: PPUSH
31056: CALL_OW 237
31060: GO 31040
31062: POP
31063: POP
// end ;
31064: GO 31013
31066: POP
31067: POP
// end ;
31068: LD_VAR 0 1
31072: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31073: LD_INT 0
31075: PPUSH
31076: PPUSH
31077: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31078: LD_ADDR_VAR 0 2
31082: PUSH
31083: LD_INT 22
31085: PUSH
31086: LD_OWVAR 2
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 21
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PPUSH
31109: CALL_OW 69
31113: PUSH
31114: FOR_IN
31115: IFFALSE 31156
// begin for j := 1 to 4 do
31117: LD_ADDR_VAR 0 3
31121: PUSH
31122: DOUBLE
31123: LD_INT 1
31125: DEC
31126: ST_TO_ADDR
31127: LD_INT 4
31129: PUSH
31130: FOR_TO
31131: IFFALSE 31152
// SetSkill ( i , j , 10 ) ;
31133: LD_VAR 0 2
31137: PPUSH
31138: LD_VAR 0 3
31142: PPUSH
31143: LD_INT 10
31145: PPUSH
31146: CALL_OW 237
31150: GO 31130
31152: POP
31153: POP
// end ;
31154: GO 31114
31156: POP
31157: POP
// end ;
31158: LD_VAR 0 1
31162: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31163: LD_INT 0
31165: PPUSH
// uc_side := your_side ;
31166: LD_ADDR_OWVAR 20
31170: PUSH
31171: LD_OWVAR 2
31175: ST_TO_ADDR
// uc_nation := nation ;
31176: LD_ADDR_OWVAR 21
31180: PUSH
31181: LD_VAR 0 1
31185: ST_TO_ADDR
// InitHc ;
31186: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31190: LD_INT 0
31192: PPUSH
31193: LD_VAR 0 2
31197: PPUSH
31198: LD_VAR 0 3
31202: PPUSH
31203: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31207: LD_VAR 0 4
31211: PPUSH
31212: LD_VAR 0 5
31216: PPUSH
31217: CALL_OW 428
31221: PUSH
31222: LD_INT 0
31224: EQUAL
31225: IFFALSE 31249
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31227: CALL_OW 44
31231: PPUSH
31232: LD_VAR 0 4
31236: PPUSH
31237: LD_VAR 0 5
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: CALL_OW 48
// end ;
31249: LD_VAR 0 6
31253: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31254: LD_INT 0
31256: PPUSH
31257: PPUSH
// uc_side := your_side ;
31258: LD_ADDR_OWVAR 20
31262: PUSH
31263: LD_OWVAR 2
31267: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31268: LD_VAR 0 1
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: LD_INT 4
31284: PUSH
31285: LD_INT 5
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: IN
31295: IFFALSE 31307
// uc_nation := nation_american else
31297: LD_ADDR_OWVAR 21
31301: PUSH
31302: LD_INT 1
31304: ST_TO_ADDR
31305: GO 31350
// if chassis in [ 11 , 12 , 13 , 14 ] then
31307: LD_VAR 0 1
31311: PUSH
31312: LD_INT 11
31314: PUSH
31315: LD_INT 12
31317: PUSH
31318: LD_INT 13
31320: PUSH
31321: LD_INT 14
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: IN
31330: IFFALSE 31342
// uc_nation := nation_arabian else
31332: LD_ADDR_OWVAR 21
31336: PUSH
31337: LD_INT 2
31339: ST_TO_ADDR
31340: GO 31350
// uc_nation := nation_russian ;
31342: LD_ADDR_OWVAR 21
31346: PUSH
31347: LD_INT 3
31349: ST_TO_ADDR
// vc_chassis := chassis ;
31350: LD_ADDR_OWVAR 37
31354: PUSH
31355: LD_VAR 0 1
31359: ST_TO_ADDR
// vc_engine := engine ;
31360: LD_ADDR_OWVAR 39
31364: PUSH
31365: LD_VAR 0 2
31369: ST_TO_ADDR
// vc_control := control ;
31370: LD_ADDR_OWVAR 38
31374: PUSH
31375: LD_VAR 0 3
31379: ST_TO_ADDR
// vc_weapon := weapon ;
31380: LD_ADDR_OWVAR 40
31384: PUSH
31385: LD_VAR 0 4
31389: ST_TO_ADDR
// un := CreateVehicle ;
31390: LD_ADDR_VAR 0 8
31394: PUSH
31395: CALL_OW 45
31399: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31400: LD_VAR 0 8
31404: PPUSH
31405: LD_INT 0
31407: PPUSH
31408: LD_INT 5
31410: PPUSH
31411: CALL_OW 12
31415: PPUSH
31416: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31420: LD_VAR 0 8
31424: PPUSH
31425: LD_VAR 0 5
31429: PPUSH
31430: LD_VAR 0 6
31434: PPUSH
31435: LD_INT 1
31437: PPUSH
31438: CALL_OW 48
// end ;
31442: LD_VAR 0 7
31446: RET
// export hInvincible ; every 1 do
31447: GO 31449
31449: DISABLE
// hInvincible := [ ] ;
31450: LD_ADDR_EXP 94
31454: PUSH
31455: EMPTY
31456: ST_TO_ADDR
31457: END
// every 10 do var i ;
31458: GO 31460
31460: DISABLE
31461: LD_INT 0
31463: PPUSH
// begin enable ;
31464: ENABLE
// if not hInvincible then
31465: LD_EXP 94
31469: NOT
31470: IFFALSE 31474
// exit ;
31472: GO 31518
// for i in hInvincible do
31474: LD_ADDR_VAR 0 1
31478: PUSH
31479: LD_EXP 94
31483: PUSH
31484: FOR_IN
31485: IFFALSE 31516
// if GetLives ( i ) < 1000 then
31487: LD_VAR 0 1
31491: PPUSH
31492: CALL_OW 256
31496: PUSH
31497: LD_INT 1000
31499: LESS
31500: IFFALSE 31514
// SetLives ( i , 1000 ) ;
31502: LD_VAR 0 1
31506: PPUSH
31507: LD_INT 1000
31509: PPUSH
31510: CALL_OW 234
31514: GO 31484
31516: POP
31517: POP
// end ;
31518: PPOPN 1
31520: END
// export function hHackInvincible ; var i ; begin
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31525: LD_ADDR_VAR 0 2
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: LD_INT 21
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 21
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: PPUSH
31558: CALL_OW 69
31562: PUSH
31563: FOR_IN
31564: IFFALSE 31625
// if IsSelected ( i ) then
31566: LD_VAR 0 2
31570: PPUSH
31571: CALL_OW 306
31575: IFFALSE 31623
// begin if i in hInvincible then
31577: LD_VAR 0 2
31581: PUSH
31582: LD_EXP 94
31586: IN
31587: IFFALSE 31607
// hInvincible := hInvincible diff i else
31589: LD_ADDR_EXP 94
31593: PUSH
31594: LD_EXP 94
31598: PUSH
31599: LD_VAR 0 2
31603: DIFF
31604: ST_TO_ADDR
31605: GO 31623
// hInvincible := hInvincible union i ;
31607: LD_ADDR_EXP 94
31611: PUSH
31612: LD_EXP 94
31616: PUSH
31617: LD_VAR 0 2
31621: UNION
31622: ST_TO_ADDR
// end ;
31623: GO 31563
31625: POP
31626: POP
// end ;
31627: LD_VAR 0 1
31631: RET
// export function hHackInvisible ; var i , j ; begin
31632: LD_INT 0
31634: PPUSH
31635: PPUSH
31636: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31637: LD_ADDR_VAR 0 2
31641: PUSH
31642: LD_INT 21
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PPUSH
31652: CALL_OW 69
31656: PUSH
31657: FOR_IN
31658: IFFALSE 31682
// if IsSelected ( i ) then
31660: LD_VAR 0 2
31664: PPUSH
31665: CALL_OW 306
31669: IFFALSE 31680
// ComForceInvisible ( i ) ;
31671: LD_VAR 0 2
31675: PPUSH
31676: CALL_OW 496
31680: GO 31657
31682: POP
31683: POP
// end ;
31684: LD_VAR 0 1
31688: RET
// export function hHackChangeYourSide ; begin
31689: LD_INT 0
31691: PPUSH
// if your_side = 8 then
31692: LD_OWVAR 2
31696: PUSH
31697: LD_INT 8
31699: EQUAL
31700: IFFALSE 31712
// your_side := 0 else
31702: LD_ADDR_OWVAR 2
31706: PUSH
31707: LD_INT 0
31709: ST_TO_ADDR
31710: GO 31726
// your_side := your_side + 1 ;
31712: LD_ADDR_OWVAR 2
31716: PUSH
31717: LD_OWVAR 2
31721: PUSH
31722: LD_INT 1
31724: PLUS
31725: ST_TO_ADDR
// end ;
31726: LD_VAR 0 1
31730: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31731: LD_INT 0
31733: PPUSH
31734: PPUSH
31735: PPUSH
// for i in all_units do
31736: LD_ADDR_VAR 0 2
31740: PUSH
31741: LD_OWVAR 3
31745: PUSH
31746: FOR_IN
31747: IFFALSE 31825
// if IsSelected ( i ) then
31749: LD_VAR 0 2
31753: PPUSH
31754: CALL_OW 306
31758: IFFALSE 31823
// begin j := GetSide ( i ) ;
31760: LD_ADDR_VAR 0 3
31764: PUSH
31765: LD_VAR 0 2
31769: PPUSH
31770: CALL_OW 255
31774: ST_TO_ADDR
// if j = 8 then
31775: LD_VAR 0 3
31779: PUSH
31780: LD_INT 8
31782: EQUAL
31783: IFFALSE 31795
// j := 0 else
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: LD_INT 0
31792: ST_TO_ADDR
31793: GO 31809
// j := j + 1 ;
31795: LD_ADDR_VAR 0 3
31799: PUSH
31800: LD_VAR 0 3
31804: PUSH
31805: LD_INT 1
31807: PLUS
31808: ST_TO_ADDR
// SetSide ( i , j ) ;
31809: LD_VAR 0 2
31813: PPUSH
31814: LD_VAR 0 3
31818: PPUSH
31819: CALL_OW 235
// end ;
31823: GO 31746
31825: POP
31826: POP
// end ;
31827: LD_VAR 0 1
31831: RET
// export function hHackFog ; begin
31832: LD_INT 0
31834: PPUSH
// FogOff ( true ) ;
31835: LD_INT 1
31837: PPUSH
31838: CALL_OW 344
// end ;
31842: LD_VAR 0 1
31846: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31847: LD_INT 0
31849: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31850: LD_VAR 0 1
31854: PPUSH
31855: LD_VAR 0 2
31859: PPUSH
31860: LD_VAR 0 3
31864: PPUSH
31865: LD_INT 1
31867: PPUSH
31868: LD_INT 1
31870: PPUSH
31871: CALL_OW 483
// CenterOnXY ( x , y ) ;
31875: LD_VAR 0 2
31879: PPUSH
31880: LD_VAR 0 3
31884: PPUSH
31885: CALL_OW 84
// end ;
31889: LD_VAR 0 4
31893: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31894: LD_INT 0
31896: PPUSH
31897: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31898: LD_VAR 0 1
31902: NOT
31903: IFTRUE 31922
31905: PUSH
31906: LD_VAR 0 2
31910: PPUSH
31911: LD_VAR 0 3
31915: PPUSH
31916: CALL_OW 488
31920: NOT
31921: OR
31922: IFTRUE 31957
31924: PUSH
31925: LD_VAR 0 1
31929: PPUSH
31930: CALL_OW 266
31934: PUSH
31935: LD_INT 3
31937: NONEQUAL
31938: IFFALSE 31956
31940: PUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 247
31950: PUSH
31951: LD_INT 1
31953: EQUAL
31954: NOT
31955: AND
31956: OR
31957: IFFALSE 31961
// exit ;
31959: GO 32243
// if GetType ( factory ) = unit_human then
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL_OW 247
31970: PUSH
31971: LD_INT 1
31973: EQUAL
31974: IFFALSE 31991
// factory := IsInUnit ( factory ) ;
31976: LD_ADDR_VAR 0 1
31980: PUSH
31981: LD_VAR 0 1
31985: PPUSH
31986: CALL_OW 310
31990: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31991: LD_VAR 0 1
31995: PPUSH
31996: CALL_OW 266
32000: PUSH
32001: LD_INT 3
32003: NONEQUAL
32004: IFFALSE 32008
// exit ;
32006: GO 32243
// for i := 1 to Count ( factoryWaypoints ) do
32008: LD_ADDR_VAR 0 5
32012: PUSH
32013: DOUBLE
32014: LD_INT 1
32016: DEC
32017: ST_TO_ADDR
32018: LD_EXP 95
32022: PPUSH
32023: CALL 35573 0 1
32027: PUSH
32028: FOR_TO
32029: IFFALSE 32191
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32031: LD_VAR 0 2
32035: PPUSH
32036: LD_VAR 0 3
32040: PPUSH
32041: CALL_OW 428
32045: PUSH
32046: LD_EXP 95
32050: PUSH
32051: LD_VAR 0 5
32055: ARRAY
32056: PUSH
32057: LD_INT 2
32059: ARRAY
32060: EQUAL
32061: IFFALSE 32093
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32063: LD_ADDR_EXP 95
32067: PUSH
32068: LD_EXP 95
32072: PPUSH
32073: LD_VAR 0 5
32077: PPUSH
32078: CALL_OW 3
32082: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32083: CALL 32248 0 0
// exit ;
32087: POP
32088: POP
32089: GO 32243
// end else
32091: GO 32189
// if factory = factoryWaypoints [ i ] [ 2 ] then
32093: LD_VAR 0 1
32097: PUSH
32098: LD_EXP 95
32102: PUSH
32103: LD_VAR 0 5
32107: ARRAY
32108: PUSH
32109: LD_INT 2
32111: ARRAY
32112: EQUAL
32113: IFFALSE 32189
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32115: LD_ADDR_EXP 95
32119: PUSH
32120: LD_EXP 95
32124: PPUSH
32125: LD_VAR 0 5
32129: PPUSH
32130: CALL_OW 3
32134: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32135: LD_ADDR_EXP 95
32139: PUSH
32140: LD_EXP 95
32144: PPUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 255
32154: PUSH
32155: LD_VAR 0 1
32159: PUSH
32160: LD_VAR 0 2
32164: PUSH
32165: LD_VAR 0 3
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: PPUSH
32176: CALL 71549 0 2
32180: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32181: CALL 32248 0 0
// exit ;
32185: POP
32186: POP
32187: GO 32243
// end ; end ;
32189: GO 32028
32191: POP
32192: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32193: LD_ADDR_EXP 95
32197: PUSH
32198: LD_EXP 95
32202: PPUSH
32203: LD_VAR 0 1
32207: PPUSH
32208: CALL_OW 255
32212: PUSH
32213: LD_VAR 0 1
32217: PUSH
32218: LD_VAR 0 2
32222: PUSH
32223: LD_VAR 0 3
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: PPUSH
32234: CALL 71549 0 2
32238: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32239: CALL 32248 0 0
// end ;
32243: LD_VAR 0 4
32247: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32248: LD_INT 0
32250: PPUSH
32251: PPUSH
32252: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32253: LD_STRING resetFactoryWaypoint();
32255: PPUSH
32256: CALL_OW 559
// if factoryWaypoints then
32260: LD_EXP 95
32264: IFFALSE 32385
// begin list := factoryWaypoints ;
32266: LD_ADDR_VAR 0 3
32270: PUSH
32271: LD_EXP 95
32275: ST_TO_ADDR
// for i := 1 to list do
32276: LD_ADDR_VAR 0 2
32280: PUSH
32281: DOUBLE
32282: LD_INT 1
32284: DEC
32285: ST_TO_ADDR
32286: LD_VAR 0 3
32290: PUSH
32291: FOR_TO
32292: IFFALSE 32383
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32294: LD_STRING setFactoryWaypointXY(
32296: PUSH
32297: LD_VAR 0 3
32301: PUSH
32302: LD_VAR 0 2
32306: ARRAY
32307: PUSH
32308: LD_INT 1
32310: ARRAY
32311: STR
32312: PUSH
32313: LD_STRING ,
32315: STR
32316: PUSH
32317: LD_VAR 0 3
32321: PUSH
32322: LD_VAR 0 2
32326: ARRAY
32327: PUSH
32328: LD_INT 2
32330: ARRAY
32331: STR
32332: PUSH
32333: LD_STRING ,
32335: STR
32336: PUSH
32337: LD_VAR 0 3
32341: PUSH
32342: LD_VAR 0 2
32346: ARRAY
32347: PUSH
32348: LD_INT 3
32350: ARRAY
32351: STR
32352: PUSH
32353: LD_STRING ,
32355: STR
32356: PUSH
32357: LD_VAR 0 3
32361: PUSH
32362: LD_VAR 0 2
32366: ARRAY
32367: PUSH
32368: LD_INT 4
32370: ARRAY
32371: STR
32372: PUSH
32373: LD_STRING )
32375: STR
32376: PPUSH
32377: CALL_OW 559
32381: GO 32291
32383: POP
32384: POP
// end ; end ;
32385: LD_VAR 0 1
32389: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32390: LD_INT 0
32392: PPUSH
// if HexInfo ( x , y ) = warehouse then
32393: LD_VAR 0 2
32397: PPUSH
32398: LD_VAR 0 3
32402: PPUSH
32403: CALL_OW 428
32407: PUSH
32408: LD_VAR 0 1
32412: EQUAL
32413: IFFALSE 32440
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32415: LD_ADDR_EXP 97
32419: PUSH
32420: LD_EXP 97
32424: PPUSH
32425: LD_VAR 0 1
32429: PPUSH
32430: LD_INT 0
32432: PPUSH
32433: CALL_OW 1
32437: ST_TO_ADDR
32438: GO 32491
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32440: LD_ADDR_EXP 97
32444: PUSH
32445: LD_EXP 97
32449: PPUSH
32450: LD_VAR 0 1
32454: PPUSH
32455: LD_VAR 0 1
32459: PPUSH
32460: CALL_OW 255
32464: PUSH
32465: LD_VAR 0 1
32469: PUSH
32470: LD_VAR 0 2
32474: PUSH
32475: LD_VAR 0 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: PPUSH
32486: CALL_OW 1
32490: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32491: CALL 32500 0 0
// end ;
32495: LD_VAR 0 4
32499: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32500: LD_INT 0
32502: PPUSH
32503: PPUSH
32504: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32505: LD_STRING resetWarehouseGatheringPoints();
32507: PPUSH
32508: CALL_OW 559
// if warehouseGatheringPoints then
32512: LD_EXP 97
32516: IFFALSE 32642
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32518: LD_ADDR_VAR 0 3
32522: PUSH
32523: LD_EXP 97
32527: PPUSH
32528: CALL 75483 0 1
32532: ST_TO_ADDR
// for i := 1 to list do
32533: LD_ADDR_VAR 0 2
32537: PUSH
32538: DOUBLE
32539: LD_INT 1
32541: DEC
32542: ST_TO_ADDR
32543: LD_VAR 0 3
32547: PUSH
32548: FOR_TO
32549: IFFALSE 32640
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32551: LD_STRING setWarehouseGatheringPointXY(
32553: PUSH
32554: LD_VAR 0 3
32558: PUSH
32559: LD_VAR 0 2
32563: ARRAY
32564: PUSH
32565: LD_INT 1
32567: ARRAY
32568: STR
32569: PUSH
32570: LD_STRING ,
32572: STR
32573: PUSH
32574: LD_VAR 0 3
32578: PUSH
32579: LD_VAR 0 2
32583: ARRAY
32584: PUSH
32585: LD_INT 2
32587: ARRAY
32588: STR
32589: PUSH
32590: LD_STRING ,
32592: STR
32593: PUSH
32594: LD_VAR 0 3
32598: PUSH
32599: LD_VAR 0 2
32603: ARRAY
32604: PUSH
32605: LD_INT 3
32607: ARRAY
32608: STR
32609: PUSH
32610: LD_STRING ,
32612: STR
32613: PUSH
32614: LD_VAR 0 3
32618: PUSH
32619: LD_VAR 0 2
32623: ARRAY
32624: PUSH
32625: LD_INT 4
32627: ARRAY
32628: STR
32629: PUSH
32630: LD_STRING )
32632: STR
32633: PPUSH
32634: CALL_OW 559
32638: GO 32548
32640: POP
32641: POP
// end ; end ;
32642: LD_VAR 0 1
32646: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32647: LD_EXP 97
32651: IFFALSE 33346
32653: GO 32655
32655: DISABLE
32656: LD_INT 0
32658: PPUSH
32659: PPUSH
32660: PPUSH
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
// begin enable ;
32667: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32668: LD_ADDR_VAR 0 3
32672: PUSH
32673: LD_EXP 97
32677: PPUSH
32678: CALL 75483 0 1
32682: ST_TO_ADDR
// if not list then
32683: LD_VAR 0 3
32687: NOT
32688: IFFALSE 32692
// exit ;
32690: GO 33346
// for i := 1 to list do
32692: LD_ADDR_VAR 0 1
32696: PUSH
32697: DOUBLE
32698: LD_INT 1
32700: DEC
32701: ST_TO_ADDR
32702: LD_VAR 0 3
32706: PUSH
32707: FOR_TO
32708: IFFALSE 33344
// begin depot := list [ i ] [ 2 ] ;
32710: LD_ADDR_VAR 0 8
32714: PUSH
32715: LD_VAR 0 3
32719: PUSH
32720: LD_VAR 0 1
32724: ARRAY
32725: PUSH
32726: LD_INT 2
32728: ARRAY
32729: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32730: LD_ADDR_VAR 0 5
32734: PUSH
32735: LD_VAR 0 3
32739: PUSH
32740: LD_VAR 0 1
32744: ARRAY
32745: PUSH
32746: LD_INT 1
32748: ARRAY
32749: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32750: LD_VAR 0 8
32754: PPUSH
32755: CALL_OW 301
32759: IFTRUE 32778
32761: PUSH
32762: LD_VAR 0 5
32766: PUSH
32767: LD_VAR 0 8
32771: PPUSH
32772: CALL_OW 255
32776: NONEQUAL
32777: OR
32778: IFFALSE 32807
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32780: LD_ADDR_EXP 97
32784: PUSH
32785: LD_EXP 97
32789: PPUSH
32790: LD_VAR 0 8
32794: PPUSH
32795: LD_INT 0
32797: PPUSH
32798: CALL_OW 1
32802: ST_TO_ADDR
// exit ;
32803: POP
32804: POP
32805: GO 33346
// end ; x := list [ i ] [ 3 ] ;
32807: LD_ADDR_VAR 0 6
32811: PUSH
32812: LD_VAR 0 3
32816: PUSH
32817: LD_VAR 0 1
32821: ARRAY
32822: PUSH
32823: LD_INT 3
32825: ARRAY
32826: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32827: LD_ADDR_VAR 0 7
32831: PUSH
32832: LD_VAR 0 3
32836: PUSH
32837: LD_VAR 0 1
32841: ARRAY
32842: PUSH
32843: LD_INT 4
32845: ARRAY
32846: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32847: LD_ADDR_VAR 0 9
32851: PUSH
32852: LD_VAR 0 6
32856: PPUSH
32857: LD_VAR 0 7
32861: PPUSH
32862: LD_INT 16
32864: PPUSH
32865: CALL 74057 0 3
32869: ST_TO_ADDR
// if not cratesNearbyPoint then
32870: LD_VAR 0 9
32874: NOT
32875: IFFALSE 32881
// exit ;
32877: POP
32878: POP
32879: GO 33346
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32881: LD_ADDR_VAR 0 4
32885: PUSH
32886: LD_INT 22
32888: PUSH
32889: LD_VAR 0 5
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: LD_INT 60
32903: PUSH
32904: EMPTY
32905: LIST
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 91
32913: PUSH
32914: LD_VAR 0 8
32918: PUSH
32919: LD_INT 6
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: LD_INT 25
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 25
32942: PUSH
32943: LD_INT 16
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: PPUSH
32961: CALL_OW 69
32965: PUSH
32966: LD_VAR 0 8
32970: PPUSH
32971: CALL_OW 313
32975: PPUSH
32976: LD_INT 3
32978: PUSH
32979: LD_INT 60
32981: PUSH
32982: EMPTY
32983: LIST
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: LD_INT 25
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 25
33004: PUSH
33005: LD_INT 16
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PPUSH
33021: CALL_OW 72
33025: UNION
33026: ST_TO_ADDR
// if tmp then
33027: LD_VAR 0 4
33031: IFFALSE 33111
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33033: LD_ADDR_VAR 0 4
33037: PUSH
33038: LD_VAR 0 4
33042: PPUSH
33043: LD_INT 3
33045: PPUSH
33046: CALL 71864 0 2
33050: ST_TO_ADDR
// for j in tmp do
33051: LD_ADDR_VAR 0 2
33055: PUSH
33056: LD_VAR 0 4
33060: PUSH
33061: FOR_IN
33062: IFFALSE 33105
// begin if IsInUnit ( j ) then
33064: LD_VAR 0 2
33068: PPUSH
33069: CALL_OW 310
33073: IFFALSE 33084
// ComExit ( j ) ;
33075: LD_VAR 0 2
33079: PPUSH
33080: CALL 71947 0 1
// AddComCollect ( j , x , y ) ;
33084: LD_VAR 0 2
33088: PPUSH
33089: LD_VAR 0 6
33093: PPUSH
33094: LD_VAR 0 7
33098: PPUSH
33099: CALL_OW 177
// end ;
33103: GO 33061
33105: POP
33106: POP
// exit ;
33107: POP
33108: POP
33109: GO 33346
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33111: LD_ADDR_VAR 0 4
33115: PUSH
33116: LD_INT 22
33118: PUSH
33119: LD_VAR 0 5
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 91
33130: PUSH
33131: LD_VAR 0 8
33135: PUSH
33136: LD_INT 8
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 34
33149: PUSH
33150: LD_INT 12
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 34
33159: PUSH
33160: LD_INT 51
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 34
33169: PUSH
33170: LD_INT 32
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 34
33179: PUSH
33180: LD_INT 89
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: PPUSH
33199: CALL_OW 69
33203: ST_TO_ADDR
// if tmp then
33204: LD_VAR 0 4
33208: IFFALSE 33342
// begin for j in tmp do
33210: LD_ADDR_VAR 0 2
33214: PUSH
33215: LD_VAR 0 4
33219: PUSH
33220: FOR_IN
33221: IFFALSE 33340
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33223: LD_VAR 0 2
33227: PPUSH
33228: CALL_OW 262
33232: PUSH
33233: LD_INT 3
33235: EQUAL
33236: IFTRUE 33253
33238: PUSH
33239: LD_VAR 0 2
33243: PPUSH
33244: CALL_OW 261
33248: PUSH
33249: LD_INT 20
33251: GREATER
33252: OR
33253: IFFALSE 33267
33255: PUSH
33256: LD_VAR 0 2
33260: PPUSH
33261: CALL_OW 314
33265: NOT
33266: AND
33267: IFFALSE 33297
33269: PUSH
33270: LD_VAR 0 2
33274: PPUSH
33275: CALL_OW 263
33279: PUSH
33280: LD_INT 1
33282: NONEQUAL
33283: IFTRUE 33296
33285: PUSH
33286: LD_VAR 0 2
33290: PPUSH
33291: CALL_OW 311
33295: OR
33296: AND
33297: IFFALSE 33338
// begin ComCollect ( j , x , y ) ;
33299: LD_VAR 0 2
33303: PPUSH
33304: LD_VAR 0 6
33308: PPUSH
33309: LD_VAR 0 7
33313: PPUSH
33314: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33318: LD_VAR 0 2
33322: PPUSH
33323: LD_VAR 0 8
33327: PPUSH
33328: CALL_OW 172
// exit ;
33332: POP
33333: POP
33334: POP
33335: POP
33336: GO 33346
// end ;
33338: GO 33220
33340: POP
33341: POP
// end ; end ;
33342: GO 32707
33344: POP
33345: POP
// end ; end_of_file end_of_file
33346: PPOPN 9
33348: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33349: LD_INT 0
33351: PPUSH
33352: PPUSH
// if exist_mode then
33353: LD_VAR 0 2
33357: IFFALSE 33403
// begin unit := CreateCharacter ( prefix & ident ) ;
33359: LD_ADDR_VAR 0 5
33363: PUSH
33364: LD_VAR 0 3
33368: PUSH
33369: LD_VAR 0 1
33373: STR
33374: PPUSH
33375: CALL_OW 34
33379: ST_TO_ADDR
// if unit then
33380: LD_VAR 0 5
33384: IFFALSE 33401
// DeleteCharacters ( prefix & ident ) ;
33386: LD_VAR 0 3
33390: PUSH
33391: LD_VAR 0 1
33395: STR
33396: PPUSH
33397: CALL_OW 40
// end else
33401: GO 33418
// unit := NewCharacter ( ident ) ;
33403: LD_ADDR_VAR 0 5
33407: PUSH
33408: LD_VAR 0 1
33412: PPUSH
33413: CALL_OW 25
33417: ST_TO_ADDR
// result := unit ;
33418: LD_ADDR_VAR 0 4
33422: PUSH
33423: LD_VAR 0 5
33427: ST_TO_ADDR
// end ;
33428: LD_VAR 0 4
33432: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33433: LD_INT 0
33435: PPUSH
33436: PPUSH
// if exist_mode then
33437: LD_VAR 0 2
33441: IFFALSE 33466
// unit := CreateCharacter ( prefix & ident ) else
33443: LD_ADDR_VAR 0 5
33447: PUSH
33448: LD_VAR 0 3
33452: PUSH
33453: LD_VAR 0 1
33457: STR
33458: PPUSH
33459: CALL_OW 34
33463: ST_TO_ADDR
33464: GO 33481
// unit := NewCharacter ( ident ) ;
33466: LD_ADDR_VAR 0 5
33470: PUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 25
33480: ST_TO_ADDR
// result := unit ;
33481: LD_ADDR_VAR 0 4
33485: PUSH
33486: LD_VAR 0 5
33490: ST_TO_ADDR
// end ;
33491: LD_VAR 0 4
33495: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33496: LD_INT 0
33498: PPUSH
33499: PPUSH
// if not side or not nation then
33500: LD_VAR 0 1
33504: NOT
33505: IFTRUE 33514
33507: PUSH
33508: LD_VAR 0 2
33512: NOT
33513: OR
33514: IFFALSE 33518
// exit ;
33516: GO 34312
// case nation of nation_american :
33518: LD_VAR 0 2
33522: PUSH
33523: LD_INT 1
33525: DOUBLE
33526: EQUAL
33527: IFTRUE 33531
33529: GO 33753
33531: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33532: LD_ADDR_VAR 0 4
33536: PUSH
33537: LD_INT 35
33539: PUSH
33540: LD_INT 45
33542: PUSH
33543: LD_INT 46
33545: PUSH
33546: LD_INT 47
33548: PUSH
33549: LD_INT 82
33551: PUSH
33552: LD_INT 83
33554: PUSH
33555: LD_INT 84
33557: PUSH
33558: LD_INT 85
33560: PUSH
33561: LD_INT 86
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: LD_INT 6
33572: PUSH
33573: LD_INT 15
33575: PUSH
33576: LD_INT 16
33578: PUSH
33579: LD_INT 7
33581: PUSH
33582: LD_INT 12
33584: PUSH
33585: LD_INT 13
33587: PUSH
33588: LD_INT 10
33590: PUSH
33591: LD_INT 14
33593: PUSH
33594: LD_INT 20
33596: PUSH
33597: LD_INT 21
33599: PUSH
33600: LD_INT 22
33602: PUSH
33603: LD_INT 25
33605: PUSH
33606: LD_INT 32
33608: PUSH
33609: LD_INT 27
33611: PUSH
33612: LD_INT 36
33614: PUSH
33615: LD_INT 69
33617: PUSH
33618: LD_INT 39
33620: PUSH
33621: LD_INT 34
33623: PUSH
33624: LD_INT 40
33626: PUSH
33627: LD_INT 48
33629: PUSH
33630: LD_INT 49
33632: PUSH
33633: LD_INT 50
33635: PUSH
33636: LD_INT 51
33638: PUSH
33639: LD_INT 52
33641: PUSH
33642: LD_INT 53
33644: PUSH
33645: LD_INT 54
33647: PUSH
33648: LD_INT 55
33650: PUSH
33651: LD_INT 56
33653: PUSH
33654: LD_INT 57
33656: PUSH
33657: LD_INT 58
33659: PUSH
33660: LD_INT 59
33662: PUSH
33663: LD_INT 60
33665: PUSH
33666: LD_INT 61
33668: PUSH
33669: LD_INT 62
33671: PUSH
33672: LD_INT 80
33674: PUSH
33675: LD_INT 82
33677: PUSH
33678: LD_INT 83
33680: PUSH
33681: LD_INT 84
33683: PUSH
33684: LD_INT 85
33686: PUSH
33687: LD_INT 86
33689: PUSH
33690: LD_INT 90
33692: PUSH
33693: LD_INT 93
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: ST_TO_ADDR
33751: GO 34234
33753: LD_INT 2
33755: DOUBLE
33756: EQUAL
33757: IFTRUE 33761
33759: GO 33995
33761: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33762: LD_ADDR_VAR 0 4
33766: PUSH
33767: LD_INT 35
33769: PUSH
33770: LD_INT 45
33772: PUSH
33773: LD_INT 46
33775: PUSH
33776: LD_INT 47
33778: PUSH
33779: LD_INT 82
33781: PUSH
33782: LD_INT 83
33784: PUSH
33785: LD_INT 84
33787: PUSH
33788: LD_INT 85
33790: PUSH
33791: LD_INT 87
33793: PUSH
33794: LD_INT 70
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: LD_INT 11
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: LD_INT 4
33808: PUSH
33809: LD_INT 5
33811: PUSH
33812: LD_INT 6
33814: PUSH
33815: LD_INT 15
33817: PUSH
33818: LD_INT 18
33820: PUSH
33821: LD_INT 7
33823: PUSH
33824: LD_INT 17
33826: PUSH
33827: LD_INT 8
33829: PUSH
33830: LD_INT 20
33832: PUSH
33833: LD_INT 21
33835: PUSH
33836: LD_INT 22
33838: PUSH
33839: LD_INT 72
33841: PUSH
33842: LD_INT 26
33844: PUSH
33845: LD_INT 69
33847: PUSH
33848: LD_INT 39
33850: PUSH
33851: LD_INT 40
33853: PUSH
33854: LD_INT 41
33856: PUSH
33857: LD_INT 42
33859: PUSH
33860: LD_INT 43
33862: PUSH
33863: LD_INT 48
33865: PUSH
33866: LD_INT 49
33868: PUSH
33869: LD_INT 50
33871: PUSH
33872: LD_INT 51
33874: PUSH
33875: LD_INT 52
33877: PUSH
33878: LD_INT 53
33880: PUSH
33881: LD_INT 54
33883: PUSH
33884: LD_INT 55
33886: PUSH
33887: LD_INT 56
33889: PUSH
33890: LD_INT 60
33892: PUSH
33893: LD_INT 61
33895: PUSH
33896: LD_INT 62
33898: PUSH
33899: LD_INT 66
33901: PUSH
33902: LD_INT 67
33904: PUSH
33905: LD_INT 68
33907: PUSH
33908: LD_INT 81
33910: PUSH
33911: LD_INT 82
33913: PUSH
33914: LD_INT 83
33916: PUSH
33917: LD_INT 84
33919: PUSH
33920: LD_INT 85
33922: PUSH
33923: LD_INT 87
33925: PUSH
33926: LD_INT 88
33928: PUSH
33929: LD_INT 92
33931: PUSH
33932: LD_INT 94
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: ST_TO_ADDR
33993: GO 34234
33995: LD_INT 3
33997: DOUBLE
33998: EQUAL
33999: IFTRUE 34003
34001: GO 34233
34003: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34004: LD_ADDR_VAR 0 4
34008: PUSH
34009: LD_INT 46
34011: PUSH
34012: LD_INT 47
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: LD_INT 82
34023: PUSH
34024: LD_INT 83
34026: PUSH
34027: LD_INT 84
34029: PUSH
34030: LD_INT 85
34032: PUSH
34033: LD_INT 86
34035: PUSH
34036: LD_INT 11
34038: PUSH
34039: LD_INT 9
34041: PUSH
34042: LD_INT 20
34044: PUSH
34045: LD_INT 19
34047: PUSH
34048: LD_INT 21
34050: PUSH
34051: LD_INT 24
34053: PUSH
34054: LD_INT 22
34056: PUSH
34057: LD_INT 25
34059: PUSH
34060: LD_INT 28
34062: PUSH
34063: LD_INT 29
34065: PUSH
34066: LD_INT 30
34068: PUSH
34069: LD_INT 31
34071: PUSH
34072: LD_INT 37
34074: PUSH
34075: LD_INT 38
34077: PUSH
34078: LD_INT 32
34080: PUSH
34081: LD_INT 27
34083: PUSH
34084: LD_INT 33
34086: PUSH
34087: LD_INT 69
34089: PUSH
34090: LD_INT 39
34092: PUSH
34093: LD_INT 34
34095: PUSH
34096: LD_INT 40
34098: PUSH
34099: LD_INT 71
34101: PUSH
34102: LD_INT 23
34104: PUSH
34105: LD_INT 44
34107: PUSH
34108: LD_INT 48
34110: PUSH
34111: LD_INT 49
34113: PUSH
34114: LD_INT 50
34116: PUSH
34117: LD_INT 51
34119: PUSH
34120: LD_INT 52
34122: PUSH
34123: LD_INT 53
34125: PUSH
34126: LD_INT 54
34128: PUSH
34129: LD_INT 55
34131: PUSH
34132: LD_INT 56
34134: PUSH
34135: LD_INT 57
34137: PUSH
34138: LD_INT 58
34140: PUSH
34141: LD_INT 59
34143: PUSH
34144: LD_INT 63
34146: PUSH
34147: LD_INT 64
34149: PUSH
34150: LD_INT 65
34152: PUSH
34153: LD_INT 82
34155: PUSH
34156: LD_INT 83
34158: PUSH
34159: LD_INT 84
34161: PUSH
34162: LD_INT 85
34164: PUSH
34165: LD_INT 86
34167: PUSH
34168: LD_INT 89
34170: PUSH
34171: LD_INT 91
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: ST_TO_ADDR
34231: GO 34234
34233: POP
// if state > - 1 and state < 3 then
34234: LD_VAR 0 3
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: GREATER
34243: IFFALSE 34255
34245: PUSH
34246: LD_VAR 0 3
34250: PUSH
34251: LD_INT 3
34253: LESS
34254: AND
34255: IFFALSE 34312
// for i in result do
34257: LD_ADDR_VAR 0 5
34261: PUSH
34262: LD_VAR 0 4
34266: PUSH
34267: FOR_IN
34268: IFFALSE 34310
// if GetTech ( i , side ) <> state then
34270: LD_VAR 0 5
34274: PPUSH
34275: LD_VAR 0 1
34279: PPUSH
34280: CALL_OW 321
34284: PUSH
34285: LD_VAR 0 3
34289: NONEQUAL
34290: IFFALSE 34308
// result := result diff i ;
34292: LD_ADDR_VAR 0 4
34296: PUSH
34297: LD_VAR 0 4
34301: PUSH
34302: LD_VAR 0 5
34306: DIFF
34307: ST_TO_ADDR
34308: GO 34267
34310: POP
34311: POP
// end ;
34312: LD_VAR 0 4
34316: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34317: LD_INT 0
34319: PPUSH
34320: PPUSH
34321: PPUSH
// result := true ;
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 1
34329: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34330: LD_ADDR_VAR 0 5
34334: PUSH
34335: LD_VAR 0 2
34339: PPUSH
34340: CALL_OW 480
34344: ST_TO_ADDR
// if not tmp then
34345: LD_VAR 0 5
34349: NOT
34350: IFFALSE 34354
// exit ;
34352: GO 34403
// for i in tmp do
34354: LD_ADDR_VAR 0 4
34358: PUSH
34359: LD_VAR 0 5
34363: PUSH
34364: FOR_IN
34365: IFFALSE 34401
// if GetTech ( i , side ) <> state_researched then
34367: LD_VAR 0 4
34371: PPUSH
34372: LD_VAR 0 1
34376: PPUSH
34377: CALL_OW 321
34381: PUSH
34382: LD_INT 2
34384: NONEQUAL
34385: IFFALSE 34399
// begin result := false ;
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_INT 0
34394: ST_TO_ADDR
// exit ;
34395: POP
34396: POP
34397: GO 34403
// end ;
34399: GO 34364
34401: POP
34402: POP
// end ;
34403: LD_VAR 0 3
34407: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34408: LD_INT 0
34410: PPUSH
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
34418: PPUSH
34419: PPUSH
34420: PPUSH
34421: PPUSH
34422: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34423: LD_VAR 0 1
34427: NOT
34428: IFTRUE 34445
34430: PUSH
34431: LD_VAR 0 1
34435: PPUSH
34436: CALL_OW 257
34440: PUSH
34441: LD_INT 9
34443: NONEQUAL
34444: OR
34445: IFFALSE 34449
// exit ;
34447: GO 35028
// side := GetSide ( unit ) ;
34449: LD_ADDR_VAR 0 9
34453: PUSH
34454: LD_VAR 0 1
34458: PPUSH
34459: CALL_OW 255
34463: ST_TO_ADDR
// tech_space := tech_spacanom ;
34464: LD_ADDR_VAR 0 12
34468: PUSH
34469: LD_INT 29
34471: ST_TO_ADDR
// tech_time := tech_taurad ;
34472: LD_ADDR_VAR 0 13
34476: PUSH
34477: LD_INT 28
34479: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34480: LD_ADDR_VAR 0 11
34484: PUSH
34485: LD_VAR 0 1
34489: PPUSH
34490: CALL_OW 310
34494: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34495: LD_VAR 0 11
34499: PPUSH
34500: CALL_OW 247
34504: PUSH
34505: LD_INT 2
34507: EQUAL
34508: IFFALSE 34512
// exit ;
34510: GO 35028
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34512: LD_ADDR_VAR 0 8
34516: PUSH
34517: LD_INT 81
34519: PUSH
34520: LD_VAR 0 9
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: LD_INT 21
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PPUSH
34550: CALL_OW 69
34554: ST_TO_ADDR
// if not tmp then
34555: LD_VAR 0 8
34559: NOT
34560: IFFALSE 34564
// exit ;
34562: GO 35028
// if in_unit then
34564: LD_VAR 0 11
34568: IFFALSE 34592
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34570: LD_ADDR_VAR 0 10
34574: PUSH
34575: LD_VAR 0 8
34579: PPUSH
34580: LD_VAR 0 11
34584: PPUSH
34585: CALL_OW 74
34589: ST_TO_ADDR
34590: GO 34612
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34592: LD_ADDR_VAR 0 10
34596: PUSH
34597: LD_VAR 0 8
34601: PPUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 74
34611: ST_TO_ADDR
// if not enemy then
34612: LD_VAR 0 10
34616: NOT
34617: IFFALSE 34621
// exit ;
34619: GO 35028
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34621: LD_VAR 0 11
34625: IFFALSE 34647
34627: PUSH
34628: LD_VAR 0 11
34632: PPUSH
34633: LD_VAR 0 10
34637: PPUSH
34638: CALL_OW 296
34642: PUSH
34643: LD_INT 13
34645: GREATER
34646: AND
34647: IFTRUE 34669
34649: PUSH
34650: LD_VAR 0 1
34654: PPUSH
34655: LD_VAR 0 10
34659: PPUSH
34660: CALL_OW 296
34664: PUSH
34665: LD_INT 12
34667: GREATER
34668: OR
34669: IFFALSE 34673
// exit ;
34671: GO 35028
// missile := [ 1 ] ;
34673: LD_ADDR_VAR 0 14
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: EMPTY
34682: LIST
34683: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34684: LD_VAR 0 9
34688: PPUSH
34689: LD_VAR 0 12
34693: PPUSH
34694: CALL_OW 325
34698: IFFALSE 34727
// missile := Replace ( missile , missile + 1 , 2 ) ;
34700: LD_ADDR_VAR 0 14
34704: PUSH
34705: LD_VAR 0 14
34709: PPUSH
34710: LD_VAR 0 14
34714: PUSH
34715: LD_INT 1
34717: PLUS
34718: PPUSH
34719: LD_INT 2
34721: PPUSH
34722: CALL_OW 1
34726: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34727: LD_VAR 0 9
34731: PPUSH
34732: LD_VAR 0 13
34736: PPUSH
34737: CALL_OW 325
34741: IFFALSE 34765
34743: PUSH
34744: LD_VAR 0 10
34748: PPUSH
34749: CALL_OW 255
34753: PPUSH
34754: LD_VAR 0 13
34758: PPUSH
34759: CALL_OW 325
34763: NOT
34764: AND
34765: IFFALSE 34794
// missile := Replace ( missile , missile + 1 , 3 ) ;
34767: LD_ADDR_VAR 0 14
34771: PUSH
34772: LD_VAR 0 14
34776: PPUSH
34777: LD_VAR 0 14
34781: PUSH
34782: LD_INT 1
34784: PLUS
34785: PPUSH
34786: LD_INT 3
34788: PPUSH
34789: CALL_OW 1
34793: ST_TO_ADDR
// if missile < 2 then
34794: LD_VAR 0 14
34798: PUSH
34799: LD_INT 2
34801: LESS
34802: IFFALSE 34806
// exit ;
34804: GO 35028
// x := GetX ( enemy ) ;
34806: LD_ADDR_VAR 0 4
34810: PUSH
34811: LD_VAR 0 10
34815: PPUSH
34816: CALL_OW 250
34820: ST_TO_ADDR
// y := GetY ( enemy ) ;
34821: LD_ADDR_VAR 0 5
34825: PUSH
34826: LD_VAR 0 10
34830: PPUSH
34831: CALL_OW 251
34835: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34836: LD_ADDR_VAR 0 6
34840: PUSH
34841: LD_VAR 0 4
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PPUSH
34850: LD_INT 1
34852: PPUSH
34853: CALL_OW 12
34857: PLUS
34858: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34859: LD_ADDR_VAR 0 7
34863: PUSH
34864: LD_VAR 0 5
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PPUSH
34873: LD_INT 1
34875: PPUSH
34876: CALL_OW 12
34880: PLUS
34881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34882: LD_VAR 0 6
34886: PPUSH
34887: LD_VAR 0 7
34891: PPUSH
34892: CALL_OW 488
34896: NOT
34897: IFFALSE 34919
// begin _x := x ;
34899: LD_ADDR_VAR 0 6
34903: PUSH
34904: LD_VAR 0 4
34908: ST_TO_ADDR
// _y := y ;
34909: LD_ADDR_VAR 0 7
34913: PUSH
34914: LD_VAR 0 5
34918: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34919: LD_ADDR_VAR 0 3
34923: PUSH
34924: LD_INT 1
34926: PPUSH
34927: LD_VAR 0 14
34931: PPUSH
34932: CALL_OW 12
34936: ST_TO_ADDR
// case i of 1 :
34937: LD_VAR 0 3
34941: PUSH
34942: LD_INT 1
34944: DOUBLE
34945: EQUAL
34946: IFTRUE 34950
34948: GO 34967
34950: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34951: LD_VAR 0 1
34955: PPUSH
34956: LD_VAR 0 10
34960: PPUSH
34961: CALL_OW 115
34965: GO 35028
34967: LD_INT 2
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 34975
34973: GO 34997
34975: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34976: LD_VAR 0 1
34980: PPUSH
34981: LD_VAR 0 6
34985: PPUSH
34986: LD_VAR 0 7
34990: PPUSH
34991: CALL_OW 153
34995: GO 35028
34997: LD_INT 3
34999: DOUBLE
35000: EQUAL
35001: IFTRUE 35005
35003: GO 35027
35005: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35006: LD_VAR 0 1
35010: PPUSH
35011: LD_VAR 0 6
35015: PPUSH
35016: LD_VAR 0 7
35020: PPUSH
35021: CALL_OW 154
35025: GO 35028
35027: POP
// end ;
35028: LD_VAR 0 2
35032: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35033: LD_INT 0
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
35039: PPUSH
35040: PPUSH
// if not unit or not building then
35041: LD_VAR 0 1
35045: NOT
35046: IFTRUE 35055
35048: PUSH
35049: LD_VAR 0 2
35053: NOT
35054: OR
35055: IFFALSE 35059
// exit ;
35057: GO 35217
// x := GetX ( building ) ;
35059: LD_ADDR_VAR 0 5
35063: PUSH
35064: LD_VAR 0 2
35068: PPUSH
35069: CALL_OW 250
35073: ST_TO_ADDR
// y := GetY ( building ) ;
35074: LD_ADDR_VAR 0 6
35078: PUSH
35079: LD_VAR 0 2
35083: PPUSH
35084: CALL_OW 251
35088: ST_TO_ADDR
// for i := 0 to 5 do
35089: LD_ADDR_VAR 0 4
35093: PUSH
35094: DOUBLE
35095: LD_INT 0
35097: DEC
35098: ST_TO_ADDR
35099: LD_INT 5
35101: PUSH
35102: FOR_TO
35103: IFFALSE 35215
// begin _x := ShiftX ( x , i , 3 ) ;
35105: LD_ADDR_VAR 0 7
35109: PUSH
35110: LD_VAR 0 5
35114: PPUSH
35115: LD_VAR 0 4
35119: PPUSH
35120: LD_INT 3
35122: PPUSH
35123: CALL_OW 272
35127: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35128: LD_ADDR_VAR 0 8
35132: PUSH
35133: LD_VAR 0 6
35137: PPUSH
35138: LD_VAR 0 4
35142: PPUSH
35143: LD_INT 3
35145: PPUSH
35146: CALL_OW 273
35150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35151: LD_VAR 0 7
35155: PPUSH
35156: LD_VAR 0 8
35160: PPUSH
35161: CALL_OW 488
35165: NOT
35166: IFFALSE 35170
// continue ;
35168: GO 35102
// if HexInfo ( _x , _y ) = 0 then
35170: LD_VAR 0 7
35174: PPUSH
35175: LD_VAR 0 8
35179: PPUSH
35180: CALL_OW 428
35184: PUSH
35185: LD_INT 0
35187: EQUAL
35188: IFFALSE 35213
// begin ComMoveXY ( unit , _x , _y ) ;
35190: LD_VAR 0 1
35194: PPUSH
35195: LD_VAR 0 7
35199: PPUSH
35200: LD_VAR 0 8
35204: PPUSH
35205: CALL_OW 111
// exit ;
35209: POP
35210: POP
35211: GO 35217
// end ; end ;
35213: GO 35102
35215: POP
35216: POP
// end ;
35217: LD_VAR 0 3
35221: RET
// export function ScanBase ( side , base_area ) ; begin
35222: LD_INT 0
35224: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35225: LD_ADDR_VAR 0 3
35229: PUSH
35230: LD_VAR 0 2
35234: PPUSH
35235: LD_INT 81
35237: PUSH
35238: LD_VAR 0 1
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PPUSH
35247: CALL_OW 70
35251: ST_TO_ADDR
// end ;
35252: LD_VAR 0 3
35256: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35257: LD_INT 0
35259: PPUSH
35260: PPUSH
35261: PPUSH
35262: PPUSH
// result := false ;
35263: LD_ADDR_VAR 0 2
35267: PUSH
35268: LD_INT 0
35270: ST_TO_ADDR
// side := GetSide ( unit ) ;
35271: LD_ADDR_VAR 0 3
35275: PUSH
35276: LD_VAR 0 1
35280: PPUSH
35281: CALL_OW 255
35285: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35286: LD_ADDR_VAR 0 4
35290: PUSH
35291: LD_VAR 0 1
35295: PPUSH
35296: CALL_OW 248
35300: ST_TO_ADDR
// case nat of 1 :
35301: LD_VAR 0 4
35305: PUSH
35306: LD_INT 1
35308: DOUBLE
35309: EQUAL
35310: IFTRUE 35314
35312: GO 35325
35314: POP
// tech := tech_lassight ; 2 :
35315: LD_ADDR_VAR 0 5
35319: PUSH
35320: LD_INT 12
35322: ST_TO_ADDR
35323: GO 35364
35325: LD_INT 2
35327: DOUBLE
35328: EQUAL
35329: IFTRUE 35333
35331: GO 35344
35333: POP
// tech := tech_mortar ; 3 :
35334: LD_ADDR_VAR 0 5
35338: PUSH
35339: LD_INT 41
35341: ST_TO_ADDR
35342: GO 35364
35344: LD_INT 3
35346: DOUBLE
35347: EQUAL
35348: IFTRUE 35352
35350: GO 35363
35352: POP
// tech := tech_bazooka ; end ;
35353: LD_ADDR_VAR 0 5
35357: PUSH
35358: LD_INT 44
35360: ST_TO_ADDR
35361: GO 35364
35363: POP
// if Researched ( side , tech ) then
35364: LD_VAR 0 3
35368: PPUSH
35369: LD_VAR 0 5
35373: PPUSH
35374: CALL_OW 325
35378: IFFALSE 35405
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35380: LD_ADDR_VAR 0 2
35384: PUSH
35385: LD_INT 5
35387: PUSH
35388: LD_INT 8
35390: PUSH
35391: LD_INT 9
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: PUSH
35399: LD_VAR 0 4
35403: ARRAY
35404: ST_TO_ADDR
// end ;
35405: LD_VAR 0 2
35409: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35410: LD_INT 0
35412: PPUSH
35413: PPUSH
35414: PPUSH
// if not mines then
35415: LD_VAR 0 2
35419: NOT
35420: IFFALSE 35424
// exit ;
35422: GO 35568
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35424: LD_ADDR_VAR 0 5
35428: PUSH
35429: LD_INT 81
35431: PUSH
35432: LD_VAR 0 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 3
35443: PUSH
35444: LD_INT 21
35446: PUSH
35447: LD_INT 3
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PPUSH
35462: CALL_OW 69
35466: ST_TO_ADDR
// for i in mines do
35467: LD_ADDR_VAR 0 4
35471: PUSH
35472: LD_VAR 0 2
35476: PUSH
35477: FOR_IN
35478: IFFALSE 35566
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35480: LD_VAR 0 4
35484: PUSH
35485: LD_INT 1
35487: ARRAY
35488: PPUSH
35489: LD_VAR 0 4
35493: PUSH
35494: LD_INT 2
35496: ARRAY
35497: PPUSH
35498: CALL_OW 458
35502: NOT
35503: IFFALSE 35507
// continue ;
35505: GO 35477
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35507: LD_VAR 0 4
35511: PUSH
35512: LD_INT 1
35514: ARRAY
35515: PPUSH
35516: LD_VAR 0 4
35520: PUSH
35521: LD_INT 2
35523: ARRAY
35524: PPUSH
35525: CALL_OW 428
35529: PUSH
35530: LD_VAR 0 5
35534: IN
35535: IFFALSE 35564
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35537: LD_VAR 0 4
35541: PUSH
35542: LD_INT 1
35544: ARRAY
35545: PPUSH
35546: LD_VAR 0 4
35550: PUSH
35551: LD_INT 2
35553: ARRAY
35554: PPUSH
35555: LD_VAR 0 1
35559: PPUSH
35560: CALL_OW 456
// end ;
35564: GO 35477
35566: POP
35567: POP
// end ;
35568: LD_VAR 0 3
35572: RET
// export function Count ( array ) ; begin
35573: LD_INT 0
35575: PPUSH
// result := array + 0 ;
35576: LD_ADDR_VAR 0 2
35580: PUSH
35581: LD_VAR 0 1
35585: PUSH
35586: LD_INT 0
35588: PLUS
35589: ST_TO_ADDR
// end ;
35590: LD_VAR 0 2
35594: RET
// export function IsEmpty ( building ) ; begin
35595: LD_INT 0
35597: PPUSH
// if not building then
35598: LD_VAR 0 1
35602: NOT
35603: IFFALSE 35607
// exit ;
35605: GO 35650
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35607: LD_ADDR_VAR 0 2
35611: PUSH
35612: LD_VAR 0 1
35616: PUSH
35617: LD_INT 22
35619: PUSH
35620: LD_VAR 0 1
35624: PPUSH
35625: CALL_OW 255
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 58
35636: PUSH
35637: EMPTY
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PPUSH
35644: CALL_OW 69
35648: IN
35649: ST_TO_ADDR
// end ;
35650: LD_VAR 0 2
35654: RET
// export function IsNotFull ( building ) ; var places ; begin
35655: LD_INT 0
35657: PPUSH
35658: PPUSH
// if not building then
35659: LD_VAR 0 1
35663: NOT
35664: IFFALSE 35668
// exit ;
35666: GO 35696
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35668: LD_ADDR_VAR 0 2
35672: PUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: LD_INT 3
35680: PUSH
35681: LD_INT 62
35683: PUSH
35684: EMPTY
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PPUSH
35691: CALL_OW 72
35695: ST_TO_ADDR
// end ;
35696: LD_VAR 0 2
35700: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35701: LD_INT 0
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
// tmp := [ ] ;
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: EMPTY
35713: ST_TO_ADDR
// list := [ ] ;
35714: LD_ADDR_VAR 0 5
35718: PUSH
35719: EMPTY
35720: ST_TO_ADDR
// for i = 16 to 25 do
35721: LD_ADDR_VAR 0 4
35725: PUSH
35726: DOUBLE
35727: LD_INT 16
35729: DEC
35730: ST_TO_ADDR
35731: LD_INT 25
35733: PUSH
35734: FOR_TO
35735: IFFALSE 35808
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35737: LD_ADDR_VAR 0 3
35741: PUSH
35742: LD_VAR 0 3
35746: PUSH
35747: LD_INT 22
35749: PUSH
35750: LD_VAR 0 1
35754: PPUSH
35755: CALL_OW 255
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 91
35766: PUSH
35767: LD_VAR 0 1
35771: PUSH
35772: LD_INT 6
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 30
35782: PUSH
35783: LD_VAR 0 4
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: PUSH
35797: EMPTY
35798: LIST
35799: PPUSH
35800: CALL_OW 69
35804: ADD
35805: ST_TO_ADDR
35806: GO 35734
35808: POP
35809: POP
// for i = 1 to tmp do
35810: LD_ADDR_VAR 0 4
35814: PUSH
35815: DOUBLE
35816: LD_INT 1
35818: DEC
35819: ST_TO_ADDR
35820: LD_VAR 0 3
35824: PUSH
35825: FOR_TO
35826: IFFALSE 35914
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35828: LD_ADDR_VAR 0 5
35832: PUSH
35833: LD_VAR 0 5
35837: PUSH
35838: LD_VAR 0 3
35842: PUSH
35843: LD_VAR 0 4
35847: ARRAY
35848: PPUSH
35849: CALL_OW 266
35853: PUSH
35854: LD_VAR 0 3
35858: PUSH
35859: LD_VAR 0 4
35863: ARRAY
35864: PPUSH
35865: CALL_OW 250
35869: PUSH
35870: LD_VAR 0 3
35874: PUSH
35875: LD_VAR 0 4
35879: ARRAY
35880: PPUSH
35881: CALL_OW 251
35885: PUSH
35886: LD_VAR 0 3
35890: PUSH
35891: LD_VAR 0 4
35895: ARRAY
35896: PPUSH
35897: CALL_OW 254
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: ADD
35911: ST_TO_ADDR
35912: GO 35825
35914: POP
35915: POP
// result := list ;
35916: LD_ADDR_VAR 0 2
35920: PUSH
35921: LD_VAR 0 5
35925: ST_TO_ADDR
// end ;
35926: LD_VAR 0 2
35930: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35931: LD_INT 0
35933: PPUSH
35934: PPUSH
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
// if not factory then
35940: LD_VAR 0 1
35944: NOT
35945: IFFALSE 35949
// exit ;
35947: GO 36552
// if control = control_apeman then
35949: LD_VAR 0 4
35953: PUSH
35954: LD_INT 5
35956: EQUAL
35957: IFFALSE 36066
// begin tmp := UnitsInside ( factory ) ;
35959: LD_ADDR_VAR 0 8
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: CALL_OW 313
35973: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35974: LD_VAR 0 8
35978: PPUSH
35979: LD_INT 25
35981: PUSH
35982: LD_INT 12
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PPUSH
35989: CALL_OW 72
35993: NOT
35994: IFFALSE 36004
// control := control_manual ;
35996: LD_ADDR_VAR 0 4
36000: PUSH
36001: LD_INT 1
36003: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36004: LD_ADDR_VAR 0 8
36008: PUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL 35701 0 1
36018: ST_TO_ADDR
// if tmp then
36019: LD_VAR 0 8
36023: IFFALSE 36066
// begin for i in tmp do
36025: LD_ADDR_VAR 0 7
36029: PUSH
36030: LD_VAR 0 8
36034: PUSH
36035: FOR_IN
36036: IFFALSE 36064
// if i [ 1 ] = b_ext_radio then
36038: LD_VAR 0 7
36042: PUSH
36043: LD_INT 1
36045: ARRAY
36046: PUSH
36047: LD_INT 22
36049: EQUAL
36050: IFFALSE 36062
// begin control := control_remote ;
36052: LD_ADDR_VAR 0 4
36056: PUSH
36057: LD_INT 2
36059: ST_TO_ADDR
// break ;
36060: GO 36064
// end ;
36062: GO 36035
36064: POP
36065: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36066: LD_VAR 0 1
36070: PPUSH
36071: LD_VAR 0 2
36075: PPUSH
36076: LD_VAR 0 3
36080: PPUSH
36081: LD_VAR 0 4
36085: PPUSH
36086: LD_VAR 0 5
36090: PPUSH
36091: CALL_OW 448
36095: IFFALSE 36130
// begin result := [ chassis , engine , control , weapon ] ;
36097: LD_ADDR_VAR 0 6
36101: PUSH
36102: LD_VAR 0 2
36106: PUSH
36107: LD_VAR 0 3
36111: PUSH
36112: LD_VAR 0 4
36116: PUSH
36117: LD_VAR 0 5
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
// exit ;
36128: GO 36552
// end ; _chassis := AvailableChassisList ( factory ) ;
36130: LD_ADDR_VAR 0 9
36134: PUSH
36135: LD_VAR 0 1
36139: PPUSH
36140: CALL_OW 475
36144: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36145: LD_ADDR_VAR 0 11
36149: PUSH
36150: LD_VAR 0 1
36154: PPUSH
36155: CALL_OW 476
36159: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36160: LD_ADDR_VAR 0 12
36164: PUSH
36165: LD_VAR 0 1
36169: PPUSH
36170: CALL_OW 477
36174: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36175: LD_ADDR_VAR 0 10
36179: PUSH
36180: LD_VAR 0 1
36184: PPUSH
36185: CALL_OW 478
36189: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36190: LD_VAR 0 9
36194: NOT
36195: IFTRUE 36204
36197: PUSH
36198: LD_VAR 0 11
36202: NOT
36203: OR
36204: IFTRUE 36213
36206: PUSH
36207: LD_VAR 0 12
36211: NOT
36212: OR
36213: IFTRUE 36222
36215: PUSH
36216: LD_VAR 0 10
36220: NOT
36221: OR
36222: IFFALSE 36257
// begin result := [ chassis , engine , control , weapon ] ;
36224: LD_ADDR_VAR 0 6
36228: PUSH
36229: LD_VAR 0 2
36233: PUSH
36234: LD_VAR 0 3
36238: PUSH
36239: LD_VAR 0 4
36243: PUSH
36244: LD_VAR 0 5
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: ST_TO_ADDR
// exit ;
36255: GO 36552
// end ; if not chassis in _chassis then
36257: LD_VAR 0 2
36261: PUSH
36262: LD_VAR 0 9
36266: IN
36267: NOT
36268: IFFALSE 36294
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36270: LD_ADDR_VAR 0 2
36274: PUSH
36275: LD_VAR 0 9
36279: PUSH
36280: LD_INT 1
36282: PPUSH
36283: LD_VAR 0 9
36287: PPUSH
36288: CALL_OW 12
36292: ARRAY
36293: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36294: LD_VAR 0 2
36298: PPUSH
36299: LD_VAR 0 3
36303: PPUSH
36304: CALL 36557 0 2
36308: NOT
36309: IFFALSE 36370
// repeat engine := _engine [ 1 ] ;
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_VAR 0 11
36320: PUSH
36321: LD_INT 1
36323: ARRAY
36324: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36325: LD_ADDR_VAR 0 11
36329: PUSH
36330: LD_VAR 0 11
36334: PPUSH
36335: LD_INT 1
36337: PPUSH
36338: CALL_OW 3
36342: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36343: LD_VAR 0 2
36347: PPUSH
36348: LD_VAR 0 3
36352: PPUSH
36353: CALL 36557 0 2
36357: IFTRUE 36368
36359: PUSH
36360: LD_VAR 0 11
36364: PUSH
36365: EMPTY
36366: EQUAL
36367: OR
36368: IFFALSE 36311
// if not control in _control then
36370: LD_VAR 0 4
36374: PUSH
36375: LD_VAR 0 12
36379: IN
36380: NOT
36381: IFFALSE 36407
// control := _control [ rand ( 1 , _control ) ] ;
36383: LD_ADDR_VAR 0 4
36387: PUSH
36388: LD_VAR 0 12
36392: PUSH
36393: LD_INT 1
36395: PPUSH
36396: LD_VAR 0 12
36400: PPUSH
36401: CALL_OW 12
36405: ARRAY
36406: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36407: LD_VAR 0 2
36411: PPUSH
36412: LD_VAR 0 5
36416: PPUSH
36417: CALL 36779 0 2
36421: NOT
36422: IFFALSE 36483
// repeat weapon := _weapon [ 1 ] ;
36424: LD_ADDR_VAR 0 5
36428: PUSH
36429: LD_VAR 0 10
36433: PUSH
36434: LD_INT 1
36436: ARRAY
36437: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36438: LD_ADDR_VAR 0 10
36442: PUSH
36443: LD_VAR 0 10
36447: PPUSH
36448: LD_INT 1
36450: PPUSH
36451: CALL_OW 3
36455: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36456: LD_VAR 0 2
36460: PPUSH
36461: LD_VAR 0 5
36465: PPUSH
36466: CALL 36779 0 2
36470: IFTRUE 36481
36472: PUSH
36473: LD_VAR 0 10
36477: PUSH
36478: EMPTY
36479: EQUAL
36480: OR
36481: IFFALSE 36424
// result := [ ] ;
36483: LD_ADDR_VAR 0 6
36487: PUSH
36488: EMPTY
36489: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36490: LD_VAR 0 1
36494: PPUSH
36495: LD_VAR 0 2
36499: PPUSH
36500: LD_VAR 0 3
36504: PPUSH
36505: LD_VAR 0 4
36509: PPUSH
36510: LD_VAR 0 5
36514: PPUSH
36515: CALL_OW 448
36519: IFFALSE 36552
// result := [ chassis , engine , control , weapon ] ;
36521: LD_ADDR_VAR 0 6
36525: PUSH
36526: LD_VAR 0 2
36530: PUSH
36531: LD_VAR 0 3
36535: PUSH
36536: LD_VAR 0 4
36540: PUSH
36541: LD_VAR 0 5
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: ST_TO_ADDR
// end ;
36552: LD_VAR 0 6
36556: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36557: LD_INT 0
36559: PPUSH
// if not chassis or not engine then
36560: LD_VAR 0 1
36564: NOT
36565: IFTRUE 36574
36567: PUSH
36568: LD_VAR 0 2
36572: NOT
36573: OR
36574: IFFALSE 36578
// exit ;
36576: GO 36774
// case engine of engine_solar :
36578: LD_VAR 0 2
36582: PUSH
36583: LD_INT 2
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36591
36589: GO 36629
36591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36592: LD_ADDR_VAR 0 3
36596: PUSH
36597: LD_INT 11
36599: PUSH
36600: LD_INT 12
36602: PUSH
36603: LD_INT 13
36605: PUSH
36606: LD_INT 14
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: LD_INT 2
36614: PUSH
36615: LD_INT 3
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: ST_TO_ADDR
36627: GO 36758
36629: LD_INT 1
36631: DOUBLE
36632: EQUAL
36633: IFTRUE 36637
36635: GO 36699
36637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36638: LD_ADDR_VAR 0 3
36642: PUSH
36643: LD_INT 11
36645: PUSH
36646: LD_INT 12
36648: PUSH
36649: LD_INT 13
36651: PUSH
36652: LD_INT 14
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: LD_INT 3
36663: PUSH
36664: LD_INT 4
36666: PUSH
36667: LD_INT 5
36669: PUSH
36670: LD_INT 21
36672: PUSH
36673: LD_INT 23
36675: PUSH
36676: LD_INT 22
36678: PUSH
36679: LD_INT 24
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
36697: GO 36758
36699: LD_INT 3
36701: DOUBLE
36702: EQUAL
36703: IFTRUE 36707
36705: GO 36757
36707: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36708: LD_ADDR_VAR 0 3
36712: PUSH
36713: LD_INT 13
36715: PUSH
36716: LD_INT 14
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: LD_INT 4
36727: PUSH
36728: LD_INT 5
36730: PUSH
36731: LD_INT 21
36733: PUSH
36734: LD_INT 22
36736: PUSH
36737: LD_INT 23
36739: PUSH
36740: LD_INT 24
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
36755: GO 36758
36757: POP
// result := ( chassis in result ) ;
36758: LD_ADDR_VAR 0 3
36762: PUSH
36763: LD_VAR 0 1
36767: PUSH
36768: LD_VAR 0 3
36772: IN
36773: ST_TO_ADDR
// end ;
36774: LD_VAR 0 3
36778: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36779: LD_INT 0
36781: PPUSH
// if not chassis or not weapon then
36782: LD_VAR 0 1
36786: NOT
36787: IFTRUE 36796
36789: PUSH
36790: LD_VAR 0 2
36794: NOT
36795: OR
36796: IFFALSE 36800
// exit ;
36798: GO 37894
// case weapon of us_machine_gun :
36800: LD_VAR 0 2
36804: PUSH
36805: LD_INT 2
36807: DOUBLE
36808: EQUAL
36809: IFTRUE 36813
36811: GO 36843
36813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36814: LD_ADDR_VAR 0 3
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: LD_INT 4
36830: PUSH
36831: LD_INT 5
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
36841: GO 37878
36843: LD_INT 3
36845: DOUBLE
36846: EQUAL
36847: IFTRUE 36851
36849: GO 36881
36851: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36852: LD_ADDR_VAR 0 3
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 2
36862: PUSH
36863: LD_INT 3
36865: PUSH
36866: LD_INT 4
36868: PUSH
36869: LD_INT 5
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
36879: GO 37878
36881: LD_INT 11
36883: DOUBLE
36884: EQUAL
36885: IFTRUE 36889
36887: GO 36919
36889: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36890: LD_ADDR_VAR 0 3
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: LD_INT 4
36906: PUSH
36907: LD_INT 5
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: ST_TO_ADDR
36917: GO 37878
36919: LD_INT 4
36921: DOUBLE
36922: EQUAL
36923: IFTRUE 36927
36925: GO 36953
36927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36928: LD_ADDR_VAR 0 3
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: LD_INT 3
36938: PUSH
36939: LD_INT 4
36941: PUSH
36942: LD_INT 5
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: ST_TO_ADDR
36951: GO 37878
36953: LD_INT 5
36955: DOUBLE
36956: EQUAL
36957: IFTRUE 36961
36959: GO 36987
36961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36962: LD_ADDR_VAR 0 3
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: LD_INT 3
36972: PUSH
36973: LD_INT 4
36975: PUSH
36976: LD_INT 5
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
36985: GO 37878
36987: LD_INT 9
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 36995
36993: GO 37021
36995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36996: LD_ADDR_VAR 0 3
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: LD_INT 3
37006: PUSH
37007: LD_INT 4
37009: PUSH
37010: LD_INT 5
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
37019: GO 37878
37021: LD_INT 7
37023: DOUBLE
37024: EQUAL
37025: IFTRUE 37029
37027: GO 37055
37029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37030: LD_ADDR_VAR 0 3
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: LD_INT 4
37043: PUSH
37044: LD_INT 5
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: ST_TO_ADDR
37053: GO 37878
37055: LD_INT 12
37057: DOUBLE
37058: EQUAL
37059: IFTRUE 37063
37061: GO 37089
37063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37064: LD_ADDR_VAR 0 3
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 3
37074: PUSH
37075: LD_INT 4
37077: PUSH
37078: LD_INT 5
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: ST_TO_ADDR
37087: GO 37878
37089: LD_INT 13
37091: DOUBLE
37092: EQUAL
37093: IFTRUE 37097
37095: GO 37123
37097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37098: LD_ADDR_VAR 0 3
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 3
37108: PUSH
37109: LD_INT 4
37111: PUSH
37112: LD_INT 5
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
37121: GO 37878
37123: LD_INT 14
37125: DOUBLE
37126: EQUAL
37127: IFTRUE 37131
37129: GO 37149
37131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37132: LD_ADDR_VAR 0 3
37136: PUSH
37137: LD_INT 4
37139: PUSH
37140: LD_INT 5
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: ST_TO_ADDR
37147: GO 37878
37149: LD_INT 6
37151: DOUBLE
37152: EQUAL
37153: IFTRUE 37157
37155: GO 37175
37157: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: LD_INT 4
37165: PUSH
37166: LD_INT 5
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: ST_TO_ADDR
37173: GO 37878
37175: LD_INT 10
37177: DOUBLE
37178: EQUAL
37179: IFTRUE 37183
37181: GO 37201
37183: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_INT 4
37191: PUSH
37192: LD_INT 5
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: ST_TO_ADDR
37199: GO 37878
37201: LD_INT 22
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37235
37209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_INT 11
37217: PUSH
37218: LD_INT 12
37220: PUSH
37221: LD_INT 13
37223: PUSH
37224: LD_INT 14
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: ST_TO_ADDR
37233: GO 37878
37235: LD_INT 23
37237: DOUBLE
37238: EQUAL
37239: IFTRUE 37243
37241: GO 37269
37243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37244: LD_ADDR_VAR 0 3
37248: PUSH
37249: LD_INT 11
37251: PUSH
37252: LD_INT 12
37254: PUSH
37255: LD_INT 13
37257: PUSH
37258: LD_INT 14
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: ST_TO_ADDR
37267: GO 37878
37269: LD_INT 24
37271: DOUBLE
37272: EQUAL
37273: IFTRUE 37277
37275: GO 37303
37277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37278: LD_ADDR_VAR 0 3
37282: PUSH
37283: LD_INT 11
37285: PUSH
37286: LD_INT 12
37288: PUSH
37289: LD_INT 13
37291: PUSH
37292: LD_INT 14
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
37301: GO 37878
37303: LD_INT 30
37305: DOUBLE
37306: EQUAL
37307: IFTRUE 37311
37309: GO 37337
37311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_INT 11
37319: PUSH
37320: LD_INT 12
37322: PUSH
37323: LD_INT 13
37325: PUSH
37326: LD_INT 14
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: ST_TO_ADDR
37335: GO 37878
37337: LD_INT 25
37339: DOUBLE
37340: EQUAL
37341: IFTRUE 37345
37343: GO 37363
37345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37346: LD_ADDR_VAR 0 3
37350: PUSH
37351: LD_INT 13
37353: PUSH
37354: LD_INT 14
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: ST_TO_ADDR
37361: GO 37878
37363: LD_INT 27
37365: DOUBLE
37366: EQUAL
37367: IFTRUE 37371
37369: GO 37389
37371: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37372: LD_ADDR_VAR 0 3
37376: PUSH
37377: LD_INT 13
37379: PUSH
37380: LD_INT 14
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: ST_TO_ADDR
37387: GO 37878
37389: LD_INT 92
37391: DOUBLE
37392: EQUAL
37393: IFTRUE 37397
37395: GO 37423
37397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37398: LD_ADDR_VAR 0 3
37402: PUSH
37403: LD_INT 11
37405: PUSH
37406: LD_INT 12
37408: PUSH
37409: LD_INT 13
37411: PUSH
37412: LD_INT 14
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: ST_TO_ADDR
37421: GO 37878
37423: LD_INT 28
37425: DOUBLE
37426: EQUAL
37427: IFTRUE 37431
37429: GO 37449
37431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37432: LD_ADDR_VAR 0 3
37436: PUSH
37437: LD_INT 13
37439: PUSH
37440: LD_INT 14
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: ST_TO_ADDR
37447: GO 37878
37449: LD_INT 29
37451: DOUBLE
37452: EQUAL
37453: IFTRUE 37457
37455: GO 37475
37457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37458: LD_ADDR_VAR 0 3
37462: PUSH
37463: LD_INT 13
37465: PUSH
37466: LD_INT 14
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: ST_TO_ADDR
37473: GO 37878
37475: LD_INT 31
37477: DOUBLE
37478: EQUAL
37479: IFTRUE 37483
37481: GO 37501
37483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37484: LD_ADDR_VAR 0 3
37488: PUSH
37489: LD_INT 13
37491: PUSH
37492: LD_INT 14
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: ST_TO_ADDR
37499: GO 37878
37501: LD_INT 26
37503: DOUBLE
37504: EQUAL
37505: IFTRUE 37509
37507: GO 37527
37509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37510: LD_ADDR_VAR 0 3
37514: PUSH
37515: LD_INT 13
37517: PUSH
37518: LD_INT 14
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: ST_TO_ADDR
37525: GO 37878
37527: LD_INT 42
37529: DOUBLE
37530: EQUAL
37531: IFTRUE 37535
37533: GO 37561
37535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37536: LD_ADDR_VAR 0 3
37540: PUSH
37541: LD_INT 21
37543: PUSH
37544: LD_INT 22
37546: PUSH
37547: LD_INT 23
37549: PUSH
37550: LD_INT 24
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: ST_TO_ADDR
37559: GO 37878
37561: LD_INT 43
37563: DOUBLE
37564: EQUAL
37565: IFTRUE 37569
37567: GO 37595
37569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37570: LD_ADDR_VAR 0 3
37574: PUSH
37575: LD_INT 21
37577: PUSH
37578: LD_INT 22
37580: PUSH
37581: LD_INT 23
37583: PUSH
37584: LD_INT 24
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
37593: GO 37878
37595: LD_INT 44
37597: DOUBLE
37598: EQUAL
37599: IFTRUE 37603
37601: GO 37629
37603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37604: LD_ADDR_VAR 0 3
37608: PUSH
37609: LD_INT 21
37611: PUSH
37612: LD_INT 22
37614: PUSH
37615: LD_INT 23
37617: PUSH
37618: LD_INT 24
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
37627: GO 37878
37629: LD_INT 45
37631: DOUBLE
37632: EQUAL
37633: IFTRUE 37637
37635: GO 37663
37637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_INT 21
37645: PUSH
37646: LD_INT 22
37648: PUSH
37649: LD_INT 23
37651: PUSH
37652: LD_INT 24
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
37661: GO 37878
37663: LD_INT 49
37665: DOUBLE
37666: EQUAL
37667: IFTRUE 37671
37669: GO 37697
37671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37672: LD_ADDR_VAR 0 3
37676: PUSH
37677: LD_INT 21
37679: PUSH
37680: LD_INT 22
37682: PUSH
37683: LD_INT 23
37685: PUSH
37686: LD_INT 24
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: ST_TO_ADDR
37695: GO 37878
37697: LD_INT 51
37699: DOUBLE
37700: EQUAL
37701: IFTRUE 37705
37703: GO 37731
37705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37706: LD_ADDR_VAR 0 3
37710: PUSH
37711: LD_INT 21
37713: PUSH
37714: LD_INT 22
37716: PUSH
37717: LD_INT 23
37719: PUSH
37720: LD_INT 24
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
37729: GO 37878
37731: LD_INT 52
37733: DOUBLE
37734: EQUAL
37735: IFTRUE 37739
37737: GO 37765
37739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37740: LD_ADDR_VAR 0 3
37744: PUSH
37745: LD_INT 21
37747: PUSH
37748: LD_INT 22
37750: PUSH
37751: LD_INT 23
37753: PUSH
37754: LD_INT 24
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: ST_TO_ADDR
37763: GO 37878
37765: LD_INT 53
37767: DOUBLE
37768: EQUAL
37769: IFTRUE 37773
37771: GO 37791
37773: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37774: LD_ADDR_VAR 0 3
37778: PUSH
37779: LD_INT 23
37781: PUSH
37782: LD_INT 24
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: ST_TO_ADDR
37789: GO 37878
37791: LD_INT 46
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 37817
37799: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37800: LD_ADDR_VAR 0 3
37804: PUSH
37805: LD_INT 23
37807: PUSH
37808: LD_INT 24
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: ST_TO_ADDR
37815: GO 37878
37817: LD_INT 47
37819: DOUBLE
37820: EQUAL
37821: IFTRUE 37825
37823: GO 37843
37825: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
37826: LD_ADDR_VAR 0 3
37830: PUSH
37831: LD_INT 23
37833: PUSH
37834: LD_INT 24
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: ST_TO_ADDR
37841: GO 37878
37843: LD_INT 98
37845: DOUBLE
37846: EQUAL
37847: IFTRUE 37851
37849: GO 37877
37851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37852: LD_ADDR_VAR 0 3
37856: PUSH
37857: LD_INT 21
37859: PUSH
37860: LD_INT 22
37862: PUSH
37863: LD_INT 23
37865: PUSH
37866: LD_INT 24
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: ST_TO_ADDR
37875: GO 37878
37877: POP
// result := ( chassis in result ) ;
37878: LD_ADDR_VAR 0 3
37882: PUSH
37883: LD_VAR 0 1
37887: PUSH
37888: LD_VAR 0 3
37892: IN
37893: ST_TO_ADDR
// end ;
37894: LD_VAR 0 3
37898: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37899: LD_INT 0
37901: PPUSH
37902: PPUSH
37903: PPUSH
37904: PPUSH
37905: PPUSH
37906: PPUSH
37907: PPUSH
// result := array ;
37908: LD_ADDR_VAR 0 5
37912: PUSH
37913: LD_VAR 0 1
37917: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37918: LD_VAR 0 1
37922: NOT
37923: IFTRUE 37932
37925: PUSH
37926: LD_VAR 0 2
37930: NOT
37931: OR
37932: IFTRUE 37941
37934: PUSH
37935: LD_VAR 0 3
37939: NOT
37940: OR
37941: IFTRUE 37955
37943: PUSH
37944: LD_VAR 0 2
37948: PUSH
37949: LD_VAR 0 1
37953: GREATER
37954: OR
37955: IFTRUE 37969
37957: PUSH
37958: LD_VAR 0 3
37962: PUSH
37963: LD_VAR 0 1
37967: GREATER
37968: OR
37969: IFFALSE 37973
// exit ;
37971: GO 38269
// if direction then
37973: LD_VAR 0 4
37977: IFFALSE 38041
// begin d := 1 ;
37979: LD_ADDR_VAR 0 9
37983: PUSH
37984: LD_INT 1
37986: ST_TO_ADDR
// if i_from > i_to then
37987: LD_VAR 0 2
37991: PUSH
37992: LD_VAR 0 3
37996: GREATER
37997: IFFALSE 38023
// length := ( array - i_from ) + i_to else
37999: LD_ADDR_VAR 0 11
38003: PUSH
38004: LD_VAR 0 1
38008: PUSH
38009: LD_VAR 0 2
38013: MINUS
38014: PUSH
38015: LD_VAR 0 3
38019: PLUS
38020: ST_TO_ADDR
38021: GO 38039
// length := i_to - i_from ;
38023: LD_ADDR_VAR 0 11
38027: PUSH
38028: LD_VAR 0 3
38032: PUSH
38033: LD_VAR 0 2
38037: MINUS
38038: ST_TO_ADDR
// end else
38039: GO 38102
// begin d := - 1 ;
38041: LD_ADDR_VAR 0 9
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: ST_TO_ADDR
// if i_from > i_to then
38050: LD_VAR 0 2
38054: PUSH
38055: LD_VAR 0 3
38059: GREATER
38060: IFFALSE 38080
// length := i_from - i_to else
38062: LD_ADDR_VAR 0 11
38066: PUSH
38067: LD_VAR 0 2
38071: PUSH
38072: LD_VAR 0 3
38076: MINUS
38077: ST_TO_ADDR
38078: GO 38102
// length := ( array - i_to ) + i_from ;
38080: LD_ADDR_VAR 0 11
38084: PUSH
38085: LD_VAR 0 1
38089: PUSH
38090: LD_VAR 0 3
38094: MINUS
38095: PUSH
38096: LD_VAR 0 2
38100: PLUS
38101: ST_TO_ADDR
// end ; if not length then
38102: LD_VAR 0 11
38106: NOT
38107: IFFALSE 38111
// exit ;
38109: GO 38269
// tmp := array ;
38111: LD_ADDR_VAR 0 10
38115: PUSH
38116: LD_VAR 0 1
38120: ST_TO_ADDR
// for i = 1 to length do
38121: LD_ADDR_VAR 0 6
38125: PUSH
38126: DOUBLE
38127: LD_INT 1
38129: DEC
38130: ST_TO_ADDR
38131: LD_VAR 0 11
38135: PUSH
38136: FOR_TO
38137: IFFALSE 38257
// begin for j = 1 to array do
38139: LD_ADDR_VAR 0 7
38143: PUSH
38144: DOUBLE
38145: LD_INT 1
38147: DEC
38148: ST_TO_ADDR
38149: LD_VAR 0 1
38153: PUSH
38154: FOR_TO
38155: IFFALSE 38243
// begin k := j + d ;
38157: LD_ADDR_VAR 0 8
38161: PUSH
38162: LD_VAR 0 7
38166: PUSH
38167: LD_VAR 0 9
38171: PLUS
38172: ST_TO_ADDR
// if k > array then
38173: LD_VAR 0 8
38177: PUSH
38178: LD_VAR 0 1
38182: GREATER
38183: IFFALSE 38193
// k := 1 ;
38185: LD_ADDR_VAR 0 8
38189: PUSH
38190: LD_INT 1
38192: ST_TO_ADDR
// if not k then
38193: LD_VAR 0 8
38197: NOT
38198: IFFALSE 38210
// k := array ;
38200: LD_ADDR_VAR 0 8
38204: PUSH
38205: LD_VAR 0 1
38209: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38210: LD_ADDR_VAR 0 10
38214: PUSH
38215: LD_VAR 0 10
38219: PPUSH
38220: LD_VAR 0 8
38224: PPUSH
38225: LD_VAR 0 1
38229: PUSH
38230: LD_VAR 0 7
38234: ARRAY
38235: PPUSH
38236: CALL_OW 1
38240: ST_TO_ADDR
// end ;
38241: GO 38154
38243: POP
38244: POP
// array := tmp ;
38245: LD_ADDR_VAR 0 1
38249: PUSH
38250: LD_VAR 0 10
38254: ST_TO_ADDR
// end ;
38255: GO 38136
38257: POP
38258: POP
// result := array ;
38259: LD_ADDR_VAR 0 5
38263: PUSH
38264: LD_VAR 0 1
38268: ST_TO_ADDR
// end ;
38269: LD_VAR 0 5
38273: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38274: LD_INT 0
38276: PPUSH
38277: PPUSH
// result := 0 ;
38278: LD_ADDR_VAR 0 3
38282: PUSH
38283: LD_INT 0
38285: ST_TO_ADDR
// if not array or not value in array then
38286: LD_VAR 0 1
38290: NOT
38291: IFTRUE 38306
38293: PUSH
38294: LD_VAR 0 2
38298: PUSH
38299: LD_VAR 0 1
38303: IN
38304: NOT
38305: OR
38306: IFFALSE 38310
// exit ;
38308: GO 38364
// for i = 1 to array do
38310: LD_ADDR_VAR 0 4
38314: PUSH
38315: DOUBLE
38316: LD_INT 1
38318: DEC
38319: ST_TO_ADDR
38320: LD_VAR 0 1
38324: PUSH
38325: FOR_TO
38326: IFFALSE 38362
// if value = array [ i ] then
38328: LD_VAR 0 2
38332: PUSH
38333: LD_VAR 0 1
38337: PUSH
38338: LD_VAR 0 4
38342: ARRAY
38343: EQUAL
38344: IFFALSE 38360
// begin result := i ;
38346: LD_ADDR_VAR 0 3
38350: PUSH
38351: LD_VAR 0 4
38355: ST_TO_ADDR
// exit ;
38356: POP
38357: POP
38358: GO 38364
// end ;
38360: GO 38325
38362: POP
38363: POP
// end ;
38364: LD_VAR 0 3
38368: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38369: LD_INT 0
38371: PPUSH
// vc_chassis := chassis ;
38372: LD_ADDR_OWVAR 37
38376: PUSH
38377: LD_VAR 0 1
38381: ST_TO_ADDR
// vc_engine := engine ;
38382: LD_ADDR_OWVAR 39
38386: PUSH
38387: LD_VAR 0 2
38391: ST_TO_ADDR
// vc_control := control ;
38392: LD_ADDR_OWVAR 38
38396: PUSH
38397: LD_VAR 0 3
38401: ST_TO_ADDR
// vc_weapon := weapon ;
38402: LD_ADDR_OWVAR 40
38406: PUSH
38407: LD_VAR 0 4
38411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38412: LD_ADDR_OWVAR 41
38416: PUSH
38417: LD_VAR 0 5
38421: ST_TO_ADDR
// end ;
38422: LD_VAR 0 6
38426: RET
// export function WantPlant ( unit ) ; var task ; begin
38427: LD_INT 0
38429: PPUSH
38430: PPUSH
// result := false ;
38431: LD_ADDR_VAR 0 2
38435: PUSH
38436: LD_INT 0
38438: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 437
38453: ST_TO_ADDR
// if task then
38454: LD_VAR 0 3
38458: IFFALSE 38486
// if task [ 1 ] [ 1 ] = p then
38460: LD_VAR 0 3
38464: PUSH
38465: LD_INT 1
38467: ARRAY
38468: PUSH
38469: LD_INT 1
38471: ARRAY
38472: PUSH
38473: LD_STRING p
38475: EQUAL
38476: IFFALSE 38486
// result := true ;
38478: LD_ADDR_VAR 0 2
38482: PUSH
38483: LD_INT 1
38485: ST_TO_ADDR
// end ;
38486: LD_VAR 0 2
38490: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38491: LD_INT 0
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
// if pos < 1 then
38497: LD_VAR 0 2
38501: PUSH
38502: LD_INT 1
38504: LESS
38505: IFFALSE 38509
// exit ;
38507: GO 38812
// if pos = 1 then
38509: LD_VAR 0 2
38513: PUSH
38514: LD_INT 1
38516: EQUAL
38517: IFFALSE 38550
// result := Replace ( arr , pos [ 1 ] , value ) else
38519: LD_ADDR_VAR 0 4
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: LD_VAR 0 2
38533: PUSH
38534: LD_INT 1
38536: ARRAY
38537: PPUSH
38538: LD_VAR 0 3
38542: PPUSH
38543: CALL_OW 1
38547: ST_TO_ADDR
38548: GO 38812
// begin tmp := arr ;
38550: LD_ADDR_VAR 0 6
38554: PUSH
38555: LD_VAR 0 1
38559: ST_TO_ADDR
// s_arr := [ tmp ] ;
38560: LD_ADDR_VAR 0 7
38564: PUSH
38565: LD_VAR 0 6
38569: PUSH
38570: EMPTY
38571: LIST
38572: ST_TO_ADDR
// for i = 1 to pos - 1 do
38573: LD_ADDR_VAR 0 5
38577: PUSH
38578: DOUBLE
38579: LD_INT 1
38581: DEC
38582: ST_TO_ADDR
38583: LD_VAR 0 2
38587: PUSH
38588: LD_INT 1
38590: MINUS
38591: PUSH
38592: FOR_TO
38593: IFFALSE 38638
// begin tmp := tmp [ pos [ i ] ] ;
38595: LD_ADDR_VAR 0 6
38599: PUSH
38600: LD_VAR 0 6
38604: PUSH
38605: LD_VAR 0 2
38609: PUSH
38610: LD_VAR 0 5
38614: ARRAY
38615: ARRAY
38616: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38617: LD_ADDR_VAR 0 7
38621: PUSH
38622: LD_VAR 0 7
38626: PUSH
38627: LD_VAR 0 6
38631: PUSH
38632: EMPTY
38633: LIST
38634: ADD
38635: ST_TO_ADDR
// end ;
38636: GO 38592
38638: POP
38639: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38640: LD_ADDR_VAR 0 6
38644: PUSH
38645: LD_VAR 0 6
38649: PPUSH
38650: LD_VAR 0 2
38654: PUSH
38655: LD_VAR 0 2
38659: ARRAY
38660: PPUSH
38661: LD_VAR 0 3
38665: PPUSH
38666: CALL_OW 1
38670: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38671: LD_ADDR_VAR 0 7
38675: PUSH
38676: LD_VAR 0 7
38680: PPUSH
38681: LD_VAR 0 7
38685: PPUSH
38686: LD_VAR 0 6
38690: PPUSH
38691: CALL_OW 1
38695: ST_TO_ADDR
// for i = s_arr downto 2 do
38696: LD_ADDR_VAR 0 5
38700: PUSH
38701: DOUBLE
38702: LD_VAR 0 7
38706: INC
38707: ST_TO_ADDR
38708: LD_INT 2
38710: PUSH
38711: FOR_DOWNTO
38712: IFFALSE 38796
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38714: LD_ADDR_VAR 0 6
38718: PUSH
38719: LD_VAR 0 7
38723: PUSH
38724: LD_VAR 0 5
38728: PUSH
38729: LD_INT 1
38731: MINUS
38732: ARRAY
38733: PPUSH
38734: LD_VAR 0 2
38738: PUSH
38739: LD_VAR 0 5
38743: PUSH
38744: LD_INT 1
38746: MINUS
38747: ARRAY
38748: PPUSH
38749: LD_VAR 0 7
38753: PUSH
38754: LD_VAR 0 5
38758: ARRAY
38759: PPUSH
38760: CALL_OW 1
38764: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38765: LD_ADDR_VAR 0 7
38769: PUSH
38770: LD_VAR 0 7
38774: PPUSH
38775: LD_VAR 0 5
38779: PUSH
38780: LD_INT 1
38782: MINUS
38783: PPUSH
38784: LD_VAR 0 6
38788: PPUSH
38789: CALL_OW 1
38793: ST_TO_ADDR
// end ;
38794: GO 38711
38796: POP
38797: POP
// result := s_arr [ 1 ] ;
38798: LD_ADDR_VAR 0 4
38802: PUSH
38803: LD_VAR 0 7
38807: PUSH
38808: LD_INT 1
38810: ARRAY
38811: ST_TO_ADDR
// end ; end ;
38812: LD_VAR 0 4
38816: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38817: LD_INT 0
38819: PPUSH
38820: PPUSH
// if not list then
38821: LD_VAR 0 1
38825: NOT
38826: IFFALSE 38830
// exit ;
38828: GO 38921
// i := list [ pos1 ] ;
38830: LD_ADDR_VAR 0 5
38834: PUSH
38835: LD_VAR 0 1
38839: PUSH
38840: LD_VAR 0 2
38844: ARRAY
38845: ST_TO_ADDR
// if not i then
38846: LD_VAR 0 5
38850: NOT
38851: IFFALSE 38855
// exit ;
38853: GO 38921
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38855: LD_ADDR_VAR 0 1
38859: PUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: LD_VAR 0 2
38869: PPUSH
38870: LD_VAR 0 1
38874: PUSH
38875: LD_VAR 0 3
38879: ARRAY
38880: PPUSH
38881: CALL_OW 1
38885: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38886: LD_ADDR_VAR 0 1
38890: PUSH
38891: LD_VAR 0 1
38895: PPUSH
38896: LD_VAR 0 3
38900: PPUSH
38901: LD_VAR 0 5
38905: PPUSH
38906: CALL_OW 1
38910: ST_TO_ADDR
// result := list ;
38911: LD_ADDR_VAR 0 4
38915: PUSH
38916: LD_VAR 0 1
38920: ST_TO_ADDR
// end ;
38921: LD_VAR 0 4
38925: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38926: LD_INT 0
38928: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38929: LD_ADDR_VAR 0 5
38933: PUSH
38934: LD_VAR 0 1
38938: PPUSH
38939: CALL_OW 250
38943: PPUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: CALL_OW 251
38953: PPUSH
38954: LD_VAR 0 2
38958: PPUSH
38959: LD_VAR 0 3
38963: PPUSH
38964: LD_VAR 0 4
38968: PPUSH
38969: CALL 39351 0 5
38973: ST_TO_ADDR
// end ;
38974: LD_VAR 0 5
38978: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38979: LD_INT 0
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
// if not list or not unit then
38985: LD_VAR 0 2
38989: NOT
38990: IFTRUE 38999
38992: PUSH
38993: LD_VAR 0 1
38997: NOT
38998: OR
38999: IFFALSE 39003
// exit ;
39001: GO 39346
// result := [ ] ;
39003: LD_ADDR_VAR 0 5
39007: PUSH
39008: EMPTY
39009: ST_TO_ADDR
// for i in list do
39010: LD_ADDR_VAR 0 6
39014: PUSH
39015: LD_VAR 0 2
39019: PUSH
39020: FOR_IN
39021: IFFALSE 39239
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39023: LD_ADDR_VAR 0 8
39027: PUSH
39028: LD_VAR 0 1
39032: PPUSH
39033: LD_VAR 0 6
39037: PUSH
39038: LD_INT 1
39040: ARRAY
39041: PPUSH
39042: LD_VAR 0 6
39046: PUSH
39047: LD_INT 2
39049: ARRAY
39050: PPUSH
39051: CALL_OW 297
39055: ST_TO_ADDR
// if not Count ( result ) then
39056: LD_VAR 0 5
39060: PPUSH
39061: CALL 35573 0 1
39065: NOT
39066: IFFALSE 39099
// begin result := Join ( result , [ i , tmp ] ) ;
39068: LD_ADDR_VAR 0 5
39072: PUSH
39073: LD_VAR 0 5
39077: PPUSH
39078: LD_VAR 0 6
39082: PUSH
39083: LD_VAR 0 8
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PPUSH
39092: CALL 71549 0 2
39096: ST_TO_ADDR
// continue ;
39097: GO 39020
// end ; if result [ result ] [ 2 ] <= tmp then
39099: LD_VAR 0 5
39103: PUSH
39104: LD_VAR 0 5
39108: ARRAY
39109: PUSH
39110: LD_INT 2
39112: ARRAY
39113: PUSH
39114: LD_VAR 0 8
39118: LESSEQUAL
39119: IFFALSE 39152
// result := Join ( result , [ i , tmp ] ) else
39121: LD_ADDR_VAR 0 5
39125: PUSH
39126: LD_VAR 0 5
39130: PPUSH
39131: LD_VAR 0 6
39135: PUSH
39136: LD_VAR 0 8
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PPUSH
39145: CALL 71549 0 2
39149: ST_TO_ADDR
39150: GO 39237
// begin for j := 1 to Count ( result ) do
39152: LD_ADDR_VAR 0 7
39156: PUSH
39157: DOUBLE
39158: LD_INT 1
39160: DEC
39161: ST_TO_ADDR
39162: LD_VAR 0 5
39166: PPUSH
39167: CALL 35573 0 1
39171: PUSH
39172: FOR_TO
39173: IFFALSE 39235
// begin if tmp < result [ j ] [ 2 ] then
39175: LD_VAR 0 8
39179: PUSH
39180: LD_VAR 0 5
39184: PUSH
39185: LD_VAR 0 7
39189: ARRAY
39190: PUSH
39191: LD_INT 2
39193: ARRAY
39194: LESS
39195: IFFALSE 39233
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: LD_VAR 0 5
39206: PPUSH
39207: LD_VAR 0 7
39211: PPUSH
39212: LD_VAR 0 6
39216: PUSH
39217: LD_VAR 0 8
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PPUSH
39226: CALL_OW 2
39230: ST_TO_ADDR
// break ;
39231: GO 39235
// end ; end ;
39233: GO 39172
39235: POP
39236: POP
// end ; end ;
39237: GO 39020
39239: POP
39240: POP
// if result and not asc then
39241: LD_VAR 0 5
39245: IFFALSE 39254
39247: PUSH
39248: LD_VAR 0 3
39252: NOT
39253: AND
39254: IFFALSE 39271
// result := ReverseArray ( result ) ;
39256: LD_ADDR_VAR 0 5
39260: PUSH
39261: LD_VAR 0 5
39265: PPUSH
39266: CALL 66629 0 1
39270: ST_TO_ADDR
// tmp := [ ] ;
39271: LD_ADDR_VAR 0 8
39275: PUSH
39276: EMPTY
39277: ST_TO_ADDR
// if mode then
39278: LD_VAR 0 4
39282: IFFALSE 39346
// begin for i := 1 to result do
39284: LD_ADDR_VAR 0 6
39288: PUSH
39289: DOUBLE
39290: LD_INT 1
39292: DEC
39293: ST_TO_ADDR
39294: LD_VAR 0 5
39298: PUSH
39299: FOR_TO
39300: IFFALSE 39334
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39302: LD_ADDR_VAR 0 8
39306: PUSH
39307: LD_VAR 0 8
39311: PPUSH
39312: LD_VAR 0 5
39316: PUSH
39317: LD_VAR 0 6
39321: ARRAY
39322: PUSH
39323: LD_INT 1
39325: ARRAY
39326: PPUSH
39327: CALL 71549 0 2
39331: ST_TO_ADDR
39332: GO 39299
39334: POP
39335: POP
// result := tmp ;
39336: LD_ADDR_VAR 0 5
39340: PUSH
39341: LD_VAR 0 8
39345: ST_TO_ADDR
// end ; end ;
39346: LD_VAR 0 5
39350: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39351: LD_INT 0
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
// if not list then
39357: LD_VAR 0 3
39361: NOT
39362: IFFALSE 39366
// exit ;
39364: GO 39756
// result := [ ] ;
39366: LD_ADDR_VAR 0 6
39370: PUSH
39371: EMPTY
39372: ST_TO_ADDR
// for i in list do
39373: LD_ADDR_VAR 0 7
39377: PUSH
39378: LD_VAR 0 3
39382: PUSH
39383: FOR_IN
39384: IFFALSE 39586
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39386: LD_ADDR_VAR 0 9
39390: PUSH
39391: LD_VAR 0 7
39395: PPUSH
39396: LD_VAR 0 1
39400: PPUSH
39401: LD_VAR 0 2
39405: PPUSH
39406: CALL_OW 297
39410: ST_TO_ADDR
// if not result then
39411: LD_VAR 0 6
39415: NOT
39416: IFFALSE 39442
// result := [ [ i , tmp ] ] else
39418: LD_ADDR_VAR 0 6
39422: PUSH
39423: LD_VAR 0 7
39427: PUSH
39428: LD_VAR 0 9
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: ST_TO_ADDR
39440: GO 39584
// begin if result [ result ] [ 2 ] <= tmp then
39442: LD_VAR 0 6
39446: PUSH
39447: LD_VAR 0 6
39451: ARRAY
39452: PUSH
39453: LD_INT 2
39455: ARRAY
39456: PUSH
39457: LD_VAR 0 9
39461: LESSEQUAL
39462: IFFALSE 39504
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39464: LD_ADDR_VAR 0 6
39468: PUSH
39469: LD_VAR 0 6
39473: PPUSH
39474: LD_VAR 0 6
39478: PUSH
39479: LD_INT 1
39481: PLUS
39482: PPUSH
39483: LD_VAR 0 7
39487: PUSH
39488: LD_VAR 0 9
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PPUSH
39497: CALL_OW 2
39501: ST_TO_ADDR
39502: GO 39584
// for j := 1 to result do
39504: LD_ADDR_VAR 0 8
39508: PUSH
39509: DOUBLE
39510: LD_INT 1
39512: DEC
39513: ST_TO_ADDR
39514: LD_VAR 0 6
39518: PUSH
39519: FOR_TO
39520: IFFALSE 39582
// begin if tmp < result [ j ] [ 2 ] then
39522: LD_VAR 0 9
39526: PUSH
39527: LD_VAR 0 6
39531: PUSH
39532: LD_VAR 0 8
39536: ARRAY
39537: PUSH
39538: LD_INT 2
39540: ARRAY
39541: LESS
39542: IFFALSE 39580
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39544: LD_ADDR_VAR 0 6
39548: PUSH
39549: LD_VAR 0 6
39553: PPUSH
39554: LD_VAR 0 8
39558: PPUSH
39559: LD_VAR 0 7
39563: PUSH
39564: LD_VAR 0 9
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PPUSH
39573: CALL_OW 2
39577: ST_TO_ADDR
// break ;
39578: GO 39582
// end ; end ;
39580: GO 39519
39582: POP
39583: POP
// end ; end ;
39584: GO 39383
39586: POP
39587: POP
// if result and not asc then
39588: LD_VAR 0 6
39592: IFFALSE 39601
39594: PUSH
39595: LD_VAR 0 4
39599: NOT
39600: AND
39601: IFFALSE 39676
// begin tmp := result ;
39603: LD_ADDR_VAR 0 9
39607: PUSH
39608: LD_VAR 0 6
39612: ST_TO_ADDR
// for i = tmp downto 1 do
39613: LD_ADDR_VAR 0 7
39617: PUSH
39618: DOUBLE
39619: LD_VAR 0 9
39623: INC
39624: ST_TO_ADDR
39625: LD_INT 1
39627: PUSH
39628: FOR_DOWNTO
39629: IFFALSE 39674
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39631: LD_ADDR_VAR 0 6
39635: PUSH
39636: LD_VAR 0 6
39640: PPUSH
39641: LD_VAR 0 9
39645: PUSH
39646: LD_VAR 0 7
39650: MINUS
39651: PUSH
39652: LD_INT 1
39654: PLUS
39655: PPUSH
39656: LD_VAR 0 9
39660: PUSH
39661: LD_VAR 0 7
39665: ARRAY
39666: PPUSH
39667: CALL_OW 1
39671: ST_TO_ADDR
39672: GO 39628
39674: POP
39675: POP
// end ; tmp := [ ] ;
39676: LD_ADDR_VAR 0 9
39680: PUSH
39681: EMPTY
39682: ST_TO_ADDR
// if mode then
39683: LD_VAR 0 5
39687: IFFALSE 39756
// begin for i = 1 to result do
39689: LD_ADDR_VAR 0 7
39693: PUSH
39694: DOUBLE
39695: LD_INT 1
39697: DEC
39698: ST_TO_ADDR
39699: LD_VAR 0 6
39703: PUSH
39704: FOR_TO
39705: IFFALSE 39744
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39707: LD_ADDR_VAR 0 9
39711: PUSH
39712: LD_VAR 0 9
39716: PPUSH
39717: LD_VAR 0 7
39721: PPUSH
39722: LD_VAR 0 6
39726: PUSH
39727: LD_VAR 0 7
39731: ARRAY
39732: PUSH
39733: LD_INT 1
39735: ARRAY
39736: PPUSH
39737: CALL_OW 1
39741: ST_TO_ADDR
39742: GO 39704
39744: POP
39745: POP
// result := tmp ;
39746: LD_ADDR_VAR 0 6
39750: PUSH
39751: LD_VAR 0 9
39755: ST_TO_ADDR
// end ; end ;
39756: LD_VAR 0 6
39760: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39761: LD_INT 0
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39769: LD_ADDR_VAR 0 5
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: ST_TO_ADDR
// if not x or not y then
39791: LD_VAR 0 2
39795: NOT
39796: IFTRUE 39805
39798: PUSH
39799: LD_VAR 0 3
39803: NOT
39804: OR
39805: IFFALSE 39809
// exit ;
39807: GO 41465
// if not range then
39809: LD_VAR 0 4
39813: NOT
39814: IFFALSE 39824
// range := 10 ;
39816: LD_ADDR_VAR 0 4
39820: PUSH
39821: LD_INT 10
39823: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39824: LD_ADDR_VAR 0 8
39828: PUSH
39829: LD_INT 81
39831: PUSH
39832: LD_VAR 0 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 92
39843: PUSH
39844: LD_VAR 0 2
39848: PUSH
39849: LD_VAR 0 3
39853: PUSH
39854: LD_VAR 0 4
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 3
39867: PUSH
39868: LD_INT 21
39870: PUSH
39871: LD_INT 3
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: PPUSH
39887: CALL_OW 69
39891: ST_TO_ADDR
// if not tmp then
39892: LD_VAR 0 8
39896: NOT
39897: IFFALSE 39901
// exit ;
39899: GO 41465
// for i in tmp do
39901: LD_ADDR_VAR 0 6
39905: PUSH
39906: LD_VAR 0 8
39910: PUSH
39911: FOR_IN
39912: IFFALSE 41440
// begin points := [ 0 , 0 , 0 ] ;
39914: LD_ADDR_VAR 0 9
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: ST_TO_ADDR
// bpoints := 1 ;
39933: LD_ADDR_VAR 0 10
39937: PUSH
39938: LD_INT 1
39940: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39941: LD_VAR 0 6
39945: PPUSH
39946: CALL_OW 247
39950: PUSH
39951: LD_INT 1
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39959
39957: GO 40541
39959: POP
// begin if GetClass ( i ) = 1 then
39960: LD_VAR 0 6
39964: PPUSH
39965: CALL_OW 257
39969: PUSH
39970: LD_INT 1
39972: EQUAL
39973: IFFALSE 39994
// points := [ 10 , 5 , 3 ] ;
39975: LD_ADDR_VAR 0 9
39979: PUSH
39980: LD_INT 10
39982: PUSH
39983: LD_INT 5
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39994: LD_VAR 0 6
39998: PPUSH
39999: CALL_OW 257
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: LD_INT 3
40009: PUSH
40010: LD_INT 4
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: IN
40018: IFFALSE 40039
// points := [ 3 , 2 , 1 ] ;
40020: LD_ADDR_VAR 0 9
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: LIST
40038: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40039: LD_VAR 0 6
40043: PPUSH
40044: CALL_OW 257
40048: PUSH
40049: LD_INT 5
40051: EQUAL
40052: IFFALSE 40073
// points := [ 130 , 5 , 2 ] ;
40054: LD_ADDR_VAR 0 9
40058: PUSH
40059: LD_INT 130
40061: PUSH
40062: LD_INT 5
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40073: LD_VAR 0 6
40077: PPUSH
40078: CALL_OW 257
40082: PUSH
40083: LD_INT 8
40085: EQUAL
40086: IFFALSE 40107
// points := [ 35 , 35 , 30 ] ;
40088: LD_ADDR_VAR 0 9
40092: PUSH
40093: LD_INT 35
40095: PUSH
40096: LD_INT 35
40098: PUSH
40099: LD_INT 30
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40107: LD_VAR 0 6
40111: PPUSH
40112: CALL_OW 257
40116: PUSH
40117: LD_INT 9
40119: EQUAL
40120: IFFALSE 40141
// points := [ 20 , 55 , 40 ] ;
40122: LD_ADDR_VAR 0 9
40126: PUSH
40127: LD_INT 20
40129: PUSH
40130: LD_INT 55
40132: PUSH
40133: LD_INT 40
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40141: LD_VAR 0 6
40145: PPUSH
40146: CALL_OW 257
40150: PUSH
40151: LD_INT 12
40153: PUSH
40154: LD_INT 16
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: IN
40161: IFFALSE 40182
// points := [ 5 , 3 , 2 ] ;
40163: LD_ADDR_VAR 0 9
40167: PUSH
40168: LD_INT 5
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40182: LD_VAR 0 6
40186: PPUSH
40187: CALL_OW 257
40191: PUSH
40192: LD_INT 17
40194: EQUAL
40195: IFFALSE 40216
// points := [ 100 , 50 , 75 ] ;
40197: LD_ADDR_VAR 0 9
40201: PUSH
40202: LD_INT 100
40204: PUSH
40205: LD_INT 50
40207: PUSH
40208: LD_INT 75
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40216: LD_VAR 0 6
40220: PPUSH
40221: CALL_OW 257
40225: PUSH
40226: LD_INT 15
40228: EQUAL
40229: IFFALSE 40250
// points := [ 10 , 5 , 3 ] ;
40231: LD_ADDR_VAR 0 9
40235: PUSH
40236: LD_INT 10
40238: PUSH
40239: LD_INT 5
40241: PUSH
40242: LD_INT 3
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40250: LD_VAR 0 6
40254: PPUSH
40255: CALL_OW 257
40259: PUSH
40260: LD_INT 14
40262: EQUAL
40263: IFFALSE 40284
// points := [ 10 , 0 , 0 ] ;
40265: LD_ADDR_VAR 0 9
40269: PUSH
40270: LD_INT 10
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40284: LD_VAR 0 6
40288: PPUSH
40289: CALL_OW 257
40293: PUSH
40294: LD_INT 11
40296: EQUAL
40297: IFFALSE 40318
// points := [ 30 , 10 , 5 ] ;
40299: LD_ADDR_VAR 0 9
40303: PUSH
40304: LD_INT 30
40306: PUSH
40307: LD_INT 10
40309: PUSH
40310: LD_INT 5
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40318: LD_VAR 0 1
40322: PPUSH
40323: LD_INT 5
40325: PPUSH
40326: CALL_OW 321
40330: PUSH
40331: LD_INT 2
40333: EQUAL
40334: IFFALSE 40351
// bpoints := bpoints * 1.8 ;
40336: LD_ADDR_VAR 0 10
40340: PUSH
40341: LD_VAR 0 10
40345: PUSH
40346: LD_REAL  1.80000000000000E+0000
40349: MUL
40350: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40351: LD_VAR 0 6
40355: PPUSH
40356: CALL_OW 257
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: LD_INT 2
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: LD_INT 4
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: IN
40379: IFFALSE 40399
40381: PUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: LD_INT 51
40389: PPUSH
40390: CALL_OW 321
40394: PUSH
40395: LD_INT 2
40397: EQUAL
40398: AND
40399: IFFALSE 40416
// bpoints := bpoints * 1.2 ;
40401: LD_ADDR_VAR 0 10
40405: PUSH
40406: LD_VAR 0 10
40410: PUSH
40411: LD_REAL  1.20000000000000E+0000
40414: MUL
40415: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40416: LD_VAR 0 6
40420: PPUSH
40421: CALL_OW 257
40425: PUSH
40426: LD_INT 5
40428: PUSH
40429: LD_INT 7
40431: PUSH
40432: LD_INT 9
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: LIST
40439: IN
40440: IFFALSE 40460
40442: PUSH
40443: LD_VAR 0 1
40447: PPUSH
40448: LD_INT 52
40450: PPUSH
40451: CALL_OW 321
40455: PUSH
40456: LD_INT 2
40458: EQUAL
40459: AND
40460: IFFALSE 40477
// bpoints := bpoints * 1.5 ;
40462: LD_ADDR_VAR 0 10
40466: PUSH
40467: LD_VAR 0 10
40471: PUSH
40472: LD_REAL  1.50000000000000E+0000
40475: MUL
40476: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40477: LD_VAR 0 1
40481: PPUSH
40482: LD_INT 66
40484: PPUSH
40485: CALL_OW 321
40489: PUSH
40490: LD_INT 2
40492: EQUAL
40493: IFFALSE 40510
// bpoints := bpoints * 1.1 ;
40495: LD_ADDR_VAR 0 10
40499: PUSH
40500: LD_VAR 0 10
40504: PUSH
40505: LD_REAL  1.10000000000000E+0000
40508: MUL
40509: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40510: LD_ADDR_VAR 0 10
40514: PUSH
40515: LD_VAR 0 10
40519: PUSH
40520: LD_VAR 0 6
40524: PPUSH
40525: LD_INT 1
40527: PPUSH
40528: CALL_OW 259
40532: PUSH
40533: LD_REAL  1.15000000000000E+0000
40536: MUL
40537: MUL
40538: ST_TO_ADDR
// end ; unit_vehicle :
40539: GO 41369
40541: LD_INT 2
40543: DOUBLE
40544: EQUAL
40545: IFTRUE 40549
40547: GO 41357
40549: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40550: LD_VAR 0 6
40554: PPUSH
40555: CALL_OW 264
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: LD_INT 42
40565: PUSH
40566: LD_INT 24
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: IN
40574: IFFALSE 40595
// points := [ 25 , 5 , 3 ] ;
40576: LD_ADDR_VAR 0 9
40580: PUSH
40581: LD_INT 25
40583: PUSH
40584: LD_INT 5
40586: PUSH
40587: LD_INT 3
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40595: LD_VAR 0 6
40599: PPUSH
40600: CALL_OW 264
40604: PUSH
40605: LD_INT 4
40607: PUSH
40608: LD_INT 43
40610: PUSH
40611: LD_INT 25
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: LIST
40618: IN
40619: IFFALSE 40640
// points := [ 40 , 15 , 5 ] ;
40621: LD_ADDR_VAR 0 9
40625: PUSH
40626: LD_INT 40
40628: PUSH
40629: LD_INT 15
40631: PUSH
40632: LD_INT 5
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40640: LD_VAR 0 6
40644: PPUSH
40645: CALL_OW 264
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: LD_INT 23
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: IN
40660: IFFALSE 40681
// points := [ 7 , 25 , 8 ] ;
40662: LD_ADDR_VAR 0 9
40666: PUSH
40667: LD_INT 7
40669: PUSH
40670: LD_INT 25
40672: PUSH
40673: LD_INT 8
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40681: LD_VAR 0 6
40685: PPUSH
40686: CALL_OW 264
40690: PUSH
40691: LD_INT 5
40693: PUSH
40694: LD_INT 27
40696: PUSH
40697: LD_INT 44
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: LIST
40704: IN
40705: IFFALSE 40726
// points := [ 14 , 50 , 16 ] ;
40707: LD_ADDR_VAR 0 9
40711: PUSH
40712: LD_INT 14
40714: PUSH
40715: LD_INT 50
40717: PUSH
40718: LD_INT 16
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: LIST
40725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40726: LD_VAR 0 6
40730: PPUSH
40731: CALL_OW 264
40735: PUSH
40736: LD_INT 6
40738: PUSH
40739: LD_INT 46
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: IN
40746: IFFALSE 40767
// points := [ 32 , 120 , 70 ] ;
40748: LD_ADDR_VAR 0 9
40752: PUSH
40753: LD_INT 32
40755: PUSH
40756: LD_INT 120
40758: PUSH
40759: LD_INT 70
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: LIST
40766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40767: LD_VAR 0 6
40771: PPUSH
40772: CALL_OW 264
40776: PUSH
40777: LD_INT 7
40779: PUSH
40780: LD_INT 28
40782: PUSH
40783: LD_INT 45
40785: PUSH
40786: LD_INT 92
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: IN
40795: IFFALSE 40816
// points := [ 35 , 20 , 45 ] ;
40797: LD_ADDR_VAR 0 9
40801: PUSH
40802: LD_INT 35
40804: PUSH
40805: LD_INT 20
40807: PUSH
40808: LD_INT 45
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40816: LD_VAR 0 6
40820: PPUSH
40821: CALL_OW 264
40825: PUSH
40826: LD_INT 47
40828: PUSH
40829: EMPTY
40830: LIST
40831: IN
40832: IFFALSE 40853
// points := [ 67 , 45 , 75 ] ;
40834: LD_ADDR_VAR 0 9
40838: PUSH
40839: LD_INT 67
40841: PUSH
40842: LD_INT 45
40844: PUSH
40845: LD_INT 75
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40853: LD_VAR 0 6
40857: PPUSH
40858: CALL_OW 264
40862: PUSH
40863: LD_INT 26
40865: PUSH
40866: EMPTY
40867: LIST
40868: IN
40869: IFFALSE 40890
// points := [ 120 , 30 , 80 ] ;
40871: LD_ADDR_VAR 0 9
40875: PUSH
40876: LD_INT 120
40878: PUSH
40879: LD_INT 30
40881: PUSH
40882: LD_INT 80
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40890: LD_VAR 0 6
40894: PPUSH
40895: CALL_OW 264
40899: PUSH
40900: LD_INT 22
40902: PUSH
40903: EMPTY
40904: LIST
40905: IN
40906: IFFALSE 40927
// points := [ 40 , 1 , 1 ] ;
40908: LD_ADDR_VAR 0 9
40912: PUSH
40913: LD_INT 40
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: LIST
40926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40927: LD_VAR 0 6
40931: PPUSH
40932: CALL_OW 264
40936: PUSH
40937: LD_INT 29
40939: PUSH
40940: EMPTY
40941: LIST
40942: IN
40943: IFFALSE 40964
// points := [ 70 , 200 , 400 ] ;
40945: LD_ADDR_VAR 0 9
40949: PUSH
40950: LD_INT 70
40952: PUSH
40953: LD_INT 200
40955: PUSH
40956: LD_INT 400
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40964: LD_VAR 0 6
40968: PPUSH
40969: CALL_OW 264
40973: PUSH
40974: LD_INT 14
40976: PUSH
40977: LD_INT 53
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: IN
40984: IFFALSE 41005
// points := [ 40 , 10 , 20 ] ;
40986: LD_ADDR_VAR 0 9
40990: PUSH
40991: LD_INT 40
40993: PUSH
40994: LD_INT 10
40996: PUSH
40997: LD_INT 20
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: LIST
41004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41005: LD_VAR 0 6
41009: PPUSH
41010: CALL_OW 264
41014: PUSH
41015: LD_INT 9
41017: PUSH
41018: EMPTY
41019: LIST
41020: IN
41021: IFFALSE 41042
// points := [ 5 , 70 , 20 ] ;
41023: LD_ADDR_VAR 0 9
41027: PUSH
41028: LD_INT 5
41030: PUSH
41031: LD_INT 70
41033: PUSH
41034: LD_INT 20
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41042: LD_VAR 0 6
41046: PPUSH
41047: CALL_OW 264
41051: PUSH
41052: LD_INT 10
41054: PUSH
41055: EMPTY
41056: LIST
41057: IN
41058: IFFALSE 41079
// points := [ 35 , 110 , 70 ] ;
41060: LD_ADDR_VAR 0 9
41064: PUSH
41065: LD_INT 35
41067: PUSH
41068: LD_INT 110
41070: PUSH
41071: LD_INT 70
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41079: LD_VAR 0 6
41083: PPUSH
41084: CALL_OW 265
41088: PUSH
41089: LD_INT 25
41091: EQUAL
41092: IFFALSE 41113
// points := [ 80 , 65 , 100 ] ;
41094: LD_ADDR_VAR 0 9
41098: PUSH
41099: LD_INT 80
41101: PUSH
41102: LD_INT 65
41104: PUSH
41105: LD_INT 100
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41113: LD_VAR 0 6
41117: PPUSH
41118: CALL_OW 263
41122: PUSH
41123: LD_INT 1
41125: EQUAL
41126: IFFALSE 41161
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41128: LD_ADDR_VAR 0 10
41132: PUSH
41133: LD_VAR 0 10
41137: PUSH
41138: LD_VAR 0 6
41142: PPUSH
41143: CALL_OW 311
41147: PPUSH
41148: LD_INT 3
41150: PPUSH
41151: CALL_OW 259
41155: PUSH
41156: LD_INT 4
41158: MUL
41159: MUL
41160: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41161: LD_VAR 0 6
41165: PPUSH
41166: CALL_OW 263
41170: PUSH
41171: LD_INT 2
41173: EQUAL
41174: IFFALSE 41225
// begin j := IsControledBy ( i ) ;
41176: LD_ADDR_VAR 0 7
41180: PUSH
41181: LD_VAR 0 6
41185: PPUSH
41186: CALL_OW 312
41190: ST_TO_ADDR
// if j then
41191: LD_VAR 0 7
41195: IFFALSE 41225
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41197: LD_ADDR_VAR 0 10
41201: PUSH
41202: LD_VAR 0 10
41206: PUSH
41207: LD_VAR 0 7
41211: PPUSH
41212: LD_INT 3
41214: PPUSH
41215: CALL_OW 259
41219: PUSH
41220: LD_INT 3
41222: MUL
41223: MUL
41224: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41225: LD_VAR 0 6
41229: PPUSH
41230: CALL_OW 264
41234: PUSH
41235: LD_INT 5
41237: PUSH
41238: LD_INT 6
41240: PUSH
41241: LD_INT 46
41243: PUSH
41244: LD_INT 44
41246: PUSH
41247: LD_INT 47
41249: PUSH
41250: LD_INT 45
41252: PUSH
41253: LD_INT 28
41255: PUSH
41256: LD_INT 7
41258: PUSH
41259: LD_INT 27
41261: PUSH
41262: LD_INT 29
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: IN
41277: IFFALSE 41297
41279: PUSH
41280: LD_VAR 0 1
41284: PPUSH
41285: LD_INT 52
41287: PPUSH
41288: CALL_OW 321
41292: PUSH
41293: LD_INT 2
41295: EQUAL
41296: AND
41297: IFFALSE 41314
// bpoints := bpoints * 1.2 ;
41299: LD_ADDR_VAR 0 10
41303: PUSH
41304: LD_VAR 0 10
41308: PUSH
41309: LD_REAL  1.20000000000000E+0000
41312: MUL
41313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41314: LD_VAR 0 6
41318: PPUSH
41319: CALL_OW 264
41323: PUSH
41324: LD_INT 6
41326: PUSH
41327: LD_INT 46
41329: PUSH
41330: LD_INT 47
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: LIST
41337: IN
41338: IFFALSE 41355
// bpoints := bpoints * 1.2 ;
41340: LD_ADDR_VAR 0 10
41344: PUSH
41345: LD_VAR 0 10
41349: PUSH
41350: LD_REAL  1.20000000000000E+0000
41353: MUL
41354: ST_TO_ADDR
// end ; unit_building :
41355: GO 41369
41357: LD_INT 3
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41368
41365: POP
// ; end ;
41366: GO 41369
41368: POP
// for j = 1 to 3 do
41369: LD_ADDR_VAR 0 7
41373: PUSH
41374: DOUBLE
41375: LD_INT 1
41377: DEC
41378: ST_TO_ADDR
41379: LD_INT 3
41381: PUSH
41382: FOR_TO
41383: IFFALSE 41436
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41385: LD_ADDR_VAR 0 5
41389: PUSH
41390: LD_VAR 0 5
41394: PPUSH
41395: LD_VAR 0 7
41399: PPUSH
41400: LD_VAR 0 5
41404: PUSH
41405: LD_VAR 0 7
41409: ARRAY
41410: PUSH
41411: LD_VAR 0 9
41415: PUSH
41416: LD_VAR 0 7
41420: ARRAY
41421: PUSH
41422: LD_VAR 0 10
41426: MUL
41427: PLUS
41428: PPUSH
41429: CALL_OW 1
41433: ST_TO_ADDR
41434: GO 41382
41436: POP
41437: POP
// end ;
41438: GO 39911
41440: POP
41441: POP
// result := Replace ( result , 4 , tmp ) ;
41442: LD_ADDR_VAR 0 5
41446: PUSH
41447: LD_VAR 0 5
41451: PPUSH
41452: LD_INT 4
41454: PPUSH
41455: LD_VAR 0 8
41459: PPUSH
41460: CALL_OW 1
41464: ST_TO_ADDR
// end ;
41465: LD_VAR 0 5
41469: RET
// export function DangerAtRange ( unit , range ) ; begin
41470: LD_INT 0
41472: PPUSH
// if not unit then
41473: LD_VAR 0 1
41477: NOT
41478: IFFALSE 41482
// exit ;
41480: GO 41527
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41482: LD_ADDR_VAR 0 3
41486: PUSH
41487: LD_VAR 0 1
41491: PPUSH
41492: CALL_OW 255
41496: PPUSH
41497: LD_VAR 0 1
41501: PPUSH
41502: CALL_OW 250
41506: PPUSH
41507: LD_VAR 0 1
41511: PPUSH
41512: CALL_OW 251
41516: PPUSH
41517: LD_VAR 0 2
41521: PPUSH
41522: CALL 39761 0 4
41526: ST_TO_ADDR
// end ;
41527: LD_VAR 0 3
41531: RET
// export function DangerInArea ( side , area ) ; begin
41532: LD_INT 0
41534: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_VAR 0 2
41544: PPUSH
41545: LD_INT 81
41547: PUSH
41548: LD_VAR 0 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PPUSH
41557: CALL_OW 70
41561: ST_TO_ADDR
// end ;
41562: LD_VAR 0 3
41566: RET
// export function IsExtension ( b ) ; begin
41567: LD_INT 0
41569: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41570: LD_ADDR_VAR 0 2
41574: PUSH
41575: LD_VAR 0 1
41579: PUSH
41580: LD_INT 23
41582: PUSH
41583: LD_INT 20
41585: PUSH
41586: LD_INT 22
41588: PUSH
41589: LD_INT 17
41591: PUSH
41592: LD_INT 24
41594: PUSH
41595: LD_INT 21
41597: PUSH
41598: LD_INT 19
41600: PUSH
41601: LD_INT 16
41603: PUSH
41604: LD_INT 25
41606: PUSH
41607: LD_INT 18
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: IN
41622: ST_TO_ADDR
// end ;
41623: LD_VAR 0 2
41627: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41628: LD_INT 0
41630: PPUSH
41631: PPUSH
41632: PPUSH
// result := [ ] ;
41633: LD_ADDR_VAR 0 4
41637: PUSH
41638: EMPTY
41639: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_VAR 0 2
41649: PPUSH
41650: LD_INT 21
41652: PUSH
41653: LD_INT 3
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PPUSH
41660: CALL_OW 70
41664: ST_TO_ADDR
// if not tmp then
41665: LD_VAR 0 5
41669: NOT
41670: IFFALSE 41674
// exit ;
41672: GO 41738
// if checkLink then
41674: LD_VAR 0 3
41678: IFFALSE 41728
// begin for i in tmp do
41680: LD_ADDR_VAR 0 6
41684: PUSH
41685: LD_VAR 0 5
41689: PUSH
41690: FOR_IN
41691: IFFALSE 41726
// if GetBase ( i ) <> base then
41693: LD_VAR 0 6
41697: PPUSH
41698: CALL_OW 274
41702: PUSH
41703: LD_VAR 0 1
41707: NONEQUAL
41708: IFFALSE 41724
// ComLinkToBase ( base , i ) ;
41710: LD_VAR 0 1
41714: PPUSH
41715: LD_VAR 0 6
41719: PPUSH
41720: CALL_OW 169
41724: GO 41690
41726: POP
41727: POP
// end ; result := tmp ;
41728: LD_ADDR_VAR 0 4
41732: PUSH
41733: LD_VAR 0 5
41737: ST_TO_ADDR
// end ;
41738: LD_VAR 0 4
41742: RET
// export function ComComplete ( units , b ) ; var i ; begin
41743: LD_INT 0
41745: PPUSH
41746: PPUSH
// if not units then
41747: LD_VAR 0 1
41751: NOT
41752: IFFALSE 41756
// exit ;
41754: GO 41846
// for i in units do
41756: LD_ADDR_VAR 0 4
41760: PUSH
41761: LD_VAR 0 1
41765: PUSH
41766: FOR_IN
41767: IFFALSE 41844
// if BuildingStatus ( b ) = bs_build then
41769: LD_VAR 0 2
41773: PPUSH
41774: CALL_OW 461
41778: PUSH
41779: LD_INT 1
41781: EQUAL
41782: IFFALSE 41842
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41784: LD_VAR 0 4
41788: PPUSH
41789: LD_STRING h
41791: PUSH
41792: LD_VAR 0 2
41796: PPUSH
41797: CALL_OW 250
41801: PUSH
41802: LD_VAR 0 2
41806: PPUSH
41807: CALL_OW 251
41811: PUSH
41812: LD_VAR 0 2
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: PUSH
41835: EMPTY
41836: LIST
41837: PPUSH
41838: CALL_OW 446
41842: GO 41766
41844: POP
41845: POP
// end ;
41846: LD_VAR 0 3
41850: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41851: LD_INT 0
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41859: LD_VAR 0 1
41863: NOT
41864: IFTRUE 41881
41866: PUSH
41867: LD_VAR 0 1
41871: PPUSH
41872: CALL_OW 263
41876: PUSH
41877: LD_INT 2
41879: NONEQUAL
41880: OR
41881: IFFALSE 41885
// exit ;
41883: GO 42201
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41885: LD_ADDR_VAR 0 6
41889: PUSH
41890: LD_INT 22
41892: PUSH
41893: LD_VAR 0 1
41897: PPUSH
41898: CALL_OW 255
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 30
41912: PUSH
41913: LD_INT 36
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 34
41922: PUSH
41923: LD_INT 31
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PPUSH
41939: CALL_OW 69
41943: ST_TO_ADDR
// if not tmp then
41944: LD_VAR 0 6
41948: NOT
41949: IFFALSE 41953
// exit ;
41951: GO 42201
// result := [ ] ;
41953: LD_ADDR_VAR 0 2
41957: PUSH
41958: EMPTY
41959: ST_TO_ADDR
// for i in tmp do
41960: LD_ADDR_VAR 0 3
41964: PUSH
41965: LD_VAR 0 6
41969: PUSH
41970: FOR_IN
41971: IFFALSE 42042
// begin t := UnitsInside ( i ) ;
41973: LD_ADDR_VAR 0 4
41977: PUSH
41978: LD_VAR 0 3
41982: PPUSH
41983: CALL_OW 313
41987: ST_TO_ADDR
// if t then
41988: LD_VAR 0 4
41992: IFFALSE 42040
// for j in t do
41994: LD_ADDR_VAR 0 7
41998: PUSH
41999: LD_VAR 0 4
42003: PUSH
42004: FOR_IN
42005: IFFALSE 42038
// result := Replace ( result , result + 1 , j ) ;
42007: LD_ADDR_VAR 0 2
42011: PUSH
42012: LD_VAR 0 2
42016: PPUSH
42017: LD_VAR 0 2
42021: PUSH
42022: LD_INT 1
42024: PLUS
42025: PPUSH
42026: LD_VAR 0 7
42030: PPUSH
42031: CALL_OW 1
42035: ST_TO_ADDR
42036: GO 42004
42038: POP
42039: POP
// end ;
42040: GO 41970
42042: POP
42043: POP
// if not result then
42044: LD_VAR 0 2
42048: NOT
42049: IFFALSE 42053
// exit ;
42051: GO 42201
// mech := result [ 1 ] ;
42053: LD_ADDR_VAR 0 5
42057: PUSH
42058: LD_VAR 0 2
42062: PUSH
42063: LD_INT 1
42065: ARRAY
42066: ST_TO_ADDR
// if result > 1 then
42067: LD_VAR 0 2
42071: PUSH
42072: LD_INT 1
42074: GREATER
42075: IFFALSE 42187
// begin for i = 2 to result do
42077: LD_ADDR_VAR 0 3
42081: PUSH
42082: DOUBLE
42083: LD_INT 2
42085: DEC
42086: ST_TO_ADDR
42087: LD_VAR 0 2
42091: PUSH
42092: FOR_TO
42093: IFFALSE 42185
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42095: LD_ADDR_VAR 0 4
42099: PUSH
42100: LD_VAR 0 2
42104: PUSH
42105: LD_VAR 0 3
42109: ARRAY
42110: PPUSH
42111: LD_INT 3
42113: PPUSH
42114: CALL_OW 259
42118: PUSH
42119: LD_VAR 0 2
42123: PUSH
42124: LD_VAR 0 3
42128: ARRAY
42129: PPUSH
42130: CALL_OW 432
42134: MINUS
42135: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42136: LD_VAR 0 4
42140: PUSH
42141: LD_VAR 0 5
42145: PPUSH
42146: LD_INT 3
42148: PPUSH
42149: CALL_OW 259
42153: PUSH
42154: LD_VAR 0 5
42158: PPUSH
42159: CALL_OW 432
42163: MINUS
42164: GREATEREQUAL
42165: IFFALSE 42183
// mech := result [ i ] ;
42167: LD_ADDR_VAR 0 5
42171: PUSH
42172: LD_VAR 0 2
42176: PUSH
42177: LD_VAR 0 3
42181: ARRAY
42182: ST_TO_ADDR
// end ;
42183: GO 42092
42185: POP
42186: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42187: LD_VAR 0 1
42191: PPUSH
42192: LD_VAR 0 5
42196: PPUSH
42197: CALL_OW 135
// end ;
42201: LD_VAR 0 2
42205: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42206: LD_INT 0
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
42220: PPUSH
// result := [ ] ;
42221: LD_ADDR_VAR 0 7
42225: PUSH
42226: EMPTY
42227: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42228: LD_VAR 0 1
42232: PPUSH
42233: CALL_OW 266
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: IN
42248: NOT
42249: IFFALSE 42253
// exit ;
42251: GO 43893
// if name then
42253: LD_VAR 0 3
42257: IFFALSE 42273
// SetBName ( base_dep , name ) ;
42259: LD_VAR 0 1
42263: PPUSH
42264: LD_VAR 0 3
42268: PPUSH
42269: CALL_OW 500
// base := GetBase ( base_dep ) ;
42273: LD_ADDR_VAR 0 15
42277: PUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 274
42287: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42288: LD_ADDR_VAR 0 16
42292: PUSH
42293: LD_VAR 0 1
42297: PPUSH
42298: CALL_OW 255
42302: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42303: LD_ADDR_VAR 0 17
42307: PUSH
42308: LD_VAR 0 1
42312: PPUSH
42313: CALL_OW 248
42317: ST_TO_ADDR
// if sources then
42318: LD_VAR 0 5
42322: IFFALSE 42369
// for i = 1 to 3 do
42324: LD_ADDR_VAR 0 8
42328: PUSH
42329: DOUBLE
42330: LD_INT 1
42332: DEC
42333: ST_TO_ADDR
42334: LD_INT 3
42336: PUSH
42337: FOR_TO
42338: IFFALSE 42367
// AddResourceType ( base , i , sources [ i ] ) ;
42340: LD_VAR 0 15
42344: PPUSH
42345: LD_VAR 0 8
42349: PPUSH
42350: LD_VAR 0 5
42354: PUSH
42355: LD_VAR 0 8
42359: ARRAY
42360: PPUSH
42361: CALL_OW 276
42365: GO 42337
42367: POP
42368: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42369: LD_ADDR_VAR 0 18
42373: PUSH
42374: LD_VAR 0 15
42378: PPUSH
42379: LD_VAR 0 2
42383: PPUSH
42384: LD_INT 1
42386: PPUSH
42387: CALL 41628 0 3
42391: ST_TO_ADDR
// InitHc ;
42392: CALL_OW 19
// InitUc ;
42396: CALL_OW 18
// uc_side := side ;
42400: LD_ADDR_OWVAR 20
42404: PUSH
42405: LD_VAR 0 16
42409: ST_TO_ADDR
// uc_nation := nation ;
42410: LD_ADDR_OWVAR 21
42414: PUSH
42415: LD_VAR 0 17
42419: ST_TO_ADDR
// if buildings then
42420: LD_VAR 0 18
42424: IFFALSE 43752
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42426: LD_ADDR_VAR 0 19
42430: PUSH
42431: LD_VAR 0 18
42435: PPUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 30
42441: PUSH
42442: LD_INT 29
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 30
42451: PUSH
42452: LD_INT 30
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: PPUSH
42464: CALL_OW 72
42468: ST_TO_ADDR
// if tmp then
42469: LD_VAR 0 19
42473: IFFALSE 42521
// for i in tmp do
42475: LD_ADDR_VAR 0 8
42479: PUSH
42480: LD_VAR 0 19
42484: PUSH
42485: FOR_IN
42486: IFFALSE 42519
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42488: LD_VAR 0 8
42492: PPUSH
42493: CALL_OW 250
42497: PPUSH
42498: LD_VAR 0 8
42502: PPUSH
42503: CALL_OW 251
42507: PPUSH
42508: LD_VAR 0 16
42512: PPUSH
42513: CALL_OW 441
42517: GO 42485
42519: POP
42520: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42521: LD_VAR 0 18
42525: PPUSH
42526: LD_INT 2
42528: PUSH
42529: LD_INT 30
42531: PUSH
42532: LD_INT 32
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 30
42541: PUSH
42542: LD_INT 33
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: PPUSH
42554: CALL_OW 72
42558: IFFALSE 42646
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42560: LD_ADDR_VAR 0 8
42564: PUSH
42565: LD_VAR 0 18
42569: PPUSH
42570: LD_INT 2
42572: PUSH
42573: LD_INT 30
42575: PUSH
42576: LD_INT 32
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 30
42585: PUSH
42586: LD_INT 33
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: LIST
42597: PPUSH
42598: CALL_OW 72
42602: PUSH
42603: FOR_IN
42604: IFFALSE 42644
// begin if not GetBWeapon ( i ) then
42606: LD_VAR 0 8
42610: PPUSH
42611: CALL_OW 269
42615: NOT
42616: IFFALSE 42642
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42618: LD_VAR 0 8
42622: PPUSH
42623: LD_VAR 0 8
42627: PPUSH
42628: LD_VAR 0 2
42632: PPUSH
42633: CALL 43898 0 2
42637: PPUSH
42638: CALL_OW 431
// end ;
42642: GO 42603
42644: POP
42645: POP
// end ; for i = 1 to personel do
42646: LD_ADDR_VAR 0 8
42650: PUSH
42651: DOUBLE
42652: LD_INT 1
42654: DEC
42655: ST_TO_ADDR
42656: LD_VAR 0 6
42660: PUSH
42661: FOR_TO
42662: IFFALSE 43732
// begin if i > 4 then
42664: LD_VAR 0 8
42668: PUSH
42669: LD_INT 4
42671: GREATER
42672: IFFALSE 42676
// break ;
42674: GO 43732
// case i of 1 :
42676: LD_VAR 0 8
42680: PUSH
42681: LD_INT 1
42683: DOUBLE
42684: EQUAL
42685: IFTRUE 42689
42687: GO 42769
42689: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42690: LD_ADDR_VAR 0 12
42694: PUSH
42695: LD_VAR 0 18
42699: PPUSH
42700: LD_INT 22
42702: PUSH
42703: LD_VAR 0 16
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 58
42714: PUSH
42715: EMPTY
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 30
42723: PUSH
42724: LD_INT 32
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 30
42733: PUSH
42734: LD_INT 4
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 30
42743: PUSH
42744: LD_INT 5
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: PPUSH
42762: CALL_OW 72
42766: ST_TO_ADDR
42767: GO 42991
42769: LD_INT 2
42771: DOUBLE
42772: EQUAL
42773: IFTRUE 42777
42775: GO 42839
42777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42778: LD_ADDR_VAR 0 12
42782: PUSH
42783: LD_VAR 0 18
42787: PPUSH
42788: LD_INT 22
42790: PUSH
42791: LD_VAR 0 16
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 30
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 30
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PPUSH
42832: CALL_OW 72
42836: ST_TO_ADDR
42837: GO 42991
42839: LD_INT 3
42841: DOUBLE
42842: EQUAL
42843: IFTRUE 42847
42845: GO 42909
42847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42848: LD_ADDR_VAR 0 12
42852: PUSH
42853: LD_VAR 0 18
42857: PPUSH
42858: LD_INT 22
42860: PUSH
42861: LD_VAR 0 16
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 30
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 30
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PPUSH
42902: CALL_OW 72
42906: ST_TO_ADDR
42907: GO 42991
42909: LD_INT 4
42911: DOUBLE
42912: EQUAL
42913: IFTRUE 42917
42915: GO 42990
42917: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42918: LD_ADDR_VAR 0 12
42922: PUSH
42923: LD_VAR 0 18
42927: PPUSH
42928: LD_INT 22
42930: PUSH
42931: LD_VAR 0 16
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 30
42945: PUSH
42946: LD_INT 6
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 30
42955: PUSH
42956: LD_INT 7
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 30
42965: PUSH
42966: LD_INT 8
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PPUSH
42983: CALL_OW 72
42987: ST_TO_ADDR
42988: GO 42991
42990: POP
// if i = 1 then
42991: LD_VAR 0 8
42995: PUSH
42996: LD_INT 1
42998: EQUAL
42999: IFFALSE 43110
// begin tmp := [ ] ;
43001: LD_ADDR_VAR 0 19
43005: PUSH
43006: EMPTY
43007: ST_TO_ADDR
// for j in f do
43008: LD_ADDR_VAR 0 9
43012: PUSH
43013: LD_VAR 0 12
43017: PUSH
43018: FOR_IN
43019: IFFALSE 43092
// if GetBType ( j ) = b_bunker then
43021: LD_VAR 0 9
43025: PPUSH
43026: CALL_OW 266
43030: PUSH
43031: LD_INT 32
43033: EQUAL
43034: IFFALSE 43061
// tmp := Insert ( tmp , 1 , j ) else
43036: LD_ADDR_VAR 0 19
43040: PUSH
43041: LD_VAR 0 19
43045: PPUSH
43046: LD_INT 1
43048: PPUSH
43049: LD_VAR 0 9
43053: PPUSH
43054: CALL_OW 2
43058: ST_TO_ADDR
43059: GO 43090
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43061: LD_ADDR_VAR 0 19
43065: PUSH
43066: LD_VAR 0 19
43070: PPUSH
43071: LD_VAR 0 19
43075: PUSH
43076: LD_INT 1
43078: PLUS
43079: PPUSH
43080: LD_VAR 0 9
43084: PPUSH
43085: CALL_OW 2
43089: ST_TO_ADDR
43090: GO 43018
43092: POP
43093: POP
// if tmp then
43094: LD_VAR 0 19
43098: IFFALSE 43110
// f := tmp ;
43100: LD_ADDR_VAR 0 12
43104: PUSH
43105: LD_VAR 0 19
43109: ST_TO_ADDR
// end ; x := personel [ i ] ;
43110: LD_ADDR_VAR 0 13
43114: PUSH
43115: LD_VAR 0 6
43119: PUSH
43120: LD_VAR 0 8
43124: ARRAY
43125: ST_TO_ADDR
// if x = - 1 then
43126: LD_VAR 0 13
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: EQUAL
43135: IFFALSE 43346
// begin for j in f do
43137: LD_ADDR_VAR 0 9
43141: PUSH
43142: LD_VAR 0 12
43146: PUSH
43147: FOR_IN
43148: IFFALSE 43342
// repeat InitHc ;
43150: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43154: LD_VAR 0 9
43158: PPUSH
43159: CALL_OW 266
43163: PUSH
43164: LD_INT 5
43166: EQUAL
43167: IFFALSE 43237
// begin if UnitsInside ( j ) < 3 then
43169: LD_VAR 0 9
43173: PPUSH
43174: CALL_OW 313
43178: PUSH
43179: LD_INT 3
43181: LESS
43182: IFFALSE 43218
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43184: LD_INT 0
43186: PPUSH
43187: LD_INT 5
43189: PUSH
43190: LD_INT 8
43192: PUSH
43193: LD_INT 9
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: PUSH
43201: LD_VAR 0 17
43205: ARRAY
43206: PPUSH
43207: LD_VAR 0 4
43211: PPUSH
43212: CALL_OW 380
43216: GO 43235
// PrepareHuman ( false , i , skill ) ;
43218: LD_INT 0
43220: PPUSH
43221: LD_VAR 0 8
43225: PPUSH
43226: LD_VAR 0 4
43230: PPUSH
43231: CALL_OW 380
// end else
43235: GO 43254
// PrepareHuman ( false , i , skill ) ;
43237: LD_INT 0
43239: PPUSH
43240: LD_VAR 0 8
43244: PPUSH
43245: LD_VAR 0 4
43249: PPUSH
43250: CALL_OW 380
// un := CreateHuman ;
43254: LD_ADDR_VAR 0 14
43258: PUSH
43259: CALL_OW 44
43263: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43264: LD_ADDR_VAR 0 7
43268: PUSH
43269: LD_VAR 0 7
43273: PPUSH
43274: LD_INT 1
43276: PPUSH
43277: LD_VAR 0 14
43281: PPUSH
43282: CALL_OW 2
43286: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43287: LD_VAR 0 14
43291: PPUSH
43292: LD_VAR 0 9
43296: PPUSH
43297: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43301: LD_VAR 0 9
43305: PPUSH
43306: CALL_OW 313
43310: PUSH
43311: LD_INT 6
43313: EQUAL
43314: IFTRUE 43338
43316: PUSH
43317: LD_VAR 0 9
43321: PPUSH
43322: CALL_OW 266
43326: PUSH
43327: LD_INT 32
43329: PUSH
43330: LD_INT 31
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: IN
43337: OR
43338: IFFALSE 43150
43340: GO 43147
43342: POP
43343: POP
// end else
43344: GO 43730
// for j = 1 to x do
43346: LD_ADDR_VAR 0 9
43350: PUSH
43351: DOUBLE
43352: LD_INT 1
43354: DEC
43355: ST_TO_ADDR
43356: LD_VAR 0 13
43360: PUSH
43361: FOR_TO
43362: IFFALSE 43728
// begin InitHc ;
43364: CALL_OW 19
// if not f then
43368: LD_VAR 0 12
43372: NOT
43373: IFFALSE 43462
// begin PrepareHuman ( false , i , skill ) ;
43375: LD_INT 0
43377: PPUSH
43378: LD_VAR 0 8
43382: PPUSH
43383: LD_VAR 0 4
43387: PPUSH
43388: CALL_OW 380
// un := CreateHuman ;
43392: LD_ADDR_VAR 0 14
43396: PUSH
43397: CALL_OW 44
43401: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43402: LD_ADDR_VAR 0 7
43406: PUSH
43407: LD_VAR 0 7
43411: PPUSH
43412: LD_INT 1
43414: PPUSH
43415: LD_VAR 0 14
43419: PPUSH
43420: CALL_OW 2
43424: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43425: LD_VAR 0 14
43429: PPUSH
43430: LD_VAR 0 1
43434: PPUSH
43435: CALL_OW 250
43439: PPUSH
43440: LD_VAR 0 1
43444: PPUSH
43445: CALL_OW 251
43449: PPUSH
43450: LD_INT 10
43452: PPUSH
43453: LD_INT 0
43455: PPUSH
43456: CALL_OW 50
// continue ;
43460: GO 43361
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43462: LD_VAR 0 12
43466: PUSH
43467: LD_INT 1
43469: ARRAY
43470: PPUSH
43471: CALL_OW 313
43475: IFFALSE 43503
43477: PUSH
43478: LD_VAR 0 12
43482: PUSH
43483: LD_INT 1
43485: ARRAY
43486: PPUSH
43487: CALL_OW 266
43491: PUSH
43492: LD_INT 32
43494: PUSH
43495: LD_INT 31
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: IN
43502: AND
43503: IFTRUE 43524
43505: PUSH
43506: LD_VAR 0 12
43510: PUSH
43511: LD_INT 1
43513: ARRAY
43514: PPUSH
43515: CALL_OW 313
43519: PUSH
43520: LD_INT 6
43522: EQUAL
43523: OR
43524: IFFALSE 43544
// f := Delete ( f , 1 ) ;
43526: LD_ADDR_VAR 0 12
43530: PUSH
43531: LD_VAR 0 12
43535: PPUSH
43536: LD_INT 1
43538: PPUSH
43539: CALL_OW 3
43543: ST_TO_ADDR
// if not f then
43544: LD_VAR 0 12
43548: NOT
43549: IFFALSE 43567
// begin x := x + 2 ;
43551: LD_ADDR_VAR 0 13
43555: PUSH
43556: LD_VAR 0 13
43560: PUSH
43561: LD_INT 2
43563: PLUS
43564: ST_TO_ADDR
// continue ;
43565: GO 43361
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43567: LD_VAR 0 12
43571: PUSH
43572: LD_INT 1
43574: ARRAY
43575: PPUSH
43576: CALL_OW 266
43580: PUSH
43581: LD_INT 5
43583: EQUAL
43584: IFFALSE 43658
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43586: LD_VAR 0 12
43590: PUSH
43591: LD_INT 1
43593: ARRAY
43594: PPUSH
43595: CALL_OW 313
43599: PUSH
43600: LD_INT 3
43602: LESS
43603: IFFALSE 43639
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43605: LD_INT 0
43607: PPUSH
43608: LD_INT 5
43610: PUSH
43611: LD_INT 8
43613: PUSH
43614: LD_INT 9
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: LIST
43621: PUSH
43622: LD_VAR 0 17
43626: ARRAY
43627: PPUSH
43628: LD_VAR 0 4
43632: PPUSH
43633: CALL_OW 380
43637: GO 43656
// PrepareHuman ( false , i , skill ) ;
43639: LD_INT 0
43641: PPUSH
43642: LD_VAR 0 8
43646: PPUSH
43647: LD_VAR 0 4
43651: PPUSH
43652: CALL_OW 380
// end else
43656: GO 43675
// PrepareHuman ( false , i , skill ) ;
43658: LD_INT 0
43660: PPUSH
43661: LD_VAR 0 8
43665: PPUSH
43666: LD_VAR 0 4
43670: PPUSH
43671: CALL_OW 380
// un := CreateHuman ;
43675: LD_ADDR_VAR 0 14
43679: PUSH
43680: CALL_OW 44
43684: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43685: LD_ADDR_VAR 0 7
43689: PUSH
43690: LD_VAR 0 7
43694: PPUSH
43695: LD_INT 1
43697: PPUSH
43698: LD_VAR 0 14
43702: PPUSH
43703: CALL_OW 2
43707: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43708: LD_VAR 0 14
43712: PPUSH
43713: LD_VAR 0 12
43717: PUSH
43718: LD_INT 1
43720: ARRAY
43721: PPUSH
43722: CALL_OW 52
// end ;
43726: GO 43361
43728: POP
43729: POP
// end ;
43730: GO 42661
43732: POP
43733: POP
// result := result ^ buildings ;
43734: LD_ADDR_VAR 0 7
43738: PUSH
43739: LD_VAR 0 7
43743: PUSH
43744: LD_VAR 0 18
43748: ADD
43749: ST_TO_ADDR
// end else
43750: GO 43893
// begin for i = 1 to personel do
43752: LD_ADDR_VAR 0 8
43756: PUSH
43757: DOUBLE
43758: LD_INT 1
43760: DEC
43761: ST_TO_ADDR
43762: LD_VAR 0 6
43766: PUSH
43767: FOR_TO
43768: IFFALSE 43891
// begin if i > 4 then
43770: LD_VAR 0 8
43774: PUSH
43775: LD_INT 4
43777: GREATER
43778: IFFALSE 43782
// break ;
43780: GO 43891
// x := personel [ i ] ;
43782: LD_ADDR_VAR 0 13
43786: PUSH
43787: LD_VAR 0 6
43791: PUSH
43792: LD_VAR 0 8
43796: ARRAY
43797: ST_TO_ADDR
// if x = - 1 then
43798: LD_VAR 0 13
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: EQUAL
43807: IFFALSE 43811
// continue ;
43809: GO 43767
// PrepareHuman ( false , i , skill ) ;
43811: LD_INT 0
43813: PPUSH
43814: LD_VAR 0 8
43818: PPUSH
43819: LD_VAR 0 4
43823: PPUSH
43824: CALL_OW 380
// un := CreateHuman ;
43828: LD_ADDR_VAR 0 14
43832: PUSH
43833: CALL_OW 44
43837: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43838: LD_VAR 0 14
43842: PPUSH
43843: LD_VAR 0 1
43847: PPUSH
43848: CALL_OW 250
43852: PPUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: CALL_OW 251
43862: PPUSH
43863: LD_INT 10
43865: PPUSH
43866: LD_INT 0
43868: PPUSH
43869: CALL_OW 50
// result := result ^ un ;
43873: LD_ADDR_VAR 0 7
43877: PUSH
43878: LD_VAR 0 7
43882: PUSH
43883: LD_VAR 0 14
43887: ADD
43888: ST_TO_ADDR
// end ;
43889: GO 43767
43891: POP
43892: POP
// end ; end ;
43893: LD_VAR 0 7
43897: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43898: LD_INT 0
43900: PPUSH
43901: PPUSH
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
// result := false ;
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: LD_INT 0
43923: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43924: LD_VAR 0 1
43928: NOT
43929: IFTRUE 43954
43931: PUSH
43932: LD_VAR 0 1
43936: PPUSH
43937: CALL_OW 266
43941: PUSH
43942: LD_INT 32
43944: PUSH
43945: LD_INT 33
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: IN
43952: NOT
43953: OR
43954: IFFALSE 43958
// exit ;
43956: GO 45093
// nat := GetNation ( tower ) ;
43958: LD_ADDR_VAR 0 12
43962: PUSH
43963: LD_VAR 0 1
43967: PPUSH
43968: CALL_OW 248
43972: ST_TO_ADDR
// side := GetSide ( tower ) ;
43973: LD_ADDR_VAR 0 16
43977: PUSH
43978: LD_VAR 0 1
43982: PPUSH
43983: CALL_OW 255
43987: ST_TO_ADDR
// x := GetX ( tower ) ;
43988: LD_ADDR_VAR 0 10
43992: PUSH
43993: LD_VAR 0 1
43997: PPUSH
43998: CALL_OW 250
44002: ST_TO_ADDR
// y := GetY ( tower ) ;
44003: LD_ADDR_VAR 0 11
44007: PUSH
44008: LD_VAR 0 1
44012: PPUSH
44013: CALL_OW 251
44017: ST_TO_ADDR
// if not x or not y then
44018: LD_VAR 0 10
44022: NOT
44023: IFTRUE 44032
44025: PUSH
44026: LD_VAR 0 11
44030: NOT
44031: OR
44032: IFFALSE 44036
// exit ;
44034: GO 45093
// weapon := 0 ;
44036: LD_ADDR_VAR 0 18
44040: PUSH
44041: LD_INT 0
44043: ST_TO_ADDR
// fac_list := [ ] ;
44044: LD_ADDR_VAR 0 17
44048: PUSH
44049: EMPTY
44050: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44051: LD_ADDR_VAR 0 6
44055: PUSH
44056: LD_VAR 0 1
44060: PPUSH
44061: CALL_OW 274
44065: PPUSH
44066: LD_VAR 0 2
44070: PPUSH
44071: LD_INT 0
44073: PPUSH
44074: CALL 41628 0 3
44078: PPUSH
44079: LD_INT 30
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PPUSH
44089: CALL_OW 72
44093: ST_TO_ADDR
// if not factories then
44094: LD_VAR 0 6
44098: NOT
44099: IFFALSE 44103
// exit ;
44101: GO 45093
// for i in factories do
44103: LD_ADDR_VAR 0 8
44107: PUSH
44108: LD_VAR 0 6
44112: PUSH
44113: FOR_IN
44114: IFFALSE 44139
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44116: LD_ADDR_VAR 0 17
44120: PUSH
44121: LD_VAR 0 17
44125: PUSH
44126: LD_VAR 0 8
44130: PPUSH
44131: CALL_OW 478
44135: UNION
44136: ST_TO_ADDR
44137: GO 44113
44139: POP
44140: POP
// if not fac_list then
44141: LD_VAR 0 17
44145: NOT
44146: IFFALSE 44150
// exit ;
44148: GO 45093
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44150: LD_ADDR_VAR 0 5
44154: PUSH
44155: LD_INT 4
44157: PUSH
44158: LD_INT 5
44160: PUSH
44161: LD_INT 9
44163: PUSH
44164: LD_INT 10
44166: PUSH
44167: LD_INT 6
44169: PUSH
44170: LD_INT 7
44172: PUSH
44173: LD_INT 11
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 27
44187: PUSH
44188: LD_INT 28
44190: PUSH
44191: LD_INT 26
44193: PUSH
44194: LD_INT 30
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 43
44205: PUSH
44206: LD_INT 44
44208: PUSH
44209: LD_INT 46
44211: PUSH
44212: LD_INT 45
44214: PUSH
44215: LD_INT 47
44217: PUSH
44218: LD_INT 49
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: PUSH
44234: LD_VAR 0 12
44238: ARRAY
44239: ST_TO_ADDR
// list := list isect fac_list ;
44240: LD_ADDR_VAR 0 5
44244: PUSH
44245: LD_VAR 0 5
44249: PUSH
44250: LD_VAR 0 17
44254: ISECT
44255: ST_TO_ADDR
// if not list then
44256: LD_VAR 0 5
44260: NOT
44261: IFFALSE 44265
// exit ;
44263: GO 45093
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44265: LD_VAR 0 12
44269: PUSH
44270: LD_INT 3
44272: EQUAL
44273: IFFALSE 44285
44275: PUSH
44276: LD_INT 49
44278: PUSH
44279: LD_VAR 0 5
44283: IN
44284: AND
44285: IFFALSE 44305
44287: PUSH
44288: LD_INT 31
44290: PPUSH
44291: LD_VAR 0 16
44295: PPUSH
44296: CALL_OW 321
44300: PUSH
44301: LD_INT 2
44303: EQUAL
44304: AND
44305: IFFALSE 44365
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44307: LD_INT 22
44309: PUSH
44310: LD_VAR 0 16
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 35
44321: PUSH
44322: LD_INT 49
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 91
44331: PUSH
44332: LD_VAR 0 1
44336: PUSH
44337: LD_INT 10
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: PPUSH
44350: CALL_OW 69
44354: NOT
44355: IFFALSE 44365
// weapon := ru_time_lapser ;
44357: LD_ADDR_VAR 0 18
44361: PUSH
44362: LD_INT 49
44364: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44365: LD_VAR 0 12
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: IN
44380: IFFALSE 44404
44382: PUSH
44383: LD_INT 11
44385: PUSH
44386: LD_VAR 0 5
44390: IN
44391: IFTRUE 44403
44393: PUSH
44394: LD_INT 30
44396: PUSH
44397: LD_VAR 0 5
44401: IN
44402: OR
44403: AND
44404: IFFALSE 44424
44406: PUSH
44407: LD_INT 6
44409: PPUSH
44410: LD_VAR 0 16
44414: PPUSH
44415: CALL_OW 321
44419: PUSH
44420: LD_INT 2
44422: EQUAL
44423: AND
44424: IFFALSE 44591
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44426: LD_INT 22
44428: PUSH
44429: LD_VAR 0 16
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 35
44443: PUSH
44444: LD_INT 11
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 35
44453: PUSH
44454: LD_INT 30
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 91
44468: PUSH
44469: LD_VAR 0 1
44473: PUSH
44474: LD_INT 18
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: LIST
44486: PPUSH
44487: CALL_OW 69
44491: NOT
44492: IFFALSE 44568
44494: PUSH
44495: LD_INT 22
44497: PUSH
44498: LD_VAR 0 16
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 30
44512: PUSH
44513: LD_INT 32
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 30
44522: PUSH
44523: LD_INT 33
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 91
44537: PUSH
44538: LD_VAR 0 1
44542: PUSH
44543: LD_INT 12
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: PUSH
44556: EMPTY
44557: LIST
44558: PPUSH
44559: CALL_OW 69
44563: PUSH
44564: LD_INT 2
44566: GREATER
44567: AND
44568: IFFALSE 44591
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44570: LD_ADDR_VAR 0 18
44574: PUSH
44575: LD_INT 11
44577: PUSH
44578: LD_INT 30
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_VAR 0 12
44589: ARRAY
44590: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44591: LD_VAR 0 18
44595: NOT
44596: IFFALSE 44616
44598: PUSH
44599: LD_INT 40
44601: PPUSH
44602: LD_VAR 0 16
44606: PPUSH
44607: CALL_OW 321
44611: PUSH
44612: LD_INT 2
44614: EQUAL
44615: AND
44616: IFFALSE 44652
44618: PUSH
44619: LD_INT 7
44621: PUSH
44622: LD_VAR 0 5
44626: IN
44627: IFTRUE 44639
44629: PUSH
44630: LD_INT 28
44632: PUSH
44633: LD_VAR 0 5
44637: IN
44638: OR
44639: IFTRUE 44651
44641: PUSH
44642: LD_INT 45
44644: PUSH
44645: LD_VAR 0 5
44649: IN
44650: OR
44651: AND
44652: IFFALSE 44906
// begin hex := GetHexInfo ( x , y ) ;
44654: LD_ADDR_VAR 0 4
44658: PUSH
44659: LD_VAR 0 10
44663: PPUSH
44664: LD_VAR 0 11
44668: PPUSH
44669: CALL_OW 546
44673: ST_TO_ADDR
// if hex [ 1 ] then
44674: LD_VAR 0 4
44678: PUSH
44679: LD_INT 1
44681: ARRAY
44682: IFFALSE 44686
// exit ;
44684: GO 45093
// height := hex [ 2 ] ;
44686: LD_ADDR_VAR 0 15
44690: PUSH
44691: LD_VAR 0 4
44695: PUSH
44696: LD_INT 2
44698: ARRAY
44699: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44700: LD_ADDR_VAR 0 14
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: LD_INT 5
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// for i in tmp do
44723: LD_ADDR_VAR 0 8
44727: PUSH
44728: LD_VAR 0 14
44732: PUSH
44733: FOR_IN
44734: IFFALSE 44904
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44736: LD_ADDR_VAR 0 9
44740: PUSH
44741: LD_VAR 0 10
44745: PPUSH
44746: LD_VAR 0 8
44750: PPUSH
44751: LD_INT 5
44753: PPUSH
44754: CALL_OW 272
44758: PUSH
44759: LD_VAR 0 11
44763: PPUSH
44764: LD_VAR 0 8
44768: PPUSH
44769: LD_INT 5
44771: PPUSH
44772: CALL_OW 273
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44781: LD_VAR 0 9
44785: PUSH
44786: LD_INT 1
44788: ARRAY
44789: PPUSH
44790: LD_VAR 0 9
44794: PUSH
44795: LD_INT 2
44797: ARRAY
44798: PPUSH
44799: CALL_OW 488
44803: IFFALSE 44902
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44805: LD_ADDR_VAR 0 4
44809: PUSH
44810: LD_VAR 0 9
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: PPUSH
44819: LD_VAR 0 9
44823: PUSH
44824: LD_INT 2
44826: ARRAY
44827: PPUSH
44828: CALL_OW 546
44832: ST_TO_ADDR
// if hex [ 1 ] then
44833: LD_VAR 0 4
44837: PUSH
44838: LD_INT 1
44840: ARRAY
44841: IFFALSE 44845
// continue ;
44843: GO 44733
// h := hex [ 2 ] ;
44845: LD_ADDR_VAR 0 13
44849: PUSH
44850: LD_VAR 0 4
44854: PUSH
44855: LD_INT 2
44857: ARRAY
44858: ST_TO_ADDR
// if h + 7 < height then
44859: LD_VAR 0 13
44863: PUSH
44864: LD_INT 7
44866: PLUS
44867: PUSH
44868: LD_VAR 0 15
44872: LESS
44873: IFFALSE 44902
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44875: LD_ADDR_VAR 0 18
44879: PUSH
44880: LD_INT 7
44882: PUSH
44883: LD_INT 28
44885: PUSH
44886: LD_INT 45
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: PUSH
44894: LD_VAR 0 12
44898: ARRAY
44899: ST_TO_ADDR
// break ;
44900: GO 44904
// end ; end ; end ;
44902: GO 44733
44904: POP
44905: POP
// end ; if not weapon then
44906: LD_VAR 0 18
44910: NOT
44911: IFFALSE 44971
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44913: LD_ADDR_VAR 0 5
44917: PUSH
44918: LD_VAR 0 5
44922: PUSH
44923: LD_INT 11
44925: PUSH
44926: LD_INT 30
44928: PUSH
44929: LD_INT 49
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: DIFF
44937: ST_TO_ADDR
// if not list then
44938: LD_VAR 0 5
44942: NOT
44943: IFFALSE 44947
// exit ;
44945: GO 45093
// weapon := list [ rand ( 1 , list ) ] ;
44947: LD_ADDR_VAR 0 18
44951: PUSH
44952: LD_VAR 0 5
44956: PUSH
44957: LD_INT 1
44959: PPUSH
44960: LD_VAR 0 5
44964: PPUSH
44965: CALL_OW 12
44969: ARRAY
44970: ST_TO_ADDR
// end ; if weapon then
44971: LD_VAR 0 18
44975: IFFALSE 45093
// begin tmp := CostOfWeapon ( weapon ) ;
44977: LD_ADDR_VAR 0 14
44981: PUSH
44982: LD_VAR 0 18
44986: PPUSH
44987: CALL_OW 451
44991: ST_TO_ADDR
// j := GetBase ( tower ) ;
44992: LD_ADDR_VAR 0 9
44996: PUSH
44997: LD_VAR 0 1
45001: PPUSH
45002: CALL_OW 274
45006: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45007: LD_VAR 0 9
45011: PPUSH
45012: LD_INT 1
45014: PPUSH
45015: CALL_OW 275
45019: PUSH
45020: LD_VAR 0 14
45024: PUSH
45025: LD_INT 1
45027: ARRAY
45028: GREATEREQUAL
45029: IFFALSE 45055
45031: PUSH
45032: LD_VAR 0 9
45036: PPUSH
45037: LD_INT 2
45039: PPUSH
45040: CALL_OW 275
45044: PUSH
45045: LD_VAR 0 14
45049: PUSH
45050: LD_INT 2
45052: ARRAY
45053: GREATEREQUAL
45054: AND
45055: IFFALSE 45081
45057: PUSH
45058: LD_VAR 0 9
45062: PPUSH
45063: LD_INT 3
45065: PPUSH
45066: CALL_OW 275
45070: PUSH
45071: LD_VAR 0 14
45075: PUSH
45076: LD_INT 3
45078: ARRAY
45079: GREATEREQUAL
45080: AND
45081: IFFALSE 45093
// result := weapon ;
45083: LD_ADDR_VAR 0 3
45087: PUSH
45088: LD_VAR 0 18
45092: ST_TO_ADDR
// end ; end ;
45093: LD_VAR 0 3
45097: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45098: LD_INT 0
45100: PPUSH
45101: PPUSH
// result := true ;
45102: LD_ADDR_VAR 0 3
45106: PUSH
45107: LD_INT 1
45109: ST_TO_ADDR
// if array1 = array2 then
45110: LD_VAR 0 1
45114: PUSH
45115: LD_VAR 0 2
45119: EQUAL
45120: IFFALSE 45180
// begin for i = 1 to array1 do
45122: LD_ADDR_VAR 0 4
45126: PUSH
45127: DOUBLE
45128: LD_INT 1
45130: DEC
45131: ST_TO_ADDR
45132: LD_VAR 0 1
45136: PUSH
45137: FOR_TO
45138: IFFALSE 45176
// if array1 [ i ] <> array2 [ i ] then
45140: LD_VAR 0 1
45144: PUSH
45145: LD_VAR 0 4
45149: ARRAY
45150: PUSH
45151: LD_VAR 0 2
45155: PUSH
45156: LD_VAR 0 4
45160: ARRAY
45161: NONEQUAL
45162: IFFALSE 45174
// begin result := false ;
45164: LD_ADDR_VAR 0 3
45168: PUSH
45169: LD_INT 0
45171: ST_TO_ADDR
// break ;
45172: GO 45176
// end ;
45174: GO 45137
45176: POP
45177: POP
// end else
45178: GO 45188
// result := false ;
45180: LD_ADDR_VAR 0 3
45184: PUSH
45185: LD_INT 0
45187: ST_TO_ADDR
// end ;
45188: LD_VAR 0 3
45192: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45193: LD_INT 0
45195: PPUSH
45196: PPUSH
// if not array1 or not array2 then
45197: LD_VAR 0 1
45201: NOT
45202: IFTRUE 45211
45204: PUSH
45205: LD_VAR 0 2
45209: NOT
45210: OR
45211: IFFALSE 45215
// exit ;
45213: GO 45279
// result := true ;
45215: LD_ADDR_VAR 0 3
45219: PUSH
45220: LD_INT 1
45222: ST_TO_ADDR
// for i = 1 to array1 do
45223: LD_ADDR_VAR 0 4
45227: PUSH
45228: DOUBLE
45229: LD_INT 1
45231: DEC
45232: ST_TO_ADDR
45233: LD_VAR 0 1
45237: PUSH
45238: FOR_TO
45239: IFFALSE 45277
// if array1 [ i ] <> array2 [ i ] then
45241: LD_VAR 0 1
45245: PUSH
45246: LD_VAR 0 4
45250: ARRAY
45251: PUSH
45252: LD_VAR 0 2
45256: PUSH
45257: LD_VAR 0 4
45261: ARRAY
45262: NONEQUAL
45263: IFFALSE 45275
// begin result := false ;
45265: LD_ADDR_VAR 0 3
45269: PUSH
45270: LD_INT 0
45272: ST_TO_ADDR
// break ;
45273: GO 45277
// end ;
45275: GO 45238
45277: POP
45278: POP
// end ;
45279: LD_VAR 0 3
45283: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45284: LD_INT 0
45286: PPUSH
45287: PPUSH
45288: PPUSH
// pom := GetBase ( fac ) ;
45289: LD_ADDR_VAR 0 5
45293: PUSH
45294: LD_VAR 0 1
45298: PPUSH
45299: CALL_OW 274
45303: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45304: LD_ADDR_VAR 0 4
45308: PUSH
45309: LD_VAR 0 2
45313: PUSH
45314: LD_INT 1
45316: ARRAY
45317: PPUSH
45318: LD_VAR 0 2
45322: PUSH
45323: LD_INT 2
45325: ARRAY
45326: PPUSH
45327: LD_VAR 0 2
45331: PUSH
45332: LD_INT 3
45334: ARRAY
45335: PPUSH
45336: LD_VAR 0 2
45340: PUSH
45341: LD_INT 4
45343: ARRAY
45344: PPUSH
45345: CALL_OW 449
45349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45350: LD_ADDR_VAR 0 3
45354: PUSH
45355: LD_VAR 0 5
45359: PPUSH
45360: LD_INT 1
45362: PPUSH
45363: CALL_OW 275
45367: PUSH
45368: LD_VAR 0 4
45372: PUSH
45373: LD_INT 1
45375: ARRAY
45376: GREATEREQUAL
45377: IFFALSE 45403
45379: PUSH
45380: LD_VAR 0 5
45384: PPUSH
45385: LD_INT 2
45387: PPUSH
45388: CALL_OW 275
45392: PUSH
45393: LD_VAR 0 4
45397: PUSH
45398: LD_INT 2
45400: ARRAY
45401: GREATEREQUAL
45402: AND
45403: IFFALSE 45429
45405: PUSH
45406: LD_VAR 0 5
45410: PPUSH
45411: LD_INT 3
45413: PPUSH
45414: CALL_OW 275
45418: PUSH
45419: LD_VAR 0 4
45423: PUSH
45424: LD_INT 3
45426: ARRAY
45427: GREATEREQUAL
45428: AND
45429: ST_TO_ADDR
// end ;
45430: LD_VAR 0 3
45434: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45435: LD_INT 0
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
// pom := GetBase ( building ) ;
45441: LD_ADDR_VAR 0 3
45445: PUSH
45446: LD_VAR 0 1
45450: PPUSH
45451: CALL_OW 274
45455: ST_TO_ADDR
// if not pom then
45456: LD_VAR 0 3
45460: NOT
45461: IFFALSE 45465
// exit ;
45463: GO 45639
// btype := GetBType ( building ) ;
45465: LD_ADDR_VAR 0 5
45469: PUSH
45470: LD_VAR 0 1
45474: PPUSH
45475: CALL_OW 266
45479: ST_TO_ADDR
// if btype = b_armoury then
45480: LD_VAR 0 5
45484: PUSH
45485: LD_INT 4
45487: EQUAL
45488: IFFALSE 45498
// btype := b_barracks ;
45490: LD_ADDR_VAR 0 5
45494: PUSH
45495: LD_INT 5
45497: ST_TO_ADDR
// if btype = b_depot then
45498: LD_VAR 0 5
45502: PUSH
45503: LD_INT 0
45505: EQUAL
45506: IFFALSE 45516
// btype := b_warehouse ;
45508: LD_ADDR_VAR 0 5
45512: PUSH
45513: LD_INT 1
45515: ST_TO_ADDR
// if btype = b_workshop then
45516: LD_VAR 0 5
45520: PUSH
45521: LD_INT 2
45523: EQUAL
45524: IFFALSE 45534
// btype := b_factory ;
45526: LD_ADDR_VAR 0 5
45530: PUSH
45531: LD_INT 3
45533: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45534: LD_ADDR_VAR 0 4
45538: PUSH
45539: LD_VAR 0 5
45543: PPUSH
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 248
45553: PPUSH
45554: CALL_OW 450
45558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45559: LD_ADDR_VAR 0 2
45563: PUSH
45564: LD_VAR 0 3
45568: PPUSH
45569: LD_INT 1
45571: PPUSH
45572: CALL_OW 275
45576: PUSH
45577: LD_VAR 0 4
45581: PUSH
45582: LD_INT 1
45584: ARRAY
45585: GREATEREQUAL
45586: IFFALSE 45612
45588: PUSH
45589: LD_VAR 0 3
45593: PPUSH
45594: LD_INT 2
45596: PPUSH
45597: CALL_OW 275
45601: PUSH
45602: LD_VAR 0 4
45606: PUSH
45607: LD_INT 2
45609: ARRAY
45610: GREATEREQUAL
45611: AND
45612: IFFALSE 45638
45614: PUSH
45615: LD_VAR 0 3
45619: PPUSH
45620: LD_INT 3
45622: PPUSH
45623: CALL_OW 275
45627: PUSH
45628: LD_VAR 0 4
45632: PUSH
45633: LD_INT 3
45635: ARRAY
45636: GREATEREQUAL
45637: AND
45638: ST_TO_ADDR
// end ;
45639: LD_VAR 0 2
45643: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45644: LD_INT 0
45646: PPUSH
45647: PPUSH
45648: PPUSH
// pom := GetBase ( building ) ;
45649: LD_ADDR_VAR 0 4
45653: PUSH
45654: LD_VAR 0 1
45658: PPUSH
45659: CALL_OW 274
45663: ST_TO_ADDR
// if not pom then
45664: LD_VAR 0 4
45668: NOT
45669: IFFALSE 45673
// exit ;
45671: GO 45778
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45673: LD_ADDR_VAR 0 5
45677: PUSH
45678: LD_VAR 0 2
45682: PPUSH
45683: LD_VAR 0 1
45687: PPUSH
45688: CALL_OW 248
45692: PPUSH
45693: CALL_OW 450
45697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45698: LD_ADDR_VAR 0 3
45702: PUSH
45703: LD_VAR 0 4
45707: PPUSH
45708: LD_INT 1
45710: PPUSH
45711: CALL_OW 275
45715: PUSH
45716: LD_VAR 0 5
45720: PUSH
45721: LD_INT 1
45723: ARRAY
45724: GREATEREQUAL
45725: IFFALSE 45751
45727: PUSH
45728: LD_VAR 0 4
45732: PPUSH
45733: LD_INT 2
45735: PPUSH
45736: CALL_OW 275
45740: PUSH
45741: LD_VAR 0 5
45745: PUSH
45746: LD_INT 2
45748: ARRAY
45749: GREATEREQUAL
45750: AND
45751: IFFALSE 45777
45753: PUSH
45754: LD_VAR 0 4
45758: PPUSH
45759: LD_INT 3
45761: PPUSH
45762: CALL_OW 275
45766: PUSH
45767: LD_VAR 0 5
45771: PUSH
45772: LD_INT 3
45774: ARRAY
45775: GREATEREQUAL
45776: AND
45777: ST_TO_ADDR
// end ;
45778: LD_VAR 0 3
45782: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45783: LD_INT 0
45785: PPUSH
45786: PPUSH
45787: PPUSH
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
45792: PPUSH
45793: PPUSH
45794: PPUSH
45795: PPUSH
// result := false ;
45796: LD_ADDR_VAR 0 8
45800: PUSH
45801: LD_INT 0
45803: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45804: LD_VAR 0 5
45808: NOT
45809: IFTRUE 45818
45811: PUSH
45812: LD_VAR 0 1
45816: NOT
45817: OR
45818: IFTRUE 45827
45820: PUSH
45821: LD_VAR 0 2
45825: NOT
45826: OR
45827: IFTRUE 45836
45829: PUSH
45830: LD_VAR 0 3
45834: NOT
45835: OR
45836: IFFALSE 45840
// exit ;
45838: GO 46666
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45840: LD_ADDR_VAR 0 14
45844: PUSH
45845: LD_VAR 0 1
45849: PPUSH
45850: LD_VAR 0 2
45854: PPUSH
45855: LD_VAR 0 3
45859: PPUSH
45860: LD_VAR 0 4
45864: PPUSH
45865: LD_VAR 0 5
45869: PUSH
45870: LD_INT 1
45872: ARRAY
45873: PPUSH
45874: CALL_OW 248
45878: PPUSH
45879: LD_INT 0
45881: PPUSH
45882: CALL 47947 0 6
45886: ST_TO_ADDR
// if not hexes then
45887: LD_VAR 0 14
45891: NOT
45892: IFFALSE 45896
// exit ;
45894: GO 46666
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45896: LD_ADDR_VAR 0 17
45900: PUSH
45901: LD_VAR 0 5
45905: PPUSH
45906: LD_INT 22
45908: PUSH
45909: LD_VAR 0 13
45913: PPUSH
45914: CALL_OW 255
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 30
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 30
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PPUSH
45955: CALL_OW 72
45959: ST_TO_ADDR
// for i = 1 to hexes do
45960: LD_ADDR_VAR 0 9
45964: PUSH
45965: DOUBLE
45966: LD_INT 1
45968: DEC
45969: ST_TO_ADDR
45970: LD_VAR 0 14
45974: PUSH
45975: FOR_TO
45976: IFFALSE 46664
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45978: LD_ADDR_VAR 0 13
45982: PUSH
45983: LD_VAR 0 14
45987: PUSH
45988: LD_VAR 0 9
45992: ARRAY
45993: PUSH
45994: LD_INT 1
45996: ARRAY
45997: PPUSH
45998: LD_VAR 0 14
46002: PUSH
46003: LD_VAR 0 9
46007: ARRAY
46008: PUSH
46009: LD_INT 2
46011: ARRAY
46012: PPUSH
46013: CALL_OW 428
46017: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46018: LD_VAR 0 14
46022: PUSH
46023: LD_VAR 0 9
46027: ARRAY
46028: PUSH
46029: LD_INT 1
46031: ARRAY
46032: PPUSH
46033: LD_VAR 0 14
46037: PUSH
46038: LD_VAR 0 9
46042: ARRAY
46043: PUSH
46044: LD_INT 2
46046: ARRAY
46047: PPUSH
46048: CALL_OW 351
46052: IFTRUE 46091
46054: PUSH
46055: LD_VAR 0 14
46059: PUSH
46060: LD_VAR 0 9
46064: ARRAY
46065: PUSH
46066: LD_INT 1
46068: ARRAY
46069: PPUSH
46070: LD_VAR 0 14
46074: PUSH
46075: LD_VAR 0 9
46079: ARRAY
46080: PUSH
46081: LD_INT 2
46083: ARRAY
46084: PPUSH
46085: CALL_OW 488
46089: NOT
46090: OR
46091: IFTRUE 46108
46093: PUSH
46094: LD_VAR 0 13
46098: PPUSH
46099: CALL_OW 247
46103: PUSH
46104: LD_INT 3
46106: EQUAL
46107: OR
46108: IFFALSE 46114
// exit ;
46110: POP
46111: POP
46112: GO 46666
// if not tmp then
46114: LD_VAR 0 13
46118: NOT
46119: IFFALSE 46123
// continue ;
46121: GO 45975
// result := true ;
46123: LD_ADDR_VAR 0 8
46127: PUSH
46128: LD_INT 1
46130: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46131: LD_VAR 0 6
46135: IFFALSE 46152
46137: PUSH
46138: LD_VAR 0 13
46142: PPUSH
46143: CALL_OW 247
46147: PUSH
46148: LD_INT 2
46150: EQUAL
46151: AND
46152: IFFALSE 46169
46154: PUSH
46155: LD_VAR 0 13
46159: PPUSH
46160: CALL_OW 263
46164: PUSH
46165: LD_INT 1
46167: EQUAL
46168: AND
46169: IFFALSE 46333
// begin if IsDrivenBy ( tmp ) then
46171: LD_VAR 0 13
46175: PPUSH
46176: CALL_OW 311
46180: IFFALSE 46184
// continue ;
46182: GO 45975
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46184: LD_VAR 0 6
46188: PPUSH
46189: LD_INT 3
46191: PUSH
46192: LD_INT 60
46194: PUSH
46195: EMPTY
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: LD_INT 55
46207: PUSH
46208: EMPTY
46209: LIST
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PPUSH
46219: CALL_OW 72
46223: IFFALSE 46331
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46225: LD_ADDR_VAR 0 18
46229: PUSH
46230: LD_VAR 0 6
46234: PPUSH
46235: LD_INT 3
46237: PUSH
46238: LD_INT 60
46240: PUSH
46241: EMPTY
46242: LIST
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 55
46253: PUSH
46254: EMPTY
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PPUSH
46265: CALL_OW 72
46269: PUSH
46270: LD_INT 1
46272: ARRAY
46273: ST_TO_ADDR
// if IsInUnit ( driver ) then
46274: LD_VAR 0 18
46278: PPUSH
46279: CALL_OW 310
46283: IFFALSE 46294
// ComExit ( driver ) ;
46285: LD_VAR 0 18
46289: PPUSH
46290: CALL 71947 0 1
// AddComEnterUnit ( driver , tmp ) ;
46294: LD_VAR 0 18
46298: PPUSH
46299: LD_VAR 0 13
46303: PPUSH
46304: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46308: LD_VAR 0 18
46312: PPUSH
46313: LD_VAR 0 7
46317: PPUSH
46318: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46322: LD_VAR 0 18
46326: PPUSH
46327: CALL_OW 181
// end ; continue ;
46331: GO 45975
// end ; if not cleaners or not tmp in cleaners then
46333: LD_VAR 0 6
46337: NOT
46338: IFTRUE 46353
46340: PUSH
46341: LD_VAR 0 13
46345: PUSH
46346: LD_VAR 0 6
46350: IN
46351: NOT
46352: OR
46353: IFFALSE 46662
// begin if dep then
46355: LD_VAR 0 17
46359: IFFALSE 46495
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46361: LD_ADDR_VAR 0 16
46365: PUSH
46366: LD_VAR 0 17
46370: PUSH
46371: LD_INT 1
46373: ARRAY
46374: PPUSH
46375: CALL_OW 250
46379: PPUSH
46380: LD_VAR 0 17
46384: PUSH
46385: LD_INT 1
46387: ARRAY
46388: PPUSH
46389: CALL_OW 254
46393: PPUSH
46394: LD_INT 5
46396: PPUSH
46397: CALL_OW 272
46401: PUSH
46402: LD_VAR 0 17
46406: PUSH
46407: LD_INT 1
46409: ARRAY
46410: PPUSH
46411: CALL_OW 251
46415: PPUSH
46416: LD_VAR 0 17
46420: PUSH
46421: LD_INT 1
46423: ARRAY
46424: PPUSH
46425: CALL_OW 254
46429: PPUSH
46430: LD_INT 5
46432: PPUSH
46433: CALL_OW 273
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46442: LD_VAR 0 16
46446: PUSH
46447: LD_INT 1
46449: ARRAY
46450: PPUSH
46451: LD_VAR 0 16
46455: PUSH
46456: LD_INT 2
46458: ARRAY
46459: PPUSH
46460: CALL_OW 488
46464: IFFALSE 46495
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46466: LD_VAR 0 13
46470: PPUSH
46471: LD_VAR 0 16
46475: PUSH
46476: LD_INT 1
46478: ARRAY
46479: PPUSH
46480: LD_VAR 0 16
46484: PUSH
46485: LD_INT 2
46487: ARRAY
46488: PPUSH
46489: CALL_OW 111
// continue ;
46493: GO 45975
// end ; end ; r := GetDir ( tmp ) ;
46495: LD_ADDR_VAR 0 15
46499: PUSH
46500: LD_VAR 0 13
46504: PPUSH
46505: CALL_OW 254
46509: ST_TO_ADDR
// if r = 5 then
46510: LD_VAR 0 15
46514: PUSH
46515: LD_INT 5
46517: EQUAL
46518: IFFALSE 46528
// r := 0 ;
46520: LD_ADDR_VAR 0 15
46524: PUSH
46525: LD_INT 0
46527: ST_TO_ADDR
// for j = r to 5 do
46528: LD_ADDR_VAR 0 10
46532: PUSH
46533: DOUBLE
46534: LD_VAR 0 15
46538: DEC
46539: ST_TO_ADDR
46540: LD_INT 5
46542: PUSH
46543: FOR_TO
46544: IFFALSE 46660
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46546: LD_ADDR_VAR 0 11
46550: PUSH
46551: LD_VAR 0 13
46555: PPUSH
46556: CALL_OW 250
46560: PPUSH
46561: LD_VAR 0 10
46565: PPUSH
46566: LD_INT 2
46568: PPUSH
46569: CALL_OW 272
46573: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46574: LD_ADDR_VAR 0 12
46578: PUSH
46579: LD_VAR 0 13
46583: PPUSH
46584: CALL_OW 251
46588: PPUSH
46589: LD_VAR 0 10
46593: PPUSH
46594: LD_INT 2
46596: PPUSH
46597: CALL_OW 273
46601: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46602: LD_VAR 0 11
46606: PPUSH
46607: LD_VAR 0 12
46611: PPUSH
46612: CALL_OW 488
46616: IFFALSE 46635
46618: PUSH
46619: LD_VAR 0 11
46623: PPUSH
46624: LD_VAR 0 12
46628: PPUSH
46629: CALL_OW 428
46633: NOT
46634: AND
46635: IFFALSE 46658
// begin ComMoveXY ( tmp , _x , _y ) ;
46637: LD_VAR 0 13
46641: PPUSH
46642: LD_VAR 0 11
46646: PPUSH
46647: LD_VAR 0 12
46651: PPUSH
46652: CALL_OW 111
// break ;
46656: GO 46660
// end ; end ;
46658: GO 46543
46660: POP
46661: POP
// end ; end ;
46662: GO 45975
46664: POP
46665: POP
// end ;
46666: LD_VAR 0 8
46670: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46671: LD_INT 0
46673: PPUSH
// result := true ;
46674: LD_ADDR_VAR 0 3
46678: PUSH
46679: LD_INT 1
46681: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46682: LD_VAR 0 2
46686: PUSH
46687: LD_INT 24
46689: DOUBLE
46690: EQUAL
46691: IFTRUE 46701
46693: LD_INT 33
46695: DOUBLE
46696: EQUAL
46697: IFTRUE 46701
46699: GO 46726
46701: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46702: LD_ADDR_VAR 0 3
46706: PUSH
46707: LD_INT 32
46709: PPUSH
46710: LD_VAR 0 1
46714: PPUSH
46715: CALL_OW 321
46719: PUSH
46720: LD_INT 2
46722: EQUAL
46723: ST_TO_ADDR
46724: GO 47042
46726: LD_INT 20
46728: DOUBLE
46729: EQUAL
46730: IFTRUE 46734
46732: GO 46759
46734: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46735: LD_ADDR_VAR 0 3
46739: PUSH
46740: LD_INT 6
46742: PPUSH
46743: LD_VAR 0 1
46747: PPUSH
46748: CALL_OW 321
46752: PUSH
46753: LD_INT 2
46755: EQUAL
46756: ST_TO_ADDR
46757: GO 47042
46759: LD_INT 22
46761: DOUBLE
46762: EQUAL
46763: IFTRUE 46773
46765: LD_INT 36
46767: DOUBLE
46768: EQUAL
46769: IFTRUE 46773
46771: GO 46798
46773: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46774: LD_ADDR_VAR 0 3
46778: PUSH
46779: LD_INT 15
46781: PPUSH
46782: LD_VAR 0 1
46786: PPUSH
46787: CALL_OW 321
46791: PUSH
46792: LD_INT 2
46794: EQUAL
46795: ST_TO_ADDR
46796: GO 47042
46798: LD_INT 30
46800: DOUBLE
46801: EQUAL
46802: IFTRUE 46806
46804: GO 46831
46806: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46807: LD_ADDR_VAR 0 3
46811: PUSH
46812: LD_INT 20
46814: PPUSH
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 321
46824: PUSH
46825: LD_INT 2
46827: EQUAL
46828: ST_TO_ADDR
46829: GO 47042
46831: LD_INT 28
46833: DOUBLE
46834: EQUAL
46835: IFTRUE 46845
46837: LD_INT 21
46839: DOUBLE
46840: EQUAL
46841: IFTRUE 46845
46843: GO 46870
46845: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46846: LD_ADDR_VAR 0 3
46850: PUSH
46851: LD_INT 21
46853: PPUSH
46854: LD_VAR 0 1
46858: PPUSH
46859: CALL_OW 321
46863: PUSH
46864: LD_INT 2
46866: EQUAL
46867: ST_TO_ADDR
46868: GO 47042
46870: LD_INT 16
46872: DOUBLE
46873: EQUAL
46874: IFTRUE 46878
46876: GO 46903
46878: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46879: LD_ADDR_VAR 0 3
46883: PUSH
46884: LD_INT 84
46886: PPUSH
46887: LD_VAR 0 1
46891: PPUSH
46892: CALL_OW 321
46896: PUSH
46897: LD_INT 2
46899: EQUAL
46900: ST_TO_ADDR
46901: GO 47042
46903: LD_INT 19
46905: DOUBLE
46906: EQUAL
46907: IFTRUE 46917
46909: LD_INT 23
46911: DOUBLE
46912: EQUAL
46913: IFTRUE 46917
46915: GO 46942
46917: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46918: LD_ADDR_VAR 0 3
46922: PUSH
46923: LD_INT 83
46925: PPUSH
46926: LD_VAR 0 1
46930: PPUSH
46931: CALL_OW 321
46935: PUSH
46936: LD_INT 2
46938: EQUAL
46939: ST_TO_ADDR
46940: GO 47042
46942: LD_INT 17
46944: DOUBLE
46945: EQUAL
46946: IFTRUE 46950
46948: GO 46975
46950: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46951: LD_ADDR_VAR 0 3
46955: PUSH
46956: LD_INT 39
46958: PPUSH
46959: LD_VAR 0 1
46963: PPUSH
46964: CALL_OW 321
46968: PUSH
46969: LD_INT 2
46971: EQUAL
46972: ST_TO_ADDR
46973: GO 47042
46975: LD_INT 18
46977: DOUBLE
46978: EQUAL
46979: IFTRUE 46983
46981: GO 47008
46983: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46984: LD_ADDR_VAR 0 3
46988: PUSH
46989: LD_INT 40
46991: PPUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: CALL_OW 321
47001: PUSH
47002: LD_INT 2
47004: EQUAL
47005: ST_TO_ADDR
47006: GO 47042
47008: LD_INT 27
47010: DOUBLE
47011: EQUAL
47012: IFTRUE 47016
47014: GO 47041
47016: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47017: LD_ADDR_VAR 0 3
47021: PUSH
47022: LD_INT 35
47024: PPUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 321
47034: PUSH
47035: LD_INT 2
47037: EQUAL
47038: ST_TO_ADDR
47039: GO 47042
47041: POP
// end ;
47042: LD_VAR 0 3
47046: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47047: LD_INT 0
47049: PPUSH
47050: PPUSH
47051: PPUSH
47052: PPUSH
47053: PPUSH
47054: PPUSH
47055: PPUSH
47056: PPUSH
47057: PPUSH
47058: PPUSH
47059: PPUSH
// result := false ;
47060: LD_ADDR_VAR 0 6
47064: PUSH
47065: LD_INT 0
47067: ST_TO_ADDR
// if btype = b_depot then
47068: LD_VAR 0 2
47072: PUSH
47073: LD_INT 0
47075: EQUAL
47076: IFFALSE 47088
// begin result := true ;
47078: LD_ADDR_VAR 0 6
47082: PUSH
47083: LD_INT 1
47085: ST_TO_ADDR
// exit ;
47086: GO 47942
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47088: LD_VAR 0 1
47092: NOT
47093: IFTRUE 47118
47095: PUSH
47096: LD_VAR 0 1
47100: PPUSH
47101: CALL_OW 266
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: IN
47116: NOT
47117: OR
47118: IFTRUE 47127
47120: PUSH
47121: LD_VAR 0 2
47125: NOT
47126: OR
47127: IFTRUE 47163
47129: PUSH
47130: LD_VAR 0 5
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: LD_INT 4
47149: PUSH
47150: LD_INT 5
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: IN
47161: NOT
47162: OR
47163: IFTRUE 47182
47165: PUSH
47166: LD_VAR 0 3
47170: PPUSH
47171: LD_VAR 0 4
47175: PPUSH
47176: CALL_OW 488
47180: NOT
47181: OR
47182: IFFALSE 47186
// exit ;
47184: GO 47942
// side := GetSide ( depot ) ;
47186: LD_ADDR_VAR 0 9
47190: PUSH
47191: LD_VAR 0 1
47195: PPUSH
47196: CALL_OW 255
47200: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47201: LD_VAR 0 9
47205: PPUSH
47206: LD_VAR 0 2
47210: PPUSH
47211: CALL 46671 0 2
47215: NOT
47216: IFFALSE 47220
// exit ;
47218: GO 47942
// pom := GetBase ( depot ) ;
47220: LD_ADDR_VAR 0 10
47224: PUSH
47225: LD_VAR 0 1
47229: PPUSH
47230: CALL_OW 274
47234: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47235: LD_ADDR_VAR 0 11
47239: PUSH
47240: LD_VAR 0 2
47244: PPUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: CALL_OW 248
47254: PPUSH
47255: CALL_OW 450
47259: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47260: LD_VAR 0 10
47264: PPUSH
47265: LD_INT 1
47267: PPUSH
47268: CALL_OW 275
47272: PUSH
47273: LD_VAR 0 11
47277: PUSH
47278: LD_INT 1
47280: ARRAY
47281: GREATEREQUAL
47282: IFFALSE 47308
47284: PUSH
47285: LD_VAR 0 10
47289: PPUSH
47290: LD_INT 2
47292: PPUSH
47293: CALL_OW 275
47297: PUSH
47298: LD_VAR 0 11
47302: PUSH
47303: LD_INT 2
47305: ARRAY
47306: GREATEREQUAL
47307: AND
47308: IFFALSE 47334
47310: PUSH
47311: LD_VAR 0 10
47315: PPUSH
47316: LD_INT 3
47318: PPUSH
47319: CALL_OW 275
47323: PUSH
47324: LD_VAR 0 11
47328: PUSH
47329: LD_INT 3
47331: ARRAY
47332: GREATEREQUAL
47333: AND
47334: NOT
47335: IFFALSE 47339
// exit ;
47337: GO 47942
// if GetBType ( depot ) = b_depot then
47339: LD_VAR 0 1
47343: PPUSH
47344: CALL_OW 266
47348: PUSH
47349: LD_INT 0
47351: EQUAL
47352: IFFALSE 47364
// dist := 28 else
47354: LD_ADDR_VAR 0 14
47358: PUSH
47359: LD_INT 28
47361: ST_TO_ADDR
47362: GO 47372
// dist := 36 ;
47364: LD_ADDR_VAR 0 14
47368: PUSH
47369: LD_INT 36
47371: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47372: LD_VAR 0 1
47376: PPUSH
47377: LD_VAR 0 3
47381: PPUSH
47382: LD_VAR 0 4
47386: PPUSH
47387: CALL_OW 297
47391: PUSH
47392: LD_VAR 0 14
47396: GREATER
47397: IFFALSE 47401
// exit ;
47399: GO 47942
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47401: LD_ADDR_VAR 0 12
47405: PUSH
47406: LD_VAR 0 2
47410: PPUSH
47411: LD_VAR 0 3
47415: PPUSH
47416: LD_VAR 0 4
47420: PPUSH
47421: LD_VAR 0 5
47425: PPUSH
47426: LD_VAR 0 1
47430: PPUSH
47431: CALL_OW 248
47435: PPUSH
47436: LD_INT 0
47438: PPUSH
47439: CALL 47947 0 6
47443: ST_TO_ADDR
// if not hexes then
47444: LD_VAR 0 12
47448: NOT
47449: IFFALSE 47453
// exit ;
47451: GO 47942
// hex := GetHexInfo ( x , y ) ;
47453: LD_ADDR_VAR 0 15
47457: PUSH
47458: LD_VAR 0 3
47462: PPUSH
47463: LD_VAR 0 4
47467: PPUSH
47468: CALL_OW 546
47472: ST_TO_ADDR
// if hex [ 1 ] then
47473: LD_VAR 0 15
47477: PUSH
47478: LD_INT 1
47480: ARRAY
47481: IFFALSE 47485
// exit ;
47483: GO 47942
// height := hex [ 2 ] ;
47485: LD_ADDR_VAR 0 13
47489: PUSH
47490: LD_VAR 0 15
47494: PUSH
47495: LD_INT 2
47497: ARRAY
47498: ST_TO_ADDR
// for i = 1 to hexes do
47499: LD_ADDR_VAR 0 7
47503: PUSH
47504: DOUBLE
47505: LD_INT 1
47507: DEC
47508: ST_TO_ADDR
47509: LD_VAR 0 12
47513: PUSH
47514: FOR_TO
47515: IFFALSE 47859
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47517: LD_VAR 0 12
47521: PUSH
47522: LD_VAR 0 7
47526: ARRAY
47527: PUSH
47528: LD_INT 1
47530: ARRAY
47531: PPUSH
47532: LD_VAR 0 12
47536: PUSH
47537: LD_VAR 0 7
47541: ARRAY
47542: PUSH
47543: LD_INT 2
47545: ARRAY
47546: PPUSH
47547: CALL_OW 488
47551: NOT
47552: IFTRUE 47594
47554: PUSH
47555: LD_VAR 0 12
47559: PUSH
47560: LD_VAR 0 7
47564: ARRAY
47565: PUSH
47566: LD_INT 1
47568: ARRAY
47569: PPUSH
47570: LD_VAR 0 12
47574: PUSH
47575: LD_VAR 0 7
47579: ARRAY
47580: PUSH
47581: LD_INT 2
47583: ARRAY
47584: PPUSH
47585: CALL_OW 428
47589: PUSH
47590: LD_INT 0
47592: GREATER
47593: OR
47594: IFTRUE 47632
47596: PUSH
47597: LD_VAR 0 12
47601: PUSH
47602: LD_VAR 0 7
47606: ARRAY
47607: PUSH
47608: LD_INT 1
47610: ARRAY
47611: PPUSH
47612: LD_VAR 0 12
47616: PUSH
47617: LD_VAR 0 7
47621: ARRAY
47622: PUSH
47623: LD_INT 2
47625: ARRAY
47626: PPUSH
47627: CALL_OW 351
47631: OR
47632: IFFALSE 47638
// exit ;
47634: POP
47635: POP
47636: GO 47942
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47638: LD_ADDR_VAR 0 8
47642: PUSH
47643: LD_VAR 0 12
47647: PUSH
47648: LD_VAR 0 7
47652: ARRAY
47653: PUSH
47654: LD_INT 1
47656: ARRAY
47657: PPUSH
47658: LD_VAR 0 12
47662: PUSH
47663: LD_VAR 0 7
47667: ARRAY
47668: PUSH
47669: LD_INT 2
47671: ARRAY
47672: PPUSH
47673: CALL_OW 546
47677: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47678: LD_VAR 0 8
47682: PUSH
47683: LD_INT 1
47685: ARRAY
47686: IFTRUE 47708
47688: PUSH
47689: LD_VAR 0 8
47693: PUSH
47694: LD_INT 2
47696: ARRAY
47697: PUSH
47698: LD_VAR 0 13
47702: PUSH
47703: LD_INT 2
47705: PLUS
47706: GREATER
47707: OR
47708: IFTRUE 47730
47710: PUSH
47711: LD_VAR 0 8
47715: PUSH
47716: LD_INT 2
47718: ARRAY
47719: PUSH
47720: LD_VAR 0 13
47724: PUSH
47725: LD_INT 2
47727: MINUS
47728: LESS
47729: OR
47730: IFTRUE 47798
47732: PUSH
47733: LD_VAR 0 8
47737: PUSH
47738: LD_INT 3
47740: ARRAY
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 8
47747: PUSH
47748: LD_INT 9
47750: PUSH
47751: LD_INT 10
47753: PUSH
47754: LD_INT 11
47756: PUSH
47757: LD_INT 12
47759: PUSH
47760: LD_INT 13
47762: PUSH
47763: LD_INT 16
47765: PUSH
47766: LD_INT 17
47768: PUSH
47769: LD_INT 18
47771: PUSH
47772: LD_INT 19
47774: PUSH
47775: LD_INT 20
47777: PUSH
47778: LD_INT 21
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: IN
47796: NOT
47797: OR
47798: IFTRUE 47811
47800: PUSH
47801: LD_VAR 0 8
47805: PUSH
47806: LD_INT 5
47808: ARRAY
47809: NOT
47810: OR
47811: IFTRUE 47851
47813: PUSH
47814: LD_VAR 0 8
47818: PUSH
47819: LD_INT 6
47821: ARRAY
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 7
47831: PUSH
47832: LD_INT 9
47834: PUSH
47835: LD_INT 10
47837: PUSH
47838: LD_INT 11
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: IN
47849: NOT
47850: OR
47851: IFFALSE 47857
// exit ;
47853: POP
47854: POP
47855: GO 47942
// end ;
47857: GO 47514
47859: POP
47860: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47861: LD_VAR 0 9
47865: PPUSH
47866: LD_VAR 0 3
47870: PPUSH
47871: LD_VAR 0 4
47875: PPUSH
47876: LD_INT 20
47878: PPUSH
47879: CALL 39761 0 4
47883: PUSH
47884: LD_INT 4
47886: ARRAY
47887: IFFALSE 47891
// exit ;
47889: GO 47942
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47891: LD_VAR 0 2
47895: PUSH
47896: LD_INT 29
47898: PUSH
47899: LD_INT 30
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: IN
47906: IFFALSE 47930
47908: PUSH
47909: LD_VAR 0 3
47913: PPUSH
47914: LD_VAR 0 4
47918: PPUSH
47919: LD_VAR 0 9
47923: PPUSH
47924: CALL_OW 440
47928: NOT
47929: AND
47930: IFFALSE 47934
// exit ;
47932: GO 47942
// result := true ;
47934: LD_ADDR_VAR 0 6
47938: PUSH
47939: LD_INT 1
47941: ST_TO_ADDR
// end ;
47942: LD_VAR 0 6
47946: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47947: LD_INT 0
47949: PPUSH
47950: PPUSH
47951: PPUSH
47952: PPUSH
47953: PPUSH
47954: PPUSH
47955: PPUSH
47956: PPUSH
47957: PPUSH
47958: PPUSH
47959: PPUSH
47960: PPUSH
47961: PPUSH
47962: PPUSH
47963: PPUSH
47964: PPUSH
47965: PPUSH
47966: PPUSH
47967: PPUSH
47968: PPUSH
47969: PPUSH
47970: PPUSH
47971: PPUSH
47972: PPUSH
47973: PPUSH
47974: PPUSH
47975: PPUSH
47976: PPUSH
47977: PPUSH
47978: PPUSH
47979: PPUSH
47980: PPUSH
47981: PPUSH
47982: PPUSH
47983: PPUSH
47984: PPUSH
47985: PPUSH
47986: PPUSH
47987: PPUSH
47988: PPUSH
47989: PPUSH
47990: PPUSH
47991: PPUSH
47992: PPUSH
47993: PPUSH
47994: PPUSH
47995: PPUSH
47996: PPUSH
47997: PPUSH
47998: PPUSH
47999: PPUSH
48000: PPUSH
48001: PPUSH
48002: PPUSH
48003: PPUSH
48004: PPUSH
48005: PPUSH
48006: PPUSH
// result = [ ] ;
48007: LD_ADDR_VAR 0 7
48011: PUSH
48012: EMPTY
48013: ST_TO_ADDR
// temp_list = [ ] ;
48014: LD_ADDR_VAR 0 9
48018: PUSH
48019: EMPTY
48020: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48021: LD_VAR 0 4
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: LD_INT 5
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: IN
48052: NOT
48053: IFTRUE 48096
48055: PUSH
48056: LD_VAR 0 1
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: IN
48071: IFFALSE 48095
48073: PUSH
48074: LD_VAR 0 5
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: IN
48093: NOT
48094: AND
48095: OR
48096: IFFALSE 48100
// exit ;
48098: GO 66499
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48100: LD_VAR 0 1
48104: PUSH
48105: LD_INT 6
48107: PUSH
48108: LD_INT 7
48110: PUSH
48111: LD_INT 8
48113: PUSH
48114: LD_INT 13
48116: PUSH
48117: LD_INT 12
48119: PUSH
48120: LD_INT 15
48122: PUSH
48123: LD_INT 11
48125: PUSH
48126: LD_INT 14
48128: PUSH
48129: LD_INT 10
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: IN
48143: IFFALSE 48153
// btype = b_lab ;
48145: LD_ADDR_VAR 0 1
48149: PUSH
48150: LD_INT 6
48152: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48153: LD_VAR 0 6
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: IN
48172: NOT
48173: IFTRUE 48241
48175: PUSH
48176: LD_VAR 0 1
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: LD_INT 6
48195: PUSH
48196: LD_INT 36
48198: PUSH
48199: LD_INT 4
48201: PUSH
48202: LD_INT 5
48204: PUSH
48205: LD_INT 31
48207: PUSH
48208: LD_INT 32
48210: PUSH
48211: LD_INT 33
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: IN
48227: NOT
48228: IFFALSE 48240
48230: PUSH
48231: LD_VAR 0 6
48235: PUSH
48236: LD_INT 1
48238: EQUAL
48239: AND
48240: OR
48241: IFTRUE 48273
48243: PUSH
48244: LD_VAR 0 1
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: IN
48259: NOT
48260: IFFALSE 48272
48262: PUSH
48263: LD_VAR 0 6
48267: PUSH
48268: LD_INT 2
48270: EQUAL
48271: AND
48272: OR
48273: IFFALSE 48283
// mode = 0 ;
48275: LD_ADDR_VAR 0 6
48279: PUSH
48280: LD_INT 0
48282: ST_TO_ADDR
// case mode of 0 :
48283: LD_VAR 0 6
48287: PUSH
48288: LD_INT 0
48290: DOUBLE
48291: EQUAL
48292: IFTRUE 48296
48294: GO 59749
48296: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48297: LD_ADDR_VAR 0 11
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48490: LD_ADDR_VAR 0 12
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 3
48658: NEG
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48686: LD_ADDR_VAR 0 13
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: LD_INT 3
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: NEG
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: NEG
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48885: LD_ADDR_VAR 0 14
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 3
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 3
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49081: LD_ADDR_VAR 0 15
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 3
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 3
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49274: LD_ADDR_VAR 0 16
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 3
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 3
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49467: LD_ADDR_VAR 0 17
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49697: LD_ADDR_VAR 0 18
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49927: LD_ADDR_VAR 0 19
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50157: LD_ADDR_VAR 0 20
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50387: LD_ADDR_VAR 0 21
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50617: LD_ADDR_VAR 0 22
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50847: LD_ADDR_VAR 0 23
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 3
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51127: LD_ADDR_VAR 0 24
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51403: LD_ADDR_VAR 0 25
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51677: LD_ADDR_VAR 0 26
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51953: LD_ADDR_VAR 0 27
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52233: LD_ADDR_VAR 0 28
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52515: LD_ADDR_VAR 0 29
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: LD_INT 3
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 3
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 3
52759: NEG
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52794: LD_ADDR_VAR 0 30
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 3
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: LD_INT 3
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53072: LD_ADDR_VAR 0 31
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 3
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53350: LD_ADDR_VAR 0 32
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 3
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53628: LD_ADDR_VAR 0 33
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53907: LD_ADDR_VAR 0 34
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54187: LD_ADDR_VAR 0 35
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54299: LD_ADDR_VAR 0 36
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54411: LD_ADDR_VAR 0 37
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54523: LD_ADDR_VAR 0 38
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54635: LD_ADDR_VAR 0 39
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54747: LD_ADDR_VAR 0 40
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54859: LD_ADDR_VAR 0 41
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 3
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 3
55168: NEG
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55209: LD_ADDR_VAR 0 42
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 3
55506: NEG
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: LD_INT 3
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55559: LD_ADDR_VAR 0 43
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 3
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55907: LD_ADDR_VAR 0 44
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 3
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: LD_INT 3
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56257: LD_ADDR_VAR 0 45
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: LD_INT 3
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 3
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: NEG
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56607: LD_ADDR_VAR 0 46
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 3
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 3
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56955: LD_ADDR_VAR 0 47
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: NEG
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57106: LD_ADDR_VAR 0 48
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57253: LD_ADDR_VAR 0 49
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57397: LD_ADDR_VAR 0 50
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57541: LD_ADDR_VAR 0 51
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57688: LD_ADDR_VAR 0 52
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57839: LD_ADDR_VAR 0 53
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 2
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58069: LD_ADDR_VAR 0 54
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58299: LD_ADDR_VAR 0 55
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58529: LD_ADDR_VAR 0 56
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58759: LD_ADDR_VAR 0 57
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58989: LD_ADDR_VAR 0 58
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59219: LD_ADDR_VAR 0 59
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59307: LD_ADDR_VAR 0 60
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59395: LD_ADDR_VAR 0 61
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59483: LD_ADDR_VAR 0 62
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59571: LD_ADDR_VAR 0 63
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59659: LD_ADDR_VAR 0 64
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: ST_TO_ADDR
// end ; 1 :
59747: GO 65644
59749: LD_INT 1
59751: DOUBLE
59752: EQUAL
59753: IFTRUE 59757
59755: GO 62380
59757: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59758: LD_ADDR_VAR 0 11
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: LIST
59801: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59802: LD_ADDR_VAR 0 12
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 3
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59843: LD_ADDR_VAR 0 13
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59883: LD_ADDR_VAR 0 14
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 3
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 3
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59924: LD_ADDR_VAR 0 15
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 3
59942: NEG
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59968: LD_ADDR_VAR 0 16
59972: PUSH
59973: LD_INT 2
59975: NEG
59976: PUSH
59977: LD_INT 3
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 3
59999: NEG
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60014: LD_ADDR_VAR 0 17
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: LD_INT 3
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60058: LD_ADDR_VAR 0 18
60062: PUSH
60063: LD_INT 2
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60099: LD_ADDR_VAR 0 19
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: LIST
60138: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60139: LD_ADDR_VAR 0 20
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 3
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60180: LD_ADDR_VAR 0 21
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: LIST
60223: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60224: LD_ADDR_VAR 0 22
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: LD_INT 3
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60270: LD_ADDR_VAR 0 23
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 4
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: LIST
60313: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60314: LD_ADDR_VAR 0 24
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 4
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60355: LD_ADDR_VAR 0 25
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 4
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: LD_INT 4
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60395: LD_ADDR_VAR 0 26
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 3
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 4
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 3
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60436: LD_ADDR_VAR 0 27
60440: PUSH
60441: LD_INT 3
60443: NEG
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 4
60465: NEG
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: LIST
60479: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60480: LD_ADDR_VAR 0 28
60484: PUSH
60485: LD_INT 3
60487: NEG
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: LD_INT 4
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 4
60511: NEG
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60526: LD_ADDR_VAR 0 29
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 3
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 4
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 4
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: LD_INT 3
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 5
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 5
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 4
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 6
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 6
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 5
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60681: LD_ADDR_VAR 0 30
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 3
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 4
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 4
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 5
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 5
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 5
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 6
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 6
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60824: LD_ADDR_VAR 0 31
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 3
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: LD_INT 3
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 4
60871: PUSH
60872: LD_INT 4
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: LD_INT 4
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 5
60891: PUSH
60892: LD_INT 4
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 5
60901: PUSH
60902: LD_INT 5
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 4
60911: PUSH
60912: LD_INT 5
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 6
60921: PUSH
60922: LD_INT 5
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 6
60931: PUSH
60932: LD_INT 6
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 5
60941: PUSH
60942: LD_INT 6
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60963: LD_ADDR_VAR 0 32
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 3
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: LD_INT 4
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 4
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: LD_INT 3
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 5
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 5
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: LD_INT 6
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: LD_INT 6
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: LD_INT 5
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61106: LD_ADDR_VAR 0 33
61110: PUSH
61111: LD_INT 2
61113: NEG
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 4
61158: NEG
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 4
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 4
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 5
61192: NEG
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 5
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 5
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 6
61226: NEG
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 6
61237: NEG
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61261: LD_ADDR_VAR 0 34
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 3
61304: NEG
61305: PUSH
61306: LD_INT 4
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 4
61316: NEG
61317: PUSH
61318: LD_INT 3
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 4
61328: NEG
61329: PUSH
61330: LD_INT 4
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 4
61340: NEG
61341: PUSH
61342: LD_INT 5
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 5
61352: NEG
61353: PUSH
61354: LD_INT 4
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 5
61364: NEG
61365: PUSH
61366: LD_INT 5
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 5
61376: NEG
61377: PUSH
61378: LD_INT 6
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 6
61388: NEG
61389: PUSH
61390: LD_INT 5
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 6
61400: NEG
61401: PUSH
61402: LD_INT 6
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61424: LD_ADDR_VAR 0 41
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: LD_INT 3
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61468: LD_ADDR_VAR 0 42
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61509: LD_ADDR_VAR 0 43
61513: PUSH
61514: LD_INT 2
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61549: LD_ADDR_VAR 0 44
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: LIST
61589: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61590: LD_ADDR_VAR 0 45
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 3
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: LIST
61633: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61634: LD_ADDR_VAR 0 46
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61680: LD_ADDR_VAR 0 47
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61713: LD_ADDR_VAR 0 48
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61744: LD_ADDR_VAR 0 49
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61773: LD_ADDR_VAR 0 50
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 3
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 3
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61802: LD_ADDR_VAR 0 51
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: NEG
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61833: LD_ADDR_VAR 0 52
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61866: LD_ADDR_VAR 0 53
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 3
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61910: LD_ADDR_VAR 0 54
61914: PUSH
61915: LD_INT 2
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 3
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: LIST
61950: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61951: LD_ADDR_VAR 0 55
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 3
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61991: LD_ADDR_VAR 0 56
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: LD_INT 3
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: LD_INT 2
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62032: LD_ADDR_VAR 0 57
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 3
62050: NEG
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62076: LD_ADDR_VAR 0 58
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 3
62095: NEG
62096: PUSH
62097: LD_INT 2
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 3
62107: NEG
62108: PUSH
62109: LD_INT 3
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: LIST
62121: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62122: LD_ADDR_VAR 0 59
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: LIST
62165: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62166: LD_ADDR_VAR 0 60
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 2
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62207: LD_ADDR_VAR 0 61
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62247: LD_ADDR_VAR 0 62
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 2
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 2
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62288: LD_ADDR_VAR 0 63
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62332: LD_ADDR_VAR 0 64
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: NEG
62364: PUSH
62365: LD_INT 2
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: ST_TO_ADDR
// end ; 2 :
62378: GO 65644
62380: LD_INT 2
62382: DOUBLE
62383: EQUAL
62384: IFTRUE 62388
62386: GO 65643
62388: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62389: LD_ADDR_VAR 0 29
62393: PUSH
62394: LD_INT 4
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 4
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 5
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 5
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 4
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 3
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 5
62479: PUSH
62480: LD_INT 2
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: LD_INT 3
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: LD_INT 2
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 4
62509: PUSH
62510: LD_INT 3
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 4
62519: PUSH
62520: LD_INT 4
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 3
62529: PUSH
62530: LD_INT 4
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: LD_INT 3
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 4
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: LD_INT 4
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 4
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 5
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 5
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 4
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: LD_INT 5
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: LD_INT 3
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 3
62672: NEG
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 3
62683: NEG
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 4
62728: NEG
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 4
62739: NEG
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 4
62751: NEG
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 4
62774: NEG
62775: PUSH
62776: LD_INT 4
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 4
62786: NEG
62787: PUSH
62788: LD_INT 5
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 3
62798: NEG
62799: PUSH
62800: LD_INT 4
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 3
62810: NEG
62811: PUSH
62812: LD_INT 3
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 4
62822: NEG
62823: PUSH
62824: LD_INT 3
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 5
62834: NEG
62835: PUSH
62836: LD_INT 4
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 5
62846: NEG
62847: PUSH
62848: LD_INT 5
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 3
62858: NEG
62859: PUSH
62860: LD_INT 5
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 5
62870: NEG
62871: PUSH
62872: LD_INT 3
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62927: LD_ADDR_VAR 0 30
62931: PUSH
62932: LD_INT 4
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 4
62944: PUSH
62945: LD_INT 3
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 5
62954: PUSH
62955: LD_INT 4
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 5
62964: PUSH
62965: LD_INT 5
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 4
62974: PUSH
62975: LD_INT 5
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 3
62984: PUSH
62985: LD_INT 4
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: LD_INT 3
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 5
63004: PUSH
63005: LD_INT 3
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: LD_INT 5
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 3
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: LD_INT 3
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 4
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: LD_INT 4
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 3
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: LD_INT 4
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 4
63117: NEG
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 4
63128: NEG
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 4
63162: NEG
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 5
63173: NEG
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 5
63184: NEG
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 5
63196: NEG
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: NEG
63209: PUSH
63210: LD_INT 2
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 3
63219: NEG
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 3
63231: NEG
63232: PUSH
63233: LD_INT 4
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 2
63243: NEG
63244: PUSH
63245: LD_INT 3
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: LD_INT 2
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 3
63267: NEG
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 4
63279: NEG
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 4
63291: NEG
63292: PUSH
63293: LD_INT 4
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 2
63303: NEG
63304: PUSH
63305: LD_INT 4
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 4
63315: NEG
63316: PUSH
63317: LD_INT 2
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 4
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 5
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: LD_INT 4
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: LD_INT 3
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 3
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: LD_INT 4
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 5
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: LD_INT 3
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: LD_INT 5
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63474: LD_ADDR_VAR 0 31
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 4
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 3
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 4
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: LD_INT 5
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 5
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: LD_INT 4
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: LD_INT 3
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 2
63553: PUSH
63554: LD_INT 5
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 3
63574: NEG
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 3
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 2
63597: NEG
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 4
63630: NEG
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 4
63641: NEG
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 4
63653: NEG
63654: PUSH
63655: LD_INT 2
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 4
63676: NEG
63677: PUSH
63678: LD_INT 4
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 4
63688: NEG
63689: PUSH
63690: LD_INT 5
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 3
63700: NEG
63701: PUSH
63702: LD_INT 4
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 3
63712: NEG
63713: PUSH
63714: LD_INT 3
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 4
63724: NEG
63725: PUSH
63726: LD_INT 3
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 5
63736: NEG
63737: PUSH
63738: LD_INT 4
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 5
63748: NEG
63749: PUSH
63750: LD_INT 5
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: LD_INT 5
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 5
63772: NEG
63773: PUSH
63774: LD_INT 3
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: LD_INT 3
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: LD_INT 4
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: LD_INT 3
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 4
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: NEG
63875: PUSH
63876: LD_INT 4
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 4
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 4
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 5
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 5
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 4
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 3
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 3
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 3
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 5
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64024: LD_ADDR_VAR 0 32
64028: PUSH
64029: LD_INT 4
64031: NEG
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 4
64042: NEG
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 3
64054: NEG
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 3
64065: NEG
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 4
64076: NEG
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 5
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 5
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 5
64110: NEG
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: NEG
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 3
64133: NEG
64134: PUSH
64135: LD_INT 3
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 3
64145: NEG
64146: PUSH
64147: LD_INT 4
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: LD_INT 3
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: LD_INT 2
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 4
64193: NEG
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 4
64205: NEG
64206: PUSH
64207: LD_INT 4
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 2
64217: NEG
64218: PUSH
64219: LD_INT 4
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 4
64229: NEG
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 4
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: LD_INT 5
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: LD_INT 4
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: LD_INT 3
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: LD_INT 3
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: LD_INT 4
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: LD_INT 5
64312: NEG
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: LD_INT 3
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: LD_INT 5
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 3
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 4
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 4
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 3
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 2
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 4
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 4
64436: PUSH
64437: LD_INT 4
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 4
64446: PUSH
64447: LD_INT 3
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 5
64456: PUSH
64457: LD_INT 4
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 5
64466: PUSH
64467: LD_INT 5
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 4
64476: PUSH
64477: LD_INT 5
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 3
64486: PUSH
64487: LD_INT 4
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 3
64496: PUSH
64497: LD_INT 3
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 5
64506: PUSH
64507: LD_INT 3
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: LD_INT 5
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64571: LD_ADDR_VAR 0 33
64575: PUSH
64576: LD_INT 4
64578: NEG
64579: PUSH
64580: LD_INT 4
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 4
64590: NEG
64591: PUSH
64592: LD_INT 5
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 3
64602: NEG
64603: PUSH
64604: LD_INT 4
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 3
64614: NEG
64615: PUSH
64616: LD_INT 3
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 4
64626: NEG
64627: PUSH
64628: LD_INT 3
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 5
64638: NEG
64639: PUSH
64640: LD_INT 4
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 5
64650: NEG
64651: PUSH
64652: LD_INT 5
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 3
64662: NEG
64663: PUSH
64664: LD_INT 5
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 5
64674: NEG
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 4
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: PUSH
64720: LD_INT 2
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 2
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: NEG
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: LD_INT 4
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: PUSH
64766: LD_INT 2
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: LD_INT 4
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 4
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 4
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 5
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 5
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 4
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 3
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 3
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 5
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 3
64881: PUSH
64882: LD_INT 3
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 3
64891: PUSH
64892: LD_INT 2
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 4
64901: PUSH
64902: LD_INT 3
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 4
64911: PUSH
64912: LD_INT 4
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 3
64921: PUSH
64922: LD_INT 4
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 3
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 2
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 4
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: LD_INT 4
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 4
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: LD_INT 4
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: LD_INT 5
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 5
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: NEG
65022: PUSH
65023: LD_INT 4
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 2
65043: PUSH
65044: LD_INT 5
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65109: LD_ADDR_VAR 0 34
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 4
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 5
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: LD_INT 4
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: LD_INT 3
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 3
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 4
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: NEG
65184: PUSH
65185: LD_INT 5
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: LD_INT 3
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: LD_INT 5
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 4
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 4
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 2
65290: PUSH
65291: LD_INT 2
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 4
65301: PUSH
65302: LD_INT 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 4
65311: PUSH
65312: LD_INT 4
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 4
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 5
65331: PUSH
65332: LD_INT 4
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 5
65341: PUSH
65342: LD_INT 5
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 4
65351: PUSH
65352: LD_INT 5
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 3
65361: PUSH
65362: LD_INT 4
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: LD_INT 3
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 5
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: LD_INT 5
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: LD_INT 2
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: LD_INT 3
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: LD_INT 4
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 4
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: LD_INT 4
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 4
65494: NEG
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 4
65505: NEG
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 3
65517: NEG
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 3
65528: NEG
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 4
65539: NEG
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 5
65550: NEG
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 5
65561: NEG
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 5
65573: NEG
65574: PUSH
65575: LD_INT 2
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: NEG
65586: PUSH
65587: LD_INT 2
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: ST_TO_ADDR
// end ; end ;
65641: GO 65644
65643: POP
// case btype of b_depot , b_warehouse :
65644: LD_VAR 0 1
65648: PUSH
65649: LD_INT 0
65651: DOUBLE
65652: EQUAL
65653: IFTRUE 65663
65655: LD_INT 1
65657: DOUBLE
65658: EQUAL
65659: IFTRUE 65663
65661: GO 65864
65663: POP
// case nation of nation_american :
65664: LD_VAR 0 5
65668: PUSH
65669: LD_INT 1
65671: DOUBLE
65672: EQUAL
65673: IFTRUE 65677
65675: GO 65733
65677: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65678: LD_ADDR_VAR 0 9
65682: PUSH
65683: LD_VAR 0 11
65687: PUSH
65688: LD_VAR 0 12
65692: PUSH
65693: LD_VAR 0 13
65697: PUSH
65698: LD_VAR 0 14
65702: PUSH
65703: LD_VAR 0 15
65707: PUSH
65708: LD_VAR 0 16
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: PUSH
65721: LD_VAR 0 4
65725: PUSH
65726: LD_INT 1
65728: PLUS
65729: ARRAY
65730: ST_TO_ADDR
65731: GO 65862
65733: LD_INT 2
65735: DOUBLE
65736: EQUAL
65737: IFTRUE 65741
65739: GO 65797
65741: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65742: LD_ADDR_VAR 0 9
65746: PUSH
65747: LD_VAR 0 17
65751: PUSH
65752: LD_VAR 0 18
65756: PUSH
65757: LD_VAR 0 19
65761: PUSH
65762: LD_VAR 0 20
65766: PUSH
65767: LD_VAR 0 21
65771: PUSH
65772: LD_VAR 0 22
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: PUSH
65785: LD_VAR 0 4
65789: PUSH
65790: LD_INT 1
65792: PLUS
65793: ARRAY
65794: ST_TO_ADDR
65795: GO 65862
65797: LD_INT 3
65799: DOUBLE
65800: EQUAL
65801: IFTRUE 65805
65803: GO 65861
65805: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65806: LD_ADDR_VAR 0 9
65810: PUSH
65811: LD_VAR 0 23
65815: PUSH
65816: LD_VAR 0 24
65820: PUSH
65821: LD_VAR 0 25
65825: PUSH
65826: LD_VAR 0 26
65830: PUSH
65831: LD_VAR 0 27
65835: PUSH
65836: LD_VAR 0 28
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: PUSH
65849: LD_VAR 0 4
65853: PUSH
65854: LD_INT 1
65856: PLUS
65857: ARRAY
65858: ST_TO_ADDR
65859: GO 65862
65861: POP
65862: GO 66417
65864: LD_INT 2
65866: DOUBLE
65867: EQUAL
65868: IFTRUE 65878
65870: LD_INT 3
65872: DOUBLE
65873: EQUAL
65874: IFTRUE 65878
65876: GO 65934
65878: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65879: LD_ADDR_VAR 0 9
65883: PUSH
65884: LD_VAR 0 29
65888: PUSH
65889: LD_VAR 0 30
65893: PUSH
65894: LD_VAR 0 31
65898: PUSH
65899: LD_VAR 0 32
65903: PUSH
65904: LD_VAR 0 33
65908: PUSH
65909: LD_VAR 0 34
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: PUSH
65922: LD_VAR 0 4
65926: PUSH
65927: LD_INT 1
65929: PLUS
65930: ARRAY
65931: ST_TO_ADDR
65932: GO 66417
65934: LD_INT 16
65936: DOUBLE
65937: EQUAL
65938: IFTRUE 65996
65940: LD_INT 17
65942: DOUBLE
65943: EQUAL
65944: IFTRUE 65996
65946: LD_INT 18
65948: DOUBLE
65949: EQUAL
65950: IFTRUE 65996
65952: LD_INT 19
65954: DOUBLE
65955: EQUAL
65956: IFTRUE 65996
65958: LD_INT 22
65960: DOUBLE
65961: EQUAL
65962: IFTRUE 65996
65964: LD_INT 20
65966: DOUBLE
65967: EQUAL
65968: IFTRUE 65996
65970: LD_INT 21
65972: DOUBLE
65973: EQUAL
65974: IFTRUE 65996
65976: LD_INT 23
65978: DOUBLE
65979: EQUAL
65980: IFTRUE 65996
65982: LD_INT 24
65984: DOUBLE
65985: EQUAL
65986: IFTRUE 65996
65988: LD_INT 25
65990: DOUBLE
65991: EQUAL
65992: IFTRUE 65996
65994: GO 66052
65996: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65997: LD_ADDR_VAR 0 9
66001: PUSH
66002: LD_VAR 0 35
66006: PUSH
66007: LD_VAR 0 36
66011: PUSH
66012: LD_VAR 0 37
66016: PUSH
66017: LD_VAR 0 38
66021: PUSH
66022: LD_VAR 0 39
66026: PUSH
66027: LD_VAR 0 40
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: PUSH
66040: LD_VAR 0 4
66044: PUSH
66045: LD_INT 1
66047: PLUS
66048: ARRAY
66049: ST_TO_ADDR
66050: GO 66417
66052: LD_INT 6
66054: DOUBLE
66055: EQUAL
66056: IFTRUE 66108
66058: LD_INT 7
66060: DOUBLE
66061: EQUAL
66062: IFTRUE 66108
66064: LD_INT 8
66066: DOUBLE
66067: EQUAL
66068: IFTRUE 66108
66070: LD_INT 13
66072: DOUBLE
66073: EQUAL
66074: IFTRUE 66108
66076: LD_INT 12
66078: DOUBLE
66079: EQUAL
66080: IFTRUE 66108
66082: LD_INT 15
66084: DOUBLE
66085: EQUAL
66086: IFTRUE 66108
66088: LD_INT 11
66090: DOUBLE
66091: EQUAL
66092: IFTRUE 66108
66094: LD_INT 14
66096: DOUBLE
66097: EQUAL
66098: IFTRUE 66108
66100: LD_INT 10
66102: DOUBLE
66103: EQUAL
66104: IFTRUE 66108
66106: GO 66164
66108: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66109: LD_ADDR_VAR 0 9
66113: PUSH
66114: LD_VAR 0 41
66118: PUSH
66119: LD_VAR 0 42
66123: PUSH
66124: LD_VAR 0 43
66128: PUSH
66129: LD_VAR 0 44
66133: PUSH
66134: LD_VAR 0 45
66138: PUSH
66139: LD_VAR 0 46
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: PUSH
66152: LD_VAR 0 4
66156: PUSH
66157: LD_INT 1
66159: PLUS
66160: ARRAY
66161: ST_TO_ADDR
66162: GO 66417
66164: LD_INT 36
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66172
66170: GO 66228
66172: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66173: LD_ADDR_VAR 0 9
66177: PUSH
66178: LD_VAR 0 47
66182: PUSH
66183: LD_VAR 0 48
66187: PUSH
66188: LD_VAR 0 49
66192: PUSH
66193: LD_VAR 0 50
66197: PUSH
66198: LD_VAR 0 51
66202: PUSH
66203: LD_VAR 0 52
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: PUSH
66216: LD_VAR 0 4
66220: PUSH
66221: LD_INT 1
66223: PLUS
66224: ARRAY
66225: ST_TO_ADDR
66226: GO 66417
66228: LD_INT 4
66230: DOUBLE
66231: EQUAL
66232: IFTRUE 66254
66234: LD_INT 5
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66254
66240: LD_INT 34
66242: DOUBLE
66243: EQUAL
66244: IFTRUE 66254
66246: LD_INT 37
66248: DOUBLE
66249: EQUAL
66250: IFTRUE 66254
66252: GO 66310
66254: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66255: LD_ADDR_VAR 0 9
66259: PUSH
66260: LD_VAR 0 53
66264: PUSH
66265: LD_VAR 0 54
66269: PUSH
66270: LD_VAR 0 55
66274: PUSH
66275: LD_VAR 0 56
66279: PUSH
66280: LD_VAR 0 57
66284: PUSH
66285: LD_VAR 0 58
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: PUSH
66298: LD_VAR 0 4
66302: PUSH
66303: LD_INT 1
66305: PLUS
66306: ARRAY
66307: ST_TO_ADDR
66308: GO 66417
66310: LD_INT 31
66312: DOUBLE
66313: EQUAL
66314: IFTRUE 66360
66316: LD_INT 32
66318: DOUBLE
66319: EQUAL
66320: IFTRUE 66360
66322: LD_INT 33
66324: DOUBLE
66325: EQUAL
66326: IFTRUE 66360
66328: LD_INT 27
66330: DOUBLE
66331: EQUAL
66332: IFTRUE 66360
66334: LD_INT 26
66336: DOUBLE
66337: EQUAL
66338: IFTRUE 66360
66340: LD_INT 28
66342: DOUBLE
66343: EQUAL
66344: IFTRUE 66360
66346: LD_INT 29
66348: DOUBLE
66349: EQUAL
66350: IFTRUE 66360
66352: LD_INT 30
66354: DOUBLE
66355: EQUAL
66356: IFTRUE 66360
66358: GO 66416
66360: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66361: LD_ADDR_VAR 0 9
66365: PUSH
66366: LD_VAR 0 59
66370: PUSH
66371: LD_VAR 0 60
66375: PUSH
66376: LD_VAR 0 61
66380: PUSH
66381: LD_VAR 0 62
66385: PUSH
66386: LD_VAR 0 63
66390: PUSH
66391: LD_VAR 0 64
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: PUSH
66404: LD_VAR 0 4
66408: PUSH
66409: LD_INT 1
66411: PLUS
66412: ARRAY
66413: ST_TO_ADDR
66414: GO 66417
66416: POP
// temp_list2 = [ ] ;
66417: LD_ADDR_VAR 0 10
66421: PUSH
66422: EMPTY
66423: ST_TO_ADDR
// for i in temp_list do
66424: LD_ADDR_VAR 0 8
66428: PUSH
66429: LD_VAR 0 9
66433: PUSH
66434: FOR_IN
66435: IFFALSE 66487
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66437: LD_ADDR_VAR 0 10
66441: PUSH
66442: LD_VAR 0 10
66446: PUSH
66447: LD_VAR 0 8
66451: PUSH
66452: LD_INT 1
66454: ARRAY
66455: PUSH
66456: LD_VAR 0 2
66460: PLUS
66461: PUSH
66462: LD_VAR 0 8
66466: PUSH
66467: LD_INT 2
66469: ARRAY
66470: PUSH
66471: LD_VAR 0 3
66475: PLUS
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: EMPTY
66482: LIST
66483: ADD
66484: ST_TO_ADDR
66485: GO 66434
66487: POP
66488: POP
// result = temp_list2 ;
66489: LD_ADDR_VAR 0 7
66493: PUSH
66494: LD_VAR 0 10
66498: ST_TO_ADDR
// end ;
66499: LD_VAR 0 7
66503: RET
// export function EnemyInRange ( unit , dist ) ; begin
66504: LD_INT 0
66506: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66507: LD_ADDR_VAR 0 3
66511: PUSH
66512: LD_VAR 0 1
66516: PPUSH
66517: CALL_OW 255
66521: PPUSH
66522: LD_VAR 0 1
66526: PPUSH
66527: CALL_OW 250
66531: PPUSH
66532: LD_VAR 0 1
66536: PPUSH
66537: CALL_OW 251
66541: PPUSH
66542: LD_VAR 0 2
66546: PPUSH
66547: CALL 39761 0 4
66551: PUSH
66552: LD_INT 4
66554: ARRAY
66555: ST_TO_ADDR
// end ;
66556: LD_VAR 0 3
66560: RET
// export function PlayerSeeMe ( unit ) ; begin
66561: LD_INT 0
66563: PPUSH
// result := See ( your_side , unit ) ;
66564: LD_ADDR_VAR 0 2
66568: PUSH
66569: LD_OWVAR 2
66573: PPUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 292
66583: ST_TO_ADDR
// end ;
66584: LD_VAR 0 2
66588: RET
// export function ReverseDir ( unit ) ; begin
66589: LD_INT 0
66591: PPUSH
// if not unit then
66592: LD_VAR 0 1
66596: NOT
66597: IFFALSE 66601
// exit ;
66599: GO 66624
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66601: LD_ADDR_VAR 0 2
66605: PUSH
66606: LD_VAR 0 1
66610: PPUSH
66611: CALL_OW 254
66615: PUSH
66616: LD_INT 3
66618: PLUS
66619: PUSH
66620: LD_INT 6
66622: MOD
66623: ST_TO_ADDR
// end ;
66624: LD_VAR 0 2
66628: RET
// export function ReverseArray ( array ) ; var i ; begin
66629: LD_INT 0
66631: PPUSH
66632: PPUSH
// if not array then
66633: LD_VAR 0 1
66637: NOT
66638: IFFALSE 66642
// exit ;
66640: GO 66697
// result := [ ] ;
66642: LD_ADDR_VAR 0 2
66646: PUSH
66647: EMPTY
66648: ST_TO_ADDR
// for i := array downto 1 do
66649: LD_ADDR_VAR 0 3
66653: PUSH
66654: DOUBLE
66655: LD_VAR 0 1
66659: INC
66660: ST_TO_ADDR
66661: LD_INT 1
66663: PUSH
66664: FOR_DOWNTO
66665: IFFALSE 66695
// result := Join ( result , array [ i ] ) ;
66667: LD_ADDR_VAR 0 2
66671: PUSH
66672: LD_VAR 0 2
66676: PPUSH
66677: LD_VAR 0 1
66681: PUSH
66682: LD_VAR 0 3
66686: ARRAY
66687: PPUSH
66688: CALL 71549 0 2
66692: ST_TO_ADDR
66693: GO 66664
66695: POP
66696: POP
// end ;
66697: LD_VAR 0 2
66701: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66702: LD_INT 0
66704: PPUSH
66705: PPUSH
66706: PPUSH
66707: PPUSH
66708: PPUSH
66709: PPUSH
// if not unit or not hexes then
66710: LD_VAR 0 1
66714: NOT
66715: IFTRUE 66724
66717: PUSH
66718: LD_VAR 0 2
66722: NOT
66723: OR
66724: IFFALSE 66728
// exit ;
66726: GO 66851
// dist := 9999 ;
66728: LD_ADDR_VAR 0 5
66732: PUSH
66733: LD_INT 9999
66735: ST_TO_ADDR
// for i = 1 to hexes do
66736: LD_ADDR_VAR 0 4
66740: PUSH
66741: DOUBLE
66742: LD_INT 1
66744: DEC
66745: ST_TO_ADDR
66746: LD_VAR 0 2
66750: PUSH
66751: FOR_TO
66752: IFFALSE 66839
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66754: LD_ADDR_VAR 0 6
66758: PUSH
66759: LD_VAR 0 1
66763: PPUSH
66764: LD_VAR 0 2
66768: PUSH
66769: LD_VAR 0 4
66773: ARRAY
66774: PUSH
66775: LD_INT 1
66777: ARRAY
66778: PPUSH
66779: LD_VAR 0 2
66783: PUSH
66784: LD_VAR 0 4
66788: ARRAY
66789: PUSH
66790: LD_INT 2
66792: ARRAY
66793: PPUSH
66794: CALL_OW 297
66798: ST_TO_ADDR
// if tdist < dist then
66799: LD_VAR 0 6
66803: PUSH
66804: LD_VAR 0 5
66808: LESS
66809: IFFALSE 66837
// begin hex := hexes [ i ] ;
66811: LD_ADDR_VAR 0 8
66815: PUSH
66816: LD_VAR 0 2
66820: PUSH
66821: LD_VAR 0 4
66825: ARRAY
66826: ST_TO_ADDR
// dist := tdist ;
66827: LD_ADDR_VAR 0 5
66831: PUSH
66832: LD_VAR 0 6
66836: ST_TO_ADDR
// end ; end ;
66837: GO 66751
66839: POP
66840: POP
// result := hex ;
66841: LD_ADDR_VAR 0 3
66845: PUSH
66846: LD_VAR 0 8
66850: ST_TO_ADDR
// end ;
66851: LD_VAR 0 3
66855: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66856: LD_INT 0
66858: PPUSH
66859: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66860: LD_VAR 0 1
66864: NOT
66865: IFTRUE 66904
66867: PUSH
66868: LD_VAR 0 1
66872: PUSH
66873: LD_INT 21
66875: PUSH
66876: LD_INT 2
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 23
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PPUSH
66897: CALL_OW 69
66901: IN
66902: NOT
66903: OR
66904: IFFALSE 66908
// exit ;
66906: GO 66955
// for i = 1 to 3 do
66908: LD_ADDR_VAR 0 3
66912: PUSH
66913: DOUBLE
66914: LD_INT 1
66916: DEC
66917: ST_TO_ADDR
66918: LD_INT 3
66920: PUSH
66921: FOR_TO
66922: IFFALSE 66953
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66924: LD_VAR 0 1
66928: PPUSH
66929: CALL_OW 250
66933: PPUSH
66934: LD_VAR 0 1
66938: PPUSH
66939: CALL_OW 251
66943: PPUSH
66944: LD_INT 1
66946: PPUSH
66947: CALL_OW 453
66951: GO 66921
66953: POP
66954: POP
// end ;
66955: LD_VAR 0 2
66959: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66960: LD_INT 0
66962: PPUSH
66963: PPUSH
66964: PPUSH
66965: PPUSH
66966: PPUSH
66967: PPUSH
// if not unit or not enemy_unit then
66968: LD_VAR 0 1
66972: NOT
66973: IFTRUE 66982
66975: PUSH
66976: LD_VAR 0 2
66980: NOT
66981: OR
66982: IFFALSE 66986
// exit ;
66984: GO 67467
// if GetLives ( i ) < 250 then
66986: LD_VAR 0 4
66990: PPUSH
66991: CALL_OW 256
66995: PUSH
66996: LD_INT 250
66998: LESS
66999: IFFALSE 67012
// begin ComAutodestruct ( i ) ;
67001: LD_VAR 0 4
67005: PPUSH
67006: CALL 66856 0 1
// exit ;
67010: GO 67467
// end ; x := GetX ( enemy_unit ) ;
67012: LD_ADDR_VAR 0 7
67016: PUSH
67017: LD_VAR 0 2
67021: PPUSH
67022: CALL_OW 250
67026: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67027: LD_ADDR_VAR 0 8
67031: PUSH
67032: LD_VAR 0 2
67036: PPUSH
67037: CALL_OW 251
67041: ST_TO_ADDR
// if not x or not y then
67042: LD_VAR 0 7
67046: NOT
67047: IFTRUE 67056
67049: PUSH
67050: LD_VAR 0 8
67054: NOT
67055: OR
67056: IFFALSE 67060
// exit ;
67058: GO 67467
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67060: LD_ADDR_VAR 0 6
67064: PUSH
67065: LD_VAR 0 7
67069: PPUSH
67070: LD_INT 0
67072: PPUSH
67073: LD_INT 4
67075: PPUSH
67076: CALL_OW 272
67080: PUSH
67081: LD_VAR 0 8
67085: PPUSH
67086: LD_INT 0
67088: PPUSH
67089: LD_INT 4
67091: PPUSH
67092: CALL_OW 273
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_VAR 0 7
67105: PPUSH
67106: LD_INT 1
67108: PPUSH
67109: LD_INT 4
67111: PPUSH
67112: CALL_OW 272
67116: PUSH
67117: LD_VAR 0 8
67121: PPUSH
67122: LD_INT 1
67124: PPUSH
67125: LD_INT 4
67127: PPUSH
67128: CALL_OW 273
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_VAR 0 7
67141: PPUSH
67142: LD_INT 2
67144: PPUSH
67145: LD_INT 4
67147: PPUSH
67148: CALL_OW 272
67152: PUSH
67153: LD_VAR 0 8
67157: PPUSH
67158: LD_INT 2
67160: PPUSH
67161: LD_INT 4
67163: PPUSH
67164: CALL_OW 273
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_VAR 0 7
67177: PPUSH
67178: LD_INT 3
67180: PPUSH
67181: LD_INT 4
67183: PPUSH
67184: CALL_OW 272
67188: PUSH
67189: LD_VAR 0 8
67193: PPUSH
67194: LD_INT 3
67196: PPUSH
67197: LD_INT 4
67199: PPUSH
67200: CALL_OW 273
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_VAR 0 7
67213: PPUSH
67214: LD_INT 4
67216: PPUSH
67217: LD_INT 4
67219: PPUSH
67220: CALL_OW 272
67224: PUSH
67225: LD_VAR 0 8
67229: PPUSH
67230: LD_INT 4
67232: PPUSH
67233: LD_INT 4
67235: PPUSH
67236: CALL_OW 273
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_VAR 0 7
67249: PPUSH
67250: LD_INT 5
67252: PPUSH
67253: LD_INT 4
67255: PPUSH
67256: CALL_OW 272
67260: PUSH
67261: LD_VAR 0 8
67265: PPUSH
67266: LD_INT 5
67268: PPUSH
67269: LD_INT 4
67271: PPUSH
67272: CALL_OW 273
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: ST_TO_ADDR
// for i = tmp downto 1 do
67289: LD_ADDR_VAR 0 4
67293: PUSH
67294: DOUBLE
67295: LD_VAR 0 6
67299: INC
67300: ST_TO_ADDR
67301: LD_INT 1
67303: PUSH
67304: FOR_DOWNTO
67305: IFFALSE 67408
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67307: LD_VAR 0 6
67311: PUSH
67312: LD_VAR 0 4
67316: ARRAY
67317: PUSH
67318: LD_INT 1
67320: ARRAY
67321: PPUSH
67322: LD_VAR 0 6
67326: PUSH
67327: LD_VAR 0 4
67331: ARRAY
67332: PUSH
67333: LD_INT 2
67335: ARRAY
67336: PPUSH
67337: CALL_OW 488
67341: NOT
67342: IFTRUE 67384
67344: PUSH
67345: LD_VAR 0 6
67349: PUSH
67350: LD_VAR 0 4
67354: ARRAY
67355: PUSH
67356: LD_INT 1
67358: ARRAY
67359: PPUSH
67360: LD_VAR 0 6
67364: PUSH
67365: LD_VAR 0 4
67369: ARRAY
67370: PUSH
67371: LD_INT 2
67373: ARRAY
67374: PPUSH
67375: CALL_OW 428
67379: PUSH
67380: LD_INT 0
67382: NONEQUAL
67383: OR
67384: IFFALSE 67406
// tmp := Delete ( tmp , i ) ;
67386: LD_ADDR_VAR 0 6
67390: PUSH
67391: LD_VAR 0 6
67395: PPUSH
67396: LD_VAR 0 4
67400: PPUSH
67401: CALL_OW 3
67405: ST_TO_ADDR
67406: GO 67304
67408: POP
67409: POP
// j := GetClosestHex ( unit , tmp ) ;
67410: LD_ADDR_VAR 0 5
67414: PUSH
67415: LD_VAR 0 1
67419: PPUSH
67420: LD_VAR 0 6
67424: PPUSH
67425: CALL 66702 0 2
67429: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67430: LD_VAR 0 1
67434: PPUSH
67435: LD_VAR 0 5
67439: PUSH
67440: LD_INT 1
67442: ARRAY
67443: PPUSH
67444: LD_VAR 0 5
67448: PUSH
67449: LD_INT 2
67451: ARRAY
67452: PPUSH
67453: CALL_OW 111
// result := j ;
67457: LD_ADDR_VAR 0 3
67461: PUSH
67462: LD_VAR 0 5
67466: ST_TO_ADDR
// end ;
67467: LD_VAR 0 3
67471: RET
// export function PrepareApemanSoldier ( ) ; begin
67472: LD_INT 0
67474: PPUSH
// uc_nation := 0 ;
67475: LD_ADDR_OWVAR 21
67479: PUSH
67480: LD_INT 0
67482: ST_TO_ADDR
// hc_sex := sex_male ;
67483: LD_ADDR_OWVAR 27
67487: PUSH
67488: LD_INT 1
67490: ST_TO_ADDR
// hc_name :=  ;
67491: LD_ADDR_OWVAR 26
67495: PUSH
67496: LD_STRING 
67498: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67499: LD_ADDR_OWVAR 28
67503: PUSH
67504: LD_INT 15
67506: ST_TO_ADDR
// hc_gallery :=  ;
67507: LD_ADDR_OWVAR 33
67511: PUSH
67512: LD_STRING 
67514: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67515: LD_ADDR_OWVAR 31
67519: PUSH
67520: LD_INT 0
67522: PPUSH
67523: LD_INT 3
67525: PPUSH
67526: CALL_OW 12
67530: PUSH
67531: LD_INT 0
67533: PPUSH
67534: LD_INT 3
67536: PPUSH
67537: CALL_OW 12
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 0
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67554: LD_ADDR_OWVAR 29
67558: PUSH
67559: LD_INT 10
67561: PUSH
67562: LD_INT 12
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: ST_TO_ADDR
// end ;
67569: LD_VAR 0 1
67573: RET
// export function PrepareApemanEngineer ( ) ; begin
67574: LD_INT 0
67576: PPUSH
// uc_nation := 0 ;
67577: LD_ADDR_OWVAR 21
67581: PUSH
67582: LD_INT 0
67584: ST_TO_ADDR
// hc_sex := sex_male ;
67585: LD_ADDR_OWVAR 27
67589: PUSH
67590: LD_INT 1
67592: ST_TO_ADDR
// hc_name :=  ;
67593: LD_ADDR_OWVAR 26
67597: PUSH
67598: LD_STRING 
67600: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67601: LD_ADDR_OWVAR 28
67605: PUSH
67606: LD_INT 16
67608: ST_TO_ADDR
// hc_gallery :=  ;
67609: LD_ADDR_OWVAR 33
67613: PUSH
67614: LD_STRING 
67616: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67617: LD_ADDR_OWVAR 31
67621: PUSH
67622: LD_INT 0
67624: PPUSH
67625: LD_INT 3
67627: PPUSH
67628: CALL_OW 12
67632: PUSH
67633: LD_INT 0
67635: PPUSH
67636: LD_INT 3
67638: PPUSH
67639: CALL_OW 12
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67656: LD_ADDR_OWVAR 29
67660: PUSH
67661: LD_INT 10
67663: PUSH
67664: LD_INT 12
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: ST_TO_ADDR
// end ;
67671: LD_VAR 0 1
67675: RET
// export function PrepareApeman ( agressivity ) ; begin
67676: LD_INT 0
67678: PPUSH
// uc_side := 0 ;
67679: LD_ADDR_OWVAR 20
67683: PUSH
67684: LD_INT 0
67686: ST_TO_ADDR
// uc_nation := 0 ;
67687: LD_ADDR_OWVAR 21
67691: PUSH
67692: LD_INT 0
67694: ST_TO_ADDR
// hc_sex := sex_male ;
67695: LD_ADDR_OWVAR 27
67699: PUSH
67700: LD_INT 1
67702: ST_TO_ADDR
// hc_class := class_apeman ;
67703: LD_ADDR_OWVAR 28
67707: PUSH
67708: LD_INT 12
67710: ST_TO_ADDR
// hc_gallery :=  ;
67711: LD_ADDR_OWVAR 33
67715: PUSH
67716: LD_STRING 
67718: ST_TO_ADDR
// hc_name :=  ;
67719: LD_ADDR_OWVAR 26
67723: PUSH
67724: LD_STRING 
67726: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67727: LD_ADDR_OWVAR 29
67731: PUSH
67732: LD_INT 10
67734: PUSH
67735: LD_INT 12
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: ST_TO_ADDR
// if agressivity = 0 then
67742: LD_VAR 0 1
67746: PUSH
67747: LD_INT 0
67749: EQUAL
67750: IFFALSE 67762
// hc_agressivity := 0 else
67752: LD_ADDR_OWVAR 35
67756: PUSH
67757: LD_INT 0
67759: ST_TO_ADDR
67760: GO 67783
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67762: LD_ADDR_OWVAR 35
67766: PUSH
67767: LD_VAR 0 1
67771: NEG
67772: PPUSH
67773: LD_VAR 0 1
67777: PPUSH
67778: CALL_OW 12
67782: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67783: LD_ADDR_OWVAR 31
67787: PUSH
67788: LD_INT 0
67790: PPUSH
67791: LD_INT 3
67793: PPUSH
67794: CALL_OW 12
67798: PUSH
67799: LD_INT 0
67801: PPUSH
67802: LD_INT 3
67804: PPUSH
67805: CALL_OW 12
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: ST_TO_ADDR
// end ;
67822: LD_VAR 0 2
67826: RET
// export function PrepareTiger ( agressivity ) ; begin
67827: LD_INT 0
67829: PPUSH
// uc_side := 0 ;
67830: LD_ADDR_OWVAR 20
67834: PUSH
67835: LD_INT 0
67837: ST_TO_ADDR
// uc_nation := 0 ;
67838: LD_ADDR_OWVAR 21
67842: PUSH
67843: LD_INT 0
67845: ST_TO_ADDR
// InitHc ;
67846: CALL_OW 19
// hc_class := class_tiger ;
67850: LD_ADDR_OWVAR 28
67854: PUSH
67855: LD_INT 14
67857: ST_TO_ADDR
// hc_gallery :=  ;
67858: LD_ADDR_OWVAR 33
67862: PUSH
67863: LD_STRING 
67865: ST_TO_ADDR
// hc_name :=  ;
67866: LD_ADDR_OWVAR 26
67870: PUSH
67871: LD_STRING 
67873: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67874: LD_ADDR_OWVAR 35
67878: PUSH
67879: LD_VAR 0 1
67883: NEG
67884: PPUSH
67885: LD_VAR 0 1
67889: PPUSH
67890: CALL_OW 12
67894: ST_TO_ADDR
// end ;
67895: LD_VAR 0 2
67899: RET
// export function PrepareEnchidna ( ) ; begin
67900: LD_INT 0
67902: PPUSH
// uc_side := 0 ;
67903: LD_ADDR_OWVAR 20
67907: PUSH
67908: LD_INT 0
67910: ST_TO_ADDR
// uc_nation := 0 ;
67911: LD_ADDR_OWVAR 21
67915: PUSH
67916: LD_INT 0
67918: ST_TO_ADDR
// InitHc ;
67919: CALL_OW 19
// hc_class := class_baggie ;
67923: LD_ADDR_OWVAR 28
67927: PUSH
67928: LD_INT 13
67930: ST_TO_ADDR
// hc_gallery :=  ;
67931: LD_ADDR_OWVAR 33
67935: PUSH
67936: LD_STRING 
67938: ST_TO_ADDR
// hc_name :=  ;
67939: LD_ADDR_OWVAR 26
67943: PUSH
67944: LD_STRING 
67946: ST_TO_ADDR
// end ;
67947: LD_VAR 0 1
67951: RET
// export function PrepareFrog ( ) ; begin
67952: LD_INT 0
67954: PPUSH
// uc_side := 0 ;
67955: LD_ADDR_OWVAR 20
67959: PUSH
67960: LD_INT 0
67962: ST_TO_ADDR
// uc_nation := 0 ;
67963: LD_ADDR_OWVAR 21
67967: PUSH
67968: LD_INT 0
67970: ST_TO_ADDR
// InitHc ;
67971: CALL_OW 19
// hc_class := class_frog ;
67975: LD_ADDR_OWVAR 28
67979: PUSH
67980: LD_INT 19
67982: ST_TO_ADDR
// hc_gallery :=  ;
67983: LD_ADDR_OWVAR 33
67987: PUSH
67988: LD_STRING 
67990: ST_TO_ADDR
// hc_name :=  ;
67991: LD_ADDR_OWVAR 26
67995: PUSH
67996: LD_STRING 
67998: ST_TO_ADDR
// end ;
67999: LD_VAR 0 1
68003: RET
// export function PrepareFish ( ) ; begin
68004: LD_INT 0
68006: PPUSH
// uc_side := 0 ;
68007: LD_ADDR_OWVAR 20
68011: PUSH
68012: LD_INT 0
68014: ST_TO_ADDR
// uc_nation := 0 ;
68015: LD_ADDR_OWVAR 21
68019: PUSH
68020: LD_INT 0
68022: ST_TO_ADDR
// InitHc ;
68023: CALL_OW 19
// hc_class := class_fish ;
68027: LD_ADDR_OWVAR 28
68031: PUSH
68032: LD_INT 20
68034: ST_TO_ADDR
// hc_gallery :=  ;
68035: LD_ADDR_OWVAR 33
68039: PUSH
68040: LD_STRING 
68042: ST_TO_ADDR
// hc_name :=  ;
68043: LD_ADDR_OWVAR 26
68047: PUSH
68048: LD_STRING 
68050: ST_TO_ADDR
// end ;
68051: LD_VAR 0 1
68055: RET
// export function PrepareBird ( ) ; begin
68056: LD_INT 0
68058: PPUSH
// uc_side := 0 ;
68059: LD_ADDR_OWVAR 20
68063: PUSH
68064: LD_INT 0
68066: ST_TO_ADDR
// uc_nation := 0 ;
68067: LD_ADDR_OWVAR 21
68071: PUSH
68072: LD_INT 0
68074: ST_TO_ADDR
// InitHc ;
68075: CALL_OW 19
// hc_class := class_phororhacos ;
68079: LD_ADDR_OWVAR 28
68083: PUSH
68084: LD_INT 18
68086: ST_TO_ADDR
// hc_gallery :=  ;
68087: LD_ADDR_OWVAR 33
68091: PUSH
68092: LD_STRING 
68094: ST_TO_ADDR
// hc_name :=  ;
68095: LD_ADDR_OWVAR 26
68099: PUSH
68100: LD_STRING 
68102: ST_TO_ADDR
// end ;
68103: LD_VAR 0 1
68107: RET
// export function PrepareHorse ( ) ; begin
68108: LD_INT 0
68110: PPUSH
// uc_side := 0 ;
68111: LD_ADDR_OWVAR 20
68115: PUSH
68116: LD_INT 0
68118: ST_TO_ADDR
// uc_nation := 0 ;
68119: LD_ADDR_OWVAR 21
68123: PUSH
68124: LD_INT 0
68126: ST_TO_ADDR
// InitHc ;
68127: CALL_OW 19
// hc_class := class_horse ;
68131: LD_ADDR_OWVAR 28
68135: PUSH
68136: LD_INT 21
68138: ST_TO_ADDR
// hc_gallery :=  ;
68139: LD_ADDR_OWVAR 33
68143: PUSH
68144: LD_STRING 
68146: ST_TO_ADDR
// hc_name :=  ;
68147: LD_ADDR_OWVAR 26
68151: PUSH
68152: LD_STRING 
68154: ST_TO_ADDR
// end ;
68155: LD_VAR 0 1
68159: RET
// export function PrepareMastodont ( ) ; begin
68160: LD_INT 0
68162: PPUSH
// uc_side := 0 ;
68163: LD_ADDR_OWVAR 20
68167: PUSH
68168: LD_INT 0
68170: ST_TO_ADDR
// uc_nation := 0 ;
68171: LD_ADDR_OWVAR 21
68175: PUSH
68176: LD_INT 0
68178: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68179: LD_ADDR_OWVAR 37
68183: PUSH
68184: LD_INT 31
68186: ST_TO_ADDR
// vc_control := control_rider ;
68187: LD_ADDR_OWVAR 38
68191: PUSH
68192: LD_INT 4
68194: ST_TO_ADDR
// end ;
68195: LD_VAR 0 1
68199: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68200: LD_INT 0
68202: PPUSH
68203: PPUSH
68204: PPUSH
// uc_side = 0 ;
68205: LD_ADDR_OWVAR 20
68209: PUSH
68210: LD_INT 0
68212: ST_TO_ADDR
// uc_nation = 0 ;
68213: LD_ADDR_OWVAR 21
68217: PUSH
68218: LD_INT 0
68220: ST_TO_ADDR
// InitHc_All ( ) ;
68221: CALL_OW 584
// InitVc ;
68225: CALL_OW 20
// if mastodonts then
68229: LD_VAR 0 6
68233: IFFALSE 68300
// for i = 1 to mastodonts do
68235: LD_ADDR_VAR 0 11
68239: PUSH
68240: DOUBLE
68241: LD_INT 1
68243: DEC
68244: ST_TO_ADDR
68245: LD_VAR 0 6
68249: PUSH
68250: FOR_TO
68251: IFFALSE 68298
// begin vc_chassis := 31 ;
68253: LD_ADDR_OWVAR 37
68257: PUSH
68258: LD_INT 31
68260: ST_TO_ADDR
// vc_control := control_rider ;
68261: LD_ADDR_OWVAR 38
68265: PUSH
68266: LD_INT 4
68268: ST_TO_ADDR
// animal := CreateVehicle ;
68269: LD_ADDR_VAR 0 12
68273: PUSH
68274: CALL_OW 45
68278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68279: LD_VAR 0 12
68283: PPUSH
68284: LD_VAR 0 8
68288: PPUSH
68289: LD_INT 0
68291: PPUSH
68292: CALL 70442 0 3
// end ;
68296: GO 68250
68298: POP
68299: POP
// if horses then
68300: LD_VAR 0 5
68304: IFFALSE 68371
// for i = 1 to horses do
68306: LD_ADDR_VAR 0 11
68310: PUSH
68311: DOUBLE
68312: LD_INT 1
68314: DEC
68315: ST_TO_ADDR
68316: LD_VAR 0 5
68320: PUSH
68321: FOR_TO
68322: IFFALSE 68369
// begin hc_class := 21 ;
68324: LD_ADDR_OWVAR 28
68328: PUSH
68329: LD_INT 21
68331: ST_TO_ADDR
// hc_gallery :=  ;
68332: LD_ADDR_OWVAR 33
68336: PUSH
68337: LD_STRING 
68339: ST_TO_ADDR
// animal := CreateHuman ;
68340: LD_ADDR_VAR 0 12
68344: PUSH
68345: CALL_OW 44
68349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68350: LD_VAR 0 12
68354: PPUSH
68355: LD_VAR 0 8
68359: PPUSH
68360: LD_INT 0
68362: PPUSH
68363: CALL 70442 0 3
// end ;
68367: GO 68321
68369: POP
68370: POP
// if birds then
68371: LD_VAR 0 1
68375: IFFALSE 68442
// for i = 1 to birds do
68377: LD_ADDR_VAR 0 11
68381: PUSH
68382: DOUBLE
68383: LD_INT 1
68385: DEC
68386: ST_TO_ADDR
68387: LD_VAR 0 1
68391: PUSH
68392: FOR_TO
68393: IFFALSE 68440
// begin hc_class := 18 ;
68395: LD_ADDR_OWVAR 28
68399: PUSH
68400: LD_INT 18
68402: ST_TO_ADDR
// hc_gallery =  ;
68403: LD_ADDR_OWVAR 33
68407: PUSH
68408: LD_STRING 
68410: ST_TO_ADDR
// animal := CreateHuman ;
68411: LD_ADDR_VAR 0 12
68415: PUSH
68416: CALL_OW 44
68420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68421: LD_VAR 0 12
68425: PPUSH
68426: LD_VAR 0 8
68430: PPUSH
68431: LD_INT 0
68433: PPUSH
68434: CALL 70442 0 3
// end ;
68438: GO 68392
68440: POP
68441: POP
// if tigers then
68442: LD_VAR 0 2
68446: IFFALSE 68530
// for i = 1 to tigers do
68448: LD_ADDR_VAR 0 11
68452: PUSH
68453: DOUBLE
68454: LD_INT 1
68456: DEC
68457: ST_TO_ADDR
68458: LD_VAR 0 2
68462: PUSH
68463: FOR_TO
68464: IFFALSE 68528
// begin hc_class = class_tiger ;
68466: LD_ADDR_OWVAR 28
68470: PUSH
68471: LD_INT 14
68473: ST_TO_ADDR
// hc_gallery =  ;
68474: LD_ADDR_OWVAR 33
68478: PUSH
68479: LD_STRING 
68481: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68482: LD_ADDR_OWVAR 35
68486: PUSH
68487: LD_INT 7
68489: NEG
68490: PPUSH
68491: LD_INT 7
68493: PPUSH
68494: CALL_OW 12
68498: ST_TO_ADDR
// animal := CreateHuman ;
68499: LD_ADDR_VAR 0 12
68503: PUSH
68504: CALL_OW 44
68508: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68509: LD_VAR 0 12
68513: PPUSH
68514: LD_VAR 0 8
68518: PPUSH
68519: LD_INT 0
68521: PPUSH
68522: CALL 70442 0 3
// end ;
68526: GO 68463
68528: POP
68529: POP
// if apemans then
68530: LD_VAR 0 3
68534: IFFALSE 68657
// for i = 1 to apemans do
68536: LD_ADDR_VAR 0 11
68540: PUSH
68541: DOUBLE
68542: LD_INT 1
68544: DEC
68545: ST_TO_ADDR
68546: LD_VAR 0 3
68550: PUSH
68551: FOR_TO
68552: IFFALSE 68655
// begin hc_class = class_apeman ;
68554: LD_ADDR_OWVAR 28
68558: PUSH
68559: LD_INT 12
68561: ST_TO_ADDR
// hc_gallery =  ;
68562: LD_ADDR_OWVAR 33
68566: PUSH
68567: LD_STRING 
68569: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68570: LD_ADDR_OWVAR 35
68574: PUSH
68575: LD_INT 2
68577: NEG
68578: PPUSH
68579: LD_INT 2
68581: PPUSH
68582: CALL_OW 12
68586: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68587: LD_ADDR_OWVAR 31
68591: PUSH
68592: LD_INT 1
68594: PPUSH
68595: LD_INT 3
68597: PPUSH
68598: CALL_OW 12
68602: PUSH
68603: LD_INT 1
68605: PPUSH
68606: LD_INT 3
68608: PPUSH
68609: CALL_OW 12
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: ST_TO_ADDR
// animal := CreateHuman ;
68626: LD_ADDR_VAR 0 12
68630: PUSH
68631: CALL_OW 44
68635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68636: LD_VAR 0 12
68640: PPUSH
68641: LD_VAR 0 8
68645: PPUSH
68646: LD_INT 0
68648: PPUSH
68649: CALL 70442 0 3
// end ;
68653: GO 68551
68655: POP
68656: POP
// if enchidnas then
68657: LD_VAR 0 4
68661: IFFALSE 68728
// for i = 1 to enchidnas do
68663: LD_ADDR_VAR 0 11
68667: PUSH
68668: DOUBLE
68669: LD_INT 1
68671: DEC
68672: ST_TO_ADDR
68673: LD_VAR 0 4
68677: PUSH
68678: FOR_TO
68679: IFFALSE 68726
// begin hc_class = 13 ;
68681: LD_ADDR_OWVAR 28
68685: PUSH
68686: LD_INT 13
68688: ST_TO_ADDR
// hc_gallery =  ;
68689: LD_ADDR_OWVAR 33
68693: PUSH
68694: LD_STRING 
68696: ST_TO_ADDR
// animal := CreateHuman ;
68697: LD_ADDR_VAR 0 12
68701: PUSH
68702: CALL_OW 44
68706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68707: LD_VAR 0 12
68711: PPUSH
68712: LD_VAR 0 8
68716: PPUSH
68717: LD_INT 0
68719: PPUSH
68720: CALL 70442 0 3
// end ;
68724: GO 68678
68726: POP
68727: POP
// if fishes then
68728: LD_VAR 0 7
68732: IFFALSE 68799
// for i = 1 to fishes do
68734: LD_ADDR_VAR 0 11
68738: PUSH
68739: DOUBLE
68740: LD_INT 1
68742: DEC
68743: ST_TO_ADDR
68744: LD_VAR 0 7
68748: PUSH
68749: FOR_TO
68750: IFFALSE 68797
// begin hc_class = 20 ;
68752: LD_ADDR_OWVAR 28
68756: PUSH
68757: LD_INT 20
68759: ST_TO_ADDR
// hc_gallery =  ;
68760: LD_ADDR_OWVAR 33
68764: PUSH
68765: LD_STRING 
68767: ST_TO_ADDR
// animal := CreateHuman ;
68768: LD_ADDR_VAR 0 12
68772: PUSH
68773: CALL_OW 44
68777: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68778: LD_VAR 0 12
68782: PPUSH
68783: LD_VAR 0 9
68787: PPUSH
68788: LD_INT 0
68790: PPUSH
68791: CALL 70442 0 3
// end ;
68795: GO 68749
68797: POP
68798: POP
// end ;
68799: LD_VAR 0 10
68803: RET
// export function WantHeal ( sci , unit ) ; begin
68804: LD_INT 0
68806: PPUSH
// if GetTaskList ( sci ) > 0 then
68807: LD_VAR 0 1
68811: PPUSH
68812: CALL_OW 437
68816: PUSH
68817: LD_INT 0
68819: GREATER
68820: IFFALSE 68892
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68822: LD_VAR 0 1
68826: PPUSH
68827: CALL_OW 437
68831: PUSH
68832: LD_INT 1
68834: ARRAY
68835: PUSH
68836: LD_INT 1
68838: ARRAY
68839: PUSH
68840: LD_STRING l
68842: EQUAL
68843: IFFALSE 68870
68845: PUSH
68846: LD_VAR 0 1
68850: PPUSH
68851: CALL_OW 437
68855: PUSH
68856: LD_INT 1
68858: ARRAY
68859: PUSH
68860: LD_INT 4
68862: ARRAY
68863: PUSH
68864: LD_VAR 0 2
68868: EQUAL
68869: AND
68870: IFFALSE 68882
// result := true else
68872: LD_ADDR_VAR 0 3
68876: PUSH
68877: LD_INT 1
68879: ST_TO_ADDR
68880: GO 68890
// result := false ;
68882: LD_ADDR_VAR 0 3
68886: PUSH
68887: LD_INT 0
68889: ST_TO_ADDR
// end else
68890: GO 68900
// result := false ;
68892: LD_ADDR_VAR 0 3
68896: PUSH
68897: LD_INT 0
68899: ST_TO_ADDR
// end ;
68900: LD_VAR 0 3
68904: RET
// export function HealTarget ( sci ) ; begin
68905: LD_INT 0
68907: PPUSH
// if not sci then
68908: LD_VAR 0 1
68912: NOT
68913: IFFALSE 68917
// exit ;
68915: GO 68982
// result := 0 ;
68917: LD_ADDR_VAR 0 2
68921: PUSH
68922: LD_INT 0
68924: ST_TO_ADDR
// if GetTaskList ( sci ) then
68925: LD_VAR 0 1
68929: PPUSH
68930: CALL_OW 437
68934: IFFALSE 68982
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68936: LD_VAR 0 1
68940: PPUSH
68941: CALL_OW 437
68945: PUSH
68946: LD_INT 1
68948: ARRAY
68949: PUSH
68950: LD_INT 1
68952: ARRAY
68953: PUSH
68954: LD_STRING l
68956: EQUAL
68957: IFFALSE 68982
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68959: LD_ADDR_VAR 0 2
68963: PUSH
68964: LD_VAR 0 1
68968: PPUSH
68969: CALL_OW 437
68973: PUSH
68974: LD_INT 1
68976: ARRAY
68977: PUSH
68978: LD_INT 4
68980: ARRAY
68981: ST_TO_ADDR
// end ;
68982: LD_VAR 0 2
68986: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68987: LD_INT 0
68989: PPUSH
68990: PPUSH
68991: PPUSH
68992: PPUSH
// if not base_units then
68993: LD_VAR 0 1
68997: NOT
68998: IFFALSE 69002
// exit ;
69000: GO 69089
// result := false ;
69002: LD_ADDR_VAR 0 2
69006: PUSH
69007: LD_INT 0
69009: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69010: LD_ADDR_VAR 0 5
69014: PUSH
69015: LD_VAR 0 1
69019: PPUSH
69020: LD_INT 21
69022: PUSH
69023: LD_INT 3
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PPUSH
69030: CALL_OW 72
69034: ST_TO_ADDR
// if not tmp then
69035: LD_VAR 0 5
69039: NOT
69040: IFFALSE 69044
// exit ;
69042: GO 69089
// for i in tmp do
69044: LD_ADDR_VAR 0 3
69048: PUSH
69049: LD_VAR 0 5
69053: PUSH
69054: FOR_IN
69055: IFFALSE 69087
// begin result := EnemyInRange ( i , 22 ) ;
69057: LD_ADDR_VAR 0 2
69061: PUSH
69062: LD_VAR 0 3
69066: PPUSH
69067: LD_INT 22
69069: PPUSH
69070: CALL 66504 0 2
69074: ST_TO_ADDR
// if result then
69075: LD_VAR 0 2
69079: IFFALSE 69085
// exit ;
69081: POP
69082: POP
69083: GO 69089
// end ;
69085: GO 69054
69087: POP
69088: POP
// end ;
69089: LD_VAR 0 2
69093: RET
// export function FilterByTag ( units , tag ) ; begin
69094: LD_INT 0
69096: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69097: LD_ADDR_VAR 0 3
69101: PUSH
69102: LD_VAR 0 1
69106: PPUSH
69107: LD_INT 120
69109: PUSH
69110: LD_VAR 0 2
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PPUSH
69119: CALL_OW 72
69123: ST_TO_ADDR
// end ;
69124: LD_VAR 0 3
69128: RET
// export function IsDriver ( un ) ; begin
69129: LD_INT 0
69131: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69132: LD_ADDR_VAR 0 2
69136: PUSH
69137: LD_VAR 0 1
69141: PUSH
69142: LD_INT 55
69144: PUSH
69145: EMPTY
69146: LIST
69147: PPUSH
69148: CALL_OW 69
69152: IN
69153: ST_TO_ADDR
// end ;
69154: LD_VAR 0 2
69158: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69159: LD_INT 0
69161: PPUSH
69162: PPUSH
// list := [ ] ;
69163: LD_ADDR_VAR 0 5
69167: PUSH
69168: EMPTY
69169: ST_TO_ADDR
// case d of 0 :
69170: LD_VAR 0 3
69174: PUSH
69175: LD_INT 0
69177: DOUBLE
69178: EQUAL
69179: IFTRUE 69183
69181: GO 69316
69183: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69184: LD_ADDR_VAR 0 5
69188: PUSH
69189: LD_VAR 0 1
69193: PUSH
69194: LD_INT 4
69196: MINUS
69197: PUSH
69198: LD_VAR 0 2
69202: PUSH
69203: LD_INT 4
69205: MINUS
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: LIST
69214: PUSH
69215: LD_VAR 0 1
69219: PUSH
69220: LD_INT 3
69222: MINUS
69223: PUSH
69224: LD_VAR 0 2
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: PUSH
69237: LD_VAR 0 1
69241: PUSH
69242: LD_INT 4
69244: PLUS
69245: PUSH
69246: LD_VAR 0 2
69250: PUSH
69251: LD_INT 4
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: LIST
69258: PUSH
69259: LD_VAR 0 1
69263: PUSH
69264: LD_INT 3
69266: PLUS
69267: PUSH
69268: LD_VAR 0 2
69272: PUSH
69273: LD_INT 3
69275: PLUS
69276: PUSH
69277: LD_INT 5
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: LIST
69284: PUSH
69285: LD_VAR 0 1
69289: PUSH
69290: LD_VAR 0 2
69294: PUSH
69295: LD_INT 4
69297: PLUS
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: LIST
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: ST_TO_ADDR
// end ; 1 :
69314: GO 70014
69316: LD_INT 1
69318: DOUBLE
69319: EQUAL
69320: IFTRUE 69324
69322: GO 69457
69324: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69325: LD_ADDR_VAR 0 5
69329: PUSH
69330: LD_VAR 0 1
69334: PUSH
69335: LD_VAR 0 2
69339: PUSH
69340: LD_INT 4
69342: MINUS
69343: PUSH
69344: LD_INT 3
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: PUSH
69352: LD_VAR 0 1
69356: PUSH
69357: LD_INT 3
69359: MINUS
69360: PUSH
69361: LD_VAR 0 2
69365: PUSH
69366: LD_INT 3
69368: MINUS
69369: PUSH
69370: LD_INT 2
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: LIST
69377: PUSH
69378: LD_VAR 0 1
69382: PUSH
69383: LD_INT 4
69385: MINUS
69386: PUSH
69387: LD_VAR 0 2
69391: PUSH
69392: LD_INT 1
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: LIST
69399: PUSH
69400: LD_VAR 0 1
69404: PUSH
69405: LD_VAR 0 2
69409: PUSH
69410: LD_INT 3
69412: PLUS
69413: PUSH
69414: LD_INT 0
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: LIST
69421: PUSH
69422: LD_VAR 0 1
69426: PUSH
69427: LD_INT 4
69429: PLUS
69430: PUSH
69431: LD_VAR 0 2
69435: PUSH
69436: LD_INT 4
69438: PLUS
69439: PUSH
69440: LD_INT 5
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: ST_TO_ADDR
// end ; 2 :
69455: GO 70014
69457: LD_INT 2
69459: DOUBLE
69460: EQUAL
69461: IFTRUE 69465
69463: GO 69594
69465: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69466: LD_ADDR_VAR 0 5
69470: PUSH
69471: LD_VAR 0 1
69475: PUSH
69476: LD_VAR 0 2
69480: PUSH
69481: LD_INT 3
69483: MINUS
69484: PUSH
69485: LD_INT 3
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: LIST
69492: PUSH
69493: LD_VAR 0 1
69497: PUSH
69498: LD_INT 4
69500: PLUS
69501: PUSH
69502: LD_VAR 0 2
69506: PUSH
69507: LD_INT 4
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: LIST
69514: PUSH
69515: LD_VAR 0 1
69519: PUSH
69520: LD_VAR 0 2
69524: PUSH
69525: LD_INT 4
69527: PLUS
69528: PUSH
69529: LD_INT 0
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: LIST
69536: PUSH
69537: LD_VAR 0 1
69541: PUSH
69542: LD_INT 3
69544: MINUS
69545: PUSH
69546: LD_VAR 0 2
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: LIST
69558: PUSH
69559: LD_VAR 0 1
69563: PUSH
69564: LD_INT 4
69566: MINUS
69567: PUSH
69568: LD_VAR 0 2
69572: PUSH
69573: LD_INT 4
69575: MINUS
69576: PUSH
69577: LD_INT 2
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: ST_TO_ADDR
// end ; 3 :
69592: GO 70014
69594: LD_INT 3
69596: DOUBLE
69597: EQUAL
69598: IFTRUE 69602
69600: GO 69735
69602: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69603: LD_ADDR_VAR 0 5
69607: PUSH
69608: LD_VAR 0 1
69612: PUSH
69613: LD_INT 3
69615: PLUS
69616: PUSH
69617: LD_VAR 0 2
69621: PUSH
69622: LD_INT 4
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: LIST
69629: PUSH
69630: LD_VAR 0 1
69634: PUSH
69635: LD_INT 4
69637: PLUS
69638: PUSH
69639: LD_VAR 0 2
69643: PUSH
69644: LD_INT 4
69646: PLUS
69647: PUSH
69648: LD_INT 5
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: LIST
69655: PUSH
69656: LD_VAR 0 1
69660: PUSH
69661: LD_INT 4
69663: MINUS
69664: PUSH
69665: LD_VAR 0 2
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: LIST
69677: PUSH
69678: LD_VAR 0 1
69682: PUSH
69683: LD_VAR 0 2
69687: PUSH
69688: LD_INT 4
69690: MINUS
69691: PUSH
69692: LD_INT 3
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: PUSH
69700: LD_VAR 0 1
69704: PUSH
69705: LD_INT 3
69707: MINUS
69708: PUSH
69709: LD_VAR 0 2
69713: PUSH
69714: LD_INT 3
69716: MINUS
69717: PUSH
69718: LD_INT 2
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: LIST
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: ST_TO_ADDR
// end ; 4 :
69733: GO 70014
69735: LD_INT 4
69737: DOUBLE
69738: EQUAL
69739: IFTRUE 69743
69741: GO 69876
69743: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69744: LD_ADDR_VAR 0 5
69748: PUSH
69749: LD_VAR 0 1
69753: PUSH
69754: LD_VAR 0 2
69758: PUSH
69759: LD_INT 4
69761: PLUS
69762: PUSH
69763: LD_INT 0
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: LIST
69770: PUSH
69771: LD_VAR 0 1
69775: PUSH
69776: LD_INT 3
69778: PLUS
69779: PUSH
69780: LD_VAR 0 2
69784: PUSH
69785: LD_INT 3
69787: PLUS
69788: PUSH
69789: LD_INT 5
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: LIST
69796: PUSH
69797: LD_VAR 0 1
69801: PUSH
69802: LD_INT 4
69804: PLUS
69805: PUSH
69806: LD_VAR 0 2
69810: PUSH
69811: LD_INT 4
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: LIST
69818: PUSH
69819: LD_VAR 0 1
69823: PUSH
69824: LD_VAR 0 2
69828: PUSH
69829: LD_INT 3
69831: MINUS
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: LIST
69840: PUSH
69841: LD_VAR 0 1
69845: PUSH
69846: LD_INT 4
69848: MINUS
69849: PUSH
69850: LD_VAR 0 2
69854: PUSH
69855: LD_INT 4
69857: MINUS
69858: PUSH
69859: LD_INT 2
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: LIST
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: ST_TO_ADDR
// end ; 5 :
69874: GO 70014
69876: LD_INT 5
69878: DOUBLE
69879: EQUAL
69880: IFTRUE 69884
69882: GO 70013
69884: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69885: LD_ADDR_VAR 0 5
69889: PUSH
69890: LD_VAR 0 1
69894: PUSH
69895: LD_INT 4
69897: MINUS
69898: PUSH
69899: LD_VAR 0 2
69903: PUSH
69904: LD_INT 1
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: PUSH
69912: LD_VAR 0 1
69916: PUSH
69917: LD_VAR 0 2
69921: PUSH
69922: LD_INT 4
69924: MINUS
69925: PUSH
69926: LD_INT 3
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: LIST
69933: PUSH
69934: LD_VAR 0 1
69938: PUSH
69939: LD_INT 4
69941: PLUS
69942: PUSH
69943: LD_VAR 0 2
69947: PUSH
69948: LD_INT 4
69950: PLUS
69951: PUSH
69952: LD_INT 5
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: LIST
69959: PUSH
69960: LD_VAR 0 1
69964: PUSH
69965: LD_INT 3
69967: PLUS
69968: PUSH
69969: LD_VAR 0 2
69973: PUSH
69974: LD_INT 4
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: LIST
69981: PUSH
69982: LD_VAR 0 1
69986: PUSH
69987: LD_VAR 0 2
69991: PUSH
69992: LD_INT 3
69994: PLUS
69995: PUSH
69996: LD_INT 0
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: LIST
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: ST_TO_ADDR
// end ; end ;
70011: GO 70014
70013: POP
// result := list ;
70014: LD_ADDR_VAR 0 4
70018: PUSH
70019: LD_VAR 0 5
70023: ST_TO_ADDR
// end ;
70024: LD_VAR 0 4
70028: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70029: LD_INT 0
70031: PPUSH
70032: PPUSH
70033: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70034: LD_VAR 0 1
70038: NOT
70039: IFTRUE 70067
70041: PUSH
70042: LD_VAR 0 2
70046: PUSH
70047: LD_INT 1
70049: PUSH
70050: LD_INT 2
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: LD_INT 4
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: IN
70065: NOT
70066: OR
70067: IFFALSE 70071
// exit ;
70069: GO 70154
// tmp := [ ] ;
70071: LD_ADDR_VAR 0 5
70075: PUSH
70076: EMPTY
70077: ST_TO_ADDR
// for i in units do
70078: LD_ADDR_VAR 0 4
70082: PUSH
70083: LD_VAR 0 1
70087: PUSH
70088: FOR_IN
70089: IFFALSE 70123
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70091: LD_ADDR_VAR 0 5
70095: PUSH
70096: LD_VAR 0 5
70100: PPUSH
70101: LD_VAR 0 4
70105: PPUSH
70106: LD_VAR 0 2
70110: PPUSH
70111: CALL_OW 259
70115: PPUSH
70116: CALL 71549 0 2
70120: ST_TO_ADDR
70121: GO 70088
70123: POP
70124: POP
// if not tmp then
70125: LD_VAR 0 5
70129: NOT
70130: IFFALSE 70134
// exit ;
70132: GO 70154
// result := SortListByListDesc ( units , tmp ) ;
70134: LD_ADDR_VAR 0 3
70138: PUSH
70139: LD_VAR 0 1
70143: PPUSH
70144: LD_VAR 0 5
70148: PPUSH
70149: CALL_OW 77
70153: ST_TO_ADDR
// end ;
70154: LD_VAR 0 3
70158: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70159: LD_INT 0
70161: PPUSH
70162: PPUSH
70163: PPUSH
// result := false ;
70164: LD_ADDR_VAR 0 3
70168: PUSH
70169: LD_INT 0
70171: ST_TO_ADDR
// if not building then
70172: LD_VAR 0 2
70176: NOT
70177: IFFALSE 70181
// exit ;
70179: GO 70325
// x := GetX ( building ) ;
70181: LD_ADDR_VAR 0 4
70185: PUSH
70186: LD_VAR 0 2
70190: PPUSH
70191: CALL_OW 250
70195: ST_TO_ADDR
// y := GetY ( building ) ;
70196: LD_ADDR_VAR 0 5
70200: PUSH
70201: LD_VAR 0 2
70205: PPUSH
70206: CALL_OW 251
70210: ST_TO_ADDR
// if not x or not y then
70211: LD_VAR 0 4
70215: NOT
70216: IFTRUE 70225
70218: PUSH
70219: LD_VAR 0 5
70223: NOT
70224: OR
70225: IFFALSE 70229
// exit ;
70227: GO 70325
// if GetTaskList ( unit ) then
70229: LD_VAR 0 1
70233: PPUSH
70234: CALL_OW 437
70238: IFFALSE 70325
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70240: LD_STRING e
70242: PUSH
70243: LD_VAR 0 1
70247: PPUSH
70248: CALL_OW 437
70252: PUSH
70253: LD_INT 1
70255: ARRAY
70256: PUSH
70257: LD_INT 1
70259: ARRAY
70260: EQUAL
70261: IFFALSE 70288
70263: PUSH
70264: LD_VAR 0 4
70268: PUSH
70269: LD_VAR 0 1
70273: PPUSH
70274: CALL_OW 437
70278: PUSH
70279: LD_INT 1
70281: ARRAY
70282: PUSH
70283: LD_INT 2
70285: ARRAY
70286: EQUAL
70287: AND
70288: IFFALSE 70315
70290: PUSH
70291: LD_VAR 0 5
70295: PUSH
70296: LD_VAR 0 1
70300: PPUSH
70301: CALL_OW 437
70305: PUSH
70306: LD_INT 1
70308: ARRAY
70309: PUSH
70310: LD_INT 3
70312: ARRAY
70313: EQUAL
70314: AND
70315: IFFALSE 70325
// result := true end ;
70317: LD_ADDR_VAR 0 3
70321: PUSH
70322: LD_INT 1
70324: ST_TO_ADDR
// end ;
70325: LD_VAR 0 3
70329: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70330: LD_INT 0
70332: PPUSH
// result := false ;
70333: LD_ADDR_VAR 0 4
70337: PUSH
70338: LD_INT 0
70340: ST_TO_ADDR
// if GetTaskList ( unit ) then
70341: LD_VAR 0 1
70345: PPUSH
70346: CALL_OW 437
70350: IFFALSE 70437
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70352: LD_STRING M
70354: PUSH
70355: LD_VAR 0 1
70359: PPUSH
70360: CALL_OW 437
70364: PUSH
70365: LD_INT 1
70367: ARRAY
70368: PUSH
70369: LD_INT 1
70371: ARRAY
70372: EQUAL
70373: IFFALSE 70400
70375: PUSH
70376: LD_VAR 0 2
70380: PUSH
70381: LD_VAR 0 1
70385: PPUSH
70386: CALL_OW 437
70390: PUSH
70391: LD_INT 1
70393: ARRAY
70394: PUSH
70395: LD_INT 2
70397: ARRAY
70398: EQUAL
70399: AND
70400: IFFALSE 70427
70402: PUSH
70403: LD_VAR 0 3
70407: PUSH
70408: LD_VAR 0 1
70412: PPUSH
70413: CALL_OW 437
70417: PUSH
70418: LD_INT 1
70420: ARRAY
70421: PUSH
70422: LD_INT 3
70424: ARRAY
70425: EQUAL
70426: AND
70427: IFFALSE 70437
// result := true ;
70429: LD_ADDR_VAR 0 4
70433: PUSH
70434: LD_INT 1
70436: ST_TO_ADDR
// end ; end ;
70437: LD_VAR 0 4
70441: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70442: LD_INT 0
70444: PPUSH
70445: PPUSH
70446: PPUSH
70447: PPUSH
// if not unit or not area then
70448: LD_VAR 0 1
70452: NOT
70453: IFTRUE 70462
70455: PUSH
70456: LD_VAR 0 2
70460: NOT
70461: OR
70462: IFFALSE 70466
// exit ;
70464: GO 70642
// tmp := AreaToList ( area , i ) ;
70466: LD_ADDR_VAR 0 6
70470: PUSH
70471: LD_VAR 0 2
70475: PPUSH
70476: LD_VAR 0 5
70480: PPUSH
70481: CALL_OW 517
70485: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70486: LD_ADDR_VAR 0 5
70490: PUSH
70491: DOUBLE
70492: LD_INT 1
70494: DEC
70495: ST_TO_ADDR
70496: LD_VAR 0 6
70500: PUSH
70501: LD_INT 1
70503: ARRAY
70504: PUSH
70505: FOR_TO
70506: IFFALSE 70640
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70508: LD_ADDR_VAR 0 7
70512: PUSH
70513: LD_VAR 0 6
70517: PUSH
70518: LD_INT 1
70520: ARRAY
70521: PUSH
70522: LD_VAR 0 5
70526: ARRAY
70527: PUSH
70528: LD_VAR 0 6
70532: PUSH
70533: LD_INT 2
70535: ARRAY
70536: PUSH
70537: LD_VAR 0 5
70541: ARRAY
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70547: LD_INT 92
70549: PUSH
70550: LD_VAR 0 7
70554: PUSH
70555: LD_INT 1
70557: ARRAY
70558: PUSH
70559: LD_VAR 0 7
70563: PUSH
70564: LD_INT 2
70566: ARRAY
70567: PUSH
70568: LD_INT 2
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: PPUSH
70577: CALL_OW 69
70581: PUSH
70582: LD_INT 0
70584: EQUAL
70585: IFFALSE 70638
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70587: LD_VAR 0 1
70591: PPUSH
70592: LD_VAR 0 7
70596: PUSH
70597: LD_INT 1
70599: ARRAY
70600: PPUSH
70601: LD_VAR 0 7
70605: PUSH
70606: LD_INT 2
70608: ARRAY
70609: PPUSH
70610: LD_VAR 0 3
70614: PPUSH
70615: CALL_OW 48
// result := IsPlaced ( unit ) ;
70619: LD_ADDR_VAR 0 4
70623: PUSH
70624: LD_VAR 0 1
70628: PPUSH
70629: CALL_OW 305
70633: ST_TO_ADDR
// exit ;
70634: POP
70635: POP
70636: GO 70642
// end ; end ;
70638: GO 70505
70640: POP
70641: POP
// end ;
70642: LD_VAR 0 4
70646: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70647: LD_INT 0
70649: PPUSH
70650: PPUSH
70651: PPUSH
// if not side or side > 8 then
70652: LD_VAR 0 1
70656: NOT
70657: IFTRUE 70669
70659: PUSH
70660: LD_VAR 0 1
70664: PUSH
70665: LD_INT 8
70667: GREATER
70668: OR
70669: IFFALSE 70673
// exit ;
70671: GO 70860
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70673: LD_ADDR_VAR 0 4
70677: PUSH
70678: LD_INT 22
70680: PUSH
70681: LD_VAR 0 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 21
70692: PUSH
70693: LD_INT 3
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PPUSH
70704: CALL_OW 69
70708: ST_TO_ADDR
// if not tmp then
70709: LD_VAR 0 4
70713: NOT
70714: IFFALSE 70718
// exit ;
70716: GO 70860
// enable_addtolog := true ;
70718: LD_ADDR_OWVAR 81
70722: PUSH
70723: LD_INT 1
70725: ST_TO_ADDR
// AddToLog ( [ ) ;
70726: LD_STRING [
70728: PPUSH
70729: CALL_OW 561
// for i in tmp do
70733: LD_ADDR_VAR 0 3
70737: PUSH
70738: LD_VAR 0 4
70742: PUSH
70743: FOR_IN
70744: IFFALSE 70851
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70746: LD_STRING [
70748: PUSH
70749: LD_VAR 0 3
70753: PPUSH
70754: CALL_OW 266
70758: STR
70759: PUSH
70760: LD_STRING , 
70762: STR
70763: PUSH
70764: LD_VAR 0 3
70768: PPUSH
70769: CALL_OW 250
70773: STR
70774: PUSH
70775: LD_STRING , 
70777: STR
70778: PUSH
70779: LD_VAR 0 3
70783: PPUSH
70784: CALL_OW 251
70788: STR
70789: PUSH
70790: LD_STRING , 
70792: STR
70793: PUSH
70794: LD_VAR 0 3
70798: PPUSH
70799: CALL_OW 254
70803: STR
70804: PUSH
70805: LD_STRING , 
70807: STR
70808: PUSH
70809: LD_VAR 0 3
70813: PPUSH
70814: LD_INT 1
70816: PPUSH
70817: CALL_OW 268
70821: STR
70822: PUSH
70823: LD_STRING , 
70825: STR
70826: PUSH
70827: LD_VAR 0 3
70831: PPUSH
70832: LD_INT 2
70834: PPUSH
70835: CALL_OW 268
70839: STR
70840: PUSH
70841: LD_STRING ],
70843: STR
70844: PPUSH
70845: CALL_OW 561
// end ;
70849: GO 70743
70851: POP
70852: POP
// AddToLog ( ]; ) ;
70853: LD_STRING ];
70855: PPUSH
70856: CALL_OW 561
// end ;
70860: LD_VAR 0 2
70864: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70865: LD_INT 0
70867: PPUSH
70868: PPUSH
70869: PPUSH
70870: PPUSH
70871: PPUSH
// if not area or not rate or not max then
70872: LD_VAR 0 1
70876: NOT
70877: IFTRUE 70886
70879: PUSH
70880: LD_VAR 0 2
70884: NOT
70885: OR
70886: IFTRUE 70895
70888: PUSH
70889: LD_VAR 0 4
70893: NOT
70894: OR
70895: IFFALSE 70899
// exit ;
70897: GO 71088
// while 1 do
70899: LD_INT 1
70901: IFFALSE 71088
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70903: LD_ADDR_VAR 0 9
70907: PUSH
70908: LD_VAR 0 1
70912: PPUSH
70913: LD_INT 1
70915: PPUSH
70916: CALL_OW 287
70920: PUSH
70921: LD_INT 10
70923: MUL
70924: ST_TO_ADDR
// r := rate / 10 ;
70925: LD_ADDR_VAR 0 7
70929: PUSH
70930: LD_VAR 0 2
70934: PUSH
70935: LD_INT 10
70937: DIVREAL
70938: ST_TO_ADDR
// time := 1 1$00 ;
70939: LD_ADDR_VAR 0 8
70943: PUSH
70944: LD_INT 2100
70946: ST_TO_ADDR
// if amount < min then
70947: LD_VAR 0 9
70951: PUSH
70952: LD_VAR 0 3
70956: LESS
70957: IFFALSE 70975
// r := r * 2 else
70959: LD_ADDR_VAR 0 7
70963: PUSH
70964: LD_VAR 0 7
70968: PUSH
70969: LD_INT 2
70971: MUL
70972: ST_TO_ADDR
70973: GO 71001
// if amount > max then
70975: LD_VAR 0 9
70979: PUSH
70980: LD_VAR 0 4
70984: GREATER
70985: IFFALSE 71001
// r := r / 2 ;
70987: LD_ADDR_VAR 0 7
70991: PUSH
70992: LD_VAR 0 7
70996: PUSH
70997: LD_INT 2
70999: DIVREAL
71000: ST_TO_ADDR
// time := time / r ;
71001: LD_ADDR_VAR 0 8
71005: PUSH
71006: LD_VAR 0 8
71010: PUSH
71011: LD_VAR 0 7
71015: DIVREAL
71016: ST_TO_ADDR
// if time < 0 then
71017: LD_VAR 0 8
71021: PUSH
71022: LD_INT 0
71024: LESS
71025: IFFALSE 71042
// time := time * - 1 ;
71027: LD_ADDR_VAR 0 8
71031: PUSH
71032: LD_VAR 0 8
71036: PUSH
71037: LD_INT 1
71039: NEG
71040: MUL
71041: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71042: LD_VAR 0 8
71046: PUSH
71047: LD_INT 35
71049: PPUSH
71050: LD_INT 875
71052: PPUSH
71053: CALL_OW 12
71057: PLUS
71058: PPUSH
71059: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71063: LD_INT 1
71065: PPUSH
71066: LD_INT 5
71068: PPUSH
71069: CALL_OW 12
71073: PPUSH
71074: LD_VAR 0 1
71078: PPUSH
71079: LD_INT 1
71081: PPUSH
71082: CALL_OW 55
// end ;
71086: GO 70899
// end ;
71088: LD_VAR 0 5
71092: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71093: LD_INT 0
71095: PPUSH
71096: PPUSH
71097: PPUSH
71098: PPUSH
71099: PPUSH
71100: PPUSH
71101: PPUSH
71102: PPUSH
// if not turrets or not factories then
71103: LD_VAR 0 1
71107: NOT
71108: IFTRUE 71117
71110: PUSH
71111: LD_VAR 0 2
71115: NOT
71116: OR
71117: IFFALSE 71121
// exit ;
71119: GO 71428
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71121: LD_ADDR_VAR 0 10
71125: PUSH
71126: LD_INT 5
71128: PUSH
71129: LD_INT 6
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: LD_INT 4
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 3
71148: PUSH
71149: LD_INT 5
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 24
71163: PUSH
71164: LD_INT 25
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 23
71173: PUSH
71174: LD_INT 27
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 42
71187: PUSH
71188: LD_INT 43
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 44
71197: PUSH
71198: LD_INT 46
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 45
71207: PUSH
71208: LD_INT 47
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: LIST
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: LIST
71224: ST_TO_ADDR
// result := [ ] ;
71225: LD_ADDR_VAR 0 3
71229: PUSH
71230: EMPTY
71231: ST_TO_ADDR
// for i in turrets do
71232: LD_ADDR_VAR 0 4
71236: PUSH
71237: LD_VAR 0 1
71241: PUSH
71242: FOR_IN
71243: IFFALSE 71426
// begin nat := GetNation ( i ) ;
71245: LD_ADDR_VAR 0 7
71249: PUSH
71250: LD_VAR 0 4
71254: PPUSH
71255: CALL_OW 248
71259: ST_TO_ADDR
// weapon := 0 ;
71260: LD_ADDR_VAR 0 8
71264: PUSH
71265: LD_INT 0
71267: ST_TO_ADDR
// if not nat then
71268: LD_VAR 0 7
71272: NOT
71273: IFFALSE 71277
// continue ;
71275: GO 71242
// for j in list [ nat ] do
71277: LD_ADDR_VAR 0 5
71281: PUSH
71282: LD_VAR 0 10
71286: PUSH
71287: LD_VAR 0 7
71291: ARRAY
71292: PUSH
71293: FOR_IN
71294: IFFALSE 71335
// if GetBWeapon ( i ) = j [ 1 ] then
71296: LD_VAR 0 4
71300: PPUSH
71301: CALL_OW 269
71305: PUSH
71306: LD_VAR 0 5
71310: PUSH
71311: LD_INT 1
71313: ARRAY
71314: EQUAL
71315: IFFALSE 71333
// begin weapon := j [ 2 ] ;
71317: LD_ADDR_VAR 0 8
71321: PUSH
71322: LD_VAR 0 5
71326: PUSH
71327: LD_INT 2
71329: ARRAY
71330: ST_TO_ADDR
// break ;
71331: GO 71335
// end ;
71333: GO 71293
71335: POP
71336: POP
// if not weapon then
71337: LD_VAR 0 8
71341: NOT
71342: IFFALSE 71346
// continue ;
71344: GO 71242
// for k in factories do
71346: LD_ADDR_VAR 0 6
71350: PUSH
71351: LD_VAR 0 2
71355: PUSH
71356: FOR_IN
71357: IFFALSE 71422
// begin weapons := AvailableWeaponList ( k ) ;
71359: LD_ADDR_VAR 0 9
71363: PUSH
71364: LD_VAR 0 6
71368: PPUSH
71369: CALL_OW 478
71373: ST_TO_ADDR
// if not weapons then
71374: LD_VAR 0 9
71378: NOT
71379: IFFALSE 71383
// continue ;
71381: GO 71356
// if weapon in weapons then
71383: LD_VAR 0 8
71387: PUSH
71388: LD_VAR 0 9
71392: IN
71393: IFFALSE 71420
// begin result := [ i , weapon ] ;
71395: LD_ADDR_VAR 0 3
71399: PUSH
71400: LD_VAR 0 4
71404: PUSH
71405: LD_VAR 0 8
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: ST_TO_ADDR
// exit ;
71414: POP
71415: POP
71416: POP
71417: POP
71418: GO 71428
// end ; end ;
71420: GO 71356
71422: POP
71423: POP
// end ;
71424: GO 71242
71426: POP
71427: POP
// end ;
71428: LD_VAR 0 3
71432: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71433: LD_INT 0
71435: PPUSH
// if not side or side > 8 then
71436: LD_VAR 0 3
71440: NOT
71441: IFTRUE 71453
71443: PUSH
71444: LD_VAR 0 3
71448: PUSH
71449: LD_INT 8
71451: GREATER
71452: OR
71453: IFFALSE 71457
// exit ;
71455: GO 71516
// if not range then
71457: LD_VAR 0 4
71461: NOT
71462: IFFALSE 71473
// range := - 12 ;
71464: LD_ADDR_VAR 0 4
71468: PUSH
71469: LD_INT 12
71471: NEG
71472: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71473: LD_VAR 0 1
71477: PPUSH
71478: LD_VAR 0 2
71482: PPUSH
71483: LD_VAR 0 3
71487: PPUSH
71488: LD_VAR 0 4
71492: PPUSH
71493: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71497: LD_VAR 0 1
71501: PPUSH
71502: LD_VAR 0 2
71506: PPUSH
71507: LD_VAR 0 3
71511: PPUSH
71512: CALL_OW 331
// end ;
71516: LD_VAR 0 5
71520: RET
// export function Video ( mode ) ; begin
71521: LD_INT 0
71523: PPUSH
// ingame_video = mode ;
71524: LD_ADDR_OWVAR 52
71528: PUSH
71529: LD_VAR 0 1
71533: ST_TO_ADDR
// interface_hidden = mode ;
71534: LD_ADDR_OWVAR 54
71538: PUSH
71539: LD_VAR 0 1
71543: ST_TO_ADDR
// end ;
71544: LD_VAR 0 2
71548: RET
// export function Join ( array , element ) ; begin
71549: LD_INT 0
71551: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71552: LD_ADDR_VAR 0 3
71556: PUSH
71557: LD_VAR 0 1
71561: PPUSH
71562: LD_VAR 0 1
71566: PUSH
71567: LD_INT 1
71569: PLUS
71570: PPUSH
71571: LD_VAR 0 2
71575: PPUSH
71576: CALL_OW 1
71580: ST_TO_ADDR
// end ;
71581: LD_VAR 0 3
71585: RET
// export function JoinUnion ( array , element ) ; begin
71586: LD_INT 0
71588: PPUSH
// result := array union element ;
71589: LD_ADDR_VAR 0 3
71593: PUSH
71594: LD_VAR 0 1
71598: PUSH
71599: LD_VAR 0 2
71603: UNION
71604: ST_TO_ADDR
// end ;
71605: LD_VAR 0 3
71609: RET
// export function GetBehemoths ( side ) ; begin
71610: LD_INT 0
71612: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71613: LD_ADDR_VAR 0 2
71617: PUSH
71618: LD_INT 22
71620: PUSH
71621: LD_VAR 0 1
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 31
71632: PUSH
71633: LD_INT 25
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PPUSH
71644: CALL_OW 69
71648: ST_TO_ADDR
// end ;
71649: LD_VAR 0 2
71653: RET
// export function Shuffle ( array ) ; var i , index ; begin
71654: LD_INT 0
71656: PPUSH
71657: PPUSH
71658: PPUSH
// result := [ ] ;
71659: LD_ADDR_VAR 0 2
71663: PUSH
71664: EMPTY
71665: ST_TO_ADDR
// if not array then
71666: LD_VAR 0 1
71670: NOT
71671: IFFALSE 71675
// exit ;
71673: GO 71774
// Randomize ;
71675: CALL_OW 10
// for i = array downto 1 do
71679: LD_ADDR_VAR 0 3
71683: PUSH
71684: DOUBLE
71685: LD_VAR 0 1
71689: INC
71690: ST_TO_ADDR
71691: LD_INT 1
71693: PUSH
71694: FOR_DOWNTO
71695: IFFALSE 71772
// begin index := rand ( 1 , array ) ;
71697: LD_ADDR_VAR 0 4
71701: PUSH
71702: LD_INT 1
71704: PPUSH
71705: LD_VAR 0 1
71709: PPUSH
71710: CALL_OW 12
71714: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71715: LD_ADDR_VAR 0 2
71719: PUSH
71720: LD_VAR 0 2
71724: PPUSH
71725: LD_VAR 0 2
71729: PUSH
71730: LD_INT 1
71732: PLUS
71733: PPUSH
71734: LD_VAR 0 1
71738: PUSH
71739: LD_VAR 0 4
71743: ARRAY
71744: PPUSH
71745: CALL_OW 2
71749: ST_TO_ADDR
// array := Delete ( array , index ) ;
71750: LD_ADDR_VAR 0 1
71754: PUSH
71755: LD_VAR 0 1
71759: PPUSH
71760: LD_VAR 0 4
71764: PPUSH
71765: CALL_OW 3
71769: ST_TO_ADDR
// end ;
71770: GO 71694
71772: POP
71773: POP
// end ;
71774: LD_VAR 0 2
71778: RET
// export function GetBaseMaterials ( base ) ; begin
71779: LD_INT 0
71781: PPUSH
// result := [ 0 , 0 , 0 ] ;
71782: LD_ADDR_VAR 0 2
71786: PUSH
71787: LD_INT 0
71789: PUSH
71790: LD_INT 0
71792: PUSH
71793: LD_INT 0
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: LIST
71800: ST_TO_ADDR
// if not base then
71801: LD_VAR 0 1
71805: NOT
71806: IFFALSE 71810
// exit ;
71808: GO 71859
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71810: LD_ADDR_VAR 0 2
71814: PUSH
71815: LD_VAR 0 1
71819: PPUSH
71820: LD_INT 1
71822: PPUSH
71823: CALL_OW 275
71827: PUSH
71828: LD_VAR 0 1
71832: PPUSH
71833: LD_INT 2
71835: PPUSH
71836: CALL_OW 275
71840: PUSH
71841: LD_VAR 0 1
71845: PPUSH
71846: LD_INT 3
71848: PPUSH
71849: CALL_OW 275
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: LIST
71858: ST_TO_ADDR
// end ;
71859: LD_VAR 0 2
71863: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71864: LD_INT 0
71866: PPUSH
71867: PPUSH
// result := array ;
71868: LD_ADDR_VAR 0 3
71872: PUSH
71873: LD_VAR 0 1
71877: ST_TO_ADDR
// if size >= result then
71878: LD_VAR 0 2
71882: PUSH
71883: LD_VAR 0 3
71887: GREATEREQUAL
71888: IFFALSE 71892
// exit ;
71890: GO 71942
// if size then
71892: LD_VAR 0 2
71896: IFFALSE 71942
// for i := array downto size do
71898: LD_ADDR_VAR 0 4
71902: PUSH
71903: DOUBLE
71904: LD_VAR 0 1
71908: INC
71909: ST_TO_ADDR
71910: LD_VAR 0 2
71914: PUSH
71915: FOR_DOWNTO
71916: IFFALSE 71940
// result := Delete ( result , result ) ;
71918: LD_ADDR_VAR 0 3
71922: PUSH
71923: LD_VAR 0 3
71927: PPUSH
71928: LD_VAR 0 3
71932: PPUSH
71933: CALL_OW 3
71937: ST_TO_ADDR
71938: GO 71915
71940: POP
71941: POP
// end ;
71942: LD_VAR 0 3
71946: RET
// export function ComExit ( unit ) ; var tmp ; begin
71947: LD_INT 0
71949: PPUSH
71950: PPUSH
// if not IsInUnit ( unit ) then
71951: LD_VAR 0 1
71955: PPUSH
71956: CALL_OW 310
71960: NOT
71961: IFFALSE 71965
// exit ;
71963: GO 72025
// tmp := IsInUnit ( unit ) ;
71965: LD_ADDR_VAR 0 3
71969: PUSH
71970: LD_VAR 0 1
71974: PPUSH
71975: CALL_OW 310
71979: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71980: LD_VAR 0 3
71984: PPUSH
71985: CALL_OW 247
71989: PUSH
71990: LD_INT 2
71992: EQUAL
71993: IFFALSE 72006
// ComExitVehicle ( unit ) else
71995: LD_VAR 0 1
71999: PPUSH
72000: CALL_OW 121
72004: GO 72015
// ComExitBuilding ( unit ) ;
72006: LD_VAR 0 1
72010: PPUSH
72011: CALL_OW 122
// result := tmp ;
72015: LD_ADDR_VAR 0 2
72019: PUSH
72020: LD_VAR 0 3
72024: ST_TO_ADDR
// end ;
72025: LD_VAR 0 2
72029: RET
// export function ComExitAll ( units ) ; var i ; begin
72030: LD_INT 0
72032: PPUSH
72033: PPUSH
// if not units then
72034: LD_VAR 0 1
72038: NOT
72039: IFFALSE 72043
// exit ;
72041: GO 72069
// for i in units do
72043: LD_ADDR_VAR 0 3
72047: PUSH
72048: LD_VAR 0 1
72052: PUSH
72053: FOR_IN
72054: IFFALSE 72067
// ComExit ( i ) ;
72056: LD_VAR 0 3
72060: PPUSH
72061: CALL 71947 0 1
72065: GO 72053
72067: POP
72068: POP
// end ;
72069: LD_VAR 0 2
72073: RET
// export function ResetHc ; begin
72074: LD_INT 0
72076: PPUSH
// InitHc ;
72077: CALL_OW 19
// hc_importance := 0 ;
72081: LD_ADDR_OWVAR 32
72085: PUSH
72086: LD_INT 0
72088: ST_TO_ADDR
// end ;
72089: LD_VAR 0 1
72093: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72094: LD_INT 0
72096: PPUSH
72097: PPUSH
72098: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72099: LD_ADDR_VAR 0 6
72103: PUSH
72104: LD_VAR 0 1
72108: PUSH
72109: LD_VAR 0 3
72113: PLUS
72114: PUSH
72115: LD_INT 2
72117: DIV
72118: ST_TO_ADDR
// if _x < 0 then
72119: LD_VAR 0 6
72123: PUSH
72124: LD_INT 0
72126: LESS
72127: IFFALSE 72144
// _x := _x * - 1 ;
72129: LD_ADDR_VAR 0 6
72133: PUSH
72134: LD_VAR 0 6
72138: PUSH
72139: LD_INT 1
72141: NEG
72142: MUL
72143: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72144: LD_ADDR_VAR 0 7
72148: PUSH
72149: LD_VAR 0 2
72153: PUSH
72154: LD_VAR 0 4
72158: PLUS
72159: PUSH
72160: LD_INT 2
72162: DIV
72163: ST_TO_ADDR
// if _y < 0 then
72164: LD_VAR 0 7
72168: PUSH
72169: LD_INT 0
72171: LESS
72172: IFFALSE 72189
// _y := _y * - 1 ;
72174: LD_ADDR_VAR 0 7
72178: PUSH
72179: LD_VAR 0 7
72183: PUSH
72184: LD_INT 1
72186: NEG
72187: MUL
72188: ST_TO_ADDR
// result := [ _x , _y ] ;
72189: LD_ADDR_VAR 0 5
72193: PUSH
72194: LD_VAR 0 6
72198: PUSH
72199: LD_VAR 0 7
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: ST_TO_ADDR
// end ;
72208: LD_VAR 0 5
72212: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72213: LD_INT 0
72215: PPUSH
72216: PPUSH
72217: PPUSH
72218: PPUSH
// task := GetTaskList ( unit ) ;
72219: LD_ADDR_VAR 0 7
72223: PUSH
72224: LD_VAR 0 1
72228: PPUSH
72229: CALL_OW 437
72233: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72234: LD_VAR 0 7
72238: NOT
72239: IFFALSE 72258
72241: PUSH
72242: LD_VAR 0 1
72246: PPUSH
72247: LD_VAR 0 2
72251: PPUSH
72252: CALL_OW 308
72256: NOT
72257: AND
72258: IFFALSE 72262
// exit ;
72260: GO 72380
// if IsInArea ( unit , area ) then
72262: LD_VAR 0 1
72266: PPUSH
72267: LD_VAR 0 2
72271: PPUSH
72272: CALL_OW 308
72276: IFFALSE 72294
// begin ComMoveToArea ( unit , goAway ) ;
72278: LD_VAR 0 1
72282: PPUSH
72283: LD_VAR 0 3
72287: PPUSH
72288: CALL_OW 113
// exit ;
72292: GO 72380
// end ; if task [ 1 ] [ 1 ] <> M then
72294: LD_VAR 0 7
72298: PUSH
72299: LD_INT 1
72301: ARRAY
72302: PUSH
72303: LD_INT 1
72305: ARRAY
72306: PUSH
72307: LD_STRING M
72309: NONEQUAL
72310: IFFALSE 72314
// exit ;
72312: GO 72380
// x := task [ 1 ] [ 2 ] ;
72314: LD_ADDR_VAR 0 5
72318: PUSH
72319: LD_VAR 0 7
72323: PUSH
72324: LD_INT 1
72326: ARRAY
72327: PUSH
72328: LD_INT 2
72330: ARRAY
72331: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72332: LD_ADDR_VAR 0 6
72336: PUSH
72337: LD_VAR 0 7
72341: PUSH
72342: LD_INT 1
72344: ARRAY
72345: PUSH
72346: LD_INT 3
72348: ARRAY
72349: ST_TO_ADDR
// if InArea ( x , y , area ) then
72350: LD_VAR 0 5
72354: PPUSH
72355: LD_VAR 0 6
72359: PPUSH
72360: LD_VAR 0 2
72364: PPUSH
72365: CALL_OW 309
72369: IFFALSE 72380
// ComStop ( unit ) ;
72371: LD_VAR 0 1
72375: PPUSH
72376: CALL_OW 141
// end ;
72380: LD_VAR 0 4
72384: RET
// export function Abs ( value ) ; begin
72385: LD_INT 0
72387: PPUSH
// result := value ;
72388: LD_ADDR_VAR 0 2
72392: PUSH
72393: LD_VAR 0 1
72397: ST_TO_ADDR
// if value < 0 then
72398: LD_VAR 0 1
72402: PUSH
72403: LD_INT 0
72405: LESS
72406: IFFALSE 72423
// result := value * - 1 ;
72408: LD_ADDR_VAR 0 2
72412: PUSH
72413: LD_VAR 0 1
72417: PUSH
72418: LD_INT 1
72420: NEG
72421: MUL
72422: ST_TO_ADDR
// end ;
72423: LD_VAR 0 2
72427: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72428: LD_INT 0
72430: PPUSH
72431: PPUSH
72432: PPUSH
72433: PPUSH
72434: PPUSH
72435: PPUSH
72436: PPUSH
72437: PPUSH
// if not unit or not building then
72438: LD_VAR 0 1
72442: NOT
72443: IFTRUE 72452
72445: PUSH
72446: LD_VAR 0 2
72450: NOT
72451: OR
72452: IFFALSE 72456
// exit ;
72454: GO 72684
// x := GetX ( building ) ;
72456: LD_ADDR_VAR 0 4
72460: PUSH
72461: LD_VAR 0 2
72465: PPUSH
72466: CALL_OW 250
72470: ST_TO_ADDR
// y := GetY ( building ) ;
72471: LD_ADDR_VAR 0 6
72475: PUSH
72476: LD_VAR 0 2
72480: PPUSH
72481: CALL_OW 251
72485: ST_TO_ADDR
// d := GetDir ( building ) ;
72486: LD_ADDR_VAR 0 8
72490: PUSH
72491: LD_VAR 0 2
72495: PPUSH
72496: CALL_OW 254
72500: ST_TO_ADDR
// r := 4 ;
72501: LD_ADDR_VAR 0 9
72505: PUSH
72506: LD_INT 4
72508: ST_TO_ADDR
// for i := 1 to 5 do
72509: LD_ADDR_VAR 0 10
72513: PUSH
72514: DOUBLE
72515: LD_INT 1
72517: DEC
72518: ST_TO_ADDR
72519: LD_INT 5
72521: PUSH
72522: FOR_TO
72523: IFFALSE 72682
// begin _x := ShiftX ( x , d , r + i ) ;
72525: LD_ADDR_VAR 0 5
72529: PUSH
72530: LD_VAR 0 4
72534: PPUSH
72535: LD_VAR 0 8
72539: PPUSH
72540: LD_VAR 0 9
72544: PUSH
72545: LD_VAR 0 10
72549: PLUS
72550: PPUSH
72551: CALL_OW 272
72555: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72556: LD_ADDR_VAR 0 7
72560: PUSH
72561: LD_VAR 0 6
72565: PPUSH
72566: LD_VAR 0 8
72570: PPUSH
72571: LD_VAR 0 9
72575: PUSH
72576: LD_VAR 0 10
72580: PLUS
72581: PPUSH
72582: CALL_OW 273
72586: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72587: LD_VAR 0 5
72591: PPUSH
72592: LD_VAR 0 7
72596: PPUSH
72597: CALL_OW 488
72601: IFFALSE 72636
72603: PUSH
72604: LD_VAR 0 5
72608: PPUSH
72609: LD_VAR 0 7
72613: PPUSH
72614: CALL_OW 428
72618: PPUSH
72619: CALL_OW 247
72623: PUSH
72624: LD_INT 3
72626: PUSH
72627: LD_INT 2
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: IN
72634: NOT
72635: AND
72636: IFFALSE 72680
// begin ComMoveXY ( unit , _x , _y ) ;
72638: LD_VAR 0 1
72642: PPUSH
72643: LD_VAR 0 5
72647: PPUSH
72648: LD_VAR 0 7
72652: PPUSH
72653: CALL_OW 111
// result := [ _x , _y ] ;
72657: LD_ADDR_VAR 0 3
72661: PUSH
72662: LD_VAR 0 5
72666: PUSH
72667: LD_VAR 0 7
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: ST_TO_ADDR
// exit ;
72676: POP
72677: POP
72678: GO 72684
// end ; end ;
72680: GO 72522
72682: POP
72683: POP
// end ;
72684: LD_VAR 0 3
72688: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72689: LD_INT 0
72691: PPUSH
72692: PPUSH
72693: PPUSH
// result := 0 ;
72694: LD_ADDR_VAR 0 3
72698: PUSH
72699: LD_INT 0
72701: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72702: LD_VAR 0 1
72706: PUSH
72707: LD_INT 0
72709: LESS
72710: IFTRUE 72722
72712: PUSH
72713: LD_VAR 0 1
72717: PUSH
72718: LD_INT 8
72720: GREATER
72721: OR
72722: IFTRUE 72734
72724: PUSH
72725: LD_VAR 0 2
72729: PUSH
72730: LD_INT 0
72732: LESS
72733: OR
72734: IFTRUE 72746
72736: PUSH
72737: LD_VAR 0 2
72741: PUSH
72742: LD_INT 8
72744: GREATER
72745: OR
72746: IFFALSE 72750
// exit ;
72748: GO 72825
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72750: LD_ADDR_VAR 0 4
72754: PUSH
72755: LD_INT 22
72757: PUSH
72758: LD_VAR 0 2
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PPUSH
72767: CALL_OW 69
72771: PUSH
72772: FOR_IN
72773: IFFALSE 72823
// begin un := UnitShoot ( i ) ;
72775: LD_ADDR_VAR 0 5
72779: PUSH
72780: LD_VAR 0 4
72784: PPUSH
72785: CALL_OW 504
72789: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72790: LD_VAR 0 5
72794: PPUSH
72795: CALL_OW 255
72799: PUSH
72800: LD_VAR 0 1
72804: EQUAL
72805: IFFALSE 72821
// begin result := un ;
72807: LD_ADDR_VAR 0 3
72811: PUSH
72812: LD_VAR 0 5
72816: ST_TO_ADDR
// exit ;
72817: POP
72818: POP
72819: GO 72825
// end ; end ;
72821: GO 72772
72823: POP
72824: POP
// end ;
72825: LD_VAR 0 3
72829: RET
// export function GetCargoBay ( units ) ; begin
72830: LD_INT 0
72832: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72833: LD_ADDR_VAR 0 2
72837: PUSH
72838: LD_VAR 0 1
72842: PPUSH
72843: LD_INT 2
72845: PUSH
72846: LD_INT 34
72848: PUSH
72849: LD_INT 12
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 34
72858: PUSH
72859: LD_INT 51
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 34
72868: PUSH
72869: LD_INT 32
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 34
72878: PUSH
72879: LD_INT 89
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: PPUSH
72893: CALL_OW 72
72897: ST_TO_ADDR
// end ;
72898: LD_VAR 0 2
72902: RET
// export function Negate ( value ) ; begin
72903: LD_INT 0
72905: PPUSH
// result := not value ;
72906: LD_ADDR_VAR 0 2
72910: PUSH
72911: LD_VAR 0 1
72915: NOT
72916: ST_TO_ADDR
// end ;
72917: LD_VAR 0 2
72921: RET
// export function Inc ( value ) ; begin
72922: LD_INT 0
72924: PPUSH
// result := value + 1 ;
72925: LD_ADDR_VAR 0 2
72929: PUSH
72930: LD_VAR 0 1
72934: PUSH
72935: LD_INT 1
72937: PLUS
72938: ST_TO_ADDR
// end ;
72939: LD_VAR 0 2
72943: RET
// export function Dec ( value ) ; begin
72944: LD_INT 0
72946: PPUSH
// result := value - 1 ;
72947: LD_ADDR_VAR 0 2
72951: PUSH
72952: LD_VAR 0 1
72956: PUSH
72957: LD_INT 1
72959: MINUS
72960: ST_TO_ADDR
// end ;
72961: LD_VAR 0 2
72965: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72966: LD_INT 0
72968: PPUSH
72969: PPUSH
72970: PPUSH
72971: PPUSH
72972: PPUSH
72973: PPUSH
72974: PPUSH
72975: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72976: LD_VAR 0 1
72980: PPUSH
72981: LD_VAR 0 2
72985: PPUSH
72986: CALL_OW 488
72990: NOT
72991: IFTRUE 73010
72993: PUSH
72994: LD_VAR 0 3
72998: PPUSH
72999: LD_VAR 0 4
73003: PPUSH
73004: CALL_OW 488
73008: NOT
73009: OR
73010: IFFALSE 73023
// begin result := - 1 ;
73012: LD_ADDR_VAR 0 5
73016: PUSH
73017: LD_INT 1
73019: NEG
73020: ST_TO_ADDR
// exit ;
73021: GO 73258
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73023: LD_ADDR_VAR 0 12
73027: PUSH
73028: LD_VAR 0 1
73032: PPUSH
73033: LD_VAR 0 2
73037: PPUSH
73038: LD_VAR 0 3
73042: PPUSH
73043: LD_VAR 0 4
73047: PPUSH
73048: CALL 72094 0 4
73052: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73053: LD_ADDR_VAR 0 11
73057: PUSH
73058: LD_VAR 0 1
73062: PPUSH
73063: LD_VAR 0 2
73067: PPUSH
73068: LD_VAR 0 12
73072: PUSH
73073: LD_INT 1
73075: ARRAY
73076: PPUSH
73077: LD_VAR 0 12
73081: PUSH
73082: LD_INT 2
73084: ARRAY
73085: PPUSH
73086: CALL_OW 298
73090: ST_TO_ADDR
// distance := 9999 ;
73091: LD_ADDR_VAR 0 10
73095: PUSH
73096: LD_INT 9999
73098: ST_TO_ADDR
// for i := 0 to 5 do
73099: LD_ADDR_VAR 0 6
73103: PUSH
73104: DOUBLE
73105: LD_INT 0
73107: DEC
73108: ST_TO_ADDR
73109: LD_INT 5
73111: PUSH
73112: FOR_TO
73113: IFFALSE 73256
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73115: LD_ADDR_VAR 0 7
73119: PUSH
73120: LD_VAR 0 1
73124: PPUSH
73125: LD_VAR 0 6
73129: PPUSH
73130: LD_VAR 0 11
73134: PPUSH
73135: CALL_OW 272
73139: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73140: LD_ADDR_VAR 0 8
73144: PUSH
73145: LD_VAR 0 2
73149: PPUSH
73150: LD_VAR 0 6
73154: PPUSH
73155: LD_VAR 0 11
73159: PPUSH
73160: CALL_OW 273
73164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73165: LD_VAR 0 7
73169: PPUSH
73170: LD_VAR 0 8
73174: PPUSH
73175: CALL_OW 488
73179: NOT
73180: IFFALSE 73184
// continue ;
73182: GO 73112
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73184: LD_ADDR_VAR 0 9
73188: PUSH
73189: LD_VAR 0 12
73193: PUSH
73194: LD_INT 1
73196: ARRAY
73197: PPUSH
73198: LD_VAR 0 12
73202: PUSH
73203: LD_INT 2
73205: ARRAY
73206: PPUSH
73207: LD_VAR 0 7
73211: PPUSH
73212: LD_VAR 0 8
73216: PPUSH
73217: CALL_OW 298
73221: ST_TO_ADDR
// if tmp < distance then
73222: LD_VAR 0 9
73226: PUSH
73227: LD_VAR 0 10
73231: LESS
73232: IFFALSE 73254
// begin result := i ;
73234: LD_ADDR_VAR 0 5
73238: PUSH
73239: LD_VAR 0 6
73243: ST_TO_ADDR
// distance := tmp ;
73244: LD_ADDR_VAR 0 10
73248: PUSH
73249: LD_VAR 0 9
73253: ST_TO_ADDR
// end ; end ;
73254: GO 73112
73256: POP
73257: POP
// end ;
73258: LD_VAR 0 5
73262: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73263: LD_INT 0
73265: PPUSH
73266: PPUSH
// if not driver or not IsInUnit ( driver ) then
73267: LD_VAR 0 1
73271: NOT
73272: IFTRUE 73286
73274: PUSH
73275: LD_VAR 0 1
73279: PPUSH
73280: CALL_OW 310
73284: NOT
73285: OR
73286: IFFALSE 73290
// exit ;
73288: GO 73380
// vehicle := IsInUnit ( driver ) ;
73290: LD_ADDR_VAR 0 3
73294: PUSH
73295: LD_VAR 0 1
73299: PPUSH
73300: CALL_OW 310
73304: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73305: LD_VAR 0 1
73309: PPUSH
73310: LD_STRING \
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: LD_INT 0
73318: PUSH
73319: LD_INT 0
73321: PUSH
73322: LD_INT 0
73324: PUSH
73325: LD_INT 0
73327: PUSH
73328: LD_INT 0
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: PUSH
73340: LD_STRING E
73342: PUSH
73343: LD_INT 0
73345: PUSH
73346: LD_INT 0
73348: PUSH
73349: LD_VAR 0 3
73353: PUSH
73354: LD_INT 0
73356: PUSH
73357: LD_INT 0
73359: PUSH
73360: LD_INT 0
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PPUSH
73376: CALL_OW 446
// end ;
73380: LD_VAR 0 2
73384: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73385: LD_INT 0
73387: PPUSH
73388: PPUSH
// if not driver or not IsInUnit ( driver ) then
73389: LD_VAR 0 1
73393: NOT
73394: IFTRUE 73408
73396: PUSH
73397: LD_VAR 0 1
73401: PPUSH
73402: CALL_OW 310
73406: NOT
73407: OR
73408: IFFALSE 73412
// exit ;
73410: GO 73502
// vehicle := IsInUnit ( driver ) ;
73412: LD_ADDR_VAR 0 3
73416: PUSH
73417: LD_VAR 0 1
73421: PPUSH
73422: CALL_OW 310
73426: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73427: LD_VAR 0 1
73431: PPUSH
73432: LD_STRING \
73434: PUSH
73435: LD_INT 0
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: LD_INT 0
73443: PUSH
73444: LD_INT 0
73446: PUSH
73447: LD_INT 0
73449: PUSH
73450: LD_INT 0
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: PUSH
73462: LD_STRING E
73464: PUSH
73465: LD_INT 0
73467: PUSH
73468: LD_INT 0
73470: PUSH
73471: LD_VAR 0 3
73475: PUSH
73476: LD_INT 0
73478: PUSH
73479: LD_INT 0
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PPUSH
73498: CALL_OW 447
// end ;
73502: LD_VAR 0 2
73506: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73507: LD_INT 0
73509: PPUSH
73510: PPUSH
73511: PPUSH
// tmp := [ ] ;
73512: LD_ADDR_VAR 0 5
73516: PUSH
73517: EMPTY
73518: ST_TO_ADDR
// for i in units do
73519: LD_ADDR_VAR 0 4
73523: PUSH
73524: LD_VAR 0 1
73528: PUSH
73529: FOR_IN
73530: IFFALSE 73568
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73532: LD_ADDR_VAR 0 5
73536: PUSH
73537: LD_VAR 0 5
73541: PPUSH
73542: LD_VAR 0 5
73546: PUSH
73547: LD_INT 1
73549: PLUS
73550: PPUSH
73551: LD_VAR 0 4
73555: PPUSH
73556: CALL_OW 256
73560: PPUSH
73561: CALL_OW 2
73565: ST_TO_ADDR
73566: GO 73529
73568: POP
73569: POP
// if not tmp then
73570: LD_VAR 0 5
73574: NOT
73575: IFFALSE 73579
// exit ;
73577: GO 73627
// if asc then
73579: LD_VAR 0 2
73583: IFFALSE 73607
// result := SortListByListAsc ( units , tmp ) else
73585: LD_ADDR_VAR 0 3
73589: PUSH
73590: LD_VAR 0 1
73594: PPUSH
73595: LD_VAR 0 5
73599: PPUSH
73600: CALL_OW 76
73604: ST_TO_ADDR
73605: GO 73627
// result := SortListByListDesc ( units , tmp ) ;
73607: LD_ADDR_VAR 0 3
73611: PUSH
73612: LD_VAR 0 1
73616: PPUSH
73617: LD_VAR 0 5
73621: PPUSH
73622: CALL_OW 77
73626: ST_TO_ADDR
// end ;
73627: LD_VAR 0 3
73631: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73632: LD_INT 0
73634: PPUSH
73635: PPUSH
// task := GetTaskList ( mech ) ;
73636: LD_ADDR_VAR 0 4
73640: PUSH
73641: LD_VAR 0 1
73645: PPUSH
73646: CALL_OW 437
73650: ST_TO_ADDR
// if not task then
73651: LD_VAR 0 4
73655: NOT
73656: IFFALSE 73660
// exit ;
73658: GO 73704
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73660: LD_ADDR_VAR 0 3
73664: PUSH
73665: LD_VAR 0 4
73669: PUSH
73670: LD_INT 1
73672: ARRAY
73673: PUSH
73674: LD_INT 1
73676: ARRAY
73677: PUSH
73678: LD_STRING r
73680: EQUAL
73681: IFFALSE 73703
73683: PUSH
73684: LD_VAR 0 4
73688: PUSH
73689: LD_INT 1
73691: ARRAY
73692: PUSH
73693: LD_INT 4
73695: ARRAY
73696: PUSH
73697: LD_VAR 0 2
73701: EQUAL
73702: AND
73703: ST_TO_ADDR
// end ;
73704: LD_VAR 0 3
73708: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73709: LD_INT 0
73711: PPUSH
// SetDir ( unit , d ) ;
73712: LD_VAR 0 1
73716: PPUSH
73717: LD_VAR 0 4
73721: PPUSH
73722: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73726: LD_ADDR_VAR 0 6
73730: PUSH
73731: LD_VAR 0 1
73735: PPUSH
73736: LD_VAR 0 2
73740: PPUSH
73741: LD_VAR 0 3
73745: PPUSH
73746: LD_VAR 0 5
73750: PPUSH
73751: CALL_OW 48
73755: ST_TO_ADDR
// end ;
73756: LD_VAR 0 6
73760: RET
// export function ToNaturalNumber ( number ) ; begin
73761: LD_INT 0
73763: PPUSH
// result := number div 1 ;
73764: LD_ADDR_VAR 0 2
73768: PUSH
73769: LD_VAR 0 1
73773: PUSH
73774: LD_INT 1
73776: DIV
73777: ST_TO_ADDR
// if number < 0 then
73778: LD_VAR 0 1
73782: PUSH
73783: LD_INT 0
73785: LESS
73786: IFFALSE 73796
// result := 0 ;
73788: LD_ADDR_VAR 0 2
73792: PUSH
73793: LD_INT 0
73795: ST_TO_ADDR
// end ;
73796: LD_VAR 0 2
73800: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73801: LD_INT 0
73803: PPUSH
73804: PPUSH
73805: PPUSH
// if not buildings then
73806: LD_VAR 0 1
73810: NOT
73811: IFFALSE 73815
// exit ;
73813: GO 73930
// tmp := [ ] ;
73815: LD_ADDR_VAR 0 5
73819: PUSH
73820: EMPTY
73821: ST_TO_ADDR
// for b in buildings do
73822: LD_ADDR_VAR 0 4
73826: PUSH
73827: LD_VAR 0 1
73831: PUSH
73832: FOR_IN
73833: IFFALSE 73871
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73835: LD_ADDR_VAR 0 5
73839: PUSH
73840: LD_VAR 0 5
73844: PPUSH
73845: LD_VAR 0 5
73849: PUSH
73850: LD_INT 1
73852: PLUS
73853: PPUSH
73854: LD_VAR 0 4
73858: PPUSH
73859: CALL_OW 266
73863: PPUSH
73864: CALL_OW 1
73868: ST_TO_ADDR
73869: GO 73832
73871: POP
73872: POP
// if not tmp then
73873: LD_VAR 0 5
73877: NOT
73878: IFFALSE 73882
// exit ;
73880: GO 73930
// if asc then
73882: LD_VAR 0 2
73886: IFFALSE 73910
// result := SortListByListAsc ( buildings , tmp ) else
73888: LD_ADDR_VAR 0 3
73892: PUSH
73893: LD_VAR 0 1
73897: PPUSH
73898: LD_VAR 0 5
73902: PPUSH
73903: CALL_OW 76
73907: ST_TO_ADDR
73908: GO 73930
// result := SortListByListDesc ( buildings , tmp ) ;
73910: LD_ADDR_VAR 0 3
73914: PUSH
73915: LD_VAR 0 1
73919: PPUSH
73920: LD_VAR 0 5
73924: PPUSH
73925: CALL_OW 77
73929: ST_TO_ADDR
// end ;
73930: LD_VAR 0 3
73934: RET
// export function SortByClass ( units , class ) ; var un ; begin
73935: LD_INT 0
73937: PPUSH
73938: PPUSH
// if not units or not class then
73939: LD_VAR 0 1
73943: NOT
73944: IFTRUE 73953
73946: PUSH
73947: LD_VAR 0 2
73951: NOT
73952: OR
73953: IFFALSE 73957
// exit ;
73955: GO 74052
// result := [ ] ;
73957: LD_ADDR_VAR 0 3
73961: PUSH
73962: EMPTY
73963: ST_TO_ADDR
// for un in units do
73964: LD_ADDR_VAR 0 4
73968: PUSH
73969: LD_VAR 0 1
73973: PUSH
73974: FOR_IN
73975: IFFALSE 74050
// if GetClass ( un ) = class then
73977: LD_VAR 0 4
73981: PPUSH
73982: CALL_OW 257
73986: PUSH
73987: LD_VAR 0 2
73991: EQUAL
73992: IFFALSE 74019
// result := Insert ( result , 1 , un ) else
73994: LD_ADDR_VAR 0 3
73998: PUSH
73999: LD_VAR 0 3
74003: PPUSH
74004: LD_INT 1
74006: PPUSH
74007: LD_VAR 0 4
74011: PPUSH
74012: CALL_OW 2
74016: ST_TO_ADDR
74017: GO 74048
// result := Replace ( result , result + 1 , un ) ;
74019: LD_ADDR_VAR 0 3
74023: PUSH
74024: LD_VAR 0 3
74028: PPUSH
74029: LD_VAR 0 3
74033: PUSH
74034: LD_INT 1
74036: PLUS
74037: PPUSH
74038: LD_VAR 0 4
74042: PPUSH
74043: CALL_OW 1
74047: ST_TO_ADDR
74048: GO 73974
74050: POP
74051: POP
// end ;
74052: LD_VAR 0 3
74056: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74057: LD_INT 0
74059: PPUSH
74060: PPUSH
74061: PPUSH
74062: PPUSH
74063: PPUSH
74064: PPUSH
74065: PPUSH
// result := [ ] ;
74066: LD_ADDR_VAR 0 4
74070: PUSH
74071: EMPTY
74072: ST_TO_ADDR
// if x - r < 0 then
74073: LD_VAR 0 1
74077: PUSH
74078: LD_VAR 0 3
74082: MINUS
74083: PUSH
74084: LD_INT 0
74086: LESS
74087: IFFALSE 74099
// min_x := 0 else
74089: LD_ADDR_VAR 0 8
74093: PUSH
74094: LD_INT 0
74096: ST_TO_ADDR
74097: GO 74115
// min_x := x - r ;
74099: LD_ADDR_VAR 0 8
74103: PUSH
74104: LD_VAR 0 1
74108: PUSH
74109: LD_VAR 0 3
74113: MINUS
74114: ST_TO_ADDR
// if y - r < 0 then
74115: LD_VAR 0 2
74119: PUSH
74120: LD_VAR 0 3
74124: MINUS
74125: PUSH
74126: LD_INT 0
74128: LESS
74129: IFFALSE 74141
// min_y := 0 else
74131: LD_ADDR_VAR 0 7
74135: PUSH
74136: LD_INT 0
74138: ST_TO_ADDR
74139: GO 74157
// min_y := y - r ;
74141: LD_ADDR_VAR 0 7
74145: PUSH
74146: LD_VAR 0 2
74150: PUSH
74151: LD_VAR 0 3
74155: MINUS
74156: ST_TO_ADDR
// max_x := x + r ;
74157: LD_ADDR_VAR 0 9
74161: PUSH
74162: LD_VAR 0 1
74166: PUSH
74167: LD_VAR 0 3
74171: PLUS
74172: ST_TO_ADDR
// max_y := y + r ;
74173: LD_ADDR_VAR 0 10
74177: PUSH
74178: LD_VAR 0 2
74182: PUSH
74183: LD_VAR 0 3
74187: PLUS
74188: ST_TO_ADDR
// for _x = min_x to max_x do
74189: LD_ADDR_VAR 0 5
74193: PUSH
74194: DOUBLE
74195: LD_VAR 0 8
74199: DEC
74200: ST_TO_ADDR
74201: LD_VAR 0 9
74205: PUSH
74206: FOR_TO
74207: IFFALSE 74308
// for _y = min_y to max_y do
74209: LD_ADDR_VAR 0 6
74213: PUSH
74214: DOUBLE
74215: LD_VAR 0 7
74219: DEC
74220: ST_TO_ADDR
74221: LD_VAR 0 10
74225: PUSH
74226: FOR_TO
74227: IFFALSE 74304
// begin if not ValidHex ( _x , _y ) then
74229: LD_VAR 0 5
74233: PPUSH
74234: LD_VAR 0 6
74238: PPUSH
74239: CALL_OW 488
74243: NOT
74244: IFFALSE 74248
// continue ;
74246: GO 74226
// if GetResourceTypeXY ( _x , _y ) then
74248: LD_VAR 0 5
74252: PPUSH
74253: LD_VAR 0 6
74257: PPUSH
74258: CALL_OW 283
74262: IFFALSE 74302
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74264: LD_ADDR_VAR 0 4
74268: PUSH
74269: LD_VAR 0 4
74273: PPUSH
74274: LD_VAR 0 4
74278: PUSH
74279: LD_INT 1
74281: PLUS
74282: PPUSH
74283: LD_VAR 0 5
74287: PUSH
74288: LD_VAR 0 6
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PPUSH
74297: CALL_OW 1
74301: ST_TO_ADDR
// end ;
74302: GO 74226
74304: POP
74305: POP
74306: GO 74206
74308: POP
74309: POP
// end ;
74310: LD_VAR 0 4
74314: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74315: LD_INT 0
74317: PPUSH
74318: PPUSH
74319: PPUSH
74320: PPUSH
74321: PPUSH
74322: PPUSH
74323: PPUSH
74324: PPUSH
// if not units then
74325: LD_VAR 0 1
74329: NOT
74330: IFFALSE 74334
// exit ;
74332: GO 74866
// result := UnitFilter ( units , [ f_ok ] ) ;
74334: LD_ADDR_VAR 0 3
74338: PUSH
74339: LD_VAR 0 1
74343: PPUSH
74344: LD_INT 50
74346: PUSH
74347: EMPTY
74348: LIST
74349: PPUSH
74350: CALL_OW 72
74354: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74355: LD_ADDR_VAR 0 8
74359: PUSH
74360: LD_VAR 0 1
74364: PUSH
74365: LD_INT 1
74367: ARRAY
74368: PPUSH
74369: CALL_OW 255
74373: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74374: LD_ADDR_VAR 0 10
74378: PUSH
74379: LD_INT 29
74381: PUSH
74382: LD_INT 91
74384: PUSH
74385: LD_INT 49
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: ST_TO_ADDR
// if not result then
74393: LD_VAR 0 3
74397: NOT
74398: IFFALSE 74402
// exit ;
74400: GO 74866
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74402: LD_ADDR_VAR 0 5
74406: PUSH
74407: LD_INT 81
74409: PUSH
74410: LD_VAR 0 8
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PPUSH
74419: CALL_OW 69
74423: ST_TO_ADDR
// for i in result do
74424: LD_ADDR_VAR 0 4
74428: PUSH
74429: LD_VAR 0 3
74433: PUSH
74434: FOR_IN
74435: IFFALSE 74864
// begin tag := GetTag ( i ) + 1 ;
74437: LD_ADDR_VAR 0 9
74441: PUSH
74442: LD_VAR 0 4
74446: PPUSH
74447: CALL_OW 110
74451: PUSH
74452: LD_INT 1
74454: PLUS
74455: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74456: LD_ADDR_VAR 0 7
74460: PUSH
74461: LD_VAR 0 4
74465: PPUSH
74466: CALL_OW 250
74470: PPUSH
74471: LD_VAR 0 4
74475: PPUSH
74476: CALL_OW 251
74480: PPUSH
74481: LD_INT 4
74483: PPUSH
74484: CALL 74057 0 3
74488: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74489: LD_VAR 0 4
74493: PPUSH
74494: CALL_OW 247
74498: PUSH
74499: LD_INT 2
74501: EQUAL
74502: IFFALSE 74514
74504: PUSH
74505: LD_VAR 0 7
74509: PUSH
74510: LD_INT 2
74512: GREATER
74513: AND
74514: IFFALSE 74534
74516: PUSH
74517: LD_VAR 0 4
74521: PPUSH
74522: CALL_OW 264
74526: PUSH
74527: LD_VAR 0 10
74531: IN
74532: NOT
74533: AND
74534: IFFALSE 74573
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74536: LD_VAR 0 4
74540: PPUSH
74541: LD_VAR 0 7
74545: PUSH
74546: LD_INT 1
74548: ARRAY
74549: PUSH
74550: LD_INT 1
74552: ARRAY
74553: PPUSH
74554: LD_VAR 0 7
74558: PUSH
74559: LD_INT 1
74561: ARRAY
74562: PUSH
74563: LD_INT 2
74565: ARRAY
74566: PPUSH
74567: CALL_OW 116
74571: GO 74862
// if path > tag then
74573: LD_VAR 0 2
74577: PUSH
74578: LD_VAR 0 9
74582: GREATER
74583: IFFALSE 74791
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74585: LD_ADDR_VAR 0 6
74589: PUSH
74590: LD_VAR 0 5
74594: PPUSH
74595: LD_INT 91
74597: PUSH
74598: LD_VAR 0 4
74602: PUSH
74603: LD_INT 8
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: LIST
74610: PPUSH
74611: CALL_OW 72
74615: ST_TO_ADDR
// if nearEnemy then
74616: LD_VAR 0 6
74620: IFFALSE 74689
// begin if GetWeapon ( i ) = ru_time_lapser then
74622: LD_VAR 0 4
74626: PPUSH
74627: CALL_OW 264
74631: PUSH
74632: LD_INT 49
74634: EQUAL
74635: IFFALSE 74663
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74637: LD_VAR 0 4
74641: PPUSH
74642: LD_VAR 0 6
74646: PPUSH
74647: LD_VAR 0 4
74651: PPUSH
74652: CALL_OW 74
74656: PPUSH
74657: CALL_OW 112
74661: GO 74687
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74663: LD_VAR 0 4
74667: PPUSH
74668: LD_VAR 0 6
74672: PPUSH
74673: LD_VAR 0 4
74677: PPUSH
74678: CALL_OW 74
74682: PPUSH
74683: CALL 75947 0 2
// end else
74687: GO 74789
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74689: LD_VAR 0 4
74693: PPUSH
74694: LD_VAR 0 2
74698: PUSH
74699: LD_VAR 0 9
74703: ARRAY
74704: PUSH
74705: LD_INT 1
74707: ARRAY
74708: PPUSH
74709: LD_VAR 0 2
74713: PUSH
74714: LD_VAR 0 9
74718: ARRAY
74719: PUSH
74720: LD_INT 2
74722: ARRAY
74723: PPUSH
74724: CALL_OW 297
74728: PUSH
74729: LD_INT 6
74731: GREATER
74732: IFFALSE 74775
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74734: LD_VAR 0 4
74738: PPUSH
74739: LD_VAR 0 2
74743: PUSH
74744: LD_VAR 0 9
74748: ARRAY
74749: PUSH
74750: LD_INT 1
74752: ARRAY
74753: PPUSH
74754: LD_VAR 0 2
74758: PUSH
74759: LD_VAR 0 9
74763: ARRAY
74764: PUSH
74765: LD_INT 2
74767: ARRAY
74768: PPUSH
74769: CALL_OW 114
74773: GO 74789
// SetTag ( i , tag ) ;
74775: LD_VAR 0 4
74779: PPUSH
74780: LD_VAR 0 9
74784: PPUSH
74785: CALL_OW 109
// end else
74789: GO 74862
// if enemy then
74791: LD_VAR 0 5
74795: IFFALSE 74862
// begin if GetWeapon ( i ) = ru_time_lapser then
74797: LD_VAR 0 4
74801: PPUSH
74802: CALL_OW 264
74806: PUSH
74807: LD_INT 49
74809: EQUAL
74810: IFFALSE 74838
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74812: LD_VAR 0 4
74816: PPUSH
74817: LD_VAR 0 5
74821: PPUSH
74822: LD_VAR 0 4
74826: PPUSH
74827: CALL_OW 74
74831: PPUSH
74832: CALL_OW 112
74836: GO 74862
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74838: LD_VAR 0 4
74842: PPUSH
74843: LD_VAR 0 5
74847: PPUSH
74848: LD_VAR 0 4
74852: PPUSH
74853: CALL_OW 74
74857: PPUSH
74858: CALL 75947 0 2
// end ; end ;
74862: GO 74434
74864: POP
74865: POP
// end ;
74866: LD_VAR 0 3
74870: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74871: LD_INT 0
74873: PPUSH
74874: PPUSH
74875: PPUSH
// if not unit or IsInUnit ( unit ) then
74876: LD_VAR 0 1
74880: NOT
74881: IFTRUE 74894
74883: PUSH
74884: LD_VAR 0 1
74888: PPUSH
74889: CALL_OW 310
74893: OR
74894: IFFALSE 74898
// exit ;
74896: GO 74989
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74898: LD_ADDR_VAR 0 4
74902: PUSH
74903: LD_VAR 0 1
74907: PPUSH
74908: CALL_OW 250
74912: PPUSH
74913: LD_VAR 0 2
74917: PPUSH
74918: LD_INT 1
74920: PPUSH
74921: CALL_OW 272
74925: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74926: LD_ADDR_VAR 0 5
74930: PUSH
74931: LD_VAR 0 1
74935: PPUSH
74936: CALL_OW 251
74940: PPUSH
74941: LD_VAR 0 2
74945: PPUSH
74946: LD_INT 1
74948: PPUSH
74949: CALL_OW 273
74953: ST_TO_ADDR
// if ValidHex ( x , y ) then
74954: LD_VAR 0 4
74958: PPUSH
74959: LD_VAR 0 5
74963: PPUSH
74964: CALL_OW 488
74968: IFFALSE 74989
// ComTurnXY ( unit , x , y ) ;
74970: LD_VAR 0 1
74974: PPUSH
74975: LD_VAR 0 4
74979: PPUSH
74980: LD_VAR 0 5
74984: PPUSH
74985: CALL_OW 118
// end ;
74989: LD_VAR 0 3
74993: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74994: LD_INT 0
74996: PPUSH
74997: PPUSH
// result := false ;
74998: LD_ADDR_VAR 0 3
75002: PUSH
75003: LD_INT 0
75005: ST_TO_ADDR
// if not units then
75006: LD_VAR 0 2
75010: NOT
75011: IFFALSE 75015
// exit ;
75013: GO 75060
// for i in units do
75015: LD_ADDR_VAR 0 4
75019: PUSH
75020: LD_VAR 0 2
75024: PUSH
75025: FOR_IN
75026: IFFALSE 75058
// if See ( side , i ) then
75028: LD_VAR 0 1
75032: PPUSH
75033: LD_VAR 0 4
75037: PPUSH
75038: CALL_OW 292
75042: IFFALSE 75056
// begin result := true ;
75044: LD_ADDR_VAR 0 3
75048: PUSH
75049: LD_INT 1
75051: ST_TO_ADDR
// exit ;
75052: POP
75053: POP
75054: GO 75060
// end ;
75056: GO 75025
75058: POP
75059: POP
// end ;
75060: LD_VAR 0 3
75064: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75065: LD_INT 0
75067: PPUSH
75068: PPUSH
75069: PPUSH
75070: PPUSH
// if not unit or not points then
75071: LD_VAR 0 1
75075: NOT
75076: IFTRUE 75085
75078: PUSH
75079: LD_VAR 0 2
75083: NOT
75084: OR
75085: IFFALSE 75089
// exit ;
75087: GO 75179
// dist := 99999 ;
75089: LD_ADDR_VAR 0 5
75093: PUSH
75094: LD_INT 99999
75096: ST_TO_ADDR
// for i in points do
75097: LD_ADDR_VAR 0 4
75101: PUSH
75102: LD_VAR 0 2
75106: PUSH
75107: FOR_IN
75108: IFFALSE 75177
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75110: LD_ADDR_VAR 0 6
75114: PUSH
75115: LD_VAR 0 1
75119: PPUSH
75120: LD_VAR 0 4
75124: PUSH
75125: LD_INT 1
75127: ARRAY
75128: PPUSH
75129: LD_VAR 0 4
75133: PUSH
75134: LD_INT 2
75136: ARRAY
75137: PPUSH
75138: CALL_OW 297
75142: ST_TO_ADDR
// if tmpDist < dist then
75143: LD_VAR 0 6
75147: PUSH
75148: LD_VAR 0 5
75152: LESS
75153: IFFALSE 75175
// begin result := i ;
75155: LD_ADDR_VAR 0 3
75159: PUSH
75160: LD_VAR 0 4
75164: ST_TO_ADDR
// dist := tmpDist ;
75165: LD_ADDR_VAR 0 5
75169: PUSH
75170: LD_VAR 0 6
75174: ST_TO_ADDR
// end ; end ;
75175: GO 75107
75177: POP
75178: POP
// end ;
75179: LD_VAR 0 3
75183: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75184: LD_INT 0
75186: PPUSH
// uc_side := side ;
75187: LD_ADDR_OWVAR 20
75191: PUSH
75192: LD_VAR 0 1
75196: ST_TO_ADDR
// uc_nation := 3 ;
75197: LD_ADDR_OWVAR 21
75201: PUSH
75202: LD_INT 3
75204: ST_TO_ADDR
// vc_chassis := 25 ;
75205: LD_ADDR_OWVAR 37
75209: PUSH
75210: LD_INT 25
75212: ST_TO_ADDR
// vc_engine := engine_siberite ;
75213: LD_ADDR_OWVAR 39
75217: PUSH
75218: LD_INT 3
75220: ST_TO_ADDR
// vc_control := control_computer ;
75221: LD_ADDR_OWVAR 38
75225: PUSH
75226: LD_INT 3
75228: ST_TO_ADDR
// vc_weapon := 59 ;
75229: LD_ADDR_OWVAR 40
75233: PUSH
75234: LD_INT 59
75236: ST_TO_ADDR
// result := CreateVehicle ;
75237: LD_ADDR_VAR 0 5
75241: PUSH
75242: CALL_OW 45
75246: ST_TO_ADDR
// SetDir ( result , d ) ;
75247: LD_VAR 0 5
75251: PPUSH
75252: LD_VAR 0 4
75256: PPUSH
75257: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75261: LD_VAR 0 5
75265: PPUSH
75266: LD_VAR 0 2
75270: PPUSH
75271: LD_VAR 0 3
75275: PPUSH
75276: LD_INT 0
75278: PPUSH
75279: CALL_OW 48
// end ;
75283: LD_VAR 0 5
75287: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75288: LD_INT 0
75290: PPUSH
75291: PPUSH
75292: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75293: LD_ADDR_VAR 0 2
75297: PUSH
75298: LD_INT 0
75300: PUSH
75301: LD_INT 0
75303: PUSH
75304: LD_INT 0
75306: PUSH
75307: LD_INT 0
75309: PUSH
75310: EMPTY
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75316: LD_VAR 0 1
75320: NOT
75321: IFTRUE 75354
75323: PUSH
75324: LD_VAR 0 1
75328: PPUSH
75329: CALL_OW 264
75333: PUSH
75334: LD_INT 12
75336: PUSH
75337: LD_INT 51
75339: PUSH
75340: LD_INT 32
75342: PUSH
75343: LD_INT 89
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: IN
75352: NOT
75353: OR
75354: IFFALSE 75358
// exit ;
75356: GO 75456
// for i := 1 to 3 do
75358: LD_ADDR_VAR 0 3
75362: PUSH
75363: DOUBLE
75364: LD_INT 1
75366: DEC
75367: ST_TO_ADDR
75368: LD_INT 3
75370: PUSH
75371: FOR_TO
75372: IFFALSE 75454
// begin tmp := GetCargo ( cargo , i ) ;
75374: LD_ADDR_VAR 0 4
75378: PUSH
75379: LD_VAR 0 1
75383: PPUSH
75384: LD_VAR 0 3
75388: PPUSH
75389: CALL_OW 289
75393: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75394: LD_ADDR_VAR 0 2
75398: PUSH
75399: LD_VAR 0 2
75403: PPUSH
75404: LD_VAR 0 3
75408: PPUSH
75409: LD_VAR 0 4
75413: PPUSH
75414: CALL_OW 1
75418: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75419: LD_ADDR_VAR 0 2
75423: PUSH
75424: LD_VAR 0 2
75428: PPUSH
75429: LD_INT 4
75431: PPUSH
75432: LD_VAR 0 2
75436: PUSH
75437: LD_INT 4
75439: ARRAY
75440: PUSH
75441: LD_VAR 0 4
75445: PLUS
75446: PPUSH
75447: CALL_OW 1
75451: ST_TO_ADDR
// end ;
75452: GO 75371
75454: POP
75455: POP
// end ;
75456: LD_VAR 0 2
75460: RET
// export function Length ( array ) ; begin
75461: LD_INT 0
75463: PPUSH
// result := array + 0 ;
75464: LD_ADDR_VAR 0 2
75468: PUSH
75469: LD_VAR 0 1
75473: PUSH
75474: LD_INT 0
75476: PLUS
75477: ST_TO_ADDR
// end ;
75478: LD_VAR 0 2
75482: RET
// export function PrepareArray ( array ) ; begin
75483: LD_INT 0
75485: PPUSH
// result := array diff 0 ;
75486: LD_ADDR_VAR 0 2
75490: PUSH
75491: LD_VAR 0 1
75495: PUSH
75496: LD_INT 0
75498: DIFF
75499: ST_TO_ADDR
// if not result [ 1 ] then
75500: LD_VAR 0 2
75504: PUSH
75505: LD_INT 1
75507: ARRAY
75508: NOT
75509: IFFALSE 75529
// result := Delete ( result , 1 ) ;
75511: LD_ADDR_VAR 0 2
75515: PUSH
75516: LD_VAR 0 2
75520: PPUSH
75521: LD_INT 1
75523: PPUSH
75524: CALL_OW 3
75528: ST_TO_ADDR
// end ;
75529: LD_VAR 0 2
75533: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75534: LD_INT 0
75536: PPUSH
75537: PPUSH
75538: PPUSH
75539: PPUSH
// sibRocketRange := 25 ;
75540: LD_ADDR_VAR 0 6
75544: PUSH
75545: LD_INT 25
75547: ST_TO_ADDR
// result := false ;
75548: LD_ADDR_VAR 0 4
75552: PUSH
75553: LD_INT 0
75555: ST_TO_ADDR
// for i := 0 to 5 do
75556: LD_ADDR_VAR 0 5
75560: PUSH
75561: DOUBLE
75562: LD_INT 0
75564: DEC
75565: ST_TO_ADDR
75566: LD_INT 5
75568: PUSH
75569: FOR_TO
75570: IFFALSE 75637
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75572: LD_VAR 0 1
75576: PPUSH
75577: LD_VAR 0 5
75581: PPUSH
75582: LD_VAR 0 6
75586: PPUSH
75587: CALL_OW 272
75591: PPUSH
75592: LD_VAR 0 2
75596: PPUSH
75597: LD_VAR 0 5
75601: PPUSH
75602: LD_VAR 0 6
75606: PPUSH
75607: CALL_OW 273
75611: PPUSH
75612: LD_VAR 0 3
75616: PPUSH
75617: CALL_OW 309
75621: IFFALSE 75635
// begin result := true ;
75623: LD_ADDR_VAR 0 4
75627: PUSH
75628: LD_INT 1
75630: ST_TO_ADDR
// exit ;
75631: POP
75632: POP
75633: GO 75639
// end ;
75635: GO 75569
75637: POP
75638: POP
// end ;
75639: LD_VAR 0 4
75643: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75644: LD_INT 0
75646: PPUSH
75647: PPUSH
75648: PPUSH
// if btype = b_depot then
75649: LD_VAR 0 2
75653: PUSH
75654: LD_INT 0
75656: EQUAL
75657: IFFALSE 75669
// begin result := true ;
75659: LD_ADDR_VAR 0 3
75663: PUSH
75664: LD_INT 1
75666: ST_TO_ADDR
// exit ;
75667: GO 75789
// end ; pom := GetBase ( depot ) ;
75669: LD_ADDR_VAR 0 4
75673: PUSH
75674: LD_VAR 0 1
75678: PPUSH
75679: CALL_OW 274
75683: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75684: LD_ADDR_VAR 0 5
75688: PUSH
75689: LD_VAR 0 2
75693: PPUSH
75694: LD_VAR 0 1
75698: PPUSH
75699: CALL_OW 248
75703: PPUSH
75704: CALL_OW 450
75708: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75709: LD_ADDR_VAR 0 3
75713: PUSH
75714: LD_VAR 0 4
75718: PPUSH
75719: LD_INT 1
75721: PPUSH
75722: CALL_OW 275
75726: PUSH
75727: LD_VAR 0 5
75731: PUSH
75732: LD_INT 1
75734: ARRAY
75735: GREATEREQUAL
75736: IFFALSE 75762
75738: PUSH
75739: LD_VAR 0 4
75743: PPUSH
75744: LD_INT 2
75746: PPUSH
75747: CALL_OW 275
75751: PUSH
75752: LD_VAR 0 5
75756: PUSH
75757: LD_INT 2
75759: ARRAY
75760: GREATEREQUAL
75761: AND
75762: IFFALSE 75788
75764: PUSH
75765: LD_VAR 0 4
75769: PPUSH
75770: LD_INT 3
75772: PPUSH
75773: CALL_OW 275
75777: PUSH
75778: LD_VAR 0 5
75782: PUSH
75783: LD_INT 3
75785: ARRAY
75786: GREATEREQUAL
75787: AND
75788: ST_TO_ADDR
// end ;
75789: LD_VAR 0 3
75793: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75794: LD_INT 0
75796: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75797: LD_VAR 0 1
75801: PPUSH
75802: LD_VAR 0 2
75806: PPUSH
75807: LD_INT 0
75809: PPUSH
75810: LD_INT 0
75812: PPUSH
75813: LD_INT 1
75815: PPUSH
75816: LD_INT 0
75818: PPUSH
75819: CALL_OW 587
// end ;
75823: LD_VAR 0 3
75827: RET
// export function CenterOnNow ( unit ) ; begin
75828: LD_INT 0
75830: PPUSH
// result := IsInUnit ( unit ) ;
75831: LD_ADDR_VAR 0 2
75835: PUSH
75836: LD_VAR 0 1
75840: PPUSH
75841: CALL_OW 310
75845: ST_TO_ADDR
// if not result then
75846: LD_VAR 0 2
75850: NOT
75851: IFFALSE 75863
// result := unit ;
75853: LD_ADDR_VAR 0 2
75857: PUSH
75858: LD_VAR 0 1
75862: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75863: LD_VAR 0 1
75867: PPUSH
75868: CALL_OW 87
// end ;
75872: LD_VAR 0 2
75876: RET
// export function ComMoveHex ( unit , hex ) ; begin
75877: LD_INT 0
75879: PPUSH
// if not hex then
75880: LD_VAR 0 2
75884: NOT
75885: IFFALSE 75889
// exit ;
75887: GO 75942
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75889: LD_VAR 0 2
75893: PUSH
75894: LD_INT 1
75896: ARRAY
75897: PPUSH
75898: LD_VAR 0 2
75902: PUSH
75903: LD_INT 2
75905: ARRAY
75906: PPUSH
75907: CALL_OW 428
75911: IFFALSE 75915
// exit ;
75913: GO 75942
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75915: LD_VAR 0 1
75919: PPUSH
75920: LD_VAR 0 2
75924: PUSH
75925: LD_INT 1
75927: ARRAY
75928: PPUSH
75929: LD_VAR 0 2
75933: PUSH
75934: LD_INT 2
75936: ARRAY
75937: PPUSH
75938: CALL_OW 111
// end ;
75942: LD_VAR 0 3
75946: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75947: LD_INT 0
75949: PPUSH
75950: PPUSH
75951: PPUSH
// if not unit or not enemy then
75952: LD_VAR 0 1
75956: NOT
75957: IFTRUE 75966
75959: PUSH
75960: LD_VAR 0 2
75964: NOT
75965: OR
75966: IFFALSE 75970
// exit ;
75968: GO 76096
// x := GetX ( enemy ) ;
75970: LD_ADDR_VAR 0 4
75974: PUSH
75975: LD_VAR 0 2
75979: PPUSH
75980: CALL_OW 250
75984: ST_TO_ADDR
// y := GetY ( enemy ) ;
75985: LD_ADDR_VAR 0 5
75989: PUSH
75990: LD_VAR 0 2
75994: PPUSH
75995: CALL_OW 251
75999: ST_TO_ADDR
// if ValidHex ( x , y ) then
76000: LD_VAR 0 4
76004: PPUSH
76005: LD_VAR 0 5
76009: PPUSH
76010: CALL_OW 488
76014: IFFALSE 76096
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76016: LD_VAR 0 2
76020: PPUSH
76021: CALL_OW 247
76025: PUSH
76026: LD_INT 3
76028: PUSH
76029: LD_INT 2
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: IN
76036: IFTRUE 76059
76038: PUSH
76039: LD_VAR 0 1
76043: PPUSH
76044: CALL_OW 255
76048: PPUSH
76049: LD_VAR 0 2
76053: PPUSH
76054: CALL_OW 292
76058: OR
76059: IFFALSE 76077
// ComAttackUnit ( unit , enemy ) else
76061: LD_VAR 0 1
76065: PPUSH
76066: LD_VAR 0 2
76070: PPUSH
76071: CALL_OW 115
76075: GO 76096
// ComAgressiveMove ( unit , x , y ) ;
76077: LD_VAR 0 1
76081: PPUSH
76082: LD_VAR 0 4
76086: PPUSH
76087: LD_VAR 0 5
76091: PPUSH
76092: CALL_OW 114
// end ;
76096: LD_VAR 0 3
76100: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76101: LD_INT 0
76103: PPUSH
76104: PPUSH
76105: PPUSH
// list := AreaToList ( area , 0 ) ;
76106: LD_ADDR_VAR 0 5
76110: PUSH
76111: LD_VAR 0 1
76115: PPUSH
76116: LD_INT 0
76118: PPUSH
76119: CALL_OW 517
76123: ST_TO_ADDR
// if not list then
76124: LD_VAR 0 5
76128: NOT
76129: IFFALSE 76133
// exit ;
76131: GO 76263
// if all then
76133: LD_VAR 0 2
76137: IFFALSE 76225
// begin for i := 1 to list [ 1 ] do
76139: LD_ADDR_VAR 0 4
76143: PUSH
76144: DOUBLE
76145: LD_INT 1
76147: DEC
76148: ST_TO_ADDR
76149: LD_VAR 0 5
76153: PUSH
76154: LD_INT 1
76156: ARRAY
76157: PUSH
76158: FOR_TO
76159: IFFALSE 76221
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76161: LD_ADDR_VAR 0 3
76165: PUSH
76166: LD_VAR 0 3
76170: PPUSH
76171: LD_VAR 0 3
76175: PUSH
76176: LD_INT 1
76178: PLUS
76179: PPUSH
76180: LD_VAR 0 5
76184: PUSH
76185: LD_INT 1
76187: ARRAY
76188: PUSH
76189: LD_VAR 0 4
76193: ARRAY
76194: PUSH
76195: LD_VAR 0 5
76199: PUSH
76200: LD_INT 2
76202: ARRAY
76203: PUSH
76204: LD_VAR 0 4
76208: ARRAY
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PPUSH
76214: CALL_OW 1
76218: ST_TO_ADDR
76219: GO 76158
76221: POP
76222: POP
// exit ;
76223: GO 76263
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76225: LD_ADDR_VAR 0 3
76229: PUSH
76230: LD_VAR 0 5
76234: PUSH
76235: LD_INT 1
76237: ARRAY
76238: PUSH
76239: LD_INT 1
76241: ARRAY
76242: PUSH
76243: LD_VAR 0 5
76247: PUSH
76248: LD_INT 2
76250: ARRAY
76251: PUSH
76252: LD_INT 1
76254: ARRAY
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PUSH
76260: EMPTY
76261: LIST
76262: ST_TO_ADDR
// end ;
76263: LD_VAR 0 3
76267: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76268: LD_INT 0
76270: PPUSH
76271: PPUSH
// list := AreaToList ( area , 0 ) ;
76272: LD_ADDR_VAR 0 4
76276: PUSH
76277: LD_VAR 0 1
76281: PPUSH
76282: LD_INT 0
76284: PPUSH
76285: CALL_OW 517
76289: ST_TO_ADDR
// if not list then
76290: LD_VAR 0 4
76294: NOT
76295: IFFALSE 76299
// exit ;
76297: GO 76340
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76299: LD_ADDR_VAR 0 3
76303: PUSH
76304: LD_VAR 0 4
76308: PUSH
76309: LD_INT 1
76311: ARRAY
76312: PUSH
76313: LD_INT 1
76315: ARRAY
76316: PUSH
76317: LD_VAR 0 4
76321: PUSH
76322: LD_INT 2
76324: ARRAY
76325: PUSH
76326: LD_INT 1
76328: ARRAY
76329: PUSH
76330: LD_VAR 0 2
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: LIST
76339: ST_TO_ADDR
// end ;
76340: LD_VAR 0 3
76344: RET
// export function First ( array ) ; begin
76345: LD_INT 0
76347: PPUSH
// if not array then
76348: LD_VAR 0 1
76352: NOT
76353: IFFALSE 76357
// exit ;
76355: GO 76371
// result := array [ 1 ] ;
76357: LD_ADDR_VAR 0 2
76361: PUSH
76362: LD_VAR 0 1
76366: PUSH
76367: LD_INT 1
76369: ARRAY
76370: ST_TO_ADDR
// end ;
76371: LD_VAR 0 2
76375: RET
// export function Last ( array ) ; begin
76376: LD_INT 0
76378: PPUSH
// if not array then
76379: LD_VAR 0 1
76383: NOT
76384: IFFALSE 76388
// exit ;
76386: GO 76404
// result := array [ array ] ;
76388: LD_ADDR_VAR 0 2
76392: PUSH
76393: LD_VAR 0 1
76397: PUSH
76398: LD_VAR 0 1
76402: ARRAY
76403: ST_TO_ADDR
// end ;
76404: LD_VAR 0 2
76408: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76409: LD_INT 0
76411: PPUSH
76412: PPUSH
// result := [ ] ;
76413: LD_ADDR_VAR 0 5
76417: PUSH
76418: EMPTY
76419: ST_TO_ADDR
// if not array then
76420: LD_VAR 0 1
76424: NOT
76425: IFFALSE 76429
// exit ;
76427: GO 76541
// for i := 1 to array do
76429: LD_ADDR_VAR 0 6
76433: PUSH
76434: DOUBLE
76435: LD_INT 1
76437: DEC
76438: ST_TO_ADDR
76439: LD_VAR 0 1
76443: PUSH
76444: FOR_TO
76445: IFFALSE 76539
// if array [ i ] [ index ] = value then
76447: LD_VAR 0 1
76451: PUSH
76452: LD_VAR 0 6
76456: ARRAY
76457: PUSH
76458: LD_VAR 0 2
76462: ARRAY
76463: PUSH
76464: LD_VAR 0 3
76468: EQUAL
76469: IFFALSE 76537
// begin if indexColumn then
76471: LD_VAR 0 4
76475: IFFALSE 76511
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76477: LD_ADDR_VAR 0 5
76481: PUSH
76482: LD_VAR 0 5
76486: PPUSH
76487: LD_VAR 0 1
76491: PUSH
76492: LD_VAR 0 6
76496: ARRAY
76497: PUSH
76498: LD_VAR 0 4
76502: ARRAY
76503: PPUSH
76504: CALL 71549 0 2
76508: ST_TO_ADDR
76509: GO 76537
// result := Join ( result , array [ i ] ) ;
76511: LD_ADDR_VAR 0 5
76515: PUSH
76516: LD_VAR 0 5
76520: PPUSH
76521: LD_VAR 0 1
76525: PUSH
76526: LD_VAR 0 6
76530: ARRAY
76531: PPUSH
76532: CALL 71549 0 2
76536: ST_TO_ADDR
// end ;
76537: GO 76444
76539: POP
76540: POP
// end ;
76541: LD_VAR 0 5
76545: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76546: LD_INT 0
76548: PPUSH
// if not vehicles or not parkingPoint then
76549: LD_VAR 0 1
76553: NOT
76554: IFTRUE 76563
76556: PUSH
76557: LD_VAR 0 2
76561: NOT
76562: OR
76563: IFFALSE 76567
// exit ;
76565: GO 76665
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76567: LD_ADDR_VAR 0 1
76571: PUSH
76572: LD_VAR 0 1
76576: PPUSH
76577: LD_INT 50
76579: PUSH
76580: EMPTY
76581: LIST
76582: PUSH
76583: LD_INT 3
76585: PUSH
76586: LD_INT 92
76588: PUSH
76589: LD_VAR 0 2
76593: PUSH
76594: LD_INT 1
76596: ARRAY
76597: PUSH
76598: LD_VAR 0 2
76602: PUSH
76603: LD_INT 2
76605: ARRAY
76606: PUSH
76607: LD_INT 8
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PPUSH
76624: CALL_OW 72
76628: ST_TO_ADDR
// if not vehicles then
76629: LD_VAR 0 1
76633: NOT
76634: IFFALSE 76638
// exit ;
76636: GO 76665
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76638: LD_VAR 0 1
76642: PPUSH
76643: LD_VAR 0 2
76647: PUSH
76648: LD_INT 1
76650: ARRAY
76651: PPUSH
76652: LD_VAR 0 2
76656: PUSH
76657: LD_INT 2
76659: ARRAY
76660: PPUSH
76661: CALL_OW 111
// end ;
76665: LD_VAR 0 3
76669: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76670: LD_INT 0
76672: PPUSH
76673: PPUSH
76674: PPUSH
// if not side or not area then
76675: LD_VAR 0 1
76679: NOT
76680: IFTRUE 76689
76682: PUSH
76683: LD_VAR 0 2
76687: NOT
76688: OR
76689: IFFALSE 76693
// exit ;
76691: GO 76812
// tmp := AreaToList ( area , 0 ) ;
76693: LD_ADDR_VAR 0 5
76697: PUSH
76698: LD_VAR 0 2
76702: PPUSH
76703: LD_INT 0
76705: PPUSH
76706: CALL_OW 517
76710: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76711: LD_ADDR_VAR 0 4
76715: PUSH
76716: DOUBLE
76717: LD_INT 1
76719: DEC
76720: ST_TO_ADDR
76721: LD_VAR 0 5
76725: PUSH
76726: LD_INT 1
76728: ARRAY
76729: PUSH
76730: FOR_TO
76731: IFFALSE 76810
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76733: LD_VAR 0 5
76737: PUSH
76738: LD_INT 1
76740: ARRAY
76741: PUSH
76742: LD_VAR 0 4
76746: ARRAY
76747: PPUSH
76748: LD_VAR 0 5
76752: PUSH
76753: LD_INT 2
76755: ARRAY
76756: PUSH
76757: LD_VAR 0 4
76761: ARRAY
76762: PPUSH
76763: CALL_OW 351
76767: IFFALSE 76808
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76769: LD_VAR 0 5
76773: PUSH
76774: LD_INT 1
76776: ARRAY
76777: PUSH
76778: LD_VAR 0 4
76782: ARRAY
76783: PPUSH
76784: LD_VAR 0 5
76788: PUSH
76789: LD_INT 2
76791: ARRAY
76792: PUSH
76793: LD_VAR 0 4
76797: ARRAY
76798: PPUSH
76799: LD_VAR 0 1
76803: PPUSH
76804: CALL_OW 244
// end ;
76808: GO 76730
76810: POP
76811: POP
// end ;
76812: LD_VAR 0 3
76816: RET
// export function UniqueArray ( array ) ; var i ; begin
76817: LD_INT 0
76819: PPUSH
76820: PPUSH
// result := [ ] ;
76821: LD_ADDR_VAR 0 2
76825: PUSH
76826: EMPTY
76827: ST_TO_ADDR
// if not array then
76828: LD_VAR 0 1
76832: NOT
76833: IFFALSE 76837
// exit ;
76835: GO 76898
// for i := 1 to array do
76837: LD_ADDR_VAR 0 3
76841: PUSH
76842: DOUBLE
76843: LD_INT 1
76845: DEC
76846: ST_TO_ADDR
76847: LD_VAR 0 1
76851: PUSH
76852: FOR_TO
76853: IFFALSE 76896
// if not array [ i ] in result then
76855: LD_VAR 0 1
76859: PUSH
76860: LD_VAR 0 3
76864: ARRAY
76865: PUSH
76866: LD_VAR 0 2
76870: IN
76871: NOT
76872: IFFALSE 76894
// result := Join ( result , i ) ;
76874: LD_ADDR_VAR 0 2
76878: PUSH
76879: LD_VAR 0 2
76883: PPUSH
76884: LD_VAR 0 3
76888: PPUSH
76889: CALL 71549 0 2
76893: ST_TO_ADDR
76894: GO 76852
76896: POP
76897: POP
// end ; end_of_file
76898: LD_VAR 0 2
76902: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76903: LD_VAR 0 1
76907: PUSH
76908: LD_INT 200
76910: DOUBLE
76911: GREATEREQUAL
76912: IFFALSE 76920
76914: LD_INT 299
76916: DOUBLE
76917: LESSEQUAL
76918: IFTRUE 76922
76920: GO 76954
76922: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76923: LD_VAR 0 1
76927: PPUSH
76928: LD_VAR 0 2
76932: PPUSH
76933: LD_VAR 0 3
76937: PPUSH
76938: LD_VAR 0 4
76942: PPUSH
76943: LD_VAR 0 5
76947: PPUSH
76948: CALL 11539 0 5
76952: GO 77031
76954: LD_INT 300
76956: DOUBLE
76957: GREATEREQUAL
76958: IFFALSE 76966
76960: LD_INT 399
76962: DOUBLE
76963: LESSEQUAL
76964: IFTRUE 76968
76966: GO 77030
76968: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76969: LD_VAR 0 1
76973: PPUSH
76974: LD_VAR 0 2
76978: PPUSH
76979: LD_VAR 0 3
76983: PPUSH
76984: LD_VAR 0 4
76988: PPUSH
76989: LD_VAR 0 5
76993: PPUSH
76994: LD_VAR 0 6
76998: PPUSH
76999: LD_VAR 0 7
77003: PPUSH
77004: LD_VAR 0 8
77008: PPUSH
77009: LD_VAR 0 9
77013: PPUSH
77014: LD_VAR 0 10
77018: PPUSH
77019: LD_VAR 0 11
77023: PPUSH
77024: CALL 29902 0 11
77028: GO 77031
77030: POP
// end ;
77031: PPOPN 11
77033: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77034: LD_VAR 0 1
77038: PPUSH
77039: LD_VAR 0 2
77043: PPUSH
77044: LD_VAR 0 3
77048: PPUSH
77049: LD_VAR 0 4
77053: PPUSH
77054: LD_VAR 0 5
77058: PPUSH
77059: CALL 10839 0 5
// end ; end_of_file
77063: PPOPN 5
77065: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77066: LD_VAR 0 1
77070: PPUSH
77071: LD_VAR 0 2
77075: PPUSH
77076: LD_VAR 0 3
77080: PPUSH
77081: LD_VAR 0 4
77085: PPUSH
77086: LD_VAR 0 5
77090: PPUSH
77091: LD_VAR 0 6
77095: PPUSH
77096: CALL 17442 0 6
// end ;
77100: PPOPN 6
77102: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77103: LD_INT 0
77105: PPUSH
// begin if not units then
77106: LD_VAR 0 1
77110: NOT
77111: IFFALSE 77115
// exit ;
77113: GO 77149
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77115: LD_VAR 0 1
77119: PPUSH
77120: LD_VAR 0 2
77124: PPUSH
77125: LD_VAR 0 3
77129: PPUSH
77130: LD_VAR 0 4
77134: PPUSH
77135: LD_VAR 0 5
77139: PPUSH
77140: LD_VAR 0 6
77144: PPUSH
77145: CALL 17236 0 6
// end ;
77149: PPOPN 7
77151: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77152: CALL 17322 0 0
// end ;
77156: PPOPN 1
77158: END
