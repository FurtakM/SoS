// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 67 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareRussian ;
  37: CALL 844 0 0
// PrepareAmerican ;
  41: CALL 163 0 0
// PrepareSikorski ;
  45: CALL 642 0 0
// Action ;
  49: CALL 5652 0 0
// if debug then
  53: LD_EXP 1
  57: IFFALSE 66
// FogOff ( 1 ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 344
// end ;
  66: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter ; function Init ; begin
  67: LD_INT 0
  69: PPUSH
// debug := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// activeGrishkoAI := true ;
  78: LD_ADDR_EXP 2
  82: PUSH
  83: LD_INT 1
  85: ST_TO_ADDR
// allowToPatrol := true ;
  86: LD_ADDR_EXP 3
  90: PUSH
  91: LD_INT 1
  93: ST_TO_ADDR
// spottedByPatrol := false ;
  94: LD_ADDR_EXP 4
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// russianAlert := false ;
 102: LD_ADDR_EXP 5
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// startAttackOnOmicron := false ;
 110: LD_ADDR_EXP 6
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// omicronFall := false ;
 118: LD_ADDR_EXP 7
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// retreatFromOmicron := false ;
 126: LD_ADDR_EXP 8
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// sikorskiInOmicron := false ;
 134: LD_ADDR_EXP 9
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// usLoseCounter := 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// ruLoseCounter := 0 ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// end ; end_of_file
 158: LD_VAR 0 1
 162: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 163: LD_INT 0
 165: PPUSH
 166: PPUSH
 167: PPUSH
 168: PPUSH
// SetBName ( omikron , omikron ) ;
 169: LD_INT 64
 171: PPUSH
 172: LD_STRING omikron
 174: PPUSH
 175: CALL_OW 500
// uc_side := 4 ;
 179: LD_ADDR_OWVAR 20
 183: PUSH
 184: LD_INT 4
 186: ST_TO_ADDR
// uc_nation := 1 ;
 187: LD_ADDR_OWVAR 21
 191: PUSH
 192: LD_INT 1
 194: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 195: LD_ADDR_EXP 14
 199: PUSH
 200: LD_STRING Harisson
 202: PPUSH
 203: LD_INT 0
 205: PPUSH
 206: LD_STRING 
 208: PPUSH
 209: CALL 20207 0 3
 213: ST_TO_ADDR
// omicronSquad := [ ] ;
 214: LD_ADDR_EXP 12
 218: PUSH
 219: EMPTY
 220: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 221: LD_ADDR_VAR 0 2
 225: PUSH
 226: LD_INT 22
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: PUSH
 236: LD_INT 2
 238: PUSH
 239: LD_INT 30
 241: PUSH
 242: LD_INT 32
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: PUSH
 249: LD_INT 30
 251: PUSH
 252: LD_INT 31
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PUSH
 273: FOR_IN
 274: IFFALSE 354
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 380
// un := CreateHuman ;
 289: LD_ADDR_VAR 0 3
 293: PUSH
 294: CALL_OW 44
 298: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 299: LD_ADDR_EXP 12
 303: PUSH
 304: LD_EXP 12
 308: PUSH
 309: LD_VAR 0 3
 313: UNION
 314: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_VAR 0 2
 324: PPUSH
 325: CALL_OW 254
 329: PUSH
 330: LD_INT 3
 332: MINUS
 333: PPUSH
 334: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 338: LD_VAR 0 3
 342: PPUSH
 343: LD_VAR 0 2
 347: PPUSH
 348: CALL_OW 52
// end ;
 352: GO 273
 354: POP
 355: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 3
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: LD_INT 2
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: PUSH
 386: FOR_TO
 387: IFFALSE 466
// begin PrepareHuman ( false , 2 , 2 ) ;
 389: LD_INT 0
 391: PPUSH
 392: LD_INT 2
 394: PPUSH
 395: LD_INT 2
 397: PPUSH
 398: CALL_OW 380
// un := CreateHuman ;
 402: LD_ADDR_VAR 0 3
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 412: LD_ADDR_EXP 12
 416: PUSH
 417: LD_EXP 12
 421: PUSH
 422: LD_VAR 0 3
 426: UNION
 427: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 428: LD_VAR 0 3
 432: PPUSH
 433: LD_INT 64
 435: PPUSH
 436: CALL_OW 52
// ComExitBuilding ( un ) ;
 440: LD_VAR 0 3
 444: PPUSH
 445: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 449: LD_VAR 0 3
 453: PPUSH
 454: LD_INT 19
 456: PPUSH
 457: LD_INT 23
 459: PPUSH
 460: CALL_OW 171
// end ;
 464: GO 386
 466: POP
 467: POP
// for i := 1 to 2 do
 468: LD_ADDR_VAR 0 2
 472: PUSH
 473: DOUBLE
 474: LD_INT 1
 476: DEC
 477: ST_TO_ADDR
 478: LD_INT 2
 480: PUSH
 481: FOR_TO
 482: IFFALSE 635
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 484: LD_INT 2
 486: PPUSH
 487: LD_INT 2
 489: PPUSH
 490: LD_INT 1
 492: PPUSH
 493: LD_INT 3
 495: PUSH
 496: LD_INT 4
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: LD_INT 100
 511: PPUSH
 512: CALL 25031 0 5
// veh := CreateVehicle ;
 516: LD_ADDR_VAR 0 4
 520: PUSH
 521: CALL_OW 45
 525: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 526: LD_VAR 0 4
 530: PPUSH
 531: LD_INT 28
 533: PPUSH
 534: LD_INT 37
 536: PPUSH
 537: LD_INT 6
 539: PPUSH
 540: LD_INT 0
 542: PPUSH
 543: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 547: LD_INT 0
 549: PPUSH
 550: LD_INT 3
 552: PPUSH
 553: LD_INT 2
 555: PPUSH
 556: CALL_OW 380
// un := CreateHuman ;
 560: LD_ADDR_VAR 0 3
 564: PUSH
 565: CALL_OW 44
 569: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 570: LD_ADDR_EXP 12
 574: PUSH
 575: LD_EXP 12
 579: PUSH
 580: LD_VAR 0 3
 584: UNION
 585: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 586: LD_VAR 0 3
 590: PPUSH
 591: LD_VAR 0 4
 595: PPUSH
 596: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 600: LD_VAR 0 3
 604: PPUSH
 605: LD_VAR 0 3
 609: PPUSH
 610: CALL_OW 250
 614: PUSH
 615: LD_INT 3
 617: PLUS
 618: PPUSH
 619: LD_VAR 0 3
 623: PPUSH
 624: CALL_OW 251
 628: PPUSH
 629: CALL_OW 111
// end ;
 633: GO 481
 635: POP
 636: POP
// end ;
 637: LD_VAR 0 1
 641: RET
// export function PrepareSikorski ; var veh ; begin
 642: LD_INT 0
 644: PPUSH
 645: PPUSH
// uc_side := 1 ;
 646: LD_ADDR_OWVAR 20
 650: PUSH
 651: LD_INT 1
 653: ST_TO_ADDR
// uc_nation := 1 ;
 654: LD_ADDR_OWVAR 21
 658: PUSH
 659: LD_INT 1
 661: ST_TO_ADDR
// hc_importance := 100 ;
 662: LD_ADDR_OWVAR 32
 666: PUSH
 667: LD_INT 100
 669: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 670: LD_ADDR_OWVAR 26
 674: PUSH
 675: LD_STRING Jeremy Sikorski
 677: ST_TO_ADDR
// hc_gallery := us ;
 678: LD_ADDR_OWVAR 33
 682: PUSH
 683: LD_STRING us
 685: ST_TO_ADDR
// hc_face_number := 19 ;
 686: LD_ADDR_OWVAR 34
 690: PUSH
 691: LD_INT 19
 693: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 3 , 3 ] [ Difficulty ] ) ;
 694: LD_INT 1
 696: PPUSH
 697: LD_INT 1
 699: PPUSH
 700: LD_INT 4
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: LD_INT 3
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_OWVAR 67
 718: ARRAY
 719: PPUSH
 720: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 724: LD_ADDR_OWVAR 29
 728: PUSH
 729: LD_INT 10
 731: PUSH
 732: LD_INT 12
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: ST_TO_ADDR
// Sikorski := CreateHuman ;
 739: LD_ADDR_EXP 13
 743: PUSH
 744: CALL_OW 44
 748: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 749: LD_INT 3
 751: PPUSH
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_INT 3
 760: PPUSH
 761: LD_INT 88
 763: PPUSH
 764: CALL 25031 0 5
// veh := CreateVehicle ;
 768: LD_ADDR_VAR 0 2
 772: PUSH
 773: CALL_OW 45
 777: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 778: LD_VAR 0 2
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 790: LD_VAR 0 2
 794: PPUSH
 795: LD_INT 106
 797: PPUSH
 798: LD_INT 2
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 808: LD_EXP 13
 812: PPUSH
 813: LD_VAR 0 2
 817: PPUSH
 818: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 822: LD_VAR 0 2
 826: PPUSH
 827: LD_INT 1
 829: NEG
 830: PPUSH
 831: CALL_OW 242
// InitHc ;
 835: CALL_OW 19
// end ; end_of_file
 839: LD_VAR 0 1
 843: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 844: LD_INT 0
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
 850: PPUSH
 851: PPUSH
 852: PPUSH
// InitHc ;
 853: CALL_OW 19
// hc_importance := 0 ;
 857: LD_ADDR_OWVAR 32
 861: PUSH
 862: LD_INT 0
 864: ST_TO_ADDR
// hc_name :=  ;
 865: LD_ADDR_OWVAR 26
 869: PUSH
 870: LD_STRING 
 872: ST_TO_ADDR
// hc_gallery :=  ;
 873: LD_ADDR_OWVAR 33
 877: PUSH
 878: LD_STRING 
 880: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 3
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: LD_INT 23
 898: PUSH
 899: LD_INT 3
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PPUSH
 910: CALL_OW 69
 914: PUSH
 915: FOR_IN
 916: IFFALSE 932
// SetBLevel ( i , 5 ) ;
 918: LD_VAR 0 2
 922: PPUSH
 923: LD_INT 5
 925: PPUSH
 926: CALL_OW 241
 930: GO 915
 932: POP
 933: POP
// SetBName ( kirov , kirov ) ;
 934: LD_INT 71
 936: PPUSH
 937: LD_STRING kirov
 939: PPUSH
 940: CALL_OW 500
// SetBName ( beria , beria ) ;
 944: LD_INT 106
 946: PPUSH
 947: LD_STRING beria
 949: PPUSH
 950: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 954: LD_INT 112
 956: PPUSH
 957: LD_STRING kagan
 959: PPUSH
 960: CALL_OW 500
// uc_side := 6 ;
 964: LD_ADDR_OWVAR 20
 968: PUSH
 969: LD_INT 6
 971: ST_TO_ADDR
// uc_nation := 3 ;
 972: LD_ADDR_OWVAR 21
 976: PUSH
 977: LD_INT 3
 979: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
 980: LD_ADDR_VAR 0 5
 984: PUSH
 985: LD_INT 22
 987: PUSH
 988: LD_INT 6
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: PUSH
 995: LD_INT 30
 997: PUSH
 998: LD_INT 5
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 69
1013: PUSH
1014: LD_INT 1
1016: ARRAY
1017: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: LD_INT 22
1025: PUSH
1026: LD_INT 6
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 30
1035: PUSH
1036: LD_INT 4
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PPUSH
1047: CALL_OW 69
1051: PUSH
1052: LD_INT 1
1054: ARRAY
1055: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1056: LD_ADDR_EXP 19
1060: PUSH
1061: EMPTY
1062: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1063: LD_ADDR_EXP 20
1067: PUSH
1068: EMPTY
1069: ST_TO_ADDR
// russianPatrol := [ ] ;
1070: LD_ADDR_EXP 22
1074: PUSH
1075: EMPTY
1076: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1077: LD_ADDR_EXP 15
1081: PUSH
1082: LD_STRING Kurin
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: LD_STRING 
1090: PPUSH
1091: CALL 20207 0 3
1095: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1096: LD_EXP 15
1100: PPUSH
1101: LD_INT 71
1103: PPUSH
1104: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1108: LD_ADDR_EXP 17
1112: PUSH
1113: LD_STRING Popov
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 20207 0 3
1126: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1127: LD_EXP 17
1131: PPUSH
1132: LD_INT 71
1134: PPUSH
1135: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1139: LD_ADDR_EXP 16
1143: PUSH
1144: LD_STRING Grishko
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_STRING 
1152: PPUSH
1153: CALL 20207 0 3
1157: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1158: LD_EXP 16
1162: PPUSH
1163: LD_INT 207
1165: PPUSH
1166: LD_INT 106
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1176: LD_EXP 16
1180: PPUSH
1181: LD_INT 209
1183: PPUSH
1184: LD_INT 106
1186: PPUSH
1187: CALL_OW 118
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1191: LD_ADDR_VAR 0 7
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 6
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 30
1208: PUSH
1209: LD_INT 32
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL_OW 69
1224: ST_TO_ADDR
// for i in tmp do
1225: LD_ADDR_VAR 0 2
1229: PUSH
1230: LD_VAR 0 7
1234: PUSH
1235: FOR_IN
1236: IFFALSE 1273
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1238: LD_VAR 0 2
1242: PPUSH
1243: LD_INT 44
1245: PUSH
1246: LD_INT 43
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: PUSH
1253: LD_VAR 0 2
1257: PUSH
1258: LD_INT 2
1260: MOD
1261: PUSH
1262: LD_INT 1
1264: PLUS
1265: ARRAY
1266: PPUSH
1267: CALL_OW 431
1271: GO 1235
1273: POP
1274: POP
// for i := 1 to Difficulty do
1275: LD_ADDR_VAR 0 2
1279: PUSH
1280: DOUBLE
1281: LD_INT 1
1283: DEC
1284: ST_TO_ADDR
1285: LD_OWVAR 67
1289: PUSH
1290: FOR_TO
1291: IFFALSE 1346
// begin PrepareHuman ( false , 2 , 2 ) ;
1293: LD_INT 0
1295: PPUSH
1296: LD_INT 2
1298: PPUSH
1299: LD_INT 2
1301: PPUSH
1302: CALL_OW 380
// un := CreateHuman ;
1306: LD_ADDR_VAR 0 3
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1316: LD_VAR 0 3
1320: PPUSH
1321: LD_INT 71
1323: PPUSH
1324: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1328: LD_ADDR_EXP 19
1332: PUSH
1333: LD_EXP 19
1337: PUSH
1338: LD_VAR 0 3
1342: UNION
1343: ST_TO_ADDR
// end ;
1344: GO 1290
1346: POP
1347: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1348: LD_ADDR_VAR 0 2
1352: PUSH
1353: DOUBLE
1354: LD_INT 1
1356: DEC
1357: ST_TO_ADDR
1358: LD_INT 5
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 6
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: LD_OWVAR 67
1376: ARRAY
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1453
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1381: LD_INT 0
1383: PPUSH
1384: LD_INT 1
1386: PPUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: LD_INT 4
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_OWVAR 67
1405: ARRAY
1406: PPUSH
1407: CALL_OW 380
// un := CreateHuman ;
1411: LD_ADDR_VAR 0 3
1415: PUSH
1416: CALL_OW 44
1420: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1421: LD_VAR 0 3
1425: PPUSH
1426: LD_VAR 0 5
1430: PPUSH
1431: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1435: LD_ADDR_EXP 19
1439: PUSH
1440: LD_EXP 19
1444: PUSH
1445: LD_VAR 0 3
1449: UNION
1450: ST_TO_ADDR
// end ;
1451: GO 1378
1453: POP
1454: POP
// for i := 1 to 3 do
1455: LD_ADDR_VAR 0 2
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_INT 3
1467: PUSH
1468: FOR_TO
1469: IFFALSE 1524
// begin PrepareHuman ( false , 3 , 3 ) ;
1471: LD_INT 0
1473: PPUSH
1474: LD_INT 3
1476: PPUSH
1477: LD_INT 3
1479: PPUSH
1480: CALL_OW 380
// un := CreateHuman ;
1484: LD_ADDR_VAR 0 3
1488: PUSH
1489: CALL_OW 44
1493: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 92
1501: PPUSH
1502: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1506: LD_ADDR_EXP 19
1510: PUSH
1511: LD_EXP 19
1515: PUSH
1516: LD_VAR 0 3
1520: UNION
1521: ST_TO_ADDR
// end ;
1522: GO 1468
1524: POP
1525: POP
// for i := 1 to 2 do
1526: LD_ADDR_VAR 0 2
1530: PUSH
1531: DOUBLE
1532: LD_INT 1
1534: DEC
1535: ST_TO_ADDR
1536: LD_INT 2
1538: PUSH
1539: FOR_TO
1540: IFFALSE 1595
// begin PrepareHuman ( false , 4 , 3 ) ;
1542: LD_INT 0
1544: PPUSH
1545: LD_INT 4
1547: PPUSH
1548: LD_INT 3
1550: PPUSH
1551: CALL_OW 380
// un := CreateHuman ;
1555: LD_ADDR_VAR 0 3
1559: PUSH
1560: CALL_OW 44
1564: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1565: LD_VAR 0 3
1569: PPUSH
1570: LD_INT 83
1572: PPUSH
1573: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1577: LD_ADDR_EXP 19
1581: PUSH
1582: LD_EXP 19
1586: PUSH
1587: LD_VAR 0 3
1591: UNION
1592: ST_TO_ADDR
// end ;
1593: GO 1539
1595: POP
1596: POP
// for i := 1 to 5 do
1597: LD_ADDR_VAR 0 2
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 5
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1668
// begin PrepareHuman ( false , 1 , 3 ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: CALL_OW 380
// un := CreateHuman ;
1626: LD_ADDR_VAR 0 3
1630: PUSH
1631: CALL_OW 44
1635: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: LD_VAR 0 4
1645: PPUSH
1646: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1650: LD_ADDR_EXP 21
1654: PUSH
1655: LD_EXP 21
1659: PUSH
1660: LD_VAR 0 3
1664: UNION
1665: ST_TO_ADDR
// end ;
1666: GO 1610
1668: POP
1669: POP
// russianCargo := [ ] ;
1670: LD_ADDR_EXP 24
1674: PUSH
1675: EMPTY
1676: ST_TO_ADDR
// for i := 1 to 2 do
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: DOUBLE
1683: LD_INT 1
1685: DEC
1686: ST_TO_ADDR
1687: LD_INT 2
1689: PUSH
1690: FOR_TO
1691: IFFALSE 1817
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1693: LD_INT 21
1695: PPUSH
1696: LD_INT 1
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 51
1704: PPUSH
1705: LD_INT 100
1707: PPUSH
1708: CALL 25031 0 5
// un := CreateVehicle ;
1712: LD_ADDR_VAR 0 3
1716: PUSH
1717: CALL_OW 45
1721: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1722: LD_ADDR_EXP 24
1726: PUSH
1727: LD_EXP 24
1731: PUSH
1732: LD_VAR 0 3
1736: UNION
1737: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1738: LD_VAR 0 3
1742: PPUSH
1743: LD_INT 2
1745: PPUSH
1746: LD_INT 100
1748: PPUSH
1749: CALL_OW 290
// SetDir ( un , 4 ) ;
1753: LD_VAR 0 3
1757: PPUSH
1758: LD_INT 4
1760: PPUSH
1761: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1765: LD_VAR 0 3
1769: PPUSH
1770: LD_INT 147
1772: PPUSH
1773: LD_INT 103
1775: PPUSH
1776: LD_INT 4
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1786: LD_INT 0
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: LD_OWVAR 67
1796: PPUSH
1797: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1801: CALL_OW 44
1805: PPUSH
1806: LD_VAR 0 3
1810: PPUSH
1811: CALL_OW 52
// end ;
1815: GO 1690
1817: POP
1818: POP
// uc_side := 3 ;
1819: LD_ADDR_OWVAR 20
1823: PUSH
1824: LD_INT 3
1826: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1827: LD_ADDR_EXP 18
1831: PUSH
1832: LD_STRING Burlak
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: LD_STRING 
1840: PPUSH
1841: CALL 20207 0 3
1845: ST_TO_ADDR
// InitHc ;
1846: CALL_OW 19
// PrepareHuman ( false , 3 , 2 ) ;
1850: LD_INT 0
1852: PPUSH
1853: LD_INT 3
1855: PPUSH
1856: LD_INT 2
1858: PPUSH
1859: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1863: CALL_OW 44
1867: PPUSH
1868: LD_INT 180
1870: PPUSH
1871: CALL_OW 52
// if Difficulty > 1 then
1875: LD_OWVAR 67
1879: PUSH
1880: LD_INT 1
1882: GREATER
1883: IFFALSE 1941
// begin for i := 1 to 3 do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 3
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1939
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1901: LD_INT 0
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_OWVAR 67
1911: PPUSH
1912: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1916: CALL_OW 44
1920: PPUSH
1921: LD_INT 86
1923: PPUSH
1924: LD_INT 17
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: LD_INT 0
1932: PPUSH
1933: CALL_OW 50
// end ;
1937: GO 1898
1939: POP
1940: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
1941: LD_ADDR_VAR 0 7
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 3
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 30
1958: PUSH
1959: LD_INT 32
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PPUSH
1970: CALL_OW 69
1974: ST_TO_ADDR
// for i := 1 to tmp do
1975: LD_ADDR_VAR 0 2
1979: PUSH
1980: DOUBLE
1981: LD_INT 1
1983: DEC
1984: ST_TO_ADDR
1985: LD_VAR 0 7
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2099
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PUSH
2004: LD_INT 1
2006: PLUS
2007: PPUSH
2008: CALL_OW 380
// un := CreateHuman ;
2012: LD_ADDR_VAR 0 3
2016: PUSH
2017: CALL_OW 44
2021: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2022: LD_VAR 0 3
2026: PPUSH
2027: LD_VAR 0 7
2031: PUSH
2032: LD_VAR 0 2
2036: ARRAY
2037: PPUSH
2038: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2042: LD_ADDR_EXP 20
2046: PUSH
2047: LD_EXP 20
2051: PUSH
2052: LD_VAR 0 3
2056: UNION
2057: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2058: LD_VAR 0 7
2062: PUSH
2063: LD_VAR 0 2
2067: ARRAY
2068: PPUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 43
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_INT 2
2086: MOD
2087: PUSH
2088: LD_INT 1
2090: PLUS
2091: ARRAY
2092: PPUSH
2093: CALL_OW 431
// end ;
2097: GO 1990
2099: POP
2100: POP
// for i := 1 to Difficulty + 1 do
2101: LD_ADDR_VAR 0 2
2105: PUSH
2106: DOUBLE
2107: LD_INT 1
2109: DEC
2110: ST_TO_ADDR
2111: LD_OWVAR 67
2115: PUSH
2116: LD_INT 1
2118: PLUS
2119: PUSH
2120: FOR_TO
2121: IFFALSE 2212
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2123: LD_INT 0
2125: PPUSH
2126: LD_INT 1
2128: PPUSH
2129: LD_OWVAR 67
2133: PUSH
2134: LD_INT 1
2136: PLUS
2137: PPUSH
2138: CALL_OW 380
// un := CreateHuman ;
2142: LD_ADDR_VAR 0 3
2146: PUSH
2147: CALL_OW 44
2151: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2152: LD_VAR 0 3
2156: PPUSH
2157: LD_INT 22
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 30
2169: PUSH
2170: LD_INT 5
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PPUSH
2181: CALL_OW 69
2185: PUSH
2186: LD_INT 1
2188: ARRAY
2189: PPUSH
2190: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2194: LD_ADDR_EXP 20
2198: PUSH
2199: LD_EXP 20
2203: PUSH
2204: LD_VAR 0 3
2208: UNION
2209: ST_TO_ADDR
// end ;
2210: GO 2120
2212: POP
2213: POP
// for i := 1 to 2 do
2214: LD_ADDR_VAR 0 2
2218: PUSH
2219: DOUBLE
2220: LD_INT 1
2222: DEC
2223: ST_TO_ADDR
2224: LD_INT 2
2226: PUSH
2227: FOR_TO
2228: IFFALSE 2315
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2230: LD_INT 0
2232: PPUSH
2233: LD_INT 4
2235: PPUSH
2236: LD_OWVAR 67
2240: PPUSH
2241: CALL_OW 380
// un := CreateHuman ;
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: CALL_OW 44
2254: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2255: LD_VAR 0 3
2259: PPUSH
2260: LD_INT 22
2262: PUSH
2263: LD_INT 3
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 30
2272: PUSH
2273: LD_INT 7
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: PPUSH
2284: CALL_OW 69
2288: PUSH
2289: LD_INT 1
2291: ARRAY
2292: PPUSH
2293: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2297: LD_ADDR_EXP 20
2301: PUSH
2302: LD_EXP 20
2306: PUSH
2307: LD_VAR 0 3
2311: UNION
2312: ST_TO_ADDR
// end ;
2313: GO 2227
2315: POP
2316: POP
// for i := 1 to Difficulty do
2317: LD_ADDR_VAR 0 2
2321: PUSH
2322: DOUBLE
2323: LD_INT 1
2325: DEC
2326: ST_TO_ADDR
2327: LD_OWVAR 67
2331: PUSH
2332: FOR_TO
2333: IFFALSE 2390
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2335: LD_INT 0
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: LD_OWVAR 67
2345: PPUSH
2346: CALL_OW 380
// un := CreateHuman ;
2350: LD_ADDR_VAR 0 3
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2360: LD_VAR 0 3
2364: PPUSH
2365: LD_INT 106
2367: PPUSH
2368: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2372: LD_ADDR_EXP 20
2376: PUSH
2377: LD_EXP 20
2381: PUSH
2382: LD_VAR 0 3
2386: UNION
2387: ST_TO_ADDR
// end ;
2388: GO 2332
2390: POP
2391: POP
// for i := 1 to 3 do
2392: LD_ADDR_VAR 0 2
2396: PUSH
2397: DOUBLE
2398: LD_INT 1
2400: DEC
2401: ST_TO_ADDR
2402: LD_INT 3
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2528
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2408: LD_ADDR_VAR 0 6
2412: PUSH
2413: LD_INT 22
2415: PUSH
2416: LD_INT 3
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 31
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: PUSH
2442: LD_VAR 0 2
2446: ARRAY
2447: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2448: LD_INT 0
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_OWVAR 67
2458: PPUSH
2459: CALL_OW 380
// un := CreateHuman ;
2463: LD_ADDR_VAR 0 3
2467: PUSH
2468: CALL_OW 44
2472: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2473: LD_VAR 0 3
2477: PPUSH
2478: LD_VAR 0 6
2482: PPUSH
2483: CALL_OW 254
2487: PUSH
2488: LD_INT 3
2490: PLUS
2491: PPUSH
2492: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_VAR 0 6
2505: PPUSH
2506: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2510: LD_ADDR_EXP 20
2514: PUSH
2515: LD_EXP 20
2519: PUSH
2520: LD_VAR 0 3
2524: UNION
2525: ST_TO_ADDR
// end ;
2526: GO 2405
2528: POP
2529: POP
// russianOmicronAttackers := [ ] ;
2530: LD_ADDR_EXP 23
2534: PUSH
2535: EMPTY
2536: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2537: LD_ADDR_VAR 0 2
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 4
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 6
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: PUSH
2561: LD_OWVAR 67
2565: ARRAY
2566: PUSH
2567: FOR_TO
2568: IFFALSE 2786
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2570: LD_INT 21
2572: PUSH
2573: LD_INT 23
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_VAR 0 2
2584: PUSH
2585: LD_INT 2
2587: MOD
2588: PUSH
2589: LD_INT 1
2591: PLUS
2592: ARRAY
2593: PPUSH
2594: LD_INT 1
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_INT 43
2602: PUSH
2603: LD_INT 44
2605: PUSH
2606: LD_INT 42
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: PUSH
2614: LD_VAR 0 2
2618: PUSH
2619: LD_INT 3
2621: MOD
2622: PUSH
2623: LD_INT 1
2625: PLUS
2626: ARRAY
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL 25031 0 5
// un := CreateVehicle ;
2635: LD_ADDR_VAR 0 3
2639: PUSH
2640: CALL_OW 45
2644: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2645: LD_VAR 0 3
2649: PPUSH
2650: LD_INT 0
2652: PUSH
2653: LD_INT 5
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_INT 2
2665: PPUSH
2666: CALL_OW 12
2670: ARRAY
2671: PPUSH
2672: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2676: LD_ADDR_EXP 23
2680: PUSH
2681: LD_EXP 23
2685: PUSH
2686: LD_VAR 0 3
2690: UNION
2691: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2692: LD_VAR 0 3
2696: PPUSH
2697: LD_INT 127
2699: PPUSH
2700: LD_INT 89
2702: PPUSH
2703: LD_INT 7
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL_OW 50
// uc_side := 3 ;
2713: LD_ADDR_OWVAR 20
2717: PUSH
2718: LD_INT 3
2720: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2721: LD_INT 0
2723: PPUSH
2724: LD_INT 3
2726: PPUSH
2727: LD_INT 3
2729: PPUSH
2730: CALL_OW 380
// un := CreateHuman ;
2734: LD_ADDR_VAR 0 3
2738: PUSH
2739: CALL_OW 44
2743: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2744: LD_ADDR_EXP 23
2748: PUSH
2749: LD_EXP 23
2753: PUSH
2754: LD_VAR 0 3
2758: UNION
2759: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2760: LD_VAR 0 3
2764: PPUSH
2765: LD_EXP 23
2769: PUSH
2770: LD_EXP 23
2774: PUSH
2775: LD_INT 1
2777: MINUS
2778: ARRAY
2779: PPUSH
2780: CALL_OW 52
// end ;
2784: GO 2567
2786: POP
2787: POP
// for i := 1 to 3 do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: DOUBLE
2794: LD_INT 1
2796: DEC
2797: ST_TO_ADDR
2798: LD_INT 3
2800: PUSH
2801: FOR_TO
2802: IFFALSE 2868
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2804: LD_INT 0
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_OWVAR 67
2814: PPUSH
2815: CALL_OW 380
// un := CreateHuman ;
2819: LD_ADDR_VAR 0 3
2823: PUSH
2824: CALL_OW 44
2828: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2829: LD_ADDR_EXP 23
2833: PUSH
2834: LD_EXP 23
2838: PUSH
2839: LD_VAR 0 3
2843: UNION
2844: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 91
2852: PPUSH
2853: LD_INT 60
2855: PPUSH
2856: LD_INT 3
2858: PPUSH
2859: LD_INT 0
2861: PPUSH
2862: CALL_OW 50
// end ;
2866: GO 2801
2868: POP
2869: POP
// end ;
2870: LD_VAR 0 1
2874: RET
// every 0 0$3 do var i ;
2875: GO 2877
2877: DISABLE
2878: LD_INT 0
2880: PPUSH
// begin for i := 1 to 4 do
2881: LD_ADDR_VAR 0 1
2885: PUSH
2886: DOUBLE
2887: LD_INT 1
2889: DEC
2890: ST_TO_ADDR
2891: LD_INT 4
2893: PUSH
2894: FOR_TO
2895: IFFALSE 2914
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2897: LD_EXP 21
2901: PUSH
2902: LD_VAR 0 1
2906: ARRAY
2907: PPUSH
2908: CALL_OW 122
2912: GO 2894
2914: POP
2915: POP
// wait ( 3 ) ;
2916: LD_INT 3
2918: PPUSH
2919: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
2923: LD_EXP 21
2927: PUSH
2928: LD_INT 1
2930: ARRAY
2931: PPUSH
2932: LD_INT 22
2934: PUSH
2935: LD_INT 6
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: LD_INT 30
2944: PUSH
2945: LD_INT 31
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PPUSH
2956: CALL_OW 69
2960: PPUSH
2961: LD_EXP 21
2965: PUSH
2966: LD_INT 1
2968: ARRAY
2969: PPUSH
2970: CALL_OW 74
2974: PPUSH
2975: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
2979: LD_EXP 21
2983: PUSH
2984: LD_INT 2
2986: ARRAY
2987: PPUSH
2988: LD_INT 211
2990: PPUSH
2991: LD_INT 107
2993: PPUSH
2994: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
2998: LD_EXP 21
3002: PUSH
3003: LD_INT 2
3005: ARRAY
3006: PPUSH
3007: LD_INT 209
3009: PPUSH
3010: LD_INT 106
3012: PPUSH
3013: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3017: LD_EXP 21
3021: PUSH
3022: LD_INT 3
3024: ARRAY
3025: PPUSH
3026: LD_INT 209
3028: PPUSH
3029: LD_INT 103
3031: PPUSH
3032: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3036: LD_EXP 21
3040: PUSH
3041: LD_INT 3
3043: ARRAY
3044: PPUSH
3045: LD_INT 209
3047: PPUSH
3048: LD_INT 106
3050: PPUSH
3051: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3055: LD_EXP 21
3059: PUSH
3060: LD_INT 4
3062: ARRAY
3063: PPUSH
3064: LD_INT 227
3066: PPUSH
3067: LD_INT 117
3069: PPUSH
3070: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3074: LD_EXP 21
3078: PUSH
3079: LD_INT 4
3081: ARRAY
3082: PPUSH
3083: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3087: LD_INT 700
3089: PPUSH
3090: CALL_OW 67
// for i := 3 downto 2 do
3094: LD_ADDR_VAR 0 1
3098: PUSH
3099: DOUBLE
3100: LD_INT 3
3102: INC
3103: ST_TO_ADDR
3104: LD_INT 2
3106: PUSH
3107: FOR_DOWNTO
3108: IFFALSE 3275
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3110: LD_EXP 21
3114: PUSH
3115: LD_VAR 0 1
3119: ARRAY
3120: PPUSH
3121: LD_INT 200
3123: PPUSH
3124: LD_INT 91
3126: PPUSH
3127: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3131: LD_EXP 21
3135: PUSH
3136: LD_VAR 0 1
3140: ARRAY
3141: PPUSH
3142: LD_INT 210
3144: PPUSH
3145: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3149: LD_EXP 21
3153: PUSH
3154: LD_VAR 0 1
3158: ARRAY
3159: PPUSH
3160: LD_INT 224
3162: PPUSH
3163: LD_INT 93
3165: PPUSH
3166: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3170: LD_EXP 21
3174: PUSH
3175: LD_VAR 0 1
3179: ARRAY
3180: PPUSH
3181: LD_INT 210
3183: PPUSH
3184: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3188: LD_EXP 21
3192: PUSH
3193: LD_VAR 0 1
3197: ARRAY
3198: PPUSH
3199: LD_INT 239
3201: PPUSH
3202: LD_INT 123
3204: PPUSH
3205: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3209: LD_EXP 21
3213: PUSH
3214: LD_VAR 0 1
3218: ARRAY
3219: PPUSH
3220: LD_INT 210
3222: PPUSH
3223: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3227: LD_EXP 21
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 212
3240: PPUSH
3241: LD_INT 105
3243: PPUSH
3244: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3248: LD_EXP 21
3252: PUSH
3253: LD_VAR 0 1
3257: ARRAY
3258: PPUSH
3259: LD_INT 700
3261: PPUSH
3262: CALL_OW 202
// wait ( 0 0$30 ) ;
3266: LD_INT 1050
3268: PPUSH
3269: CALL_OW 67
// end ;
3273: GO 3107
3275: POP
3276: POP
// until not activeGrishkoAI ;
3277: LD_EXP 2
3281: NOT
3282: IFFALSE 3087
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3284: LD_EXP 21
3288: PPUSH
3289: LD_INT 221
3291: PPUSH
3292: LD_INT 110
3294: PPUSH
3295: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3299: LD_EXP 21
3303: PPUSH
3304: LD_INT 228
3306: PPUSH
3307: LD_INT 115
3309: PPUSH
3310: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3314: LD_EXP 21
3318: PPUSH
3319: CALL_OW 200
// end ;
3323: PPOPN 1
3325: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3326: LD_EXP 3
3330: IFFALSE 3960
3332: GO 3334
3334: DISABLE
3335: LD_INT 0
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
// begin uc_side := 6 ;
3341: LD_ADDR_OWVAR 20
3345: PUSH
3346: LD_INT 6
3348: ST_TO_ADDR
// uc_nation := 3 ;
3349: LD_ADDR_OWVAR 21
3353: PUSH
3354: LD_INT 3
3356: ST_TO_ADDR
// for i := 1 to 3 do
3357: LD_ADDR_VAR 0 2
3361: PUSH
3362: DOUBLE
3363: LD_INT 1
3365: DEC
3366: ST_TO_ADDR
3367: LD_INT 3
3369: PUSH
3370: FOR_TO
3371: IFFALSE 3480
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3373: LD_INT 0
3375: PPUSH
3376: LD_INT 1
3378: PPUSH
3379: LD_INT 2
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: LD_INT 4
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: LD_OWVAR 67
3397: ARRAY
3398: PPUSH
3399: CALL_OW 380
// un := CreateHuman ;
3403: LD_ADDR_VAR 0 1
3407: PUSH
3408: CALL_OW 44
3412: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3413: LD_ADDR_EXP 22
3417: PUSH
3418: LD_EXP 22
3422: PUSH
3423: LD_VAR 0 1
3427: UNION
3428: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3429: LD_VAR 0 1
3433: PPUSH
3434: LD_INT 1
3436: PPUSH
3437: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3441: LD_VAR 0 1
3445: PPUSH
3446: LD_INT 3
3448: PPUSH
3449: LD_INT 0
3451: PPUSH
3452: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: LD_INT 210
3463: PPUSH
3464: LD_INT 159
3466: PPUSH
3467: CALL_OW 111
// wait ( 0 0$2 ) ;
3471: LD_INT 70
3473: PPUSH
3474: CALL_OW 67
// end ;
3478: GO 3370
3480: POP
3481: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3482: LD_ADDR_VAR 0 4
3486: PUSH
3487: LD_INT 172
3489: PUSH
3490: LD_INT 76
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 150
3499: PUSH
3500: LD_INT 38
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 148
3509: PUSH
3510: LD_INT 9
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 165
3519: PUSH
3520: LD_INT 38
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 191
3535: PUSH
3536: LD_INT 77
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 168
3545: PUSH
3546: LD_INT 42
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: LD_INT 166
3555: PUSH
3556: LD_INT 11
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 151
3565: PUSH
3566: LD_INT 12
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 221
3581: PUSH
3582: LD_INT 88
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 217
3591: PUSH
3592: LD_INT 64
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 208
3601: PUSH
3602: LD_INT 42
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3619: LD_INT 35
3621: PPUSH
3622: CALL_OW 67
// for i := 1 to patrol do
3626: LD_ADDR_VAR 0 2
3630: PUSH
3631: DOUBLE
3632: LD_INT 1
3634: DEC
3635: ST_TO_ADDR
3636: LD_VAR 0 4
3640: PUSH
3641: FOR_TO
3642: IFFALSE 3924
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3644: LD_EXP 22
3648: PUSH
3649: LD_VAR 0 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 256
3659: PUSH
3660: LD_INT 990
3662: LESS
3663: PUSH
3664: LD_EXP 22
3668: PUSH
3669: LD_VAR 0 2
3673: ARRAY
3674: PPUSH
3675: CALL_OW 110
3679: PUSH
3680: LD_INT 1
3682: EQUAL
3683: AND
3684: IFFALSE 3712
// begin spottedByPatrol := true ;
3686: LD_ADDR_EXP 4
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3694: LD_EXP 22
3698: PUSH
3699: LD_VAR 0 2
3703: ARRAY
3704: PPUSH
3705: LD_INT 2
3707: PPUSH
3708: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3712: LD_EXP 22
3716: PUSH
3717: LD_VAR 0 2
3721: ARRAY
3722: PPUSH
3723: CALL_OW 110
3727: PUSH
3728: LD_INT 2
3730: EQUAL
3731: IFFALSE 3822
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3733: LD_EXP 22
3737: PUSH
3738: LD_VAR 0 2
3742: ARRAY
3743: PPUSH
3744: LD_INT 166
3746: PPUSH
3747: LD_INT 101
3749: PPUSH
3750: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3754: LD_EXP 22
3758: PUSH
3759: LD_VAR 0 2
3763: ARRAY
3764: PPUSH
3765: LD_INT 71
3767: PPUSH
3768: CALL_OW 296
3772: PUSH
3773: LD_INT 10
3775: LESS
3776: IFFALSE 3820
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3778: LD_ADDR_EXP 19
3782: PUSH
3783: LD_EXP 19
3787: PUSH
3788: LD_EXP 22
3792: PUSH
3793: LD_VAR 0 2
3797: ARRAY
3798: UNION
3799: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3800: LD_ADDR_EXP 22
3804: PUSH
3805: LD_EXP 22
3809: PPUSH
3810: LD_VAR 0 2
3814: PPUSH
3815: CALL_OW 3
3819: ST_TO_ADDR
// end ; continue ;
3820: GO 3641
// end ; if not HasTask ( russianPatrol [ i ] ) then
3822: LD_EXP 22
3826: PUSH
3827: LD_VAR 0 2
3831: ARRAY
3832: PPUSH
3833: CALL_OW 314
3837: NOT
3838: IFFALSE 3922
// for j in patrol [ i ] do
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: LD_VAR 0 4
3849: PUSH
3850: LD_VAR 0 2
3854: ARRAY
3855: PUSH
3856: FOR_IN
3857: IFFALSE 3920
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3859: LD_EXP 22
3863: PUSH
3864: LD_VAR 0 2
3868: ARRAY
3869: PPUSH
3870: LD_INT 35
3872: PPUSH
3873: LD_INT 175
3875: PPUSH
3876: CALL_OW 12
3880: PPUSH
3881: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3885: LD_EXP 22
3889: PUSH
3890: LD_VAR 0 2
3894: ARRAY
3895: PPUSH
3896: LD_VAR 0 3
3900: PUSH
3901: LD_INT 1
3903: ARRAY
3904: PPUSH
3905: LD_VAR 0 3
3909: PUSH
3910: LD_INT 2
3912: ARRAY
3913: PPUSH
3914: CALL_OW 174
// end ;
3918: GO 3856
3920: POP
3921: POP
// end ;
3922: GO 3641
3924: POP
3925: POP
// until not russianPatrol or russianAlert ;
3926: LD_EXP 22
3930: NOT
3931: PUSH
3932: LD_EXP 5
3936: OR
3937: IFFALSE 3619
// if russianPatrol then
3939: LD_EXP 22
3943: IFFALSE 3960
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
3945: LD_EXP 22
3949: PPUSH
3950: LD_INT 161
3952: PPUSH
3953: LD_INT 107
3955: PPUSH
3956: CALL_OW 114
// end ;
3960: PPOPN 4
3962: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x ;
3963: LD_EXP 6
3967: PUSH
3968: LD_EXP 8
3972: NOT
3973: AND
3974: IFFALSE 4415
3976: GO 3978
3978: DISABLE
3979: LD_INT 0
3981: PPUSH
3982: PPUSH
3983: PPUSH
3984: PPUSH
3985: PPUSH
// begin enable ;
3986: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
3987: LD_ADDR_VAR 0 2
3991: PUSH
3992: LD_EXP 23
3996: PPUSH
3997: LD_INT 21
3999: PUSH
4000: LD_INT 2
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: CALL_OW 72
4011: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4012: LD_ADDR_VAR 0 4
4016: PUSH
4017: LD_INT 22
4019: PUSH
4020: LD_INT 1
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 69
4031: ST_TO_ADDR
// for i in filter do
4032: LD_ADDR_VAR 0 1
4036: PUSH
4037: LD_VAR 0 2
4041: PUSH
4042: FOR_IN
4043: IFFALSE 4413
// begin tmp := IsDrivenBy ( i ) ;
4045: LD_ADDR_VAR 0 3
4049: PUSH
4050: LD_VAR 0 1
4054: PPUSH
4055: CALL_OW 311
4059: ST_TO_ADDR
// if not tmp then
4060: LD_VAR 0 3
4064: NOT
4065: IFFALSE 4069
// continue ;
4067: GO 4042
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4069: LD_VAR 0 1
4073: PPUSH
4074: CALL_OW 261
4078: PUSH
4079: LD_INT 90
4081: GREATER
4082: PUSH
4083: LD_VAR 0 1
4087: PPUSH
4088: CALL_OW 110
4092: PUSH
4093: LD_INT 2
4095: EQUAL
4096: AND
4097: IFFALSE 4113
// SetTag ( i , 0 ) else
4099: LD_VAR 0 1
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 109
4111: GO 4164
// if GetTag ( i ) = 2 then
4113: LD_VAR 0 1
4117: PPUSH
4118: CALL_OW 110
4122: PUSH
4123: LD_INT 2
4125: EQUAL
4126: IFFALSE 4164
// begin x := rand ( 1 , 2 ) ;
4128: LD_ADDR_VAR 0 5
4132: PUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: CALL_OW 12
4143: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4144: LD_VAR 0 1
4148: PPUSH
4149: LD_EXP 24
4153: PUSH
4154: LD_VAR 0 5
4158: ARRAY
4159: PPUSH
4160: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4164: LD_VAR 0 1
4168: PPUSH
4169: CALL_OW 256
4173: PUSH
4174: LD_INT 600
4176: GREATEREQUAL
4177: PUSH
4178: LD_VAR 0 1
4182: PPUSH
4183: CALL_OW 110
4187: NOT
4188: AND
4189: IFFALSE 4215
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4191: LD_VAR 0 1
4195: PPUSH
4196: LD_VAR 0 4
4200: PPUSH
4201: LD_VAR 0 1
4205: PPUSH
4206: CALL_OW 74
4210: PPUSH
4211: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4215: LD_VAR 0 1
4219: PPUSH
4220: CALL_OW 256
4224: PUSH
4225: LD_INT 600
4227: LESS
4228: PUSH
4229: LD_VAR 0 1
4233: PPUSH
4234: CALL_OW 110
4238: NOT
4239: AND
4240: IFFALSE 4269
// begin SetTag ( i , 1 ) ;
4242: LD_VAR 0 1
4246: PPUSH
4247: LD_INT 1
4249: PPUSH
4250: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
4254: LD_VAR 0 1
4258: PPUSH
4259: LD_INT 62
4261: PPUSH
4262: LD_INT 22
4264: PPUSH
4265: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
4269: LD_VAR 0 1
4273: PPUSH
4274: CALL_OW 110
4278: PUSH
4279: LD_INT 1
4281: EQUAL
4282: PUSH
4283: LD_VAR 0 1
4287: PPUSH
4288: LD_INT 62
4290: PPUSH
4291: LD_INT 22
4293: PPUSH
4294: CALL_OW 297
4298: PUSH
4299: LD_INT 6
4301: LESS
4302: AND
4303: PUSH
4304: LD_VAR 0 3
4308: AND
4309: IFFALSE 4411
// begin ComExitVehicle ( tmp ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4320: LD_VAR 0 3
4324: PPUSH
4325: LD_VAR 0 1
4329: PPUSH
4330: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4341: LD_VAR 0 1
4345: PPUSH
4346: CALL_OW 256
4350: PUSH
4351: LD_INT 1000
4353: EQUAL
4354: IFFALSE 4334
// ComEnterUnit ( tmp , i ) ;
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL_OW 120
// if GetFuel ( i ) <= 90 then
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 261
4379: PUSH
4380: LD_INT 90
4382: LESSEQUAL
4383: IFFALSE 4399
// SetTag ( i , 2 ) else
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_INT 2
4392: PPUSH
4393: CALL_OW 109
4397: GO 4411
// SetTag ( i , 0 ) ;
4399: LD_VAR 0 1
4403: PPUSH
4404: LD_INT 0
4406: PPUSH
4407: CALL_OW 109
// end ; end ;
4411: GO 4042
4413: POP
4414: POP
// end ;
4415: PPOPN 5
4417: END
// every 2 2$00 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < 11 do
4418: LD_EXP 6
4422: PUSH
4423: LD_EXP 8
4427: NOT
4428: AND
4429: PUSH
4430: LD_EXP 23
4434: PUSH
4435: LD_INT 11
4437: LESS
4438: AND
4439: IFFALSE 4452
4441: GO 4443
4443: DISABLE
// begin enable ;
4444: ENABLE
// ProduceNew ( 0 ) ;
4445: LD_INT 0
4447: PPUSH
4448: CALL 4453 0 1
// end ;
4452: END
// export function ProduceNew ( type ) ; var un ; begin
4453: LD_INT 0
4455: PPUSH
4456: PPUSH
// uc_side := 3 ;
4457: LD_ADDR_OWVAR 20
4461: PUSH
4462: LD_INT 3
4464: ST_TO_ADDR
// uc_nation := 3 ;
4465: LD_ADDR_OWVAR 21
4469: PUSH
4470: LD_INT 3
4472: ST_TO_ADDR
// InitHc ;
4473: CALL_OW 19
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 3
4482: PPUSH
4483: LD_INT 3
4485: PUSH
4486: LD_INT 4
4488: PUSH
4489: LD_INT 5
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_OWVAR 67
4501: ARRAY
4502: PPUSH
4503: CALL_OW 380
// un := CreateHuman ;
4507: LD_ADDR_VAR 0 3
4511: PUSH
4512: CALL_OW 44
4516: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4517: LD_VAR 0 3
4521: PPUSH
4522: LD_INT 143
4524: PPUSH
4525: CALL_OW 52
// if type = 1 then
4529: LD_VAR 0 1
4533: PUSH
4534: LD_INT 1
4536: EQUAL
4537: IFFALSE 4560
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4539: LD_INT 143
4541: PPUSH
4542: LD_INT 21
4544: PPUSH
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 51
4553: PPUSH
4554: CALL_OW 185
4558: GO 4629
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4560: LD_INT 143
4562: PPUSH
4563: LD_INT 21
4565: PUSH
4566: LD_INT 22
4568: PUSH
4569: LD_INT 23
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 1
4579: PPUSH
4580: LD_INT 3
4582: PPUSH
4583: CALL_OW 12
4587: ARRAY
4588: PPUSH
4589: LD_INT 1
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: LD_INT 44
4597: PUSH
4598: LD_INT 44
4600: PUSH
4601: LD_INT 43
4603: PUSH
4604: LD_INT 42
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_INT 4
4618: PPUSH
4619: CALL_OW 12
4623: ARRAY
4624: PPUSH
4625: CALL_OW 185
// end ;
4629: LD_VAR 0 2
4633: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4634: LD_EXP 8
4638: IFFALSE 4840
4640: GO 4642
4642: DISABLE
4643: LD_INT 0
4645: PPUSH
4646: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4647: LD_EXP 24
4651: PPUSH
4652: LD_INT 79
4654: PPUSH
4655: LD_INT 155
4657: PPUSH
4658: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4662: LD_EXP 24
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4674: LD_ADDR_VAR 0 2
4678: PUSH
4679: LD_EXP 23
4683: PPUSH
4684: LD_INT 50
4686: PUSH
4687: EMPTY
4688: LIST
4689: PPUSH
4690: CALL_OW 72
4694: ST_TO_ADDR
// for i in tmp do
4695: LD_ADDR_VAR 0 1
4699: PUSH
4700: LD_VAR 0 2
4704: PUSH
4705: FOR_IN
4706: IFFALSE 4740
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 123
4715: PPUSH
4716: LD_INT 60
4718: PPUSH
4719: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
4723: LD_VAR 0 1
4727: PPUSH
4728: LD_INT 153
4730: PPUSH
4731: LD_INT 103
4733: PPUSH
4734: CALL_OW 174
// end ;
4738: GO 4705
4740: POP
4741: POP
// repeat wait ( 0 0$1 ) ;
4742: LD_INT 35
4744: PPUSH
4745: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4749: LD_ADDR_VAR 0 2
4753: PUSH
4754: LD_EXP 23
4758: PPUSH
4759: LD_INT 50
4761: PUSH
4762: EMPTY
4763: LIST
4764: PPUSH
4765: CALL_OW 72
4769: ST_TO_ADDR
// for i in tmp do
4770: LD_ADDR_VAR 0 1
4774: PUSH
4775: LD_VAR 0 2
4779: PUSH
4780: FOR_IN
4781: IFFALSE 4831
// if not HasTask ( i ) then
4783: LD_VAR 0 1
4787: PPUSH
4788: CALL_OW 314
4792: NOT
4793: IFFALSE 4829
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
4795: LD_VAR 0 1
4799: PPUSH
4800: LD_INT 81
4802: PUSH
4803: LD_INT 3
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 69
4814: PPUSH
4815: LD_VAR 0 1
4819: PPUSH
4820: CALL_OW 74
4824: PPUSH
4825: CALL_OW 115
4829: GO 4780
4831: POP
4832: POP
4833: LD_VAR 0 2
4837: NOT
4838: IFFALSE 4742
// end ;
4840: PPOPN 2
4842: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
4843: LD_INT 22
4845: PUSH
4846: LD_INT 3
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 32
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: IFFALSE 4950
4873: GO 4875
4875: DISABLE
4876: LD_INT 0
4878: PPUSH
// begin enable ;
4879: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 3
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 32
4897: PUSH
4898: LD_INT 1
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PPUSH
4909: CALL_OW 69
4913: PUSH
4914: FOR_IN
4915: IFFALSE 4948
// if GetFuel ( i ) < 1 then
4917: LD_VAR 0 1
4921: PPUSH
4922: CALL_OW 261
4926: PUSH
4927: LD_INT 1
4929: LESS
4930: IFFALSE 4946
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 311
4941: PPUSH
4942: CALL_OW 121
4946: GO 4914
4948: POP
4949: POP
// end ;
4950: PPOPN 1
4952: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_side , 2 ] ) do
4953: LD_INT 5
4955: PPUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 2
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PPUSH
4966: CALL_OW 70
4970: IFFALSE 4983
4972: GO 4974
4974: DISABLE
// russianAlert := true ;
4975: LD_ADDR_EXP 5
4979: PUSH
4980: LD_INT 1
4982: ST_TO_ADDR
4983: END
// every 0 0$03 do var i , c , p , skr , cargo , dep ;
4984: GO 4986
4986: DISABLE
4987: LD_INT 0
4989: PPUSH
4990: PPUSH
4991: PPUSH
4992: PPUSH
4993: PPUSH
4994: PPUSH
// begin enable ;
4995: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
4996: LD_ADDR_VAR 0 5
5000: PUSH
5001: LD_INT 22
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 34
5013: PUSH
5014: LD_INT 51
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 24
5023: PUSH
5024: LD_INT 600
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: PPUSH
5036: CALL_OW 69
5040: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5041: LD_ADDR_VAR 0 6
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: LD_INT 30
5061: PUSH
5062: LD_INT 0
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 30
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: LIST
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PPUSH
5088: CALL_OW 69
5092: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesSpawnArea ) ;
5093: LD_ADDR_VAR 0 4
5097: PUSH
5098: LD_INT 7
5100: PPUSH
5101: CALL_OW 435
5105: ST_TO_ADDR
// c = 1 ;
5106: LD_ADDR_VAR 0 2
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// if not cargo then
5114: LD_VAR 0 5
5118: NOT
5119: IFFALSE 5123
// exit ;
5121: GO 5407
// while c < skr do
5123: LD_VAR 0 2
5127: PUSH
5128: LD_VAR 0 4
5132: LESS
5133: IFFALSE 5407
// begin for i in cargo do
5135: LD_ADDR_VAR 0 1
5139: PUSH
5140: LD_VAR 0 5
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5389
// begin if not IsOk ( i ) or not skr then
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL_OW 302
5157: NOT
5158: PUSH
5159: LD_VAR 0 4
5163: NOT
5164: OR
5165: IFFALSE 5169
// continue ;
5167: GO 5145
// if c > skr then
5169: LD_VAR 0 2
5173: PUSH
5174: LD_VAR 0 4
5178: GREATER
5179: IFFALSE 5183
// continue ;
5181: GO 5145
// if GetFuel ( i ) > 40 and GetDistUnitXY ( i , skr [ c ] , skr [ c + 1 ] ) < 51 then
5183: LD_VAR 0 1
5187: PPUSH
5188: CALL_OW 261
5192: PUSH
5193: LD_INT 40
5195: GREATER
5196: PUSH
5197: LD_VAR 0 1
5201: PPUSH
5202: LD_VAR 0 4
5206: PUSH
5207: LD_VAR 0 2
5211: ARRAY
5212: PPUSH
5213: LD_VAR 0 4
5217: PUSH
5218: LD_VAR 0 2
5222: PUSH
5223: LD_INT 1
5225: PLUS
5226: ARRAY
5227: PPUSH
5228: CALL_OW 297
5232: PUSH
5233: LD_INT 51
5235: LESS
5236: AND
5237: IFFALSE 5274
// ComCollect ( i , skr [ c ] , skr [ c + 1 ] ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: LD_VAR 0 4
5248: PUSH
5249: LD_VAR 0 2
5253: ARRAY
5254: PPUSH
5255: LD_VAR 0 4
5259: PUSH
5260: LD_VAR 0 2
5264: PUSH
5265: LD_INT 1
5267: PLUS
5268: ARRAY
5269: PPUSH
5270: CALL_OW 117
// if GetFuel ( i ) <= 40 then
5274: LD_VAR 0 1
5278: PPUSH
5279: CALL_OW 261
5283: PUSH
5284: LD_INT 40
5286: LESSEQUAL
5287: IFFALSE 5387
// begin repeat begin ComMoveXY ( i , GetX ( NearestUnitToUnit ( dep , i ) ) , GetY ( NearestUnitToUnit ( dep , i ) ) ) ;
5289: LD_VAR 0 1
5293: PPUSH
5294: LD_VAR 0 6
5298: PPUSH
5299: LD_VAR 0 1
5303: PPUSH
5304: CALL_OW 74
5308: PPUSH
5309: CALL_OW 250
5313: PPUSH
5314: LD_VAR 0 6
5318: PPUSH
5319: LD_VAR 0 1
5323: PPUSH
5324: CALL_OW 74
5328: PPUSH
5329: CALL_OW 251
5333: PPUSH
5334: CALL_OW 111
// wait ( 0 0$01 ) ;
5338: LD_INT 35
5340: PPUSH
5341: CALL_OW 67
// end until GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 5 ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_VAR 0 6
5354: PPUSH
5355: LD_VAR 0 1
5359: PPUSH
5360: CALL_OW 74
5364: PPUSH
5365: CALL_OW 296
5369: PUSH
5370: LD_INT 5
5372: LESS
5373: IFFALSE 5289
// SetFuel ( i , 100 ) ;
5375: LD_VAR 0 1
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 240
// end ; end ;
5387: GO 5145
5389: POP
5390: POP
// c = c + 2 ;
5391: LD_ADDR_VAR 0 2
5395: PUSH
5396: LD_VAR 0 2
5400: PUSH
5401: LD_INT 2
5403: PLUS
5404: ST_TO_ADDR
// end ;
5405: GO 5123
// end ; end_of_file
5407: PPOPN 6
5409: END
// export function PrepareArabian ; var i , un , veh , tmp ; begin
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// uc_side := 2 ;
5417: LD_ADDR_OWVAR 20
5421: PUSH
5422: LD_INT 2
5424: ST_TO_ADDR
// uc_nation := 2 ;
5425: LD_ADDR_OWVAR 21
5429: PUSH
5430: LD_INT 2
5432: ST_TO_ADDR
// InitHc ;
5433: CALL_OW 19
// InitVc ;
5437: CALL_OW 20
// tmp := [ ] ;
5441: LD_ADDR_VAR 0 5
5445: PUSH
5446: EMPTY
5447: ST_TO_ADDR
// for i := 1 to 8 do
5448: LD_ADDR_VAR 0 2
5452: PUSH
5453: DOUBLE
5454: LD_INT 1
5456: DEC
5457: ST_TO_ADDR
5458: LD_INT 8
5460: PUSH
5461: FOR_TO
5462: IFFALSE 5613
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 99 ) ;
5464: LD_INT 14
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 26
5475: PPUSH
5476: LD_INT 99
5478: PPUSH
5479: CALL 25031 0 5
// veh := CreateVehicle ;
5483: LD_ADDR_VAR 0 4
5487: PUSH
5488: CALL_OW 45
5492: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
5493: LD_ADDR_VAR 0 5
5497: PUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: LD_VAR 0 5
5507: PUSH
5508: LD_INT 1
5510: PLUS
5511: PPUSH
5512: LD_VAR 0 4
5516: PPUSH
5517: CALL_OW 1
5521: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5522: LD_VAR 0 4
5526: PPUSH
5527: LD_INT 3
5529: PPUSH
5530: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 3 , false ) ;
5534: LD_VAR 0 4
5538: PPUSH
5539: LD_INT 178
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 0
5547: PPUSH
5548: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
5552: LD_INT 0
5554: PPUSH
5555: LD_INT 3
5557: PPUSH
5558: LD_INT 6
5560: PPUSH
5561: CALL_OW 380
// un := CreateHuman ;
5565: LD_ADDR_VAR 0 3
5569: PUSH
5570: CALL_OW 44
5574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5575: LD_VAR 0 3
5579: PPUSH
5580: LD_VAR 0 4
5584: PPUSH
5585: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
5589: LD_VAR 0 3
5593: PPUSH
5594: LD_INT 186
5596: PPUSH
5597: LD_INT 17
5599: PPUSH
5600: CALL_OW 111
// wait ( 0 0$2 ) ;
5604: LD_INT 70
5606: PPUSH
5607: CALL_OW 67
// end ;
5611: GO 5461
5613: POP
5614: POP
// for i in tmp do
5615: LD_ADDR_VAR 0 2
5619: PUSH
5620: LD_VAR 0 5
5624: PUSH
5625: FOR_IN
5626: IFFALSE 5645
// ComAgressiveMove ( i , 162 , 109 ) ;
5628: LD_VAR 0 2
5632: PPUSH
5633: LD_INT 162
5635: PPUSH
5636: LD_INT 109
5638: PPUSH
5639: CALL_OW 114
5643: GO 5625
5645: POP
5646: POP
// end ; end_of_file
5647: LD_VAR 0 1
5651: RET
// export function Action ; begin
5652: LD_INT 0
5654: PPUSH
// InGameOn ;
5655: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
5659: LD_INT 106
5661: PPUSH
5662: LD_INT 3
5664: PPUSH
5665: CALL_OW 86
// wait ( 0 0$2 ) ;
5669: LD_INT 70
5671: PPUSH
5672: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
5676: LD_STRING target1
5678: PPUSH
5679: CALL_OW 337
// InGameOff ;
5683: CALL_OW 9
// SaveForQuickRestart ;
5687: CALL_OW 22
// end ;
5691: LD_VAR 0 1
5695: RET
// every 0 0$1 trigger IsDead ( omikron ) do
5696: LD_INT 64
5698: PPUSH
5699: CALL_OW 301
5703: IFFALSE 5723
5705: GO 5707
5707: DISABLE
// begin omicronFall := true ;
5708: LD_ADDR_EXP 7
5712: PUSH
5713: LD_INT 1
5715: ST_TO_ADDR
// YouLost ( omi ) ;
5716: LD_STRING omi
5718: PPUSH
5719: CALL_OW 104
// end ;
5723: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
5724: LD_INT 4
5726: PPUSH
5727: LD_EXP 13
5731: PPUSH
5732: CALL_OW 292
5736: PUSH
5737: LD_INT 4
5739: PPUSH
5740: LD_EXP 13
5744: PPUSH
5745: CALL_OW 310
5749: PPUSH
5750: CALL_OW 292
5754: OR
5755: PUSH
5756: LD_INT 64
5758: PPUSH
5759: CALL_OW 302
5763: AND
5764: IFFALSE 6249
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
// begin InGameOn ;
5775: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
5779: LD_ADDR_VAR 0 2
5783: PUSH
5784: LD_INT 22
5786: PUSH
5787: LD_INT 4
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
5799: LD_ADDR_VAR 0 3
5803: PUSH
5804: LD_VAR 0 2
5808: PPUSH
5809: LD_INT 26
5811: PUSH
5812: LD_INT 1
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PPUSH
5819: CALL_OW 72
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: ST_TO_ADDR
// for i in tmp do
5828: LD_ADDR_VAR 0 1
5832: PUSH
5833: LD_VAR 0 2
5837: PUSH
5838: FOR_IN
5839: IFFALSE 5855
// SetSide ( i , 1 ) ;
5841: LD_VAR 0 1
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: CALL_OW 235
5853: GO 5838
5855: POP
5856: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
5857: LD_EXP 13
5861: PPUSH
5862: LD_INT 37
5864: PPUSH
5865: LD_INT 40
5867: PPUSH
5868: CALL_OW 111
// wait ( 0 0$3 ) ;
5872: LD_INT 105
5874: PPUSH
5875: CALL_OW 67
// ComExit ( Sikorski ) ;
5879: LD_EXP 13
5883: PPUSH
5884: CALL 56452 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
5888: LD_EXP 13
5892: PPUSH
5893: LD_INT 37
5895: PPUSH
5896: LD_INT 40
5898: PPUSH
5899: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
5903: LD_EXP 13
5907: PPUSH
5908: CALL_OW 85
// wait ( 0 0$2 ) ;
5912: LD_INT 70
5914: PPUSH
5915: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
5919: LD_ADDR_VAR 0 4
5923: PUSH
5924: LD_VAR 0 3
5928: PPUSH
5929: CALL 56452 0 1
5933: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
5934: LD_VAR 0 3
5938: PPUSH
5939: LD_EXP 13
5943: PPUSH
5944: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
5948: LD_INT 35
5950: PPUSH
5951: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
5955: LD_VAR 0 3
5959: PPUSH
5960: LD_EXP 13
5964: PPUSH
5965: CALL_OW 296
5969: PUSH
5970: LD_INT 5
5972: LESS
5973: PUSH
5974: LD_EXP 13
5978: PPUSH
5979: CALL_OW 310
5983: NOT
5984: AND
5985: IFFALSE 5948
// ComTurnUnit ( Sikorski , speaker ) ;
5987: LD_EXP 13
5991: PPUSH
5992: LD_VAR 0 3
5996: PPUSH
5997: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
6001: LD_VAR 0 3
6005: PPUSH
6006: LD_EXP 13
6010: PPUSH
6011: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
6015: LD_EXP 13
6019: PPUSH
6020: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
6024: LD_EXP 13
6028: PPUSH
6029: LD_STRING DS-1
6031: PPUSH
6032: CALL_OW 88
// Say ( speaker , DP-1 ) ;
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_STRING DP-1
6043: PPUSH
6044: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
6048: LD_EXP 13
6052: PPUSH
6053: LD_STRING DS-2
6055: PPUSH
6056: CALL_OW 88
// Say ( speaker , DP-2 ) ;
6060: LD_VAR 0 3
6064: PPUSH
6065: LD_STRING DP-2
6067: PPUSH
6068: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
6072: LD_EXP 13
6076: PPUSH
6077: LD_STRING DS-3
6079: PPUSH
6080: CALL_OW 88
// Say ( speaker , DP-3 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_STRING DP-3
6091: PPUSH
6092: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
6096: LD_EXP 13
6100: PPUSH
6101: LD_STRING DS-4
6103: PPUSH
6104: CALL_OW 88
// wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// if whereHeWas then
6115: LD_VAR 0 4
6119: IFFALSE 6135
// ComEnterUnit ( speaker , whereHeWas ) ;
6121: LD_VAR 0 3
6125: PPUSH
6126: LD_VAR 0 4
6130: PPUSH
6131: CALL_OW 120
// ComHold ( Sikorski ) ;
6135: LD_EXP 13
6139: PPUSH
6140: CALL_OW 140
// wait ( 0 0$1 ) ;
6144: LD_INT 35
6146: PPUSH
6147: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
6151: LD_EXP 14
6155: PPUSH
6156: LD_STRING DR-1
6158: PPUSH
6159: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
6163: LD_EXP 13
6167: PPUSH
6168: LD_STRING DS-5
6170: PPUSH
6171: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
6175: LD_EXP 14
6179: PPUSH
6180: LD_STRING DR-2
6182: PPUSH
6183: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
6187: LD_EXP 13
6191: PPUSH
6192: LD_STRING DS-6
6194: PPUSH
6195: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
6199: LD_EXP 14
6203: PPUSH
6204: LD_STRING DR-3
6206: PPUSH
6207: CALL_OW 94
// InGameOff ;
6211: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
6215: LD_STRING target2
6217: PPUSH
6218: CALL_OW 337
// sikorskiInOmicron := true ;
6222: LD_ADDR_EXP 9
6226: PUSH
6227: LD_INT 1
6229: ST_TO_ADDR
// wait ( 0 0$2 ) ;
6230: LD_INT 70
6232: PPUSH
6233: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
6237: LD_EXP 13
6241: PPUSH
6242: LD_STRING DS-7
6244: PPUSH
6245: CALL_OW 88
// end ;
6249: PPOPN 4
6251: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
6252: LD_EXP 13
6256: PPUSH
6257: CALL_OW 256
6261: PUSH
6262: LD_INT 1000
6264: LESS
6265: PUSH
6266: LD_INT 22
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: LD_INT 101
6281: PUSH
6282: LD_INT 3
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: LD_INT 101
6291: PUSH
6292: LD_INT 6
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PPUSH
6308: CALL_OW 69
6312: AND
6313: IFFALSE 6330
6315: GO 6317
6317: DISABLE
// Say ( Sikorski , DRus ) ;
6318: LD_EXP 13
6322: PPUSH
6323: LD_STRING DRus
6325: PPUSH
6326: CALL_OW 88
6330: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$00 , 9 9$20 ] [ Difficulty ] do
6331: LD_OWVAR 1
6335: PUSH
6336: LD_INT 23100
6338: PUSH
6339: LD_INT 21000
6341: PUSH
6342: LD_INT 19600
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_OWVAR 67
6354: ARRAY
6355: GREATEREQUAL
6356: IFFALSE 6421
6358: GO 6360
6360: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
6361: LD_EXP 23
6365: PPUSH
6366: LD_INT 21
6368: PUSH
6369: LD_INT 2
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PPUSH
6376: CALL_OW 72
6380: PPUSH
6381: LD_INT 62
6383: PPUSH
6384: LD_INT 22
6386: PPUSH
6387: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
6391: LD_EXP 24
6395: PPUSH
6396: LD_INT 69
6398: PPUSH
6399: LD_INT 27
6401: PPUSH
6402: CALL_OW 111
// wait ( 1 1$00 ) ;
6406: LD_INT 2100
6408: PPUSH
6409: CALL_OW 67
// startAttackOnOmicron := true ;
6413: LD_ADDR_EXP 6
6417: PUSH
6418: LD_INT 1
6420: ST_TO_ADDR
// end ;
6421: END
// every 0 0$1 trigger tick >= [ 6 6$00 , 7 7$00 , 8 8$00 ] [ Difficulty ] do var i , un , tmp , spotted , xy ;
6422: LD_OWVAR 1
6426: PUSH
6427: LD_INT 12600
6429: PUSH
6430: LD_INT 14700
6432: PUSH
6433: LD_INT 16800
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: PUSH
6441: LD_OWVAR 67
6445: ARRAY
6446: GREATEREQUAL
6447: IFFALSE 7297
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
6455: PPUSH
6456: PPUSH
6457: PPUSH
6458: PPUSH
// begin uc_side := 4 ;
6459: LD_ADDR_OWVAR 20
6463: PUSH
6464: LD_INT 4
6466: ST_TO_ADDR
// uc_nation := 1 ;
6467: LD_ADDR_OWVAR 21
6471: PUSH
6472: LD_INT 1
6474: ST_TO_ADDR
// tmp := [ ] ;
6475: LD_ADDR_VAR 0 3
6479: PUSH
6480: EMPTY
6481: ST_TO_ADDR
// InitHc ;
6482: CALL_OW 19
// hc_importance := 0 ;
6486: LD_ADDR_OWVAR 32
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6494: LD_INT 2
6496: PPUSH
6497: LD_INT 1
6499: PPUSH
6500: LD_INT 1
6502: PPUSH
6503: LD_INT 4
6505: PPUSH
6506: LD_INT 77
6508: PPUSH
6509: CALL 25031 0 5
// un := CreateVehicle ;
6513: LD_ADDR_VAR 0 2
6517: PUSH
6518: CALL_OW 45
6522: ST_TO_ADDR
// tmp := tmp union un ;
6523: LD_ADDR_VAR 0 3
6527: PUSH
6528: LD_VAR 0 3
6532: PUSH
6533: LD_VAR 0 2
6537: UNION
6538: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6539: LD_VAR 0 2
6543: PPUSH
6544: LD_INT 2
6546: PPUSH
6547: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6551: LD_VAR 0 2
6555: PPUSH
6556: LD_INT 106
6558: PPUSH
6559: LD_INT 3
6561: PPUSH
6562: LD_INT 0
6564: PPUSH
6565: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6569: LD_INT 0
6571: PPUSH
6572: LD_INT 3
6574: PPUSH
6575: LD_INT 2
6577: PPUSH
6578: CALL_OW 380
// un := CreateHuman ;
6582: LD_ADDR_VAR 0 2
6586: PUSH
6587: CALL_OW 44
6591: ST_TO_ADDR
// tmp := tmp union un ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: LD_VAR 0 3
6601: PUSH
6602: LD_VAR 0 2
6606: UNION
6607: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6608: LD_VAR 0 2
6612: PPUSH
6613: LD_VAR 0 3
6617: PUSH
6618: LD_VAR 0 3
6622: PUSH
6623: LD_INT 1
6625: MINUS
6626: ARRAY
6627: PPUSH
6628: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6632: LD_VAR 0 2
6636: PPUSH
6637: LD_INT 109
6639: PPUSH
6640: LD_INT 9
6642: PPUSH
6643: CALL_OW 111
// wait ( 0 0$1 ) ;
6647: LD_INT 35
6649: PPUSH
6650: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
6654: LD_ADDR_VAR 0 1
6658: PUSH
6659: DOUBLE
6660: LD_INT 1
6662: DEC
6663: ST_TO_ADDR
6664: LD_INT 2
6666: PUSH
6667: LD_INT 2
6669: PUSH
6670: LD_INT 1
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: LD_OWVAR 67
6682: ARRAY
6683: PUSH
6684: FOR_TO
6685: IFFALSE 6749
// begin PrepareHuman ( false , 1 , 2 ) ;
6687: LD_INT 0
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: LD_INT 2
6695: PPUSH
6696: CALL_OW 380
// un := CreateHuman ;
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: CALL_OW 44
6709: ST_TO_ADDR
// tmp := tmp union un ;
6710: LD_ADDR_VAR 0 3
6714: PUSH
6715: LD_VAR 0 3
6719: PUSH
6720: LD_VAR 0 2
6724: UNION
6725: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6726: LD_VAR 0 2
6730: PPUSH
6731: LD_INT 105
6733: PPUSH
6734: LD_INT 2
6736: PPUSH
6737: LD_INT 2
6739: PPUSH
6740: LD_INT 0
6742: PPUSH
6743: CALL_OW 50
// end ;
6747: GO 6684
6749: POP
6750: POP
// PrepareHuman ( false , 4 , 2 ) ;
6751: LD_INT 0
6753: PPUSH
6754: LD_INT 4
6756: PPUSH
6757: LD_INT 2
6759: PPUSH
6760: CALL_OW 380
// un := CreateHuman ;
6764: LD_ADDR_VAR 0 2
6768: PUSH
6769: CALL_OW 44
6773: ST_TO_ADDR
// tmp := tmp union un ;
6774: LD_ADDR_VAR 0 3
6778: PUSH
6779: LD_VAR 0 3
6783: PUSH
6784: LD_VAR 0 2
6788: UNION
6789: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_INT 105
6797: PPUSH
6798: LD_INT 2
6800: PPUSH
6801: LD_INT 2
6803: PPUSH
6804: LD_INT 0
6806: PPUSH
6807: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6811: LD_VAR 0 3
6815: PPUSH
6816: LD_INT 26
6818: PPUSH
6819: LD_INT 35
6821: PPUSH
6822: CALL_OW 114
// spotted := false ;
6826: LD_ADDR_VAR 0 4
6830: PUSH
6831: LD_INT 0
6833: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
6834: LD_ADDR_VAR 0 5
6838: PUSH
6839: LD_INT 0
6841: PUSH
6842: LD_INT 0
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6849: LD_INT 35
6851: PPUSH
6852: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
6856: LD_VAR 0 3
6860: PPUSH
6861: LD_INT 3
6863: PUSH
6864: LD_INT 24
6866: PUSH
6867: LD_INT 1000
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 72
6882: PUSH
6883: LD_VAR 0 4
6887: NOT
6888: AND
6889: IFFALSE 7015
// begin spotted := true ;
6891: LD_ADDR_VAR 0 4
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
6899: LD_ADDR_VAR 0 2
6903: PUSH
6904: LD_VAR 0 3
6908: PPUSH
6909: LD_INT 3
6911: PUSH
6912: LD_INT 24
6914: PUSH
6915: LD_INT 1000
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PPUSH
6926: CALL_OW 72
6930: PUSH
6931: LD_INT 1
6933: ARRAY
6934: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
6935: LD_ADDR_VAR 0 5
6939: PUSH
6940: LD_VAR 0 2
6944: PPUSH
6945: CALL_OW 250
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
6964: LD_VAR 0 5
6968: PUSH
6969: LD_INT 1
6971: ARRAY
6972: PPUSH
6973: LD_VAR 0 5
6977: PUSH
6978: LD_INT 2
6980: ARRAY
6981: PPUSH
6982: LD_INT 1
6984: PPUSH
6985: LD_INT 12
6987: NEG
6988: PPUSH
6989: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
6993: LD_VAR 0 5
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_VAR 0 5
7006: PUSH
7007: LD_INT 2
7009: ARRAY
7010: PPUSH
7011: CALL_OW 84
// end ; for i in tmp do
7015: LD_ADDR_VAR 0 1
7019: PUSH
7020: LD_VAR 0 3
7024: PUSH
7025: FOR_IN
7026: IFFALSE 7057
// if not HasTask ( i ) then
7028: LD_VAR 0 1
7032: PPUSH
7033: CALL_OW 314
7037: NOT
7038: IFFALSE 7055
// ComAgressiveMove ( i , 26 , 35 ) ;
7040: LD_VAR 0 1
7044: PPUSH
7045: LD_INT 26
7047: PPUSH
7048: LD_INT 35
7050: PPUSH
7051: CALL_OW 114
7055: GO 7025
7057: POP
7058: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
7059: LD_VAR 0 3
7063: PPUSH
7064: LD_INT 50
7066: PUSH
7067: EMPTY
7068: LIST
7069: PPUSH
7070: CALL_OW 72
7074: NOT
7075: IFFALSE 7110
// begin if spotted then
7077: LD_VAR 0 4
7081: IFFALSE 7108
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
7083: LD_VAR 0 5
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 5
7096: PUSH
7097: LD_INT 2
7099: ARRAY
7100: PPUSH
7101: LD_INT 1
7103: PPUSH
7104: CALL_OW 331
// exit ;
7108: GO 7297
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
7110: LD_VAR 0 3
7114: PPUSH
7115: LD_INT 91
7117: PUSH
7118: LD_INT 64
7120: PUSH
7121: LD_INT 12
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 72
7133: PUSH
7134: LD_INT 4
7136: PPUSH
7137: LD_EXP 13
7141: PPUSH
7142: CALL_OW 292
7146: OR
7147: IFFALSE 6849
// omicronSquad := omicronSquad union tmp ;
7149: LD_ADDR_EXP 12
7153: PUSH
7154: LD_EXP 12
7158: PUSH
7159: LD_VAR 0 3
7163: UNION
7164: ST_TO_ADDR
// if spotted then
7165: LD_VAR 0 4
7169: IFFALSE 7196
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
7171: LD_VAR 0 5
7175: PUSH
7176: LD_INT 1
7178: ARRAY
7179: PPUSH
7180: LD_VAR 0 5
7184: PUSH
7185: LD_INT 2
7187: ARRAY
7188: PPUSH
7189: LD_INT 1
7191: PPUSH
7192: CALL_OW 331
// for i in tmp do
7196: LD_ADDR_VAR 0 1
7200: PUSH
7201: LD_VAR 0 3
7205: PUSH
7206: FOR_IN
7207: IFFALSE 7223
// SetSide ( i , 1 ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: LD_INT 1
7216: PPUSH
7217: CALL_OW 235
7221: GO 7206
7223: POP
7224: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 26
7232: PUSH
7233: LD_INT 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 50
7242: PUSH
7243: EMPTY
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PPUSH
7250: CALL_OW 72
7254: IFFALSE 7297
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_INT 26
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 50
7273: PUSH
7274: EMPTY
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 72
7285: PUSH
7286: LD_INT 1
7288: ARRAY
7289: PPUSH
7290: LD_STRING Dcargo
7292: PPUSH
7293: CALL_OW 88
// end ;
7297: PPOPN 5
7299: END
// every 0 0$1 trigger tick > 24 24$00 do var un , i ;
7300: LD_OWVAR 1
7304: PUSH
7305: LD_INT 50400
7307: GREATER
7308: IFFALSE 7472
7310: GO 7312
7312: DISABLE
7313: LD_INT 0
7315: PPUSH
7316: PPUSH
// begin uc_side := 1 ;
7317: LD_ADDR_OWVAR 20
7321: PUSH
7322: LD_INT 1
7324: ST_TO_ADDR
// uc_nation := 1 ;
7325: LD_ADDR_OWVAR 21
7329: PUSH
7330: LD_INT 1
7332: ST_TO_ADDR
// InitHc ;
7333: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 3 ) ;
7337: LD_INT 1
7339: PPUSH
7340: LD_INT 1
7342: PPUSH
7343: LD_INT 3
7345: PPUSH
7346: CALL_OW 380
// un := CreateHuman ;
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: CALL_OW 44
7359: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
7360: LD_VAR 0 1
7364: PPUSH
7365: LD_INT 83
7367: PPUSH
7368: LD_INT 154
7370: PPUSH
7371: LD_INT 10
7373: PPUSH
7374: LD_INT 0
7376: PPUSH
7377: CALL_OW 50
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
7381: LD_ADDR_VAR 0 2
7385: PUSH
7386: DOUBLE
7387: LD_INT 1
7389: DEC
7390: ST_TO_ADDR
7391: LD_INT 4
7393: PUSH
7394: LD_INT 3
7396: PUSH
7397: LD_INT 3
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PUSH
7411: FOR_TO
7412: IFFALSE 7458
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 3 ) ;
7414: LD_INT 0
7416: PPUSH
7417: LD_INT 1
7419: PPUSH
7420: LD_INT 4
7422: PPUSH
7423: CALL_OW 12
7427: PPUSH
7428: LD_INT 3
7430: PPUSH
7431: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 83 , 154 , 10 , false ) ;
7435: CALL_OW 44
7439: PPUSH
7440: LD_INT 83
7442: PPUSH
7443: LD_INT 154
7445: PPUSH
7446: LD_INT 10
7448: PPUSH
7449: LD_INT 0
7451: PPUSH
7452: CALL_OW 50
// end ;
7456: GO 7411
7458: POP
7459: POP
// SayRadio ( un , Dhelp ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_STRING Dhelp
7467: PPUSH
7468: CALL_OW 94
// end ;
7472: PPOPN 2
7474: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
7475: LD_EXP 5
7479: IFFALSE 7759
7481: GO 7483
7483: DISABLE
7484: LD_INT 0
7486: PPUSH
7487: PPUSH
7488: PPUSH
7489: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
7490: LD_ADDR_VAR 0 2
7494: PUSH
7495: LD_EXP 19
7499: PPUSH
7500: LD_INT 25
7502: PUSH
7503: LD_INT 1
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 54
7512: PUSH
7513: EMPTY
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 72
7524: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
7525: LD_ADDR_VAR 0 3
7529: PUSH
7530: LD_INT 22
7532: PUSH
7533: LD_INT 6
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PUSH
7540: LD_INT 30
7542: PUSH
7543: LD_INT 32
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PPUSH
7554: CALL_OW 69
7558: ST_TO_ADDR
// for i := 1 to tmp do
7559: LD_ADDR_VAR 0 1
7563: PUSH
7564: DOUBLE
7565: LD_INT 1
7567: DEC
7568: ST_TO_ADDR
7569: LD_VAR 0 2
7573: PUSH
7574: FOR_TO
7575: IFFALSE 7620
// begin ComExitBuilding ( tmp [ i ] ) ;
7577: LD_VAR 0 2
7581: PUSH
7582: LD_VAR 0 1
7586: ARRAY
7587: PPUSH
7588: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
7592: LD_VAR 0 2
7596: PUSH
7597: LD_VAR 0 1
7601: ARRAY
7602: PPUSH
7603: LD_VAR 0 3
7607: PUSH
7608: LD_VAR 0 1
7612: ARRAY
7613: PPUSH
7614: CALL_OW 180
// end ;
7618: GO 7574
7620: POP
7621: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
7622: LD_ADDR_VAR 0 4
7626: PUSH
7627: LD_EXP 17
7631: PUSH
7632: LD_EXP 19
7636: PUSH
7637: LD_EXP 20
7641: UNION
7642: PPUSH
7643: LD_INT 3
7645: PUSH
7646: LD_INT 25
7648: PUSH
7649: LD_INT 1
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PPUSH
7660: CALL_OW 72
7664: UNION
7665: ST_TO_ADDR
// for i in noncombat do
7666: LD_ADDR_VAR 0 1
7670: PUSH
7671: LD_VAR 0 4
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7713
// begin if IsInUnit ( i ) then
7679: LD_VAR 0 1
7683: PPUSH
7684: CALL_OW 310
7688: IFFALSE 7699
// ComExitBuilding ( i ) ;
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
7699: LD_VAR 0 1
7703: PPUSH
7704: LD_INT 4
7706: PPUSH
7707: CALL_OW 173
// end ;
7711: GO 7676
7713: POP
7714: POP
// SayRadio ( Kurin , D9a-Kur-1 ) ;
7715: LD_EXP 15
7719: PPUSH
7720: LD_STRING D9a-Kur-1
7722: PPUSH
7723: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
7727: LD_EXP 18
7731: PPUSH
7732: LD_STRING D9a-Bur-1
7734: PPUSH
7735: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
7739: LD_EXP 15
7743: PPUSH
7744: LD_STRING D9a-Kur-2
7746: PPUSH
7747: CALL_OW 94
// retreatFromOmicron := true ;
7751: LD_ADDR_EXP 8
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// end ;
7759: PPOPN 4
7761: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
7762: LD_OWVAR 1
7766: PUSH
7767: LD_INT 42000
7769: PPUSH
7770: LD_INT 63000
7772: PPUSH
7773: CALL_OW 12
7777: GREATER
7778: IFFALSE 7911
7780: GO 7782
7782: DISABLE
7783: LD_INT 0
7785: PPUSH
// begin uc_side := 4 ;
7786: LD_ADDR_OWVAR 20
7790: PUSH
7791: LD_INT 4
7793: ST_TO_ADDR
// uc_nation := 4 ;
7794: LD_ADDR_OWVAR 21
7798: PUSH
7799: LD_INT 4
7801: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
7802: LD_INT 1
7804: PPUSH
7805: LD_INT 4
7807: PPUSH
7808: LD_INT 3
7810: PPUSH
7811: CALL_OW 380
// un := CreateHuman ;
7815: LD_ADDR_VAR 0 1
7819: PUSH
7820: CALL_OW 44
7824: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
7825: LD_VAR 0 1
7829: PPUSH
7830: LD_INT 161
7832: PPUSH
7833: LD_INT 162
7835: PPUSH
7836: LD_INT 3
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: CALL_OW 50
// wait ( 0 0$3 ) ;
7846: LD_INT 105
7848: PPUSH
7849: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
7853: LD_VAR 0 1
7857: PPUSH
7858: LD_STRING Dun1
7860: PPUSH
7861: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
7865: LD_INT 35
7867: PPUSH
7868: CALL_OW 67
// if IsDead ( un ) then
7872: LD_VAR 0 1
7876: PPUSH
7877: CALL_OW 301
7881: IFFALSE 7885
// exit ;
7883: GO 7911
// until See ( 1 , un ) ;
7885: LD_INT 1
7887: PPUSH
7888: LD_VAR 0 1
7892: PPUSH
7893: CALL_OW 292
7897: IFFALSE 7865
// SetSide ( un , 1 ) ;
7899: LD_VAR 0 1
7903: PPUSH
7904: LD_INT 1
7906: PPUSH
7907: CALL_OW 235
// end ;
7911: PPOPN 1
7913: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
7914: LD_OWVAR 1
7918: PUSH
7919: LD_INT 94500
7921: PPUSH
7922: LD_INT 109200
7924: PPUSH
7925: CALL_OW 12
7929: GREATER
7930: IFFALSE 8151
7932: GO 7934
7934: DISABLE
7935: LD_INT 0
7937: PPUSH
// begin PrepareArabian ;
7938: CALL 5410 0 0
// uc_side := 4 ;
7942: LD_ADDR_OWVAR 20
7946: PUSH
7947: LD_INT 4
7949: ST_TO_ADDR
// uc_nation := 1 ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// InitHc ;
7958: CALL_OW 19
// un := CreateHuman ;
7962: LD_ADDR_VAR 0 1
7966: PUSH
7967: CALL_OW 44
7971: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
7972: LD_VAR 0 1
7976: PPUSH
7977: LD_STRING ar_come
7979: PPUSH
7980: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
7984: LD_INT 35
7986: PPUSH
7987: CALL_OW 67
// until retreatFromOmicron or IsDead ( Kurin ) or tick > 55 55$00 ;
7991: LD_EXP 8
7995: PUSH
7996: LD_EXP 15
8000: PPUSH
8001: CALL_OW 301
8005: OR
8006: PUSH
8007: LD_OWVAR 1
8011: PUSH
8012: LD_INT 115500
8014: GREATER
8015: OR
8016: IFFALSE 7984
// SayRadio ( Harrison , you_win ) ;
8018: LD_EXP 14
8022: PPUSH
8023: LD_STRING you_win
8025: PPUSH
8026: CALL_OW 94
// AddMedal ( med , 1 ) ;
8030: LD_STRING med
8032: PPUSH
8033: LD_INT 1
8035: PPUSH
8036: CALL_OW 101
// if ruLoseCounter > [ 25 , 33 , 45 ] [ Difficulty ] then
8040: LD_EXP 11
8044: PUSH
8045: LD_INT 25
8047: PUSH
8048: LD_INT 33
8050: PUSH
8051: LD_INT 45
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: LD_OWVAR 67
8063: ARRAY
8064: GREATER
8065: IFFALSE 8079
// AddMedal ( ru , 1 ) else
8067: LD_STRING ru
8069: PPUSH
8070: LD_INT 1
8072: PPUSH
8073: CALL_OW 101
8077: GO 8090
// AddMedal ( ru , - 1 ) ;
8079: LD_STRING ru
8081: PPUSH
8082: LD_INT 1
8084: NEG
8085: PPUSH
8086: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
8090: LD_EXP 10
8094: PUSH
8095: LD_INT 4
8097: PUSH
8098: LD_INT 3
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: LD_OWVAR 67
8113: ARRAY
8114: LESS
8115: IFFALSE 8129
// AddMedal ( pep , 1 ) else
8117: LD_STRING pep
8119: PPUSH
8120: LD_INT 1
8122: PPUSH
8123: CALL_OW 101
8127: GO 8140
// AddMedal ( pep , - 1 ) ;
8129: LD_STRING pep
8131: PPUSH
8132: LD_INT 1
8134: NEG
8135: PPUSH
8136: CALL_OW 101
// GiveMedals ( MAIN ) ;
8140: LD_STRING MAIN
8142: PPUSH
8143: CALL_OW 102
// YouWin ;
8147: CALL_OW 103
// end ; end_of_file
8151: PPOPN 1
8153: END
// on UnitDestroyed ( un ) do begin if un = Sikorski then
8154: LD_VAR 0 1
8158: PUSH
8159: LD_EXP 13
8163: EQUAL
8164: IFFALSE 8173
// YouLost ( sik ) ;
8166: LD_STRING sik
8168: PPUSH
8169: CALL_OW 104
// if un in russianOmicronAttackers then
8173: LD_VAR 0 1
8177: PUSH
8178: LD_EXP 23
8182: IN
8183: IFFALSE 8201
// russianOmicronAttackers := russianOmicronAttackers diff un ;
8185: LD_ADDR_EXP 23
8189: PUSH
8190: LD_EXP 23
8194: PUSH
8195: LD_VAR 0 1
8199: DIFF
8200: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
8201: LD_VAR 0 1
8205: PUSH
8206: LD_INT 22
8208: PUSH
8209: LD_INT 3
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 34
8218: PUSH
8219: LD_INT 51
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PPUSH
8230: CALL_OW 69
8234: IN
8235: IFFALSE 8244
// ProduceNew ( 1 ) ;
8237: LD_INT 1
8239: PPUSH
8240: CALL 4453 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
8244: LD_VAR 0 1
8248: PPUSH
8249: CALL_OW 255
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: LD_INT 4
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: IN
8264: PUSH
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 247
8274: PUSH
8275: LD_INT 1
8277: EQUAL
8278: AND
8279: PUSH
8280: LD_VAR 0 1
8284: PPUSH
8285: CALL_OW 248
8289: PUSH
8290: LD_INT 1
8292: EQUAL
8293: AND
8294: IFFALSE 8310
// usLoseCounter := usLoseCounter + 1 ;
8296: LD_ADDR_EXP 10
8300: PUSH
8301: LD_EXP 10
8305: PUSH
8306: LD_INT 1
8308: PLUS
8309: ST_TO_ADDR
// end ;
8310: PPOPN 1
8312: END
// on VehicleConstructed ( veh , factory ) do begin if GetSide ( factory ) <> 3 then
8313: LD_VAR 0 2
8317: PPUSH
8318: CALL_OW 255
8322: PUSH
8323: LD_INT 3
8325: NONEQUAL
8326: IFFALSE 8330
// exit ;
8328: GO 8392
// if GetWeapon ( veh ) = ru_cargo_bay then
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL_OW 264
8339: PUSH
8340: LD_INT 51
8342: EQUAL
8343: IFFALSE 8347
// exit ;
8345: GO 8392
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
8347: LD_ADDR_EXP 23
8351: PUSH
8352: LD_EXP 23
8356: PUSH
8357: LD_VAR 0 1
8361: PUSH
8362: LD_VAR 0 1
8366: PPUSH
8367: CALL_OW 310
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: UNION
8376: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
8377: LD_VAR 0 1
8381: PPUSH
8382: LD_INT 71
8384: PPUSH
8385: LD_INT 37
8387: PPUSH
8388: CALL_OW 174
// end ;
8392: PPOPN 2
8394: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_VAR 0 2
8404: PPUSH
8405: LD_VAR 0 3
8409: PPUSH
8410: CALL 8708 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
8414: LD_VAR 0 2
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: LD_INT 4
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: IN
8429: PUSH
8430: LD_VAR 0 1
8434: PPUSH
8435: CALL_OW 255
8439: PUSH
8440: LD_INT 3
8442: PUSH
8443: LD_INT 6
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: IN
8450: AND
8451: IFFALSE 8467
// ruLoseCounter := ruLoseCounter + 1 ;
8453: LD_ADDR_EXP 11
8457: PUSH
8458: LD_EXP 11
8462: PUSH
8463: LD_INT 1
8465: PLUS
8466: ST_TO_ADDR
// end ;
8467: PPOPN 3
8469: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8470: LD_VAR 0 1
8474: PPUSH
8475: CALL 8716 0 1
// end ; end_of_file
8479: PPOPN 1
8481: END
// every 1 1$25 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 200 , 150 , 120 ] [ Difficulty ] do
8482: LD_EXP 9
8486: PUSH
8487: LD_INT 6
8489: PPUSH
8490: LD_INT 1
8492: PPUSH
8493: CALL_OW 287
8497: PUSH
8498: LD_INT 200
8500: PUSH
8501: LD_INT 150
8503: PUSH
8504: LD_INT 120
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: PUSH
8512: LD_OWVAR 67
8516: ARRAY
8517: LESS
8518: AND
8519: IFFALSE 8561
8521: GO 8523
8523: DISABLE
// begin enable ;
8524: ENABLE
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
8525: LD_INT 350
8527: PPUSH
8528: LD_INT 700
8530: PPUSH
8531: CALL_OW 12
8535: PPUSH
8536: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
8540: LD_INT 2
8542: PPUSH
8543: LD_INT 5
8545: PPUSH
8546: CALL_OW 12
8550: PPUSH
8551: LD_INT 6
8553: PPUSH
8554: LD_INT 1
8556: PPUSH
8557: CALL_OW 55
// end ;
8561: END
// every 1 1$25 do
8562: GO 8564
8564: DISABLE
// begin enable ;
8565: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
8566: LD_INT 2
8568: PPUSH
8569: LD_INT 5
8571: PPUSH
8572: CALL_OW 12
8576: PPUSH
8577: LD_INT 7
8579: PPUSH
8580: LD_INT 1
8582: PPUSH
8583: CALL_OW 55
// end ; end_of_file
8587: END
// every 0 0$01 do
8588: GO 8590
8590: DISABLE
// begin enable ;
8591: ENABLE
// display_strings := [ #tick , tick ] ;
8592: LD_ADDR_OWVAR 47
8596: PUSH
8597: LD_STRING #tick
8599: PUSH
8600: LD_OWVAR 1
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: ST_TO_ADDR
// end ; end_of_file
8609: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
8610: LD_INT 0
8612: PPUSH
8613: PPUSH
8614: PPUSH
8615: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 264
8625: PUSH
8626: LD_EXP 83
8630: EQUAL
8631: IFFALSE 8703
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
8633: LD_INT 68
8635: PPUSH
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 255
8645: PPUSH
8646: CALL_OW 321
8650: PUSH
8651: LD_INT 2
8653: EQUAL
8654: IFFALSE 8666
// eff := 70 else
8656: LD_ADDR_VAR 0 4
8660: PUSH
8661: LD_INT 70
8663: ST_TO_ADDR
8664: GO 8674
// eff := 30 ;
8666: LD_ADDR_VAR 0 4
8670: PUSH
8671: LD_INT 30
8673: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
8674: LD_VAR 0 1
8678: PPUSH
8679: CALL_OW 250
8683: PPUSH
8684: LD_VAR 0 1
8688: PPUSH
8689: CALL_OW 251
8693: PPUSH
8694: LD_VAR 0 4
8698: PPUSH
8699: CALL_OW 495
// end ; end ;
8703: LD_VAR 0 2
8707: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
8708: LD_INT 0
8710: PPUSH
// end ;
8711: LD_VAR 0 4
8715: RET
// export function SOS_Command ( cmd ) ; begin
8716: LD_INT 0
8718: PPUSH
// end ;
8719: LD_VAR 0 2
8723: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 255
8731: EQUAL
8732: PUSH
8733: LD_VAR 0 2
8737: PPUSH
8738: CALL_OW 264
8742: PUSH
8743: LD_INT 14
8745: PUSH
8746: LD_INT 53
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: IN
8753: AND
8754: PUSH
8755: LD_VAR 0 4
8759: PPUSH
8760: LD_VAR 0 5
8764: PPUSH
8765: CALL_OW 488
8769: AND
8770: IFFALSE 8794
// CutTreeXYR ( unit , x , y , 12 ) ;
8772: LD_VAR 0 2
8776: PPUSH
8777: LD_VAR 0 4
8781: PPUSH
8782: LD_VAR 0 5
8786: PPUSH
8787: LD_INT 12
8789: PPUSH
8790: CALL 8797 0 4
// end ;
8794: PPOPN 5
8796: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
8797: LD_INT 0
8799: PPUSH
8800: PPUSH
8801: PPUSH
8802: PPUSH
8803: PPUSH
8804: PPUSH
8805: PPUSH
8806: PPUSH
8807: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
8808: LD_VAR 0 1
8812: NOT
8813: PUSH
8814: LD_VAR 0 2
8818: PPUSH
8819: LD_VAR 0 3
8823: PPUSH
8824: CALL_OW 488
8828: NOT
8829: OR
8830: PUSH
8831: LD_VAR 0 4
8835: NOT
8836: OR
8837: IFFALSE 8841
// exit ;
8839: GO 9181
// list := [ ] ;
8841: LD_ADDR_VAR 0 13
8845: PUSH
8846: EMPTY
8847: ST_TO_ADDR
// if x - r < 0 then
8848: LD_VAR 0 2
8852: PUSH
8853: LD_VAR 0 4
8857: MINUS
8858: PUSH
8859: LD_INT 0
8861: LESS
8862: IFFALSE 8874
// min_x := 0 else
8864: LD_ADDR_VAR 0 7
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
8872: GO 8890
// min_x := x - r ;
8874: LD_ADDR_VAR 0 7
8878: PUSH
8879: LD_VAR 0 2
8883: PUSH
8884: LD_VAR 0 4
8888: MINUS
8889: ST_TO_ADDR
// if y - r < 0 then
8890: LD_VAR 0 3
8894: PUSH
8895: LD_VAR 0 4
8899: MINUS
8900: PUSH
8901: LD_INT 0
8903: LESS
8904: IFFALSE 8916
// min_y := 0 else
8906: LD_ADDR_VAR 0 8
8910: PUSH
8911: LD_INT 0
8913: ST_TO_ADDR
8914: GO 8932
// min_y := y - r ;
8916: LD_ADDR_VAR 0 8
8920: PUSH
8921: LD_VAR 0 3
8925: PUSH
8926: LD_VAR 0 4
8930: MINUS
8931: ST_TO_ADDR
// max_x := x + r ;
8932: LD_ADDR_VAR 0 9
8936: PUSH
8937: LD_VAR 0 2
8941: PUSH
8942: LD_VAR 0 4
8946: PLUS
8947: ST_TO_ADDR
// max_y := y + r ;
8948: LD_ADDR_VAR 0 10
8952: PUSH
8953: LD_VAR 0 3
8957: PUSH
8958: LD_VAR 0 4
8962: PLUS
8963: ST_TO_ADDR
// for _x = min_x to max_x do
8964: LD_ADDR_VAR 0 11
8968: PUSH
8969: DOUBLE
8970: LD_VAR 0 7
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 9
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9099
// for _y = min_y to max_y do
8984: LD_ADDR_VAR 0 12
8988: PUSH
8989: DOUBLE
8990: LD_VAR 0 8
8994: DEC
8995: ST_TO_ADDR
8996: LD_VAR 0 10
9000: PUSH
9001: FOR_TO
9002: IFFALSE 9095
// begin if not ValidHex ( _x , _y ) then
9004: LD_VAR 0 11
9008: PPUSH
9009: LD_VAR 0 12
9013: PPUSH
9014: CALL_OW 488
9018: NOT
9019: IFFALSE 9023
// continue ;
9021: GO 9001
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
9023: LD_VAR 0 11
9027: PPUSH
9028: LD_VAR 0 12
9032: PPUSH
9033: CALL_OW 351
9037: PUSH
9038: LD_VAR 0 11
9042: PPUSH
9043: LD_VAR 0 12
9047: PPUSH
9048: CALL_OW 554
9052: AND
9053: IFFALSE 9093
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
9055: LD_ADDR_VAR 0 13
9059: PUSH
9060: LD_VAR 0 13
9064: PPUSH
9065: LD_VAR 0 13
9069: PUSH
9070: LD_INT 1
9072: PLUS
9073: PPUSH
9074: LD_VAR 0 11
9078: PUSH
9079: LD_VAR 0 12
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 2
9092: ST_TO_ADDR
// end ;
9093: GO 9001
9095: POP
9096: POP
9097: GO 8981
9099: POP
9100: POP
// if not list then
9101: LD_VAR 0 13
9105: NOT
9106: IFFALSE 9110
// exit ;
9108: GO 9181
// for i in list do
9110: LD_ADDR_VAR 0 6
9114: PUSH
9115: LD_VAR 0 13
9119: PUSH
9120: FOR_IN
9121: IFFALSE 9179
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
9123: LD_VAR 0 1
9127: PPUSH
9128: LD_STRING M
9130: PUSH
9131: LD_VAR 0 6
9135: PUSH
9136: LD_INT 1
9138: ARRAY
9139: PUSH
9140: LD_VAR 0 6
9144: PUSH
9145: LD_INT 2
9147: ARRAY
9148: PUSH
9149: LD_INT 0
9151: PUSH
9152: LD_INT 0
9154: PUSH
9155: LD_INT 0
9157: PUSH
9158: LD_INT 0
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: PPUSH
9173: CALL_OW 447
9177: GO 9120
9179: POP
9180: POP
// end ; end_of_file
9181: LD_VAR 0 5
9185: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9186: GO 9188
9188: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9189: LD_STRING initStreamRollete();
9191: PPUSH
9192: CALL_OW 559
// InitStreamMode ;
9196: CALL 9205 0 0
// DefineStreamItems ( ) ;
9200: CALL 9645 0 0
// end ;
9204: END
// function InitStreamMode ; begin
9205: LD_INT 0
9207: PPUSH
// streamModeActive := false ;
9208: LD_ADDR_EXP 25
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// normalCounter := 36 ;
9216: LD_ADDR_EXP 26
9220: PUSH
9221: LD_INT 36
9223: ST_TO_ADDR
// hardcoreCounter := 16 ;
9224: LD_ADDR_EXP 27
9228: PUSH
9229: LD_INT 16
9231: ST_TO_ADDR
// sRocket := false ;
9232: LD_ADDR_EXP 30
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sSpeed := false ;
9240: LD_ADDR_EXP 29
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sEngine := false ;
9248: LD_ADDR_EXP 31
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sSpec := false ;
9256: LD_ADDR_EXP 28
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sLevel := false ;
9264: LD_ADDR_EXP 32
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sArmoury := false ;
9272: LD_ADDR_EXP 33
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sRadar := false ;
9280: LD_ADDR_EXP 34
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sBunker := false ;
9288: LD_ADDR_EXP 35
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sHack := false ;
9296: LD_ADDR_EXP 36
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sFire := false ;
9304: LD_ADDR_EXP 37
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sRefresh := false ;
9312: LD_ADDR_EXP 38
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sExp := false ;
9320: LD_ADDR_EXP 39
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sDepot := false ;
9328: LD_ADDR_EXP 40
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sFlag := false ;
9336: LD_ADDR_EXP 41
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sKamikadze := false ;
9344: LD_ADDR_EXP 49
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sTroll := false ;
9352: LD_ADDR_EXP 50
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sSlow := false ;
9360: LD_ADDR_EXP 51
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sLack := false ;
9368: LD_ADDR_EXP 52
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sTank := false ;
9376: LD_ADDR_EXP 54
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sRemote := false ;
9384: LD_ADDR_EXP 55
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sPowell := false ;
9392: LD_ADDR_EXP 56
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sTeleport := false ;
9400: LD_ADDR_EXP 59
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sOilTower := false ;
9408: LD_ADDR_EXP 61
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sShovel := false ;
9416: LD_ADDR_EXP 62
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sSheik := false ;
9424: LD_ADDR_EXP 63
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sEarthquake := false ;
9432: LD_ADDR_EXP 65
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sAI := false ;
9440: LD_ADDR_EXP 66
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sCargo := false ;
9448: LD_ADDR_EXP 69
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sDLaser := false ;
9456: LD_ADDR_EXP 70
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sExchange := false ;
9464: LD_ADDR_EXP 71
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sFac := false ;
9472: LD_ADDR_EXP 72
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sPower := false ;
9480: LD_ADDR_EXP 73
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sRandom := false ;
9488: LD_ADDR_EXP 74
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sShield := false ;
9496: LD_ADDR_EXP 75
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sTime := false ;
9504: LD_ADDR_EXP 76
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// sTools := false ;
9512: LD_ADDR_EXP 77
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// sSold := false ;
9520: LD_ADDR_EXP 42
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// sDiff := false ;
9528: LD_ADDR_EXP 43
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// sFog := false ;
9536: LD_ADDR_EXP 46
9540: PUSH
9541: LD_INT 0
9543: ST_TO_ADDR
// sReset := false ;
9544: LD_ADDR_EXP 47
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// sSun := false ;
9552: LD_ADDR_EXP 48
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// sTiger := false ;
9560: LD_ADDR_EXP 44
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// sBomb := false ;
9568: LD_ADDR_EXP 45
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// sWound := false ;
9576: LD_ADDR_EXP 53
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// sBetray := false ;
9584: LD_ADDR_EXP 57
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// sContamin := false ;
9592: LD_ADDR_EXP 58
9596: PUSH
9597: LD_INT 0
9599: ST_TO_ADDR
// sOil := false ;
9600: LD_ADDR_EXP 60
9604: PUSH
9605: LD_INT 0
9607: ST_TO_ADDR
// sStu := false ;
9608: LD_ADDR_EXP 64
9612: PUSH
9613: LD_INT 0
9615: ST_TO_ADDR
// sBazooka := false ;
9616: LD_ADDR_EXP 67
9620: PUSH
9621: LD_INT 0
9623: ST_TO_ADDR
// sMortar := false ;
9624: LD_ADDR_EXP 68
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// sRanger := false ;
9632: LD_ADDR_EXP 78
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// end ;
9640: LD_VAR 0 1
9644: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9645: LD_INT 0
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
9651: PPUSH
// result := [ ] ;
9652: LD_ADDR_VAR 0 1
9656: PUSH
9657: EMPTY
9658: ST_TO_ADDR
// if campaign_id = 1 then
9659: LD_OWVAR 69
9663: PUSH
9664: LD_INT 1
9666: EQUAL
9667: IFFALSE 12605
// begin case mission_number of 1 :
9669: LD_OWVAR 70
9673: PUSH
9674: LD_INT 1
9676: DOUBLE
9677: EQUAL
9678: IFTRUE 9682
9680: GO 9746
9682: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9683: LD_ADDR_VAR 0 1
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: LD_INT 4
9693: PUSH
9694: LD_INT 11
9696: PUSH
9697: LD_INT 12
9699: PUSH
9700: LD_INT 15
9702: PUSH
9703: LD_INT 16
9705: PUSH
9706: LD_INT 22
9708: PUSH
9709: LD_INT 23
9711: PUSH
9712: LD_INT 26
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 101
9728: PUSH
9729: LD_INT 102
9731: PUSH
9732: LD_INT 106
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: LIST
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: ST_TO_ADDR
9744: GO 12603
9746: LD_INT 2
9748: DOUBLE
9749: EQUAL
9750: IFTRUE 9754
9752: GO 9826
9754: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9755: LD_ADDR_VAR 0 1
9759: PUSH
9760: LD_INT 2
9762: PUSH
9763: LD_INT 4
9765: PUSH
9766: LD_INT 11
9768: PUSH
9769: LD_INT 12
9771: PUSH
9772: LD_INT 15
9774: PUSH
9775: LD_INT 16
9777: PUSH
9778: LD_INT 22
9780: PUSH
9781: LD_INT 23
9783: PUSH
9784: LD_INT 26
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 101
9800: PUSH
9801: LD_INT 102
9803: PUSH
9804: LD_INT 105
9806: PUSH
9807: LD_INT 106
9809: PUSH
9810: LD_INT 108
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: ST_TO_ADDR
9824: GO 12603
9826: LD_INT 3
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 9910
9834: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9835: LD_ADDR_VAR 0 1
9839: PUSH
9840: LD_INT 2
9842: PUSH
9843: LD_INT 4
9845: PUSH
9846: LD_INT 5
9848: PUSH
9849: LD_INT 11
9851: PUSH
9852: LD_INT 12
9854: PUSH
9855: LD_INT 15
9857: PUSH
9858: LD_INT 16
9860: PUSH
9861: LD_INT 22
9863: PUSH
9864: LD_INT 26
9866: PUSH
9867: LD_INT 36
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 101
9884: PUSH
9885: LD_INT 102
9887: PUSH
9888: LD_INT 105
9890: PUSH
9891: LD_INT 106
9893: PUSH
9894: LD_INT 108
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: ST_TO_ADDR
9908: GO 12603
9910: LD_INT 4
9912: DOUBLE
9913: EQUAL
9914: IFTRUE 9918
9916: GO 10002
9918: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9919: LD_ADDR_VAR 0 1
9923: PUSH
9924: LD_INT 2
9926: PUSH
9927: LD_INT 4
9929: PUSH
9930: LD_INT 5
9932: PUSH
9933: LD_INT 8
9935: PUSH
9936: LD_INT 11
9938: PUSH
9939: LD_INT 12
9941: PUSH
9942: LD_INT 15
9944: PUSH
9945: LD_INT 16
9947: PUSH
9948: LD_INT 22
9950: PUSH
9951: LD_INT 23
9953: PUSH
9954: LD_INT 26
9956: PUSH
9957: LD_INT 36
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 101
9976: PUSH
9977: LD_INT 102
9979: PUSH
9980: LD_INT 105
9982: PUSH
9983: LD_INT 106
9985: PUSH
9986: LD_INT 108
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: ST_TO_ADDR
10000: GO 12603
10002: LD_INT 5
10004: DOUBLE
10005: EQUAL
10006: IFTRUE 10010
10008: GO 10110
10010: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10011: LD_ADDR_VAR 0 1
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 4
10021: PUSH
10022: LD_INT 5
10024: PUSH
10025: LD_INT 6
10027: PUSH
10028: LD_INT 8
10030: PUSH
10031: LD_INT 11
10033: PUSH
10034: LD_INT 12
10036: PUSH
10037: LD_INT 15
10039: PUSH
10040: LD_INT 16
10042: PUSH
10043: LD_INT 22
10045: PUSH
10046: LD_INT 23
10048: PUSH
10049: LD_INT 25
10051: PUSH
10052: LD_INT 26
10054: PUSH
10055: LD_INT 36
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: PUSH
10074: LD_INT 101
10076: PUSH
10077: LD_INT 102
10079: PUSH
10080: LD_INT 105
10082: PUSH
10083: LD_INT 106
10085: PUSH
10086: LD_INT 108
10088: PUSH
10089: LD_INT 109
10091: PUSH
10092: LD_INT 112
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: ST_TO_ADDR
10108: GO 12603
10110: LD_INT 6
10112: DOUBLE
10113: EQUAL
10114: IFTRUE 10118
10116: GO 10238
10118: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10119: LD_ADDR_VAR 0 1
10123: PUSH
10124: LD_INT 2
10126: PUSH
10127: LD_INT 4
10129: PUSH
10130: LD_INT 5
10132: PUSH
10133: LD_INT 6
10135: PUSH
10136: LD_INT 8
10138: PUSH
10139: LD_INT 11
10141: PUSH
10142: LD_INT 12
10144: PUSH
10145: LD_INT 15
10147: PUSH
10148: LD_INT 16
10150: PUSH
10151: LD_INT 20
10153: PUSH
10154: LD_INT 21
10156: PUSH
10157: LD_INT 22
10159: PUSH
10160: LD_INT 23
10162: PUSH
10163: LD_INT 25
10165: PUSH
10166: LD_INT 26
10168: PUSH
10169: LD_INT 30
10171: PUSH
10172: LD_INT 31
10174: PUSH
10175: LD_INT 32
10177: PUSH
10178: LD_INT 36
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 101
10204: PUSH
10205: LD_INT 102
10207: PUSH
10208: LD_INT 105
10210: PUSH
10211: LD_INT 106
10213: PUSH
10214: LD_INT 108
10216: PUSH
10217: LD_INT 109
10219: PUSH
10220: LD_INT 112
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: ST_TO_ADDR
10236: GO 12603
10238: LD_INT 7
10240: DOUBLE
10241: EQUAL
10242: IFTRUE 10246
10244: GO 10346
10246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10247: LD_ADDR_VAR 0 1
10251: PUSH
10252: LD_INT 2
10254: PUSH
10255: LD_INT 4
10257: PUSH
10258: LD_INT 5
10260: PUSH
10261: LD_INT 7
10263: PUSH
10264: LD_INT 11
10266: PUSH
10267: LD_INT 12
10269: PUSH
10270: LD_INT 15
10272: PUSH
10273: LD_INT 16
10275: PUSH
10276: LD_INT 20
10278: PUSH
10279: LD_INT 21
10281: PUSH
10282: LD_INT 22
10284: PUSH
10285: LD_INT 23
10287: PUSH
10288: LD_INT 25
10290: PUSH
10291: LD_INT 26
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 101
10312: PUSH
10313: LD_INT 102
10315: PUSH
10316: LD_INT 103
10318: PUSH
10319: LD_INT 105
10321: PUSH
10322: LD_INT 106
10324: PUSH
10325: LD_INT 108
10327: PUSH
10328: LD_INT 112
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: ST_TO_ADDR
10344: GO 12603
10346: LD_INT 8
10348: DOUBLE
10349: EQUAL
10350: IFTRUE 10354
10352: GO 10482
10354: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10355: LD_ADDR_VAR 0 1
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: LD_INT 4
10365: PUSH
10366: LD_INT 5
10368: PUSH
10369: LD_INT 6
10371: PUSH
10372: LD_INT 7
10374: PUSH
10375: LD_INT 8
10377: PUSH
10378: LD_INT 11
10380: PUSH
10381: LD_INT 12
10383: PUSH
10384: LD_INT 15
10386: PUSH
10387: LD_INT 16
10389: PUSH
10390: LD_INT 20
10392: PUSH
10393: LD_INT 21
10395: PUSH
10396: LD_INT 22
10398: PUSH
10399: LD_INT 23
10401: PUSH
10402: LD_INT 25
10404: PUSH
10405: LD_INT 26
10407: PUSH
10408: LD_INT 30
10410: PUSH
10411: LD_INT 31
10413: PUSH
10414: LD_INT 32
10416: PUSH
10417: LD_INT 36
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 101
10444: PUSH
10445: LD_INT 102
10447: PUSH
10448: LD_INT 103
10450: PUSH
10451: LD_INT 105
10453: PUSH
10454: LD_INT 106
10456: PUSH
10457: LD_INT 108
10459: PUSH
10460: LD_INT 109
10462: PUSH
10463: LD_INT 112
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: ST_TO_ADDR
10480: GO 12603
10482: LD_INT 9
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10626
10490: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: LD_INT 2
10498: PUSH
10499: LD_INT 4
10501: PUSH
10502: LD_INT 5
10504: PUSH
10505: LD_INT 6
10507: PUSH
10508: LD_INT 7
10510: PUSH
10511: LD_INT 8
10513: PUSH
10514: LD_INT 11
10516: PUSH
10517: LD_INT 12
10519: PUSH
10520: LD_INT 15
10522: PUSH
10523: LD_INT 16
10525: PUSH
10526: LD_INT 20
10528: PUSH
10529: LD_INT 21
10531: PUSH
10532: LD_INT 22
10534: PUSH
10535: LD_INT 23
10537: PUSH
10538: LD_INT 25
10540: PUSH
10541: LD_INT 26
10543: PUSH
10544: LD_INT 28
10546: PUSH
10547: LD_INT 30
10549: PUSH
10550: LD_INT 31
10552: PUSH
10553: LD_INT 32
10555: PUSH
10556: LD_INT 36
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 101
10584: PUSH
10585: LD_INT 102
10587: PUSH
10588: LD_INT 103
10590: PUSH
10591: LD_INT 105
10593: PUSH
10594: LD_INT 106
10596: PUSH
10597: LD_INT 108
10599: PUSH
10600: LD_INT 109
10602: PUSH
10603: LD_INT 112
10605: PUSH
10606: LD_INT 114
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: ST_TO_ADDR
10624: GO 12603
10626: LD_INT 10
10628: DOUBLE
10629: EQUAL
10630: IFTRUE 10634
10632: GO 10818
10634: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10635: LD_ADDR_VAR 0 1
10639: PUSH
10640: LD_INT 2
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: LD_INT 5
10648: PUSH
10649: LD_INT 6
10651: PUSH
10652: LD_INT 7
10654: PUSH
10655: LD_INT 8
10657: PUSH
10658: LD_INT 9
10660: PUSH
10661: LD_INT 10
10663: PUSH
10664: LD_INT 11
10666: PUSH
10667: LD_INT 12
10669: PUSH
10670: LD_INT 13
10672: PUSH
10673: LD_INT 14
10675: PUSH
10676: LD_INT 15
10678: PUSH
10679: LD_INT 16
10681: PUSH
10682: LD_INT 17
10684: PUSH
10685: LD_INT 18
10687: PUSH
10688: LD_INT 19
10690: PUSH
10691: LD_INT 20
10693: PUSH
10694: LD_INT 21
10696: PUSH
10697: LD_INT 22
10699: PUSH
10700: LD_INT 23
10702: PUSH
10703: LD_INT 24
10705: PUSH
10706: LD_INT 25
10708: PUSH
10709: LD_INT 26
10711: PUSH
10712: LD_INT 28
10714: PUSH
10715: LD_INT 30
10717: PUSH
10718: LD_INT 31
10720: PUSH
10721: LD_INT 32
10723: PUSH
10724: LD_INT 36
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 101
10760: PUSH
10761: LD_INT 102
10763: PUSH
10764: LD_INT 103
10766: PUSH
10767: LD_INT 104
10769: PUSH
10770: LD_INT 105
10772: PUSH
10773: LD_INT 106
10775: PUSH
10776: LD_INT 107
10778: PUSH
10779: LD_INT 108
10781: PUSH
10782: LD_INT 109
10784: PUSH
10785: LD_INT 110
10787: PUSH
10788: LD_INT 111
10790: PUSH
10791: LD_INT 112
10793: PUSH
10794: LD_INT 114
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: ST_TO_ADDR
10816: GO 12603
10818: LD_INT 11
10820: DOUBLE
10821: EQUAL
10822: IFTRUE 10826
10824: GO 11018
10826: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10827: LD_ADDR_VAR 0 1
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: LD_INT 4
10840: PUSH
10841: LD_INT 5
10843: PUSH
10844: LD_INT 6
10846: PUSH
10847: LD_INT 7
10849: PUSH
10850: LD_INT 8
10852: PUSH
10853: LD_INT 9
10855: PUSH
10856: LD_INT 10
10858: PUSH
10859: LD_INT 11
10861: PUSH
10862: LD_INT 12
10864: PUSH
10865: LD_INT 13
10867: PUSH
10868: LD_INT 14
10870: PUSH
10871: LD_INT 15
10873: PUSH
10874: LD_INT 16
10876: PUSH
10877: LD_INT 17
10879: PUSH
10880: LD_INT 18
10882: PUSH
10883: LD_INT 19
10885: PUSH
10886: LD_INT 20
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 22
10894: PUSH
10895: LD_INT 23
10897: PUSH
10898: LD_INT 24
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 26
10906: PUSH
10907: LD_INT 28
10909: PUSH
10910: LD_INT 30
10912: PUSH
10913: LD_INT 31
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: LD_INT 34
10921: PUSH
10922: LD_INT 36
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 101
10960: PUSH
10961: LD_INT 102
10963: PUSH
10964: LD_INT 103
10966: PUSH
10967: LD_INT 104
10969: PUSH
10970: LD_INT 105
10972: PUSH
10973: LD_INT 106
10975: PUSH
10976: LD_INT 107
10978: PUSH
10979: LD_INT 108
10981: PUSH
10982: LD_INT 109
10984: PUSH
10985: LD_INT 110
10987: PUSH
10988: LD_INT 111
10990: PUSH
10991: LD_INT 112
10993: PUSH
10994: LD_INT 114
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: ST_TO_ADDR
11016: GO 12603
11018: LD_INT 12
11020: DOUBLE
11021: EQUAL
11022: IFTRUE 11026
11024: GO 11234
11026: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11027: LD_ADDR_VAR 0 1
11031: PUSH
11032: LD_INT 1
11034: PUSH
11035: LD_INT 2
11037: PUSH
11038: LD_INT 3
11040: PUSH
11041: LD_INT 4
11043: PUSH
11044: LD_INT 5
11046: PUSH
11047: LD_INT 6
11049: PUSH
11050: LD_INT 7
11052: PUSH
11053: LD_INT 8
11055: PUSH
11056: LD_INT 9
11058: PUSH
11059: LD_INT 10
11061: PUSH
11062: LD_INT 11
11064: PUSH
11065: LD_INT 12
11067: PUSH
11068: LD_INT 13
11070: PUSH
11071: LD_INT 14
11073: PUSH
11074: LD_INT 15
11076: PUSH
11077: LD_INT 16
11079: PUSH
11080: LD_INT 17
11082: PUSH
11083: LD_INT 18
11085: PUSH
11086: LD_INT 19
11088: PUSH
11089: LD_INT 20
11091: PUSH
11092: LD_INT 21
11094: PUSH
11095: LD_INT 22
11097: PUSH
11098: LD_INT 23
11100: PUSH
11101: LD_INT 24
11103: PUSH
11104: LD_INT 25
11106: PUSH
11107: LD_INT 26
11109: PUSH
11110: LD_INT 27
11112: PUSH
11113: LD_INT 28
11115: PUSH
11116: LD_INT 30
11118: PUSH
11119: LD_INT 31
11121: PUSH
11122: LD_INT 32
11124: PUSH
11125: LD_INT 33
11127: PUSH
11128: LD_INT 34
11130: PUSH
11131: LD_INT 36
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 101
11172: PUSH
11173: LD_INT 102
11175: PUSH
11176: LD_INT 103
11178: PUSH
11179: LD_INT 104
11181: PUSH
11182: LD_INT 105
11184: PUSH
11185: LD_INT 106
11187: PUSH
11188: LD_INT 107
11190: PUSH
11191: LD_INT 108
11193: PUSH
11194: LD_INT 109
11196: PUSH
11197: LD_INT 110
11199: PUSH
11200: LD_INT 111
11202: PUSH
11203: LD_INT 112
11205: PUSH
11206: LD_INT 113
11208: PUSH
11209: LD_INT 114
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: ST_TO_ADDR
11232: GO 12603
11234: LD_INT 13
11236: DOUBLE
11237: EQUAL
11238: IFTRUE 11242
11240: GO 11438
11242: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11243: LD_ADDR_VAR 0 1
11247: PUSH
11248: LD_INT 1
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 4
11259: PUSH
11260: LD_INT 5
11262: PUSH
11263: LD_INT 8
11265: PUSH
11266: LD_INT 9
11268: PUSH
11269: LD_INT 10
11271: PUSH
11272: LD_INT 11
11274: PUSH
11275: LD_INT 12
11277: PUSH
11278: LD_INT 14
11280: PUSH
11281: LD_INT 15
11283: PUSH
11284: LD_INT 16
11286: PUSH
11287: LD_INT 17
11289: PUSH
11290: LD_INT 18
11292: PUSH
11293: LD_INT 19
11295: PUSH
11296: LD_INT 20
11298: PUSH
11299: LD_INT 21
11301: PUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 23
11307: PUSH
11308: LD_INT 24
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 26
11316: PUSH
11317: LD_INT 27
11319: PUSH
11320: LD_INT 28
11322: PUSH
11323: LD_INT 30
11325: PUSH
11326: LD_INT 31
11328: PUSH
11329: LD_INT 32
11331: PUSH
11332: LD_INT 33
11334: PUSH
11335: LD_INT 34
11337: PUSH
11338: LD_INT 36
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 101
11376: PUSH
11377: LD_INT 102
11379: PUSH
11380: LD_INT 103
11382: PUSH
11383: LD_INT 104
11385: PUSH
11386: LD_INT 105
11388: PUSH
11389: LD_INT 106
11391: PUSH
11392: LD_INT 107
11394: PUSH
11395: LD_INT 108
11397: PUSH
11398: LD_INT 109
11400: PUSH
11401: LD_INT 110
11403: PUSH
11404: LD_INT 111
11406: PUSH
11407: LD_INT 112
11409: PUSH
11410: LD_INT 113
11412: PUSH
11413: LD_INT 114
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: ST_TO_ADDR
11436: GO 12603
11438: LD_INT 14
11440: DOUBLE
11441: EQUAL
11442: IFTRUE 11446
11444: GO 11658
11446: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11447: LD_ADDR_VAR 0 1
11451: PUSH
11452: LD_INT 1
11454: PUSH
11455: LD_INT 2
11457: PUSH
11458: LD_INT 3
11460: PUSH
11461: LD_INT 4
11463: PUSH
11464: LD_INT 5
11466: PUSH
11467: LD_INT 6
11469: PUSH
11470: LD_INT 7
11472: PUSH
11473: LD_INT 8
11475: PUSH
11476: LD_INT 9
11478: PUSH
11479: LD_INT 10
11481: PUSH
11482: LD_INT 11
11484: PUSH
11485: LD_INT 12
11487: PUSH
11488: LD_INT 13
11490: PUSH
11491: LD_INT 14
11493: PUSH
11494: LD_INT 15
11496: PUSH
11497: LD_INT 16
11499: PUSH
11500: LD_INT 17
11502: PUSH
11503: LD_INT 18
11505: PUSH
11506: LD_INT 19
11508: PUSH
11509: LD_INT 20
11511: PUSH
11512: LD_INT 21
11514: PUSH
11515: LD_INT 22
11517: PUSH
11518: LD_INT 23
11520: PUSH
11521: LD_INT 24
11523: PUSH
11524: LD_INT 25
11526: PUSH
11527: LD_INT 26
11529: PUSH
11530: LD_INT 27
11532: PUSH
11533: LD_INT 28
11535: PUSH
11536: LD_INT 29
11538: PUSH
11539: LD_INT 30
11541: PUSH
11542: LD_INT 31
11544: PUSH
11545: LD_INT 32
11547: PUSH
11548: LD_INT 33
11550: PUSH
11551: LD_INT 34
11553: PUSH
11554: LD_INT 36
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 101
11596: PUSH
11597: LD_INT 102
11599: PUSH
11600: LD_INT 103
11602: PUSH
11603: LD_INT 104
11605: PUSH
11606: LD_INT 105
11608: PUSH
11609: LD_INT 106
11611: PUSH
11612: LD_INT 107
11614: PUSH
11615: LD_INT 108
11617: PUSH
11618: LD_INT 109
11620: PUSH
11621: LD_INT 110
11623: PUSH
11624: LD_INT 111
11626: PUSH
11627: LD_INT 112
11629: PUSH
11630: LD_INT 113
11632: PUSH
11633: LD_INT 114
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: ST_TO_ADDR
11656: GO 12603
11658: LD_INT 15
11660: DOUBLE
11661: EQUAL
11662: IFTRUE 11666
11664: GO 11878
11666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11667: LD_ADDR_VAR 0 1
11671: PUSH
11672: LD_INT 1
11674: PUSH
11675: LD_INT 2
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: LD_INT 4
11683: PUSH
11684: LD_INT 5
11686: PUSH
11687: LD_INT 6
11689: PUSH
11690: LD_INT 7
11692: PUSH
11693: LD_INT 8
11695: PUSH
11696: LD_INT 9
11698: PUSH
11699: LD_INT 10
11701: PUSH
11702: LD_INT 11
11704: PUSH
11705: LD_INT 12
11707: PUSH
11708: LD_INT 13
11710: PUSH
11711: LD_INT 14
11713: PUSH
11714: LD_INT 15
11716: PUSH
11717: LD_INT 16
11719: PUSH
11720: LD_INT 17
11722: PUSH
11723: LD_INT 18
11725: PUSH
11726: LD_INT 19
11728: PUSH
11729: LD_INT 20
11731: PUSH
11732: LD_INT 21
11734: PUSH
11735: LD_INT 22
11737: PUSH
11738: LD_INT 23
11740: PUSH
11741: LD_INT 24
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 26
11749: PUSH
11750: LD_INT 27
11752: PUSH
11753: LD_INT 28
11755: PUSH
11756: LD_INT 29
11758: PUSH
11759: LD_INT 30
11761: PUSH
11762: LD_INT 31
11764: PUSH
11765: LD_INT 32
11767: PUSH
11768: LD_INT 33
11770: PUSH
11771: LD_INT 34
11773: PUSH
11774: LD_INT 36
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 101
11816: PUSH
11817: LD_INT 102
11819: PUSH
11820: LD_INT 103
11822: PUSH
11823: LD_INT 104
11825: PUSH
11826: LD_INT 105
11828: PUSH
11829: LD_INT 106
11831: PUSH
11832: LD_INT 107
11834: PUSH
11835: LD_INT 108
11837: PUSH
11838: LD_INT 109
11840: PUSH
11841: LD_INT 110
11843: PUSH
11844: LD_INT 111
11846: PUSH
11847: LD_INT 112
11849: PUSH
11850: LD_INT 113
11852: PUSH
11853: LD_INT 114
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: ST_TO_ADDR
11876: GO 12603
11878: LD_INT 16
11880: DOUBLE
11881: EQUAL
11882: IFTRUE 11886
11884: GO 12010
11886: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11887: LD_ADDR_VAR 0 1
11891: PUSH
11892: LD_INT 2
11894: PUSH
11895: LD_INT 4
11897: PUSH
11898: LD_INT 5
11900: PUSH
11901: LD_INT 7
11903: PUSH
11904: LD_INT 11
11906: PUSH
11907: LD_INT 12
11909: PUSH
11910: LD_INT 15
11912: PUSH
11913: LD_INT 16
11915: PUSH
11916: LD_INT 20
11918: PUSH
11919: LD_INT 21
11921: PUSH
11922: LD_INT 22
11924: PUSH
11925: LD_INT 23
11927: PUSH
11928: LD_INT 25
11930: PUSH
11931: LD_INT 26
11933: PUSH
11934: LD_INT 30
11936: PUSH
11937: LD_INT 31
11939: PUSH
11940: LD_INT 32
11942: PUSH
11943: LD_INT 33
11945: PUSH
11946: LD_INT 34
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 101
11972: PUSH
11973: LD_INT 102
11975: PUSH
11976: LD_INT 103
11978: PUSH
11979: LD_INT 106
11981: PUSH
11982: LD_INT 108
11984: PUSH
11985: LD_INT 112
11987: PUSH
11988: LD_INT 113
11990: PUSH
11991: LD_INT 114
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: ST_TO_ADDR
12008: GO 12603
12010: LD_INT 17
12012: DOUBLE
12013: EQUAL
12014: IFTRUE 12018
12016: GO 12230
12018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12019: LD_ADDR_VAR 0 1
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: LD_INT 2
12029: PUSH
12030: LD_INT 3
12032: PUSH
12033: LD_INT 4
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: LD_INT 6
12041: PUSH
12042: LD_INT 7
12044: PUSH
12045: LD_INT 8
12047: PUSH
12048: LD_INT 9
12050: PUSH
12051: LD_INT 10
12053: PUSH
12054: LD_INT 11
12056: PUSH
12057: LD_INT 12
12059: PUSH
12060: LD_INT 13
12062: PUSH
12063: LD_INT 14
12065: PUSH
12066: LD_INT 15
12068: PUSH
12069: LD_INT 16
12071: PUSH
12072: LD_INT 17
12074: PUSH
12075: LD_INT 18
12077: PUSH
12078: LD_INT 19
12080: PUSH
12081: LD_INT 20
12083: PUSH
12084: LD_INT 21
12086: PUSH
12087: LD_INT 22
12089: PUSH
12090: LD_INT 23
12092: PUSH
12093: LD_INT 24
12095: PUSH
12096: LD_INT 25
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 27
12104: PUSH
12105: LD_INT 28
12107: PUSH
12108: LD_INT 29
12110: PUSH
12111: LD_INT 30
12113: PUSH
12114: LD_INT 31
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: LD_INT 33
12122: PUSH
12123: LD_INT 34
12125: PUSH
12126: LD_INT 36
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 101
12168: PUSH
12169: LD_INT 102
12171: PUSH
12172: LD_INT 103
12174: PUSH
12175: LD_INT 104
12177: PUSH
12178: LD_INT 105
12180: PUSH
12181: LD_INT 106
12183: PUSH
12184: LD_INT 107
12186: PUSH
12187: LD_INT 108
12189: PUSH
12190: LD_INT 109
12192: PUSH
12193: LD_INT 110
12195: PUSH
12196: LD_INT 111
12198: PUSH
12199: LD_INT 112
12201: PUSH
12202: LD_INT 113
12204: PUSH
12205: LD_INT 114
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: ST_TO_ADDR
12228: GO 12603
12230: LD_INT 18
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12374
12238: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12239: LD_ADDR_VAR 0 1
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: LD_INT 4
12249: PUSH
12250: LD_INT 5
12252: PUSH
12253: LD_INT 7
12255: PUSH
12256: LD_INT 11
12258: PUSH
12259: LD_INT 12
12261: PUSH
12262: LD_INT 15
12264: PUSH
12265: LD_INT 16
12267: PUSH
12268: LD_INT 20
12270: PUSH
12271: LD_INT 21
12273: PUSH
12274: LD_INT 22
12276: PUSH
12277: LD_INT 23
12279: PUSH
12280: LD_INT 25
12282: PUSH
12283: LD_INT 26
12285: PUSH
12286: LD_INT 30
12288: PUSH
12289: LD_INT 31
12291: PUSH
12292: LD_INT 32
12294: PUSH
12295: LD_INT 33
12297: PUSH
12298: LD_INT 34
12300: PUSH
12301: LD_INT 35
12303: PUSH
12304: LD_INT 36
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 101
12332: PUSH
12333: LD_INT 102
12335: PUSH
12336: LD_INT 103
12338: PUSH
12339: LD_INT 106
12341: PUSH
12342: LD_INT 108
12344: PUSH
12345: LD_INT 112
12347: PUSH
12348: LD_INT 113
12350: PUSH
12351: LD_INT 114
12353: PUSH
12354: LD_INT 115
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: ST_TO_ADDR
12372: GO 12603
12374: LD_INT 19
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12602
12382: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: LD_INT 1
12390: PUSH
12391: LD_INT 2
12393: PUSH
12394: LD_INT 3
12396: PUSH
12397: LD_INT 4
12399: PUSH
12400: LD_INT 5
12402: PUSH
12403: LD_INT 6
12405: PUSH
12406: LD_INT 7
12408: PUSH
12409: LD_INT 8
12411: PUSH
12412: LD_INT 9
12414: PUSH
12415: LD_INT 10
12417: PUSH
12418: LD_INT 11
12420: PUSH
12421: LD_INT 12
12423: PUSH
12424: LD_INT 13
12426: PUSH
12427: LD_INT 14
12429: PUSH
12430: LD_INT 15
12432: PUSH
12433: LD_INT 16
12435: PUSH
12436: LD_INT 17
12438: PUSH
12439: LD_INT 18
12441: PUSH
12442: LD_INT 19
12444: PUSH
12445: LD_INT 20
12447: PUSH
12448: LD_INT 21
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_INT 23
12456: PUSH
12457: LD_INT 24
12459: PUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 26
12465: PUSH
12466: LD_INT 27
12468: PUSH
12469: LD_INT 28
12471: PUSH
12472: LD_INT 29
12474: PUSH
12475: LD_INT 30
12477: PUSH
12478: LD_INT 31
12480: PUSH
12481: LD_INT 32
12483: PUSH
12484: LD_INT 33
12486: PUSH
12487: LD_INT 34
12489: PUSH
12490: LD_INT 35
12492: PUSH
12493: LD_INT 36
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 101
12536: PUSH
12537: LD_INT 102
12539: PUSH
12540: LD_INT 103
12542: PUSH
12543: LD_INT 104
12545: PUSH
12546: LD_INT 105
12548: PUSH
12549: LD_INT 106
12551: PUSH
12552: LD_INT 107
12554: PUSH
12555: LD_INT 108
12557: PUSH
12558: LD_INT 109
12560: PUSH
12561: LD_INT 110
12563: PUSH
12564: LD_INT 111
12566: PUSH
12567: LD_INT 112
12569: PUSH
12570: LD_INT 113
12572: PUSH
12573: LD_INT 114
12575: PUSH
12576: LD_INT 115
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
12600: GO 12603
12602: POP
// end else
12603: GO 12822
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12605: LD_ADDR_VAR 0 1
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: LD_INT 4
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: LD_INT 6
12627: PUSH
12628: LD_INT 7
12630: PUSH
12631: LD_INT 8
12633: PUSH
12634: LD_INT 9
12636: PUSH
12637: LD_INT 10
12639: PUSH
12640: LD_INT 11
12642: PUSH
12643: LD_INT 12
12645: PUSH
12646: LD_INT 13
12648: PUSH
12649: LD_INT 14
12651: PUSH
12652: LD_INT 15
12654: PUSH
12655: LD_INT 16
12657: PUSH
12658: LD_INT 17
12660: PUSH
12661: LD_INT 18
12663: PUSH
12664: LD_INT 19
12666: PUSH
12667: LD_INT 20
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 23
12678: PUSH
12679: LD_INT 24
12681: PUSH
12682: LD_INT 25
12684: PUSH
12685: LD_INT 26
12687: PUSH
12688: LD_INT 27
12690: PUSH
12691: LD_INT 28
12693: PUSH
12694: LD_INT 29
12696: PUSH
12697: LD_INT 30
12699: PUSH
12700: LD_INT 31
12702: PUSH
12703: LD_INT 32
12705: PUSH
12706: LD_INT 33
12708: PUSH
12709: LD_INT 34
12711: PUSH
12712: LD_INT 35
12714: PUSH
12715: LD_INT 36
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 101
12758: PUSH
12759: LD_INT 102
12761: PUSH
12762: LD_INT 103
12764: PUSH
12765: LD_INT 104
12767: PUSH
12768: LD_INT 105
12770: PUSH
12771: LD_INT 106
12773: PUSH
12774: LD_INT 107
12776: PUSH
12777: LD_INT 108
12779: PUSH
12780: LD_INT 109
12782: PUSH
12783: LD_INT 110
12785: PUSH
12786: LD_INT 111
12788: PUSH
12789: LD_INT 112
12791: PUSH
12792: LD_INT 113
12794: PUSH
12795: LD_INT 114
12797: PUSH
12798: LD_INT 115
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: ST_TO_ADDR
// if result then
12822: LD_VAR 0 1
12826: IFFALSE 13115
// begin normal :=  ;
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: LD_STRING 
12835: ST_TO_ADDR
// hardcore :=  ;
12836: LD_ADDR_VAR 0 4
12840: PUSH
12841: LD_STRING 
12843: ST_TO_ADDR
// for i = 1 to normalCounter do
12844: LD_ADDR_VAR 0 5
12848: PUSH
12849: DOUBLE
12850: LD_INT 1
12852: DEC
12853: ST_TO_ADDR
12854: LD_EXP 26
12858: PUSH
12859: FOR_TO
12860: IFFALSE 12961
// begin tmp := 0 ;
12862: LD_ADDR_VAR 0 2
12866: PUSH
12867: LD_STRING 0
12869: ST_TO_ADDR
// if result [ 1 ] then
12870: LD_VAR 0 1
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: IFFALSE 12943
// if result [ 1 ] [ 1 ] = i then
12880: LD_VAR 0 1
12884: PUSH
12885: LD_INT 1
12887: ARRAY
12888: PUSH
12889: LD_INT 1
12891: ARRAY
12892: PUSH
12893: LD_VAR 0 5
12897: EQUAL
12898: IFFALSE 12943
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: LD_VAR 0 1
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: LD_VAR 0 1
12917: PUSH
12918: LD_INT 1
12920: ARRAY
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 3
12929: PPUSH
12930: CALL_OW 1
12934: ST_TO_ADDR
// tmp := 1 ;
12935: LD_ADDR_VAR 0 2
12939: PUSH
12940: LD_STRING 1
12942: ST_TO_ADDR
// end ; normal := normal & tmp ;
12943: LD_ADDR_VAR 0 3
12947: PUSH
12948: LD_VAR 0 3
12952: PUSH
12953: LD_VAR 0 2
12957: STR
12958: ST_TO_ADDR
// end ;
12959: GO 12859
12961: POP
12962: POP
// for i = 1 to hardcoreCounter do
12963: LD_ADDR_VAR 0 5
12967: PUSH
12968: DOUBLE
12969: LD_INT 1
12971: DEC
12972: ST_TO_ADDR
12973: LD_EXP 27
12977: PUSH
12978: FOR_TO
12979: IFFALSE 13084
// begin tmp := 0 ;
12981: LD_ADDR_VAR 0 2
12985: PUSH
12986: LD_STRING 0
12988: ST_TO_ADDR
// if result [ 2 ] then
12989: LD_VAR 0 1
12993: PUSH
12994: LD_INT 2
12996: ARRAY
12997: IFFALSE 13066
// if result [ 2 ] [ 1 ] = 100 + i then
12999: LD_VAR 0 1
13003: PUSH
13004: LD_INT 2
13006: ARRAY
13007: PUSH
13008: LD_INT 1
13010: ARRAY
13011: PUSH
13012: LD_INT 100
13014: PUSH
13015: LD_VAR 0 5
13019: PLUS
13020: EQUAL
13021: IFFALSE 13066
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13023: LD_ADDR_VAR 0 1
13027: PUSH
13028: LD_VAR 0 1
13032: PPUSH
13033: LD_INT 2
13035: PPUSH
13036: LD_VAR 0 1
13040: PUSH
13041: LD_INT 2
13043: ARRAY
13044: PPUSH
13045: LD_INT 1
13047: PPUSH
13048: CALL_OW 3
13052: PPUSH
13053: CALL_OW 1
13057: ST_TO_ADDR
// tmp := 1 ;
13058: LD_ADDR_VAR 0 2
13062: PUSH
13063: LD_STRING 1
13065: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13066: LD_ADDR_VAR 0 4
13070: PUSH
13071: LD_VAR 0 4
13075: PUSH
13076: LD_VAR 0 2
13080: STR
13081: ST_TO_ADDR
// end ;
13082: GO 12978
13084: POP
13085: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13086: LD_STRING getStreamItemsFromMission("
13088: PUSH
13089: LD_VAR 0 3
13093: STR
13094: PUSH
13095: LD_STRING ","
13097: STR
13098: PUSH
13099: LD_VAR 0 4
13103: STR
13104: PUSH
13105: LD_STRING ")
13107: STR
13108: PPUSH
13109: CALL_OW 559
// end else
13113: GO 13122
// ToLua ( getStreamItemsFromMission("","") ) ;
13115: LD_STRING getStreamItemsFromMission("","")
13117: PPUSH
13118: CALL_OW 559
// end ;
13122: LD_VAR 0 1
13126: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13127: LD_VAR 0 2
13131: PUSH
13132: LD_INT 100
13134: EQUAL
13135: IFFALSE 14084
// begin if not StreamModeActive then
13137: LD_EXP 25
13141: NOT
13142: IFFALSE 13152
// StreamModeActive := true ;
13144: LD_ADDR_EXP 25
13148: PUSH
13149: LD_INT 1
13151: ST_TO_ADDR
// if p3 = 0 then
13152: LD_VAR 0 3
13156: PUSH
13157: LD_INT 0
13159: EQUAL
13160: IFFALSE 13166
// InitStreamMode ;
13162: CALL 9205 0 0
// if p3 = 1 then
13166: LD_VAR 0 3
13170: PUSH
13171: LD_INT 1
13173: EQUAL
13174: IFFALSE 13184
// sRocket := true ;
13176: LD_ADDR_EXP 30
13180: PUSH
13181: LD_INT 1
13183: ST_TO_ADDR
// if p3 = 2 then
13184: LD_VAR 0 3
13188: PUSH
13189: LD_INT 2
13191: EQUAL
13192: IFFALSE 13202
// sSpeed := true ;
13194: LD_ADDR_EXP 29
13198: PUSH
13199: LD_INT 1
13201: ST_TO_ADDR
// if p3 = 3 then
13202: LD_VAR 0 3
13206: PUSH
13207: LD_INT 3
13209: EQUAL
13210: IFFALSE 13220
// sEngine := true ;
13212: LD_ADDR_EXP 31
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// if p3 = 4 then
13220: LD_VAR 0 3
13224: PUSH
13225: LD_INT 4
13227: EQUAL
13228: IFFALSE 13238
// sSpec := true ;
13230: LD_ADDR_EXP 28
13234: PUSH
13235: LD_INT 1
13237: ST_TO_ADDR
// if p3 = 5 then
13238: LD_VAR 0 3
13242: PUSH
13243: LD_INT 5
13245: EQUAL
13246: IFFALSE 13256
// sLevel := true ;
13248: LD_ADDR_EXP 32
13252: PUSH
13253: LD_INT 1
13255: ST_TO_ADDR
// if p3 = 6 then
13256: LD_VAR 0 3
13260: PUSH
13261: LD_INT 6
13263: EQUAL
13264: IFFALSE 13274
// sArmoury := true ;
13266: LD_ADDR_EXP 33
13270: PUSH
13271: LD_INT 1
13273: ST_TO_ADDR
// if p3 = 7 then
13274: LD_VAR 0 3
13278: PUSH
13279: LD_INT 7
13281: EQUAL
13282: IFFALSE 13292
// sRadar := true ;
13284: LD_ADDR_EXP 34
13288: PUSH
13289: LD_INT 1
13291: ST_TO_ADDR
// if p3 = 8 then
13292: LD_VAR 0 3
13296: PUSH
13297: LD_INT 8
13299: EQUAL
13300: IFFALSE 13310
// sBunker := true ;
13302: LD_ADDR_EXP 35
13306: PUSH
13307: LD_INT 1
13309: ST_TO_ADDR
// if p3 = 9 then
13310: LD_VAR 0 3
13314: PUSH
13315: LD_INT 9
13317: EQUAL
13318: IFFALSE 13328
// sHack := true ;
13320: LD_ADDR_EXP 36
13324: PUSH
13325: LD_INT 1
13327: ST_TO_ADDR
// if p3 = 10 then
13328: LD_VAR 0 3
13332: PUSH
13333: LD_INT 10
13335: EQUAL
13336: IFFALSE 13346
// sFire := true ;
13338: LD_ADDR_EXP 37
13342: PUSH
13343: LD_INT 1
13345: ST_TO_ADDR
// if p3 = 11 then
13346: LD_VAR 0 3
13350: PUSH
13351: LD_INT 11
13353: EQUAL
13354: IFFALSE 13364
// sRefresh := true ;
13356: LD_ADDR_EXP 38
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// if p3 = 12 then
13364: LD_VAR 0 3
13368: PUSH
13369: LD_INT 12
13371: EQUAL
13372: IFFALSE 13382
// sExp := true ;
13374: LD_ADDR_EXP 39
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// if p3 = 13 then
13382: LD_VAR 0 3
13386: PUSH
13387: LD_INT 13
13389: EQUAL
13390: IFFALSE 13400
// sDepot := true ;
13392: LD_ADDR_EXP 40
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// if p3 = 14 then
13400: LD_VAR 0 3
13404: PUSH
13405: LD_INT 14
13407: EQUAL
13408: IFFALSE 13418
// sFlag := true ;
13410: LD_ADDR_EXP 41
13414: PUSH
13415: LD_INT 1
13417: ST_TO_ADDR
// if p3 = 15 then
13418: LD_VAR 0 3
13422: PUSH
13423: LD_INT 15
13425: EQUAL
13426: IFFALSE 13436
// sKamikadze := true ;
13428: LD_ADDR_EXP 49
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// if p3 = 16 then
13436: LD_VAR 0 3
13440: PUSH
13441: LD_INT 16
13443: EQUAL
13444: IFFALSE 13454
// sTroll := true ;
13446: LD_ADDR_EXP 50
13450: PUSH
13451: LD_INT 1
13453: ST_TO_ADDR
// if p3 = 17 then
13454: LD_VAR 0 3
13458: PUSH
13459: LD_INT 17
13461: EQUAL
13462: IFFALSE 13472
// sSlow := true ;
13464: LD_ADDR_EXP 51
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// if p3 = 18 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_INT 18
13479: EQUAL
13480: IFFALSE 13490
// sLack := true ;
13482: LD_ADDR_EXP 52
13486: PUSH
13487: LD_INT 1
13489: ST_TO_ADDR
// if p3 = 19 then
13490: LD_VAR 0 3
13494: PUSH
13495: LD_INT 19
13497: EQUAL
13498: IFFALSE 13508
// sTank := true ;
13500: LD_ADDR_EXP 54
13504: PUSH
13505: LD_INT 1
13507: ST_TO_ADDR
// if p3 = 20 then
13508: LD_VAR 0 3
13512: PUSH
13513: LD_INT 20
13515: EQUAL
13516: IFFALSE 13526
// sRemote := true ;
13518: LD_ADDR_EXP 55
13522: PUSH
13523: LD_INT 1
13525: ST_TO_ADDR
// if p3 = 21 then
13526: LD_VAR 0 3
13530: PUSH
13531: LD_INT 21
13533: EQUAL
13534: IFFALSE 13544
// sPowell := true ;
13536: LD_ADDR_EXP 56
13540: PUSH
13541: LD_INT 1
13543: ST_TO_ADDR
// if p3 = 22 then
13544: LD_VAR 0 3
13548: PUSH
13549: LD_INT 22
13551: EQUAL
13552: IFFALSE 13562
// sTeleport := true ;
13554: LD_ADDR_EXP 59
13558: PUSH
13559: LD_INT 1
13561: ST_TO_ADDR
// if p3 = 23 then
13562: LD_VAR 0 3
13566: PUSH
13567: LD_INT 23
13569: EQUAL
13570: IFFALSE 13580
// sOilTower := true ;
13572: LD_ADDR_EXP 61
13576: PUSH
13577: LD_INT 1
13579: ST_TO_ADDR
// if p3 = 24 then
13580: LD_VAR 0 3
13584: PUSH
13585: LD_INT 24
13587: EQUAL
13588: IFFALSE 13598
// sShovel := true ;
13590: LD_ADDR_EXP 62
13594: PUSH
13595: LD_INT 1
13597: ST_TO_ADDR
// if p3 = 25 then
13598: LD_VAR 0 3
13602: PUSH
13603: LD_INT 25
13605: EQUAL
13606: IFFALSE 13616
// sSheik := true ;
13608: LD_ADDR_EXP 63
13612: PUSH
13613: LD_INT 1
13615: ST_TO_ADDR
// if p3 = 26 then
13616: LD_VAR 0 3
13620: PUSH
13621: LD_INT 26
13623: EQUAL
13624: IFFALSE 13634
// sEarthquake := true ;
13626: LD_ADDR_EXP 65
13630: PUSH
13631: LD_INT 1
13633: ST_TO_ADDR
// if p3 = 27 then
13634: LD_VAR 0 3
13638: PUSH
13639: LD_INT 27
13641: EQUAL
13642: IFFALSE 13652
// sAI := true ;
13644: LD_ADDR_EXP 66
13648: PUSH
13649: LD_INT 1
13651: ST_TO_ADDR
// if p3 = 28 then
13652: LD_VAR 0 3
13656: PUSH
13657: LD_INT 28
13659: EQUAL
13660: IFFALSE 13670
// sCargo := true ;
13662: LD_ADDR_EXP 69
13666: PUSH
13667: LD_INT 1
13669: ST_TO_ADDR
// if p3 = 29 then
13670: LD_VAR 0 3
13674: PUSH
13675: LD_INT 29
13677: EQUAL
13678: IFFALSE 13688
// sDLaser := true ;
13680: LD_ADDR_EXP 70
13684: PUSH
13685: LD_INT 1
13687: ST_TO_ADDR
// if p3 = 30 then
13688: LD_VAR 0 3
13692: PUSH
13693: LD_INT 30
13695: EQUAL
13696: IFFALSE 13706
// sExchange := true ;
13698: LD_ADDR_EXP 71
13702: PUSH
13703: LD_INT 1
13705: ST_TO_ADDR
// if p3 = 31 then
13706: LD_VAR 0 3
13710: PUSH
13711: LD_INT 31
13713: EQUAL
13714: IFFALSE 13724
// sFac := true ;
13716: LD_ADDR_EXP 72
13720: PUSH
13721: LD_INT 1
13723: ST_TO_ADDR
// if p3 = 32 then
13724: LD_VAR 0 3
13728: PUSH
13729: LD_INT 32
13731: EQUAL
13732: IFFALSE 13742
// sPower := true ;
13734: LD_ADDR_EXP 73
13738: PUSH
13739: LD_INT 1
13741: ST_TO_ADDR
// if p3 = 33 then
13742: LD_VAR 0 3
13746: PUSH
13747: LD_INT 33
13749: EQUAL
13750: IFFALSE 13760
// sRandom := true ;
13752: LD_ADDR_EXP 74
13756: PUSH
13757: LD_INT 1
13759: ST_TO_ADDR
// if p3 = 34 then
13760: LD_VAR 0 3
13764: PUSH
13765: LD_INT 34
13767: EQUAL
13768: IFFALSE 13778
// sShield := true ;
13770: LD_ADDR_EXP 75
13774: PUSH
13775: LD_INT 1
13777: ST_TO_ADDR
// if p3 = 35 then
13778: LD_VAR 0 3
13782: PUSH
13783: LD_INT 35
13785: EQUAL
13786: IFFALSE 13796
// sTime := true ;
13788: LD_ADDR_EXP 76
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// if p3 = 36 then
13796: LD_VAR 0 3
13800: PUSH
13801: LD_INT 36
13803: EQUAL
13804: IFFALSE 13814
// sTools := true ;
13806: LD_ADDR_EXP 77
13810: PUSH
13811: LD_INT 1
13813: ST_TO_ADDR
// if p3 = 101 then
13814: LD_VAR 0 3
13818: PUSH
13819: LD_INT 101
13821: EQUAL
13822: IFFALSE 13832
// sSold := true ;
13824: LD_ADDR_EXP 42
13828: PUSH
13829: LD_INT 1
13831: ST_TO_ADDR
// if p3 = 102 then
13832: LD_VAR 0 3
13836: PUSH
13837: LD_INT 102
13839: EQUAL
13840: IFFALSE 13850
// sDiff := true ;
13842: LD_ADDR_EXP 43
13846: PUSH
13847: LD_INT 1
13849: ST_TO_ADDR
// if p3 = 103 then
13850: LD_VAR 0 3
13854: PUSH
13855: LD_INT 103
13857: EQUAL
13858: IFFALSE 13868
// sFog := true ;
13860: LD_ADDR_EXP 46
13864: PUSH
13865: LD_INT 1
13867: ST_TO_ADDR
// if p3 = 104 then
13868: LD_VAR 0 3
13872: PUSH
13873: LD_INT 104
13875: EQUAL
13876: IFFALSE 13886
// sReset := true ;
13878: LD_ADDR_EXP 47
13882: PUSH
13883: LD_INT 1
13885: ST_TO_ADDR
// if p3 = 105 then
13886: LD_VAR 0 3
13890: PUSH
13891: LD_INT 105
13893: EQUAL
13894: IFFALSE 13904
// sSun := true ;
13896: LD_ADDR_EXP 48
13900: PUSH
13901: LD_INT 1
13903: ST_TO_ADDR
// if p3 = 106 then
13904: LD_VAR 0 3
13908: PUSH
13909: LD_INT 106
13911: EQUAL
13912: IFFALSE 13922
// sTiger := true ;
13914: LD_ADDR_EXP 44
13918: PUSH
13919: LD_INT 1
13921: ST_TO_ADDR
// if p3 = 107 then
13922: LD_VAR 0 3
13926: PUSH
13927: LD_INT 107
13929: EQUAL
13930: IFFALSE 13940
// sBomb := true ;
13932: LD_ADDR_EXP 45
13936: PUSH
13937: LD_INT 1
13939: ST_TO_ADDR
// if p3 = 108 then
13940: LD_VAR 0 3
13944: PUSH
13945: LD_INT 108
13947: EQUAL
13948: IFFALSE 13958
// sWound := true ;
13950: LD_ADDR_EXP 53
13954: PUSH
13955: LD_INT 1
13957: ST_TO_ADDR
// if p3 = 109 then
13958: LD_VAR 0 3
13962: PUSH
13963: LD_INT 109
13965: EQUAL
13966: IFFALSE 13976
// sBetray := true ;
13968: LD_ADDR_EXP 57
13972: PUSH
13973: LD_INT 1
13975: ST_TO_ADDR
// if p3 = 110 then
13976: LD_VAR 0 3
13980: PUSH
13981: LD_INT 110
13983: EQUAL
13984: IFFALSE 13994
// sContamin := true ;
13986: LD_ADDR_EXP 58
13990: PUSH
13991: LD_INT 1
13993: ST_TO_ADDR
// if p3 = 111 then
13994: LD_VAR 0 3
13998: PUSH
13999: LD_INT 111
14001: EQUAL
14002: IFFALSE 14012
// sOil := true ;
14004: LD_ADDR_EXP 60
14008: PUSH
14009: LD_INT 1
14011: ST_TO_ADDR
// if p3 = 112 then
14012: LD_VAR 0 3
14016: PUSH
14017: LD_INT 112
14019: EQUAL
14020: IFFALSE 14030
// sStu := true ;
14022: LD_ADDR_EXP 64
14026: PUSH
14027: LD_INT 1
14029: ST_TO_ADDR
// if p3 = 113 then
14030: LD_VAR 0 3
14034: PUSH
14035: LD_INT 113
14037: EQUAL
14038: IFFALSE 14048
// sBazooka := true ;
14040: LD_ADDR_EXP 67
14044: PUSH
14045: LD_INT 1
14047: ST_TO_ADDR
// if p3 = 114 then
14048: LD_VAR 0 3
14052: PUSH
14053: LD_INT 114
14055: EQUAL
14056: IFFALSE 14066
// sMortar := true ;
14058: LD_ADDR_EXP 68
14062: PUSH
14063: LD_INT 1
14065: ST_TO_ADDR
// if p3 = 115 then
14066: LD_VAR 0 3
14070: PUSH
14071: LD_INT 115
14073: EQUAL
14074: IFFALSE 14084
// sRanger := true ;
14076: LD_ADDR_EXP 78
14080: PUSH
14081: LD_INT 1
14083: ST_TO_ADDR
// end ; end ;
14084: PPOPN 6
14086: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14087: LD_EXP 25
14091: PUSH
14092: LD_EXP 30
14096: AND
14097: IFFALSE 14221
14099: GO 14101
14101: DISABLE
14102: LD_INT 0
14104: PPUSH
14105: PPUSH
// begin enable ;
14106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: LD_INT 22
14114: PUSH
14115: LD_OWVAR 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 2
14126: PUSH
14127: LD_INT 34
14129: PUSH
14130: LD_INT 7
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 34
14139: PUSH
14140: LD_INT 45
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 34
14149: PUSH
14150: LD_INT 28
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 34
14159: PUSH
14160: LD_INT 47
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 69
14182: ST_TO_ADDR
// if not tmp then
14183: LD_VAR 0 2
14187: NOT
14188: IFFALSE 14192
// exit ;
14190: GO 14221
// for i in tmp do
14192: LD_ADDR_VAR 0 1
14196: PUSH
14197: LD_VAR 0 2
14201: PUSH
14202: FOR_IN
14203: IFFALSE 14219
// begin SetLives ( i , 0 ) ;
14205: LD_VAR 0 1
14209: PPUSH
14210: LD_INT 0
14212: PPUSH
14213: CALL_OW 234
// end ;
14217: GO 14202
14219: POP
14220: POP
// end ;
14221: PPOPN 2
14223: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14224: LD_EXP 25
14228: PUSH
14229: LD_EXP 31
14233: AND
14234: IFFALSE 14318
14236: GO 14238
14238: DISABLE
14239: LD_INT 0
14241: PPUSH
14242: PPUSH
// begin enable ;
14243: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14244: LD_ADDR_VAR 0 2
14248: PUSH
14249: LD_INT 22
14251: PUSH
14252: LD_OWVAR 2
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 32
14263: PUSH
14264: LD_INT 3
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PPUSH
14275: CALL_OW 69
14279: ST_TO_ADDR
// if not tmp then
14280: LD_VAR 0 2
14284: NOT
14285: IFFALSE 14289
// exit ;
14287: GO 14318
// for i in tmp do
14289: LD_ADDR_VAR 0 1
14293: PUSH
14294: LD_VAR 0 2
14298: PUSH
14299: FOR_IN
14300: IFFALSE 14316
// begin SetLives ( i , 0 ) ;
14302: LD_VAR 0 1
14306: PPUSH
14307: LD_INT 0
14309: PPUSH
14310: CALL_OW 234
// end ;
14314: GO 14299
14316: POP
14317: POP
// end ;
14318: PPOPN 2
14320: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14321: LD_EXP 25
14325: PUSH
14326: LD_EXP 28
14330: AND
14331: IFFALSE 14424
14333: GO 14335
14335: DISABLE
14336: LD_INT 0
14338: PPUSH
// begin enable ;
14339: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14340: LD_ADDR_VAR 0 1
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_OWVAR 2
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 2
14359: PUSH
14360: LD_INT 25
14362: PUSH
14363: LD_INT 5
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 25
14372: PUSH
14373: LD_INT 9
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 25
14382: PUSH
14383: LD_INT 8
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 69
14404: PUSH
14405: FOR_IN
14406: IFFALSE 14422
// begin SetClass ( i , 1 ) ;
14408: LD_VAR 0 1
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 336
// end ;
14420: GO 14405
14422: POP
14423: POP
// end ;
14424: PPOPN 1
14426: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14427: LD_EXP 25
14431: PUSH
14432: LD_EXP 29
14436: AND
14437: PUSH
14438: LD_OWVAR 65
14442: PUSH
14443: LD_INT 7
14445: LESS
14446: AND
14447: IFFALSE 14461
14449: GO 14451
14451: DISABLE
// begin enable ;
14452: ENABLE
// game_speed := 7 ;
14453: LD_ADDR_OWVAR 65
14457: PUSH
14458: LD_INT 7
14460: ST_TO_ADDR
// end ;
14461: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14462: LD_EXP 25
14466: PUSH
14467: LD_EXP 32
14471: AND
14472: IFFALSE 14674
14474: GO 14476
14476: DISABLE
14477: LD_INT 0
14479: PPUSH
14480: PPUSH
14481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14482: LD_ADDR_VAR 0 3
14486: PUSH
14487: LD_INT 81
14489: PUSH
14490: LD_OWVAR 2
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 21
14501: PUSH
14502: LD_INT 1
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 69
14517: ST_TO_ADDR
// if not tmp then
14518: LD_VAR 0 3
14522: NOT
14523: IFFALSE 14527
// exit ;
14525: GO 14674
// if tmp > 5 then
14527: LD_VAR 0 3
14531: PUSH
14532: LD_INT 5
14534: GREATER
14535: IFFALSE 14547
// k := 5 else
14537: LD_ADDR_VAR 0 2
14541: PUSH
14542: LD_INT 5
14544: ST_TO_ADDR
14545: GO 14557
// k := tmp ;
14547: LD_ADDR_VAR 0 2
14551: PUSH
14552: LD_VAR 0 3
14556: ST_TO_ADDR
// for i := 1 to k do
14557: LD_ADDR_VAR 0 1
14561: PUSH
14562: DOUBLE
14563: LD_INT 1
14565: DEC
14566: ST_TO_ADDR
14567: LD_VAR 0 2
14571: PUSH
14572: FOR_TO
14573: IFFALSE 14672
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14575: LD_VAR 0 3
14579: PUSH
14580: LD_VAR 0 1
14584: ARRAY
14585: PPUSH
14586: LD_VAR 0 1
14590: PUSH
14591: LD_INT 4
14593: MOD
14594: PUSH
14595: LD_INT 1
14597: PLUS
14598: PPUSH
14599: CALL_OW 259
14603: PUSH
14604: LD_INT 10
14606: LESS
14607: IFFALSE 14670
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14609: LD_VAR 0 3
14613: PUSH
14614: LD_VAR 0 1
14618: ARRAY
14619: PPUSH
14620: LD_VAR 0 1
14624: PUSH
14625: LD_INT 4
14627: MOD
14628: PUSH
14629: LD_INT 1
14631: PLUS
14632: PPUSH
14633: LD_VAR 0 3
14637: PUSH
14638: LD_VAR 0 1
14642: ARRAY
14643: PPUSH
14644: LD_VAR 0 1
14648: PUSH
14649: LD_INT 4
14651: MOD
14652: PUSH
14653: LD_INT 1
14655: PLUS
14656: PPUSH
14657: CALL_OW 259
14661: PUSH
14662: LD_INT 1
14664: PLUS
14665: PPUSH
14666: CALL_OW 237
14670: GO 14572
14672: POP
14673: POP
// end ;
14674: PPOPN 3
14676: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14677: LD_EXP 25
14681: PUSH
14682: LD_EXP 33
14686: AND
14687: IFFALSE 14707
14689: GO 14691
14691: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14692: LD_INT 4
14694: PPUSH
14695: LD_OWVAR 2
14699: PPUSH
14700: LD_INT 0
14702: PPUSH
14703: CALL_OW 324
14707: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14708: LD_EXP 25
14712: PUSH
14713: LD_EXP 62
14717: AND
14718: IFFALSE 14738
14720: GO 14722
14722: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14723: LD_INT 19
14725: PPUSH
14726: LD_OWVAR 2
14730: PPUSH
14731: LD_INT 0
14733: PPUSH
14734: CALL_OW 324
14738: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14739: LD_EXP 25
14743: PUSH
14744: LD_EXP 34
14748: AND
14749: IFFALSE 14851
14751: GO 14753
14753: DISABLE
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
// begin enable ;
14758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_OWVAR 2
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 2
14778: PUSH
14779: LD_INT 34
14781: PUSH
14782: LD_INT 11
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 34
14791: PUSH
14792: LD_INT 30
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PPUSH
14808: CALL_OW 69
14812: ST_TO_ADDR
// if not tmp then
14813: LD_VAR 0 2
14817: NOT
14818: IFFALSE 14822
// exit ;
14820: GO 14851
// for i in tmp do
14822: LD_ADDR_VAR 0 1
14826: PUSH
14827: LD_VAR 0 2
14831: PUSH
14832: FOR_IN
14833: IFFALSE 14849
// begin SetLives ( i , 0 ) ;
14835: LD_VAR 0 1
14839: PPUSH
14840: LD_INT 0
14842: PPUSH
14843: CALL_OW 234
// end ;
14847: GO 14832
14849: POP
14850: POP
// end ;
14851: PPOPN 2
14853: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14854: LD_EXP 25
14858: PUSH
14859: LD_EXP 35
14863: AND
14864: IFFALSE 14884
14866: GO 14868
14868: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14869: LD_INT 32
14871: PPUSH
14872: LD_OWVAR 2
14876: PPUSH
14877: LD_INT 0
14879: PPUSH
14880: CALL_OW 324
14884: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14885: LD_EXP 25
14889: PUSH
14890: LD_EXP 36
14894: AND
14895: IFFALSE 15076
14897: GO 14899
14899: DISABLE
14900: LD_INT 0
14902: PPUSH
14903: PPUSH
14904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14905: LD_ADDR_VAR 0 2
14909: PUSH
14910: LD_INT 22
14912: PUSH
14913: LD_OWVAR 2
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: LD_INT 33
14924: PUSH
14925: LD_INT 3
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PPUSH
14936: CALL_OW 69
14940: ST_TO_ADDR
// if not tmp then
14941: LD_VAR 0 2
14945: NOT
14946: IFFALSE 14950
// exit ;
14948: GO 15076
// side := 0 ;
14950: LD_ADDR_VAR 0 3
14954: PUSH
14955: LD_INT 0
14957: ST_TO_ADDR
// for i := 1 to 8 do
14958: LD_ADDR_VAR 0 1
14962: PUSH
14963: DOUBLE
14964: LD_INT 1
14966: DEC
14967: ST_TO_ADDR
14968: LD_INT 8
14970: PUSH
14971: FOR_TO
14972: IFFALSE 15020
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14974: LD_OWVAR 2
14978: PUSH
14979: LD_VAR 0 1
14983: NONEQUAL
14984: PUSH
14985: LD_OWVAR 2
14989: PPUSH
14990: LD_VAR 0 1
14994: PPUSH
14995: CALL_OW 81
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: AND
15004: IFFALSE 15018
// begin side := i ;
15006: LD_ADDR_VAR 0 3
15010: PUSH
15011: LD_VAR 0 1
15015: ST_TO_ADDR
// break ;
15016: GO 15020
// end ;
15018: GO 14971
15020: POP
15021: POP
// if not side then
15022: LD_VAR 0 3
15026: NOT
15027: IFFALSE 15031
// exit ;
15029: GO 15076
// for i := 1 to tmp do
15031: LD_ADDR_VAR 0 1
15035: PUSH
15036: DOUBLE
15037: LD_INT 1
15039: DEC
15040: ST_TO_ADDR
15041: LD_VAR 0 2
15045: PUSH
15046: FOR_TO
15047: IFFALSE 15074
// if Prob ( 60 ) then
15049: LD_INT 60
15051: PPUSH
15052: CALL_OW 13
15056: IFFALSE 15072
// SetSide ( i , side ) ;
15058: LD_VAR 0 1
15062: PPUSH
15063: LD_VAR 0 3
15067: PPUSH
15068: CALL_OW 235
15072: GO 15046
15074: POP
15075: POP
// end ;
15076: PPOPN 3
15078: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15079: LD_EXP 25
15083: PUSH
15084: LD_EXP 38
15088: AND
15089: IFFALSE 15208
15091: GO 15093
15093: DISABLE
15094: LD_INT 0
15096: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15097: LD_ADDR_VAR 0 1
15101: PUSH
15102: LD_INT 22
15104: PUSH
15105: LD_OWVAR 2
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 21
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 3
15126: PUSH
15127: LD_INT 23
15129: PUSH
15130: LD_INT 0
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 69
15150: PUSH
15151: FOR_IN
15152: IFFALSE 15206
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 257
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 4
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: IN
15182: IFFALSE 15204
// SetClass ( un , rand ( 1 , 4 ) ) ;
15184: LD_VAR 0 1
15188: PPUSH
15189: LD_INT 1
15191: PPUSH
15192: LD_INT 4
15194: PPUSH
15195: CALL_OW 12
15199: PPUSH
15200: CALL_OW 336
15204: GO 15151
15206: POP
15207: POP
// end ;
15208: PPOPN 1
15210: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15211: LD_EXP 25
15215: PUSH
15216: LD_EXP 37
15220: AND
15221: IFFALSE 15300
15223: GO 15225
15225: DISABLE
15226: LD_INT 0
15228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15229: LD_ADDR_VAR 0 1
15233: PUSH
15234: LD_INT 22
15236: PUSH
15237: LD_OWVAR 2
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 21
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PPUSH
15260: CALL_OW 69
15264: ST_TO_ADDR
// if not tmp then
15265: LD_VAR 0 1
15269: NOT
15270: IFFALSE 15274
// exit ;
15272: GO 15300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15274: LD_VAR 0 1
15278: PUSH
15279: LD_INT 1
15281: PPUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 12
15291: ARRAY
15292: PPUSH
15293: LD_INT 100
15295: PPUSH
15296: CALL_OW 234
// end ;
15300: PPOPN 1
15302: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15303: LD_EXP 25
15307: PUSH
15308: LD_EXP 39
15312: AND
15313: IFFALSE 15411
15315: GO 15317
15317: DISABLE
15318: LD_INT 0
15320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15321: LD_ADDR_VAR 0 1
15325: PUSH
15326: LD_INT 22
15328: PUSH
15329: LD_OWVAR 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: ST_TO_ADDR
// if not tmp then
15357: LD_VAR 0 1
15361: NOT
15362: IFFALSE 15366
// exit ;
15364: GO 15411
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15366: LD_VAR 0 1
15370: PUSH
15371: LD_INT 1
15373: PPUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL_OW 12
15383: ARRAY
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: LD_INT 4
15390: PPUSH
15391: CALL_OW 12
15395: PPUSH
15396: LD_INT 3000
15398: PPUSH
15399: LD_INT 9000
15401: PPUSH
15402: CALL_OW 12
15406: PPUSH
15407: CALL_OW 492
// end ;
15411: PPOPN 1
15413: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15414: LD_EXP 25
15418: PUSH
15419: LD_EXP 40
15423: AND
15424: IFFALSE 15444
15426: GO 15428
15428: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15429: LD_INT 1
15431: PPUSH
15432: LD_OWVAR 2
15436: PPUSH
15437: LD_INT 0
15439: PPUSH
15440: CALL_OW 324
15444: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15445: LD_EXP 25
15449: PUSH
15450: LD_EXP 41
15454: AND
15455: IFFALSE 15538
15457: GO 15459
15459: DISABLE
15460: LD_INT 0
15462: PPUSH
15463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15464: LD_ADDR_VAR 0 2
15468: PUSH
15469: LD_INT 22
15471: PUSH
15472: LD_OWVAR 2
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 21
15483: PUSH
15484: LD_INT 3
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 69
15499: ST_TO_ADDR
// if not tmp then
15500: LD_VAR 0 2
15504: NOT
15505: IFFALSE 15509
// exit ;
15507: GO 15538
// for i in tmp do
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: LD_VAR 0 2
15518: PUSH
15519: FOR_IN
15520: IFFALSE 15536
// SetBLevel ( i , 10 ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: LD_INT 10
15529: PPUSH
15530: CALL_OW 241
15534: GO 15519
15536: POP
15537: POP
// end ;
15538: PPOPN 2
15540: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15541: LD_EXP 25
15545: PUSH
15546: LD_EXP 42
15550: AND
15551: IFFALSE 15662
15553: GO 15555
15555: DISABLE
15556: LD_INT 0
15558: PPUSH
15559: PPUSH
15560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15561: LD_ADDR_VAR 0 3
15565: PUSH
15566: LD_INT 22
15568: PUSH
15569: LD_OWVAR 2
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 1
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PPUSH
15592: CALL_OW 69
15596: ST_TO_ADDR
// if not tmp then
15597: LD_VAR 0 3
15601: NOT
15602: IFFALSE 15606
// exit ;
15604: GO 15662
// un := tmp [ rand ( 1 , tmp ) ] ;
15606: LD_ADDR_VAR 0 2
15610: PUSH
15611: LD_VAR 0 3
15615: PUSH
15616: LD_INT 1
15618: PPUSH
15619: LD_VAR 0 3
15623: PPUSH
15624: CALL_OW 12
15628: ARRAY
15629: ST_TO_ADDR
// if Crawls ( un ) then
15630: LD_VAR 0 2
15634: PPUSH
15635: CALL_OW 318
15639: IFFALSE 15650
// ComWalk ( un ) ;
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15650: LD_VAR 0 2
15654: PPUSH
15655: LD_INT 5
15657: PPUSH
15658: CALL_OW 336
// end ;
15662: PPOPN 3
15664: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15665: LD_EXP 25
15669: PUSH
15670: LD_EXP 43
15674: AND
15675: PUSH
15676: LD_OWVAR 67
15680: PUSH
15681: LD_INT 3
15683: LESS
15684: AND
15685: IFFALSE 15704
15687: GO 15689
15689: DISABLE
// Difficulty := Difficulty + 1 ;
15690: LD_ADDR_OWVAR 67
15694: PUSH
15695: LD_OWVAR 67
15699: PUSH
15700: LD_INT 1
15702: PLUS
15703: ST_TO_ADDR
15704: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15705: LD_EXP 25
15709: PUSH
15710: LD_EXP 44
15714: AND
15715: IFFALSE 15818
15717: GO 15719
15719: DISABLE
15720: LD_INT 0
15722: PPUSH
// begin for i := 1 to 5 do
15723: LD_ADDR_VAR 0 1
15727: PUSH
15728: DOUBLE
15729: LD_INT 1
15731: DEC
15732: ST_TO_ADDR
15733: LD_INT 5
15735: PUSH
15736: FOR_TO
15737: IFFALSE 15816
// begin uc_nation := nation_nature ;
15739: LD_ADDR_OWVAR 21
15743: PUSH
15744: LD_INT 0
15746: ST_TO_ADDR
// uc_side := 0 ;
15747: LD_ADDR_OWVAR 20
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15755: LD_ADDR_OWVAR 29
15759: PUSH
15760: LD_INT 12
15762: PUSH
15763: LD_INT 12
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: ST_TO_ADDR
// hc_agressivity := 20 ;
15770: LD_ADDR_OWVAR 35
15774: PUSH
15775: LD_INT 20
15777: ST_TO_ADDR
// hc_class := class_tiger ;
15778: LD_ADDR_OWVAR 28
15782: PUSH
15783: LD_INT 14
15785: ST_TO_ADDR
// hc_gallery :=  ;
15786: LD_ADDR_OWVAR 33
15790: PUSH
15791: LD_STRING 
15793: ST_TO_ADDR
// hc_name :=  ;
15794: LD_ADDR_OWVAR 26
15798: PUSH
15799: LD_STRING 
15801: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15802: CALL_OW 44
15806: PPUSH
15807: LD_INT 0
15809: PPUSH
15810: CALL_OW 51
// end ;
15814: GO 15736
15816: POP
15817: POP
// end ;
15818: PPOPN 1
15820: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15821: LD_EXP 25
15825: PUSH
15826: LD_EXP 45
15830: AND
15831: IFFALSE 15840
15833: GO 15835
15835: DISABLE
// StreamSibBomb ;
15836: CALL 15841 0 0
15840: END
// export function StreamSibBomb ; var i , x , y ; begin
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
15845: PPUSH
15846: PPUSH
// result := false ;
15847: LD_ADDR_VAR 0 1
15851: PUSH
15852: LD_INT 0
15854: ST_TO_ADDR
// for i := 1 to 16 do
15855: LD_ADDR_VAR 0 2
15859: PUSH
15860: DOUBLE
15861: LD_INT 1
15863: DEC
15864: ST_TO_ADDR
15865: LD_INT 16
15867: PUSH
15868: FOR_TO
15869: IFFALSE 16068
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_INT 10
15878: PUSH
15879: LD_INT 20
15881: PUSH
15882: LD_INT 30
15884: PUSH
15885: LD_INT 40
15887: PUSH
15888: LD_INT 50
15890: PUSH
15891: LD_INT 60
15893: PUSH
15894: LD_INT 70
15896: PUSH
15897: LD_INT 80
15899: PUSH
15900: LD_INT 90
15902: PUSH
15903: LD_INT 100
15905: PUSH
15906: LD_INT 110
15908: PUSH
15909: LD_INT 120
15911: PUSH
15912: LD_INT 130
15914: PUSH
15915: LD_INT 140
15917: PUSH
15918: LD_INT 150
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 1
15940: PPUSH
15941: LD_INT 15
15943: PPUSH
15944: CALL_OW 12
15948: ARRAY
15949: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15950: LD_ADDR_VAR 0 4
15954: PUSH
15955: LD_INT 10
15957: PUSH
15958: LD_INT 20
15960: PUSH
15961: LD_INT 30
15963: PUSH
15964: LD_INT 40
15966: PUSH
15967: LD_INT 50
15969: PUSH
15970: LD_INT 60
15972: PUSH
15973: LD_INT 70
15975: PUSH
15976: LD_INT 80
15978: PUSH
15979: LD_INT 90
15981: PUSH
15982: LD_INT 100
15984: PUSH
15985: LD_INT 110
15987: PUSH
15988: LD_INT 120
15990: PUSH
15991: LD_INT 130
15993: PUSH
15994: LD_INT 140
15996: PUSH
15997: LD_INT 150
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 1
16019: PPUSH
16020: LD_INT 15
16022: PPUSH
16023: CALL_OW 12
16027: ARRAY
16028: ST_TO_ADDR
// if ValidHex ( x , y ) then
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_VAR 0 4
16038: PPUSH
16039: CALL_OW 488
16043: IFFALSE 16066
// begin result := [ x , y ] ;
16045: LD_ADDR_VAR 0 1
16049: PUSH
16050: LD_VAR 0 3
16054: PUSH
16055: LD_VAR 0 4
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: ST_TO_ADDR
// break ;
16064: GO 16068
// end ; end ;
16066: GO 15868
16068: POP
16069: POP
// if result then
16070: LD_VAR 0 1
16074: IFFALSE 16134
// begin ToLua ( playSibBomb() ) ;
16076: LD_STRING playSibBomb()
16078: PPUSH
16079: CALL_OW 559
// wait ( 0 0$14 ) ;
16083: LD_INT 490
16085: PPUSH
16086: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16090: LD_VAR 0 1
16094: PUSH
16095: LD_INT 1
16097: ARRAY
16098: PPUSH
16099: LD_VAR 0 1
16103: PUSH
16104: LD_INT 2
16106: ARRAY
16107: PPUSH
16108: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16112: LD_VAR 0 1
16116: PUSH
16117: LD_INT 1
16119: ARRAY
16120: PPUSH
16121: LD_VAR 0 1
16125: PUSH
16126: LD_INT 2
16128: ARRAY
16129: PPUSH
16130: CALL_OW 429
// end ; end ;
16134: LD_VAR 0 1
16138: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16139: LD_EXP 25
16143: PUSH
16144: LD_EXP 47
16148: AND
16149: IFFALSE 16161
16151: GO 16153
16153: DISABLE
// YouLost (  ) ;
16154: LD_STRING 
16156: PPUSH
16157: CALL_OW 104
16161: END
// every 0 0$1 trigger StreamModeActive and sFog do
16162: LD_EXP 25
16166: PUSH
16167: LD_EXP 46
16171: AND
16172: IFFALSE 16186
16174: GO 16176
16176: DISABLE
// FogOff ( your_side ) ;
16177: LD_OWVAR 2
16181: PPUSH
16182: CALL_OW 344
16186: END
// every 0 0$1 trigger StreamModeActive and sSun do
16187: LD_EXP 25
16191: PUSH
16192: LD_EXP 48
16196: AND
16197: IFFALSE 16225
16199: GO 16201
16201: DISABLE
// begin solar_recharge_percent := 0 ;
16202: LD_ADDR_OWVAR 79
16206: PUSH
16207: LD_INT 0
16209: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16210: LD_INT 10500
16212: PPUSH
16213: CALL_OW 67
// solar_recharge_percent := 100 ;
16217: LD_ADDR_OWVAR 79
16221: PUSH
16222: LD_INT 100
16224: ST_TO_ADDR
// end ;
16225: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16226: LD_EXP 25
16230: PUSH
16231: LD_EXP 49
16235: AND
16236: IFFALSE 16475
16238: GO 16240
16240: DISABLE
16241: LD_INT 0
16243: PPUSH
16244: PPUSH
16245: PPUSH
// begin tmp := [ ] ;
16246: LD_ADDR_VAR 0 3
16250: PUSH
16251: EMPTY
16252: ST_TO_ADDR
// for i := 1 to 6 do
16253: LD_ADDR_VAR 0 1
16257: PUSH
16258: DOUBLE
16259: LD_INT 1
16261: DEC
16262: ST_TO_ADDR
16263: LD_INT 6
16265: PUSH
16266: FOR_TO
16267: IFFALSE 16372
// begin uc_nation := nation_nature ;
16269: LD_ADDR_OWVAR 21
16273: PUSH
16274: LD_INT 0
16276: ST_TO_ADDR
// uc_side := 0 ;
16277: LD_ADDR_OWVAR 20
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16285: LD_ADDR_OWVAR 29
16289: PUSH
16290: LD_INT 12
16292: PUSH
16293: LD_INT 12
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: ST_TO_ADDR
// hc_agressivity := 20 ;
16300: LD_ADDR_OWVAR 35
16304: PUSH
16305: LD_INT 20
16307: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16308: LD_ADDR_OWVAR 28
16312: PUSH
16313: LD_INT 17
16315: ST_TO_ADDR
// hc_gallery :=  ;
16316: LD_ADDR_OWVAR 33
16320: PUSH
16321: LD_STRING 
16323: ST_TO_ADDR
// hc_name :=  ;
16324: LD_ADDR_OWVAR 26
16328: PUSH
16329: LD_STRING 
16331: ST_TO_ADDR
// un := CreateHuman ;
16332: LD_ADDR_VAR 0 2
16336: PUSH
16337: CALL_OW 44
16341: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16342: LD_VAR 0 2
16346: PPUSH
16347: LD_INT 1
16349: PPUSH
16350: CALL_OW 51
// tmp := tmp ^ un ;
16354: LD_ADDR_VAR 0 3
16358: PUSH
16359: LD_VAR 0 3
16363: PUSH
16364: LD_VAR 0 2
16368: ADD
16369: ST_TO_ADDR
// end ;
16370: GO 16266
16372: POP
16373: POP
// repeat wait ( 0 0$1 ) ;
16374: LD_INT 35
16376: PPUSH
16377: CALL_OW 67
// for un in tmp do
16381: LD_ADDR_VAR 0 2
16385: PUSH
16386: LD_VAR 0 3
16390: PUSH
16391: FOR_IN
16392: IFFALSE 16466
// begin if IsDead ( un ) then
16394: LD_VAR 0 2
16398: PPUSH
16399: CALL_OW 301
16403: IFFALSE 16423
// begin tmp := tmp diff un ;
16405: LD_ADDR_VAR 0 3
16409: PUSH
16410: LD_VAR 0 3
16414: PUSH
16415: LD_VAR 0 2
16419: DIFF
16420: ST_TO_ADDR
// continue ;
16421: GO 16391
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16423: LD_VAR 0 2
16427: PPUSH
16428: LD_INT 3
16430: PUSH
16431: LD_INT 22
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PPUSH
16445: CALL_OW 69
16449: PPUSH
16450: LD_VAR 0 2
16454: PPUSH
16455: CALL_OW 74
16459: PPUSH
16460: CALL_OW 115
// end ;
16464: GO 16391
16466: POP
16467: POP
// until not tmp ;
16468: LD_VAR 0 3
16472: NOT
16473: IFFALSE 16374
// end ;
16475: PPOPN 3
16477: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16478: LD_EXP 25
16482: PUSH
16483: LD_EXP 50
16487: AND
16488: IFFALSE 16542
16490: GO 16492
16492: DISABLE
// begin ToLua ( displayTroll(); ) ;
16493: LD_STRING displayTroll();
16495: PPUSH
16496: CALL_OW 559
// wait ( 3 3$00 ) ;
16500: LD_INT 6300
16502: PPUSH
16503: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16507: LD_STRING hideTroll();
16509: PPUSH
16510: CALL_OW 559
// wait ( 1 1$00 ) ;
16514: LD_INT 2100
16516: PPUSH
16517: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16521: LD_STRING displayTroll();
16523: PPUSH
16524: CALL_OW 559
// wait ( 1 1$00 ) ;
16528: LD_INT 2100
16530: PPUSH
16531: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16535: LD_STRING hideTroll();
16537: PPUSH
16538: CALL_OW 559
// end ;
16542: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16543: LD_EXP 25
16547: PUSH
16548: LD_EXP 51
16552: AND
16553: IFFALSE 16616
16555: GO 16557
16557: DISABLE
16558: LD_INT 0
16560: PPUSH
// begin p := 0 ;
16561: LD_ADDR_VAR 0 1
16565: PUSH
16566: LD_INT 0
16568: ST_TO_ADDR
// repeat game_speed := 1 ;
16569: LD_ADDR_OWVAR 65
16573: PUSH
16574: LD_INT 1
16576: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16577: LD_INT 35
16579: PPUSH
16580: CALL_OW 67
// p := p + 1 ;
16584: LD_ADDR_VAR 0 1
16588: PUSH
16589: LD_VAR 0 1
16593: PUSH
16594: LD_INT 1
16596: PLUS
16597: ST_TO_ADDR
// until p >= 60 ;
16598: LD_VAR 0 1
16602: PUSH
16603: LD_INT 60
16605: GREATEREQUAL
16606: IFFALSE 16569
// game_speed := 4 ;
16608: LD_ADDR_OWVAR 65
16612: PUSH
16613: LD_INT 4
16615: ST_TO_ADDR
// end ;
16616: PPOPN 1
16618: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16619: LD_EXP 25
16623: PUSH
16624: LD_EXP 52
16628: AND
16629: IFFALSE 16775
16631: GO 16633
16633: DISABLE
16634: LD_INT 0
16636: PPUSH
16637: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16638: LD_ADDR_VAR 0 1
16642: PUSH
16643: LD_INT 22
16645: PUSH
16646: LD_OWVAR 2
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: LD_INT 30
16660: PUSH
16661: LD_INT 0
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 30
16670: PUSH
16671: LD_INT 1
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PPUSH
16687: CALL_OW 69
16691: ST_TO_ADDR
// if not depot then
16692: LD_VAR 0 1
16696: NOT
16697: IFFALSE 16701
// exit ;
16699: GO 16775
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: LD_VAR 0 1
16710: PUSH
16711: LD_INT 1
16713: PPUSH
16714: LD_VAR 0 1
16718: PPUSH
16719: CALL_OW 12
16723: ARRAY
16724: PPUSH
16725: CALL_OW 274
16729: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16730: LD_VAR 0 2
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: LD_INT 0
16740: PPUSH
16741: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_INT 2
16752: PPUSH
16753: LD_INT 0
16755: PPUSH
16756: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 3
16767: PPUSH
16768: LD_INT 0
16770: PPUSH
16771: CALL_OW 277
// end ;
16775: PPOPN 2
16777: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16778: LD_EXP 25
16782: PUSH
16783: LD_EXP 53
16787: AND
16788: IFFALSE 16885
16790: GO 16792
16792: DISABLE
16793: LD_INT 0
16795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16796: LD_ADDR_VAR 0 1
16800: PUSH
16801: LD_INT 22
16803: PUSH
16804: LD_OWVAR 2
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 21
16815: PUSH
16816: LD_INT 1
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: LD_INT 23
16828: PUSH
16829: LD_INT 0
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 69
16849: ST_TO_ADDR
// if not tmp then
16850: LD_VAR 0 1
16854: NOT
16855: IFFALSE 16859
// exit ;
16857: GO 16885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16859: LD_VAR 0 1
16863: PUSH
16864: LD_INT 1
16866: PPUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 12
16876: ARRAY
16877: PPUSH
16878: LD_INT 200
16880: PPUSH
16881: CALL_OW 234
// end ;
16885: PPOPN 1
16887: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16888: LD_EXP 25
16892: PUSH
16893: LD_EXP 54
16897: AND
16898: IFFALSE 16977
16900: GO 16902
16902: DISABLE
16903: LD_INT 0
16905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16906: LD_ADDR_VAR 0 1
16910: PUSH
16911: LD_INT 22
16913: PUSH
16914: LD_OWVAR 2
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PPUSH
16937: CALL_OW 69
16941: ST_TO_ADDR
// if not tmp then
16942: LD_VAR 0 1
16946: NOT
16947: IFFALSE 16951
// exit ;
16949: GO 16977
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16951: LD_VAR 0 1
16955: PUSH
16956: LD_INT 1
16958: PPUSH
16959: LD_VAR 0 1
16963: PPUSH
16964: CALL_OW 12
16968: ARRAY
16969: PPUSH
16970: LD_INT 60
16972: PPUSH
16973: CALL_OW 234
// end ;
16977: PPOPN 1
16979: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16980: LD_EXP 25
16984: PUSH
16985: LD_EXP 55
16989: AND
16990: IFFALSE 17089
16992: GO 16994
16994: DISABLE
16995: LD_INT 0
16997: PPUSH
16998: PPUSH
// begin enable ;
16999: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17000: LD_ADDR_VAR 0 1
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_OWVAR 2
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 61
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: LD_INT 33
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PPUSH
17038: CALL_OW 69
17042: ST_TO_ADDR
// if not tmp then
17043: LD_VAR 0 1
17047: NOT
17048: IFFALSE 17052
// exit ;
17050: GO 17089
// for i in tmp do
17052: LD_ADDR_VAR 0 2
17056: PUSH
17057: LD_VAR 0 1
17061: PUSH
17062: FOR_IN
17063: IFFALSE 17087
// if IsControledBy ( i ) then
17065: LD_VAR 0 2
17069: PPUSH
17070: CALL_OW 312
17074: IFFALSE 17085
// ComUnlink ( i ) ;
17076: LD_VAR 0 2
17080: PPUSH
17081: CALL_OW 136
17085: GO 17062
17087: POP
17088: POP
// end ;
17089: PPOPN 2
17091: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17092: LD_EXP 25
17096: PUSH
17097: LD_EXP 56
17101: AND
17102: IFFALSE 17242
17104: GO 17106
17106: DISABLE
17107: LD_INT 0
17109: PPUSH
17110: PPUSH
// begin ToLua ( displayPowell(); ) ;
17111: LD_STRING displayPowell();
17113: PPUSH
17114: CALL_OW 559
// uc_side := 0 ;
17118: LD_ADDR_OWVAR 20
17122: PUSH
17123: LD_INT 0
17125: ST_TO_ADDR
// uc_nation := 2 ;
17126: LD_ADDR_OWVAR 21
17130: PUSH
17131: LD_INT 2
17133: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17134: LD_ADDR_OWVAR 37
17138: PUSH
17139: LD_INT 14
17141: ST_TO_ADDR
// vc_engine := engine_siberite ;
17142: LD_ADDR_OWVAR 39
17146: PUSH
17147: LD_INT 3
17149: ST_TO_ADDR
// vc_control := control_apeman ;
17150: LD_ADDR_OWVAR 38
17154: PUSH
17155: LD_INT 5
17157: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17158: LD_ADDR_OWVAR 40
17162: PUSH
17163: LD_INT 29
17165: ST_TO_ADDR
// un := CreateVehicle ;
17166: LD_ADDR_VAR 0 2
17170: PUSH
17171: CALL_OW 45
17175: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17176: LD_VAR 0 2
17180: PPUSH
17181: LD_INT 1
17183: PPUSH
17184: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17188: LD_INT 35
17190: PPUSH
17191: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17195: LD_VAR 0 2
17199: PPUSH
17200: LD_INT 22
17202: PUSH
17203: LD_OWVAR 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PPUSH
17212: CALL_OW 69
17216: PPUSH
17217: LD_VAR 0 2
17221: PPUSH
17222: CALL_OW 74
17226: PPUSH
17227: CALL_OW 115
// until IsDead ( un ) ;
17231: LD_VAR 0 2
17235: PPUSH
17236: CALL_OW 301
17240: IFFALSE 17188
// end ;
17242: PPOPN 2
17244: END
// every 0 0$1 trigger StreamModeActive and sStu do
17245: LD_EXP 25
17249: PUSH
17250: LD_EXP 64
17254: AND
17255: IFFALSE 17271
17257: GO 17259
17259: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17260: LD_STRING displayStucuk();
17262: PPUSH
17263: CALL_OW 559
// ResetFog ;
17267: CALL_OW 335
// end ;
17271: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17272: LD_EXP 25
17276: PUSH
17277: LD_EXP 57
17281: AND
17282: IFFALSE 17423
17284: GO 17286
17286: DISABLE
17287: LD_INT 0
17289: PPUSH
17290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17291: LD_ADDR_VAR 0 2
17295: PUSH
17296: LD_INT 22
17298: PUSH
17299: LD_OWVAR 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 21
17310: PUSH
17311: LD_INT 1
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PPUSH
17322: CALL_OW 69
17326: ST_TO_ADDR
// if not tmp then
17327: LD_VAR 0 2
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17423
// un := tmp [ rand ( 1 , tmp ) ] ;
17336: LD_ADDR_VAR 0 1
17340: PUSH
17341: LD_VAR 0 2
17345: PUSH
17346: LD_INT 1
17348: PPUSH
17349: LD_VAR 0 2
17353: PPUSH
17354: CALL_OW 12
17358: ARRAY
17359: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17360: LD_VAR 0 1
17364: PPUSH
17365: LD_INT 0
17367: PPUSH
17368: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17372: LD_VAR 0 1
17376: PPUSH
17377: LD_OWVAR 3
17381: PUSH
17382: LD_VAR 0 1
17386: DIFF
17387: PPUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 74
17397: PPUSH
17398: CALL_OW 115
// wait ( 0 0$20 ) ;
17402: LD_INT 700
17404: PPUSH
17405: CALL_OW 67
// SetSide ( un , your_side ) ;
17409: LD_VAR 0 1
17413: PPUSH
17414: LD_OWVAR 2
17418: PPUSH
17419: CALL_OW 235
// end ;
17423: PPOPN 2
17425: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17426: LD_EXP 25
17430: PUSH
17431: LD_EXP 58
17435: AND
17436: IFFALSE 17542
17438: GO 17440
17440: DISABLE
17441: LD_INT 0
17443: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17444: LD_ADDR_VAR 0 1
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_OWVAR 2
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 2
17463: PUSH
17464: LD_INT 30
17466: PUSH
17467: LD_INT 0
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 30
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 69
17497: ST_TO_ADDR
// if not depot then
17498: LD_VAR 0 1
17502: NOT
17503: IFFALSE 17507
// exit ;
17505: GO 17542
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17507: LD_VAR 0 1
17511: PUSH
17512: LD_INT 1
17514: ARRAY
17515: PPUSH
17516: CALL_OW 250
17520: PPUSH
17521: LD_VAR 0 1
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 251
17534: PPUSH
17535: LD_INT 70
17537: PPUSH
17538: CALL_OW 495
// end ;
17542: PPOPN 1
17544: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17545: LD_EXP 25
17549: PUSH
17550: LD_EXP 59
17554: AND
17555: IFFALSE 17766
17557: GO 17559
17559: DISABLE
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
17564: PPUSH
17565: PPUSH
17566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17567: LD_ADDR_VAR 0 5
17571: PUSH
17572: LD_INT 22
17574: PUSH
17575: LD_OWVAR 2
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 21
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PPUSH
17598: CALL_OW 69
17602: ST_TO_ADDR
// if not tmp then
17603: LD_VAR 0 5
17607: NOT
17608: IFFALSE 17612
// exit ;
17610: GO 17766
// for i in tmp do
17612: LD_ADDR_VAR 0 1
17616: PUSH
17617: LD_VAR 0 5
17621: PUSH
17622: FOR_IN
17623: IFFALSE 17764
// begin d := rand ( 0 , 5 ) ;
17625: LD_ADDR_VAR 0 4
17629: PUSH
17630: LD_INT 0
17632: PPUSH
17633: LD_INT 5
17635: PPUSH
17636: CALL_OW 12
17640: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17641: LD_ADDR_VAR 0 2
17645: PUSH
17646: LD_VAR 0 1
17650: PPUSH
17651: CALL_OW 250
17655: PPUSH
17656: LD_VAR 0 4
17660: PPUSH
17661: LD_INT 3
17663: PPUSH
17664: LD_INT 12
17666: PPUSH
17667: CALL_OW 12
17671: PPUSH
17672: CALL_OW 272
17676: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 251
17691: PPUSH
17692: LD_VAR 0 4
17696: PPUSH
17697: LD_INT 3
17699: PPUSH
17700: LD_INT 12
17702: PPUSH
17703: CALL_OW 12
17707: PPUSH
17708: CALL_OW 273
17712: ST_TO_ADDR
// if ValidHex ( x , y ) then
17713: LD_VAR 0 2
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: CALL_OW 488
17727: IFFALSE 17762
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17729: LD_VAR 0 1
17733: PPUSH
17734: LD_VAR 0 2
17738: PPUSH
17739: LD_VAR 0 3
17743: PPUSH
17744: LD_INT 3
17746: PPUSH
17747: LD_INT 6
17749: PPUSH
17750: CALL_OW 12
17754: PPUSH
17755: LD_INT 1
17757: PPUSH
17758: CALL_OW 483
// end ;
17762: GO 17622
17764: POP
17765: POP
// end ;
17766: PPOPN 5
17768: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17769: LD_EXP 25
17773: PUSH
17774: LD_EXP 60
17778: AND
17779: IFFALSE 17873
17781: GO 17783
17783: DISABLE
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_INT 22
17795: PUSH
17796: LD_OWVAR 2
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 32
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 21
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 69
17834: ST_TO_ADDR
// if not tmp then
17835: LD_VAR 0 2
17839: NOT
17840: IFFALSE 17844
// exit ;
17842: GO 17873
// for i in tmp do
17844: LD_ADDR_VAR 0 1
17848: PUSH
17849: LD_VAR 0 2
17853: PUSH
17854: FOR_IN
17855: IFFALSE 17871
// SetFuel ( i , 0 ) ;
17857: LD_VAR 0 1
17861: PPUSH
17862: LD_INT 0
17864: PPUSH
17865: CALL_OW 240
17869: GO 17854
17871: POP
17872: POP
// end ;
17873: PPOPN 2
17875: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17876: LD_EXP 25
17880: PUSH
17881: LD_EXP 61
17885: AND
17886: IFFALSE 17952
17888: GO 17890
17890: DISABLE
17891: LD_INT 0
17893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17894: LD_ADDR_VAR 0 1
17898: PUSH
17899: LD_INT 22
17901: PUSH
17902: LD_OWVAR 2
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 30
17913: PUSH
17914: LD_INT 29
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 69
17929: ST_TO_ADDR
// if not tmp then
17930: LD_VAR 0 1
17934: NOT
17935: IFFALSE 17939
// exit ;
17937: GO 17952
// DestroyUnit ( tmp [ 1 ] ) ;
17939: LD_VAR 0 1
17943: PUSH
17944: LD_INT 1
17946: ARRAY
17947: PPUSH
17948: CALL_OW 65
// end ;
17952: PPOPN 1
17954: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17955: LD_EXP 25
17959: PUSH
17960: LD_EXP 63
17964: AND
17965: IFFALSE 18094
17967: GO 17969
17969: DISABLE
17970: LD_INT 0
17972: PPUSH
// begin uc_side := 0 ;
17973: LD_ADDR_OWVAR 20
17977: PUSH
17978: LD_INT 0
17980: ST_TO_ADDR
// uc_nation := nation_arabian ;
17981: LD_ADDR_OWVAR 21
17985: PUSH
17986: LD_INT 2
17988: ST_TO_ADDR
// hc_gallery :=  ;
17989: LD_ADDR_OWVAR 33
17993: PUSH
17994: LD_STRING 
17996: ST_TO_ADDR
// hc_name :=  ;
17997: LD_ADDR_OWVAR 26
18001: PUSH
18002: LD_STRING 
18004: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18005: LD_INT 1
18007: PPUSH
18008: LD_INT 11
18010: PPUSH
18011: LD_INT 10
18013: PPUSH
18014: CALL_OW 380
// un := CreateHuman ;
18018: LD_ADDR_VAR 0 1
18022: PUSH
18023: CALL_OW 44
18027: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18028: LD_VAR 0 1
18032: PPUSH
18033: LD_INT 1
18035: PPUSH
18036: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18040: LD_INT 35
18042: PPUSH
18043: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 22
18054: PUSH
18055: LD_OWVAR 2
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PPUSH
18064: CALL_OW 69
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL_OW 74
18078: PPUSH
18079: CALL_OW 115
// until IsDead ( un ) ;
18083: LD_VAR 0 1
18087: PPUSH
18088: CALL_OW 301
18092: IFFALSE 18040
// end ;
18094: PPOPN 1
18096: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18097: LD_EXP 25
18101: PUSH
18102: LD_EXP 65
18106: AND
18107: IFFALSE 18119
18109: GO 18111
18111: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18112: LD_STRING earthquake(getX(game), 0, 32)
18114: PPUSH
18115: CALL_OW 559
18119: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18120: LD_EXP 25
18124: PUSH
18125: LD_EXP 66
18129: AND
18130: IFFALSE 18221
18132: GO 18134
18134: DISABLE
18135: LD_INT 0
18137: PPUSH
// begin enable ;
18138: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18139: LD_ADDR_VAR 0 1
18143: PUSH
18144: LD_INT 22
18146: PUSH
18147: LD_OWVAR 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 21
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 33
18168: PUSH
18169: LD_INT 3
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: PPUSH
18181: CALL_OW 69
18185: ST_TO_ADDR
// if not tmp then
18186: LD_VAR 0 1
18190: NOT
18191: IFFALSE 18195
// exit ;
18193: GO 18221
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18195: LD_VAR 0 1
18199: PUSH
18200: LD_INT 1
18202: PPUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: CALL_OW 12
18212: ARRAY
18213: PPUSH
18214: LD_INT 1
18216: PPUSH
18217: CALL_OW 234
// end ;
18221: PPOPN 1
18223: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18224: LD_EXP 25
18228: PUSH
18229: LD_EXP 67
18233: AND
18234: IFFALSE 18375
18236: GO 18238
18238: DISABLE
18239: LD_INT 0
18241: PPUSH
18242: PPUSH
18243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18244: LD_ADDR_VAR 0 3
18248: PUSH
18249: LD_INT 22
18251: PUSH
18252: LD_OWVAR 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 25
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 69
18279: ST_TO_ADDR
// if not tmp then
18280: LD_VAR 0 3
18284: NOT
18285: IFFALSE 18289
// exit ;
18287: GO 18375
// un := tmp [ rand ( 1 , tmp ) ] ;
18289: LD_ADDR_VAR 0 2
18293: PUSH
18294: LD_VAR 0 3
18298: PUSH
18299: LD_INT 1
18301: PPUSH
18302: LD_VAR 0 3
18306: PPUSH
18307: CALL_OW 12
18311: ARRAY
18312: ST_TO_ADDR
// if Crawls ( un ) then
18313: LD_VAR 0 2
18317: PPUSH
18318: CALL_OW 318
18322: IFFALSE 18333
// ComWalk ( un ) ;
18324: LD_VAR 0 2
18328: PPUSH
18329: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18333: LD_VAR 0 2
18337: PPUSH
18338: LD_INT 9
18340: PPUSH
18341: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18345: LD_INT 28
18347: PPUSH
18348: LD_OWVAR 2
18352: PPUSH
18353: LD_INT 2
18355: PPUSH
18356: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18360: LD_INT 29
18362: PPUSH
18363: LD_OWVAR 2
18367: PPUSH
18368: LD_INT 2
18370: PPUSH
18371: CALL_OW 322
// end ;
18375: PPOPN 3
18377: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18378: LD_EXP 25
18382: PUSH
18383: LD_EXP 68
18387: AND
18388: IFFALSE 18499
18390: GO 18392
18392: DISABLE
18393: LD_INT 0
18395: PPUSH
18396: PPUSH
18397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18398: LD_ADDR_VAR 0 3
18402: PUSH
18403: LD_INT 22
18405: PUSH
18406: LD_OWVAR 2
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 25
18417: PUSH
18418: LD_INT 1
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 69
18433: ST_TO_ADDR
// if not tmp then
18434: LD_VAR 0 3
18438: NOT
18439: IFFALSE 18443
// exit ;
18441: GO 18499
// un := tmp [ rand ( 1 , tmp ) ] ;
18443: LD_ADDR_VAR 0 2
18447: PUSH
18448: LD_VAR 0 3
18452: PUSH
18453: LD_INT 1
18455: PPUSH
18456: LD_VAR 0 3
18460: PPUSH
18461: CALL_OW 12
18465: ARRAY
18466: ST_TO_ADDR
// if Crawls ( un ) then
18467: LD_VAR 0 2
18471: PPUSH
18472: CALL_OW 318
18476: IFFALSE 18487
// ComWalk ( un ) ;
18478: LD_VAR 0 2
18482: PPUSH
18483: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18487: LD_VAR 0 2
18491: PPUSH
18492: LD_INT 8
18494: PPUSH
18495: CALL_OW 336
// end ;
18499: PPOPN 3
18501: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18502: LD_EXP 25
18506: PUSH
18507: LD_EXP 69
18511: AND
18512: IFFALSE 18656
18514: GO 18516
18516: DISABLE
18517: LD_INT 0
18519: PPUSH
18520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18521: LD_ADDR_VAR 0 2
18525: PUSH
18526: LD_INT 22
18528: PUSH
18529: LD_OWVAR 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 21
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: LD_INT 34
18553: PUSH
18554: LD_INT 12
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 34
18563: PUSH
18564: LD_INT 51
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 34
18573: PUSH
18574: LD_INT 32
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL_OW 69
18596: ST_TO_ADDR
// if not tmp then
18597: LD_VAR 0 2
18601: NOT
18602: IFFALSE 18606
// exit ;
18604: GO 18656
// for i in tmp do
18606: LD_ADDR_VAR 0 1
18610: PUSH
18611: LD_VAR 0 2
18615: PUSH
18616: FOR_IN
18617: IFFALSE 18654
// if GetCargo ( i , mat_artifact ) = 0 then
18619: LD_VAR 0 1
18623: PPUSH
18624: LD_INT 4
18626: PPUSH
18627: CALL_OW 289
18631: PUSH
18632: LD_INT 0
18634: EQUAL
18635: IFFALSE 18652
// SetCargo ( i , mat_siberit , 100 ) ;
18637: LD_VAR 0 1
18641: PPUSH
18642: LD_INT 3
18644: PPUSH
18645: LD_INT 100
18647: PPUSH
18648: CALL_OW 290
18652: GO 18616
18654: POP
18655: POP
// end ;
18656: PPOPN 2
18658: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18659: LD_EXP 25
18663: PUSH
18664: LD_EXP 70
18668: AND
18669: IFFALSE 18822
18671: GO 18673
18673: DISABLE
18674: LD_INT 0
18676: PPUSH
18677: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18678: LD_ADDR_VAR 0 2
18682: PUSH
18683: LD_INT 22
18685: PUSH
18686: LD_OWVAR 2
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PPUSH
18695: CALL_OW 69
18699: ST_TO_ADDR
// if not tmp then
18700: LD_VAR 0 2
18704: NOT
18705: IFFALSE 18709
// exit ;
18707: GO 18822
// for i := 1 to 2 do
18709: LD_ADDR_VAR 0 1
18713: PUSH
18714: DOUBLE
18715: LD_INT 1
18717: DEC
18718: ST_TO_ADDR
18719: LD_INT 2
18721: PUSH
18722: FOR_TO
18723: IFFALSE 18820
// begin uc_side := your_side ;
18725: LD_ADDR_OWVAR 20
18729: PUSH
18730: LD_OWVAR 2
18734: ST_TO_ADDR
// uc_nation := nation_american ;
18735: LD_ADDR_OWVAR 21
18739: PUSH
18740: LD_INT 1
18742: ST_TO_ADDR
// vc_chassis := us_morphling ;
18743: LD_ADDR_OWVAR 37
18747: PUSH
18748: LD_INT 5
18750: ST_TO_ADDR
// vc_engine := engine_siberite ;
18751: LD_ADDR_OWVAR 39
18755: PUSH
18756: LD_INT 3
18758: ST_TO_ADDR
// vc_control := control_computer ;
18759: LD_ADDR_OWVAR 38
18763: PUSH
18764: LD_INT 3
18766: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18767: LD_ADDR_OWVAR 40
18771: PUSH
18772: LD_INT 10
18774: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
18775: CALL_OW 45
18779: PPUSH
18780: LD_VAR 0 2
18784: PUSH
18785: LD_INT 1
18787: ARRAY
18788: PPUSH
18789: CALL_OW 250
18793: PPUSH
18794: LD_VAR 0 2
18798: PUSH
18799: LD_INT 1
18801: ARRAY
18802: PPUSH
18803: CALL_OW 251
18807: PPUSH
18808: LD_INT 12
18810: PPUSH
18811: LD_INT 1
18813: PPUSH
18814: CALL_OW 50
// end ;
18818: GO 18722
18820: POP
18821: POP
// end ;
18822: PPOPN 2
18824: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18825: LD_EXP 25
18829: PUSH
18830: LD_EXP 71
18834: AND
18835: IFFALSE 19057
18837: GO 18839
18839: DISABLE
18840: LD_INT 0
18842: PPUSH
18843: PPUSH
18844: PPUSH
18845: PPUSH
18846: PPUSH
18847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18848: LD_ADDR_VAR 0 6
18852: PUSH
18853: LD_INT 22
18855: PUSH
18856: LD_OWVAR 2
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 21
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 3
18877: PUSH
18878: LD_INT 23
18880: PUSH
18881: LD_INT 0
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: PPUSH
18897: CALL_OW 69
18901: ST_TO_ADDR
// if not tmp then
18902: LD_VAR 0 6
18906: NOT
18907: IFFALSE 18911
// exit ;
18909: GO 19057
// s1 := rand ( 1 , 4 ) ;
18911: LD_ADDR_VAR 0 2
18915: PUSH
18916: LD_INT 1
18918: PPUSH
18919: LD_INT 4
18921: PPUSH
18922: CALL_OW 12
18926: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18927: LD_ADDR_VAR 0 4
18931: PUSH
18932: LD_VAR 0 6
18936: PUSH
18937: LD_INT 1
18939: ARRAY
18940: PPUSH
18941: LD_VAR 0 2
18945: PPUSH
18946: CALL_OW 259
18950: ST_TO_ADDR
// if s1 = 1 then
18951: LD_VAR 0 2
18955: PUSH
18956: LD_INT 1
18958: EQUAL
18959: IFFALSE 18979
// s2 := rand ( 2 , 4 ) else
18961: LD_ADDR_VAR 0 3
18965: PUSH
18966: LD_INT 2
18968: PPUSH
18969: LD_INT 4
18971: PPUSH
18972: CALL_OW 12
18976: ST_TO_ADDR
18977: GO 18987
// s2 := 1 ;
18979: LD_ADDR_VAR 0 3
18983: PUSH
18984: LD_INT 1
18986: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18987: LD_ADDR_VAR 0 5
18991: PUSH
18992: LD_VAR 0 6
18996: PUSH
18997: LD_INT 1
18999: ARRAY
19000: PPUSH
19001: LD_VAR 0 3
19005: PPUSH
19006: CALL_OW 259
19010: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19011: LD_VAR 0 6
19015: PUSH
19016: LD_INT 1
19018: ARRAY
19019: PPUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: LD_VAR 0 5
19029: PPUSH
19030: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19034: LD_VAR 0 6
19038: PUSH
19039: LD_INT 1
19041: ARRAY
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: LD_VAR 0 4
19052: PPUSH
19053: CALL_OW 237
// end ;
19057: PPOPN 6
19059: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19060: LD_EXP 25
19064: PUSH
19065: LD_EXP 72
19069: AND
19070: IFFALSE 19149
19072: GO 19074
19074: DISABLE
19075: LD_INT 0
19077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19078: LD_ADDR_VAR 0 1
19082: PUSH
19083: LD_INT 22
19085: PUSH
19086: LD_OWVAR 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 30
19097: PUSH
19098: LD_INT 3
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PPUSH
19109: CALL_OW 69
19113: ST_TO_ADDR
// if not tmp then
19114: LD_VAR 0 1
19118: NOT
19119: IFFALSE 19123
// exit ;
19121: GO 19149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19123: LD_VAR 0 1
19127: PUSH
19128: LD_INT 1
19130: PPUSH
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 12
19140: ARRAY
19141: PPUSH
19142: LD_INT 1
19144: PPUSH
19145: CALL_OW 234
// end ;
19149: PPOPN 1
19151: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19152: LD_EXP 25
19156: PUSH
19157: LD_EXP 73
19161: AND
19162: IFFALSE 19274
19164: GO 19166
19166: DISABLE
19167: LD_INT 0
19169: PPUSH
19170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19171: LD_ADDR_VAR 0 2
19175: PUSH
19176: LD_INT 22
19178: PUSH
19179: LD_OWVAR 2
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 2
19190: PUSH
19191: LD_INT 30
19193: PUSH
19194: LD_INT 27
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 30
19203: PUSH
19204: LD_INT 26
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 30
19213: PUSH
19214: LD_INT 28
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PPUSH
19231: CALL_OW 69
19235: ST_TO_ADDR
// if not tmp then
19236: LD_VAR 0 2
19240: NOT
19241: IFFALSE 19245
// exit ;
19243: GO 19274
// for i in tmp do
19245: LD_ADDR_VAR 0 1
19249: PUSH
19250: LD_VAR 0 2
19254: PUSH
19255: FOR_IN
19256: IFFALSE 19272
// SetLives ( i , 1 ) ;
19258: LD_VAR 0 1
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: CALL_OW 234
19270: GO 19255
19272: POP
19273: POP
// end ;
19274: PPOPN 2
19276: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19277: LD_EXP 25
19281: PUSH
19282: LD_EXP 74
19286: AND
19287: IFFALSE 19561
19289: GO 19291
19291: DISABLE
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
// begin i := rand ( 1 , 7 ) ;
19297: LD_ADDR_VAR 0 1
19301: PUSH
19302: LD_INT 1
19304: PPUSH
19305: LD_INT 7
19307: PPUSH
19308: CALL_OW 12
19312: ST_TO_ADDR
// case i of 1 :
19313: LD_VAR 0 1
19317: PUSH
19318: LD_INT 1
19320: DOUBLE
19321: EQUAL
19322: IFTRUE 19326
19324: GO 19336
19326: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19327: LD_STRING earthquake(getX(game), 0, 32)
19329: PPUSH
19330: CALL_OW 559
19334: GO 19561
19336: LD_INT 2
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19358
19344: POP
// begin ToLua ( displayStucuk(); ) ;
19345: LD_STRING displayStucuk();
19347: PPUSH
19348: CALL_OW 559
// ResetFog ;
19352: CALL_OW 335
// end ; 3 :
19356: GO 19561
19358: LD_INT 3
19360: DOUBLE
19361: EQUAL
19362: IFTRUE 19366
19364: GO 19470
19366: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: LD_INT 22
19374: PUSH
19375: LD_OWVAR 2
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 25
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 69
19402: ST_TO_ADDR
// if not tmp then
19403: LD_VAR 0 2
19407: NOT
19408: IFFALSE 19412
// exit ;
19410: GO 19561
// un := tmp [ rand ( 1 , tmp ) ] ;
19412: LD_ADDR_VAR 0 3
19416: PUSH
19417: LD_VAR 0 2
19421: PUSH
19422: LD_INT 1
19424: PPUSH
19425: LD_VAR 0 2
19429: PPUSH
19430: CALL_OW 12
19434: ARRAY
19435: ST_TO_ADDR
// if Crawls ( un ) then
19436: LD_VAR 0 3
19440: PPUSH
19441: CALL_OW 318
19445: IFFALSE 19456
// ComWalk ( un ) ;
19447: LD_VAR 0 3
19451: PPUSH
19452: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19456: LD_VAR 0 3
19460: PPUSH
19461: LD_INT 8
19463: PPUSH
19464: CALL_OW 336
// end ; 4 :
19468: GO 19561
19470: LD_INT 4
19472: DOUBLE
19473: EQUAL
19474: IFTRUE 19478
19476: GO 19539
19478: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19479: LD_ADDR_VAR 0 2
19483: PUSH
19484: LD_INT 22
19486: PUSH
19487: LD_OWVAR 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 30
19498: PUSH
19499: LD_INT 29
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PPUSH
19510: CALL_OW 69
19514: ST_TO_ADDR
// if not tmp then
19515: LD_VAR 0 2
19519: NOT
19520: IFFALSE 19524
// exit ;
19522: GO 19561
// DestroyUnit ( tmp [ 1 ] ) ;
19524: LD_VAR 0 2
19528: PUSH
19529: LD_INT 1
19531: ARRAY
19532: PPUSH
19533: CALL_OW 65
// end ; 5 .. 7 :
19537: GO 19561
19539: LD_INT 5
19541: DOUBLE
19542: GREATEREQUAL
19543: IFFALSE 19551
19545: LD_INT 7
19547: DOUBLE
19548: LESSEQUAL
19549: IFTRUE 19553
19551: GO 19560
19553: POP
// StreamSibBomb ; end ;
19554: CALL 15841 0 0
19558: GO 19561
19560: POP
// end ;
19561: PPOPN 3
19563: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19564: LD_EXP 25
19568: PUSH
19569: LD_EXP 75
19573: AND
19574: IFFALSE 19730
19576: GO 19578
19578: DISABLE
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
19583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19584: LD_ADDR_VAR 0 2
19588: PUSH
19589: LD_INT 81
19591: PUSH
19592: LD_OWVAR 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: LD_INT 21
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 21
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 69
19637: ST_TO_ADDR
// if not tmp then
19638: LD_VAR 0 2
19642: NOT
19643: IFFALSE 19647
// exit ;
19645: GO 19730
// p := 0 ;
19647: LD_ADDR_VAR 0 3
19651: PUSH
19652: LD_INT 0
19654: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19655: LD_INT 35
19657: PPUSH
19658: CALL_OW 67
// p := p + 1 ;
19662: LD_ADDR_VAR 0 3
19666: PUSH
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 1
19674: PLUS
19675: ST_TO_ADDR
// for i in tmp do
19676: LD_ADDR_VAR 0 1
19680: PUSH
19681: LD_VAR 0 2
19685: PUSH
19686: FOR_IN
19687: IFFALSE 19718
// if GetLives ( i ) < 1000 then
19689: LD_VAR 0 1
19693: PPUSH
19694: CALL_OW 256
19698: PUSH
19699: LD_INT 1000
19701: LESS
19702: IFFALSE 19716
// SetLives ( i , 1000 ) ;
19704: LD_VAR 0 1
19708: PPUSH
19709: LD_INT 1000
19711: PPUSH
19712: CALL_OW 234
19716: GO 19686
19718: POP
19719: POP
// until p > 20 ;
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 20
19727: GREATER
19728: IFFALSE 19655
// end ;
19730: PPOPN 3
19732: END
// every 0 0$1 trigger StreamModeActive and sTime do
19733: LD_EXP 25
19737: PUSH
19738: LD_EXP 76
19742: AND
19743: IFFALSE 19778
19745: GO 19747
19747: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19748: LD_INT 28
19750: PPUSH
19751: LD_OWVAR 2
19755: PPUSH
19756: LD_INT 2
19758: PPUSH
19759: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19763: LD_INT 30
19765: PPUSH
19766: LD_OWVAR 2
19770: PPUSH
19771: LD_INT 2
19773: PPUSH
19774: CALL_OW 322
// end ;
19778: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19779: LD_EXP 25
19783: PUSH
19784: LD_EXP 77
19788: AND
19789: IFFALSE 19910
19791: GO 19793
19793: DISABLE
19794: LD_INT 0
19796: PPUSH
19797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19798: LD_ADDR_VAR 0 2
19802: PUSH
19803: LD_INT 22
19805: PUSH
19806: LD_OWVAR 2
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 21
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 3
19827: PUSH
19828: LD_INT 23
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: LIST
19846: PPUSH
19847: CALL_OW 69
19851: ST_TO_ADDR
// if not tmp then
19852: LD_VAR 0 2
19856: NOT
19857: IFFALSE 19861
// exit ;
19859: GO 19910
// for i in tmp do
19861: LD_ADDR_VAR 0 1
19865: PUSH
19866: LD_VAR 0 2
19870: PUSH
19871: FOR_IN
19872: IFFALSE 19908
// begin if Crawls ( i ) then
19874: LD_VAR 0 1
19878: PPUSH
19879: CALL_OW 318
19883: IFFALSE 19894
// ComWalk ( i ) ;
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 138
// SetClass ( i , 2 ) ;
19894: LD_VAR 0 1
19898: PPUSH
19899: LD_INT 2
19901: PPUSH
19902: CALL_OW 336
// end ;
19906: GO 19871
19908: POP
19909: POP
// end ;
19910: PPOPN 2
19912: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19913: LD_EXP 25
19917: PUSH
19918: LD_EXP 78
19922: AND
19923: IFFALSE 20204
19925: GO 19927
19927: DISABLE
19928: LD_INT 0
19930: PPUSH
19931: PPUSH
19932: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19933: LD_OWVAR 2
19937: PPUSH
19938: LD_INT 9
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: LD_INT 1
19946: PPUSH
19947: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19951: LD_INT 9
19953: PPUSH
19954: LD_OWVAR 2
19958: PPUSH
19959: CALL_OW 343
// uc_side := 9 ;
19963: LD_ADDR_OWVAR 20
19967: PUSH
19968: LD_INT 9
19970: ST_TO_ADDR
// uc_nation := 2 ;
19971: LD_ADDR_OWVAR 21
19975: PUSH
19976: LD_INT 2
19978: ST_TO_ADDR
// hc_name := Dark Warrior ;
19979: LD_ADDR_OWVAR 26
19983: PUSH
19984: LD_STRING Dark Warrior
19986: ST_TO_ADDR
// hc_gallery :=  ;
19987: LD_ADDR_OWVAR 33
19991: PUSH
19992: LD_STRING 
19994: ST_TO_ADDR
// hc_noskilllimit := true ;
19995: LD_ADDR_OWVAR 76
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20003: LD_ADDR_OWVAR 31
20007: PUSH
20008: LD_INT 30
20010: PUSH
20011: LD_INT 30
20013: PUSH
20014: LD_INT 30
20016: PUSH
20017: LD_INT 30
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: ST_TO_ADDR
// un := CreateHuman ;
20026: LD_ADDR_VAR 0 3
20030: PUSH
20031: CALL_OW 44
20035: ST_TO_ADDR
// hc_noskilllimit := false ;
20036: LD_ADDR_OWVAR 76
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20044: LD_VAR 0 3
20048: PPUSH
20049: LD_INT 1
20051: PPUSH
20052: CALL_OW 51
// p := 0 ;
20056: LD_ADDR_VAR 0 2
20060: PUSH
20061: LD_INT 0
20063: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20064: LD_INT 35
20066: PPUSH
20067: CALL_OW 67
// p := p + 1 ;
20071: LD_ADDR_VAR 0 2
20075: PUSH
20076: LD_VAR 0 2
20080: PUSH
20081: LD_INT 1
20083: PLUS
20084: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20085: LD_VAR 0 3
20089: PPUSH
20090: CALL_OW 256
20094: PUSH
20095: LD_INT 1000
20097: LESS
20098: IFFALSE 20112
// SetLives ( un , 1000 ) ;
20100: LD_VAR 0 3
20104: PPUSH
20105: LD_INT 1000
20107: PPUSH
20108: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20112: LD_VAR 0 3
20116: PPUSH
20117: LD_INT 81
20119: PUSH
20120: LD_OWVAR 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 91
20131: PUSH
20132: LD_VAR 0 3
20136: PUSH
20137: LD_INT 30
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PPUSH
20149: CALL_OW 69
20153: PPUSH
20154: LD_VAR 0 3
20158: PPUSH
20159: CALL_OW 74
20163: PPUSH
20164: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20168: LD_VAR 0 2
20172: PUSH
20173: LD_INT 60
20175: GREATER
20176: PUSH
20177: LD_VAR 0 3
20181: PPUSH
20182: CALL_OW 301
20186: OR
20187: IFFALSE 20064
// if un then
20189: LD_VAR 0 3
20193: IFFALSE 20204
// RemoveUnit ( un ) ;
20195: LD_VAR 0 3
20199: PPUSH
20200: CALL_OW 64
// end ; end_of_file end_of_file
20204: PPOPN 3
20206: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
// if exist_mode then
20211: LD_VAR 0 2
20215: IFFALSE 20240
// unit := CreateCharacter ( prefix & ident ) else
20217: LD_ADDR_VAR 0 5
20221: PUSH
20222: LD_VAR 0 3
20226: PUSH
20227: LD_VAR 0 1
20231: STR
20232: PPUSH
20233: CALL_OW 34
20237: ST_TO_ADDR
20238: GO 20255
// unit := NewCharacter ( ident ) ;
20240: LD_ADDR_VAR 0 5
20244: PUSH
20245: LD_VAR 0 1
20249: PPUSH
20250: CALL_OW 25
20254: ST_TO_ADDR
// result := unit ;
20255: LD_ADDR_VAR 0 4
20259: PUSH
20260: LD_VAR 0 5
20264: ST_TO_ADDR
// end ;
20265: LD_VAR 0 4
20269: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20270: LD_INT 0
20272: PPUSH
20273: PPUSH
// if not side or not nation then
20274: LD_VAR 0 1
20278: NOT
20279: PUSH
20280: LD_VAR 0 2
20284: NOT
20285: OR
20286: IFFALSE 20290
// exit ;
20288: GO 21054
// case nation of nation_american :
20290: LD_VAR 0 2
20294: PUSH
20295: LD_INT 1
20297: DOUBLE
20298: EQUAL
20299: IFTRUE 20303
20301: GO 20517
20303: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20304: LD_ADDR_VAR 0 4
20308: PUSH
20309: LD_INT 35
20311: PUSH
20312: LD_INT 45
20314: PUSH
20315: LD_INT 46
20317: PUSH
20318: LD_INT 47
20320: PUSH
20321: LD_INT 82
20323: PUSH
20324: LD_INT 83
20326: PUSH
20327: LD_INT 84
20329: PUSH
20330: LD_INT 85
20332: PUSH
20333: LD_INT 86
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: LD_INT 6
20344: PUSH
20345: LD_INT 15
20347: PUSH
20348: LD_INT 16
20350: PUSH
20351: LD_INT 7
20353: PUSH
20354: LD_INT 12
20356: PUSH
20357: LD_INT 13
20359: PUSH
20360: LD_INT 10
20362: PUSH
20363: LD_INT 14
20365: PUSH
20366: LD_INT 20
20368: PUSH
20369: LD_INT 21
20371: PUSH
20372: LD_INT 22
20374: PUSH
20375: LD_INT 25
20377: PUSH
20378: LD_INT 32
20380: PUSH
20381: LD_INT 27
20383: PUSH
20384: LD_INT 36
20386: PUSH
20387: LD_INT 69
20389: PUSH
20390: LD_INT 39
20392: PUSH
20393: LD_INT 34
20395: PUSH
20396: LD_INT 40
20398: PUSH
20399: LD_INT 48
20401: PUSH
20402: LD_INT 49
20404: PUSH
20405: LD_INT 50
20407: PUSH
20408: LD_INT 51
20410: PUSH
20411: LD_INT 52
20413: PUSH
20414: LD_INT 53
20416: PUSH
20417: LD_INT 54
20419: PUSH
20420: LD_INT 55
20422: PUSH
20423: LD_INT 56
20425: PUSH
20426: LD_INT 57
20428: PUSH
20429: LD_INT 58
20431: PUSH
20432: LD_INT 59
20434: PUSH
20435: LD_INT 60
20437: PUSH
20438: LD_INT 61
20440: PUSH
20441: LD_INT 62
20443: PUSH
20444: LD_INT 80
20446: PUSH
20447: LD_INT 82
20449: PUSH
20450: LD_INT 83
20452: PUSH
20453: LD_INT 84
20455: PUSH
20456: LD_INT 85
20458: PUSH
20459: LD_INT 86
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: ST_TO_ADDR
20515: GO 20978
20517: LD_INT 2
20519: DOUBLE
20520: EQUAL
20521: IFTRUE 20525
20523: GO 20747
20525: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20526: LD_ADDR_VAR 0 4
20530: PUSH
20531: LD_INT 35
20533: PUSH
20534: LD_INT 45
20536: PUSH
20537: LD_INT 46
20539: PUSH
20540: LD_INT 47
20542: PUSH
20543: LD_INT 82
20545: PUSH
20546: LD_INT 83
20548: PUSH
20549: LD_INT 84
20551: PUSH
20552: LD_INT 85
20554: PUSH
20555: LD_INT 87
20557: PUSH
20558: LD_INT 70
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: LD_INT 11
20566: PUSH
20567: LD_INT 3
20569: PUSH
20570: LD_INT 4
20572: PUSH
20573: LD_INT 5
20575: PUSH
20576: LD_INT 6
20578: PUSH
20579: LD_INT 15
20581: PUSH
20582: LD_INT 18
20584: PUSH
20585: LD_INT 7
20587: PUSH
20588: LD_INT 17
20590: PUSH
20591: LD_INT 8
20593: PUSH
20594: LD_INT 20
20596: PUSH
20597: LD_INT 21
20599: PUSH
20600: LD_INT 22
20602: PUSH
20603: LD_INT 72
20605: PUSH
20606: LD_INT 26
20608: PUSH
20609: LD_INT 69
20611: PUSH
20612: LD_INT 39
20614: PUSH
20615: LD_INT 40
20617: PUSH
20618: LD_INT 41
20620: PUSH
20621: LD_INT 42
20623: PUSH
20624: LD_INT 43
20626: PUSH
20627: LD_INT 48
20629: PUSH
20630: LD_INT 49
20632: PUSH
20633: LD_INT 50
20635: PUSH
20636: LD_INT 51
20638: PUSH
20639: LD_INT 52
20641: PUSH
20642: LD_INT 53
20644: PUSH
20645: LD_INT 54
20647: PUSH
20648: LD_INT 55
20650: PUSH
20651: LD_INT 56
20653: PUSH
20654: LD_INT 60
20656: PUSH
20657: LD_INT 61
20659: PUSH
20660: LD_INT 62
20662: PUSH
20663: LD_INT 66
20665: PUSH
20666: LD_INT 67
20668: PUSH
20669: LD_INT 68
20671: PUSH
20672: LD_INT 81
20674: PUSH
20675: LD_INT 82
20677: PUSH
20678: LD_INT 83
20680: PUSH
20681: LD_INT 84
20683: PUSH
20684: LD_INT 85
20686: PUSH
20687: LD_INT 87
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: ST_TO_ADDR
20745: GO 20978
20747: LD_INT 3
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20977
20755: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20756: LD_ADDR_VAR 0 4
20760: PUSH
20761: LD_INT 46
20763: PUSH
20764: LD_INT 47
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: LD_INT 82
20775: PUSH
20776: LD_INT 83
20778: PUSH
20779: LD_INT 84
20781: PUSH
20782: LD_INT 85
20784: PUSH
20785: LD_INT 86
20787: PUSH
20788: LD_INT 11
20790: PUSH
20791: LD_INT 9
20793: PUSH
20794: LD_INT 20
20796: PUSH
20797: LD_INT 19
20799: PUSH
20800: LD_INT 21
20802: PUSH
20803: LD_INT 24
20805: PUSH
20806: LD_INT 22
20808: PUSH
20809: LD_INT 25
20811: PUSH
20812: LD_INT 28
20814: PUSH
20815: LD_INT 29
20817: PUSH
20818: LD_INT 30
20820: PUSH
20821: LD_INT 31
20823: PUSH
20824: LD_INT 37
20826: PUSH
20827: LD_INT 38
20829: PUSH
20830: LD_INT 32
20832: PUSH
20833: LD_INT 27
20835: PUSH
20836: LD_INT 33
20838: PUSH
20839: LD_INT 69
20841: PUSH
20842: LD_INT 39
20844: PUSH
20845: LD_INT 34
20847: PUSH
20848: LD_INT 40
20850: PUSH
20851: LD_INT 71
20853: PUSH
20854: LD_INT 23
20856: PUSH
20857: LD_INT 44
20859: PUSH
20860: LD_INT 48
20862: PUSH
20863: LD_INT 49
20865: PUSH
20866: LD_INT 50
20868: PUSH
20869: LD_INT 51
20871: PUSH
20872: LD_INT 52
20874: PUSH
20875: LD_INT 53
20877: PUSH
20878: LD_INT 54
20880: PUSH
20881: LD_INT 55
20883: PUSH
20884: LD_INT 56
20886: PUSH
20887: LD_INT 57
20889: PUSH
20890: LD_INT 58
20892: PUSH
20893: LD_INT 59
20895: PUSH
20896: LD_INT 63
20898: PUSH
20899: LD_INT 64
20901: PUSH
20902: LD_INT 65
20904: PUSH
20905: LD_INT 82
20907: PUSH
20908: LD_INT 83
20910: PUSH
20911: LD_INT 84
20913: PUSH
20914: LD_INT 85
20916: PUSH
20917: LD_INT 86
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: ST_TO_ADDR
20975: GO 20978
20977: POP
// if state > - 1 and state < 3 then
20978: LD_VAR 0 3
20982: PUSH
20983: LD_INT 1
20985: NEG
20986: GREATER
20987: PUSH
20988: LD_VAR 0 3
20992: PUSH
20993: LD_INT 3
20995: LESS
20996: AND
20997: IFFALSE 21054
// for i in result do
20999: LD_ADDR_VAR 0 5
21003: PUSH
21004: LD_VAR 0 4
21008: PUSH
21009: FOR_IN
21010: IFFALSE 21052
// if GetTech ( i , side ) <> state then
21012: LD_VAR 0 5
21016: PPUSH
21017: LD_VAR 0 1
21021: PPUSH
21022: CALL_OW 321
21026: PUSH
21027: LD_VAR 0 3
21031: NONEQUAL
21032: IFFALSE 21050
// result := result diff i ;
21034: LD_ADDR_VAR 0 4
21038: PUSH
21039: LD_VAR 0 4
21043: PUSH
21044: LD_VAR 0 5
21048: DIFF
21049: ST_TO_ADDR
21050: GO 21009
21052: POP
21053: POP
// end ;
21054: LD_VAR 0 4
21058: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21059: LD_INT 0
21061: PPUSH
21062: PPUSH
21063: PPUSH
// result := true ;
21064: LD_ADDR_VAR 0 3
21068: PUSH
21069: LD_INT 1
21071: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21072: LD_ADDR_VAR 0 5
21076: PUSH
21077: LD_VAR 0 2
21081: PPUSH
21082: CALL_OW 480
21086: ST_TO_ADDR
// if not tmp then
21087: LD_VAR 0 5
21091: NOT
21092: IFFALSE 21096
// exit ;
21094: GO 21145
// for i in tmp do
21096: LD_ADDR_VAR 0 4
21100: PUSH
21101: LD_VAR 0 5
21105: PUSH
21106: FOR_IN
21107: IFFALSE 21143
// if GetTech ( i , side ) <> state_researched then
21109: LD_VAR 0 4
21113: PPUSH
21114: LD_VAR 0 1
21118: PPUSH
21119: CALL_OW 321
21123: PUSH
21124: LD_INT 2
21126: NONEQUAL
21127: IFFALSE 21141
// begin result := false ;
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// exit ;
21137: POP
21138: POP
21139: GO 21145
// end ;
21141: GO 21106
21143: POP
21144: POP
// end ;
21145: LD_VAR 0 3
21149: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21150: LD_INT 0
21152: PPUSH
21153: PPUSH
21154: PPUSH
21155: PPUSH
21156: PPUSH
21157: PPUSH
21158: PPUSH
21159: PPUSH
21160: PPUSH
21161: PPUSH
21162: PPUSH
21163: PPUSH
21164: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21165: LD_VAR 0 1
21169: NOT
21170: PUSH
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 257
21180: PUSH
21181: LD_INT 9
21183: NONEQUAL
21184: OR
21185: IFFALSE 21189
// exit ;
21187: GO 21762
// side := GetSide ( unit ) ;
21189: LD_ADDR_VAR 0 9
21193: PUSH
21194: LD_VAR 0 1
21198: PPUSH
21199: CALL_OW 255
21203: ST_TO_ADDR
// tech_space := tech_spacanom ;
21204: LD_ADDR_VAR 0 12
21208: PUSH
21209: LD_INT 29
21211: ST_TO_ADDR
// tech_time := tech_taurad ;
21212: LD_ADDR_VAR 0 13
21216: PUSH
21217: LD_INT 28
21219: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21220: LD_ADDR_VAR 0 11
21224: PUSH
21225: LD_VAR 0 1
21229: PPUSH
21230: CALL_OW 310
21234: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21235: LD_VAR 0 11
21239: PPUSH
21240: CALL_OW 247
21244: PUSH
21245: LD_INT 2
21247: EQUAL
21248: IFFALSE 21252
// exit ;
21250: GO 21762
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21252: LD_ADDR_VAR 0 8
21256: PUSH
21257: LD_INT 81
21259: PUSH
21260: LD_VAR 0 9
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: LD_INT 21
21274: PUSH
21275: LD_INT 3
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PPUSH
21290: CALL_OW 69
21294: ST_TO_ADDR
// if not tmp then
21295: LD_VAR 0 8
21299: NOT
21300: IFFALSE 21304
// exit ;
21302: GO 21762
// if in_unit then
21304: LD_VAR 0 11
21308: IFFALSE 21332
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21310: LD_ADDR_VAR 0 10
21314: PUSH
21315: LD_VAR 0 8
21319: PPUSH
21320: LD_VAR 0 11
21324: PPUSH
21325: CALL_OW 74
21329: ST_TO_ADDR
21330: GO 21352
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21332: LD_ADDR_VAR 0 10
21336: PUSH
21337: LD_VAR 0 8
21341: PPUSH
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL_OW 74
21351: ST_TO_ADDR
// if not enemy then
21352: LD_VAR 0 10
21356: NOT
21357: IFFALSE 21361
// exit ;
21359: GO 21762
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21361: LD_VAR 0 11
21365: PUSH
21366: LD_VAR 0 11
21370: PPUSH
21371: LD_VAR 0 10
21375: PPUSH
21376: CALL_OW 296
21380: PUSH
21381: LD_INT 13
21383: GREATER
21384: AND
21385: PUSH
21386: LD_VAR 0 1
21390: PPUSH
21391: LD_VAR 0 10
21395: PPUSH
21396: CALL_OW 296
21400: PUSH
21401: LD_INT 12
21403: GREATER
21404: OR
21405: IFFALSE 21409
// exit ;
21407: GO 21762
// missile := [ 1 ] ;
21409: LD_ADDR_VAR 0 14
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21420: LD_VAR 0 9
21424: PPUSH
21425: LD_VAR 0 12
21429: PPUSH
21430: CALL_OW 325
21434: IFFALSE 21463
// missile := Insert ( missile , missile + 1 , 2 ) ;
21436: LD_ADDR_VAR 0 14
21440: PUSH
21441: LD_VAR 0 14
21445: PPUSH
21446: LD_VAR 0 14
21450: PUSH
21451: LD_INT 1
21453: PLUS
21454: PPUSH
21455: LD_INT 2
21457: PPUSH
21458: CALL_OW 2
21462: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21463: LD_VAR 0 9
21467: PPUSH
21468: LD_VAR 0 13
21472: PPUSH
21473: CALL_OW 325
21477: PUSH
21478: LD_VAR 0 10
21482: PPUSH
21483: CALL_OW 255
21487: PPUSH
21488: LD_VAR 0 13
21492: PPUSH
21493: CALL_OW 325
21497: NOT
21498: AND
21499: IFFALSE 21528
// missile := Insert ( missile , missile + 1 , 3 ) ;
21501: LD_ADDR_VAR 0 14
21505: PUSH
21506: LD_VAR 0 14
21510: PPUSH
21511: LD_VAR 0 14
21515: PUSH
21516: LD_INT 1
21518: PLUS
21519: PPUSH
21520: LD_INT 3
21522: PPUSH
21523: CALL_OW 2
21527: ST_TO_ADDR
// if missile < 2 then
21528: LD_VAR 0 14
21532: PUSH
21533: LD_INT 2
21535: LESS
21536: IFFALSE 21540
// exit ;
21538: GO 21762
// x := GetX ( enemy ) ;
21540: LD_ADDR_VAR 0 4
21544: PUSH
21545: LD_VAR 0 10
21549: PPUSH
21550: CALL_OW 250
21554: ST_TO_ADDR
// y := GetY ( enemy ) ;
21555: LD_ADDR_VAR 0 5
21559: PUSH
21560: LD_VAR 0 10
21564: PPUSH
21565: CALL_OW 251
21569: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21570: LD_ADDR_VAR 0 6
21574: PUSH
21575: LD_VAR 0 4
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PPUSH
21584: LD_INT 1
21586: PPUSH
21587: CALL_OW 12
21591: PLUS
21592: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21593: LD_ADDR_VAR 0 7
21597: PUSH
21598: LD_VAR 0 5
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PPUSH
21607: LD_INT 1
21609: PPUSH
21610: CALL_OW 12
21614: PLUS
21615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21616: LD_VAR 0 6
21620: PPUSH
21621: LD_VAR 0 7
21625: PPUSH
21626: CALL_OW 488
21630: NOT
21631: IFFALSE 21653
// begin _x := x ;
21633: LD_ADDR_VAR 0 6
21637: PUSH
21638: LD_VAR 0 4
21642: ST_TO_ADDR
// _y := y ;
21643: LD_ADDR_VAR 0 7
21647: PUSH
21648: LD_VAR 0 5
21652: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21653: LD_ADDR_VAR 0 3
21657: PUSH
21658: LD_INT 1
21660: PPUSH
21661: LD_VAR 0 14
21665: PPUSH
21666: CALL_OW 12
21670: ST_TO_ADDR
// case i of 1 :
21671: LD_VAR 0 3
21675: PUSH
21676: LD_INT 1
21678: DOUBLE
21679: EQUAL
21680: IFTRUE 21684
21682: GO 21701
21684: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21685: LD_VAR 0 1
21689: PPUSH
21690: LD_VAR 0 10
21694: PPUSH
21695: CALL_OW 115
21699: GO 21762
21701: LD_INT 2
21703: DOUBLE
21704: EQUAL
21705: IFTRUE 21709
21707: GO 21731
21709: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21710: LD_VAR 0 1
21714: PPUSH
21715: LD_VAR 0 6
21719: PPUSH
21720: LD_VAR 0 7
21724: PPUSH
21725: CALL_OW 153
21729: GO 21762
21731: LD_INT 3
21733: DOUBLE
21734: EQUAL
21735: IFTRUE 21739
21737: GO 21761
21739: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21740: LD_VAR 0 1
21744: PPUSH
21745: LD_VAR 0 6
21749: PPUSH
21750: LD_VAR 0 7
21754: PPUSH
21755: CALL_OW 154
21759: GO 21762
21761: POP
// end ;
21762: LD_VAR 0 2
21766: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21767: LD_INT 0
21769: PPUSH
21770: PPUSH
21771: PPUSH
21772: PPUSH
21773: PPUSH
21774: PPUSH
// if not unit or not building then
21775: LD_VAR 0 1
21779: NOT
21780: PUSH
21781: LD_VAR 0 2
21785: NOT
21786: OR
21787: IFFALSE 21791
// exit ;
21789: GO 21949
// x := GetX ( building ) ;
21791: LD_ADDR_VAR 0 5
21795: PUSH
21796: LD_VAR 0 2
21800: PPUSH
21801: CALL_OW 250
21805: ST_TO_ADDR
// y := GetY ( building ) ;
21806: LD_ADDR_VAR 0 6
21810: PUSH
21811: LD_VAR 0 2
21815: PPUSH
21816: CALL_OW 251
21820: ST_TO_ADDR
// for i = 0 to 5 do
21821: LD_ADDR_VAR 0 4
21825: PUSH
21826: DOUBLE
21827: LD_INT 0
21829: DEC
21830: ST_TO_ADDR
21831: LD_INT 5
21833: PUSH
21834: FOR_TO
21835: IFFALSE 21947
// begin _x := ShiftX ( x , i , 3 ) ;
21837: LD_ADDR_VAR 0 7
21841: PUSH
21842: LD_VAR 0 5
21846: PPUSH
21847: LD_VAR 0 4
21851: PPUSH
21852: LD_INT 3
21854: PPUSH
21855: CALL_OW 272
21859: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21860: LD_ADDR_VAR 0 8
21864: PUSH
21865: LD_VAR 0 6
21869: PPUSH
21870: LD_VAR 0 4
21874: PPUSH
21875: LD_INT 3
21877: PPUSH
21878: CALL_OW 273
21882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21883: LD_VAR 0 7
21887: PPUSH
21888: LD_VAR 0 8
21892: PPUSH
21893: CALL_OW 488
21897: NOT
21898: IFFALSE 21902
// continue ;
21900: GO 21834
// if HexInfo ( _x , _y ) = 0 then
21902: LD_VAR 0 7
21906: PPUSH
21907: LD_VAR 0 8
21911: PPUSH
21912: CALL_OW 428
21916: PUSH
21917: LD_INT 0
21919: EQUAL
21920: IFFALSE 21945
// begin ComMoveXY ( unit , _x , _y ) ;
21922: LD_VAR 0 1
21926: PPUSH
21927: LD_VAR 0 7
21931: PPUSH
21932: LD_VAR 0 8
21936: PPUSH
21937: CALL_OW 111
// exit ;
21941: POP
21942: POP
21943: GO 21949
// end ; end ;
21945: GO 21834
21947: POP
21948: POP
// end ;
21949: LD_VAR 0 3
21953: RET
// export function ScanBase ( side , base_area ) ; begin
21954: LD_INT 0
21956: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21957: LD_ADDR_VAR 0 3
21961: PUSH
21962: LD_VAR 0 2
21966: PPUSH
21967: LD_INT 81
21969: PUSH
21970: LD_VAR 0 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PPUSH
21979: CALL_OW 70
21983: ST_TO_ADDR
// end ;
21984: LD_VAR 0 3
21988: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21989: LD_INT 0
21991: PPUSH
21992: PPUSH
21993: PPUSH
21994: PPUSH
// result := false ;
21995: LD_ADDR_VAR 0 2
21999: PUSH
22000: LD_INT 0
22002: ST_TO_ADDR
// side := GetSide ( unit ) ;
22003: LD_ADDR_VAR 0 3
22007: PUSH
22008: LD_VAR 0 1
22012: PPUSH
22013: CALL_OW 255
22017: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22018: LD_ADDR_VAR 0 4
22022: PUSH
22023: LD_VAR 0 1
22027: PPUSH
22028: CALL_OW 248
22032: ST_TO_ADDR
// case nat of 1 :
22033: LD_VAR 0 4
22037: PUSH
22038: LD_INT 1
22040: DOUBLE
22041: EQUAL
22042: IFTRUE 22046
22044: GO 22057
22046: POP
// tech := tech_lassight ; 2 :
22047: LD_ADDR_VAR 0 5
22051: PUSH
22052: LD_INT 12
22054: ST_TO_ADDR
22055: GO 22096
22057: LD_INT 2
22059: DOUBLE
22060: EQUAL
22061: IFTRUE 22065
22063: GO 22076
22065: POP
// tech := tech_mortar ; 3 :
22066: LD_ADDR_VAR 0 5
22070: PUSH
22071: LD_INT 41
22073: ST_TO_ADDR
22074: GO 22096
22076: LD_INT 3
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22095
22084: POP
// tech := tech_bazooka ; end ;
22085: LD_ADDR_VAR 0 5
22089: PUSH
22090: LD_INT 44
22092: ST_TO_ADDR
22093: GO 22096
22095: POP
// if Researched ( side , tech ) then
22096: LD_VAR 0 3
22100: PPUSH
22101: LD_VAR 0 5
22105: PPUSH
22106: CALL_OW 325
22110: IFFALSE 22137
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22112: LD_ADDR_VAR 0 2
22116: PUSH
22117: LD_INT 5
22119: PUSH
22120: LD_INT 8
22122: PUSH
22123: LD_INT 9
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: PUSH
22131: LD_VAR 0 4
22135: ARRAY
22136: ST_TO_ADDR
// end ;
22137: LD_VAR 0 2
22141: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22142: LD_INT 0
22144: PPUSH
22145: PPUSH
22146: PPUSH
// if not mines then
22147: LD_VAR 0 2
22151: NOT
22152: IFFALSE 22156
// exit ;
22154: GO 22300
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22156: LD_ADDR_VAR 0 5
22160: PUSH
22161: LD_INT 81
22163: PUSH
22164: LD_VAR 0 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 3
22175: PUSH
22176: LD_INT 21
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PPUSH
22194: CALL_OW 69
22198: ST_TO_ADDR
// for i in mines do
22199: LD_ADDR_VAR 0 4
22203: PUSH
22204: LD_VAR 0 2
22208: PUSH
22209: FOR_IN
22210: IFFALSE 22298
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22212: LD_VAR 0 4
22216: PUSH
22217: LD_INT 1
22219: ARRAY
22220: PPUSH
22221: LD_VAR 0 4
22225: PUSH
22226: LD_INT 2
22228: ARRAY
22229: PPUSH
22230: CALL_OW 458
22234: NOT
22235: IFFALSE 22239
// continue ;
22237: GO 22209
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22239: LD_VAR 0 4
22243: PUSH
22244: LD_INT 1
22246: ARRAY
22247: PPUSH
22248: LD_VAR 0 4
22252: PUSH
22253: LD_INT 2
22255: ARRAY
22256: PPUSH
22257: CALL_OW 428
22261: PUSH
22262: LD_VAR 0 5
22266: IN
22267: IFFALSE 22296
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22269: LD_VAR 0 4
22273: PUSH
22274: LD_INT 1
22276: ARRAY
22277: PPUSH
22278: LD_VAR 0 4
22282: PUSH
22283: LD_INT 2
22285: ARRAY
22286: PPUSH
22287: LD_VAR 0 1
22291: PPUSH
22292: CALL_OW 456
// end ;
22296: GO 22209
22298: POP
22299: POP
// end ;
22300: LD_VAR 0 3
22304: RET
// export function Count ( array ) ; var i ; begin
22305: LD_INT 0
22307: PPUSH
22308: PPUSH
// result := 0 ;
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 0
22316: ST_TO_ADDR
// for i in array do
22317: LD_ADDR_VAR 0 3
22321: PUSH
22322: LD_VAR 0 1
22326: PUSH
22327: FOR_IN
22328: IFFALSE 22352
// if i then
22330: LD_VAR 0 3
22334: IFFALSE 22350
// result := result + 1 ;
22336: LD_ADDR_VAR 0 2
22340: PUSH
22341: LD_VAR 0 2
22345: PUSH
22346: LD_INT 1
22348: PLUS
22349: ST_TO_ADDR
22350: GO 22327
22352: POP
22353: POP
// end ;
22354: LD_VAR 0 2
22358: RET
// export function IsEmpty ( building ) ; begin
22359: LD_INT 0
22361: PPUSH
// if not building then
22362: LD_VAR 0 1
22366: NOT
22367: IFFALSE 22371
// exit ;
22369: GO 22414
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22371: LD_ADDR_VAR 0 2
22375: PUSH
22376: LD_VAR 0 1
22380: PUSH
22381: LD_INT 22
22383: PUSH
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 255
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 58
22400: PUSH
22401: EMPTY
22402: LIST
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PPUSH
22408: CALL_OW 69
22412: IN
22413: ST_TO_ADDR
// end ;
22414: LD_VAR 0 2
22418: RET
// export function IsNotFull ( building ) ; begin
22419: LD_INT 0
22421: PPUSH
// if not building then
22422: LD_VAR 0 1
22426: NOT
22427: IFFALSE 22431
// exit ;
22429: GO 22450
// result := UnitsInside ( building ) < 6 ;
22431: LD_ADDR_VAR 0 2
22435: PUSH
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 313
22445: PUSH
22446: LD_INT 6
22448: LESS
22449: ST_TO_ADDR
// end ;
22450: LD_VAR 0 2
22454: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22455: LD_INT 0
22457: PPUSH
22458: PPUSH
22459: PPUSH
22460: PPUSH
// tmp := [ ] ;
22461: LD_ADDR_VAR 0 3
22465: PUSH
22466: EMPTY
22467: ST_TO_ADDR
// list := [ ] ;
22468: LD_ADDR_VAR 0 5
22472: PUSH
22473: EMPTY
22474: ST_TO_ADDR
// for i = 16 to 25 do
22475: LD_ADDR_VAR 0 4
22479: PUSH
22480: DOUBLE
22481: LD_INT 16
22483: DEC
22484: ST_TO_ADDR
22485: LD_INT 25
22487: PUSH
22488: FOR_TO
22489: IFFALSE 22562
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22491: LD_ADDR_VAR 0 3
22495: PUSH
22496: LD_VAR 0 3
22500: PUSH
22501: LD_INT 22
22503: PUSH
22504: LD_VAR 0 1
22508: PPUSH
22509: CALL_OW 255
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 91
22520: PUSH
22521: LD_VAR 0 1
22525: PUSH
22526: LD_INT 6
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 30
22536: PUSH
22537: LD_VAR 0 4
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: LIST
22550: PUSH
22551: EMPTY
22552: LIST
22553: PPUSH
22554: CALL_OW 69
22558: ADD
22559: ST_TO_ADDR
22560: GO 22488
22562: POP
22563: POP
// for i = 1 to tmp do
22564: LD_ADDR_VAR 0 4
22568: PUSH
22569: DOUBLE
22570: LD_INT 1
22572: DEC
22573: ST_TO_ADDR
22574: LD_VAR 0 3
22578: PUSH
22579: FOR_TO
22580: IFFALSE 22668
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22582: LD_ADDR_VAR 0 5
22586: PUSH
22587: LD_VAR 0 5
22591: PUSH
22592: LD_VAR 0 3
22596: PUSH
22597: LD_VAR 0 4
22601: ARRAY
22602: PPUSH
22603: CALL_OW 266
22607: PUSH
22608: LD_VAR 0 3
22612: PUSH
22613: LD_VAR 0 4
22617: ARRAY
22618: PPUSH
22619: CALL_OW 250
22623: PUSH
22624: LD_VAR 0 3
22628: PUSH
22629: LD_VAR 0 4
22633: ARRAY
22634: PPUSH
22635: CALL_OW 251
22639: PUSH
22640: LD_VAR 0 3
22644: PUSH
22645: LD_VAR 0 4
22649: ARRAY
22650: PPUSH
22651: CALL_OW 254
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: PUSH
22662: EMPTY
22663: LIST
22664: ADD
22665: ST_TO_ADDR
22666: GO 22579
22668: POP
22669: POP
// result := list ;
22670: LD_ADDR_VAR 0 2
22674: PUSH
22675: LD_VAR 0 5
22679: ST_TO_ADDR
// end ;
22680: LD_VAR 0 2
22684: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22685: LD_INT 0
22687: PPUSH
22688: PPUSH
22689: PPUSH
22690: PPUSH
22691: PPUSH
22692: PPUSH
22693: PPUSH
// if not factory then
22694: LD_VAR 0 1
22698: NOT
22699: IFFALSE 22703
// exit ;
22701: GO 23296
// if control = control_apeman then
22703: LD_VAR 0 4
22707: PUSH
22708: LD_INT 5
22710: EQUAL
22711: IFFALSE 22820
// begin tmp := UnitsInside ( factory ) ;
22713: LD_ADDR_VAR 0 8
22717: PUSH
22718: LD_VAR 0 1
22722: PPUSH
22723: CALL_OW 313
22727: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22728: LD_VAR 0 8
22732: PPUSH
22733: LD_INT 25
22735: PUSH
22736: LD_INT 12
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PPUSH
22743: CALL_OW 72
22747: NOT
22748: IFFALSE 22758
// control := control_manual ;
22750: LD_ADDR_VAR 0 4
22754: PUSH
22755: LD_INT 1
22757: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22758: LD_ADDR_VAR 0 8
22762: PUSH
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL 22455 0 1
22772: ST_TO_ADDR
// if tmp then
22773: LD_VAR 0 8
22777: IFFALSE 22820
// begin for i in tmp do
22779: LD_ADDR_VAR 0 7
22783: PUSH
22784: LD_VAR 0 8
22788: PUSH
22789: FOR_IN
22790: IFFALSE 22818
// if i [ 1 ] = b_ext_radio then
22792: LD_VAR 0 7
22796: PUSH
22797: LD_INT 1
22799: ARRAY
22800: PUSH
22801: LD_INT 22
22803: EQUAL
22804: IFFALSE 22816
// begin control := control_remote ;
22806: LD_ADDR_VAR 0 4
22810: PUSH
22811: LD_INT 2
22813: ST_TO_ADDR
// break ;
22814: GO 22818
// end ;
22816: GO 22789
22818: POP
22819: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22820: LD_VAR 0 1
22824: PPUSH
22825: LD_VAR 0 2
22829: PPUSH
22830: LD_VAR 0 3
22834: PPUSH
22835: LD_VAR 0 4
22839: PPUSH
22840: LD_VAR 0 5
22844: PPUSH
22845: CALL_OW 448
22849: IFFALSE 22884
// begin result := [ chassis , engine , control , weapon ] ;
22851: LD_ADDR_VAR 0 6
22855: PUSH
22856: LD_VAR 0 2
22860: PUSH
22861: LD_VAR 0 3
22865: PUSH
22866: LD_VAR 0 4
22870: PUSH
22871: LD_VAR 0 5
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
// exit ;
22882: GO 23296
// end ; _chassis := AvailableChassisList ( factory ) ;
22884: LD_ADDR_VAR 0 9
22888: PUSH
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL_OW 475
22898: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22899: LD_ADDR_VAR 0 11
22903: PUSH
22904: LD_VAR 0 1
22908: PPUSH
22909: CALL_OW 476
22913: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22914: LD_ADDR_VAR 0 12
22918: PUSH
22919: LD_VAR 0 1
22923: PPUSH
22924: CALL_OW 477
22928: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22929: LD_ADDR_VAR 0 10
22933: PUSH
22934: LD_VAR 0 1
22938: PPUSH
22939: CALL_OW 478
22943: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22944: LD_VAR 0 9
22948: NOT
22949: PUSH
22950: LD_VAR 0 11
22954: NOT
22955: OR
22956: PUSH
22957: LD_VAR 0 12
22961: NOT
22962: OR
22963: PUSH
22964: LD_VAR 0 10
22968: NOT
22969: OR
22970: IFFALSE 23005
// begin result := [ chassis , engine , control , weapon ] ;
22972: LD_ADDR_VAR 0 6
22976: PUSH
22977: LD_VAR 0 2
22981: PUSH
22982: LD_VAR 0 3
22986: PUSH
22987: LD_VAR 0 4
22991: PUSH
22992: LD_VAR 0 5
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: ST_TO_ADDR
// exit ;
23003: GO 23296
// end ; if not chassis in _chassis then
23005: LD_VAR 0 2
23009: PUSH
23010: LD_VAR 0 9
23014: IN
23015: NOT
23016: IFFALSE 23042
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23018: LD_ADDR_VAR 0 2
23022: PUSH
23023: LD_VAR 0 9
23027: PUSH
23028: LD_INT 1
23030: PPUSH
23031: LD_VAR 0 9
23035: PPUSH
23036: CALL_OW 12
23040: ARRAY
23041: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23042: LD_VAR 0 2
23046: PPUSH
23047: LD_VAR 0 3
23051: PPUSH
23052: CALL 23301 0 2
23056: NOT
23057: IFFALSE 23116
// repeat engine := _engine [ 1 ] ;
23059: LD_ADDR_VAR 0 3
23063: PUSH
23064: LD_VAR 0 11
23068: PUSH
23069: LD_INT 1
23071: ARRAY
23072: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23073: LD_ADDR_VAR 0 11
23077: PUSH
23078: LD_VAR 0 11
23082: PPUSH
23083: LD_INT 1
23085: PPUSH
23086: CALL_OW 3
23090: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23091: LD_VAR 0 2
23095: PPUSH
23096: LD_VAR 0 3
23100: PPUSH
23101: CALL 23301 0 2
23105: PUSH
23106: LD_VAR 0 11
23110: PUSH
23111: EMPTY
23112: EQUAL
23113: OR
23114: IFFALSE 23059
// if not control in _control then
23116: LD_VAR 0 4
23120: PUSH
23121: LD_VAR 0 12
23125: IN
23126: NOT
23127: IFFALSE 23153
// control := _control [ rand ( 1 , _control ) ] ;
23129: LD_ADDR_VAR 0 4
23133: PUSH
23134: LD_VAR 0 12
23138: PUSH
23139: LD_INT 1
23141: PPUSH
23142: LD_VAR 0 12
23146: PPUSH
23147: CALL_OW 12
23151: ARRAY
23152: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23153: LD_VAR 0 2
23157: PPUSH
23158: LD_VAR 0 5
23162: PPUSH
23163: CALL 23521 0 2
23167: NOT
23168: IFFALSE 23227
// repeat weapon := _weapon [ 1 ] ;
23170: LD_ADDR_VAR 0 5
23174: PUSH
23175: LD_VAR 0 10
23179: PUSH
23180: LD_INT 1
23182: ARRAY
23183: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23184: LD_ADDR_VAR 0 10
23188: PUSH
23189: LD_VAR 0 10
23193: PPUSH
23194: LD_INT 1
23196: PPUSH
23197: CALL_OW 3
23201: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23202: LD_VAR 0 2
23206: PPUSH
23207: LD_VAR 0 5
23211: PPUSH
23212: CALL 23521 0 2
23216: PUSH
23217: LD_VAR 0 10
23221: PUSH
23222: EMPTY
23223: EQUAL
23224: OR
23225: IFFALSE 23170
// result := [ ] ;
23227: LD_ADDR_VAR 0 6
23231: PUSH
23232: EMPTY
23233: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23234: LD_VAR 0 1
23238: PPUSH
23239: LD_VAR 0 2
23243: PPUSH
23244: LD_VAR 0 3
23248: PPUSH
23249: LD_VAR 0 4
23253: PPUSH
23254: LD_VAR 0 5
23258: PPUSH
23259: CALL_OW 448
23263: IFFALSE 23296
// result := [ chassis , engine , control , weapon ] ;
23265: LD_ADDR_VAR 0 6
23269: PUSH
23270: LD_VAR 0 2
23274: PUSH
23275: LD_VAR 0 3
23279: PUSH
23280: LD_VAR 0 4
23284: PUSH
23285: LD_VAR 0 5
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: ST_TO_ADDR
// end ;
23296: LD_VAR 0 6
23300: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23301: LD_INT 0
23303: PPUSH
// if not chassis or not engine then
23304: LD_VAR 0 1
23308: NOT
23309: PUSH
23310: LD_VAR 0 2
23314: NOT
23315: OR
23316: IFFALSE 23320
// exit ;
23318: GO 23516
// case engine of engine_solar :
23320: LD_VAR 0 2
23324: PUSH
23325: LD_INT 2
23327: DOUBLE
23328: EQUAL
23329: IFTRUE 23333
23331: GO 23371
23333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23334: LD_ADDR_VAR 0 3
23338: PUSH
23339: LD_INT 11
23341: PUSH
23342: LD_INT 12
23344: PUSH
23345: LD_INT 13
23347: PUSH
23348: LD_INT 14
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: LD_INT 3
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: ST_TO_ADDR
23369: GO 23500
23371: LD_INT 1
23373: DOUBLE
23374: EQUAL
23375: IFTRUE 23379
23377: GO 23441
23379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23380: LD_ADDR_VAR 0 3
23384: PUSH
23385: LD_INT 11
23387: PUSH
23388: LD_INT 12
23390: PUSH
23391: LD_INT 13
23393: PUSH
23394: LD_INT 14
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: LD_INT 3
23405: PUSH
23406: LD_INT 4
23408: PUSH
23409: LD_INT 5
23411: PUSH
23412: LD_INT 21
23414: PUSH
23415: LD_INT 23
23417: PUSH
23418: LD_INT 22
23420: PUSH
23421: LD_INT 24
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: ST_TO_ADDR
23439: GO 23500
23441: LD_INT 3
23443: DOUBLE
23444: EQUAL
23445: IFTRUE 23449
23447: GO 23499
23449: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23450: LD_ADDR_VAR 0 3
23454: PUSH
23455: LD_INT 13
23457: PUSH
23458: LD_INT 14
23460: PUSH
23461: LD_INT 2
23463: PUSH
23464: LD_INT 3
23466: PUSH
23467: LD_INT 4
23469: PUSH
23470: LD_INT 5
23472: PUSH
23473: LD_INT 21
23475: PUSH
23476: LD_INT 22
23478: PUSH
23479: LD_INT 23
23481: PUSH
23482: LD_INT 24
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: ST_TO_ADDR
23497: GO 23500
23499: POP
// result := ( chassis in result ) ;
23500: LD_ADDR_VAR 0 3
23504: PUSH
23505: LD_VAR 0 1
23509: PUSH
23510: LD_VAR 0 3
23514: IN
23515: ST_TO_ADDR
// end ;
23516: LD_VAR 0 3
23520: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23521: LD_INT 0
23523: PPUSH
// if not chassis or not weapon then
23524: LD_VAR 0 1
23528: NOT
23529: PUSH
23530: LD_VAR 0 2
23534: NOT
23535: OR
23536: IFFALSE 23540
// exit ;
23538: GO 24566
// case weapon of us_machine_gun :
23540: LD_VAR 0 2
23544: PUSH
23545: LD_INT 2
23547: DOUBLE
23548: EQUAL
23549: IFTRUE 23553
23551: GO 23583
23553: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23554: LD_ADDR_VAR 0 3
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: LD_INT 4
23570: PUSH
23571: LD_INT 5
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: ST_TO_ADDR
23581: GO 24550
23583: LD_INT 3
23585: DOUBLE
23586: EQUAL
23587: IFTRUE 23591
23589: GO 23621
23591: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23592: LD_ADDR_VAR 0 3
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: LD_INT 3
23605: PUSH
23606: LD_INT 4
23608: PUSH
23609: LD_INT 5
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
23619: GO 24550
23621: LD_INT 11
23623: DOUBLE
23624: EQUAL
23625: IFTRUE 23629
23627: GO 23659
23629: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23630: LD_ADDR_VAR 0 3
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 3
23643: PUSH
23644: LD_INT 4
23646: PUSH
23647: LD_INT 5
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: ST_TO_ADDR
23657: GO 24550
23659: LD_INT 4
23661: DOUBLE
23662: EQUAL
23663: IFTRUE 23667
23665: GO 23693
23667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23668: LD_ADDR_VAR 0 3
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 3
23678: PUSH
23679: LD_INT 4
23681: PUSH
23682: LD_INT 5
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: ST_TO_ADDR
23691: GO 24550
23693: LD_INT 5
23695: DOUBLE
23696: EQUAL
23697: IFTRUE 23701
23699: GO 23727
23701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23702: LD_ADDR_VAR 0 3
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 3
23712: PUSH
23713: LD_INT 4
23715: PUSH
23716: LD_INT 5
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: ST_TO_ADDR
23725: GO 24550
23727: LD_INT 9
23729: DOUBLE
23730: EQUAL
23731: IFTRUE 23735
23733: GO 23761
23735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23736: LD_ADDR_VAR 0 3
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: LD_INT 3
23746: PUSH
23747: LD_INT 4
23749: PUSH
23750: LD_INT 5
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: ST_TO_ADDR
23759: GO 24550
23761: LD_INT 7
23763: DOUBLE
23764: EQUAL
23765: IFTRUE 23769
23767: GO 23795
23769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23770: LD_ADDR_VAR 0 3
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 3
23780: PUSH
23781: LD_INT 4
23783: PUSH
23784: LD_INT 5
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: ST_TO_ADDR
23793: GO 24550
23795: LD_INT 12
23797: DOUBLE
23798: EQUAL
23799: IFTRUE 23803
23801: GO 23829
23803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23804: LD_ADDR_VAR 0 3
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: LD_INT 3
23814: PUSH
23815: LD_INT 4
23817: PUSH
23818: LD_INT 5
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: ST_TO_ADDR
23827: GO 24550
23829: LD_INT 13
23831: DOUBLE
23832: EQUAL
23833: IFTRUE 23837
23835: GO 23863
23837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23838: LD_ADDR_VAR 0 3
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: LD_INT 4
23851: PUSH
23852: LD_INT 5
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: ST_TO_ADDR
23861: GO 24550
23863: LD_INT 14
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23871
23869: GO 23889
23871: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23872: LD_ADDR_VAR 0 3
23876: PUSH
23877: LD_INT 4
23879: PUSH
23880: LD_INT 5
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: ST_TO_ADDR
23887: GO 24550
23889: LD_INT 6
23891: DOUBLE
23892: EQUAL
23893: IFTRUE 23897
23895: GO 23915
23897: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23898: LD_ADDR_VAR 0 3
23902: PUSH
23903: LD_INT 4
23905: PUSH
23906: LD_INT 5
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: ST_TO_ADDR
23913: GO 24550
23915: LD_INT 10
23917: DOUBLE
23918: EQUAL
23919: IFTRUE 23923
23921: GO 23941
23923: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23924: LD_ADDR_VAR 0 3
23928: PUSH
23929: LD_INT 4
23931: PUSH
23932: LD_INT 5
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: ST_TO_ADDR
23939: GO 24550
23941: LD_INT 22
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 23975
23949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23950: LD_ADDR_VAR 0 3
23954: PUSH
23955: LD_INT 11
23957: PUSH
23958: LD_INT 12
23960: PUSH
23961: LD_INT 13
23963: PUSH
23964: LD_INT 14
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: ST_TO_ADDR
23973: GO 24550
23975: LD_INT 23
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23983
23981: GO 24009
23983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23984: LD_ADDR_VAR 0 3
23988: PUSH
23989: LD_INT 11
23991: PUSH
23992: LD_INT 12
23994: PUSH
23995: LD_INT 13
23997: PUSH
23998: LD_INT 14
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: ST_TO_ADDR
24007: GO 24550
24009: LD_INT 24
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24043
24017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24018: LD_ADDR_VAR 0 3
24022: PUSH
24023: LD_INT 11
24025: PUSH
24026: LD_INT 12
24028: PUSH
24029: LD_INT 13
24031: PUSH
24032: LD_INT 14
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: ST_TO_ADDR
24041: GO 24550
24043: LD_INT 30
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 24077
24051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24052: LD_ADDR_VAR 0 3
24056: PUSH
24057: LD_INT 11
24059: PUSH
24060: LD_INT 12
24062: PUSH
24063: LD_INT 13
24065: PUSH
24066: LD_INT 14
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: ST_TO_ADDR
24075: GO 24550
24077: LD_INT 25
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24103
24085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24086: LD_ADDR_VAR 0 3
24090: PUSH
24091: LD_INT 13
24093: PUSH
24094: LD_INT 14
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: ST_TO_ADDR
24101: GO 24550
24103: LD_INT 27
24105: DOUBLE
24106: EQUAL
24107: IFTRUE 24111
24109: GO 24129
24111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24112: LD_ADDR_VAR 0 3
24116: PUSH
24117: LD_INT 13
24119: PUSH
24120: LD_INT 14
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: ST_TO_ADDR
24127: GO 24550
24129: LD_INT 28
24131: DOUBLE
24132: EQUAL
24133: IFTRUE 24137
24135: GO 24155
24137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24138: LD_ADDR_VAR 0 3
24142: PUSH
24143: LD_INT 13
24145: PUSH
24146: LD_INT 14
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: ST_TO_ADDR
24153: GO 24550
24155: LD_INT 29
24157: DOUBLE
24158: EQUAL
24159: IFTRUE 24163
24161: GO 24181
24163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24164: LD_ADDR_VAR 0 3
24168: PUSH
24169: LD_INT 13
24171: PUSH
24172: LD_INT 14
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: ST_TO_ADDR
24179: GO 24550
24181: LD_INT 31
24183: DOUBLE
24184: EQUAL
24185: IFTRUE 24189
24187: GO 24207
24189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24190: LD_ADDR_VAR 0 3
24194: PUSH
24195: LD_INT 13
24197: PUSH
24198: LD_INT 14
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: ST_TO_ADDR
24205: GO 24550
24207: LD_INT 26
24209: DOUBLE
24210: EQUAL
24211: IFTRUE 24215
24213: GO 24233
24215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: LD_INT 13
24223: PUSH
24224: LD_INT 14
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: ST_TO_ADDR
24231: GO 24550
24233: LD_INT 42
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24267
24241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24242: LD_ADDR_VAR 0 3
24246: PUSH
24247: LD_INT 21
24249: PUSH
24250: LD_INT 22
24252: PUSH
24253: LD_INT 23
24255: PUSH
24256: LD_INT 24
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: ST_TO_ADDR
24265: GO 24550
24267: LD_INT 43
24269: DOUBLE
24270: EQUAL
24271: IFTRUE 24275
24273: GO 24301
24275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24276: LD_ADDR_VAR 0 3
24280: PUSH
24281: LD_INT 21
24283: PUSH
24284: LD_INT 22
24286: PUSH
24287: LD_INT 23
24289: PUSH
24290: LD_INT 24
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: ST_TO_ADDR
24299: GO 24550
24301: LD_INT 44
24303: DOUBLE
24304: EQUAL
24305: IFTRUE 24309
24307: GO 24335
24309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24310: LD_ADDR_VAR 0 3
24314: PUSH
24315: LD_INT 21
24317: PUSH
24318: LD_INT 22
24320: PUSH
24321: LD_INT 23
24323: PUSH
24324: LD_INT 24
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: ST_TO_ADDR
24333: GO 24550
24335: LD_INT 45
24337: DOUBLE
24338: EQUAL
24339: IFTRUE 24343
24341: GO 24369
24343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24344: LD_ADDR_VAR 0 3
24348: PUSH
24349: LD_INT 21
24351: PUSH
24352: LD_INT 22
24354: PUSH
24355: LD_INT 23
24357: PUSH
24358: LD_INT 24
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: ST_TO_ADDR
24367: GO 24550
24369: LD_INT 49
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24403
24377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24378: LD_ADDR_VAR 0 3
24382: PUSH
24383: LD_INT 21
24385: PUSH
24386: LD_INT 22
24388: PUSH
24389: LD_INT 23
24391: PUSH
24392: LD_INT 24
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: ST_TO_ADDR
24401: GO 24550
24403: LD_INT 51
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24411
24409: GO 24437
24411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24412: LD_ADDR_VAR 0 3
24416: PUSH
24417: LD_INT 21
24419: PUSH
24420: LD_INT 22
24422: PUSH
24423: LD_INT 23
24425: PUSH
24426: LD_INT 24
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: ST_TO_ADDR
24435: GO 24550
24437: LD_INT 52
24439: DOUBLE
24440: EQUAL
24441: IFTRUE 24445
24443: GO 24471
24445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24446: LD_ADDR_VAR 0 3
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 24
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: ST_TO_ADDR
24469: GO 24550
24471: LD_INT 53
24473: DOUBLE
24474: EQUAL
24475: IFTRUE 24479
24477: GO 24497
24479: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24480: LD_ADDR_VAR 0 3
24484: PUSH
24485: LD_INT 23
24487: PUSH
24488: LD_INT 24
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: ST_TO_ADDR
24495: GO 24550
24497: LD_INT 46
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24523
24505: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24506: LD_ADDR_VAR 0 3
24510: PUSH
24511: LD_INT 23
24513: PUSH
24514: LD_INT 24
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: ST_TO_ADDR
24521: GO 24550
24523: LD_INT 47
24525: DOUBLE
24526: EQUAL
24527: IFTRUE 24531
24529: GO 24549
24531: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24532: LD_ADDR_VAR 0 3
24536: PUSH
24537: LD_INT 23
24539: PUSH
24540: LD_INT 24
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: ST_TO_ADDR
24547: GO 24550
24549: POP
// result := ( chassis in result ) ;
24550: LD_ADDR_VAR 0 3
24554: PUSH
24555: LD_VAR 0 1
24559: PUSH
24560: LD_VAR 0 3
24564: IN
24565: ST_TO_ADDR
// end ;
24566: LD_VAR 0 3
24570: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24571: LD_INT 0
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
24579: PPUSH
// result := array ;
24580: LD_ADDR_VAR 0 5
24584: PUSH
24585: LD_VAR 0 1
24589: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24590: LD_VAR 0 1
24594: NOT
24595: PUSH
24596: LD_VAR 0 2
24600: NOT
24601: OR
24602: PUSH
24603: LD_VAR 0 3
24607: NOT
24608: OR
24609: PUSH
24610: LD_VAR 0 2
24614: PUSH
24615: LD_VAR 0 1
24619: GREATER
24620: OR
24621: PUSH
24622: LD_VAR 0 3
24626: PUSH
24627: LD_VAR 0 1
24631: GREATER
24632: OR
24633: IFFALSE 24637
// exit ;
24635: GO 24933
// if direction then
24637: LD_VAR 0 4
24641: IFFALSE 24705
// begin d := 1 ;
24643: LD_ADDR_VAR 0 9
24647: PUSH
24648: LD_INT 1
24650: ST_TO_ADDR
// if i_from > i_to then
24651: LD_VAR 0 2
24655: PUSH
24656: LD_VAR 0 3
24660: GREATER
24661: IFFALSE 24687
// length := ( array - i_from ) + i_to else
24663: LD_ADDR_VAR 0 11
24667: PUSH
24668: LD_VAR 0 1
24672: PUSH
24673: LD_VAR 0 2
24677: MINUS
24678: PUSH
24679: LD_VAR 0 3
24683: PLUS
24684: ST_TO_ADDR
24685: GO 24703
// length := i_to - i_from ;
24687: LD_ADDR_VAR 0 11
24691: PUSH
24692: LD_VAR 0 3
24696: PUSH
24697: LD_VAR 0 2
24701: MINUS
24702: ST_TO_ADDR
// end else
24703: GO 24766
// begin d := - 1 ;
24705: LD_ADDR_VAR 0 9
24709: PUSH
24710: LD_INT 1
24712: NEG
24713: ST_TO_ADDR
// if i_from > i_to then
24714: LD_VAR 0 2
24718: PUSH
24719: LD_VAR 0 3
24723: GREATER
24724: IFFALSE 24744
// length := i_from - i_to else
24726: LD_ADDR_VAR 0 11
24730: PUSH
24731: LD_VAR 0 2
24735: PUSH
24736: LD_VAR 0 3
24740: MINUS
24741: ST_TO_ADDR
24742: GO 24766
// length := ( array - i_to ) + i_from ;
24744: LD_ADDR_VAR 0 11
24748: PUSH
24749: LD_VAR 0 1
24753: PUSH
24754: LD_VAR 0 3
24758: MINUS
24759: PUSH
24760: LD_VAR 0 2
24764: PLUS
24765: ST_TO_ADDR
// end ; if not length then
24766: LD_VAR 0 11
24770: NOT
24771: IFFALSE 24775
// exit ;
24773: GO 24933
// tmp := array ;
24775: LD_ADDR_VAR 0 10
24779: PUSH
24780: LD_VAR 0 1
24784: ST_TO_ADDR
// for i = 1 to length do
24785: LD_ADDR_VAR 0 6
24789: PUSH
24790: DOUBLE
24791: LD_INT 1
24793: DEC
24794: ST_TO_ADDR
24795: LD_VAR 0 11
24799: PUSH
24800: FOR_TO
24801: IFFALSE 24921
// begin for j = 1 to array do
24803: LD_ADDR_VAR 0 7
24807: PUSH
24808: DOUBLE
24809: LD_INT 1
24811: DEC
24812: ST_TO_ADDR
24813: LD_VAR 0 1
24817: PUSH
24818: FOR_TO
24819: IFFALSE 24907
// begin k := j + d ;
24821: LD_ADDR_VAR 0 8
24825: PUSH
24826: LD_VAR 0 7
24830: PUSH
24831: LD_VAR 0 9
24835: PLUS
24836: ST_TO_ADDR
// if k > array then
24837: LD_VAR 0 8
24841: PUSH
24842: LD_VAR 0 1
24846: GREATER
24847: IFFALSE 24857
// k := 1 ;
24849: LD_ADDR_VAR 0 8
24853: PUSH
24854: LD_INT 1
24856: ST_TO_ADDR
// if not k then
24857: LD_VAR 0 8
24861: NOT
24862: IFFALSE 24874
// k := array ;
24864: LD_ADDR_VAR 0 8
24868: PUSH
24869: LD_VAR 0 1
24873: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24874: LD_ADDR_VAR 0 10
24878: PUSH
24879: LD_VAR 0 10
24883: PPUSH
24884: LD_VAR 0 8
24888: PPUSH
24889: LD_VAR 0 1
24893: PUSH
24894: LD_VAR 0 7
24898: ARRAY
24899: PPUSH
24900: CALL_OW 1
24904: ST_TO_ADDR
// end ;
24905: GO 24818
24907: POP
24908: POP
// array := tmp ;
24909: LD_ADDR_VAR 0 1
24913: PUSH
24914: LD_VAR 0 10
24918: ST_TO_ADDR
// end ;
24919: GO 24800
24921: POP
24922: POP
// result := array ;
24923: LD_ADDR_VAR 0 5
24927: PUSH
24928: LD_VAR 0 1
24932: ST_TO_ADDR
// end ;
24933: LD_VAR 0 5
24937: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24938: LD_INT 0
24940: PPUSH
24941: PPUSH
// result := 0 ;
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_INT 0
24949: ST_TO_ADDR
// if not array or not value in array then
24950: LD_VAR 0 1
24954: NOT
24955: PUSH
24956: LD_VAR 0 2
24960: PUSH
24961: LD_VAR 0 1
24965: IN
24966: NOT
24967: OR
24968: IFFALSE 24972
// exit ;
24970: GO 25026
// for i = 1 to array do
24972: LD_ADDR_VAR 0 4
24976: PUSH
24977: DOUBLE
24978: LD_INT 1
24980: DEC
24981: ST_TO_ADDR
24982: LD_VAR 0 1
24986: PUSH
24987: FOR_TO
24988: IFFALSE 25024
// if value = array [ i ] then
24990: LD_VAR 0 2
24994: PUSH
24995: LD_VAR 0 1
24999: PUSH
25000: LD_VAR 0 4
25004: ARRAY
25005: EQUAL
25006: IFFALSE 25022
// begin result := i ;
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_VAR 0 4
25017: ST_TO_ADDR
// exit ;
25018: POP
25019: POP
25020: GO 25026
// end ;
25022: GO 24987
25024: POP
25025: POP
// end ;
25026: LD_VAR 0 3
25030: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25031: LD_INT 0
25033: PPUSH
// vc_chassis := chassis ;
25034: LD_ADDR_OWVAR 37
25038: PUSH
25039: LD_VAR 0 1
25043: ST_TO_ADDR
// vc_engine := engine ;
25044: LD_ADDR_OWVAR 39
25048: PUSH
25049: LD_VAR 0 2
25053: ST_TO_ADDR
// vc_control := control ;
25054: LD_ADDR_OWVAR 38
25058: PUSH
25059: LD_VAR 0 3
25063: ST_TO_ADDR
// vc_weapon := weapon ;
25064: LD_ADDR_OWVAR 40
25068: PUSH
25069: LD_VAR 0 4
25073: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25074: LD_ADDR_OWVAR 41
25078: PUSH
25079: LD_VAR 0 5
25083: ST_TO_ADDR
// end ;
25084: LD_VAR 0 6
25088: RET
// export function WantPlant ( unit ) ; var task ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
// result := false ;
25093: LD_ADDR_VAR 0 2
25097: PUSH
25098: LD_INT 0
25100: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_VAR 0 1
25110: PPUSH
25111: CALL_OW 437
25115: ST_TO_ADDR
// if task then
25116: LD_VAR 0 3
25120: IFFALSE 25148
// if task [ 1 ] [ 1 ] = p then
25122: LD_VAR 0 3
25126: PUSH
25127: LD_INT 1
25129: ARRAY
25130: PUSH
25131: LD_INT 1
25133: ARRAY
25134: PUSH
25135: LD_STRING p
25137: EQUAL
25138: IFFALSE 25148
// result := true ;
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_INT 1
25147: ST_TO_ADDR
// end ;
25148: LD_VAR 0 2
25152: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
// if pos < 1 then
25159: LD_VAR 0 2
25163: PUSH
25164: LD_INT 1
25166: LESS
25167: IFFALSE 25171
// exit ;
25169: GO 25474
// if pos = 1 then
25171: LD_VAR 0 2
25175: PUSH
25176: LD_INT 1
25178: EQUAL
25179: IFFALSE 25212
// result := Replace ( arr , pos [ 1 ] , value ) else
25181: LD_ADDR_VAR 0 4
25185: PUSH
25186: LD_VAR 0 1
25190: PPUSH
25191: LD_VAR 0 2
25195: PUSH
25196: LD_INT 1
25198: ARRAY
25199: PPUSH
25200: LD_VAR 0 3
25204: PPUSH
25205: CALL_OW 1
25209: ST_TO_ADDR
25210: GO 25474
// begin tmp := arr ;
25212: LD_ADDR_VAR 0 6
25216: PUSH
25217: LD_VAR 0 1
25221: ST_TO_ADDR
// s_arr := [ tmp ] ;
25222: LD_ADDR_VAR 0 7
25226: PUSH
25227: LD_VAR 0 6
25231: PUSH
25232: EMPTY
25233: LIST
25234: ST_TO_ADDR
// for i = 1 to pos - 1 do
25235: LD_ADDR_VAR 0 5
25239: PUSH
25240: DOUBLE
25241: LD_INT 1
25243: DEC
25244: ST_TO_ADDR
25245: LD_VAR 0 2
25249: PUSH
25250: LD_INT 1
25252: MINUS
25253: PUSH
25254: FOR_TO
25255: IFFALSE 25300
// begin tmp := tmp [ pos [ i ] ] ;
25257: LD_ADDR_VAR 0 6
25261: PUSH
25262: LD_VAR 0 6
25266: PUSH
25267: LD_VAR 0 2
25271: PUSH
25272: LD_VAR 0 5
25276: ARRAY
25277: ARRAY
25278: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25279: LD_ADDR_VAR 0 7
25283: PUSH
25284: LD_VAR 0 7
25288: PUSH
25289: LD_VAR 0 6
25293: PUSH
25294: EMPTY
25295: LIST
25296: ADD
25297: ST_TO_ADDR
// end ;
25298: GO 25254
25300: POP
25301: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25302: LD_ADDR_VAR 0 6
25306: PUSH
25307: LD_VAR 0 6
25311: PPUSH
25312: LD_VAR 0 2
25316: PUSH
25317: LD_VAR 0 2
25321: ARRAY
25322: PPUSH
25323: LD_VAR 0 3
25327: PPUSH
25328: CALL_OW 1
25332: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25333: LD_ADDR_VAR 0 7
25337: PUSH
25338: LD_VAR 0 7
25342: PPUSH
25343: LD_VAR 0 7
25347: PPUSH
25348: LD_VAR 0 6
25352: PPUSH
25353: CALL_OW 1
25357: ST_TO_ADDR
// for i = s_arr downto 2 do
25358: LD_ADDR_VAR 0 5
25362: PUSH
25363: DOUBLE
25364: LD_VAR 0 7
25368: INC
25369: ST_TO_ADDR
25370: LD_INT 2
25372: PUSH
25373: FOR_DOWNTO
25374: IFFALSE 25458
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25376: LD_ADDR_VAR 0 6
25380: PUSH
25381: LD_VAR 0 7
25385: PUSH
25386: LD_VAR 0 5
25390: PUSH
25391: LD_INT 1
25393: MINUS
25394: ARRAY
25395: PPUSH
25396: LD_VAR 0 2
25400: PUSH
25401: LD_VAR 0 5
25405: PUSH
25406: LD_INT 1
25408: MINUS
25409: ARRAY
25410: PPUSH
25411: LD_VAR 0 7
25415: PUSH
25416: LD_VAR 0 5
25420: ARRAY
25421: PPUSH
25422: CALL_OW 1
25426: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25427: LD_ADDR_VAR 0 7
25431: PUSH
25432: LD_VAR 0 7
25436: PPUSH
25437: LD_VAR 0 5
25441: PUSH
25442: LD_INT 1
25444: MINUS
25445: PPUSH
25446: LD_VAR 0 6
25450: PPUSH
25451: CALL_OW 1
25455: ST_TO_ADDR
// end ;
25456: GO 25373
25458: POP
25459: POP
// result := s_arr [ 1 ] ;
25460: LD_ADDR_VAR 0 4
25464: PUSH
25465: LD_VAR 0 7
25469: PUSH
25470: LD_INT 1
25472: ARRAY
25473: ST_TO_ADDR
// end ; end ;
25474: LD_VAR 0 4
25478: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25479: LD_INT 0
25481: PPUSH
25482: PPUSH
// if not list then
25483: LD_VAR 0 1
25487: NOT
25488: IFFALSE 25492
// exit ;
25490: GO 25583
// i := list [ pos1 ] ;
25492: LD_ADDR_VAR 0 5
25496: PUSH
25497: LD_VAR 0 1
25501: PUSH
25502: LD_VAR 0 2
25506: ARRAY
25507: ST_TO_ADDR
// if not i then
25508: LD_VAR 0 5
25512: NOT
25513: IFFALSE 25517
// exit ;
25515: GO 25583
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25517: LD_ADDR_VAR 0 1
25521: PUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: LD_VAR 0 2
25531: PPUSH
25532: LD_VAR 0 1
25536: PUSH
25537: LD_VAR 0 3
25541: ARRAY
25542: PPUSH
25543: CALL_OW 1
25547: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25548: LD_ADDR_VAR 0 1
25552: PUSH
25553: LD_VAR 0 1
25557: PPUSH
25558: LD_VAR 0 3
25562: PPUSH
25563: LD_VAR 0 5
25567: PPUSH
25568: CALL_OW 1
25572: ST_TO_ADDR
// result := list ;
25573: LD_ADDR_VAR 0 4
25577: PUSH
25578: LD_VAR 0 1
25582: ST_TO_ADDR
// end ;
25583: LD_VAR 0 4
25587: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25588: LD_INT 0
25590: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25591: LD_ADDR_VAR 0 5
25595: PUSH
25596: LD_VAR 0 1
25600: PPUSH
25601: CALL_OW 250
25605: PPUSH
25606: LD_VAR 0 1
25610: PPUSH
25611: CALL_OW 251
25615: PPUSH
25616: LD_VAR 0 2
25620: PPUSH
25621: LD_VAR 0 3
25625: PPUSH
25626: LD_VAR 0 4
25630: PPUSH
25631: CALL 25641 0 5
25635: ST_TO_ADDR
// end ;
25636: LD_VAR 0 5
25640: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25641: LD_INT 0
25643: PPUSH
25644: PPUSH
25645: PPUSH
25646: PPUSH
// if not list then
25647: LD_VAR 0 3
25651: NOT
25652: IFFALSE 25656
// exit ;
25654: GO 26044
// result := [ ] ;
25656: LD_ADDR_VAR 0 6
25660: PUSH
25661: EMPTY
25662: ST_TO_ADDR
// for i in list do
25663: LD_ADDR_VAR 0 7
25667: PUSH
25668: LD_VAR 0 3
25672: PUSH
25673: FOR_IN
25674: IFFALSE 25876
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25676: LD_ADDR_VAR 0 9
25680: PUSH
25681: LD_VAR 0 7
25685: PPUSH
25686: LD_VAR 0 1
25690: PPUSH
25691: LD_VAR 0 2
25695: PPUSH
25696: CALL_OW 297
25700: ST_TO_ADDR
// if not result then
25701: LD_VAR 0 6
25705: NOT
25706: IFFALSE 25732
// result := [ [ i , tmp ] ] else
25708: LD_ADDR_VAR 0 6
25712: PUSH
25713: LD_VAR 0 7
25717: PUSH
25718: LD_VAR 0 9
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: EMPTY
25728: LIST
25729: ST_TO_ADDR
25730: GO 25874
// begin if result [ result ] [ 2 ] < tmp then
25732: LD_VAR 0 6
25736: PUSH
25737: LD_VAR 0 6
25741: ARRAY
25742: PUSH
25743: LD_INT 2
25745: ARRAY
25746: PUSH
25747: LD_VAR 0 9
25751: LESS
25752: IFFALSE 25794
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25754: LD_ADDR_VAR 0 6
25758: PUSH
25759: LD_VAR 0 6
25763: PPUSH
25764: LD_VAR 0 6
25768: PUSH
25769: LD_INT 1
25771: PLUS
25772: PPUSH
25773: LD_VAR 0 7
25777: PUSH
25778: LD_VAR 0 9
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PPUSH
25787: CALL_OW 2
25791: ST_TO_ADDR
25792: GO 25874
// for j = 1 to result do
25794: LD_ADDR_VAR 0 8
25798: PUSH
25799: DOUBLE
25800: LD_INT 1
25802: DEC
25803: ST_TO_ADDR
25804: LD_VAR 0 6
25808: PUSH
25809: FOR_TO
25810: IFFALSE 25872
// begin if tmp < result [ j ] [ 2 ] then
25812: LD_VAR 0 9
25816: PUSH
25817: LD_VAR 0 6
25821: PUSH
25822: LD_VAR 0 8
25826: ARRAY
25827: PUSH
25828: LD_INT 2
25830: ARRAY
25831: LESS
25832: IFFALSE 25870
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25834: LD_ADDR_VAR 0 6
25838: PUSH
25839: LD_VAR 0 6
25843: PPUSH
25844: LD_VAR 0 8
25848: PPUSH
25849: LD_VAR 0 7
25853: PUSH
25854: LD_VAR 0 9
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 2
25867: ST_TO_ADDR
// break ;
25868: GO 25872
// end ; end ;
25870: GO 25809
25872: POP
25873: POP
// end ; end ;
25874: GO 25673
25876: POP
25877: POP
// if result and not asc then
25878: LD_VAR 0 6
25882: PUSH
25883: LD_VAR 0 4
25887: NOT
25888: AND
25889: IFFALSE 25964
// begin tmp := result ;
25891: LD_ADDR_VAR 0 9
25895: PUSH
25896: LD_VAR 0 6
25900: ST_TO_ADDR
// for i = tmp downto 1 do
25901: LD_ADDR_VAR 0 7
25905: PUSH
25906: DOUBLE
25907: LD_VAR 0 9
25911: INC
25912: ST_TO_ADDR
25913: LD_INT 1
25915: PUSH
25916: FOR_DOWNTO
25917: IFFALSE 25962
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25919: LD_ADDR_VAR 0 6
25923: PUSH
25924: LD_VAR 0 6
25928: PPUSH
25929: LD_VAR 0 9
25933: PUSH
25934: LD_VAR 0 7
25938: MINUS
25939: PUSH
25940: LD_INT 1
25942: PLUS
25943: PPUSH
25944: LD_VAR 0 9
25948: PUSH
25949: LD_VAR 0 7
25953: ARRAY
25954: PPUSH
25955: CALL_OW 1
25959: ST_TO_ADDR
25960: GO 25916
25962: POP
25963: POP
// end ; tmp := [ ] ;
25964: LD_ADDR_VAR 0 9
25968: PUSH
25969: EMPTY
25970: ST_TO_ADDR
// if mode then
25971: LD_VAR 0 5
25975: IFFALSE 26044
// begin for i = 1 to result do
25977: LD_ADDR_VAR 0 7
25981: PUSH
25982: DOUBLE
25983: LD_INT 1
25985: DEC
25986: ST_TO_ADDR
25987: LD_VAR 0 6
25991: PUSH
25992: FOR_TO
25993: IFFALSE 26032
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25995: LD_ADDR_VAR 0 9
25999: PUSH
26000: LD_VAR 0 9
26004: PPUSH
26005: LD_VAR 0 7
26009: PPUSH
26010: LD_VAR 0 6
26014: PUSH
26015: LD_VAR 0 7
26019: ARRAY
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PPUSH
26025: CALL_OW 1
26029: ST_TO_ADDR
26030: GO 25992
26032: POP
26033: POP
// result := tmp ;
26034: LD_ADDR_VAR 0 6
26038: PUSH
26039: LD_VAR 0 9
26043: ST_TO_ADDR
// end ; end ;
26044: LD_VAR 0 6
26048: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26049: LD_INT 0
26051: PPUSH
26052: PPUSH
26053: PPUSH
26054: PPUSH
26055: PPUSH
26056: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26057: LD_ADDR_VAR 0 5
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: ST_TO_ADDR
// if not x or not y then
26079: LD_VAR 0 2
26083: NOT
26084: PUSH
26085: LD_VAR 0 3
26089: NOT
26090: OR
26091: IFFALSE 26095
// exit ;
26093: GO 27741
// if not range then
26095: LD_VAR 0 4
26099: NOT
26100: IFFALSE 26110
// range := 10 ;
26102: LD_ADDR_VAR 0 4
26106: PUSH
26107: LD_INT 10
26109: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26110: LD_ADDR_VAR 0 8
26114: PUSH
26115: LD_INT 81
26117: PUSH
26118: LD_VAR 0 1
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 92
26129: PUSH
26130: LD_VAR 0 2
26134: PUSH
26135: LD_VAR 0 3
26139: PUSH
26140: LD_VAR 0 4
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: LD_INT 21
26156: PUSH
26157: LD_INT 3
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: PPUSH
26173: CALL_OW 69
26177: ST_TO_ADDR
// if not tmp then
26178: LD_VAR 0 8
26182: NOT
26183: IFFALSE 26187
// exit ;
26185: GO 27741
// for i in tmp do
26187: LD_ADDR_VAR 0 6
26191: PUSH
26192: LD_VAR 0 8
26196: PUSH
26197: FOR_IN
26198: IFFALSE 27716
// begin points := [ 0 , 0 , 0 ] ;
26200: LD_ADDR_VAR 0 9
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: ST_TO_ADDR
// bpoints := 1 ;
26219: LD_ADDR_VAR 0 10
26223: PUSH
26224: LD_INT 1
26226: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26227: LD_VAR 0 6
26231: PPUSH
26232: CALL_OW 247
26236: PUSH
26237: LD_INT 1
26239: DOUBLE
26240: EQUAL
26241: IFTRUE 26245
26243: GO 26823
26245: POP
// begin if GetClass ( i ) = 1 then
26246: LD_VAR 0 6
26250: PPUSH
26251: CALL_OW 257
26255: PUSH
26256: LD_INT 1
26258: EQUAL
26259: IFFALSE 26280
// points := [ 10 , 5 , 3 ] ;
26261: LD_ADDR_VAR 0 9
26265: PUSH
26266: LD_INT 10
26268: PUSH
26269: LD_INT 5
26271: PUSH
26272: LD_INT 3
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26280: LD_VAR 0 6
26284: PPUSH
26285: CALL_OW 257
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 3
26295: PUSH
26296: LD_INT 4
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: LIST
26303: IN
26304: IFFALSE 26325
// points := [ 3 , 2 , 1 ] ;
26306: LD_ADDR_VAR 0 9
26310: PUSH
26311: LD_INT 3
26313: PUSH
26314: LD_INT 2
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: LIST
26324: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26325: LD_VAR 0 6
26329: PPUSH
26330: CALL_OW 257
26334: PUSH
26335: LD_INT 5
26337: EQUAL
26338: IFFALSE 26359
// points := [ 130 , 5 , 2 ] ;
26340: LD_ADDR_VAR 0 9
26344: PUSH
26345: LD_INT 130
26347: PUSH
26348: LD_INT 5
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26359: LD_VAR 0 6
26363: PPUSH
26364: CALL_OW 257
26368: PUSH
26369: LD_INT 8
26371: EQUAL
26372: IFFALSE 26393
// points := [ 35 , 35 , 30 ] ;
26374: LD_ADDR_VAR 0 9
26378: PUSH
26379: LD_INT 35
26381: PUSH
26382: LD_INT 35
26384: PUSH
26385: LD_INT 30
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26393: LD_VAR 0 6
26397: PPUSH
26398: CALL_OW 257
26402: PUSH
26403: LD_INT 9
26405: EQUAL
26406: IFFALSE 26427
// points := [ 20 , 55 , 40 ] ;
26408: LD_ADDR_VAR 0 9
26412: PUSH
26413: LD_INT 20
26415: PUSH
26416: LD_INT 55
26418: PUSH
26419: LD_INT 40
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26427: LD_VAR 0 6
26431: PPUSH
26432: CALL_OW 257
26436: PUSH
26437: LD_INT 12
26439: PUSH
26440: LD_INT 16
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: IN
26447: IFFALSE 26468
// points := [ 5 , 3 , 2 ] ;
26449: LD_ADDR_VAR 0 9
26453: PUSH
26454: LD_INT 5
26456: PUSH
26457: LD_INT 3
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26468: LD_VAR 0 6
26472: PPUSH
26473: CALL_OW 257
26477: PUSH
26478: LD_INT 17
26480: EQUAL
26481: IFFALSE 26502
// points := [ 100 , 50 , 75 ] ;
26483: LD_ADDR_VAR 0 9
26487: PUSH
26488: LD_INT 100
26490: PUSH
26491: LD_INT 50
26493: PUSH
26494: LD_INT 75
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: LIST
26501: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26502: LD_VAR 0 6
26506: PPUSH
26507: CALL_OW 257
26511: PUSH
26512: LD_INT 15
26514: EQUAL
26515: IFFALSE 26536
// points := [ 10 , 5 , 3 ] ;
26517: LD_ADDR_VAR 0 9
26521: PUSH
26522: LD_INT 10
26524: PUSH
26525: LD_INT 5
26527: PUSH
26528: LD_INT 3
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26536: LD_VAR 0 6
26540: PPUSH
26541: CALL_OW 257
26545: PUSH
26546: LD_INT 14
26548: EQUAL
26549: IFFALSE 26570
// points := [ 10 , 0 , 0 ] ;
26551: LD_ADDR_VAR 0 9
26555: PUSH
26556: LD_INT 10
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26570: LD_VAR 0 6
26574: PPUSH
26575: CALL_OW 257
26579: PUSH
26580: LD_INT 11
26582: EQUAL
26583: IFFALSE 26604
// points := [ 30 , 10 , 5 ] ;
26585: LD_ADDR_VAR 0 9
26589: PUSH
26590: LD_INT 30
26592: PUSH
26593: LD_INT 10
26595: PUSH
26596: LD_INT 5
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26604: LD_VAR 0 1
26608: PPUSH
26609: LD_INT 5
26611: PPUSH
26612: CALL_OW 321
26616: PUSH
26617: LD_INT 2
26619: EQUAL
26620: IFFALSE 26637
// bpoints := bpoints * 1.8 ;
26622: LD_ADDR_VAR 0 10
26626: PUSH
26627: LD_VAR 0 10
26631: PUSH
26632: LD_REAL  1.80000000000000E+0000
26635: MUL
26636: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26637: LD_VAR 0 6
26641: PPUSH
26642: CALL_OW 257
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: LD_INT 3
26655: PUSH
26656: LD_INT 4
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: IN
26665: PUSH
26666: LD_VAR 0 1
26670: PPUSH
26671: LD_INT 51
26673: PPUSH
26674: CALL_OW 321
26678: PUSH
26679: LD_INT 2
26681: EQUAL
26682: AND
26683: IFFALSE 26700
// bpoints := bpoints * 1.2 ;
26685: LD_ADDR_VAR 0 10
26689: PUSH
26690: LD_VAR 0 10
26694: PUSH
26695: LD_REAL  1.20000000000000E+0000
26698: MUL
26699: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26700: LD_VAR 0 6
26704: PPUSH
26705: CALL_OW 257
26709: PUSH
26710: LD_INT 5
26712: PUSH
26713: LD_INT 7
26715: PUSH
26716: LD_INT 9
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: LIST
26723: IN
26724: PUSH
26725: LD_VAR 0 1
26729: PPUSH
26730: LD_INT 52
26732: PPUSH
26733: CALL_OW 321
26737: PUSH
26738: LD_INT 2
26740: EQUAL
26741: AND
26742: IFFALSE 26759
// bpoints := bpoints * 1.5 ;
26744: LD_ADDR_VAR 0 10
26748: PUSH
26749: LD_VAR 0 10
26753: PUSH
26754: LD_REAL  1.50000000000000E+0000
26757: MUL
26758: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26759: LD_VAR 0 1
26763: PPUSH
26764: LD_INT 66
26766: PPUSH
26767: CALL_OW 321
26771: PUSH
26772: LD_INT 2
26774: EQUAL
26775: IFFALSE 26792
// bpoints := bpoints * 1.1 ;
26777: LD_ADDR_VAR 0 10
26781: PUSH
26782: LD_VAR 0 10
26786: PUSH
26787: LD_REAL  1.10000000000000E+0000
26790: MUL
26791: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26792: LD_ADDR_VAR 0 10
26796: PUSH
26797: LD_VAR 0 10
26801: PUSH
26802: LD_VAR 0 6
26806: PPUSH
26807: LD_INT 1
26809: PPUSH
26810: CALL_OW 259
26814: PUSH
26815: LD_REAL  1.15000000000000E+0000
26818: MUL
26819: MUL
26820: ST_TO_ADDR
// end ; unit_vehicle :
26821: GO 27645
26823: LD_INT 2
26825: DOUBLE
26826: EQUAL
26827: IFTRUE 26831
26829: GO 27633
26831: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26832: LD_VAR 0 6
26836: PPUSH
26837: CALL_OW 264
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 42
26847: PUSH
26848: LD_INT 24
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: IN
26856: IFFALSE 26877
// points := [ 25 , 5 , 3 ] ;
26858: LD_ADDR_VAR 0 9
26862: PUSH
26863: LD_INT 25
26865: PUSH
26866: LD_INT 5
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26877: LD_VAR 0 6
26881: PPUSH
26882: CALL_OW 264
26886: PUSH
26887: LD_INT 4
26889: PUSH
26890: LD_INT 43
26892: PUSH
26893: LD_INT 25
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: IN
26901: IFFALSE 26922
// points := [ 40 , 15 , 5 ] ;
26903: LD_ADDR_VAR 0 9
26907: PUSH
26908: LD_INT 40
26910: PUSH
26911: LD_INT 15
26913: PUSH
26914: LD_INT 5
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26922: LD_VAR 0 6
26926: PPUSH
26927: CALL_OW 264
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: LD_INT 23
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: IN
26942: IFFALSE 26963
// points := [ 7 , 25 , 8 ] ;
26944: LD_ADDR_VAR 0 9
26948: PUSH
26949: LD_INT 7
26951: PUSH
26952: LD_INT 25
26954: PUSH
26955: LD_INT 8
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: LIST
26962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26963: LD_VAR 0 6
26967: PPUSH
26968: CALL_OW 264
26972: PUSH
26973: LD_INT 5
26975: PUSH
26976: LD_INT 27
26978: PUSH
26979: LD_INT 44
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: IN
26987: IFFALSE 27008
// points := [ 14 , 50 , 16 ] ;
26989: LD_ADDR_VAR 0 9
26993: PUSH
26994: LD_INT 14
26996: PUSH
26997: LD_INT 50
26999: PUSH
27000: LD_INT 16
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27008: LD_VAR 0 6
27012: PPUSH
27013: CALL_OW 264
27017: PUSH
27018: LD_INT 6
27020: PUSH
27021: LD_INT 46
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: IN
27028: IFFALSE 27049
// points := [ 32 , 120 , 70 ] ;
27030: LD_ADDR_VAR 0 9
27034: PUSH
27035: LD_INT 32
27037: PUSH
27038: LD_INT 120
27040: PUSH
27041: LD_INT 70
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27049: LD_VAR 0 6
27053: PPUSH
27054: CALL_OW 264
27058: PUSH
27059: LD_INT 7
27061: PUSH
27062: LD_INT 28
27064: PUSH
27065: LD_INT 45
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: IN
27073: IFFALSE 27094
// points := [ 35 , 20 , 45 ] ;
27075: LD_ADDR_VAR 0 9
27079: PUSH
27080: LD_INT 35
27082: PUSH
27083: LD_INT 20
27085: PUSH
27086: LD_INT 45
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27094: LD_VAR 0 6
27098: PPUSH
27099: CALL_OW 264
27103: PUSH
27104: LD_INT 47
27106: PUSH
27107: EMPTY
27108: LIST
27109: IN
27110: IFFALSE 27131
// points := [ 67 , 45 , 75 ] ;
27112: LD_ADDR_VAR 0 9
27116: PUSH
27117: LD_INT 67
27119: PUSH
27120: LD_INT 45
27122: PUSH
27123: LD_INT 75
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27131: LD_VAR 0 6
27135: PPUSH
27136: CALL_OW 264
27140: PUSH
27141: LD_INT 26
27143: PUSH
27144: EMPTY
27145: LIST
27146: IN
27147: IFFALSE 27168
// points := [ 120 , 30 , 80 ] ;
27149: LD_ADDR_VAR 0 9
27153: PUSH
27154: LD_INT 120
27156: PUSH
27157: LD_INT 30
27159: PUSH
27160: LD_INT 80
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27168: LD_VAR 0 6
27172: PPUSH
27173: CALL_OW 264
27177: PUSH
27178: LD_INT 22
27180: PUSH
27181: EMPTY
27182: LIST
27183: IN
27184: IFFALSE 27205
// points := [ 40 , 1 , 1 ] ;
27186: LD_ADDR_VAR 0 9
27190: PUSH
27191: LD_INT 40
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27205: LD_VAR 0 6
27209: PPUSH
27210: CALL_OW 264
27214: PUSH
27215: LD_INT 29
27217: PUSH
27218: EMPTY
27219: LIST
27220: IN
27221: IFFALSE 27242
// points := [ 70 , 200 , 400 ] ;
27223: LD_ADDR_VAR 0 9
27227: PUSH
27228: LD_INT 70
27230: PUSH
27231: LD_INT 200
27233: PUSH
27234: LD_INT 400
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27242: LD_VAR 0 6
27246: PPUSH
27247: CALL_OW 264
27251: PUSH
27252: LD_INT 14
27254: PUSH
27255: LD_INT 53
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: IN
27262: IFFALSE 27283
// points := [ 40 , 10 , 20 ] ;
27264: LD_ADDR_VAR 0 9
27268: PUSH
27269: LD_INT 40
27271: PUSH
27272: LD_INT 10
27274: PUSH
27275: LD_INT 20
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27283: LD_VAR 0 6
27287: PPUSH
27288: CALL_OW 264
27292: PUSH
27293: LD_INT 9
27295: PUSH
27296: EMPTY
27297: LIST
27298: IN
27299: IFFALSE 27320
// points := [ 5 , 70 , 20 ] ;
27301: LD_ADDR_VAR 0 9
27305: PUSH
27306: LD_INT 5
27308: PUSH
27309: LD_INT 70
27311: PUSH
27312: LD_INT 20
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27320: LD_VAR 0 6
27324: PPUSH
27325: CALL_OW 264
27329: PUSH
27330: LD_INT 10
27332: PUSH
27333: EMPTY
27334: LIST
27335: IN
27336: IFFALSE 27357
// points := [ 35 , 110 , 70 ] ;
27338: LD_ADDR_VAR 0 9
27342: PUSH
27343: LD_INT 35
27345: PUSH
27346: LD_INT 110
27348: PUSH
27349: LD_INT 70
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27357: LD_VAR 0 6
27361: PPUSH
27362: CALL_OW 265
27366: PUSH
27367: LD_INT 25
27369: EQUAL
27370: IFFALSE 27391
// points := [ 80 , 65 , 100 ] ;
27372: LD_ADDR_VAR 0 9
27376: PUSH
27377: LD_INT 80
27379: PUSH
27380: LD_INT 65
27382: PUSH
27383: LD_INT 100
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27391: LD_VAR 0 6
27395: PPUSH
27396: CALL_OW 263
27400: PUSH
27401: LD_INT 1
27403: EQUAL
27404: IFFALSE 27439
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27406: LD_ADDR_VAR 0 10
27410: PUSH
27411: LD_VAR 0 10
27415: PUSH
27416: LD_VAR 0 6
27420: PPUSH
27421: CALL_OW 311
27425: PPUSH
27426: LD_INT 3
27428: PPUSH
27429: CALL_OW 259
27433: PUSH
27434: LD_INT 4
27436: MUL
27437: MUL
27438: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27439: LD_VAR 0 6
27443: PPUSH
27444: CALL_OW 263
27448: PUSH
27449: LD_INT 2
27451: EQUAL
27452: IFFALSE 27503
// begin j := IsControledBy ( i ) ;
27454: LD_ADDR_VAR 0 7
27458: PUSH
27459: LD_VAR 0 6
27463: PPUSH
27464: CALL_OW 312
27468: ST_TO_ADDR
// if j then
27469: LD_VAR 0 7
27473: IFFALSE 27503
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27475: LD_ADDR_VAR 0 10
27479: PUSH
27480: LD_VAR 0 10
27484: PUSH
27485: LD_VAR 0 7
27489: PPUSH
27490: LD_INT 3
27492: PPUSH
27493: CALL_OW 259
27497: PUSH
27498: LD_INT 3
27500: MUL
27501: MUL
27502: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27503: LD_VAR 0 6
27507: PPUSH
27508: CALL_OW 264
27512: PUSH
27513: LD_INT 5
27515: PUSH
27516: LD_INT 6
27518: PUSH
27519: LD_INT 46
27521: PUSH
27522: LD_INT 44
27524: PUSH
27525: LD_INT 47
27527: PUSH
27528: LD_INT 45
27530: PUSH
27531: LD_INT 28
27533: PUSH
27534: LD_INT 7
27536: PUSH
27537: LD_INT 27
27539: PUSH
27540: LD_INT 29
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: IN
27555: PUSH
27556: LD_VAR 0 1
27560: PPUSH
27561: LD_INT 52
27563: PPUSH
27564: CALL_OW 321
27568: PUSH
27569: LD_INT 2
27571: EQUAL
27572: AND
27573: IFFALSE 27590
// bpoints := bpoints * 1.2 ;
27575: LD_ADDR_VAR 0 10
27579: PUSH
27580: LD_VAR 0 10
27584: PUSH
27585: LD_REAL  1.20000000000000E+0000
27588: MUL
27589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27590: LD_VAR 0 6
27594: PPUSH
27595: CALL_OW 264
27599: PUSH
27600: LD_INT 6
27602: PUSH
27603: LD_INT 46
27605: PUSH
27606: LD_INT 47
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: IN
27614: IFFALSE 27631
// bpoints := bpoints * 1.2 ;
27616: LD_ADDR_VAR 0 10
27620: PUSH
27621: LD_VAR 0 10
27625: PUSH
27626: LD_REAL  1.20000000000000E+0000
27629: MUL
27630: ST_TO_ADDR
// end ; unit_building :
27631: GO 27645
27633: LD_INT 3
27635: DOUBLE
27636: EQUAL
27637: IFTRUE 27641
27639: GO 27644
27641: POP
// ; end ;
27642: GO 27645
27644: POP
// for j = 1 to 3 do
27645: LD_ADDR_VAR 0 7
27649: PUSH
27650: DOUBLE
27651: LD_INT 1
27653: DEC
27654: ST_TO_ADDR
27655: LD_INT 3
27657: PUSH
27658: FOR_TO
27659: IFFALSE 27712
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27661: LD_ADDR_VAR 0 5
27665: PUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: LD_VAR 0 7
27675: PPUSH
27676: LD_VAR 0 5
27680: PUSH
27681: LD_VAR 0 7
27685: ARRAY
27686: PUSH
27687: LD_VAR 0 9
27691: PUSH
27692: LD_VAR 0 7
27696: ARRAY
27697: PUSH
27698: LD_VAR 0 10
27702: MUL
27703: PLUS
27704: PPUSH
27705: CALL_OW 1
27709: ST_TO_ADDR
27710: GO 27658
27712: POP
27713: POP
// end ;
27714: GO 26197
27716: POP
27717: POP
// result := Replace ( result , 4 , tmp ) ;
27718: LD_ADDR_VAR 0 5
27722: PUSH
27723: LD_VAR 0 5
27727: PPUSH
27728: LD_INT 4
27730: PPUSH
27731: LD_VAR 0 8
27735: PPUSH
27736: CALL_OW 1
27740: ST_TO_ADDR
// end ;
27741: LD_VAR 0 5
27745: RET
// export function DangerAtRange ( unit , range ) ; begin
27746: LD_INT 0
27748: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27749: LD_ADDR_VAR 0 3
27753: PUSH
27754: LD_VAR 0 1
27758: PPUSH
27759: CALL_OW 255
27763: PPUSH
27764: LD_VAR 0 1
27768: PPUSH
27769: CALL_OW 250
27773: PPUSH
27774: LD_VAR 0 1
27778: PPUSH
27779: CALL_OW 251
27783: PPUSH
27784: LD_VAR 0 2
27788: PPUSH
27789: CALL 26049 0 4
27793: ST_TO_ADDR
// end ;
27794: LD_VAR 0 3
27798: RET
// export function DangerInArea ( side , area ) ; begin
27799: LD_INT 0
27801: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_VAR 0 2
27811: PPUSH
27812: LD_INT 81
27814: PUSH
27815: LD_VAR 0 1
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PPUSH
27824: CALL_OW 70
27828: ST_TO_ADDR
// end ;
27829: LD_VAR 0 3
27833: RET
// export function IsExtension ( b ) ; begin
27834: LD_INT 0
27836: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27837: LD_ADDR_VAR 0 2
27841: PUSH
27842: LD_VAR 0 1
27846: PUSH
27847: LD_INT 23
27849: PUSH
27850: LD_INT 20
27852: PUSH
27853: LD_INT 22
27855: PUSH
27856: LD_INT 17
27858: PUSH
27859: LD_INT 24
27861: PUSH
27862: LD_INT 21
27864: PUSH
27865: LD_INT 19
27867: PUSH
27868: LD_INT 16
27870: PUSH
27871: LD_INT 25
27873: PUSH
27874: LD_INT 18
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: IN
27889: ST_TO_ADDR
// end ;
27890: LD_VAR 0 2
27894: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27895: LD_INT 0
27897: PPUSH
27898: PPUSH
27899: PPUSH
// result := [ ] ;
27900: LD_ADDR_VAR 0 3
27904: PUSH
27905: EMPTY
27906: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27907: LD_ADDR_VAR 0 4
27911: PUSH
27912: LD_VAR 0 2
27916: PPUSH
27917: LD_INT 21
27919: PUSH
27920: LD_INT 3
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PPUSH
27927: CALL_OW 70
27931: ST_TO_ADDR
// if not tmp then
27932: LD_VAR 0 4
27936: NOT
27937: IFFALSE 27941
// exit ;
27939: GO 27999
// for i in tmp do
27941: LD_ADDR_VAR 0 5
27945: PUSH
27946: LD_VAR 0 4
27950: PUSH
27951: FOR_IN
27952: IFFALSE 27987
// if GetBase ( i ) <> base then
27954: LD_VAR 0 5
27958: PPUSH
27959: CALL_OW 274
27963: PUSH
27964: LD_VAR 0 1
27968: NONEQUAL
27969: IFFALSE 27985
// ComLinkToBase ( base , i ) ;
27971: LD_VAR 0 1
27975: PPUSH
27976: LD_VAR 0 5
27980: PPUSH
27981: CALL_OW 169
27985: GO 27951
27987: POP
27988: POP
// result := tmp ;
27989: LD_ADDR_VAR 0 3
27993: PUSH
27994: LD_VAR 0 4
27998: ST_TO_ADDR
// end ;
27999: LD_VAR 0 3
28003: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28004: LD_INT 0
28006: PPUSH
28007: PPUSH
// if BuildingStatus ( b ) = bs_build then
28008: LD_VAR 0 2
28012: PPUSH
28013: CALL_OW 461
28017: PUSH
28018: LD_INT 1
28020: EQUAL
28021: IFFALSE 28081
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28023: LD_VAR 0 1
28027: PPUSH
28028: LD_STRING h
28030: PUSH
28031: LD_VAR 0 2
28035: PPUSH
28036: CALL_OW 250
28040: PUSH
28041: LD_VAR 0 2
28045: PPUSH
28046: CALL_OW 251
28050: PUSH
28051: LD_VAR 0 2
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: PPUSH
28077: CALL_OW 446
// end ;
28081: LD_VAR 0 3
28085: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28086: LD_INT 0
28088: PPUSH
28089: PPUSH
28090: PPUSH
28091: PPUSH
28092: PPUSH
28093: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28094: LD_VAR 0 1
28098: NOT
28099: PUSH
28100: LD_VAR 0 1
28104: PPUSH
28105: CALL_OW 263
28109: PUSH
28110: LD_INT 2
28112: EQUAL
28113: NOT
28114: OR
28115: IFFALSE 28119
// exit ;
28117: GO 28435
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28119: LD_ADDR_VAR 0 6
28123: PUSH
28124: LD_INT 22
28126: PUSH
28127: LD_VAR 0 1
28131: PPUSH
28132: CALL_OW 255
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 30
28146: PUSH
28147: LD_INT 36
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 34
28156: PUSH
28157: LD_INT 31
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PPUSH
28173: CALL_OW 69
28177: ST_TO_ADDR
// if not tmp then
28178: LD_VAR 0 6
28182: NOT
28183: IFFALSE 28187
// exit ;
28185: GO 28435
// result := [ ] ;
28187: LD_ADDR_VAR 0 2
28191: PUSH
28192: EMPTY
28193: ST_TO_ADDR
// for i in tmp do
28194: LD_ADDR_VAR 0 3
28198: PUSH
28199: LD_VAR 0 6
28203: PUSH
28204: FOR_IN
28205: IFFALSE 28276
// begin t := UnitsInside ( i ) ;
28207: LD_ADDR_VAR 0 4
28211: PUSH
28212: LD_VAR 0 3
28216: PPUSH
28217: CALL_OW 313
28221: ST_TO_ADDR
// if t then
28222: LD_VAR 0 4
28226: IFFALSE 28274
// for j in t do
28228: LD_ADDR_VAR 0 7
28232: PUSH
28233: LD_VAR 0 4
28237: PUSH
28238: FOR_IN
28239: IFFALSE 28272
// result := Insert ( result , result + 1 , j ) ;
28241: LD_ADDR_VAR 0 2
28245: PUSH
28246: LD_VAR 0 2
28250: PPUSH
28251: LD_VAR 0 2
28255: PUSH
28256: LD_INT 1
28258: PLUS
28259: PPUSH
28260: LD_VAR 0 7
28264: PPUSH
28265: CALL_OW 2
28269: ST_TO_ADDR
28270: GO 28238
28272: POP
28273: POP
// end ;
28274: GO 28204
28276: POP
28277: POP
// if not result then
28278: LD_VAR 0 2
28282: NOT
28283: IFFALSE 28287
// exit ;
28285: GO 28435
// mech := result [ 1 ] ;
28287: LD_ADDR_VAR 0 5
28291: PUSH
28292: LD_VAR 0 2
28296: PUSH
28297: LD_INT 1
28299: ARRAY
28300: ST_TO_ADDR
// if result > 1 then
28301: LD_VAR 0 2
28305: PUSH
28306: LD_INT 1
28308: GREATER
28309: IFFALSE 28421
// for i = 2 to result do
28311: LD_ADDR_VAR 0 3
28315: PUSH
28316: DOUBLE
28317: LD_INT 2
28319: DEC
28320: ST_TO_ADDR
28321: LD_VAR 0 2
28325: PUSH
28326: FOR_TO
28327: IFFALSE 28419
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28329: LD_ADDR_VAR 0 4
28333: PUSH
28334: LD_VAR 0 2
28338: PUSH
28339: LD_VAR 0 3
28343: ARRAY
28344: PPUSH
28345: LD_INT 3
28347: PPUSH
28348: CALL_OW 259
28352: PUSH
28353: LD_VAR 0 2
28357: PUSH
28358: LD_VAR 0 3
28362: ARRAY
28363: PPUSH
28364: CALL_OW 432
28368: MINUS
28369: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28370: LD_VAR 0 4
28374: PUSH
28375: LD_VAR 0 5
28379: PPUSH
28380: LD_INT 3
28382: PPUSH
28383: CALL_OW 259
28387: PUSH
28388: LD_VAR 0 5
28392: PPUSH
28393: CALL_OW 432
28397: MINUS
28398: GREATEREQUAL
28399: IFFALSE 28417
// mech := result [ i ] ;
28401: LD_ADDR_VAR 0 5
28405: PUSH
28406: LD_VAR 0 2
28410: PUSH
28411: LD_VAR 0 3
28415: ARRAY
28416: ST_TO_ADDR
// end ;
28417: GO 28326
28419: POP
28420: POP
// ComLinkTo ( vehicle , mech ) ;
28421: LD_VAR 0 1
28425: PPUSH
28426: LD_VAR 0 5
28430: PPUSH
28431: CALL_OW 135
// end ;
28435: LD_VAR 0 2
28439: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28440: LD_INT 0
28442: PPUSH
28443: PPUSH
28444: PPUSH
28445: PPUSH
28446: PPUSH
28447: PPUSH
28448: PPUSH
28449: PPUSH
28450: PPUSH
28451: PPUSH
28452: PPUSH
28453: PPUSH
28454: PPUSH
// result := [ ] ;
28455: LD_ADDR_VAR 0 7
28459: PUSH
28460: EMPTY
28461: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 266
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: IN
28482: NOT
28483: IFFALSE 28487
// exit ;
28485: GO 30118
// if name then
28487: LD_VAR 0 3
28491: IFFALSE 28507
// SetBName ( base_dep , name ) ;
28493: LD_VAR 0 1
28497: PPUSH
28498: LD_VAR 0 3
28502: PPUSH
28503: CALL_OW 500
// base := GetBase ( base_dep ) ;
28507: LD_ADDR_VAR 0 15
28511: PUSH
28512: LD_VAR 0 1
28516: PPUSH
28517: CALL_OW 274
28521: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28522: LD_ADDR_VAR 0 16
28526: PUSH
28527: LD_VAR 0 1
28531: PPUSH
28532: CALL_OW 255
28536: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28537: LD_ADDR_VAR 0 17
28541: PUSH
28542: LD_VAR 0 1
28546: PPUSH
28547: CALL_OW 248
28551: ST_TO_ADDR
// if sources then
28552: LD_VAR 0 5
28556: IFFALSE 28603
// for i = 1 to 3 do
28558: LD_ADDR_VAR 0 8
28562: PUSH
28563: DOUBLE
28564: LD_INT 1
28566: DEC
28567: ST_TO_ADDR
28568: LD_INT 3
28570: PUSH
28571: FOR_TO
28572: IFFALSE 28601
// AddResourceType ( base , i , sources [ i ] ) ;
28574: LD_VAR 0 15
28578: PPUSH
28579: LD_VAR 0 8
28583: PPUSH
28584: LD_VAR 0 5
28588: PUSH
28589: LD_VAR 0 8
28593: ARRAY
28594: PPUSH
28595: CALL_OW 276
28599: GO 28571
28601: POP
28602: POP
// buildings := GetBaseBuildings ( base , area ) ;
28603: LD_ADDR_VAR 0 18
28607: PUSH
28608: LD_VAR 0 15
28612: PPUSH
28613: LD_VAR 0 2
28617: PPUSH
28618: CALL 27895 0 2
28622: ST_TO_ADDR
// InitHc ;
28623: CALL_OW 19
// InitUc ;
28627: CALL_OW 18
// uc_side := side ;
28631: LD_ADDR_OWVAR 20
28635: PUSH
28636: LD_VAR 0 16
28640: ST_TO_ADDR
// uc_nation := nation ;
28641: LD_ADDR_OWVAR 21
28645: PUSH
28646: LD_VAR 0 17
28650: ST_TO_ADDR
// if buildings then
28651: LD_VAR 0 18
28655: IFFALSE 29977
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28657: LD_ADDR_VAR 0 19
28661: PUSH
28662: LD_VAR 0 18
28666: PPUSH
28667: LD_INT 2
28669: PUSH
28670: LD_INT 30
28672: PUSH
28673: LD_INT 29
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 30
28682: PUSH
28683: LD_INT 30
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: PPUSH
28695: CALL_OW 72
28699: ST_TO_ADDR
// if tmp then
28700: LD_VAR 0 19
28704: IFFALSE 28752
// for i in tmp do
28706: LD_ADDR_VAR 0 8
28710: PUSH
28711: LD_VAR 0 19
28715: PUSH
28716: FOR_IN
28717: IFFALSE 28750
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28719: LD_VAR 0 8
28723: PPUSH
28724: CALL_OW 250
28728: PPUSH
28729: LD_VAR 0 8
28733: PPUSH
28734: CALL_OW 251
28738: PPUSH
28739: LD_VAR 0 16
28743: PPUSH
28744: CALL_OW 441
28748: GO 28716
28750: POP
28751: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28752: LD_VAR 0 18
28756: PPUSH
28757: LD_INT 2
28759: PUSH
28760: LD_INT 30
28762: PUSH
28763: LD_INT 32
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 30
28772: PUSH
28773: LD_INT 33
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: PPUSH
28785: CALL_OW 72
28789: IFFALSE 28877
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28791: LD_ADDR_VAR 0 8
28795: PUSH
28796: LD_VAR 0 18
28800: PPUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 30
28806: PUSH
28807: LD_INT 32
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 30
28816: PUSH
28817: LD_INT 33
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: PPUSH
28829: CALL_OW 72
28833: PUSH
28834: FOR_IN
28835: IFFALSE 28875
// begin if not GetBWeapon ( i ) then
28837: LD_VAR 0 8
28841: PPUSH
28842: CALL_OW 269
28846: NOT
28847: IFFALSE 28873
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28849: LD_VAR 0 8
28853: PPUSH
28854: LD_VAR 0 8
28858: PPUSH
28859: LD_VAR 0 2
28863: PPUSH
28864: CALL 30123 0 2
28868: PPUSH
28869: CALL_OW 431
// end ;
28873: GO 28834
28875: POP
28876: POP
// end ; for i = 1 to personel do
28877: LD_ADDR_VAR 0 8
28881: PUSH
28882: DOUBLE
28883: LD_INT 1
28885: DEC
28886: ST_TO_ADDR
28887: LD_VAR 0 6
28891: PUSH
28892: FOR_TO
28893: IFFALSE 29957
// begin if i > 4 then
28895: LD_VAR 0 8
28899: PUSH
28900: LD_INT 4
28902: GREATER
28903: IFFALSE 28907
// break ;
28905: GO 29957
// case i of 1 :
28907: LD_VAR 0 8
28911: PUSH
28912: LD_INT 1
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 29000
28920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28921: LD_ADDR_VAR 0 12
28925: PUSH
28926: LD_VAR 0 18
28930: PPUSH
28931: LD_INT 22
28933: PUSH
28934: LD_VAR 0 16
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 58
28945: PUSH
28946: EMPTY
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 30
28954: PUSH
28955: LD_INT 32
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 30
28964: PUSH
28965: LD_INT 4
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 30
28974: PUSH
28975: LD_INT 5
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: PPUSH
28993: CALL_OW 72
28997: ST_TO_ADDR
28998: GO 29222
29000: LD_INT 2
29002: DOUBLE
29003: EQUAL
29004: IFTRUE 29008
29006: GO 29070
29008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29009: LD_ADDR_VAR 0 12
29013: PUSH
29014: LD_VAR 0 18
29018: PPUSH
29019: LD_INT 22
29021: PUSH
29022: LD_VAR 0 16
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: LD_INT 30
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 30
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PPUSH
29063: CALL_OW 72
29067: ST_TO_ADDR
29068: GO 29222
29070: LD_INT 3
29072: DOUBLE
29073: EQUAL
29074: IFTRUE 29078
29076: GO 29140
29078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29079: LD_ADDR_VAR 0 12
29083: PUSH
29084: LD_VAR 0 18
29088: PPUSH
29089: LD_INT 22
29091: PUSH
29092: LD_VAR 0 16
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: LD_INT 30
29106: PUSH
29107: LD_INT 2
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 30
29116: PUSH
29117: LD_INT 3
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PPUSH
29133: CALL_OW 72
29137: ST_TO_ADDR
29138: GO 29222
29140: LD_INT 4
29142: DOUBLE
29143: EQUAL
29144: IFTRUE 29148
29146: GO 29221
29148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29149: LD_ADDR_VAR 0 12
29153: PUSH
29154: LD_VAR 0 18
29158: PPUSH
29159: LD_INT 22
29161: PUSH
29162: LD_VAR 0 16
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 2
29173: PUSH
29174: LD_INT 30
29176: PUSH
29177: LD_INT 6
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 30
29186: PUSH
29187: LD_INT 7
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 30
29196: PUSH
29197: LD_INT 8
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 72
29218: ST_TO_ADDR
29219: GO 29222
29221: POP
// if i = 1 then
29222: LD_VAR 0 8
29226: PUSH
29227: LD_INT 1
29229: EQUAL
29230: IFFALSE 29341
// begin tmp := [ ] ;
29232: LD_ADDR_VAR 0 19
29236: PUSH
29237: EMPTY
29238: ST_TO_ADDR
// for j in f do
29239: LD_ADDR_VAR 0 9
29243: PUSH
29244: LD_VAR 0 12
29248: PUSH
29249: FOR_IN
29250: IFFALSE 29323
// if GetBType ( j ) = b_bunker then
29252: LD_VAR 0 9
29256: PPUSH
29257: CALL_OW 266
29261: PUSH
29262: LD_INT 32
29264: EQUAL
29265: IFFALSE 29292
// tmp := Insert ( tmp , 1 , j ) else
29267: LD_ADDR_VAR 0 19
29271: PUSH
29272: LD_VAR 0 19
29276: PPUSH
29277: LD_INT 1
29279: PPUSH
29280: LD_VAR 0 9
29284: PPUSH
29285: CALL_OW 2
29289: ST_TO_ADDR
29290: GO 29321
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29292: LD_ADDR_VAR 0 19
29296: PUSH
29297: LD_VAR 0 19
29301: PPUSH
29302: LD_VAR 0 19
29306: PUSH
29307: LD_INT 1
29309: PLUS
29310: PPUSH
29311: LD_VAR 0 9
29315: PPUSH
29316: CALL_OW 2
29320: ST_TO_ADDR
29321: GO 29249
29323: POP
29324: POP
// if tmp then
29325: LD_VAR 0 19
29329: IFFALSE 29341
// f := tmp ;
29331: LD_ADDR_VAR 0 12
29335: PUSH
29336: LD_VAR 0 19
29340: ST_TO_ADDR
// end ; x := personel [ i ] ;
29341: LD_ADDR_VAR 0 13
29345: PUSH
29346: LD_VAR 0 6
29350: PUSH
29351: LD_VAR 0 8
29355: ARRAY
29356: ST_TO_ADDR
// if x = - 1 then
29357: LD_VAR 0 13
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: EQUAL
29366: IFFALSE 29575
// begin for j in f do
29368: LD_ADDR_VAR 0 9
29372: PUSH
29373: LD_VAR 0 12
29377: PUSH
29378: FOR_IN
29379: IFFALSE 29571
// repeat InitHc ;
29381: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29385: LD_VAR 0 9
29389: PPUSH
29390: CALL_OW 266
29394: PUSH
29395: LD_INT 5
29397: EQUAL
29398: IFFALSE 29468
// begin if UnitsInside ( j ) < 3 then
29400: LD_VAR 0 9
29404: PPUSH
29405: CALL_OW 313
29409: PUSH
29410: LD_INT 3
29412: LESS
29413: IFFALSE 29449
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29415: LD_INT 0
29417: PPUSH
29418: LD_INT 5
29420: PUSH
29421: LD_INT 8
29423: PUSH
29424: LD_INT 9
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: PUSH
29432: LD_VAR 0 17
29436: ARRAY
29437: PPUSH
29438: LD_VAR 0 4
29442: PPUSH
29443: CALL_OW 380
29447: GO 29466
// PrepareHuman ( false , i , skill ) ;
29449: LD_INT 0
29451: PPUSH
29452: LD_VAR 0 8
29456: PPUSH
29457: LD_VAR 0 4
29461: PPUSH
29462: CALL_OW 380
// end else
29466: GO 29485
// PrepareHuman ( false , i , skill ) ;
29468: LD_INT 0
29470: PPUSH
29471: LD_VAR 0 8
29475: PPUSH
29476: LD_VAR 0 4
29480: PPUSH
29481: CALL_OW 380
// un := CreateHuman ;
29485: LD_ADDR_VAR 0 14
29489: PUSH
29490: CALL_OW 44
29494: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29495: LD_ADDR_VAR 0 7
29499: PUSH
29500: LD_VAR 0 7
29504: PPUSH
29505: LD_INT 1
29507: PPUSH
29508: LD_VAR 0 14
29512: PPUSH
29513: CALL_OW 2
29517: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29518: LD_VAR 0 14
29522: PPUSH
29523: LD_VAR 0 9
29527: PPUSH
29528: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29532: LD_VAR 0 9
29536: PPUSH
29537: CALL_OW 313
29541: PUSH
29542: LD_INT 6
29544: EQUAL
29545: PUSH
29546: LD_VAR 0 9
29550: PPUSH
29551: CALL_OW 266
29555: PUSH
29556: LD_INT 32
29558: PUSH
29559: LD_INT 31
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: IN
29566: OR
29567: IFFALSE 29381
29569: GO 29378
29571: POP
29572: POP
// end else
29573: GO 29955
// for j = 1 to x do
29575: LD_ADDR_VAR 0 9
29579: PUSH
29580: DOUBLE
29581: LD_INT 1
29583: DEC
29584: ST_TO_ADDR
29585: LD_VAR 0 13
29589: PUSH
29590: FOR_TO
29591: IFFALSE 29953
// begin InitHc ;
29593: CALL_OW 19
// if not f then
29597: LD_VAR 0 12
29601: NOT
29602: IFFALSE 29691
// begin PrepareHuman ( false , i , skill ) ;
29604: LD_INT 0
29606: PPUSH
29607: LD_VAR 0 8
29611: PPUSH
29612: LD_VAR 0 4
29616: PPUSH
29617: CALL_OW 380
// un := CreateHuman ;
29621: LD_ADDR_VAR 0 14
29625: PUSH
29626: CALL_OW 44
29630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29631: LD_ADDR_VAR 0 7
29635: PUSH
29636: LD_VAR 0 7
29640: PPUSH
29641: LD_INT 1
29643: PPUSH
29644: LD_VAR 0 14
29648: PPUSH
29649: CALL_OW 2
29653: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29654: LD_VAR 0 14
29658: PPUSH
29659: LD_VAR 0 1
29663: PPUSH
29664: CALL_OW 250
29668: PPUSH
29669: LD_VAR 0 1
29673: PPUSH
29674: CALL_OW 251
29678: PPUSH
29679: LD_INT 10
29681: PPUSH
29682: LD_INT 0
29684: PPUSH
29685: CALL_OW 50
// continue ;
29689: GO 29590
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29691: LD_VAR 0 12
29695: PUSH
29696: LD_INT 1
29698: ARRAY
29699: PPUSH
29700: CALL_OW 313
29704: PUSH
29705: LD_VAR 0 12
29709: PUSH
29710: LD_INT 1
29712: ARRAY
29713: PPUSH
29714: CALL_OW 266
29718: PUSH
29719: LD_INT 32
29721: PUSH
29722: LD_INT 31
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: IN
29729: AND
29730: PUSH
29731: LD_VAR 0 12
29735: PUSH
29736: LD_INT 1
29738: ARRAY
29739: PPUSH
29740: CALL_OW 313
29744: PUSH
29745: LD_INT 6
29747: EQUAL
29748: OR
29749: IFFALSE 29769
// f := Delete ( f , 1 ) ;
29751: LD_ADDR_VAR 0 12
29755: PUSH
29756: LD_VAR 0 12
29760: PPUSH
29761: LD_INT 1
29763: PPUSH
29764: CALL_OW 3
29768: ST_TO_ADDR
// if not f then
29769: LD_VAR 0 12
29773: NOT
29774: IFFALSE 29792
// begin x := x + 2 ;
29776: LD_ADDR_VAR 0 13
29780: PUSH
29781: LD_VAR 0 13
29785: PUSH
29786: LD_INT 2
29788: PLUS
29789: ST_TO_ADDR
// continue ;
29790: GO 29590
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29792: LD_VAR 0 12
29796: PUSH
29797: LD_INT 1
29799: ARRAY
29800: PPUSH
29801: CALL_OW 266
29805: PUSH
29806: LD_INT 5
29808: EQUAL
29809: IFFALSE 29883
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29811: LD_VAR 0 12
29815: PUSH
29816: LD_INT 1
29818: ARRAY
29819: PPUSH
29820: CALL_OW 313
29824: PUSH
29825: LD_INT 3
29827: LESS
29828: IFFALSE 29864
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29830: LD_INT 0
29832: PPUSH
29833: LD_INT 5
29835: PUSH
29836: LD_INT 8
29838: PUSH
29839: LD_INT 9
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: PUSH
29847: LD_VAR 0 17
29851: ARRAY
29852: PPUSH
29853: LD_VAR 0 4
29857: PPUSH
29858: CALL_OW 380
29862: GO 29881
// PrepareHuman ( false , i , skill ) ;
29864: LD_INT 0
29866: PPUSH
29867: LD_VAR 0 8
29871: PPUSH
29872: LD_VAR 0 4
29876: PPUSH
29877: CALL_OW 380
// end else
29881: GO 29900
// PrepareHuman ( false , i , skill ) ;
29883: LD_INT 0
29885: PPUSH
29886: LD_VAR 0 8
29890: PPUSH
29891: LD_VAR 0 4
29895: PPUSH
29896: CALL_OW 380
// un := CreateHuman ;
29900: LD_ADDR_VAR 0 14
29904: PUSH
29905: CALL_OW 44
29909: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29910: LD_ADDR_VAR 0 7
29914: PUSH
29915: LD_VAR 0 7
29919: PPUSH
29920: LD_INT 1
29922: PPUSH
29923: LD_VAR 0 14
29927: PPUSH
29928: CALL_OW 2
29932: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29933: LD_VAR 0 14
29937: PPUSH
29938: LD_VAR 0 12
29942: PUSH
29943: LD_INT 1
29945: ARRAY
29946: PPUSH
29947: CALL_OW 52
// end ;
29951: GO 29590
29953: POP
29954: POP
// end ;
29955: GO 28892
29957: POP
29958: POP
// result := result ^ buildings ;
29959: LD_ADDR_VAR 0 7
29963: PUSH
29964: LD_VAR 0 7
29968: PUSH
29969: LD_VAR 0 18
29973: ADD
29974: ST_TO_ADDR
// end else
29975: GO 30118
// begin for i = 1 to personel do
29977: LD_ADDR_VAR 0 8
29981: PUSH
29982: DOUBLE
29983: LD_INT 1
29985: DEC
29986: ST_TO_ADDR
29987: LD_VAR 0 6
29991: PUSH
29992: FOR_TO
29993: IFFALSE 30116
// begin if i > 4 then
29995: LD_VAR 0 8
29999: PUSH
30000: LD_INT 4
30002: GREATER
30003: IFFALSE 30007
// break ;
30005: GO 30116
// x := personel [ i ] ;
30007: LD_ADDR_VAR 0 13
30011: PUSH
30012: LD_VAR 0 6
30016: PUSH
30017: LD_VAR 0 8
30021: ARRAY
30022: ST_TO_ADDR
// if x = - 1 then
30023: LD_VAR 0 13
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: EQUAL
30032: IFFALSE 30036
// continue ;
30034: GO 29992
// PrepareHuman ( false , i , skill ) ;
30036: LD_INT 0
30038: PPUSH
30039: LD_VAR 0 8
30043: PPUSH
30044: LD_VAR 0 4
30048: PPUSH
30049: CALL_OW 380
// un := CreateHuman ;
30053: LD_ADDR_VAR 0 14
30057: PUSH
30058: CALL_OW 44
30062: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30063: LD_VAR 0 14
30067: PPUSH
30068: LD_VAR 0 1
30072: PPUSH
30073: CALL_OW 250
30077: PPUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 251
30087: PPUSH
30088: LD_INT 10
30090: PPUSH
30091: LD_INT 0
30093: PPUSH
30094: CALL_OW 50
// result := result ^ un ;
30098: LD_ADDR_VAR 0 7
30102: PUSH
30103: LD_VAR 0 7
30107: PUSH
30108: LD_VAR 0 14
30112: ADD
30113: ST_TO_ADDR
// end ;
30114: GO 29992
30116: POP
30117: POP
// end ; end ;
30118: LD_VAR 0 7
30122: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30123: LD_INT 0
30125: PPUSH
30126: PPUSH
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
30132: PPUSH
30133: PPUSH
30134: PPUSH
30135: PPUSH
30136: PPUSH
30137: PPUSH
30138: PPUSH
30139: PPUSH
30140: PPUSH
// result := false ;
30141: LD_ADDR_VAR 0 3
30145: PUSH
30146: LD_INT 0
30148: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30149: LD_VAR 0 1
30153: NOT
30154: PUSH
30155: LD_VAR 0 1
30159: PPUSH
30160: CALL_OW 266
30164: PUSH
30165: LD_INT 32
30167: PUSH
30168: LD_INT 33
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: IN
30175: NOT
30176: OR
30177: IFFALSE 30181
// exit ;
30179: GO 31317
// nat := GetNation ( tower ) ;
30181: LD_ADDR_VAR 0 12
30185: PUSH
30186: LD_VAR 0 1
30190: PPUSH
30191: CALL_OW 248
30195: ST_TO_ADDR
// side := GetSide ( tower ) ;
30196: LD_ADDR_VAR 0 16
30200: PUSH
30201: LD_VAR 0 1
30205: PPUSH
30206: CALL_OW 255
30210: ST_TO_ADDR
// x := GetX ( tower ) ;
30211: LD_ADDR_VAR 0 10
30215: PUSH
30216: LD_VAR 0 1
30220: PPUSH
30221: CALL_OW 250
30225: ST_TO_ADDR
// y := GetY ( tower ) ;
30226: LD_ADDR_VAR 0 11
30230: PUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 251
30240: ST_TO_ADDR
// if not x or not y then
30241: LD_VAR 0 10
30245: NOT
30246: PUSH
30247: LD_VAR 0 11
30251: NOT
30252: OR
30253: IFFALSE 30257
// exit ;
30255: GO 31317
// weapon := 0 ;
30257: LD_ADDR_VAR 0 18
30261: PUSH
30262: LD_INT 0
30264: ST_TO_ADDR
// fac_list := [ ] ;
30265: LD_ADDR_VAR 0 17
30269: PUSH
30270: EMPTY
30271: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30272: LD_ADDR_VAR 0 6
30276: PUSH
30277: LD_VAR 0 1
30281: PPUSH
30282: CALL_OW 274
30286: PPUSH
30287: LD_VAR 0 2
30291: PPUSH
30292: CALL 27895 0 2
30296: PPUSH
30297: LD_INT 30
30299: PUSH
30300: LD_INT 3
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PPUSH
30307: CALL_OW 72
30311: ST_TO_ADDR
// if not factories then
30312: LD_VAR 0 6
30316: NOT
30317: IFFALSE 30321
// exit ;
30319: GO 31317
// for i in factories do
30321: LD_ADDR_VAR 0 8
30325: PUSH
30326: LD_VAR 0 6
30330: PUSH
30331: FOR_IN
30332: IFFALSE 30357
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30334: LD_ADDR_VAR 0 17
30338: PUSH
30339: LD_VAR 0 17
30343: PUSH
30344: LD_VAR 0 8
30348: PPUSH
30349: CALL_OW 478
30353: UNION
30354: ST_TO_ADDR
30355: GO 30331
30357: POP
30358: POP
// if not fac_list then
30359: LD_VAR 0 17
30363: NOT
30364: IFFALSE 30368
// exit ;
30366: GO 31317
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30368: LD_ADDR_VAR 0 5
30372: PUSH
30373: LD_INT 4
30375: PUSH
30376: LD_INT 5
30378: PUSH
30379: LD_INT 9
30381: PUSH
30382: LD_INT 10
30384: PUSH
30385: LD_INT 6
30387: PUSH
30388: LD_INT 7
30390: PUSH
30391: LD_INT 11
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 27
30405: PUSH
30406: LD_INT 28
30408: PUSH
30409: LD_INT 26
30411: PUSH
30412: LD_INT 30
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 43
30423: PUSH
30424: LD_INT 44
30426: PUSH
30427: LD_INT 46
30429: PUSH
30430: LD_INT 45
30432: PUSH
30433: LD_INT 47
30435: PUSH
30436: LD_INT 49
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: PUSH
30452: LD_VAR 0 12
30456: ARRAY
30457: ST_TO_ADDR
// for i in list do
30458: LD_ADDR_VAR 0 8
30462: PUSH
30463: LD_VAR 0 5
30467: PUSH
30468: FOR_IN
30469: IFFALSE 30502
// if not i in fac_list then
30471: LD_VAR 0 8
30475: PUSH
30476: LD_VAR 0 17
30480: IN
30481: NOT
30482: IFFALSE 30500
// list := list diff i ;
30484: LD_ADDR_VAR 0 5
30488: PUSH
30489: LD_VAR 0 5
30493: PUSH
30494: LD_VAR 0 8
30498: DIFF
30499: ST_TO_ADDR
30500: GO 30468
30502: POP
30503: POP
// if not list then
30504: LD_VAR 0 5
30508: NOT
30509: IFFALSE 30513
// exit ;
30511: GO 31317
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30513: LD_VAR 0 12
30517: PUSH
30518: LD_INT 3
30520: EQUAL
30521: PUSH
30522: LD_INT 49
30524: PUSH
30525: LD_VAR 0 5
30529: IN
30530: AND
30531: PUSH
30532: LD_INT 31
30534: PPUSH
30535: LD_VAR 0 16
30539: PPUSH
30540: CALL_OW 321
30544: PUSH
30545: LD_INT 2
30547: EQUAL
30548: AND
30549: IFFALSE 30609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30551: LD_INT 22
30553: PUSH
30554: LD_VAR 0 16
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 35
30565: PUSH
30566: LD_INT 49
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 91
30575: PUSH
30576: LD_VAR 0 1
30580: PUSH
30581: LD_INT 10
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: LIST
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: PPUSH
30594: CALL_OW 69
30598: NOT
30599: IFFALSE 30609
// weapon := ru_time_lapser ;
30601: LD_ADDR_VAR 0 18
30605: PUSH
30606: LD_INT 49
30608: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30609: LD_VAR 0 12
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: IN
30624: PUSH
30625: LD_INT 11
30627: PUSH
30628: LD_VAR 0 5
30632: IN
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_VAR 0 5
30641: IN
30642: OR
30643: AND
30644: PUSH
30645: LD_INT 6
30647: PPUSH
30648: LD_VAR 0 16
30652: PPUSH
30653: CALL_OW 321
30657: PUSH
30658: LD_INT 2
30660: EQUAL
30661: AND
30662: IFFALSE 30827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30664: LD_INT 22
30666: PUSH
30667: LD_VAR 0 16
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 35
30681: PUSH
30682: LD_INT 11
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 35
30691: PUSH
30692: LD_INT 30
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 91
30706: PUSH
30707: LD_VAR 0 1
30711: PUSH
30712: LD_INT 18
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: PPUSH
30725: CALL_OW 69
30729: NOT
30730: PUSH
30731: LD_INT 22
30733: PUSH
30734: LD_VAR 0 16
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 2
30745: PUSH
30746: LD_INT 30
30748: PUSH
30749: LD_INT 32
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 30
30758: PUSH
30759: LD_INT 33
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 91
30773: PUSH
30774: LD_VAR 0 1
30778: PUSH
30779: LD_INT 12
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: PUSH
30792: EMPTY
30793: LIST
30794: PPUSH
30795: CALL_OW 69
30799: PUSH
30800: LD_INT 2
30802: GREATER
30803: AND
30804: IFFALSE 30827
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30806: LD_ADDR_VAR 0 18
30810: PUSH
30811: LD_INT 11
30813: PUSH
30814: LD_INT 30
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_VAR 0 12
30825: ARRAY
30826: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30827: LD_VAR 0 18
30831: NOT
30832: PUSH
30833: LD_INT 40
30835: PPUSH
30836: LD_VAR 0 16
30840: PPUSH
30841: CALL_OW 321
30845: PUSH
30846: LD_INT 2
30848: EQUAL
30849: AND
30850: PUSH
30851: LD_INT 7
30853: PUSH
30854: LD_VAR 0 5
30858: IN
30859: PUSH
30860: LD_INT 28
30862: PUSH
30863: LD_VAR 0 5
30867: IN
30868: OR
30869: PUSH
30870: LD_INT 45
30872: PUSH
30873: LD_VAR 0 5
30877: IN
30878: OR
30879: AND
30880: IFFALSE 31134
// begin hex := GetHexInfo ( x , y ) ;
30882: LD_ADDR_VAR 0 4
30886: PUSH
30887: LD_VAR 0 10
30891: PPUSH
30892: LD_VAR 0 11
30896: PPUSH
30897: CALL_OW 546
30901: ST_TO_ADDR
// if hex [ 1 ] then
30902: LD_VAR 0 4
30906: PUSH
30907: LD_INT 1
30909: ARRAY
30910: IFFALSE 30914
// exit ;
30912: GO 31317
// height := hex [ 2 ] ;
30914: LD_ADDR_VAR 0 15
30918: PUSH
30919: LD_VAR 0 4
30923: PUSH
30924: LD_INT 2
30926: ARRAY
30927: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30928: LD_ADDR_VAR 0 14
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: LD_INT 5
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: ST_TO_ADDR
// for i in tmp do
30951: LD_ADDR_VAR 0 8
30955: PUSH
30956: LD_VAR 0 14
30960: PUSH
30961: FOR_IN
30962: IFFALSE 31132
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30964: LD_ADDR_VAR 0 9
30968: PUSH
30969: LD_VAR 0 10
30973: PPUSH
30974: LD_VAR 0 8
30978: PPUSH
30979: LD_INT 5
30981: PPUSH
30982: CALL_OW 272
30986: PUSH
30987: LD_VAR 0 11
30991: PPUSH
30992: LD_VAR 0 8
30996: PPUSH
30997: LD_INT 5
30999: PPUSH
31000: CALL_OW 273
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31009: LD_VAR 0 9
31013: PUSH
31014: LD_INT 1
31016: ARRAY
31017: PPUSH
31018: LD_VAR 0 9
31022: PUSH
31023: LD_INT 2
31025: ARRAY
31026: PPUSH
31027: CALL_OW 488
31031: IFFALSE 31130
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31033: LD_ADDR_VAR 0 4
31037: PUSH
31038: LD_VAR 0 9
31042: PUSH
31043: LD_INT 1
31045: ARRAY
31046: PPUSH
31047: LD_VAR 0 9
31051: PUSH
31052: LD_INT 2
31054: ARRAY
31055: PPUSH
31056: CALL_OW 546
31060: ST_TO_ADDR
// if hex [ 1 ] then
31061: LD_VAR 0 4
31065: PUSH
31066: LD_INT 1
31068: ARRAY
31069: IFFALSE 31073
// continue ;
31071: GO 30961
// h := hex [ 2 ] ;
31073: LD_ADDR_VAR 0 13
31077: PUSH
31078: LD_VAR 0 4
31082: PUSH
31083: LD_INT 2
31085: ARRAY
31086: ST_TO_ADDR
// if h + 7 < height then
31087: LD_VAR 0 13
31091: PUSH
31092: LD_INT 7
31094: PLUS
31095: PUSH
31096: LD_VAR 0 15
31100: LESS
31101: IFFALSE 31130
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31103: LD_ADDR_VAR 0 18
31107: PUSH
31108: LD_INT 7
31110: PUSH
31111: LD_INT 28
31113: PUSH
31114: LD_INT 45
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: LIST
31121: PUSH
31122: LD_VAR 0 12
31126: ARRAY
31127: ST_TO_ADDR
// break ;
31128: GO 31132
// end ; end ; end ;
31130: GO 30961
31132: POP
31133: POP
// end ; if not weapon then
31134: LD_VAR 0 18
31138: NOT
31139: IFFALSE 31199
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31141: LD_ADDR_VAR 0 5
31145: PUSH
31146: LD_VAR 0 5
31150: PUSH
31151: LD_INT 11
31153: PUSH
31154: LD_INT 30
31156: PUSH
31157: LD_INT 49
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: DIFF
31165: ST_TO_ADDR
// if not list then
31166: LD_VAR 0 5
31170: NOT
31171: IFFALSE 31175
// exit ;
31173: GO 31317
// weapon := list [ rand ( 1 , list ) ] ;
31175: LD_ADDR_VAR 0 18
31179: PUSH
31180: LD_VAR 0 5
31184: PUSH
31185: LD_INT 1
31187: PPUSH
31188: LD_VAR 0 5
31192: PPUSH
31193: CALL_OW 12
31197: ARRAY
31198: ST_TO_ADDR
// end ; if weapon then
31199: LD_VAR 0 18
31203: IFFALSE 31317
// begin tmp := CostOfWeapon ( weapon ) ;
31205: LD_ADDR_VAR 0 14
31209: PUSH
31210: LD_VAR 0 18
31214: PPUSH
31215: CALL_OW 451
31219: ST_TO_ADDR
// j := GetBase ( tower ) ;
31220: LD_ADDR_VAR 0 9
31224: PUSH
31225: LD_VAR 0 1
31229: PPUSH
31230: CALL_OW 274
31234: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31235: LD_VAR 0 9
31239: PPUSH
31240: LD_INT 1
31242: PPUSH
31243: CALL_OW 275
31247: PUSH
31248: LD_VAR 0 14
31252: PUSH
31253: LD_INT 1
31255: ARRAY
31256: GREATEREQUAL
31257: PUSH
31258: LD_VAR 0 9
31262: PPUSH
31263: LD_INT 2
31265: PPUSH
31266: CALL_OW 275
31270: PUSH
31271: LD_VAR 0 14
31275: PUSH
31276: LD_INT 2
31278: ARRAY
31279: GREATEREQUAL
31280: AND
31281: PUSH
31282: LD_VAR 0 9
31286: PPUSH
31287: LD_INT 3
31289: PPUSH
31290: CALL_OW 275
31294: PUSH
31295: LD_VAR 0 14
31299: PUSH
31300: LD_INT 3
31302: ARRAY
31303: GREATEREQUAL
31304: AND
31305: IFFALSE 31317
// result := weapon ;
31307: LD_ADDR_VAR 0 3
31311: PUSH
31312: LD_VAR 0 18
31316: ST_TO_ADDR
// end ; end ;
31317: LD_VAR 0 3
31321: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31322: LD_INT 0
31324: PPUSH
31325: PPUSH
// result := true ;
31326: LD_ADDR_VAR 0 3
31330: PUSH
31331: LD_INT 1
31333: ST_TO_ADDR
// if array1 = array2 then
31334: LD_VAR 0 1
31338: PUSH
31339: LD_VAR 0 2
31343: EQUAL
31344: IFFALSE 31404
// begin for i = 1 to array1 do
31346: LD_ADDR_VAR 0 4
31350: PUSH
31351: DOUBLE
31352: LD_INT 1
31354: DEC
31355: ST_TO_ADDR
31356: LD_VAR 0 1
31360: PUSH
31361: FOR_TO
31362: IFFALSE 31400
// if array1 [ i ] <> array2 [ i ] then
31364: LD_VAR 0 1
31368: PUSH
31369: LD_VAR 0 4
31373: ARRAY
31374: PUSH
31375: LD_VAR 0 2
31379: PUSH
31380: LD_VAR 0 4
31384: ARRAY
31385: NONEQUAL
31386: IFFALSE 31398
// begin result := false ;
31388: LD_ADDR_VAR 0 3
31392: PUSH
31393: LD_INT 0
31395: ST_TO_ADDR
// break ;
31396: GO 31400
// end ;
31398: GO 31361
31400: POP
31401: POP
// end else
31402: GO 31412
// result := false ;
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: LD_INT 0
31411: ST_TO_ADDR
// end ;
31412: LD_VAR 0 3
31416: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31417: LD_INT 0
31419: PPUSH
31420: PPUSH
31421: PPUSH
// pom := GetBase ( fac ) ;
31422: LD_ADDR_VAR 0 5
31426: PUSH
31427: LD_VAR 0 1
31431: PPUSH
31432: CALL_OW 274
31436: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31437: LD_ADDR_VAR 0 4
31441: PUSH
31442: LD_VAR 0 2
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: PPUSH
31451: LD_VAR 0 2
31455: PUSH
31456: LD_INT 2
31458: ARRAY
31459: PPUSH
31460: LD_VAR 0 2
31464: PUSH
31465: LD_INT 3
31467: ARRAY
31468: PPUSH
31469: LD_VAR 0 2
31473: PUSH
31474: LD_INT 4
31476: ARRAY
31477: PPUSH
31478: CALL_OW 449
31482: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: LD_VAR 0 5
31492: PPUSH
31493: LD_INT 1
31495: PPUSH
31496: CALL_OW 275
31500: PUSH
31501: LD_VAR 0 4
31505: PUSH
31506: LD_INT 1
31508: ARRAY
31509: GREATEREQUAL
31510: PUSH
31511: LD_VAR 0 5
31515: PPUSH
31516: LD_INT 2
31518: PPUSH
31519: CALL_OW 275
31523: PUSH
31524: LD_VAR 0 4
31528: PUSH
31529: LD_INT 2
31531: ARRAY
31532: GREATEREQUAL
31533: AND
31534: PUSH
31535: LD_VAR 0 5
31539: PPUSH
31540: LD_INT 3
31542: PPUSH
31543: CALL_OW 275
31547: PUSH
31548: LD_VAR 0 4
31552: PUSH
31553: LD_INT 3
31555: ARRAY
31556: GREATEREQUAL
31557: AND
31558: ST_TO_ADDR
// end ;
31559: LD_VAR 0 3
31563: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31564: LD_INT 0
31566: PPUSH
31567: PPUSH
31568: PPUSH
31569: PPUSH
// pom := GetBase ( building ) ;
31570: LD_ADDR_VAR 0 3
31574: PUSH
31575: LD_VAR 0 1
31579: PPUSH
31580: CALL_OW 274
31584: ST_TO_ADDR
// if not pom then
31585: LD_VAR 0 3
31589: NOT
31590: IFFALSE 31594
// exit ;
31592: GO 31764
// btype := GetBType ( building ) ;
31594: LD_ADDR_VAR 0 5
31598: PUSH
31599: LD_VAR 0 1
31603: PPUSH
31604: CALL_OW 266
31608: ST_TO_ADDR
// if btype = b_armoury then
31609: LD_VAR 0 5
31613: PUSH
31614: LD_INT 4
31616: EQUAL
31617: IFFALSE 31627
// btype := b_barracks ;
31619: LD_ADDR_VAR 0 5
31623: PUSH
31624: LD_INT 5
31626: ST_TO_ADDR
// if btype = b_depot then
31627: LD_VAR 0 5
31631: PUSH
31632: LD_INT 0
31634: EQUAL
31635: IFFALSE 31645
// btype := b_warehouse ;
31637: LD_ADDR_VAR 0 5
31641: PUSH
31642: LD_INT 1
31644: ST_TO_ADDR
// if btype = b_workshop then
31645: LD_VAR 0 5
31649: PUSH
31650: LD_INT 2
31652: EQUAL
31653: IFFALSE 31663
// btype := b_factory ;
31655: LD_ADDR_VAR 0 5
31659: PUSH
31660: LD_INT 3
31662: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31663: LD_ADDR_VAR 0 4
31667: PUSH
31668: LD_VAR 0 5
31672: PPUSH
31673: LD_VAR 0 1
31677: PPUSH
31678: CALL_OW 248
31682: PPUSH
31683: CALL_OW 450
31687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31688: LD_ADDR_VAR 0 2
31692: PUSH
31693: LD_VAR 0 3
31697: PPUSH
31698: LD_INT 1
31700: PPUSH
31701: CALL_OW 275
31705: PUSH
31706: LD_VAR 0 4
31710: PUSH
31711: LD_INT 1
31713: ARRAY
31714: GREATEREQUAL
31715: PUSH
31716: LD_VAR 0 3
31720: PPUSH
31721: LD_INT 2
31723: PPUSH
31724: CALL_OW 275
31728: PUSH
31729: LD_VAR 0 4
31733: PUSH
31734: LD_INT 2
31736: ARRAY
31737: GREATEREQUAL
31738: AND
31739: PUSH
31740: LD_VAR 0 3
31744: PPUSH
31745: LD_INT 3
31747: PPUSH
31748: CALL_OW 275
31752: PUSH
31753: LD_VAR 0 4
31757: PUSH
31758: LD_INT 3
31760: ARRAY
31761: GREATEREQUAL
31762: AND
31763: ST_TO_ADDR
// end ;
31764: LD_VAR 0 2
31768: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31769: LD_INT 0
31771: PPUSH
31772: PPUSH
31773: PPUSH
// pom := GetBase ( building ) ;
31774: LD_ADDR_VAR 0 4
31778: PUSH
31779: LD_VAR 0 1
31783: PPUSH
31784: CALL_OW 274
31788: ST_TO_ADDR
// if not pom then
31789: LD_VAR 0 4
31793: NOT
31794: IFFALSE 31798
// exit ;
31796: GO 31899
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31798: LD_ADDR_VAR 0 5
31802: PUSH
31803: LD_VAR 0 2
31807: PPUSH
31808: LD_VAR 0 1
31812: PPUSH
31813: CALL_OW 248
31817: PPUSH
31818: CALL_OW 450
31822: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31823: LD_ADDR_VAR 0 3
31827: PUSH
31828: LD_VAR 0 4
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 275
31840: PUSH
31841: LD_VAR 0 5
31845: PUSH
31846: LD_INT 1
31848: ARRAY
31849: GREATEREQUAL
31850: PUSH
31851: LD_VAR 0 4
31855: PPUSH
31856: LD_INT 2
31858: PPUSH
31859: CALL_OW 275
31863: PUSH
31864: LD_VAR 0 5
31868: PUSH
31869: LD_INT 2
31871: ARRAY
31872: GREATEREQUAL
31873: AND
31874: PUSH
31875: LD_VAR 0 4
31879: PPUSH
31880: LD_INT 3
31882: PPUSH
31883: CALL_OW 275
31887: PUSH
31888: LD_VAR 0 5
31892: PUSH
31893: LD_INT 3
31895: ARRAY
31896: GREATEREQUAL
31897: AND
31898: ST_TO_ADDR
// end ;
31899: LD_VAR 0 3
31903: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31904: LD_INT 0
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
31915: PPUSH
// result := false ;
31916: LD_ADDR_VAR 0 6
31920: PUSH
31921: LD_INT 0
31923: ST_TO_ADDR
// if not base or not btype or not x or not y then
31924: LD_VAR 0 1
31928: NOT
31929: PUSH
31930: LD_VAR 0 2
31934: NOT
31935: OR
31936: PUSH
31937: LD_VAR 0 3
31941: NOT
31942: OR
31943: PUSH
31944: LD_VAR 0 4
31948: NOT
31949: OR
31950: IFFALSE 31954
// exit ;
31952: GO 32563
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31954: LD_ADDR_VAR 0 12
31958: PUSH
31959: LD_VAR 0 2
31963: PPUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: LD_VAR 0 4
31973: PPUSH
31974: LD_VAR 0 5
31978: PPUSH
31979: LD_VAR 0 1
31983: PUSH
31984: LD_INT 1
31986: ARRAY
31987: PPUSH
31988: CALL_OW 248
31992: PPUSH
31993: LD_INT 0
31995: PPUSH
31996: CALL 33400 0 6
32000: ST_TO_ADDR
// if not hexes then
32001: LD_VAR 0 12
32005: NOT
32006: IFFALSE 32010
// exit ;
32008: GO 32563
// for i = 1 to hexes do
32010: LD_ADDR_VAR 0 7
32014: PUSH
32015: DOUBLE
32016: LD_INT 1
32018: DEC
32019: ST_TO_ADDR
32020: LD_VAR 0 12
32024: PUSH
32025: FOR_TO
32026: IFFALSE 32561
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32028: LD_ADDR_VAR 0 11
32032: PUSH
32033: LD_VAR 0 12
32037: PUSH
32038: LD_VAR 0 7
32042: ARRAY
32043: PUSH
32044: LD_INT 1
32046: ARRAY
32047: PPUSH
32048: LD_VAR 0 12
32052: PUSH
32053: LD_VAR 0 7
32057: ARRAY
32058: PUSH
32059: LD_INT 2
32061: ARRAY
32062: PPUSH
32063: CALL_OW 428
32067: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32068: LD_VAR 0 12
32072: PUSH
32073: LD_VAR 0 7
32077: ARRAY
32078: PUSH
32079: LD_INT 1
32081: ARRAY
32082: PPUSH
32083: LD_VAR 0 12
32087: PUSH
32088: LD_VAR 0 7
32092: ARRAY
32093: PUSH
32094: LD_INT 2
32096: ARRAY
32097: PPUSH
32098: CALL_OW 351
32102: PUSH
32103: LD_VAR 0 12
32107: PUSH
32108: LD_VAR 0 7
32112: ARRAY
32113: PUSH
32114: LD_INT 1
32116: ARRAY
32117: PPUSH
32118: LD_VAR 0 12
32122: PUSH
32123: LD_VAR 0 7
32127: ARRAY
32128: PUSH
32129: LD_INT 2
32131: ARRAY
32132: PPUSH
32133: CALL_OW 488
32137: NOT
32138: OR
32139: PUSH
32140: LD_VAR 0 11
32144: PPUSH
32145: CALL_OW 247
32149: PUSH
32150: LD_INT 3
32152: EQUAL
32153: OR
32154: IFFALSE 32160
// exit ;
32156: POP
32157: POP
32158: GO 32563
// if not tmp or not tmp in base then
32160: LD_VAR 0 11
32164: NOT
32165: PUSH
32166: LD_VAR 0 11
32170: PUSH
32171: LD_VAR 0 1
32175: IN
32176: NOT
32177: OR
32178: IFFALSE 32182
// continue ;
32180: GO 32025
// result := true ;
32182: LD_ADDR_VAR 0 6
32186: PUSH
32187: LD_INT 1
32189: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32190: LD_ADDR_VAR 0 15
32194: PUSH
32195: LD_VAR 0 1
32199: PPUSH
32200: LD_INT 22
32202: PUSH
32203: LD_VAR 0 11
32207: PPUSH
32208: CALL_OW 255
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 2
32219: PUSH
32220: LD_INT 30
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 30
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PPUSH
32249: CALL_OW 72
32253: ST_TO_ADDR
// if dep then
32254: LD_VAR 0 15
32258: IFFALSE 32394
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32260: LD_ADDR_VAR 0 14
32264: PUSH
32265: LD_VAR 0 15
32269: PUSH
32270: LD_INT 1
32272: ARRAY
32273: PPUSH
32274: CALL_OW 250
32278: PPUSH
32279: LD_VAR 0 15
32283: PUSH
32284: LD_INT 1
32286: ARRAY
32287: PPUSH
32288: CALL_OW 254
32292: PPUSH
32293: LD_INT 5
32295: PPUSH
32296: CALL_OW 272
32300: PUSH
32301: LD_VAR 0 15
32305: PUSH
32306: LD_INT 1
32308: ARRAY
32309: PPUSH
32310: CALL_OW 251
32314: PPUSH
32315: LD_VAR 0 15
32319: PUSH
32320: LD_INT 1
32322: ARRAY
32323: PPUSH
32324: CALL_OW 254
32328: PPUSH
32329: LD_INT 5
32331: PPUSH
32332: CALL_OW 273
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32341: LD_VAR 0 14
32345: PUSH
32346: LD_INT 1
32348: ARRAY
32349: PPUSH
32350: LD_VAR 0 14
32354: PUSH
32355: LD_INT 2
32357: ARRAY
32358: PPUSH
32359: CALL_OW 488
32363: IFFALSE 32394
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32365: LD_VAR 0 11
32369: PPUSH
32370: LD_VAR 0 14
32374: PUSH
32375: LD_INT 1
32377: ARRAY
32378: PPUSH
32379: LD_VAR 0 14
32383: PUSH
32384: LD_INT 2
32386: ARRAY
32387: PPUSH
32388: CALL_OW 111
// continue ;
32392: GO 32025
// end ; end ; r := GetDir ( tmp ) ;
32394: LD_ADDR_VAR 0 13
32398: PUSH
32399: LD_VAR 0 11
32403: PPUSH
32404: CALL_OW 254
32408: ST_TO_ADDR
// if r = 5 then
32409: LD_VAR 0 13
32413: PUSH
32414: LD_INT 5
32416: EQUAL
32417: IFFALSE 32427
// r := 0 ;
32419: LD_ADDR_VAR 0 13
32423: PUSH
32424: LD_INT 0
32426: ST_TO_ADDR
// for j = r to 5 do
32427: LD_ADDR_VAR 0 8
32431: PUSH
32432: DOUBLE
32433: LD_VAR 0 13
32437: DEC
32438: ST_TO_ADDR
32439: LD_INT 5
32441: PUSH
32442: FOR_TO
32443: IFFALSE 32557
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32445: LD_ADDR_VAR 0 9
32449: PUSH
32450: LD_VAR 0 11
32454: PPUSH
32455: CALL_OW 250
32459: PPUSH
32460: LD_VAR 0 8
32464: PPUSH
32465: LD_INT 2
32467: PPUSH
32468: CALL_OW 272
32472: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32473: LD_ADDR_VAR 0 10
32477: PUSH
32478: LD_VAR 0 11
32482: PPUSH
32483: CALL_OW 251
32487: PPUSH
32488: LD_VAR 0 8
32492: PPUSH
32493: LD_INT 2
32495: PPUSH
32496: CALL_OW 273
32500: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32501: LD_VAR 0 9
32505: PPUSH
32506: LD_VAR 0 10
32510: PPUSH
32511: CALL_OW 488
32515: PUSH
32516: LD_VAR 0 9
32520: PPUSH
32521: LD_VAR 0 10
32525: PPUSH
32526: CALL_OW 428
32530: NOT
32531: AND
32532: IFFALSE 32555
// begin ComMoveXY ( tmp , _x , _y ) ;
32534: LD_VAR 0 11
32538: PPUSH
32539: LD_VAR 0 9
32543: PPUSH
32544: LD_VAR 0 10
32548: PPUSH
32549: CALL_OW 111
// break ;
32553: GO 32557
// end ; end ;
32555: GO 32442
32557: POP
32558: POP
// end ;
32559: GO 32025
32561: POP
32562: POP
// end ;
32563: LD_VAR 0 6
32567: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32568: LD_INT 0
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
// result := false ;
32580: LD_ADDR_VAR 0 6
32584: PUSH
32585: LD_INT 0
32587: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32588: LD_VAR 0 1
32592: NOT
32593: PUSH
32594: LD_VAR 0 1
32598: PPUSH
32599: CALL_OW 266
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: IN
32614: NOT
32615: OR
32616: PUSH
32617: LD_VAR 0 2
32621: NOT
32622: OR
32623: PUSH
32624: LD_VAR 0 5
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: LD_INT 4
32643: PUSH
32644: LD_INT 5
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: IN
32655: NOT
32656: OR
32657: PUSH
32658: LD_VAR 0 3
32662: PPUSH
32663: LD_VAR 0 4
32667: PPUSH
32668: CALL_OW 488
32672: NOT
32673: OR
32674: IFFALSE 32678
// exit ;
32676: GO 33395
// pom := GetBase ( depot ) ;
32678: LD_ADDR_VAR 0 10
32682: PUSH
32683: LD_VAR 0 1
32687: PPUSH
32688: CALL_OW 274
32692: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32693: LD_ADDR_VAR 0 11
32697: PUSH
32698: LD_VAR 0 2
32702: PPUSH
32703: LD_VAR 0 1
32707: PPUSH
32708: CALL_OW 248
32712: PPUSH
32713: CALL_OW 450
32717: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32718: LD_VAR 0 10
32722: PPUSH
32723: LD_INT 1
32725: PPUSH
32726: CALL_OW 275
32730: PUSH
32731: LD_VAR 0 11
32735: PUSH
32736: LD_INT 1
32738: ARRAY
32739: GREATEREQUAL
32740: PUSH
32741: LD_VAR 0 10
32745: PPUSH
32746: LD_INT 2
32748: PPUSH
32749: CALL_OW 275
32753: PUSH
32754: LD_VAR 0 11
32758: PUSH
32759: LD_INT 2
32761: ARRAY
32762: GREATEREQUAL
32763: AND
32764: PUSH
32765: LD_VAR 0 10
32769: PPUSH
32770: LD_INT 3
32772: PPUSH
32773: CALL_OW 275
32777: PUSH
32778: LD_VAR 0 11
32782: PUSH
32783: LD_INT 3
32785: ARRAY
32786: GREATEREQUAL
32787: AND
32788: NOT
32789: IFFALSE 32793
// exit ;
32791: GO 33395
// if GetBType ( depot ) = b_depot then
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 266
32802: PUSH
32803: LD_INT 0
32805: EQUAL
32806: IFFALSE 32818
// dist := 28 else
32808: LD_ADDR_VAR 0 14
32812: PUSH
32813: LD_INT 28
32815: ST_TO_ADDR
32816: GO 32826
// dist := 36 ;
32818: LD_ADDR_VAR 0 14
32822: PUSH
32823: LD_INT 36
32825: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32826: LD_VAR 0 1
32830: PPUSH
32831: LD_VAR 0 3
32835: PPUSH
32836: LD_VAR 0 4
32840: PPUSH
32841: CALL_OW 297
32845: PUSH
32846: LD_VAR 0 14
32850: GREATER
32851: IFFALSE 32855
// exit ;
32853: GO 33395
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32855: LD_ADDR_VAR 0 12
32859: PUSH
32860: LD_VAR 0 2
32864: PPUSH
32865: LD_VAR 0 3
32869: PPUSH
32870: LD_VAR 0 4
32874: PPUSH
32875: LD_VAR 0 5
32879: PPUSH
32880: LD_VAR 0 1
32884: PPUSH
32885: CALL_OW 248
32889: PPUSH
32890: LD_INT 0
32892: PPUSH
32893: CALL 33400 0 6
32897: ST_TO_ADDR
// if not hexes then
32898: LD_VAR 0 12
32902: NOT
32903: IFFALSE 32907
// exit ;
32905: GO 33395
// hex := GetHexInfo ( x , y ) ;
32907: LD_ADDR_VAR 0 15
32911: PUSH
32912: LD_VAR 0 3
32916: PPUSH
32917: LD_VAR 0 4
32921: PPUSH
32922: CALL_OW 546
32926: ST_TO_ADDR
// if hex [ 1 ] then
32927: LD_VAR 0 15
32931: PUSH
32932: LD_INT 1
32934: ARRAY
32935: IFFALSE 32939
// exit ;
32937: GO 33395
// height := hex [ 2 ] ;
32939: LD_ADDR_VAR 0 13
32943: PUSH
32944: LD_VAR 0 15
32948: PUSH
32949: LD_INT 2
32951: ARRAY
32952: ST_TO_ADDR
// for i = 1 to hexes do
32953: LD_ADDR_VAR 0 7
32957: PUSH
32958: DOUBLE
32959: LD_INT 1
32961: DEC
32962: ST_TO_ADDR
32963: LD_VAR 0 12
32967: PUSH
32968: FOR_TO
32969: IFFALSE 33299
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32971: LD_VAR 0 12
32975: PUSH
32976: LD_VAR 0 7
32980: ARRAY
32981: PUSH
32982: LD_INT 1
32984: ARRAY
32985: PPUSH
32986: LD_VAR 0 12
32990: PUSH
32991: LD_VAR 0 7
32995: ARRAY
32996: PUSH
32997: LD_INT 2
32999: ARRAY
33000: PPUSH
33001: CALL_OW 488
33005: NOT
33006: PUSH
33007: LD_VAR 0 12
33011: PUSH
33012: LD_VAR 0 7
33016: ARRAY
33017: PUSH
33018: LD_INT 1
33020: ARRAY
33021: PPUSH
33022: LD_VAR 0 12
33026: PUSH
33027: LD_VAR 0 7
33031: ARRAY
33032: PUSH
33033: LD_INT 2
33035: ARRAY
33036: PPUSH
33037: CALL_OW 428
33041: PUSH
33042: LD_INT 0
33044: GREATER
33045: OR
33046: PUSH
33047: LD_VAR 0 12
33051: PUSH
33052: LD_VAR 0 7
33056: ARRAY
33057: PUSH
33058: LD_INT 1
33060: ARRAY
33061: PPUSH
33062: LD_VAR 0 12
33066: PUSH
33067: LD_VAR 0 7
33071: ARRAY
33072: PUSH
33073: LD_INT 2
33075: ARRAY
33076: PPUSH
33077: CALL_OW 351
33081: OR
33082: IFFALSE 33088
// exit ;
33084: POP
33085: POP
33086: GO 33395
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33088: LD_ADDR_VAR 0 8
33092: PUSH
33093: LD_VAR 0 12
33097: PUSH
33098: LD_VAR 0 7
33102: ARRAY
33103: PUSH
33104: LD_INT 1
33106: ARRAY
33107: PPUSH
33108: LD_VAR 0 12
33112: PUSH
33113: LD_VAR 0 7
33117: ARRAY
33118: PUSH
33119: LD_INT 2
33121: ARRAY
33122: PPUSH
33123: CALL_OW 546
33127: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33128: LD_VAR 0 8
33132: PUSH
33133: LD_INT 1
33135: ARRAY
33136: PUSH
33137: LD_VAR 0 8
33141: PUSH
33142: LD_INT 2
33144: ARRAY
33145: PUSH
33146: LD_VAR 0 13
33150: PUSH
33151: LD_INT 2
33153: PLUS
33154: GREATER
33155: OR
33156: PUSH
33157: LD_VAR 0 8
33161: PUSH
33162: LD_INT 2
33164: ARRAY
33165: PUSH
33166: LD_VAR 0 13
33170: PUSH
33171: LD_INT 2
33173: MINUS
33174: LESS
33175: OR
33176: PUSH
33177: LD_VAR 0 8
33181: PUSH
33182: LD_INT 3
33184: ARRAY
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: LD_INT 8
33191: PUSH
33192: LD_INT 9
33194: PUSH
33195: LD_INT 10
33197: PUSH
33198: LD_INT 11
33200: PUSH
33201: LD_INT 12
33203: PUSH
33204: LD_INT 13
33206: PUSH
33207: LD_INT 16
33209: PUSH
33210: LD_INT 17
33212: PUSH
33213: LD_INT 18
33215: PUSH
33216: LD_INT 19
33218: PUSH
33219: LD_INT 20
33221: PUSH
33222: LD_INT 21
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: IN
33240: NOT
33241: OR
33242: PUSH
33243: LD_VAR 0 8
33247: PUSH
33248: LD_INT 5
33250: ARRAY
33251: NOT
33252: OR
33253: PUSH
33254: LD_VAR 0 8
33258: PUSH
33259: LD_INT 6
33261: ARRAY
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: LD_INT 2
33268: PUSH
33269: LD_INT 7
33271: PUSH
33272: LD_INT 9
33274: PUSH
33275: LD_INT 10
33277: PUSH
33278: LD_INT 11
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: IN
33289: NOT
33290: OR
33291: IFFALSE 33297
// exit ;
33293: POP
33294: POP
33295: GO 33395
// end ;
33297: GO 32968
33299: POP
33300: POP
// side := GetSide ( depot ) ;
33301: LD_ADDR_VAR 0 9
33305: PUSH
33306: LD_VAR 0 1
33310: PPUSH
33311: CALL_OW 255
33315: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33316: LD_VAR 0 9
33320: PPUSH
33321: LD_VAR 0 3
33325: PPUSH
33326: LD_VAR 0 4
33330: PPUSH
33331: LD_INT 20
33333: PPUSH
33334: CALL 26049 0 4
33338: PUSH
33339: LD_INT 4
33341: ARRAY
33342: IFFALSE 33346
// exit ;
33344: GO 33395
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33346: LD_VAR 0 2
33350: PUSH
33351: LD_INT 29
33353: PUSH
33354: LD_INT 30
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: IN
33361: PUSH
33362: LD_VAR 0 3
33366: PPUSH
33367: LD_VAR 0 4
33371: PPUSH
33372: LD_VAR 0 9
33376: PPUSH
33377: CALL_OW 440
33381: NOT
33382: AND
33383: IFFALSE 33387
// exit ;
33385: GO 33395
// result := true ;
33387: LD_ADDR_VAR 0 6
33391: PUSH
33392: LD_INT 1
33394: ST_TO_ADDR
// end ;
33395: LD_VAR 0 6
33399: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33400: LD_INT 0
33402: PPUSH
33403: PPUSH
33404: PPUSH
33405: PPUSH
33406: PPUSH
33407: PPUSH
33408: PPUSH
33409: PPUSH
33410: PPUSH
33411: PPUSH
33412: PPUSH
33413: PPUSH
33414: PPUSH
33415: PPUSH
33416: PPUSH
33417: PPUSH
33418: PPUSH
33419: PPUSH
33420: PPUSH
33421: PPUSH
33422: PPUSH
33423: PPUSH
33424: PPUSH
33425: PPUSH
33426: PPUSH
33427: PPUSH
33428: PPUSH
33429: PPUSH
33430: PPUSH
33431: PPUSH
33432: PPUSH
33433: PPUSH
33434: PPUSH
33435: PPUSH
33436: PPUSH
33437: PPUSH
33438: PPUSH
33439: PPUSH
33440: PPUSH
33441: PPUSH
33442: PPUSH
33443: PPUSH
33444: PPUSH
33445: PPUSH
33446: PPUSH
33447: PPUSH
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
33453: PPUSH
33454: PPUSH
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
33459: PPUSH
// result = [ ] ;
33460: LD_ADDR_VAR 0 7
33464: PUSH
33465: EMPTY
33466: ST_TO_ADDR
// temp_list = [ ] ;
33467: LD_ADDR_VAR 0 9
33471: PUSH
33472: EMPTY
33473: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33474: LD_VAR 0 4
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 2
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: LD_INT 4
33493: PUSH
33494: LD_INT 5
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: IN
33505: NOT
33506: PUSH
33507: LD_VAR 0 1
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: IN
33522: PUSH
33523: LD_VAR 0 5
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: LD_INT 2
33533: PUSH
33534: LD_INT 3
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: IN
33542: NOT
33543: AND
33544: OR
33545: IFFALSE 33549
// exit ;
33547: GO 51940
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33549: LD_VAR 0 1
33553: PUSH
33554: LD_INT 6
33556: PUSH
33557: LD_INT 7
33559: PUSH
33560: LD_INT 8
33562: PUSH
33563: LD_INT 13
33565: PUSH
33566: LD_INT 12
33568: PUSH
33569: LD_INT 15
33571: PUSH
33572: LD_INT 11
33574: PUSH
33575: LD_INT 14
33577: PUSH
33578: LD_INT 10
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: IN
33592: IFFALSE 33602
// btype = b_lab ;
33594: LD_ADDR_VAR 0 1
33598: PUSH
33599: LD_INT 6
33601: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33602: LD_VAR 0 6
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: IN
33621: NOT
33622: PUSH
33623: LD_VAR 0 1
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: LD_INT 6
33642: PUSH
33643: LD_INT 36
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: LD_INT 5
33651: PUSH
33652: LD_INT 31
33654: PUSH
33655: LD_INT 32
33657: PUSH
33658: LD_INT 33
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: IN
33674: NOT
33675: PUSH
33676: LD_VAR 0 6
33680: PUSH
33681: LD_INT 1
33683: EQUAL
33684: AND
33685: OR
33686: PUSH
33687: LD_VAR 0 1
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: LD_INT 3
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: IN
33702: NOT
33703: PUSH
33704: LD_VAR 0 6
33708: PUSH
33709: LD_INT 2
33711: EQUAL
33712: AND
33713: OR
33714: IFFALSE 33724
// mode = 0 ;
33716: LD_ADDR_VAR 0 6
33720: PUSH
33721: LD_INT 0
33723: ST_TO_ADDR
// case mode of 0 :
33724: LD_VAR 0 6
33728: PUSH
33729: LD_INT 0
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33737
33735: GO 45190
33737: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33738: LD_ADDR_VAR 0 11
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 1
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33931: LD_ADDR_VAR 0 12
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: LD_INT 1
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 3
34088: NEG
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 3
34099: NEG
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34127: LD_ADDR_VAR 0 13
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: NEG
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 2
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: LD_INT 2
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 2
34250: NEG
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 2
34262: NEG
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: LD_INT 3
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: LD_INT 3
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34326: LD_ADDR_VAR 0 14
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 3
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 2
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34522: LD_ADDR_VAR 0 15
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: NEG
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34715: LD_ADDR_VAR 0 16
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 2
34850: NEG
34851: PUSH
34852: LD_INT 2
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 3
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: LD_INT 3
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: LD_INT 3
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34908: LD_ADDR_VAR 0 17
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: NEG
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: NEG
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35138: LD_ADDR_VAR 0 18
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 2
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 2
35337: NEG
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35368: LD_ADDR_VAR 0 19
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: LD_INT 2
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: LD_INT 1
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 2
35555: NEG
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35598: LD_ADDR_VAR 0 20
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: LD_INT 2
35683: NEG
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: LD_INT 2
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: LD_INT 2
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 2
35774: NEG
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: NEG
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35828: LD_ADDR_VAR 0 21
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 2
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: NEG
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: LD_INT 2
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36058: LD_ADDR_VAR 0 22
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 2
36234: NEG
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 2
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: NEG
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36288: LD_ADDR_VAR 0 23
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 2
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 2
36464: NEG
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 3
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 3
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36568: LD_ADDR_VAR 0 24
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: NEG
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 3
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 3
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36844: LD_ADDR_VAR 0 25
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 2
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 2
37020: NEG
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: NEG
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 3
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 3
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 3
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37118: LD_ADDR_VAR 0 26
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 2
37305: NEG
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: LD_INT 2
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: LD_INT 3
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 3
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37394: LD_ADDR_VAR 0 27
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 2
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: NEG
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 3
37627: NEG
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 3
37639: NEG
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37674: LD_ADDR_VAR 0 28
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: NEG
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: NEG
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: LD_INT 3
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 3
37909: NEG
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 3
37921: NEG
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37956: LD_ADDR_VAR 0 29
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: NEG
38147: PUSH
38148: LD_INT 3
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 1
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: LD_INT 3
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 3
38200: NEG
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38235: LD_ADDR_VAR 0 30
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: LD_INT 2
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 3
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 3
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 3
38478: NEG
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38513: LD_ADDR_VAR 0 31
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: LD_INT 3
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 3
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38791: LD_ADDR_VAR 0 32
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 3
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 3
39034: NEG
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39069: LD_ADDR_VAR 0 33
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 2
39235: NEG
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: LD_INT 3
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 3
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: LD_INT 3
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 3
39313: NEG
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39348: LD_ADDR_VAR 0 34
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 3
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 3
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 3
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39628: LD_ADDR_VAR 0 35
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39740: LD_ADDR_VAR 0 36
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39852: LD_ADDR_VAR 0 37
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39964: LD_ADDR_VAR 0 38
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: NEG
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40076: LD_ADDR_VAR 0 39
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40188: LD_ADDR_VAR 0 40
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40300: LD_ADDR_VAR 0 41
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 2
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: NEG
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 2
40466: NEG
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: LD_INT 2
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: LD_INT 3
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 3
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 3
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: LD_INT 3
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 3
40585: NEG
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 3
40597: NEG
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 3
40609: NEG
40610: PUSH
40611: LD_INT 3
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40650: LD_ADDR_VAR 0 42
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: LD_INT 3
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 3
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: LD_INT 3
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: LD_INT 3
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 3
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 3
40947: NEG
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 3
40959: NEG
40960: PUSH
40961: LD_INT 3
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41000: LD_ADDR_VAR 0 43
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: NEG
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 3
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 3
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 3
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: LD_INT 3
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 3
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 3
41296: NEG
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 3
41307: NEG
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41348: LD_ADDR_VAR 0 44
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: LD_INT 3
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 3
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 3
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 3
41591: PUSH
41592: LD_INT 3
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: LD_INT 3
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 3
41622: NEG
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 3
41645: NEG
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 3
41657: NEG
41658: PUSH
41659: LD_INT 3
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41698: LD_ADDR_VAR 0 45
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: LD_INT 2
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 2
41888: NEG
41889: PUSH
41890: LD_INT 3
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 3
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 3
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: LD_INT 3
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 3
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 3
41995: NEG
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 3
42007: NEG
42008: PUSH
42009: LD_INT 3
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42048: LD_ADDR_VAR 0 46
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 3
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 3
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 3
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: LD_INT 3
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 3
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 3
42344: NEG
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 3
42355: NEG
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42396: LD_ADDR_VAR 0 47
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42547: LD_ADDR_VAR 0 48
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42694: LD_ADDR_VAR 0 49
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42838: LD_ADDR_VAR 0 50
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42982: LD_ADDR_VAR 0 51
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43129: LD_ADDR_VAR 0 52
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43280: LD_ADDR_VAR 0 53
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: LD_INT 2
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43510: LD_ADDR_VAR 0 54
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43740: LD_ADDR_VAR 0 55
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43970: LD_ADDR_VAR 0 56
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44200: LD_ADDR_VAR 0 57
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44430: LD_ADDR_VAR 0 58
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44660: LD_ADDR_VAR 0 59
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44748: LD_ADDR_VAR 0 60
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44836: LD_ADDR_VAR 0 61
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44924: LD_ADDR_VAR 0 62
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45012: LD_ADDR_VAR 0 63
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45100: LD_ADDR_VAR 0 64
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// end ; 1 :
45188: GO 51085
45190: LD_INT 1
45192: DOUBLE
45193: EQUAL
45194: IFTRUE 45198
45196: GO 47821
45198: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45199: LD_ADDR_VAR 0 11
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 3
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 3
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45243: LD_ADDR_VAR 0 12
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 3
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45284: LD_ADDR_VAR 0 13
45288: PUSH
45289: LD_INT 3
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 3
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: LD_INT 3
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45324: LD_ADDR_VAR 0 14
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45365: LD_ADDR_VAR 0 15
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 3
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: LIST
45408: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45409: LD_ADDR_VAR 0 16
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 3
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 3
45440: NEG
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: LIST
45454: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45455: LD_ADDR_VAR 0 17
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 3
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45499: LD_ADDR_VAR 0 18
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 3
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 3
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: LIST
45539: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45540: LD_ADDR_VAR 0 19
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 3
45557: PUSH
45558: LD_INT 3
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: LD_INT 3
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45580: LD_ADDR_VAR 0 20
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 3
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45621: LD_ADDR_VAR 0 21
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 3
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45665: LD_ADDR_VAR 0 22
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 3
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45711: LD_ADDR_VAR 0 23
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 3
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 4
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 3
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45755: LD_ADDR_VAR 0 24
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 3
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 4
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45796: LD_ADDR_VAR 0 25
45800: PUSH
45801: LD_INT 3
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 4
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: LD_INT 4
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45836: LD_ADDR_VAR 0 26
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 3
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 4
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 3
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: LIST
45876: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45877: LD_ADDR_VAR 0 27
45881: PUSH
45882: LD_INT 3
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 4
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45921: LD_ADDR_VAR 0 28
45925: PUSH
45926: LD_INT 3
45928: NEG
45929: PUSH
45930: LD_INT 3
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: LD_INT 4
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 4
45952: NEG
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45967: LD_ADDR_VAR 0 29
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 3
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 4
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 4
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 5
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 5
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 4
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 6
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 6
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 5
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46122: LD_ADDR_VAR 0 30
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 3
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 3
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 4
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 4
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 4
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 5
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 5
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 5
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 6
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 6
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46265: LD_ADDR_VAR 0 31
46269: PUSH
46270: LD_INT 3
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 4
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 4
46312: PUSH
46313: LD_INT 4
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: PUSH
46323: LD_INT 4
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 5
46332: PUSH
46333: LD_INT 4
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 5
46342: PUSH
46343: LD_INT 5
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 4
46352: PUSH
46353: LD_INT 5
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 6
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 6
46372: PUSH
46373: LD_INT 6
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 5
46382: PUSH
46383: LD_INT 6
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46404: LD_ADDR_VAR 0 32
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 3
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 4
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 4
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 5
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 5
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 4
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 6
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 6
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 5
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46547: LD_ADDR_VAR 0 33
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 3
46588: NEG
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 4
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 4
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 4
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 5
46633: NEG
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 5
46644: NEG
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 5
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 6
46667: NEG
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 6
46678: NEG
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46702: LD_ADDR_VAR 0 34
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: LD_INT 3
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: NEG
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: LD_INT 3
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 3
46745: NEG
46746: PUSH
46747: LD_INT 4
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 4
46757: NEG
46758: PUSH
46759: LD_INT 3
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 4
46769: NEG
46770: PUSH
46771: LD_INT 4
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 4
46781: NEG
46782: PUSH
46783: LD_INT 5
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 5
46793: NEG
46794: PUSH
46795: LD_INT 4
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 5
46805: NEG
46806: PUSH
46807: LD_INT 5
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 5
46817: NEG
46818: PUSH
46819: LD_INT 6
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 6
46829: NEG
46830: PUSH
46831: LD_INT 5
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 6
46841: NEG
46842: PUSH
46843: LD_INT 6
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46865: LD_ADDR_VAR 0 41
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: LIST
46908: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46909: LD_ADDR_VAR 0 42
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46950: LD_ADDR_VAR 0 43
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46990: LD_ADDR_VAR 0 44
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 3
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47031: LD_ADDR_VAR 0 45
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47075: LD_ADDR_VAR 0 46
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47121: LD_ADDR_VAR 0 47
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47154: LD_ADDR_VAR 0 48
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47185: LD_ADDR_VAR 0 49
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47214: LD_ADDR_VAR 0 50
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 3
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47243: LD_ADDR_VAR 0 51
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47274: LD_ADDR_VAR 0 52
47278: PUSH
47279: LD_INT 3
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: NEG
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47307: LD_ADDR_VAR 0 53
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 3
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 3
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47351: LD_ADDR_VAR 0 54
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47392: LD_ADDR_VAR 0 55
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 3
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47432: LD_ADDR_VAR 0 56
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47473: LD_ADDR_VAR 0 57
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47517: LD_ADDR_VAR 0 58
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 3
47536: NEG
47537: PUSH
47538: LD_INT 2
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: NEG
47549: PUSH
47550: LD_INT 3
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47563: LD_ADDR_VAR 0 59
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47607: LD_ADDR_VAR 0 60
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47648: LD_ADDR_VAR 0 61
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47688: LD_ADDR_VAR 0 62
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47729: LD_ADDR_VAR 0 63
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47773: LD_ADDR_VAR 0 64
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// end ; 2 :
47819: GO 51085
47821: LD_INT 2
47823: DOUBLE
47824: EQUAL
47825: IFTRUE 47829
47827: GO 51084
47829: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47830: LD_ADDR_VAR 0 29
47834: PUSH
47835: LD_INT 4
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 4
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 5
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 5
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 4
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 5
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 3
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 4
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 4
47960: PUSH
47961: LD_INT 4
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 3
47970: PUSH
47971: LD_INT 4
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: LD_INT 3
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 4
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 4
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 4
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 4
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 5
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 5
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 4
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 5
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 3
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 4
48169: NEG
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 4
48180: NEG
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 4
48192: NEG
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 4
48215: NEG
48216: PUSH
48217: LD_INT 4
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 4
48227: NEG
48228: PUSH
48229: LD_INT 5
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: NEG
48240: PUSH
48241: LD_INT 4
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 3
48251: NEG
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 4
48263: NEG
48264: PUSH
48265: LD_INT 3
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 5
48275: NEG
48276: PUSH
48277: LD_INT 4
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 5
48287: NEG
48288: PUSH
48289: LD_INT 5
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: LD_INT 5
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 5
48311: NEG
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48368: LD_ADDR_VAR 0 30
48372: PUSH
48373: LD_INT 4
48375: PUSH
48376: LD_INT 4
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 4
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 5
48395: PUSH
48396: LD_INT 4
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 5
48405: PUSH
48406: LD_INT 5
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 4
48415: PUSH
48416: LD_INT 5
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: LD_INT 4
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 5
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: PUSH
48456: LD_INT 5
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 3
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 4
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 4
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 4
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 4
48558: NEG
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 4
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 3
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 4
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 5
48614: NEG
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 5
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 5
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: NEG
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: NEG
48673: PUSH
48674: LD_INT 4
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 3
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 3
48708: NEG
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 4
48720: NEG
48721: PUSH
48722: LD_INT 3
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 4
48732: NEG
48733: PUSH
48734: LD_INT 4
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 4
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 4
48756: NEG
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 4
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 5
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 4
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 3
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 3
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 4
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 5
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 3
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: LD_INT 5
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48915: LD_ADDR_VAR 0 31
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 4
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: LD_INT 4
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 5
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 5
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 4
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 5
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 3
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 3
49015: NEG
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 3
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 4
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 4
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 4
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 4
49117: NEG
49118: PUSH
49119: LD_INT 4
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 4
49129: NEG
49130: PUSH
49131: LD_INT 5
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: LD_INT 4
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 3
49153: NEG
49154: PUSH
49155: LD_INT 3
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 4
49165: NEG
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 5
49177: NEG
49178: PUSH
49179: LD_INT 4
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 5
49189: NEG
49190: PUSH
49191: LD_INT 5
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 3
49201: NEG
49202: PUSH
49203: LD_INT 5
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 5
49213: NEG
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 3
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 4
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 3
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: LD_INT 4
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 4
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 4
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 4
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 5
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 5
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 4
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 3
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 5
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49465: LD_ADDR_VAR 0 32
49469: PUSH
49470: LD_INT 4
49472: NEG
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 4
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 4
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 5
49528: NEG
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 5
49539: NEG
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 5
49551: NEG
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 3
49586: NEG
49587: PUSH
49588: LD_INT 4
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: LD_INT 3
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 4
49634: NEG
49635: PUSH
49636: LD_INT 3
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 4
49646: NEG
49647: PUSH
49648: LD_INT 4
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 4
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 4
49670: NEG
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 4
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 5
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 4
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 3
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: LD_INT 4
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 5
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 5
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 3
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 3
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 4
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 4
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 4
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 4
49877: PUSH
49878: LD_INT 4
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 4
49887: PUSH
49888: LD_INT 3
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 5
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 5
49907: PUSH
49908: LD_INT 5
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 4
49917: PUSH
49918: LD_INT 5
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 3
49927: PUSH
49928: LD_INT 4
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 5
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: LD_INT 5
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50012: LD_ADDR_VAR 0 33
50016: PUSH
50017: LD_INT 4
50019: NEG
50020: PUSH
50021: LD_INT 4
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 4
50031: NEG
50032: PUSH
50033: LD_INT 5
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 4
50067: NEG
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 5
50079: NEG
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 5
50091: NEG
50092: PUSH
50093: LD_INT 5
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: LD_INT 5
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 5
50115: NEG
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 3
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 3
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 4
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: LD_INT 4
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 4
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 4
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 5
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 5
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 4
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 5
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 3
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 3
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 4
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 4
50352: PUSH
50353: LD_INT 4
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 3
50362: PUSH
50363: LD_INT 4
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 3
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 4
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 4
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 4
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 4
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 5
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 5
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 4
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 3
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 5
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: LD_INT 3
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50550: LD_ADDR_VAR 0 34
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 4
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 5
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 4
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 4
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 5
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 3
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 5
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 4
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 4
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 4
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 4
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 4
50762: PUSH
50763: LD_INT 3
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 5
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 5
50782: PUSH
50783: LD_INT 5
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: LD_INT 5
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: LD_INT 4
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 5
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: LD_INT 5
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 4
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 4
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 4
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 4
50935: NEG
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 4
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 4
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 5
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 5
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 5
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// end ; end ;
51082: GO 51085
51084: POP
// case btype of b_depot , b_warehouse :
51085: LD_VAR 0 1
51089: PUSH
51090: LD_INT 0
51092: DOUBLE
51093: EQUAL
51094: IFTRUE 51104
51096: LD_INT 1
51098: DOUBLE
51099: EQUAL
51100: IFTRUE 51104
51102: GO 51305
51104: POP
// case nation of nation_american :
51105: LD_VAR 0 5
51109: PUSH
51110: LD_INT 1
51112: DOUBLE
51113: EQUAL
51114: IFTRUE 51118
51116: GO 51174
51118: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51119: LD_ADDR_VAR 0 9
51123: PUSH
51124: LD_VAR 0 11
51128: PUSH
51129: LD_VAR 0 12
51133: PUSH
51134: LD_VAR 0 13
51138: PUSH
51139: LD_VAR 0 14
51143: PUSH
51144: LD_VAR 0 15
51148: PUSH
51149: LD_VAR 0 16
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: PUSH
51162: LD_VAR 0 4
51166: PUSH
51167: LD_INT 1
51169: PLUS
51170: ARRAY
51171: ST_TO_ADDR
51172: GO 51303
51174: LD_INT 2
51176: DOUBLE
51177: EQUAL
51178: IFTRUE 51182
51180: GO 51238
51182: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51183: LD_ADDR_VAR 0 9
51187: PUSH
51188: LD_VAR 0 17
51192: PUSH
51193: LD_VAR 0 18
51197: PUSH
51198: LD_VAR 0 19
51202: PUSH
51203: LD_VAR 0 20
51207: PUSH
51208: LD_VAR 0 21
51212: PUSH
51213: LD_VAR 0 22
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: PUSH
51226: LD_VAR 0 4
51230: PUSH
51231: LD_INT 1
51233: PLUS
51234: ARRAY
51235: ST_TO_ADDR
51236: GO 51303
51238: LD_INT 3
51240: DOUBLE
51241: EQUAL
51242: IFTRUE 51246
51244: GO 51302
51246: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51247: LD_ADDR_VAR 0 9
51251: PUSH
51252: LD_VAR 0 23
51256: PUSH
51257: LD_VAR 0 24
51261: PUSH
51262: LD_VAR 0 25
51266: PUSH
51267: LD_VAR 0 26
51271: PUSH
51272: LD_VAR 0 27
51276: PUSH
51277: LD_VAR 0 28
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: PUSH
51290: LD_VAR 0 4
51294: PUSH
51295: LD_INT 1
51297: PLUS
51298: ARRAY
51299: ST_TO_ADDR
51300: GO 51303
51302: POP
51303: GO 51858
51305: LD_INT 2
51307: DOUBLE
51308: EQUAL
51309: IFTRUE 51319
51311: LD_INT 3
51313: DOUBLE
51314: EQUAL
51315: IFTRUE 51319
51317: GO 51375
51319: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51320: LD_ADDR_VAR 0 9
51324: PUSH
51325: LD_VAR 0 29
51329: PUSH
51330: LD_VAR 0 30
51334: PUSH
51335: LD_VAR 0 31
51339: PUSH
51340: LD_VAR 0 32
51344: PUSH
51345: LD_VAR 0 33
51349: PUSH
51350: LD_VAR 0 34
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: PUSH
51363: LD_VAR 0 4
51367: PUSH
51368: LD_INT 1
51370: PLUS
51371: ARRAY
51372: ST_TO_ADDR
51373: GO 51858
51375: LD_INT 16
51377: DOUBLE
51378: EQUAL
51379: IFTRUE 51437
51381: LD_INT 17
51383: DOUBLE
51384: EQUAL
51385: IFTRUE 51437
51387: LD_INT 18
51389: DOUBLE
51390: EQUAL
51391: IFTRUE 51437
51393: LD_INT 19
51395: DOUBLE
51396: EQUAL
51397: IFTRUE 51437
51399: LD_INT 22
51401: DOUBLE
51402: EQUAL
51403: IFTRUE 51437
51405: LD_INT 20
51407: DOUBLE
51408: EQUAL
51409: IFTRUE 51437
51411: LD_INT 21
51413: DOUBLE
51414: EQUAL
51415: IFTRUE 51437
51417: LD_INT 23
51419: DOUBLE
51420: EQUAL
51421: IFTRUE 51437
51423: LD_INT 24
51425: DOUBLE
51426: EQUAL
51427: IFTRUE 51437
51429: LD_INT 25
51431: DOUBLE
51432: EQUAL
51433: IFTRUE 51437
51435: GO 51493
51437: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51438: LD_ADDR_VAR 0 9
51442: PUSH
51443: LD_VAR 0 35
51447: PUSH
51448: LD_VAR 0 36
51452: PUSH
51453: LD_VAR 0 37
51457: PUSH
51458: LD_VAR 0 38
51462: PUSH
51463: LD_VAR 0 39
51467: PUSH
51468: LD_VAR 0 40
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: PUSH
51481: LD_VAR 0 4
51485: PUSH
51486: LD_INT 1
51488: PLUS
51489: ARRAY
51490: ST_TO_ADDR
51491: GO 51858
51493: LD_INT 6
51495: DOUBLE
51496: EQUAL
51497: IFTRUE 51549
51499: LD_INT 7
51501: DOUBLE
51502: EQUAL
51503: IFTRUE 51549
51505: LD_INT 8
51507: DOUBLE
51508: EQUAL
51509: IFTRUE 51549
51511: LD_INT 13
51513: DOUBLE
51514: EQUAL
51515: IFTRUE 51549
51517: LD_INT 12
51519: DOUBLE
51520: EQUAL
51521: IFTRUE 51549
51523: LD_INT 15
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51549
51529: LD_INT 11
51531: DOUBLE
51532: EQUAL
51533: IFTRUE 51549
51535: LD_INT 14
51537: DOUBLE
51538: EQUAL
51539: IFTRUE 51549
51541: LD_INT 10
51543: DOUBLE
51544: EQUAL
51545: IFTRUE 51549
51547: GO 51605
51549: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
51550: LD_ADDR_VAR 0 9
51554: PUSH
51555: LD_VAR 0 41
51559: PUSH
51560: LD_VAR 0 42
51564: PUSH
51565: LD_VAR 0 43
51569: PUSH
51570: LD_VAR 0 44
51574: PUSH
51575: LD_VAR 0 45
51579: PUSH
51580: LD_VAR 0 46
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: PUSH
51593: LD_VAR 0 4
51597: PUSH
51598: LD_INT 1
51600: PLUS
51601: ARRAY
51602: ST_TO_ADDR
51603: GO 51858
51605: LD_INT 36
51607: DOUBLE
51608: EQUAL
51609: IFTRUE 51613
51611: GO 51669
51613: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51614: LD_ADDR_VAR 0 9
51618: PUSH
51619: LD_VAR 0 47
51623: PUSH
51624: LD_VAR 0 48
51628: PUSH
51629: LD_VAR 0 49
51633: PUSH
51634: LD_VAR 0 50
51638: PUSH
51639: LD_VAR 0 51
51643: PUSH
51644: LD_VAR 0 52
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: PUSH
51657: LD_VAR 0 4
51661: PUSH
51662: LD_INT 1
51664: PLUS
51665: ARRAY
51666: ST_TO_ADDR
51667: GO 51858
51669: LD_INT 4
51671: DOUBLE
51672: EQUAL
51673: IFTRUE 51695
51675: LD_INT 5
51677: DOUBLE
51678: EQUAL
51679: IFTRUE 51695
51681: LD_INT 34
51683: DOUBLE
51684: EQUAL
51685: IFTRUE 51695
51687: LD_INT 37
51689: DOUBLE
51690: EQUAL
51691: IFTRUE 51695
51693: GO 51751
51695: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51696: LD_ADDR_VAR 0 9
51700: PUSH
51701: LD_VAR 0 53
51705: PUSH
51706: LD_VAR 0 54
51710: PUSH
51711: LD_VAR 0 55
51715: PUSH
51716: LD_VAR 0 56
51720: PUSH
51721: LD_VAR 0 57
51725: PUSH
51726: LD_VAR 0 58
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: PUSH
51739: LD_VAR 0 4
51743: PUSH
51744: LD_INT 1
51746: PLUS
51747: ARRAY
51748: ST_TO_ADDR
51749: GO 51858
51751: LD_INT 31
51753: DOUBLE
51754: EQUAL
51755: IFTRUE 51801
51757: LD_INT 32
51759: DOUBLE
51760: EQUAL
51761: IFTRUE 51801
51763: LD_INT 33
51765: DOUBLE
51766: EQUAL
51767: IFTRUE 51801
51769: LD_INT 27
51771: DOUBLE
51772: EQUAL
51773: IFTRUE 51801
51775: LD_INT 26
51777: DOUBLE
51778: EQUAL
51779: IFTRUE 51801
51781: LD_INT 28
51783: DOUBLE
51784: EQUAL
51785: IFTRUE 51801
51787: LD_INT 29
51789: DOUBLE
51790: EQUAL
51791: IFTRUE 51801
51793: LD_INT 30
51795: DOUBLE
51796: EQUAL
51797: IFTRUE 51801
51799: GO 51857
51801: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
51802: LD_ADDR_VAR 0 9
51806: PUSH
51807: LD_VAR 0 59
51811: PUSH
51812: LD_VAR 0 60
51816: PUSH
51817: LD_VAR 0 61
51821: PUSH
51822: LD_VAR 0 62
51826: PUSH
51827: LD_VAR 0 63
51831: PUSH
51832: LD_VAR 0 64
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: PUSH
51845: LD_VAR 0 4
51849: PUSH
51850: LD_INT 1
51852: PLUS
51853: ARRAY
51854: ST_TO_ADDR
51855: GO 51858
51857: POP
// temp_list2 = [ ] ;
51858: LD_ADDR_VAR 0 10
51862: PUSH
51863: EMPTY
51864: ST_TO_ADDR
// for i in temp_list do
51865: LD_ADDR_VAR 0 8
51869: PUSH
51870: LD_VAR 0 9
51874: PUSH
51875: FOR_IN
51876: IFFALSE 51928
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51878: LD_ADDR_VAR 0 10
51882: PUSH
51883: LD_VAR 0 10
51887: PUSH
51888: LD_VAR 0 8
51892: PUSH
51893: LD_INT 1
51895: ARRAY
51896: PUSH
51897: LD_VAR 0 2
51901: PLUS
51902: PUSH
51903: LD_VAR 0 8
51907: PUSH
51908: LD_INT 2
51910: ARRAY
51911: PUSH
51912: LD_VAR 0 3
51916: PLUS
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: ADD
51925: ST_TO_ADDR
51926: GO 51875
51928: POP
51929: POP
// result = temp_list2 ;
51930: LD_ADDR_VAR 0 7
51934: PUSH
51935: LD_VAR 0 10
51939: ST_TO_ADDR
// end ;
51940: LD_VAR 0 7
51944: RET
// export function EnemyInRange ( unit , dist ) ; begin
51945: LD_INT 0
51947: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51948: LD_ADDR_VAR 0 3
51952: PUSH
51953: LD_VAR 0 1
51957: PPUSH
51958: CALL_OW 255
51962: PPUSH
51963: LD_VAR 0 1
51967: PPUSH
51968: CALL_OW 250
51972: PPUSH
51973: LD_VAR 0 1
51977: PPUSH
51978: CALL_OW 251
51982: PPUSH
51983: LD_VAR 0 2
51987: PPUSH
51988: CALL 26049 0 4
51992: PUSH
51993: LD_INT 4
51995: ARRAY
51996: ST_TO_ADDR
// end ;
51997: LD_VAR 0 3
52001: RET
// export function PlayerSeeMe ( unit ) ; begin
52002: LD_INT 0
52004: PPUSH
// result := See ( your_side , unit ) ;
52005: LD_ADDR_VAR 0 2
52009: PUSH
52010: LD_OWVAR 2
52014: PPUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 292
52024: ST_TO_ADDR
// end ;
52025: LD_VAR 0 2
52029: RET
// export function ReverseDir ( unit ) ; begin
52030: LD_INT 0
52032: PPUSH
// if not unit then
52033: LD_VAR 0 1
52037: NOT
52038: IFFALSE 52042
// exit ;
52040: GO 52065
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52042: LD_ADDR_VAR 0 2
52046: PUSH
52047: LD_VAR 0 1
52051: PPUSH
52052: CALL_OW 254
52056: PUSH
52057: LD_INT 3
52059: PLUS
52060: PUSH
52061: LD_INT 6
52063: MOD
52064: ST_TO_ADDR
// end ;
52065: LD_VAR 0 2
52069: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52070: LD_INT 0
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
52076: PPUSH
// if not hexes then
52077: LD_VAR 0 2
52081: NOT
52082: IFFALSE 52086
// exit ;
52084: GO 52234
// dist := 9999 ;
52086: LD_ADDR_VAR 0 5
52090: PUSH
52091: LD_INT 9999
52093: ST_TO_ADDR
// for i = 1 to hexes do
52094: LD_ADDR_VAR 0 4
52098: PUSH
52099: DOUBLE
52100: LD_INT 1
52102: DEC
52103: ST_TO_ADDR
52104: LD_VAR 0 2
52108: PUSH
52109: FOR_TO
52110: IFFALSE 52222
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52112: LD_VAR 0 1
52116: PPUSH
52117: LD_VAR 0 2
52121: PUSH
52122: LD_VAR 0 4
52126: ARRAY
52127: PUSH
52128: LD_INT 1
52130: ARRAY
52131: PPUSH
52132: LD_VAR 0 2
52136: PUSH
52137: LD_VAR 0 4
52141: ARRAY
52142: PUSH
52143: LD_INT 2
52145: ARRAY
52146: PPUSH
52147: CALL_OW 297
52151: PUSH
52152: LD_VAR 0 5
52156: LESS
52157: IFFALSE 52220
// begin hex := hexes [ i ] ;
52159: LD_ADDR_VAR 0 7
52163: PUSH
52164: LD_VAR 0 2
52168: PUSH
52169: LD_VAR 0 4
52173: ARRAY
52174: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52175: LD_ADDR_VAR 0 5
52179: PUSH
52180: LD_VAR 0 1
52184: PPUSH
52185: LD_VAR 0 2
52189: PUSH
52190: LD_VAR 0 4
52194: ARRAY
52195: PUSH
52196: LD_INT 1
52198: ARRAY
52199: PPUSH
52200: LD_VAR 0 2
52204: PUSH
52205: LD_VAR 0 4
52209: ARRAY
52210: PUSH
52211: LD_INT 2
52213: ARRAY
52214: PPUSH
52215: CALL_OW 297
52219: ST_TO_ADDR
// end ; end ;
52220: GO 52109
52222: POP
52223: POP
// result := hex ;
52224: LD_ADDR_VAR 0 3
52228: PUSH
52229: LD_VAR 0 7
52233: ST_TO_ADDR
// end ;
52234: LD_VAR 0 3
52238: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52239: LD_INT 0
52241: PPUSH
52242: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52243: LD_VAR 0 1
52247: NOT
52248: PUSH
52249: LD_VAR 0 1
52253: PUSH
52254: LD_INT 21
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 23
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PPUSH
52278: CALL_OW 69
52282: IN
52283: NOT
52284: OR
52285: IFFALSE 52289
// exit ;
52287: GO 52336
// for i = 1 to 3 do
52289: LD_ADDR_VAR 0 3
52293: PUSH
52294: DOUBLE
52295: LD_INT 1
52297: DEC
52298: ST_TO_ADDR
52299: LD_INT 3
52301: PUSH
52302: FOR_TO
52303: IFFALSE 52334
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52305: LD_VAR 0 1
52309: PPUSH
52310: CALL_OW 250
52314: PPUSH
52315: LD_VAR 0 1
52319: PPUSH
52320: CALL_OW 251
52324: PPUSH
52325: LD_INT 1
52327: PPUSH
52328: CALL_OW 453
52332: GO 52302
52334: POP
52335: POP
// end ;
52336: LD_VAR 0 2
52340: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52341: LD_INT 0
52343: PPUSH
52344: PPUSH
52345: PPUSH
52346: PPUSH
52347: PPUSH
52348: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52349: LD_VAR 0 1
52353: NOT
52354: PUSH
52355: LD_VAR 0 2
52359: NOT
52360: OR
52361: PUSH
52362: LD_VAR 0 1
52366: PPUSH
52367: CALL_OW 314
52371: OR
52372: IFFALSE 52376
// exit ;
52374: GO 52817
// x := GetX ( enemy_unit ) ;
52376: LD_ADDR_VAR 0 7
52380: PUSH
52381: LD_VAR 0 2
52385: PPUSH
52386: CALL_OW 250
52390: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52391: LD_ADDR_VAR 0 8
52395: PUSH
52396: LD_VAR 0 2
52400: PPUSH
52401: CALL_OW 251
52405: ST_TO_ADDR
// if not x or not y then
52406: LD_VAR 0 7
52410: NOT
52411: PUSH
52412: LD_VAR 0 8
52416: NOT
52417: OR
52418: IFFALSE 52422
// exit ;
52420: GO 52817
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52422: LD_ADDR_VAR 0 6
52426: PUSH
52427: LD_VAR 0 7
52431: PPUSH
52432: LD_INT 0
52434: PPUSH
52435: LD_INT 4
52437: PPUSH
52438: CALL_OW 272
52442: PUSH
52443: LD_VAR 0 8
52447: PPUSH
52448: LD_INT 0
52450: PPUSH
52451: LD_INT 4
52453: PPUSH
52454: CALL_OW 273
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_VAR 0 7
52467: PPUSH
52468: LD_INT 1
52470: PPUSH
52471: LD_INT 4
52473: PPUSH
52474: CALL_OW 272
52478: PUSH
52479: LD_VAR 0 8
52483: PPUSH
52484: LD_INT 1
52486: PPUSH
52487: LD_INT 4
52489: PPUSH
52490: CALL_OW 273
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_VAR 0 7
52503: PPUSH
52504: LD_INT 2
52506: PPUSH
52507: LD_INT 4
52509: PPUSH
52510: CALL_OW 272
52514: PUSH
52515: LD_VAR 0 8
52519: PPUSH
52520: LD_INT 2
52522: PPUSH
52523: LD_INT 4
52525: PPUSH
52526: CALL_OW 273
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_VAR 0 7
52539: PPUSH
52540: LD_INT 3
52542: PPUSH
52543: LD_INT 4
52545: PPUSH
52546: CALL_OW 272
52550: PUSH
52551: LD_VAR 0 8
52555: PPUSH
52556: LD_INT 3
52558: PPUSH
52559: LD_INT 4
52561: PPUSH
52562: CALL_OW 273
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_VAR 0 7
52575: PPUSH
52576: LD_INT 4
52578: PPUSH
52579: LD_INT 4
52581: PPUSH
52582: CALL_OW 272
52586: PUSH
52587: LD_VAR 0 8
52591: PPUSH
52592: LD_INT 4
52594: PPUSH
52595: LD_INT 4
52597: PPUSH
52598: CALL_OW 273
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_VAR 0 7
52611: PPUSH
52612: LD_INT 5
52614: PPUSH
52615: LD_INT 4
52617: PPUSH
52618: CALL_OW 272
52622: PUSH
52623: LD_VAR 0 8
52627: PPUSH
52628: LD_INT 5
52630: PPUSH
52631: LD_INT 4
52633: PPUSH
52634: CALL_OW 273
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: ST_TO_ADDR
// for i = tmp downto 1 do
52651: LD_ADDR_VAR 0 4
52655: PUSH
52656: DOUBLE
52657: LD_VAR 0 6
52661: INC
52662: ST_TO_ADDR
52663: LD_INT 1
52665: PUSH
52666: FOR_DOWNTO
52667: IFFALSE 52768
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52669: LD_VAR 0 6
52673: PUSH
52674: LD_VAR 0 4
52678: ARRAY
52679: PUSH
52680: LD_INT 1
52682: ARRAY
52683: PPUSH
52684: LD_VAR 0 6
52688: PUSH
52689: LD_VAR 0 4
52693: ARRAY
52694: PUSH
52695: LD_INT 2
52697: ARRAY
52698: PPUSH
52699: CALL_OW 488
52703: NOT
52704: PUSH
52705: LD_VAR 0 6
52709: PUSH
52710: LD_VAR 0 4
52714: ARRAY
52715: PUSH
52716: LD_INT 1
52718: ARRAY
52719: PPUSH
52720: LD_VAR 0 6
52724: PUSH
52725: LD_VAR 0 4
52729: ARRAY
52730: PUSH
52731: LD_INT 2
52733: ARRAY
52734: PPUSH
52735: CALL_OW 428
52739: PUSH
52740: LD_INT 0
52742: NONEQUAL
52743: OR
52744: IFFALSE 52766
// tmp := Delete ( tmp , i ) ;
52746: LD_ADDR_VAR 0 6
52750: PUSH
52751: LD_VAR 0 6
52755: PPUSH
52756: LD_VAR 0 4
52760: PPUSH
52761: CALL_OW 3
52765: ST_TO_ADDR
52766: GO 52666
52768: POP
52769: POP
// j := GetClosestHex ( unit , tmp ) ;
52770: LD_ADDR_VAR 0 5
52774: PUSH
52775: LD_VAR 0 1
52779: PPUSH
52780: LD_VAR 0 6
52784: PPUSH
52785: CALL 52070 0 2
52789: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52790: LD_VAR 0 1
52794: PPUSH
52795: LD_VAR 0 5
52799: PUSH
52800: LD_INT 1
52802: ARRAY
52803: PPUSH
52804: LD_VAR 0 5
52808: PUSH
52809: LD_INT 2
52811: ARRAY
52812: PPUSH
52813: CALL_OW 111
// end ;
52817: LD_VAR 0 3
52821: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52822: LD_INT 0
52824: PPUSH
52825: PPUSH
52826: PPUSH
// uc_side = 0 ;
52827: LD_ADDR_OWVAR 20
52831: PUSH
52832: LD_INT 0
52834: ST_TO_ADDR
// uc_nation = 0 ;
52835: LD_ADDR_OWVAR 21
52839: PUSH
52840: LD_INT 0
52842: ST_TO_ADDR
// InitHc ;
52843: CALL_OW 19
// InitVc ;
52847: CALL_OW 20
// if mastodonts then
52851: LD_VAR 0 6
52855: IFFALSE 52922
// for i = 1 to mastodonts do
52857: LD_ADDR_VAR 0 11
52861: PUSH
52862: DOUBLE
52863: LD_INT 1
52865: DEC
52866: ST_TO_ADDR
52867: LD_VAR 0 6
52871: PUSH
52872: FOR_TO
52873: IFFALSE 52920
// begin vc_chassis := 31 ;
52875: LD_ADDR_OWVAR 37
52879: PUSH
52880: LD_INT 31
52882: ST_TO_ADDR
// vc_control := control_rider ;
52883: LD_ADDR_OWVAR 38
52887: PUSH
52888: LD_INT 4
52890: ST_TO_ADDR
// animal := CreateVehicle ;
52891: LD_ADDR_VAR 0 12
52895: PUSH
52896: CALL_OW 45
52900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52901: LD_VAR 0 12
52905: PPUSH
52906: LD_VAR 0 8
52910: PPUSH
52911: LD_INT 0
52913: PPUSH
52914: CALL 54991 0 3
// end ;
52918: GO 52872
52920: POP
52921: POP
// if horses then
52922: LD_VAR 0 5
52926: IFFALSE 52993
// for i = 1 to horses do
52928: LD_ADDR_VAR 0 11
52932: PUSH
52933: DOUBLE
52934: LD_INT 1
52936: DEC
52937: ST_TO_ADDR
52938: LD_VAR 0 5
52942: PUSH
52943: FOR_TO
52944: IFFALSE 52991
// begin hc_class := 21 ;
52946: LD_ADDR_OWVAR 28
52950: PUSH
52951: LD_INT 21
52953: ST_TO_ADDR
// hc_gallery :=  ;
52954: LD_ADDR_OWVAR 33
52958: PUSH
52959: LD_STRING 
52961: ST_TO_ADDR
// animal := CreateHuman ;
52962: LD_ADDR_VAR 0 12
52966: PUSH
52967: CALL_OW 44
52971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52972: LD_VAR 0 12
52976: PPUSH
52977: LD_VAR 0 8
52981: PPUSH
52982: LD_INT 0
52984: PPUSH
52985: CALL 54991 0 3
// end ;
52989: GO 52943
52991: POP
52992: POP
// if birds then
52993: LD_VAR 0 1
52997: IFFALSE 53064
// for i = 1 to birds do
52999: LD_ADDR_VAR 0 11
53003: PUSH
53004: DOUBLE
53005: LD_INT 1
53007: DEC
53008: ST_TO_ADDR
53009: LD_VAR 0 1
53013: PUSH
53014: FOR_TO
53015: IFFALSE 53062
// begin hc_class = 18 ;
53017: LD_ADDR_OWVAR 28
53021: PUSH
53022: LD_INT 18
53024: ST_TO_ADDR
// hc_gallery =  ;
53025: LD_ADDR_OWVAR 33
53029: PUSH
53030: LD_STRING 
53032: ST_TO_ADDR
// animal := CreateHuman ;
53033: LD_ADDR_VAR 0 12
53037: PUSH
53038: CALL_OW 44
53042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53043: LD_VAR 0 12
53047: PPUSH
53048: LD_VAR 0 8
53052: PPUSH
53053: LD_INT 0
53055: PPUSH
53056: CALL 54991 0 3
// end ;
53060: GO 53014
53062: POP
53063: POP
// if tigers then
53064: LD_VAR 0 2
53068: IFFALSE 53152
// for i = 1 to tigers do
53070: LD_ADDR_VAR 0 11
53074: PUSH
53075: DOUBLE
53076: LD_INT 1
53078: DEC
53079: ST_TO_ADDR
53080: LD_VAR 0 2
53084: PUSH
53085: FOR_TO
53086: IFFALSE 53150
// begin hc_class = class_tiger ;
53088: LD_ADDR_OWVAR 28
53092: PUSH
53093: LD_INT 14
53095: ST_TO_ADDR
// hc_gallery =  ;
53096: LD_ADDR_OWVAR 33
53100: PUSH
53101: LD_STRING 
53103: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53104: LD_ADDR_OWVAR 35
53108: PUSH
53109: LD_INT 7
53111: NEG
53112: PPUSH
53113: LD_INT 7
53115: PPUSH
53116: CALL_OW 12
53120: ST_TO_ADDR
// animal := CreateHuman ;
53121: LD_ADDR_VAR 0 12
53125: PUSH
53126: CALL_OW 44
53130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53131: LD_VAR 0 12
53135: PPUSH
53136: LD_VAR 0 8
53140: PPUSH
53141: LD_INT 0
53143: PPUSH
53144: CALL 54991 0 3
// end ;
53148: GO 53085
53150: POP
53151: POP
// if apemans then
53152: LD_VAR 0 3
53156: IFFALSE 53279
// for i = 1 to apemans do
53158: LD_ADDR_VAR 0 11
53162: PUSH
53163: DOUBLE
53164: LD_INT 1
53166: DEC
53167: ST_TO_ADDR
53168: LD_VAR 0 3
53172: PUSH
53173: FOR_TO
53174: IFFALSE 53277
// begin hc_class = class_apeman ;
53176: LD_ADDR_OWVAR 28
53180: PUSH
53181: LD_INT 12
53183: ST_TO_ADDR
// hc_gallery =  ;
53184: LD_ADDR_OWVAR 33
53188: PUSH
53189: LD_STRING 
53191: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53192: LD_ADDR_OWVAR 35
53196: PUSH
53197: LD_INT 5
53199: NEG
53200: PPUSH
53201: LD_INT 5
53203: PPUSH
53204: CALL_OW 12
53208: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53209: LD_ADDR_OWVAR 31
53213: PUSH
53214: LD_INT 1
53216: PPUSH
53217: LD_INT 3
53219: PPUSH
53220: CALL_OW 12
53224: PUSH
53225: LD_INT 1
53227: PPUSH
53228: LD_INT 3
53230: PPUSH
53231: CALL_OW 12
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// animal := CreateHuman ;
53248: LD_ADDR_VAR 0 12
53252: PUSH
53253: CALL_OW 44
53257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53258: LD_VAR 0 12
53262: PPUSH
53263: LD_VAR 0 8
53267: PPUSH
53268: LD_INT 0
53270: PPUSH
53271: CALL 54991 0 3
// end ;
53275: GO 53173
53277: POP
53278: POP
// if enchidnas then
53279: LD_VAR 0 4
53283: IFFALSE 53350
// for i = 1 to enchidnas do
53285: LD_ADDR_VAR 0 11
53289: PUSH
53290: DOUBLE
53291: LD_INT 1
53293: DEC
53294: ST_TO_ADDR
53295: LD_VAR 0 4
53299: PUSH
53300: FOR_TO
53301: IFFALSE 53348
// begin hc_class = 13 ;
53303: LD_ADDR_OWVAR 28
53307: PUSH
53308: LD_INT 13
53310: ST_TO_ADDR
// hc_gallery =  ;
53311: LD_ADDR_OWVAR 33
53315: PUSH
53316: LD_STRING 
53318: ST_TO_ADDR
// animal := CreateHuman ;
53319: LD_ADDR_VAR 0 12
53323: PUSH
53324: CALL_OW 44
53328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53329: LD_VAR 0 12
53333: PPUSH
53334: LD_VAR 0 8
53338: PPUSH
53339: LD_INT 0
53341: PPUSH
53342: CALL 54991 0 3
// end ;
53346: GO 53300
53348: POP
53349: POP
// if fishes then
53350: LD_VAR 0 7
53354: IFFALSE 53421
// for i = 1 to fishes do
53356: LD_ADDR_VAR 0 11
53360: PUSH
53361: DOUBLE
53362: LD_INT 1
53364: DEC
53365: ST_TO_ADDR
53366: LD_VAR 0 7
53370: PUSH
53371: FOR_TO
53372: IFFALSE 53419
// begin hc_class = 20 ;
53374: LD_ADDR_OWVAR 28
53378: PUSH
53379: LD_INT 20
53381: ST_TO_ADDR
// hc_gallery =  ;
53382: LD_ADDR_OWVAR 33
53386: PUSH
53387: LD_STRING 
53389: ST_TO_ADDR
// animal := CreateHuman ;
53390: LD_ADDR_VAR 0 12
53394: PUSH
53395: CALL_OW 44
53399: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53400: LD_VAR 0 12
53404: PPUSH
53405: LD_VAR 0 9
53409: PPUSH
53410: LD_INT 0
53412: PPUSH
53413: CALL 54991 0 3
// end ;
53417: GO 53371
53419: POP
53420: POP
// end ;
53421: LD_VAR 0 10
53425: RET
// export function WantHeal ( sci , unit ) ; begin
53426: LD_INT 0
53428: PPUSH
// if GetTaskList ( sci ) > 0 then
53429: LD_VAR 0 1
53433: PPUSH
53434: CALL_OW 437
53438: PUSH
53439: LD_INT 0
53441: GREATER
53442: IFFALSE 53512
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53444: LD_VAR 0 1
53448: PPUSH
53449: CALL_OW 437
53453: PUSH
53454: LD_INT 1
53456: ARRAY
53457: PUSH
53458: LD_INT 1
53460: ARRAY
53461: PUSH
53462: LD_STRING l
53464: EQUAL
53465: PUSH
53466: LD_VAR 0 1
53470: PPUSH
53471: CALL_OW 437
53475: PUSH
53476: LD_INT 1
53478: ARRAY
53479: PUSH
53480: LD_INT 4
53482: ARRAY
53483: PUSH
53484: LD_VAR 0 2
53488: EQUAL
53489: AND
53490: IFFALSE 53502
// result := true else
53492: LD_ADDR_VAR 0 3
53496: PUSH
53497: LD_INT 1
53499: ST_TO_ADDR
53500: GO 53510
// result := false ;
53502: LD_ADDR_VAR 0 3
53506: PUSH
53507: LD_INT 0
53509: ST_TO_ADDR
// end else
53510: GO 53520
// result := false ;
53512: LD_ADDR_VAR 0 3
53516: PUSH
53517: LD_INT 0
53519: ST_TO_ADDR
// end ;
53520: LD_VAR 0 3
53524: RET
// export function HealTarget ( sci ) ; begin
53525: LD_INT 0
53527: PPUSH
// if not sci then
53528: LD_VAR 0 1
53532: NOT
53533: IFFALSE 53537
// exit ;
53535: GO 53602
// result := 0 ;
53537: LD_ADDR_VAR 0 2
53541: PUSH
53542: LD_INT 0
53544: ST_TO_ADDR
// if GetTaskList ( sci ) then
53545: LD_VAR 0 1
53549: PPUSH
53550: CALL_OW 437
53554: IFFALSE 53602
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53556: LD_VAR 0 1
53560: PPUSH
53561: CALL_OW 437
53565: PUSH
53566: LD_INT 1
53568: ARRAY
53569: PUSH
53570: LD_INT 1
53572: ARRAY
53573: PUSH
53574: LD_STRING l
53576: EQUAL
53577: IFFALSE 53602
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53579: LD_ADDR_VAR 0 2
53583: PUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: CALL_OW 437
53593: PUSH
53594: LD_INT 1
53596: ARRAY
53597: PUSH
53598: LD_INT 4
53600: ARRAY
53601: ST_TO_ADDR
// end ;
53602: LD_VAR 0 2
53606: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53607: LD_INT 0
53609: PPUSH
53610: PPUSH
53611: PPUSH
53612: PPUSH
// if not base_units then
53613: LD_VAR 0 1
53617: NOT
53618: IFFALSE 53622
// exit ;
53620: GO 53709
// result := false ;
53622: LD_ADDR_VAR 0 2
53626: PUSH
53627: LD_INT 0
53629: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53630: LD_ADDR_VAR 0 5
53634: PUSH
53635: LD_VAR 0 1
53639: PPUSH
53640: LD_INT 21
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PPUSH
53650: CALL_OW 72
53654: ST_TO_ADDR
// if not tmp then
53655: LD_VAR 0 5
53659: NOT
53660: IFFALSE 53664
// exit ;
53662: GO 53709
// for i in tmp do
53664: LD_ADDR_VAR 0 3
53668: PUSH
53669: LD_VAR 0 5
53673: PUSH
53674: FOR_IN
53675: IFFALSE 53707
// begin result := EnemyInRange ( i , 22 ) ;
53677: LD_ADDR_VAR 0 2
53681: PUSH
53682: LD_VAR 0 3
53686: PPUSH
53687: LD_INT 22
53689: PPUSH
53690: CALL 51945 0 2
53694: ST_TO_ADDR
// if result then
53695: LD_VAR 0 2
53699: IFFALSE 53705
// exit ;
53701: POP
53702: POP
53703: GO 53709
// end ;
53705: GO 53674
53707: POP
53708: POP
// end ;
53709: LD_VAR 0 2
53713: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53714: LD_INT 0
53716: PPUSH
53717: PPUSH
// if not units then
53718: LD_VAR 0 1
53722: NOT
53723: IFFALSE 53727
// exit ;
53725: GO 53797
// result := [ ] ;
53727: LD_ADDR_VAR 0 3
53731: PUSH
53732: EMPTY
53733: ST_TO_ADDR
// for i in units do
53734: LD_ADDR_VAR 0 4
53738: PUSH
53739: LD_VAR 0 1
53743: PUSH
53744: FOR_IN
53745: IFFALSE 53795
// if GetTag ( i ) = tag then
53747: LD_VAR 0 4
53751: PPUSH
53752: CALL_OW 110
53756: PUSH
53757: LD_VAR 0 2
53761: EQUAL
53762: IFFALSE 53793
// result := Insert ( result , result + 1 , i ) ;
53764: LD_ADDR_VAR 0 3
53768: PUSH
53769: LD_VAR 0 3
53773: PPUSH
53774: LD_VAR 0 3
53778: PUSH
53779: LD_INT 1
53781: PLUS
53782: PPUSH
53783: LD_VAR 0 4
53787: PPUSH
53788: CALL_OW 2
53792: ST_TO_ADDR
53793: GO 53744
53795: POP
53796: POP
// end ;
53797: LD_VAR 0 3
53801: RET
// export function IsDriver ( un ) ; begin
53802: LD_INT 0
53804: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53805: LD_ADDR_VAR 0 2
53809: PUSH
53810: LD_VAR 0 1
53814: PUSH
53815: LD_INT 55
53817: PUSH
53818: EMPTY
53819: LIST
53820: PPUSH
53821: CALL_OW 69
53825: IN
53826: ST_TO_ADDR
// end ;
53827: LD_VAR 0 2
53831: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53832: LD_INT 0
53834: PPUSH
53835: PPUSH
// list := [ ] ;
53836: LD_ADDR_VAR 0 5
53840: PUSH
53841: EMPTY
53842: ST_TO_ADDR
// case d of 0 :
53843: LD_VAR 0 3
53847: PUSH
53848: LD_INT 0
53850: DOUBLE
53851: EQUAL
53852: IFTRUE 53856
53854: GO 53989
53856: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53857: LD_ADDR_VAR 0 5
53861: PUSH
53862: LD_VAR 0 1
53866: PUSH
53867: LD_INT 4
53869: MINUS
53870: PUSH
53871: LD_VAR 0 2
53875: PUSH
53876: LD_INT 4
53878: MINUS
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: LIST
53887: PUSH
53888: LD_VAR 0 1
53892: PUSH
53893: LD_INT 3
53895: MINUS
53896: PUSH
53897: LD_VAR 0 2
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: PUSH
53910: LD_VAR 0 1
53914: PUSH
53915: LD_INT 4
53917: PLUS
53918: PUSH
53919: LD_VAR 0 2
53923: PUSH
53924: LD_INT 4
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: LIST
53931: PUSH
53932: LD_VAR 0 1
53936: PUSH
53937: LD_INT 3
53939: PLUS
53940: PUSH
53941: LD_VAR 0 2
53945: PUSH
53946: LD_INT 3
53948: PLUS
53949: PUSH
53950: LD_INT 5
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: PUSH
53958: LD_VAR 0 1
53962: PUSH
53963: LD_VAR 0 2
53967: PUSH
53968: LD_INT 4
53970: PLUS
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: ST_TO_ADDR
// end ; 1 :
53987: GO 54687
53989: LD_INT 1
53991: DOUBLE
53992: EQUAL
53993: IFTRUE 53997
53995: GO 54130
53997: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53998: LD_ADDR_VAR 0 5
54002: PUSH
54003: LD_VAR 0 1
54007: PUSH
54008: LD_VAR 0 2
54012: PUSH
54013: LD_INT 4
54015: MINUS
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: PUSH
54025: LD_VAR 0 1
54029: PUSH
54030: LD_INT 3
54032: MINUS
54033: PUSH
54034: LD_VAR 0 2
54038: PUSH
54039: LD_INT 3
54041: MINUS
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: PUSH
54051: LD_VAR 0 1
54055: PUSH
54056: LD_INT 4
54058: MINUS
54059: PUSH
54060: LD_VAR 0 2
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: PUSH
54073: LD_VAR 0 1
54077: PUSH
54078: LD_VAR 0 2
54082: PUSH
54083: LD_INT 3
54085: PLUS
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: PUSH
54095: LD_VAR 0 1
54099: PUSH
54100: LD_INT 4
54102: PLUS
54103: PUSH
54104: LD_VAR 0 2
54108: PUSH
54109: LD_INT 4
54111: PLUS
54112: PUSH
54113: LD_INT 5
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
// end ; 2 :
54128: GO 54687
54130: LD_INT 2
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54138
54136: GO 54267
54138: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54139: LD_ADDR_VAR 0 5
54143: PUSH
54144: LD_VAR 0 1
54148: PUSH
54149: LD_VAR 0 2
54153: PUSH
54154: LD_INT 3
54156: MINUS
54157: PUSH
54158: LD_INT 3
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: PUSH
54166: LD_VAR 0 1
54170: PUSH
54171: LD_INT 4
54173: PLUS
54174: PUSH
54175: LD_VAR 0 2
54179: PUSH
54180: LD_INT 4
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: LIST
54187: PUSH
54188: LD_VAR 0 1
54192: PUSH
54193: LD_VAR 0 2
54197: PUSH
54198: LD_INT 4
54200: PLUS
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: PUSH
54210: LD_VAR 0 1
54214: PUSH
54215: LD_INT 3
54217: MINUS
54218: PUSH
54219: LD_VAR 0 2
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: PUSH
54232: LD_VAR 0 1
54236: PUSH
54237: LD_INT 4
54239: MINUS
54240: PUSH
54241: LD_VAR 0 2
54245: PUSH
54246: LD_INT 4
54248: MINUS
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: ST_TO_ADDR
// end ; 3 :
54265: GO 54687
54267: LD_INT 3
54269: DOUBLE
54270: EQUAL
54271: IFTRUE 54275
54273: GO 54408
54275: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54276: LD_ADDR_VAR 0 5
54280: PUSH
54281: LD_VAR 0 1
54285: PUSH
54286: LD_INT 3
54288: PLUS
54289: PUSH
54290: LD_VAR 0 2
54294: PUSH
54295: LD_INT 4
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: PUSH
54303: LD_VAR 0 1
54307: PUSH
54308: LD_INT 4
54310: PLUS
54311: PUSH
54312: LD_VAR 0 2
54316: PUSH
54317: LD_INT 4
54319: PLUS
54320: PUSH
54321: LD_INT 5
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: PUSH
54329: LD_VAR 0 1
54333: PUSH
54334: LD_INT 4
54336: MINUS
54337: PUSH
54338: LD_VAR 0 2
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: PUSH
54351: LD_VAR 0 1
54355: PUSH
54356: LD_VAR 0 2
54360: PUSH
54361: LD_INT 4
54363: MINUS
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: LIST
54372: PUSH
54373: LD_VAR 0 1
54377: PUSH
54378: LD_INT 3
54380: MINUS
54381: PUSH
54382: LD_VAR 0 2
54386: PUSH
54387: LD_INT 3
54389: MINUS
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// end ; 4 :
54406: GO 54687
54408: LD_INT 4
54410: DOUBLE
54411: EQUAL
54412: IFTRUE 54416
54414: GO 54549
54416: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54417: LD_ADDR_VAR 0 5
54421: PUSH
54422: LD_VAR 0 1
54426: PUSH
54427: LD_VAR 0 2
54431: PUSH
54432: LD_INT 4
54434: PLUS
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: LIST
54443: PUSH
54444: LD_VAR 0 1
54448: PUSH
54449: LD_INT 3
54451: PLUS
54452: PUSH
54453: LD_VAR 0 2
54457: PUSH
54458: LD_INT 3
54460: PLUS
54461: PUSH
54462: LD_INT 5
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: LIST
54469: PUSH
54470: LD_VAR 0 1
54474: PUSH
54475: LD_INT 4
54477: PLUS
54478: PUSH
54479: LD_VAR 0 2
54483: PUSH
54484: LD_INT 4
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: PUSH
54492: LD_VAR 0 1
54496: PUSH
54497: LD_VAR 0 2
54501: PUSH
54502: LD_INT 3
54504: MINUS
54505: PUSH
54506: LD_INT 3
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: PUSH
54514: LD_VAR 0 1
54518: PUSH
54519: LD_INT 4
54521: MINUS
54522: PUSH
54523: LD_VAR 0 2
54527: PUSH
54528: LD_INT 4
54530: MINUS
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: LIST
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: ST_TO_ADDR
// end ; 5 :
54547: GO 54687
54549: LD_INT 5
54551: DOUBLE
54552: EQUAL
54553: IFTRUE 54557
54555: GO 54686
54557: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54558: LD_ADDR_VAR 0 5
54562: PUSH
54563: LD_VAR 0 1
54567: PUSH
54568: LD_INT 4
54570: MINUS
54571: PUSH
54572: LD_VAR 0 2
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: PUSH
54585: LD_VAR 0 1
54589: PUSH
54590: LD_VAR 0 2
54594: PUSH
54595: LD_INT 4
54597: MINUS
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: PUSH
54607: LD_VAR 0 1
54611: PUSH
54612: LD_INT 4
54614: PLUS
54615: PUSH
54616: LD_VAR 0 2
54620: PUSH
54621: LD_INT 4
54623: PLUS
54624: PUSH
54625: LD_INT 5
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: PUSH
54633: LD_VAR 0 1
54637: PUSH
54638: LD_INT 3
54640: PLUS
54641: PUSH
54642: LD_VAR 0 2
54646: PUSH
54647: LD_INT 4
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: LIST
54654: PUSH
54655: LD_VAR 0 1
54659: PUSH
54660: LD_VAR 0 2
54664: PUSH
54665: LD_INT 3
54667: PLUS
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: ST_TO_ADDR
// end ; end ;
54684: GO 54687
54686: POP
// result := list ;
54687: LD_ADDR_VAR 0 4
54691: PUSH
54692: LD_VAR 0 5
54696: ST_TO_ADDR
// end ;
54697: LD_VAR 0 4
54701: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54702: LD_INT 0
54704: PPUSH
54705: PPUSH
54706: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54707: LD_VAR 0 1
54711: NOT
54712: PUSH
54713: LD_VAR 0 2
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: LD_INT 3
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: IN
54736: NOT
54737: OR
54738: IFFALSE 54742
// exit ;
54740: GO 54834
// tmp := [ ] ;
54742: LD_ADDR_VAR 0 5
54746: PUSH
54747: EMPTY
54748: ST_TO_ADDR
// for i in units do
54749: LD_ADDR_VAR 0 4
54753: PUSH
54754: LD_VAR 0 1
54758: PUSH
54759: FOR_IN
54760: IFFALSE 54803
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54762: LD_ADDR_VAR 0 5
54766: PUSH
54767: LD_VAR 0 5
54771: PPUSH
54772: LD_VAR 0 5
54776: PUSH
54777: LD_INT 1
54779: PLUS
54780: PPUSH
54781: LD_VAR 0 4
54785: PPUSH
54786: LD_VAR 0 2
54790: PPUSH
54791: CALL_OW 259
54795: PPUSH
54796: CALL_OW 2
54800: ST_TO_ADDR
54801: GO 54759
54803: POP
54804: POP
// if not tmp then
54805: LD_VAR 0 5
54809: NOT
54810: IFFALSE 54814
// exit ;
54812: GO 54834
// result := SortListByListDesc ( units , tmp ) ;
54814: LD_ADDR_VAR 0 3
54818: PUSH
54819: LD_VAR 0 1
54823: PPUSH
54824: LD_VAR 0 5
54828: PPUSH
54829: CALL_OW 77
54833: ST_TO_ADDR
// end ;
54834: LD_VAR 0 3
54838: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54839: LD_INT 0
54841: PPUSH
54842: PPUSH
54843: PPUSH
// x := GetX ( building ) ;
54844: LD_ADDR_VAR 0 4
54848: PUSH
54849: LD_VAR 0 2
54853: PPUSH
54854: CALL_OW 250
54858: ST_TO_ADDR
// y := GetY ( building ) ;
54859: LD_ADDR_VAR 0 5
54863: PUSH
54864: LD_VAR 0 2
54868: PPUSH
54869: CALL_OW 251
54873: ST_TO_ADDR
// if GetTaskList ( unit ) then
54874: LD_VAR 0 1
54878: PPUSH
54879: CALL_OW 437
54883: IFFALSE 54978
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54885: LD_STRING e
54887: PUSH
54888: LD_VAR 0 1
54892: PPUSH
54893: CALL_OW 437
54897: PUSH
54898: LD_INT 1
54900: ARRAY
54901: PUSH
54902: LD_INT 1
54904: ARRAY
54905: EQUAL
54906: PUSH
54907: LD_VAR 0 4
54911: PUSH
54912: LD_VAR 0 1
54916: PPUSH
54917: CALL_OW 437
54921: PUSH
54922: LD_INT 1
54924: ARRAY
54925: PUSH
54926: LD_INT 2
54928: ARRAY
54929: EQUAL
54930: AND
54931: PUSH
54932: LD_VAR 0 5
54936: PUSH
54937: LD_VAR 0 1
54941: PPUSH
54942: CALL_OW 437
54946: PUSH
54947: LD_INT 1
54949: ARRAY
54950: PUSH
54951: LD_INT 3
54953: ARRAY
54954: EQUAL
54955: AND
54956: IFFALSE 54968
// result := true else
54958: LD_ADDR_VAR 0 3
54962: PUSH
54963: LD_INT 1
54965: ST_TO_ADDR
54966: GO 54976
// result := false ;
54968: LD_ADDR_VAR 0 3
54972: PUSH
54973: LD_INT 0
54975: ST_TO_ADDR
// end else
54976: GO 54986
// result := false ;
54978: LD_ADDR_VAR 0 3
54982: PUSH
54983: LD_INT 0
54985: ST_TO_ADDR
// end ;
54986: LD_VAR 0 3
54990: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54991: LD_INT 0
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
// if not unit or not area then
54997: LD_VAR 0 1
55001: NOT
55002: PUSH
55003: LD_VAR 0 2
55007: NOT
55008: OR
55009: IFFALSE 55013
// exit ;
55011: GO 55177
// tmp := AreaToList ( area , i ) ;
55013: LD_ADDR_VAR 0 6
55017: PUSH
55018: LD_VAR 0 2
55022: PPUSH
55023: LD_VAR 0 5
55027: PPUSH
55028: CALL_OW 517
55032: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55033: LD_ADDR_VAR 0 5
55037: PUSH
55038: DOUBLE
55039: LD_INT 1
55041: DEC
55042: ST_TO_ADDR
55043: LD_VAR 0 6
55047: PUSH
55048: LD_INT 1
55050: ARRAY
55051: PUSH
55052: FOR_TO
55053: IFFALSE 55175
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55055: LD_ADDR_VAR 0 7
55059: PUSH
55060: LD_VAR 0 6
55064: PUSH
55065: LD_INT 1
55067: ARRAY
55068: PUSH
55069: LD_VAR 0 5
55073: ARRAY
55074: PUSH
55075: LD_VAR 0 6
55079: PUSH
55080: LD_INT 2
55082: ARRAY
55083: PUSH
55084: LD_VAR 0 5
55088: ARRAY
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55094: LD_VAR 0 7
55098: PUSH
55099: LD_INT 1
55101: ARRAY
55102: PPUSH
55103: LD_VAR 0 7
55107: PUSH
55108: LD_INT 2
55110: ARRAY
55111: PPUSH
55112: CALL_OW 428
55116: PUSH
55117: LD_INT 0
55119: EQUAL
55120: IFFALSE 55173
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55122: LD_VAR 0 1
55126: PPUSH
55127: LD_VAR 0 7
55131: PUSH
55132: LD_INT 1
55134: ARRAY
55135: PPUSH
55136: LD_VAR 0 7
55140: PUSH
55141: LD_INT 2
55143: ARRAY
55144: PPUSH
55145: LD_VAR 0 3
55149: PPUSH
55150: CALL_OW 48
// result := IsPlaced ( unit ) ;
55154: LD_ADDR_VAR 0 4
55158: PUSH
55159: LD_VAR 0 1
55163: PPUSH
55164: CALL_OW 305
55168: ST_TO_ADDR
// exit ;
55169: POP
55170: POP
55171: GO 55177
// end ; end ;
55173: GO 55052
55175: POP
55176: POP
// end ;
55177: LD_VAR 0 4
55181: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55182: LD_INT 0
55184: PPUSH
55185: PPUSH
55186: PPUSH
// if not side or side > 8 then
55187: LD_VAR 0 1
55191: NOT
55192: PUSH
55193: LD_VAR 0 1
55197: PUSH
55198: LD_INT 8
55200: GREATER
55201: OR
55202: IFFALSE 55206
// exit ;
55204: GO 55393
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55206: LD_ADDR_VAR 0 4
55210: PUSH
55211: LD_INT 22
55213: PUSH
55214: LD_VAR 0 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 21
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PPUSH
55237: CALL_OW 69
55241: ST_TO_ADDR
// if not tmp then
55242: LD_VAR 0 4
55246: NOT
55247: IFFALSE 55251
// exit ;
55249: GO 55393
// enable_addtolog := true ;
55251: LD_ADDR_OWVAR 81
55255: PUSH
55256: LD_INT 1
55258: ST_TO_ADDR
// AddToLog ( [ ) ;
55259: LD_STRING [
55261: PPUSH
55262: CALL_OW 561
// for i in tmp do
55266: LD_ADDR_VAR 0 3
55270: PUSH
55271: LD_VAR 0 4
55275: PUSH
55276: FOR_IN
55277: IFFALSE 55384
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55279: LD_STRING [
55281: PUSH
55282: LD_VAR 0 3
55286: PPUSH
55287: CALL_OW 266
55291: STR
55292: PUSH
55293: LD_STRING , 
55295: STR
55296: PUSH
55297: LD_VAR 0 3
55301: PPUSH
55302: CALL_OW 250
55306: STR
55307: PUSH
55308: LD_STRING , 
55310: STR
55311: PUSH
55312: LD_VAR 0 3
55316: PPUSH
55317: CALL_OW 251
55321: STR
55322: PUSH
55323: LD_STRING , 
55325: STR
55326: PUSH
55327: LD_VAR 0 3
55331: PPUSH
55332: CALL_OW 254
55336: STR
55337: PUSH
55338: LD_STRING , 
55340: STR
55341: PUSH
55342: LD_VAR 0 3
55346: PPUSH
55347: LD_INT 1
55349: PPUSH
55350: CALL_OW 268
55354: STR
55355: PUSH
55356: LD_STRING , 
55358: STR
55359: PUSH
55360: LD_VAR 0 3
55364: PPUSH
55365: LD_INT 2
55367: PPUSH
55368: CALL_OW 268
55372: STR
55373: PUSH
55374: LD_STRING ],
55376: STR
55377: PPUSH
55378: CALL_OW 561
// end ;
55382: GO 55276
55384: POP
55385: POP
// AddToLog ( ]; ) ;
55386: LD_STRING ];
55388: PPUSH
55389: CALL_OW 561
// end ;
55393: LD_VAR 0 2
55397: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55398: LD_INT 0
55400: PPUSH
55401: PPUSH
55402: PPUSH
55403: PPUSH
55404: PPUSH
// if not area or not rate or not max then
55405: LD_VAR 0 1
55409: NOT
55410: PUSH
55411: LD_VAR 0 2
55415: NOT
55416: OR
55417: PUSH
55418: LD_VAR 0 4
55422: NOT
55423: OR
55424: IFFALSE 55428
// exit ;
55426: GO 55620
// while 1 do
55428: LD_INT 1
55430: IFFALSE 55620
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55432: LD_ADDR_VAR 0 9
55436: PUSH
55437: LD_VAR 0 1
55441: PPUSH
55442: LD_INT 1
55444: PPUSH
55445: CALL_OW 287
55449: PUSH
55450: LD_INT 10
55452: MUL
55453: ST_TO_ADDR
// r := rate / 10 ;
55454: LD_ADDR_VAR 0 7
55458: PUSH
55459: LD_VAR 0 2
55463: PUSH
55464: LD_INT 10
55466: DIVREAL
55467: ST_TO_ADDR
// time := 1 1$00 ;
55468: LD_ADDR_VAR 0 8
55472: PUSH
55473: LD_INT 2100
55475: ST_TO_ADDR
// if amount < min then
55476: LD_VAR 0 9
55480: PUSH
55481: LD_VAR 0 3
55485: LESS
55486: IFFALSE 55504
// r := r * 2 else
55488: LD_ADDR_VAR 0 7
55492: PUSH
55493: LD_VAR 0 7
55497: PUSH
55498: LD_INT 2
55500: MUL
55501: ST_TO_ADDR
55502: GO 55530
// if amount > max then
55504: LD_VAR 0 9
55508: PUSH
55509: LD_VAR 0 4
55513: GREATER
55514: IFFALSE 55530
// r := r / 2 ;
55516: LD_ADDR_VAR 0 7
55520: PUSH
55521: LD_VAR 0 7
55525: PUSH
55526: LD_INT 2
55528: DIVREAL
55529: ST_TO_ADDR
// time := time / r ;
55530: LD_ADDR_VAR 0 8
55534: PUSH
55535: LD_VAR 0 8
55539: PUSH
55540: LD_VAR 0 7
55544: DIVREAL
55545: ST_TO_ADDR
// if time < 0 then
55546: LD_VAR 0 8
55550: PUSH
55551: LD_INT 0
55553: LESS
55554: IFFALSE 55571
// time := time * - 1 ;
55556: LD_ADDR_VAR 0 8
55560: PUSH
55561: LD_VAR 0 8
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: MUL
55570: ST_TO_ADDR
// wait ( time ) ;
55571: LD_VAR 0 8
55575: PPUSH
55576: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55580: LD_INT 35
55582: PPUSH
55583: LD_INT 875
55585: PPUSH
55586: CALL_OW 12
55590: PPUSH
55591: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55595: LD_INT 1
55597: PPUSH
55598: LD_INT 5
55600: PPUSH
55601: CALL_OW 12
55605: PPUSH
55606: LD_VAR 0 1
55610: PPUSH
55611: LD_INT 1
55613: PPUSH
55614: CALL_OW 55
// end ;
55618: GO 55428
// end ;
55620: LD_VAR 0 5
55624: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55625: LD_INT 0
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
55631: PPUSH
55632: PPUSH
55633: PPUSH
55634: PPUSH
// if not turrets or not factories then
55635: LD_VAR 0 1
55639: NOT
55640: PUSH
55641: LD_VAR 0 2
55645: NOT
55646: OR
55647: IFFALSE 55651
// exit ;
55649: GO 55958
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55651: LD_ADDR_VAR 0 10
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: LD_INT 6
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 24
55693: PUSH
55694: LD_INT 25
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 23
55703: PUSH
55704: LD_INT 27
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 42
55717: PUSH
55718: LD_INT 43
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 44
55727: PUSH
55728: LD_INT 46
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 45
55737: PUSH
55738: LD_INT 47
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// result := [ ] ;
55755: LD_ADDR_VAR 0 3
55759: PUSH
55760: EMPTY
55761: ST_TO_ADDR
// for i in turrets do
55762: LD_ADDR_VAR 0 4
55766: PUSH
55767: LD_VAR 0 1
55771: PUSH
55772: FOR_IN
55773: IFFALSE 55956
// begin nat := GetNation ( i ) ;
55775: LD_ADDR_VAR 0 7
55779: PUSH
55780: LD_VAR 0 4
55784: PPUSH
55785: CALL_OW 248
55789: ST_TO_ADDR
// weapon := 0 ;
55790: LD_ADDR_VAR 0 8
55794: PUSH
55795: LD_INT 0
55797: ST_TO_ADDR
// if not nat then
55798: LD_VAR 0 7
55802: NOT
55803: IFFALSE 55807
// continue ;
55805: GO 55772
// for j in list [ nat ] do
55807: LD_ADDR_VAR 0 5
55811: PUSH
55812: LD_VAR 0 10
55816: PUSH
55817: LD_VAR 0 7
55821: ARRAY
55822: PUSH
55823: FOR_IN
55824: IFFALSE 55865
// if GetBWeapon ( i ) = j [ 1 ] then
55826: LD_VAR 0 4
55830: PPUSH
55831: CALL_OW 269
55835: PUSH
55836: LD_VAR 0 5
55840: PUSH
55841: LD_INT 1
55843: ARRAY
55844: EQUAL
55845: IFFALSE 55863
// begin weapon := j [ 2 ] ;
55847: LD_ADDR_VAR 0 8
55851: PUSH
55852: LD_VAR 0 5
55856: PUSH
55857: LD_INT 2
55859: ARRAY
55860: ST_TO_ADDR
// break ;
55861: GO 55865
// end ;
55863: GO 55823
55865: POP
55866: POP
// if not weapon then
55867: LD_VAR 0 8
55871: NOT
55872: IFFALSE 55876
// continue ;
55874: GO 55772
// for k in factories do
55876: LD_ADDR_VAR 0 6
55880: PUSH
55881: LD_VAR 0 2
55885: PUSH
55886: FOR_IN
55887: IFFALSE 55952
// begin weapons := AvailableWeaponList ( k ) ;
55889: LD_ADDR_VAR 0 9
55893: PUSH
55894: LD_VAR 0 6
55898: PPUSH
55899: CALL_OW 478
55903: ST_TO_ADDR
// if not weapons then
55904: LD_VAR 0 9
55908: NOT
55909: IFFALSE 55913
// continue ;
55911: GO 55886
// if weapon in weapons then
55913: LD_VAR 0 8
55917: PUSH
55918: LD_VAR 0 9
55922: IN
55923: IFFALSE 55950
// begin result := [ i , weapon ] ;
55925: LD_ADDR_VAR 0 3
55929: PUSH
55930: LD_VAR 0 4
55934: PUSH
55935: LD_VAR 0 8
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// exit ;
55944: POP
55945: POP
55946: POP
55947: POP
55948: GO 55958
// end ; end ;
55950: GO 55886
55952: POP
55953: POP
// end ;
55954: GO 55772
55956: POP
55957: POP
// end ;
55958: LD_VAR 0 3
55962: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55963: LD_INT 0
55965: PPUSH
// if not side or side > 8 then
55966: LD_VAR 0 3
55970: NOT
55971: PUSH
55972: LD_VAR 0 3
55976: PUSH
55977: LD_INT 8
55979: GREATER
55980: OR
55981: IFFALSE 55985
// exit ;
55983: GO 56044
// if not range then
55985: LD_VAR 0 4
55989: NOT
55990: IFFALSE 56001
// range := - 12 ;
55992: LD_ADDR_VAR 0 4
55996: PUSH
55997: LD_INT 12
55999: NEG
56000: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56001: LD_VAR 0 1
56005: PPUSH
56006: LD_VAR 0 2
56010: PPUSH
56011: LD_VAR 0 3
56015: PPUSH
56016: LD_VAR 0 4
56020: PPUSH
56021: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56025: LD_VAR 0 1
56029: PPUSH
56030: LD_VAR 0 2
56034: PPUSH
56035: LD_VAR 0 3
56039: PPUSH
56040: CALL_OW 331
// end ;
56044: LD_VAR 0 5
56048: RET
// export function Video ( mode ) ; begin
56049: LD_INT 0
56051: PPUSH
// ingame_video = mode ;
56052: LD_ADDR_OWVAR 52
56056: PUSH
56057: LD_VAR 0 1
56061: ST_TO_ADDR
// interface_hidden = mode ;
56062: LD_ADDR_OWVAR 54
56066: PUSH
56067: LD_VAR 0 1
56071: ST_TO_ADDR
// end ;
56072: LD_VAR 0 2
56076: RET
// export function Join ( array , element ) ; begin
56077: LD_INT 0
56079: PPUSH
// result := array ^ element ;
56080: LD_ADDR_VAR 0 3
56084: PUSH
56085: LD_VAR 0 1
56089: PUSH
56090: LD_VAR 0 2
56094: ADD
56095: ST_TO_ADDR
// end ;
56096: LD_VAR 0 3
56100: RET
// export function JoinUnion ( array , element ) ; begin
56101: LD_INT 0
56103: PPUSH
// result := array union element ;
56104: LD_ADDR_VAR 0 3
56108: PUSH
56109: LD_VAR 0 1
56113: PUSH
56114: LD_VAR 0 2
56118: UNION
56119: ST_TO_ADDR
// end ;
56120: LD_VAR 0 3
56124: RET
// export function GetBehemoths ( side ) ; begin
56125: LD_INT 0
56127: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56128: LD_ADDR_VAR 0 2
56132: PUSH
56133: LD_INT 22
56135: PUSH
56136: LD_VAR 0 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 31
56147: PUSH
56148: LD_INT 25
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PPUSH
56159: CALL_OW 69
56163: ST_TO_ADDR
// end ;
56164: LD_VAR 0 2
56168: RET
// export function Shuffle ( array ) ; var i , index ; begin
56169: LD_INT 0
56171: PPUSH
56172: PPUSH
56173: PPUSH
// result := [ ] ;
56174: LD_ADDR_VAR 0 2
56178: PUSH
56179: EMPTY
56180: ST_TO_ADDR
// if not array then
56181: LD_VAR 0 1
56185: NOT
56186: IFFALSE 56190
// exit ;
56188: GO 56289
// Randomize ;
56190: CALL_OW 10
// for i = array downto 1 do
56194: LD_ADDR_VAR 0 3
56198: PUSH
56199: DOUBLE
56200: LD_VAR 0 1
56204: INC
56205: ST_TO_ADDR
56206: LD_INT 1
56208: PUSH
56209: FOR_DOWNTO
56210: IFFALSE 56287
// begin index := rand ( 1 , array ) ;
56212: LD_ADDR_VAR 0 4
56216: PUSH
56217: LD_INT 1
56219: PPUSH
56220: LD_VAR 0 1
56224: PPUSH
56225: CALL_OW 12
56229: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56230: LD_ADDR_VAR 0 2
56234: PUSH
56235: LD_VAR 0 2
56239: PPUSH
56240: LD_VAR 0 2
56244: PUSH
56245: LD_INT 1
56247: PLUS
56248: PPUSH
56249: LD_VAR 0 1
56253: PUSH
56254: LD_VAR 0 4
56258: ARRAY
56259: PPUSH
56260: CALL_OW 2
56264: ST_TO_ADDR
// array := Delete ( array , index ) ;
56265: LD_ADDR_VAR 0 1
56269: PUSH
56270: LD_VAR 0 1
56274: PPUSH
56275: LD_VAR 0 4
56279: PPUSH
56280: CALL_OW 3
56284: ST_TO_ADDR
// end ;
56285: GO 56209
56287: POP
56288: POP
// end ;
56289: LD_VAR 0 2
56293: RET
// export function GetBaseMaterials ( base ) ; begin
56294: LD_INT 0
56296: PPUSH
// result := [ 0 , 0 , 0 ] ;
56297: LD_ADDR_VAR 0 2
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// if not base then
56316: LD_VAR 0 1
56320: NOT
56321: IFFALSE 56325
// exit ;
56323: GO 56374
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56325: LD_ADDR_VAR 0 2
56329: PUSH
56330: LD_VAR 0 1
56334: PPUSH
56335: LD_INT 1
56337: PPUSH
56338: CALL_OW 275
56342: PUSH
56343: LD_VAR 0 1
56347: PPUSH
56348: LD_INT 2
56350: PPUSH
56351: CALL_OW 275
56355: PUSH
56356: LD_VAR 0 1
56360: PPUSH
56361: LD_INT 3
56363: PPUSH
56364: CALL_OW 275
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// end ;
56374: LD_VAR 0 2
56378: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56379: LD_INT 0
56381: PPUSH
56382: PPUSH
// result := array ;
56383: LD_ADDR_VAR 0 3
56387: PUSH
56388: LD_VAR 0 1
56392: ST_TO_ADDR
// if size > 0 then
56393: LD_VAR 0 2
56397: PUSH
56398: LD_INT 0
56400: GREATER
56401: IFFALSE 56447
// for i := array downto size do
56403: LD_ADDR_VAR 0 4
56407: PUSH
56408: DOUBLE
56409: LD_VAR 0 1
56413: INC
56414: ST_TO_ADDR
56415: LD_VAR 0 2
56419: PUSH
56420: FOR_DOWNTO
56421: IFFALSE 56445
// result := Delete ( result , result ) ;
56423: LD_ADDR_VAR 0 3
56427: PUSH
56428: LD_VAR 0 3
56432: PPUSH
56433: LD_VAR 0 3
56437: PPUSH
56438: CALL_OW 3
56442: ST_TO_ADDR
56443: GO 56420
56445: POP
56446: POP
// end ;
56447: LD_VAR 0 3
56451: RET
// export function ComExit ( unit ) ; var tmp ; begin
56452: LD_INT 0
56454: PPUSH
56455: PPUSH
// if not IsInUnit ( unit ) then
56456: LD_VAR 0 1
56460: PPUSH
56461: CALL_OW 310
56465: NOT
56466: IFFALSE 56470
// exit ;
56468: GO 56530
// tmp := IsInUnit ( unit ) ;
56470: LD_ADDR_VAR 0 3
56474: PUSH
56475: LD_VAR 0 1
56479: PPUSH
56480: CALL_OW 310
56484: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56485: LD_VAR 0 3
56489: PPUSH
56490: CALL_OW 247
56494: PUSH
56495: LD_INT 2
56497: EQUAL
56498: IFFALSE 56511
// ComExitVehicle ( unit ) else
56500: LD_VAR 0 1
56504: PPUSH
56505: CALL_OW 121
56509: GO 56520
// ComExitBuilding ( unit ) ;
56511: LD_VAR 0 1
56515: PPUSH
56516: CALL_OW 122
// result := tmp ;
56520: LD_ADDR_VAR 0 2
56524: PUSH
56525: LD_VAR 0 3
56529: ST_TO_ADDR
// end ; end_of_file
56530: LD_VAR 0 2
56534: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
56535: GO 56537
56537: DISABLE
// begin ru_radar := 98 ;
56538: LD_ADDR_EXP 79
56542: PUSH
56543: LD_INT 98
56545: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
56546: LD_ADDR_EXP 80
56550: PUSH
56551: LD_INT 89
56553: ST_TO_ADDR
// us_hack := 99 ;
56554: LD_ADDR_EXP 81
56558: PUSH
56559: LD_INT 99
56561: ST_TO_ADDR
// us_artillery := 97 ;
56562: LD_ADDR_EXP 82
56566: PUSH
56567: LD_INT 97
56569: ST_TO_ADDR
// ar_bio_bomb := 91 ;
56570: LD_ADDR_EXP 83
56574: PUSH
56575: LD_INT 91
56577: ST_TO_ADDR
// tech_Artillery := 80 ;
56578: LD_ADDR_EXP 84
56582: PUSH
56583: LD_INT 80
56585: ST_TO_ADDR
// tech_RadMat := 81 ;
56586: LD_ADDR_EXP 85
56590: PUSH
56591: LD_INT 81
56593: ST_TO_ADDR
// tech_BasicTools := 82 ;
56594: LD_ADDR_EXP 86
56598: PUSH
56599: LD_INT 82
56601: ST_TO_ADDR
// tech_Cargo := 83 ;
56602: LD_ADDR_EXP 87
56606: PUSH
56607: LD_INT 83
56609: ST_TO_ADDR
// tech_Track := 84 ;
56610: LD_ADDR_EXP 88
56614: PUSH
56615: LD_INT 84
56617: ST_TO_ADDR
// tech_Crane := 85 ;
56618: LD_ADDR_EXP 89
56622: PUSH
56623: LD_INT 85
56625: ST_TO_ADDR
// tech_Bulldozer := 86 ;
56626: LD_ADDR_EXP 90
56630: PUSH
56631: LD_INT 86
56633: ST_TO_ADDR
// tech_Hovercraft := 87 ;
56634: LD_ADDR_EXP 91
56638: PUSH
56639: LD_INT 87
56641: ST_TO_ADDR
// end ;
56642: END
