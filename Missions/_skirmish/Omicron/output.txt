// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 64813 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7093 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 30802 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 35642 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 35642 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 68648 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 30802 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 30802 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 30802 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 35642 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 30802 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 68648 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 35642 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 68648 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 71467 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 7
4706: PUSH
4707: LD_INT 12
4709: PUSH
4710: LD_INT 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: LESS
4724: IFFALSE 4798
// begin uc_side := 3 ;
4726: LD_ADDR_OWVAR 20
4730: PUSH
4731: LD_INT 3
4733: ST_TO_ADDR
// uc_nation := 3 ;
4734: LD_ADDR_OWVAR 21
4738: PUSH
4739: LD_INT 3
4741: ST_TO_ADDR
// ResetHc ;
4742: CALL 68648 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_INT 143
4793: PPUSH
4794: CALL_OW 52
// end ; if type = 1 then
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4829
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4808: LD_INT 143
4810: PPUSH
4811: LD_INT 21
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 51
4822: PPUSH
4823: CALL_OW 185
4827: GO 4908
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4829: LD_INT 143
4831: PPUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 23
4840: PUSH
4841: LD_INT 24
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_INT 44
4876: PUSH
4877: LD_INT 44
4879: PUSH
4880: LD_INT 43
4882: PUSH
4883: LD_INT 42
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: PPUSH
4904: CALL_OW 185
// end ;
4908: LD_VAR 0 2
4912: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4913: LD_EXP 8
4917: IFFALSE 5119
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4926: LD_EXP 25
4930: PPUSH
4931: LD_INT 79
4933: PPUSH
4934: LD_INT 155
4936: PPUSH
4937: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4941: LD_EXP 25
4945: PPUSH
4946: LD_INT 4
4948: PPUSH
4949: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_EXP 24
4962: PPUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PPUSH
4969: CALL_OW 72
4973: ST_TO_ADDR
// for i in tmp do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_VAR 0 2
4983: PUSH
4984: FOR_IN
4985: IFFALSE 5019
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_INT 123
4994: PPUSH
4995: LD_INT 60
4997: PPUSH
4998: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: LD_INT 153
5009: PPUSH
5010: LD_INT 103
5012: PPUSH
5013: CALL_OW 174
// end ;
5017: GO 4984
5019: POP
5020: POP
// repeat wait ( 0 0$1 ) ;
5021: LD_INT 35
5023: PPUSH
5024: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_EXP 24
5037: PPUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PPUSH
5044: CALL_OW 72
5048: ST_TO_ADDR
// for i in tmp do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 2
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5110
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 81
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 74
5103: PPUSH
5104: CALL_OW 115
5108: GO 5059
5110: POP
5111: POP
5112: LD_VAR 0 2
5116: NOT
5117: IFFALSE 5021
// end ;
5119: PPOPN 2
5121: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5122: LD_INT 5
5124: PPUSH
5125: LD_INT 81
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: IFFALSE 5152
5141: GO 5143
5143: DISABLE
// russianAlert := true ;
5144: LD_ADDR_EXP 5
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
5152: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5153: LD_INT 106
5155: PPUSH
5156: CALL_OW 302
5160: PUSH
5161: LD_INT 106
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: LD_INT 3
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_INT 106
5176: PPUSH
5177: CALL_OW 274
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 275
5189: PUSH
5190: LD_INT 100
5192: LESS
5193: AND
5194: IFFALSE 5218
5196: GO 5198
5198: DISABLE
// begin enable ;
5199: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 200
5213: PPUSH
5214: CALL_OW 276
// end ;
5218: END
// every 0 0$1 do var i , un , tmp ;
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
// begin uc_side := 3 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 3
5234: ST_TO_ADDR
// uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// tmp := [ ] ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to 2 do
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 2
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5341
// begin PrepareHuman ( false , 2 , 2 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: CALL_OW 380
// un := CreateHuman ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: CALL_OW 44
5288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 74
5325: PPUSH
5326: LD_INT 112
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 0
5334: PPUSH
5335: CALL_OW 50
// end ;
5339: GO 5263
5341: POP
5342: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5343: LD_INT 112
5345: PPUSH
5346: CALL_OW 274
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: LD_INT 100
5356: PPUSH
5357: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i in tmp do
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_IN
5379: IFFALSE 5461
// begin if IsDead ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 301
5390: IFFALSE 5408
// tmp := tmp diff i ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 3
5401: PUSH
5402: LD_VAR 0 1
5406: DIFF
5407: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 314
5417: NOT
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 281
5428: NOT
5429: AND
5430: IFFALSE 5459
// begin ComTransport ( i , kagan , mat_oil ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 112
5439: PPUSH
5440: LD_INT 2
5442: PPUSH
5443: CALL_OW 151
// AddComGive ( i , beria ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_INT 106
5454: PPUSH
5455: CALL_OW 221
// end ; end ;
5459: GO 5378
5461: POP
5462: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5463: LD_VAR 0 3
5467: NOT
5468: PUSH
5469: LD_INT 112
5471: PPUSH
5472: CALL_OW 301
5476: OR
5477: PUSH
5478: LD_INT 106
5480: PPUSH
5481: CALL_OW 301
5485: OR
5486: IFFALSE 5361
// end ;
5488: PPOPN 3
5490: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
// begin enable ;
5501: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 22
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 51
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: LD_INT 600
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5547: LD_ADDR_VAR 0 5
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 9
5606: PPUSH
5607: CALL_OW 435
5611: ST_TO_ADDR
// if not cargo or not skr or not dep then
5612: LD_VAR 0 4
5616: NOT
5617: PUSH
5618: LD_VAR 0 3
5622: NOT
5623: OR
5624: PUSH
5625: LD_VAR 0 5
5629: NOT
5630: OR
5631: IFFALSE 5635
// exit ;
5633: GO 5799
// for i in cargo do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 4
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5797
// begin if not skr then
5648: LD_VAR 0 3
5652: NOT
5653: IFFALSE 5659
// exit ;
5655: POP
5656: POP
5657: GO 5799
// if not HasTask ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 314
5668: NOT
5669: IFFALSE 5738
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: CALL_OW 117
// for j := 1 to 2 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 2
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5734
// skr := Delete ( skr , 1 ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
5732: GO 5711
5734: POP
5735: POP
// end else
5736: GO 5795
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 261
5747: PUSH
5748: LD_INT 3
5750: LESS
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 5
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 74
5771: PPUSH
5772: CALL_OW 296
5776: PUSH
5777: LD_INT 6
5779: LESS
5780: AND
5781: IFFALSE 5795
// SetFuel ( i , 100 ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_INT 100
5790: PPUSH
5791: CALL_OW 240
// end ;
5795: GO 5645
5797: POP
5798: POP
// end ;
5799: PPOPN 5
5801: END
// export function SendSupport ; var i , un ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// uc_nation := 3 ;
5807: LD_ADDR_OWVAR 21
5811: PUSH
5812: LD_INT 3
5814: ST_TO_ADDR
// uc_side := 3 ;
5815: LD_ADDR_OWVAR 20
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// ResetHc ;
5823: CALL 68648 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 3
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_OWVAR 67
5855: ARRAY
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5932
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_OWVAR 67
5870: PPUSH
5871: CALL_OW 380
// un := CreateHuman ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: CALL_OW 44
5884: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 107
5892: PPUSH
5893: LD_INT 95
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_INT 56
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: CALL_OW 114
// AddComHold ( un ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 200
// end ;
5930: GO 5857
5932: POP
5933: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 4
5939: PPUSH
5940: LD_OWVAR 67
5944: PPUSH
5945: CALL_OW 380
// un := CreateHuman ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: LD_INT 107
5966: PPUSH
5967: LD_INT 95
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5980: LD_VAR 0 3
5984: PPUSH
5985: LD_INT 59
5987: PPUSH
5988: LD_INT 25
5990: PPUSH
5991: CALL_OW 111
// if Difficulty > 1 then
5995: LD_OWVAR 67
5999: PUSH
6000: LD_INT 1
6002: GREATER
6003: IFFALSE 6112
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 2
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6110
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_OWVAR 67
6048: PPUSH
6049: CALL_OW 380
// un := CreateHuman ;
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: CALL_OW 44
6062: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 107
6070: PPUSH
6071: LD_INT 95
6073: PPUSH
6074: LD_INT 4
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 45
6091: PPUSH
6092: LD_INT 76
6094: PPUSH
6095: CALL_OW 114
// AddComHold ( un ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 200
// end ;
6108: GO 6035
6110: POP
6111: POP
// end ; end ;
6112: LD_VAR 0 1
6116: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6117: LD_OWVAR 1
6121: PUSH
6122: LD_INT 42000
6124: GREATEREQUAL
6125: PUSH
6126: LD_OWVAR 67
6130: PUSH
6131: LD_INT 1
6133: GREATER
6134: AND
6135: PUSH
6136: LD_EXP 24
6140: PUSH
6141: LD_INT 4
6143: GREATER
6144: AND
6145: PUSH
6146: LD_EXP 8
6150: NOT
6151: AND
6152: IFFALSE 6445
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
// begin enable ;
6163: ENABLE
// tmp := [ ] ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: LD_INT 91
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 47
6188: PUSH
6189: LD_INT 80
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 39
6198: PUSH
6199: LD_INT 67
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: LD_INT 60
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 52
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 1
6264: MINUS
6265: ARRAY
6266: PUSH
6267: FOR_TO
6268: IFFALSE 6419
// begin uc_side := 3 ;
6270: LD_ADDR_OWVAR 20
6274: PUSH
6275: LD_INT 3
6277: ST_TO_ADDR
// uc_nation := 3 ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_INT 3
6285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6286: LD_INT 22
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 42
6297: PUSH
6298: LD_INT 42
6300: PUSH
6301: LD_INT 44
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 3
6316: MOD
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ARRAY
6322: PPUSH
6323: LD_INT 100
6325: PPUSH
6326: CALL 35642 0 5
// un := CreateVehicle ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: CALL_OW 45
6339: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 57
6347: PPUSH
6348: LD_INT 103
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 5
6398: PPUSH
6399: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6403: CALL_OW 44
6407: PPUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: CALL_OW 52
// end ;
6417: GO 6267
6419: POP
6420: POP
// repeat wait ( 0 0$1 ) ;
6421: LD_INT 35
6423: PPUSH
6424: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_VAR 0 4
6437: PPUSH
6438: CALL 70727 0 2
6442: NOT
6443: IFFALSE 6421
// end ;
6445: PPOPN 4
6447: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6448: LD_INT 3
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: IFFALSE 6567
6485: GO 6487
6487: DISABLE
6488: LD_INT 0
6490: PPUSH
// begin enable ;
6491: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6565
// if GetFuel ( i ) < 3 then
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 261
6545: PUSH
6546: LD_INT 3
6548: LESS
6549: IFFALSE 6563
// SetFuel ( i , 3 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 240
6563: GO 6533
6565: POP
6566: POP
// end ; end_of_file
6567: PPOPN 1
6569: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// uc_side := 2 ;
6578: LD_ADDR_OWVAR 20
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// uc_nation := 2 ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_INT 2
6593: ST_TO_ADDR
// InitVc ;
6594: CALL_OW 20
// ResetHc ;
6598: CALL 68648 0 0
// for j := 1 to 2 do
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6840
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_INT 178
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 268
6635: PUSH
6636: LD_INT 121
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_VAR 0 3
6651: ARRAY
6652: ST_TO_ADDR
// for i := 1 to 8 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 8
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6836
// begin uc_side := 2 ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
// uc_nation := 2 ;
6677: LD_ADDR_OWVAR 21
6681: PUSH
6682: LD_INT 2
6684: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6685: LD_INT 14
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 26
6696: PUSH
6697: LD_INT 27
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 99
6718: PPUSH
6719: CALL 35642 0 5
// veh := CreateVehicle ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: CALL_OW 45
6732: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 3
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_VAR 0 6
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6775: LD_INT 0
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: LD_INT 6
6783: PPUSH
6784: CALL_OW 380
// un := CreateHuman ;
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: CALL_OW 44
6797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 186
6819: PPUSH
6820: LD_INT 17
6822: PPUSH
6823: CALL_OW 111
// wait ( 0 0$2 ) ;
6827: LD_INT 70
6829: PPUSH
6830: CALL_OW 67
// end ;
6834: GO 6666
6836: POP
6837: POP
// end ;
6838: GO 6615
6840: POP
6841: POP
// for i := 1 to 10 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 10
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6923
// begin PrepareHuman ( false , 1 , 5 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_INT 5
6866: PPUSH
6867: CALL_OW 380
// un := CreateHuman ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6881: LD_VAR 0 4
6885: PPUSH
6886: LD_INT 178
6888: PPUSH
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 186
6906: PPUSH
6907: LD_INT 17
6909: PPUSH
6910: CALL_OW 111
// wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// end ;
6921: GO 6855
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 1
6929: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 50
6942: PUSH
6943: EMPTY
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: IFFALSE 7090
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin enable ;
6963: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not enemy then
7002: LD_VAR 0 2
7006: NOT
7007: IFFALSE 7029
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 50
7046: PUSH
7047: EMPTY
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PUSH
7059: FOR_IN
7060: IFFALSE 7088
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 74
7081: PPUSH
7082: CALL_OW 115
7086: GO 7059
7088: POP
7089: POP
// end ; end_of_file
7090: PPOPN 2
7092: END
// export function Action ; begin
7093: LD_INT 0
7095: PPUSH
// InGameOn ;
7096: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7100: LD_INT 106
7102: PPUSH
7103: LD_INT 3
7105: PPUSH
7106: CALL_OW 86
// wait ( 0 0$2 ) ;
7110: LD_INT 70
7112: PPUSH
7113: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7117: LD_STRING target1
7119: PPUSH
7120: CALL_OW 337
// InGameOff ;
7124: CALL_OW 9
// SaveForQuickRestart ;
7128: CALL_OW 22
// end ;
7132: LD_VAR 0 1
7136: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7137: LD_INT 64
7139: PPUSH
7140: CALL_OW 301
7144: PUSH
7145: LD_EXP 8
7149: NOT
7150: AND
7151: IFFALSE 7171
7153: GO 7155
7155: DISABLE
// begin omicronFall := true ;
7156: LD_ADDR_EXP 7
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// YouLost ( omi ) ;
7164: LD_STRING omi
7166: PPUSH
7167: CALL_OW 104
// end ;
7171: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7172: LD_INT 4
7174: PPUSH
7175: LD_EXP 14
7179: PPUSH
7180: CALL_OW 292
7184: PUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_EXP 14
7192: PPUSH
7193: CALL_OW 310
7197: PPUSH
7198: CALL_OW 292
7202: OR
7203: PUSH
7204: LD_INT 64
7206: PPUSH
7207: CALL_OW 302
7211: AND
7212: IFFALSE 7765
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 4
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 72
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// for i in tmp do
7276: LD_ADDR_VAR 0 1
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7303
// SetSide ( i , 1 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 235
7301: GO 7286
7303: POP
7304: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7305: LD_EXP 14
7309: PPUSH
7310: LD_INT 37
7312: PPUSH
7313: LD_INT 40
7315: PPUSH
7316: CALL_OW 111
// wait ( 0 0$5 ) ;
7320: LD_INT 175
7322: PPUSH
7323: CALL_OW 67
// ComExit ( Sikorski ) ;
7327: LD_EXP 14
7331: PPUSH
7332: CALL 68521 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_INT 37
7343: PPUSH
7344: LD_INT 40
7346: PPUSH
7347: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7351: LD_EXP 14
7355: PPUSH
7356: CALL_OW 85
// wait ( 0 0$2 ) ;
7360: LD_INT 70
7362: PPUSH
7363: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL 68521 0 1
7381: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 14
7391: PPUSH
7392: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_EXP 14
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 5
7420: LESS
7421: PUSH
7422: LD_EXP 14
7426: PPUSH
7427: CALL_OW 310
7431: NOT
7432: AND
7433: IFFALSE 7396
// ComTurnUnit ( Sikorski , speaker ) ;
7435: LD_EXP 14
7439: PPUSH
7440: LD_VAR 0 3
7444: PPUSH
7445: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_EXP 14
7458: PPUSH
7459: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7463: LD_EXP 14
7467: PPUSH
7468: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7472: LD_EXP 14
7476: PPUSH
7477: LD_STRING DS-1
7479: PPUSH
7480: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_STRING DP-1
7491: PPUSH
7492: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DS-2
7503: PPUSH
7504: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_STRING DP-2
7515: PPUSH
7516: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7520: LD_EXP 14
7524: PPUSH
7525: LD_STRING DS-3
7527: PPUSH
7528: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_STRING DP-3
7539: PPUSH
7540: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7544: LD_EXP 14
7548: PPUSH
7549: LD_STRING DS-4
7551: PPUSH
7552: CALL_OW 88
// wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// if whereHeWas then
7563: LD_VAR 0 4
7567: IFFALSE 7583
// ComEnterUnit ( speaker , whereHeWas ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_VAR 0 4
7578: PPUSH
7579: CALL_OW 120
// ComHold ( Sikorski ) ;
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 140
// wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7599: LD_EXP 15
7603: PPUSH
7604: LD_STRING DR-1
7606: PPUSH
7607: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DS-5
7618: PPUSH
7619: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7623: LD_EXP 15
7627: PPUSH
7628: LD_STRING DR-2
7630: PPUSH
7631: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7635: LD_EXP 14
7639: PPUSH
7640: LD_STRING DS-6
7642: PPUSH
7643: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7647: LD_EXP 15
7651: PPUSH
7652: LD_STRING DR-3
7654: PPUSH
7655: CALL_OW 94
// InGameOff ;
7659: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7663: LD_STRING target2
7665: PPUSH
7666: CALL_OW 337
// sikorskiInOmicron := true ;
7670: LD_ADDR_EXP 9
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7678: LD_INT 70
7680: PPUSH
7681: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_STRING DS-7
7692: PPUSH
7693: CALL_OW 88
// wait ( 3 3$00 ) ;
7697: LD_INT 6300
7699: PPUSH
7700: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7704: LD_EXP 15
7708: PPUSH
7709: LD_STRING DRforce-5
7711: PPUSH
7712: CALL_OW 94
// wait ( 4 4$50 ) ;
7716: LD_INT 10150
7718: PPUSH
7719: CALL_OW 67
// FirstReinforcements ;
7723: CALL 7942 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7727: LD_INT 25200
7729: PPUSH
7730: LD_INT 31500
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7742: LD_EXP 15
7746: PPUSH
7747: LD_STRING DRforce-10
7749: PPUSH
7750: CALL_OW 94
// wait ( 9 9$50 ) ;
7754: LD_INT 20650
7756: PPUSH
7757: CALL_OW 67
// SecondReinforcements ;
7761: CALL 8785 0 0
// end ;
7765: PPOPN 4
7767: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7768: LD_EXP 14
7772: PPUSH
7773: CALL_OW 256
7777: PUSH
7778: LD_INT 1000
7780: LESS
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 101
7807: PUSH
7808: LD_INT 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: AND
7829: IFFALSE 7846
7831: GO 7833
7833: DISABLE
// Say ( Sikorski , DRus ) ;
7834: LD_EXP 14
7838: PPUSH
7839: LD_STRING DRus
7841: PPUSH
7842: CALL_OW 88
7846: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7847: LD_OWVAR 1
7851: PUSH
7852: LD_INT 23100
7854: PUSH
7855: LD_INT 22050
7857: PUSH
7858: LD_INT 20300
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: GREATEREQUAL
7872: IFFALSE 7941
7874: GO 7876
7876: DISABLE
// begin SendSupport ;
7877: CALL 5802 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7881: LD_EXP 24
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: PPUSH
7901: LD_INT 62
7903: PPUSH
7904: LD_INT 22
7906: PPUSH
7907: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7911: LD_EXP 25
7915: PPUSH
7916: LD_INT 69
7918: PPUSH
7919: LD_INT 27
7921: PPUSH
7922: CALL_OW 111
// wait ( 1 1$00 ) ;
7926: LD_INT 2100
7928: PPUSH
7929: CALL_OW 67
// startAttackOnOmicron := true ;
7933: LD_ADDR_EXP 6
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ;
7941: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// uc_side := 4 ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_INT 4
7957: ST_TO_ADDR
// uc_nation := 1 ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// tmp := [ ] ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// ResetHc ;
7973: CALL 68648 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 4
7988: PPUSH
7989: LD_INT 77
7991: PPUSH
7992: CALL 35642 0 5
// un := CreateVehicle ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: CALL_OW 45
8005: ST_TO_ADDR
// tmp := tmp union un ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 4
8015: PUSH
8016: LD_VAR 0 3
8020: UNION
8021: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 106
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8052: LD_INT 0
8054: PPUSH
8055: LD_INT 3
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 380
// un := CreateHuman ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: CALL_OW 44
8074: ST_TO_ADDR
// tmp := tmp union un ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 4
8084: PUSH
8085: LD_VAR 0 3
8089: UNION
8090: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: ARRAY
8110: PPUSH
8111: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 109
8122: PPUSH
8123: LD_INT 9
8125: PPUSH
8126: CALL_OW 111
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 2
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: PUSH
8167: FOR_TO
8168: IFFALSE 8232
// begin PrepareHuman ( false , 1 , 2 ) ;
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 2
8178: PPUSH
8179: CALL_OW 380
// un := CreateHuman ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: CALL_OW 44
8192: ST_TO_ADDR
// tmp := tmp union un ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: LD_VAR 0 3
8207: UNION
8208: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 105
8216: PPUSH
8217: LD_INT 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 50
// end ;
8230: GO 8167
8232: POP
8233: POP
// PrepareHuman ( false , 4 , 2 ) ;
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 380
// un := CreateHuman ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// tmp := tmp union un ;
8257: LD_ADDR_VAR 0 4
8261: PUSH
8262: LD_VAR 0 4
8266: PUSH
8267: LD_VAR 0 3
8271: UNION
8272: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 105
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8294: LD_VAR 0 4
8298: PPUSH
8299: LD_INT 26
8301: PPUSH
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 114
// spotted := false ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8332: LD_INT 35
8334: PPUSH
8335: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1000
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 5
8370: NOT
8371: AND
8372: IFFALSE 8498
// begin spotted := true ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_INT 3
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 1000
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: PUSH
8414: LD_INT 1
8416: ARRAY
8417: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 250
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: CALL_OW 251
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8447: LD_VAR 0 6
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 6
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 12
8470: NEG
8471: PPUSH
8472: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 6
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 84
// end ; for i in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8540
// if not HasTask ( i ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 314
8520: NOT
8521: IFFALSE 8538
// ComAgressiveMove ( i , 26 , 35 ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_INT 26
8530: PPUSH
8531: LD_INT 35
8533: PPUSH
8534: CALL_OW 114
8538: GO 8508
8540: POP
8541: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 50
8549: PUSH
8550: EMPTY
8551: LIST
8552: PPUSH
8553: CALL_OW 72
8557: NOT
8558: IFFALSE 8593
// begin if spotted then
8560: LD_VAR 0 5
8564: IFFALSE 8591
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8566: LD_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 6
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 331
// exit ;
8591: GO 8780
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 91
8600: PUSH
8601: LD_INT 64
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 4
8619: PPUSH
8620: LD_EXP 14
8624: PPUSH
8625: CALL_OW 292
8629: OR
8630: IFFALSE 8332
// omicronSquad := omicronSquad union tmp ;
8632: LD_ADDR_EXP 13
8636: PUSH
8637: LD_EXP 13
8641: PUSH
8642: LD_VAR 0 4
8646: UNION
8647: ST_TO_ADDR
// if spotted then
8648: LD_VAR 0 5
8652: IFFALSE 8679
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8654: LD_VAR 0 6
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 331
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8706
// SetSide ( i , 1 ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 235
8704: GO 8689
8706: POP
8707: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 50
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: IFFALSE 8780
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 26
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: EMPTY
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 72
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_STRING Dcargo
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: LD_VAR 0 1
8784: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// uc_side := 1 ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// uc_nation := 1 ;
8799: LD_ADDR_OWVAR 21
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// ResetHc ;
8807: CALL 68648 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: CALL_OW 380
// un := CreateHuman ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: CALL_OW 44
8833: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8834: LD_INT 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 5
8845: PPUSH
8846: LD_INT 90
8848: PPUSH
8849: CALL 35642 0 5
// veh := CreateVehicle ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 83
8882: PPUSH
8883: LD_INT 154
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_INT 4
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_OWVAR 67
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8989
// begin PrepareHuman ( false , 1 , 3 ) ;
8943: LD_INT 0
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 380
// un := CreateHuman ;
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: CALL_OW 44
8965: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 83
8973: PPUSH
8974: LD_INT 154
8976: PPUSH
8977: LD_INT 10
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 50
// end ;
8987: GO 8940
8989: POP
8990: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 83
9021: PPUSH
9022: LD_INT 154
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_STRING Dhelp
9042: PPUSH
9043: CALL_OW 94
// ResetHc ;
9047: CALL 68648 0 0
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9056: LD_EXP 5
9060: IFFALSE 9202
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_EXP 20
9079: PPUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 54
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// for i := 1 to tmp do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 2
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9200
// begin ComExitBuilding ( tmp [ i ] ) ;
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 3
9187: PUSH
9188: LD_VAR 0 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 180
// end ;
9198: GO 9154
9200: POP
9201: POP
// end ;
9202: PPOPN 3
9204: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9205: LD_EXP 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: AND
9239: IFFALSE 9385
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
9247: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9248: LD_EXP 16
9252: PPUSH
9253: LD_STRING D9a-Kur-1
9255: PPUSH
9256: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9260: LD_EXP 19
9264: PPUSH
9265: LD_STRING D9a-Bur-1
9267: PPUSH
9268: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D9a-Kur-2
9279: PPUSH
9280: CALL_OW 94
// retreatFromOmicron := true ;
9284: LD_ADDR_EXP 8
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_EXP 18
9301: PUSH
9302: LD_EXP 20
9306: PUSH
9307: LD_EXP 21
9311: UNION
9312: PPUSH
9313: LD_INT 3
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 72
9334: UNION
9335: ST_TO_ADDR
// for i in noncombat do
9336: LD_ADDR_VAR 0 1
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9383
// begin if IsInUnit ( i ) then
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 310
9358: IFFALSE 9369
// ComExitBuilding ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 173
// end ;
9381: GO 9346
9383: POP
9384: POP
// end ;
9385: PPOPN 2
9387: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9388: LD_OWVAR 1
9392: PUSH
9393: LD_INT 42000
9395: PPUSH
9396: LD_INT 63000
9398: PPUSH
9399: CALL_OW 12
9403: GREATER
9404: IFFALSE 9549
9406: GO 9408
9408: DISABLE
9409: LD_INT 0
9411: PPUSH
// begin uc_side := 4 ;
9412: LD_ADDR_OWVAR 20
9416: PUSH
9417: LD_INT 4
9419: ST_TO_ADDR
// uc_nation := 4 ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 4
9427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_INT 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 380
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 1
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 161
9466: PPUSH
9467: LD_INT 162
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 50
// ResetHc ;
9480: CALL 68648 0 0
// wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_STRING Dun1
9498: PPUSH
9499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9503: LD_INT 35
9505: PPUSH
9506: CALL_OW 67
// if IsDead ( un ) then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 301
9519: IFFALSE 9523
// exit ;
9521: GO 9549
// until See ( 1 , un ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 292
9535: IFFALSE 9503
// SetSide ( un , 1 ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 1
9551: END
// every 0 0$1 trigger tanksCounter >= 20 do
9552: LD_EXP 12
9556: PUSH
9557: LD_INT 20
9559: GREATEREQUAL
9560: IFFALSE 9572
9562: GO 9564
9564: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9565: LD_STRING ACH_PANZERKNACKER
9567: PPUSH
9568: CALL_OW 543
9572: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9573: LD_OWVAR 1
9577: PUSH
9578: LD_INT 94500
9580: PPUSH
9581: LD_INT 109200
9583: PPUSH
9584: CALL_OW 12
9588: GREATER
9589: IFFALSE 9852
9591: GO 9593
9593: DISABLE
9594: LD_INT 0
9596: PPUSH
// begin PrepareArabian ;
9597: CALL 6570 0 0
// uc_side := 4 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 4
9608: ST_TO_ADDR
// uc_nation := 1 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// ResetHc ;
9617: CALL 68648 0 0
// un := CreateHuman ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: CALL_OW 44
9630: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_STRING ar_come
9638: PPUSH
9639: CALL_OW 94
// wait ( 0 0$20 ) ;
9643: LD_INT 700
9645: PPUSH
9646: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DR-Back
9657: PPUSH
9658: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9662: LD_STRING target3
9664: PPUSH
9665: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9669: LD_INT 10
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9679: LD_INT 35
9681: PPUSH
9682: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9686: LD_EXP 14
9690: PPUSH
9691: LD_INT 10
9693: PPUSH
9694: CALL_OW 308
9698: PUSH
9699: LD_INT 10
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: OR
9717: IFFALSE 9679
// SayRadio ( Harrison , you_win ) ;
9719: LD_EXP 15
9723: PPUSH
9724: LD_STRING you_win
9726: PPUSH
9727: CALL_OW 94
// AddMedal ( med , 1 ) ;
9731: LD_STRING med
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9741: LD_EXP 11
9745: PUSH
9746: LD_INT 27
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_OWVAR 67
9764: ARRAY
9765: GREATER
9766: IFFALSE 9780
// AddMedal ( ru , 1 ) else
9768: LD_STRING ru
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 101
9778: GO 9791
// AddMedal ( ru , - 1 ) ;
9780: LD_STRING ru
9782: PPUSH
9783: LD_INT 1
9785: NEG
9786: PPUSH
9787: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9791: LD_EXP 10
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: LESS
9816: IFFALSE 9830
// AddMedal ( pep , 1 ) else
9818: LD_STRING pep
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 101
9828: GO 9841
// AddMedal ( pep , - 1 ) ;
9830: LD_STRING pep
9832: PPUSH
9833: LD_INT 1
9835: NEG
9836: PPUSH
9837: CALL_OW 101
// GiveMedals ( MAIN ) ;
9841: LD_STRING MAIN
9843: PPUSH
9844: CALL_OW 102
// YouWin ;
9848: CALL_OW 103
// end ; end_of_file
9852: PPOPN 1
9854: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL 10711 0 1
// if un = Sikorski then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 14
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( sik ) ;
9876: LD_STRING sik
9878: PPUSH
9879: CALL_OW 104
// if un in russianOmicronAttackers then
9883: LD_VAR 0 1
9887: PUSH
9888: LD_EXP 24
9892: IN
9893: IFFALSE 9911
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9895: LD_ADDR_EXP 24
9899: PUSH
9900: LD_EXP 24
9904: PUSH
9905: LD_VAR 0 1
9909: DIFF
9910: ST_TO_ADDR
// if un in russianCargo then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_EXP 25
9920: IN
9921: IFFALSE 9939
// russianCargo := russianCargo diff un ;
9923: LD_ADDR_EXP 25
9927: PUSH
9928: LD_EXP 25
9932: PUSH
9933: LD_VAR 0 1
9937: DIFF
9938: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 51
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: IN
9973: IFFALSE 9982
// ProduceNew ( 1 ) ;
9975: LD_INT 1
9977: PPUSH
9978: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: PUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 247
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: AND
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 248
10027: PUSH
10028: LD_INT 1
10030: EQUAL
10031: AND
10032: IFFALSE 10048
// usLoseCounter := usLoseCounter + 1 ;
10034: LD_ADDR_EXP 10
10038: PUSH
10039: LD_EXP 10
10043: PUSH
10044: LD_INT 1
10046: PLUS
10047: ST_TO_ADDR
// end ;
10048: PPOPN 1
10050: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 2
10060: PPUSH
10061: CALL 10831 0 2
// if GetSide ( factory ) <> 3 then
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 3
10077: NONEQUAL
10078: IFFALSE 10082
// exit ;
10080: GO 10144
// if GetWeapon ( veh ) = ru_cargo_bay then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 51
10094: EQUAL
10095: IFFALSE 10099
// exit ;
10097: GO 10144
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 310
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: UNION
10128: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 71
10136: PPUSH
10137: LD_INT 37
10139: PPUSH
10140: CALL_OW 174
// end ;
10144: PPOPN 2
10146: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10147: LD_VAR 0 2
10151: PUSH
10152: LD_EXP 24
10156: IN
10157: IFFALSE 10175
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10159: LD_ADDR_EXP 24
10163: PUSH
10164: LD_EXP 24
10168: PUSH
10169: LD_VAR 0 2
10173: DIFF
10174: ST_TO_ADDR
// if oldId in russianCargo then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_EXP 25
10184: IN
10185: IFFALSE 10203
// russianCargo := russianCargo diff oldId ;
10187: LD_ADDR_EXP 25
10191: PUSH
10192: LD_EXP 25
10196: PUSH
10197: LD_VAR 0 2
10201: DIFF
10202: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10203: LD_VAR 0 1
10207: PUSH
10208: LD_EXP 24
10212: IN
10213: IFFALSE 10231
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10215: LD_ADDR_EXP 24
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_VAR 0 1
10229: DIFF
10230: ST_TO_ADDR
// if newId in russianCargo then
10231: LD_VAR 0 1
10235: PUSH
10236: LD_EXP 25
10240: IN
10241: IFFALSE 10259
// russianCargo := russianCargo diff newId ;
10243: LD_ADDR_EXP 25
10247: PUSH
10248: LD_EXP 25
10252: PUSH
10253: LD_VAR 0 1
10257: DIFF
10258: ST_TO_ADDR
// end ;
10259: PPOPN 4
10261: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: CALL 10807 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10281: LD_VAR 0 2
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: AND
10318: IFFALSE 10334
// ruLoseCounter := ruLoseCounter + 1 ;
10320: LD_ADDR_EXP 11
10324: PUSH
10325: LD_EXP 11
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: IN
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 247
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// tanksCounter := tanksCounter + 1 ;
10388: LD_ADDR_EXP 12
10392: PUSH
10393: LD_EXP 12
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// end ;
10402: PPOPN 3
10404: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10574
// begin ComRepairVehicle ( driver , veh ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 301
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 301
10467: OR
10468: PUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 250
10481: GREATER
10482: OR
10483: IFFALSE 10441
// if GetLives ( veh ) > 250 then
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 250
10497: GREATER
10498: IFFALSE 10574
// begin ComEnterUnit ( driver , veh ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 71
10521: PPUSH
10522: LD_INT 29
10524: PPUSH
10525: CALL_OW 171
// SetTag ( veh , 1 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 109
// if not veh in russianOmicronAttackers then
10541: LD_VAR 0 2
10545: PUSH
10546: LD_EXP 24
10550: IN
10551: NOT
10552: IFFALSE 10574
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10554: LD_ADDR_EXP 24
10558: PUSH
10559: LD_EXP 24
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 68123 0 2
10573: ST_TO_ADDR
// end ; end ; end ;
10574: PPOPN 4
10576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL 10815 0 1
// end ; end_of_file
10586: PPOPN 1
10588: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10589: LD_EXP 9
10593: PUSH
10594: LD_INT 6
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 287
10604: PUSH
10605: LD_INT 18
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: LESS
10625: AND
10626: IFFALSE 10668
10628: GO 10630
10630: DISABLE
// begin enable ;
10631: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10632: LD_INT 350
10634: PPUSH
10635: LD_INT 1050
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10647: LD_INT 2
10649: PPUSH
10650: LD_INT 5
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: LD_INT 6
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 55
// end ;
10668: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10669: LD_INT 7
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 287
10679: PUSH
10680: LD_INT 5
10682: LESS
10683: IFFALSE 10710
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10689: LD_INT 2
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: CALL_OW 12
10699: PPUSH
10700: LD_INT 7
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 55
// end ; end_of_file end_of_file
10710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 264
10726: PUSH
10727: LD_INT 91
10729: EQUAL
10730: IFFALSE 10802
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10732: LD_INT 68
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: IFFALSE 10765
// eff := 70 else
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_INT 70
10762: ST_TO_ADDR
10763: GO 10773
// eff := 30 ;
10765: LD_ADDR_VAR 0 4
10769: PUSH
10770: LD_INT 30
10772: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 250
10782: PPUSH
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 251
10792: PPUSH
10793: LD_VAR 0 4
10797: PPUSH
10798: CALL_OW 495
// end ; end ;
10802: LD_VAR 0 2
10806: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10807: LD_INT 0
10809: PPUSH
// end ;
10810: LD_VAR 0 4
10814: RET
// export function SOS_Command ( cmd ) ; begin
10815: LD_INT 0
10817: PPUSH
// end ;
10818: LD_VAR 0 2
10822: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10823: LD_INT 0
10825: PPUSH
// end ;
10826: LD_VAR 0 6
10830: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// if not vehicle or not factory then
10835: LD_VAR 0 1
10839: NOT
10840: PUSH
10841: LD_VAR 0 2
10845: NOT
10846: OR
10847: IFFALSE 10851
// exit ;
10849: GO 11082
// if factoryWaypoints >= factory then
10851: LD_EXP 95
10855: PUSH
10856: LD_VAR 0 2
10860: GREATEREQUAL
10861: IFFALSE 11082
// if factoryWaypoints [ factory ] then
10863: LD_EXP 95
10867: PUSH
10868: LD_VAR 0 2
10872: ARRAY
10873: IFFALSE 11082
// begin if GetControl ( vehicle ) = control_manual then
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 263
10884: PUSH
10885: LD_INT 1
10887: EQUAL
10888: IFFALSE 10969
// begin driver := IsDrivenBy ( vehicle ) ;
10890: LD_ADDR_VAR 0 4
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 311
10904: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10905: LD_VAR 0 4
10909: PPUSH
10910: LD_EXP 95
10914: PUSH
10915: LD_VAR 0 2
10919: ARRAY
10920: PUSH
10921: LD_INT 3
10923: ARRAY
10924: PPUSH
10925: LD_EXP 95
10929: PUSH
10930: LD_VAR 0 2
10934: ARRAY
10935: PUSH
10936: LD_INT 4
10938: ARRAY
10939: PPUSH
10940: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10944: LD_VAR 0 4
10948: PPUSH
10949: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10953: LD_VAR 0 4
10957: PPUSH
10958: LD_VAR 0 2
10962: PPUSH
10963: CALL_OW 180
// end else
10967: GO 11082
// if GetControl ( vehicle ) = control_remote then
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: IFFALSE 11043
// begin wait ( 0 0$2 ) ;
10984: LD_INT 70
10986: PPUSH
10987: CALL_OW 67
// if Connect ( vehicle ) then
10991: LD_VAR 0 1
10995: PPUSH
10996: CALL 38742 0 1
11000: IFFALSE 11041
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_EXP 95
11011: PUSH
11012: LD_VAR 0 2
11016: ARRAY
11017: PUSH
11018: LD_INT 3
11020: ARRAY
11021: PPUSH
11022: LD_EXP 95
11026: PUSH
11027: LD_VAR 0 2
11031: ARRAY
11032: PUSH
11033: LD_INT 4
11035: ARRAY
11036: PPUSH
11037: CALL_OW 171
// end else
11041: GO 11082
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_EXP 95
11052: PUSH
11053: LD_VAR 0 2
11057: ARRAY
11058: PUSH
11059: LD_INT 3
11061: ARRAY
11062: PPUSH
11063: LD_EXP 95
11067: PUSH
11068: LD_VAR 0 2
11072: ARRAY
11073: PUSH
11074: LD_INT 4
11076: ARRAY
11077: PPUSH
11078: CALL_OW 171
// end ; end ;
11082: LD_VAR 0 3
11086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11087: LD_INT 0
11089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11090: LD_VAR 0 1
11094: PUSH
11095: LD_INT 250
11097: EQUAL
11098: PUSH
11099: LD_VAR 0 2
11103: PPUSH
11104: CALL_OW 264
11108: PUSH
11109: LD_INT 81
11111: EQUAL
11112: AND
11113: IFFALSE 11134
// MinerPlaceMine ( unit , x , y ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_VAR 0 5
11129: PPUSH
11130: CALL 13519 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11134: LD_VAR 0 1
11138: PUSH
11139: LD_INT 251
11141: EQUAL
11142: PUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 264
11152: PUSH
11153: LD_INT 81
11155: EQUAL
11156: AND
11157: IFFALSE 11178
// MinerDetonateMine ( unit , x , y ) ;
11159: LD_VAR 0 2
11163: PPUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: LD_VAR 0 5
11173: PPUSH
11174: CALL 13794 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11178: LD_VAR 0 1
11182: PUSH
11183: LD_INT 252
11185: EQUAL
11186: PUSH
11187: LD_VAR 0 2
11191: PPUSH
11192: CALL_OW 264
11196: PUSH
11197: LD_INT 81
11199: EQUAL
11200: AND
11201: IFFALSE 11222
// MinerCreateMinefield ( unit , x , y ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_VAR 0 4
11212: PPUSH
11213: LD_VAR 0 5
11217: PPUSH
11218: CALL 14211 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11222: LD_VAR 0 1
11226: PUSH
11227: LD_INT 253
11229: EQUAL
11230: PUSH
11231: LD_VAR 0 2
11235: PPUSH
11236: CALL_OW 257
11240: PUSH
11241: LD_INT 5
11243: EQUAL
11244: AND
11245: IFFALSE 11266
// ComBinocular ( unit , x , y ) ;
11247: LD_VAR 0 2
11251: PPUSH
11252: LD_VAR 0 4
11256: PPUSH
11257: LD_VAR 0 5
11261: PPUSH
11262: CALL 14580 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11266: LD_VAR 0 1
11270: PUSH
11271: LD_INT 254
11273: EQUAL
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 264
11284: PUSH
11285: LD_INT 99
11287: EQUAL
11288: AND
11289: PUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: CALL_OW 263
11299: PUSH
11300: LD_INT 3
11302: EQUAL
11303: AND
11304: IFFALSE 11320
// HackDestroyVehicle ( unit , selectedUnit ) ;
11306: LD_VAR 0 2
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: CALL 12883 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11320: LD_VAR 0 1
11324: PUSH
11325: LD_INT 255
11327: EQUAL
11328: PUSH
11329: LD_VAR 0 2
11333: PPUSH
11334: CALL_OW 264
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 53
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: IN
11349: AND
11350: PUSH
11351: LD_VAR 0 4
11355: PPUSH
11356: LD_VAR 0 5
11360: PPUSH
11361: CALL_OW 488
11365: AND
11366: IFFALSE 11390
// CutTreeXYR ( unit , x , y , 12 ) ;
11368: LD_VAR 0 2
11372: PPUSH
11373: LD_VAR 0 4
11377: PPUSH
11378: LD_VAR 0 5
11382: PPUSH
11383: LD_INT 12
11385: PPUSH
11386: CALL 11453 0 4
// if cmd = 256 then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 256
11397: EQUAL
11398: IFFALSE 11419
// SetFactoryWaypoint ( unit , x , y ) ;
11400: LD_VAR 0 2
11404: PPUSH
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 5
11414: PPUSH
11415: CALL 29491 0 3
// if cmd = 257 then
11419: LD_VAR 0 1
11423: PUSH
11424: LD_INT 257
11426: EQUAL
11427: IFFALSE 11448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11429: LD_VAR 0 2
11433: PPUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_VAR 0 5
11443: PPUSH
11444: CALL 29853 0 3
// end ;
11448: LD_VAR 0 6
11452: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11453: LD_INT 0
11455: PPUSH
11456: PPUSH
11457: PPUSH
11458: PPUSH
11459: PPUSH
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11464: LD_VAR 0 1
11468: NOT
11469: PUSH
11470: LD_VAR 0 2
11474: PPUSH
11475: LD_VAR 0 3
11479: PPUSH
11480: CALL_OW 488
11484: NOT
11485: OR
11486: PUSH
11487: LD_VAR 0 4
11491: NOT
11492: OR
11493: IFFALSE 11497
// exit ;
11495: GO 11837
// list := [ ] ;
11497: LD_ADDR_VAR 0 13
11501: PUSH
11502: EMPTY
11503: ST_TO_ADDR
// if x - r < 0 then
11504: LD_VAR 0 2
11508: PUSH
11509: LD_VAR 0 4
11513: MINUS
11514: PUSH
11515: LD_INT 0
11517: LESS
11518: IFFALSE 11530
// min_x := 0 else
11520: LD_ADDR_VAR 0 7
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
11528: GO 11546
// min_x := x - r ;
11530: LD_ADDR_VAR 0 7
11534: PUSH
11535: LD_VAR 0 2
11539: PUSH
11540: LD_VAR 0 4
11544: MINUS
11545: ST_TO_ADDR
// if y - r < 0 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_VAR 0 4
11555: MINUS
11556: PUSH
11557: LD_INT 0
11559: LESS
11560: IFFALSE 11572
// min_y := 0 else
11562: LD_ADDR_VAR 0 8
11566: PUSH
11567: LD_INT 0
11569: ST_TO_ADDR
11570: GO 11588
// min_y := y - r ;
11572: LD_ADDR_VAR 0 8
11576: PUSH
11577: LD_VAR 0 3
11581: PUSH
11582: LD_VAR 0 4
11586: MINUS
11587: ST_TO_ADDR
// max_x := x + r ;
11588: LD_ADDR_VAR 0 9
11592: PUSH
11593: LD_VAR 0 2
11597: PUSH
11598: LD_VAR 0 4
11602: PLUS
11603: ST_TO_ADDR
// max_y := y + r ;
11604: LD_ADDR_VAR 0 10
11608: PUSH
11609: LD_VAR 0 3
11613: PUSH
11614: LD_VAR 0 4
11618: PLUS
11619: ST_TO_ADDR
// for _x = min_x to max_x do
11620: LD_ADDR_VAR 0 11
11624: PUSH
11625: DOUBLE
11626: LD_VAR 0 7
11630: DEC
11631: ST_TO_ADDR
11632: LD_VAR 0 9
11636: PUSH
11637: FOR_TO
11638: IFFALSE 11755
// for _y = min_y to max_y do
11640: LD_ADDR_VAR 0 12
11644: PUSH
11645: DOUBLE
11646: LD_VAR 0 8
11650: DEC
11651: ST_TO_ADDR
11652: LD_VAR 0 10
11656: PUSH
11657: FOR_TO
11658: IFFALSE 11751
// begin if not ValidHex ( _x , _y ) then
11660: LD_VAR 0 11
11664: PPUSH
11665: LD_VAR 0 12
11669: PPUSH
11670: CALL_OW 488
11674: NOT
11675: IFFALSE 11679
// continue ;
11677: GO 11657
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11679: LD_VAR 0 11
11683: PPUSH
11684: LD_VAR 0 12
11688: PPUSH
11689: CALL_OW 351
11693: PUSH
11694: LD_VAR 0 11
11698: PPUSH
11699: LD_VAR 0 12
11703: PPUSH
11704: CALL_OW 554
11708: AND
11709: IFFALSE 11749
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11711: LD_ADDR_VAR 0 13
11715: PUSH
11716: LD_VAR 0 13
11720: PPUSH
11721: LD_VAR 0 13
11725: PUSH
11726: LD_INT 1
11728: PLUS
11729: PPUSH
11730: LD_VAR 0 11
11734: PUSH
11735: LD_VAR 0 12
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 2
11748: ST_TO_ADDR
// end ;
11749: GO 11657
11751: POP
11752: POP
11753: GO 11637
11755: POP
11756: POP
// if not list then
11757: LD_VAR 0 13
11761: NOT
11762: IFFALSE 11766
// exit ;
11764: GO 11837
// for i in list do
11766: LD_ADDR_VAR 0 6
11770: PUSH
11771: LD_VAR 0 13
11775: PUSH
11776: FOR_IN
11777: IFFALSE 11835
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_STRING M
11786: PUSH
11787: LD_VAR 0 6
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: PUSH
11796: LD_VAR 0 6
11800: PUSH
11801: LD_INT 2
11803: ARRAY
11804: PUSH
11805: LD_INT 0
11807: PUSH
11808: LD_INT 0
11810: PUSH
11811: LD_INT 0
11813: PUSH
11814: LD_INT 0
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: PPUSH
11829: CALL_OW 447
11833: GO 11776
11835: POP
11836: POP
// end ;
11837: LD_VAR 0 5
11841: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11842: LD_EXP 26
11846: NOT
11847: IFFALSE 11897
11849: GO 11851
11851: DISABLE
// begin initHack := true ;
11852: LD_ADDR_EXP 26
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// hackTanks := [ ] ;
11860: LD_ADDR_EXP 27
11864: PUSH
11865: EMPTY
11866: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11867: LD_ADDR_EXP 28
11871: PUSH
11872: EMPTY
11873: ST_TO_ADDR
// hackLimit := 3 ;
11874: LD_ADDR_EXP 29
11878: PUSH
11879: LD_INT 3
11881: ST_TO_ADDR
// hackDist := 12 ;
11882: LD_ADDR_EXP 30
11886: PUSH
11887: LD_INT 12
11889: ST_TO_ADDR
// hackCounter := [ ] ;
11890: LD_ADDR_EXP 31
11894: PUSH
11895: EMPTY
11896: ST_TO_ADDR
// end ;
11897: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11898: LD_EXP 26
11902: PUSH
11903: LD_INT 34
11905: PUSH
11906: LD_INT 99
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: AND
11918: IFFALSE 12171
11920: GO 11922
11922: DISABLE
11923: LD_INT 0
11925: PPUSH
11926: PPUSH
// begin enable ;
11927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11928: LD_ADDR_VAR 0 1
11932: PUSH
11933: LD_INT 34
11935: PUSH
11936: LD_INT 99
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: PUSH
11948: FOR_IN
11949: IFFALSE 12169
// begin if not i in hackTanks then
11951: LD_VAR 0 1
11955: PUSH
11956: LD_EXP 27
11960: IN
11961: NOT
11962: IFFALSE 12045
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11964: LD_ADDR_EXP 27
11968: PUSH
11969: LD_EXP 27
11973: PPUSH
11974: LD_EXP 27
11978: PUSH
11979: LD_INT 1
11981: PLUS
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 1
11992: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11993: LD_ADDR_EXP 28
11997: PUSH
11998: LD_EXP 28
12002: PPUSH
12003: LD_EXP 28
12007: PUSH
12008: LD_INT 1
12010: PLUS
12011: PPUSH
12012: EMPTY
12013: PPUSH
12014: CALL_OW 1
12018: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12019: LD_ADDR_EXP 31
12023: PUSH
12024: LD_EXP 31
12028: PPUSH
12029: LD_EXP 31
12033: PUSH
12034: LD_INT 1
12036: PLUS
12037: PPUSH
12038: EMPTY
12039: PPUSH
12040: CALL_OW 1
12044: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 302
12054: NOT
12055: IFFALSE 12068
// begin HackUnlinkAll ( i ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL 12174 0 1
// continue ;
12066: GO 11948
// end ; HackCheckCapturedStatus ( i ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: CALL 12617 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12077: LD_ADDR_VAR 0 2
12081: PUSH
12082: LD_INT 81
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 255
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 33
12101: PUSH
12102: LD_INT 3
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 91
12111: PUSH
12112: LD_VAR 0 1
12116: PUSH
12117: LD_EXP 30
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 50
12129: PUSH
12130: EMPTY
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: ST_TO_ADDR
// if not tmp then
12144: LD_VAR 0 2
12148: NOT
12149: IFFALSE 12153
// continue ;
12151: GO 11948
// HackLink ( i , tmp ) ;
12153: LD_VAR 0 1
12157: PPUSH
12158: LD_VAR 0 2
12162: PPUSH
12163: CALL 12310 0 2
// end ;
12167: GO 11948
12169: POP
12170: POP
// end ;
12171: PPOPN 2
12173: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12174: LD_INT 0
12176: PPUSH
12177: PPUSH
12178: PPUSH
// if not hack in hackTanks then
12179: LD_VAR 0 1
12183: PUSH
12184: LD_EXP 27
12188: IN
12189: NOT
12190: IFFALSE 12194
// exit ;
12192: GO 12305
// index := GetElementIndex ( hackTanks , hack ) ;
12194: LD_ADDR_VAR 0 4
12198: PUSH
12199: LD_EXP 27
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL 35549 0 2
12213: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12214: LD_EXP 28
12218: PUSH
12219: LD_VAR 0 4
12223: ARRAY
12224: IFFALSE 12305
// begin for i in hackTanksCaptured [ index ] do
12226: LD_ADDR_VAR 0 3
12230: PUSH
12231: LD_EXP 28
12235: PUSH
12236: LD_VAR 0 4
12240: ARRAY
12241: PUSH
12242: FOR_IN
12243: IFFALSE 12269
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 1
12252: ARRAY
12253: PPUSH
12254: LD_VAR 0 3
12258: PUSH
12259: LD_INT 2
12261: ARRAY
12262: PPUSH
12263: CALL_OW 235
12267: GO 12242
12269: POP
12270: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12271: LD_ADDR_EXP 28
12275: PUSH
12276: LD_EXP 28
12280: PPUSH
12281: LD_VAR 0 4
12285: PPUSH
12286: EMPTY
12287: PPUSH
12288: CALL_OW 1
12292: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 505
// end ; end ;
12305: LD_VAR 0 2
12309: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12310: LD_INT 0
12312: PPUSH
12313: PPUSH
12314: PPUSH
// if not hack in hackTanks or not vehicles then
12315: LD_VAR 0 1
12319: PUSH
12320: LD_EXP 27
12324: IN
12325: NOT
12326: PUSH
12327: LD_VAR 0 2
12331: NOT
12332: OR
12333: IFFALSE 12337
// exit ;
12335: GO 12612
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: LD_INT 1
12357: PPUSH
12358: CALL 36199 0 4
12362: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: LD_EXP 27
12372: PPUSH
12373: LD_VAR 0 1
12377: PPUSH
12378: CALL 35549 0 2
12382: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12383: LD_EXP 28
12387: PUSH
12388: LD_VAR 0 5
12392: ARRAY
12393: PUSH
12394: LD_EXP 29
12398: LESS
12399: IFFALSE 12588
// begin for i := 1 to vehicles do
12401: LD_ADDR_VAR 0 4
12405: PUSH
12406: DOUBLE
12407: LD_INT 1
12409: DEC
12410: ST_TO_ADDR
12411: LD_VAR 0 2
12415: PUSH
12416: FOR_TO
12417: IFFALSE 12586
// begin if hackTanksCaptured [ index ] = hackLimit then
12419: LD_EXP 28
12423: PUSH
12424: LD_VAR 0 5
12428: ARRAY
12429: PUSH
12430: LD_EXP 29
12434: EQUAL
12435: IFFALSE 12439
// break ;
12437: GO 12586
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12439: LD_ADDR_EXP 31
12443: PUSH
12444: LD_EXP 31
12448: PPUSH
12449: LD_VAR 0 5
12453: PPUSH
12454: LD_EXP 31
12458: PUSH
12459: LD_VAR 0 5
12463: ARRAY
12464: PUSH
12465: LD_INT 1
12467: PLUS
12468: PPUSH
12469: CALL_OW 1
12473: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12474: LD_ADDR_EXP 28
12478: PUSH
12479: LD_EXP 28
12483: PPUSH
12484: LD_VAR 0 5
12488: PUSH
12489: LD_EXP 28
12493: PUSH
12494: LD_VAR 0 5
12498: ARRAY
12499: PUSH
12500: LD_INT 1
12502: PLUS
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: LD_VAR 0 2
12512: PUSH
12513: LD_VAR 0 4
12517: ARRAY
12518: PUSH
12519: LD_VAR 0 2
12523: PUSH
12524: LD_VAR 0 4
12528: ARRAY
12529: PPUSH
12530: CALL_OW 255
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL 35764 0 3
12543: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12544: LD_VAR 0 2
12548: PUSH
12549: LD_VAR 0 4
12553: ARRAY
12554: PPUSH
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 255
12564: PPUSH
12565: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12569: LD_VAR 0 2
12573: PUSH
12574: LD_VAR 0 4
12578: ARRAY
12579: PPUSH
12580: CALL_OW 141
// end ;
12584: GO 12416
12586: POP
12587: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12588: LD_VAR 0 1
12592: PPUSH
12593: LD_EXP 28
12597: PUSH
12598: LD_VAR 0 5
12602: ARRAY
12603: PUSH
12604: LD_INT 0
12606: PLUS
12607: PPUSH
12608: CALL_OW 505
// end ;
12612: LD_VAR 0 3
12616: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12617: LD_INT 0
12619: PPUSH
12620: PPUSH
12621: PPUSH
12622: PPUSH
// if not hack in hackTanks then
12623: LD_VAR 0 1
12627: PUSH
12628: LD_EXP 27
12632: IN
12633: NOT
12634: IFFALSE 12638
// exit ;
12636: GO 12878
// index := GetElementIndex ( hackTanks , hack ) ;
12638: LD_ADDR_VAR 0 4
12642: PUSH
12643: LD_EXP 27
12647: PPUSH
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL 35549 0 2
12657: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12658: LD_ADDR_VAR 0 3
12662: PUSH
12663: DOUBLE
12664: LD_EXP 28
12668: PUSH
12669: LD_VAR 0 4
12673: ARRAY
12674: INC
12675: ST_TO_ADDR
12676: LD_INT 1
12678: PUSH
12679: FOR_DOWNTO
12680: IFFALSE 12852
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_EXP 28
12691: PUSH
12692: LD_VAR 0 4
12696: ARRAY
12697: PUSH
12698: LD_VAR 0 3
12702: ARRAY
12703: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12704: LD_VAR 0 5
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PPUSH
12713: CALL_OW 302
12717: NOT
12718: PUSH
12719: LD_VAR 0 5
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PPUSH
12728: CALL_OW 255
12732: PUSH
12733: LD_VAR 0 1
12737: PPUSH
12738: CALL_OW 255
12742: NONEQUAL
12743: OR
12744: IFFALSE 12850
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12746: LD_VAR 0 5
12750: PUSH
12751: LD_INT 1
12753: ARRAY
12754: PPUSH
12755: CALL_OW 305
12759: PUSH
12760: LD_VAR 0 5
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 255
12773: PUSH
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 255
12783: EQUAL
12784: AND
12785: IFFALSE 12809
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12787: LD_VAR 0 5
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: LD_VAR 0 5
12800: PUSH
12801: LD_INT 2
12803: ARRAY
12804: PPUSH
12805: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12809: LD_ADDR_EXP 28
12813: PUSH
12814: LD_EXP 28
12818: PPUSH
12819: LD_VAR 0 4
12823: PPUSH
12824: LD_EXP 28
12828: PUSH
12829: LD_VAR 0 4
12833: ARRAY
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: CALL_OW 3
12844: PPUSH
12845: CALL_OW 1
12849: ST_TO_ADDR
// end ; end ;
12850: GO 12679
12852: POP
12853: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12854: LD_VAR 0 1
12858: PPUSH
12859: LD_EXP 28
12863: PUSH
12864: LD_VAR 0 4
12868: ARRAY
12869: PUSH
12870: LD_INT 0
12872: PLUS
12873: PPUSH
12874: CALL_OW 505
// end ;
12878: LD_VAR 0 2
12882: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12883: LD_INT 0
12885: PPUSH
12886: PPUSH
12887: PPUSH
12888: PPUSH
// if not hack in hackTanks then
12889: LD_VAR 0 1
12893: PUSH
12894: LD_EXP 27
12898: IN
12899: NOT
12900: IFFALSE 12904
// exit ;
12902: GO 12989
// index := GetElementIndex ( hackTanks , hack ) ;
12904: LD_ADDR_VAR 0 5
12908: PUSH
12909: LD_EXP 27
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL 35549 0 2
12923: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12924: LD_ADDR_VAR 0 4
12928: PUSH
12929: DOUBLE
12930: LD_INT 1
12932: DEC
12933: ST_TO_ADDR
12934: LD_EXP 28
12938: PUSH
12939: LD_VAR 0 5
12943: ARRAY
12944: PUSH
12945: FOR_TO
12946: IFFALSE 12987
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12948: LD_EXP 28
12952: PUSH
12953: LD_VAR 0 5
12957: ARRAY
12958: PUSH
12959: LD_VAR 0 4
12963: ARRAY
12964: PUSH
12965: LD_INT 1
12967: ARRAY
12968: PUSH
12969: LD_VAR 0 2
12973: EQUAL
12974: IFFALSE 12985
// KillUnit ( vehicle ) ;
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 66
12985: GO 12945
12987: POP
12988: POP
// end ;
12989: LD_VAR 0 3
12993: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12994: LD_EXP 32
12998: NOT
12999: IFFALSE 13034
13001: GO 13003
13003: DISABLE
// begin initMiner := true ;
13004: LD_ADDR_EXP 32
13008: PUSH
13009: LD_INT 1
13011: ST_TO_ADDR
// minersList := [ ] ;
13012: LD_ADDR_EXP 33
13016: PUSH
13017: EMPTY
13018: ST_TO_ADDR
// minerMinesList := [ ] ;
13019: LD_ADDR_EXP 34
13023: PUSH
13024: EMPTY
13025: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13026: LD_ADDR_EXP 35
13030: PUSH
13031: LD_INT 5
13033: ST_TO_ADDR
// end ;
13034: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13035: LD_EXP 32
13039: PUSH
13040: LD_INT 34
13042: PUSH
13043: LD_INT 81
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: AND
13055: IFFALSE 13516
13057: GO 13059
13059: DISABLE
13060: LD_INT 0
13062: PPUSH
13063: PPUSH
13064: PPUSH
13065: PPUSH
// begin enable ;
13066: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: LD_INT 34
13074: PUSH
13075: LD_INT 81
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: PUSH
13087: FOR_IN
13088: IFFALSE 13160
// begin if not i in minersList then
13090: LD_VAR 0 1
13094: PUSH
13095: LD_EXP 33
13099: IN
13100: NOT
13101: IFFALSE 13158
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13103: LD_ADDR_EXP 33
13107: PUSH
13108: LD_EXP 33
13112: PPUSH
13113: LD_EXP 33
13117: PUSH
13118: LD_INT 1
13120: PLUS
13121: PPUSH
13122: LD_VAR 0 1
13126: PPUSH
13127: CALL_OW 1
13131: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13132: LD_ADDR_EXP 34
13136: PUSH
13137: LD_EXP 34
13141: PPUSH
13142: LD_EXP 34
13146: PUSH
13147: LD_INT 1
13149: PLUS
13150: PPUSH
13151: EMPTY
13152: PPUSH
13153: CALL_OW 1
13157: ST_TO_ADDR
// end end ;
13158: GO 13087
13160: POP
13161: POP
// for i := minerMinesList downto 1 do
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: DOUBLE
13168: LD_EXP 34
13172: INC
13173: ST_TO_ADDR
13174: LD_INT 1
13176: PUSH
13177: FOR_DOWNTO
13178: IFFALSE 13514
// begin if IsLive ( minersList [ i ] ) then
13180: LD_EXP 33
13184: PUSH
13185: LD_VAR 0 1
13189: ARRAY
13190: PPUSH
13191: CALL_OW 300
13195: IFFALSE 13223
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13197: LD_EXP 33
13201: PUSH
13202: LD_VAR 0 1
13206: ARRAY
13207: PPUSH
13208: LD_EXP 34
13212: PUSH
13213: LD_VAR 0 1
13217: ARRAY
13218: PPUSH
13219: CALL_OW 505
// if not minerMinesList [ i ] then
13223: LD_EXP 34
13227: PUSH
13228: LD_VAR 0 1
13232: ARRAY
13233: NOT
13234: IFFALSE 13238
// continue ;
13236: GO 13177
// for j := minerMinesList [ i ] downto 1 do
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: DOUBLE
13244: LD_EXP 34
13248: PUSH
13249: LD_VAR 0 1
13253: ARRAY
13254: INC
13255: ST_TO_ADDR
13256: LD_INT 1
13258: PUSH
13259: FOR_DOWNTO
13260: IFFALSE 13510
// begin side := GetSide ( minersList [ i ] ) ;
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: LD_EXP 33
13271: PUSH
13272: LD_VAR 0 1
13276: ARRAY
13277: PPUSH
13278: CALL_OW 255
13282: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13283: LD_ADDR_VAR 0 4
13287: PUSH
13288: LD_EXP 34
13292: PUSH
13293: LD_VAR 0 1
13297: ARRAY
13298: PUSH
13299: LD_VAR 0 2
13303: ARRAY
13304: PUSH
13305: LD_INT 1
13307: ARRAY
13308: PPUSH
13309: LD_EXP 34
13313: PUSH
13314: LD_VAR 0 1
13318: ARRAY
13319: PUSH
13320: LD_VAR 0 2
13324: ARRAY
13325: PUSH
13326: LD_INT 2
13328: ARRAY
13329: PPUSH
13330: CALL_OW 428
13334: ST_TO_ADDR
// if not tmp then
13335: LD_VAR 0 4
13339: NOT
13340: IFFALSE 13344
// continue ;
13342: GO 13259
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13344: LD_VAR 0 4
13348: PUSH
13349: LD_INT 81
13351: PUSH
13352: LD_VAR 0 3
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: IN
13366: PUSH
13367: LD_EXP 34
13371: PUSH
13372: LD_VAR 0 1
13376: ARRAY
13377: PUSH
13378: LD_VAR 0 2
13382: ARRAY
13383: PUSH
13384: LD_INT 1
13386: ARRAY
13387: PPUSH
13388: LD_EXP 34
13392: PUSH
13393: LD_VAR 0 1
13397: ARRAY
13398: PUSH
13399: LD_VAR 0 2
13403: ARRAY
13404: PUSH
13405: LD_INT 2
13407: ARRAY
13408: PPUSH
13409: CALL_OW 458
13413: AND
13414: IFFALSE 13508
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13416: LD_EXP 34
13420: PUSH
13421: LD_VAR 0 1
13425: ARRAY
13426: PUSH
13427: LD_VAR 0 2
13431: ARRAY
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: LD_EXP 34
13441: PUSH
13442: LD_VAR 0 1
13446: ARRAY
13447: PUSH
13448: LD_VAR 0 2
13452: ARRAY
13453: PUSH
13454: LD_INT 2
13456: ARRAY
13457: PPUSH
13458: LD_VAR 0 3
13462: PPUSH
13463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13467: LD_ADDR_EXP 34
13471: PUSH
13472: LD_EXP 34
13476: PPUSH
13477: LD_VAR 0 1
13481: PPUSH
13482: LD_EXP 34
13486: PUSH
13487: LD_VAR 0 1
13491: ARRAY
13492: PPUSH
13493: LD_VAR 0 2
13497: PPUSH
13498: CALL_OW 3
13502: PPUSH
13503: CALL_OW 1
13507: ST_TO_ADDR
// end ; end ;
13508: GO 13259
13510: POP
13511: POP
// end ;
13512: GO 13177
13514: POP
13515: POP
// end ;
13516: PPOPN 4
13518: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13519: LD_INT 0
13521: PPUSH
13522: PPUSH
// result := false ;
13523: LD_ADDR_VAR 0 4
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 264
13540: PUSH
13541: LD_INT 81
13543: EQUAL
13544: NOT
13545: IFFALSE 13549
// exit ;
13547: GO 13789
// index := GetElementIndex ( minersList , unit ) ;
13549: LD_ADDR_VAR 0 5
13553: PUSH
13554: LD_EXP 33
13558: PPUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL 35549 0 2
13568: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13569: LD_EXP 34
13573: PUSH
13574: LD_VAR 0 5
13578: ARRAY
13579: PUSH
13580: LD_EXP 35
13584: GREATEREQUAL
13585: IFFALSE 13589
// exit ;
13587: GO 13789
// ComMoveXY ( unit , x , y ) ;
13589: LD_VAR 0 1
13593: PPUSH
13594: LD_VAR 0 2
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13608: LD_INT 35
13610: PPUSH
13611: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13615: LD_VAR 0 1
13619: PPUSH
13620: LD_VAR 0 2
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: CALL 66933 0 3
13634: NOT
13635: PUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 314
13645: AND
13646: IFFALSE 13650
// exit ;
13648: GO 13789
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13650: LD_VAR 0 2
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: CALL_OW 428
13664: PUSH
13665: LD_VAR 0 1
13669: EQUAL
13670: PUSH
13671: LD_VAR 0 1
13675: PPUSH
13676: CALL_OW 314
13680: NOT
13681: AND
13682: IFFALSE 13608
// PlaySoundXY ( x , y , PlantMine ) ;
13684: LD_VAR 0 2
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: LD_STRING PlantMine
13696: PPUSH
13697: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13701: LD_VAR 0 2
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_VAR 0 1
13715: PPUSH
13716: CALL_OW 255
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13728: LD_ADDR_EXP 34
13732: PUSH
13733: LD_EXP 34
13737: PPUSH
13738: LD_VAR 0 5
13742: PUSH
13743: LD_EXP 34
13747: PUSH
13748: LD_VAR 0 5
13752: ARRAY
13753: PUSH
13754: LD_INT 1
13756: PLUS
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PPUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_VAR 0 3
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL 35764 0 3
13780: ST_TO_ADDR
// result := true ;
13781: LD_ADDR_VAR 0 4
13785: PUSH
13786: LD_INT 1
13788: ST_TO_ADDR
// end ;
13789: LD_VAR 0 4
13793: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13794: LD_INT 0
13796: PPUSH
13797: PPUSH
13798: PPUSH
// if not unit in minersList then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_EXP 33
13808: IN
13809: NOT
13810: IFFALSE 13814
// exit ;
13812: GO 14206
// index := GetElementIndex ( minersList , unit ) ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_EXP 33
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL 35549 0 2
13833: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13834: LD_ADDR_VAR 0 5
13838: PUSH
13839: DOUBLE
13840: LD_EXP 34
13844: PUSH
13845: LD_VAR 0 6
13849: ARRAY
13850: INC
13851: ST_TO_ADDR
13852: LD_INT 1
13854: PUSH
13855: FOR_DOWNTO
13856: IFFALSE 14017
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13858: LD_EXP 34
13862: PUSH
13863: LD_VAR 0 6
13867: ARRAY
13868: PUSH
13869: LD_VAR 0 5
13873: ARRAY
13874: PUSH
13875: LD_INT 1
13877: ARRAY
13878: PUSH
13879: LD_VAR 0 2
13883: EQUAL
13884: PUSH
13885: LD_EXP 34
13889: PUSH
13890: LD_VAR 0 6
13894: ARRAY
13895: PUSH
13896: LD_VAR 0 5
13900: ARRAY
13901: PUSH
13902: LD_INT 2
13904: ARRAY
13905: PUSH
13906: LD_VAR 0 3
13910: EQUAL
13911: AND
13912: IFFALSE 14015
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13914: LD_EXP 34
13918: PUSH
13919: LD_VAR 0 6
13923: ARRAY
13924: PUSH
13925: LD_VAR 0 5
13929: ARRAY
13930: PUSH
13931: LD_INT 1
13933: ARRAY
13934: PPUSH
13935: LD_EXP 34
13939: PUSH
13940: LD_VAR 0 6
13944: ARRAY
13945: PUSH
13946: LD_VAR 0 5
13950: ARRAY
13951: PUSH
13952: LD_INT 2
13954: ARRAY
13955: PPUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 255
13965: PPUSH
13966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13970: LD_ADDR_EXP 34
13974: PUSH
13975: LD_EXP 34
13979: PPUSH
13980: LD_VAR 0 6
13984: PPUSH
13985: LD_EXP 34
13989: PUSH
13990: LD_VAR 0 6
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 5
14000: PPUSH
14001: CALL_OW 3
14005: PPUSH
14006: CALL_OW 1
14010: ST_TO_ADDR
// exit ;
14011: POP
14012: POP
14013: GO 14206
// end ; end ;
14015: GO 13855
14017: POP
14018: POP
// for i := minerMinesList [ index ] downto 1 do
14019: LD_ADDR_VAR 0 5
14023: PUSH
14024: DOUBLE
14025: LD_EXP 34
14029: PUSH
14030: LD_VAR 0 6
14034: ARRAY
14035: INC
14036: ST_TO_ADDR
14037: LD_INT 1
14039: PUSH
14040: FOR_DOWNTO
14041: IFFALSE 14204
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14043: LD_EXP 34
14047: PUSH
14048: LD_VAR 0 6
14052: ARRAY
14053: PUSH
14054: LD_VAR 0 5
14058: ARRAY
14059: PUSH
14060: LD_INT 1
14062: ARRAY
14063: PPUSH
14064: LD_EXP 34
14068: PUSH
14069: LD_VAR 0 6
14073: ARRAY
14074: PUSH
14075: LD_VAR 0 5
14079: ARRAY
14080: PUSH
14081: LD_INT 2
14083: ARRAY
14084: PPUSH
14085: LD_VAR 0 2
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: CALL_OW 298
14099: PUSH
14100: LD_INT 6
14102: LESS
14103: IFFALSE 14202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14105: LD_EXP 34
14109: PUSH
14110: LD_VAR 0 6
14114: ARRAY
14115: PUSH
14116: LD_VAR 0 5
14120: ARRAY
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_EXP 34
14130: PUSH
14131: LD_VAR 0 6
14135: ARRAY
14136: PUSH
14137: LD_VAR 0 5
14141: ARRAY
14142: PUSH
14143: LD_INT 2
14145: ARRAY
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 255
14156: PPUSH
14157: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14161: LD_ADDR_EXP 34
14165: PUSH
14166: LD_EXP 34
14170: PPUSH
14171: LD_VAR 0 6
14175: PPUSH
14176: LD_EXP 34
14180: PUSH
14181: LD_VAR 0 6
14185: ARRAY
14186: PPUSH
14187: LD_VAR 0 5
14191: PPUSH
14192: CALL_OW 3
14196: PPUSH
14197: CALL_OW 1
14201: ST_TO_ADDR
// end ; end ;
14202: GO 14040
14204: POP
14205: POP
// end ;
14206: LD_VAR 0 4
14210: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14211: LD_INT 0
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
14221: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 264
14231: PUSH
14232: LD_INT 81
14234: EQUAL
14235: NOT
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_EXP 33
14246: IN
14247: NOT
14248: OR
14249: IFFALSE 14253
// exit ;
14251: GO 14575
// index := GetElementIndex ( minersList , unit ) ;
14253: LD_ADDR_VAR 0 6
14257: PUSH
14258: LD_EXP 33
14262: PPUSH
14263: LD_VAR 0 1
14267: PPUSH
14268: CALL 35549 0 2
14272: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14273: LD_ADDR_VAR 0 8
14277: PUSH
14278: LD_EXP 35
14282: PUSH
14283: LD_EXP 34
14287: PUSH
14288: LD_VAR 0 6
14292: ARRAY
14293: MINUS
14294: ST_TO_ADDR
// if not minesFreeAmount then
14295: LD_VAR 0 8
14299: NOT
14300: IFFALSE 14304
// exit ;
14302: GO 14575
// tmp := [ ] ;
14304: LD_ADDR_VAR 0 7
14308: PUSH
14309: EMPTY
14310: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14311: LD_ADDR_VAR 0 5
14315: PUSH
14316: DOUBLE
14317: LD_INT 1
14319: DEC
14320: ST_TO_ADDR
14321: LD_VAR 0 8
14325: PUSH
14326: FOR_TO
14327: IFFALSE 14522
// begin _d := rand ( 0 , 5 ) ;
14329: LD_ADDR_VAR 0 11
14333: PUSH
14334: LD_INT 0
14336: PPUSH
14337: LD_INT 5
14339: PPUSH
14340: CALL_OW 12
14344: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14345: LD_ADDR_VAR 0 12
14349: PUSH
14350: LD_INT 2
14352: PPUSH
14353: LD_INT 6
14355: PPUSH
14356: CALL_OW 12
14360: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14361: LD_ADDR_VAR 0 9
14365: PUSH
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_VAR 0 11
14375: PPUSH
14376: LD_VAR 0 12
14380: PPUSH
14381: CALL_OW 272
14385: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14386: LD_ADDR_VAR 0 10
14390: PUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_VAR 0 11
14400: PPUSH
14401: LD_VAR 0 12
14405: PPUSH
14406: CALL_OW 273
14410: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14411: LD_VAR 0 9
14415: PPUSH
14416: LD_VAR 0 10
14420: PPUSH
14421: CALL_OW 488
14425: PUSH
14426: LD_VAR 0 9
14430: PUSH
14431: LD_VAR 0 10
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_VAR 0 7
14444: IN
14445: NOT
14446: AND
14447: PUSH
14448: LD_VAR 0 9
14452: PPUSH
14453: LD_VAR 0 10
14457: PPUSH
14458: CALL_OW 458
14462: NOT
14463: AND
14464: IFFALSE 14506
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14466: LD_ADDR_VAR 0 7
14470: PUSH
14471: LD_VAR 0 7
14475: PPUSH
14476: LD_VAR 0 7
14480: PUSH
14481: LD_INT 1
14483: PLUS
14484: PPUSH
14485: LD_VAR 0 9
14489: PUSH
14490: LD_VAR 0 10
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PPUSH
14499: CALL_OW 1
14503: ST_TO_ADDR
14504: GO 14520
// i := i - 1 ;
14506: LD_ADDR_VAR 0 5
14510: PUSH
14511: LD_VAR 0 5
14515: PUSH
14516: LD_INT 1
14518: MINUS
14519: ST_TO_ADDR
// end ;
14520: GO 14326
14522: POP
14523: POP
// for i in tmp do
14524: LD_ADDR_VAR 0 5
14528: PUSH
14529: LD_VAR 0 7
14533: PUSH
14534: FOR_IN
14535: IFFALSE 14573
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_VAR 0 5
14546: PUSH
14547: LD_INT 1
14549: ARRAY
14550: PPUSH
14551: LD_VAR 0 5
14555: PUSH
14556: LD_INT 2
14558: ARRAY
14559: PPUSH
14560: CALL 13519 0 3
14564: NOT
14565: IFFALSE 14571
// exit ;
14567: POP
14568: POP
14569: GO 14575
14571: GO 14534
14573: POP
14574: POP
// end ;
14575: LD_VAR 0 4
14579: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
// if not GetClass ( unit ) = class_sniper then
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 257
14598: PUSH
14599: LD_INT 5
14601: EQUAL
14602: NOT
14603: IFFALSE 14607
// exit ;
14605: GO 14995
// dist := 8 ;
14607: LD_ADDR_VAR 0 5
14611: PUSH
14612: LD_INT 8
14614: ST_TO_ADDR
// viewRange := 12 ;
14615: LD_ADDR_VAR 0 7
14619: PUSH
14620: LD_INT 12
14622: ST_TO_ADDR
// side := GetSide ( unit ) ;
14623: LD_ADDR_VAR 0 6
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14638: LD_INT 61
14640: PPUSH
14641: LD_VAR 0 6
14645: PPUSH
14646: CALL_OW 321
14650: PUSH
14651: LD_INT 2
14653: EQUAL
14654: IFFALSE 14664
// viewRange := 16 ;
14656: LD_ADDR_VAR 0 7
14660: PUSH
14661: LD_INT 16
14663: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_VAR 0 2
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: CALL_OW 297
14683: PUSH
14684: LD_VAR 0 5
14688: GREATER
14689: IFFALSE 14768
// begin ComMoveXY ( unit , x , y ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14710: LD_INT 35
14712: PPUSH
14713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14717: LD_VAR 0 1
14721: PPUSH
14722: LD_VAR 0 2
14726: PPUSH
14727: LD_VAR 0 3
14731: PPUSH
14732: CALL 66933 0 3
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 14995
// until GetDistUnitXY ( unit , x , y ) < dist ;
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: CALL_OW 297
14760: PUSH
14761: LD_VAR 0 5
14765: LESS
14766: IFFALSE 14710
// end ; ComTurnXY ( unit , x , y ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_VAR 0 2
14777: PPUSH
14778: LD_VAR 0 3
14782: PPUSH
14783: CALL_OW 118
// wait ( 5 ) ;
14787: LD_INT 5
14789: PPUSH
14790: CALL_OW 67
// _d := GetDir ( unit ) ;
14794: LD_ADDR_VAR 0 10
14798: PUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 254
14808: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14809: LD_ADDR_VAR 0 8
14813: PUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 250
14823: PPUSH
14824: LD_VAR 0 10
14828: PPUSH
14829: LD_VAR 0 5
14833: PPUSH
14834: CALL_OW 272
14838: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14839: LD_ADDR_VAR 0 9
14843: PUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 251
14853: PPUSH
14854: LD_VAR 0 10
14858: PPUSH
14859: LD_VAR 0 5
14863: PPUSH
14864: CALL_OW 273
14868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14869: LD_VAR 0 8
14873: PPUSH
14874: LD_VAR 0 9
14878: PPUSH
14879: CALL_OW 488
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 14995
// ComAnimCustom ( unit , 1 ) ;
14888: LD_VAR 0 1
14892: PPUSH
14893: LD_INT 1
14895: PPUSH
14896: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14900: LD_VAR 0 8
14904: PPUSH
14905: LD_VAR 0 9
14909: PPUSH
14910: LD_VAR 0 6
14914: PPUSH
14915: LD_VAR 0 7
14919: PPUSH
14920: CALL_OW 330
// repeat wait ( 1 ) ;
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14931: LD_VAR 0 1
14935: PPUSH
14936: CALL_OW 316
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 314
14950: OR
14951: PUSH
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 302
14961: NOT
14962: OR
14963: PUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 301
14973: OR
14974: IFFALSE 14924
// RemoveSeeing ( _x , _y , side ) ;
14976: LD_VAR 0 8
14980: PPUSH
14981: LD_VAR 0 9
14985: PPUSH
14986: LD_VAR 0 6
14990: PPUSH
14991: CALL_OW 331
// end ; end_of_file
14995: LD_VAR 0 4
14999: RET
// export globalGameSaveCounter ; every 0 0$1 do
15000: GO 15002
15002: DISABLE
// begin enable ;
15003: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15004: LD_STRING updateTimer(
15006: PUSH
15007: LD_OWVAR 1
15011: STR
15012: PUSH
15013: LD_STRING );
15015: STR
15016: PPUSH
15017: CALL_OW 559
// end ;
15021: END
// every 0 0$1 do
15022: GO 15024
15024: DISABLE
// begin globalGameSaveCounter := 0 ;
15025: LD_ADDR_EXP 36
15029: PUSH
15030: LD_INT 0
15032: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15033: LD_STRING setGameSaveCounter(0)
15035: PPUSH
15036: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15040: LD_STRING initStreamRollete();
15042: PPUSH
15043: CALL_OW 559
// InitStreamMode ;
15047: CALL 16373 0 0
// DefineStreamItems ( false ) ;
15051: LD_INT 0
15053: PPUSH
15054: CALL 16837 0 1
// end ;
15058: END
// export function SOS_MapStart ( ) ; begin
15059: LD_INT 0
15061: PPUSH
// if streamModeActive then
15062: LD_EXP 37
15066: IFFALSE 15075
// DefineStreamItems ( true ) ;
15068: LD_INT 1
15070: PPUSH
15071: CALL 16837 0 1
// UpdateLuaVariables ( ) ;
15075: CALL 15092 0 0
// UpdateFactoryWaypoints ( ) ;
15079: CALL 29706 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15083: CALL 29963 0 0
// end ;
15087: LD_VAR 0 1
15091: RET
// function UpdateLuaVariables ( ) ; begin
15092: LD_INT 0
15094: PPUSH
// if globalGameSaveCounter then
15095: LD_EXP 36
15099: IFFALSE 15133
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15101: LD_ADDR_EXP 36
15105: PUSH
15106: LD_EXP 36
15110: PPUSH
15111: CALL 69484 0 1
15115: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15116: LD_STRING setGameSaveCounter(
15118: PUSH
15119: LD_EXP 36
15123: STR
15124: PUSH
15125: LD_STRING )
15127: STR
15128: PPUSH
15129: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15133: LD_STRING setGameDifficulty(
15135: PUSH
15136: LD_OWVAR 67
15140: STR
15141: PUSH
15142: LD_STRING )
15144: STR
15145: PPUSH
15146: CALL_OW 559
// end ;
15150: LD_VAR 0 1
15154: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15155: LD_INT 0
15157: PPUSH
// if p2 = stream_mode then
15158: LD_VAR 0 2
15162: PUSH
15163: LD_INT 100
15165: EQUAL
15166: IFFALSE 16169
// begin if not StreamModeActive then
15168: LD_EXP 37
15172: NOT
15173: IFFALSE 15183
// StreamModeActive := true ;
15175: LD_ADDR_EXP 37
15179: PUSH
15180: LD_INT 1
15182: ST_TO_ADDR
// if p3 = 0 then
15183: LD_VAR 0 3
15187: PUSH
15188: LD_INT 0
15190: EQUAL
15191: IFFALSE 15197
// InitStreamMode ;
15193: CALL 16373 0 0
// if p3 = 1 then
15197: LD_VAR 0 3
15201: PUSH
15202: LD_INT 1
15204: EQUAL
15205: IFFALSE 15215
// sRocket := true ;
15207: LD_ADDR_EXP 42
15211: PUSH
15212: LD_INT 1
15214: ST_TO_ADDR
// if p3 = 2 then
15215: LD_VAR 0 3
15219: PUSH
15220: LD_INT 2
15222: EQUAL
15223: IFFALSE 15233
// sSpeed := true ;
15225: LD_ADDR_EXP 41
15229: PUSH
15230: LD_INT 1
15232: ST_TO_ADDR
// if p3 = 3 then
15233: LD_VAR 0 3
15237: PUSH
15238: LD_INT 3
15240: EQUAL
15241: IFFALSE 15251
// sEngine := true ;
15243: LD_ADDR_EXP 43
15247: PUSH
15248: LD_INT 1
15250: ST_TO_ADDR
// if p3 = 4 then
15251: LD_VAR 0 3
15255: PUSH
15256: LD_INT 4
15258: EQUAL
15259: IFFALSE 15269
// sSpec := true ;
15261: LD_ADDR_EXP 40
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
// if p3 = 5 then
15269: LD_VAR 0 3
15273: PUSH
15274: LD_INT 5
15276: EQUAL
15277: IFFALSE 15287
// sLevel := true ;
15279: LD_ADDR_EXP 44
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// if p3 = 6 then
15287: LD_VAR 0 3
15291: PUSH
15292: LD_INT 6
15294: EQUAL
15295: IFFALSE 15305
// sArmoury := true ;
15297: LD_ADDR_EXP 45
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if p3 = 7 then
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 7
15312: EQUAL
15313: IFFALSE 15323
// sRadar := true ;
15315: LD_ADDR_EXP 46
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// if p3 = 8 then
15323: LD_VAR 0 3
15327: PUSH
15328: LD_INT 8
15330: EQUAL
15331: IFFALSE 15341
// sBunker := true ;
15333: LD_ADDR_EXP 47
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// if p3 = 9 then
15341: LD_VAR 0 3
15345: PUSH
15346: LD_INT 9
15348: EQUAL
15349: IFFALSE 15359
// sHack := true ;
15351: LD_ADDR_EXP 48
15355: PUSH
15356: LD_INT 1
15358: ST_TO_ADDR
// if p3 = 10 then
15359: LD_VAR 0 3
15363: PUSH
15364: LD_INT 10
15366: EQUAL
15367: IFFALSE 15377
// sFire := true ;
15369: LD_ADDR_EXP 49
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// if p3 = 11 then
15377: LD_VAR 0 3
15381: PUSH
15382: LD_INT 11
15384: EQUAL
15385: IFFALSE 15395
// sRefresh := true ;
15387: LD_ADDR_EXP 50
15391: PUSH
15392: LD_INT 1
15394: ST_TO_ADDR
// if p3 = 12 then
15395: LD_VAR 0 3
15399: PUSH
15400: LD_INT 12
15402: EQUAL
15403: IFFALSE 15413
// sExp := true ;
15405: LD_ADDR_EXP 51
15409: PUSH
15410: LD_INT 1
15412: ST_TO_ADDR
// if p3 = 13 then
15413: LD_VAR 0 3
15417: PUSH
15418: LD_INT 13
15420: EQUAL
15421: IFFALSE 15431
// sDepot := true ;
15423: LD_ADDR_EXP 52
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// if p3 = 14 then
15431: LD_VAR 0 3
15435: PUSH
15436: LD_INT 14
15438: EQUAL
15439: IFFALSE 15449
// sFlag := true ;
15441: LD_ADDR_EXP 53
15445: PUSH
15446: LD_INT 1
15448: ST_TO_ADDR
// if p3 = 15 then
15449: LD_VAR 0 3
15453: PUSH
15454: LD_INT 15
15456: EQUAL
15457: IFFALSE 15467
// sKamikadze := true ;
15459: LD_ADDR_EXP 61
15463: PUSH
15464: LD_INT 1
15466: ST_TO_ADDR
// if p3 = 16 then
15467: LD_VAR 0 3
15471: PUSH
15472: LD_INT 16
15474: EQUAL
15475: IFFALSE 15485
// sTroll := true ;
15477: LD_ADDR_EXP 62
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// if p3 = 17 then
15485: LD_VAR 0 3
15489: PUSH
15490: LD_INT 17
15492: EQUAL
15493: IFFALSE 15503
// sSlow := true ;
15495: LD_ADDR_EXP 63
15499: PUSH
15500: LD_INT 1
15502: ST_TO_ADDR
// if p3 = 18 then
15503: LD_VAR 0 3
15507: PUSH
15508: LD_INT 18
15510: EQUAL
15511: IFFALSE 15521
// sLack := true ;
15513: LD_ADDR_EXP 64
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
// if p3 = 19 then
15521: LD_VAR 0 3
15525: PUSH
15526: LD_INT 19
15528: EQUAL
15529: IFFALSE 15539
// sTank := true ;
15531: LD_ADDR_EXP 66
15535: PUSH
15536: LD_INT 1
15538: ST_TO_ADDR
// if p3 = 20 then
15539: LD_VAR 0 3
15543: PUSH
15544: LD_INT 20
15546: EQUAL
15547: IFFALSE 15557
// sRemote := true ;
15549: LD_ADDR_EXP 67
15553: PUSH
15554: LD_INT 1
15556: ST_TO_ADDR
// if p3 = 21 then
15557: LD_VAR 0 3
15561: PUSH
15562: LD_INT 21
15564: EQUAL
15565: IFFALSE 15575
// sPowell := true ;
15567: LD_ADDR_EXP 68
15571: PUSH
15572: LD_INT 1
15574: ST_TO_ADDR
// if p3 = 22 then
15575: LD_VAR 0 3
15579: PUSH
15580: LD_INT 22
15582: EQUAL
15583: IFFALSE 15593
// sTeleport := true ;
15585: LD_ADDR_EXP 71
15589: PUSH
15590: LD_INT 1
15592: ST_TO_ADDR
// if p3 = 23 then
15593: LD_VAR 0 3
15597: PUSH
15598: LD_INT 23
15600: EQUAL
15601: IFFALSE 15611
// sOilTower := true ;
15603: LD_ADDR_EXP 73
15607: PUSH
15608: LD_INT 1
15610: ST_TO_ADDR
// if p3 = 24 then
15611: LD_VAR 0 3
15615: PUSH
15616: LD_INT 24
15618: EQUAL
15619: IFFALSE 15629
// sShovel := true ;
15621: LD_ADDR_EXP 74
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// if p3 = 25 then
15629: LD_VAR 0 3
15633: PUSH
15634: LD_INT 25
15636: EQUAL
15637: IFFALSE 15647
// sSheik := true ;
15639: LD_ADDR_EXP 75
15643: PUSH
15644: LD_INT 1
15646: ST_TO_ADDR
// if p3 = 26 then
15647: LD_VAR 0 3
15651: PUSH
15652: LD_INT 26
15654: EQUAL
15655: IFFALSE 15665
// sEarthquake := true ;
15657: LD_ADDR_EXP 77
15661: PUSH
15662: LD_INT 1
15664: ST_TO_ADDR
// if p3 = 27 then
15665: LD_VAR 0 3
15669: PUSH
15670: LD_INT 27
15672: EQUAL
15673: IFFALSE 15683
// sAI := true ;
15675: LD_ADDR_EXP 78
15679: PUSH
15680: LD_INT 1
15682: ST_TO_ADDR
// if p3 = 28 then
15683: LD_VAR 0 3
15687: PUSH
15688: LD_INT 28
15690: EQUAL
15691: IFFALSE 15701
// sCargo := true ;
15693: LD_ADDR_EXP 81
15697: PUSH
15698: LD_INT 1
15700: ST_TO_ADDR
// if p3 = 29 then
15701: LD_VAR 0 3
15705: PUSH
15706: LD_INT 29
15708: EQUAL
15709: IFFALSE 15719
// sDLaser := true ;
15711: LD_ADDR_EXP 82
15715: PUSH
15716: LD_INT 1
15718: ST_TO_ADDR
// if p3 = 30 then
15719: LD_VAR 0 3
15723: PUSH
15724: LD_INT 30
15726: EQUAL
15727: IFFALSE 15737
// sExchange := true ;
15729: LD_ADDR_EXP 83
15733: PUSH
15734: LD_INT 1
15736: ST_TO_ADDR
// if p3 = 31 then
15737: LD_VAR 0 3
15741: PUSH
15742: LD_INT 31
15744: EQUAL
15745: IFFALSE 15755
// sFac := true ;
15747: LD_ADDR_EXP 84
15751: PUSH
15752: LD_INT 1
15754: ST_TO_ADDR
// if p3 = 32 then
15755: LD_VAR 0 3
15759: PUSH
15760: LD_INT 32
15762: EQUAL
15763: IFFALSE 15773
// sPower := true ;
15765: LD_ADDR_EXP 85
15769: PUSH
15770: LD_INT 1
15772: ST_TO_ADDR
// if p3 = 33 then
15773: LD_VAR 0 3
15777: PUSH
15778: LD_INT 33
15780: EQUAL
15781: IFFALSE 15791
// sRandom := true ;
15783: LD_ADDR_EXP 86
15787: PUSH
15788: LD_INT 1
15790: ST_TO_ADDR
// if p3 = 34 then
15791: LD_VAR 0 3
15795: PUSH
15796: LD_INT 34
15798: EQUAL
15799: IFFALSE 15809
// sShield := true ;
15801: LD_ADDR_EXP 87
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// if p3 = 35 then
15809: LD_VAR 0 3
15813: PUSH
15814: LD_INT 35
15816: EQUAL
15817: IFFALSE 15827
// sTime := true ;
15819: LD_ADDR_EXP 88
15823: PUSH
15824: LD_INT 1
15826: ST_TO_ADDR
// if p3 = 36 then
15827: LD_VAR 0 3
15831: PUSH
15832: LD_INT 36
15834: EQUAL
15835: IFFALSE 15845
// sTools := true ;
15837: LD_ADDR_EXP 89
15841: PUSH
15842: LD_INT 1
15844: ST_TO_ADDR
// if p3 = 101 then
15845: LD_VAR 0 3
15849: PUSH
15850: LD_INT 101
15852: EQUAL
15853: IFFALSE 15863
// sSold := true ;
15855: LD_ADDR_EXP 54
15859: PUSH
15860: LD_INT 1
15862: ST_TO_ADDR
// if p3 = 102 then
15863: LD_VAR 0 3
15867: PUSH
15868: LD_INT 102
15870: EQUAL
15871: IFFALSE 15881
// sDiff := true ;
15873: LD_ADDR_EXP 55
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// if p3 = 103 then
15881: LD_VAR 0 3
15885: PUSH
15886: LD_INT 103
15888: EQUAL
15889: IFFALSE 15899
// sFog := true ;
15891: LD_ADDR_EXP 58
15895: PUSH
15896: LD_INT 1
15898: ST_TO_ADDR
// if p3 = 104 then
15899: LD_VAR 0 3
15903: PUSH
15904: LD_INT 104
15906: EQUAL
15907: IFFALSE 15917
// sReset := true ;
15909: LD_ADDR_EXP 59
15913: PUSH
15914: LD_INT 1
15916: ST_TO_ADDR
// if p3 = 105 then
15917: LD_VAR 0 3
15921: PUSH
15922: LD_INT 105
15924: EQUAL
15925: IFFALSE 15935
// sSun := true ;
15927: LD_ADDR_EXP 60
15931: PUSH
15932: LD_INT 1
15934: ST_TO_ADDR
// if p3 = 106 then
15935: LD_VAR 0 3
15939: PUSH
15940: LD_INT 106
15942: EQUAL
15943: IFFALSE 15953
// sTiger := true ;
15945: LD_ADDR_EXP 56
15949: PUSH
15950: LD_INT 1
15952: ST_TO_ADDR
// if p3 = 107 then
15953: LD_VAR 0 3
15957: PUSH
15958: LD_INT 107
15960: EQUAL
15961: IFFALSE 15971
// sBomb := true ;
15963: LD_ADDR_EXP 57
15967: PUSH
15968: LD_INT 1
15970: ST_TO_ADDR
// if p3 = 108 then
15971: LD_VAR 0 3
15975: PUSH
15976: LD_INT 108
15978: EQUAL
15979: IFFALSE 15989
// sWound := true ;
15981: LD_ADDR_EXP 65
15985: PUSH
15986: LD_INT 1
15988: ST_TO_ADDR
// if p3 = 109 then
15989: LD_VAR 0 3
15993: PUSH
15994: LD_INT 109
15996: EQUAL
15997: IFFALSE 16007
// sBetray := true ;
15999: LD_ADDR_EXP 69
16003: PUSH
16004: LD_INT 1
16006: ST_TO_ADDR
// if p3 = 110 then
16007: LD_VAR 0 3
16011: PUSH
16012: LD_INT 110
16014: EQUAL
16015: IFFALSE 16025
// sContamin := true ;
16017: LD_ADDR_EXP 70
16021: PUSH
16022: LD_INT 1
16024: ST_TO_ADDR
// if p3 = 111 then
16025: LD_VAR 0 3
16029: PUSH
16030: LD_INT 111
16032: EQUAL
16033: IFFALSE 16043
// sOil := true ;
16035: LD_ADDR_EXP 72
16039: PUSH
16040: LD_INT 1
16042: ST_TO_ADDR
// if p3 = 112 then
16043: LD_VAR 0 3
16047: PUSH
16048: LD_INT 112
16050: EQUAL
16051: IFFALSE 16061
// sStu := true ;
16053: LD_ADDR_EXP 76
16057: PUSH
16058: LD_INT 1
16060: ST_TO_ADDR
// if p3 = 113 then
16061: LD_VAR 0 3
16065: PUSH
16066: LD_INT 113
16068: EQUAL
16069: IFFALSE 16079
// sBazooka := true ;
16071: LD_ADDR_EXP 79
16075: PUSH
16076: LD_INT 1
16078: ST_TO_ADDR
// if p3 = 114 then
16079: LD_VAR 0 3
16083: PUSH
16084: LD_INT 114
16086: EQUAL
16087: IFFALSE 16097
// sMortar := true ;
16089: LD_ADDR_EXP 80
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// if p3 = 115 then
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 115
16104: EQUAL
16105: IFFALSE 16115
// sRanger := true ;
16107: LD_ADDR_EXP 90
16111: PUSH
16112: LD_INT 1
16114: ST_TO_ADDR
// if p3 = 116 then
16115: LD_VAR 0 3
16119: PUSH
16120: LD_INT 116
16122: EQUAL
16123: IFFALSE 16133
// sComputer := true ;
16125: LD_ADDR_EXP 91
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// if p3 = 117 then
16133: LD_VAR 0 3
16137: PUSH
16138: LD_INT 117
16140: EQUAL
16141: IFFALSE 16151
// s30 := true ;
16143: LD_ADDR_EXP 92
16147: PUSH
16148: LD_INT 1
16150: ST_TO_ADDR
// if p3 = 118 then
16151: LD_VAR 0 3
16155: PUSH
16156: LD_INT 118
16158: EQUAL
16159: IFFALSE 16169
// s60 := true ;
16161: LD_ADDR_EXP 93
16165: PUSH
16166: LD_INT 1
16168: ST_TO_ADDR
// end ; if p2 = hack_mode then
16169: LD_VAR 0 2
16173: PUSH
16174: LD_INT 101
16176: EQUAL
16177: IFFALSE 16305
// begin case p3 of 1 :
16179: LD_VAR 0 3
16183: PUSH
16184: LD_INT 1
16186: DOUBLE
16187: EQUAL
16188: IFTRUE 16192
16190: GO 16199
16192: POP
// hHackUnlimitedResources ; 2 :
16193: CALL 28452 0 0
16197: GO 16305
16199: LD_INT 2
16201: DOUBLE
16202: EQUAL
16203: IFTRUE 16207
16205: GO 16214
16207: POP
// hHackSetLevel10 ; 3 :
16208: CALL 28585 0 0
16212: GO 16305
16214: LD_INT 3
16216: DOUBLE
16217: EQUAL
16218: IFTRUE 16222
16220: GO 16229
16222: POP
// hHackSetLevel10YourUnits ; 4 :
16223: CALL 28670 0 0
16227: GO 16305
16229: LD_INT 4
16231: DOUBLE
16232: EQUAL
16233: IFTRUE 16237
16235: GO 16244
16237: POP
// hHackInvincible ; 5 :
16238: CALL 29118 0 0
16242: GO 16305
16244: LD_INT 5
16246: DOUBLE
16247: EQUAL
16248: IFTRUE 16252
16250: GO 16259
16252: POP
// hHackInvisible ; 6 :
16253: CALL 29229 0 0
16257: GO 16305
16259: LD_INT 6
16261: DOUBLE
16262: EQUAL
16263: IFTRUE 16267
16265: GO 16274
16267: POP
// hHackChangeYourSide ; 7 :
16268: CALL 29286 0 0
16272: GO 16305
16274: LD_INT 7
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16289
16282: POP
// hHackChangeUnitSide ; 8 :
16283: CALL 29328 0 0
16287: GO 16305
16289: LD_INT 8
16291: DOUBLE
16292: EQUAL
16293: IFTRUE 16297
16295: GO 16304
16297: POP
// hHackFog ; end ;
16298: CALL 29429 0 0
16302: GO 16305
16304: POP
// end ; if p2 = game_save_mode then
16305: LD_VAR 0 2
16309: PUSH
16310: LD_INT 102
16312: EQUAL
16313: IFFALSE 16368
// begin if p3 = 1 then
16315: LD_VAR 0 3
16319: PUSH
16320: LD_INT 1
16322: EQUAL
16323: IFFALSE 16335
// globalGameSaveCounter := p4 ;
16325: LD_ADDR_EXP 36
16329: PUSH
16330: LD_VAR 0 4
16334: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16335: LD_VAR 0 3
16339: PUSH
16340: LD_INT 2
16342: EQUAL
16343: PUSH
16344: LD_EXP 36
16348: AND
16349: IFFALSE 16368
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16351: LD_STRING setGameSaveCounter(
16353: PUSH
16354: LD_EXP 36
16358: STR
16359: PUSH
16360: LD_STRING )
16362: STR
16363: PPUSH
16364: CALL_OW 559
// end ; end ;
16368: LD_VAR 0 7
16372: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16373: LD_INT 0
16375: PPUSH
// streamModeActive := false ;
16376: LD_ADDR_EXP 37
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// normalCounter := 36 ;
16384: LD_ADDR_EXP 38
16388: PUSH
16389: LD_INT 36
16391: ST_TO_ADDR
// hardcoreCounter := 18 ;
16392: LD_ADDR_EXP 39
16396: PUSH
16397: LD_INT 18
16399: ST_TO_ADDR
// sRocket := false ;
16400: LD_ADDR_EXP 42
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// sSpeed := false ;
16408: LD_ADDR_EXP 41
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// sEngine := false ;
16416: LD_ADDR_EXP 43
16420: PUSH
16421: LD_INT 0
16423: ST_TO_ADDR
// sSpec := false ;
16424: LD_ADDR_EXP 40
16428: PUSH
16429: LD_INT 0
16431: ST_TO_ADDR
// sLevel := false ;
16432: LD_ADDR_EXP 44
16436: PUSH
16437: LD_INT 0
16439: ST_TO_ADDR
// sArmoury := false ;
16440: LD_ADDR_EXP 45
16444: PUSH
16445: LD_INT 0
16447: ST_TO_ADDR
// sRadar := false ;
16448: LD_ADDR_EXP 46
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// sBunker := false ;
16456: LD_ADDR_EXP 47
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// sHack := false ;
16464: LD_ADDR_EXP 48
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// sFire := false ;
16472: LD_ADDR_EXP 49
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// sRefresh := false ;
16480: LD_ADDR_EXP 50
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// sExp := false ;
16488: LD_ADDR_EXP 51
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// sDepot := false ;
16496: LD_ADDR_EXP 52
16500: PUSH
16501: LD_INT 0
16503: ST_TO_ADDR
// sFlag := false ;
16504: LD_ADDR_EXP 53
16508: PUSH
16509: LD_INT 0
16511: ST_TO_ADDR
// sKamikadze := false ;
16512: LD_ADDR_EXP 61
16516: PUSH
16517: LD_INT 0
16519: ST_TO_ADDR
// sTroll := false ;
16520: LD_ADDR_EXP 62
16524: PUSH
16525: LD_INT 0
16527: ST_TO_ADDR
// sSlow := false ;
16528: LD_ADDR_EXP 63
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// sLack := false ;
16536: LD_ADDR_EXP 64
16540: PUSH
16541: LD_INT 0
16543: ST_TO_ADDR
// sTank := false ;
16544: LD_ADDR_EXP 66
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// sRemote := false ;
16552: LD_ADDR_EXP 67
16556: PUSH
16557: LD_INT 0
16559: ST_TO_ADDR
// sPowell := false ;
16560: LD_ADDR_EXP 68
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// sTeleport := false ;
16568: LD_ADDR_EXP 71
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// sOilTower := false ;
16576: LD_ADDR_EXP 73
16580: PUSH
16581: LD_INT 0
16583: ST_TO_ADDR
// sShovel := false ;
16584: LD_ADDR_EXP 74
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
// sSheik := false ;
16592: LD_ADDR_EXP 75
16596: PUSH
16597: LD_INT 0
16599: ST_TO_ADDR
// sEarthquake := false ;
16600: LD_ADDR_EXP 77
16604: PUSH
16605: LD_INT 0
16607: ST_TO_ADDR
// sAI := false ;
16608: LD_ADDR_EXP 78
16612: PUSH
16613: LD_INT 0
16615: ST_TO_ADDR
// sCargo := false ;
16616: LD_ADDR_EXP 81
16620: PUSH
16621: LD_INT 0
16623: ST_TO_ADDR
// sDLaser := false ;
16624: LD_ADDR_EXP 82
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// sExchange := false ;
16632: LD_ADDR_EXP 83
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// sFac := false ;
16640: LD_ADDR_EXP 84
16644: PUSH
16645: LD_INT 0
16647: ST_TO_ADDR
// sPower := false ;
16648: LD_ADDR_EXP 85
16652: PUSH
16653: LD_INT 0
16655: ST_TO_ADDR
// sRandom := false ;
16656: LD_ADDR_EXP 86
16660: PUSH
16661: LD_INT 0
16663: ST_TO_ADDR
// sShield := false ;
16664: LD_ADDR_EXP 87
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// sTime := false ;
16672: LD_ADDR_EXP 88
16676: PUSH
16677: LD_INT 0
16679: ST_TO_ADDR
// sTools := false ;
16680: LD_ADDR_EXP 89
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// sSold := false ;
16688: LD_ADDR_EXP 54
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// sDiff := false ;
16696: LD_ADDR_EXP 55
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// sFog := false ;
16704: LD_ADDR_EXP 58
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// sReset := false ;
16712: LD_ADDR_EXP 59
16716: PUSH
16717: LD_INT 0
16719: ST_TO_ADDR
// sSun := false ;
16720: LD_ADDR_EXP 60
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// sTiger := false ;
16728: LD_ADDR_EXP 56
16732: PUSH
16733: LD_INT 0
16735: ST_TO_ADDR
// sBomb := false ;
16736: LD_ADDR_EXP 57
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// sWound := false ;
16744: LD_ADDR_EXP 65
16748: PUSH
16749: LD_INT 0
16751: ST_TO_ADDR
// sBetray := false ;
16752: LD_ADDR_EXP 69
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// sContamin := false ;
16760: LD_ADDR_EXP 70
16764: PUSH
16765: LD_INT 0
16767: ST_TO_ADDR
// sOil := false ;
16768: LD_ADDR_EXP 72
16772: PUSH
16773: LD_INT 0
16775: ST_TO_ADDR
// sStu := false ;
16776: LD_ADDR_EXP 76
16780: PUSH
16781: LD_INT 0
16783: ST_TO_ADDR
// sBazooka := false ;
16784: LD_ADDR_EXP 79
16788: PUSH
16789: LD_INT 0
16791: ST_TO_ADDR
// sMortar := false ;
16792: LD_ADDR_EXP 80
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// sRanger := false ;
16800: LD_ADDR_EXP 90
16804: PUSH
16805: LD_INT 0
16807: ST_TO_ADDR
// sComputer := false ;
16808: LD_ADDR_EXP 91
16812: PUSH
16813: LD_INT 0
16815: ST_TO_ADDR
// s30 := false ;
16816: LD_ADDR_EXP 92
16820: PUSH
16821: LD_INT 0
16823: ST_TO_ADDR
// s60 := false ;
16824: LD_ADDR_EXP 93
16828: PUSH
16829: LD_INT 0
16831: ST_TO_ADDR
// end ;
16832: LD_VAR 0 1
16836: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16837: LD_INT 0
16839: PPUSH
16840: PPUSH
16841: PPUSH
16842: PPUSH
16843: PPUSH
16844: PPUSH
16845: PPUSH
// result := [ ] ;
16846: LD_ADDR_VAR 0 2
16850: PUSH
16851: EMPTY
16852: ST_TO_ADDR
// if campaign_id = 1 then
16853: LD_OWVAR 69
16857: PUSH
16858: LD_INT 1
16860: EQUAL
16861: IFFALSE 20027
// begin case mission_number of 1 :
16863: LD_OWVAR 70
16867: PUSH
16868: LD_INT 1
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16952
16876: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16877: LD_ADDR_VAR 0 2
16881: PUSH
16882: LD_INT 2
16884: PUSH
16885: LD_INT 4
16887: PUSH
16888: LD_INT 11
16890: PUSH
16891: LD_INT 12
16893: PUSH
16894: LD_INT 15
16896: PUSH
16897: LD_INT 16
16899: PUSH
16900: LD_INT 22
16902: PUSH
16903: LD_INT 23
16905: PUSH
16906: LD_INT 26
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 101
16922: PUSH
16923: LD_INT 102
16925: PUSH
16926: LD_INT 106
16928: PUSH
16929: LD_INT 116
16931: PUSH
16932: LD_INT 117
16934: PUSH
16935: LD_INT 118
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: ST_TO_ADDR
16950: GO 20025
16952: LD_INT 2
16954: DOUBLE
16955: EQUAL
16956: IFTRUE 16960
16958: GO 17044
16960: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16961: LD_ADDR_VAR 0 2
16965: PUSH
16966: LD_INT 2
16968: PUSH
16969: LD_INT 4
16971: PUSH
16972: LD_INT 11
16974: PUSH
16975: LD_INT 12
16977: PUSH
16978: LD_INT 15
16980: PUSH
16981: LD_INT 16
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 23
16989: PUSH
16990: LD_INT 26
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 101
17006: PUSH
17007: LD_INT 102
17009: PUSH
17010: LD_INT 105
17012: PUSH
17013: LD_INT 106
17015: PUSH
17016: LD_INT 108
17018: PUSH
17019: LD_INT 116
17021: PUSH
17022: LD_INT 117
17024: PUSH
17025: LD_INT 118
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: ST_TO_ADDR
17042: GO 20025
17044: LD_INT 3
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17140
17052: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: LD_INT 4
17063: PUSH
17064: LD_INT 5
17066: PUSH
17067: LD_INT 11
17069: PUSH
17070: LD_INT 12
17072: PUSH
17073: LD_INT 15
17075: PUSH
17076: LD_INT 16
17078: PUSH
17079: LD_INT 22
17081: PUSH
17082: LD_INT 26
17084: PUSH
17085: LD_INT 36
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 101
17102: PUSH
17103: LD_INT 102
17105: PUSH
17106: LD_INT 105
17108: PUSH
17109: LD_INT 106
17111: PUSH
17112: LD_INT 108
17114: PUSH
17115: LD_INT 116
17117: PUSH
17118: LD_INT 117
17120: PUSH
17121: LD_INT 118
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: ST_TO_ADDR
17138: GO 20025
17140: LD_INT 4
17142: DOUBLE
17143: EQUAL
17144: IFTRUE 17148
17146: GO 17244
17148: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 2
17156: PUSH
17157: LD_INT 4
17159: PUSH
17160: LD_INT 5
17162: PUSH
17163: LD_INT 8
17165: PUSH
17166: LD_INT 11
17168: PUSH
17169: LD_INT 12
17171: PUSH
17172: LD_INT 15
17174: PUSH
17175: LD_INT 16
17177: PUSH
17178: LD_INT 22
17180: PUSH
17181: LD_INT 23
17183: PUSH
17184: LD_INT 26
17186: PUSH
17187: LD_INT 36
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 101
17206: PUSH
17207: LD_INT 102
17209: PUSH
17210: LD_INT 105
17212: PUSH
17213: LD_INT 106
17215: PUSH
17216: LD_INT 108
17218: PUSH
17219: LD_INT 116
17221: PUSH
17222: LD_INT 117
17224: PUSH
17225: LD_INT 118
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: ST_TO_ADDR
17242: GO 20025
17244: LD_INT 5
17246: DOUBLE
17247: EQUAL
17248: IFTRUE 17252
17250: GO 17364
17252: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17253: LD_ADDR_VAR 0 2
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 4
17263: PUSH
17264: LD_INT 5
17266: PUSH
17267: LD_INT 6
17269: PUSH
17270: LD_INT 8
17272: PUSH
17273: LD_INT 11
17275: PUSH
17276: LD_INT 12
17278: PUSH
17279: LD_INT 15
17281: PUSH
17282: LD_INT 16
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_INT 23
17290: PUSH
17291: LD_INT 25
17293: PUSH
17294: LD_INT 26
17296: PUSH
17297: LD_INT 36
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 101
17318: PUSH
17319: LD_INT 102
17321: PUSH
17322: LD_INT 105
17324: PUSH
17325: LD_INT 106
17327: PUSH
17328: LD_INT 108
17330: PUSH
17331: LD_INT 109
17333: PUSH
17334: LD_INT 112
17336: PUSH
17337: LD_INT 116
17339: PUSH
17340: LD_INT 117
17342: PUSH
17343: LD_INT 118
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: ST_TO_ADDR
17362: GO 20025
17364: LD_INT 6
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17504
17372: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17373: LD_ADDR_VAR 0 2
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: LD_INT 4
17383: PUSH
17384: LD_INT 5
17386: PUSH
17387: LD_INT 6
17389: PUSH
17390: LD_INT 8
17392: PUSH
17393: LD_INT 11
17395: PUSH
17396: LD_INT 12
17398: PUSH
17399: LD_INT 15
17401: PUSH
17402: LD_INT 16
17404: PUSH
17405: LD_INT 20
17407: PUSH
17408: LD_INT 21
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_INT 23
17416: PUSH
17417: LD_INT 25
17419: PUSH
17420: LD_INT 26
17422: PUSH
17423: LD_INT 30
17425: PUSH
17426: LD_INT 31
17428: PUSH
17429: LD_INT 32
17431: PUSH
17432: LD_INT 36
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 101
17458: PUSH
17459: LD_INT 102
17461: PUSH
17462: LD_INT 105
17464: PUSH
17465: LD_INT 106
17467: PUSH
17468: LD_INT 108
17470: PUSH
17471: LD_INT 109
17473: PUSH
17474: LD_INT 112
17476: PUSH
17477: LD_INT 116
17479: PUSH
17480: LD_INT 117
17482: PUSH
17483: LD_INT 118
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: ST_TO_ADDR
17502: GO 20025
17504: LD_INT 7
17506: DOUBLE
17507: EQUAL
17508: IFTRUE 17512
17510: GO 17624
17512: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17513: LD_ADDR_VAR 0 2
17517: PUSH
17518: LD_INT 2
17520: PUSH
17521: LD_INT 4
17523: PUSH
17524: LD_INT 5
17526: PUSH
17527: LD_INT 7
17529: PUSH
17530: LD_INT 11
17532: PUSH
17533: LD_INT 12
17535: PUSH
17536: LD_INT 15
17538: PUSH
17539: LD_INT 16
17541: PUSH
17542: LD_INT 20
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 22
17550: PUSH
17551: LD_INT 23
17553: PUSH
17554: LD_INT 25
17556: PUSH
17557: LD_INT 26
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 101
17578: PUSH
17579: LD_INT 102
17581: PUSH
17582: LD_INT 103
17584: PUSH
17585: LD_INT 105
17587: PUSH
17588: LD_INT 106
17590: PUSH
17591: LD_INT 108
17593: PUSH
17594: LD_INT 112
17596: PUSH
17597: LD_INT 116
17599: PUSH
17600: LD_INT 117
17602: PUSH
17603: LD_INT 118
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: ST_TO_ADDR
17622: GO 20025
17624: LD_INT 8
17626: DOUBLE
17627: EQUAL
17628: IFTRUE 17632
17630: GO 17772
17632: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17633: LD_ADDR_VAR 0 2
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: LD_INT 4
17643: PUSH
17644: LD_INT 5
17646: PUSH
17647: LD_INT 6
17649: PUSH
17650: LD_INT 7
17652: PUSH
17653: LD_INT 8
17655: PUSH
17656: LD_INT 11
17658: PUSH
17659: LD_INT 12
17661: PUSH
17662: LD_INT 15
17664: PUSH
17665: LD_INT 16
17667: PUSH
17668: LD_INT 20
17670: PUSH
17671: LD_INT 21
17673: PUSH
17674: LD_INT 22
17676: PUSH
17677: LD_INT 23
17679: PUSH
17680: LD_INT 25
17682: PUSH
17683: LD_INT 26
17685: PUSH
17686: LD_INT 30
17688: PUSH
17689: LD_INT 31
17691: PUSH
17692: LD_INT 32
17694: PUSH
17695: LD_INT 36
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 101
17722: PUSH
17723: LD_INT 102
17725: PUSH
17726: LD_INT 103
17728: PUSH
17729: LD_INT 105
17731: PUSH
17732: LD_INT 106
17734: PUSH
17735: LD_INT 108
17737: PUSH
17738: LD_INT 109
17740: PUSH
17741: LD_INT 112
17743: PUSH
17744: LD_INT 116
17746: PUSH
17747: LD_INT 117
17749: PUSH
17750: LD_INT 118
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: ST_TO_ADDR
17770: GO 20025
17772: LD_INT 9
17774: DOUBLE
17775: EQUAL
17776: IFTRUE 17780
17778: GO 17928
17780: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17781: LD_ADDR_VAR 0 2
17785: PUSH
17786: LD_INT 2
17788: PUSH
17789: LD_INT 4
17791: PUSH
17792: LD_INT 5
17794: PUSH
17795: LD_INT 6
17797: PUSH
17798: LD_INT 7
17800: PUSH
17801: LD_INT 8
17803: PUSH
17804: LD_INT 11
17806: PUSH
17807: LD_INT 12
17809: PUSH
17810: LD_INT 15
17812: PUSH
17813: LD_INT 16
17815: PUSH
17816: LD_INT 20
17818: PUSH
17819: LD_INT 21
17821: PUSH
17822: LD_INT 22
17824: PUSH
17825: LD_INT 23
17827: PUSH
17828: LD_INT 25
17830: PUSH
17831: LD_INT 26
17833: PUSH
17834: LD_INT 28
17836: PUSH
17837: LD_INT 30
17839: PUSH
17840: LD_INT 31
17842: PUSH
17843: LD_INT 32
17845: PUSH
17846: LD_INT 36
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 101
17874: PUSH
17875: LD_INT 102
17877: PUSH
17878: LD_INT 103
17880: PUSH
17881: LD_INT 105
17883: PUSH
17884: LD_INT 106
17886: PUSH
17887: LD_INT 108
17889: PUSH
17890: LD_INT 109
17892: PUSH
17893: LD_INT 112
17895: PUSH
17896: LD_INT 114
17898: PUSH
17899: LD_INT 116
17901: PUSH
17902: LD_INT 117
17904: PUSH
17905: LD_INT 118
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: ST_TO_ADDR
17926: GO 20025
17928: LD_INT 10
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 18132
17936: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: LD_INT 4
17947: PUSH
17948: LD_INT 5
17950: PUSH
17951: LD_INT 6
17953: PUSH
17954: LD_INT 7
17956: PUSH
17957: LD_INT 8
17959: PUSH
17960: LD_INT 9
17962: PUSH
17963: LD_INT 10
17965: PUSH
17966: LD_INT 11
17968: PUSH
17969: LD_INT 12
17971: PUSH
17972: LD_INT 13
17974: PUSH
17975: LD_INT 14
17977: PUSH
17978: LD_INT 15
17980: PUSH
17981: LD_INT 16
17983: PUSH
17984: LD_INT 17
17986: PUSH
17987: LD_INT 18
17989: PUSH
17990: LD_INT 19
17992: PUSH
17993: LD_INT 20
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_INT 23
18004: PUSH
18005: LD_INT 24
18007: PUSH
18008: LD_INT 25
18010: PUSH
18011: LD_INT 26
18013: PUSH
18014: LD_INT 28
18016: PUSH
18017: LD_INT 30
18019: PUSH
18020: LD_INT 31
18022: PUSH
18023: LD_INT 32
18025: PUSH
18026: LD_INT 36
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 101
18062: PUSH
18063: LD_INT 102
18065: PUSH
18066: LD_INT 103
18068: PUSH
18069: LD_INT 104
18071: PUSH
18072: LD_INT 105
18074: PUSH
18075: LD_INT 106
18077: PUSH
18078: LD_INT 107
18080: PUSH
18081: LD_INT 108
18083: PUSH
18084: LD_INT 109
18086: PUSH
18087: LD_INT 110
18089: PUSH
18090: LD_INT 111
18092: PUSH
18093: LD_INT 112
18095: PUSH
18096: LD_INT 114
18098: PUSH
18099: LD_INT 116
18101: PUSH
18102: LD_INT 117
18104: PUSH
18105: LD_INT 118
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: ST_TO_ADDR
18130: GO 20025
18132: LD_INT 11
18134: DOUBLE
18135: EQUAL
18136: IFTRUE 18140
18138: GO 18344
18140: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_INT 2
18148: PUSH
18149: LD_INT 3
18151: PUSH
18152: LD_INT 4
18154: PUSH
18155: LD_INT 5
18157: PUSH
18158: LD_INT 6
18160: PUSH
18161: LD_INT 7
18163: PUSH
18164: LD_INT 8
18166: PUSH
18167: LD_INT 9
18169: PUSH
18170: LD_INT 10
18172: PUSH
18173: LD_INT 11
18175: PUSH
18176: LD_INT 12
18178: PUSH
18179: LD_INT 13
18181: PUSH
18182: LD_INT 14
18184: PUSH
18185: LD_INT 15
18187: PUSH
18188: LD_INT 16
18190: PUSH
18191: LD_INT 17
18193: PUSH
18194: LD_INT 18
18196: PUSH
18197: LD_INT 19
18199: PUSH
18200: LD_INT 20
18202: PUSH
18203: LD_INT 21
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_INT 23
18211: PUSH
18212: LD_INT 24
18214: PUSH
18215: LD_INT 25
18217: PUSH
18218: LD_INT 26
18220: PUSH
18221: LD_INT 28
18223: PUSH
18224: LD_INT 30
18226: PUSH
18227: LD_INT 31
18229: PUSH
18230: LD_INT 32
18232: PUSH
18233: LD_INT 34
18235: PUSH
18236: LD_INT 36
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 101
18274: PUSH
18275: LD_INT 102
18277: PUSH
18278: LD_INT 103
18280: PUSH
18281: LD_INT 104
18283: PUSH
18284: LD_INT 105
18286: PUSH
18287: LD_INT 106
18289: PUSH
18290: LD_INT 107
18292: PUSH
18293: LD_INT 108
18295: PUSH
18296: LD_INT 109
18298: PUSH
18299: LD_INT 110
18301: PUSH
18302: LD_INT 111
18304: PUSH
18305: LD_INT 112
18307: PUSH
18308: LD_INT 114
18310: PUSH
18311: LD_INT 116
18313: PUSH
18314: LD_INT 117
18316: PUSH
18317: LD_INT 118
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: ST_TO_ADDR
18342: GO 20025
18344: LD_INT 12
18346: DOUBLE
18347: EQUAL
18348: IFTRUE 18352
18350: GO 18572
18352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18353: LD_ADDR_VAR 0 2
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 2
18363: PUSH
18364: LD_INT 3
18366: PUSH
18367: LD_INT 4
18369: PUSH
18370: LD_INT 5
18372: PUSH
18373: LD_INT 6
18375: PUSH
18376: LD_INT 7
18378: PUSH
18379: LD_INT 8
18381: PUSH
18382: LD_INT 9
18384: PUSH
18385: LD_INT 10
18387: PUSH
18388: LD_INT 11
18390: PUSH
18391: LD_INT 12
18393: PUSH
18394: LD_INT 13
18396: PUSH
18397: LD_INT 14
18399: PUSH
18400: LD_INT 15
18402: PUSH
18403: LD_INT 16
18405: PUSH
18406: LD_INT 17
18408: PUSH
18409: LD_INT 18
18411: PUSH
18412: LD_INT 19
18414: PUSH
18415: LD_INT 20
18417: PUSH
18418: LD_INT 21
18420: PUSH
18421: LD_INT 22
18423: PUSH
18424: LD_INT 23
18426: PUSH
18427: LD_INT 24
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 26
18435: PUSH
18436: LD_INT 27
18438: PUSH
18439: LD_INT 28
18441: PUSH
18442: LD_INT 30
18444: PUSH
18445: LD_INT 31
18447: PUSH
18448: LD_INT 32
18450: PUSH
18451: LD_INT 33
18453: PUSH
18454: LD_INT 34
18456: PUSH
18457: LD_INT 36
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 101
18498: PUSH
18499: LD_INT 102
18501: PUSH
18502: LD_INT 103
18504: PUSH
18505: LD_INT 104
18507: PUSH
18508: LD_INT 105
18510: PUSH
18511: LD_INT 106
18513: PUSH
18514: LD_INT 107
18516: PUSH
18517: LD_INT 108
18519: PUSH
18520: LD_INT 109
18522: PUSH
18523: LD_INT 110
18525: PUSH
18526: LD_INT 111
18528: PUSH
18529: LD_INT 112
18531: PUSH
18532: LD_INT 113
18534: PUSH
18535: LD_INT 114
18537: PUSH
18538: LD_INT 116
18540: PUSH
18541: LD_INT 117
18543: PUSH
18544: LD_INT 118
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: ST_TO_ADDR
18570: GO 20025
18572: LD_INT 13
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18788
18580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18581: LD_ADDR_VAR 0 2
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 3
18594: PUSH
18595: LD_INT 4
18597: PUSH
18598: LD_INT 5
18600: PUSH
18601: LD_INT 8
18603: PUSH
18604: LD_INT 9
18606: PUSH
18607: LD_INT 10
18609: PUSH
18610: LD_INT 11
18612: PUSH
18613: LD_INT 12
18615: PUSH
18616: LD_INT 14
18618: PUSH
18619: LD_INT 15
18621: PUSH
18622: LD_INT 16
18624: PUSH
18625: LD_INT 17
18627: PUSH
18628: LD_INT 18
18630: PUSH
18631: LD_INT 19
18633: PUSH
18634: LD_INT 20
18636: PUSH
18637: LD_INT 21
18639: PUSH
18640: LD_INT 22
18642: PUSH
18643: LD_INT 23
18645: PUSH
18646: LD_INT 24
18648: PUSH
18649: LD_INT 25
18651: PUSH
18652: LD_INT 26
18654: PUSH
18655: LD_INT 27
18657: PUSH
18658: LD_INT 28
18660: PUSH
18661: LD_INT 30
18663: PUSH
18664: LD_INT 31
18666: PUSH
18667: LD_INT 32
18669: PUSH
18670: LD_INT 33
18672: PUSH
18673: LD_INT 34
18675: PUSH
18676: LD_INT 36
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 101
18714: PUSH
18715: LD_INT 102
18717: PUSH
18718: LD_INT 103
18720: PUSH
18721: LD_INT 104
18723: PUSH
18724: LD_INT 105
18726: PUSH
18727: LD_INT 106
18729: PUSH
18730: LD_INT 107
18732: PUSH
18733: LD_INT 108
18735: PUSH
18736: LD_INT 109
18738: PUSH
18739: LD_INT 110
18741: PUSH
18742: LD_INT 111
18744: PUSH
18745: LD_INT 112
18747: PUSH
18748: LD_INT 113
18750: PUSH
18751: LD_INT 114
18753: PUSH
18754: LD_INT 116
18756: PUSH
18757: LD_INT 117
18759: PUSH
18760: LD_INT 118
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: ST_TO_ADDR
18786: GO 20025
18788: LD_INT 14
18790: DOUBLE
18791: EQUAL
18792: IFTRUE 18796
18794: GO 19020
18796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18797: LD_ADDR_VAR 0 2
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 4
18813: PUSH
18814: LD_INT 5
18816: PUSH
18817: LD_INT 6
18819: PUSH
18820: LD_INT 7
18822: PUSH
18823: LD_INT 8
18825: PUSH
18826: LD_INT 9
18828: PUSH
18829: LD_INT 10
18831: PUSH
18832: LD_INT 11
18834: PUSH
18835: LD_INT 12
18837: PUSH
18838: LD_INT 13
18840: PUSH
18841: LD_INT 14
18843: PUSH
18844: LD_INT 15
18846: PUSH
18847: LD_INT 16
18849: PUSH
18850: LD_INT 17
18852: PUSH
18853: LD_INT 18
18855: PUSH
18856: LD_INT 19
18858: PUSH
18859: LD_INT 20
18861: PUSH
18862: LD_INT 21
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_INT 23
18870: PUSH
18871: LD_INT 24
18873: PUSH
18874: LD_INT 25
18876: PUSH
18877: LD_INT 26
18879: PUSH
18880: LD_INT 27
18882: PUSH
18883: LD_INT 28
18885: PUSH
18886: LD_INT 29
18888: PUSH
18889: LD_INT 30
18891: PUSH
18892: LD_INT 31
18894: PUSH
18895: LD_INT 32
18897: PUSH
18898: LD_INT 33
18900: PUSH
18901: LD_INT 34
18903: PUSH
18904: LD_INT 36
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 101
18946: PUSH
18947: LD_INT 102
18949: PUSH
18950: LD_INT 103
18952: PUSH
18953: LD_INT 104
18955: PUSH
18956: LD_INT 105
18958: PUSH
18959: LD_INT 106
18961: PUSH
18962: LD_INT 107
18964: PUSH
18965: LD_INT 108
18967: PUSH
18968: LD_INT 109
18970: PUSH
18971: LD_INT 110
18973: PUSH
18974: LD_INT 111
18976: PUSH
18977: LD_INT 112
18979: PUSH
18980: LD_INT 113
18982: PUSH
18983: LD_INT 114
18985: PUSH
18986: LD_INT 116
18988: PUSH
18989: LD_INT 117
18991: PUSH
18992: LD_INT 118
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: ST_TO_ADDR
19018: GO 20025
19020: LD_INT 15
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19252
19028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19029: LD_ADDR_VAR 0 2
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 3
19042: PUSH
19043: LD_INT 4
19045: PUSH
19046: LD_INT 5
19048: PUSH
19049: LD_INT 6
19051: PUSH
19052: LD_INT 7
19054: PUSH
19055: LD_INT 8
19057: PUSH
19058: LD_INT 9
19060: PUSH
19061: LD_INT 10
19063: PUSH
19064: LD_INT 11
19066: PUSH
19067: LD_INT 12
19069: PUSH
19070: LD_INT 13
19072: PUSH
19073: LD_INT 14
19075: PUSH
19076: LD_INT 15
19078: PUSH
19079: LD_INT 16
19081: PUSH
19082: LD_INT 17
19084: PUSH
19085: LD_INT 18
19087: PUSH
19088: LD_INT 19
19090: PUSH
19091: LD_INT 20
19093: PUSH
19094: LD_INT 21
19096: PUSH
19097: LD_INT 22
19099: PUSH
19100: LD_INT 23
19102: PUSH
19103: LD_INT 24
19105: PUSH
19106: LD_INT 25
19108: PUSH
19109: LD_INT 26
19111: PUSH
19112: LD_INT 27
19114: PUSH
19115: LD_INT 28
19117: PUSH
19118: LD_INT 29
19120: PUSH
19121: LD_INT 30
19123: PUSH
19124: LD_INT 31
19126: PUSH
19127: LD_INT 32
19129: PUSH
19130: LD_INT 33
19132: PUSH
19133: LD_INT 34
19135: PUSH
19136: LD_INT 36
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 101
19178: PUSH
19179: LD_INT 102
19181: PUSH
19182: LD_INT 103
19184: PUSH
19185: LD_INT 104
19187: PUSH
19188: LD_INT 105
19190: PUSH
19191: LD_INT 106
19193: PUSH
19194: LD_INT 107
19196: PUSH
19197: LD_INT 108
19199: PUSH
19200: LD_INT 109
19202: PUSH
19203: LD_INT 110
19205: PUSH
19206: LD_INT 111
19208: PUSH
19209: LD_INT 112
19211: PUSH
19212: LD_INT 113
19214: PUSH
19215: LD_INT 114
19217: PUSH
19218: LD_INT 116
19220: PUSH
19221: LD_INT 117
19223: PUSH
19224: LD_INT 118
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: ST_TO_ADDR
19250: GO 20025
19252: LD_INT 16
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19396
19260: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: LD_INT 4
19271: PUSH
19272: LD_INT 5
19274: PUSH
19275: LD_INT 7
19277: PUSH
19278: LD_INT 11
19280: PUSH
19281: LD_INT 12
19283: PUSH
19284: LD_INT 15
19286: PUSH
19287: LD_INT 16
19289: PUSH
19290: LD_INT 20
19292: PUSH
19293: LD_INT 21
19295: PUSH
19296: LD_INT 22
19298: PUSH
19299: LD_INT 23
19301: PUSH
19302: LD_INT 25
19304: PUSH
19305: LD_INT 26
19307: PUSH
19308: LD_INT 30
19310: PUSH
19311: LD_INT 31
19313: PUSH
19314: LD_INT 32
19316: PUSH
19317: LD_INT 33
19319: PUSH
19320: LD_INT 34
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 101
19346: PUSH
19347: LD_INT 102
19349: PUSH
19350: LD_INT 103
19352: PUSH
19353: LD_INT 106
19355: PUSH
19356: LD_INT 108
19358: PUSH
19359: LD_INT 112
19361: PUSH
19362: LD_INT 113
19364: PUSH
19365: LD_INT 114
19367: PUSH
19368: LD_INT 116
19370: PUSH
19371: LD_INT 117
19373: PUSH
19374: LD_INT 118
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: ST_TO_ADDR
19394: GO 20025
19396: LD_INT 17
19398: DOUBLE
19399: EQUAL
19400: IFTRUE 19404
19402: GO 19628
19404: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19405: LD_ADDR_VAR 0 2
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 3
19418: PUSH
19419: LD_INT 4
19421: PUSH
19422: LD_INT 5
19424: PUSH
19425: LD_INT 6
19427: PUSH
19428: LD_INT 7
19430: PUSH
19431: LD_INT 8
19433: PUSH
19434: LD_INT 9
19436: PUSH
19437: LD_INT 10
19439: PUSH
19440: LD_INT 11
19442: PUSH
19443: LD_INT 12
19445: PUSH
19446: LD_INT 13
19448: PUSH
19449: LD_INT 14
19451: PUSH
19452: LD_INT 15
19454: PUSH
19455: LD_INT 16
19457: PUSH
19458: LD_INT 17
19460: PUSH
19461: LD_INT 18
19463: PUSH
19464: LD_INT 19
19466: PUSH
19467: LD_INT 20
19469: PUSH
19470: LD_INT 21
19472: PUSH
19473: LD_INT 22
19475: PUSH
19476: LD_INT 23
19478: PUSH
19479: LD_INT 24
19481: PUSH
19482: LD_INT 25
19484: PUSH
19485: LD_INT 26
19487: PUSH
19488: LD_INT 27
19490: PUSH
19491: LD_INT 28
19493: PUSH
19494: LD_INT 29
19496: PUSH
19497: LD_INT 30
19499: PUSH
19500: LD_INT 31
19502: PUSH
19503: LD_INT 32
19505: PUSH
19506: LD_INT 33
19508: PUSH
19509: LD_INT 34
19511: PUSH
19512: LD_INT 36
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 101
19554: PUSH
19555: LD_INT 102
19557: PUSH
19558: LD_INT 103
19560: PUSH
19561: LD_INT 104
19563: PUSH
19564: LD_INT 105
19566: PUSH
19567: LD_INT 106
19569: PUSH
19570: LD_INT 107
19572: PUSH
19573: LD_INT 108
19575: PUSH
19576: LD_INT 109
19578: PUSH
19579: LD_INT 110
19581: PUSH
19582: LD_INT 111
19584: PUSH
19585: LD_INT 112
19587: PUSH
19588: LD_INT 113
19590: PUSH
19591: LD_INT 114
19593: PUSH
19594: LD_INT 116
19596: PUSH
19597: LD_INT 117
19599: PUSH
19600: LD_INT 118
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: ST_TO_ADDR
19626: GO 20025
19628: LD_INT 18
19630: DOUBLE
19631: EQUAL
19632: IFTRUE 19636
19634: GO 19784
19636: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_INT 2
19644: PUSH
19645: LD_INT 4
19647: PUSH
19648: LD_INT 5
19650: PUSH
19651: LD_INT 7
19653: PUSH
19654: LD_INT 11
19656: PUSH
19657: LD_INT 12
19659: PUSH
19660: LD_INT 15
19662: PUSH
19663: LD_INT 16
19665: PUSH
19666: LD_INT 20
19668: PUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 22
19674: PUSH
19675: LD_INT 23
19677: PUSH
19678: LD_INT 25
19680: PUSH
19681: LD_INT 26
19683: PUSH
19684: LD_INT 30
19686: PUSH
19687: LD_INT 31
19689: PUSH
19690: LD_INT 32
19692: PUSH
19693: LD_INT 33
19695: PUSH
19696: LD_INT 34
19698: PUSH
19699: LD_INT 35
19701: PUSH
19702: LD_INT 36
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 101
19730: PUSH
19731: LD_INT 102
19733: PUSH
19734: LD_INT 103
19736: PUSH
19737: LD_INT 106
19739: PUSH
19740: LD_INT 108
19742: PUSH
19743: LD_INT 112
19745: PUSH
19746: LD_INT 113
19748: PUSH
19749: LD_INT 114
19751: PUSH
19752: LD_INT 115
19754: PUSH
19755: LD_INT 116
19757: PUSH
19758: LD_INT 117
19760: PUSH
19761: LD_INT 118
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: ST_TO_ADDR
19782: GO 20025
19784: LD_INT 19
19786: DOUBLE
19787: EQUAL
19788: IFTRUE 19792
19790: GO 20024
19792: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19793: LD_ADDR_VAR 0 2
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 3
19806: PUSH
19807: LD_INT 4
19809: PUSH
19810: LD_INT 5
19812: PUSH
19813: LD_INT 6
19815: PUSH
19816: LD_INT 7
19818: PUSH
19819: LD_INT 8
19821: PUSH
19822: LD_INT 9
19824: PUSH
19825: LD_INT 10
19827: PUSH
19828: LD_INT 11
19830: PUSH
19831: LD_INT 12
19833: PUSH
19834: LD_INT 13
19836: PUSH
19837: LD_INT 14
19839: PUSH
19840: LD_INT 15
19842: PUSH
19843: LD_INT 16
19845: PUSH
19846: LD_INT 17
19848: PUSH
19849: LD_INT 18
19851: PUSH
19852: LD_INT 19
19854: PUSH
19855: LD_INT 20
19857: PUSH
19858: LD_INT 21
19860: PUSH
19861: LD_INT 22
19863: PUSH
19864: LD_INT 23
19866: PUSH
19867: LD_INT 24
19869: PUSH
19870: LD_INT 25
19872: PUSH
19873: LD_INT 26
19875: PUSH
19876: LD_INT 27
19878: PUSH
19879: LD_INT 28
19881: PUSH
19882: LD_INT 29
19884: PUSH
19885: LD_INT 30
19887: PUSH
19888: LD_INT 31
19890: PUSH
19891: LD_INT 32
19893: PUSH
19894: LD_INT 33
19896: PUSH
19897: LD_INT 34
19899: PUSH
19900: LD_INT 35
19902: PUSH
19903: LD_INT 36
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 101
19946: PUSH
19947: LD_INT 102
19949: PUSH
19950: LD_INT 103
19952: PUSH
19953: LD_INT 104
19955: PUSH
19956: LD_INT 105
19958: PUSH
19959: LD_INT 106
19961: PUSH
19962: LD_INT 107
19964: PUSH
19965: LD_INT 108
19967: PUSH
19968: LD_INT 109
19970: PUSH
19971: LD_INT 110
19973: PUSH
19974: LD_INT 111
19976: PUSH
19977: LD_INT 112
19979: PUSH
19980: LD_INT 113
19982: PUSH
19983: LD_INT 114
19985: PUSH
19986: LD_INT 115
19988: PUSH
19989: LD_INT 116
19991: PUSH
19992: LD_INT 117
19994: PUSH
19995: LD_INT 118
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: ST_TO_ADDR
20022: GO 20025
20024: POP
// end else
20025: GO 20256
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 3
20040: PUSH
20041: LD_INT 4
20043: PUSH
20044: LD_INT 5
20046: PUSH
20047: LD_INT 6
20049: PUSH
20050: LD_INT 7
20052: PUSH
20053: LD_INT 8
20055: PUSH
20056: LD_INT 9
20058: PUSH
20059: LD_INT 10
20061: PUSH
20062: LD_INT 11
20064: PUSH
20065: LD_INT 12
20067: PUSH
20068: LD_INT 13
20070: PUSH
20071: LD_INT 14
20073: PUSH
20074: LD_INT 15
20076: PUSH
20077: LD_INT 16
20079: PUSH
20080: LD_INT 17
20082: PUSH
20083: LD_INT 18
20085: PUSH
20086: LD_INT 19
20088: PUSH
20089: LD_INT 20
20091: PUSH
20092: LD_INT 21
20094: PUSH
20095: LD_INT 22
20097: PUSH
20098: LD_INT 23
20100: PUSH
20101: LD_INT 24
20103: PUSH
20104: LD_INT 25
20106: PUSH
20107: LD_INT 26
20109: PUSH
20110: LD_INT 27
20112: PUSH
20113: LD_INT 28
20115: PUSH
20116: LD_INT 29
20118: PUSH
20119: LD_INT 30
20121: PUSH
20122: LD_INT 31
20124: PUSH
20125: LD_INT 32
20127: PUSH
20128: LD_INT 33
20130: PUSH
20131: LD_INT 34
20133: PUSH
20134: LD_INT 35
20136: PUSH
20137: LD_INT 36
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 101
20180: PUSH
20181: LD_INT 102
20183: PUSH
20184: LD_INT 103
20186: PUSH
20187: LD_INT 104
20189: PUSH
20190: LD_INT 105
20192: PUSH
20193: LD_INT 106
20195: PUSH
20196: LD_INT 107
20198: PUSH
20199: LD_INT 108
20201: PUSH
20202: LD_INT 109
20204: PUSH
20205: LD_INT 110
20207: PUSH
20208: LD_INT 111
20210: PUSH
20211: LD_INT 112
20213: PUSH
20214: LD_INT 113
20216: PUSH
20217: LD_INT 114
20219: PUSH
20220: LD_INT 115
20222: PUSH
20223: LD_INT 116
20225: PUSH
20226: LD_INT 117
20228: PUSH
20229: LD_INT 118
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: ST_TO_ADDR
// if result then
20256: LD_VAR 0 2
20260: IFFALSE 21046
// begin normal :=  ;
20262: LD_ADDR_VAR 0 5
20266: PUSH
20267: LD_STRING 
20269: ST_TO_ADDR
// hardcore :=  ;
20270: LD_ADDR_VAR 0 6
20274: PUSH
20275: LD_STRING 
20277: ST_TO_ADDR
// active :=  ;
20278: LD_ADDR_VAR 0 7
20282: PUSH
20283: LD_STRING 
20285: ST_TO_ADDR
// for i = 1 to normalCounter do
20286: LD_ADDR_VAR 0 8
20290: PUSH
20291: DOUBLE
20292: LD_INT 1
20294: DEC
20295: ST_TO_ADDR
20296: LD_EXP 38
20300: PUSH
20301: FOR_TO
20302: IFFALSE 20403
// begin tmp := 0 ;
20304: LD_ADDR_VAR 0 3
20308: PUSH
20309: LD_STRING 0
20311: ST_TO_ADDR
// if result [ 1 ] then
20312: LD_VAR 0 2
20316: PUSH
20317: LD_INT 1
20319: ARRAY
20320: IFFALSE 20385
// if result [ 1 ] [ 1 ] = i then
20322: LD_VAR 0 2
20326: PUSH
20327: LD_INT 1
20329: ARRAY
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: PUSH
20335: LD_VAR 0 8
20339: EQUAL
20340: IFFALSE 20385
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20342: LD_ADDR_VAR 0 2
20346: PUSH
20347: LD_VAR 0 2
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: LD_VAR 0 2
20359: PUSH
20360: LD_INT 1
20362: ARRAY
20363: PPUSH
20364: LD_INT 1
20366: PPUSH
20367: CALL_OW 3
20371: PPUSH
20372: CALL_OW 1
20376: ST_TO_ADDR
// tmp := 1 ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_STRING 1
20384: ST_TO_ADDR
// end ; normal := normal & tmp ;
20385: LD_ADDR_VAR 0 5
20389: PUSH
20390: LD_VAR 0 5
20394: PUSH
20395: LD_VAR 0 3
20399: STR
20400: ST_TO_ADDR
// end ;
20401: GO 20301
20403: POP
20404: POP
// for i = 1 to hardcoreCounter do
20405: LD_ADDR_VAR 0 8
20409: PUSH
20410: DOUBLE
20411: LD_INT 1
20413: DEC
20414: ST_TO_ADDR
20415: LD_EXP 39
20419: PUSH
20420: FOR_TO
20421: IFFALSE 20526
// begin tmp := 0 ;
20423: LD_ADDR_VAR 0 3
20427: PUSH
20428: LD_STRING 0
20430: ST_TO_ADDR
// if result [ 2 ] then
20431: LD_VAR 0 2
20435: PUSH
20436: LD_INT 2
20438: ARRAY
20439: IFFALSE 20508
// if result [ 2 ] [ 1 ] = 100 + i then
20441: LD_VAR 0 2
20445: PUSH
20446: LD_INT 2
20448: ARRAY
20449: PUSH
20450: LD_INT 1
20452: ARRAY
20453: PUSH
20454: LD_INT 100
20456: PUSH
20457: LD_VAR 0 8
20461: PLUS
20462: EQUAL
20463: IFFALSE 20508
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20465: LD_ADDR_VAR 0 2
20469: PUSH
20470: LD_VAR 0 2
20474: PPUSH
20475: LD_INT 2
20477: PPUSH
20478: LD_VAR 0 2
20482: PUSH
20483: LD_INT 2
20485: ARRAY
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: CALL_OW 3
20494: PPUSH
20495: CALL_OW 1
20499: ST_TO_ADDR
// tmp := 1 ;
20500: LD_ADDR_VAR 0 3
20504: PUSH
20505: LD_STRING 1
20507: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20508: LD_ADDR_VAR 0 6
20512: PUSH
20513: LD_VAR 0 6
20517: PUSH
20518: LD_VAR 0 3
20522: STR
20523: ST_TO_ADDR
// end ;
20524: GO 20420
20526: POP
20527: POP
// if isGameLoad then
20528: LD_VAR 0 1
20532: IFFALSE 21007
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20534: LD_ADDR_VAR 0 4
20538: PUSH
20539: LD_EXP 42
20543: PUSH
20544: LD_EXP 41
20548: PUSH
20549: LD_EXP 43
20553: PUSH
20554: LD_EXP 40
20558: PUSH
20559: LD_EXP 44
20563: PUSH
20564: LD_EXP 45
20568: PUSH
20569: LD_EXP 46
20573: PUSH
20574: LD_EXP 47
20578: PUSH
20579: LD_EXP 48
20583: PUSH
20584: LD_EXP 49
20588: PUSH
20589: LD_EXP 50
20593: PUSH
20594: LD_EXP 51
20598: PUSH
20599: LD_EXP 52
20603: PUSH
20604: LD_EXP 53
20608: PUSH
20609: LD_EXP 61
20613: PUSH
20614: LD_EXP 62
20618: PUSH
20619: LD_EXP 63
20623: PUSH
20624: LD_EXP 64
20628: PUSH
20629: LD_EXP 66
20633: PUSH
20634: LD_EXP 67
20638: PUSH
20639: LD_EXP 68
20643: PUSH
20644: LD_EXP 71
20648: PUSH
20649: LD_EXP 73
20653: PUSH
20654: LD_EXP 74
20658: PUSH
20659: LD_EXP 75
20663: PUSH
20664: LD_EXP 77
20668: PUSH
20669: LD_EXP 78
20673: PUSH
20674: LD_EXP 81
20678: PUSH
20679: LD_EXP 82
20683: PUSH
20684: LD_EXP 83
20688: PUSH
20689: LD_EXP 84
20693: PUSH
20694: LD_EXP 85
20698: PUSH
20699: LD_EXP 86
20703: PUSH
20704: LD_EXP 87
20708: PUSH
20709: LD_EXP 88
20713: PUSH
20714: LD_EXP 89
20718: PUSH
20719: LD_EXP 54
20723: PUSH
20724: LD_EXP 55
20728: PUSH
20729: LD_EXP 58
20733: PUSH
20734: LD_EXP 59
20738: PUSH
20739: LD_EXP 60
20743: PUSH
20744: LD_EXP 56
20748: PUSH
20749: LD_EXP 57
20753: PUSH
20754: LD_EXP 65
20758: PUSH
20759: LD_EXP 69
20763: PUSH
20764: LD_EXP 70
20768: PUSH
20769: LD_EXP 72
20773: PUSH
20774: LD_EXP 76
20778: PUSH
20779: LD_EXP 79
20783: PUSH
20784: LD_EXP 80
20788: PUSH
20789: LD_EXP 90
20793: PUSH
20794: LD_EXP 91
20798: PUSH
20799: LD_EXP 92
20803: PUSH
20804: LD_EXP 93
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: ST_TO_ADDR
// tmp :=  ;
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: LD_STRING 
20872: ST_TO_ADDR
// for i = 1 to normalCounter do
20873: LD_ADDR_VAR 0 8
20877: PUSH
20878: DOUBLE
20879: LD_INT 1
20881: DEC
20882: ST_TO_ADDR
20883: LD_EXP 38
20887: PUSH
20888: FOR_TO
20889: IFFALSE 20925
// begin if flags [ i ] then
20891: LD_VAR 0 4
20895: PUSH
20896: LD_VAR 0 8
20900: ARRAY
20901: IFFALSE 20923
// tmp := tmp & i & ; ;
20903: LD_ADDR_VAR 0 3
20907: PUSH
20908: LD_VAR 0 3
20912: PUSH
20913: LD_VAR 0 8
20917: STR
20918: PUSH
20919: LD_STRING ;
20921: STR
20922: ST_TO_ADDR
// end ;
20923: GO 20888
20925: POP
20926: POP
// for i = 1 to hardcoreCounter do
20927: LD_ADDR_VAR 0 8
20931: PUSH
20932: DOUBLE
20933: LD_INT 1
20935: DEC
20936: ST_TO_ADDR
20937: LD_EXP 39
20941: PUSH
20942: FOR_TO
20943: IFFALSE 20989
// begin if flags [ normalCounter + i ] then
20945: LD_VAR 0 4
20949: PUSH
20950: LD_EXP 38
20954: PUSH
20955: LD_VAR 0 8
20959: PLUS
20960: ARRAY
20961: IFFALSE 20987
// tmp := tmp & ( 100 + i ) & ; ;
20963: LD_ADDR_VAR 0 3
20967: PUSH
20968: LD_VAR 0 3
20972: PUSH
20973: LD_INT 100
20975: PUSH
20976: LD_VAR 0 8
20980: PLUS
20981: STR
20982: PUSH
20983: LD_STRING ;
20985: STR
20986: ST_TO_ADDR
// end ;
20987: GO 20942
20989: POP
20990: POP
// if tmp then
20991: LD_VAR 0 3
20995: IFFALSE 21007
// active := tmp ;
20997: LD_ADDR_VAR 0 7
21001: PUSH
21002: LD_VAR 0 3
21006: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21007: LD_STRING getStreamItemsFromMission("
21009: PUSH
21010: LD_VAR 0 5
21014: STR
21015: PUSH
21016: LD_STRING ","
21018: STR
21019: PUSH
21020: LD_VAR 0 6
21024: STR
21025: PUSH
21026: LD_STRING ","
21028: STR
21029: PUSH
21030: LD_VAR 0 7
21034: STR
21035: PUSH
21036: LD_STRING ")
21038: STR
21039: PPUSH
21040: CALL_OW 559
// end else
21044: GO 21053
// ToLua ( getStreamItemsFromMission("","","") ) ;
21046: LD_STRING getStreamItemsFromMission("","","")
21048: PPUSH
21049: CALL_OW 559
// end ;
21053: LD_VAR 0 2
21057: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21058: LD_EXP 37
21062: PUSH
21063: LD_EXP 42
21067: AND
21068: IFFALSE 21192
21070: GO 21072
21072: DISABLE
21073: LD_INT 0
21075: PPUSH
21076: PPUSH
// begin enable ;
21077: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21078: LD_ADDR_VAR 0 2
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_OWVAR 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 34
21100: PUSH
21101: LD_INT 7
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 34
21110: PUSH
21111: LD_INT 45
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 34
21120: PUSH
21121: LD_INT 28
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 34
21130: PUSH
21131: LD_INT 47
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 69
21153: ST_TO_ADDR
// if not tmp then
21154: LD_VAR 0 2
21158: NOT
21159: IFFALSE 21163
// exit ;
21161: GO 21192
// for i in tmp do
21163: LD_ADDR_VAR 0 1
21167: PUSH
21168: LD_VAR 0 2
21172: PUSH
21173: FOR_IN
21174: IFFALSE 21190
// begin SetLives ( i , 0 ) ;
21176: LD_VAR 0 1
21180: PPUSH
21181: LD_INT 0
21183: PPUSH
21184: CALL_OW 234
// end ;
21188: GO 21173
21190: POP
21191: POP
// end ;
21192: PPOPN 2
21194: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21195: LD_EXP 37
21199: PUSH
21200: LD_EXP 43
21204: AND
21205: IFFALSE 21289
21207: GO 21209
21209: DISABLE
21210: LD_INT 0
21212: PPUSH
21213: PPUSH
// begin enable ;
21214: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21215: LD_ADDR_VAR 0 2
21219: PUSH
21220: LD_INT 22
21222: PUSH
21223: LD_OWVAR 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 32
21234: PUSH
21235: LD_INT 3
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PPUSH
21246: CALL_OW 69
21250: ST_TO_ADDR
// if not tmp then
21251: LD_VAR 0 2
21255: NOT
21256: IFFALSE 21260
// exit ;
21258: GO 21289
// for i in tmp do
21260: LD_ADDR_VAR 0 1
21264: PUSH
21265: LD_VAR 0 2
21269: PUSH
21270: FOR_IN
21271: IFFALSE 21287
// begin SetLives ( i , 0 ) ;
21273: LD_VAR 0 1
21277: PPUSH
21278: LD_INT 0
21280: PPUSH
21281: CALL_OW 234
// end ;
21285: GO 21270
21287: POP
21288: POP
// end ;
21289: PPOPN 2
21291: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21292: LD_EXP 37
21296: PUSH
21297: LD_EXP 40
21301: AND
21302: IFFALSE 21395
21304: GO 21306
21306: DISABLE
21307: LD_INT 0
21309: PPUSH
// begin enable ;
21310: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21311: LD_ADDR_VAR 0 1
21315: PUSH
21316: LD_INT 22
21318: PUSH
21319: LD_OWVAR 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 25
21333: PUSH
21334: LD_INT 5
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 25
21343: PUSH
21344: LD_INT 9
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 25
21353: PUSH
21354: LD_INT 8
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PPUSH
21371: CALL_OW 69
21375: PUSH
21376: FOR_IN
21377: IFFALSE 21393
// begin SetClass ( i , 1 ) ;
21379: LD_VAR 0 1
21383: PPUSH
21384: LD_INT 1
21386: PPUSH
21387: CALL_OW 336
// end ;
21391: GO 21376
21393: POP
21394: POP
// end ;
21395: PPOPN 1
21397: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21398: LD_EXP 37
21402: PUSH
21403: LD_EXP 41
21407: AND
21408: PUSH
21409: LD_OWVAR 65
21413: PUSH
21414: LD_INT 7
21416: LESS
21417: AND
21418: IFFALSE 21432
21420: GO 21422
21422: DISABLE
// begin enable ;
21423: ENABLE
// game_speed := 7 ;
21424: LD_ADDR_OWVAR 65
21428: PUSH
21429: LD_INT 7
21431: ST_TO_ADDR
// end ;
21432: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21433: LD_EXP 37
21437: PUSH
21438: LD_EXP 44
21442: AND
21443: IFFALSE 21645
21445: GO 21447
21447: DISABLE
21448: LD_INT 0
21450: PPUSH
21451: PPUSH
21452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21453: LD_ADDR_VAR 0 3
21457: PUSH
21458: LD_INT 81
21460: PUSH
21461: LD_OWVAR 2
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 21
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PPUSH
21484: CALL_OW 69
21488: ST_TO_ADDR
// if not tmp then
21489: LD_VAR 0 3
21493: NOT
21494: IFFALSE 21498
// exit ;
21496: GO 21645
// if tmp > 5 then
21498: LD_VAR 0 3
21502: PUSH
21503: LD_INT 5
21505: GREATER
21506: IFFALSE 21518
// k := 5 else
21508: LD_ADDR_VAR 0 2
21512: PUSH
21513: LD_INT 5
21515: ST_TO_ADDR
21516: GO 21528
// k := tmp ;
21518: LD_ADDR_VAR 0 2
21522: PUSH
21523: LD_VAR 0 3
21527: ST_TO_ADDR
// for i := 1 to k do
21528: LD_ADDR_VAR 0 1
21532: PUSH
21533: DOUBLE
21534: LD_INT 1
21536: DEC
21537: ST_TO_ADDR
21538: LD_VAR 0 2
21542: PUSH
21543: FOR_TO
21544: IFFALSE 21643
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21546: LD_VAR 0 3
21550: PUSH
21551: LD_VAR 0 1
21555: ARRAY
21556: PPUSH
21557: LD_VAR 0 1
21561: PUSH
21562: LD_INT 4
21564: MOD
21565: PUSH
21566: LD_INT 1
21568: PLUS
21569: PPUSH
21570: CALL_OW 259
21574: PUSH
21575: LD_INT 10
21577: LESS
21578: IFFALSE 21641
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21580: LD_VAR 0 3
21584: PUSH
21585: LD_VAR 0 1
21589: ARRAY
21590: PPUSH
21591: LD_VAR 0 1
21595: PUSH
21596: LD_INT 4
21598: MOD
21599: PUSH
21600: LD_INT 1
21602: PLUS
21603: PPUSH
21604: LD_VAR 0 3
21608: PUSH
21609: LD_VAR 0 1
21613: ARRAY
21614: PPUSH
21615: LD_VAR 0 1
21619: PUSH
21620: LD_INT 4
21622: MOD
21623: PUSH
21624: LD_INT 1
21626: PLUS
21627: PPUSH
21628: CALL_OW 259
21632: PUSH
21633: LD_INT 1
21635: PLUS
21636: PPUSH
21637: CALL_OW 237
21641: GO 21543
21643: POP
21644: POP
// end ;
21645: PPOPN 3
21647: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21648: LD_EXP 37
21652: PUSH
21653: LD_EXP 45
21657: AND
21658: IFFALSE 21678
21660: GO 21662
21662: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21663: LD_INT 4
21665: PPUSH
21666: LD_OWVAR 2
21670: PPUSH
21671: LD_INT 0
21673: PPUSH
21674: CALL_OW 324
21678: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21679: LD_EXP 37
21683: PUSH
21684: LD_EXP 74
21688: AND
21689: IFFALSE 21709
21691: GO 21693
21693: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21694: LD_INT 19
21696: PPUSH
21697: LD_OWVAR 2
21701: PPUSH
21702: LD_INT 0
21704: PPUSH
21705: CALL_OW 324
21709: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21710: LD_EXP 37
21714: PUSH
21715: LD_EXP 46
21719: AND
21720: IFFALSE 21822
21722: GO 21724
21724: DISABLE
21725: LD_INT 0
21727: PPUSH
21728: PPUSH
// begin enable ;
21729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_INT 22
21737: PUSH
21738: LD_OWVAR 2
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 34
21752: PUSH
21753: LD_INT 11
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 34
21762: PUSH
21763: LD_INT 30
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PPUSH
21779: CALL_OW 69
21783: ST_TO_ADDR
// if not tmp then
21784: LD_VAR 0 2
21788: NOT
21789: IFFALSE 21793
// exit ;
21791: GO 21822
// for i in tmp do
21793: LD_ADDR_VAR 0 1
21797: PUSH
21798: LD_VAR 0 2
21802: PUSH
21803: FOR_IN
21804: IFFALSE 21820
// begin SetLives ( i , 0 ) ;
21806: LD_VAR 0 1
21810: PPUSH
21811: LD_INT 0
21813: PPUSH
21814: CALL_OW 234
// end ;
21818: GO 21803
21820: POP
21821: POP
// end ;
21822: PPOPN 2
21824: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21825: LD_EXP 37
21829: PUSH
21830: LD_EXP 47
21834: AND
21835: IFFALSE 21855
21837: GO 21839
21839: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21840: LD_INT 32
21842: PPUSH
21843: LD_OWVAR 2
21847: PPUSH
21848: LD_INT 0
21850: PPUSH
21851: CALL_OW 324
21855: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21856: LD_EXP 37
21860: PUSH
21861: LD_EXP 48
21865: AND
21866: IFFALSE 22047
21868: GO 21870
21870: DISABLE
21871: LD_INT 0
21873: PPUSH
21874: PPUSH
21875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21876: LD_ADDR_VAR 0 2
21880: PUSH
21881: LD_INT 22
21883: PUSH
21884: LD_OWVAR 2
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 33
21895: PUSH
21896: LD_INT 3
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PPUSH
21907: CALL_OW 69
21911: ST_TO_ADDR
// if not tmp then
21912: LD_VAR 0 2
21916: NOT
21917: IFFALSE 21921
// exit ;
21919: GO 22047
// side := 0 ;
21921: LD_ADDR_VAR 0 3
21925: PUSH
21926: LD_INT 0
21928: ST_TO_ADDR
// for i := 1 to 8 do
21929: LD_ADDR_VAR 0 1
21933: PUSH
21934: DOUBLE
21935: LD_INT 1
21937: DEC
21938: ST_TO_ADDR
21939: LD_INT 8
21941: PUSH
21942: FOR_TO
21943: IFFALSE 21991
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21945: LD_OWVAR 2
21949: PUSH
21950: LD_VAR 0 1
21954: NONEQUAL
21955: PUSH
21956: LD_OWVAR 2
21960: PPUSH
21961: LD_VAR 0 1
21965: PPUSH
21966: CALL_OW 81
21970: PUSH
21971: LD_INT 2
21973: EQUAL
21974: AND
21975: IFFALSE 21989
// begin side := i ;
21977: LD_ADDR_VAR 0 3
21981: PUSH
21982: LD_VAR 0 1
21986: ST_TO_ADDR
// break ;
21987: GO 21991
// end ;
21989: GO 21942
21991: POP
21992: POP
// if not side then
21993: LD_VAR 0 3
21997: NOT
21998: IFFALSE 22002
// exit ;
22000: GO 22047
// for i := 1 to tmp do
22002: LD_ADDR_VAR 0 1
22006: PUSH
22007: DOUBLE
22008: LD_INT 1
22010: DEC
22011: ST_TO_ADDR
22012: LD_VAR 0 2
22016: PUSH
22017: FOR_TO
22018: IFFALSE 22045
// if Prob ( 60 ) then
22020: LD_INT 60
22022: PPUSH
22023: CALL_OW 13
22027: IFFALSE 22043
// SetSide ( i , side ) ;
22029: LD_VAR 0 1
22033: PPUSH
22034: LD_VAR 0 3
22038: PPUSH
22039: CALL_OW 235
22043: GO 22017
22045: POP
22046: POP
// end ;
22047: PPOPN 3
22049: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22050: LD_EXP 37
22054: PUSH
22055: LD_EXP 50
22059: AND
22060: IFFALSE 22179
22062: GO 22064
22064: DISABLE
22065: LD_INT 0
22067: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_OWVAR 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 21
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 3
22097: PUSH
22098: LD_INT 23
22100: PUSH
22101: LD_INT 0
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL_OW 69
22121: PUSH
22122: FOR_IN
22123: IFFALSE 22177
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22125: LD_VAR 0 1
22129: PPUSH
22130: CALL_OW 257
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: LD_INT 3
22143: PUSH
22144: LD_INT 4
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: IN
22153: IFFALSE 22175
// SetClass ( un , rand ( 1 , 4 ) ) ;
22155: LD_VAR 0 1
22159: PPUSH
22160: LD_INT 1
22162: PPUSH
22163: LD_INT 4
22165: PPUSH
22166: CALL_OW 12
22170: PPUSH
22171: CALL_OW 336
22175: GO 22122
22177: POP
22178: POP
// end ;
22179: PPOPN 1
22181: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22182: LD_EXP 37
22186: PUSH
22187: LD_EXP 49
22191: AND
22192: IFFALSE 22271
22194: GO 22196
22196: DISABLE
22197: LD_INT 0
22199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22200: LD_ADDR_VAR 0 1
22204: PUSH
22205: LD_INT 22
22207: PUSH
22208: LD_OWVAR 2
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 21
22219: PUSH
22220: LD_INT 3
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PPUSH
22231: CALL_OW 69
22235: ST_TO_ADDR
// if not tmp then
22236: LD_VAR 0 1
22240: NOT
22241: IFFALSE 22245
// exit ;
22243: GO 22271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22245: LD_VAR 0 1
22249: PUSH
22250: LD_INT 1
22252: PPUSH
22253: LD_VAR 0 1
22257: PPUSH
22258: CALL_OW 12
22262: ARRAY
22263: PPUSH
22264: LD_INT 100
22266: PPUSH
22267: CALL_OW 234
// end ;
22271: PPOPN 1
22273: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22274: LD_EXP 37
22278: PUSH
22279: LD_EXP 51
22283: AND
22284: IFFALSE 22382
22286: GO 22288
22288: DISABLE
22289: LD_INT 0
22291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22292: LD_ADDR_VAR 0 1
22296: PUSH
22297: LD_INT 22
22299: PUSH
22300: LD_OWVAR 2
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 21
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PPUSH
22323: CALL_OW 69
22327: ST_TO_ADDR
// if not tmp then
22328: LD_VAR 0 1
22332: NOT
22333: IFFALSE 22337
// exit ;
22335: GO 22382
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22337: LD_VAR 0 1
22341: PUSH
22342: LD_INT 1
22344: PPUSH
22345: LD_VAR 0 1
22349: PPUSH
22350: CALL_OW 12
22354: ARRAY
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: LD_INT 4
22361: PPUSH
22362: CALL_OW 12
22366: PPUSH
22367: LD_INT 3000
22369: PPUSH
22370: LD_INT 9000
22372: PPUSH
22373: CALL_OW 12
22377: PPUSH
22378: CALL_OW 492
// end ;
22382: PPOPN 1
22384: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22385: LD_EXP 37
22389: PUSH
22390: LD_EXP 52
22394: AND
22395: IFFALSE 22415
22397: GO 22399
22399: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22400: LD_INT 1
22402: PPUSH
22403: LD_OWVAR 2
22407: PPUSH
22408: LD_INT 0
22410: PPUSH
22411: CALL_OW 324
22415: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22416: LD_EXP 37
22420: PUSH
22421: LD_EXP 53
22425: AND
22426: IFFALSE 22509
22428: GO 22430
22430: DISABLE
22431: LD_INT 0
22433: PPUSH
22434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22435: LD_ADDR_VAR 0 2
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 21
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PPUSH
22466: CALL_OW 69
22470: ST_TO_ADDR
// if not tmp then
22471: LD_VAR 0 2
22475: NOT
22476: IFFALSE 22480
// exit ;
22478: GO 22509
// for i in tmp do
22480: LD_ADDR_VAR 0 1
22484: PUSH
22485: LD_VAR 0 2
22489: PUSH
22490: FOR_IN
22491: IFFALSE 22507
// SetBLevel ( i , 10 ) ;
22493: LD_VAR 0 1
22497: PPUSH
22498: LD_INT 10
22500: PPUSH
22501: CALL_OW 241
22505: GO 22490
22507: POP
22508: POP
// end ;
22509: PPOPN 2
22511: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22512: LD_EXP 37
22516: PUSH
22517: LD_EXP 54
22521: AND
22522: IFFALSE 22633
22524: GO 22526
22526: DISABLE
22527: LD_INT 0
22529: PPUSH
22530: PPUSH
22531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22532: LD_ADDR_VAR 0 3
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_OWVAR 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 25
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PPUSH
22563: CALL_OW 69
22567: ST_TO_ADDR
// if not tmp then
22568: LD_VAR 0 3
22572: NOT
22573: IFFALSE 22577
// exit ;
22575: GO 22633
// un := tmp [ rand ( 1 , tmp ) ] ;
22577: LD_ADDR_VAR 0 2
22581: PUSH
22582: LD_VAR 0 3
22586: PUSH
22587: LD_INT 1
22589: PPUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: CALL_OW 12
22599: ARRAY
22600: ST_TO_ADDR
// if Crawls ( un ) then
22601: LD_VAR 0 2
22605: PPUSH
22606: CALL_OW 318
22610: IFFALSE 22621
// ComWalk ( un ) ;
22612: LD_VAR 0 2
22616: PPUSH
22617: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22621: LD_VAR 0 2
22625: PPUSH
22626: LD_INT 5
22628: PPUSH
22629: CALL_OW 336
// end ;
22633: PPOPN 3
22635: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22636: LD_EXP 37
22640: PUSH
22641: LD_EXP 55
22645: AND
22646: PUSH
22647: LD_OWVAR 67
22651: PUSH
22652: LD_INT 4
22654: LESS
22655: AND
22656: IFFALSE 22675
22658: GO 22660
22660: DISABLE
// begin Difficulty := Difficulty + 1 ;
22661: LD_ADDR_OWVAR 67
22665: PUSH
22666: LD_OWVAR 67
22670: PUSH
22671: LD_INT 1
22673: PLUS
22674: ST_TO_ADDR
// end ;
22675: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22676: LD_EXP 37
22680: PUSH
22681: LD_EXP 56
22685: AND
22686: IFFALSE 22789
22688: GO 22690
22690: DISABLE
22691: LD_INT 0
22693: PPUSH
// begin for i := 1 to 5 do
22694: LD_ADDR_VAR 0 1
22698: PUSH
22699: DOUBLE
22700: LD_INT 1
22702: DEC
22703: ST_TO_ADDR
22704: LD_INT 5
22706: PUSH
22707: FOR_TO
22708: IFFALSE 22787
// begin uc_nation := nation_nature ;
22710: LD_ADDR_OWVAR 21
22714: PUSH
22715: LD_INT 0
22717: ST_TO_ADDR
// uc_side := 0 ;
22718: LD_ADDR_OWVAR 20
22722: PUSH
22723: LD_INT 0
22725: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22726: LD_ADDR_OWVAR 29
22730: PUSH
22731: LD_INT 12
22733: PUSH
22734: LD_INT 12
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: ST_TO_ADDR
// hc_agressivity := 20 ;
22741: LD_ADDR_OWVAR 35
22745: PUSH
22746: LD_INT 20
22748: ST_TO_ADDR
// hc_class := class_tiger ;
22749: LD_ADDR_OWVAR 28
22753: PUSH
22754: LD_INT 14
22756: ST_TO_ADDR
// hc_gallery :=  ;
22757: LD_ADDR_OWVAR 33
22761: PUSH
22762: LD_STRING 
22764: ST_TO_ADDR
// hc_name :=  ;
22765: LD_ADDR_OWVAR 26
22769: PUSH
22770: LD_STRING 
22772: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22773: CALL_OW 44
22777: PPUSH
22778: LD_INT 0
22780: PPUSH
22781: CALL_OW 51
// end ;
22785: GO 22707
22787: POP
22788: POP
// end ;
22789: PPOPN 1
22791: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22792: LD_EXP 37
22796: PUSH
22797: LD_EXP 57
22801: AND
22802: IFFALSE 22811
22804: GO 22806
22806: DISABLE
// StreamSibBomb ;
22807: CALL 22812 0 0
22811: END
// export function StreamSibBomb ; var i , x , y ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
22817: PPUSH
// result := false ;
22818: LD_ADDR_VAR 0 1
22822: PUSH
22823: LD_INT 0
22825: ST_TO_ADDR
// for i := 1 to 16 do
22826: LD_ADDR_VAR 0 2
22830: PUSH
22831: DOUBLE
22832: LD_INT 1
22834: DEC
22835: ST_TO_ADDR
22836: LD_INT 16
22838: PUSH
22839: FOR_TO
22840: IFFALSE 23039
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22842: LD_ADDR_VAR 0 3
22846: PUSH
22847: LD_INT 10
22849: PUSH
22850: LD_INT 20
22852: PUSH
22853: LD_INT 30
22855: PUSH
22856: LD_INT 40
22858: PUSH
22859: LD_INT 50
22861: PUSH
22862: LD_INT 60
22864: PUSH
22865: LD_INT 70
22867: PUSH
22868: LD_INT 80
22870: PUSH
22871: LD_INT 90
22873: PUSH
22874: LD_INT 100
22876: PUSH
22877: LD_INT 110
22879: PUSH
22880: LD_INT 120
22882: PUSH
22883: LD_INT 130
22885: PUSH
22886: LD_INT 140
22888: PUSH
22889: LD_INT 150
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 1
22911: PPUSH
22912: LD_INT 15
22914: PPUSH
22915: CALL_OW 12
22919: ARRAY
22920: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22921: LD_ADDR_VAR 0 4
22925: PUSH
22926: LD_INT 10
22928: PUSH
22929: LD_INT 20
22931: PUSH
22932: LD_INT 30
22934: PUSH
22935: LD_INT 40
22937: PUSH
22938: LD_INT 50
22940: PUSH
22941: LD_INT 60
22943: PUSH
22944: LD_INT 70
22946: PUSH
22947: LD_INT 80
22949: PUSH
22950: LD_INT 90
22952: PUSH
22953: LD_INT 100
22955: PUSH
22956: LD_INT 110
22958: PUSH
22959: LD_INT 120
22961: PUSH
22962: LD_INT 130
22964: PUSH
22965: LD_INT 140
22967: PUSH
22968: LD_INT 150
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 1
22990: PPUSH
22991: LD_INT 15
22993: PPUSH
22994: CALL_OW 12
22998: ARRAY
22999: ST_TO_ADDR
// if ValidHex ( x , y ) then
23000: LD_VAR 0 3
23004: PPUSH
23005: LD_VAR 0 4
23009: PPUSH
23010: CALL_OW 488
23014: IFFALSE 23037
// begin result := [ x , y ] ;
23016: LD_ADDR_VAR 0 1
23020: PUSH
23021: LD_VAR 0 3
23025: PUSH
23026: LD_VAR 0 4
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: ST_TO_ADDR
// break ;
23035: GO 23039
// end ; end ;
23037: GO 22839
23039: POP
23040: POP
// if result then
23041: LD_VAR 0 1
23045: IFFALSE 23105
// begin ToLua ( playSibBomb() ) ;
23047: LD_STRING playSibBomb()
23049: PPUSH
23050: CALL_OW 559
// wait ( 0 0$14 ) ;
23054: LD_INT 490
23056: PPUSH
23057: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23061: LD_VAR 0 1
23065: PUSH
23066: LD_INT 1
23068: ARRAY
23069: PPUSH
23070: LD_VAR 0 1
23074: PUSH
23075: LD_INT 2
23077: ARRAY
23078: PPUSH
23079: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23083: LD_VAR 0 1
23087: PUSH
23088: LD_INT 1
23090: ARRAY
23091: PPUSH
23092: LD_VAR 0 1
23096: PUSH
23097: LD_INT 2
23099: ARRAY
23100: PPUSH
23101: CALL_OW 429
// end ; end ;
23105: LD_VAR 0 1
23109: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23110: LD_EXP 37
23114: PUSH
23115: LD_EXP 59
23119: AND
23120: IFFALSE 23132
23122: GO 23124
23124: DISABLE
// YouLost (  ) ;
23125: LD_STRING 
23127: PPUSH
23128: CALL_OW 104
23132: END
// every 0 0$1 trigger StreamModeActive and sFog do
23133: LD_EXP 37
23137: PUSH
23138: LD_EXP 58
23142: AND
23143: IFFALSE 23157
23145: GO 23147
23147: DISABLE
// FogOff ( your_side ) ;
23148: LD_OWVAR 2
23152: PPUSH
23153: CALL_OW 344
23157: END
// every 0 0$1 trigger StreamModeActive and sSun do
23158: LD_EXP 37
23162: PUSH
23163: LD_EXP 60
23167: AND
23168: IFFALSE 23196
23170: GO 23172
23172: DISABLE
// begin solar_recharge_percent := 0 ;
23173: LD_ADDR_OWVAR 79
23177: PUSH
23178: LD_INT 0
23180: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23181: LD_INT 10500
23183: PPUSH
23184: CALL_OW 67
// solar_recharge_percent := 100 ;
23188: LD_ADDR_OWVAR 79
23192: PUSH
23193: LD_INT 100
23195: ST_TO_ADDR
// end ;
23196: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23197: LD_EXP 37
23201: PUSH
23202: LD_EXP 61
23206: AND
23207: IFFALSE 23446
23209: GO 23211
23211: DISABLE
23212: LD_INT 0
23214: PPUSH
23215: PPUSH
23216: PPUSH
// begin tmp := [ ] ;
23217: LD_ADDR_VAR 0 3
23221: PUSH
23222: EMPTY
23223: ST_TO_ADDR
// for i := 1 to 6 do
23224: LD_ADDR_VAR 0 1
23228: PUSH
23229: DOUBLE
23230: LD_INT 1
23232: DEC
23233: ST_TO_ADDR
23234: LD_INT 6
23236: PUSH
23237: FOR_TO
23238: IFFALSE 23343
// begin uc_nation := nation_nature ;
23240: LD_ADDR_OWVAR 21
23244: PUSH
23245: LD_INT 0
23247: ST_TO_ADDR
// uc_side := 0 ;
23248: LD_ADDR_OWVAR 20
23252: PUSH
23253: LD_INT 0
23255: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23256: LD_ADDR_OWVAR 29
23260: PUSH
23261: LD_INT 12
23263: PUSH
23264: LD_INT 12
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: ST_TO_ADDR
// hc_agressivity := 20 ;
23271: LD_ADDR_OWVAR 35
23275: PUSH
23276: LD_INT 20
23278: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23279: LD_ADDR_OWVAR 28
23283: PUSH
23284: LD_INT 17
23286: ST_TO_ADDR
// hc_gallery :=  ;
23287: LD_ADDR_OWVAR 33
23291: PUSH
23292: LD_STRING 
23294: ST_TO_ADDR
// hc_name :=  ;
23295: LD_ADDR_OWVAR 26
23299: PUSH
23300: LD_STRING 
23302: ST_TO_ADDR
// un := CreateHuman ;
23303: LD_ADDR_VAR 0 2
23307: PUSH
23308: CALL_OW 44
23312: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23313: LD_VAR 0 2
23317: PPUSH
23318: LD_INT 1
23320: PPUSH
23321: CALL_OW 51
// tmp := tmp ^ un ;
23325: LD_ADDR_VAR 0 3
23329: PUSH
23330: LD_VAR 0 3
23334: PUSH
23335: LD_VAR 0 2
23339: ADD
23340: ST_TO_ADDR
// end ;
23341: GO 23237
23343: POP
23344: POP
// repeat wait ( 0 0$1 ) ;
23345: LD_INT 35
23347: PPUSH
23348: CALL_OW 67
// for un in tmp do
23352: LD_ADDR_VAR 0 2
23356: PUSH
23357: LD_VAR 0 3
23361: PUSH
23362: FOR_IN
23363: IFFALSE 23437
// begin if IsDead ( un ) then
23365: LD_VAR 0 2
23369: PPUSH
23370: CALL_OW 301
23374: IFFALSE 23394
// begin tmp := tmp diff un ;
23376: LD_ADDR_VAR 0 3
23380: PUSH
23381: LD_VAR 0 3
23385: PUSH
23386: LD_VAR 0 2
23390: DIFF
23391: ST_TO_ADDR
// continue ;
23392: GO 23362
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_INT 3
23401: PUSH
23402: LD_INT 22
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PPUSH
23416: CALL_OW 69
23420: PPUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: CALL_OW 74
23430: PPUSH
23431: CALL_OW 115
// end ;
23435: GO 23362
23437: POP
23438: POP
// until not tmp ;
23439: LD_VAR 0 3
23443: NOT
23444: IFFALSE 23345
// end ;
23446: PPOPN 3
23448: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23449: LD_EXP 37
23453: PUSH
23454: LD_EXP 62
23458: AND
23459: IFFALSE 23513
23461: GO 23463
23463: DISABLE
// begin ToLua ( displayTroll(); ) ;
23464: LD_STRING displayTroll();
23466: PPUSH
23467: CALL_OW 559
// wait ( 3 3$00 ) ;
23471: LD_INT 6300
23473: PPUSH
23474: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23478: LD_STRING hideTroll();
23480: PPUSH
23481: CALL_OW 559
// wait ( 1 1$00 ) ;
23485: LD_INT 2100
23487: PPUSH
23488: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23492: LD_STRING displayTroll();
23494: PPUSH
23495: CALL_OW 559
// wait ( 1 1$00 ) ;
23499: LD_INT 2100
23501: PPUSH
23502: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23506: LD_STRING hideTroll();
23508: PPUSH
23509: CALL_OW 559
// end ;
23513: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23514: LD_EXP 37
23518: PUSH
23519: LD_EXP 63
23523: AND
23524: IFFALSE 23587
23526: GO 23528
23528: DISABLE
23529: LD_INT 0
23531: PPUSH
// begin p := 0 ;
23532: LD_ADDR_VAR 0 1
23536: PUSH
23537: LD_INT 0
23539: ST_TO_ADDR
// repeat game_speed := 1 ;
23540: LD_ADDR_OWVAR 65
23544: PUSH
23545: LD_INT 1
23547: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23548: LD_INT 35
23550: PPUSH
23551: CALL_OW 67
// p := p + 1 ;
23555: LD_ADDR_VAR 0 1
23559: PUSH
23560: LD_VAR 0 1
23564: PUSH
23565: LD_INT 1
23567: PLUS
23568: ST_TO_ADDR
// until p >= 60 ;
23569: LD_VAR 0 1
23573: PUSH
23574: LD_INT 60
23576: GREATEREQUAL
23577: IFFALSE 23540
// game_speed := 4 ;
23579: LD_ADDR_OWVAR 65
23583: PUSH
23584: LD_INT 4
23586: ST_TO_ADDR
// end ;
23587: PPOPN 1
23589: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23590: LD_EXP 37
23594: PUSH
23595: LD_EXP 64
23599: AND
23600: IFFALSE 23746
23602: GO 23604
23604: DISABLE
23605: LD_INT 0
23607: PPUSH
23608: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23609: LD_ADDR_VAR 0 1
23613: PUSH
23614: LD_INT 22
23616: PUSH
23617: LD_OWVAR 2
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: LD_INT 30
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 30
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PPUSH
23658: CALL_OW 69
23662: ST_TO_ADDR
// if not depot then
23663: LD_VAR 0 1
23667: NOT
23668: IFFALSE 23672
// exit ;
23670: GO 23746
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23672: LD_ADDR_VAR 0 2
23676: PUSH
23677: LD_VAR 0 1
23681: PUSH
23682: LD_INT 1
23684: PPUSH
23685: LD_VAR 0 1
23689: PPUSH
23690: CALL_OW 12
23694: ARRAY
23695: PPUSH
23696: CALL_OW 274
23700: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23701: LD_VAR 0 2
23705: PPUSH
23706: LD_INT 1
23708: PPUSH
23709: LD_INT 0
23711: PPUSH
23712: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23716: LD_VAR 0 2
23720: PPUSH
23721: LD_INT 2
23723: PPUSH
23724: LD_INT 0
23726: PPUSH
23727: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23731: LD_VAR 0 2
23735: PPUSH
23736: LD_INT 3
23738: PPUSH
23739: LD_INT 0
23741: PPUSH
23742: CALL_OW 277
// end ;
23746: PPOPN 2
23748: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23749: LD_EXP 37
23753: PUSH
23754: LD_EXP 65
23758: AND
23759: IFFALSE 23856
23761: GO 23763
23763: DISABLE
23764: LD_INT 0
23766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23767: LD_ADDR_VAR 0 1
23771: PUSH
23772: LD_INT 22
23774: PUSH
23775: LD_OWVAR 2
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 21
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: LD_INT 23
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: PPUSH
23816: CALL_OW 69
23820: ST_TO_ADDR
// if not tmp then
23821: LD_VAR 0 1
23825: NOT
23826: IFFALSE 23830
// exit ;
23828: GO 23856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23830: LD_VAR 0 1
23834: PUSH
23835: LD_INT 1
23837: PPUSH
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 12
23847: ARRAY
23848: PPUSH
23849: LD_INT 200
23851: PPUSH
23852: CALL_OW 234
// end ;
23856: PPOPN 1
23858: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23859: LD_EXP 37
23863: PUSH
23864: LD_EXP 66
23868: AND
23869: IFFALSE 23948
23871: GO 23873
23873: DISABLE
23874: LD_INT 0
23876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23877: LD_ADDR_VAR 0 1
23881: PUSH
23882: LD_INT 22
23884: PUSH
23885: LD_OWVAR 2
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 21
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PPUSH
23908: CALL_OW 69
23912: ST_TO_ADDR
// if not tmp then
23913: LD_VAR 0 1
23917: NOT
23918: IFFALSE 23922
// exit ;
23920: GO 23948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23922: LD_VAR 0 1
23926: PUSH
23927: LD_INT 1
23929: PPUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL_OW 12
23939: ARRAY
23940: PPUSH
23941: LD_INT 60
23943: PPUSH
23944: CALL_OW 234
// end ;
23948: PPOPN 1
23950: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23951: LD_EXP 37
23955: PUSH
23956: LD_EXP 67
23960: AND
23961: IFFALSE 24060
23963: GO 23965
23965: DISABLE
23966: LD_INT 0
23968: PPUSH
23969: PPUSH
// begin enable ;
23970: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23971: LD_ADDR_VAR 0 1
23975: PUSH
23976: LD_INT 22
23978: PUSH
23979: LD_OWVAR 2
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 61
23990: PUSH
23991: EMPTY
23992: LIST
23993: PUSH
23994: LD_INT 33
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 69
24013: ST_TO_ADDR
// if not tmp then
24014: LD_VAR 0 1
24018: NOT
24019: IFFALSE 24023
// exit ;
24021: GO 24060
// for i in tmp do
24023: LD_ADDR_VAR 0 2
24027: PUSH
24028: LD_VAR 0 1
24032: PUSH
24033: FOR_IN
24034: IFFALSE 24058
// if IsControledBy ( i ) then
24036: LD_VAR 0 2
24040: PPUSH
24041: CALL_OW 312
24045: IFFALSE 24056
// ComUnlink ( i ) ;
24047: LD_VAR 0 2
24051: PPUSH
24052: CALL_OW 136
24056: GO 24033
24058: POP
24059: POP
// end ;
24060: PPOPN 2
24062: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24063: LD_EXP 37
24067: PUSH
24068: LD_EXP 68
24072: AND
24073: IFFALSE 24213
24075: GO 24077
24077: DISABLE
24078: LD_INT 0
24080: PPUSH
24081: PPUSH
// begin ToLua ( displayPowell(); ) ;
24082: LD_STRING displayPowell();
24084: PPUSH
24085: CALL_OW 559
// uc_side := 0 ;
24089: LD_ADDR_OWVAR 20
24093: PUSH
24094: LD_INT 0
24096: ST_TO_ADDR
// uc_nation := 2 ;
24097: LD_ADDR_OWVAR 21
24101: PUSH
24102: LD_INT 2
24104: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24105: LD_ADDR_OWVAR 37
24109: PUSH
24110: LD_INT 14
24112: ST_TO_ADDR
// vc_engine := engine_siberite ;
24113: LD_ADDR_OWVAR 39
24117: PUSH
24118: LD_INT 3
24120: ST_TO_ADDR
// vc_control := control_apeman ;
24121: LD_ADDR_OWVAR 38
24125: PUSH
24126: LD_INT 5
24128: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24129: LD_ADDR_OWVAR 40
24133: PUSH
24134: LD_INT 29
24136: ST_TO_ADDR
// un := CreateVehicle ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: CALL_OW 45
24146: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24147: LD_VAR 0 2
24151: PPUSH
24152: LD_INT 1
24154: PPUSH
24155: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24159: LD_INT 35
24161: PPUSH
24162: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24166: LD_VAR 0 2
24170: PPUSH
24171: LD_INT 22
24173: PUSH
24174: LD_OWVAR 2
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 69
24187: PPUSH
24188: LD_VAR 0 2
24192: PPUSH
24193: CALL_OW 74
24197: PPUSH
24198: CALL_OW 115
// until IsDead ( un ) ;
24202: LD_VAR 0 2
24206: PPUSH
24207: CALL_OW 301
24211: IFFALSE 24159
// end ;
24213: PPOPN 2
24215: END
// every 0 0$1 trigger StreamModeActive and sStu do
24216: LD_EXP 37
24220: PUSH
24221: LD_EXP 76
24225: AND
24226: IFFALSE 24242
24228: GO 24230
24230: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24231: LD_STRING displayStucuk();
24233: PPUSH
24234: CALL_OW 559
// ResetFog ;
24238: CALL_OW 335
// end ;
24242: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24243: LD_EXP 37
24247: PUSH
24248: LD_EXP 69
24252: AND
24253: IFFALSE 24394
24255: GO 24257
24257: DISABLE
24258: LD_INT 0
24260: PPUSH
24261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24262: LD_ADDR_VAR 0 2
24266: PUSH
24267: LD_INT 22
24269: PUSH
24270: LD_OWVAR 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 21
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: ST_TO_ADDR
// if not tmp then
24298: LD_VAR 0 2
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24394
// un := tmp [ rand ( 1 , tmp ) ] ;
24307: LD_ADDR_VAR 0 1
24311: PUSH
24312: LD_VAR 0 2
24316: PUSH
24317: LD_INT 1
24319: PPUSH
24320: LD_VAR 0 2
24324: PPUSH
24325: CALL_OW 12
24329: ARRAY
24330: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24331: LD_VAR 0 1
24335: PPUSH
24336: LD_INT 0
24338: PPUSH
24339: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24343: LD_VAR 0 1
24347: PPUSH
24348: LD_OWVAR 3
24352: PUSH
24353: LD_VAR 0 1
24357: DIFF
24358: PPUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 74
24368: PPUSH
24369: CALL_OW 115
// wait ( 0 0$20 ) ;
24373: LD_INT 700
24375: PPUSH
24376: CALL_OW 67
// SetSide ( un , your_side ) ;
24380: LD_VAR 0 1
24384: PPUSH
24385: LD_OWVAR 2
24389: PPUSH
24390: CALL_OW 235
// end ;
24394: PPOPN 2
24396: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24397: LD_EXP 37
24401: PUSH
24402: LD_EXP 70
24406: AND
24407: IFFALSE 24513
24409: GO 24411
24411: DISABLE
24412: LD_INT 0
24414: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24415: LD_ADDR_VAR 0 1
24419: PUSH
24420: LD_INT 22
24422: PUSH
24423: LD_OWVAR 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 30
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PPUSH
24464: CALL_OW 69
24468: ST_TO_ADDR
// if not depot then
24469: LD_VAR 0 1
24473: NOT
24474: IFFALSE 24478
// exit ;
24476: GO 24513
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24478: LD_VAR 0 1
24482: PUSH
24483: LD_INT 1
24485: ARRAY
24486: PPUSH
24487: CALL_OW 250
24491: PPUSH
24492: LD_VAR 0 1
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: PPUSH
24501: CALL_OW 251
24505: PPUSH
24506: LD_INT 70
24508: PPUSH
24509: CALL_OW 495
// end ;
24513: PPOPN 1
24515: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24516: LD_EXP 37
24520: PUSH
24521: LD_EXP 71
24525: AND
24526: IFFALSE 24737
24528: GO 24530
24530: DISABLE
24531: LD_INT 0
24533: PPUSH
24534: PPUSH
24535: PPUSH
24536: PPUSH
24537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24538: LD_ADDR_VAR 0 5
24542: PUSH
24543: LD_INT 22
24545: PUSH
24546: LD_OWVAR 2
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 21
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PPUSH
24569: CALL_OW 69
24573: ST_TO_ADDR
// if not tmp then
24574: LD_VAR 0 5
24578: NOT
24579: IFFALSE 24583
// exit ;
24581: GO 24737
// for i in tmp do
24583: LD_ADDR_VAR 0 1
24587: PUSH
24588: LD_VAR 0 5
24592: PUSH
24593: FOR_IN
24594: IFFALSE 24735
// begin d := rand ( 0 , 5 ) ;
24596: LD_ADDR_VAR 0 4
24600: PUSH
24601: LD_INT 0
24603: PPUSH
24604: LD_INT 5
24606: PPUSH
24607: CALL_OW 12
24611: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24612: LD_ADDR_VAR 0 2
24616: PUSH
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL_OW 250
24626: PPUSH
24627: LD_VAR 0 4
24631: PPUSH
24632: LD_INT 3
24634: PPUSH
24635: LD_INT 12
24637: PPUSH
24638: CALL_OW 12
24642: PPUSH
24643: CALL_OW 272
24647: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_VAR 0 1
24657: PPUSH
24658: CALL_OW 251
24662: PPUSH
24663: LD_VAR 0 4
24667: PPUSH
24668: LD_INT 3
24670: PPUSH
24671: LD_INT 12
24673: PPUSH
24674: CALL_OW 12
24678: PPUSH
24679: CALL_OW 273
24683: ST_TO_ADDR
// if ValidHex ( x , y ) then
24684: LD_VAR 0 2
24688: PPUSH
24689: LD_VAR 0 3
24693: PPUSH
24694: CALL_OW 488
24698: IFFALSE 24733
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24700: LD_VAR 0 1
24704: PPUSH
24705: LD_VAR 0 2
24709: PPUSH
24710: LD_VAR 0 3
24714: PPUSH
24715: LD_INT 3
24717: PPUSH
24718: LD_INT 6
24720: PPUSH
24721: CALL_OW 12
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: CALL_OW 483
// end ;
24733: GO 24593
24735: POP
24736: POP
// end ;
24737: PPOPN 5
24739: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24740: LD_EXP 37
24744: PUSH
24745: LD_EXP 72
24749: AND
24750: IFFALSE 24844
24752: GO 24754
24754: DISABLE
24755: LD_INT 0
24757: PPUSH
24758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24759: LD_ADDR_VAR 0 2
24763: PUSH
24764: LD_INT 22
24766: PUSH
24767: LD_OWVAR 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 32
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 21
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: PPUSH
24801: CALL_OW 69
24805: ST_TO_ADDR
// if not tmp then
24806: LD_VAR 0 2
24810: NOT
24811: IFFALSE 24815
// exit ;
24813: GO 24844
// for i in tmp do
24815: LD_ADDR_VAR 0 1
24819: PUSH
24820: LD_VAR 0 2
24824: PUSH
24825: FOR_IN
24826: IFFALSE 24842
// SetFuel ( i , 0 ) ;
24828: LD_VAR 0 1
24832: PPUSH
24833: LD_INT 0
24835: PPUSH
24836: CALL_OW 240
24840: GO 24825
24842: POP
24843: POP
// end ;
24844: PPOPN 2
24846: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24847: LD_EXP 37
24851: PUSH
24852: LD_EXP 73
24856: AND
24857: IFFALSE 24923
24859: GO 24861
24861: DISABLE
24862: LD_INT 0
24864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24865: LD_ADDR_VAR 0 1
24869: PUSH
24870: LD_INT 22
24872: PUSH
24873: LD_OWVAR 2
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 30
24884: PUSH
24885: LD_INT 29
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PPUSH
24896: CALL_OW 69
24900: ST_TO_ADDR
// if not tmp then
24901: LD_VAR 0 1
24905: NOT
24906: IFFALSE 24910
// exit ;
24908: GO 24923
// DestroyUnit ( tmp [ 1 ] ) ;
24910: LD_VAR 0 1
24914: PUSH
24915: LD_INT 1
24917: ARRAY
24918: PPUSH
24919: CALL_OW 65
// end ;
24923: PPOPN 1
24925: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24926: LD_EXP 37
24930: PUSH
24931: LD_EXP 75
24935: AND
24936: IFFALSE 25065
24938: GO 24940
24940: DISABLE
24941: LD_INT 0
24943: PPUSH
// begin uc_side := 0 ;
24944: LD_ADDR_OWVAR 20
24948: PUSH
24949: LD_INT 0
24951: ST_TO_ADDR
// uc_nation := nation_arabian ;
24952: LD_ADDR_OWVAR 21
24956: PUSH
24957: LD_INT 2
24959: ST_TO_ADDR
// hc_gallery :=  ;
24960: LD_ADDR_OWVAR 33
24964: PUSH
24965: LD_STRING 
24967: ST_TO_ADDR
// hc_name :=  ;
24968: LD_ADDR_OWVAR 26
24972: PUSH
24973: LD_STRING 
24975: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24976: LD_INT 1
24978: PPUSH
24979: LD_INT 11
24981: PPUSH
24982: LD_INT 10
24984: PPUSH
24985: CALL_OW 380
// un := CreateHuman ;
24989: LD_ADDR_VAR 0 1
24993: PUSH
24994: CALL_OW 44
24998: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24999: LD_VAR 0 1
25003: PPUSH
25004: LD_INT 1
25006: PPUSH
25007: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25011: LD_INT 35
25013: PPUSH
25014: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25018: LD_VAR 0 1
25022: PPUSH
25023: LD_INT 22
25025: PUSH
25026: LD_OWVAR 2
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PPUSH
25035: CALL_OW 69
25039: PPUSH
25040: LD_VAR 0 1
25044: PPUSH
25045: CALL_OW 74
25049: PPUSH
25050: CALL_OW 115
// until IsDead ( un ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: CALL_OW 301
25063: IFFALSE 25011
// end ;
25065: PPOPN 1
25067: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25068: LD_EXP 37
25072: PUSH
25073: LD_EXP 77
25077: AND
25078: IFFALSE 25090
25080: GO 25082
25082: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25083: LD_STRING earthquake(getX(game), 0, 32)
25085: PPUSH
25086: CALL_OW 559
25090: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25091: LD_EXP 37
25095: PUSH
25096: LD_EXP 78
25100: AND
25101: IFFALSE 25192
25103: GO 25105
25105: DISABLE
25106: LD_INT 0
25108: PPUSH
// begin enable ;
25109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25110: LD_ADDR_VAR 0 1
25114: PUSH
25115: LD_INT 22
25117: PUSH
25118: LD_OWVAR 2
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 21
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 33
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: PPUSH
25152: CALL_OW 69
25156: ST_TO_ADDR
// if not tmp then
25157: LD_VAR 0 1
25161: NOT
25162: IFFALSE 25166
// exit ;
25164: GO 25192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25166: LD_VAR 0 1
25170: PUSH
25171: LD_INT 1
25173: PPUSH
25174: LD_VAR 0 1
25178: PPUSH
25179: CALL_OW 12
25183: ARRAY
25184: PPUSH
25185: LD_INT 1
25187: PPUSH
25188: CALL_OW 234
// end ;
25192: PPOPN 1
25194: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25195: LD_EXP 37
25199: PUSH
25200: LD_EXP 79
25204: AND
25205: IFFALSE 25346
25207: GO 25209
25209: DISABLE
25210: LD_INT 0
25212: PPUSH
25213: PPUSH
25214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_INT 22
25222: PUSH
25223: LD_OWVAR 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 25
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 69
25250: ST_TO_ADDR
// if not tmp then
25251: LD_VAR 0 3
25255: NOT
25256: IFFALSE 25260
// exit ;
25258: GO 25346
// un := tmp [ rand ( 1 , tmp ) ] ;
25260: LD_ADDR_VAR 0 2
25264: PUSH
25265: LD_VAR 0 3
25269: PUSH
25270: LD_INT 1
25272: PPUSH
25273: LD_VAR 0 3
25277: PPUSH
25278: CALL_OW 12
25282: ARRAY
25283: ST_TO_ADDR
// if Crawls ( un ) then
25284: LD_VAR 0 2
25288: PPUSH
25289: CALL_OW 318
25293: IFFALSE 25304
// ComWalk ( un ) ;
25295: LD_VAR 0 2
25299: PPUSH
25300: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25304: LD_VAR 0 2
25308: PPUSH
25309: LD_INT 9
25311: PPUSH
25312: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25316: LD_INT 28
25318: PPUSH
25319: LD_OWVAR 2
25323: PPUSH
25324: LD_INT 2
25326: PPUSH
25327: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25331: LD_INT 29
25333: PPUSH
25334: LD_OWVAR 2
25338: PPUSH
25339: LD_INT 2
25341: PPUSH
25342: CALL_OW 322
// end ;
25346: PPOPN 3
25348: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25349: LD_EXP 37
25353: PUSH
25354: LD_EXP 80
25358: AND
25359: IFFALSE 25470
25361: GO 25363
25363: DISABLE
25364: LD_INT 0
25366: PPUSH
25367: PPUSH
25368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25369: LD_ADDR_VAR 0 3
25373: PUSH
25374: LD_INT 22
25376: PUSH
25377: LD_OWVAR 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 25
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PPUSH
25400: CALL_OW 69
25404: ST_TO_ADDR
// if not tmp then
25405: LD_VAR 0 3
25409: NOT
25410: IFFALSE 25414
// exit ;
25412: GO 25470
// un := tmp [ rand ( 1 , tmp ) ] ;
25414: LD_ADDR_VAR 0 2
25418: PUSH
25419: LD_VAR 0 3
25423: PUSH
25424: LD_INT 1
25426: PPUSH
25427: LD_VAR 0 3
25431: PPUSH
25432: CALL_OW 12
25436: ARRAY
25437: ST_TO_ADDR
// if Crawls ( un ) then
25438: LD_VAR 0 2
25442: PPUSH
25443: CALL_OW 318
25447: IFFALSE 25458
// ComWalk ( un ) ;
25449: LD_VAR 0 2
25453: PPUSH
25454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_INT 8
25465: PPUSH
25466: CALL_OW 336
// end ;
25470: PPOPN 3
25472: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25473: LD_EXP 37
25477: PUSH
25478: LD_EXP 81
25482: AND
25483: IFFALSE 25627
25485: GO 25487
25487: DISABLE
25488: LD_INT 0
25490: PPUSH
25491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25492: LD_ADDR_VAR 0 2
25496: PUSH
25497: LD_INT 22
25499: PUSH
25500: LD_OWVAR 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 21
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 34
25524: PUSH
25525: LD_INT 12
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 34
25534: PUSH
25535: LD_INT 51
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 34
25544: PUSH
25545: LD_INT 32
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: PPUSH
25563: CALL_OW 69
25567: ST_TO_ADDR
// if not tmp then
25568: LD_VAR 0 2
25572: NOT
25573: IFFALSE 25577
// exit ;
25575: GO 25627
// for i in tmp do
25577: LD_ADDR_VAR 0 1
25581: PUSH
25582: LD_VAR 0 2
25586: PUSH
25587: FOR_IN
25588: IFFALSE 25625
// if GetCargo ( i , mat_artifact ) = 0 then
25590: LD_VAR 0 1
25594: PPUSH
25595: LD_INT 4
25597: PPUSH
25598: CALL_OW 289
25602: PUSH
25603: LD_INT 0
25605: EQUAL
25606: IFFALSE 25623
// SetCargo ( i , mat_siberit , 100 ) ;
25608: LD_VAR 0 1
25612: PPUSH
25613: LD_INT 3
25615: PPUSH
25616: LD_INT 100
25618: PPUSH
25619: CALL_OW 290
25623: GO 25587
25625: POP
25626: POP
// end ;
25627: PPOPN 2
25629: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25630: LD_EXP 37
25634: PUSH
25635: LD_EXP 82
25639: AND
25640: IFFALSE 25823
25642: GO 25644
25644: DISABLE
25645: LD_INT 0
25647: PPUSH
25648: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25649: LD_ADDR_VAR 0 2
25653: PUSH
25654: LD_INT 22
25656: PUSH
25657: LD_OWVAR 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PPUSH
25666: CALL_OW 69
25670: ST_TO_ADDR
// if not tmp then
25671: LD_VAR 0 2
25675: NOT
25676: IFFALSE 25680
// exit ;
25678: GO 25823
// for i := 1 to 2 do
25680: LD_ADDR_VAR 0 1
25684: PUSH
25685: DOUBLE
25686: LD_INT 1
25688: DEC
25689: ST_TO_ADDR
25690: LD_INT 2
25692: PUSH
25693: FOR_TO
25694: IFFALSE 25821
// begin uc_side := your_side ;
25696: LD_ADDR_OWVAR 20
25700: PUSH
25701: LD_OWVAR 2
25705: ST_TO_ADDR
// uc_nation := nation_american ;
25706: LD_ADDR_OWVAR 21
25710: PUSH
25711: LD_INT 1
25713: ST_TO_ADDR
// vc_chassis := us_morphling ;
25714: LD_ADDR_OWVAR 37
25718: PUSH
25719: LD_INT 5
25721: ST_TO_ADDR
// vc_engine := engine_siberite ;
25722: LD_ADDR_OWVAR 39
25726: PUSH
25727: LD_INT 3
25729: ST_TO_ADDR
// vc_control := control_computer ;
25730: LD_ADDR_OWVAR 38
25734: PUSH
25735: LD_INT 3
25737: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25738: LD_ADDR_OWVAR 40
25742: PUSH
25743: LD_INT 10
25745: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25746: LD_VAR 0 2
25750: PUSH
25751: LD_INT 1
25753: ARRAY
25754: PPUSH
25755: CALL_OW 310
25759: NOT
25760: IFFALSE 25807
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25762: CALL_OW 45
25766: PPUSH
25767: LD_VAR 0 2
25771: PUSH
25772: LD_INT 1
25774: ARRAY
25775: PPUSH
25776: CALL_OW 250
25780: PPUSH
25781: LD_VAR 0 2
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: PPUSH
25790: CALL_OW 251
25794: PPUSH
25795: LD_INT 12
25797: PPUSH
25798: LD_INT 1
25800: PPUSH
25801: CALL_OW 50
25805: GO 25819
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25807: CALL_OW 45
25811: PPUSH
25812: LD_INT 1
25814: PPUSH
25815: CALL_OW 51
// end ;
25819: GO 25693
25821: POP
25822: POP
// end ;
25823: PPOPN 2
25825: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25826: LD_EXP 37
25830: PUSH
25831: LD_EXP 83
25835: AND
25836: IFFALSE 26058
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
25844: PPUSH
25845: PPUSH
25846: PPUSH
25847: PPUSH
25848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25849: LD_ADDR_VAR 0 6
25853: PUSH
25854: LD_INT 22
25856: PUSH
25857: LD_OWVAR 2
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 21
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: LD_INT 23
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: PPUSH
25898: CALL_OW 69
25902: ST_TO_ADDR
// if not tmp then
25903: LD_VAR 0 6
25907: NOT
25908: IFFALSE 25912
// exit ;
25910: GO 26058
// s1 := rand ( 1 , 4 ) ;
25912: LD_ADDR_VAR 0 2
25916: PUSH
25917: LD_INT 1
25919: PPUSH
25920: LD_INT 4
25922: PPUSH
25923: CALL_OW 12
25927: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25928: LD_ADDR_VAR 0 4
25932: PUSH
25933: LD_VAR 0 6
25937: PUSH
25938: LD_INT 1
25940: ARRAY
25941: PPUSH
25942: LD_VAR 0 2
25946: PPUSH
25947: CALL_OW 259
25951: ST_TO_ADDR
// if s1 = 1 then
25952: LD_VAR 0 2
25956: PUSH
25957: LD_INT 1
25959: EQUAL
25960: IFFALSE 25980
// s2 := rand ( 2 , 4 ) else
25962: LD_ADDR_VAR 0 3
25966: PUSH
25967: LD_INT 2
25969: PPUSH
25970: LD_INT 4
25972: PPUSH
25973: CALL_OW 12
25977: ST_TO_ADDR
25978: GO 25988
// s2 := 1 ;
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 1
25987: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25988: LD_ADDR_VAR 0 5
25992: PUSH
25993: LD_VAR 0 6
25997: PUSH
25998: LD_INT 1
26000: ARRAY
26001: PPUSH
26002: LD_VAR 0 3
26006: PPUSH
26007: CALL_OW 259
26011: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26012: LD_VAR 0 6
26016: PUSH
26017: LD_INT 1
26019: ARRAY
26020: PPUSH
26021: LD_VAR 0 2
26025: PPUSH
26026: LD_VAR 0 5
26030: PPUSH
26031: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26035: LD_VAR 0 6
26039: PUSH
26040: LD_INT 1
26042: ARRAY
26043: PPUSH
26044: LD_VAR 0 3
26048: PPUSH
26049: LD_VAR 0 4
26053: PPUSH
26054: CALL_OW 237
// end ;
26058: PPOPN 6
26060: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26061: LD_EXP 37
26065: PUSH
26066: LD_EXP 84
26070: AND
26071: IFFALSE 26150
26073: GO 26075
26075: DISABLE
26076: LD_INT 0
26078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26079: LD_ADDR_VAR 0 1
26083: PUSH
26084: LD_INT 22
26086: PUSH
26087: LD_OWVAR 2
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 30
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PPUSH
26110: CALL_OW 69
26114: ST_TO_ADDR
// if not tmp then
26115: LD_VAR 0 1
26119: NOT
26120: IFFALSE 26124
// exit ;
26122: GO 26150
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26124: LD_VAR 0 1
26128: PUSH
26129: LD_INT 1
26131: PPUSH
26132: LD_VAR 0 1
26136: PPUSH
26137: CALL_OW 12
26141: ARRAY
26142: PPUSH
26143: LD_INT 1
26145: PPUSH
26146: CALL_OW 234
// end ;
26150: PPOPN 1
26152: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26153: LD_EXP 37
26157: PUSH
26158: LD_EXP 85
26162: AND
26163: IFFALSE 26275
26165: GO 26167
26167: DISABLE
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26172: LD_ADDR_VAR 0 2
26176: PUSH
26177: LD_INT 22
26179: PUSH
26180: LD_OWVAR 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 30
26194: PUSH
26195: LD_INT 27
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 30
26204: PUSH
26205: LD_INT 26
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 30
26214: PUSH
26215: LD_INT 28
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 69
26236: ST_TO_ADDR
// if not tmp then
26237: LD_VAR 0 2
26241: NOT
26242: IFFALSE 26246
// exit ;
26244: GO 26275
// for i in tmp do
26246: LD_ADDR_VAR 0 1
26250: PUSH
26251: LD_VAR 0 2
26255: PUSH
26256: FOR_IN
26257: IFFALSE 26273
// SetLives ( i , 1 ) ;
26259: LD_VAR 0 1
26263: PPUSH
26264: LD_INT 1
26266: PPUSH
26267: CALL_OW 234
26271: GO 26256
26273: POP
26274: POP
// end ;
26275: PPOPN 2
26277: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26278: LD_EXP 37
26282: PUSH
26283: LD_EXP 86
26287: AND
26288: IFFALSE 26575
26290: GO 26292
26292: DISABLE
26293: LD_INT 0
26295: PPUSH
26296: PPUSH
26297: PPUSH
// begin i := rand ( 1 , 7 ) ;
26298: LD_ADDR_VAR 0 1
26302: PUSH
26303: LD_INT 1
26305: PPUSH
26306: LD_INT 7
26308: PPUSH
26309: CALL_OW 12
26313: ST_TO_ADDR
// case i of 1 :
26314: LD_VAR 0 1
26318: PUSH
26319: LD_INT 1
26321: DOUBLE
26322: EQUAL
26323: IFTRUE 26327
26325: GO 26337
26327: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26328: LD_STRING earthquake(getX(game), 0, 32)
26330: PPUSH
26331: CALL_OW 559
26335: GO 26575
26337: LD_INT 2
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26359
26345: POP
// begin ToLua ( displayStucuk(); ) ;
26346: LD_STRING displayStucuk();
26348: PPUSH
26349: CALL_OW 559
// ResetFog ;
26353: CALL_OW 335
// end ; 3 :
26357: GO 26575
26359: LD_INT 3
26361: DOUBLE
26362: EQUAL
26363: IFTRUE 26367
26365: GO 26471
26367: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26368: LD_ADDR_VAR 0 2
26372: PUSH
26373: LD_INT 22
26375: PUSH
26376: LD_OWVAR 2
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 25
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PPUSH
26399: CALL_OW 69
26403: ST_TO_ADDR
// if not tmp then
26404: LD_VAR 0 2
26408: NOT
26409: IFFALSE 26413
// exit ;
26411: GO 26575
// un := tmp [ rand ( 1 , tmp ) ] ;
26413: LD_ADDR_VAR 0 3
26417: PUSH
26418: LD_VAR 0 2
26422: PUSH
26423: LD_INT 1
26425: PPUSH
26426: LD_VAR 0 2
26430: PPUSH
26431: CALL_OW 12
26435: ARRAY
26436: ST_TO_ADDR
// if Crawls ( un ) then
26437: LD_VAR 0 3
26441: PPUSH
26442: CALL_OW 318
26446: IFFALSE 26457
// ComWalk ( un ) ;
26448: LD_VAR 0 3
26452: PPUSH
26453: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26457: LD_VAR 0 3
26461: PPUSH
26462: LD_INT 8
26464: PPUSH
26465: CALL_OW 336
// end ; 4 :
26469: GO 26575
26471: LD_INT 4
26473: DOUBLE
26474: EQUAL
26475: IFTRUE 26479
26477: GO 26553
26479: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26480: LD_ADDR_VAR 0 2
26484: PUSH
26485: LD_INT 22
26487: PUSH
26488: LD_OWVAR 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 30
26499: PUSH
26500: LD_INT 29
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: ST_TO_ADDR
// if not tmp then
26516: LD_VAR 0 2
26520: NOT
26521: IFFALSE 26525
// exit ;
26523: GO 26575
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26525: LD_VAR 0 2
26529: PUSH
26530: LD_INT 1
26532: ARRAY
26533: PPUSH
26534: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26538: LD_VAR 0 2
26542: PUSH
26543: LD_INT 1
26545: ARRAY
26546: PPUSH
26547: CALL_OW 65
// end ; 5 .. 7 :
26551: GO 26575
26553: LD_INT 5
26555: DOUBLE
26556: GREATEREQUAL
26557: IFFALSE 26565
26559: LD_INT 7
26561: DOUBLE
26562: LESSEQUAL
26563: IFTRUE 26567
26565: GO 26574
26567: POP
// StreamSibBomb ; end ;
26568: CALL 22812 0 0
26572: GO 26575
26574: POP
// end ;
26575: PPOPN 3
26577: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26578: LD_EXP 37
26582: PUSH
26583: LD_EXP 87
26587: AND
26588: IFFALSE 26744
26590: GO 26592
26592: DISABLE
26593: LD_INT 0
26595: PPUSH
26596: PPUSH
26597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26598: LD_ADDR_VAR 0 2
26602: PUSH
26603: LD_INT 81
26605: PUSH
26606: LD_OWVAR 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 21
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 21
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PPUSH
26647: CALL_OW 69
26651: ST_TO_ADDR
// if not tmp then
26652: LD_VAR 0 2
26656: NOT
26657: IFFALSE 26661
// exit ;
26659: GO 26744
// p := 0 ;
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_INT 0
26668: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26669: LD_INT 35
26671: PPUSH
26672: CALL_OW 67
// p := p + 1 ;
26676: LD_ADDR_VAR 0 3
26680: PUSH
26681: LD_VAR 0 3
26685: PUSH
26686: LD_INT 1
26688: PLUS
26689: ST_TO_ADDR
// for i in tmp do
26690: LD_ADDR_VAR 0 1
26694: PUSH
26695: LD_VAR 0 2
26699: PUSH
26700: FOR_IN
26701: IFFALSE 26732
// if GetLives ( i ) < 1000 then
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 256
26712: PUSH
26713: LD_INT 1000
26715: LESS
26716: IFFALSE 26730
// SetLives ( i , 1000 ) ;
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_INT 1000
26725: PPUSH
26726: CALL_OW 234
26730: GO 26700
26732: POP
26733: POP
// until p > 20 ;
26734: LD_VAR 0 3
26738: PUSH
26739: LD_INT 20
26741: GREATER
26742: IFFALSE 26669
// end ;
26744: PPOPN 3
26746: END
// every 0 0$1 trigger StreamModeActive and sTime do
26747: LD_EXP 37
26751: PUSH
26752: LD_EXP 88
26756: AND
26757: IFFALSE 26792
26759: GO 26761
26761: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26762: LD_INT 28
26764: PPUSH
26765: LD_OWVAR 2
26769: PPUSH
26770: LD_INT 2
26772: PPUSH
26773: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26777: LD_INT 30
26779: PPUSH
26780: LD_OWVAR 2
26784: PPUSH
26785: LD_INT 2
26787: PPUSH
26788: CALL_OW 322
// end ;
26792: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26793: LD_EXP 37
26797: PUSH
26798: LD_EXP 89
26802: AND
26803: IFFALSE 26924
26805: GO 26807
26807: DISABLE
26808: LD_INT 0
26810: PPUSH
26811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26812: LD_ADDR_VAR 0 2
26816: PUSH
26817: LD_INT 22
26819: PUSH
26820: LD_OWVAR 2
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 21
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 3
26841: PUSH
26842: LD_INT 23
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: LIST
26860: PPUSH
26861: CALL_OW 69
26865: ST_TO_ADDR
// if not tmp then
26866: LD_VAR 0 2
26870: NOT
26871: IFFALSE 26875
// exit ;
26873: GO 26924
// for i in tmp do
26875: LD_ADDR_VAR 0 1
26879: PUSH
26880: LD_VAR 0 2
26884: PUSH
26885: FOR_IN
26886: IFFALSE 26922
// begin if Crawls ( i ) then
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL_OW 318
26897: IFFALSE 26908
// ComWalk ( i ) ;
26899: LD_VAR 0 1
26903: PPUSH
26904: CALL_OW 138
// SetClass ( i , 2 ) ;
26908: LD_VAR 0 1
26912: PPUSH
26913: LD_INT 2
26915: PPUSH
26916: CALL_OW 336
// end ;
26920: GO 26885
26922: POP
26923: POP
// end ;
26924: PPOPN 2
26926: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26927: LD_EXP 37
26931: PUSH
26932: LD_EXP 90
26936: AND
26937: IFFALSE 27225
26939: GO 26941
26941: DISABLE
26942: LD_INT 0
26944: PPUSH
26945: PPUSH
26946: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26947: LD_OWVAR 2
26951: PPUSH
26952: LD_INT 9
26954: PPUSH
26955: LD_INT 1
26957: PPUSH
26958: LD_INT 1
26960: PPUSH
26961: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26965: LD_INT 9
26967: PPUSH
26968: LD_OWVAR 2
26972: PPUSH
26973: CALL_OW 343
// uc_side := 9 ;
26977: LD_ADDR_OWVAR 20
26981: PUSH
26982: LD_INT 9
26984: ST_TO_ADDR
// uc_nation := 2 ;
26985: LD_ADDR_OWVAR 21
26989: PUSH
26990: LD_INT 2
26992: ST_TO_ADDR
// hc_name := Dark Warrior ;
26993: LD_ADDR_OWVAR 26
26997: PUSH
26998: LD_STRING Dark Warrior
27000: ST_TO_ADDR
// hc_gallery :=  ;
27001: LD_ADDR_OWVAR 33
27005: PUSH
27006: LD_STRING 
27008: ST_TO_ADDR
// hc_noskilllimit := true ;
27009: LD_ADDR_OWVAR 76
27013: PUSH
27014: LD_INT 1
27016: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27017: LD_ADDR_OWVAR 31
27021: PUSH
27022: LD_INT 30
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 30
27030: PUSH
27031: LD_INT 30
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
// un := CreateHuman ;
27040: LD_ADDR_VAR 0 3
27044: PUSH
27045: CALL_OW 44
27049: ST_TO_ADDR
// hc_noskilllimit := false ;
27050: LD_ADDR_OWVAR 76
27054: PUSH
27055: LD_INT 0
27057: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27058: LD_VAR 0 3
27062: PPUSH
27063: LD_INT 1
27065: PPUSH
27066: CALL_OW 51
// ToLua ( playRanger() ) ;
27070: LD_STRING playRanger()
27072: PPUSH
27073: CALL_OW 559
// p := 0 ;
27077: LD_ADDR_VAR 0 2
27081: PUSH
27082: LD_INT 0
27084: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27085: LD_INT 35
27087: PPUSH
27088: CALL_OW 67
// p := p + 1 ;
27092: LD_ADDR_VAR 0 2
27096: PUSH
27097: LD_VAR 0 2
27101: PUSH
27102: LD_INT 1
27104: PLUS
27105: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27106: LD_VAR 0 3
27110: PPUSH
27111: CALL_OW 256
27115: PUSH
27116: LD_INT 1000
27118: LESS
27119: IFFALSE 27133
// SetLives ( un , 1000 ) ;
27121: LD_VAR 0 3
27125: PPUSH
27126: LD_INT 1000
27128: PPUSH
27129: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27133: LD_VAR 0 3
27137: PPUSH
27138: LD_INT 81
27140: PUSH
27141: LD_OWVAR 2
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 91
27152: PUSH
27153: LD_VAR 0 3
27157: PUSH
27158: LD_INT 30
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 69
27174: PPUSH
27175: LD_VAR 0 3
27179: PPUSH
27180: CALL_OW 74
27184: PPUSH
27185: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27189: LD_VAR 0 2
27193: PUSH
27194: LD_INT 80
27196: GREATER
27197: PUSH
27198: LD_VAR 0 3
27202: PPUSH
27203: CALL_OW 301
27207: OR
27208: IFFALSE 27085
// if un then
27210: LD_VAR 0 3
27214: IFFALSE 27225
// RemoveUnit ( un ) ;
27216: LD_VAR 0 3
27220: PPUSH
27221: CALL_OW 64
// end ;
27225: PPOPN 3
27227: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27228: LD_EXP 91
27232: IFFALSE 27348
27234: GO 27236
27236: DISABLE
27237: LD_INT 0
27239: PPUSH
27240: PPUSH
27241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27242: LD_ADDR_VAR 0 2
27246: PUSH
27247: LD_INT 81
27249: PUSH
27250: LD_OWVAR 2
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 21
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PPUSH
27273: CALL_OW 69
27277: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27278: LD_STRING playComputer()
27280: PPUSH
27281: CALL_OW 559
// if not tmp then
27285: LD_VAR 0 2
27289: NOT
27290: IFFALSE 27294
// exit ;
27292: GO 27348
// for i in tmp do
27294: LD_ADDR_VAR 0 1
27298: PUSH
27299: LD_VAR 0 2
27303: PUSH
27304: FOR_IN
27305: IFFALSE 27346
// for j := 1 to 4 do
27307: LD_ADDR_VAR 0 3
27311: PUSH
27312: DOUBLE
27313: LD_INT 1
27315: DEC
27316: ST_TO_ADDR
27317: LD_INT 4
27319: PUSH
27320: FOR_TO
27321: IFFALSE 27342
// SetSkill ( i , j , 10 ) ;
27323: LD_VAR 0 1
27327: PPUSH
27328: LD_VAR 0 3
27332: PPUSH
27333: LD_INT 10
27335: PPUSH
27336: CALL_OW 237
27340: GO 27320
27342: POP
27343: POP
27344: GO 27304
27346: POP
27347: POP
// end ;
27348: PPOPN 3
27350: END
// every 0 0$1 trigger s30 do var i , tmp ;
27351: LD_EXP 92
27355: IFFALSE 27424
27357: GO 27359
27359: DISABLE
27360: LD_INT 0
27362: PPUSH
27363: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27364: LD_ADDR_VAR 0 2
27368: PUSH
27369: LD_INT 22
27371: PUSH
27372: LD_OWVAR 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PPUSH
27381: CALL_OW 69
27385: ST_TO_ADDR
// if not tmp then
27386: LD_VAR 0 2
27390: NOT
27391: IFFALSE 27395
// exit ;
27393: GO 27424
// for i in tmp do
27395: LD_ADDR_VAR 0 1
27399: PUSH
27400: LD_VAR 0 2
27404: PUSH
27405: FOR_IN
27406: IFFALSE 27422
// SetLives ( i , 300 ) ;
27408: LD_VAR 0 1
27412: PPUSH
27413: LD_INT 300
27415: PPUSH
27416: CALL_OW 234
27420: GO 27405
27422: POP
27423: POP
// end ;
27424: PPOPN 2
27426: END
// every 0 0$1 trigger s60 do var i , tmp ;
27427: LD_EXP 93
27431: IFFALSE 27500
27433: GO 27435
27435: DISABLE
27436: LD_INT 0
27438: PPUSH
27439: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27440: LD_ADDR_VAR 0 2
27444: PUSH
27445: LD_INT 22
27447: PUSH
27448: LD_OWVAR 2
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: ST_TO_ADDR
// if not tmp then
27462: LD_VAR 0 2
27466: NOT
27467: IFFALSE 27471
// exit ;
27469: GO 27500
// for i in tmp do
27471: LD_ADDR_VAR 0 1
27475: PUSH
27476: LD_VAR 0 2
27480: PUSH
27481: FOR_IN
27482: IFFALSE 27498
// SetLives ( i , 600 ) ;
27484: LD_VAR 0 1
27488: PPUSH
27489: LD_INT 600
27491: PPUSH
27492: CALL_OW 234
27496: GO 27481
27498: POP
27499: POP
// end ;
27500: PPOPN 2
27502: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27503: LD_INT 0
27505: PPUSH
// case cmd of 301 :
27506: LD_VAR 0 1
27510: PUSH
27511: LD_INT 301
27513: DOUBLE
27514: EQUAL
27515: IFTRUE 27519
27517: GO 27551
27519: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27520: LD_VAR 0 6
27524: PPUSH
27525: LD_VAR 0 7
27529: PPUSH
27530: LD_VAR 0 8
27534: PPUSH
27535: LD_VAR 0 4
27539: PPUSH
27540: LD_VAR 0 5
27544: PPUSH
27545: CALL 28760 0 5
27549: GO 27672
27551: LD_INT 302
27553: DOUBLE
27554: EQUAL
27555: IFTRUE 27559
27557: GO 27596
27559: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27560: LD_VAR 0 6
27564: PPUSH
27565: LD_VAR 0 7
27569: PPUSH
27570: LD_VAR 0 8
27574: PPUSH
27575: LD_VAR 0 9
27579: PPUSH
27580: LD_VAR 0 4
27584: PPUSH
27585: LD_VAR 0 5
27589: PPUSH
27590: CALL 28851 0 6
27594: GO 27672
27596: LD_INT 303
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27641
27604: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27605: LD_VAR 0 6
27609: PPUSH
27610: LD_VAR 0 7
27614: PPUSH
27615: LD_VAR 0 8
27619: PPUSH
27620: LD_VAR 0 9
27624: PPUSH
27625: LD_VAR 0 4
27629: PPUSH
27630: LD_VAR 0 5
27634: PPUSH
27635: CALL 27677 0 6
27639: GO 27672
27641: LD_INT 304
27643: DOUBLE
27644: EQUAL
27645: IFTRUE 27649
27647: GO 27671
27649: POP
// hHackTeleport ( unit , x , y ) ; end ;
27650: LD_VAR 0 2
27654: PPUSH
27655: LD_VAR 0 4
27659: PPUSH
27660: LD_VAR 0 5
27664: PPUSH
27665: CALL 29444 0 3
27669: GO 27672
27671: POP
// end ;
27672: LD_VAR 0 12
27676: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27681: LD_VAR 0 1
27685: PUSH
27686: LD_INT 1
27688: LESS
27689: PUSH
27690: LD_VAR 0 1
27694: PUSH
27695: LD_INT 3
27697: GREATER
27698: OR
27699: PUSH
27700: LD_VAR 0 5
27704: PPUSH
27705: LD_VAR 0 6
27709: PPUSH
27710: CALL_OW 428
27714: OR
27715: IFFALSE 27719
// exit ;
27717: GO 28447
// uc_side := your_side ;
27719: LD_ADDR_OWVAR 20
27723: PUSH
27724: LD_OWVAR 2
27728: ST_TO_ADDR
// uc_nation := nation ;
27729: LD_ADDR_OWVAR 21
27733: PUSH
27734: LD_VAR 0 1
27738: ST_TO_ADDR
// bc_level = 1 ;
27739: LD_ADDR_OWVAR 43
27743: PUSH
27744: LD_INT 1
27746: ST_TO_ADDR
// case btype of 1 :
27747: LD_VAR 0 2
27751: PUSH
27752: LD_INT 1
27754: DOUBLE
27755: EQUAL
27756: IFTRUE 27760
27758: GO 27771
27760: POP
// bc_type := b_depot ; 2 :
27761: LD_ADDR_OWVAR 42
27765: PUSH
27766: LD_INT 0
27768: ST_TO_ADDR
27769: GO 28391
27771: LD_INT 2
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27779
27777: GO 27790
27779: POP
// bc_type := b_warehouse ; 3 :
27780: LD_ADDR_OWVAR 42
27784: PUSH
27785: LD_INT 1
27787: ST_TO_ADDR
27788: GO 28391
27790: LD_INT 3
27792: DOUBLE
27793: EQUAL
27794: IFTRUE 27798
27796: GO 27809
27798: POP
// bc_type := b_lab ; 4 .. 9 :
27799: LD_ADDR_OWVAR 42
27803: PUSH
27804: LD_INT 6
27806: ST_TO_ADDR
27807: GO 28391
27809: LD_INT 4
27811: DOUBLE
27812: GREATEREQUAL
27813: IFFALSE 27821
27815: LD_INT 9
27817: DOUBLE
27818: LESSEQUAL
27819: IFTRUE 27823
27821: GO 27883
27823: POP
// begin bc_type := b_lab_half ;
27824: LD_ADDR_OWVAR 42
27828: PUSH
27829: LD_INT 7
27831: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27832: LD_ADDR_OWVAR 44
27836: PUSH
27837: LD_INT 10
27839: PUSH
27840: LD_INT 11
27842: PUSH
27843: LD_INT 12
27845: PUSH
27846: LD_INT 15
27848: PUSH
27849: LD_INT 14
27851: PUSH
27852: LD_INT 13
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: PUSH
27863: LD_VAR 0 2
27867: PUSH
27868: LD_INT 3
27870: MINUS
27871: ARRAY
27872: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
27873: LD_ADDR_OWVAR 45
27877: PUSH
27878: LD_INT 9
27880: ST_TO_ADDR
// end ; 10 .. 13 :
27881: GO 28391
27883: LD_INT 10
27885: DOUBLE
27886: GREATEREQUAL
27887: IFFALSE 27895
27889: LD_INT 13
27891: DOUBLE
27892: LESSEQUAL
27893: IFTRUE 27897
27895: GO 27974
27897: POP
// begin bc_type := b_lab_full ;
27898: LD_ADDR_OWVAR 42
27902: PUSH
27903: LD_INT 8
27905: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27906: LD_ADDR_OWVAR 44
27910: PUSH
27911: LD_INT 10
27913: PUSH
27914: LD_INT 12
27916: PUSH
27917: LD_INT 14
27919: PUSH
27920: LD_INT 13
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: PUSH
27929: LD_VAR 0 2
27933: PUSH
27934: LD_INT 9
27936: MINUS
27937: ARRAY
27938: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27939: LD_ADDR_OWVAR 45
27943: PUSH
27944: LD_INT 11
27946: PUSH
27947: LD_INT 15
27949: PUSH
27950: LD_INT 12
27952: PUSH
27953: LD_INT 15
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: PUSH
27962: LD_VAR 0 2
27966: PUSH
27967: LD_INT 9
27969: MINUS
27970: ARRAY
27971: ST_TO_ADDR
// end ; 14 :
27972: GO 28391
27974: LD_INT 14
27976: DOUBLE
27977: EQUAL
27978: IFTRUE 27982
27980: GO 27993
27982: POP
// bc_type := b_workshop ; 15 :
27983: LD_ADDR_OWVAR 42
27987: PUSH
27988: LD_INT 2
27990: ST_TO_ADDR
27991: GO 28391
27993: LD_INT 15
27995: DOUBLE
27996: EQUAL
27997: IFTRUE 28001
27999: GO 28012
28001: POP
// bc_type := b_factory ; 16 :
28002: LD_ADDR_OWVAR 42
28006: PUSH
28007: LD_INT 3
28009: ST_TO_ADDR
28010: GO 28391
28012: LD_INT 16
28014: DOUBLE
28015: EQUAL
28016: IFTRUE 28020
28018: GO 28031
28020: POP
// bc_type := b_ext_gun ; 17 :
28021: LD_ADDR_OWVAR 42
28025: PUSH
28026: LD_INT 17
28028: ST_TO_ADDR
28029: GO 28391
28031: LD_INT 17
28033: DOUBLE
28034: EQUAL
28035: IFTRUE 28039
28037: GO 28067
28039: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28040: LD_ADDR_OWVAR 42
28044: PUSH
28045: LD_INT 19
28047: PUSH
28048: LD_INT 23
28050: PUSH
28051: LD_INT 19
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: LIST
28058: PUSH
28059: LD_VAR 0 1
28063: ARRAY
28064: ST_TO_ADDR
28065: GO 28391
28067: LD_INT 18
28069: DOUBLE
28070: EQUAL
28071: IFTRUE 28075
28073: GO 28086
28075: POP
// bc_type := b_ext_radar ; 19 :
28076: LD_ADDR_OWVAR 42
28080: PUSH
28081: LD_INT 20
28083: ST_TO_ADDR
28084: GO 28391
28086: LD_INT 19
28088: DOUBLE
28089: EQUAL
28090: IFTRUE 28094
28092: GO 28105
28094: POP
// bc_type := b_ext_radio ; 20 :
28095: LD_ADDR_OWVAR 42
28099: PUSH
28100: LD_INT 22
28102: ST_TO_ADDR
28103: GO 28391
28105: LD_INT 20
28107: DOUBLE
28108: EQUAL
28109: IFTRUE 28113
28111: GO 28124
28113: POP
// bc_type := b_ext_siberium ; 21 :
28114: LD_ADDR_OWVAR 42
28118: PUSH
28119: LD_INT 21
28121: ST_TO_ADDR
28122: GO 28391
28124: LD_INT 21
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28143
28132: POP
// bc_type := b_ext_computer ; 22 :
28133: LD_ADDR_OWVAR 42
28137: PUSH
28138: LD_INT 24
28140: ST_TO_ADDR
28141: GO 28391
28143: LD_INT 22
28145: DOUBLE
28146: EQUAL
28147: IFTRUE 28151
28149: GO 28162
28151: POP
// bc_type := b_ext_track ; 23 :
28152: LD_ADDR_OWVAR 42
28156: PUSH
28157: LD_INT 16
28159: ST_TO_ADDR
28160: GO 28391
28162: LD_INT 23
28164: DOUBLE
28165: EQUAL
28166: IFTRUE 28170
28168: GO 28181
28170: POP
// bc_type := b_ext_laser ; 24 :
28171: LD_ADDR_OWVAR 42
28175: PUSH
28176: LD_INT 25
28178: ST_TO_ADDR
28179: GO 28391
28181: LD_INT 24
28183: DOUBLE
28184: EQUAL
28185: IFTRUE 28189
28187: GO 28200
28189: POP
// bc_type := b_control_tower ; 25 :
28190: LD_ADDR_OWVAR 42
28194: PUSH
28195: LD_INT 36
28197: ST_TO_ADDR
28198: GO 28391
28200: LD_INT 25
28202: DOUBLE
28203: EQUAL
28204: IFTRUE 28208
28206: GO 28219
28208: POP
// bc_type := b_breastwork ; 26 :
28209: LD_ADDR_OWVAR 42
28213: PUSH
28214: LD_INT 31
28216: ST_TO_ADDR
28217: GO 28391
28219: LD_INT 26
28221: DOUBLE
28222: EQUAL
28223: IFTRUE 28227
28225: GO 28238
28227: POP
// bc_type := b_bunker ; 27 :
28228: LD_ADDR_OWVAR 42
28232: PUSH
28233: LD_INT 32
28235: ST_TO_ADDR
28236: GO 28391
28238: LD_INT 27
28240: DOUBLE
28241: EQUAL
28242: IFTRUE 28246
28244: GO 28257
28246: POP
// bc_type := b_turret ; 28 :
28247: LD_ADDR_OWVAR 42
28251: PUSH
28252: LD_INT 33
28254: ST_TO_ADDR
28255: GO 28391
28257: LD_INT 28
28259: DOUBLE
28260: EQUAL
28261: IFTRUE 28265
28263: GO 28276
28265: POP
// bc_type := b_armoury ; 29 :
28266: LD_ADDR_OWVAR 42
28270: PUSH
28271: LD_INT 4
28273: ST_TO_ADDR
28274: GO 28391
28276: LD_INT 29
28278: DOUBLE
28279: EQUAL
28280: IFTRUE 28284
28282: GO 28295
28284: POP
// bc_type := b_barracks ; 30 :
28285: LD_ADDR_OWVAR 42
28289: PUSH
28290: LD_INT 5
28292: ST_TO_ADDR
28293: GO 28391
28295: LD_INT 30
28297: DOUBLE
28298: EQUAL
28299: IFTRUE 28303
28301: GO 28314
28303: POP
// bc_type := b_solar_power ; 31 :
28304: LD_ADDR_OWVAR 42
28308: PUSH
28309: LD_INT 27
28311: ST_TO_ADDR
28312: GO 28391
28314: LD_INT 31
28316: DOUBLE
28317: EQUAL
28318: IFTRUE 28322
28320: GO 28333
28322: POP
// bc_type := b_oil_power ; 32 :
28323: LD_ADDR_OWVAR 42
28327: PUSH
28328: LD_INT 26
28330: ST_TO_ADDR
28331: GO 28391
28333: LD_INT 32
28335: DOUBLE
28336: EQUAL
28337: IFTRUE 28341
28339: GO 28352
28341: POP
// bc_type := b_siberite_power ; 33 :
28342: LD_ADDR_OWVAR 42
28346: PUSH
28347: LD_INT 28
28349: ST_TO_ADDR
28350: GO 28391
28352: LD_INT 33
28354: DOUBLE
28355: EQUAL
28356: IFTRUE 28360
28358: GO 28371
28360: POP
// bc_type := b_oil_mine ; 34 :
28361: LD_ADDR_OWVAR 42
28365: PUSH
28366: LD_INT 29
28368: ST_TO_ADDR
28369: GO 28391
28371: LD_INT 34
28373: DOUBLE
28374: EQUAL
28375: IFTRUE 28379
28377: GO 28390
28379: POP
// bc_type := b_siberite_mine ; end ;
28380: LD_ADDR_OWVAR 42
28384: PUSH
28385: LD_INT 30
28387: ST_TO_ADDR
28388: GO 28391
28390: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28391: LD_ADDR_VAR 0 8
28395: PUSH
28396: LD_VAR 0 5
28400: PPUSH
28401: LD_VAR 0 6
28405: PPUSH
28406: LD_VAR 0 3
28410: PPUSH
28411: CALL_OW 47
28415: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28416: LD_OWVAR 42
28420: PUSH
28421: LD_INT 32
28423: PUSH
28424: LD_INT 33
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: IN
28431: IFFALSE 28447
// PlaceWeaponTurret ( b , weapon ) ;
28433: LD_VAR 0 8
28437: PPUSH
28438: LD_VAR 0 4
28442: PPUSH
28443: CALL_OW 431
// end ;
28447: LD_VAR 0 7
28451: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28452: LD_INT 0
28454: PPUSH
28455: PPUSH
28456: PPUSH
28457: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28458: LD_ADDR_VAR 0 4
28462: PUSH
28463: LD_INT 22
28465: PUSH
28466: LD_OWVAR 2
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: LD_INT 30
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 30
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PPUSH
28507: CALL_OW 69
28511: ST_TO_ADDR
// if not tmp then
28512: LD_VAR 0 4
28516: NOT
28517: IFFALSE 28521
// exit ;
28519: GO 28580
// for i in tmp do
28521: LD_ADDR_VAR 0 2
28525: PUSH
28526: LD_VAR 0 4
28530: PUSH
28531: FOR_IN
28532: IFFALSE 28578
// for j = 1 to 3 do
28534: LD_ADDR_VAR 0 3
28538: PUSH
28539: DOUBLE
28540: LD_INT 1
28542: DEC
28543: ST_TO_ADDR
28544: LD_INT 3
28546: PUSH
28547: FOR_TO
28548: IFFALSE 28574
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28550: LD_VAR 0 2
28554: PPUSH
28555: CALL_OW 274
28559: PPUSH
28560: LD_VAR 0 3
28564: PPUSH
28565: LD_INT 99999
28567: PPUSH
28568: CALL_OW 277
28572: GO 28547
28574: POP
28575: POP
28576: GO 28531
28578: POP
28579: POP
// end ;
28580: LD_VAR 0 1
28584: RET
// export function hHackSetLevel10 ; var i , j ; begin
28585: LD_INT 0
28587: PPUSH
28588: PPUSH
28589: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28590: LD_ADDR_VAR 0 2
28594: PUSH
28595: LD_INT 21
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PPUSH
28605: CALL_OW 69
28609: PUSH
28610: FOR_IN
28611: IFFALSE 28663
// if IsSelected ( i ) then
28613: LD_VAR 0 2
28617: PPUSH
28618: CALL_OW 306
28622: IFFALSE 28661
// begin for j := 1 to 4 do
28624: LD_ADDR_VAR 0 3
28628: PUSH
28629: DOUBLE
28630: LD_INT 1
28632: DEC
28633: ST_TO_ADDR
28634: LD_INT 4
28636: PUSH
28637: FOR_TO
28638: IFFALSE 28659
// SetSkill ( i , j , 10 ) ;
28640: LD_VAR 0 2
28644: PPUSH
28645: LD_VAR 0 3
28649: PPUSH
28650: LD_INT 10
28652: PPUSH
28653: CALL_OW 237
28657: GO 28637
28659: POP
28660: POP
// end ;
28661: GO 28610
28663: POP
28664: POP
// end ;
28665: LD_VAR 0 1
28669: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28670: LD_INT 0
28672: PPUSH
28673: PPUSH
28674: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28675: LD_ADDR_VAR 0 2
28679: PUSH
28680: LD_INT 22
28682: PUSH
28683: LD_OWVAR 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 21
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PPUSH
28706: CALL_OW 69
28710: PUSH
28711: FOR_IN
28712: IFFALSE 28753
// begin for j := 1 to 4 do
28714: LD_ADDR_VAR 0 3
28718: PUSH
28719: DOUBLE
28720: LD_INT 1
28722: DEC
28723: ST_TO_ADDR
28724: LD_INT 4
28726: PUSH
28727: FOR_TO
28728: IFFALSE 28749
// SetSkill ( i , j , 10 ) ;
28730: LD_VAR 0 2
28734: PPUSH
28735: LD_VAR 0 3
28739: PPUSH
28740: LD_INT 10
28742: PPUSH
28743: CALL_OW 237
28747: GO 28727
28749: POP
28750: POP
// end ;
28751: GO 28711
28753: POP
28754: POP
// end ;
28755: LD_VAR 0 1
28759: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28760: LD_INT 0
28762: PPUSH
// uc_side := your_side ;
28763: LD_ADDR_OWVAR 20
28767: PUSH
28768: LD_OWVAR 2
28772: ST_TO_ADDR
// uc_nation := nation ;
28773: LD_ADDR_OWVAR 21
28777: PUSH
28778: LD_VAR 0 1
28782: ST_TO_ADDR
// InitHc ;
28783: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28787: LD_INT 0
28789: PPUSH
28790: LD_VAR 0 2
28794: PPUSH
28795: LD_VAR 0 3
28799: PPUSH
28800: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28804: LD_VAR 0 4
28808: PPUSH
28809: LD_VAR 0 5
28813: PPUSH
28814: CALL_OW 428
28818: PUSH
28819: LD_INT 0
28821: EQUAL
28822: IFFALSE 28846
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28824: CALL_OW 44
28828: PPUSH
28829: LD_VAR 0 4
28833: PPUSH
28834: LD_VAR 0 5
28838: PPUSH
28839: LD_INT 1
28841: PPUSH
28842: CALL_OW 48
// end ;
28846: LD_VAR 0 6
28850: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28851: LD_INT 0
28853: PPUSH
28854: PPUSH
// uc_side := your_side ;
28855: LD_ADDR_OWVAR 20
28859: PUSH
28860: LD_OWVAR 2
28864: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28865: LD_VAR 0 1
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 2
28875: PUSH
28876: LD_INT 3
28878: PUSH
28879: LD_INT 4
28881: PUSH
28882: LD_INT 5
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: IN
28892: IFFALSE 28904
// uc_nation := nation_american else
28894: LD_ADDR_OWVAR 21
28898: PUSH
28899: LD_INT 1
28901: ST_TO_ADDR
28902: GO 28947
// if chassis in [ 11 , 12 , 13 , 14 ] then
28904: LD_VAR 0 1
28908: PUSH
28909: LD_INT 11
28911: PUSH
28912: LD_INT 12
28914: PUSH
28915: LD_INT 13
28917: PUSH
28918: LD_INT 14
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: IN
28927: IFFALSE 28939
// uc_nation := nation_arabian else
28929: LD_ADDR_OWVAR 21
28933: PUSH
28934: LD_INT 2
28936: ST_TO_ADDR
28937: GO 28947
// uc_nation := nation_russian ;
28939: LD_ADDR_OWVAR 21
28943: PUSH
28944: LD_INT 3
28946: ST_TO_ADDR
// vc_chassis := chassis ;
28947: LD_ADDR_OWVAR 37
28951: PUSH
28952: LD_VAR 0 1
28956: ST_TO_ADDR
// vc_engine := engine ;
28957: LD_ADDR_OWVAR 39
28961: PUSH
28962: LD_VAR 0 2
28966: ST_TO_ADDR
// vc_control := control ;
28967: LD_ADDR_OWVAR 38
28971: PUSH
28972: LD_VAR 0 3
28976: ST_TO_ADDR
// vc_weapon := weapon ;
28977: LD_ADDR_OWVAR 40
28981: PUSH
28982: LD_VAR 0 4
28986: ST_TO_ADDR
// un := CreateVehicle ;
28987: LD_ADDR_VAR 0 8
28991: PUSH
28992: CALL_OW 45
28996: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28997: LD_VAR 0 8
29001: PPUSH
29002: LD_INT 0
29004: PPUSH
29005: LD_INT 5
29007: PPUSH
29008: CALL_OW 12
29012: PPUSH
29013: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29017: LD_VAR 0 8
29021: PPUSH
29022: LD_VAR 0 5
29026: PPUSH
29027: LD_VAR 0 6
29031: PPUSH
29032: LD_INT 1
29034: PPUSH
29035: CALL_OW 48
// end ;
29039: LD_VAR 0 7
29043: RET
// export hInvincible ; every 1 do
29044: GO 29046
29046: DISABLE
// hInvincible := [ ] ;
29047: LD_ADDR_EXP 94
29051: PUSH
29052: EMPTY
29053: ST_TO_ADDR
29054: END
// every 10 do var i ;
29055: GO 29057
29057: DISABLE
29058: LD_INT 0
29060: PPUSH
// begin enable ;
29061: ENABLE
// if not hInvincible then
29062: LD_EXP 94
29066: NOT
29067: IFFALSE 29071
// exit ;
29069: GO 29115
// for i in hInvincible do
29071: LD_ADDR_VAR 0 1
29075: PUSH
29076: LD_EXP 94
29080: PUSH
29081: FOR_IN
29082: IFFALSE 29113
// if GetLives ( i ) < 1000 then
29084: LD_VAR 0 1
29088: PPUSH
29089: CALL_OW 256
29093: PUSH
29094: LD_INT 1000
29096: LESS
29097: IFFALSE 29111
// SetLives ( i , 1000 ) ;
29099: LD_VAR 0 1
29103: PPUSH
29104: LD_INT 1000
29106: PPUSH
29107: CALL_OW 234
29111: GO 29081
29113: POP
29114: POP
// end ;
29115: PPOPN 1
29117: END
// export function hHackInvincible ; var i ; begin
29118: LD_INT 0
29120: PPUSH
29121: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29122: LD_ADDR_VAR 0 2
29126: PUSH
29127: LD_INT 2
29129: PUSH
29130: LD_INT 21
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 21
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: PPUSH
29155: CALL_OW 69
29159: PUSH
29160: FOR_IN
29161: IFFALSE 29222
// if IsSelected ( i ) then
29163: LD_VAR 0 2
29167: PPUSH
29168: CALL_OW 306
29172: IFFALSE 29220
// begin if i in hInvincible then
29174: LD_VAR 0 2
29178: PUSH
29179: LD_EXP 94
29183: IN
29184: IFFALSE 29204
// hInvincible := hInvincible diff i else
29186: LD_ADDR_EXP 94
29190: PUSH
29191: LD_EXP 94
29195: PUSH
29196: LD_VAR 0 2
29200: DIFF
29201: ST_TO_ADDR
29202: GO 29220
// hInvincible := hInvincible union i ;
29204: LD_ADDR_EXP 94
29208: PUSH
29209: LD_EXP 94
29213: PUSH
29214: LD_VAR 0 2
29218: UNION
29219: ST_TO_ADDR
// end ;
29220: GO 29160
29222: POP
29223: POP
// end ;
29224: LD_VAR 0 1
29228: RET
// export function hHackInvisible ; var i , j ; begin
29229: LD_INT 0
29231: PPUSH
29232: PPUSH
29233: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29234: LD_ADDR_VAR 0 2
29238: PUSH
29239: LD_INT 21
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PPUSH
29249: CALL_OW 69
29253: PUSH
29254: FOR_IN
29255: IFFALSE 29279
// if IsSelected ( i ) then
29257: LD_VAR 0 2
29261: PPUSH
29262: CALL_OW 306
29266: IFFALSE 29277
// ComForceInvisible ( i ) ;
29268: LD_VAR 0 2
29272: PPUSH
29273: CALL_OW 496
29277: GO 29254
29279: POP
29280: POP
// end ;
29281: LD_VAR 0 1
29285: RET
// export function hHackChangeYourSide ; begin
29286: LD_INT 0
29288: PPUSH
// if your_side = 8 then
29289: LD_OWVAR 2
29293: PUSH
29294: LD_INT 8
29296: EQUAL
29297: IFFALSE 29309
// your_side := 0 else
29299: LD_ADDR_OWVAR 2
29303: PUSH
29304: LD_INT 0
29306: ST_TO_ADDR
29307: GO 29323
// your_side := your_side + 1 ;
29309: LD_ADDR_OWVAR 2
29313: PUSH
29314: LD_OWVAR 2
29318: PUSH
29319: LD_INT 1
29321: PLUS
29322: ST_TO_ADDR
// end ;
29323: LD_VAR 0 1
29327: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29328: LD_INT 0
29330: PPUSH
29331: PPUSH
29332: PPUSH
// for i in all_units do
29333: LD_ADDR_VAR 0 2
29337: PUSH
29338: LD_OWVAR 3
29342: PUSH
29343: FOR_IN
29344: IFFALSE 29422
// if IsSelected ( i ) then
29346: LD_VAR 0 2
29350: PPUSH
29351: CALL_OW 306
29355: IFFALSE 29420
// begin j := GetSide ( i ) ;
29357: LD_ADDR_VAR 0 3
29361: PUSH
29362: LD_VAR 0 2
29366: PPUSH
29367: CALL_OW 255
29371: ST_TO_ADDR
// if j = 8 then
29372: LD_VAR 0 3
29376: PUSH
29377: LD_INT 8
29379: EQUAL
29380: IFFALSE 29392
// j := 0 else
29382: LD_ADDR_VAR 0 3
29386: PUSH
29387: LD_INT 0
29389: ST_TO_ADDR
29390: GO 29406
// j := j + 1 ;
29392: LD_ADDR_VAR 0 3
29396: PUSH
29397: LD_VAR 0 3
29401: PUSH
29402: LD_INT 1
29404: PLUS
29405: ST_TO_ADDR
// SetSide ( i , j ) ;
29406: LD_VAR 0 2
29410: PPUSH
29411: LD_VAR 0 3
29415: PPUSH
29416: CALL_OW 235
// end ;
29420: GO 29343
29422: POP
29423: POP
// end ;
29424: LD_VAR 0 1
29428: RET
// export function hHackFog ; begin
29429: LD_INT 0
29431: PPUSH
// FogOff ( true ) ;
29432: LD_INT 1
29434: PPUSH
29435: CALL_OW 344
// end ;
29439: LD_VAR 0 1
29443: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29444: LD_INT 0
29446: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: LD_VAR 0 2
29456: PPUSH
29457: LD_VAR 0 3
29461: PPUSH
29462: LD_INT 1
29464: PPUSH
29465: LD_INT 1
29467: PPUSH
29468: CALL_OW 483
// CenterOnXY ( x , y ) ;
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_VAR 0 3
29481: PPUSH
29482: CALL_OW 84
// end ;
29486: LD_VAR 0 4
29490: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29491: LD_INT 0
29493: PPUSH
29494: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29495: LD_VAR 0 1
29499: NOT
29500: PUSH
29501: LD_VAR 0 2
29505: PPUSH
29506: LD_VAR 0 3
29510: PPUSH
29511: CALL_OW 488
29515: NOT
29516: OR
29517: PUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 266
29527: PUSH
29528: LD_INT 3
29530: NONEQUAL
29531: PUSH
29532: LD_VAR 0 1
29536: PPUSH
29537: CALL_OW 247
29541: PUSH
29542: LD_INT 1
29544: EQUAL
29545: NOT
29546: AND
29547: OR
29548: IFFALSE 29552
// exit ;
29550: GO 29701
// if GetType ( factory ) = unit_human then
29552: LD_VAR 0 1
29556: PPUSH
29557: CALL_OW 247
29561: PUSH
29562: LD_INT 1
29564: EQUAL
29565: IFFALSE 29582
// factory := IsInUnit ( factory ) ;
29567: LD_ADDR_VAR 0 1
29571: PUSH
29572: LD_VAR 0 1
29576: PPUSH
29577: CALL_OW 310
29581: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29582: LD_VAR 0 1
29586: PPUSH
29587: CALL_OW 266
29591: PUSH
29592: LD_INT 3
29594: NONEQUAL
29595: IFFALSE 29599
// exit ;
29597: GO 29701
// if HexInfo ( x , y ) = factory then
29599: LD_VAR 0 2
29603: PPUSH
29604: LD_VAR 0 3
29608: PPUSH
29609: CALL_OW 428
29613: PUSH
29614: LD_VAR 0 1
29618: EQUAL
29619: IFFALSE 29646
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29621: LD_ADDR_EXP 95
29625: PUSH
29626: LD_EXP 95
29630: PPUSH
29631: LD_VAR 0 1
29635: PPUSH
29636: LD_INT 0
29638: PPUSH
29639: CALL_OW 1
29643: ST_TO_ADDR
29644: GO 29697
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29646: LD_ADDR_EXP 95
29650: PUSH
29651: LD_EXP 95
29655: PPUSH
29656: LD_VAR 0 1
29660: PPUSH
29661: LD_VAR 0 1
29665: PPUSH
29666: CALL_OW 255
29670: PUSH
29671: LD_VAR 0 1
29675: PUSH
29676: LD_VAR 0 2
29680: PUSH
29681: LD_VAR 0 3
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: PPUSH
29692: CALL_OW 1
29696: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29697: CALL 29706 0 0
// end ;
29701: LD_VAR 0 4
29705: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29706: LD_INT 0
29708: PPUSH
29709: PPUSH
29710: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29711: LD_STRING resetFactoryWaypoint();
29713: PPUSH
29714: CALL_OW 559
// if factoryWaypoints then
29718: LD_EXP 95
29722: IFFALSE 29848
// begin list := PrepareArray ( factoryWaypoints ) ;
29724: LD_ADDR_VAR 0 3
29728: PUSH
29729: LD_EXP 95
29733: PPUSH
29734: CALL 71881 0 1
29738: ST_TO_ADDR
// for i := 1 to list do
29739: LD_ADDR_VAR 0 2
29743: PUSH
29744: DOUBLE
29745: LD_INT 1
29747: DEC
29748: ST_TO_ADDR
29749: LD_VAR 0 3
29753: PUSH
29754: FOR_TO
29755: IFFALSE 29846
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29757: LD_STRING setFactoryWaypointXY(
29759: PUSH
29760: LD_VAR 0 3
29764: PUSH
29765: LD_VAR 0 2
29769: ARRAY
29770: PUSH
29771: LD_INT 1
29773: ARRAY
29774: STR
29775: PUSH
29776: LD_STRING ,
29778: STR
29779: PUSH
29780: LD_VAR 0 3
29784: PUSH
29785: LD_VAR 0 2
29789: ARRAY
29790: PUSH
29791: LD_INT 2
29793: ARRAY
29794: STR
29795: PUSH
29796: LD_STRING ,
29798: STR
29799: PUSH
29800: LD_VAR 0 3
29804: PUSH
29805: LD_VAR 0 2
29809: ARRAY
29810: PUSH
29811: LD_INT 3
29813: ARRAY
29814: STR
29815: PUSH
29816: LD_STRING ,
29818: STR
29819: PUSH
29820: LD_VAR 0 3
29824: PUSH
29825: LD_VAR 0 2
29829: ARRAY
29830: PUSH
29831: LD_INT 4
29833: ARRAY
29834: STR
29835: PUSH
29836: LD_STRING )
29838: STR
29839: PPUSH
29840: CALL_OW 559
29844: GO 29754
29846: POP
29847: POP
// end ; end ;
29848: LD_VAR 0 1
29852: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29853: LD_INT 0
29855: PPUSH
// if HexInfo ( x , y ) = warehouse then
29856: LD_VAR 0 2
29860: PPUSH
29861: LD_VAR 0 3
29865: PPUSH
29866: CALL_OW 428
29870: PUSH
29871: LD_VAR 0 1
29875: EQUAL
29876: IFFALSE 29903
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29878: LD_ADDR_EXP 96
29882: PUSH
29883: LD_EXP 96
29887: PPUSH
29888: LD_VAR 0 1
29892: PPUSH
29893: LD_INT 0
29895: PPUSH
29896: CALL_OW 1
29900: ST_TO_ADDR
29901: GO 29954
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29903: LD_ADDR_EXP 96
29907: PUSH
29908: LD_EXP 96
29912: PPUSH
29913: LD_VAR 0 1
29917: PPUSH
29918: LD_VAR 0 1
29922: PPUSH
29923: CALL_OW 255
29927: PUSH
29928: LD_VAR 0 1
29932: PUSH
29933: LD_VAR 0 2
29937: PUSH
29938: LD_VAR 0 3
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: PPUSH
29949: CALL_OW 1
29953: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29954: CALL 29963 0 0
// end ;
29958: LD_VAR 0 4
29962: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29963: LD_INT 0
29965: PPUSH
29966: PPUSH
29967: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29968: LD_STRING resetWarehouseGatheringPoints();
29970: PPUSH
29971: CALL_OW 559
// if warehouseGatheringPoints then
29975: LD_EXP 96
29979: IFFALSE 30105
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29981: LD_ADDR_VAR 0 3
29985: PUSH
29986: LD_EXP 96
29990: PPUSH
29991: CALL 71881 0 1
29995: ST_TO_ADDR
// for i := 1 to list do
29996: LD_ADDR_VAR 0 2
30000: PUSH
30001: DOUBLE
30002: LD_INT 1
30004: DEC
30005: ST_TO_ADDR
30006: LD_VAR 0 3
30010: PUSH
30011: FOR_TO
30012: IFFALSE 30103
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30014: LD_STRING setWarehouseGatheringPointXY(
30016: PUSH
30017: LD_VAR 0 3
30021: PUSH
30022: LD_VAR 0 2
30026: ARRAY
30027: PUSH
30028: LD_INT 1
30030: ARRAY
30031: STR
30032: PUSH
30033: LD_STRING ,
30035: STR
30036: PUSH
30037: LD_VAR 0 3
30041: PUSH
30042: LD_VAR 0 2
30046: ARRAY
30047: PUSH
30048: LD_INT 2
30050: ARRAY
30051: STR
30052: PUSH
30053: LD_STRING ,
30055: STR
30056: PUSH
30057: LD_VAR 0 3
30061: PUSH
30062: LD_VAR 0 2
30066: ARRAY
30067: PUSH
30068: LD_INT 3
30070: ARRAY
30071: STR
30072: PUSH
30073: LD_STRING ,
30075: STR
30076: PUSH
30077: LD_VAR 0 3
30081: PUSH
30082: LD_VAR 0 2
30086: ARRAY
30087: PUSH
30088: LD_INT 4
30090: ARRAY
30091: STR
30092: PUSH
30093: LD_STRING )
30095: STR
30096: PPUSH
30097: CALL_OW 559
30101: GO 30011
30103: POP
30104: POP
// end ; end ;
30105: LD_VAR 0 1
30109: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30110: LD_EXP 96
30114: IFFALSE 30799
30116: GO 30118
30118: DISABLE
30119: LD_INT 0
30121: PPUSH
30122: PPUSH
30123: PPUSH
30124: PPUSH
30125: PPUSH
30126: PPUSH
30127: PPUSH
30128: PPUSH
30129: PPUSH
// begin enable ;
30130: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: LD_EXP 96
30140: PPUSH
30141: CALL 71881 0 1
30145: ST_TO_ADDR
// if not list then
30146: LD_VAR 0 3
30150: NOT
30151: IFFALSE 30155
// exit ;
30153: GO 30799
// for i := 1 to list do
30155: LD_ADDR_VAR 0 1
30159: PUSH
30160: DOUBLE
30161: LD_INT 1
30163: DEC
30164: ST_TO_ADDR
30165: LD_VAR 0 3
30169: PUSH
30170: FOR_TO
30171: IFFALSE 30797
// begin depot := list [ i ] [ 2 ] ;
30173: LD_ADDR_VAR 0 8
30177: PUSH
30178: LD_VAR 0 3
30182: PUSH
30183: LD_VAR 0 1
30187: ARRAY
30188: PUSH
30189: LD_INT 2
30191: ARRAY
30192: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30193: LD_ADDR_VAR 0 5
30197: PUSH
30198: LD_VAR 0 3
30202: PUSH
30203: LD_VAR 0 1
30207: ARRAY
30208: PUSH
30209: LD_INT 1
30211: ARRAY
30212: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30213: LD_VAR 0 8
30217: PPUSH
30218: CALL_OW 301
30222: PUSH
30223: LD_VAR 0 5
30227: PUSH
30228: LD_VAR 0 8
30232: PPUSH
30233: CALL_OW 255
30237: NONEQUAL
30238: OR
30239: IFFALSE 30268
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30241: LD_ADDR_EXP 96
30245: PUSH
30246: LD_EXP 96
30250: PPUSH
30251: LD_VAR 0 8
30255: PPUSH
30256: LD_INT 0
30258: PPUSH
30259: CALL_OW 1
30263: ST_TO_ADDR
// exit ;
30264: POP
30265: POP
30266: GO 30799
// end ; x := list [ i ] [ 3 ] ;
30268: LD_ADDR_VAR 0 6
30272: PUSH
30273: LD_VAR 0 3
30277: PUSH
30278: LD_VAR 0 1
30282: ARRAY
30283: PUSH
30284: LD_INT 3
30286: ARRAY
30287: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30288: LD_ADDR_VAR 0 7
30292: PUSH
30293: LD_VAR 0 3
30297: PUSH
30298: LD_VAR 0 1
30302: ARRAY
30303: PUSH
30304: LD_INT 4
30306: ARRAY
30307: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30308: LD_ADDR_VAR 0 9
30312: PUSH
30313: LD_VAR 0 6
30317: PPUSH
30318: LD_VAR 0 7
30322: PPUSH
30323: LD_INT 16
30325: PPUSH
30326: CALL 70469 0 3
30330: ST_TO_ADDR
// if not cratesNearbyPoint then
30331: LD_VAR 0 9
30335: NOT
30336: IFFALSE 30342
// exit ;
30338: POP
30339: POP
30340: GO 30799
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30342: LD_ADDR_VAR 0 4
30346: PUSH
30347: LD_INT 22
30349: PUSH
30350: LD_VAR 0 5
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 60
30364: PUSH
30365: EMPTY
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 91
30374: PUSH
30375: LD_VAR 0 8
30379: PUSH
30380: LD_INT 6
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: LD_INT 25
30393: PUSH
30394: LD_INT 2
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 25
30403: PUSH
30404: LD_INT 16
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: PUSH
30427: LD_VAR 0 8
30431: PPUSH
30432: CALL_OW 313
30436: PPUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 60
30442: PUSH
30443: EMPTY
30444: LIST
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: LD_INT 25
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 25
30465: PUSH
30466: LD_INT 16
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PPUSH
30482: CALL_OW 72
30486: UNION
30487: ST_TO_ADDR
// if tmp then
30488: LD_VAR 0 4
30492: IFFALSE 30572
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30494: LD_ADDR_VAR 0 4
30498: PUSH
30499: LD_VAR 0 4
30503: PPUSH
30504: LD_INT 3
30506: PPUSH
30507: CALL 68438 0 2
30511: ST_TO_ADDR
// for j in tmp do
30512: LD_ADDR_VAR 0 2
30516: PUSH
30517: LD_VAR 0 4
30521: PUSH
30522: FOR_IN
30523: IFFALSE 30566
// begin if IsInUnit ( j ) then
30525: LD_VAR 0 2
30529: PPUSH
30530: CALL_OW 310
30534: IFFALSE 30545
// ComExit ( j ) ;
30536: LD_VAR 0 2
30540: PPUSH
30541: CALL 68521 0 1
// AddComCollect ( j , x , y ) ;
30545: LD_VAR 0 2
30549: PPUSH
30550: LD_VAR 0 6
30554: PPUSH
30555: LD_VAR 0 7
30559: PPUSH
30560: CALL_OW 177
// end ;
30564: GO 30522
30566: POP
30567: POP
// exit ;
30568: POP
30569: POP
30570: GO 30799
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30572: LD_ADDR_VAR 0 4
30576: PUSH
30577: LD_INT 22
30579: PUSH
30580: LD_VAR 0 5
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 91
30591: PUSH
30592: LD_VAR 0 8
30596: PUSH
30597: LD_INT 8
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 34
30610: PUSH
30611: LD_INT 12
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 34
30620: PUSH
30621: LD_INT 51
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 34
30630: PUSH
30631: LD_INT 32
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 34
30640: PUSH
30641: LD_INT 89
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: LIST
30659: PPUSH
30660: CALL_OW 69
30664: ST_TO_ADDR
// if tmp then
30665: LD_VAR 0 4
30669: IFFALSE 30795
// begin for j in tmp do
30671: LD_ADDR_VAR 0 2
30675: PUSH
30676: LD_VAR 0 4
30680: PUSH
30681: FOR_IN
30682: IFFALSE 30793
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30684: LD_VAR 0 2
30688: PPUSH
30689: CALL_OW 262
30693: PUSH
30694: LD_INT 3
30696: EQUAL
30697: PUSH
30698: LD_VAR 0 2
30702: PPUSH
30703: CALL_OW 261
30707: PUSH
30708: LD_INT 20
30710: GREATER
30711: OR
30712: PUSH
30713: LD_VAR 0 2
30717: PPUSH
30718: CALL_OW 314
30722: NOT
30723: AND
30724: PUSH
30725: LD_VAR 0 2
30729: PPUSH
30730: CALL_OW 263
30734: PUSH
30735: LD_INT 1
30737: NONEQUAL
30738: PUSH
30739: LD_VAR 0 2
30743: PPUSH
30744: CALL_OW 311
30748: OR
30749: AND
30750: IFFALSE 30791
// begin ComCollect ( j , x , y ) ;
30752: LD_VAR 0 2
30756: PPUSH
30757: LD_VAR 0 6
30761: PPUSH
30762: LD_VAR 0 7
30766: PPUSH
30767: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30771: LD_VAR 0 2
30775: PPUSH
30776: LD_VAR 0 8
30780: PPUSH
30781: CALL_OW 172
// exit ;
30785: POP
30786: POP
30787: POP
30788: POP
30789: GO 30799
// end ;
30791: GO 30681
30793: POP
30794: POP
// end ; end ;
30795: GO 30170
30797: POP
30798: POP
// end ; end_of_file end_of_file
30799: PPOPN 9
30801: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30802: LD_INT 0
30804: PPUSH
30805: PPUSH
// if exist_mode then
30806: LD_VAR 0 2
30810: IFFALSE 30835
// unit := CreateCharacter ( prefix & ident ) else
30812: LD_ADDR_VAR 0 5
30816: PUSH
30817: LD_VAR 0 3
30821: PUSH
30822: LD_VAR 0 1
30826: STR
30827: PPUSH
30828: CALL_OW 34
30832: ST_TO_ADDR
30833: GO 30850
// unit := NewCharacter ( ident ) ;
30835: LD_ADDR_VAR 0 5
30839: PUSH
30840: LD_VAR 0 1
30844: PPUSH
30845: CALL_OW 25
30849: ST_TO_ADDR
// result := unit ;
30850: LD_ADDR_VAR 0 4
30854: PUSH
30855: LD_VAR 0 5
30859: ST_TO_ADDR
// end ;
30860: LD_VAR 0 4
30864: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30865: LD_INT 0
30867: PPUSH
30868: PPUSH
// if not side or not nation then
30869: LD_VAR 0 1
30873: NOT
30874: PUSH
30875: LD_VAR 0 2
30879: NOT
30880: OR
30881: IFFALSE 30885
// exit ;
30883: GO 31653
// case nation of nation_american :
30885: LD_VAR 0 2
30889: PUSH
30890: LD_INT 1
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 31112
30898: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30899: LD_ADDR_VAR 0 4
30903: PUSH
30904: LD_INT 35
30906: PUSH
30907: LD_INT 45
30909: PUSH
30910: LD_INT 46
30912: PUSH
30913: LD_INT 47
30915: PUSH
30916: LD_INT 82
30918: PUSH
30919: LD_INT 83
30921: PUSH
30922: LD_INT 84
30924: PUSH
30925: LD_INT 85
30927: PUSH
30928: LD_INT 86
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: LD_INT 6
30939: PUSH
30940: LD_INT 15
30942: PUSH
30943: LD_INT 16
30945: PUSH
30946: LD_INT 7
30948: PUSH
30949: LD_INT 12
30951: PUSH
30952: LD_INT 13
30954: PUSH
30955: LD_INT 10
30957: PUSH
30958: LD_INT 14
30960: PUSH
30961: LD_INT 20
30963: PUSH
30964: LD_INT 21
30966: PUSH
30967: LD_INT 22
30969: PUSH
30970: LD_INT 25
30972: PUSH
30973: LD_INT 32
30975: PUSH
30976: LD_INT 27
30978: PUSH
30979: LD_INT 36
30981: PUSH
30982: LD_INT 69
30984: PUSH
30985: LD_INT 39
30987: PUSH
30988: LD_INT 34
30990: PUSH
30991: LD_INT 40
30993: PUSH
30994: LD_INT 48
30996: PUSH
30997: LD_INT 49
30999: PUSH
31000: LD_INT 50
31002: PUSH
31003: LD_INT 51
31005: PUSH
31006: LD_INT 52
31008: PUSH
31009: LD_INT 53
31011: PUSH
31012: LD_INT 54
31014: PUSH
31015: LD_INT 55
31017: PUSH
31018: LD_INT 56
31020: PUSH
31021: LD_INT 57
31023: PUSH
31024: LD_INT 58
31026: PUSH
31027: LD_INT 59
31029: PUSH
31030: LD_INT 60
31032: PUSH
31033: LD_INT 61
31035: PUSH
31036: LD_INT 62
31038: PUSH
31039: LD_INT 80
31041: PUSH
31042: LD_INT 82
31044: PUSH
31045: LD_INT 83
31047: PUSH
31048: LD_INT 84
31050: PUSH
31051: LD_INT 85
31053: PUSH
31054: LD_INT 86
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
31110: GO 31577
31112: LD_INT 2
31114: DOUBLE
31115: EQUAL
31116: IFTRUE 31120
31118: GO 31346
31120: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31121: LD_ADDR_VAR 0 4
31125: PUSH
31126: LD_INT 35
31128: PUSH
31129: LD_INT 45
31131: PUSH
31132: LD_INT 46
31134: PUSH
31135: LD_INT 47
31137: PUSH
31138: LD_INT 82
31140: PUSH
31141: LD_INT 83
31143: PUSH
31144: LD_INT 84
31146: PUSH
31147: LD_INT 85
31149: PUSH
31150: LD_INT 87
31152: PUSH
31153: LD_INT 70
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 11
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: LD_INT 4
31167: PUSH
31168: LD_INT 5
31170: PUSH
31171: LD_INT 6
31173: PUSH
31174: LD_INT 15
31176: PUSH
31177: LD_INT 18
31179: PUSH
31180: LD_INT 7
31182: PUSH
31183: LD_INT 17
31185: PUSH
31186: LD_INT 8
31188: PUSH
31189: LD_INT 20
31191: PUSH
31192: LD_INT 21
31194: PUSH
31195: LD_INT 22
31197: PUSH
31198: LD_INT 72
31200: PUSH
31201: LD_INT 26
31203: PUSH
31204: LD_INT 69
31206: PUSH
31207: LD_INT 39
31209: PUSH
31210: LD_INT 40
31212: PUSH
31213: LD_INT 41
31215: PUSH
31216: LD_INT 42
31218: PUSH
31219: LD_INT 43
31221: PUSH
31222: LD_INT 48
31224: PUSH
31225: LD_INT 49
31227: PUSH
31228: LD_INT 50
31230: PUSH
31231: LD_INT 51
31233: PUSH
31234: LD_INT 52
31236: PUSH
31237: LD_INT 53
31239: PUSH
31240: LD_INT 54
31242: PUSH
31243: LD_INT 55
31245: PUSH
31246: LD_INT 56
31248: PUSH
31249: LD_INT 60
31251: PUSH
31252: LD_INT 61
31254: PUSH
31255: LD_INT 62
31257: PUSH
31258: LD_INT 66
31260: PUSH
31261: LD_INT 67
31263: PUSH
31264: LD_INT 68
31266: PUSH
31267: LD_INT 81
31269: PUSH
31270: LD_INT 82
31272: PUSH
31273: LD_INT 83
31275: PUSH
31276: LD_INT 84
31278: PUSH
31279: LD_INT 85
31281: PUSH
31282: LD_INT 87
31284: PUSH
31285: LD_INT 88
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 31577
31346: LD_INT 3
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31576
31354: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31355: LD_ADDR_VAR 0 4
31359: PUSH
31360: LD_INT 46
31362: PUSH
31363: LD_INT 47
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: LD_INT 82
31374: PUSH
31375: LD_INT 83
31377: PUSH
31378: LD_INT 84
31380: PUSH
31381: LD_INT 85
31383: PUSH
31384: LD_INT 86
31386: PUSH
31387: LD_INT 11
31389: PUSH
31390: LD_INT 9
31392: PUSH
31393: LD_INT 20
31395: PUSH
31396: LD_INT 19
31398: PUSH
31399: LD_INT 21
31401: PUSH
31402: LD_INT 24
31404: PUSH
31405: LD_INT 22
31407: PUSH
31408: LD_INT 25
31410: PUSH
31411: LD_INT 28
31413: PUSH
31414: LD_INT 29
31416: PUSH
31417: LD_INT 30
31419: PUSH
31420: LD_INT 31
31422: PUSH
31423: LD_INT 37
31425: PUSH
31426: LD_INT 38
31428: PUSH
31429: LD_INT 32
31431: PUSH
31432: LD_INT 27
31434: PUSH
31435: LD_INT 33
31437: PUSH
31438: LD_INT 69
31440: PUSH
31441: LD_INT 39
31443: PUSH
31444: LD_INT 34
31446: PUSH
31447: LD_INT 40
31449: PUSH
31450: LD_INT 71
31452: PUSH
31453: LD_INT 23
31455: PUSH
31456: LD_INT 44
31458: PUSH
31459: LD_INT 48
31461: PUSH
31462: LD_INT 49
31464: PUSH
31465: LD_INT 50
31467: PUSH
31468: LD_INT 51
31470: PUSH
31471: LD_INT 52
31473: PUSH
31474: LD_INT 53
31476: PUSH
31477: LD_INT 54
31479: PUSH
31480: LD_INT 55
31482: PUSH
31483: LD_INT 56
31485: PUSH
31486: LD_INT 57
31488: PUSH
31489: LD_INT 58
31491: PUSH
31492: LD_INT 59
31494: PUSH
31495: LD_INT 63
31497: PUSH
31498: LD_INT 64
31500: PUSH
31501: LD_INT 65
31503: PUSH
31504: LD_INT 82
31506: PUSH
31507: LD_INT 83
31509: PUSH
31510: LD_INT 84
31512: PUSH
31513: LD_INT 85
31515: PUSH
31516: LD_INT 86
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
31574: GO 31577
31576: POP
// if state > - 1 and state < 3 then
31577: LD_VAR 0 3
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: GREATER
31586: PUSH
31587: LD_VAR 0 3
31591: PUSH
31592: LD_INT 3
31594: LESS
31595: AND
31596: IFFALSE 31653
// for i in result do
31598: LD_ADDR_VAR 0 5
31602: PUSH
31603: LD_VAR 0 4
31607: PUSH
31608: FOR_IN
31609: IFFALSE 31651
// if GetTech ( i , side ) <> state then
31611: LD_VAR 0 5
31615: PPUSH
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL_OW 321
31625: PUSH
31626: LD_VAR 0 3
31630: NONEQUAL
31631: IFFALSE 31649
// result := result diff i ;
31633: LD_ADDR_VAR 0 4
31637: PUSH
31638: LD_VAR 0 4
31642: PUSH
31643: LD_VAR 0 5
31647: DIFF
31648: ST_TO_ADDR
31649: GO 31608
31651: POP
31652: POP
// end ;
31653: LD_VAR 0 4
31657: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31658: LD_INT 0
31660: PPUSH
31661: PPUSH
31662: PPUSH
// result := true ;
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_INT 1
31670: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31671: LD_ADDR_VAR 0 5
31675: PUSH
31676: LD_VAR 0 2
31680: PPUSH
31681: CALL_OW 480
31685: ST_TO_ADDR
// if not tmp then
31686: LD_VAR 0 5
31690: NOT
31691: IFFALSE 31695
// exit ;
31693: GO 31744
// for i in tmp do
31695: LD_ADDR_VAR 0 4
31699: PUSH
31700: LD_VAR 0 5
31704: PUSH
31705: FOR_IN
31706: IFFALSE 31742
// if GetTech ( i , side ) <> state_researched then
31708: LD_VAR 0 4
31712: PPUSH
31713: LD_VAR 0 1
31717: PPUSH
31718: CALL_OW 321
31722: PUSH
31723: LD_INT 2
31725: NONEQUAL
31726: IFFALSE 31740
// begin result := false ;
31728: LD_ADDR_VAR 0 3
31732: PUSH
31733: LD_INT 0
31735: ST_TO_ADDR
// exit ;
31736: POP
31737: POP
31738: GO 31744
// end ;
31740: GO 31705
31742: POP
31743: POP
// end ;
31744: LD_VAR 0 3
31748: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31749: LD_INT 0
31751: PPUSH
31752: PPUSH
31753: PPUSH
31754: PPUSH
31755: PPUSH
31756: PPUSH
31757: PPUSH
31758: PPUSH
31759: PPUSH
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31764: LD_VAR 0 1
31768: NOT
31769: PUSH
31770: LD_VAR 0 1
31774: PPUSH
31775: CALL_OW 257
31779: PUSH
31780: LD_INT 9
31782: NONEQUAL
31783: OR
31784: IFFALSE 31788
// exit ;
31786: GO 32361
// side := GetSide ( unit ) ;
31788: LD_ADDR_VAR 0 9
31792: PUSH
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 255
31802: ST_TO_ADDR
// tech_space := tech_spacanom ;
31803: LD_ADDR_VAR 0 12
31807: PUSH
31808: LD_INT 29
31810: ST_TO_ADDR
// tech_time := tech_taurad ;
31811: LD_ADDR_VAR 0 13
31815: PUSH
31816: LD_INT 28
31818: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31819: LD_ADDR_VAR 0 11
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 310
31833: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31834: LD_VAR 0 11
31838: PPUSH
31839: CALL_OW 247
31843: PUSH
31844: LD_INT 2
31846: EQUAL
31847: IFFALSE 31851
// exit ;
31849: GO 32361
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31851: LD_ADDR_VAR 0 8
31855: PUSH
31856: LD_INT 81
31858: PUSH
31859: LD_VAR 0 9
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 3
31870: PUSH
31871: LD_INT 21
31873: PUSH
31874: LD_INT 3
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PPUSH
31889: CALL_OW 69
31893: ST_TO_ADDR
// if not tmp then
31894: LD_VAR 0 8
31898: NOT
31899: IFFALSE 31903
// exit ;
31901: GO 32361
// if in_unit then
31903: LD_VAR 0 11
31907: IFFALSE 31931
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31909: LD_ADDR_VAR 0 10
31913: PUSH
31914: LD_VAR 0 8
31918: PPUSH
31919: LD_VAR 0 11
31923: PPUSH
31924: CALL_OW 74
31928: ST_TO_ADDR
31929: GO 31951
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31931: LD_ADDR_VAR 0 10
31935: PUSH
31936: LD_VAR 0 8
31940: PPUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 74
31950: ST_TO_ADDR
// if not enemy then
31951: LD_VAR 0 10
31955: NOT
31956: IFFALSE 31960
// exit ;
31958: GO 32361
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31960: LD_VAR 0 11
31964: PUSH
31965: LD_VAR 0 11
31969: PPUSH
31970: LD_VAR 0 10
31974: PPUSH
31975: CALL_OW 296
31979: PUSH
31980: LD_INT 13
31982: GREATER
31983: AND
31984: PUSH
31985: LD_VAR 0 1
31989: PPUSH
31990: LD_VAR 0 10
31994: PPUSH
31995: CALL_OW 296
31999: PUSH
32000: LD_INT 12
32002: GREATER
32003: OR
32004: IFFALSE 32008
// exit ;
32006: GO 32361
// missile := [ 1 ] ;
32008: LD_ADDR_VAR 0 14
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32019: LD_VAR 0 9
32023: PPUSH
32024: LD_VAR 0 12
32028: PPUSH
32029: CALL_OW 325
32033: IFFALSE 32062
// missile := Replace ( missile , missile + 1 , 2 ) ;
32035: LD_ADDR_VAR 0 14
32039: PUSH
32040: LD_VAR 0 14
32044: PPUSH
32045: LD_VAR 0 14
32049: PUSH
32050: LD_INT 1
32052: PLUS
32053: PPUSH
32054: LD_INT 2
32056: PPUSH
32057: CALL_OW 1
32061: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32062: LD_VAR 0 9
32066: PPUSH
32067: LD_VAR 0 13
32071: PPUSH
32072: CALL_OW 325
32076: PUSH
32077: LD_VAR 0 10
32081: PPUSH
32082: CALL_OW 255
32086: PPUSH
32087: LD_VAR 0 13
32091: PPUSH
32092: CALL_OW 325
32096: NOT
32097: AND
32098: IFFALSE 32127
// missile := Replace ( missile , missile + 1 , 3 ) ;
32100: LD_ADDR_VAR 0 14
32104: PUSH
32105: LD_VAR 0 14
32109: PPUSH
32110: LD_VAR 0 14
32114: PUSH
32115: LD_INT 1
32117: PLUS
32118: PPUSH
32119: LD_INT 3
32121: PPUSH
32122: CALL_OW 1
32126: ST_TO_ADDR
// if missile < 2 then
32127: LD_VAR 0 14
32131: PUSH
32132: LD_INT 2
32134: LESS
32135: IFFALSE 32139
// exit ;
32137: GO 32361
// x := GetX ( enemy ) ;
32139: LD_ADDR_VAR 0 4
32143: PUSH
32144: LD_VAR 0 10
32148: PPUSH
32149: CALL_OW 250
32153: ST_TO_ADDR
// y := GetY ( enemy ) ;
32154: LD_ADDR_VAR 0 5
32158: PUSH
32159: LD_VAR 0 10
32163: PPUSH
32164: CALL_OW 251
32168: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32169: LD_ADDR_VAR 0 6
32173: PUSH
32174: LD_VAR 0 4
32178: PUSH
32179: LD_INT 1
32181: NEG
32182: PPUSH
32183: LD_INT 1
32185: PPUSH
32186: CALL_OW 12
32190: PLUS
32191: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32192: LD_ADDR_VAR 0 7
32196: PUSH
32197: LD_VAR 0 5
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PPUSH
32206: LD_INT 1
32208: PPUSH
32209: CALL_OW 12
32213: PLUS
32214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32215: LD_VAR 0 6
32219: PPUSH
32220: LD_VAR 0 7
32224: PPUSH
32225: CALL_OW 488
32229: NOT
32230: IFFALSE 32252
// begin _x := x ;
32232: LD_ADDR_VAR 0 6
32236: PUSH
32237: LD_VAR 0 4
32241: ST_TO_ADDR
// _y := y ;
32242: LD_ADDR_VAR 0 7
32246: PUSH
32247: LD_VAR 0 5
32251: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32252: LD_ADDR_VAR 0 3
32256: PUSH
32257: LD_INT 1
32259: PPUSH
32260: LD_VAR 0 14
32264: PPUSH
32265: CALL_OW 12
32269: ST_TO_ADDR
// case i of 1 :
32270: LD_VAR 0 3
32274: PUSH
32275: LD_INT 1
32277: DOUBLE
32278: EQUAL
32279: IFTRUE 32283
32281: GO 32300
32283: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32284: LD_VAR 0 1
32288: PPUSH
32289: LD_VAR 0 10
32293: PPUSH
32294: CALL_OW 115
32298: GO 32361
32300: LD_INT 2
32302: DOUBLE
32303: EQUAL
32304: IFTRUE 32308
32306: GO 32330
32308: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32309: LD_VAR 0 1
32313: PPUSH
32314: LD_VAR 0 6
32318: PPUSH
32319: LD_VAR 0 7
32323: PPUSH
32324: CALL_OW 153
32328: GO 32361
32330: LD_INT 3
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32360
32338: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32339: LD_VAR 0 1
32343: PPUSH
32344: LD_VAR 0 6
32348: PPUSH
32349: LD_VAR 0 7
32353: PPUSH
32354: CALL_OW 154
32358: GO 32361
32360: POP
// end ;
32361: LD_VAR 0 2
32365: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32366: LD_INT 0
32368: PPUSH
32369: PPUSH
32370: PPUSH
32371: PPUSH
32372: PPUSH
32373: PPUSH
// if not unit or not building then
32374: LD_VAR 0 1
32378: NOT
32379: PUSH
32380: LD_VAR 0 2
32384: NOT
32385: OR
32386: IFFALSE 32390
// exit ;
32388: GO 32548
// x := GetX ( building ) ;
32390: LD_ADDR_VAR 0 5
32394: PUSH
32395: LD_VAR 0 2
32399: PPUSH
32400: CALL_OW 250
32404: ST_TO_ADDR
// y := GetY ( building ) ;
32405: LD_ADDR_VAR 0 6
32409: PUSH
32410: LD_VAR 0 2
32414: PPUSH
32415: CALL_OW 251
32419: ST_TO_ADDR
// for i = 0 to 5 do
32420: LD_ADDR_VAR 0 4
32424: PUSH
32425: DOUBLE
32426: LD_INT 0
32428: DEC
32429: ST_TO_ADDR
32430: LD_INT 5
32432: PUSH
32433: FOR_TO
32434: IFFALSE 32546
// begin _x := ShiftX ( x , i , 3 ) ;
32436: LD_ADDR_VAR 0 7
32440: PUSH
32441: LD_VAR 0 5
32445: PPUSH
32446: LD_VAR 0 4
32450: PPUSH
32451: LD_INT 3
32453: PPUSH
32454: CALL_OW 272
32458: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32459: LD_ADDR_VAR 0 8
32463: PUSH
32464: LD_VAR 0 6
32468: PPUSH
32469: LD_VAR 0 4
32473: PPUSH
32474: LD_INT 3
32476: PPUSH
32477: CALL_OW 273
32481: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32482: LD_VAR 0 7
32486: PPUSH
32487: LD_VAR 0 8
32491: PPUSH
32492: CALL_OW 488
32496: NOT
32497: IFFALSE 32501
// continue ;
32499: GO 32433
// if HexInfo ( _x , _y ) = 0 then
32501: LD_VAR 0 7
32505: PPUSH
32506: LD_VAR 0 8
32510: PPUSH
32511: CALL_OW 428
32515: PUSH
32516: LD_INT 0
32518: EQUAL
32519: IFFALSE 32544
// begin ComMoveXY ( unit , _x , _y ) ;
32521: LD_VAR 0 1
32525: PPUSH
32526: LD_VAR 0 7
32530: PPUSH
32531: LD_VAR 0 8
32535: PPUSH
32536: CALL_OW 111
// exit ;
32540: POP
32541: POP
32542: GO 32548
// end ; end ;
32544: GO 32433
32546: POP
32547: POP
// end ;
32548: LD_VAR 0 3
32552: RET
// export function ScanBase ( side , base_area ) ; begin
32553: LD_INT 0
32555: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32556: LD_ADDR_VAR 0 3
32560: PUSH
32561: LD_VAR 0 2
32565: PPUSH
32566: LD_INT 81
32568: PUSH
32569: LD_VAR 0 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 70
32582: ST_TO_ADDR
// end ;
32583: LD_VAR 0 3
32587: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
// result := false ;
32594: LD_ADDR_VAR 0 2
32598: PUSH
32599: LD_INT 0
32601: ST_TO_ADDR
// side := GetSide ( unit ) ;
32602: LD_ADDR_VAR 0 3
32606: PUSH
32607: LD_VAR 0 1
32611: PPUSH
32612: CALL_OW 255
32616: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32617: LD_ADDR_VAR 0 4
32621: PUSH
32622: LD_VAR 0 1
32626: PPUSH
32627: CALL_OW 248
32631: ST_TO_ADDR
// case nat of 1 :
32632: LD_VAR 0 4
32636: PUSH
32637: LD_INT 1
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32645
32643: GO 32656
32645: POP
// tech := tech_lassight ; 2 :
32646: LD_ADDR_VAR 0 5
32650: PUSH
32651: LD_INT 12
32653: ST_TO_ADDR
32654: GO 32695
32656: LD_INT 2
32658: DOUBLE
32659: EQUAL
32660: IFTRUE 32664
32662: GO 32675
32664: POP
// tech := tech_mortar ; 3 :
32665: LD_ADDR_VAR 0 5
32669: PUSH
32670: LD_INT 41
32672: ST_TO_ADDR
32673: GO 32695
32675: LD_INT 3
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32694
32683: POP
// tech := tech_bazooka ; end ;
32684: LD_ADDR_VAR 0 5
32688: PUSH
32689: LD_INT 44
32691: ST_TO_ADDR
32692: GO 32695
32694: POP
// if Researched ( side , tech ) then
32695: LD_VAR 0 3
32699: PPUSH
32700: LD_VAR 0 5
32704: PPUSH
32705: CALL_OW 325
32709: IFFALSE 32736
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32711: LD_ADDR_VAR 0 2
32715: PUSH
32716: LD_INT 5
32718: PUSH
32719: LD_INT 8
32721: PUSH
32722: LD_INT 9
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: PUSH
32730: LD_VAR 0 4
32734: ARRAY
32735: ST_TO_ADDR
// end ;
32736: LD_VAR 0 2
32740: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32741: LD_INT 0
32743: PPUSH
32744: PPUSH
32745: PPUSH
// if not mines then
32746: LD_VAR 0 2
32750: NOT
32751: IFFALSE 32755
// exit ;
32753: GO 32899
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32755: LD_ADDR_VAR 0 5
32759: PUSH
32760: LD_INT 81
32762: PUSH
32763: LD_VAR 0 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 3
32774: PUSH
32775: LD_INT 21
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PPUSH
32793: CALL_OW 69
32797: ST_TO_ADDR
// for i in mines do
32798: LD_ADDR_VAR 0 4
32802: PUSH
32803: LD_VAR 0 2
32807: PUSH
32808: FOR_IN
32809: IFFALSE 32897
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32811: LD_VAR 0 4
32815: PUSH
32816: LD_INT 1
32818: ARRAY
32819: PPUSH
32820: LD_VAR 0 4
32824: PUSH
32825: LD_INT 2
32827: ARRAY
32828: PPUSH
32829: CALL_OW 458
32833: NOT
32834: IFFALSE 32838
// continue ;
32836: GO 32808
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32838: LD_VAR 0 4
32842: PUSH
32843: LD_INT 1
32845: ARRAY
32846: PPUSH
32847: LD_VAR 0 4
32851: PUSH
32852: LD_INT 2
32854: ARRAY
32855: PPUSH
32856: CALL_OW 428
32860: PUSH
32861: LD_VAR 0 5
32865: IN
32866: IFFALSE 32895
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32868: LD_VAR 0 4
32872: PUSH
32873: LD_INT 1
32875: ARRAY
32876: PPUSH
32877: LD_VAR 0 4
32881: PUSH
32882: LD_INT 2
32884: ARRAY
32885: PPUSH
32886: LD_VAR 0 1
32890: PPUSH
32891: CALL_OW 456
// end ;
32895: GO 32808
32897: POP
32898: POP
// end ;
32899: LD_VAR 0 3
32903: RET
// export function Count ( array ) ; begin
32904: LD_INT 0
32906: PPUSH
// result := array + 0 ;
32907: LD_ADDR_VAR 0 2
32911: PUSH
32912: LD_VAR 0 1
32916: PUSH
32917: LD_INT 0
32919: PLUS
32920: ST_TO_ADDR
// end ;
32921: LD_VAR 0 2
32925: RET
// export function IsEmpty ( building ) ; begin
32926: LD_INT 0
32928: PPUSH
// if not building then
32929: LD_VAR 0 1
32933: NOT
32934: IFFALSE 32938
// exit ;
32936: GO 32981
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32938: LD_ADDR_VAR 0 2
32942: PUSH
32943: LD_VAR 0 1
32947: PUSH
32948: LD_INT 22
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 255
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 58
32967: PUSH
32968: EMPTY
32969: LIST
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PPUSH
32975: CALL_OW 69
32979: IN
32980: ST_TO_ADDR
// end ;
32981: LD_VAR 0 2
32985: RET
// export function IsNotFull ( building ) ; var places ; begin
32986: LD_INT 0
32988: PPUSH
32989: PPUSH
// if not building then
32990: LD_VAR 0 1
32994: NOT
32995: IFFALSE 32999
// exit ;
32997: GO 33027
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32999: LD_ADDR_VAR 0 2
33003: PUSH
33004: LD_VAR 0 1
33008: PPUSH
33009: LD_INT 3
33011: PUSH
33012: LD_INT 62
33014: PUSH
33015: EMPTY
33016: LIST
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PPUSH
33022: CALL_OW 72
33026: ST_TO_ADDR
// end ;
33027: LD_VAR 0 2
33031: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33032: LD_INT 0
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
// tmp := [ ] ;
33038: LD_ADDR_VAR 0 3
33042: PUSH
33043: EMPTY
33044: ST_TO_ADDR
// list := [ ] ;
33045: LD_ADDR_VAR 0 5
33049: PUSH
33050: EMPTY
33051: ST_TO_ADDR
// for i = 16 to 25 do
33052: LD_ADDR_VAR 0 4
33056: PUSH
33057: DOUBLE
33058: LD_INT 16
33060: DEC
33061: ST_TO_ADDR
33062: LD_INT 25
33064: PUSH
33065: FOR_TO
33066: IFFALSE 33139
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33068: LD_ADDR_VAR 0 3
33072: PUSH
33073: LD_VAR 0 3
33077: PUSH
33078: LD_INT 22
33080: PUSH
33081: LD_VAR 0 1
33085: PPUSH
33086: CALL_OW 255
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 91
33097: PUSH
33098: LD_VAR 0 1
33102: PUSH
33103: LD_INT 6
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 30
33113: PUSH
33114: LD_VAR 0 4
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: PPUSH
33131: CALL_OW 69
33135: ADD
33136: ST_TO_ADDR
33137: GO 33065
33139: POP
33140: POP
// for i = 1 to tmp do
33141: LD_ADDR_VAR 0 4
33145: PUSH
33146: DOUBLE
33147: LD_INT 1
33149: DEC
33150: ST_TO_ADDR
33151: LD_VAR 0 3
33155: PUSH
33156: FOR_TO
33157: IFFALSE 33245
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33159: LD_ADDR_VAR 0 5
33163: PUSH
33164: LD_VAR 0 5
33168: PUSH
33169: LD_VAR 0 3
33173: PUSH
33174: LD_VAR 0 4
33178: ARRAY
33179: PPUSH
33180: CALL_OW 266
33184: PUSH
33185: LD_VAR 0 3
33189: PUSH
33190: LD_VAR 0 4
33194: ARRAY
33195: PPUSH
33196: CALL_OW 250
33200: PUSH
33201: LD_VAR 0 3
33205: PUSH
33206: LD_VAR 0 4
33210: ARRAY
33211: PPUSH
33212: CALL_OW 251
33216: PUSH
33217: LD_VAR 0 3
33221: PUSH
33222: LD_VAR 0 4
33226: ARRAY
33227: PPUSH
33228: CALL_OW 254
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: PUSH
33239: EMPTY
33240: LIST
33241: ADD
33242: ST_TO_ADDR
33243: GO 33156
33245: POP
33246: POP
// result := list ;
33247: LD_ADDR_VAR 0 2
33251: PUSH
33252: LD_VAR 0 5
33256: ST_TO_ADDR
// end ;
33257: LD_VAR 0 2
33261: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33262: LD_INT 0
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
// if not factory then
33271: LD_VAR 0 1
33275: NOT
33276: IFFALSE 33280
// exit ;
33278: GO 33873
// if control = control_apeman then
33280: LD_VAR 0 4
33284: PUSH
33285: LD_INT 5
33287: EQUAL
33288: IFFALSE 33397
// begin tmp := UnitsInside ( factory ) ;
33290: LD_ADDR_VAR 0 8
33294: PUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: CALL_OW 313
33304: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33305: LD_VAR 0 8
33309: PPUSH
33310: LD_INT 25
33312: PUSH
33313: LD_INT 12
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PPUSH
33320: CALL_OW 72
33324: NOT
33325: IFFALSE 33335
// control := control_manual ;
33327: LD_ADDR_VAR 0 4
33331: PUSH
33332: LD_INT 1
33334: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33335: LD_ADDR_VAR 0 8
33339: PUSH
33340: LD_VAR 0 1
33344: PPUSH
33345: CALL 33032 0 1
33349: ST_TO_ADDR
// if tmp then
33350: LD_VAR 0 8
33354: IFFALSE 33397
// begin for i in tmp do
33356: LD_ADDR_VAR 0 7
33360: PUSH
33361: LD_VAR 0 8
33365: PUSH
33366: FOR_IN
33367: IFFALSE 33395
// if i [ 1 ] = b_ext_radio then
33369: LD_VAR 0 7
33373: PUSH
33374: LD_INT 1
33376: ARRAY
33377: PUSH
33378: LD_INT 22
33380: EQUAL
33381: IFFALSE 33393
// begin control := control_remote ;
33383: LD_ADDR_VAR 0 4
33387: PUSH
33388: LD_INT 2
33390: ST_TO_ADDR
// break ;
33391: GO 33395
// end ;
33393: GO 33366
33395: POP
33396: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33397: LD_VAR 0 1
33401: PPUSH
33402: LD_VAR 0 2
33406: PPUSH
33407: LD_VAR 0 3
33411: PPUSH
33412: LD_VAR 0 4
33416: PPUSH
33417: LD_VAR 0 5
33421: PPUSH
33422: CALL_OW 448
33426: IFFALSE 33461
// begin result := [ chassis , engine , control , weapon ] ;
33428: LD_ADDR_VAR 0 6
33432: PUSH
33433: LD_VAR 0 2
33437: PUSH
33438: LD_VAR 0 3
33442: PUSH
33443: LD_VAR 0 4
33447: PUSH
33448: LD_VAR 0 5
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: ST_TO_ADDR
// exit ;
33459: GO 33873
// end ; _chassis := AvailableChassisList ( factory ) ;
33461: LD_ADDR_VAR 0 9
33465: PUSH
33466: LD_VAR 0 1
33470: PPUSH
33471: CALL_OW 475
33475: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33476: LD_ADDR_VAR 0 11
33480: PUSH
33481: LD_VAR 0 1
33485: PPUSH
33486: CALL_OW 476
33490: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33491: LD_ADDR_VAR 0 12
33495: PUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL_OW 477
33505: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33506: LD_ADDR_VAR 0 10
33510: PUSH
33511: LD_VAR 0 1
33515: PPUSH
33516: CALL_OW 478
33520: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33521: LD_VAR 0 9
33525: NOT
33526: PUSH
33527: LD_VAR 0 11
33531: NOT
33532: OR
33533: PUSH
33534: LD_VAR 0 12
33538: NOT
33539: OR
33540: PUSH
33541: LD_VAR 0 10
33545: NOT
33546: OR
33547: IFFALSE 33582
// begin result := [ chassis , engine , control , weapon ] ;
33549: LD_ADDR_VAR 0 6
33553: PUSH
33554: LD_VAR 0 2
33558: PUSH
33559: LD_VAR 0 3
33563: PUSH
33564: LD_VAR 0 4
33568: PUSH
33569: LD_VAR 0 5
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: ST_TO_ADDR
// exit ;
33580: GO 33873
// end ; if not chassis in _chassis then
33582: LD_VAR 0 2
33586: PUSH
33587: LD_VAR 0 9
33591: IN
33592: NOT
33593: IFFALSE 33619
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33595: LD_ADDR_VAR 0 2
33599: PUSH
33600: LD_VAR 0 9
33604: PUSH
33605: LD_INT 1
33607: PPUSH
33608: LD_VAR 0 9
33612: PPUSH
33613: CALL_OW 12
33617: ARRAY
33618: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33619: LD_VAR 0 2
33623: PPUSH
33624: LD_VAR 0 3
33628: PPUSH
33629: CALL 33878 0 2
33633: NOT
33634: IFFALSE 33693
// repeat engine := _engine [ 1 ] ;
33636: LD_ADDR_VAR 0 3
33640: PUSH
33641: LD_VAR 0 11
33645: PUSH
33646: LD_INT 1
33648: ARRAY
33649: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33650: LD_ADDR_VAR 0 11
33654: PUSH
33655: LD_VAR 0 11
33659: PPUSH
33660: LD_INT 1
33662: PPUSH
33663: CALL_OW 3
33667: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33668: LD_VAR 0 2
33672: PPUSH
33673: LD_VAR 0 3
33677: PPUSH
33678: CALL 33878 0 2
33682: PUSH
33683: LD_VAR 0 11
33687: PUSH
33688: EMPTY
33689: EQUAL
33690: OR
33691: IFFALSE 33636
// if not control in _control then
33693: LD_VAR 0 4
33697: PUSH
33698: LD_VAR 0 12
33702: IN
33703: NOT
33704: IFFALSE 33730
// control := _control [ rand ( 1 , _control ) ] ;
33706: LD_ADDR_VAR 0 4
33710: PUSH
33711: LD_VAR 0 12
33715: PUSH
33716: LD_INT 1
33718: PPUSH
33719: LD_VAR 0 12
33723: PPUSH
33724: CALL_OW 12
33728: ARRAY
33729: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33730: LD_VAR 0 2
33734: PPUSH
33735: LD_VAR 0 5
33739: PPUSH
33740: CALL 34098 0 2
33744: NOT
33745: IFFALSE 33804
// repeat weapon := _weapon [ 1 ] ;
33747: LD_ADDR_VAR 0 5
33751: PUSH
33752: LD_VAR 0 10
33756: PUSH
33757: LD_INT 1
33759: ARRAY
33760: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33761: LD_ADDR_VAR 0 10
33765: PUSH
33766: LD_VAR 0 10
33770: PPUSH
33771: LD_INT 1
33773: PPUSH
33774: CALL_OW 3
33778: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33779: LD_VAR 0 2
33783: PPUSH
33784: LD_VAR 0 5
33788: PPUSH
33789: CALL 34098 0 2
33793: PUSH
33794: LD_VAR 0 10
33798: PUSH
33799: EMPTY
33800: EQUAL
33801: OR
33802: IFFALSE 33747
// result := [ ] ;
33804: LD_ADDR_VAR 0 6
33808: PUSH
33809: EMPTY
33810: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33811: LD_VAR 0 1
33815: PPUSH
33816: LD_VAR 0 2
33820: PPUSH
33821: LD_VAR 0 3
33825: PPUSH
33826: LD_VAR 0 4
33830: PPUSH
33831: LD_VAR 0 5
33835: PPUSH
33836: CALL_OW 448
33840: IFFALSE 33873
// result := [ chassis , engine , control , weapon ] ;
33842: LD_ADDR_VAR 0 6
33846: PUSH
33847: LD_VAR 0 2
33851: PUSH
33852: LD_VAR 0 3
33856: PUSH
33857: LD_VAR 0 4
33861: PUSH
33862: LD_VAR 0 5
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// end ;
33873: LD_VAR 0 6
33877: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33878: LD_INT 0
33880: PPUSH
// if not chassis or not engine then
33881: LD_VAR 0 1
33885: NOT
33886: PUSH
33887: LD_VAR 0 2
33891: NOT
33892: OR
33893: IFFALSE 33897
// exit ;
33895: GO 34093
// case engine of engine_solar :
33897: LD_VAR 0 2
33901: PUSH
33902: LD_INT 2
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33910
33908: GO 33948
33910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33911: LD_ADDR_VAR 0 3
33915: PUSH
33916: LD_INT 11
33918: PUSH
33919: LD_INT 12
33921: PUSH
33922: LD_INT 13
33924: PUSH
33925: LD_INT 14
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: ST_TO_ADDR
33946: GO 34077
33948: LD_INT 1
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 34018
33956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33957: LD_ADDR_VAR 0 3
33961: PUSH
33962: LD_INT 11
33964: PUSH
33965: LD_INT 12
33967: PUSH
33968: LD_INT 13
33970: PUSH
33971: LD_INT 14
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: LD_INT 3
33982: PUSH
33983: LD_INT 4
33985: PUSH
33986: LD_INT 5
33988: PUSH
33989: LD_INT 21
33991: PUSH
33992: LD_INT 23
33994: PUSH
33995: LD_INT 22
33997: PUSH
33998: LD_INT 24
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: ST_TO_ADDR
34016: GO 34077
34018: LD_INT 3
34020: DOUBLE
34021: EQUAL
34022: IFTRUE 34026
34024: GO 34076
34026: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34027: LD_ADDR_VAR 0 3
34031: PUSH
34032: LD_INT 13
34034: PUSH
34035: LD_INT 14
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: LD_INT 3
34043: PUSH
34044: LD_INT 4
34046: PUSH
34047: LD_INT 5
34049: PUSH
34050: LD_INT 21
34052: PUSH
34053: LD_INT 22
34055: PUSH
34056: LD_INT 23
34058: PUSH
34059: LD_INT 24
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: ST_TO_ADDR
34074: GO 34077
34076: POP
// result := ( chassis in result ) ;
34077: LD_ADDR_VAR 0 3
34081: PUSH
34082: LD_VAR 0 1
34086: PUSH
34087: LD_VAR 0 3
34091: IN
34092: ST_TO_ADDR
// end ;
34093: LD_VAR 0 3
34097: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34098: LD_INT 0
34100: PPUSH
// if not chassis or not weapon then
34101: LD_VAR 0 1
34105: NOT
34106: PUSH
34107: LD_VAR 0 2
34111: NOT
34112: OR
34113: IFFALSE 34117
// exit ;
34115: GO 35177
// case weapon of us_machine_gun :
34117: LD_VAR 0 2
34121: PUSH
34122: LD_INT 2
34124: DOUBLE
34125: EQUAL
34126: IFTRUE 34130
34128: GO 34160
34130: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34131: LD_ADDR_VAR 0 3
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 3
34144: PUSH
34145: LD_INT 4
34147: PUSH
34148: LD_INT 5
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: ST_TO_ADDR
34158: GO 35161
34160: LD_INT 3
34162: DOUBLE
34163: EQUAL
34164: IFTRUE 34168
34166: GO 34198
34168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34169: LD_ADDR_VAR 0 3
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: LD_INT 3
34182: PUSH
34183: LD_INT 4
34185: PUSH
34186: LD_INT 5
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: ST_TO_ADDR
34196: GO 35161
34198: LD_INT 11
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34236
34206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34207: LD_ADDR_VAR 0 3
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: LD_INT 3
34220: PUSH
34221: LD_INT 4
34223: PUSH
34224: LD_INT 5
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: ST_TO_ADDR
34234: GO 35161
34236: LD_INT 4
34238: DOUBLE
34239: EQUAL
34240: IFTRUE 34244
34242: GO 34270
34244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34245: LD_ADDR_VAR 0 3
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 3
34255: PUSH
34256: LD_INT 4
34258: PUSH
34259: LD_INT 5
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
34268: GO 35161
34270: LD_INT 5
34272: DOUBLE
34273: EQUAL
34274: IFTRUE 34278
34276: GO 34304
34278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34279: LD_ADDR_VAR 0 3
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: LD_INT 4
34292: PUSH
34293: LD_INT 5
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: ST_TO_ADDR
34302: GO 35161
34304: LD_INT 9
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34312
34310: GO 34338
34312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34313: LD_ADDR_VAR 0 3
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 3
34323: PUSH
34324: LD_INT 4
34326: PUSH
34327: LD_INT 5
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: ST_TO_ADDR
34336: GO 35161
34338: LD_INT 7
34340: DOUBLE
34341: EQUAL
34342: IFTRUE 34346
34344: GO 34372
34346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34347: LD_ADDR_VAR 0 3
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: LD_INT 4
34360: PUSH
34361: LD_INT 5
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: ST_TO_ADDR
34370: GO 35161
34372: LD_INT 12
34374: DOUBLE
34375: EQUAL
34376: IFTRUE 34380
34378: GO 34406
34380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: LD_INT 4
34394: PUSH
34395: LD_INT 5
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: ST_TO_ADDR
34404: GO 35161
34406: LD_INT 13
34408: DOUBLE
34409: EQUAL
34410: IFTRUE 34414
34412: GO 34440
34414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: LD_INT 3
34425: PUSH
34426: LD_INT 4
34428: PUSH
34429: LD_INT 5
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: ST_TO_ADDR
34438: GO 35161
34440: LD_INT 14
34442: DOUBLE
34443: EQUAL
34444: IFTRUE 34448
34446: GO 34466
34448: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34449: LD_ADDR_VAR 0 3
34453: PUSH
34454: LD_INT 4
34456: PUSH
34457: LD_INT 5
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: ST_TO_ADDR
34464: GO 35161
34466: LD_INT 6
34468: DOUBLE
34469: EQUAL
34470: IFTRUE 34474
34472: GO 34492
34474: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34475: LD_ADDR_VAR 0 3
34479: PUSH
34480: LD_INT 4
34482: PUSH
34483: LD_INT 5
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: ST_TO_ADDR
34490: GO 35161
34492: LD_INT 10
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34500
34498: GO 34518
34500: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34501: LD_ADDR_VAR 0 3
34505: PUSH
34506: LD_INT 4
34508: PUSH
34509: LD_INT 5
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: ST_TO_ADDR
34516: GO 35161
34518: LD_INT 22
34520: DOUBLE
34521: EQUAL
34522: IFTRUE 34526
34524: GO 34552
34526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34527: LD_ADDR_VAR 0 3
34531: PUSH
34532: LD_INT 11
34534: PUSH
34535: LD_INT 12
34537: PUSH
34538: LD_INT 13
34540: PUSH
34541: LD_INT 14
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: ST_TO_ADDR
34550: GO 35161
34552: LD_INT 23
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34560
34558: GO 34586
34560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34561: LD_ADDR_VAR 0 3
34565: PUSH
34566: LD_INT 11
34568: PUSH
34569: LD_INT 12
34571: PUSH
34572: LD_INT 13
34574: PUSH
34575: LD_INT 14
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
34584: GO 35161
34586: LD_INT 24
34588: DOUBLE
34589: EQUAL
34590: IFTRUE 34594
34592: GO 34620
34594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34595: LD_ADDR_VAR 0 3
34599: PUSH
34600: LD_INT 11
34602: PUSH
34603: LD_INT 12
34605: PUSH
34606: LD_INT 13
34608: PUSH
34609: LD_INT 14
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: ST_TO_ADDR
34618: GO 35161
34620: LD_INT 30
34622: DOUBLE
34623: EQUAL
34624: IFTRUE 34628
34626: GO 34654
34628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34629: LD_ADDR_VAR 0 3
34633: PUSH
34634: LD_INT 11
34636: PUSH
34637: LD_INT 12
34639: PUSH
34640: LD_INT 13
34642: PUSH
34643: LD_INT 14
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: ST_TO_ADDR
34652: GO 35161
34654: LD_INT 25
34656: DOUBLE
34657: EQUAL
34658: IFTRUE 34662
34660: GO 34680
34662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34663: LD_ADDR_VAR 0 3
34667: PUSH
34668: LD_INT 13
34670: PUSH
34671: LD_INT 14
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: ST_TO_ADDR
34678: GO 35161
34680: LD_INT 27
34682: DOUBLE
34683: EQUAL
34684: IFTRUE 34688
34686: GO 34706
34688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34689: LD_ADDR_VAR 0 3
34693: PUSH
34694: LD_INT 13
34696: PUSH
34697: LD_INT 14
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: ST_TO_ADDR
34704: GO 35161
34706: LD_INT 92
34708: DOUBLE
34709: EQUAL
34710: IFTRUE 34714
34712: GO 34740
34714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34715: LD_ADDR_VAR 0 3
34719: PUSH
34720: LD_INT 11
34722: PUSH
34723: LD_INT 12
34725: PUSH
34726: LD_INT 13
34728: PUSH
34729: LD_INT 14
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: ST_TO_ADDR
34738: GO 35161
34740: LD_INT 28
34742: DOUBLE
34743: EQUAL
34744: IFTRUE 34748
34746: GO 34766
34748: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34749: LD_ADDR_VAR 0 3
34753: PUSH
34754: LD_INT 13
34756: PUSH
34757: LD_INT 14
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: ST_TO_ADDR
34764: GO 35161
34766: LD_INT 29
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34792
34774: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_INT 13
34782: PUSH
34783: LD_INT 14
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: ST_TO_ADDR
34790: GO 35161
34792: LD_INT 31
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34800
34798: GO 34818
34800: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34801: LD_ADDR_VAR 0 3
34805: PUSH
34806: LD_INT 13
34808: PUSH
34809: LD_INT 14
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: ST_TO_ADDR
34816: GO 35161
34818: LD_INT 26
34820: DOUBLE
34821: EQUAL
34822: IFTRUE 34826
34824: GO 34844
34826: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34827: LD_ADDR_VAR 0 3
34831: PUSH
34832: LD_INT 13
34834: PUSH
34835: LD_INT 14
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: ST_TO_ADDR
34842: GO 35161
34844: LD_INT 42
34846: DOUBLE
34847: EQUAL
34848: IFTRUE 34852
34850: GO 34878
34852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34853: LD_ADDR_VAR 0 3
34857: PUSH
34858: LD_INT 21
34860: PUSH
34861: LD_INT 22
34863: PUSH
34864: LD_INT 23
34866: PUSH
34867: LD_INT 24
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: ST_TO_ADDR
34876: GO 35161
34878: LD_INT 43
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34886
34884: GO 34912
34886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 21
34894: PUSH
34895: LD_INT 22
34897: PUSH
34898: LD_INT 23
34900: PUSH
34901: LD_INT 24
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: ST_TO_ADDR
34910: GO 35161
34912: LD_INT 44
34914: DOUBLE
34915: EQUAL
34916: IFTRUE 34920
34918: GO 34946
34920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34921: LD_ADDR_VAR 0 3
34925: PUSH
34926: LD_INT 21
34928: PUSH
34929: LD_INT 22
34931: PUSH
34932: LD_INT 23
34934: PUSH
34935: LD_INT 24
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
34944: GO 35161
34946: LD_INT 45
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34954
34952: GO 34980
34954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34955: LD_ADDR_VAR 0 3
34959: PUSH
34960: LD_INT 21
34962: PUSH
34963: LD_INT 22
34965: PUSH
34966: LD_INT 23
34968: PUSH
34969: LD_INT 24
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: ST_TO_ADDR
34978: GO 35161
34980: LD_INT 49
34982: DOUBLE
34983: EQUAL
34984: IFTRUE 34988
34986: GO 35014
34988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34989: LD_ADDR_VAR 0 3
34993: PUSH
34994: LD_INT 21
34996: PUSH
34997: LD_INT 22
34999: PUSH
35000: LD_INT 23
35002: PUSH
35003: LD_INT 24
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: ST_TO_ADDR
35012: GO 35161
35014: LD_INT 51
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35048
35022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_INT 21
35030: PUSH
35031: LD_INT 22
35033: PUSH
35034: LD_INT 23
35036: PUSH
35037: LD_INT 24
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: ST_TO_ADDR
35046: GO 35161
35048: LD_INT 52
35050: DOUBLE
35051: EQUAL
35052: IFTRUE 35056
35054: GO 35082
35056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35057: LD_ADDR_VAR 0 3
35061: PUSH
35062: LD_INT 21
35064: PUSH
35065: LD_INT 22
35067: PUSH
35068: LD_INT 23
35070: PUSH
35071: LD_INT 24
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: ST_TO_ADDR
35080: GO 35161
35082: LD_INT 53
35084: DOUBLE
35085: EQUAL
35086: IFTRUE 35090
35088: GO 35108
35090: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35091: LD_ADDR_VAR 0 3
35095: PUSH
35096: LD_INT 23
35098: PUSH
35099: LD_INT 24
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: ST_TO_ADDR
35106: GO 35161
35108: LD_INT 46
35110: DOUBLE
35111: EQUAL
35112: IFTRUE 35116
35114: GO 35134
35116: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35117: LD_ADDR_VAR 0 3
35121: PUSH
35122: LD_INT 23
35124: PUSH
35125: LD_INT 24
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: ST_TO_ADDR
35132: GO 35161
35134: LD_INT 47
35136: DOUBLE
35137: EQUAL
35138: IFTRUE 35142
35140: GO 35160
35142: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35143: LD_ADDR_VAR 0 3
35147: PUSH
35148: LD_INT 23
35150: PUSH
35151: LD_INT 24
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: ST_TO_ADDR
35158: GO 35161
35160: POP
// result := ( chassis in result ) ;
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_VAR 0 1
35170: PUSH
35171: LD_VAR 0 3
35175: IN
35176: ST_TO_ADDR
// end ;
35177: LD_VAR 0 3
35181: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35182: LD_INT 0
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
35189: PPUSH
35190: PPUSH
// result := array ;
35191: LD_ADDR_VAR 0 5
35195: PUSH
35196: LD_VAR 0 1
35200: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35201: LD_VAR 0 1
35205: NOT
35206: PUSH
35207: LD_VAR 0 2
35211: NOT
35212: OR
35213: PUSH
35214: LD_VAR 0 3
35218: NOT
35219: OR
35220: PUSH
35221: LD_VAR 0 2
35225: PUSH
35226: LD_VAR 0 1
35230: GREATER
35231: OR
35232: PUSH
35233: LD_VAR 0 3
35237: PUSH
35238: LD_VAR 0 1
35242: GREATER
35243: OR
35244: IFFALSE 35248
// exit ;
35246: GO 35544
// if direction then
35248: LD_VAR 0 4
35252: IFFALSE 35316
// begin d := 1 ;
35254: LD_ADDR_VAR 0 9
35258: PUSH
35259: LD_INT 1
35261: ST_TO_ADDR
// if i_from > i_to then
35262: LD_VAR 0 2
35266: PUSH
35267: LD_VAR 0 3
35271: GREATER
35272: IFFALSE 35298
// length := ( array - i_from ) + i_to else
35274: LD_ADDR_VAR 0 11
35278: PUSH
35279: LD_VAR 0 1
35283: PUSH
35284: LD_VAR 0 2
35288: MINUS
35289: PUSH
35290: LD_VAR 0 3
35294: PLUS
35295: ST_TO_ADDR
35296: GO 35314
// length := i_to - i_from ;
35298: LD_ADDR_VAR 0 11
35302: PUSH
35303: LD_VAR 0 3
35307: PUSH
35308: LD_VAR 0 2
35312: MINUS
35313: ST_TO_ADDR
// end else
35314: GO 35377
// begin d := - 1 ;
35316: LD_ADDR_VAR 0 9
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: ST_TO_ADDR
// if i_from > i_to then
35325: LD_VAR 0 2
35329: PUSH
35330: LD_VAR 0 3
35334: GREATER
35335: IFFALSE 35355
// length := i_from - i_to else
35337: LD_ADDR_VAR 0 11
35341: PUSH
35342: LD_VAR 0 2
35346: PUSH
35347: LD_VAR 0 3
35351: MINUS
35352: ST_TO_ADDR
35353: GO 35377
// length := ( array - i_to ) + i_from ;
35355: LD_ADDR_VAR 0 11
35359: PUSH
35360: LD_VAR 0 1
35364: PUSH
35365: LD_VAR 0 3
35369: MINUS
35370: PUSH
35371: LD_VAR 0 2
35375: PLUS
35376: ST_TO_ADDR
// end ; if not length then
35377: LD_VAR 0 11
35381: NOT
35382: IFFALSE 35386
// exit ;
35384: GO 35544
// tmp := array ;
35386: LD_ADDR_VAR 0 10
35390: PUSH
35391: LD_VAR 0 1
35395: ST_TO_ADDR
// for i = 1 to length do
35396: LD_ADDR_VAR 0 6
35400: PUSH
35401: DOUBLE
35402: LD_INT 1
35404: DEC
35405: ST_TO_ADDR
35406: LD_VAR 0 11
35410: PUSH
35411: FOR_TO
35412: IFFALSE 35532
// begin for j = 1 to array do
35414: LD_ADDR_VAR 0 7
35418: PUSH
35419: DOUBLE
35420: LD_INT 1
35422: DEC
35423: ST_TO_ADDR
35424: LD_VAR 0 1
35428: PUSH
35429: FOR_TO
35430: IFFALSE 35518
// begin k := j + d ;
35432: LD_ADDR_VAR 0 8
35436: PUSH
35437: LD_VAR 0 7
35441: PUSH
35442: LD_VAR 0 9
35446: PLUS
35447: ST_TO_ADDR
// if k > array then
35448: LD_VAR 0 8
35452: PUSH
35453: LD_VAR 0 1
35457: GREATER
35458: IFFALSE 35468
// k := 1 ;
35460: LD_ADDR_VAR 0 8
35464: PUSH
35465: LD_INT 1
35467: ST_TO_ADDR
// if not k then
35468: LD_VAR 0 8
35472: NOT
35473: IFFALSE 35485
// k := array ;
35475: LD_ADDR_VAR 0 8
35479: PUSH
35480: LD_VAR 0 1
35484: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35485: LD_ADDR_VAR 0 10
35489: PUSH
35490: LD_VAR 0 10
35494: PPUSH
35495: LD_VAR 0 8
35499: PPUSH
35500: LD_VAR 0 1
35504: PUSH
35505: LD_VAR 0 7
35509: ARRAY
35510: PPUSH
35511: CALL_OW 1
35515: ST_TO_ADDR
// end ;
35516: GO 35429
35518: POP
35519: POP
// array := tmp ;
35520: LD_ADDR_VAR 0 1
35524: PUSH
35525: LD_VAR 0 10
35529: ST_TO_ADDR
// end ;
35530: GO 35411
35532: POP
35533: POP
// result := array ;
35534: LD_ADDR_VAR 0 5
35538: PUSH
35539: LD_VAR 0 1
35543: ST_TO_ADDR
// end ;
35544: LD_VAR 0 5
35548: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35549: LD_INT 0
35551: PPUSH
35552: PPUSH
// result := 0 ;
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_INT 0
35560: ST_TO_ADDR
// if not array or not value in array then
35561: LD_VAR 0 1
35565: NOT
35566: PUSH
35567: LD_VAR 0 2
35571: PUSH
35572: LD_VAR 0 1
35576: IN
35577: NOT
35578: OR
35579: IFFALSE 35583
// exit ;
35581: GO 35637
// for i = 1 to array do
35583: LD_ADDR_VAR 0 4
35587: PUSH
35588: DOUBLE
35589: LD_INT 1
35591: DEC
35592: ST_TO_ADDR
35593: LD_VAR 0 1
35597: PUSH
35598: FOR_TO
35599: IFFALSE 35635
// if value = array [ i ] then
35601: LD_VAR 0 2
35605: PUSH
35606: LD_VAR 0 1
35610: PUSH
35611: LD_VAR 0 4
35615: ARRAY
35616: EQUAL
35617: IFFALSE 35633
// begin result := i ;
35619: LD_ADDR_VAR 0 3
35623: PUSH
35624: LD_VAR 0 4
35628: ST_TO_ADDR
// exit ;
35629: POP
35630: POP
35631: GO 35637
// end ;
35633: GO 35598
35635: POP
35636: POP
// end ;
35637: LD_VAR 0 3
35641: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35642: LD_INT 0
35644: PPUSH
// vc_chassis := chassis ;
35645: LD_ADDR_OWVAR 37
35649: PUSH
35650: LD_VAR 0 1
35654: ST_TO_ADDR
// vc_engine := engine ;
35655: LD_ADDR_OWVAR 39
35659: PUSH
35660: LD_VAR 0 2
35664: ST_TO_ADDR
// vc_control := control ;
35665: LD_ADDR_OWVAR 38
35669: PUSH
35670: LD_VAR 0 3
35674: ST_TO_ADDR
// vc_weapon := weapon ;
35675: LD_ADDR_OWVAR 40
35679: PUSH
35680: LD_VAR 0 4
35684: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35685: LD_ADDR_OWVAR 41
35689: PUSH
35690: LD_VAR 0 5
35694: ST_TO_ADDR
// end ;
35695: LD_VAR 0 6
35699: RET
// export function WantPlant ( unit ) ; var task ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
// result := false ;
35704: LD_ADDR_VAR 0 2
35708: PUSH
35709: LD_INT 0
35711: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35712: LD_ADDR_VAR 0 3
35716: PUSH
35717: LD_VAR 0 1
35721: PPUSH
35722: CALL_OW 437
35726: ST_TO_ADDR
// if task then
35727: LD_VAR 0 3
35731: IFFALSE 35759
// if task [ 1 ] [ 1 ] = p then
35733: LD_VAR 0 3
35737: PUSH
35738: LD_INT 1
35740: ARRAY
35741: PUSH
35742: LD_INT 1
35744: ARRAY
35745: PUSH
35746: LD_STRING p
35748: EQUAL
35749: IFFALSE 35759
// result := true ;
35751: LD_ADDR_VAR 0 2
35755: PUSH
35756: LD_INT 1
35758: ST_TO_ADDR
// end ;
35759: LD_VAR 0 2
35763: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35764: LD_INT 0
35766: PPUSH
35767: PPUSH
35768: PPUSH
35769: PPUSH
// if pos < 1 then
35770: LD_VAR 0 2
35774: PUSH
35775: LD_INT 1
35777: LESS
35778: IFFALSE 35782
// exit ;
35780: GO 36085
// if pos = 1 then
35782: LD_VAR 0 2
35786: PUSH
35787: LD_INT 1
35789: EQUAL
35790: IFFALSE 35823
// result := Replace ( arr , pos [ 1 ] , value ) else
35792: LD_ADDR_VAR 0 4
35796: PUSH
35797: LD_VAR 0 1
35801: PPUSH
35802: LD_VAR 0 2
35806: PUSH
35807: LD_INT 1
35809: ARRAY
35810: PPUSH
35811: LD_VAR 0 3
35815: PPUSH
35816: CALL_OW 1
35820: ST_TO_ADDR
35821: GO 36085
// begin tmp := arr ;
35823: LD_ADDR_VAR 0 6
35827: PUSH
35828: LD_VAR 0 1
35832: ST_TO_ADDR
// s_arr := [ tmp ] ;
35833: LD_ADDR_VAR 0 7
35837: PUSH
35838: LD_VAR 0 6
35842: PUSH
35843: EMPTY
35844: LIST
35845: ST_TO_ADDR
// for i = 1 to pos - 1 do
35846: LD_ADDR_VAR 0 5
35850: PUSH
35851: DOUBLE
35852: LD_INT 1
35854: DEC
35855: ST_TO_ADDR
35856: LD_VAR 0 2
35860: PUSH
35861: LD_INT 1
35863: MINUS
35864: PUSH
35865: FOR_TO
35866: IFFALSE 35911
// begin tmp := tmp [ pos [ i ] ] ;
35868: LD_ADDR_VAR 0 6
35872: PUSH
35873: LD_VAR 0 6
35877: PUSH
35878: LD_VAR 0 2
35882: PUSH
35883: LD_VAR 0 5
35887: ARRAY
35888: ARRAY
35889: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35890: LD_ADDR_VAR 0 7
35894: PUSH
35895: LD_VAR 0 7
35899: PUSH
35900: LD_VAR 0 6
35904: PUSH
35905: EMPTY
35906: LIST
35907: ADD
35908: ST_TO_ADDR
// end ;
35909: GO 35865
35911: POP
35912: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35913: LD_ADDR_VAR 0 6
35917: PUSH
35918: LD_VAR 0 6
35922: PPUSH
35923: LD_VAR 0 2
35927: PUSH
35928: LD_VAR 0 2
35932: ARRAY
35933: PPUSH
35934: LD_VAR 0 3
35938: PPUSH
35939: CALL_OW 1
35943: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35944: LD_ADDR_VAR 0 7
35948: PUSH
35949: LD_VAR 0 7
35953: PPUSH
35954: LD_VAR 0 7
35958: PPUSH
35959: LD_VAR 0 6
35963: PPUSH
35964: CALL_OW 1
35968: ST_TO_ADDR
// for i = s_arr downto 2 do
35969: LD_ADDR_VAR 0 5
35973: PUSH
35974: DOUBLE
35975: LD_VAR 0 7
35979: INC
35980: ST_TO_ADDR
35981: LD_INT 2
35983: PUSH
35984: FOR_DOWNTO
35985: IFFALSE 36069
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35987: LD_ADDR_VAR 0 6
35991: PUSH
35992: LD_VAR 0 7
35996: PUSH
35997: LD_VAR 0 5
36001: PUSH
36002: LD_INT 1
36004: MINUS
36005: ARRAY
36006: PPUSH
36007: LD_VAR 0 2
36011: PUSH
36012: LD_VAR 0 5
36016: PUSH
36017: LD_INT 1
36019: MINUS
36020: ARRAY
36021: PPUSH
36022: LD_VAR 0 7
36026: PUSH
36027: LD_VAR 0 5
36031: ARRAY
36032: PPUSH
36033: CALL_OW 1
36037: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36038: LD_ADDR_VAR 0 7
36042: PUSH
36043: LD_VAR 0 7
36047: PPUSH
36048: LD_VAR 0 5
36052: PUSH
36053: LD_INT 1
36055: MINUS
36056: PPUSH
36057: LD_VAR 0 6
36061: PPUSH
36062: CALL_OW 1
36066: ST_TO_ADDR
// end ;
36067: GO 35984
36069: POP
36070: POP
// result := s_arr [ 1 ] ;
36071: LD_ADDR_VAR 0 4
36075: PUSH
36076: LD_VAR 0 7
36080: PUSH
36081: LD_INT 1
36083: ARRAY
36084: ST_TO_ADDR
// end ; end ;
36085: LD_VAR 0 4
36089: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36090: LD_INT 0
36092: PPUSH
36093: PPUSH
// if not list then
36094: LD_VAR 0 1
36098: NOT
36099: IFFALSE 36103
// exit ;
36101: GO 36194
// i := list [ pos1 ] ;
36103: LD_ADDR_VAR 0 5
36107: PUSH
36108: LD_VAR 0 1
36112: PUSH
36113: LD_VAR 0 2
36117: ARRAY
36118: ST_TO_ADDR
// if not i then
36119: LD_VAR 0 5
36123: NOT
36124: IFFALSE 36128
// exit ;
36126: GO 36194
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36128: LD_ADDR_VAR 0 1
36132: PUSH
36133: LD_VAR 0 1
36137: PPUSH
36138: LD_VAR 0 2
36142: PPUSH
36143: LD_VAR 0 1
36147: PUSH
36148: LD_VAR 0 3
36152: ARRAY
36153: PPUSH
36154: CALL_OW 1
36158: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36159: LD_ADDR_VAR 0 1
36163: PUSH
36164: LD_VAR 0 1
36168: PPUSH
36169: LD_VAR 0 3
36173: PPUSH
36174: LD_VAR 0 5
36178: PPUSH
36179: CALL_OW 1
36183: ST_TO_ADDR
// result := list ;
36184: LD_ADDR_VAR 0 4
36188: PUSH
36189: LD_VAR 0 1
36193: ST_TO_ADDR
// end ;
36194: LD_VAR 0 4
36198: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36199: LD_INT 0
36201: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36202: LD_ADDR_VAR 0 5
36206: PUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL_OW 250
36216: PPUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 251
36226: PPUSH
36227: LD_VAR 0 2
36231: PPUSH
36232: LD_VAR 0 3
36236: PPUSH
36237: LD_VAR 0 4
36241: PPUSH
36242: CALL 36252 0 5
36246: ST_TO_ADDR
// end ;
36247: LD_VAR 0 5
36251: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36252: LD_INT 0
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
// if not list then
36258: LD_VAR 0 3
36262: NOT
36263: IFFALSE 36267
// exit ;
36265: GO 36655
// result := [ ] ;
36267: LD_ADDR_VAR 0 6
36271: PUSH
36272: EMPTY
36273: ST_TO_ADDR
// for i in list do
36274: LD_ADDR_VAR 0 7
36278: PUSH
36279: LD_VAR 0 3
36283: PUSH
36284: FOR_IN
36285: IFFALSE 36487
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36287: LD_ADDR_VAR 0 9
36291: PUSH
36292: LD_VAR 0 7
36296: PPUSH
36297: LD_VAR 0 1
36301: PPUSH
36302: LD_VAR 0 2
36306: PPUSH
36307: CALL_OW 297
36311: ST_TO_ADDR
// if not result then
36312: LD_VAR 0 6
36316: NOT
36317: IFFALSE 36343
// result := [ [ i , tmp ] ] else
36319: LD_ADDR_VAR 0 6
36323: PUSH
36324: LD_VAR 0 7
36328: PUSH
36329: LD_VAR 0 9
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: EMPTY
36339: LIST
36340: ST_TO_ADDR
36341: GO 36485
// begin if result [ result ] [ 2 ] < tmp then
36343: LD_VAR 0 6
36347: PUSH
36348: LD_VAR 0 6
36352: ARRAY
36353: PUSH
36354: LD_INT 2
36356: ARRAY
36357: PUSH
36358: LD_VAR 0 9
36362: LESS
36363: IFFALSE 36405
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36365: LD_ADDR_VAR 0 6
36369: PUSH
36370: LD_VAR 0 6
36374: PPUSH
36375: LD_VAR 0 6
36379: PUSH
36380: LD_INT 1
36382: PLUS
36383: PPUSH
36384: LD_VAR 0 7
36388: PUSH
36389: LD_VAR 0 9
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PPUSH
36398: CALL_OW 2
36402: ST_TO_ADDR
36403: GO 36485
// for j = 1 to result do
36405: LD_ADDR_VAR 0 8
36409: PUSH
36410: DOUBLE
36411: LD_INT 1
36413: DEC
36414: ST_TO_ADDR
36415: LD_VAR 0 6
36419: PUSH
36420: FOR_TO
36421: IFFALSE 36483
// begin if tmp < result [ j ] [ 2 ] then
36423: LD_VAR 0 9
36427: PUSH
36428: LD_VAR 0 6
36432: PUSH
36433: LD_VAR 0 8
36437: ARRAY
36438: PUSH
36439: LD_INT 2
36441: ARRAY
36442: LESS
36443: IFFALSE 36481
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36445: LD_ADDR_VAR 0 6
36449: PUSH
36450: LD_VAR 0 6
36454: PPUSH
36455: LD_VAR 0 8
36459: PPUSH
36460: LD_VAR 0 7
36464: PUSH
36465: LD_VAR 0 9
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PPUSH
36474: CALL_OW 2
36478: ST_TO_ADDR
// break ;
36479: GO 36483
// end ; end ;
36481: GO 36420
36483: POP
36484: POP
// end ; end ;
36485: GO 36284
36487: POP
36488: POP
// if result and not asc then
36489: LD_VAR 0 6
36493: PUSH
36494: LD_VAR 0 4
36498: NOT
36499: AND
36500: IFFALSE 36575
// begin tmp := result ;
36502: LD_ADDR_VAR 0 9
36506: PUSH
36507: LD_VAR 0 6
36511: ST_TO_ADDR
// for i = tmp downto 1 do
36512: LD_ADDR_VAR 0 7
36516: PUSH
36517: DOUBLE
36518: LD_VAR 0 9
36522: INC
36523: ST_TO_ADDR
36524: LD_INT 1
36526: PUSH
36527: FOR_DOWNTO
36528: IFFALSE 36573
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36530: LD_ADDR_VAR 0 6
36534: PUSH
36535: LD_VAR 0 6
36539: PPUSH
36540: LD_VAR 0 9
36544: PUSH
36545: LD_VAR 0 7
36549: MINUS
36550: PUSH
36551: LD_INT 1
36553: PLUS
36554: PPUSH
36555: LD_VAR 0 9
36559: PUSH
36560: LD_VAR 0 7
36564: ARRAY
36565: PPUSH
36566: CALL_OW 1
36570: ST_TO_ADDR
36571: GO 36527
36573: POP
36574: POP
// end ; tmp := [ ] ;
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: EMPTY
36581: ST_TO_ADDR
// if mode then
36582: LD_VAR 0 5
36586: IFFALSE 36655
// begin for i = 1 to result do
36588: LD_ADDR_VAR 0 7
36592: PUSH
36593: DOUBLE
36594: LD_INT 1
36596: DEC
36597: ST_TO_ADDR
36598: LD_VAR 0 6
36602: PUSH
36603: FOR_TO
36604: IFFALSE 36643
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36606: LD_ADDR_VAR 0 9
36610: PUSH
36611: LD_VAR 0 9
36615: PPUSH
36616: LD_VAR 0 7
36620: PPUSH
36621: LD_VAR 0 6
36625: PUSH
36626: LD_VAR 0 7
36630: ARRAY
36631: PUSH
36632: LD_INT 1
36634: ARRAY
36635: PPUSH
36636: CALL_OW 1
36640: ST_TO_ADDR
36641: GO 36603
36643: POP
36644: POP
// result := tmp ;
36645: LD_ADDR_VAR 0 6
36649: PUSH
36650: LD_VAR 0 9
36654: ST_TO_ADDR
// end ; end ;
36655: LD_VAR 0 6
36659: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36660: LD_INT 0
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36668: LD_ADDR_VAR 0 5
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: EMPTY
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// if not x or not y then
36690: LD_VAR 0 2
36694: NOT
36695: PUSH
36696: LD_VAR 0 3
36700: NOT
36701: OR
36702: IFFALSE 36706
// exit ;
36704: GO 38356
// if not range then
36706: LD_VAR 0 4
36710: NOT
36711: IFFALSE 36721
// range := 10 ;
36713: LD_ADDR_VAR 0 4
36717: PUSH
36718: LD_INT 10
36720: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36721: LD_ADDR_VAR 0 8
36725: PUSH
36726: LD_INT 81
36728: PUSH
36729: LD_VAR 0 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 92
36740: PUSH
36741: LD_VAR 0 2
36745: PUSH
36746: LD_VAR 0 3
36750: PUSH
36751: LD_VAR 0 4
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: LD_INT 21
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: PPUSH
36784: CALL_OW 69
36788: ST_TO_ADDR
// if not tmp then
36789: LD_VAR 0 8
36793: NOT
36794: IFFALSE 36798
// exit ;
36796: GO 38356
// for i in tmp do
36798: LD_ADDR_VAR 0 6
36802: PUSH
36803: LD_VAR 0 8
36807: PUSH
36808: FOR_IN
36809: IFFALSE 38331
// begin points := [ 0 , 0 , 0 ] ;
36811: LD_ADDR_VAR 0 9
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
// bpoints := 1 ;
36830: LD_ADDR_VAR 0 10
36834: PUSH
36835: LD_INT 1
36837: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36838: LD_VAR 0 6
36842: PPUSH
36843: CALL_OW 247
36847: PUSH
36848: LD_INT 1
36850: DOUBLE
36851: EQUAL
36852: IFTRUE 36856
36854: GO 37434
36856: POP
// begin if GetClass ( i ) = 1 then
36857: LD_VAR 0 6
36861: PPUSH
36862: CALL_OW 257
36866: PUSH
36867: LD_INT 1
36869: EQUAL
36870: IFFALSE 36891
// points := [ 10 , 5 , 3 ] ;
36872: LD_ADDR_VAR 0 9
36876: PUSH
36877: LD_INT 10
36879: PUSH
36880: LD_INT 5
36882: PUSH
36883: LD_INT 3
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 257
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: LD_INT 4
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: IN
36915: IFFALSE 36936
// points := [ 3 , 2 , 1 ] ;
36917: LD_ADDR_VAR 0 9
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36936: LD_VAR 0 6
36940: PPUSH
36941: CALL_OW 257
36945: PUSH
36946: LD_INT 5
36948: EQUAL
36949: IFFALSE 36970
// points := [ 130 , 5 , 2 ] ;
36951: LD_ADDR_VAR 0 9
36955: PUSH
36956: LD_INT 130
36958: PUSH
36959: LD_INT 5
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36970: LD_VAR 0 6
36974: PPUSH
36975: CALL_OW 257
36979: PUSH
36980: LD_INT 8
36982: EQUAL
36983: IFFALSE 37004
// points := [ 35 , 35 , 30 ] ;
36985: LD_ADDR_VAR 0 9
36989: PUSH
36990: LD_INT 35
36992: PUSH
36993: LD_INT 35
36995: PUSH
36996: LD_INT 30
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37004: LD_VAR 0 6
37008: PPUSH
37009: CALL_OW 257
37013: PUSH
37014: LD_INT 9
37016: EQUAL
37017: IFFALSE 37038
// points := [ 20 , 55 , 40 ] ;
37019: LD_ADDR_VAR 0 9
37023: PUSH
37024: LD_INT 20
37026: PUSH
37027: LD_INT 55
37029: PUSH
37030: LD_INT 40
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37038: LD_VAR 0 6
37042: PPUSH
37043: CALL_OW 257
37047: PUSH
37048: LD_INT 12
37050: PUSH
37051: LD_INT 16
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: IN
37058: IFFALSE 37079
// points := [ 5 , 3 , 2 ] ;
37060: LD_ADDR_VAR 0 9
37064: PUSH
37065: LD_INT 5
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: LD_INT 2
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37079: LD_VAR 0 6
37083: PPUSH
37084: CALL_OW 257
37088: PUSH
37089: LD_INT 17
37091: EQUAL
37092: IFFALSE 37113
// points := [ 100 , 50 , 75 ] ;
37094: LD_ADDR_VAR 0 9
37098: PUSH
37099: LD_INT 100
37101: PUSH
37102: LD_INT 50
37104: PUSH
37105: LD_INT 75
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37113: LD_VAR 0 6
37117: PPUSH
37118: CALL_OW 257
37122: PUSH
37123: LD_INT 15
37125: EQUAL
37126: IFFALSE 37147
// points := [ 10 , 5 , 3 ] ;
37128: LD_ADDR_VAR 0 9
37132: PUSH
37133: LD_INT 10
37135: PUSH
37136: LD_INT 5
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37147: LD_VAR 0 6
37151: PPUSH
37152: CALL_OW 257
37156: PUSH
37157: LD_INT 14
37159: EQUAL
37160: IFFALSE 37181
// points := [ 10 , 0 , 0 ] ;
37162: LD_ADDR_VAR 0 9
37166: PUSH
37167: LD_INT 10
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37181: LD_VAR 0 6
37185: PPUSH
37186: CALL_OW 257
37190: PUSH
37191: LD_INT 11
37193: EQUAL
37194: IFFALSE 37215
// points := [ 30 , 10 , 5 ] ;
37196: LD_ADDR_VAR 0 9
37200: PUSH
37201: LD_INT 30
37203: PUSH
37204: LD_INT 10
37206: PUSH
37207: LD_INT 5
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37215: LD_VAR 0 1
37219: PPUSH
37220: LD_INT 5
37222: PPUSH
37223: CALL_OW 321
37227: PUSH
37228: LD_INT 2
37230: EQUAL
37231: IFFALSE 37248
// bpoints := bpoints * 1.8 ;
37233: LD_ADDR_VAR 0 10
37237: PUSH
37238: LD_VAR 0 10
37242: PUSH
37243: LD_REAL  1.80000000000000E+0000
37246: MUL
37247: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37248: LD_VAR 0 6
37252: PPUSH
37253: CALL_OW 257
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: LD_INT 4
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: IN
37276: PUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: LD_INT 51
37284: PPUSH
37285: CALL_OW 321
37289: PUSH
37290: LD_INT 2
37292: EQUAL
37293: AND
37294: IFFALSE 37311
// bpoints := bpoints * 1.2 ;
37296: LD_ADDR_VAR 0 10
37300: PUSH
37301: LD_VAR 0 10
37305: PUSH
37306: LD_REAL  1.20000000000000E+0000
37309: MUL
37310: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37311: LD_VAR 0 6
37315: PPUSH
37316: CALL_OW 257
37320: PUSH
37321: LD_INT 5
37323: PUSH
37324: LD_INT 7
37326: PUSH
37327: LD_INT 9
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: IN
37335: PUSH
37336: LD_VAR 0 1
37340: PPUSH
37341: LD_INT 52
37343: PPUSH
37344: CALL_OW 321
37348: PUSH
37349: LD_INT 2
37351: EQUAL
37352: AND
37353: IFFALSE 37370
// bpoints := bpoints * 1.5 ;
37355: LD_ADDR_VAR 0 10
37359: PUSH
37360: LD_VAR 0 10
37364: PUSH
37365: LD_REAL  1.50000000000000E+0000
37368: MUL
37369: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37370: LD_VAR 0 1
37374: PPUSH
37375: LD_INT 66
37377: PPUSH
37378: CALL_OW 321
37382: PUSH
37383: LD_INT 2
37385: EQUAL
37386: IFFALSE 37403
// bpoints := bpoints * 1.1 ;
37388: LD_ADDR_VAR 0 10
37392: PUSH
37393: LD_VAR 0 10
37397: PUSH
37398: LD_REAL  1.10000000000000E+0000
37401: MUL
37402: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37403: LD_ADDR_VAR 0 10
37407: PUSH
37408: LD_VAR 0 10
37412: PUSH
37413: LD_VAR 0 6
37417: PPUSH
37418: LD_INT 1
37420: PPUSH
37421: CALL_OW 259
37425: PUSH
37426: LD_REAL  1.15000000000000E+0000
37429: MUL
37430: MUL
37431: ST_TO_ADDR
// end ; unit_vehicle :
37432: GO 38260
37434: LD_INT 2
37436: DOUBLE
37437: EQUAL
37438: IFTRUE 37442
37440: GO 38248
37442: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37443: LD_VAR 0 6
37447: PPUSH
37448: CALL_OW 264
37452: PUSH
37453: LD_INT 2
37455: PUSH
37456: LD_INT 42
37458: PUSH
37459: LD_INT 24
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: IN
37467: IFFALSE 37488
// points := [ 25 , 5 , 3 ] ;
37469: LD_ADDR_VAR 0 9
37473: PUSH
37474: LD_INT 25
37476: PUSH
37477: LD_INT 5
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37488: LD_VAR 0 6
37492: PPUSH
37493: CALL_OW 264
37497: PUSH
37498: LD_INT 4
37500: PUSH
37501: LD_INT 43
37503: PUSH
37504: LD_INT 25
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: IN
37512: IFFALSE 37533
// points := [ 40 , 15 , 5 ] ;
37514: LD_ADDR_VAR 0 9
37518: PUSH
37519: LD_INT 40
37521: PUSH
37522: LD_INT 15
37524: PUSH
37525: LD_INT 5
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: LIST
37532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37533: LD_VAR 0 6
37537: PPUSH
37538: CALL_OW 264
37542: PUSH
37543: LD_INT 3
37545: PUSH
37546: LD_INT 23
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: IN
37553: IFFALSE 37574
// points := [ 7 , 25 , 8 ] ;
37555: LD_ADDR_VAR 0 9
37559: PUSH
37560: LD_INT 7
37562: PUSH
37563: LD_INT 25
37565: PUSH
37566: LD_INT 8
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37574: LD_VAR 0 6
37578: PPUSH
37579: CALL_OW 264
37583: PUSH
37584: LD_INT 5
37586: PUSH
37587: LD_INT 27
37589: PUSH
37590: LD_INT 44
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: IN
37598: IFFALSE 37619
// points := [ 14 , 50 , 16 ] ;
37600: LD_ADDR_VAR 0 9
37604: PUSH
37605: LD_INT 14
37607: PUSH
37608: LD_INT 50
37610: PUSH
37611: LD_INT 16
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37619: LD_VAR 0 6
37623: PPUSH
37624: CALL_OW 264
37628: PUSH
37629: LD_INT 6
37631: PUSH
37632: LD_INT 46
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: IN
37639: IFFALSE 37660
// points := [ 32 , 120 , 70 ] ;
37641: LD_ADDR_VAR 0 9
37645: PUSH
37646: LD_INT 32
37648: PUSH
37649: LD_INT 120
37651: PUSH
37652: LD_INT 70
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37660: LD_VAR 0 6
37664: PPUSH
37665: CALL_OW 264
37669: PUSH
37670: LD_INT 7
37672: PUSH
37673: LD_INT 28
37675: PUSH
37676: LD_INT 45
37678: PUSH
37679: LD_INT 92
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: IN
37688: IFFALSE 37709
// points := [ 35 , 20 , 45 ] ;
37690: LD_ADDR_VAR 0 9
37694: PUSH
37695: LD_INT 35
37697: PUSH
37698: LD_INT 20
37700: PUSH
37701: LD_INT 45
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37709: LD_VAR 0 6
37713: PPUSH
37714: CALL_OW 264
37718: PUSH
37719: LD_INT 47
37721: PUSH
37722: EMPTY
37723: LIST
37724: IN
37725: IFFALSE 37746
// points := [ 67 , 45 , 75 ] ;
37727: LD_ADDR_VAR 0 9
37731: PUSH
37732: LD_INT 67
37734: PUSH
37735: LD_INT 45
37737: PUSH
37738: LD_INT 75
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37746: LD_VAR 0 6
37750: PPUSH
37751: CALL_OW 264
37755: PUSH
37756: LD_INT 26
37758: PUSH
37759: EMPTY
37760: LIST
37761: IN
37762: IFFALSE 37783
// points := [ 120 , 30 , 80 ] ;
37764: LD_ADDR_VAR 0 9
37768: PUSH
37769: LD_INT 120
37771: PUSH
37772: LD_INT 30
37774: PUSH
37775: LD_INT 80
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37783: LD_VAR 0 6
37787: PPUSH
37788: CALL_OW 264
37792: PUSH
37793: LD_INT 22
37795: PUSH
37796: EMPTY
37797: LIST
37798: IN
37799: IFFALSE 37820
// points := [ 40 , 1 , 1 ] ;
37801: LD_ADDR_VAR 0 9
37805: PUSH
37806: LD_INT 40
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37820: LD_VAR 0 6
37824: PPUSH
37825: CALL_OW 264
37829: PUSH
37830: LD_INT 29
37832: PUSH
37833: EMPTY
37834: LIST
37835: IN
37836: IFFALSE 37857
// points := [ 70 , 200 , 400 ] ;
37838: LD_ADDR_VAR 0 9
37842: PUSH
37843: LD_INT 70
37845: PUSH
37846: LD_INT 200
37848: PUSH
37849: LD_INT 400
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37857: LD_VAR 0 6
37861: PPUSH
37862: CALL_OW 264
37866: PUSH
37867: LD_INT 14
37869: PUSH
37870: LD_INT 53
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: IN
37877: IFFALSE 37898
// points := [ 40 , 10 , 20 ] ;
37879: LD_ADDR_VAR 0 9
37883: PUSH
37884: LD_INT 40
37886: PUSH
37887: LD_INT 10
37889: PUSH
37890: LD_INT 20
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: LIST
37897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37898: LD_VAR 0 6
37902: PPUSH
37903: CALL_OW 264
37907: PUSH
37908: LD_INT 9
37910: PUSH
37911: EMPTY
37912: LIST
37913: IN
37914: IFFALSE 37935
// points := [ 5 , 70 , 20 ] ;
37916: LD_ADDR_VAR 0 9
37920: PUSH
37921: LD_INT 5
37923: PUSH
37924: LD_INT 70
37926: PUSH
37927: LD_INT 20
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: LIST
37934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37935: LD_VAR 0 6
37939: PPUSH
37940: CALL_OW 264
37944: PUSH
37945: LD_INT 10
37947: PUSH
37948: EMPTY
37949: LIST
37950: IN
37951: IFFALSE 37972
// points := [ 35 , 110 , 70 ] ;
37953: LD_ADDR_VAR 0 9
37957: PUSH
37958: LD_INT 35
37960: PUSH
37961: LD_INT 110
37963: PUSH
37964: LD_INT 70
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37972: LD_VAR 0 6
37976: PPUSH
37977: CALL_OW 265
37981: PUSH
37982: LD_INT 25
37984: EQUAL
37985: IFFALSE 38006
// points := [ 80 , 65 , 100 ] ;
37987: LD_ADDR_VAR 0 9
37991: PUSH
37992: LD_INT 80
37994: PUSH
37995: LD_INT 65
37997: PUSH
37998: LD_INT 100
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38006: LD_VAR 0 6
38010: PPUSH
38011: CALL_OW 263
38015: PUSH
38016: LD_INT 1
38018: EQUAL
38019: IFFALSE 38054
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38021: LD_ADDR_VAR 0 10
38025: PUSH
38026: LD_VAR 0 10
38030: PUSH
38031: LD_VAR 0 6
38035: PPUSH
38036: CALL_OW 311
38040: PPUSH
38041: LD_INT 3
38043: PPUSH
38044: CALL_OW 259
38048: PUSH
38049: LD_INT 4
38051: MUL
38052: MUL
38053: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38054: LD_VAR 0 6
38058: PPUSH
38059: CALL_OW 263
38063: PUSH
38064: LD_INT 2
38066: EQUAL
38067: IFFALSE 38118
// begin j := IsControledBy ( i ) ;
38069: LD_ADDR_VAR 0 7
38073: PUSH
38074: LD_VAR 0 6
38078: PPUSH
38079: CALL_OW 312
38083: ST_TO_ADDR
// if j then
38084: LD_VAR 0 7
38088: IFFALSE 38118
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38090: LD_ADDR_VAR 0 10
38094: PUSH
38095: LD_VAR 0 10
38099: PUSH
38100: LD_VAR 0 7
38104: PPUSH
38105: LD_INT 3
38107: PPUSH
38108: CALL_OW 259
38112: PUSH
38113: LD_INT 3
38115: MUL
38116: MUL
38117: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38118: LD_VAR 0 6
38122: PPUSH
38123: CALL_OW 264
38127: PUSH
38128: LD_INT 5
38130: PUSH
38131: LD_INT 6
38133: PUSH
38134: LD_INT 46
38136: PUSH
38137: LD_INT 44
38139: PUSH
38140: LD_INT 47
38142: PUSH
38143: LD_INT 45
38145: PUSH
38146: LD_INT 28
38148: PUSH
38149: LD_INT 7
38151: PUSH
38152: LD_INT 27
38154: PUSH
38155: LD_INT 29
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: IN
38170: PUSH
38171: LD_VAR 0 1
38175: PPUSH
38176: LD_INT 52
38178: PPUSH
38179: CALL_OW 321
38183: PUSH
38184: LD_INT 2
38186: EQUAL
38187: AND
38188: IFFALSE 38205
// bpoints := bpoints * 1.2 ;
38190: LD_ADDR_VAR 0 10
38194: PUSH
38195: LD_VAR 0 10
38199: PUSH
38200: LD_REAL  1.20000000000000E+0000
38203: MUL
38204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38205: LD_VAR 0 6
38209: PPUSH
38210: CALL_OW 264
38214: PUSH
38215: LD_INT 6
38217: PUSH
38218: LD_INT 46
38220: PUSH
38221: LD_INT 47
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: IN
38229: IFFALSE 38246
// bpoints := bpoints * 1.2 ;
38231: LD_ADDR_VAR 0 10
38235: PUSH
38236: LD_VAR 0 10
38240: PUSH
38241: LD_REAL  1.20000000000000E+0000
38244: MUL
38245: ST_TO_ADDR
// end ; unit_building :
38246: GO 38260
38248: LD_INT 3
38250: DOUBLE
38251: EQUAL
38252: IFTRUE 38256
38254: GO 38259
38256: POP
// ; end ;
38257: GO 38260
38259: POP
// for j = 1 to 3 do
38260: LD_ADDR_VAR 0 7
38264: PUSH
38265: DOUBLE
38266: LD_INT 1
38268: DEC
38269: ST_TO_ADDR
38270: LD_INT 3
38272: PUSH
38273: FOR_TO
38274: IFFALSE 38327
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38276: LD_ADDR_VAR 0 5
38280: PUSH
38281: LD_VAR 0 5
38285: PPUSH
38286: LD_VAR 0 7
38290: PPUSH
38291: LD_VAR 0 5
38295: PUSH
38296: LD_VAR 0 7
38300: ARRAY
38301: PUSH
38302: LD_VAR 0 9
38306: PUSH
38307: LD_VAR 0 7
38311: ARRAY
38312: PUSH
38313: LD_VAR 0 10
38317: MUL
38318: PLUS
38319: PPUSH
38320: CALL_OW 1
38324: ST_TO_ADDR
38325: GO 38273
38327: POP
38328: POP
// end ;
38329: GO 36808
38331: POP
38332: POP
// result := Replace ( result , 4 , tmp ) ;
38333: LD_ADDR_VAR 0 5
38337: PUSH
38338: LD_VAR 0 5
38342: PPUSH
38343: LD_INT 4
38345: PPUSH
38346: LD_VAR 0 8
38350: PPUSH
38351: CALL_OW 1
38355: ST_TO_ADDR
// end ;
38356: LD_VAR 0 5
38360: RET
// export function DangerAtRange ( unit , range ) ; begin
38361: LD_INT 0
38363: PPUSH
// if not unit then
38364: LD_VAR 0 1
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38418
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38373: LD_ADDR_VAR 0 3
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: CALL_OW 255
38387: PPUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: CALL_OW 250
38397: PPUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 251
38407: PPUSH
38408: LD_VAR 0 2
38412: PPUSH
38413: CALL 36660 0 4
38417: ST_TO_ADDR
// end ;
38418: LD_VAR 0 3
38422: RET
// export function DangerInArea ( side , area ) ; begin
38423: LD_INT 0
38425: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38426: LD_ADDR_VAR 0 3
38430: PUSH
38431: LD_VAR 0 2
38435: PPUSH
38436: LD_INT 81
38438: PUSH
38439: LD_VAR 0 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PPUSH
38448: CALL_OW 70
38452: ST_TO_ADDR
// end ;
38453: LD_VAR 0 3
38457: RET
// export function IsExtension ( b ) ; begin
38458: LD_INT 0
38460: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38461: LD_ADDR_VAR 0 2
38465: PUSH
38466: LD_VAR 0 1
38470: PUSH
38471: LD_INT 23
38473: PUSH
38474: LD_INT 20
38476: PUSH
38477: LD_INT 22
38479: PUSH
38480: LD_INT 17
38482: PUSH
38483: LD_INT 24
38485: PUSH
38486: LD_INT 21
38488: PUSH
38489: LD_INT 19
38491: PUSH
38492: LD_INT 16
38494: PUSH
38495: LD_INT 25
38497: PUSH
38498: LD_INT 18
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: IN
38513: ST_TO_ADDR
// end ;
38514: LD_VAR 0 2
38518: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38519: LD_INT 0
38521: PPUSH
38522: PPUSH
38523: PPUSH
// result := [ ] ;
38524: LD_ADDR_VAR 0 4
38528: PUSH
38529: EMPTY
38530: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38531: LD_ADDR_VAR 0 5
38535: PUSH
38536: LD_VAR 0 2
38540: PPUSH
38541: LD_INT 21
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 70
38555: ST_TO_ADDR
// if not tmp then
38556: LD_VAR 0 5
38560: NOT
38561: IFFALSE 38565
// exit ;
38563: GO 38629
// if checkLink then
38565: LD_VAR 0 3
38569: IFFALSE 38619
// begin for i in tmp do
38571: LD_ADDR_VAR 0 6
38575: PUSH
38576: LD_VAR 0 5
38580: PUSH
38581: FOR_IN
38582: IFFALSE 38617
// if GetBase ( i ) <> base then
38584: LD_VAR 0 6
38588: PPUSH
38589: CALL_OW 274
38593: PUSH
38594: LD_VAR 0 1
38598: NONEQUAL
38599: IFFALSE 38615
// ComLinkToBase ( base , i ) ;
38601: LD_VAR 0 1
38605: PPUSH
38606: LD_VAR 0 6
38610: PPUSH
38611: CALL_OW 169
38615: GO 38581
38617: POP
38618: POP
// end ; result := tmp ;
38619: LD_ADDR_VAR 0 4
38623: PUSH
38624: LD_VAR 0 5
38628: ST_TO_ADDR
// end ;
38629: LD_VAR 0 4
38633: RET
// export function ComComplete ( units , b ) ; var i ; begin
38634: LD_INT 0
38636: PPUSH
38637: PPUSH
// if not units then
38638: LD_VAR 0 1
38642: NOT
38643: IFFALSE 38647
// exit ;
38645: GO 38737
// for i in units do
38647: LD_ADDR_VAR 0 4
38651: PUSH
38652: LD_VAR 0 1
38656: PUSH
38657: FOR_IN
38658: IFFALSE 38735
// if BuildingStatus ( b ) = bs_build then
38660: LD_VAR 0 2
38664: PPUSH
38665: CALL_OW 461
38669: PUSH
38670: LD_INT 1
38672: EQUAL
38673: IFFALSE 38733
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38675: LD_VAR 0 4
38679: PPUSH
38680: LD_STRING h
38682: PUSH
38683: LD_VAR 0 2
38687: PPUSH
38688: CALL_OW 250
38692: PUSH
38693: LD_VAR 0 2
38697: PPUSH
38698: CALL_OW 251
38702: PUSH
38703: LD_VAR 0 2
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: PPUSH
38729: CALL_OW 446
38733: GO 38657
38735: POP
38736: POP
// end ;
38737: LD_VAR 0 3
38741: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38742: LD_INT 0
38744: PPUSH
38745: PPUSH
38746: PPUSH
38747: PPUSH
38748: PPUSH
38749: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38750: LD_VAR 0 1
38754: NOT
38755: PUSH
38756: LD_VAR 0 1
38760: PPUSH
38761: CALL_OW 263
38765: PUSH
38766: LD_INT 2
38768: NONEQUAL
38769: OR
38770: IFFALSE 38774
// exit ;
38772: GO 39090
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38774: LD_ADDR_VAR 0 6
38778: PUSH
38779: LD_INT 22
38781: PUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: CALL_OW 255
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 30
38801: PUSH
38802: LD_INT 36
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 34
38811: PUSH
38812: LD_INT 31
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PPUSH
38828: CALL_OW 69
38832: ST_TO_ADDR
// if not tmp then
38833: LD_VAR 0 6
38837: NOT
38838: IFFALSE 38842
// exit ;
38840: GO 39090
// result := [ ] ;
38842: LD_ADDR_VAR 0 2
38846: PUSH
38847: EMPTY
38848: ST_TO_ADDR
// for i in tmp do
38849: LD_ADDR_VAR 0 3
38853: PUSH
38854: LD_VAR 0 6
38858: PUSH
38859: FOR_IN
38860: IFFALSE 38931
// begin t := UnitsInside ( i ) ;
38862: LD_ADDR_VAR 0 4
38866: PUSH
38867: LD_VAR 0 3
38871: PPUSH
38872: CALL_OW 313
38876: ST_TO_ADDR
// if t then
38877: LD_VAR 0 4
38881: IFFALSE 38929
// for j in t do
38883: LD_ADDR_VAR 0 7
38887: PUSH
38888: LD_VAR 0 4
38892: PUSH
38893: FOR_IN
38894: IFFALSE 38927
// result := Replace ( result , result + 1 , j ) ;
38896: LD_ADDR_VAR 0 2
38900: PUSH
38901: LD_VAR 0 2
38905: PPUSH
38906: LD_VAR 0 2
38910: PUSH
38911: LD_INT 1
38913: PLUS
38914: PPUSH
38915: LD_VAR 0 7
38919: PPUSH
38920: CALL_OW 1
38924: ST_TO_ADDR
38925: GO 38893
38927: POP
38928: POP
// end ;
38929: GO 38859
38931: POP
38932: POP
// if not result then
38933: LD_VAR 0 2
38937: NOT
38938: IFFALSE 38942
// exit ;
38940: GO 39090
// mech := result [ 1 ] ;
38942: LD_ADDR_VAR 0 5
38946: PUSH
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: ST_TO_ADDR
// if result > 1 then
38956: LD_VAR 0 2
38960: PUSH
38961: LD_INT 1
38963: GREATER
38964: IFFALSE 39076
// begin for i = 2 to result do
38966: LD_ADDR_VAR 0 3
38970: PUSH
38971: DOUBLE
38972: LD_INT 2
38974: DEC
38975: ST_TO_ADDR
38976: LD_VAR 0 2
38980: PUSH
38981: FOR_TO
38982: IFFALSE 39074
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38984: LD_ADDR_VAR 0 4
38988: PUSH
38989: LD_VAR 0 2
38993: PUSH
38994: LD_VAR 0 3
38998: ARRAY
38999: PPUSH
39000: LD_INT 3
39002: PPUSH
39003: CALL_OW 259
39007: PUSH
39008: LD_VAR 0 2
39012: PUSH
39013: LD_VAR 0 3
39017: ARRAY
39018: PPUSH
39019: CALL_OW 432
39023: MINUS
39024: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39025: LD_VAR 0 4
39029: PUSH
39030: LD_VAR 0 5
39034: PPUSH
39035: LD_INT 3
39037: PPUSH
39038: CALL_OW 259
39042: PUSH
39043: LD_VAR 0 5
39047: PPUSH
39048: CALL_OW 432
39052: MINUS
39053: GREATEREQUAL
39054: IFFALSE 39072
// mech := result [ i ] ;
39056: LD_ADDR_VAR 0 5
39060: PUSH
39061: LD_VAR 0 2
39065: PUSH
39066: LD_VAR 0 3
39070: ARRAY
39071: ST_TO_ADDR
// end ;
39072: GO 38981
39074: POP
39075: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39076: LD_VAR 0 1
39080: PPUSH
39081: LD_VAR 0 5
39085: PPUSH
39086: CALL_OW 135
// end ;
39090: LD_VAR 0 2
39094: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39095: LD_INT 0
39097: PPUSH
39098: PPUSH
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
// result := [ ] ;
39110: LD_ADDR_VAR 0 7
39114: PUSH
39115: EMPTY
39116: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39117: LD_VAR 0 1
39121: PPUSH
39122: CALL_OW 266
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: IN
39137: NOT
39138: IFFALSE 39142
// exit ;
39140: GO 40776
// if name then
39142: LD_VAR 0 3
39146: IFFALSE 39162
// SetBName ( base_dep , name ) ;
39148: LD_VAR 0 1
39152: PPUSH
39153: LD_VAR 0 3
39157: PPUSH
39158: CALL_OW 500
// base := GetBase ( base_dep ) ;
39162: LD_ADDR_VAR 0 15
39166: PUSH
39167: LD_VAR 0 1
39171: PPUSH
39172: CALL_OW 274
39176: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39177: LD_ADDR_VAR 0 16
39181: PUSH
39182: LD_VAR 0 1
39186: PPUSH
39187: CALL_OW 255
39191: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39192: LD_ADDR_VAR 0 17
39196: PUSH
39197: LD_VAR 0 1
39201: PPUSH
39202: CALL_OW 248
39206: ST_TO_ADDR
// if sources then
39207: LD_VAR 0 5
39211: IFFALSE 39258
// for i = 1 to 3 do
39213: LD_ADDR_VAR 0 8
39217: PUSH
39218: DOUBLE
39219: LD_INT 1
39221: DEC
39222: ST_TO_ADDR
39223: LD_INT 3
39225: PUSH
39226: FOR_TO
39227: IFFALSE 39256
// AddResourceType ( base , i , sources [ i ] ) ;
39229: LD_VAR 0 15
39233: PPUSH
39234: LD_VAR 0 8
39238: PPUSH
39239: LD_VAR 0 5
39243: PUSH
39244: LD_VAR 0 8
39248: ARRAY
39249: PPUSH
39250: CALL_OW 276
39254: GO 39226
39256: POP
39257: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39258: LD_ADDR_VAR 0 18
39262: PUSH
39263: LD_VAR 0 15
39267: PPUSH
39268: LD_VAR 0 2
39272: PPUSH
39273: LD_INT 1
39275: PPUSH
39276: CALL 38519 0 3
39280: ST_TO_ADDR
// InitHc ;
39281: CALL_OW 19
// InitUc ;
39285: CALL_OW 18
// uc_side := side ;
39289: LD_ADDR_OWVAR 20
39293: PUSH
39294: LD_VAR 0 16
39298: ST_TO_ADDR
// uc_nation := nation ;
39299: LD_ADDR_OWVAR 21
39303: PUSH
39304: LD_VAR 0 17
39308: ST_TO_ADDR
// if buildings then
39309: LD_VAR 0 18
39313: IFFALSE 40635
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39315: LD_ADDR_VAR 0 19
39319: PUSH
39320: LD_VAR 0 18
39324: PPUSH
39325: LD_INT 2
39327: PUSH
39328: LD_INT 30
39330: PUSH
39331: LD_INT 29
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 30
39340: PUSH
39341: LD_INT 30
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: PPUSH
39353: CALL_OW 72
39357: ST_TO_ADDR
// if tmp then
39358: LD_VAR 0 19
39362: IFFALSE 39410
// for i in tmp do
39364: LD_ADDR_VAR 0 8
39368: PUSH
39369: LD_VAR 0 19
39373: PUSH
39374: FOR_IN
39375: IFFALSE 39408
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39377: LD_VAR 0 8
39381: PPUSH
39382: CALL_OW 250
39386: PPUSH
39387: LD_VAR 0 8
39391: PPUSH
39392: CALL_OW 251
39396: PPUSH
39397: LD_VAR 0 16
39401: PPUSH
39402: CALL_OW 441
39406: GO 39374
39408: POP
39409: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39410: LD_VAR 0 18
39414: PPUSH
39415: LD_INT 2
39417: PUSH
39418: LD_INT 30
39420: PUSH
39421: LD_INT 32
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 30
39430: PUSH
39431: LD_INT 33
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: PPUSH
39443: CALL_OW 72
39447: IFFALSE 39535
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39449: LD_ADDR_VAR 0 8
39453: PUSH
39454: LD_VAR 0 18
39458: PPUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 30
39464: PUSH
39465: LD_INT 32
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 30
39474: PUSH
39475: LD_INT 33
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: PPUSH
39487: CALL_OW 72
39491: PUSH
39492: FOR_IN
39493: IFFALSE 39533
// begin if not GetBWeapon ( i ) then
39495: LD_VAR 0 8
39499: PPUSH
39500: CALL_OW 269
39504: NOT
39505: IFFALSE 39531
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39507: LD_VAR 0 8
39511: PPUSH
39512: LD_VAR 0 8
39516: PPUSH
39517: LD_VAR 0 2
39521: PPUSH
39522: CALL 40781 0 2
39526: PPUSH
39527: CALL_OW 431
// end ;
39531: GO 39492
39533: POP
39534: POP
// end ; for i = 1 to personel do
39535: LD_ADDR_VAR 0 8
39539: PUSH
39540: DOUBLE
39541: LD_INT 1
39543: DEC
39544: ST_TO_ADDR
39545: LD_VAR 0 6
39549: PUSH
39550: FOR_TO
39551: IFFALSE 40615
// begin if i > 4 then
39553: LD_VAR 0 8
39557: PUSH
39558: LD_INT 4
39560: GREATER
39561: IFFALSE 39565
// break ;
39563: GO 40615
// case i of 1 :
39565: LD_VAR 0 8
39569: PUSH
39570: LD_INT 1
39572: DOUBLE
39573: EQUAL
39574: IFTRUE 39578
39576: GO 39658
39578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39579: LD_ADDR_VAR 0 12
39583: PUSH
39584: LD_VAR 0 18
39588: PPUSH
39589: LD_INT 22
39591: PUSH
39592: LD_VAR 0 16
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 58
39603: PUSH
39604: EMPTY
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: LD_INT 30
39612: PUSH
39613: LD_INT 32
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 30
39622: PUSH
39623: LD_INT 4
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 30
39632: PUSH
39633: LD_INT 5
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: PPUSH
39651: CALL_OW 72
39655: ST_TO_ADDR
39656: GO 39880
39658: LD_INT 2
39660: DOUBLE
39661: EQUAL
39662: IFTRUE 39666
39664: GO 39728
39666: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39667: LD_ADDR_VAR 0 12
39671: PUSH
39672: LD_VAR 0 18
39676: PPUSH
39677: LD_INT 22
39679: PUSH
39680: LD_VAR 0 16
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: LD_INT 30
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 30
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PPUSH
39721: CALL_OW 72
39725: ST_TO_ADDR
39726: GO 39880
39728: LD_INT 3
39730: DOUBLE
39731: EQUAL
39732: IFTRUE 39736
39734: GO 39798
39736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39737: LD_ADDR_VAR 0 12
39741: PUSH
39742: LD_VAR 0 18
39746: PPUSH
39747: LD_INT 22
39749: PUSH
39750: LD_VAR 0 16
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: LD_INT 30
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 30
39774: PUSH
39775: LD_INT 3
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PPUSH
39791: CALL_OW 72
39795: ST_TO_ADDR
39796: GO 39880
39798: LD_INT 4
39800: DOUBLE
39801: EQUAL
39802: IFTRUE 39806
39804: GO 39879
39806: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39807: LD_ADDR_VAR 0 12
39811: PUSH
39812: LD_VAR 0 18
39816: PPUSH
39817: LD_INT 22
39819: PUSH
39820: LD_VAR 0 16
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: LD_INT 30
39834: PUSH
39835: LD_INT 6
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 30
39844: PUSH
39845: LD_INT 7
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 30
39854: PUSH
39855: LD_INT 8
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PPUSH
39872: CALL_OW 72
39876: ST_TO_ADDR
39877: GO 39880
39879: POP
// if i = 1 then
39880: LD_VAR 0 8
39884: PUSH
39885: LD_INT 1
39887: EQUAL
39888: IFFALSE 39999
// begin tmp := [ ] ;
39890: LD_ADDR_VAR 0 19
39894: PUSH
39895: EMPTY
39896: ST_TO_ADDR
// for j in f do
39897: LD_ADDR_VAR 0 9
39901: PUSH
39902: LD_VAR 0 12
39906: PUSH
39907: FOR_IN
39908: IFFALSE 39981
// if GetBType ( j ) = b_bunker then
39910: LD_VAR 0 9
39914: PPUSH
39915: CALL_OW 266
39919: PUSH
39920: LD_INT 32
39922: EQUAL
39923: IFFALSE 39950
// tmp := Insert ( tmp , 1 , j ) else
39925: LD_ADDR_VAR 0 19
39929: PUSH
39930: LD_VAR 0 19
39934: PPUSH
39935: LD_INT 1
39937: PPUSH
39938: LD_VAR 0 9
39942: PPUSH
39943: CALL_OW 2
39947: ST_TO_ADDR
39948: GO 39979
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39950: LD_ADDR_VAR 0 19
39954: PUSH
39955: LD_VAR 0 19
39959: PPUSH
39960: LD_VAR 0 19
39964: PUSH
39965: LD_INT 1
39967: PLUS
39968: PPUSH
39969: LD_VAR 0 9
39973: PPUSH
39974: CALL_OW 2
39978: ST_TO_ADDR
39979: GO 39907
39981: POP
39982: POP
// if tmp then
39983: LD_VAR 0 19
39987: IFFALSE 39999
// f := tmp ;
39989: LD_ADDR_VAR 0 12
39993: PUSH
39994: LD_VAR 0 19
39998: ST_TO_ADDR
// end ; x := personel [ i ] ;
39999: LD_ADDR_VAR 0 13
40003: PUSH
40004: LD_VAR 0 6
40008: PUSH
40009: LD_VAR 0 8
40013: ARRAY
40014: ST_TO_ADDR
// if x = - 1 then
40015: LD_VAR 0 13
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: EQUAL
40024: IFFALSE 40233
// begin for j in f do
40026: LD_ADDR_VAR 0 9
40030: PUSH
40031: LD_VAR 0 12
40035: PUSH
40036: FOR_IN
40037: IFFALSE 40229
// repeat InitHc ;
40039: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40043: LD_VAR 0 9
40047: PPUSH
40048: CALL_OW 266
40052: PUSH
40053: LD_INT 5
40055: EQUAL
40056: IFFALSE 40126
// begin if UnitsInside ( j ) < 3 then
40058: LD_VAR 0 9
40062: PPUSH
40063: CALL_OW 313
40067: PUSH
40068: LD_INT 3
40070: LESS
40071: IFFALSE 40107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40073: LD_INT 0
40075: PPUSH
40076: LD_INT 5
40078: PUSH
40079: LD_INT 8
40081: PUSH
40082: LD_INT 9
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: PUSH
40090: LD_VAR 0 17
40094: ARRAY
40095: PPUSH
40096: LD_VAR 0 4
40100: PPUSH
40101: CALL_OW 380
40105: GO 40124
// PrepareHuman ( false , i , skill ) ;
40107: LD_INT 0
40109: PPUSH
40110: LD_VAR 0 8
40114: PPUSH
40115: LD_VAR 0 4
40119: PPUSH
40120: CALL_OW 380
// end else
40124: GO 40143
// PrepareHuman ( false , i , skill ) ;
40126: LD_INT 0
40128: PPUSH
40129: LD_VAR 0 8
40133: PPUSH
40134: LD_VAR 0 4
40138: PPUSH
40139: CALL_OW 380
// un := CreateHuman ;
40143: LD_ADDR_VAR 0 14
40147: PUSH
40148: CALL_OW 44
40152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40153: LD_ADDR_VAR 0 7
40157: PUSH
40158: LD_VAR 0 7
40162: PPUSH
40163: LD_INT 1
40165: PPUSH
40166: LD_VAR 0 14
40170: PPUSH
40171: CALL_OW 2
40175: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40176: LD_VAR 0 14
40180: PPUSH
40181: LD_VAR 0 9
40185: PPUSH
40186: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40190: LD_VAR 0 9
40194: PPUSH
40195: CALL_OW 313
40199: PUSH
40200: LD_INT 6
40202: EQUAL
40203: PUSH
40204: LD_VAR 0 9
40208: PPUSH
40209: CALL_OW 266
40213: PUSH
40214: LD_INT 32
40216: PUSH
40217: LD_INT 31
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: IN
40224: OR
40225: IFFALSE 40039
40227: GO 40036
40229: POP
40230: POP
// end else
40231: GO 40613
// for j = 1 to x do
40233: LD_ADDR_VAR 0 9
40237: PUSH
40238: DOUBLE
40239: LD_INT 1
40241: DEC
40242: ST_TO_ADDR
40243: LD_VAR 0 13
40247: PUSH
40248: FOR_TO
40249: IFFALSE 40611
// begin InitHc ;
40251: CALL_OW 19
// if not f then
40255: LD_VAR 0 12
40259: NOT
40260: IFFALSE 40349
// begin PrepareHuman ( false , i , skill ) ;
40262: LD_INT 0
40264: PPUSH
40265: LD_VAR 0 8
40269: PPUSH
40270: LD_VAR 0 4
40274: PPUSH
40275: CALL_OW 380
// un := CreateHuman ;
40279: LD_ADDR_VAR 0 14
40283: PUSH
40284: CALL_OW 44
40288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40289: LD_ADDR_VAR 0 7
40293: PUSH
40294: LD_VAR 0 7
40298: PPUSH
40299: LD_INT 1
40301: PPUSH
40302: LD_VAR 0 14
40306: PPUSH
40307: CALL_OW 2
40311: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40312: LD_VAR 0 14
40316: PPUSH
40317: LD_VAR 0 1
40321: PPUSH
40322: CALL_OW 250
40326: PPUSH
40327: LD_VAR 0 1
40331: PPUSH
40332: CALL_OW 251
40336: PPUSH
40337: LD_INT 10
40339: PPUSH
40340: LD_INT 0
40342: PPUSH
40343: CALL_OW 50
// continue ;
40347: GO 40248
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40349: LD_VAR 0 12
40353: PUSH
40354: LD_INT 1
40356: ARRAY
40357: PPUSH
40358: CALL_OW 313
40362: PUSH
40363: LD_VAR 0 12
40367: PUSH
40368: LD_INT 1
40370: ARRAY
40371: PPUSH
40372: CALL_OW 266
40376: PUSH
40377: LD_INT 32
40379: PUSH
40380: LD_INT 31
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: IN
40387: AND
40388: PUSH
40389: LD_VAR 0 12
40393: PUSH
40394: LD_INT 1
40396: ARRAY
40397: PPUSH
40398: CALL_OW 313
40402: PUSH
40403: LD_INT 6
40405: EQUAL
40406: OR
40407: IFFALSE 40427
// f := Delete ( f , 1 ) ;
40409: LD_ADDR_VAR 0 12
40413: PUSH
40414: LD_VAR 0 12
40418: PPUSH
40419: LD_INT 1
40421: PPUSH
40422: CALL_OW 3
40426: ST_TO_ADDR
// if not f then
40427: LD_VAR 0 12
40431: NOT
40432: IFFALSE 40450
// begin x := x + 2 ;
40434: LD_ADDR_VAR 0 13
40438: PUSH
40439: LD_VAR 0 13
40443: PUSH
40444: LD_INT 2
40446: PLUS
40447: ST_TO_ADDR
// continue ;
40448: GO 40248
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40450: LD_VAR 0 12
40454: PUSH
40455: LD_INT 1
40457: ARRAY
40458: PPUSH
40459: CALL_OW 266
40463: PUSH
40464: LD_INT 5
40466: EQUAL
40467: IFFALSE 40541
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40469: LD_VAR 0 12
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: PPUSH
40478: CALL_OW 313
40482: PUSH
40483: LD_INT 3
40485: LESS
40486: IFFALSE 40522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40488: LD_INT 0
40490: PPUSH
40491: LD_INT 5
40493: PUSH
40494: LD_INT 8
40496: PUSH
40497: LD_INT 9
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: PUSH
40505: LD_VAR 0 17
40509: ARRAY
40510: PPUSH
40511: LD_VAR 0 4
40515: PPUSH
40516: CALL_OW 380
40520: GO 40539
// PrepareHuman ( false , i , skill ) ;
40522: LD_INT 0
40524: PPUSH
40525: LD_VAR 0 8
40529: PPUSH
40530: LD_VAR 0 4
40534: PPUSH
40535: CALL_OW 380
// end else
40539: GO 40558
// PrepareHuman ( false , i , skill ) ;
40541: LD_INT 0
40543: PPUSH
40544: LD_VAR 0 8
40548: PPUSH
40549: LD_VAR 0 4
40553: PPUSH
40554: CALL_OW 380
// un := CreateHuman ;
40558: LD_ADDR_VAR 0 14
40562: PUSH
40563: CALL_OW 44
40567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40568: LD_ADDR_VAR 0 7
40572: PUSH
40573: LD_VAR 0 7
40577: PPUSH
40578: LD_INT 1
40580: PPUSH
40581: LD_VAR 0 14
40585: PPUSH
40586: CALL_OW 2
40590: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40591: LD_VAR 0 14
40595: PPUSH
40596: LD_VAR 0 12
40600: PUSH
40601: LD_INT 1
40603: ARRAY
40604: PPUSH
40605: CALL_OW 52
// end ;
40609: GO 40248
40611: POP
40612: POP
// end ;
40613: GO 39550
40615: POP
40616: POP
// result := result ^ buildings ;
40617: LD_ADDR_VAR 0 7
40621: PUSH
40622: LD_VAR 0 7
40626: PUSH
40627: LD_VAR 0 18
40631: ADD
40632: ST_TO_ADDR
// end else
40633: GO 40776
// begin for i = 1 to personel do
40635: LD_ADDR_VAR 0 8
40639: PUSH
40640: DOUBLE
40641: LD_INT 1
40643: DEC
40644: ST_TO_ADDR
40645: LD_VAR 0 6
40649: PUSH
40650: FOR_TO
40651: IFFALSE 40774
// begin if i > 4 then
40653: LD_VAR 0 8
40657: PUSH
40658: LD_INT 4
40660: GREATER
40661: IFFALSE 40665
// break ;
40663: GO 40774
// x := personel [ i ] ;
40665: LD_ADDR_VAR 0 13
40669: PUSH
40670: LD_VAR 0 6
40674: PUSH
40675: LD_VAR 0 8
40679: ARRAY
40680: ST_TO_ADDR
// if x = - 1 then
40681: LD_VAR 0 13
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: EQUAL
40690: IFFALSE 40694
// continue ;
40692: GO 40650
// PrepareHuman ( false , i , skill ) ;
40694: LD_INT 0
40696: PPUSH
40697: LD_VAR 0 8
40701: PPUSH
40702: LD_VAR 0 4
40706: PPUSH
40707: CALL_OW 380
// un := CreateHuman ;
40711: LD_ADDR_VAR 0 14
40715: PUSH
40716: CALL_OW 44
40720: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40721: LD_VAR 0 14
40725: PPUSH
40726: LD_VAR 0 1
40730: PPUSH
40731: CALL_OW 250
40735: PPUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: CALL_OW 251
40745: PPUSH
40746: LD_INT 10
40748: PPUSH
40749: LD_INT 0
40751: PPUSH
40752: CALL_OW 50
// result := result ^ un ;
40756: LD_ADDR_VAR 0 7
40760: PUSH
40761: LD_VAR 0 7
40765: PUSH
40766: LD_VAR 0 14
40770: ADD
40771: ST_TO_ADDR
// end ;
40772: GO 40650
40774: POP
40775: POP
// end ; end ;
40776: LD_VAR 0 7
40780: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40781: LD_INT 0
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
// result := false ;
40799: LD_ADDR_VAR 0 3
40803: PUSH
40804: LD_INT 0
40806: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40807: LD_VAR 0 1
40811: NOT
40812: PUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 266
40822: PUSH
40823: LD_INT 32
40825: PUSH
40826: LD_INT 33
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: IN
40833: NOT
40834: OR
40835: IFFALSE 40839
// exit ;
40837: GO 41948
// nat := GetNation ( tower ) ;
40839: LD_ADDR_VAR 0 12
40843: PUSH
40844: LD_VAR 0 1
40848: PPUSH
40849: CALL_OW 248
40853: ST_TO_ADDR
// side := GetSide ( tower ) ;
40854: LD_ADDR_VAR 0 16
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 255
40868: ST_TO_ADDR
// x := GetX ( tower ) ;
40869: LD_ADDR_VAR 0 10
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 250
40883: ST_TO_ADDR
// y := GetY ( tower ) ;
40884: LD_ADDR_VAR 0 11
40888: PUSH
40889: LD_VAR 0 1
40893: PPUSH
40894: CALL_OW 251
40898: ST_TO_ADDR
// if not x or not y then
40899: LD_VAR 0 10
40903: NOT
40904: PUSH
40905: LD_VAR 0 11
40909: NOT
40910: OR
40911: IFFALSE 40915
// exit ;
40913: GO 41948
// weapon := 0 ;
40915: LD_ADDR_VAR 0 18
40919: PUSH
40920: LD_INT 0
40922: ST_TO_ADDR
// fac_list := [ ] ;
40923: LD_ADDR_VAR 0 17
40927: PUSH
40928: EMPTY
40929: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40930: LD_ADDR_VAR 0 6
40934: PUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: CALL_OW 274
40944: PPUSH
40945: LD_VAR 0 2
40949: PPUSH
40950: LD_INT 0
40952: PPUSH
40953: CALL 38519 0 3
40957: PPUSH
40958: LD_INT 30
40960: PUSH
40961: LD_INT 3
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PPUSH
40968: CALL_OW 72
40972: ST_TO_ADDR
// if not factories then
40973: LD_VAR 0 6
40977: NOT
40978: IFFALSE 40982
// exit ;
40980: GO 41948
// for i in factories do
40982: LD_ADDR_VAR 0 8
40986: PUSH
40987: LD_VAR 0 6
40991: PUSH
40992: FOR_IN
40993: IFFALSE 41018
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40995: LD_ADDR_VAR 0 17
40999: PUSH
41000: LD_VAR 0 17
41004: PUSH
41005: LD_VAR 0 8
41009: PPUSH
41010: CALL_OW 478
41014: UNION
41015: ST_TO_ADDR
41016: GO 40992
41018: POP
41019: POP
// if not fac_list then
41020: LD_VAR 0 17
41024: NOT
41025: IFFALSE 41029
// exit ;
41027: GO 41948
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41029: LD_ADDR_VAR 0 5
41033: PUSH
41034: LD_INT 4
41036: PUSH
41037: LD_INT 5
41039: PUSH
41040: LD_INT 9
41042: PUSH
41043: LD_INT 10
41045: PUSH
41046: LD_INT 6
41048: PUSH
41049: LD_INT 7
41051: PUSH
41052: LD_INT 11
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 27
41066: PUSH
41067: LD_INT 28
41069: PUSH
41070: LD_INT 26
41072: PUSH
41073: LD_INT 30
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 43
41084: PUSH
41085: LD_INT 44
41087: PUSH
41088: LD_INT 46
41090: PUSH
41091: LD_INT 45
41093: PUSH
41094: LD_INT 47
41096: PUSH
41097: LD_INT 49
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: PUSH
41113: LD_VAR 0 12
41117: ARRAY
41118: ST_TO_ADDR
// list := list isect fac_list ;
41119: LD_ADDR_VAR 0 5
41123: PUSH
41124: LD_VAR 0 5
41128: PUSH
41129: LD_VAR 0 17
41133: ISECT
41134: ST_TO_ADDR
// if not list then
41135: LD_VAR 0 5
41139: NOT
41140: IFFALSE 41144
// exit ;
41142: GO 41948
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41144: LD_VAR 0 12
41148: PUSH
41149: LD_INT 3
41151: EQUAL
41152: PUSH
41153: LD_INT 49
41155: PUSH
41156: LD_VAR 0 5
41160: IN
41161: AND
41162: PUSH
41163: LD_INT 31
41165: PPUSH
41166: LD_VAR 0 16
41170: PPUSH
41171: CALL_OW 321
41175: PUSH
41176: LD_INT 2
41178: EQUAL
41179: AND
41180: IFFALSE 41240
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41182: LD_INT 22
41184: PUSH
41185: LD_VAR 0 16
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 35
41196: PUSH
41197: LD_INT 49
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 91
41206: PUSH
41207: LD_VAR 0 1
41211: PUSH
41212: LD_INT 10
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: LIST
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: PPUSH
41225: CALL_OW 69
41229: NOT
41230: IFFALSE 41240
// weapon := ru_time_lapser ;
41232: LD_ADDR_VAR 0 18
41236: PUSH
41237: LD_INT 49
41239: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41240: LD_VAR 0 12
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: IN
41255: PUSH
41256: LD_INT 11
41258: PUSH
41259: LD_VAR 0 5
41263: IN
41264: PUSH
41265: LD_INT 30
41267: PUSH
41268: LD_VAR 0 5
41272: IN
41273: OR
41274: AND
41275: PUSH
41276: LD_INT 6
41278: PPUSH
41279: LD_VAR 0 16
41283: PPUSH
41284: CALL_OW 321
41288: PUSH
41289: LD_INT 2
41291: EQUAL
41292: AND
41293: IFFALSE 41458
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41295: LD_INT 22
41297: PUSH
41298: LD_VAR 0 16
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 35
41312: PUSH
41313: LD_INT 11
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 35
41322: PUSH
41323: LD_INT 30
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 91
41337: PUSH
41338: LD_VAR 0 1
41342: PUSH
41343: LD_INT 18
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: LIST
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: LIST
41355: PPUSH
41356: CALL_OW 69
41360: NOT
41361: PUSH
41362: LD_INT 22
41364: PUSH
41365: LD_VAR 0 16
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 30
41379: PUSH
41380: LD_INT 32
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 30
41389: PUSH
41390: LD_INT 33
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 91
41404: PUSH
41405: LD_VAR 0 1
41409: PUSH
41410: LD_INT 12
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: PUSH
41423: EMPTY
41424: LIST
41425: PPUSH
41426: CALL_OW 69
41430: PUSH
41431: LD_INT 2
41433: GREATER
41434: AND
41435: IFFALSE 41458
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41437: LD_ADDR_VAR 0 18
41441: PUSH
41442: LD_INT 11
41444: PUSH
41445: LD_INT 30
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_VAR 0 12
41456: ARRAY
41457: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41458: LD_VAR 0 18
41462: NOT
41463: PUSH
41464: LD_INT 40
41466: PPUSH
41467: LD_VAR 0 16
41471: PPUSH
41472: CALL_OW 321
41476: PUSH
41477: LD_INT 2
41479: EQUAL
41480: AND
41481: PUSH
41482: LD_INT 7
41484: PUSH
41485: LD_VAR 0 5
41489: IN
41490: PUSH
41491: LD_INT 28
41493: PUSH
41494: LD_VAR 0 5
41498: IN
41499: OR
41500: PUSH
41501: LD_INT 45
41503: PUSH
41504: LD_VAR 0 5
41508: IN
41509: OR
41510: AND
41511: IFFALSE 41765
// begin hex := GetHexInfo ( x , y ) ;
41513: LD_ADDR_VAR 0 4
41517: PUSH
41518: LD_VAR 0 10
41522: PPUSH
41523: LD_VAR 0 11
41527: PPUSH
41528: CALL_OW 546
41532: ST_TO_ADDR
// if hex [ 1 ] then
41533: LD_VAR 0 4
41537: PUSH
41538: LD_INT 1
41540: ARRAY
41541: IFFALSE 41545
// exit ;
41543: GO 41948
// height := hex [ 2 ] ;
41545: LD_ADDR_VAR 0 15
41549: PUSH
41550: LD_VAR 0 4
41554: PUSH
41555: LD_INT 2
41557: ARRAY
41558: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41559: LD_ADDR_VAR 0 14
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: LD_INT 5
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: ST_TO_ADDR
// for i in tmp do
41582: LD_ADDR_VAR 0 8
41586: PUSH
41587: LD_VAR 0 14
41591: PUSH
41592: FOR_IN
41593: IFFALSE 41763
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41595: LD_ADDR_VAR 0 9
41599: PUSH
41600: LD_VAR 0 10
41604: PPUSH
41605: LD_VAR 0 8
41609: PPUSH
41610: LD_INT 5
41612: PPUSH
41613: CALL_OW 272
41617: PUSH
41618: LD_VAR 0 11
41622: PPUSH
41623: LD_VAR 0 8
41627: PPUSH
41628: LD_INT 5
41630: PPUSH
41631: CALL_OW 273
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41640: LD_VAR 0 9
41644: PUSH
41645: LD_INT 1
41647: ARRAY
41648: PPUSH
41649: LD_VAR 0 9
41653: PUSH
41654: LD_INT 2
41656: ARRAY
41657: PPUSH
41658: CALL_OW 488
41662: IFFALSE 41761
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41664: LD_ADDR_VAR 0 4
41668: PUSH
41669: LD_VAR 0 9
41673: PUSH
41674: LD_INT 1
41676: ARRAY
41677: PPUSH
41678: LD_VAR 0 9
41682: PUSH
41683: LD_INT 2
41685: ARRAY
41686: PPUSH
41687: CALL_OW 546
41691: ST_TO_ADDR
// if hex [ 1 ] then
41692: LD_VAR 0 4
41696: PUSH
41697: LD_INT 1
41699: ARRAY
41700: IFFALSE 41704
// continue ;
41702: GO 41592
// h := hex [ 2 ] ;
41704: LD_ADDR_VAR 0 13
41708: PUSH
41709: LD_VAR 0 4
41713: PUSH
41714: LD_INT 2
41716: ARRAY
41717: ST_TO_ADDR
// if h + 7 < height then
41718: LD_VAR 0 13
41722: PUSH
41723: LD_INT 7
41725: PLUS
41726: PUSH
41727: LD_VAR 0 15
41731: LESS
41732: IFFALSE 41761
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41734: LD_ADDR_VAR 0 18
41738: PUSH
41739: LD_INT 7
41741: PUSH
41742: LD_INT 28
41744: PUSH
41745: LD_INT 45
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: PUSH
41753: LD_VAR 0 12
41757: ARRAY
41758: ST_TO_ADDR
// break ;
41759: GO 41763
// end ; end ; end ;
41761: GO 41592
41763: POP
41764: POP
// end ; if not weapon then
41765: LD_VAR 0 18
41769: NOT
41770: IFFALSE 41830
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41772: LD_ADDR_VAR 0 5
41776: PUSH
41777: LD_VAR 0 5
41781: PUSH
41782: LD_INT 11
41784: PUSH
41785: LD_INT 30
41787: PUSH
41788: LD_INT 49
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: DIFF
41796: ST_TO_ADDR
// if not list then
41797: LD_VAR 0 5
41801: NOT
41802: IFFALSE 41806
// exit ;
41804: GO 41948
// weapon := list [ rand ( 1 , list ) ] ;
41806: LD_ADDR_VAR 0 18
41810: PUSH
41811: LD_VAR 0 5
41815: PUSH
41816: LD_INT 1
41818: PPUSH
41819: LD_VAR 0 5
41823: PPUSH
41824: CALL_OW 12
41828: ARRAY
41829: ST_TO_ADDR
// end ; if weapon then
41830: LD_VAR 0 18
41834: IFFALSE 41948
// begin tmp := CostOfWeapon ( weapon ) ;
41836: LD_ADDR_VAR 0 14
41840: PUSH
41841: LD_VAR 0 18
41845: PPUSH
41846: CALL_OW 451
41850: ST_TO_ADDR
// j := GetBase ( tower ) ;
41851: LD_ADDR_VAR 0 9
41855: PUSH
41856: LD_VAR 0 1
41860: PPUSH
41861: CALL_OW 274
41865: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41866: LD_VAR 0 9
41870: PPUSH
41871: LD_INT 1
41873: PPUSH
41874: CALL_OW 275
41878: PUSH
41879: LD_VAR 0 14
41883: PUSH
41884: LD_INT 1
41886: ARRAY
41887: GREATEREQUAL
41888: PUSH
41889: LD_VAR 0 9
41893: PPUSH
41894: LD_INT 2
41896: PPUSH
41897: CALL_OW 275
41901: PUSH
41902: LD_VAR 0 14
41906: PUSH
41907: LD_INT 2
41909: ARRAY
41910: GREATEREQUAL
41911: AND
41912: PUSH
41913: LD_VAR 0 9
41917: PPUSH
41918: LD_INT 3
41920: PPUSH
41921: CALL_OW 275
41925: PUSH
41926: LD_VAR 0 14
41930: PUSH
41931: LD_INT 3
41933: ARRAY
41934: GREATEREQUAL
41935: AND
41936: IFFALSE 41948
// result := weapon ;
41938: LD_ADDR_VAR 0 3
41942: PUSH
41943: LD_VAR 0 18
41947: ST_TO_ADDR
// end ; end ;
41948: LD_VAR 0 3
41952: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41953: LD_INT 0
41955: PPUSH
41956: PPUSH
// result := true ;
41957: LD_ADDR_VAR 0 3
41961: PUSH
41962: LD_INT 1
41964: ST_TO_ADDR
// if array1 = array2 then
41965: LD_VAR 0 1
41969: PUSH
41970: LD_VAR 0 2
41974: EQUAL
41975: IFFALSE 42035
// begin for i = 1 to array1 do
41977: LD_ADDR_VAR 0 4
41981: PUSH
41982: DOUBLE
41983: LD_INT 1
41985: DEC
41986: ST_TO_ADDR
41987: LD_VAR 0 1
41991: PUSH
41992: FOR_TO
41993: IFFALSE 42031
// if array1 [ i ] <> array2 [ i ] then
41995: LD_VAR 0 1
41999: PUSH
42000: LD_VAR 0 4
42004: ARRAY
42005: PUSH
42006: LD_VAR 0 2
42010: PUSH
42011: LD_VAR 0 4
42015: ARRAY
42016: NONEQUAL
42017: IFFALSE 42029
// begin result := false ;
42019: LD_ADDR_VAR 0 3
42023: PUSH
42024: LD_INT 0
42026: ST_TO_ADDR
// break ;
42027: GO 42031
// end ;
42029: GO 41992
42031: POP
42032: POP
// end else
42033: GO 42043
// result := false ;
42035: LD_ADDR_VAR 0 3
42039: PUSH
42040: LD_INT 0
42042: ST_TO_ADDR
// end ;
42043: LD_VAR 0 3
42047: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42048: LD_INT 0
42050: PPUSH
42051: PPUSH
// if not array1 or not array2 then
42052: LD_VAR 0 1
42056: NOT
42057: PUSH
42058: LD_VAR 0 2
42062: NOT
42063: OR
42064: IFFALSE 42068
// exit ;
42066: GO 42132
// result := true ;
42068: LD_ADDR_VAR 0 3
42072: PUSH
42073: LD_INT 1
42075: ST_TO_ADDR
// for i = 1 to array1 do
42076: LD_ADDR_VAR 0 4
42080: PUSH
42081: DOUBLE
42082: LD_INT 1
42084: DEC
42085: ST_TO_ADDR
42086: LD_VAR 0 1
42090: PUSH
42091: FOR_TO
42092: IFFALSE 42130
// if array1 [ i ] <> array2 [ i ] then
42094: LD_VAR 0 1
42098: PUSH
42099: LD_VAR 0 4
42103: ARRAY
42104: PUSH
42105: LD_VAR 0 2
42109: PUSH
42110: LD_VAR 0 4
42114: ARRAY
42115: NONEQUAL
42116: IFFALSE 42128
// begin result := false ;
42118: LD_ADDR_VAR 0 3
42122: PUSH
42123: LD_INT 0
42125: ST_TO_ADDR
// break ;
42126: GO 42130
// end ;
42128: GO 42091
42130: POP
42131: POP
// end ;
42132: LD_VAR 0 3
42136: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42137: LD_INT 0
42139: PPUSH
42140: PPUSH
42141: PPUSH
// pom := GetBase ( fac ) ;
42142: LD_ADDR_VAR 0 5
42146: PUSH
42147: LD_VAR 0 1
42151: PPUSH
42152: CALL_OW 274
42156: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42157: LD_ADDR_VAR 0 4
42161: PUSH
42162: LD_VAR 0 2
42166: PUSH
42167: LD_INT 1
42169: ARRAY
42170: PPUSH
42171: LD_VAR 0 2
42175: PUSH
42176: LD_INT 2
42178: ARRAY
42179: PPUSH
42180: LD_VAR 0 2
42184: PUSH
42185: LD_INT 3
42187: ARRAY
42188: PPUSH
42189: LD_VAR 0 2
42193: PUSH
42194: LD_INT 4
42196: ARRAY
42197: PPUSH
42198: CALL_OW 449
42202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42203: LD_ADDR_VAR 0 3
42207: PUSH
42208: LD_VAR 0 5
42212: PPUSH
42213: LD_INT 1
42215: PPUSH
42216: CALL_OW 275
42220: PUSH
42221: LD_VAR 0 4
42225: PUSH
42226: LD_INT 1
42228: ARRAY
42229: GREATEREQUAL
42230: PUSH
42231: LD_VAR 0 5
42235: PPUSH
42236: LD_INT 2
42238: PPUSH
42239: CALL_OW 275
42243: PUSH
42244: LD_VAR 0 4
42248: PUSH
42249: LD_INT 2
42251: ARRAY
42252: GREATEREQUAL
42253: AND
42254: PUSH
42255: LD_VAR 0 5
42259: PPUSH
42260: LD_INT 3
42262: PPUSH
42263: CALL_OW 275
42267: PUSH
42268: LD_VAR 0 4
42272: PUSH
42273: LD_INT 3
42275: ARRAY
42276: GREATEREQUAL
42277: AND
42278: ST_TO_ADDR
// end ;
42279: LD_VAR 0 3
42283: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42284: LD_INT 0
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
// pom := GetBase ( building ) ;
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_VAR 0 1
42299: PPUSH
42300: CALL_OW 274
42304: ST_TO_ADDR
// if not pom then
42305: LD_VAR 0 3
42309: NOT
42310: IFFALSE 42314
// exit ;
42312: GO 42484
// btype := GetBType ( building ) ;
42314: LD_ADDR_VAR 0 5
42318: PUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 266
42328: ST_TO_ADDR
// if btype = b_armoury then
42329: LD_VAR 0 5
42333: PUSH
42334: LD_INT 4
42336: EQUAL
42337: IFFALSE 42347
// btype := b_barracks ;
42339: LD_ADDR_VAR 0 5
42343: PUSH
42344: LD_INT 5
42346: ST_TO_ADDR
// if btype = b_depot then
42347: LD_VAR 0 5
42351: PUSH
42352: LD_INT 0
42354: EQUAL
42355: IFFALSE 42365
// btype := b_warehouse ;
42357: LD_ADDR_VAR 0 5
42361: PUSH
42362: LD_INT 1
42364: ST_TO_ADDR
// if btype = b_workshop then
42365: LD_VAR 0 5
42369: PUSH
42370: LD_INT 2
42372: EQUAL
42373: IFFALSE 42383
// btype := b_factory ;
42375: LD_ADDR_VAR 0 5
42379: PUSH
42380: LD_INT 3
42382: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42383: LD_ADDR_VAR 0 4
42387: PUSH
42388: LD_VAR 0 5
42392: PPUSH
42393: LD_VAR 0 1
42397: PPUSH
42398: CALL_OW 248
42402: PPUSH
42403: CALL_OW 450
42407: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42408: LD_ADDR_VAR 0 2
42412: PUSH
42413: LD_VAR 0 3
42417: PPUSH
42418: LD_INT 1
42420: PPUSH
42421: CALL_OW 275
42425: PUSH
42426: LD_VAR 0 4
42430: PUSH
42431: LD_INT 1
42433: ARRAY
42434: GREATEREQUAL
42435: PUSH
42436: LD_VAR 0 3
42440: PPUSH
42441: LD_INT 2
42443: PPUSH
42444: CALL_OW 275
42448: PUSH
42449: LD_VAR 0 4
42453: PUSH
42454: LD_INT 2
42456: ARRAY
42457: GREATEREQUAL
42458: AND
42459: PUSH
42460: LD_VAR 0 3
42464: PPUSH
42465: LD_INT 3
42467: PPUSH
42468: CALL_OW 275
42472: PUSH
42473: LD_VAR 0 4
42477: PUSH
42478: LD_INT 3
42480: ARRAY
42481: GREATEREQUAL
42482: AND
42483: ST_TO_ADDR
// end ;
42484: LD_VAR 0 2
42488: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42489: LD_INT 0
42491: PPUSH
42492: PPUSH
42493: PPUSH
// pom := GetBase ( building ) ;
42494: LD_ADDR_VAR 0 4
42498: PUSH
42499: LD_VAR 0 1
42503: PPUSH
42504: CALL_OW 274
42508: ST_TO_ADDR
// if not pom then
42509: LD_VAR 0 4
42513: NOT
42514: IFFALSE 42518
// exit ;
42516: GO 42619
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42518: LD_ADDR_VAR 0 5
42522: PUSH
42523: LD_VAR 0 2
42527: PPUSH
42528: LD_VAR 0 1
42532: PPUSH
42533: CALL_OW 248
42537: PPUSH
42538: CALL_OW 450
42542: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_VAR 0 4
42552: PPUSH
42553: LD_INT 1
42555: PPUSH
42556: CALL_OW 275
42560: PUSH
42561: LD_VAR 0 5
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: GREATEREQUAL
42570: PUSH
42571: LD_VAR 0 4
42575: PPUSH
42576: LD_INT 2
42578: PPUSH
42579: CALL_OW 275
42583: PUSH
42584: LD_VAR 0 5
42588: PUSH
42589: LD_INT 2
42591: ARRAY
42592: GREATEREQUAL
42593: AND
42594: PUSH
42595: LD_VAR 0 4
42599: PPUSH
42600: LD_INT 3
42602: PPUSH
42603: CALL_OW 275
42607: PUSH
42608: LD_VAR 0 5
42612: PUSH
42613: LD_INT 3
42615: ARRAY
42616: GREATEREQUAL
42617: AND
42618: ST_TO_ADDR
// end ;
42619: LD_VAR 0 3
42623: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42624: LD_INT 0
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
// result := false ;
42637: LD_ADDR_VAR 0 8
42641: PUSH
42642: LD_INT 0
42644: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42645: LD_VAR 0 5
42649: NOT
42650: PUSH
42651: LD_VAR 0 1
42655: NOT
42656: OR
42657: PUSH
42658: LD_VAR 0 2
42662: NOT
42663: OR
42664: PUSH
42665: LD_VAR 0 3
42669: NOT
42670: OR
42671: IFFALSE 42675
// exit ;
42673: GO 43489
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42675: LD_ADDR_VAR 0 14
42679: PUSH
42680: LD_VAR 0 1
42684: PPUSH
42685: LD_VAR 0 2
42689: PPUSH
42690: LD_VAR 0 3
42694: PPUSH
42695: LD_VAR 0 4
42699: PPUSH
42700: LD_VAR 0 5
42704: PUSH
42705: LD_INT 1
42707: ARRAY
42708: PPUSH
42709: CALL_OW 248
42713: PPUSH
42714: LD_INT 0
42716: PPUSH
42717: CALL 44742 0 6
42721: ST_TO_ADDR
// if not hexes then
42722: LD_VAR 0 14
42726: NOT
42727: IFFALSE 42731
// exit ;
42729: GO 43489
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42731: LD_ADDR_VAR 0 17
42735: PUSH
42736: LD_VAR 0 5
42740: PPUSH
42741: LD_INT 22
42743: PUSH
42744: LD_VAR 0 13
42748: PPUSH
42749: CALL_OW 255
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 30
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 30
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PPUSH
42790: CALL_OW 72
42794: ST_TO_ADDR
// for i = 1 to hexes do
42795: LD_ADDR_VAR 0 9
42799: PUSH
42800: DOUBLE
42801: LD_INT 1
42803: DEC
42804: ST_TO_ADDR
42805: LD_VAR 0 14
42809: PUSH
42810: FOR_TO
42811: IFFALSE 43487
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42813: LD_ADDR_VAR 0 13
42817: PUSH
42818: LD_VAR 0 14
42822: PUSH
42823: LD_VAR 0 9
42827: ARRAY
42828: PUSH
42829: LD_INT 1
42831: ARRAY
42832: PPUSH
42833: LD_VAR 0 14
42837: PUSH
42838: LD_VAR 0 9
42842: ARRAY
42843: PUSH
42844: LD_INT 2
42846: ARRAY
42847: PPUSH
42848: CALL_OW 428
42852: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42853: LD_VAR 0 14
42857: PUSH
42858: LD_VAR 0 9
42862: ARRAY
42863: PUSH
42864: LD_INT 1
42866: ARRAY
42867: PPUSH
42868: LD_VAR 0 14
42872: PUSH
42873: LD_VAR 0 9
42877: ARRAY
42878: PUSH
42879: LD_INT 2
42881: ARRAY
42882: PPUSH
42883: CALL_OW 351
42887: PUSH
42888: LD_VAR 0 14
42892: PUSH
42893: LD_VAR 0 9
42897: ARRAY
42898: PUSH
42899: LD_INT 1
42901: ARRAY
42902: PPUSH
42903: LD_VAR 0 14
42907: PUSH
42908: LD_VAR 0 9
42912: ARRAY
42913: PUSH
42914: LD_INT 2
42916: ARRAY
42917: PPUSH
42918: CALL_OW 488
42922: NOT
42923: OR
42924: PUSH
42925: LD_VAR 0 13
42929: PPUSH
42930: CALL_OW 247
42934: PUSH
42935: LD_INT 3
42937: EQUAL
42938: OR
42939: IFFALSE 42945
// exit ;
42941: POP
42942: POP
42943: GO 43489
// if not tmp then
42945: LD_VAR 0 13
42949: NOT
42950: IFFALSE 42954
// continue ;
42952: GO 42810
// result := true ;
42954: LD_ADDR_VAR 0 8
42958: PUSH
42959: LD_INT 1
42961: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42962: LD_VAR 0 6
42966: PUSH
42967: LD_VAR 0 13
42971: PPUSH
42972: CALL_OW 247
42976: PUSH
42977: LD_INT 2
42979: EQUAL
42980: AND
42981: PUSH
42982: LD_VAR 0 13
42986: PPUSH
42987: CALL_OW 263
42991: PUSH
42992: LD_INT 1
42994: EQUAL
42995: AND
42996: IFFALSE 43160
// begin if IsDrivenBy ( tmp ) then
42998: LD_VAR 0 13
43002: PPUSH
43003: CALL_OW 311
43007: IFFALSE 43011
// continue ;
43009: GO 42810
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43011: LD_VAR 0 6
43015: PPUSH
43016: LD_INT 3
43018: PUSH
43019: LD_INT 60
43021: PUSH
43022: EMPTY
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 3
43031: PUSH
43032: LD_INT 55
43034: PUSH
43035: EMPTY
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PPUSH
43046: CALL_OW 72
43050: IFFALSE 43158
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43052: LD_ADDR_VAR 0 18
43056: PUSH
43057: LD_VAR 0 6
43061: PPUSH
43062: LD_INT 3
43064: PUSH
43065: LD_INT 60
43067: PUSH
43068: EMPTY
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 55
43080: PUSH
43081: EMPTY
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PPUSH
43092: CALL_OW 72
43096: PUSH
43097: LD_INT 1
43099: ARRAY
43100: ST_TO_ADDR
// if IsInUnit ( driver ) then
43101: LD_VAR 0 18
43105: PPUSH
43106: CALL_OW 310
43110: IFFALSE 43121
// ComExit ( driver ) ;
43112: LD_VAR 0 18
43116: PPUSH
43117: CALL 68521 0 1
// AddComEnterUnit ( driver , tmp ) ;
43121: LD_VAR 0 18
43125: PPUSH
43126: LD_VAR 0 13
43130: PPUSH
43131: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43135: LD_VAR 0 18
43139: PPUSH
43140: LD_VAR 0 7
43144: PPUSH
43145: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43149: LD_VAR 0 18
43153: PPUSH
43154: CALL_OW 181
// end ; continue ;
43158: GO 42810
// end ; if not cleaners or not tmp in cleaners then
43160: LD_VAR 0 6
43164: NOT
43165: PUSH
43166: LD_VAR 0 13
43170: PUSH
43171: LD_VAR 0 6
43175: IN
43176: NOT
43177: OR
43178: IFFALSE 43485
// begin if dep then
43180: LD_VAR 0 17
43184: IFFALSE 43320
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43186: LD_ADDR_VAR 0 16
43190: PUSH
43191: LD_VAR 0 17
43195: PUSH
43196: LD_INT 1
43198: ARRAY
43199: PPUSH
43200: CALL_OW 250
43204: PPUSH
43205: LD_VAR 0 17
43209: PUSH
43210: LD_INT 1
43212: ARRAY
43213: PPUSH
43214: CALL_OW 254
43218: PPUSH
43219: LD_INT 5
43221: PPUSH
43222: CALL_OW 272
43226: PUSH
43227: LD_VAR 0 17
43231: PUSH
43232: LD_INT 1
43234: ARRAY
43235: PPUSH
43236: CALL_OW 251
43240: PPUSH
43241: LD_VAR 0 17
43245: PUSH
43246: LD_INT 1
43248: ARRAY
43249: PPUSH
43250: CALL_OW 254
43254: PPUSH
43255: LD_INT 5
43257: PPUSH
43258: CALL_OW 273
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43267: LD_VAR 0 16
43271: PUSH
43272: LD_INT 1
43274: ARRAY
43275: PPUSH
43276: LD_VAR 0 16
43280: PUSH
43281: LD_INT 2
43283: ARRAY
43284: PPUSH
43285: CALL_OW 488
43289: IFFALSE 43320
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43291: LD_VAR 0 13
43295: PPUSH
43296: LD_VAR 0 16
43300: PUSH
43301: LD_INT 1
43303: ARRAY
43304: PPUSH
43305: LD_VAR 0 16
43309: PUSH
43310: LD_INT 2
43312: ARRAY
43313: PPUSH
43314: CALL_OW 111
// continue ;
43318: GO 42810
// end ; end ; r := GetDir ( tmp ) ;
43320: LD_ADDR_VAR 0 15
43324: PUSH
43325: LD_VAR 0 13
43329: PPUSH
43330: CALL_OW 254
43334: ST_TO_ADDR
// if r = 5 then
43335: LD_VAR 0 15
43339: PUSH
43340: LD_INT 5
43342: EQUAL
43343: IFFALSE 43353
// r := 0 ;
43345: LD_ADDR_VAR 0 15
43349: PUSH
43350: LD_INT 0
43352: ST_TO_ADDR
// for j = r to 5 do
43353: LD_ADDR_VAR 0 10
43357: PUSH
43358: DOUBLE
43359: LD_VAR 0 15
43363: DEC
43364: ST_TO_ADDR
43365: LD_INT 5
43367: PUSH
43368: FOR_TO
43369: IFFALSE 43483
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43371: LD_ADDR_VAR 0 11
43375: PUSH
43376: LD_VAR 0 13
43380: PPUSH
43381: CALL_OW 250
43385: PPUSH
43386: LD_VAR 0 10
43390: PPUSH
43391: LD_INT 2
43393: PPUSH
43394: CALL_OW 272
43398: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43399: LD_ADDR_VAR 0 12
43403: PUSH
43404: LD_VAR 0 13
43408: PPUSH
43409: CALL_OW 251
43413: PPUSH
43414: LD_VAR 0 10
43418: PPUSH
43419: LD_INT 2
43421: PPUSH
43422: CALL_OW 273
43426: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43427: LD_VAR 0 11
43431: PPUSH
43432: LD_VAR 0 12
43436: PPUSH
43437: CALL_OW 488
43441: PUSH
43442: LD_VAR 0 11
43446: PPUSH
43447: LD_VAR 0 12
43451: PPUSH
43452: CALL_OW 428
43456: NOT
43457: AND
43458: IFFALSE 43481
// begin ComMoveXY ( tmp , _x , _y ) ;
43460: LD_VAR 0 13
43464: PPUSH
43465: LD_VAR 0 11
43469: PPUSH
43470: LD_VAR 0 12
43474: PPUSH
43475: CALL_OW 111
// break ;
43479: GO 43483
// end ; end ;
43481: GO 43368
43483: POP
43484: POP
// end ; end ;
43485: GO 42810
43487: POP
43488: POP
// end ;
43489: LD_VAR 0 8
43493: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43494: LD_INT 0
43496: PPUSH
// result := true ;
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_INT 1
43504: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43505: LD_VAR 0 2
43509: PUSH
43510: LD_INT 24
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43524
43516: LD_INT 33
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43549
43524: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 32
43532: PPUSH
43533: LD_VAR 0 1
43537: PPUSH
43538: CALL_OW 321
43542: PUSH
43543: LD_INT 2
43545: EQUAL
43546: ST_TO_ADDR
43547: GO 43865
43549: LD_INT 20
43551: DOUBLE
43552: EQUAL
43553: IFTRUE 43557
43555: GO 43582
43557: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43558: LD_ADDR_VAR 0 3
43562: PUSH
43563: LD_INT 6
43565: PPUSH
43566: LD_VAR 0 1
43570: PPUSH
43571: CALL_OW 321
43575: PUSH
43576: LD_INT 2
43578: EQUAL
43579: ST_TO_ADDR
43580: GO 43865
43582: LD_INT 22
43584: DOUBLE
43585: EQUAL
43586: IFTRUE 43596
43588: LD_INT 36
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 43621
43596: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_INT 15
43604: PPUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: CALL_OW 321
43614: PUSH
43615: LD_INT 2
43617: EQUAL
43618: ST_TO_ADDR
43619: GO 43865
43621: LD_INT 30
43623: DOUBLE
43624: EQUAL
43625: IFTRUE 43629
43627: GO 43654
43629: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43630: LD_ADDR_VAR 0 3
43634: PUSH
43635: LD_INT 20
43637: PPUSH
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 321
43647: PUSH
43648: LD_INT 2
43650: EQUAL
43651: ST_TO_ADDR
43652: GO 43865
43654: LD_INT 28
43656: DOUBLE
43657: EQUAL
43658: IFTRUE 43668
43660: LD_INT 21
43662: DOUBLE
43663: EQUAL
43664: IFTRUE 43668
43666: GO 43693
43668: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43669: LD_ADDR_VAR 0 3
43673: PUSH
43674: LD_INT 21
43676: PPUSH
43677: LD_VAR 0 1
43681: PPUSH
43682: CALL_OW 321
43686: PUSH
43687: LD_INT 2
43689: EQUAL
43690: ST_TO_ADDR
43691: GO 43865
43693: LD_INT 16
43695: DOUBLE
43696: EQUAL
43697: IFTRUE 43701
43699: GO 43726
43701: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43702: LD_ADDR_VAR 0 3
43706: PUSH
43707: LD_INT 84
43709: PPUSH
43710: LD_VAR 0 1
43714: PPUSH
43715: CALL_OW 321
43719: PUSH
43720: LD_INT 2
43722: EQUAL
43723: ST_TO_ADDR
43724: GO 43865
43726: LD_INT 19
43728: DOUBLE
43729: EQUAL
43730: IFTRUE 43740
43732: LD_INT 23
43734: DOUBLE
43735: EQUAL
43736: IFTRUE 43740
43738: GO 43765
43740: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43741: LD_ADDR_VAR 0 3
43745: PUSH
43746: LD_INT 83
43748: PPUSH
43749: LD_VAR 0 1
43753: PPUSH
43754: CALL_OW 321
43758: PUSH
43759: LD_INT 2
43761: EQUAL
43762: ST_TO_ADDR
43763: GO 43865
43765: LD_INT 17
43767: DOUBLE
43768: EQUAL
43769: IFTRUE 43773
43771: GO 43798
43773: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43774: LD_ADDR_VAR 0 3
43778: PUSH
43779: LD_INT 39
43781: PPUSH
43782: LD_VAR 0 1
43786: PPUSH
43787: CALL_OW 321
43791: PUSH
43792: LD_INT 2
43794: EQUAL
43795: ST_TO_ADDR
43796: GO 43865
43798: LD_INT 18
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 43831
43806: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_INT 40
43814: PPUSH
43815: LD_VAR 0 1
43819: PPUSH
43820: CALL_OW 321
43824: PUSH
43825: LD_INT 2
43827: EQUAL
43828: ST_TO_ADDR
43829: GO 43865
43831: LD_INT 27
43833: DOUBLE
43834: EQUAL
43835: IFTRUE 43839
43837: GO 43864
43839: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43840: LD_ADDR_VAR 0 3
43844: PUSH
43845: LD_INT 35
43847: PPUSH
43848: LD_VAR 0 1
43852: PPUSH
43853: CALL_OW 321
43857: PUSH
43858: LD_INT 2
43860: EQUAL
43861: ST_TO_ADDR
43862: GO 43865
43864: POP
// end ;
43865: LD_VAR 0 3
43869: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43870: LD_INT 0
43872: PPUSH
43873: PPUSH
43874: PPUSH
43875: PPUSH
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
// result := false ;
43883: LD_ADDR_VAR 0 6
43887: PUSH
43888: LD_INT 0
43890: ST_TO_ADDR
// if btype = b_depot then
43891: LD_VAR 0 2
43895: PUSH
43896: LD_INT 0
43898: EQUAL
43899: IFFALSE 43911
// begin result := true ;
43901: LD_ADDR_VAR 0 6
43905: PUSH
43906: LD_INT 1
43908: ST_TO_ADDR
// exit ;
43909: GO 44737
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43911: LD_VAR 0 1
43915: NOT
43916: PUSH
43917: LD_VAR 0 1
43921: PPUSH
43922: CALL_OW 266
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: IN
43937: NOT
43938: OR
43939: PUSH
43940: LD_VAR 0 2
43944: NOT
43945: OR
43946: PUSH
43947: LD_VAR 0 5
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 3
43963: PUSH
43964: LD_INT 4
43966: PUSH
43967: LD_INT 5
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: IN
43978: NOT
43979: OR
43980: PUSH
43981: LD_VAR 0 3
43985: PPUSH
43986: LD_VAR 0 4
43990: PPUSH
43991: CALL_OW 488
43995: NOT
43996: OR
43997: IFFALSE 44001
// exit ;
43999: GO 44737
// side := GetSide ( depot ) ;
44001: LD_ADDR_VAR 0 9
44005: PUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 255
44015: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44016: LD_VAR 0 9
44020: PPUSH
44021: LD_VAR 0 2
44025: PPUSH
44026: CALL 43494 0 2
44030: NOT
44031: IFFALSE 44035
// exit ;
44033: GO 44737
// pom := GetBase ( depot ) ;
44035: LD_ADDR_VAR 0 10
44039: PUSH
44040: LD_VAR 0 1
44044: PPUSH
44045: CALL_OW 274
44049: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44050: LD_ADDR_VAR 0 11
44054: PUSH
44055: LD_VAR 0 2
44059: PPUSH
44060: LD_VAR 0 1
44064: PPUSH
44065: CALL_OW 248
44069: PPUSH
44070: CALL_OW 450
44074: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44075: LD_VAR 0 10
44079: PPUSH
44080: LD_INT 1
44082: PPUSH
44083: CALL_OW 275
44087: PUSH
44088: LD_VAR 0 11
44092: PUSH
44093: LD_INT 1
44095: ARRAY
44096: GREATEREQUAL
44097: PUSH
44098: LD_VAR 0 10
44102: PPUSH
44103: LD_INT 2
44105: PPUSH
44106: CALL_OW 275
44110: PUSH
44111: LD_VAR 0 11
44115: PUSH
44116: LD_INT 2
44118: ARRAY
44119: GREATEREQUAL
44120: AND
44121: PUSH
44122: LD_VAR 0 10
44126: PPUSH
44127: LD_INT 3
44129: PPUSH
44130: CALL_OW 275
44134: PUSH
44135: LD_VAR 0 11
44139: PUSH
44140: LD_INT 3
44142: ARRAY
44143: GREATEREQUAL
44144: AND
44145: NOT
44146: IFFALSE 44150
// exit ;
44148: GO 44737
// if GetBType ( depot ) = b_depot then
44150: LD_VAR 0 1
44154: PPUSH
44155: CALL_OW 266
44159: PUSH
44160: LD_INT 0
44162: EQUAL
44163: IFFALSE 44175
// dist := 28 else
44165: LD_ADDR_VAR 0 14
44169: PUSH
44170: LD_INT 28
44172: ST_TO_ADDR
44173: GO 44183
// dist := 36 ;
44175: LD_ADDR_VAR 0 14
44179: PUSH
44180: LD_INT 36
44182: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44183: LD_VAR 0 1
44187: PPUSH
44188: LD_VAR 0 3
44192: PPUSH
44193: LD_VAR 0 4
44197: PPUSH
44198: CALL_OW 297
44202: PUSH
44203: LD_VAR 0 14
44207: GREATER
44208: IFFALSE 44212
// exit ;
44210: GO 44737
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44212: LD_ADDR_VAR 0 12
44216: PUSH
44217: LD_VAR 0 2
44221: PPUSH
44222: LD_VAR 0 3
44226: PPUSH
44227: LD_VAR 0 4
44231: PPUSH
44232: LD_VAR 0 5
44236: PPUSH
44237: LD_VAR 0 1
44241: PPUSH
44242: CALL_OW 248
44246: PPUSH
44247: LD_INT 0
44249: PPUSH
44250: CALL 44742 0 6
44254: ST_TO_ADDR
// if not hexes then
44255: LD_VAR 0 12
44259: NOT
44260: IFFALSE 44264
// exit ;
44262: GO 44737
// hex := GetHexInfo ( x , y ) ;
44264: LD_ADDR_VAR 0 15
44268: PUSH
44269: LD_VAR 0 3
44273: PPUSH
44274: LD_VAR 0 4
44278: PPUSH
44279: CALL_OW 546
44283: ST_TO_ADDR
// if hex [ 1 ] then
44284: LD_VAR 0 15
44288: PUSH
44289: LD_INT 1
44291: ARRAY
44292: IFFALSE 44296
// exit ;
44294: GO 44737
// height := hex [ 2 ] ;
44296: LD_ADDR_VAR 0 13
44300: PUSH
44301: LD_VAR 0 15
44305: PUSH
44306: LD_INT 2
44308: ARRAY
44309: ST_TO_ADDR
// for i = 1 to hexes do
44310: LD_ADDR_VAR 0 7
44314: PUSH
44315: DOUBLE
44316: LD_INT 1
44318: DEC
44319: ST_TO_ADDR
44320: LD_VAR 0 12
44324: PUSH
44325: FOR_TO
44326: IFFALSE 44656
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44328: LD_VAR 0 12
44332: PUSH
44333: LD_VAR 0 7
44337: ARRAY
44338: PUSH
44339: LD_INT 1
44341: ARRAY
44342: PPUSH
44343: LD_VAR 0 12
44347: PUSH
44348: LD_VAR 0 7
44352: ARRAY
44353: PUSH
44354: LD_INT 2
44356: ARRAY
44357: PPUSH
44358: CALL_OW 488
44362: NOT
44363: PUSH
44364: LD_VAR 0 12
44368: PUSH
44369: LD_VAR 0 7
44373: ARRAY
44374: PUSH
44375: LD_INT 1
44377: ARRAY
44378: PPUSH
44379: LD_VAR 0 12
44383: PUSH
44384: LD_VAR 0 7
44388: ARRAY
44389: PUSH
44390: LD_INT 2
44392: ARRAY
44393: PPUSH
44394: CALL_OW 428
44398: PUSH
44399: LD_INT 0
44401: GREATER
44402: OR
44403: PUSH
44404: LD_VAR 0 12
44408: PUSH
44409: LD_VAR 0 7
44413: ARRAY
44414: PUSH
44415: LD_INT 1
44417: ARRAY
44418: PPUSH
44419: LD_VAR 0 12
44423: PUSH
44424: LD_VAR 0 7
44428: ARRAY
44429: PUSH
44430: LD_INT 2
44432: ARRAY
44433: PPUSH
44434: CALL_OW 351
44438: OR
44439: IFFALSE 44445
// exit ;
44441: POP
44442: POP
44443: GO 44737
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44445: LD_ADDR_VAR 0 8
44449: PUSH
44450: LD_VAR 0 12
44454: PUSH
44455: LD_VAR 0 7
44459: ARRAY
44460: PUSH
44461: LD_INT 1
44463: ARRAY
44464: PPUSH
44465: LD_VAR 0 12
44469: PUSH
44470: LD_VAR 0 7
44474: ARRAY
44475: PUSH
44476: LD_INT 2
44478: ARRAY
44479: PPUSH
44480: CALL_OW 546
44484: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44485: LD_VAR 0 8
44489: PUSH
44490: LD_INT 1
44492: ARRAY
44493: PUSH
44494: LD_VAR 0 8
44498: PUSH
44499: LD_INT 2
44501: ARRAY
44502: PUSH
44503: LD_VAR 0 13
44507: PUSH
44508: LD_INT 2
44510: PLUS
44511: GREATER
44512: OR
44513: PUSH
44514: LD_VAR 0 8
44518: PUSH
44519: LD_INT 2
44521: ARRAY
44522: PUSH
44523: LD_VAR 0 13
44527: PUSH
44528: LD_INT 2
44530: MINUS
44531: LESS
44532: OR
44533: PUSH
44534: LD_VAR 0 8
44538: PUSH
44539: LD_INT 3
44541: ARRAY
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 8
44548: PUSH
44549: LD_INT 9
44551: PUSH
44552: LD_INT 10
44554: PUSH
44555: LD_INT 11
44557: PUSH
44558: LD_INT 12
44560: PUSH
44561: LD_INT 13
44563: PUSH
44564: LD_INT 16
44566: PUSH
44567: LD_INT 17
44569: PUSH
44570: LD_INT 18
44572: PUSH
44573: LD_INT 19
44575: PUSH
44576: LD_INT 20
44578: PUSH
44579: LD_INT 21
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: IN
44597: NOT
44598: OR
44599: PUSH
44600: LD_VAR 0 8
44604: PUSH
44605: LD_INT 5
44607: ARRAY
44608: NOT
44609: OR
44610: PUSH
44611: LD_VAR 0 8
44615: PUSH
44616: LD_INT 6
44618: ARRAY
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: LD_INT 7
44628: PUSH
44629: LD_INT 9
44631: PUSH
44632: LD_INT 10
44634: PUSH
44635: LD_INT 11
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: IN
44646: NOT
44647: OR
44648: IFFALSE 44654
// exit ;
44650: POP
44651: POP
44652: GO 44737
// end ;
44654: GO 44325
44656: POP
44657: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44658: LD_VAR 0 9
44662: PPUSH
44663: LD_VAR 0 3
44667: PPUSH
44668: LD_VAR 0 4
44672: PPUSH
44673: LD_INT 20
44675: PPUSH
44676: CALL 36660 0 4
44680: PUSH
44681: LD_INT 4
44683: ARRAY
44684: IFFALSE 44688
// exit ;
44686: GO 44737
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44688: LD_VAR 0 2
44692: PUSH
44693: LD_INT 29
44695: PUSH
44696: LD_INT 30
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: IN
44703: PUSH
44704: LD_VAR 0 3
44708: PPUSH
44709: LD_VAR 0 4
44713: PPUSH
44714: LD_VAR 0 9
44718: PPUSH
44719: CALL_OW 440
44723: NOT
44724: AND
44725: IFFALSE 44729
// exit ;
44727: GO 44737
// result := true ;
44729: LD_ADDR_VAR 0 6
44733: PUSH
44734: LD_INT 1
44736: ST_TO_ADDR
// end ;
44737: LD_VAR 0 6
44741: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44742: LD_INT 0
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
44749: PPUSH
44750: PPUSH
44751: PPUSH
44752: PPUSH
44753: PPUSH
44754: PPUSH
44755: PPUSH
44756: PPUSH
44757: PPUSH
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
44768: PPUSH
44769: PPUSH
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
44798: PPUSH
44799: PPUSH
44800: PPUSH
44801: PPUSH
// result = [ ] ;
44802: LD_ADDR_VAR 0 7
44806: PUSH
44807: EMPTY
44808: ST_TO_ADDR
// temp_list = [ ] ;
44809: LD_ADDR_VAR 0 9
44813: PUSH
44814: EMPTY
44815: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44816: LD_VAR 0 4
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 3
44832: PUSH
44833: LD_INT 4
44835: PUSH
44836: LD_INT 5
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: IN
44847: NOT
44848: PUSH
44849: LD_VAR 0 1
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: IN
44864: PUSH
44865: LD_VAR 0 5
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 3
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: IN
44884: NOT
44885: AND
44886: OR
44887: IFFALSE 44891
// exit ;
44889: GO 63282
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44891: LD_VAR 0 1
44895: PUSH
44896: LD_INT 6
44898: PUSH
44899: LD_INT 7
44901: PUSH
44902: LD_INT 8
44904: PUSH
44905: LD_INT 13
44907: PUSH
44908: LD_INT 12
44910: PUSH
44911: LD_INT 15
44913: PUSH
44914: LD_INT 11
44916: PUSH
44917: LD_INT 14
44919: PUSH
44920: LD_INT 10
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: IN
44934: IFFALSE 44944
// btype = b_lab ;
44936: LD_ADDR_VAR 0 1
44940: PUSH
44941: LD_INT 6
44943: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44944: LD_VAR 0 6
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: IN
44963: NOT
44964: PUSH
44965: LD_VAR 0 1
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: LD_INT 6
44984: PUSH
44985: LD_INT 36
44987: PUSH
44988: LD_INT 4
44990: PUSH
44991: LD_INT 5
44993: PUSH
44994: LD_INT 31
44996: PUSH
44997: LD_INT 32
44999: PUSH
45000: LD_INT 33
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: IN
45016: NOT
45017: PUSH
45018: LD_VAR 0 6
45022: PUSH
45023: LD_INT 1
45025: EQUAL
45026: AND
45027: OR
45028: PUSH
45029: LD_VAR 0 1
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: IN
45044: NOT
45045: PUSH
45046: LD_VAR 0 6
45050: PUSH
45051: LD_INT 2
45053: EQUAL
45054: AND
45055: OR
45056: IFFALSE 45066
// mode = 0 ;
45058: LD_ADDR_VAR 0 6
45062: PUSH
45063: LD_INT 0
45065: ST_TO_ADDR
// case mode of 0 :
45066: LD_VAR 0 6
45070: PUSH
45071: LD_INT 0
45073: DOUBLE
45074: EQUAL
45075: IFTRUE 45079
45077: GO 56532
45079: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45080: LD_ADDR_VAR 0 11
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45273: LD_ADDR_VAR 0 12
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 3
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45469: LD_ADDR_VAR 0 13
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 3
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 3
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 3
45640: NEG
45641: PUSH
45642: LD_INT 3
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45668: LD_ADDR_VAR 0 14
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 3
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 3
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45864: LD_ADDR_VAR 0 15
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 3
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46057: LD_ADDR_VAR 0 16
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46250: LD_ADDR_VAR 0 17
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46480: LD_ADDR_VAR 0 18
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46710: LD_ADDR_VAR 0 19
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46940: LD_ADDR_VAR 0 20
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47170: LD_ADDR_VAR 0 21
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47400: LD_ADDR_VAR 0 22
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47630: LD_ADDR_VAR 0 23
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47910: LD_ADDR_VAR 0 24
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48186: LD_ADDR_VAR 0 25
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 3
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48460: LD_ADDR_VAR 0 26
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 3
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48736: LD_ADDR_VAR 0 27
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 3
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49016: LD_ADDR_VAR 0 28
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 3
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49298: LD_ADDR_VAR 0 29
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49577: LD_ADDR_VAR 0 30
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 3
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 3
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49855: LD_ADDR_VAR 0 31
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 3
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 3
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50133: LD_ADDR_VAR 0 32
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50411: LD_ADDR_VAR 0 33
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50690: LD_ADDR_VAR 0 34
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50970: LD_ADDR_VAR 0 35
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51082: LD_ADDR_VAR 0 36
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51194: LD_ADDR_VAR 0 37
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51306: LD_ADDR_VAR 0 38
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51418: LD_ADDR_VAR 0 39
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51530: LD_ADDR_VAR 0 40
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51642: LD_ADDR_VAR 0 41
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: NEG
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 3
51939: NEG
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: LD_INT 3
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51992: LD_ADDR_VAR 0 42
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 3
52289: NEG
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52342: LD_ADDR_VAR 0 43
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 3
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: NEG
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 3
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52690: LD_ADDR_VAR 0 44
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 3
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: NEG
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 3
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 3
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53040: LD_ADDR_VAR 0 45
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 3
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 3
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: LD_INT 3
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53390: LD_ADDR_VAR 0 46
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 3
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 3
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 3
53697: NEG
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53738: LD_ADDR_VAR 0 47
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53889: LD_ADDR_VAR 0 48
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54036: LD_ADDR_VAR 0 49
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54180: LD_ADDR_VAR 0 50
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54324: LD_ADDR_VAR 0 51
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54471: LD_ADDR_VAR 0 52
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54622: LD_ADDR_VAR 0 53
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54852: LD_ADDR_VAR 0 54
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 2
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55082: LD_ADDR_VAR 0 55
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55312: LD_ADDR_VAR 0 56
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55542: LD_ADDR_VAR 0 57
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55772: LD_ADDR_VAR 0 58
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56002: LD_ADDR_VAR 0 59
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56090: LD_ADDR_VAR 0 60
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56178: LD_ADDR_VAR 0 61
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56266: LD_ADDR_VAR 0 62
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56354: LD_ADDR_VAR 0 63
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56442: LD_ADDR_VAR 0 64
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: ST_TO_ADDR
// end ; 1 :
56530: GO 62427
56532: LD_INT 1
56534: DOUBLE
56535: EQUAL
56536: IFTRUE 56540
56538: GO 59163
56540: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56541: LD_ADDR_VAR 0 11
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 3
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56585: LD_ADDR_VAR 0 12
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56626: LD_ADDR_VAR 0 13
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56666: LD_ADDR_VAR 0 14
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56707: LD_ADDR_VAR 0 15
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: NEG
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56751: LD_ADDR_VAR 0 16
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: LD_INT 3
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 3
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56797: LD_ADDR_VAR 0 17
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56841: LD_ADDR_VAR 0 18
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: LIST
56881: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56882: LD_ADDR_VAR 0 19
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 3
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56922: LD_ADDR_VAR 0 20
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56963: LD_ADDR_VAR 0 21
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57007: LD_ADDR_VAR 0 22
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57053: LD_ADDR_VAR 0 23
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 4
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 3
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57097: LD_ADDR_VAR 0 24
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 4
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57138: LD_ADDR_VAR 0 25
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57178: LD_ADDR_VAR 0 26
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 4
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: LIST
57218: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57219: LD_ADDR_VAR 0 27
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 4
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57263: LD_ADDR_VAR 0 28
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: LD_INT 4
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 4
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57309: LD_ADDR_VAR 0 29
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 4
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 4
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 5
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 5
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 4
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 6
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 6
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 5
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57464: LD_ADDR_VAR 0 30
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 4
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 4
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 4
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 5
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 5
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 5
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 6
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 6
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57607: LD_ADDR_VAR 0 31
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 3
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 4
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 4
57654: PUSH
57655: LD_INT 4
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 4
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 5
57674: PUSH
57675: LD_INT 4
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 5
57684: PUSH
57685: LD_INT 5
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: PUSH
57695: LD_INT 5
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 6
57704: PUSH
57705: LD_INT 5
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 6
57714: PUSH
57715: LD_INT 6
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 5
57724: PUSH
57725: LD_INT 6
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57746: LD_ADDR_VAR 0 32
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 4
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 5
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 5
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 4
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 6
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 6
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 5
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57889: LD_ADDR_VAR 0 33
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 4
57941: NEG
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 4
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 4
57964: NEG
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 5
57975: NEG
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 5
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 5
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 6
58009: NEG
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 6
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58044: LD_ADDR_VAR 0 34
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: LD_INT 3
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: LD_INT 4
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: NEG
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 4
58111: NEG
58112: PUSH
58113: LD_INT 4
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 4
58123: NEG
58124: PUSH
58125: LD_INT 5
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 5
58135: NEG
58136: PUSH
58137: LD_INT 4
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 5
58147: NEG
58148: PUSH
58149: LD_INT 5
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 5
58159: NEG
58160: PUSH
58161: LD_INT 6
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 6
58171: NEG
58172: PUSH
58173: LD_INT 5
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 6
58183: NEG
58184: PUSH
58185: LD_INT 6
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58207: LD_ADDR_VAR 0 41
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 3
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58251: LD_ADDR_VAR 0 42
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: LIST
58291: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58292: LD_ADDR_VAR 0 43
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58332: LD_ADDR_VAR 0 44
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58373: LD_ADDR_VAR 0 45
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58417: LD_ADDR_VAR 0 46
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58463: LD_ADDR_VAR 0 47
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58496: LD_ADDR_VAR 0 48
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58527: LD_ADDR_VAR 0 49
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58556: LD_ADDR_VAR 0 50
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 3
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58585: LD_ADDR_VAR 0 51
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58616: LD_ADDR_VAR 0 52
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58649: LD_ADDR_VAR 0 53
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 3
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58693: LD_ADDR_VAR 0 54
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58734: LD_ADDR_VAR 0 55
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58774: LD_ADDR_VAR 0 56
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58815: LD_ADDR_VAR 0 57
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58859: LD_ADDR_VAR 0 58
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: LD_INT 3
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: LIST
58904: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58905: LD_ADDR_VAR 0 59
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: LIST
58948: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58949: LD_ADDR_VAR 0 60
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58990: LD_ADDR_VAR 0 61
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59030: LD_ADDR_VAR 0 62
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: LIST
59070: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59071: LD_ADDR_VAR 0 63
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59115: LD_ADDR_VAR 0 64
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: LIST
59160: ST_TO_ADDR
// end ; 2 :
59161: GO 62427
59163: LD_INT 2
59165: DOUBLE
59166: EQUAL
59167: IFTRUE 59171
59169: GO 62426
59171: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59172: LD_ADDR_VAR 0 29
59176: PUSH
59177: LD_INT 4
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 5
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 5
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 4
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 5
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 4
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: LD_INT 4
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 4
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: LD_INT 4
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 5
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 5
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 4
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 5
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 3
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 4
59511: NEG
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 4
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 4
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 4
59557: NEG
59558: PUSH
59559: LD_INT 4
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 4
59569: NEG
59570: PUSH
59571: LD_INT 5
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: LD_INT 4
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: NEG
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: NEG
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 5
59617: NEG
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 5
59629: NEG
59630: PUSH
59631: LD_INT 5
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: LD_INT 5
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: NEG
59654: PUSH
59655: LD_INT 3
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59710: LD_ADDR_VAR 0 30
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 5
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 5
59747: PUSH
59748: LD_INT 5
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: LD_INT 5
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: LD_INT 3
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 5
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: LD_INT 5
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 4
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 4
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: LD_INT 4
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 4
59900: NEG
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 5
59956: NEG
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 5
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 5
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: LD_INT 4
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: LD_INT 4
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 4
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 4
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 5
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 4
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 4
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: LD_INT 5
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 3
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: LD_INT 5
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60257: LD_ADDR_VAR 0 31
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: LD_INT 3
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 4
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 5
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 5
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 4
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 5
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 4
60413: NEG
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 4
60424: NEG
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 4
60436: NEG
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 4
60459: NEG
60460: PUSH
60461: LD_INT 4
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 4
60471: NEG
60472: PUSH
60473: LD_INT 5
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: NEG
60484: PUSH
60485: LD_INT 4
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 4
60507: NEG
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 5
60519: NEG
60520: PUSH
60521: LD_INT 4
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 5
60531: NEG
60532: PUSH
60533: LD_INT 5
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: LD_INT 5
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 5
60555: NEG
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 4
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 3
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: LD_INT 4
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 4
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 4
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 5
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 5
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 4
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 3
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 5
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60807: LD_ADDR_VAR 0 32
60811: PUSH
60812: LD_INT 4
60814: NEG
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 4
60825: NEG
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 3
60837: NEG
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 4
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 5
60870: NEG
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 5
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 5
60893: NEG
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: LD_INT 4
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: LD_INT 3
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 4
60988: NEG
60989: PUSH
60990: LD_INT 4
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: LD_INT 4
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 4
61012: NEG
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 4
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: LD_INT 5
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 3
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 4
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 5
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 5
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 4
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 4
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: PUSH
61199: LD_INT 2
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 4
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 4
61219: PUSH
61220: LD_INT 4
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 4
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 5
61239: PUSH
61240: LD_INT 4
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 5
61249: PUSH
61250: LD_INT 5
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 4
61259: PUSH
61260: LD_INT 5
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: LD_INT 4
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 5
61289: PUSH
61290: LD_INT 3
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: LD_INT 5
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61354: LD_ADDR_VAR 0 33
61358: PUSH
61359: LD_INT 4
61361: NEG
61362: PUSH
61363: LD_INT 4
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 4
61373: NEG
61374: PUSH
61375: LD_INT 5
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: NEG
61386: PUSH
61387: LD_INT 4
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 3
61397: NEG
61398: PUSH
61399: LD_INT 3
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 4
61409: NEG
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 5
61421: NEG
61422: PUSH
61423: LD_INT 4
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 5
61433: NEG
61434: PUSH
61435: LD_INT 5
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: LD_INT 5
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 5
61457: NEG
61458: PUSH
61459: LD_INT 3
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 3
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 4
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 3
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: LD_INT 4
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: LD_INT 2
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: NEG
61560: PUSH
61561: LD_INT 4
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 4
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 5
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 5
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 4
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 5
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 4
61684: PUSH
61685: LD_INT 3
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 4
61694: PUSH
61695: LD_INT 4
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: LD_INT 4
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: PUSH
61715: LD_INT 3
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 4
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 4
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 4
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 5
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 4
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 3
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: LD_INT 5
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61892: LD_ADDR_VAR 0 34
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 4
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 5
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: LD_INT 4
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: LD_INT 3
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: LD_INT 3
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 4
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: LD_INT 5
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 3
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: LD_INT 5
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 4
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 4
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 4
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 4
62094: PUSH
62095: LD_INT 4
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 4
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 5
62114: PUSH
62115: LD_INT 4
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 5
62124: PUSH
62125: LD_INT 5
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 4
62134: PUSH
62135: LD_INT 5
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: LD_INT 4
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 5
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 3
62174: PUSH
62175: LD_INT 5
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 3
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 3
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: LD_INT 4
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 4
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: LD_INT 3
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: LD_INT 4
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 4
62277: NEG
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 4
62288: NEG
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 3
62311: NEG
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 4
62322: NEG
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 5
62333: NEG
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 5
62344: NEG
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 5
62356: NEG
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: NEG
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: ST_TO_ADDR
// end ; end ;
62424: GO 62427
62426: POP
// case btype of b_depot , b_warehouse :
62427: LD_VAR 0 1
62431: PUSH
62432: LD_INT 0
62434: DOUBLE
62435: EQUAL
62436: IFTRUE 62446
62438: LD_INT 1
62440: DOUBLE
62441: EQUAL
62442: IFTRUE 62446
62444: GO 62647
62446: POP
// case nation of nation_american :
62447: LD_VAR 0 5
62451: PUSH
62452: LD_INT 1
62454: DOUBLE
62455: EQUAL
62456: IFTRUE 62460
62458: GO 62516
62460: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62461: LD_ADDR_VAR 0 9
62465: PUSH
62466: LD_VAR 0 11
62470: PUSH
62471: LD_VAR 0 12
62475: PUSH
62476: LD_VAR 0 13
62480: PUSH
62481: LD_VAR 0 14
62485: PUSH
62486: LD_VAR 0 15
62490: PUSH
62491: LD_VAR 0 16
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: PUSH
62504: LD_VAR 0 4
62508: PUSH
62509: LD_INT 1
62511: PLUS
62512: ARRAY
62513: ST_TO_ADDR
62514: GO 62645
62516: LD_INT 2
62518: DOUBLE
62519: EQUAL
62520: IFTRUE 62524
62522: GO 62580
62524: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62525: LD_ADDR_VAR 0 9
62529: PUSH
62530: LD_VAR 0 17
62534: PUSH
62535: LD_VAR 0 18
62539: PUSH
62540: LD_VAR 0 19
62544: PUSH
62545: LD_VAR 0 20
62549: PUSH
62550: LD_VAR 0 21
62554: PUSH
62555: LD_VAR 0 22
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: PUSH
62568: LD_VAR 0 4
62572: PUSH
62573: LD_INT 1
62575: PLUS
62576: ARRAY
62577: ST_TO_ADDR
62578: GO 62645
62580: LD_INT 3
62582: DOUBLE
62583: EQUAL
62584: IFTRUE 62588
62586: GO 62644
62588: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62589: LD_ADDR_VAR 0 9
62593: PUSH
62594: LD_VAR 0 23
62598: PUSH
62599: LD_VAR 0 24
62603: PUSH
62604: LD_VAR 0 25
62608: PUSH
62609: LD_VAR 0 26
62613: PUSH
62614: LD_VAR 0 27
62618: PUSH
62619: LD_VAR 0 28
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: PUSH
62632: LD_VAR 0 4
62636: PUSH
62637: LD_INT 1
62639: PLUS
62640: ARRAY
62641: ST_TO_ADDR
62642: GO 62645
62644: POP
62645: GO 63200
62647: LD_INT 2
62649: DOUBLE
62650: EQUAL
62651: IFTRUE 62661
62653: LD_INT 3
62655: DOUBLE
62656: EQUAL
62657: IFTRUE 62661
62659: GO 62717
62661: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62662: LD_ADDR_VAR 0 9
62666: PUSH
62667: LD_VAR 0 29
62671: PUSH
62672: LD_VAR 0 30
62676: PUSH
62677: LD_VAR 0 31
62681: PUSH
62682: LD_VAR 0 32
62686: PUSH
62687: LD_VAR 0 33
62691: PUSH
62692: LD_VAR 0 34
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: PUSH
62705: LD_VAR 0 4
62709: PUSH
62710: LD_INT 1
62712: PLUS
62713: ARRAY
62714: ST_TO_ADDR
62715: GO 63200
62717: LD_INT 16
62719: DOUBLE
62720: EQUAL
62721: IFTRUE 62779
62723: LD_INT 17
62725: DOUBLE
62726: EQUAL
62727: IFTRUE 62779
62729: LD_INT 18
62731: DOUBLE
62732: EQUAL
62733: IFTRUE 62779
62735: LD_INT 19
62737: DOUBLE
62738: EQUAL
62739: IFTRUE 62779
62741: LD_INT 22
62743: DOUBLE
62744: EQUAL
62745: IFTRUE 62779
62747: LD_INT 20
62749: DOUBLE
62750: EQUAL
62751: IFTRUE 62779
62753: LD_INT 21
62755: DOUBLE
62756: EQUAL
62757: IFTRUE 62779
62759: LD_INT 23
62761: DOUBLE
62762: EQUAL
62763: IFTRUE 62779
62765: LD_INT 24
62767: DOUBLE
62768: EQUAL
62769: IFTRUE 62779
62771: LD_INT 25
62773: DOUBLE
62774: EQUAL
62775: IFTRUE 62779
62777: GO 62835
62779: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62780: LD_ADDR_VAR 0 9
62784: PUSH
62785: LD_VAR 0 35
62789: PUSH
62790: LD_VAR 0 36
62794: PUSH
62795: LD_VAR 0 37
62799: PUSH
62800: LD_VAR 0 38
62804: PUSH
62805: LD_VAR 0 39
62809: PUSH
62810: LD_VAR 0 40
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: PUSH
62823: LD_VAR 0 4
62827: PUSH
62828: LD_INT 1
62830: PLUS
62831: ARRAY
62832: ST_TO_ADDR
62833: GO 63200
62835: LD_INT 6
62837: DOUBLE
62838: EQUAL
62839: IFTRUE 62891
62841: LD_INT 7
62843: DOUBLE
62844: EQUAL
62845: IFTRUE 62891
62847: LD_INT 8
62849: DOUBLE
62850: EQUAL
62851: IFTRUE 62891
62853: LD_INT 13
62855: DOUBLE
62856: EQUAL
62857: IFTRUE 62891
62859: LD_INT 12
62861: DOUBLE
62862: EQUAL
62863: IFTRUE 62891
62865: LD_INT 15
62867: DOUBLE
62868: EQUAL
62869: IFTRUE 62891
62871: LD_INT 11
62873: DOUBLE
62874: EQUAL
62875: IFTRUE 62891
62877: LD_INT 14
62879: DOUBLE
62880: EQUAL
62881: IFTRUE 62891
62883: LD_INT 10
62885: DOUBLE
62886: EQUAL
62887: IFTRUE 62891
62889: GO 62947
62891: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62892: LD_ADDR_VAR 0 9
62896: PUSH
62897: LD_VAR 0 41
62901: PUSH
62902: LD_VAR 0 42
62906: PUSH
62907: LD_VAR 0 43
62911: PUSH
62912: LD_VAR 0 44
62916: PUSH
62917: LD_VAR 0 45
62921: PUSH
62922: LD_VAR 0 46
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: PUSH
62935: LD_VAR 0 4
62939: PUSH
62940: LD_INT 1
62942: PLUS
62943: ARRAY
62944: ST_TO_ADDR
62945: GO 63200
62947: LD_INT 36
62949: DOUBLE
62950: EQUAL
62951: IFTRUE 62955
62953: GO 63011
62955: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62956: LD_ADDR_VAR 0 9
62960: PUSH
62961: LD_VAR 0 47
62965: PUSH
62966: LD_VAR 0 48
62970: PUSH
62971: LD_VAR 0 49
62975: PUSH
62976: LD_VAR 0 50
62980: PUSH
62981: LD_VAR 0 51
62985: PUSH
62986: LD_VAR 0 52
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: PUSH
62999: LD_VAR 0 4
63003: PUSH
63004: LD_INT 1
63006: PLUS
63007: ARRAY
63008: ST_TO_ADDR
63009: GO 63200
63011: LD_INT 4
63013: DOUBLE
63014: EQUAL
63015: IFTRUE 63037
63017: LD_INT 5
63019: DOUBLE
63020: EQUAL
63021: IFTRUE 63037
63023: LD_INT 34
63025: DOUBLE
63026: EQUAL
63027: IFTRUE 63037
63029: LD_INT 37
63031: DOUBLE
63032: EQUAL
63033: IFTRUE 63037
63035: GO 63093
63037: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63038: LD_ADDR_VAR 0 9
63042: PUSH
63043: LD_VAR 0 53
63047: PUSH
63048: LD_VAR 0 54
63052: PUSH
63053: LD_VAR 0 55
63057: PUSH
63058: LD_VAR 0 56
63062: PUSH
63063: LD_VAR 0 57
63067: PUSH
63068: LD_VAR 0 58
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: PUSH
63081: LD_VAR 0 4
63085: PUSH
63086: LD_INT 1
63088: PLUS
63089: ARRAY
63090: ST_TO_ADDR
63091: GO 63200
63093: LD_INT 31
63095: DOUBLE
63096: EQUAL
63097: IFTRUE 63143
63099: LD_INT 32
63101: DOUBLE
63102: EQUAL
63103: IFTRUE 63143
63105: LD_INT 33
63107: DOUBLE
63108: EQUAL
63109: IFTRUE 63143
63111: LD_INT 27
63113: DOUBLE
63114: EQUAL
63115: IFTRUE 63143
63117: LD_INT 26
63119: DOUBLE
63120: EQUAL
63121: IFTRUE 63143
63123: LD_INT 28
63125: DOUBLE
63126: EQUAL
63127: IFTRUE 63143
63129: LD_INT 29
63131: DOUBLE
63132: EQUAL
63133: IFTRUE 63143
63135: LD_INT 30
63137: DOUBLE
63138: EQUAL
63139: IFTRUE 63143
63141: GO 63199
63143: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63144: LD_ADDR_VAR 0 9
63148: PUSH
63149: LD_VAR 0 59
63153: PUSH
63154: LD_VAR 0 60
63158: PUSH
63159: LD_VAR 0 61
63163: PUSH
63164: LD_VAR 0 62
63168: PUSH
63169: LD_VAR 0 63
63173: PUSH
63174: LD_VAR 0 64
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: PUSH
63187: LD_VAR 0 4
63191: PUSH
63192: LD_INT 1
63194: PLUS
63195: ARRAY
63196: ST_TO_ADDR
63197: GO 63200
63199: POP
// temp_list2 = [ ] ;
63200: LD_ADDR_VAR 0 10
63204: PUSH
63205: EMPTY
63206: ST_TO_ADDR
// for i in temp_list do
63207: LD_ADDR_VAR 0 8
63211: PUSH
63212: LD_VAR 0 9
63216: PUSH
63217: FOR_IN
63218: IFFALSE 63270
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63220: LD_ADDR_VAR 0 10
63224: PUSH
63225: LD_VAR 0 10
63229: PUSH
63230: LD_VAR 0 8
63234: PUSH
63235: LD_INT 1
63237: ARRAY
63238: PUSH
63239: LD_VAR 0 2
63243: PLUS
63244: PUSH
63245: LD_VAR 0 8
63249: PUSH
63250: LD_INT 2
63252: ARRAY
63253: PUSH
63254: LD_VAR 0 3
63258: PLUS
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: EMPTY
63265: LIST
63266: ADD
63267: ST_TO_ADDR
63268: GO 63217
63270: POP
63271: POP
// result = temp_list2 ;
63272: LD_ADDR_VAR 0 7
63276: PUSH
63277: LD_VAR 0 10
63281: ST_TO_ADDR
// end ;
63282: LD_VAR 0 7
63286: RET
// export function EnemyInRange ( unit , dist ) ; begin
63287: LD_INT 0
63289: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63290: LD_ADDR_VAR 0 3
63294: PUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: CALL_OW 255
63304: PPUSH
63305: LD_VAR 0 1
63309: PPUSH
63310: CALL_OW 250
63314: PPUSH
63315: LD_VAR 0 1
63319: PPUSH
63320: CALL_OW 251
63324: PPUSH
63325: LD_VAR 0 2
63329: PPUSH
63330: CALL 36660 0 4
63334: PUSH
63335: LD_INT 4
63337: ARRAY
63338: ST_TO_ADDR
// end ;
63339: LD_VAR 0 3
63343: RET
// export function PlayerSeeMe ( unit ) ; begin
63344: LD_INT 0
63346: PPUSH
// result := See ( your_side , unit ) ;
63347: LD_ADDR_VAR 0 2
63351: PUSH
63352: LD_OWVAR 2
63356: PPUSH
63357: LD_VAR 0 1
63361: PPUSH
63362: CALL_OW 292
63366: ST_TO_ADDR
// end ;
63367: LD_VAR 0 2
63371: RET
// export function ReverseDir ( unit ) ; begin
63372: LD_INT 0
63374: PPUSH
// if not unit then
63375: LD_VAR 0 1
63379: NOT
63380: IFFALSE 63384
// exit ;
63382: GO 63407
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63384: LD_ADDR_VAR 0 2
63388: PUSH
63389: LD_VAR 0 1
63393: PPUSH
63394: CALL_OW 254
63398: PUSH
63399: LD_INT 3
63401: PLUS
63402: PUSH
63403: LD_INT 6
63405: MOD
63406: ST_TO_ADDR
// end ;
63407: LD_VAR 0 2
63411: RET
// export function ReverseArray ( array ) ; var i ; begin
63412: LD_INT 0
63414: PPUSH
63415: PPUSH
// if not array then
63416: LD_VAR 0 1
63420: NOT
63421: IFFALSE 63425
// exit ;
63423: GO 63480
// result := [ ] ;
63425: LD_ADDR_VAR 0 2
63429: PUSH
63430: EMPTY
63431: ST_TO_ADDR
// for i := array downto 1 do
63432: LD_ADDR_VAR 0 3
63436: PUSH
63437: DOUBLE
63438: LD_VAR 0 1
63442: INC
63443: ST_TO_ADDR
63444: LD_INT 1
63446: PUSH
63447: FOR_DOWNTO
63448: IFFALSE 63478
// result := Join ( result , array [ i ] ) ;
63450: LD_ADDR_VAR 0 2
63454: PUSH
63455: LD_VAR 0 2
63459: PPUSH
63460: LD_VAR 0 1
63464: PUSH
63465: LD_VAR 0 3
63469: ARRAY
63470: PPUSH
63471: CALL 68123 0 2
63475: ST_TO_ADDR
63476: GO 63447
63478: POP
63479: POP
// end ;
63480: LD_VAR 0 2
63484: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63485: LD_INT 0
63487: PPUSH
63488: PPUSH
63489: PPUSH
63490: PPUSH
63491: PPUSH
63492: PPUSH
// if not unit or not hexes then
63493: LD_VAR 0 1
63497: NOT
63498: PUSH
63499: LD_VAR 0 2
63503: NOT
63504: OR
63505: IFFALSE 63509
// exit ;
63507: GO 63632
// dist := 9999 ;
63509: LD_ADDR_VAR 0 5
63513: PUSH
63514: LD_INT 9999
63516: ST_TO_ADDR
// for i = 1 to hexes do
63517: LD_ADDR_VAR 0 4
63521: PUSH
63522: DOUBLE
63523: LD_INT 1
63525: DEC
63526: ST_TO_ADDR
63527: LD_VAR 0 2
63531: PUSH
63532: FOR_TO
63533: IFFALSE 63620
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63535: LD_ADDR_VAR 0 6
63539: PUSH
63540: LD_VAR 0 1
63544: PPUSH
63545: LD_VAR 0 2
63549: PUSH
63550: LD_VAR 0 4
63554: ARRAY
63555: PUSH
63556: LD_INT 1
63558: ARRAY
63559: PPUSH
63560: LD_VAR 0 2
63564: PUSH
63565: LD_VAR 0 4
63569: ARRAY
63570: PUSH
63571: LD_INT 2
63573: ARRAY
63574: PPUSH
63575: CALL_OW 297
63579: ST_TO_ADDR
// if tdist < dist then
63580: LD_VAR 0 6
63584: PUSH
63585: LD_VAR 0 5
63589: LESS
63590: IFFALSE 63618
// begin hex := hexes [ i ] ;
63592: LD_ADDR_VAR 0 8
63596: PUSH
63597: LD_VAR 0 2
63601: PUSH
63602: LD_VAR 0 4
63606: ARRAY
63607: ST_TO_ADDR
// dist := tdist ;
63608: LD_ADDR_VAR 0 5
63612: PUSH
63613: LD_VAR 0 6
63617: ST_TO_ADDR
// end ; end ;
63618: GO 63532
63620: POP
63621: POP
// result := hex ;
63622: LD_ADDR_VAR 0 3
63626: PUSH
63627: LD_VAR 0 8
63631: ST_TO_ADDR
// end ;
63632: LD_VAR 0 3
63636: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63637: LD_INT 0
63639: PPUSH
63640: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63641: LD_VAR 0 1
63645: NOT
63646: PUSH
63647: LD_VAR 0 1
63651: PUSH
63652: LD_INT 21
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 23
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PPUSH
63676: CALL_OW 69
63680: IN
63681: NOT
63682: OR
63683: IFFALSE 63687
// exit ;
63685: GO 63734
// for i = 1 to 3 do
63687: LD_ADDR_VAR 0 3
63691: PUSH
63692: DOUBLE
63693: LD_INT 1
63695: DEC
63696: ST_TO_ADDR
63697: LD_INT 3
63699: PUSH
63700: FOR_TO
63701: IFFALSE 63732
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63703: LD_VAR 0 1
63707: PPUSH
63708: CALL_OW 250
63712: PPUSH
63713: LD_VAR 0 1
63717: PPUSH
63718: CALL_OW 251
63722: PPUSH
63723: LD_INT 1
63725: PPUSH
63726: CALL_OW 453
63730: GO 63700
63732: POP
63733: POP
// end ;
63734: LD_VAR 0 2
63738: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63739: LD_INT 0
63741: PPUSH
63742: PPUSH
63743: PPUSH
63744: PPUSH
63745: PPUSH
63746: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63747: LD_VAR 0 1
63751: NOT
63752: PUSH
63753: LD_VAR 0 2
63757: NOT
63758: OR
63759: PUSH
63760: LD_VAR 0 1
63764: PPUSH
63765: CALL_OW 314
63769: OR
63770: IFFALSE 63774
// exit ;
63772: GO 64241
// if GetLives ( i ) < 250 then
63774: LD_VAR 0 4
63778: PPUSH
63779: CALL_OW 256
63783: PUSH
63784: LD_INT 250
63786: LESS
63787: IFFALSE 63800
// begin ComAutodestruct ( i ) ;
63789: LD_VAR 0 4
63793: PPUSH
63794: CALL 63637 0 1
// exit ;
63798: GO 64241
// end ; x := GetX ( enemy_unit ) ;
63800: LD_ADDR_VAR 0 7
63804: PUSH
63805: LD_VAR 0 2
63809: PPUSH
63810: CALL_OW 250
63814: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63815: LD_ADDR_VAR 0 8
63819: PUSH
63820: LD_VAR 0 2
63824: PPUSH
63825: CALL_OW 251
63829: ST_TO_ADDR
// if not x or not y then
63830: LD_VAR 0 7
63834: NOT
63835: PUSH
63836: LD_VAR 0 8
63840: NOT
63841: OR
63842: IFFALSE 63846
// exit ;
63844: GO 64241
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63846: LD_ADDR_VAR 0 6
63850: PUSH
63851: LD_VAR 0 7
63855: PPUSH
63856: LD_INT 0
63858: PPUSH
63859: LD_INT 4
63861: PPUSH
63862: CALL_OW 272
63866: PUSH
63867: LD_VAR 0 8
63871: PPUSH
63872: LD_INT 0
63874: PPUSH
63875: LD_INT 4
63877: PPUSH
63878: CALL_OW 273
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_VAR 0 7
63891: PPUSH
63892: LD_INT 1
63894: PPUSH
63895: LD_INT 4
63897: PPUSH
63898: CALL_OW 272
63902: PUSH
63903: LD_VAR 0 8
63907: PPUSH
63908: LD_INT 1
63910: PPUSH
63911: LD_INT 4
63913: PPUSH
63914: CALL_OW 273
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_VAR 0 7
63927: PPUSH
63928: LD_INT 2
63930: PPUSH
63931: LD_INT 4
63933: PPUSH
63934: CALL_OW 272
63938: PUSH
63939: LD_VAR 0 8
63943: PPUSH
63944: LD_INT 2
63946: PPUSH
63947: LD_INT 4
63949: PPUSH
63950: CALL_OW 273
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_VAR 0 7
63963: PPUSH
63964: LD_INT 3
63966: PPUSH
63967: LD_INT 4
63969: PPUSH
63970: CALL_OW 272
63974: PUSH
63975: LD_VAR 0 8
63979: PPUSH
63980: LD_INT 3
63982: PPUSH
63983: LD_INT 4
63985: PPUSH
63986: CALL_OW 273
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_VAR 0 7
63999: PPUSH
64000: LD_INT 4
64002: PPUSH
64003: LD_INT 4
64005: PPUSH
64006: CALL_OW 272
64010: PUSH
64011: LD_VAR 0 8
64015: PPUSH
64016: LD_INT 4
64018: PPUSH
64019: LD_INT 4
64021: PPUSH
64022: CALL_OW 273
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_VAR 0 7
64035: PPUSH
64036: LD_INT 5
64038: PPUSH
64039: LD_INT 4
64041: PPUSH
64042: CALL_OW 272
64046: PUSH
64047: LD_VAR 0 8
64051: PPUSH
64052: LD_INT 5
64054: PPUSH
64055: LD_INT 4
64057: PPUSH
64058: CALL_OW 273
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: ST_TO_ADDR
// for i = tmp downto 1 do
64075: LD_ADDR_VAR 0 4
64079: PUSH
64080: DOUBLE
64081: LD_VAR 0 6
64085: INC
64086: ST_TO_ADDR
64087: LD_INT 1
64089: PUSH
64090: FOR_DOWNTO
64091: IFFALSE 64192
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64093: LD_VAR 0 6
64097: PUSH
64098: LD_VAR 0 4
64102: ARRAY
64103: PUSH
64104: LD_INT 1
64106: ARRAY
64107: PPUSH
64108: LD_VAR 0 6
64112: PUSH
64113: LD_VAR 0 4
64117: ARRAY
64118: PUSH
64119: LD_INT 2
64121: ARRAY
64122: PPUSH
64123: CALL_OW 488
64127: NOT
64128: PUSH
64129: LD_VAR 0 6
64133: PUSH
64134: LD_VAR 0 4
64138: ARRAY
64139: PUSH
64140: LD_INT 1
64142: ARRAY
64143: PPUSH
64144: LD_VAR 0 6
64148: PUSH
64149: LD_VAR 0 4
64153: ARRAY
64154: PUSH
64155: LD_INT 2
64157: ARRAY
64158: PPUSH
64159: CALL_OW 428
64163: PUSH
64164: LD_INT 0
64166: NONEQUAL
64167: OR
64168: IFFALSE 64190
// tmp := Delete ( tmp , i ) ;
64170: LD_ADDR_VAR 0 6
64174: PUSH
64175: LD_VAR 0 6
64179: PPUSH
64180: LD_VAR 0 4
64184: PPUSH
64185: CALL_OW 3
64189: ST_TO_ADDR
64190: GO 64090
64192: POP
64193: POP
// j := GetClosestHex ( unit , tmp ) ;
64194: LD_ADDR_VAR 0 5
64198: PUSH
64199: LD_VAR 0 1
64203: PPUSH
64204: LD_VAR 0 6
64208: PPUSH
64209: CALL 63485 0 2
64213: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64214: LD_VAR 0 1
64218: PPUSH
64219: LD_VAR 0 5
64223: PUSH
64224: LD_INT 1
64226: ARRAY
64227: PPUSH
64228: LD_VAR 0 5
64232: PUSH
64233: LD_INT 2
64235: ARRAY
64236: PPUSH
64237: CALL_OW 111
// end ;
64241: LD_VAR 0 3
64245: RET
// export function PrepareApemanSoldier ( ) ; begin
64246: LD_INT 0
64248: PPUSH
// uc_nation := 0 ;
64249: LD_ADDR_OWVAR 21
64253: PUSH
64254: LD_INT 0
64256: ST_TO_ADDR
// hc_sex := sex_male ;
64257: LD_ADDR_OWVAR 27
64261: PUSH
64262: LD_INT 1
64264: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64265: LD_ADDR_OWVAR 28
64269: PUSH
64270: LD_INT 15
64272: ST_TO_ADDR
// hc_gallery :=  ;
64273: LD_ADDR_OWVAR 33
64277: PUSH
64278: LD_STRING 
64280: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64281: LD_ADDR_OWVAR 31
64285: PUSH
64286: LD_INT 0
64288: PPUSH
64289: LD_INT 3
64291: PPUSH
64292: CALL_OW 12
64296: PUSH
64297: LD_INT 0
64299: PPUSH
64300: LD_INT 3
64302: PPUSH
64303: CALL_OW 12
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: ST_TO_ADDR
// end ;
64320: LD_VAR 0 1
64324: RET
// export function PrepareApemanEngineer ( ) ; begin
64325: LD_INT 0
64327: PPUSH
// uc_nation := 0 ;
64328: LD_ADDR_OWVAR 21
64332: PUSH
64333: LD_INT 0
64335: ST_TO_ADDR
// hc_sex := sex_male ;
64336: LD_ADDR_OWVAR 27
64340: PUSH
64341: LD_INT 1
64343: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64344: LD_ADDR_OWVAR 28
64348: PUSH
64349: LD_INT 16
64351: ST_TO_ADDR
// hc_gallery :=  ;
64352: LD_ADDR_OWVAR 33
64356: PUSH
64357: LD_STRING 
64359: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64360: LD_ADDR_OWVAR 31
64364: PUSH
64365: LD_INT 0
64367: PPUSH
64368: LD_INT 3
64370: PPUSH
64371: CALL_OW 12
64375: PUSH
64376: LD_INT 0
64378: PPUSH
64379: LD_INT 3
64381: PPUSH
64382: CALL_OW 12
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: ST_TO_ADDR
// end ;
64399: LD_VAR 0 1
64403: RET
// export function PrepareApeman ( agressivity ) ; begin
64404: LD_INT 0
64406: PPUSH
// uc_side := 0 ;
64407: LD_ADDR_OWVAR 20
64411: PUSH
64412: LD_INT 0
64414: ST_TO_ADDR
// uc_nation := 0 ;
64415: LD_ADDR_OWVAR 21
64419: PUSH
64420: LD_INT 0
64422: ST_TO_ADDR
// hc_sex := sex_male ;
64423: LD_ADDR_OWVAR 27
64427: PUSH
64428: LD_INT 1
64430: ST_TO_ADDR
// hc_class := class_apeman ;
64431: LD_ADDR_OWVAR 28
64435: PUSH
64436: LD_INT 12
64438: ST_TO_ADDR
// hc_gallery :=  ;
64439: LD_ADDR_OWVAR 33
64443: PUSH
64444: LD_STRING 
64446: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64447: LD_ADDR_OWVAR 35
64451: PUSH
64452: LD_VAR 0 1
64456: NEG
64457: PPUSH
64458: LD_VAR 0 1
64462: PPUSH
64463: CALL_OW 12
64467: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64468: LD_ADDR_OWVAR 31
64472: PUSH
64473: LD_INT 0
64475: PPUSH
64476: LD_INT 3
64478: PPUSH
64479: CALL_OW 12
64483: PUSH
64484: LD_INT 0
64486: PPUSH
64487: LD_INT 3
64489: PPUSH
64490: CALL_OW 12
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: ST_TO_ADDR
// end ;
64507: LD_VAR 0 2
64511: RET
// export function PrepareTiger ( agressivity ) ; begin
64512: LD_INT 0
64514: PPUSH
// uc_side := 0 ;
64515: LD_ADDR_OWVAR 20
64519: PUSH
64520: LD_INT 0
64522: ST_TO_ADDR
// uc_nation := 0 ;
64523: LD_ADDR_OWVAR 21
64527: PUSH
64528: LD_INT 0
64530: ST_TO_ADDR
// hc_class := class_tiger ;
64531: LD_ADDR_OWVAR 28
64535: PUSH
64536: LD_INT 14
64538: ST_TO_ADDR
// hc_gallery :=  ;
64539: LD_ADDR_OWVAR 33
64543: PUSH
64544: LD_STRING 
64546: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64547: LD_ADDR_OWVAR 35
64551: PUSH
64552: LD_VAR 0 1
64556: NEG
64557: PPUSH
64558: LD_VAR 0 1
64562: PPUSH
64563: CALL_OW 12
64567: ST_TO_ADDR
// end ;
64568: LD_VAR 0 2
64572: RET
// export function PrepareEnchidna ( ) ; begin
64573: LD_INT 0
64575: PPUSH
// uc_side := 0 ;
64576: LD_ADDR_OWVAR 20
64580: PUSH
64581: LD_INT 0
64583: ST_TO_ADDR
// uc_nation := 0 ;
64584: LD_ADDR_OWVAR 21
64588: PUSH
64589: LD_INT 0
64591: ST_TO_ADDR
// hc_class := class_baggie ;
64592: LD_ADDR_OWVAR 28
64596: PUSH
64597: LD_INT 13
64599: ST_TO_ADDR
// hc_gallery :=  ;
64600: LD_ADDR_OWVAR 33
64604: PUSH
64605: LD_STRING 
64607: ST_TO_ADDR
// end ;
64608: LD_VAR 0 1
64612: RET
// export function PrepareFrog ( ) ; begin
64613: LD_INT 0
64615: PPUSH
// uc_side := 0 ;
64616: LD_ADDR_OWVAR 20
64620: PUSH
64621: LD_INT 0
64623: ST_TO_ADDR
// uc_nation := 0 ;
64624: LD_ADDR_OWVAR 21
64628: PUSH
64629: LD_INT 0
64631: ST_TO_ADDR
// hc_class := class_frog ;
64632: LD_ADDR_OWVAR 28
64636: PUSH
64637: LD_INT 19
64639: ST_TO_ADDR
// hc_gallery :=  ;
64640: LD_ADDR_OWVAR 33
64644: PUSH
64645: LD_STRING 
64647: ST_TO_ADDR
// end ;
64648: LD_VAR 0 1
64652: RET
// export function PrepareFish ( ) ; begin
64653: LD_INT 0
64655: PPUSH
// uc_side := 0 ;
64656: LD_ADDR_OWVAR 20
64660: PUSH
64661: LD_INT 0
64663: ST_TO_ADDR
// uc_nation := 0 ;
64664: LD_ADDR_OWVAR 21
64668: PUSH
64669: LD_INT 0
64671: ST_TO_ADDR
// hc_class := class_fish ;
64672: LD_ADDR_OWVAR 28
64676: PUSH
64677: LD_INT 20
64679: ST_TO_ADDR
// hc_gallery :=  ;
64680: LD_ADDR_OWVAR 33
64684: PUSH
64685: LD_STRING 
64687: ST_TO_ADDR
// end ;
64688: LD_VAR 0 1
64692: RET
// export function PrepareBird ( ) ; begin
64693: LD_INT 0
64695: PPUSH
// uc_side := 0 ;
64696: LD_ADDR_OWVAR 20
64700: PUSH
64701: LD_INT 0
64703: ST_TO_ADDR
// uc_nation := 0 ;
64704: LD_ADDR_OWVAR 21
64708: PUSH
64709: LD_INT 0
64711: ST_TO_ADDR
// hc_class := class_phororhacos ;
64712: LD_ADDR_OWVAR 28
64716: PUSH
64717: LD_INT 18
64719: ST_TO_ADDR
// hc_gallery :=  ;
64720: LD_ADDR_OWVAR 33
64724: PUSH
64725: LD_STRING 
64727: ST_TO_ADDR
// end ;
64728: LD_VAR 0 1
64732: RET
// export function PrepareHorse ( ) ; begin
64733: LD_INT 0
64735: PPUSH
// uc_side := 0 ;
64736: LD_ADDR_OWVAR 20
64740: PUSH
64741: LD_INT 0
64743: ST_TO_ADDR
// uc_nation := 0 ;
64744: LD_ADDR_OWVAR 21
64748: PUSH
64749: LD_INT 0
64751: ST_TO_ADDR
// hc_class := class_horse ;
64752: LD_ADDR_OWVAR 28
64756: PUSH
64757: LD_INT 21
64759: ST_TO_ADDR
// hc_gallery :=  ;
64760: LD_ADDR_OWVAR 33
64764: PUSH
64765: LD_STRING 
64767: ST_TO_ADDR
// end ;
64768: LD_VAR 0 1
64772: RET
// export function PrepareMastodont ( ) ; begin
64773: LD_INT 0
64775: PPUSH
// uc_side := 0 ;
64776: LD_ADDR_OWVAR 20
64780: PUSH
64781: LD_INT 0
64783: ST_TO_ADDR
// uc_nation := 0 ;
64784: LD_ADDR_OWVAR 21
64788: PUSH
64789: LD_INT 0
64791: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64792: LD_ADDR_OWVAR 37
64796: PUSH
64797: LD_INT 31
64799: ST_TO_ADDR
// vc_control := control_rider ;
64800: LD_ADDR_OWVAR 38
64804: PUSH
64805: LD_INT 4
64807: ST_TO_ADDR
// end ;
64808: LD_VAR 0 1
64812: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64813: LD_INT 0
64815: PPUSH
64816: PPUSH
64817: PPUSH
// uc_side = 0 ;
64818: LD_ADDR_OWVAR 20
64822: PUSH
64823: LD_INT 0
64825: ST_TO_ADDR
// uc_nation = 0 ;
64826: LD_ADDR_OWVAR 21
64830: PUSH
64831: LD_INT 0
64833: ST_TO_ADDR
// InitHc_All ( ) ;
64834: CALL_OW 584
// InitVc ;
64838: CALL_OW 20
// if mastodonts then
64842: LD_VAR 0 6
64846: IFFALSE 64913
// for i = 1 to mastodonts do
64848: LD_ADDR_VAR 0 11
64852: PUSH
64853: DOUBLE
64854: LD_INT 1
64856: DEC
64857: ST_TO_ADDR
64858: LD_VAR 0 6
64862: PUSH
64863: FOR_TO
64864: IFFALSE 64911
// begin vc_chassis := 31 ;
64866: LD_ADDR_OWVAR 37
64870: PUSH
64871: LD_INT 31
64873: ST_TO_ADDR
// vc_control := control_rider ;
64874: LD_ADDR_OWVAR 38
64878: PUSH
64879: LD_INT 4
64881: ST_TO_ADDR
// animal := CreateVehicle ;
64882: LD_ADDR_VAR 0 12
64886: PUSH
64887: CALL_OW 45
64891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64892: LD_VAR 0 12
64896: PPUSH
64897: LD_VAR 0 8
64901: PPUSH
64902: LD_INT 0
64904: PPUSH
64905: CALL 67041 0 3
// end ;
64909: GO 64863
64911: POP
64912: POP
// if horses then
64913: LD_VAR 0 5
64917: IFFALSE 64984
// for i = 1 to horses do
64919: LD_ADDR_VAR 0 11
64923: PUSH
64924: DOUBLE
64925: LD_INT 1
64927: DEC
64928: ST_TO_ADDR
64929: LD_VAR 0 5
64933: PUSH
64934: FOR_TO
64935: IFFALSE 64982
// begin hc_class := 21 ;
64937: LD_ADDR_OWVAR 28
64941: PUSH
64942: LD_INT 21
64944: ST_TO_ADDR
// hc_gallery :=  ;
64945: LD_ADDR_OWVAR 33
64949: PUSH
64950: LD_STRING 
64952: ST_TO_ADDR
// animal := CreateHuman ;
64953: LD_ADDR_VAR 0 12
64957: PUSH
64958: CALL_OW 44
64962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64963: LD_VAR 0 12
64967: PPUSH
64968: LD_VAR 0 8
64972: PPUSH
64973: LD_INT 0
64975: PPUSH
64976: CALL 67041 0 3
// end ;
64980: GO 64934
64982: POP
64983: POP
// if birds then
64984: LD_VAR 0 1
64988: IFFALSE 65055
// for i = 1 to birds do
64990: LD_ADDR_VAR 0 11
64994: PUSH
64995: DOUBLE
64996: LD_INT 1
64998: DEC
64999: ST_TO_ADDR
65000: LD_VAR 0 1
65004: PUSH
65005: FOR_TO
65006: IFFALSE 65053
// begin hc_class := 18 ;
65008: LD_ADDR_OWVAR 28
65012: PUSH
65013: LD_INT 18
65015: ST_TO_ADDR
// hc_gallery =  ;
65016: LD_ADDR_OWVAR 33
65020: PUSH
65021: LD_STRING 
65023: ST_TO_ADDR
// animal := CreateHuman ;
65024: LD_ADDR_VAR 0 12
65028: PUSH
65029: CALL_OW 44
65033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65034: LD_VAR 0 12
65038: PPUSH
65039: LD_VAR 0 8
65043: PPUSH
65044: LD_INT 0
65046: PPUSH
65047: CALL 67041 0 3
// end ;
65051: GO 65005
65053: POP
65054: POP
// if tigers then
65055: LD_VAR 0 2
65059: IFFALSE 65143
// for i = 1 to tigers do
65061: LD_ADDR_VAR 0 11
65065: PUSH
65066: DOUBLE
65067: LD_INT 1
65069: DEC
65070: ST_TO_ADDR
65071: LD_VAR 0 2
65075: PUSH
65076: FOR_TO
65077: IFFALSE 65141
// begin hc_class = class_tiger ;
65079: LD_ADDR_OWVAR 28
65083: PUSH
65084: LD_INT 14
65086: ST_TO_ADDR
// hc_gallery =  ;
65087: LD_ADDR_OWVAR 33
65091: PUSH
65092: LD_STRING 
65094: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65095: LD_ADDR_OWVAR 35
65099: PUSH
65100: LD_INT 7
65102: NEG
65103: PPUSH
65104: LD_INT 7
65106: PPUSH
65107: CALL_OW 12
65111: ST_TO_ADDR
// animal := CreateHuman ;
65112: LD_ADDR_VAR 0 12
65116: PUSH
65117: CALL_OW 44
65121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65122: LD_VAR 0 12
65126: PPUSH
65127: LD_VAR 0 8
65131: PPUSH
65132: LD_INT 0
65134: PPUSH
65135: CALL 67041 0 3
// end ;
65139: GO 65076
65141: POP
65142: POP
// if apemans then
65143: LD_VAR 0 3
65147: IFFALSE 65270
// for i = 1 to apemans do
65149: LD_ADDR_VAR 0 11
65153: PUSH
65154: DOUBLE
65155: LD_INT 1
65157: DEC
65158: ST_TO_ADDR
65159: LD_VAR 0 3
65163: PUSH
65164: FOR_TO
65165: IFFALSE 65268
// begin hc_class = class_apeman ;
65167: LD_ADDR_OWVAR 28
65171: PUSH
65172: LD_INT 12
65174: ST_TO_ADDR
// hc_gallery =  ;
65175: LD_ADDR_OWVAR 33
65179: PUSH
65180: LD_STRING 
65182: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65183: LD_ADDR_OWVAR 35
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PPUSH
65192: LD_INT 2
65194: PPUSH
65195: CALL_OW 12
65199: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65200: LD_ADDR_OWVAR 31
65204: PUSH
65205: LD_INT 1
65207: PPUSH
65208: LD_INT 3
65210: PPUSH
65211: CALL_OW 12
65215: PUSH
65216: LD_INT 1
65218: PPUSH
65219: LD_INT 3
65221: PPUSH
65222: CALL_OW 12
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: ST_TO_ADDR
// animal := CreateHuman ;
65239: LD_ADDR_VAR 0 12
65243: PUSH
65244: CALL_OW 44
65248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65249: LD_VAR 0 12
65253: PPUSH
65254: LD_VAR 0 8
65258: PPUSH
65259: LD_INT 0
65261: PPUSH
65262: CALL 67041 0 3
// end ;
65266: GO 65164
65268: POP
65269: POP
// if enchidnas then
65270: LD_VAR 0 4
65274: IFFALSE 65341
// for i = 1 to enchidnas do
65276: LD_ADDR_VAR 0 11
65280: PUSH
65281: DOUBLE
65282: LD_INT 1
65284: DEC
65285: ST_TO_ADDR
65286: LD_VAR 0 4
65290: PUSH
65291: FOR_TO
65292: IFFALSE 65339
// begin hc_class = 13 ;
65294: LD_ADDR_OWVAR 28
65298: PUSH
65299: LD_INT 13
65301: ST_TO_ADDR
// hc_gallery =  ;
65302: LD_ADDR_OWVAR 33
65306: PUSH
65307: LD_STRING 
65309: ST_TO_ADDR
// animal := CreateHuman ;
65310: LD_ADDR_VAR 0 12
65314: PUSH
65315: CALL_OW 44
65319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65320: LD_VAR 0 12
65324: PPUSH
65325: LD_VAR 0 8
65329: PPUSH
65330: LD_INT 0
65332: PPUSH
65333: CALL 67041 0 3
// end ;
65337: GO 65291
65339: POP
65340: POP
// if fishes then
65341: LD_VAR 0 7
65345: IFFALSE 65412
// for i = 1 to fishes do
65347: LD_ADDR_VAR 0 11
65351: PUSH
65352: DOUBLE
65353: LD_INT 1
65355: DEC
65356: ST_TO_ADDR
65357: LD_VAR 0 7
65361: PUSH
65362: FOR_TO
65363: IFFALSE 65410
// begin hc_class = 20 ;
65365: LD_ADDR_OWVAR 28
65369: PUSH
65370: LD_INT 20
65372: ST_TO_ADDR
// hc_gallery =  ;
65373: LD_ADDR_OWVAR 33
65377: PUSH
65378: LD_STRING 
65380: ST_TO_ADDR
// animal := CreateHuman ;
65381: LD_ADDR_VAR 0 12
65385: PUSH
65386: CALL_OW 44
65390: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65391: LD_VAR 0 12
65395: PPUSH
65396: LD_VAR 0 9
65400: PPUSH
65401: LD_INT 0
65403: PPUSH
65404: CALL 67041 0 3
// end ;
65408: GO 65362
65410: POP
65411: POP
// end ;
65412: LD_VAR 0 10
65416: RET
// export function WantHeal ( sci , unit ) ; begin
65417: LD_INT 0
65419: PPUSH
// if GetTaskList ( sci ) > 0 then
65420: LD_VAR 0 1
65424: PPUSH
65425: CALL_OW 437
65429: PUSH
65430: LD_INT 0
65432: GREATER
65433: IFFALSE 65503
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65435: LD_VAR 0 1
65439: PPUSH
65440: CALL_OW 437
65444: PUSH
65445: LD_INT 1
65447: ARRAY
65448: PUSH
65449: LD_INT 1
65451: ARRAY
65452: PUSH
65453: LD_STRING l
65455: EQUAL
65456: PUSH
65457: LD_VAR 0 1
65461: PPUSH
65462: CALL_OW 437
65466: PUSH
65467: LD_INT 1
65469: ARRAY
65470: PUSH
65471: LD_INT 4
65473: ARRAY
65474: PUSH
65475: LD_VAR 0 2
65479: EQUAL
65480: AND
65481: IFFALSE 65493
// result := true else
65483: LD_ADDR_VAR 0 3
65487: PUSH
65488: LD_INT 1
65490: ST_TO_ADDR
65491: GO 65501
// result := false ;
65493: LD_ADDR_VAR 0 3
65497: PUSH
65498: LD_INT 0
65500: ST_TO_ADDR
// end else
65501: GO 65511
// result := false ;
65503: LD_ADDR_VAR 0 3
65507: PUSH
65508: LD_INT 0
65510: ST_TO_ADDR
// end ;
65511: LD_VAR 0 3
65515: RET
// export function HealTarget ( sci ) ; begin
65516: LD_INT 0
65518: PPUSH
// if not sci then
65519: LD_VAR 0 1
65523: NOT
65524: IFFALSE 65528
// exit ;
65526: GO 65593
// result := 0 ;
65528: LD_ADDR_VAR 0 2
65532: PUSH
65533: LD_INT 0
65535: ST_TO_ADDR
// if GetTaskList ( sci ) then
65536: LD_VAR 0 1
65540: PPUSH
65541: CALL_OW 437
65545: IFFALSE 65593
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65547: LD_VAR 0 1
65551: PPUSH
65552: CALL_OW 437
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: PUSH
65561: LD_INT 1
65563: ARRAY
65564: PUSH
65565: LD_STRING l
65567: EQUAL
65568: IFFALSE 65593
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65570: LD_ADDR_VAR 0 2
65574: PUSH
65575: LD_VAR 0 1
65579: PPUSH
65580: CALL_OW 437
65584: PUSH
65585: LD_INT 1
65587: ARRAY
65588: PUSH
65589: LD_INT 4
65591: ARRAY
65592: ST_TO_ADDR
// end ;
65593: LD_VAR 0 2
65597: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65598: LD_INT 0
65600: PPUSH
65601: PPUSH
65602: PPUSH
65603: PPUSH
// if not base_units then
65604: LD_VAR 0 1
65608: NOT
65609: IFFALSE 65613
// exit ;
65611: GO 65700
// result := false ;
65613: LD_ADDR_VAR 0 2
65617: PUSH
65618: LD_INT 0
65620: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65621: LD_ADDR_VAR 0 5
65625: PUSH
65626: LD_VAR 0 1
65630: PPUSH
65631: LD_INT 21
65633: PUSH
65634: LD_INT 3
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PPUSH
65641: CALL_OW 72
65645: ST_TO_ADDR
// if not tmp then
65646: LD_VAR 0 5
65650: NOT
65651: IFFALSE 65655
// exit ;
65653: GO 65700
// for i in tmp do
65655: LD_ADDR_VAR 0 3
65659: PUSH
65660: LD_VAR 0 5
65664: PUSH
65665: FOR_IN
65666: IFFALSE 65698
// begin result := EnemyInRange ( i , 22 ) ;
65668: LD_ADDR_VAR 0 2
65672: PUSH
65673: LD_VAR 0 3
65677: PPUSH
65678: LD_INT 22
65680: PPUSH
65681: CALL 63287 0 2
65685: ST_TO_ADDR
// if result then
65686: LD_VAR 0 2
65690: IFFALSE 65696
// exit ;
65692: POP
65693: POP
65694: GO 65700
// end ;
65696: GO 65665
65698: POP
65699: POP
// end ;
65700: LD_VAR 0 2
65704: RET
// export function FilterByTag ( units , tag ) ; begin
65705: LD_INT 0
65707: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65708: LD_ADDR_VAR 0 3
65712: PUSH
65713: LD_VAR 0 1
65717: PPUSH
65718: LD_INT 120
65720: PUSH
65721: LD_VAR 0 2
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PPUSH
65730: CALL_OW 72
65734: ST_TO_ADDR
// end ;
65735: LD_VAR 0 3
65739: RET
// export function IsDriver ( un ) ; begin
65740: LD_INT 0
65742: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65743: LD_ADDR_VAR 0 2
65747: PUSH
65748: LD_VAR 0 1
65752: PUSH
65753: LD_INT 55
65755: PUSH
65756: EMPTY
65757: LIST
65758: PPUSH
65759: CALL_OW 69
65763: IN
65764: ST_TO_ADDR
// end ;
65765: LD_VAR 0 2
65769: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65770: LD_INT 0
65772: PPUSH
65773: PPUSH
// list := [ ] ;
65774: LD_ADDR_VAR 0 5
65778: PUSH
65779: EMPTY
65780: ST_TO_ADDR
// case d of 0 :
65781: LD_VAR 0 3
65785: PUSH
65786: LD_INT 0
65788: DOUBLE
65789: EQUAL
65790: IFTRUE 65794
65792: GO 65927
65794: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65795: LD_ADDR_VAR 0 5
65799: PUSH
65800: LD_VAR 0 1
65804: PUSH
65805: LD_INT 4
65807: MINUS
65808: PUSH
65809: LD_VAR 0 2
65813: PUSH
65814: LD_INT 4
65816: MINUS
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: PUSH
65826: LD_VAR 0 1
65830: PUSH
65831: LD_INT 3
65833: MINUS
65834: PUSH
65835: LD_VAR 0 2
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: LIST
65847: PUSH
65848: LD_VAR 0 1
65852: PUSH
65853: LD_INT 4
65855: PLUS
65856: PUSH
65857: LD_VAR 0 2
65861: PUSH
65862: LD_INT 4
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: LIST
65869: PUSH
65870: LD_VAR 0 1
65874: PUSH
65875: LD_INT 3
65877: PLUS
65878: PUSH
65879: LD_VAR 0 2
65883: PUSH
65884: LD_INT 3
65886: PLUS
65887: PUSH
65888: LD_INT 5
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: LIST
65895: PUSH
65896: LD_VAR 0 1
65900: PUSH
65901: LD_VAR 0 2
65905: PUSH
65906: LD_INT 4
65908: PLUS
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: LIST
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: ST_TO_ADDR
// end ; 1 :
65925: GO 66625
65927: LD_INT 1
65929: DOUBLE
65930: EQUAL
65931: IFTRUE 65935
65933: GO 66068
65935: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65936: LD_ADDR_VAR 0 5
65940: PUSH
65941: LD_VAR 0 1
65945: PUSH
65946: LD_VAR 0 2
65950: PUSH
65951: LD_INT 4
65953: MINUS
65954: PUSH
65955: LD_INT 3
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: PUSH
65963: LD_VAR 0 1
65967: PUSH
65968: LD_INT 3
65970: MINUS
65971: PUSH
65972: LD_VAR 0 2
65976: PUSH
65977: LD_INT 3
65979: MINUS
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: PUSH
65989: LD_VAR 0 1
65993: PUSH
65994: LD_INT 4
65996: MINUS
65997: PUSH
65998: LD_VAR 0 2
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: PUSH
66011: LD_VAR 0 1
66015: PUSH
66016: LD_VAR 0 2
66020: PUSH
66021: LD_INT 3
66023: PLUS
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: LIST
66032: PUSH
66033: LD_VAR 0 1
66037: PUSH
66038: LD_INT 4
66040: PLUS
66041: PUSH
66042: LD_VAR 0 2
66046: PUSH
66047: LD_INT 4
66049: PLUS
66050: PUSH
66051: LD_INT 5
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: ST_TO_ADDR
// end ; 2 :
66066: GO 66625
66068: LD_INT 2
66070: DOUBLE
66071: EQUAL
66072: IFTRUE 66076
66074: GO 66205
66076: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66077: LD_ADDR_VAR 0 5
66081: PUSH
66082: LD_VAR 0 1
66086: PUSH
66087: LD_VAR 0 2
66091: PUSH
66092: LD_INT 3
66094: MINUS
66095: PUSH
66096: LD_INT 3
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: LIST
66103: PUSH
66104: LD_VAR 0 1
66108: PUSH
66109: LD_INT 4
66111: PLUS
66112: PUSH
66113: LD_VAR 0 2
66117: PUSH
66118: LD_INT 4
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: LIST
66125: PUSH
66126: LD_VAR 0 1
66130: PUSH
66131: LD_VAR 0 2
66135: PUSH
66136: LD_INT 4
66138: PLUS
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: LIST
66147: PUSH
66148: LD_VAR 0 1
66152: PUSH
66153: LD_INT 3
66155: MINUS
66156: PUSH
66157: LD_VAR 0 2
66161: PUSH
66162: LD_INT 1
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: PUSH
66170: LD_VAR 0 1
66174: PUSH
66175: LD_INT 4
66177: MINUS
66178: PUSH
66179: LD_VAR 0 2
66183: PUSH
66184: LD_INT 4
66186: MINUS
66187: PUSH
66188: LD_INT 2
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: LIST
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: ST_TO_ADDR
// end ; 3 :
66203: GO 66625
66205: LD_INT 3
66207: DOUBLE
66208: EQUAL
66209: IFTRUE 66213
66211: GO 66346
66213: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66214: LD_ADDR_VAR 0 5
66218: PUSH
66219: LD_VAR 0 1
66223: PUSH
66224: LD_INT 3
66226: PLUS
66227: PUSH
66228: LD_VAR 0 2
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: LIST
66240: PUSH
66241: LD_VAR 0 1
66245: PUSH
66246: LD_INT 4
66248: PLUS
66249: PUSH
66250: LD_VAR 0 2
66254: PUSH
66255: LD_INT 4
66257: PLUS
66258: PUSH
66259: LD_INT 5
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: PUSH
66267: LD_VAR 0 1
66271: PUSH
66272: LD_INT 4
66274: MINUS
66275: PUSH
66276: LD_VAR 0 2
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: PUSH
66289: LD_VAR 0 1
66293: PUSH
66294: LD_VAR 0 2
66298: PUSH
66299: LD_INT 4
66301: MINUS
66302: PUSH
66303: LD_INT 3
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: PUSH
66311: LD_VAR 0 1
66315: PUSH
66316: LD_INT 3
66318: MINUS
66319: PUSH
66320: LD_VAR 0 2
66324: PUSH
66325: LD_INT 3
66327: MINUS
66328: PUSH
66329: LD_INT 2
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: ST_TO_ADDR
// end ; 4 :
66344: GO 66625
66346: LD_INT 4
66348: DOUBLE
66349: EQUAL
66350: IFTRUE 66354
66352: GO 66487
66354: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66355: LD_ADDR_VAR 0 5
66359: PUSH
66360: LD_VAR 0 1
66364: PUSH
66365: LD_VAR 0 2
66369: PUSH
66370: LD_INT 4
66372: PLUS
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: PUSH
66382: LD_VAR 0 1
66386: PUSH
66387: LD_INT 3
66389: PLUS
66390: PUSH
66391: LD_VAR 0 2
66395: PUSH
66396: LD_INT 3
66398: PLUS
66399: PUSH
66400: LD_INT 5
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: LIST
66407: PUSH
66408: LD_VAR 0 1
66412: PUSH
66413: LD_INT 4
66415: PLUS
66416: PUSH
66417: LD_VAR 0 2
66421: PUSH
66422: LD_INT 4
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: LIST
66429: PUSH
66430: LD_VAR 0 1
66434: PUSH
66435: LD_VAR 0 2
66439: PUSH
66440: LD_INT 3
66442: MINUS
66443: PUSH
66444: LD_INT 3
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: PUSH
66452: LD_VAR 0 1
66456: PUSH
66457: LD_INT 4
66459: MINUS
66460: PUSH
66461: LD_VAR 0 2
66465: PUSH
66466: LD_INT 4
66468: MINUS
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: LIST
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: ST_TO_ADDR
// end ; 5 :
66485: GO 66625
66487: LD_INT 5
66489: DOUBLE
66490: EQUAL
66491: IFTRUE 66495
66493: GO 66624
66495: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66496: LD_ADDR_VAR 0 5
66500: PUSH
66501: LD_VAR 0 1
66505: PUSH
66506: LD_INT 4
66508: MINUS
66509: PUSH
66510: LD_VAR 0 2
66514: PUSH
66515: LD_INT 1
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: LIST
66522: PUSH
66523: LD_VAR 0 1
66527: PUSH
66528: LD_VAR 0 2
66532: PUSH
66533: LD_INT 4
66535: MINUS
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: PUSH
66545: LD_VAR 0 1
66549: PUSH
66550: LD_INT 4
66552: PLUS
66553: PUSH
66554: LD_VAR 0 2
66558: PUSH
66559: LD_INT 4
66561: PLUS
66562: PUSH
66563: LD_INT 5
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: LIST
66570: PUSH
66571: LD_VAR 0 1
66575: PUSH
66576: LD_INT 3
66578: PLUS
66579: PUSH
66580: LD_VAR 0 2
66584: PUSH
66585: LD_INT 4
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: LIST
66592: PUSH
66593: LD_VAR 0 1
66597: PUSH
66598: LD_VAR 0 2
66602: PUSH
66603: LD_INT 3
66605: PLUS
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: LIST
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: ST_TO_ADDR
// end ; end ;
66622: GO 66625
66624: POP
// result := list ;
66625: LD_ADDR_VAR 0 4
66629: PUSH
66630: LD_VAR 0 5
66634: ST_TO_ADDR
// end ;
66635: LD_VAR 0 4
66639: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66640: LD_INT 0
66642: PPUSH
66643: PPUSH
66644: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66645: LD_VAR 0 1
66649: NOT
66650: PUSH
66651: LD_VAR 0 2
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: LD_INT 2
66661: PUSH
66662: LD_INT 3
66664: PUSH
66665: LD_INT 4
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: IN
66674: NOT
66675: OR
66676: IFFALSE 66680
// exit ;
66678: GO 66763
// tmp := [ ] ;
66680: LD_ADDR_VAR 0 5
66684: PUSH
66685: EMPTY
66686: ST_TO_ADDR
// for i in units do
66687: LD_ADDR_VAR 0 4
66691: PUSH
66692: LD_VAR 0 1
66696: PUSH
66697: FOR_IN
66698: IFFALSE 66732
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66700: LD_ADDR_VAR 0 5
66704: PUSH
66705: LD_VAR 0 5
66709: PPUSH
66710: LD_VAR 0 4
66714: PPUSH
66715: LD_VAR 0 2
66719: PPUSH
66720: CALL_OW 259
66724: PPUSH
66725: CALL 68123 0 2
66729: ST_TO_ADDR
66730: GO 66697
66732: POP
66733: POP
// if not tmp then
66734: LD_VAR 0 5
66738: NOT
66739: IFFALSE 66743
// exit ;
66741: GO 66763
// result := SortListByListDesc ( units , tmp ) ;
66743: LD_ADDR_VAR 0 3
66747: PUSH
66748: LD_VAR 0 1
66752: PPUSH
66753: LD_VAR 0 5
66757: PPUSH
66758: CALL_OW 77
66762: ST_TO_ADDR
// end ;
66763: LD_VAR 0 3
66767: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66768: LD_INT 0
66770: PPUSH
66771: PPUSH
66772: PPUSH
// result := false ;
66773: LD_ADDR_VAR 0 3
66777: PUSH
66778: LD_INT 0
66780: ST_TO_ADDR
// if not building then
66781: LD_VAR 0 2
66785: NOT
66786: IFFALSE 66790
// exit ;
66788: GO 66928
// x := GetX ( building ) ;
66790: LD_ADDR_VAR 0 4
66794: PUSH
66795: LD_VAR 0 2
66799: PPUSH
66800: CALL_OW 250
66804: ST_TO_ADDR
// y := GetY ( building ) ;
66805: LD_ADDR_VAR 0 5
66809: PUSH
66810: LD_VAR 0 2
66814: PPUSH
66815: CALL_OW 251
66819: ST_TO_ADDR
// if not x or not y then
66820: LD_VAR 0 4
66824: NOT
66825: PUSH
66826: LD_VAR 0 5
66830: NOT
66831: OR
66832: IFFALSE 66836
// exit ;
66834: GO 66928
// if GetTaskList ( unit ) then
66836: LD_VAR 0 1
66840: PPUSH
66841: CALL_OW 437
66845: IFFALSE 66928
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66847: LD_STRING e
66849: PUSH
66850: LD_VAR 0 1
66854: PPUSH
66855: CALL_OW 437
66859: PUSH
66860: LD_INT 1
66862: ARRAY
66863: PUSH
66864: LD_INT 1
66866: ARRAY
66867: EQUAL
66868: PUSH
66869: LD_VAR 0 4
66873: PUSH
66874: LD_VAR 0 1
66878: PPUSH
66879: CALL_OW 437
66883: PUSH
66884: LD_INT 1
66886: ARRAY
66887: PUSH
66888: LD_INT 2
66890: ARRAY
66891: EQUAL
66892: AND
66893: PUSH
66894: LD_VAR 0 5
66898: PUSH
66899: LD_VAR 0 1
66903: PPUSH
66904: CALL_OW 437
66908: PUSH
66909: LD_INT 1
66911: ARRAY
66912: PUSH
66913: LD_INT 3
66915: ARRAY
66916: EQUAL
66917: AND
66918: IFFALSE 66928
// result := true end ;
66920: LD_ADDR_VAR 0 3
66924: PUSH
66925: LD_INT 1
66927: ST_TO_ADDR
// end ;
66928: LD_VAR 0 3
66932: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66933: LD_INT 0
66935: PPUSH
// result := false ;
66936: LD_ADDR_VAR 0 4
66940: PUSH
66941: LD_INT 0
66943: ST_TO_ADDR
// if GetTaskList ( unit ) then
66944: LD_VAR 0 1
66948: PPUSH
66949: CALL_OW 437
66953: IFFALSE 67036
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66955: LD_STRING M
66957: PUSH
66958: LD_VAR 0 1
66962: PPUSH
66963: CALL_OW 437
66967: PUSH
66968: LD_INT 1
66970: ARRAY
66971: PUSH
66972: LD_INT 1
66974: ARRAY
66975: EQUAL
66976: PUSH
66977: LD_VAR 0 2
66981: PUSH
66982: LD_VAR 0 1
66986: PPUSH
66987: CALL_OW 437
66991: PUSH
66992: LD_INT 1
66994: ARRAY
66995: PUSH
66996: LD_INT 2
66998: ARRAY
66999: EQUAL
67000: AND
67001: PUSH
67002: LD_VAR 0 3
67006: PUSH
67007: LD_VAR 0 1
67011: PPUSH
67012: CALL_OW 437
67016: PUSH
67017: LD_INT 1
67019: ARRAY
67020: PUSH
67021: LD_INT 3
67023: ARRAY
67024: EQUAL
67025: AND
67026: IFFALSE 67036
// result := true ;
67028: LD_ADDR_VAR 0 4
67032: PUSH
67033: LD_INT 1
67035: ST_TO_ADDR
// end ; end ;
67036: LD_VAR 0 4
67040: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67041: LD_INT 0
67043: PPUSH
67044: PPUSH
67045: PPUSH
67046: PPUSH
// if not unit or not area then
67047: LD_VAR 0 1
67051: NOT
67052: PUSH
67053: LD_VAR 0 2
67057: NOT
67058: OR
67059: IFFALSE 67063
// exit ;
67061: GO 67226
// tmp := AreaToList ( area , i ) ;
67063: LD_ADDR_VAR 0 6
67067: PUSH
67068: LD_VAR 0 2
67072: PPUSH
67073: LD_VAR 0 5
67077: PPUSH
67078: CALL_OW 517
67082: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67083: LD_ADDR_VAR 0 5
67087: PUSH
67088: DOUBLE
67089: LD_INT 1
67091: DEC
67092: ST_TO_ADDR
67093: LD_VAR 0 6
67097: PUSH
67098: LD_INT 1
67100: ARRAY
67101: PUSH
67102: FOR_TO
67103: IFFALSE 67224
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67105: LD_ADDR_VAR 0 7
67109: PUSH
67110: LD_VAR 0 6
67114: PUSH
67115: LD_INT 1
67117: ARRAY
67118: PUSH
67119: LD_VAR 0 5
67123: ARRAY
67124: PUSH
67125: LD_VAR 0 6
67129: PUSH
67130: LD_INT 2
67132: ARRAY
67133: PUSH
67134: LD_VAR 0 5
67138: ARRAY
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
67144: LD_INT 92
67146: PUSH
67147: LD_VAR 0 7
67151: PUSH
67152: LD_INT 1
67154: ARRAY
67155: PUSH
67156: LD_VAR 0 7
67160: PUSH
67161: LD_INT 2
67163: ARRAY
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: PPUSH
67174: CALL_OW 69
67178: PUSH
67179: LD_INT 0
67181: EQUAL
67182: IFFALSE 67222
// begin PlaceUnitArea ( unit , area , mode ) ;
67184: LD_VAR 0 1
67188: PPUSH
67189: LD_VAR 0 2
67193: PPUSH
67194: LD_VAR 0 3
67198: PPUSH
67199: CALL_OW 49
// result := IsPlaced ( unit ) ;
67203: LD_ADDR_VAR 0 4
67207: PUSH
67208: LD_VAR 0 1
67212: PPUSH
67213: CALL_OW 305
67217: ST_TO_ADDR
// exit ;
67218: POP
67219: POP
67220: GO 67226
// end ; end ;
67222: GO 67102
67224: POP
67225: POP
// end ;
67226: LD_VAR 0 4
67230: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67231: LD_INT 0
67233: PPUSH
67234: PPUSH
67235: PPUSH
// if not side or side > 8 then
67236: LD_VAR 0 1
67240: NOT
67241: PUSH
67242: LD_VAR 0 1
67246: PUSH
67247: LD_INT 8
67249: GREATER
67250: OR
67251: IFFALSE 67255
// exit ;
67253: GO 67442
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67255: LD_ADDR_VAR 0 4
67259: PUSH
67260: LD_INT 22
67262: PUSH
67263: LD_VAR 0 1
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 21
67274: PUSH
67275: LD_INT 3
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PPUSH
67286: CALL_OW 69
67290: ST_TO_ADDR
// if not tmp then
67291: LD_VAR 0 4
67295: NOT
67296: IFFALSE 67300
// exit ;
67298: GO 67442
// enable_addtolog := true ;
67300: LD_ADDR_OWVAR 81
67304: PUSH
67305: LD_INT 1
67307: ST_TO_ADDR
// AddToLog ( [ ) ;
67308: LD_STRING [
67310: PPUSH
67311: CALL_OW 561
// for i in tmp do
67315: LD_ADDR_VAR 0 3
67319: PUSH
67320: LD_VAR 0 4
67324: PUSH
67325: FOR_IN
67326: IFFALSE 67433
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67328: LD_STRING [
67330: PUSH
67331: LD_VAR 0 3
67335: PPUSH
67336: CALL_OW 266
67340: STR
67341: PUSH
67342: LD_STRING , 
67344: STR
67345: PUSH
67346: LD_VAR 0 3
67350: PPUSH
67351: CALL_OW 250
67355: STR
67356: PUSH
67357: LD_STRING , 
67359: STR
67360: PUSH
67361: LD_VAR 0 3
67365: PPUSH
67366: CALL_OW 251
67370: STR
67371: PUSH
67372: LD_STRING , 
67374: STR
67375: PUSH
67376: LD_VAR 0 3
67380: PPUSH
67381: CALL_OW 254
67385: STR
67386: PUSH
67387: LD_STRING , 
67389: STR
67390: PUSH
67391: LD_VAR 0 3
67395: PPUSH
67396: LD_INT 1
67398: PPUSH
67399: CALL_OW 268
67403: STR
67404: PUSH
67405: LD_STRING , 
67407: STR
67408: PUSH
67409: LD_VAR 0 3
67413: PPUSH
67414: LD_INT 2
67416: PPUSH
67417: CALL_OW 268
67421: STR
67422: PUSH
67423: LD_STRING ],
67425: STR
67426: PPUSH
67427: CALL_OW 561
// end ;
67431: GO 67325
67433: POP
67434: POP
// AddToLog ( ]; ) ;
67435: LD_STRING ];
67437: PPUSH
67438: CALL_OW 561
// end ;
67442: LD_VAR 0 2
67446: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67447: LD_INT 0
67449: PPUSH
67450: PPUSH
67451: PPUSH
67452: PPUSH
67453: PPUSH
// if not area or not rate or not max then
67454: LD_VAR 0 1
67458: NOT
67459: PUSH
67460: LD_VAR 0 2
67464: NOT
67465: OR
67466: PUSH
67467: LD_VAR 0 4
67471: NOT
67472: OR
67473: IFFALSE 67477
// exit ;
67475: GO 67666
// while 1 do
67477: LD_INT 1
67479: IFFALSE 67666
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67481: LD_ADDR_VAR 0 9
67485: PUSH
67486: LD_VAR 0 1
67490: PPUSH
67491: LD_INT 1
67493: PPUSH
67494: CALL_OW 287
67498: PUSH
67499: LD_INT 10
67501: MUL
67502: ST_TO_ADDR
// r := rate / 10 ;
67503: LD_ADDR_VAR 0 7
67507: PUSH
67508: LD_VAR 0 2
67512: PUSH
67513: LD_INT 10
67515: DIVREAL
67516: ST_TO_ADDR
// time := 1 1$00 ;
67517: LD_ADDR_VAR 0 8
67521: PUSH
67522: LD_INT 2100
67524: ST_TO_ADDR
// if amount < min then
67525: LD_VAR 0 9
67529: PUSH
67530: LD_VAR 0 3
67534: LESS
67535: IFFALSE 67553
// r := r * 2 else
67537: LD_ADDR_VAR 0 7
67541: PUSH
67542: LD_VAR 0 7
67546: PUSH
67547: LD_INT 2
67549: MUL
67550: ST_TO_ADDR
67551: GO 67579
// if amount > max then
67553: LD_VAR 0 9
67557: PUSH
67558: LD_VAR 0 4
67562: GREATER
67563: IFFALSE 67579
// r := r / 2 ;
67565: LD_ADDR_VAR 0 7
67569: PUSH
67570: LD_VAR 0 7
67574: PUSH
67575: LD_INT 2
67577: DIVREAL
67578: ST_TO_ADDR
// time := time / r ;
67579: LD_ADDR_VAR 0 8
67583: PUSH
67584: LD_VAR 0 8
67588: PUSH
67589: LD_VAR 0 7
67593: DIVREAL
67594: ST_TO_ADDR
// if time < 0 then
67595: LD_VAR 0 8
67599: PUSH
67600: LD_INT 0
67602: LESS
67603: IFFALSE 67620
// time := time * - 1 ;
67605: LD_ADDR_VAR 0 8
67609: PUSH
67610: LD_VAR 0 8
67614: PUSH
67615: LD_INT 1
67617: NEG
67618: MUL
67619: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67620: LD_VAR 0 8
67624: PUSH
67625: LD_INT 35
67627: PPUSH
67628: LD_INT 875
67630: PPUSH
67631: CALL_OW 12
67635: PLUS
67636: PPUSH
67637: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67641: LD_INT 1
67643: PPUSH
67644: LD_INT 5
67646: PPUSH
67647: CALL_OW 12
67651: PPUSH
67652: LD_VAR 0 1
67656: PPUSH
67657: LD_INT 1
67659: PPUSH
67660: CALL_OW 55
// end ;
67664: GO 67477
// end ;
67666: LD_VAR 0 5
67670: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67671: LD_INT 0
67673: PPUSH
67674: PPUSH
67675: PPUSH
67676: PPUSH
67677: PPUSH
67678: PPUSH
67679: PPUSH
67680: PPUSH
// if not turrets or not factories then
67681: LD_VAR 0 1
67685: NOT
67686: PUSH
67687: LD_VAR 0 2
67691: NOT
67692: OR
67693: IFFALSE 67697
// exit ;
67695: GO 68004
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67697: LD_ADDR_VAR 0 10
67701: PUSH
67702: LD_INT 5
67704: PUSH
67705: LD_INT 6
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 2
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: LD_INT 5
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 24
67739: PUSH
67740: LD_INT 25
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 23
67749: PUSH
67750: LD_INT 27
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 42
67763: PUSH
67764: LD_INT 43
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 44
67773: PUSH
67774: LD_INT 46
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 45
67783: PUSH
67784: LD_INT 47
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: LIST
67800: ST_TO_ADDR
// result := [ ] ;
67801: LD_ADDR_VAR 0 3
67805: PUSH
67806: EMPTY
67807: ST_TO_ADDR
// for i in turrets do
67808: LD_ADDR_VAR 0 4
67812: PUSH
67813: LD_VAR 0 1
67817: PUSH
67818: FOR_IN
67819: IFFALSE 68002
// begin nat := GetNation ( i ) ;
67821: LD_ADDR_VAR 0 7
67825: PUSH
67826: LD_VAR 0 4
67830: PPUSH
67831: CALL_OW 248
67835: ST_TO_ADDR
// weapon := 0 ;
67836: LD_ADDR_VAR 0 8
67840: PUSH
67841: LD_INT 0
67843: ST_TO_ADDR
// if not nat then
67844: LD_VAR 0 7
67848: NOT
67849: IFFALSE 67853
// continue ;
67851: GO 67818
// for j in list [ nat ] do
67853: LD_ADDR_VAR 0 5
67857: PUSH
67858: LD_VAR 0 10
67862: PUSH
67863: LD_VAR 0 7
67867: ARRAY
67868: PUSH
67869: FOR_IN
67870: IFFALSE 67911
// if GetBWeapon ( i ) = j [ 1 ] then
67872: LD_VAR 0 4
67876: PPUSH
67877: CALL_OW 269
67881: PUSH
67882: LD_VAR 0 5
67886: PUSH
67887: LD_INT 1
67889: ARRAY
67890: EQUAL
67891: IFFALSE 67909
// begin weapon := j [ 2 ] ;
67893: LD_ADDR_VAR 0 8
67897: PUSH
67898: LD_VAR 0 5
67902: PUSH
67903: LD_INT 2
67905: ARRAY
67906: ST_TO_ADDR
// break ;
67907: GO 67911
// end ;
67909: GO 67869
67911: POP
67912: POP
// if not weapon then
67913: LD_VAR 0 8
67917: NOT
67918: IFFALSE 67922
// continue ;
67920: GO 67818
// for k in factories do
67922: LD_ADDR_VAR 0 6
67926: PUSH
67927: LD_VAR 0 2
67931: PUSH
67932: FOR_IN
67933: IFFALSE 67998
// begin weapons := AvailableWeaponList ( k ) ;
67935: LD_ADDR_VAR 0 9
67939: PUSH
67940: LD_VAR 0 6
67944: PPUSH
67945: CALL_OW 478
67949: ST_TO_ADDR
// if not weapons then
67950: LD_VAR 0 9
67954: NOT
67955: IFFALSE 67959
// continue ;
67957: GO 67932
// if weapon in weapons then
67959: LD_VAR 0 8
67963: PUSH
67964: LD_VAR 0 9
67968: IN
67969: IFFALSE 67996
// begin result := [ i , weapon ] ;
67971: LD_ADDR_VAR 0 3
67975: PUSH
67976: LD_VAR 0 4
67980: PUSH
67981: LD_VAR 0 8
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: ST_TO_ADDR
// exit ;
67990: POP
67991: POP
67992: POP
67993: POP
67994: GO 68004
// end ; end ;
67996: GO 67932
67998: POP
67999: POP
// end ;
68000: GO 67818
68002: POP
68003: POP
// end ;
68004: LD_VAR 0 3
68008: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68009: LD_INT 0
68011: PPUSH
// if not side or side > 8 then
68012: LD_VAR 0 3
68016: NOT
68017: PUSH
68018: LD_VAR 0 3
68022: PUSH
68023: LD_INT 8
68025: GREATER
68026: OR
68027: IFFALSE 68031
// exit ;
68029: GO 68090
// if not range then
68031: LD_VAR 0 4
68035: NOT
68036: IFFALSE 68047
// range := - 12 ;
68038: LD_ADDR_VAR 0 4
68042: PUSH
68043: LD_INT 12
68045: NEG
68046: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68047: LD_VAR 0 1
68051: PPUSH
68052: LD_VAR 0 2
68056: PPUSH
68057: LD_VAR 0 3
68061: PPUSH
68062: LD_VAR 0 4
68066: PPUSH
68067: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68071: LD_VAR 0 1
68075: PPUSH
68076: LD_VAR 0 2
68080: PPUSH
68081: LD_VAR 0 3
68085: PPUSH
68086: CALL_OW 331
// end ;
68090: LD_VAR 0 5
68094: RET
// export function Video ( mode ) ; begin
68095: LD_INT 0
68097: PPUSH
// ingame_video = mode ;
68098: LD_ADDR_OWVAR 52
68102: PUSH
68103: LD_VAR 0 1
68107: ST_TO_ADDR
// interface_hidden = mode ;
68108: LD_ADDR_OWVAR 54
68112: PUSH
68113: LD_VAR 0 1
68117: ST_TO_ADDR
// end ;
68118: LD_VAR 0 2
68122: RET
// export function Join ( array , element ) ; begin
68123: LD_INT 0
68125: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68126: LD_ADDR_VAR 0 3
68130: PUSH
68131: LD_VAR 0 1
68135: PPUSH
68136: LD_VAR 0 1
68140: PUSH
68141: LD_INT 1
68143: PLUS
68144: PPUSH
68145: LD_VAR 0 2
68149: PPUSH
68150: CALL_OW 1
68154: ST_TO_ADDR
// end ;
68155: LD_VAR 0 3
68159: RET
// export function JoinUnion ( array , element ) ; begin
68160: LD_INT 0
68162: PPUSH
// result := array union element ;
68163: LD_ADDR_VAR 0 3
68167: PUSH
68168: LD_VAR 0 1
68172: PUSH
68173: LD_VAR 0 2
68177: UNION
68178: ST_TO_ADDR
// end ;
68179: LD_VAR 0 3
68183: RET
// export function GetBehemoths ( side ) ; begin
68184: LD_INT 0
68186: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68187: LD_ADDR_VAR 0 2
68191: PUSH
68192: LD_INT 22
68194: PUSH
68195: LD_VAR 0 1
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 31
68206: PUSH
68207: LD_INT 25
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PPUSH
68218: CALL_OW 69
68222: ST_TO_ADDR
// end ;
68223: LD_VAR 0 2
68227: RET
// export function Shuffle ( array ) ; var i , index ; begin
68228: LD_INT 0
68230: PPUSH
68231: PPUSH
68232: PPUSH
// result := [ ] ;
68233: LD_ADDR_VAR 0 2
68237: PUSH
68238: EMPTY
68239: ST_TO_ADDR
// if not array then
68240: LD_VAR 0 1
68244: NOT
68245: IFFALSE 68249
// exit ;
68247: GO 68348
// Randomize ;
68249: CALL_OW 10
// for i = array downto 1 do
68253: LD_ADDR_VAR 0 3
68257: PUSH
68258: DOUBLE
68259: LD_VAR 0 1
68263: INC
68264: ST_TO_ADDR
68265: LD_INT 1
68267: PUSH
68268: FOR_DOWNTO
68269: IFFALSE 68346
// begin index := rand ( 1 , array ) ;
68271: LD_ADDR_VAR 0 4
68275: PUSH
68276: LD_INT 1
68278: PPUSH
68279: LD_VAR 0 1
68283: PPUSH
68284: CALL_OW 12
68288: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68289: LD_ADDR_VAR 0 2
68293: PUSH
68294: LD_VAR 0 2
68298: PPUSH
68299: LD_VAR 0 2
68303: PUSH
68304: LD_INT 1
68306: PLUS
68307: PPUSH
68308: LD_VAR 0 1
68312: PUSH
68313: LD_VAR 0 4
68317: ARRAY
68318: PPUSH
68319: CALL_OW 2
68323: ST_TO_ADDR
// array := Delete ( array , index ) ;
68324: LD_ADDR_VAR 0 1
68328: PUSH
68329: LD_VAR 0 1
68333: PPUSH
68334: LD_VAR 0 4
68338: PPUSH
68339: CALL_OW 3
68343: ST_TO_ADDR
// end ;
68344: GO 68268
68346: POP
68347: POP
// end ;
68348: LD_VAR 0 2
68352: RET
// export function GetBaseMaterials ( base ) ; begin
68353: LD_INT 0
68355: PPUSH
// result := [ 0 , 0 , 0 ] ;
68356: LD_ADDR_VAR 0 2
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: LD_INT 0
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: LIST
68374: ST_TO_ADDR
// if not base then
68375: LD_VAR 0 1
68379: NOT
68380: IFFALSE 68384
// exit ;
68382: GO 68433
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68384: LD_ADDR_VAR 0 2
68388: PUSH
68389: LD_VAR 0 1
68393: PPUSH
68394: LD_INT 1
68396: PPUSH
68397: CALL_OW 275
68401: PUSH
68402: LD_VAR 0 1
68406: PPUSH
68407: LD_INT 2
68409: PPUSH
68410: CALL_OW 275
68414: PUSH
68415: LD_VAR 0 1
68419: PPUSH
68420: LD_INT 3
68422: PPUSH
68423: CALL_OW 275
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: ST_TO_ADDR
// end ;
68433: LD_VAR 0 2
68437: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68438: LD_INT 0
68440: PPUSH
68441: PPUSH
// result := array ;
68442: LD_ADDR_VAR 0 3
68446: PUSH
68447: LD_VAR 0 1
68451: ST_TO_ADDR
// if size >= result then
68452: LD_VAR 0 2
68456: PUSH
68457: LD_VAR 0 3
68461: GREATEREQUAL
68462: IFFALSE 68466
// exit ;
68464: GO 68516
// if size then
68466: LD_VAR 0 2
68470: IFFALSE 68516
// for i := array downto size do
68472: LD_ADDR_VAR 0 4
68476: PUSH
68477: DOUBLE
68478: LD_VAR 0 1
68482: INC
68483: ST_TO_ADDR
68484: LD_VAR 0 2
68488: PUSH
68489: FOR_DOWNTO
68490: IFFALSE 68514
// result := Delete ( result , result ) ;
68492: LD_ADDR_VAR 0 3
68496: PUSH
68497: LD_VAR 0 3
68501: PPUSH
68502: LD_VAR 0 3
68506: PPUSH
68507: CALL_OW 3
68511: ST_TO_ADDR
68512: GO 68489
68514: POP
68515: POP
// end ;
68516: LD_VAR 0 3
68520: RET
// export function ComExit ( unit ) ; var tmp ; begin
68521: LD_INT 0
68523: PPUSH
68524: PPUSH
// if not IsInUnit ( unit ) then
68525: LD_VAR 0 1
68529: PPUSH
68530: CALL_OW 310
68534: NOT
68535: IFFALSE 68539
// exit ;
68537: GO 68599
// tmp := IsInUnit ( unit ) ;
68539: LD_ADDR_VAR 0 3
68543: PUSH
68544: LD_VAR 0 1
68548: PPUSH
68549: CALL_OW 310
68553: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68554: LD_VAR 0 3
68558: PPUSH
68559: CALL_OW 247
68563: PUSH
68564: LD_INT 2
68566: EQUAL
68567: IFFALSE 68580
// ComExitVehicle ( unit ) else
68569: LD_VAR 0 1
68573: PPUSH
68574: CALL_OW 121
68578: GO 68589
// ComExitBuilding ( unit ) ;
68580: LD_VAR 0 1
68584: PPUSH
68585: CALL_OW 122
// result := tmp ;
68589: LD_ADDR_VAR 0 2
68593: PUSH
68594: LD_VAR 0 3
68598: ST_TO_ADDR
// end ;
68599: LD_VAR 0 2
68603: RET
// export function ComExitAll ( units ) ; var i ; begin
68604: LD_INT 0
68606: PPUSH
68607: PPUSH
// if not units then
68608: LD_VAR 0 1
68612: NOT
68613: IFFALSE 68617
// exit ;
68615: GO 68643
// for i in units do
68617: LD_ADDR_VAR 0 3
68621: PUSH
68622: LD_VAR 0 1
68626: PUSH
68627: FOR_IN
68628: IFFALSE 68641
// ComExit ( i ) ;
68630: LD_VAR 0 3
68634: PPUSH
68635: CALL 68521 0 1
68639: GO 68627
68641: POP
68642: POP
// end ;
68643: LD_VAR 0 2
68647: RET
// export function ResetHc ; begin
68648: LD_INT 0
68650: PPUSH
// InitHc ;
68651: CALL_OW 19
// hc_importance := 0 ;
68655: LD_ADDR_OWVAR 32
68659: PUSH
68660: LD_INT 0
68662: ST_TO_ADDR
// end ;
68663: LD_VAR 0 1
68667: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68668: LD_INT 0
68670: PPUSH
68671: PPUSH
68672: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68673: LD_ADDR_VAR 0 6
68677: PUSH
68678: LD_VAR 0 1
68682: PUSH
68683: LD_VAR 0 3
68687: PLUS
68688: PUSH
68689: LD_INT 2
68691: DIV
68692: ST_TO_ADDR
// if _x < 0 then
68693: LD_VAR 0 6
68697: PUSH
68698: LD_INT 0
68700: LESS
68701: IFFALSE 68718
// _x := _x * - 1 ;
68703: LD_ADDR_VAR 0 6
68707: PUSH
68708: LD_VAR 0 6
68712: PUSH
68713: LD_INT 1
68715: NEG
68716: MUL
68717: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68718: LD_ADDR_VAR 0 7
68722: PUSH
68723: LD_VAR 0 2
68727: PUSH
68728: LD_VAR 0 4
68732: PLUS
68733: PUSH
68734: LD_INT 2
68736: DIV
68737: ST_TO_ADDR
// if _y < 0 then
68738: LD_VAR 0 7
68742: PUSH
68743: LD_INT 0
68745: LESS
68746: IFFALSE 68763
// _y := _y * - 1 ;
68748: LD_ADDR_VAR 0 7
68752: PUSH
68753: LD_VAR 0 7
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: MUL
68762: ST_TO_ADDR
// result := [ _x , _y ] ;
68763: LD_ADDR_VAR 0 5
68767: PUSH
68768: LD_VAR 0 6
68772: PUSH
68773: LD_VAR 0 7
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: ST_TO_ADDR
// end ;
68782: LD_VAR 0 5
68786: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68787: LD_INT 0
68789: PPUSH
68790: PPUSH
68791: PPUSH
68792: PPUSH
// task := GetTaskList ( unit ) ;
68793: LD_ADDR_VAR 0 7
68797: PUSH
68798: LD_VAR 0 1
68802: PPUSH
68803: CALL_OW 437
68807: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68808: LD_VAR 0 7
68812: NOT
68813: PUSH
68814: LD_VAR 0 1
68818: PPUSH
68819: LD_VAR 0 2
68823: PPUSH
68824: CALL_OW 308
68828: NOT
68829: AND
68830: IFFALSE 68834
// exit ;
68832: GO 68952
// if IsInArea ( unit , area ) then
68834: LD_VAR 0 1
68838: PPUSH
68839: LD_VAR 0 2
68843: PPUSH
68844: CALL_OW 308
68848: IFFALSE 68866
// begin ComMoveToArea ( unit , goAway ) ;
68850: LD_VAR 0 1
68854: PPUSH
68855: LD_VAR 0 3
68859: PPUSH
68860: CALL_OW 113
// exit ;
68864: GO 68952
// end ; if task [ 1 ] [ 1 ] <> M then
68866: LD_VAR 0 7
68870: PUSH
68871: LD_INT 1
68873: ARRAY
68874: PUSH
68875: LD_INT 1
68877: ARRAY
68878: PUSH
68879: LD_STRING M
68881: NONEQUAL
68882: IFFALSE 68886
// exit ;
68884: GO 68952
// x := task [ 1 ] [ 2 ] ;
68886: LD_ADDR_VAR 0 5
68890: PUSH
68891: LD_VAR 0 7
68895: PUSH
68896: LD_INT 1
68898: ARRAY
68899: PUSH
68900: LD_INT 2
68902: ARRAY
68903: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68904: LD_ADDR_VAR 0 6
68908: PUSH
68909: LD_VAR 0 7
68913: PUSH
68914: LD_INT 1
68916: ARRAY
68917: PUSH
68918: LD_INT 3
68920: ARRAY
68921: ST_TO_ADDR
// if InArea ( x , y , area ) then
68922: LD_VAR 0 5
68926: PPUSH
68927: LD_VAR 0 6
68931: PPUSH
68932: LD_VAR 0 2
68936: PPUSH
68937: CALL_OW 309
68941: IFFALSE 68952
// ComStop ( unit ) ;
68943: LD_VAR 0 1
68947: PPUSH
68948: CALL_OW 141
// end ;
68952: LD_VAR 0 4
68956: RET
// export function Abs ( value ) ; begin
68957: LD_INT 0
68959: PPUSH
// result := value ;
68960: LD_ADDR_VAR 0 2
68964: PUSH
68965: LD_VAR 0 1
68969: ST_TO_ADDR
// if value < 0 then
68970: LD_VAR 0 1
68974: PUSH
68975: LD_INT 0
68977: LESS
68978: IFFALSE 68995
// result := value * - 1 ;
68980: LD_ADDR_VAR 0 2
68984: PUSH
68985: LD_VAR 0 1
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: MUL
68994: ST_TO_ADDR
// end ;
68995: LD_VAR 0 2
68999: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69000: LD_INT 0
69002: PPUSH
69003: PPUSH
69004: PPUSH
69005: PPUSH
69006: PPUSH
69007: PPUSH
69008: PPUSH
69009: PPUSH
// if not unit or not building then
69010: LD_VAR 0 1
69014: NOT
69015: PUSH
69016: LD_VAR 0 2
69020: NOT
69021: OR
69022: IFFALSE 69026
// exit ;
69024: GO 69252
// x := GetX ( building ) ;
69026: LD_ADDR_VAR 0 4
69030: PUSH
69031: LD_VAR 0 2
69035: PPUSH
69036: CALL_OW 250
69040: ST_TO_ADDR
// y := GetY ( building ) ;
69041: LD_ADDR_VAR 0 6
69045: PUSH
69046: LD_VAR 0 2
69050: PPUSH
69051: CALL_OW 251
69055: ST_TO_ADDR
// d := GetDir ( building ) ;
69056: LD_ADDR_VAR 0 8
69060: PUSH
69061: LD_VAR 0 2
69065: PPUSH
69066: CALL_OW 254
69070: ST_TO_ADDR
// r := 4 ;
69071: LD_ADDR_VAR 0 9
69075: PUSH
69076: LD_INT 4
69078: ST_TO_ADDR
// for i := 1 to 5 do
69079: LD_ADDR_VAR 0 10
69083: PUSH
69084: DOUBLE
69085: LD_INT 1
69087: DEC
69088: ST_TO_ADDR
69089: LD_INT 5
69091: PUSH
69092: FOR_TO
69093: IFFALSE 69250
// begin _x := ShiftX ( x , d , r + i ) ;
69095: LD_ADDR_VAR 0 5
69099: PUSH
69100: LD_VAR 0 4
69104: PPUSH
69105: LD_VAR 0 8
69109: PPUSH
69110: LD_VAR 0 9
69114: PUSH
69115: LD_VAR 0 10
69119: PLUS
69120: PPUSH
69121: CALL_OW 272
69125: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69126: LD_ADDR_VAR 0 7
69130: PUSH
69131: LD_VAR 0 6
69135: PPUSH
69136: LD_VAR 0 8
69140: PPUSH
69141: LD_VAR 0 9
69145: PUSH
69146: LD_VAR 0 10
69150: PLUS
69151: PPUSH
69152: CALL_OW 273
69156: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69157: LD_VAR 0 5
69161: PPUSH
69162: LD_VAR 0 7
69166: PPUSH
69167: CALL_OW 488
69171: PUSH
69172: LD_VAR 0 5
69176: PPUSH
69177: LD_VAR 0 7
69181: PPUSH
69182: CALL_OW 428
69186: PPUSH
69187: CALL_OW 247
69191: PUSH
69192: LD_INT 3
69194: PUSH
69195: LD_INT 2
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: IN
69202: NOT
69203: AND
69204: IFFALSE 69248
// begin ComMoveXY ( unit , _x , _y ) ;
69206: LD_VAR 0 1
69210: PPUSH
69211: LD_VAR 0 5
69215: PPUSH
69216: LD_VAR 0 7
69220: PPUSH
69221: CALL_OW 111
// result := [ _x , _y ] ;
69225: LD_ADDR_VAR 0 3
69229: PUSH
69230: LD_VAR 0 5
69234: PUSH
69235: LD_VAR 0 7
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: ST_TO_ADDR
// exit ;
69244: POP
69245: POP
69246: GO 69252
// end ; end ;
69248: GO 69092
69250: POP
69251: POP
// end ;
69252: LD_VAR 0 3
69256: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69257: LD_INT 0
69259: PPUSH
69260: PPUSH
69261: PPUSH
// result := 0 ;
69262: LD_ADDR_VAR 0 3
69266: PUSH
69267: LD_INT 0
69269: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69270: LD_VAR 0 1
69274: PUSH
69275: LD_INT 0
69277: LESS
69278: PUSH
69279: LD_VAR 0 1
69283: PUSH
69284: LD_INT 8
69286: GREATER
69287: OR
69288: PUSH
69289: LD_VAR 0 2
69293: PUSH
69294: LD_INT 0
69296: LESS
69297: OR
69298: PUSH
69299: LD_VAR 0 2
69303: PUSH
69304: LD_INT 8
69306: GREATER
69307: OR
69308: IFFALSE 69312
// exit ;
69310: GO 69387
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69312: LD_ADDR_VAR 0 4
69316: PUSH
69317: LD_INT 22
69319: PUSH
69320: LD_VAR 0 2
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PPUSH
69329: CALL_OW 69
69333: PUSH
69334: FOR_IN
69335: IFFALSE 69385
// begin un := UnitShoot ( i ) ;
69337: LD_ADDR_VAR 0 5
69341: PUSH
69342: LD_VAR 0 4
69346: PPUSH
69347: CALL_OW 504
69351: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69352: LD_VAR 0 5
69356: PPUSH
69357: CALL_OW 255
69361: PUSH
69362: LD_VAR 0 1
69366: EQUAL
69367: IFFALSE 69383
// begin result := un ;
69369: LD_ADDR_VAR 0 3
69373: PUSH
69374: LD_VAR 0 5
69378: ST_TO_ADDR
// exit ;
69379: POP
69380: POP
69381: GO 69387
// end ; end ;
69383: GO 69334
69385: POP
69386: POP
// end ;
69387: LD_VAR 0 3
69391: RET
// export function GetCargoBay ( units ) ; begin
69392: LD_INT 0
69394: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69395: LD_ADDR_VAR 0 2
69399: PUSH
69400: LD_VAR 0 1
69404: PPUSH
69405: LD_INT 2
69407: PUSH
69408: LD_INT 34
69410: PUSH
69411: LD_INT 12
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 34
69420: PUSH
69421: LD_INT 51
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 34
69430: PUSH
69431: LD_INT 32
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 34
69440: PUSH
69441: LD_INT 89
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: PPUSH
69455: CALL_OW 72
69459: ST_TO_ADDR
// end ;
69460: LD_VAR 0 2
69464: RET
// export function Negate ( value ) ; begin
69465: LD_INT 0
69467: PPUSH
// result := not value ;
69468: LD_ADDR_VAR 0 2
69472: PUSH
69473: LD_VAR 0 1
69477: NOT
69478: ST_TO_ADDR
// end ;
69479: LD_VAR 0 2
69483: RET
// export function Inc ( value ) ; begin
69484: LD_INT 0
69486: PPUSH
// result := value + 1 ;
69487: LD_ADDR_VAR 0 2
69491: PUSH
69492: LD_VAR 0 1
69496: PUSH
69497: LD_INT 1
69499: PLUS
69500: ST_TO_ADDR
// end ;
69501: LD_VAR 0 2
69505: RET
// export function Dec ( value ) ; begin
69506: LD_INT 0
69508: PPUSH
// result := value - 1 ;
69509: LD_ADDR_VAR 0 2
69513: PUSH
69514: LD_VAR 0 1
69518: PUSH
69519: LD_INT 1
69521: MINUS
69522: ST_TO_ADDR
// end ;
69523: LD_VAR 0 2
69527: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69528: LD_INT 0
69530: PPUSH
69531: PPUSH
69532: PPUSH
69533: PPUSH
69534: PPUSH
69535: PPUSH
69536: PPUSH
69537: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69538: LD_VAR 0 1
69542: PPUSH
69543: LD_VAR 0 2
69547: PPUSH
69548: CALL_OW 488
69552: NOT
69553: PUSH
69554: LD_VAR 0 3
69558: PPUSH
69559: LD_VAR 0 4
69563: PPUSH
69564: CALL_OW 488
69568: NOT
69569: OR
69570: IFFALSE 69583
// begin result := - 1 ;
69572: LD_ADDR_VAR 0 5
69576: PUSH
69577: LD_INT 1
69579: NEG
69580: ST_TO_ADDR
// exit ;
69581: GO 69818
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69583: LD_ADDR_VAR 0 12
69587: PUSH
69588: LD_VAR 0 1
69592: PPUSH
69593: LD_VAR 0 2
69597: PPUSH
69598: LD_VAR 0 3
69602: PPUSH
69603: LD_VAR 0 4
69607: PPUSH
69608: CALL 68668 0 4
69612: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69613: LD_ADDR_VAR 0 11
69617: PUSH
69618: LD_VAR 0 1
69622: PPUSH
69623: LD_VAR 0 2
69627: PPUSH
69628: LD_VAR 0 12
69632: PUSH
69633: LD_INT 1
69635: ARRAY
69636: PPUSH
69637: LD_VAR 0 12
69641: PUSH
69642: LD_INT 2
69644: ARRAY
69645: PPUSH
69646: CALL_OW 298
69650: ST_TO_ADDR
// distance := 9999 ;
69651: LD_ADDR_VAR 0 10
69655: PUSH
69656: LD_INT 9999
69658: ST_TO_ADDR
// for i := 0 to 5 do
69659: LD_ADDR_VAR 0 6
69663: PUSH
69664: DOUBLE
69665: LD_INT 0
69667: DEC
69668: ST_TO_ADDR
69669: LD_INT 5
69671: PUSH
69672: FOR_TO
69673: IFFALSE 69816
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69675: LD_ADDR_VAR 0 7
69679: PUSH
69680: LD_VAR 0 1
69684: PPUSH
69685: LD_VAR 0 6
69689: PPUSH
69690: LD_VAR 0 11
69694: PPUSH
69695: CALL_OW 272
69699: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69700: LD_ADDR_VAR 0 8
69704: PUSH
69705: LD_VAR 0 2
69709: PPUSH
69710: LD_VAR 0 6
69714: PPUSH
69715: LD_VAR 0 11
69719: PPUSH
69720: CALL_OW 273
69724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69725: LD_VAR 0 7
69729: PPUSH
69730: LD_VAR 0 8
69734: PPUSH
69735: CALL_OW 488
69739: NOT
69740: IFFALSE 69744
// continue ;
69742: GO 69672
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69744: LD_ADDR_VAR 0 9
69748: PUSH
69749: LD_VAR 0 12
69753: PUSH
69754: LD_INT 1
69756: ARRAY
69757: PPUSH
69758: LD_VAR 0 12
69762: PUSH
69763: LD_INT 2
69765: ARRAY
69766: PPUSH
69767: LD_VAR 0 7
69771: PPUSH
69772: LD_VAR 0 8
69776: PPUSH
69777: CALL_OW 298
69781: ST_TO_ADDR
// if tmp < distance then
69782: LD_VAR 0 9
69786: PUSH
69787: LD_VAR 0 10
69791: LESS
69792: IFFALSE 69814
// begin result := i ;
69794: LD_ADDR_VAR 0 5
69798: PUSH
69799: LD_VAR 0 6
69803: ST_TO_ADDR
// distance := tmp ;
69804: LD_ADDR_VAR 0 10
69808: PUSH
69809: LD_VAR 0 9
69813: ST_TO_ADDR
// end ; end ;
69814: GO 69672
69816: POP
69817: POP
// end ;
69818: LD_VAR 0 5
69822: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69823: LD_INT 0
69825: PPUSH
69826: PPUSH
// if not driver or not IsInUnit ( driver ) then
69827: LD_VAR 0 1
69831: NOT
69832: PUSH
69833: LD_VAR 0 1
69837: PPUSH
69838: CALL_OW 310
69842: NOT
69843: OR
69844: IFFALSE 69848
// exit ;
69846: GO 69938
// vehicle := IsInUnit ( driver ) ;
69848: LD_ADDR_VAR 0 3
69852: PUSH
69853: LD_VAR 0 1
69857: PPUSH
69858: CALL_OW 310
69862: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69863: LD_VAR 0 1
69867: PPUSH
69868: LD_STRING \
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: PUSH
69898: LD_STRING E
69900: PUSH
69901: LD_INT 0
69903: PUSH
69904: LD_INT 0
69906: PUSH
69907: LD_VAR 0 3
69911: PUSH
69912: LD_INT 0
69914: PUSH
69915: LD_INT 0
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PPUSH
69934: CALL_OW 446
// end ;
69938: LD_VAR 0 2
69942: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69943: LD_INT 0
69945: PPUSH
69946: PPUSH
// if not driver or not IsInUnit ( driver ) then
69947: LD_VAR 0 1
69951: NOT
69952: PUSH
69953: LD_VAR 0 1
69957: PPUSH
69958: CALL_OW 310
69962: NOT
69963: OR
69964: IFFALSE 69968
// exit ;
69966: GO 70058
// vehicle := IsInUnit ( driver ) ;
69968: LD_ADDR_VAR 0 3
69972: PUSH
69973: LD_VAR 0 1
69977: PPUSH
69978: CALL_OW 310
69982: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69983: LD_VAR 0 1
69987: PPUSH
69988: LD_STRING \
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: LD_INT 0
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: LD_INT 0
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: PUSH
70018: LD_STRING E
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: LD_VAR 0 3
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PPUSH
70054: CALL_OW 447
// end ;
70058: LD_VAR 0 2
70062: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70063: LD_INT 0
70065: PPUSH
70066: PPUSH
70067: PPUSH
// tmp := [ ] ;
70068: LD_ADDR_VAR 0 5
70072: PUSH
70073: EMPTY
70074: ST_TO_ADDR
// for i in units do
70075: LD_ADDR_VAR 0 4
70079: PUSH
70080: LD_VAR 0 1
70084: PUSH
70085: FOR_IN
70086: IFFALSE 70124
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70088: LD_ADDR_VAR 0 5
70092: PUSH
70093: LD_VAR 0 5
70097: PPUSH
70098: LD_VAR 0 5
70102: PUSH
70103: LD_INT 1
70105: PLUS
70106: PPUSH
70107: LD_VAR 0 4
70111: PPUSH
70112: CALL_OW 256
70116: PPUSH
70117: CALL_OW 2
70121: ST_TO_ADDR
70122: GO 70085
70124: POP
70125: POP
// if not tmp then
70126: LD_VAR 0 5
70130: NOT
70131: IFFALSE 70135
// exit ;
70133: GO 70183
// if asc then
70135: LD_VAR 0 2
70139: IFFALSE 70163
// result := SortListByListAsc ( units , tmp ) else
70141: LD_ADDR_VAR 0 3
70145: PUSH
70146: LD_VAR 0 1
70150: PPUSH
70151: LD_VAR 0 5
70155: PPUSH
70156: CALL_OW 76
70160: ST_TO_ADDR
70161: GO 70183
// result := SortListByListDesc ( units , tmp ) ;
70163: LD_ADDR_VAR 0 3
70167: PUSH
70168: LD_VAR 0 1
70172: PPUSH
70173: LD_VAR 0 5
70177: PPUSH
70178: CALL_OW 77
70182: ST_TO_ADDR
// end ;
70183: LD_VAR 0 3
70187: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70188: LD_INT 0
70190: PPUSH
70191: PPUSH
// task := GetTaskList ( mech ) ;
70192: LD_ADDR_VAR 0 4
70196: PUSH
70197: LD_VAR 0 1
70201: PPUSH
70202: CALL_OW 437
70206: ST_TO_ADDR
// if not task then
70207: LD_VAR 0 4
70211: NOT
70212: IFFALSE 70216
// exit ;
70214: GO 70258
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70216: LD_ADDR_VAR 0 3
70220: PUSH
70221: LD_VAR 0 4
70225: PUSH
70226: LD_INT 1
70228: ARRAY
70229: PUSH
70230: LD_INT 1
70232: ARRAY
70233: PUSH
70234: LD_STRING r
70236: EQUAL
70237: PUSH
70238: LD_VAR 0 4
70242: PUSH
70243: LD_INT 1
70245: ARRAY
70246: PUSH
70247: LD_INT 4
70249: ARRAY
70250: PUSH
70251: LD_VAR 0 2
70255: EQUAL
70256: AND
70257: ST_TO_ADDR
// end ;
70258: LD_VAR 0 3
70262: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70263: LD_INT 0
70265: PPUSH
// SetDir ( unit , d ) ;
70266: LD_VAR 0 1
70270: PPUSH
70271: LD_VAR 0 4
70275: PPUSH
70276: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70280: LD_VAR 0 1
70284: PPUSH
70285: LD_VAR 0 2
70289: PPUSH
70290: LD_VAR 0 3
70294: PPUSH
70295: LD_VAR 0 5
70299: PPUSH
70300: CALL_OW 48
// end ;
70304: LD_VAR 0 6
70308: RET
// export function ToNaturalNumber ( number ) ; begin
70309: LD_INT 0
70311: PPUSH
// result := number div 1 ;
70312: LD_ADDR_VAR 0 2
70316: PUSH
70317: LD_VAR 0 1
70321: PUSH
70322: LD_INT 1
70324: DIV
70325: ST_TO_ADDR
// if number < 0 then
70326: LD_VAR 0 1
70330: PUSH
70331: LD_INT 0
70333: LESS
70334: IFFALSE 70344
// result := 0 ;
70336: LD_ADDR_VAR 0 2
70340: PUSH
70341: LD_INT 0
70343: ST_TO_ADDR
// end ;
70344: LD_VAR 0 2
70348: RET
// export function SortByClass ( units , class ) ; var un ; begin
70349: LD_INT 0
70351: PPUSH
70352: PPUSH
// if not units or not class then
70353: LD_VAR 0 1
70357: NOT
70358: PUSH
70359: LD_VAR 0 2
70363: NOT
70364: OR
70365: IFFALSE 70369
// exit ;
70367: GO 70464
// result := [ ] ;
70369: LD_ADDR_VAR 0 3
70373: PUSH
70374: EMPTY
70375: ST_TO_ADDR
// for un in units do
70376: LD_ADDR_VAR 0 4
70380: PUSH
70381: LD_VAR 0 1
70385: PUSH
70386: FOR_IN
70387: IFFALSE 70462
// if GetClass ( un ) = class then
70389: LD_VAR 0 4
70393: PPUSH
70394: CALL_OW 257
70398: PUSH
70399: LD_VAR 0 2
70403: EQUAL
70404: IFFALSE 70431
// result := Insert ( result , 1 , un ) else
70406: LD_ADDR_VAR 0 3
70410: PUSH
70411: LD_VAR 0 3
70415: PPUSH
70416: LD_INT 1
70418: PPUSH
70419: LD_VAR 0 4
70423: PPUSH
70424: CALL_OW 2
70428: ST_TO_ADDR
70429: GO 70460
// result := Replace ( result , result + 1 , un ) ;
70431: LD_ADDR_VAR 0 3
70435: PUSH
70436: LD_VAR 0 3
70440: PPUSH
70441: LD_VAR 0 3
70445: PUSH
70446: LD_INT 1
70448: PLUS
70449: PPUSH
70450: LD_VAR 0 4
70454: PPUSH
70455: CALL_OW 1
70459: ST_TO_ADDR
70460: GO 70386
70462: POP
70463: POP
// end ;
70464: LD_VAR 0 3
70468: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70469: LD_INT 0
70471: PPUSH
70472: PPUSH
70473: PPUSH
70474: PPUSH
70475: PPUSH
70476: PPUSH
70477: PPUSH
// result := [ ] ;
70478: LD_ADDR_VAR 0 4
70482: PUSH
70483: EMPTY
70484: ST_TO_ADDR
// if x - r < 0 then
70485: LD_VAR 0 1
70489: PUSH
70490: LD_VAR 0 3
70494: MINUS
70495: PUSH
70496: LD_INT 0
70498: LESS
70499: IFFALSE 70511
// min_x := 0 else
70501: LD_ADDR_VAR 0 8
70505: PUSH
70506: LD_INT 0
70508: ST_TO_ADDR
70509: GO 70527
// min_x := x - r ;
70511: LD_ADDR_VAR 0 8
70515: PUSH
70516: LD_VAR 0 1
70520: PUSH
70521: LD_VAR 0 3
70525: MINUS
70526: ST_TO_ADDR
// if y - r < 0 then
70527: LD_VAR 0 2
70531: PUSH
70532: LD_VAR 0 3
70536: MINUS
70537: PUSH
70538: LD_INT 0
70540: LESS
70541: IFFALSE 70553
// min_y := 0 else
70543: LD_ADDR_VAR 0 7
70547: PUSH
70548: LD_INT 0
70550: ST_TO_ADDR
70551: GO 70569
// min_y := y - r ;
70553: LD_ADDR_VAR 0 7
70557: PUSH
70558: LD_VAR 0 2
70562: PUSH
70563: LD_VAR 0 3
70567: MINUS
70568: ST_TO_ADDR
// max_x := x + r ;
70569: LD_ADDR_VAR 0 9
70573: PUSH
70574: LD_VAR 0 1
70578: PUSH
70579: LD_VAR 0 3
70583: PLUS
70584: ST_TO_ADDR
// max_y := y + r ;
70585: LD_ADDR_VAR 0 10
70589: PUSH
70590: LD_VAR 0 2
70594: PUSH
70595: LD_VAR 0 3
70599: PLUS
70600: ST_TO_ADDR
// for _x = min_x to max_x do
70601: LD_ADDR_VAR 0 5
70605: PUSH
70606: DOUBLE
70607: LD_VAR 0 8
70611: DEC
70612: ST_TO_ADDR
70613: LD_VAR 0 9
70617: PUSH
70618: FOR_TO
70619: IFFALSE 70720
// for _y = min_y to max_y do
70621: LD_ADDR_VAR 0 6
70625: PUSH
70626: DOUBLE
70627: LD_VAR 0 7
70631: DEC
70632: ST_TO_ADDR
70633: LD_VAR 0 10
70637: PUSH
70638: FOR_TO
70639: IFFALSE 70716
// begin if not ValidHex ( _x , _y ) then
70641: LD_VAR 0 5
70645: PPUSH
70646: LD_VAR 0 6
70650: PPUSH
70651: CALL_OW 488
70655: NOT
70656: IFFALSE 70660
// continue ;
70658: GO 70638
// if GetResourceTypeXY ( _x , _y ) then
70660: LD_VAR 0 5
70664: PPUSH
70665: LD_VAR 0 6
70669: PPUSH
70670: CALL_OW 283
70674: IFFALSE 70714
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70676: LD_ADDR_VAR 0 4
70680: PUSH
70681: LD_VAR 0 4
70685: PPUSH
70686: LD_VAR 0 4
70690: PUSH
70691: LD_INT 1
70693: PLUS
70694: PPUSH
70695: LD_VAR 0 5
70699: PUSH
70700: LD_VAR 0 6
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PPUSH
70709: CALL_OW 1
70713: ST_TO_ADDR
// end ;
70714: GO 70638
70716: POP
70717: POP
70718: GO 70618
70720: POP
70721: POP
// end ;
70722: LD_VAR 0 4
70726: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70727: LD_INT 0
70729: PPUSH
70730: PPUSH
70731: PPUSH
70732: PPUSH
70733: PPUSH
70734: PPUSH
70735: PPUSH
70736: PPUSH
// if not units then
70737: LD_VAR 0 1
70741: NOT
70742: IFFALSE 70746
// exit ;
70744: GO 71270
// result := UnitFilter ( units , [ f_ok ] ) ;
70746: LD_ADDR_VAR 0 3
70750: PUSH
70751: LD_VAR 0 1
70755: PPUSH
70756: LD_INT 50
70758: PUSH
70759: EMPTY
70760: LIST
70761: PPUSH
70762: CALL_OW 72
70766: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70767: LD_ADDR_VAR 0 8
70771: PUSH
70772: LD_VAR 0 1
70776: PUSH
70777: LD_INT 1
70779: ARRAY
70780: PPUSH
70781: CALL_OW 255
70785: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70786: LD_ADDR_VAR 0 10
70790: PUSH
70791: LD_INT 29
70793: PUSH
70794: LD_INT 91
70796: PUSH
70797: LD_INT 49
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: LIST
70804: ST_TO_ADDR
// if not result then
70805: LD_VAR 0 3
70809: NOT
70810: IFFALSE 70814
// exit ;
70812: GO 71270
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70814: LD_ADDR_VAR 0 5
70818: PUSH
70819: LD_INT 81
70821: PUSH
70822: LD_VAR 0 8
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PPUSH
70831: CALL_OW 69
70835: ST_TO_ADDR
// for i in result do
70836: LD_ADDR_VAR 0 4
70840: PUSH
70841: LD_VAR 0 3
70845: PUSH
70846: FOR_IN
70847: IFFALSE 71268
// begin tag := GetTag ( i ) + 1 ;
70849: LD_ADDR_VAR 0 9
70853: PUSH
70854: LD_VAR 0 4
70858: PPUSH
70859: CALL_OW 110
70863: PUSH
70864: LD_INT 1
70866: PLUS
70867: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70868: LD_ADDR_VAR 0 7
70872: PUSH
70873: LD_VAR 0 4
70877: PPUSH
70878: CALL_OW 250
70882: PPUSH
70883: LD_VAR 0 4
70887: PPUSH
70888: CALL_OW 251
70892: PPUSH
70893: LD_INT 6
70895: PPUSH
70896: CALL 70469 0 3
70900: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70901: LD_VAR 0 4
70905: PPUSH
70906: CALL_OW 247
70910: PUSH
70911: LD_INT 2
70913: EQUAL
70914: PUSH
70915: LD_VAR 0 7
70919: AND
70920: PUSH
70921: LD_VAR 0 4
70925: PPUSH
70926: CALL_OW 264
70930: PUSH
70931: LD_VAR 0 10
70935: IN
70936: NOT
70937: AND
70938: IFFALSE 70977
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70940: LD_VAR 0 4
70944: PPUSH
70945: LD_VAR 0 7
70949: PUSH
70950: LD_INT 1
70952: ARRAY
70953: PUSH
70954: LD_INT 1
70956: ARRAY
70957: PPUSH
70958: LD_VAR 0 7
70962: PUSH
70963: LD_INT 1
70965: ARRAY
70966: PUSH
70967: LD_INT 2
70969: ARRAY
70970: PPUSH
70971: CALL_OW 116
70975: GO 71266
// if path > tag then
70977: LD_VAR 0 2
70981: PUSH
70982: LD_VAR 0 9
70986: GREATER
70987: IFFALSE 71195
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70989: LD_ADDR_VAR 0 6
70993: PUSH
70994: LD_VAR 0 5
70998: PPUSH
70999: LD_INT 91
71001: PUSH
71002: LD_VAR 0 4
71006: PUSH
71007: LD_INT 8
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: LIST
71014: PPUSH
71015: CALL_OW 72
71019: ST_TO_ADDR
// if nearEnemy then
71020: LD_VAR 0 6
71024: IFFALSE 71093
// begin if GetWeapon ( i ) = ru_time_lapser then
71026: LD_VAR 0 4
71030: PPUSH
71031: CALL_OW 264
71035: PUSH
71036: LD_INT 49
71038: EQUAL
71039: IFFALSE 71067
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71041: LD_VAR 0 4
71045: PPUSH
71046: LD_VAR 0 6
71050: PPUSH
71051: LD_VAR 0 4
71055: PPUSH
71056: CALL_OW 74
71060: PPUSH
71061: CALL_OW 112
71065: GO 71091
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71067: LD_VAR 0 4
71071: PPUSH
71072: LD_VAR 0 6
71076: PPUSH
71077: LD_VAR 0 4
71081: PPUSH
71082: CALL_OW 74
71086: PPUSH
71087: CALL 72195 0 2
// end else
71091: GO 71193
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71093: LD_VAR 0 4
71097: PPUSH
71098: LD_VAR 0 2
71102: PUSH
71103: LD_VAR 0 9
71107: ARRAY
71108: PUSH
71109: LD_INT 1
71111: ARRAY
71112: PPUSH
71113: LD_VAR 0 2
71117: PUSH
71118: LD_VAR 0 9
71122: ARRAY
71123: PUSH
71124: LD_INT 2
71126: ARRAY
71127: PPUSH
71128: CALL_OW 297
71132: PUSH
71133: LD_INT 6
71135: GREATER
71136: IFFALSE 71179
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71138: LD_VAR 0 4
71142: PPUSH
71143: LD_VAR 0 2
71147: PUSH
71148: LD_VAR 0 9
71152: ARRAY
71153: PUSH
71154: LD_INT 1
71156: ARRAY
71157: PPUSH
71158: LD_VAR 0 2
71162: PUSH
71163: LD_VAR 0 9
71167: ARRAY
71168: PUSH
71169: LD_INT 2
71171: ARRAY
71172: PPUSH
71173: CALL_OW 114
71177: GO 71193
// SetTag ( i , tag ) ;
71179: LD_VAR 0 4
71183: PPUSH
71184: LD_VAR 0 9
71188: PPUSH
71189: CALL_OW 109
// end else
71193: GO 71266
// if enemy then
71195: LD_VAR 0 5
71199: IFFALSE 71266
// begin if GetWeapon ( i ) = ru_time_lapser then
71201: LD_VAR 0 4
71205: PPUSH
71206: CALL_OW 264
71210: PUSH
71211: LD_INT 49
71213: EQUAL
71214: IFFALSE 71242
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71216: LD_VAR 0 4
71220: PPUSH
71221: LD_VAR 0 5
71225: PPUSH
71226: LD_VAR 0 4
71230: PPUSH
71231: CALL_OW 74
71235: PPUSH
71236: CALL_OW 112
71240: GO 71266
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71242: LD_VAR 0 4
71246: PPUSH
71247: LD_VAR 0 5
71251: PPUSH
71252: LD_VAR 0 4
71256: PPUSH
71257: CALL_OW 74
71261: PPUSH
71262: CALL 72195 0 2
// end ; end ;
71266: GO 70846
71268: POP
71269: POP
// end ;
71270: LD_VAR 0 3
71274: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71275: LD_INT 0
71277: PPUSH
71278: PPUSH
71279: PPUSH
// if not unit or IsInUnit ( unit ) then
71280: LD_VAR 0 1
71284: NOT
71285: PUSH
71286: LD_VAR 0 1
71290: PPUSH
71291: CALL_OW 310
71295: OR
71296: IFFALSE 71300
// exit ;
71298: GO 71391
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71300: LD_ADDR_VAR 0 4
71304: PUSH
71305: LD_VAR 0 1
71309: PPUSH
71310: CALL_OW 250
71314: PPUSH
71315: LD_VAR 0 2
71319: PPUSH
71320: LD_INT 1
71322: PPUSH
71323: CALL_OW 272
71327: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71328: LD_ADDR_VAR 0 5
71332: PUSH
71333: LD_VAR 0 1
71337: PPUSH
71338: CALL_OW 251
71342: PPUSH
71343: LD_VAR 0 2
71347: PPUSH
71348: LD_INT 1
71350: PPUSH
71351: CALL_OW 273
71355: ST_TO_ADDR
// if ValidHex ( x , y ) then
71356: LD_VAR 0 4
71360: PPUSH
71361: LD_VAR 0 5
71365: PPUSH
71366: CALL_OW 488
71370: IFFALSE 71391
// ComTurnXY ( unit , x , y ) ;
71372: LD_VAR 0 1
71376: PPUSH
71377: LD_VAR 0 4
71381: PPUSH
71382: LD_VAR 0 5
71386: PPUSH
71387: CALL_OW 118
// end ;
71391: LD_VAR 0 3
71395: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71396: LD_INT 0
71398: PPUSH
71399: PPUSH
// result := false ;
71400: LD_ADDR_VAR 0 3
71404: PUSH
71405: LD_INT 0
71407: ST_TO_ADDR
// if not units then
71408: LD_VAR 0 2
71412: NOT
71413: IFFALSE 71417
// exit ;
71415: GO 71462
// for i in units do
71417: LD_ADDR_VAR 0 4
71421: PUSH
71422: LD_VAR 0 2
71426: PUSH
71427: FOR_IN
71428: IFFALSE 71460
// if See ( side , i ) then
71430: LD_VAR 0 1
71434: PPUSH
71435: LD_VAR 0 4
71439: PPUSH
71440: CALL_OW 292
71444: IFFALSE 71458
// begin result := true ;
71446: LD_ADDR_VAR 0 3
71450: PUSH
71451: LD_INT 1
71453: ST_TO_ADDR
// exit ;
71454: POP
71455: POP
71456: GO 71462
// end ;
71458: GO 71427
71460: POP
71461: POP
// end ;
71462: LD_VAR 0 3
71466: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71467: LD_INT 0
71469: PPUSH
71470: PPUSH
71471: PPUSH
71472: PPUSH
// if not unit or not points then
71473: LD_VAR 0 1
71477: NOT
71478: PUSH
71479: LD_VAR 0 2
71483: NOT
71484: OR
71485: IFFALSE 71489
// exit ;
71487: GO 71579
// dist := 99999 ;
71489: LD_ADDR_VAR 0 5
71493: PUSH
71494: LD_INT 99999
71496: ST_TO_ADDR
// for i in points do
71497: LD_ADDR_VAR 0 4
71501: PUSH
71502: LD_VAR 0 2
71506: PUSH
71507: FOR_IN
71508: IFFALSE 71577
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71510: LD_ADDR_VAR 0 6
71514: PUSH
71515: LD_VAR 0 1
71519: PPUSH
71520: LD_VAR 0 4
71524: PUSH
71525: LD_INT 1
71527: ARRAY
71528: PPUSH
71529: LD_VAR 0 4
71533: PUSH
71534: LD_INT 2
71536: ARRAY
71537: PPUSH
71538: CALL_OW 297
71542: ST_TO_ADDR
// if tmpDist < dist then
71543: LD_VAR 0 6
71547: PUSH
71548: LD_VAR 0 5
71552: LESS
71553: IFFALSE 71575
// begin result := i ;
71555: LD_ADDR_VAR 0 3
71559: PUSH
71560: LD_VAR 0 4
71564: ST_TO_ADDR
// dist := tmpDist ;
71565: LD_ADDR_VAR 0 5
71569: PUSH
71570: LD_VAR 0 6
71574: ST_TO_ADDR
// end ; end ;
71575: GO 71507
71577: POP
71578: POP
// end ;
71579: LD_VAR 0 3
71583: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71584: LD_INT 0
71586: PPUSH
// uc_side := side ;
71587: LD_ADDR_OWVAR 20
71591: PUSH
71592: LD_VAR 0 1
71596: ST_TO_ADDR
// uc_nation := 3 ;
71597: LD_ADDR_OWVAR 21
71601: PUSH
71602: LD_INT 3
71604: ST_TO_ADDR
// vc_chassis := 25 ;
71605: LD_ADDR_OWVAR 37
71609: PUSH
71610: LD_INT 25
71612: ST_TO_ADDR
// vc_engine := engine_siberite ;
71613: LD_ADDR_OWVAR 39
71617: PUSH
71618: LD_INT 3
71620: ST_TO_ADDR
// vc_control := control_computer ;
71621: LD_ADDR_OWVAR 38
71625: PUSH
71626: LD_INT 3
71628: ST_TO_ADDR
// vc_weapon := 59 ;
71629: LD_ADDR_OWVAR 40
71633: PUSH
71634: LD_INT 59
71636: ST_TO_ADDR
// result := CreateVehicle ;
71637: LD_ADDR_VAR 0 5
71641: PUSH
71642: CALL_OW 45
71646: ST_TO_ADDR
// SetDir ( result , d ) ;
71647: LD_VAR 0 5
71651: PPUSH
71652: LD_VAR 0 4
71656: PPUSH
71657: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71661: LD_VAR 0 5
71665: PPUSH
71666: LD_VAR 0 2
71670: PPUSH
71671: LD_VAR 0 3
71675: PPUSH
71676: LD_INT 0
71678: PPUSH
71679: CALL_OW 48
// end ;
71683: LD_VAR 0 5
71687: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71688: LD_INT 0
71690: PPUSH
71691: PPUSH
71692: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71693: LD_ADDR_VAR 0 2
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: LD_INT 0
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: LD_INT 0
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71716: LD_VAR 0 1
71720: NOT
71721: PUSH
71722: LD_VAR 0 1
71726: PPUSH
71727: CALL_OW 264
71731: PUSH
71732: LD_INT 12
71734: PUSH
71735: LD_INT 51
71737: PUSH
71738: LD_INT 32
71740: PUSH
71741: LD_INT 89
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: IN
71750: NOT
71751: OR
71752: IFFALSE 71756
// exit ;
71754: GO 71854
// for i := 1 to 3 do
71756: LD_ADDR_VAR 0 3
71760: PUSH
71761: DOUBLE
71762: LD_INT 1
71764: DEC
71765: ST_TO_ADDR
71766: LD_INT 3
71768: PUSH
71769: FOR_TO
71770: IFFALSE 71852
// begin tmp := GetCargo ( cargo , i ) ;
71772: LD_ADDR_VAR 0 4
71776: PUSH
71777: LD_VAR 0 1
71781: PPUSH
71782: LD_VAR 0 3
71786: PPUSH
71787: CALL_OW 289
71791: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71792: LD_ADDR_VAR 0 2
71796: PUSH
71797: LD_VAR 0 2
71801: PPUSH
71802: LD_VAR 0 3
71806: PPUSH
71807: LD_VAR 0 4
71811: PPUSH
71812: CALL_OW 1
71816: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71817: LD_ADDR_VAR 0 2
71821: PUSH
71822: LD_VAR 0 2
71826: PPUSH
71827: LD_INT 4
71829: PPUSH
71830: LD_VAR 0 2
71834: PUSH
71835: LD_INT 4
71837: ARRAY
71838: PUSH
71839: LD_VAR 0 4
71843: PLUS
71844: PPUSH
71845: CALL_OW 1
71849: ST_TO_ADDR
// end ;
71850: GO 71769
71852: POP
71853: POP
// end ;
71854: LD_VAR 0 2
71858: RET
// export function Length ( array ) ; begin
71859: LD_INT 0
71861: PPUSH
// result := array + 0 ;
71862: LD_ADDR_VAR 0 2
71866: PUSH
71867: LD_VAR 0 1
71871: PUSH
71872: LD_INT 0
71874: PLUS
71875: ST_TO_ADDR
// end ;
71876: LD_VAR 0 2
71880: RET
// export function PrepareArray ( array ) ; begin
71881: LD_INT 0
71883: PPUSH
// result := array diff 0 ;
71884: LD_ADDR_VAR 0 2
71888: PUSH
71889: LD_VAR 0 1
71893: PUSH
71894: LD_INT 0
71896: DIFF
71897: ST_TO_ADDR
// if not result [ 1 ] then
71898: LD_VAR 0 2
71902: PUSH
71903: LD_INT 1
71905: ARRAY
71906: NOT
71907: IFFALSE 71927
// result := Delete ( result , 1 ) ;
71909: LD_ADDR_VAR 0 2
71913: PUSH
71914: LD_VAR 0 2
71918: PPUSH
71919: LD_INT 1
71921: PPUSH
71922: CALL_OW 3
71926: ST_TO_ADDR
// end ;
71927: LD_VAR 0 2
71931: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71932: LD_INT 0
71934: PPUSH
71935: PPUSH
71936: PPUSH
71937: PPUSH
// sibRocketRange := 25 ;
71938: LD_ADDR_VAR 0 6
71942: PUSH
71943: LD_INT 25
71945: ST_TO_ADDR
// result := false ;
71946: LD_ADDR_VAR 0 4
71950: PUSH
71951: LD_INT 0
71953: ST_TO_ADDR
// for i := 0 to 5 do
71954: LD_ADDR_VAR 0 5
71958: PUSH
71959: DOUBLE
71960: LD_INT 0
71962: DEC
71963: ST_TO_ADDR
71964: LD_INT 5
71966: PUSH
71967: FOR_TO
71968: IFFALSE 72035
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71970: LD_VAR 0 1
71974: PPUSH
71975: LD_VAR 0 5
71979: PPUSH
71980: LD_VAR 0 6
71984: PPUSH
71985: CALL_OW 272
71989: PPUSH
71990: LD_VAR 0 2
71994: PPUSH
71995: LD_VAR 0 5
71999: PPUSH
72000: LD_VAR 0 6
72004: PPUSH
72005: CALL_OW 273
72009: PPUSH
72010: LD_VAR 0 3
72014: PPUSH
72015: CALL_OW 309
72019: IFFALSE 72033
// begin result := true ;
72021: LD_ADDR_VAR 0 4
72025: PUSH
72026: LD_INT 1
72028: ST_TO_ADDR
// exit ;
72029: POP
72030: POP
72031: GO 72037
// end ;
72033: GO 71967
72035: POP
72036: POP
// end ;
72037: LD_VAR 0 4
72041: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72042: LD_INT 0
72044: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72045: LD_VAR 0 1
72049: PPUSH
72050: LD_VAR 0 2
72054: PPUSH
72055: LD_INT 0
72057: PPUSH
72058: LD_INT 0
72060: PPUSH
72061: LD_INT 1
72063: PPUSH
72064: LD_INT 0
72066: PPUSH
72067: CALL_OW 587
// end ;
72071: LD_VAR 0 3
72075: RET
// export function CenterOnNow ( unit ) ; begin
72076: LD_INT 0
72078: PPUSH
// result := IsInUnit ( unit ) ;
72079: LD_ADDR_VAR 0 2
72083: PUSH
72084: LD_VAR 0 1
72088: PPUSH
72089: CALL_OW 310
72093: ST_TO_ADDR
// if not result then
72094: LD_VAR 0 2
72098: NOT
72099: IFFALSE 72111
// result := unit ;
72101: LD_ADDR_VAR 0 2
72105: PUSH
72106: LD_VAR 0 1
72110: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72111: LD_VAR 0 1
72115: PPUSH
72116: CALL_OW 87
// end ;
72120: LD_VAR 0 2
72124: RET
// export function ComMoveHex ( unit , hex ) ; begin
72125: LD_INT 0
72127: PPUSH
// if not hex then
72128: LD_VAR 0 2
72132: NOT
72133: IFFALSE 72137
// exit ;
72135: GO 72190
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72137: LD_VAR 0 2
72141: PUSH
72142: LD_INT 1
72144: ARRAY
72145: PPUSH
72146: LD_VAR 0 2
72150: PUSH
72151: LD_INT 2
72153: ARRAY
72154: PPUSH
72155: CALL_OW 428
72159: IFFALSE 72163
// exit ;
72161: GO 72190
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72163: LD_VAR 0 1
72167: PPUSH
72168: LD_VAR 0 2
72172: PUSH
72173: LD_INT 1
72175: ARRAY
72176: PPUSH
72177: LD_VAR 0 2
72181: PUSH
72182: LD_INT 2
72184: ARRAY
72185: PPUSH
72186: CALL_OW 111
// end ;
72190: LD_VAR 0 3
72194: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72195: LD_INT 0
72197: PPUSH
72198: PPUSH
72199: PPUSH
// if not unit or not enemy then
72200: LD_VAR 0 1
72204: NOT
72205: PUSH
72206: LD_VAR 0 2
72210: NOT
72211: OR
72212: IFFALSE 72216
// exit ;
72214: GO 72340
// x := GetX ( enemy ) ;
72216: LD_ADDR_VAR 0 4
72220: PUSH
72221: LD_VAR 0 2
72225: PPUSH
72226: CALL_OW 250
72230: ST_TO_ADDR
// y := GetY ( enemy ) ;
72231: LD_ADDR_VAR 0 5
72235: PUSH
72236: LD_VAR 0 2
72240: PPUSH
72241: CALL_OW 251
72245: ST_TO_ADDR
// if ValidHex ( x , y ) then
72246: LD_VAR 0 4
72250: PPUSH
72251: LD_VAR 0 5
72255: PPUSH
72256: CALL_OW 488
72260: IFFALSE 72340
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72262: LD_VAR 0 2
72266: PPUSH
72267: CALL_OW 247
72271: PUSH
72272: LD_INT 3
72274: PUSH
72275: LD_INT 2
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: IN
72282: PUSH
72283: LD_VAR 0 1
72287: PPUSH
72288: CALL_OW 255
72292: PPUSH
72293: LD_VAR 0 2
72297: PPUSH
72298: CALL_OW 292
72302: AND
72303: IFFALSE 72321
// ComAttackUnit ( unit , enemy ) else
72305: LD_VAR 0 1
72309: PPUSH
72310: LD_VAR 0 2
72314: PPUSH
72315: CALL_OW 115
72319: GO 72340
// ComAgressiveMove ( unit , x , y ) ;
72321: LD_VAR 0 1
72325: PPUSH
72326: LD_VAR 0 4
72330: PPUSH
72331: LD_VAR 0 5
72335: PPUSH
72336: CALL_OW 114
// end ; end_of_file
72340: LD_VAR 0 3
72344: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72345: LD_VAR 0 1
72349: PUSH
72350: LD_INT 200
72352: DOUBLE
72353: GREATEREQUAL
72354: IFFALSE 72362
72356: LD_INT 299
72358: DOUBLE
72359: LESSEQUAL
72360: IFTRUE 72364
72362: GO 72396
72364: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72365: LD_VAR 0 1
72369: PPUSH
72370: LD_VAR 0 2
72374: PPUSH
72375: LD_VAR 0 3
72379: PPUSH
72380: LD_VAR 0 4
72384: PPUSH
72385: LD_VAR 0 5
72389: PPUSH
72390: CALL 11087 0 5
72394: GO 72473
72396: LD_INT 300
72398: DOUBLE
72399: GREATEREQUAL
72400: IFFALSE 72408
72402: LD_INT 399
72404: DOUBLE
72405: LESSEQUAL
72406: IFTRUE 72410
72408: GO 72472
72410: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72411: LD_VAR 0 1
72415: PPUSH
72416: LD_VAR 0 2
72420: PPUSH
72421: LD_VAR 0 3
72425: PPUSH
72426: LD_VAR 0 4
72430: PPUSH
72431: LD_VAR 0 5
72435: PPUSH
72436: LD_VAR 0 6
72440: PPUSH
72441: LD_VAR 0 7
72445: PPUSH
72446: LD_VAR 0 8
72450: PPUSH
72451: LD_VAR 0 9
72455: PPUSH
72456: LD_VAR 0 10
72460: PPUSH
72461: LD_VAR 0 11
72465: PPUSH
72466: CALL 27503 0 11
72470: GO 72473
72472: POP
// end ;
72473: PPOPN 11
72475: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72476: LD_VAR 0 1
72480: PPUSH
72481: LD_VAR 0 2
72485: PPUSH
72486: LD_VAR 0 3
72490: PPUSH
72491: LD_VAR 0 4
72495: PPUSH
72496: LD_VAR 0 5
72500: PPUSH
72501: CALL 10823 0 5
// end ; end_of_file
72505: PPOPN 5
72507: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72508: LD_VAR 0 1
72512: PPUSH
72513: LD_VAR 0 2
72517: PPUSH
72518: LD_VAR 0 3
72522: PPUSH
72523: LD_VAR 0 4
72527: PPUSH
72528: LD_VAR 0 5
72532: PPUSH
72533: LD_VAR 0 6
72537: PPUSH
72538: CALL 15155 0 6
// end ;
72542: PPOPN 6
72544: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72545: LD_INT 0
72547: PPUSH
// begin if not units then
72548: LD_VAR 0 1
72552: NOT
72553: IFFALSE 72557
// exit ;
72555: GO 72557
// end ;
72557: PPOPN 7
72559: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72560: CALL 15059 0 0
// end ;
72564: PPOPN 1
72566: END
