// starting begin InitMap ;
   0: CALL 1440 0 0
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitTriggers ;
  11: CALL 1825 0 0
// Start_Game ;
  15: CALL 13213 0 0
// InitPlayer ;
  19: CALL 2062 0 0
// InitRussian ;
  23: CALL 2952 0 0
// end ; end_of_file
  27: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
  28: LD_INT 0
  30: PPUSH
  31: PPUSH
  32: PPUSH
  33: PPUSH
  34: PPUSH
// uc_nation = nation_nature ;
  35: LD_ADDR_OWVAR 21
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// uc_side = 0 ;
  43: LD_ADDR_OWVAR 20
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// l = 0 ;
  51: LD_ADDR_VAR 0 6
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
  59: LD_ADDR_OWVAR 24
  63: PUSH
  64: LD_INT 0
  66: PPUSH
  67: LD_INT 5
  69: PPUSH
  70: CALL_OW 12
  74: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
  75: LD_ADDR_OWVAR 35
  79: PUSH
  80: LD_INT 5
  82: NEG
  83: PPUSH
  84: LD_INT 5
  86: PPUSH
  87: CALL_OW 12
  91: ST_TO_ADDR
// hc_gallery =  ;
  92: LD_ADDR_OWVAR 33
  96: PUSH
  97: LD_STRING 
  99: ST_TO_ADDR
// hc_class = class_apeman ;
 100: LD_ADDR_OWVAR 28
 104: PUSH
 105: LD_INT 12
 107: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 108: LD_ADDR_OWVAR 29
 112: PUSH
 113: LD_INT 11
 115: PPUSH
 116: LD_INT 13
 118: PPUSH
 119: CALL_OW 12
 123: PUSH
 124: LD_INT 10
 126: PPUSH
 127: LD_INT 11
 129: PPUSH
 130: CALL_OW 12
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: ST_TO_ADDR
// hc_sex = sex_male ;
 139: LD_ADDR_OWVAR 27
 143: PUSH
 144: LD_INT 1
 146: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 147: LD_ADDR_OWVAR 31
 151: PUSH
 152: LD_INT 0
 154: PPUSH
 155: LD_INT 2
 157: PPUSH
 158: CALL_OW 12
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: EMPTY
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: ST_TO_ADDR
// apeman = CreateHuman ;
 178: LD_ADDR_VAR 0 7
 182: PUSH
 183: CALL_OW 44
 187: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 188: LD_VAR 0 7
 192: PPUSH
 193: LD_VAR 0 4
 197: PPUSH
 198: LD_INT 0
 200: PPUSH
 201: CALL_OW 49
// l = l + 1 ;
 205: LD_ADDR_VAR 0 6
 209: PUSH
 210: LD_VAR 0 6
 214: PUSH
 215: LD_INT 1
 217: PLUS
 218: ST_TO_ADDR
// end until l = num1 ;
 219: LD_VAR 0 6
 223: PUSH
 224: LD_VAR 0 1
 228: EQUAL
 229: IFFALSE 59
// l = 0 ;
 231: LD_ADDR_VAR 0 6
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 239: LD_ADDR_OWVAR 35
 243: PUSH
 244: LD_INT 0
 246: PPUSH
 247: LD_INT 25
 249: PPUSH
 250: CALL_OW 12
 254: ST_TO_ADDR
// hc_class = class_tiger ;
 255: LD_ADDR_OWVAR 28
 259: PUSH
 260: LD_INT 14
 262: ST_TO_ADDR
// hc_sex = sex_male ;
 263: LD_ADDR_OWVAR 27
 267: PUSH
 268: LD_INT 1
 270: ST_TO_ADDR
// hc_gallery = sandnature ;
 271: LD_ADDR_OWVAR 33
 275: PUSH
 276: LD_STRING sandnature
 278: ST_TO_ADDR
// hc_face_number = 3 ;
 279: LD_ADDR_OWVAR 34
 283: PUSH
 284: LD_INT 3
 286: ST_TO_ADDR
// tiger = CreateHuman ;
 287: LD_ADDR_VAR 0 8
 291: PUSH
 292: CALL_OW 44
 296: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 297: LD_VAR 0 8
 301: PPUSH
 302: LD_VAR 0 4
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// l = l + 1 ;
 314: LD_ADDR_VAR 0 6
 318: PUSH
 319: LD_VAR 0 6
 323: PUSH
 324: LD_INT 1
 326: PLUS
 327: ST_TO_ADDR
// end until l = num2 ;
 328: LD_VAR 0 6
 332: PUSH
 333: LD_VAR 0 2
 337: EQUAL
 338: IFFALSE 239
// l = 0 ;
 340: LD_ADDR_VAR 0 6
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 348: LD_ADDR_OWVAR 28
 352: PUSH
 353: LD_INT 18
 355: ST_TO_ADDR
// hc_gallery = sandnature ;
 356: LD_ADDR_OWVAR 33
 360: PUSH
 361: LD_STRING sandnature
 363: ST_TO_ADDR
// hc_face_number = 1 ;
 364: LD_ADDR_OWVAR 34
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// bird = CreateHuman ;
 372: LD_ADDR_VAR 0 9
 376: PUSH
 377: CALL_OW 44
 381: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 382: LD_VAR 0 9
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 51
// l = l + 1 ;
 394: LD_ADDR_VAR 0 6
 398: PUSH
 399: LD_VAR 0 6
 403: PUSH
 404: LD_INT 1
 406: PLUS
 407: ST_TO_ADDR
// end until l = num3 ;
 408: LD_VAR 0 6
 412: PUSH
 413: LD_VAR 0 3
 417: EQUAL
 418: IFFALSE 348
// end ;
 420: LD_VAR 0 5
 424: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 425: LD_INT 0
 427: PPUSH
 428: PPUSH
 429: PPUSH
 430: PPUSH
 431: PPUSH
 432: PPUSH
// hc_class := clas ;
 433: LD_ADDR_OWVAR 28
 437: PUSH
 438: LD_VAR 0 1
 442: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 443: LD_ADDR_VAR 0 4
 447: PUSH
 448: LD_VAR 0 2
 452: PUSH
 453: LD_INT 1
 455: NEG
 456: PPUSH
 457: LD_INT 1
 459: PPUSH
 460: CALL_OW 12
 464: PLUS
 465: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 466: LD_ADDR_VAR 0 5
 470: PUSH
 471: LD_VAR 0 2
 475: PUSH
 476: LD_INT 1
 478: NEG
 479: PPUSH
 480: LD_INT 1
 482: PPUSH
 483: CALL_OW 12
 487: PLUS
 488: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 489: LD_ADDR_VAR 0 6
 493: PUSH
 494: LD_VAR 0 2
 498: PUSH
 499: LD_INT 1
 501: NEG
 502: PPUSH
 503: LD_INT 1
 505: PPUSH
 506: CALL_OW 12
 510: PLUS
 511: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 512: LD_ADDR_VAR 0 7
 516: PUSH
 517: LD_VAR 0 2
 521: PUSH
 522: LD_INT 1
 524: NEG
 525: PPUSH
 526: LD_INT 1
 528: PPUSH
 529: CALL_OW 12
 533: PLUS
 534: ST_TO_ADDR
// if clas = 1 or clas = 9 then
 535: LD_VAR 0 1
 539: PUSH
 540: LD_INT 1
 542: EQUAL
 543: PUSH
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 9
 551: EQUAL
 552: OR
 553: IFFALSE 578
// bonus := [ 2 , 0 , 0 , 0 ] ;
 555: LD_ADDR_VAR 0 8
 559: PUSH
 560: LD_INT 2
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: LD_INT 0
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: ST_TO_ADDR
// if clas = 2 then
 578: LD_VAR 0 1
 582: PUSH
 583: LD_INT 2
 585: EQUAL
 586: IFFALSE 611
// bonus := [ 0 , 2 , 0 , 0 ] ;
 588: LD_ADDR_VAR 0 8
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: ST_TO_ADDR
// if clas = 3 then
 611: LD_VAR 0 1
 615: PUSH
 616: LD_INT 3
 618: EQUAL
 619: IFFALSE 644
// bonus := [ 0 , 0 , 2 , 0 ] ;
 621: LD_ADDR_VAR 0 8
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: LD_INT 0
 631: PUSH
 632: LD_INT 2
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: ST_TO_ADDR
// if clas = 4 then
 644: LD_VAR 0 1
 648: PUSH
 649: LD_INT 4
 651: EQUAL
 652: IFFALSE 677
// bonus := [ 0 , 0 , 0 , 2 ] ;
 654: LD_ADDR_VAR 0 8
 658: PUSH
 659: LD_INT 0
 661: PUSH
 662: LD_INT 0
 664: PUSH
 665: LD_INT 0
 667: PUSH
 668: LD_INT 2
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: ST_TO_ADDR
// if clas > 4 and not clas = 9 then
 677: LD_VAR 0 1
 681: PUSH
 682: LD_INT 4
 684: GREATER
 685: PUSH
 686: LD_VAR 0 1
 690: PUSH
 691: LD_INT 9
 693: EQUAL
 694: NOT
 695: AND
 696: IFFALSE 721
// bonus := [ 0 , 0 , 0 , 0 ] ;
 698: LD_ADDR_VAR 0 8
 702: PUSH
 703: LD_INT 0
 705: PUSH
 706: LD_INT 0
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
 721: LD_ADDR_OWVAR 31
 725: PUSH
 726: LD_VAR 0 4
 730: PUSH
 731: LD_VAR 0 8
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PLUS
 740: PUSH
 741: LD_VAR 0 5
 745: PUSH
 746: LD_VAR 0 8
 750: PUSH
 751: LD_INT 2
 753: ARRAY
 754: PLUS
 755: PUSH
 756: LD_VAR 0 6
 760: PUSH
 761: LD_VAR 0 8
 765: PUSH
 766: LD_INT 3
 768: ARRAY
 769: PLUS
 770: PUSH
 771: LD_VAR 0 7
 775: PUSH
 776: LD_VAR 0 8
 780: PUSH
 781: LD_INT 4
 783: ARRAY
 784: PLUS
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
 792: LD_ADDR_OWVAR 27
 796: PUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 2
 802: PPUSH
 803: CALL_OW 12
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
 816: LD_ADDR_OWVAR 29
 820: PUSH
 821: LD_INT 8
 823: PPUSH
 824: LD_INT 12
 826: PPUSH
 827: CALL_OW 12
 831: PUSH
 832: LD_INT 9
 834: PPUSH
 835: LD_INT 11
 837: PPUSH
 838: CALL_OW 12
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// hc_name :=  ;
 847: LD_ADDR_OWVAR 26
 851: PUSH
 852: LD_STRING 
 854: ST_TO_ADDR
// result := CreateHuman ;
 855: LD_ADDR_VAR 0 3
 859: PUSH
 860: CALL_OW 44
 864: ST_TO_ADDR
// end ;
 865: LD_VAR 0 3
 869: RET
// export function SeeSide ( unit , side ) ; var i ; begin
 870: LD_INT 0
 872: PPUSH
 873: PPUSH
// result := false ;
 874: LD_ADDR_VAR 0 3
 878: PUSH
 879: LD_INT 0
 881: ST_TO_ADDR
// i := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
 882: LD_ADDR_VAR 0 4
 886: PUSH
 887: LD_INT 22
 889: PUSH
 890: LD_VAR 0 2
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PPUSH
 899: CALL_OW 69
 903: PPUSH
 904: LD_VAR 0 1
 908: PPUSH
 909: CALL_OW 74
 913: ST_TO_ADDR
// if GetDistUnits ( unit , i ) < 9 then
 914: LD_VAR 0 1
 918: PPUSH
 919: LD_VAR 0 4
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 9
 931: LESS
 932: IFFALSE 942
// result := true ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: ST_TO_ADDR
// end ;
 942: LD_VAR 0 3
 946: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
 947: LD_VAR 0 1
 951: PUSH
 952: LD_EXP 1
 956: IN
 957: NOT
 958: IFFALSE 989
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
 960: LD_ADDR_EXP 1
 964: PUSH
 965: LD_EXP 1
 969: PPUSH
 970: LD_EXP 1
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: LD_VAR 0 1
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: PPOPN 1
 991: END
// export function ComAttack ( unit , ignore_list ) ; var i , j , target , enemy_list , _list , types_list ; begin
 992: LD_INT 0
 994: PPUSH
 995: PPUSH
 996: PPUSH
 997: PPUSH
 998: PPUSH
 999: PPUSH
1000: PPUSH
// if not IsPlaced ( unit ) then
1001: LD_VAR 0 1
1005: PPUSH
1006: CALL_OW 305
1010: NOT
1011: IFFALSE 1015
// exit ;
1013: GO 1322
// enemy_list := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
1015: LD_ADDR_VAR 0 7
1019: PUSH
1020: LD_INT 81
1022: PUSH
1023: LD_VAR 0 1
1027: PPUSH
1028: CALL_OW 255
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: ST_TO_ADDR
// if not enemy_list then
1042: LD_VAR 0 7
1046: NOT
1047: IFFALSE 1051
// exit ;
1049: GO 1322
// if ignore_list then
1051: LD_VAR 0 2
1055: IFFALSE 1197
// begin _list := [ ] ;
1057: LD_ADDR_VAR 0 8
1061: PUSH
1062: EMPTY
1063: ST_TO_ADDR
// types_list := [ f_btype , f_weapon , f_class ] ;
1064: LD_ADDR_VAR 0 9
1068: PUSH
1069: LD_INT 30
1071: PUSH
1072: LD_INT 34
1074: PUSH
1075: LD_INT 25
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: ST_TO_ADDR
// for i = 1 to 3 do
1083: LD_ADDR_VAR 0 4
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_INT 3
1095: PUSH
1096: FOR_TO
1097: IFFALSE 1195
// begin if not ignore_list [ i ] then
1099: LD_VAR 0 2
1103: PUSH
1104: LD_VAR 0 4
1108: ARRAY
1109: NOT
1110: IFFALSE 1116
// continue else
1112: GO 1096
1114: GO 1193
// for j in ignore_list [ i ] do
1116: LD_ADDR_VAR 0 5
1120: PUSH
1121: LD_VAR 0 2
1125: PUSH
1126: LD_VAR 0 4
1130: ARRAY
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1191
// begin _list := Insert ( _list , _list + 1 , UnitFilter ( enemy_list , [ types_list [ i ] , j ] ) ) ;
1135: LD_ADDR_VAR 0 8
1139: PUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: LD_VAR 0 8
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: PPUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 9
1163: PUSH
1164: LD_VAR 0 4
1168: ARRAY
1169: PUSH
1170: LD_VAR 0 5
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 72
1183: PPUSH
1184: CALL_OW 2
1188: ST_TO_ADDR
// end ;
1189: GO 1132
1191: POP
1192: POP
// end ;
1193: GO 1096
1195: POP
1196: POP
// end ; if enemy_list diff _list > 0 then
1197: LD_VAR 0 7
1201: PUSH
1202: LD_VAR 0 8
1206: PUSH
1207: LD_INT 0
1209: GREATER
1210: DIFF
1211: IFFALSE 1229
// enemy_list := enemy_list diff _list ;
1213: LD_ADDR_VAR 0 7
1217: PUSH
1218: LD_VAR 0 7
1222: PUSH
1223: LD_VAR 0 8
1227: DIFF
1228: ST_TO_ADDR
// target := NearestUnitToUnit ( enemy_list , unit ) ;
1229: LD_ADDR_VAR 0 6
1233: PUSH
1234: LD_VAR 0 7
1238: PPUSH
1239: LD_VAR 0 1
1243: PPUSH
1244: CALL_OW 74
1248: ST_TO_ADDR
// if not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
1249: LD_VAR 0 1
1253: PPUSH
1254: LD_VAR 0 6
1258: PPUSH
1259: CALL_OW 250
1263: PPUSH
1264: LD_VAR 0 6
1268: PPUSH
1269: CALL_OW 251
1273: PPUSH
1274: CALL 1327 0 3
1278: NOT
1279: IFFALSE 1322
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ) ;
1281: LD_VAR 0 1
1285: PPUSH
1286: LD_INT 81
1288: PUSH
1289: LD_VAR 0 1
1293: PPUSH
1294: CALL_OW 255
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: PPUSH
1308: LD_VAR 0 1
1312: PPUSH
1313: CALL_OW 74
1317: PPUSH
1318: CALL_OW 115
// end ;
1322: LD_VAR 0 3
1326: RET
// export function DestinationReachable ( unit , x , y ) ; begin
1327: LD_INT 0
1329: PPUSH
// if unit in unreachableList then
1330: LD_VAR 0 1
1334: PUSH
1335: LD_EXP 1
1339: IN
1340: IFFALSE 1358
// unreachableList := unreachableList diff unit ;
1342: LD_ADDR_EXP 1
1346: PUSH
1347: LD_EXP 1
1351: PUSH
1352: LD_VAR 0 1
1356: DIFF
1357: ST_TO_ADDR
// if ValidHex ( x , y ) then
1358: LD_VAR 0 2
1362: PPUSH
1363: LD_VAR 0 3
1367: PPUSH
1368: CALL_OW 488
1372: IFFALSE 1398
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
1374: LD_VAR 0 1
1378: PPUSH
1379: LD_VAR 0 2
1383: PPUSH
1384: LD_VAR 0 3
1388: PPUSH
1389: CALL_OW 428
1393: PPUSH
1394: CALL_OW 115
// Wait ( 1 ) ;
1398: LD_INT 1
1400: PPUSH
1401: CALL_OW 67
// if unit in unreachableList then
1405: LD_VAR 0 1
1409: PUSH
1410: LD_EXP 1
1414: IN
1415: IFFALSE 1427
// result := false else
1417: LD_ADDR_VAR 0 4
1421: PUSH
1422: LD_INT 0
1424: ST_TO_ADDR
1425: GO 1435
// result := true ;
1427: LD_ADDR_VAR 0 4
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// end ; end_of_file
1435: LD_VAR 0 4
1439: RET
// export function InitMap ; begin
1440: LD_INT 0
1442: PPUSH
// ResetFog ;
1443: CALL_OW 335
// PrepareAnimals ( 2 , 3 , 3 , nature_area ) ;
1447: LD_INT 2
1449: PPUSH
1450: LD_INT 3
1452: PPUSH
1453: LD_INT 3
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 28 0 4
// end ;
1463: LD_VAR 0 1
1467: RET
// export function SpawnCrates ; var i ; begin
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
// while ( crates_allow ) do
1472: LD_EXP 13
1476: IFFALSE 1629
// begin Wait ( crates_time + Rand ( - 0 0$10 , 0 0$20 ) ) ;
1478: LD_EXP 11
1482: PUSH
1483: LD_INT 350
1485: NEG
1486: PPUSH
1487: LD_INT 700
1489: PPUSH
1490: CALL_OW 12
1494: PLUS
1495: PPUSH
1496: CALL_OW 67
// for i = 1 to crates_num do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: DOUBLE
1506: LD_INT 1
1508: DEC
1509: ST_TO_ADDR
1510: LD_EXP 12
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1625
// begin CreateCratesArea ( Rand ( 1 , 5 ) , crates_main_area , true ) ;
1518: LD_INT 1
1520: PPUSH
1521: LD_INT 5
1523: PPUSH
1524: CALL_OW 12
1528: PPUSH
1529: LD_INT 2
1531: PPUSH
1532: LD_INT 1
1534: PPUSH
1535: CALL_OW 55
// Wait ( Rand ( 0 0$03 , 0 0$12 ) ) ;
1539: LD_INT 105
1541: PPUSH
1542: LD_INT 420
1544: PPUSH
1545: CALL_OW 12
1549: PPUSH
1550: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_main_area , true ) ;
1554: LD_INT 1
1556: PPUSH
1557: LD_INT 5
1559: PPUSH
1560: CALL_OW 12
1564: PPUSH
1565: LD_INT 2
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: CALL_OW 55
// Wait ( Rand ( 0 0$04 , 0 0$15 ) ) ;
1575: LD_INT 140
1577: PPUSH
1578: LD_INT 525
1580: PPUSH
1581: CALL_OW 12
1585: PPUSH
1586: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 5
1595: PPUSH
1596: CALL_OW 12
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 57
// Wait ( Rand ( 0 0$05 , 0 0$10 ) ) ;
1608: LD_INT 175
1610: PPUSH
1611: LD_INT 350
1613: PPUSH
1614: CALL_OW 12
1618: PPUSH
1619: CALL_OW 67
// end ;
1623: GO 1515
1625: POP
1626: POP
// end ;
1627: GO 1472
// end ;
1629: LD_VAR 0 1
1633: RET
// every 1 1$25 trigger game_started do
1634: LD_EXP 10
1638: IFFALSE 1692
1640: GO 1642
1642: DISABLE
// begin enable ;
1643: ENABLE
// if timer <= [ 23 23$00 , 21 21$00 , 19 19$00 ] [ global_diff ] then
1644: LD_EXP 2
1648: PUSH
1649: LD_INT 48300
1651: PUSH
1652: LD_INT 44100
1654: PUSH
1655: LD_INT 39900
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: PUSH
1663: LD_EXP 3
1667: ARRAY
1668: LESSEQUAL
1669: IFFALSE 1692
// CreateCratesArea ( Rand ( 2 , 5 ) , us_crates , true ) ;
1671: LD_INT 2
1673: PPUSH
1674: LD_INT 5
1676: PPUSH
1677: CALL_OW 12
1681: PPUSH
1682: LD_INT 12
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: CALL_OW 55
// end ;
1692: END
// every 0 0$01 trigger game_started do
1693: LD_EXP 10
1697: IFFALSE 1706
1699: GO 1701
1701: DISABLE
// SpawnCrates ;
1702: CALL 1468 0 0
1706: END
// export timer ; every 1 do
1707: GO 1709
1709: DISABLE
// timer := 0 0$00 ;
1710: LD_ADDR_EXP 2
1714: PUSH
1715: LD_INT 0
1717: ST_TO_ADDR
1718: END
// every 0 0$01 trigger game_started do
1719: LD_EXP 10
1723: IFFALSE 1760
1725: GO 1727
1727: DISABLE
// begin enable ;
1728: ENABLE
// timer := timer + 0 0$01 ;
1729: LD_ADDR_EXP 2
1733: PUSH
1734: LD_EXP 2
1738: PUSH
1739: LD_INT 35
1741: PLUS
1742: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
1743: LD_ADDR_OWVAR 47
1747: PUSH
1748: LD_STRING #tick
1750: PUSH
1751: LD_EXP 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: ST_TO_ADDR
// end ;
1760: END
// every 0 0$01 trigger timer <= 13 13$00 do
1761: LD_EXP 2
1765: PUSH
1766: LD_INT 27300
1768: LESSEQUAL
1769: IFFALSE 1782
1771: GO 1773
1773: DISABLE
// music_nat := 1 ;
1774: LD_ADDR_OWVAR 71
1778: PUSH
1779: LD_INT 1
1781: ST_TO_ADDR
1782: END
// every 5 5$00 trigger timer > 13 13$00 do
1783: LD_EXP 2
1787: PUSH
1788: LD_INT 27300
1790: GREATER
1791: IFFALSE 1824
1793: GO 1795
1795: DISABLE
// begin enable ;
1796: ENABLE
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1797: LD_ADDR_OWVAR 71
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 3
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 12
1822: ARRAY
1823: ST_TO_ADDR
// end ; end_of_file
1824: END
// export global_diff , ru_force , ru_def , am_def , am_force , ar_def , ar_force ; export game_started ; export crates_time , crates_num , crates_allow ; export sikorski , kurin , heike , ron , jack ; export sikorski_come , russian_produce , beria_action , sikorski_veh ; export function InitTriggers ; begin
1825: LD_INT 0
1827: PPUSH
// game_started := false ;
1828: LD_ADDR_EXP 10
1832: PUSH
1833: LD_INT 0
1835: ST_TO_ADDR
// global_diff := [ 1 , 2 , 3 ] ;
1836: LD_ADDR_EXP 3
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 2
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: ST_TO_ADDR
// crates_time := [ 0 0$55 , 1 1$15 , 1 1$35 ] [ global_diff ] ;
1855: LD_ADDR_EXP 11
1859: PUSH
1860: LD_INT 1925
1862: PUSH
1863: LD_INT 2625
1865: PUSH
1866: LD_INT 3325
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_EXP 3
1878: ARRAY
1879: ST_TO_ADDR
// crates_num := [ 3 , 2 , 1 ] [ global_diff ] ;
1880: LD_ADDR_EXP 12
1884: PUSH
1885: LD_INT 3
1887: PUSH
1888: LD_INT 2
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_EXP 3
1903: ARRAY
1904: ST_TO_ADDR
// crates_allow := false ;
1905: LD_ADDR_EXP 13
1909: PUSH
1910: LD_INT 0
1912: ST_TO_ADDR
// am_def := [ 4 , 3 , 2 ] [ global_diff ] ;
1913: LD_ADDR_EXP 6
1917: PUSH
1918: LD_INT 4
1920: PUSH
1921: LD_INT 3
1923: PUSH
1924: LD_INT 2
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_EXP 3
1936: ARRAY
1937: ST_TO_ADDR
// ru_def := [ 2 , 3 , 4 ] [ global_diff ] ;
1938: LD_ADDR_EXP 5
1942: PUSH
1943: LD_INT 2
1945: PUSH
1946: LD_INT 3
1948: PUSH
1949: LD_INT 4
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: LD_EXP 3
1961: ARRAY
1962: ST_TO_ADDR
// ru_force := [ 16 , 18 , 20 ] [ global_diff ] ;
1963: LD_ADDR_EXP 4
1967: PUSH
1968: LD_INT 16
1970: PUSH
1971: LD_INT 18
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_EXP 3
1986: ARRAY
1987: ST_TO_ADDR
// ar_def := [ 3 , 4 , 5 ] [ global_diff ] ;
1988: LD_ADDR_EXP 8
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: LD_INT 4
1998: PUSH
1999: LD_INT 5
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_EXP 3
2011: ARRAY
2012: ST_TO_ADDR
// ar_force := [ 4 , 5 , 6 ] [ global_diff ] ;
2013: LD_ADDR_EXP 9
2017: PUSH
2018: LD_INT 4
2020: PUSH
2021: LD_INT 5
2023: PUSH
2024: LD_INT 6
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_EXP 3
2036: ARRAY
2037: ST_TO_ADDR
// sikorski_come := false ;
2038: LD_ADDR_EXP 19
2042: PUSH
2043: LD_INT 0
2045: ST_TO_ADDR
// russian_produce := false ;
2046: LD_ADDR_EXP 20
2050: PUSH
2051: LD_INT 0
2053: ST_TO_ADDR
// disable ( 99 ) ;
2054: LD_INT 99
2056: DISABLE_MARKED
// end ; end_of_file
2057: LD_VAR 0 1
2061: RET
// export function InitPlayer ; var i , p , un , am , am2 , filter ; begin
2062: LD_INT 0
2064: PPUSH
2065: PPUSH
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
2070: PPUSH
// uc_nation := nation_american ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 1
2078: ST_TO_ADDR
// am := 1 ;
2079: LD_ADDR_VAR 0 5
2083: PUSH
2084: LD_INT 1
2086: ST_TO_ADDR
// am2 := 4 ;
2087: LD_ADDR_VAR 0 6
2091: PUSH
2092: LD_INT 4
2094: ST_TO_ADDR
// filter := [ ] ;
2095: LD_ADDR_VAR 0 7
2099: PUSH
2100: EMPTY
2101: ST_TO_ADDR
// SetSide ( omikron , am2 ) ;
2102: LD_INT 64
2104: PPUSH
2105: LD_VAR 0 6
2109: PPUSH
2110: CALL_OW 235
// SetBName ( omikron , omikron ) ;
2114: LD_INT 64
2116: PPUSH
2117: LD_STRING omikron
2119: PPUSH
2120: CALL_OW 500
// ResetFog ;
2124: CALL_OW 335
// uc_side := am2 ;
2128: LD_ADDR_OWVAR 20
2132: PUSH
2133: LD_VAR 0 6
2137: ST_TO_ADDR
// for i = 1 to 4 do
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: DOUBLE
2144: LD_INT 1
2146: DEC
2147: ST_TO_ADDR
2148: LD_INT 4
2150: PUSH
2151: FOR_TO
2152: IFFALSE 2274
// for p = 1 to 2 do
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: DOUBLE
2160: LD_INT 1
2162: DEC
2163: ST_TO_ADDR
2164: LD_INT 2
2166: PUSH
2167: FOR_TO
2168: IFFALSE 2270
// begin un := CreateHumanWithClass ( i , am_def ) ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_EXP 6
2184: PPUSH
2185: CALL 425 0 2
2189: ST_TO_ADDR
// PlaceUnitArea ( un , am_area , false ) ;
2190: LD_VAR 0 4
2194: PPUSH
2195: LD_INT 3
2197: PPUSH
2198: LD_INT 0
2200: PPUSH
2201: CALL_OW 49
// if GetClass ( un ) = 1 then
2205: LD_VAR 0 4
2209: PPUSH
2210: CALL_OW 257
2214: PUSH
2215: LD_INT 1
2217: EQUAL
2218: IFFALSE 2268
// ComEnterUnit ( un , ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) diff us_spec_b ) [ p ] ) ;
2220: LD_VAR 0 4
2224: PPUSH
2225: LD_INT 22
2227: PUSH
2228: LD_INT 4
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 30
2237: PUSH
2238: LD_INT 31
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PPUSH
2249: CALL_OW 69
2253: PUSH
2254: LD_INT 140
2256: DIFF
2257: PUSH
2258: LD_VAR 0 3
2262: ARRAY
2263: PPUSH
2264: CALL_OW 120
// end ;
2268: GO 2167
2270: POP
2271: POP
2272: GO 2151
2274: POP
2275: POP
// if IsPlaced ( us_spec_b ) then
2276: LD_INT 140
2278: PPUSH
2279: CALL_OW 305
2283: IFFALSE 2347
// begin un := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] ] ) [ 1 ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: LD_INT 22
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 25
2302: PUSH
2303: LD_INT 3
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PUSH
2319: LD_INT 1
2321: ARRAY
2322: ST_TO_ADDR
// SetClass ( un , 1 ) ;
2323: LD_VAR 0 4
2327: PPUSH
2328: LD_INT 1
2330: PPUSH
2331: CALL_OW 336
// ComEnterUnit ( un , us_spec_b ) ;
2335: LD_VAR 0 4
2339: PPUSH
2340: LD_INT 140
2342: PPUSH
2343: CALL_OW 120
// end ; vc_chassis := us_medium_wheeled ;
2347: LD_ADDR_OWVAR 37
2351: PUSH
2352: LD_INT 2
2354: ST_TO_ADDR
// vc_engine := engine_solar ;
2355: LD_ADDR_OWVAR 39
2359: PUSH
2360: LD_INT 2
2362: ST_TO_ADDR
// vc_control := control_manual ;
2363: LD_ADDR_OWVAR 38
2367: PUSH
2368: LD_INT 1
2370: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_gatling_gun ] [ global_diff ] ;
2371: LD_ADDR_OWVAR 40
2375: PUSH
2376: LD_INT 5
2378: PUSH
2379: LD_INT 5
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: LD_EXP 3
2394: ARRAY
2395: ST_TO_ADDR
// un := CreateVehicle ;
2396: LD_ADDR_VAR 0 4
2400: PUSH
2401: CALL_OW 45
2405: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2406: LD_VAR 0 4
2410: PPUSH
2411: LD_INT 4
2413: PPUSH
2414: CALL_OW 233
// PlaceUnitXY ( un , 12 , 17 , false ) ;
2418: LD_VAR 0 4
2422: PPUSH
2423: LD_INT 12
2425: PPUSH
2426: LD_INT 17
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: CALL_OW 48
// vc_chassis := us_light_wheeled ;
2436: LD_ADDR_OWVAR 37
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_engine := engine_combustion ;
2444: LD_ADDR_OWVAR 39
2448: PUSH
2449: LD_INT 1
2451: ST_TO_ADDR
// vc_control := control_manual ;
2452: LD_ADDR_OWVAR 38
2456: PUSH
2457: LD_INT 1
2459: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2460: LD_ADDR_OWVAR 40
2464: PUSH
2465: LD_INT 3
2467: ST_TO_ADDR
// un := CreateVehicle ;
2468: LD_ADDR_VAR 0 4
2472: PUSH
2473: CALL_OW 45
2477: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2478: LD_VAR 0 4
2482: PPUSH
2483: LD_INT 4
2485: PPUSH
2486: CALL_OW 233
// PlaceUnitXY ( un , 19 , 19 , false ) ;
2490: LD_VAR 0 4
2494: PPUSH
2495: LD_INT 19
2497: PPUSH
2498: LD_INT 19
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// uc_side := am ;
2508: LD_ADDR_OWVAR 20
2512: PUSH
2513: LD_VAR 0 5
2517: ST_TO_ADDR
// hc_importance := 100 ;
2518: LD_ADDR_OWVAR 32
2522: PUSH
2523: LD_INT 100
2525: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
2526: LD_ADDR_OWVAR 26
2530: PUSH
2531: LD_STRING Jeremy Sikorski
2533: ST_TO_ADDR
// hc_gallery := us ;
2534: LD_ADDR_OWVAR 33
2538: PUSH
2539: LD_STRING us
2541: ST_TO_ADDR
// hc_face_number := 19 ;
2542: LD_ADDR_OWVAR 34
2546: PUSH
2547: LD_INT 19
2549: ST_TO_ADDR
// hc_skills := [ Rand ( am_def + 2 , am_def + 4 ) , Rand ( am_def - 1 , am_def + 1 ) , Rand ( am_def - 1 , am_def + 1 ) , Rand ( am_def - 1 , am_def + 1 ) ] ;
2550: LD_ADDR_OWVAR 31
2554: PUSH
2555: LD_EXP 6
2559: PUSH
2560: LD_INT 2
2562: PLUS
2563: PPUSH
2564: LD_EXP 6
2568: PUSH
2569: LD_INT 4
2571: PLUS
2572: PPUSH
2573: CALL_OW 12
2577: PUSH
2578: LD_EXP 6
2582: PUSH
2583: LD_INT 1
2585: MINUS
2586: PPUSH
2587: LD_EXP 6
2591: PUSH
2592: LD_INT 1
2594: PLUS
2595: PPUSH
2596: CALL_OW 12
2600: PUSH
2601: LD_EXP 6
2605: PUSH
2606: LD_INT 1
2608: MINUS
2609: PPUSH
2610: LD_EXP 6
2614: PUSH
2615: LD_INT 1
2617: PLUS
2618: PPUSH
2619: CALL_OW 12
2623: PUSH
2624: LD_EXP 6
2628: PUSH
2629: LD_INT 1
2631: MINUS
2632: PPUSH
2633: LD_EXP 6
2637: PUSH
2638: LD_INT 1
2640: PLUS
2641: PPUSH
2642: CALL_OW 12
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: ST_TO_ADDR
// hc_sex := sex_male ;
2653: LD_ADDR_OWVAR 27
2657: PUSH
2658: LD_INT 1
2660: ST_TO_ADDR
// hc_class := 1 ;
2661: LD_ADDR_OWVAR 28
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2669: LD_ADDR_OWVAR 29
2673: PUSH
2674: LD_INT 10
2676: PUSH
2677: LD_INT 12
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: ST_TO_ADDR
// sikorski := CreateHuman ;
2684: LD_ADDR_EXP 14
2688: PUSH
2689: CALL_OW 44
2693: ST_TO_ADDR
// if global_diff > 1 then
2694: LD_EXP 3
2698: PUSH
2699: LD_INT 1
2701: GREATER
2702: IFFALSE 2721
// PlaceUnitArea ( sikorski , sikorski_area , false ) else
2704: LD_EXP 14
2708: PPUSH
2709: LD_INT 8
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 49
2719: GO 2812
// begin vc_chassis := us_light_wheeled ;
2721: LD_ADDR_OWVAR 37
2725: PUSH
2726: LD_INT 1
2728: ST_TO_ADDR
// vc_engine := engine_combustion ;
2729: LD_ADDR_OWVAR 39
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// vc_control := control_manual ;
2737: LD_ADDR_OWVAR 38
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2745: LD_ADDR_OWVAR 40
2749: PUSH
2750: LD_INT 2
2752: ST_TO_ADDR
// vc_fuel_battery := 21 ;
2753: LD_ADDR_OWVAR 41
2757: PUSH
2758: LD_INT 21
2760: ST_TO_ADDR
// sikorski_veh := CreateVehicle ;
2761: LD_ADDR_EXP 22
2765: PUSH
2766: CALL_OW 45
2770: ST_TO_ADDR
// SetDir ( sikorski_veh , 0 ) ;
2771: LD_EXP 22
2775: PPUSH
2776: LD_INT 0
2778: PPUSH
2779: CALL_OW 233
// PlaceUnitArea ( sikorski_veh , sikorski_area , false ) ;
2783: LD_EXP 22
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 49
// PlaceHumanInUnit ( sikorski , sikorski_veh ) ;
2798: LD_EXP 14
2802: PPUSH
2803: LD_EXP 22
2807: PPUSH
2808: CALL_OW 52
// end ; hc_importance := 0 ;
2812: LD_ADDR_OWVAR 32
2816: PUSH
2817: LD_INT 0
2819: ST_TO_ADDR
// hc_name := Ronn Harisson ;
2820: LD_ADDR_OWVAR 26
2824: PUSH
2825: LD_STRING Ronn Harisson
2827: ST_TO_ADDR
// hc_gallery := us ;
2828: LD_ADDR_OWVAR 33
2832: PUSH
2833: LD_STRING us
2835: ST_TO_ADDR
// hc_face_number := 6 ;
2836: LD_ADDR_OWVAR 34
2840: PUSH
2841: LD_INT 6
2843: ST_TO_ADDR
// ron := CreateHuman ;
2844: LD_ADDR_EXP 17
2848: PUSH
2849: CALL_OW 44
2853: ST_TO_ADDR
// hc_name := Jack Dickens ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_STRING Jack Dickens
2861: ST_TO_ADDR
// hc_gallery :=  ;
2862: LD_ADDR_OWVAR 33
2866: PUSH
2867: LD_STRING 
2869: ST_TO_ADDR
// jack := CreateHuman ;
2870: LD_ADDR_EXP 18
2874: PUSH
2875: CALL_OW 44
2879: ST_TO_ADDR
// end ;
2880: LD_VAR 0 1
2884: RET
// every 0 0$01 trigger GetDistUnits ( sikorski , omikron ) <= 45 do
2885: LD_EXP 14
2889: PPUSH
2890: LD_INT 64
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 45
2900: LESSEQUAL
2901: IFFALSE 2951
2903: GO 2905
2905: DISABLE
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_workshop , 16 , 5 , 3 ) ; end_of_file
2906: LD_INT 22
2908: PUSH
2909: LD_INT 4
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 25
2918: PUSH
2919: LD_INT 2
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PPUSH
2930: CALL_OW 69
2934: PPUSH
2935: LD_INT 2
2937: PPUSH
2938: LD_INT 16
2940: PPUSH
2941: LD_INT 5
2943: PPUSH
2944: LD_INT 3
2946: PPUSH
2947: CALL_OW 145
2951: END
// export ru_sold , ru_stw , ru_tw , ru_tech , ru_veh , ru_eng , ru_mech , ru_sci , ru_bul , ru_b ; export ru2_sold , ru2_stw , ru2_tw , ru2_tech , ru2_veh , ru2_eng , ru2_mech , ru2_sci , ru2_bul , ru2_b ; export ru_list_attackers ; export function InitRussian ; var ru , ru2 , i , un , filter ; begin
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
2956: PPUSH
2957: PPUSH
2958: PPUSH
2959: PPUSH
// ru := 6 ;
2960: LD_ADDR_VAR 0 2
2964: PUSH
2965: LD_INT 6
2967: ST_TO_ADDR
// ru2 := 3 ;
2968: LD_ADDR_VAR 0 3
2972: PUSH
2973: LD_INT 3
2975: ST_TO_ADDR
// uc_nation := nation_russian ;
2976: LD_ADDR_OWVAR 21
2980: PUSH
2981: LD_INT 3
2983: ST_TO_ADDR
// ru_radar := 98 ;
2984: LD_ADDR_EXP 46
2988: PUSH
2989: LD_INT 98
2991: ST_TO_ADDR
// ru_list_attackers := [ ] ;
2992: LD_ADDR_EXP 43
2996: PUSH
2997: EMPTY
2998: ST_TO_ADDR
// uc_side := ru ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_VAR 0 2
3008: ST_TO_ADDR
// ru_sold := [ ] ;
3009: LD_ADDR_EXP 23
3013: PUSH
3014: EMPTY
3015: ST_TO_ADDR
// ru_stw := [ ] ;
3016: LD_ADDR_EXP 24
3020: PUSH
3021: EMPTY
3022: ST_TO_ADDR
// ru_tw := [ ] ;
3023: LD_ADDR_EXP 25
3027: PUSH
3028: EMPTY
3029: ST_TO_ADDR
// ru_b := [ ] ;
3030: LD_ADDR_EXP 32
3034: PUSH
3035: EMPTY
3036: ST_TO_ADDR
// ru_eng := [ ] ;
3037: LD_ADDR_EXP 28
3041: PUSH
3042: EMPTY
3043: ST_TO_ADDR
// ru_mech := [ ] ;
3044: LD_ADDR_EXP 29
3048: PUSH
3049: EMPTY
3050: ST_TO_ADDR
// ru_sci := [ ] ;
3051: LD_ADDR_EXP 30
3055: PUSH
3056: EMPTY
3057: ST_TO_ADDR
// ru_bul := [ b_bunker , 162 , 101 , 0 , b_ext_rocket , 149 , 86 , 4 ] ;
3058: LD_ADDR_EXP 31
3062: PUSH
3063: LD_INT 32
3065: PUSH
3066: LD_INT 162
3068: PUSH
3069: LD_INT 101
3071: PUSH
3072: LD_INT 0
3074: PUSH
3075: LD_INT 18
3077: PUSH
3078: LD_INT 149
3080: PUSH
3081: LD_INT 86
3083: PUSH
3084: LD_INT 4
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: ST_TO_ADDR
// ru_tech := [ tech_tech1 , tech_tech2 , tech_tech3 , tech_oilpow , tech_oileng , tech_weap1 , tech_weap2 , tech_gatling , tech_advmet , tech_weap3 ] ;
3097: LD_ADDR_EXP 26
3101: PUSH
3102: LD_INT 48
3104: PUSH
3105: LD_INT 49
3107: PUSH
3108: LD_INT 50
3110: PUSH
3111: LD_INT 46
3113: PUSH
3114: LD_INT 47
3116: PUSH
3117: LD_INT 51
3119: PUSH
3120: LD_INT 52
3122: PUSH
3123: LD_INT 69
3125: PUSH
3126: LD_INT 34
3128: PUSH
3129: LD_INT 53
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: ST_TO_ADDR
// ru_veh := [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , ru_medium_tracked , engine_combustion , control_manual , ru_crane , ru_medium_tracked , engine_combustion , control_manual , ru_crane ] ;
3144: LD_ADDR_EXP 27
3148: PUSH
3149: LD_INT 21
3151: PUSH
3152: LD_INT 1
3154: PUSH
3155: LD_INT 1
3157: PUSH
3158: LD_INT 51
3160: PUSH
3161: LD_INT 22
3163: PUSH
3164: LD_INT 1
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: LD_INT 52
3172: PUSH
3173: LD_INT 22
3175: PUSH
3176: LD_INT 1
3178: PUSH
3179: LD_INT 1
3181: PUSH
3182: LD_INT 52
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
3199: LD_INT 71
3201: PPUSH
3202: LD_STRING kirov
3204: PPUSH
3205: CALL_OW 500
// hc_gallery := ru ;
3209: LD_ADDR_OWVAR 33
3213: PUSH
3214: LD_STRING ru
3216: ST_TO_ADDR
// hc_face_number := 8 ;
3217: LD_ADDR_OWVAR 34
3221: PUSH
3222: LD_INT 8
3224: ST_TO_ADDR
// hc_skills := [ 7 , 4 , 3 , 2 ] ;
3225: LD_ADDR_OWVAR 31
3229: PUSH
3230: LD_INT 7
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: ST_TO_ADDR
// hc_sex := sex_male ;
3248: LD_ADDR_OWVAR 27
3252: PUSH
3253: LD_INT 1
3255: ST_TO_ADDR
// hc_name := Ivan Kurin ;
3256: LD_ADDR_OWVAR 26
3260: PUSH
3261: LD_STRING Ivan Kurin
3263: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3264: LD_ADDR_OWVAR 29
3268: PUSH
3269: LD_INT 10
3271: PUSH
3272: LD_INT 10
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: ST_TO_ADDR
// kurin := CreateHuman ;
3279: LD_ADDR_EXP 15
3283: PUSH
3284: CALL_OW 44
3288: ST_TO_ADDR
// PlaceHumanInUnit ( kurin , kirov ) ;
3289: LD_EXP 15
3293: PPUSH
3294: LD_INT 71
3296: PPUSH
3297: CALL_OW 52
// filter := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
3301: LD_ADDR_VAR 0 6
3305: PUSH
3306: LD_INT 22
3308: PUSH
3309: LD_INT 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 30
3318: PUSH
3319: LD_INT 32
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 69
3334: ST_TO_ADDR
// for i = 1 to ru_force do
3335: LD_ADDR_VAR 0 4
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_EXP 4
3349: PUSH
3350: FOR_TO
3351: IFFALSE 3422
// begin un := CreateHumanWithClass ( 1 , ru_def ) ;
3353: LD_ADDR_VAR 0 5
3357: PUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_EXP 5
3365: PPUSH
3366: CALL 425 0 2
3370: ST_TO_ADDR
// if i <= filter then
3371: LD_VAR 0 4
3375: PUSH
3376: LD_VAR 0 6
3380: LESSEQUAL
3381: IFFALSE 3405
// PlaceHumanInUnit ( un , filter [ i ] ) else
3383: LD_VAR 0 5
3387: PPUSH
3388: LD_VAR 0 6
3392: PUSH
3393: LD_VAR 0 4
3397: ARRAY
3398: PPUSH
3399: CALL_OW 52
3403: GO 3420
// PlaceUnitArea ( un , ru_area , false ) ;
3405: LD_VAR 0 5
3409: PPUSH
3410: LD_INT 4
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 49
// end ;
3420: GO 3350
3422: POP
3423: POP
// for i = 1 to 6 do
3424: LD_ADDR_VAR 0 4
3428: PUSH
3429: DOUBLE
3430: LD_INT 1
3432: DEC
3433: ST_TO_ADDR
3434: LD_INT 6
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3475
// begin un := CreateHumanWithClass ( 3 , ru_def ) ;
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_INT 3
3447: PPUSH
3448: LD_EXP 5
3452: PPUSH
3453: CALL 425 0 2
3457: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3458: LD_VAR 0 5
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 0
3468: PPUSH
3469: CALL_OW 49
// end ;
3473: GO 3437
3475: POP
3476: POP
// for i = 1 to 3 do
3477: LD_ADDR_VAR 0 4
3481: PUSH
3482: DOUBLE
3483: LD_INT 1
3485: DEC
3486: ST_TO_ADDR
3487: LD_INT 3
3489: PUSH
3490: FOR_TO
3491: IFFALSE 3528
// begin un := CreateHumanWithClass ( 4 , ru_def ) ;
3493: LD_ADDR_VAR 0 5
3497: PUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_EXP 5
3505: PPUSH
3506: CALL 425 0 2
3510: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3511: LD_VAR 0 5
3515: PPUSH
3516: LD_INT 4
3518: PPUSH
3519: LD_INT 0
3521: PPUSH
3522: CALL_OW 49
// end ;
3526: GO 3490
3528: POP
3529: POP
// for i = 1 to 4 do
3530: LD_ADDR_VAR 0 4
3534: PUSH
3535: DOUBLE
3536: LD_INT 1
3538: DEC
3539: ST_TO_ADDR
3540: LD_INT 4
3542: PUSH
3543: FOR_TO
3544: IFFALSE 3581
// begin un := CreateHumanWithClass ( 2 , ru_def ) ;
3546: LD_ADDR_VAR 0 5
3550: PUSH
3551: LD_INT 2
3553: PPUSH
3554: LD_EXP 5
3558: PPUSH
3559: CALL 425 0 2
3563: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3564: LD_VAR 0 5
3568: PPUSH
3569: LD_INT 4
3571: PPUSH
3572: LD_INT 0
3574: PPUSH
3575: CALL_OW 49
// end ;
3579: GO 3543
3581: POP
3582: POP
// uc_side := ru2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_VAR 0 3
3592: ST_TO_ADDR
// ru2_sold := [ ] ;
3593: LD_ADDR_EXP 33
3597: PUSH
3598: EMPTY
3599: ST_TO_ADDR
// ru2_stw := [ ] ;
3600: LD_ADDR_EXP 34
3604: PUSH
3605: EMPTY
3606: ST_TO_ADDR
// ru2_tw := [ ] ;
3607: LD_ADDR_EXP 35
3611: PUSH
3612: EMPTY
3613: ST_TO_ADDR
// ru2_b := [ ] ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: EMPTY
3620: ST_TO_ADDR
// ru2_eng := [ ] ;
3621: LD_ADDR_EXP 38
3625: PUSH
3626: EMPTY
3627: ST_TO_ADDR
// ru2_mech := [ ] ;
3628: LD_ADDR_EXP 39
3632: PUSH
3633: EMPTY
3634: ST_TO_ADDR
// ru2_sci := [ ] ;
3635: LD_ADDR_EXP 40
3639: PUSH
3640: EMPTY
3641: ST_TO_ADDR
// ru2_bul := [ b_lab , 90 , 71 , 1 , b_armoury , 88 , 58 , 2 , b_workshop , 103 , 66 , 4 , b_oil_power , 106 , 77 , 3 , b_oil_power , 110 , 77 , 3 , b_bunker , 109 , 65 , 4 , b_bunker , 92 , 85 , 0 , b_bunker , 74 , 72 , 0 , b_bunker , 71 , 66 , 2 , b_bunker , 115 , 79 , 4 , b_bunker , 112 , 69 , 4 , b_bunker , 111 , 84 , 5 ] ;
3642: LD_ADDR_EXP 41
3646: PUSH
3647: LD_INT 6
3649: PUSH
3650: LD_INT 90
3652: PUSH
3653: LD_INT 71
3655: PUSH
3656: LD_INT 1
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: LD_INT 88
3664: PUSH
3665: LD_INT 58
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: LD_INT 103
3676: PUSH
3677: LD_INT 66
3679: PUSH
3680: LD_INT 4
3682: PUSH
3683: LD_INT 26
3685: PUSH
3686: LD_INT 106
3688: PUSH
3689: LD_INT 77
3691: PUSH
3692: LD_INT 3
3694: PUSH
3695: LD_INT 26
3697: PUSH
3698: LD_INT 110
3700: PUSH
3701: LD_INT 77
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: LD_INT 32
3709: PUSH
3710: LD_INT 109
3712: PUSH
3713: LD_INT 65
3715: PUSH
3716: LD_INT 4
3718: PUSH
3719: LD_INT 32
3721: PUSH
3722: LD_INT 92
3724: PUSH
3725: LD_INT 85
3727: PUSH
3728: LD_INT 0
3730: PUSH
3731: LD_INT 32
3733: PUSH
3734: LD_INT 74
3736: PUSH
3737: LD_INT 72
3739: PUSH
3740: LD_INT 0
3742: PUSH
3743: LD_INT 32
3745: PUSH
3746: LD_INT 71
3748: PUSH
3749: LD_INT 66
3751: PUSH
3752: LD_INT 2
3754: PUSH
3755: LD_INT 32
3757: PUSH
3758: LD_INT 115
3760: PUSH
3761: LD_INT 79
3763: PUSH
3764: LD_INT 4
3766: PUSH
3767: LD_INT 32
3769: PUSH
3770: LD_INT 112
3772: PUSH
3773: LD_INT 69
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 32
3781: PUSH
3782: LD_INT 111
3784: PUSH
3785: LD_INT 84
3787: PUSH
3788: LD_INT 5
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: ST_TO_ADDR
// ru2_tech := [ tech_tech1 , tech_tech2 , tech_weap1 , tech_weap2 , tech_gatling , tech_gun , tech_advmet , tech_weap3 , tech_tech3 ] ;
3841: LD_ADDR_EXP 36
3845: PUSH
3846: LD_INT 48
3848: PUSH
3849: LD_INT 49
3851: PUSH
3852: LD_INT 51
3854: PUSH
3855: LD_INT 52
3857: PUSH
3858: LD_INT 69
3860: PUSH
3861: LD_INT 39
3863: PUSH
3864: LD_INT 34
3866: PUSH
3867: LD_INT 53
3869: PUSH
3870: LD_INT 50
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: ST_TO_ADDR
// ru2_veh := [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , ru_medium_tracked , engine_combustion , control_manual , ru_crane , ru_medium_tracked , engine_combustion , control_manual , ru_crane ] ;
3884: LD_ADDR_EXP 37
3888: PUSH
3889: LD_INT 21
3891: PUSH
3892: LD_INT 1
3894: PUSH
3895: LD_INT 1
3897: PUSH
3898: LD_INT 51
3900: PUSH
3901: LD_INT 22
3903: PUSH
3904: LD_INT 1
3906: PUSH
3907: LD_INT 1
3909: PUSH
3910: LD_INT 52
3912: PUSH
3913: LD_INT 22
3915: PUSH
3916: LD_INT 1
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: LD_INT 52
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: ST_TO_ADDR
// SetBName ( beria , beria ) ;
3939: LD_INT 106
3941: PPUSH
3942: LD_STRING beria
3944: PPUSH
3945: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3949: LD_INT 112
3951: PPUSH
3952: LD_STRING kagan
3954: PPUSH
3955: CALL_OW 500
// for i = 1 to 12 do
3959: LD_ADDR_VAR 0 4
3963: PUSH
3964: DOUBLE
3965: LD_INT 1
3967: DEC
3968: ST_TO_ADDR
3969: LD_INT 12
3971: PUSH
3972: FOR_TO
3973: IFFALSE 4010
// begin un := CreateHumanWithClass ( 1 , ru_def ) ;
3975: LD_ADDR_VAR 0 5
3979: PUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_EXP 5
3987: PPUSH
3988: CALL 425 0 2
3992: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_INT 9
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 49
// end ;
4008: GO 3972
4010: POP
4011: POP
// for i = 1 to 6 do
4012: LD_ADDR_VAR 0 4
4016: PUSH
4017: DOUBLE
4018: LD_INT 1
4020: DEC
4021: ST_TO_ADDR
4022: LD_INT 6
4024: PUSH
4025: FOR_TO
4026: IFFALSE 4063
// begin un := CreateHumanWithClass ( 3 , ru_def ) ;
4028: LD_ADDR_VAR 0 5
4032: PUSH
4033: LD_INT 3
4035: PPUSH
4036: LD_EXP 5
4040: PPUSH
4041: CALL 425 0 2
4045: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4046: LD_VAR 0 5
4050: PPUSH
4051: LD_INT 9
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 49
// end ;
4061: GO 4025
4063: POP
4064: POP
// for i = 1 to 4 do
4065: LD_ADDR_VAR 0 4
4069: PUSH
4070: DOUBLE
4071: LD_INT 1
4073: DEC
4074: ST_TO_ADDR
4075: LD_INT 4
4077: PUSH
4078: FOR_TO
4079: IFFALSE 4116
// begin un := CreateHumanWithClass ( 4 , ru_def ) ;
4081: LD_ADDR_VAR 0 5
4085: PUSH
4086: LD_INT 4
4088: PPUSH
4089: LD_EXP 5
4093: PPUSH
4094: CALL 425 0 2
4098: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4099: LD_VAR 0 5
4103: PPUSH
4104: LD_INT 9
4106: PPUSH
4107: LD_INT 0
4109: PPUSH
4110: CALL_OW 49
// end ;
4114: GO 4078
4116: POP
4117: POP
// for i = 1 to 4 do
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: DOUBLE
4124: LD_INT 1
4126: DEC
4127: ST_TO_ADDR
4128: LD_INT 4
4130: PUSH
4131: FOR_TO
4132: IFFALSE 4169
// begin un := CreateHumanWithClass ( 2 , ru_def ) ;
4134: LD_ADDR_VAR 0 5
4138: PUSH
4139: LD_INT 2
4141: PPUSH
4142: LD_EXP 5
4146: PPUSH
4147: CALL 425 0 2
4151: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4152: LD_VAR 0 5
4156: PPUSH
4157: LD_INT 9
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ;
4167: GO 4131
4169: POP
4170: POP
// end ;
4171: LD_VAR 0 1
4175: RET
// every 0 0$01 do var i , p , un , filter , h_dmgunit , b_dmgunit , b_unit , b_weap , b_upgrade , enemy_detected ;
4176: GO 4178
4178: DISABLE
4179: LD_INT 0
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
// begin enable ;
4191: ENABLE
// ru_sold := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 1 ] , [ f_lives , 600 ] ] ] ) diff Kurin ;
4192: LD_ADDR_EXP 23
4196: PUSH
4197: LD_INT 22
4199: PUSH
4200: LD_INT 6
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 25
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 24
4219: PUSH
4220: LD_INT 600
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: PUSH
4240: LD_EXP 15
4244: DIFF
4245: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 2 ] , [ f_lives , 600 ] ] ] ) ;
4246: LD_ADDR_EXP 28
4250: PUSH
4251: LD_INT 22
4253: PUSH
4254: LD_INT 6
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 25
4263: PUSH
4264: LD_INT 2
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 24
4273: PUSH
4274: LD_INT 600
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: PUSH
4286: EMPTY
4287: LIST
4288: PPUSH
4289: CALL_OW 69
4293: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 3 ] , [ f_lives , 600 ] ] ] ) ;
4294: LD_ADDR_EXP 29
4298: PUSH
4299: LD_INT 22
4301: PUSH
4302: LD_INT 6
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PUSH
4309: LD_INT 25
4311: PUSH
4312: LD_INT 3
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 24
4321: PUSH
4322: LD_INT 600
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: EMPTY
4335: LIST
4336: PPUSH
4337: CALL_OW 69
4341: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 4 ] , [ f_lives , 600 ] ] ] ) ;
4342: LD_ADDR_EXP 30
4346: PUSH
4347: LD_INT 22
4349: PUSH
4350: LD_INT 6
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 4
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 24
4369: PUSH
4370: LD_INT 600
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: PPUSH
4385: CALL_OW 69
4389: ST_TO_ADDR
// ru_tw := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] , [ f_lives , 250 ] ] ] ) ;
4390: LD_ADDR_EXP 25
4394: PUSH
4395: LD_INT 22
4397: PUSH
4398: LD_INT 6
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: LD_INT 30
4410: PUSH
4411: LD_INT 31
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 30
4420: PUSH
4421: LD_INT 32
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 24
4435: PUSH
4436: LD_INT 250
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: PPUSH
4451: CALL_OW 69
4455: ST_TO_ADDR
// ru_b := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) ;
4456: LD_ADDR_EXP 32
4460: PUSH
4461: LD_INT 22
4463: PUSH
4464: LD_INT 6
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 21
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 69
4489: ST_TO_ADDR
// b_dmgunit := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4490: LD_ADDR_VAR 0 6
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 6
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 3
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 3
4517: PUSH
4518: LD_INT 24
4520: PUSH
4521: LD_INT 1000
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: PPUSH
4540: CALL_OW 69
4544: ST_TO_ADDR
// h_dmgunit := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ] ) ;
4545: LD_ADDR_VAR 0 5
4549: PUSH
4550: LD_INT 22
4552: PUSH
4553: LD_INT 6
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 21
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: LD_INT 24
4575: PUSH
4576: LD_INT 600
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// b_weap := AvailableWeaponList ( ru_fac ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar , 89 ] ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_INT 92
4607: PPUSH
4608: CALL_OW 478
4612: PUSH
4613: LD_INT 52
4615: PUSH
4616: LD_INT 51
4618: PUSH
4619: LD_INT 53
4621: PUSH
4622: LD_EXP 46
4626: PUSH
4627: LD_INT 89
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: DIFF
4637: ST_TO_ADDR
// b_upgrade := [ b_depot , b_armoury , b_breastwork , b_workshop ] ;
4638: LD_ADDR_VAR 0 9
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: LD_INT 4
4648: PUSH
4649: LD_INT 31
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: ST_TO_ADDR
// if FilterUnitsInArea ( kirov_strict , [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) > 0 then
4661: LD_INT 10
4663: PPUSH
4664: LD_INT 2
4666: PUSH
4667: LD_INT 22
4669: PUSH
4670: LD_INT 1
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 70
4696: PUSH
4697: LD_INT 0
4699: GREATER
4700: IFFALSE 4712
// enemy_detected := true else
4702: LD_ADDR_VAR 0 10
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
4710: GO 4720
// enemy_detected := false ;
4712: LD_ADDR_VAR 0 10
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// if enemy_detected = false then
4720: LD_VAR 0 10
4724: PUSH
4725: LD_INT 0
4727: EQUAL
4728: IFFALSE 4790
// for i = 1 to ru_b do
4730: LD_ADDR_VAR 0 1
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 32
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4788
// if GetBType ( ru_b [ i ] ) in b_upgrade then
4748: LD_EXP 32
4752: PUSH
4753: LD_VAR 0 1
4757: ARRAY
4758: PPUSH
4759: CALL_OW 266
4763: PUSH
4764: LD_VAR 0 9
4768: IN
4769: IFFALSE 4786
// ComUpgrade ( ru_b [ i ] ) ;
4771: LD_EXP 32
4775: PUSH
4776: LD_VAR 0 1
4780: ARRAY
4781: PPUSH
4782: CALL_OW 146
4786: GO 4745
4788: POP
4789: POP
// if ru_sold > 0 then
4790: LD_EXP 23
4794: PUSH
4795: LD_INT 0
4797: GREATER
4798: IFFALSE 5246
// begin filter := UnitFilter ( ru_sold , [ f_not , [ f_inside ] ] ) ;
4800: LD_ADDR_VAR 0 4
4804: PUSH
4805: LD_EXP 23
4809: PPUSH
4810: LD_INT 3
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: EMPTY
4817: LIST
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PPUSH
4823: CALL_OW 72
4827: ST_TO_ADDR
// if UnitFilter ( ru_tw , [ f_empty ] ) > 0 then
4828: LD_EXP 25
4832: PPUSH
4833: LD_INT 58
4835: PUSH
4836: EMPTY
4837: LIST
4838: PPUSH
4839: CALL_OW 72
4843: PUSH
4844: LD_INT 0
4846: GREATER
4847: IFFALSE 4949
// begin if filter = 0 then
4849: LD_VAR 0 4
4853: PUSH
4854: LD_INT 0
4856: EQUAL
4857: IFFALSE 4882
// ComExitBuilding ( ru_sold [ Rand ( 1 , ru_sold ) ] ) ;
4859: LD_EXP 23
4863: PUSH
4864: LD_INT 1
4866: PPUSH
4867: LD_EXP 23
4871: PPUSH
4872: CALL_OW 12
4876: ARRAY
4877: PPUSH
4878: CALL_OW 122
// filter := UnitFilter ( ru_sold , [ f_not , [ f_inside ] ] ) ;
4882: LD_ADDR_VAR 0 4
4886: PUSH
4887: LD_EXP 23
4891: PPUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 54
4897: PUSH
4898: EMPTY
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PPUSH
4905: CALL_OW 72
4909: ST_TO_ADDR
// if filter then
4910: LD_VAR 0 4
4914: IFFALSE 4949
// ComEnterUnit ( filter [ 1 ] , UnitFilter ( ru_tw , [ f_empty ] ) [ 1 ] ) ;
4916: LD_VAR 0 4
4920: PUSH
4921: LD_INT 1
4923: ARRAY
4924: PPUSH
4925: LD_EXP 25
4929: PPUSH
4930: LD_INT 58
4932: PUSH
4933: EMPTY
4934: LIST
4935: PPUSH
4936: CALL_OW 72
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: PPUSH
4945: CALL_OW 120
// end ; if UnitFilter ( ru_tw , [ f_empty ] ) = 0 then
4949: LD_EXP 25
4953: PPUSH
4954: LD_INT 58
4956: PUSH
4957: EMPTY
4958: LIST
4959: PPUSH
4960: CALL_OW 72
4964: PUSH
4965: LD_INT 0
4967: EQUAL
4968: IFFALSE 5123
// begin b_unit := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
4970: LD_ADDR_VAR 0 7
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 6
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 2
4987: PUSH
4988: LD_INT 30
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 30
5000: PUSH
5001: LD_INT 5
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 69
5021: ST_TO_ADDR
// if b_unit > 0 then
5022: LD_VAR 0 7
5026: PUSH
5027: LD_INT 0
5029: GREATER
5030: IFFALSE 5123
// for p = 1 to b_unit do
5032: LD_ADDR_VAR 0 2
5036: PUSH
5037: DOUBLE
5038: LD_INT 1
5040: DEC
5041: ST_TO_ADDR
5042: LD_VAR 0 7
5046: PUSH
5047: FOR_TO
5048: IFFALSE 5121
// if UnitsInSide ( b_unit [ p ] ) < 6 then
5050: LD_VAR 0 7
5054: PUSH
5055: LD_VAR 0 2
5059: ARRAY
5060: PPUSH
5061: CALL_OW 313
5065: PUSH
5066: LD_INT 6
5068: LESS
5069: IFFALSE 5119
// for i = 1 to filter do
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_VAR 0 4
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5117
// ComEnterUnit ( filter [ i ] , b_unit [ p ] ) ;
5089: LD_VAR 0 4
5093: PUSH
5094: LD_VAR 0 1
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 7
5104: PUSH
5105: LD_VAR 0 2
5109: ARRAY
5110: PPUSH
5111: CALL_OW 120
5115: GO 5086
5117: POP
5118: POP
5119: GO 5047
5121: POP
5122: POP
// end ; if UnitFilter ( ru_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) > 0 then
5123: LD_EXP 25
5127: PPUSH
5128: LD_INT 30
5130: PUSH
5131: LD_INT 32
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 35
5140: PUSH
5141: LD_INT 0
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 72
5156: PUSH
5157: LD_INT 0
5159: GREATER
5160: IFFALSE 5246
// begin filter := UnitFilter ( ru_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_EXP 25
5171: PPUSH
5172: LD_INT 30
5174: PUSH
5175: LD_INT 32
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 35
5184: PUSH
5185: LD_INT 0
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 72
5200: ST_TO_ADDR
// if BuildingStatus ( ru_fac ) = bs_idle then
5201: LD_INT 92
5203: PPUSH
5204: CALL_OW 461
5208: PUSH
5209: LD_INT 2
5211: EQUAL
5212: IFFALSE 5246
// ComPlaceWeapon ( filter [ 1 ] , b_weap [ Rand ( 1 , b_weap ) ] ) ;
5214: LD_VAR 0 4
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: LD_VAR 0 8
5227: PUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_VAR 0 8
5235: PPUSH
5236: CALL_OW 12
5240: ARRAY
5241: PPUSH
5242: CALL_OW 148
// end ; end ; if ru_mech > 0 then
5246: LD_EXP 29
5250: PUSH
5251: LD_INT 0
5253: GREATER
5254: IFFALSE 5314
// for i = 1 to ru_mech do
5256: LD_ADDR_VAR 0 1
5260: PUSH
5261: DOUBLE
5262: LD_INT 1
5264: DEC
5265: ST_TO_ADDR
5266: LD_EXP 29
5270: PUSH
5271: FOR_TO
5272: IFFALSE 5312
// if not IsInUnit ( ru_mech [ i ] ) then
5274: LD_EXP 29
5278: PUSH
5279: LD_VAR 0 1
5283: ARRAY
5284: PPUSH
5285: CALL_OW 310
5289: NOT
5290: IFFALSE 5310
// ComEnterUnit ( ru_mech [ i ] , ru_fac ) ;
5292: LD_EXP 29
5296: PUSH
5297: LD_VAR 0 1
5301: ARRAY
5302: PPUSH
5303: LD_INT 92
5305: PPUSH
5306: CALL_OW 120
5310: GO 5271
5312: POP
5313: POP
// if ru_fac then
5314: LD_INT 92
5316: IFFALSE 5422
// if ru_veh > 0 then
5318: LD_EXP 27
5322: PUSH
5323: LD_INT 0
5325: GREATER
5326: IFFALSE 5422
// if BuildingStatus ( ru_fac ) = bs_idle then
5328: LD_INT 92
5330: PPUSH
5331: CALL_OW 461
5335: PUSH
5336: LD_INT 2
5338: EQUAL
5339: IFFALSE 5422
// begin ComConstruct ( ru_fac , ru_veh [ 1 ] , ru_veh [ 2 ] , ru_veh [ 3 ] , ru_veh [ 4 ] ) ;
5341: LD_INT 92
5343: PPUSH
5344: LD_EXP 27
5348: PUSH
5349: LD_INT 1
5351: ARRAY
5352: PPUSH
5353: LD_EXP 27
5357: PUSH
5358: LD_INT 2
5360: ARRAY
5361: PPUSH
5362: LD_EXP 27
5366: PUSH
5367: LD_INT 3
5369: ARRAY
5370: PPUSH
5371: LD_EXP 27
5375: PUSH
5376: LD_INT 4
5378: ARRAY
5379: PPUSH
5380: CALL_OW 125
// for i = 1 to 4 do
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: DOUBLE
5390: LD_INT 1
5392: DEC
5393: ST_TO_ADDR
5394: LD_INT 4
5396: PUSH
5397: FOR_TO
5398: IFFALSE 5420
// ru_veh := Delete ( ru_veh , 1 ) ;
5400: LD_ADDR_EXP 27
5404: PUSH
5405: LD_EXP 27
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 3
5417: ST_TO_ADDR
5418: GO 5397
5420: POP
5421: POP
// end ; if ru_bul > 0 and enemy_detected = false then
5422: LD_EXP 31
5426: PUSH
5427: LD_INT 0
5429: GREATER
5430: PUSH
5431: LD_VAR 0 10
5435: PUSH
5436: LD_INT 0
5438: EQUAL
5439: AND
5440: IFFALSE 5543
// if ru_eng > 0 then
5442: LD_EXP 28
5446: PUSH
5447: LD_INT 0
5449: GREATER
5450: IFFALSE 5543
// for i = 1 to ru_eng do
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: DOUBLE
5458: LD_INT 1
5460: DEC
5461: ST_TO_ADDR
5462: LD_EXP 28
5466: PUSH
5467: FOR_TO
5468: IFFALSE 5541
// if not HasTask ( ru_eng [ i ] ) then
5470: LD_EXP 28
5474: PUSH
5475: LD_VAR 0 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 314
5485: NOT
5486: IFFALSE 5539
// begin ComBuild ( ru_eng [ i ] , ru_bul [ 1 ] , ru_bul [ 2 ] , ru_bul [ 3 ] , ru_bul [ 4 ] ) ;
5488: LD_EXP 28
5492: PUSH
5493: LD_VAR 0 1
5497: ARRAY
5498: PPUSH
5499: LD_EXP 31
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: LD_EXP 31
5512: PUSH
5513: LD_INT 2
5515: ARRAY
5516: PPUSH
5517: LD_EXP 31
5521: PUSH
5522: LD_INT 3
5524: ARRAY
5525: PPUSH
5526: LD_EXP 31
5530: PUSH
5531: LD_INT 4
5533: ARRAY
5534: PPUSH
5535: CALL_OW 145
// end ;
5539: GO 5467
5541: POP
5542: POP
// if b_dmgunit > 0 then
5543: LD_VAR 0 6
5547: PUSH
5548: LD_INT 0
5550: GREATER
5551: IFFALSE 5736
// begin if ru_eng > 0 then
5553: LD_EXP 28
5557: PUSH
5558: LD_INT 0
5560: GREATER
5561: IFFALSE 5641
// for i = 1 to ru_eng do
5563: LD_ADDR_VAR 0 1
5567: PUSH
5568: DOUBLE
5569: LD_INT 1
5571: DEC
5572: ST_TO_ADDR
5573: LD_EXP 28
5577: PUSH
5578: FOR_TO
5579: IFFALSE 5639
// begin if IsInUnit ( ru_eng [ i ] ) then
5581: LD_EXP 28
5585: PUSH
5586: LD_VAR 0 1
5590: ARRAY
5591: PPUSH
5592: CALL_OW 310
5596: IFFALSE 5613
// ComExitBuilding ( ru_eng [ i ] ) ;
5598: LD_EXP 28
5602: PUSH
5603: LD_VAR 0 1
5607: ARRAY
5608: PPUSH
5609: CALL_OW 122
// ComRepairBuilding ( ru_eng [ i ] , b_dmgunit [ 1 ] ) ;
5613: LD_EXP 28
5617: PUSH
5618: LD_VAR 0 1
5622: ARRAY
5623: PPUSH
5624: LD_VAR 0 6
5628: PUSH
5629: LD_INT 1
5631: ARRAY
5632: PPUSH
5633: CALL_OW 130
// end ;
5637: GO 5578
5639: POP
5640: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_crane ] ] ) > 0 then
5641: LD_INT 22
5643: PUSH
5644: LD_INT 6
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 34
5653: PUSH
5654: LD_INT 52
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 69
5669: PUSH
5670: LD_INT 0
5672: GREATER
5673: IFFALSE 5734
// for p in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_crane ] ] ) do
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 6
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 34
5692: PUSH
5693: LD_INT 52
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5732
// ComRepairBuilding ( p , b_dmgunit [ 1 ] ) ;
5712: LD_VAR 0 2
5716: PPUSH
5717: LD_VAR 0 6
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: CALL_OW 130
5730: GO 5709
5732: POP
5733: POP
// end else
5734: GO 5864
// if ru_bul = 0 then
5736: LD_EXP 31
5740: PUSH
5741: LD_INT 0
5743: EQUAL
5744: IFFALSE 5864
// for i = 1 to ru_eng do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_EXP 28
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5862
// if not HasTask ( ru_eng [ i ] ) then
5764: LD_EXP 28
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: PPUSH
5775: CALL_OW 314
5779: NOT
5780: IFFALSE 5860
// ComEnterUnit ( ru_eng [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) , ru_eng [ i ] ) ) ;
5782: LD_EXP 28
5786: PUSH
5787: LD_VAR 0 1
5791: ARRAY
5792: PPUSH
5793: LD_INT 22
5795: PUSH
5796: LD_INT 6
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 2
5805: PUSH
5806: LD_INT 30
5808: PUSH
5809: LD_INT 0
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 30
5818: PUSH
5819: LD_INT 1
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PPUSH
5835: CALL_OW 69
5839: PPUSH
5840: LD_EXP 28
5844: PUSH
5845: LD_VAR 0 1
5849: ARRAY
5850: PPUSH
5851: CALL_OW 74
5855: PPUSH
5856: CALL_OW 120
5860: GO 5761
5862: POP
5863: POP
// if h_dmgunit > 0 then
5864: LD_VAR 0 5
5868: PUSH
5869: LD_INT 0
5871: GREATER
5872: IFFALSE 6079
// begin for p = 1 to h_dmgunit do
5874: LD_ADDR_VAR 0 2
5878: PUSH
5879: DOUBLE
5880: LD_INT 1
5882: DEC
5883: ST_TO_ADDR
5884: LD_VAR 0 5
5888: PUSH
5889: FOR_TO
5890: IFFALSE 5939
// if GetDistUnits ( h_dmgunit [ p ] , ru_lab ) > 6 then
5892: LD_VAR 0 5
5896: PUSH
5897: LD_VAR 0 2
5901: ARRAY
5902: PPUSH
5903: LD_INT 83
5905: PPUSH
5906: CALL_OW 296
5910: PUSH
5911: LD_INT 6
5913: GREATER
5914: IFFALSE 5937
// ComMoveXY ( h_dmgunit [ p ] , 140 , 76 ) ;
5916: LD_VAR 0 5
5920: PUSH
5921: LD_VAR 0 2
5925: ARRAY
5926: PPUSH
5927: LD_INT 140
5929: PPUSH
5930: LD_INT 76
5932: PPUSH
5933: CALL_OW 111
5937: GO 5889
5939: POP
5940: POP
// if ru_sci > 0 then
5941: LD_EXP 30
5945: PUSH
5946: LD_INT 0
5948: GREATER
5949: IFFALSE 6079
// for i = 1 to ru_sci do
5951: LD_ADDR_VAR 0 1
5955: PUSH
5956: DOUBLE
5957: LD_INT 1
5959: DEC
5960: ST_TO_ADDR
5961: LD_EXP 30
5965: PUSH
5966: FOR_TO
5967: IFFALSE 6077
// if IsInUnit ( ru_sci [ i ] ) then
5969: LD_EXP 30
5973: PUSH
5974: LD_VAR 0 1
5978: ARRAY
5979: PPUSH
5980: CALL_OW 310
5984: IFFALSE 6003
// ComExitBuilding ( ru_sci [ i ] ) else
5986: LD_EXP 30
5990: PUSH
5991: LD_VAR 0 1
5995: ARRAY
5996: PPUSH
5997: CALL_OW 122
6001: GO 6075
// if not HasTask ( ru_sci [ i ] ) then
6003: LD_EXP 30
6007: PUSH
6008: LD_VAR 0 1
6012: ARRAY
6013: PPUSH
6014: CALL_OW 314
6018: NOT
6019: IFFALSE 6075
// if GetDistUnits ( ru_sci [ i ] , h_dmgunit [ 1 ] ) <= 15 then
6021: LD_EXP 30
6025: PUSH
6026: LD_VAR 0 1
6030: ARRAY
6031: PPUSH
6032: LD_VAR 0 5
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PPUSH
6041: CALL_OW 296
6045: PUSH
6046: LD_INT 15
6048: LESSEQUAL
6049: IFFALSE 6075
// ComHeal ( ru_sci [ i ] , h_dmgunit [ 1 ] ) ;
6051: LD_EXP 30
6055: PUSH
6056: LD_VAR 0 1
6060: ARRAY
6061: PPUSH
6062: LD_VAR 0 5
6066: PUSH
6067: LD_INT 1
6069: ARRAY
6070: PPUSH
6071: CALL_OW 128
6075: GO 5966
6077: POP
6078: POP
// end ; if h_dmgunit = 0 then
6079: LD_VAR 0 5
6083: PUSH
6084: LD_INT 0
6086: EQUAL
6087: IFFALSE 6204
// begin for i = 1 to ru_sci do
6089: LD_ADDR_VAR 0 1
6093: PUSH
6094: DOUBLE
6095: LD_INT 1
6097: DEC
6098: ST_TO_ADDR
6099: LD_EXP 30
6103: PUSH
6104: FOR_TO
6105: IFFALSE 6145
// if not IsInUnit ( ru_sci [ i ] ) then
6107: LD_EXP 30
6111: PUSH
6112: LD_VAR 0 1
6116: ARRAY
6117: PPUSH
6118: CALL_OW 310
6122: NOT
6123: IFFALSE 6143
// ComEnterUnit ( ru_sci [ i ] , ru_lab ) ;
6125: LD_EXP 30
6129: PUSH
6130: LD_VAR 0 1
6134: ARRAY
6135: PPUSH
6136: LD_INT 83
6138: PPUSH
6139: CALL_OW 120
6143: GO 6104
6145: POP
6146: POP
// if ru_tech > 0 then
6147: LD_EXP 26
6151: PUSH
6152: LD_INT 0
6154: GREATER
6155: IFFALSE 6204
// if BuildingStatus ( ru_lab ) = bs_idle then
6157: LD_INT 83
6159: PPUSH
6160: CALL_OW 461
6164: PUSH
6165: LD_INT 2
6167: EQUAL
6168: IFFALSE 6204
// begin ComResearch ( ru_lab , ru_tech [ 1 ] ) ;
6170: LD_INT 83
6172: PPUSH
6173: LD_EXP 26
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: CALL_OW 124
// ru_tech := Delete ( ru_tech , 1 ) ;
6186: LD_ADDR_EXP 26
6190: PUSH
6191: LD_EXP 26
6195: PPUSH
6196: LD_INT 1
6198: PPUSH
6199: CALL_OW 3
6203: ST_TO_ADDR
// end ; end ; end ;
6204: PPOPN 10
6206: END
// every 20 20$00 trigger ru_fac do var weap ;
6207: LD_INT 92
6209: IFFALSE 6436
6211: GO 6213
6213: DISABLE
6214: LD_INT 0
6216: PPUSH
// begin enable ;
6217: ENABLE
// weap := AvailableWeaponList ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar ] ;
6218: LD_ADDR_VAR 0 1
6222: PUSH
6223: LD_INT 22
6225: PUSH
6226: LD_INT 6
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 30
6235: PUSH
6236: LD_INT 3
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 69
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PPUSH
6256: CALL_OW 478
6260: PUSH
6261: LD_INT 52
6263: PUSH
6264: LD_INT 51
6266: PUSH
6267: LD_INT 53
6269: PUSH
6270: LD_EXP 46
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: DIFF
6281: ST_TO_ADDR
// ru_veh := ru_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , weap [ Rand ( 1 , weap ) ] ] ;
6282: LD_ADDR_EXP 27
6286: PUSH
6287: LD_EXP 27
6291: PUSH
6292: LD_INT 23
6294: PUSH
6295: LD_INT 1
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 1
6308: PPUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 12
6318: ARRAY
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: ADD
6326: ST_TO_ADDR
// weap := AvailableWeaponList ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar ] ;
6327: LD_ADDR_VAR 0 1
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 30
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 69
6360: PUSH
6361: LD_INT 1
6363: ARRAY
6364: PPUSH
6365: CALL_OW 478
6369: PUSH
6370: LD_INT 52
6372: PUSH
6373: LD_INT 51
6375: PUSH
6376: LD_INT 53
6378: PUSH
6379: LD_EXP 46
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: DIFF
6390: ST_TO_ADDR
// ru2_veh := ru2_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , weap [ Rand ( 1 , weap ) ] ] ;
6391: LD_ADDR_EXP 37
6395: PUSH
6396: LD_EXP 37
6400: PUSH
6401: LD_INT 23
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: LD_INT 1
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 1
6417: PPUSH
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL_OW 12
6427: ARRAY
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: ADD
6435: ST_TO_ADDR
// end ;
6436: PPOPN 1
6438: END
// every 0 0$03 do var i , c , p , skr , filter , cargo , dep ;
6439: GO 6441
6441: DISABLE
6442: LD_INT 0
6444: PPUSH
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
// begin enable ;
6451: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: LD_INT 50
6459: PUSH
6460: EMPTY
6461: LIST
6462: PUSH
6463: LD_INT 22
6465: PUSH
6466: LD_INT 6
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: LD_INT 25
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PUSH
6486: LD_INT 25
6488: PUSH
6489: LD_INT 16
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PPUSH
6506: CALL_OW 69
6510: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
6511: LD_ADDR_VAR 0 6
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 6
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 22
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 34
6546: PUSH
6547: LD_INT 51
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: LD_INT 24
6556: PUSH
6557: LD_INT 600
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: PPUSH
6569: CALL_OW 69
6573: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6574: LD_ADDR_VAR 0 7
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 22
6584: PUSH
6585: LD_INT 6
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 22
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: LD_INT 30
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 30
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_main_area ) ;
6644: LD_ADDR_VAR 0 4
6648: PUSH
6649: LD_INT 2
6651: PPUSH
6652: CALL_OW 435
6656: ST_TO_ADDR
// c = 1 ;
6657: LD_ADDR_VAR 0 2
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if cargo > 0 then
6665: LD_VAR 0 6
6669: PUSH
6670: LD_INT 0
6672: GREATER
6673: IFFALSE 6965
// while c < skr do
6675: LD_VAR 0 2
6679: PUSH
6680: LD_VAR 0 4
6684: LESS
6685: IFFALSE 6965
// begin if cargo then
6687: LD_VAR 0 6
6691: IFFALSE 6963
// for i in cargo do
6693: LD_ADDR_VAR 0 1
6697: PUSH
6698: LD_VAR 0 6
6702: PUSH
6703: FOR_IN
6704: IFFALSE 6961
// begin if not IsOk ( i ) or not skr then
6706: LD_VAR 0 1
6710: PPUSH
6711: CALL_OW 302
6715: NOT
6716: PUSH
6717: LD_VAR 0 4
6721: NOT
6722: OR
6723: IFFALSE 6727
// continue ;
6725: GO 6703
// if c > skr then
6727: LD_VAR 0 2
6731: PUSH
6732: LD_VAR 0 4
6736: GREATER
6737: IFFALSE 6741
// continue ;
6739: GO 6703
// if GetFuel ( i ) > 40 and GetDistUnitXY ( i , skr [ c ] , skr [ c + 1 ] ) < 51 then
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 261
6750: PUSH
6751: LD_INT 40
6753: GREATER
6754: PUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: LD_VAR 0 4
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: PPUSH
6771: LD_VAR 0 4
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 1
6783: PLUS
6784: ARRAY
6785: PPUSH
6786: CALL_OW 297
6790: PUSH
6791: LD_INT 51
6793: LESS
6794: AND
6795: IFFALSE 6832
// ComCollect ( i , skr [ c ] , skr [ c + 1 ] ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: LD_VAR 0 4
6806: PUSH
6807: LD_VAR 0 2
6811: ARRAY
6812: PPUSH
6813: LD_VAR 0 4
6817: PUSH
6818: LD_VAR 0 2
6822: PUSH
6823: LD_INT 1
6825: PLUS
6826: ARRAY
6827: PPUSH
6828: CALL_OW 117
// if GetFuel ( i ) <= 40 then
6832: LD_VAR 0 1
6836: PPUSH
6837: CALL_OW 261
6841: PUSH
6842: LD_INT 40
6844: LESSEQUAL
6845: IFFALSE 6945
// begin repeat begin ComMoveXY ( i , GetX ( NearestUnitToUnit ( dep , i ) ) , GetY ( NearestUnitToUnit ( dep , i ) ) ) ;
6847: LD_VAR 0 1
6851: PPUSH
6852: LD_VAR 0 7
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: CALL_OW 74
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 7
6876: PPUSH
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL_OW 74
6886: PPUSH
6887: CALL_OW 251
6891: PPUSH
6892: CALL_OW 111
// Wait ( 0 0$01 ) ;
6896: LD_INT 35
6898: PPUSH
6899: CALL_OW 67
// end until GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 5 ;
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 7
6912: PPUSH
6913: LD_VAR 0 1
6917: PPUSH
6918: CALL_OW 74
6922: PPUSH
6923: CALL_OW 296
6927: PUSH
6928: LD_INT 5
6930: LESS
6931: IFFALSE 6847
// SetFuel ( i , 100 ) ;
6933: LD_VAR 0 1
6937: PPUSH
6938: LD_INT 100
6940: PPUSH
6941: CALL_OW 240
// end ; c = c + 2 ;
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: LD_VAR 0 2
6954: PUSH
6955: LD_INT 2
6957: PLUS
6958: ST_TO_ADDR
// end ;
6959: GO 6703
6961: POP
6962: POP
// end ;
6963: GO 6675
// end ;
6965: PPOPN 7
6967: END
// every 0 0$01 do var i , p , un , filter , h_dmgunit , b_dmgunit , b_unit , b_weap , b_upgrade , b_fac , b_labb , b_ext , enemy_detected ;
6968: GO 6970
6970: DISABLE
6971: LD_INT 0
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
// begin enable ;
6986: ENABLE
// ru2_sold := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_lives , 600 ] ] ] ) ;
6987: LD_ADDR_EXP 33
6991: PUSH
6992: LD_INT 22
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 25
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 24
7014: PUSH
7015: LD_INT 600
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: ST_TO_ADDR
// ru2_eng := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 2 ] , [ f_lives , 600 ] ] ] ) ;
7035: LD_ADDR_EXP 38
7039: PUSH
7040: LD_INT 22
7042: PUSH
7043: LD_INT 3
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 25
7052: PUSH
7053: LD_INT 2
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 24
7062: PUSH
7063: LD_INT 600
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: EMPTY
7076: LIST
7077: PPUSH
7078: CALL_OW 69
7082: ST_TO_ADDR
// ru2_mech := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 3 ] , [ f_lives , 600 ] ] ] ) ;
7083: LD_ADDR_EXP 39
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 25
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 24
7110: PUSH
7111: LD_INT 600
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: PPUSH
7126: CALL_OW 69
7130: ST_TO_ADDR
// ru2_sci := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_lives , 600 ] ] ] ) ;
7131: LD_ADDR_EXP 40
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 4
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: LD_INT 600
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: PPUSH
7174: CALL_OW 69
7178: ST_TO_ADDR
// ru2_tw := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] , [ f_lives , 250 ] ] ] ) ;
7179: LD_ADDR_EXP 35
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 3
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: LD_INT 30
7199: PUSH
7200: LD_INT 31
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 30
7209: PUSH
7210: LD_INT 32
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 24
7224: PUSH
7225: LD_INT 250
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: ST_TO_ADDR
// ru2_b := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7245: LD_ADDR_EXP 42
7249: PUSH
7250: LD_INT 22
7252: PUSH
7253: LD_INT 3
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 21
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 69
7278: ST_TO_ADDR
// b_dmgunit := FilterUnitsInArea ( beria_defa , [ [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7279: LD_ADDR_VAR 0 6
7283: PUSH
7284: LD_INT 17
7286: PPUSH
7287: LD_INT 22
7289: PUSH
7290: LD_INT 3
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 21
7299: PUSH
7300: LD_INT 3
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 3
7309: PUSH
7310: LD_INT 24
7312: PUSH
7313: LD_INT 1000
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: PPUSH
7332: CALL_OW 70
7336: ST_TO_ADDR
// h_dmgunit := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ] ) ;
7337: LD_ADDR_VAR 0 5
7341: PUSH
7342: LD_INT 22
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 21
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 3
7364: PUSH
7365: LD_INT 24
7367: PUSH
7368: LD_INT 600
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: PPUSH
7387: CALL_OW 69
7391: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 7460
// b_fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7422: LD_ADDR_VAR 0 10
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 30
7439: PUSH
7440: LD_INT 3
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 69
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) then
7460: LD_INT 22
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 2
7472: PUSH
7473: LD_INT 30
7475: PUSH
7476: LD_INT 6
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 30
7485: PUSH
7486: LD_INT 7
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 30
7495: PUSH
7496: LD_INT 8
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IFFALSE 7586
// b_labb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7519: LD_ADDR_VAR 0 11
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 3
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 2
7536: PUSH
7537: LD_INT 30
7539: PUSH
7540: LD_INT 6
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 30
7549: PUSH
7550: LD_INT 7
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 30
7559: PUSH
7560: LD_INT 8
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: ST_TO_ADDR
// b_weap := AvailableWeaponList ( b_fac ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar , 89 ] ;
7586: LD_ADDR_VAR 0 8
7590: PUSH
7591: LD_VAR 0 10
7595: PPUSH
7596: CALL_OW 478
7600: PUSH
7601: LD_INT 52
7603: PUSH
7604: LD_INT 51
7606: PUSH
7607: LD_INT 53
7609: PUSH
7610: LD_EXP 46
7614: PUSH
7615: LD_INT 89
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: DIFF
7625: ST_TO_ADDR
// b_upgrade := [ b_depot , b_armoury , b_workshop ] ;
7626: LD_ADDR_VAR 0 9
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: ST_TO_ADDR
// b_ext := [ ] ;
7645: LD_ADDR_VAR 0 12
7649: PUSH
7650: EMPTY
7651: ST_TO_ADDR
// if FilterUnitsInArea ( beria_strict , [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) diff FilterAllUnits ( [ f_weapon , us_radar ] ) > 0 then
7652: LD_INT 11
7654: PPUSH
7655: LD_INT 2
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 70
7687: PUSH
7688: LD_INT 34
7690: PUSH
7691: LD_INT 11
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PPUSH
7698: CALL_OW 69
7702: PUSH
7703: LD_INT 0
7705: GREATER
7706: DIFF
7707: IFFALSE 7719
// enemy_detected := true else
7709: LD_ADDR_VAR 0 13
7713: PUSH
7714: LD_INT 1
7716: ST_TO_ADDR
7717: GO 7727
// enemy_detected := false ;
7719: LD_ADDR_VAR 0 13
7723: PUSH
7724: LD_INT 0
7726: ST_TO_ADDR
// if enemy_detected = false then
7727: LD_VAR 0 13
7731: PUSH
7732: LD_INT 0
7734: EQUAL
7735: IFFALSE 7836
// for i = 1 to ru2_b do
7737: LD_ADDR_VAR 0 1
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_EXP 42
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7834
// begin if GetBType ( ru2_b [ i ] ) in b_upgrade then
7755: LD_EXP 42
7759: PUSH
7760: LD_VAR 0 1
7764: ARRAY
7765: PPUSH
7766: CALL_OW 266
7770: PUSH
7771: LD_VAR 0 9
7775: IN
7776: IFFALSE 7793
// ComUpgrade ( ru2_b [ i ] ) ;
7778: LD_EXP 42
7782: PUSH
7783: LD_VAR 0 1
7787: ARRAY
7788: PPUSH
7789: CALL_OW 146
// if GetBType ( ru2_b [ i ] ) in b_lab then
7793: LD_EXP 42
7797: PUSH
7798: LD_VAR 0 1
7802: ARRAY
7803: PPUSH
7804: CALL_OW 266
7808: PUSH
7809: LD_INT 6
7811: IN
7812: IFFALSE 7832
// ComUpgradeLab ( ru2_b [ i ] , b_lab_weapon ) ;
7814: LD_EXP 42
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 10
7827: PPUSH
7828: CALL_OW 147
// end ;
7832: GO 7752
7834: POP
7835: POP
// if ru2_sold > 0 then
7836: LD_EXP 33
7840: PUSH
7841: LD_INT 0
7843: GREATER
7844: IFFALSE 8342
// begin filter := UnitFilter ( ru2_sold , [ f_not , [ f_inside ] ] ) ;
7846: LD_ADDR_VAR 0 4
7850: PUSH
7851: LD_EXP 33
7855: PPUSH
7856: LD_INT 3
7858: PUSH
7859: LD_INT 54
7861: PUSH
7862: EMPTY
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 72
7873: ST_TO_ADDR
// if UnitFilter ( ru2_tw , [ f_empty ] ) > 0 then
7874: LD_EXP 35
7878: PPUSH
7879: LD_INT 58
7881: PUSH
7882: EMPTY
7883: LIST
7884: PPUSH
7885: CALL_OW 72
7889: PUSH
7890: LD_INT 0
7892: GREATER
7893: IFFALSE 8043
// begin if filter = 0 then
7895: LD_VAR 0 4
7899: PUSH
7900: LD_INT 0
7902: EQUAL
7903: IFFALSE 7928
// ComExitBuilding ( ru2_sold [ Rand ( 1 , ru2_sold ) ] ) ;
7905: LD_EXP 33
7909: PUSH
7910: LD_INT 1
7912: PPUSH
7913: LD_EXP 33
7917: PPUSH
7918: CALL_OW 12
7922: ARRAY
7923: PPUSH
7924: CALL_OW 122
// if UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) then
7928: LD_VAR 0 4
7932: PPUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 60
7938: PUSH
7939: EMPTY
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 72
7950: IFFALSE 8043
// for i in UnitFilter ( ru2_tw , [ f_empty ] ) do
7952: LD_ADDR_VAR 0 1
7956: PUSH
7957: LD_EXP 35
7961: PPUSH
7962: LD_INT 58
7964: PUSH
7965: EMPTY
7966: LIST
7967: PPUSH
7968: CALL_OW 72
7972: PUSH
7973: FOR_IN
7974: IFFALSE 8041
// begin ComEnterUnit ( UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) [ 1 ] , i ) ;
7976: LD_VAR 0 4
7980: PPUSH
7981: LD_INT 3
7983: PUSH
7984: LD_INT 60
7986: PUSH
7987: EMPTY
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 72
7998: PUSH
7999: LD_INT 1
8001: ARRAY
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 120
// if not UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) then
8012: LD_VAR 0 4
8016: PPUSH
8017: LD_INT 3
8019: PUSH
8020: LD_INT 60
8022: PUSH
8023: EMPTY
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PPUSH
8030: CALL_OW 72
8034: NOT
8035: IFFALSE 8039
// break ;
8037: GO 8041
// end ;
8039: GO 7973
8041: POP
8042: POP
// end ; if UnitFilter ( ru2_tw , [ f_empty ] ) = 0 then
8043: LD_EXP 35
8047: PPUSH
8048: LD_INT 58
8050: PUSH
8051: EMPTY
8052: LIST
8053: PPUSH
8054: CALL_OW 72
8058: PUSH
8059: LD_INT 0
8061: EQUAL
8062: IFFALSE 8217
// begin b_unit := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
8064: LD_ADDR_VAR 0 7
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 3
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 2
8081: PUSH
8082: LD_INT 30
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 30
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PPUSH
8111: CALL_OW 69
8115: ST_TO_ADDR
// if b_unit > 0 then
8116: LD_VAR 0 7
8120: PUSH
8121: LD_INT 0
8123: GREATER
8124: IFFALSE 8217
// for p = 1 to b_unit do
8126: LD_ADDR_VAR 0 2
8130: PUSH
8131: DOUBLE
8132: LD_INT 1
8134: DEC
8135: ST_TO_ADDR
8136: LD_VAR 0 7
8140: PUSH
8141: FOR_TO
8142: IFFALSE 8215
// if UnitsInSide ( b_unit [ p ] ) < 6 then
8144: LD_VAR 0 7
8148: PUSH
8149: LD_VAR 0 2
8153: ARRAY
8154: PPUSH
8155: CALL_OW 313
8159: PUSH
8160: LD_INT 6
8162: LESS
8163: IFFALSE 8213
// for i = 1 to filter do
8165: LD_ADDR_VAR 0 1
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_VAR 0 4
8179: PUSH
8180: FOR_TO
8181: IFFALSE 8211
// ComEnterUnit ( filter [ i ] , b_unit [ p ] ) ;
8183: LD_VAR 0 4
8187: PUSH
8188: LD_VAR 0 1
8192: ARRAY
8193: PPUSH
8194: LD_VAR 0 7
8198: PUSH
8199: LD_VAR 0 2
8203: ARRAY
8204: PPUSH
8205: CALL_OW 120
8209: GO 8180
8211: POP
8212: POP
8213: GO 8141
8215: POP
8216: POP
// end ; if UnitFilter ( ru2_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) > 0 then
8217: LD_EXP 35
8221: PPUSH
8222: LD_INT 30
8224: PUSH
8225: LD_INT 32
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 35
8234: PUSH
8235: LD_INT 0
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 72
8250: PUSH
8251: LD_INT 0
8253: GREATER
8254: IFFALSE 8342
// begin filter := UnitFilter ( ru2_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) ;
8256: LD_ADDR_VAR 0 4
8260: PUSH
8261: LD_EXP 35
8265: PPUSH
8266: LD_INT 30
8268: PUSH
8269: LD_INT 32
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 35
8278: PUSH
8279: LD_INT 0
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 72
8294: ST_TO_ADDR
// if BuildingStatus ( b_fac ) = bs_idle then
8295: LD_VAR 0 10
8299: PPUSH
8300: CALL_OW 461
8304: PUSH
8305: LD_INT 2
8307: EQUAL
8308: IFFALSE 8342
// ComPlaceWeapon ( filter [ 1 ] , b_weap [ Rand ( 1 , b_weap ) ] ) ;
8310: LD_VAR 0 4
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: LD_VAR 0 8
8323: PUSH
8324: LD_INT 1
8326: PPUSH
8327: LD_VAR 0 8
8331: PPUSH
8332: CALL_OW 12
8336: ARRAY
8337: PPUSH
8338: CALL_OW 148
// end ; end ; if b_fac > 0 and ru2_mech > 0 then
8342: LD_VAR 0 10
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: PUSH
8351: LD_EXP 39
8355: PUSH
8356: LD_INT 0
8358: GREATER
8359: AND
8360: IFFALSE 8422
// for i = 1 to ru2_mech do
8362: LD_ADDR_VAR 0 1
8366: PUSH
8367: DOUBLE
8368: LD_INT 1
8370: DEC
8371: ST_TO_ADDR
8372: LD_EXP 39
8376: PUSH
8377: FOR_TO
8378: IFFALSE 8420
// if not IsInUnit ( ru2_mech [ i ] ) then
8380: LD_EXP 39
8384: PUSH
8385: LD_VAR 0 1
8389: ARRAY
8390: PPUSH
8391: CALL_OW 310
8395: NOT
8396: IFFALSE 8418
// ComEnterUnit ( ru2_mech [ i ] , b_fac ) ;
8398: LD_EXP 39
8402: PUSH
8403: LD_VAR 0 1
8407: ARRAY
8408: PPUSH
8409: LD_VAR 0 10
8413: PPUSH
8414: CALL_OW 120
8418: GO 8377
8420: POP
8421: POP
// if b_fac > 0 and ru2_veh > 0 then
8422: LD_VAR 0 10
8426: PUSH
8427: LD_INT 0
8429: GREATER
8430: PUSH
8431: LD_EXP 37
8435: PUSH
8436: LD_INT 0
8438: GREATER
8439: AND
8440: IFFALSE 8540
// if BuildingStatus ( b_fac ) = bs_idle then
8442: LD_VAR 0 10
8446: PPUSH
8447: CALL_OW 461
8451: PUSH
8452: LD_INT 2
8454: EQUAL
8455: IFFALSE 8540
// begin ComConstruct ( b_fac , ru2_veh [ 1 ] , ru2_veh [ 2 ] , ru2_veh [ 3 ] , ru2_veh [ 4 ] ) ;
8457: LD_VAR 0 10
8461: PPUSH
8462: LD_EXP 37
8466: PUSH
8467: LD_INT 1
8469: ARRAY
8470: PPUSH
8471: LD_EXP 37
8475: PUSH
8476: LD_INT 2
8478: ARRAY
8479: PPUSH
8480: LD_EXP 37
8484: PUSH
8485: LD_INT 3
8487: ARRAY
8488: PPUSH
8489: LD_EXP 37
8493: PUSH
8494: LD_INT 4
8496: ARRAY
8497: PPUSH
8498: CALL_OW 125
// for i = 1 to 4 do
8502: LD_ADDR_VAR 0 1
8506: PUSH
8507: DOUBLE
8508: LD_INT 1
8510: DEC
8511: ST_TO_ADDR
8512: LD_INT 4
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8538
// ru2_veh := Delete ( ru2_veh , 1 ) ;
8518: LD_ADDR_EXP 37
8522: PUSH
8523: LD_EXP 37
8527: PPUSH
8528: LD_INT 1
8530: PPUSH
8531: CALL_OW 3
8535: ST_TO_ADDR
8536: GO 8515
8538: POP
8539: POP
// end ; if ru2_bul > 0 and enemy_detected = false then
8540: LD_EXP 41
8544: PUSH
8545: LD_INT 0
8547: GREATER
8548: PUSH
8549: LD_VAR 0 13
8553: PUSH
8554: LD_INT 0
8556: EQUAL
8557: AND
8558: IFFALSE 8661
// if ru2_eng > 0 then
8560: LD_EXP 38
8564: PUSH
8565: LD_INT 0
8567: GREATER
8568: IFFALSE 8661
// for i = 1 to ru2_eng do
8570: LD_ADDR_VAR 0 1
8574: PUSH
8575: DOUBLE
8576: LD_INT 1
8578: DEC
8579: ST_TO_ADDR
8580: LD_EXP 38
8584: PUSH
8585: FOR_TO
8586: IFFALSE 8659
// if not HasTask ( ru2_eng [ i ] ) then
8588: LD_EXP 38
8592: PUSH
8593: LD_VAR 0 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 314
8603: NOT
8604: IFFALSE 8657
// begin ComBuild ( ru2_eng [ i ] , ru2_bul [ 1 ] , ru2_bul [ 2 ] , ru2_bul [ 3 ] , ru2_bul [ 4 ] ) ;
8606: LD_EXP 38
8610: PUSH
8611: LD_VAR 0 1
8615: ARRAY
8616: PPUSH
8617: LD_EXP 41
8621: PUSH
8622: LD_INT 1
8624: ARRAY
8625: PPUSH
8626: LD_EXP 41
8630: PUSH
8631: LD_INT 2
8633: ARRAY
8634: PPUSH
8635: LD_EXP 41
8639: PUSH
8640: LD_INT 3
8642: ARRAY
8643: PPUSH
8644: LD_EXP 41
8648: PUSH
8649: LD_INT 4
8651: ARRAY
8652: PPUSH
8653: CALL_OW 145
// end ;
8657: GO 8585
8659: POP
8660: POP
// for i = 1 to ru2_b do
8661: LD_ADDR_VAR 0 1
8665: PUSH
8666: DOUBLE
8667: LD_INT 1
8669: DEC
8670: ST_TO_ADDR
8671: LD_EXP 42
8675: PUSH
8676: FOR_TO
8677: IFFALSE 8865
// if BuildingStatus ( ru2_b [ i ] ) = bs_need_extension then
8679: LD_EXP 42
8683: PUSH
8684: LD_VAR 0 1
8688: ARRAY
8689: PPUSH
8690: CALL_OW 461
8694: PUSH
8695: LD_INT 8
8697: EQUAL
8698: IFFALSE 8863
// begin b_ext := GetExtPositions ( ru2_b [ i ] ) ;
8700: LD_ADDR_VAR 0 12
8704: PUSH
8705: LD_EXP 42
8709: PUSH
8710: LD_VAR 0 1
8714: ARRAY
8715: PPUSH
8716: CALL_OW 270
8720: ST_TO_ADDR
// if b_ext > 0 and not b_ext_gun in ru2_bul then
8721: LD_VAR 0 12
8725: PUSH
8726: LD_INT 0
8728: GREATER
8729: PUSH
8730: LD_INT 17
8732: PUSH
8733: LD_EXP 41
8737: IN
8738: NOT
8739: AND
8740: IFFALSE 8863
// ru2_bul := ru2_bul ^ [ b_ext_noncombat , b_ext [ 1 ] [ 1 ] , b_ext [ 1 ] [ 2 ] , 3 , b_ext_track , b_ext [ 2 ] [ 1 ] , b_ext [ 2 ] [ 2 ] , 5 , b_ext_gun , b_ext [ 3 ] [ 1 ] , b_ext [ 3 ] [ 2 ] , 2 ] ;
8742: LD_ADDR_EXP 41
8746: PUSH
8747: LD_EXP 41
8751: PUSH
8752: LD_INT 19
8754: PUSH
8755: LD_VAR 0 12
8759: PUSH
8760: LD_INT 1
8762: ARRAY
8763: PUSH
8764: LD_INT 1
8766: ARRAY
8767: PUSH
8768: LD_VAR 0 12
8772: PUSH
8773: LD_INT 1
8775: ARRAY
8776: PUSH
8777: LD_INT 2
8779: ARRAY
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_VAR 0 12
8791: PUSH
8792: LD_INT 2
8794: ARRAY
8795: PUSH
8796: LD_INT 1
8798: ARRAY
8799: PUSH
8800: LD_VAR 0 12
8804: PUSH
8805: LD_INT 2
8807: ARRAY
8808: PUSH
8809: LD_INT 2
8811: ARRAY
8812: PUSH
8813: LD_INT 5
8815: PUSH
8816: LD_INT 17
8818: PUSH
8819: LD_VAR 0 12
8823: PUSH
8824: LD_INT 3
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PUSH
8832: LD_VAR 0 12
8836: PUSH
8837: LD_INT 3
8839: ARRAY
8840: PUSH
8841: LD_INT 2
8843: ARRAY
8844: PUSH
8845: LD_INT 2
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: ADD
8862: ST_TO_ADDR
// end ;
8863: GO 8676
8865: POP
8866: POP
// if b_dmgunit > 0 then
8867: LD_VAR 0 6
8871: PUSH
8872: LD_INT 0
8874: GREATER
8875: IFFALSE 9060
// begin if ru2_eng > 0 then
8877: LD_EXP 38
8881: PUSH
8882: LD_INT 0
8884: GREATER
8885: IFFALSE 8965
// for i = 1 to ru2_eng do
8887: LD_ADDR_VAR 0 1
8891: PUSH
8892: DOUBLE
8893: LD_INT 1
8895: DEC
8896: ST_TO_ADDR
8897: LD_EXP 38
8901: PUSH
8902: FOR_TO
8903: IFFALSE 8963
// begin if IsInUnit ( ru2_eng [ i ] ) then
8905: LD_EXP 38
8909: PUSH
8910: LD_VAR 0 1
8914: ARRAY
8915: PPUSH
8916: CALL_OW 310
8920: IFFALSE 8937
// ComExitBuilding ( ru2_eng [ i ] ) ;
8922: LD_EXP 38
8926: PUSH
8927: LD_VAR 0 1
8931: ARRAY
8932: PPUSH
8933: CALL_OW 122
// ComRepairBuilding ( ru2_eng [ i ] , b_dmgunit [ 1 ] ) ;
8937: LD_EXP 38
8941: PUSH
8942: LD_VAR 0 1
8946: ARRAY
8947: PPUSH
8948: LD_VAR 0 6
8952: PUSH
8953: LD_INT 1
8955: ARRAY
8956: PPUSH
8957: CALL_OW 130
// end ;
8961: GO 8902
8963: POP
8964: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) > 0 then
8965: LD_INT 22
8967: PUSH
8968: LD_INT 3
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 34
8977: PUSH
8978: LD_INT 52
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 69
8993: PUSH
8994: LD_INT 0
8996: GREATER
8997: IFFALSE 9058
// for p in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) do
8999: LD_ADDR_VAR 0 2
9003: PUSH
9004: LD_INT 22
9006: PUSH
9007: LD_INT 3
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 34
9016: PUSH
9017: LD_INT 52
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 69
9032: PUSH
9033: FOR_IN
9034: IFFALSE 9056
// ComRepairBuilding ( p , b_dmgunit [ 1 ] ) ;
9036: LD_VAR 0 2
9040: PPUSH
9041: LD_VAR 0 6
9045: PUSH
9046: LD_INT 1
9048: ARRAY
9049: PPUSH
9050: CALL_OW 130
9054: GO 9033
9056: POP
9057: POP
// end else
9058: GO 9188
// if ru2_bul = 0 then
9060: LD_EXP 41
9064: PUSH
9065: LD_INT 0
9067: EQUAL
9068: IFFALSE 9188
// for i = 1 to ru2_eng do
9070: LD_ADDR_VAR 0 1
9074: PUSH
9075: DOUBLE
9076: LD_INT 1
9078: DEC
9079: ST_TO_ADDR
9080: LD_EXP 38
9084: PUSH
9085: FOR_TO
9086: IFFALSE 9186
// if not HasTask ( ru2_eng [ i ] ) then
9088: LD_EXP 38
9092: PUSH
9093: LD_VAR 0 1
9097: ARRAY
9098: PPUSH
9099: CALL_OW 314
9103: NOT
9104: IFFALSE 9184
// ComEnterUnit ( ru2_eng [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) , ru2_eng [ i ] ) ) ;
9106: LD_EXP 38
9110: PUSH
9111: LD_VAR 0 1
9115: ARRAY
9116: PPUSH
9117: LD_INT 22
9119: PUSH
9120: LD_INT 3
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 2
9129: PUSH
9130: LD_INT 30
9132: PUSH
9133: LD_INT 0
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: LD_INT 30
9142: PUSH
9143: LD_INT 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PPUSH
9159: CALL_OW 69
9163: PPUSH
9164: LD_EXP 38
9168: PUSH
9169: LD_VAR 0 1
9173: ARRAY
9174: PPUSH
9175: CALL_OW 74
9179: PPUSH
9180: CALL_OW 120
9184: GO 9085
9186: POP
9187: POP
// if b_labb > 0 then
9188: LD_VAR 0 11
9192: PUSH
9193: LD_INT 0
9195: GREATER
9196: IFFALSE 9546
// begin if h_dmgunit > 0 then
9198: LD_VAR 0 5
9202: PUSH
9203: LD_INT 0
9205: GREATER
9206: IFFALSE 9415
// begin for p = 1 to h_dmgunit do
9208: LD_ADDR_VAR 0 2
9212: PUSH
9213: DOUBLE
9214: LD_INT 1
9216: DEC
9217: ST_TO_ADDR
9218: LD_VAR 0 5
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9275
// if GetDistUnits ( h_dmgunit [ p ] , b_labb ) > 6 then
9226: LD_VAR 0 5
9230: PUSH
9231: LD_VAR 0 2
9235: ARRAY
9236: PPUSH
9237: LD_VAR 0 11
9241: PPUSH
9242: CALL_OW 296
9246: PUSH
9247: LD_INT 6
9249: GREATER
9250: IFFALSE 9273
// ComMoveXY ( h_dmgunit [ p ] , 95 , 72 ) ;
9252: LD_VAR 0 5
9256: PUSH
9257: LD_VAR 0 2
9261: ARRAY
9262: PPUSH
9263: LD_INT 95
9265: PPUSH
9266: LD_INT 72
9268: PPUSH
9269: CALL_OW 111
9273: GO 9223
9275: POP
9276: POP
// if ru2_sci > 0 then
9277: LD_EXP 40
9281: PUSH
9282: LD_INT 0
9284: GREATER
9285: IFFALSE 9415
// for i = 1 to ru2_sci do
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: DOUBLE
9293: LD_INT 1
9295: DEC
9296: ST_TO_ADDR
9297: LD_EXP 40
9301: PUSH
9302: FOR_TO
9303: IFFALSE 9413
// if IsInUnit ( ru2_sci [ i ] ) then
9305: LD_EXP 40
9309: PUSH
9310: LD_VAR 0 1
9314: ARRAY
9315: PPUSH
9316: CALL_OW 310
9320: IFFALSE 9339
// ComExitBuilding ( ru2_sci [ i ] ) else
9322: LD_EXP 40
9326: PUSH
9327: LD_VAR 0 1
9331: ARRAY
9332: PPUSH
9333: CALL_OW 122
9337: GO 9411
// if not HasTask ( ru2_sci [ i ] ) then
9339: LD_EXP 40
9343: PUSH
9344: LD_VAR 0 1
9348: ARRAY
9349: PPUSH
9350: CALL_OW 314
9354: NOT
9355: IFFALSE 9411
// if GetDistUnits ( ru2_sci [ i ] , h_dmgunit [ 1 ] ) <= 15 then
9357: LD_EXP 40
9361: PUSH
9362: LD_VAR 0 1
9366: ARRAY
9367: PPUSH
9368: LD_VAR 0 5
9372: PUSH
9373: LD_INT 1
9375: ARRAY
9376: PPUSH
9377: CALL_OW 296
9381: PUSH
9382: LD_INT 15
9384: LESSEQUAL
9385: IFFALSE 9411
// ComHeal ( ru2_sci [ i ] , h_dmgunit [ 1 ] ) ;
9387: LD_EXP 40
9391: PUSH
9392: LD_VAR 0 1
9396: ARRAY
9397: PPUSH
9398: LD_VAR 0 5
9402: PUSH
9403: LD_INT 1
9405: ARRAY
9406: PPUSH
9407: CALL_OW 128
9411: GO 9302
9413: POP
9414: POP
// end ; if h_dmgunit = 0 then
9415: LD_VAR 0 5
9419: PUSH
9420: LD_INT 0
9422: EQUAL
9423: IFFALSE 9546
// begin for i = 1 to ru2_sci do
9425: LD_ADDR_VAR 0 1
9429: PUSH
9430: DOUBLE
9431: LD_INT 1
9433: DEC
9434: ST_TO_ADDR
9435: LD_EXP 40
9439: PUSH
9440: FOR_TO
9441: IFFALSE 9483
// if not IsInUnit ( ru2_sci [ i ] ) then
9443: LD_EXP 40
9447: PUSH
9448: LD_VAR 0 1
9452: ARRAY
9453: PPUSH
9454: CALL_OW 310
9458: NOT
9459: IFFALSE 9481
// ComEnterUnit ( ru2_sci [ i ] , b_labb ) ;
9461: LD_EXP 40
9465: PUSH
9466: LD_VAR 0 1
9470: ARRAY
9471: PPUSH
9472: LD_VAR 0 11
9476: PPUSH
9477: CALL_OW 120
9481: GO 9440
9483: POP
9484: POP
// if ru2_tech > 0 then
9485: LD_EXP 36
9489: PUSH
9490: LD_INT 0
9492: GREATER
9493: IFFALSE 9546
// if BuildingStatus ( b_labb ) = bs_idle then
9495: LD_VAR 0 11
9499: PPUSH
9500: CALL_OW 461
9504: PUSH
9505: LD_INT 2
9507: EQUAL
9508: IFFALSE 9546
// begin ComResearch ( b_labb , ru2_tech [ 1 ] ) ;
9510: LD_VAR 0 11
9514: PPUSH
9515: LD_EXP 36
9519: PUSH
9520: LD_INT 1
9522: ARRAY
9523: PPUSH
9524: CALL_OW 124
// ru2_tech := Delete ( ru2_tech , 1 ) ;
9528: LD_ADDR_EXP 36
9532: PUSH
9533: LD_EXP 36
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 3
9545: ST_TO_ADDR
// end ; end ; end ; end ;
9546: PPOPN 13
9548: END
// every 0 0$01 trigger russian_produce do
9549: LD_EXP 20
9553: IFFALSE 10002
9555: GO 9557
9557: DISABLE
// begin case global_diff of 1 :
9558: LD_EXP 3
9562: PUSH
9563: LD_INT 1
9565: DOUBLE
9566: EQUAL
9567: IFTRUE 9571
9569: GO 9635
9571: POP
// ru_veh := ru_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ] ; 2 :
9572: LD_ADDR_EXP 27
9576: PUSH
9577: LD_EXP 27
9581: PUSH
9582: LD_INT 21
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: LD_INT 1
9590: PUSH
9591: LD_INT 42
9593: PUSH
9594: LD_INT 21
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: LD_INT 1
9602: PUSH
9603: LD_INT 42
9605: PUSH
9606: LD_INT 21
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: LD_INT 1
9614: PUSH
9615: LD_INT 43
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: ADD
9632: ST_TO_ADDR
9633: GO 9780
9635: LD_INT 2
9637: DOUBLE
9638: EQUAL
9639: IFTRUE 9643
9641: GO 9707
9643: POP
// ru_veh := ru_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ; 3 :
9644: LD_ADDR_EXP 27
9648: PUSH
9649: LD_EXP 27
9653: PUSH
9654: LD_INT 21
9656: PUSH
9657: LD_INT 1
9659: PUSH
9660: LD_INT 1
9662: PUSH
9663: LD_INT 44
9665: PUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 1
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 42
9677: PUSH
9678: LD_INT 22
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: LD_INT 43
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: ADD
9704: ST_TO_ADDR
9705: GO 9780
9707: LD_INT 3
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9779
9715: POP
// ru_veh := ru_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_gatling_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher ] ; end ;
9716: LD_ADDR_EXP 27
9720: PUSH
9721: LD_EXP 27
9725: PUSH
9726: LD_INT 23
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: LD_INT 43
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: LD_INT 1
9746: PUSH
9747: LD_INT 44
9749: PUSH
9750: LD_INT 22
9752: PUSH
9753: LD_INT 1
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: LD_INT 45
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: ADD
9776: ST_TO_ADDR
9777: GO 9780
9779: POP
// case global_diff of 1 :
9780: LD_EXP 3
9784: PUSH
9785: LD_INT 1
9787: DOUBLE
9788: EQUAL
9789: IFTRUE 9793
9791: GO 9857
9793: POP
// ru2_veh := ru2_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ] ; 2 :
9794: LD_ADDR_EXP 37
9798: PUSH
9799: LD_EXP 37
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 1
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: LD_INT 42
9815: PUSH
9816: LD_INT 21
9818: PUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 1
9824: PUSH
9825: LD_INT 42
9827: PUSH
9828: LD_INT 21
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: LD_INT 43
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: ADD
9854: ST_TO_ADDR
9855: GO 10002
9857: LD_INT 2
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9929
9865: POP
// ru2_veh := ru2_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ; 3 :
9866: LD_ADDR_EXP 37
9870: PUSH
9871: LD_EXP 37
9875: PUSH
9876: LD_INT 21
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: LD_INT 44
9887: PUSH
9888: LD_INT 22
9890: PUSH
9891: LD_INT 1
9893: PUSH
9894: LD_INT 1
9896: PUSH
9897: LD_INT 44
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 1
9905: PUSH
9906: LD_INT 1
9908: PUSH
9909: LD_INT 43
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: ADD
9926: ST_TO_ADDR
9927: GO 10002
9929: LD_INT 3
9931: DOUBLE
9932: EQUAL
9933: IFTRUE 9937
9935: GO 10001
9937: POP
// ru2_veh := ru2_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun ] ; end ;
9938: LD_ADDR_EXP 37
9942: PUSH
9943: LD_EXP 37
9947: PUSH
9948: LD_INT 23
9950: PUSH
9951: LD_INT 1
9953: PUSH
9954: LD_INT 1
9956: PUSH
9957: LD_INT 42
9959: PUSH
9960: LD_INT 22
9962: PUSH
9963: LD_INT 1
9965: PUSH
9966: LD_INT 1
9968: PUSH
9969: LD_INT 44
9971: PUSH
9972: LD_INT 22
9974: PUSH
9975: LD_INT 1
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: LD_INT 44
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: ADD
9998: ST_TO_ADDR
9999: GO 10002
10001: POP
// end ;
10002: END
// every 12 12$00 trigger timer >= [ 26 26$00 , 21 21$00 , 16 16$00 ] [ global_diff ] and FilterAllUnits ( [ f_side , 3 ] ) > 0 do var veh , i , p , area ;
10003: LD_EXP 2
10007: PUSH
10008: LD_INT 54600
10010: PUSH
10011: LD_INT 44100
10013: PUSH
10014: LD_INT 33600
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_EXP 3
10026: ARRAY
10027: GREATEREQUAL
10028: PUSH
10029: LD_INT 22
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PPUSH
10039: CALL_OW 69
10043: PUSH
10044: LD_INT 0
10046: GREATER
10047: AND
10048: IFFALSE 10264
10050: GO 10052
10052: DISABLE
10053: LD_INT 0
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
// begin enable ;
10059: ENABLE
// uc_side := [ 3 , 6 ] [ Rand ( 1 , 2 ) ] ;
10060: LD_ADDR_OWVAR 20
10064: PUSH
10065: LD_INT 3
10067: PUSH
10068: LD_INT 6
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 1
10077: PPUSH
10078: LD_INT 2
10080: PPUSH
10081: CALL_OW 12
10085: ARRAY
10086: ST_TO_ADDR
// uc_nation := 3 ;
10087: LD_ADDR_OWVAR 21
10091: PUSH
10092: LD_INT 3
10094: ST_TO_ADDR
// area := [ ru_west , south_spawn ] ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: LD_INT 18
10102: PUSH
10103: LD_INT 7
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
10110: LD_ADDR_VAR 0 3
10114: PUSH
10115: LD_INT 1
10117: PPUSH
10118: LD_INT 2
10120: PPUSH
10121: CALL_OW 12
10125: ST_TO_ADDR
// for i = 1 to Rand ( 1 , 2 ) do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 1
10138: PPUSH
10139: LD_INT 2
10141: PPUSH
10142: CALL_OW 12
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10262
// begin vc_chassis := ru_medium_tracked ;
10150: LD_ADDR_OWVAR 37
10154: PUSH
10155: LD_INT 22
10157: ST_TO_ADDR
// vc_engine := engine_combustion ;
10158: LD_ADDR_OWVAR 39
10162: PUSH
10163: LD_INT 1
10165: ST_TO_ADDR
// vc_control := control_manual ;
10166: LD_ADDR_OWVAR 38
10170: PUSH
10171: LD_INT 1
10173: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ Rand ( 1 , 3 ) ] ;
10174: LD_ADDR_OWVAR 40
10178: PUSH
10179: LD_INT 43
10181: PUSH
10182: LD_INT 44
10184: PUSH
10185: LD_INT 45
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 1
10195: PPUSH
10196: LD_INT 3
10198: PPUSH
10199: CALL_OW 12
10203: ARRAY
10204: ST_TO_ADDR
// veh := CreateVehicle ;
10205: LD_ADDR_VAR 0 1
10209: PUSH
10210: CALL_OW 45
10214: ST_TO_ADDR
// PlaceUnitArea ( veh , area [ p ] , false ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 4
10224: PUSH
10225: LD_VAR 0 3
10229: ARRAY
10230: PPUSH
10231: LD_INT 0
10233: PPUSH
10234: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , ru_def ) , veh ) ;
10238: LD_INT 3
10240: PPUSH
10241: LD_EXP 5
10245: PPUSH
10246: CALL 425 0 2
10250: PPUSH
10251: LD_VAR 0 1
10255: PPUSH
10256: CALL_OW 52
// end ;
10260: GO 10147
10262: POP
10263: POP
// end ;
10264: PPOPN 4
10266: END
// every 4 4$35 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] ] ] ] ) >= 6 do var filter , enemy , i , _list ;
10267: LD_INT 2
10269: PUSH
10270: LD_INT 22
10272: PUSH
10273: LD_INT 3
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 22
10282: PUSH
10283: LD_INT 6
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 21
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: LD_INT 34
10313: PUSH
10314: LD_INT 52
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 34
10323: PUSH
10324: LD_INT 51
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 34
10333: PUSH
10334: LD_INT 53
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL_OW 69
10360: PUSH
10361: LD_INT 6
10363: GREATEREQUAL
10364: IFFALSE 10604
10366: GO 10368
10368: DISABLE
10369: LD_INT 0
10371: PPUSH
10372: PPUSH
10373: PPUSH
10374: PPUSH
// begin enable ;
10375: ENABLE
// _list := [ [ b_oil_mine , b_solar_power , b_oil_power ] , [ us_cargo_bay ] , [ ] ] ;
10376: LD_ADDR_VAR 0 4
10380: PUSH
10381: LD_INT 29
10383: PUSH
10384: LD_INT 27
10386: PUSH
10387: LD_INT 26
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 12
10397: PUSH
10398: EMPTY
10399: LIST
10400: PUSH
10401: EMPTY
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
// filter := ru_list_attackers ;
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: LD_EXP 43
10417: ST_TO_ADDR
// while ( filter ) do
10418: LD_VAR 0 1
10422: IFFALSE 10604
// begin Wait ( 0 0$01 ) ;
10424: LD_INT 35
10426: PPUSH
10427: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
10431: LD_INT 22
10433: PUSH
10434: LD_INT 2
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: PUSH
10446: LD_INT 0
10448: EQUAL
10449: IFFALSE 10491
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) else
10451: LD_ADDR_VAR 0 2
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: LD_INT 22
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_INT 4
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 69
10488: ST_TO_ADDR
10489: GO 10511
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
10491: LD_ADDR_VAR 0 2
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 69
10510: ST_TO_ADDR
// for i = filter downto 1 do
10511: LD_ADDR_VAR 0 3
10515: PUSH
10516: DOUBLE
10517: LD_VAR 0 1
10521: INC
10522: ST_TO_ADDR
10523: LD_INT 1
10525: PUSH
10526: FOR_DOWNTO
10527: IFFALSE 10591
// if not IsPlaced ( filter [ i ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_VAR 0 3
10538: ARRAY
10539: PPUSH
10540: CALL_OW 305
10544: NOT
10545: IFFALSE 10569
// filter := Delete ( filter , i ) else
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_VAR 0 1
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: CALL_OW 3
10566: ST_TO_ADDR
10567: GO 10589
// ComAttack ( filter [ i ] , _list ) ;
10569: LD_VAR 0 1
10573: PUSH
10574: LD_VAR 0 3
10578: ARRAY
10579: PPUSH
10580: LD_VAR 0 4
10584: PPUSH
10585: CALL 992 0 2
10589: GO 10526
10591: POP
10592: POP
// if not filter then
10593: LD_VAR 0 1
10597: NOT
10598: IFFALSE 10602
// break ;
10600: GO 10604
// end ;
10602: GO 10418
// end ;
10604: PPOPN 4
10606: END
// export ru_spec_group ; every 0 0$10 trigger FilterUnitsInArea ( buffor , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 do var i , un , veh ;
10607: LD_INT 22
10609: PPUSH
10610: LD_INT 22
10612: PUSH
10613: LD_INT 1
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 3
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: PUSH
10639: LD_INT 0
10641: GREATER
10642: IFFALSE 10787
10644: GO 10646
10646: DISABLE
10647: LD_INT 0
10649: PPUSH
10650: PPUSH
10651: PPUSH
// begin uc_side := 6 ;
10652: LD_ADDR_OWVAR 20
10656: PUSH
10657: LD_INT 6
10659: ST_TO_ADDR
// uc_nation := 3 ;
10660: LD_ADDR_OWVAR 21
10664: PUSH
10665: LD_INT 3
10667: ST_TO_ADDR
// for i = 1 to Difficulty + 1 do
10668: LD_ADDR_VAR 0 1
10672: PUSH
10673: DOUBLE
10674: LD_INT 1
10676: DEC
10677: ST_TO_ADDR
10678: LD_OWVAR 67
10682: PUSH
10683: LD_INT 1
10685: PLUS
10686: PUSH
10687: FOR_TO
10688: IFFALSE 10782
// begin vc_chassis := ru_medium_tracked ;
10690: LD_ADDR_OWVAR 37
10694: PUSH
10695: LD_INT 22
10697: ST_TO_ADDR
// vc_engine := engine_combustion ;
10698: LD_ADDR_OWVAR 39
10702: PUSH
10703: LD_INT 1
10705: ST_TO_ADDR
// vc_control := control_manual ;
10706: LD_ADDR_OWVAR 38
10710: PUSH
10711: LD_INT 1
10713: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
10714: LD_ADDR_OWVAR 40
10718: PUSH
10719: LD_INT 45
10721: ST_TO_ADDR
// veh := CreateVehicle ;
10722: LD_ADDR_VAR 0 3
10726: PUSH
10727: CALL_OW 45
10731: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_INT 3
10739: PPUSH
10740: LD_EXP 5
10744: PPUSH
10745: CALL 425 0 2
10749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10750: LD_VAR 0 2
10754: PPUSH
10755: LD_VAR 0 3
10759: PPUSH
10760: CALL_OW 52
// ru_spec_group := ru_spec_group ^ veh ;
10764: LD_ADDR_EXP 44
10768: PUSH
10769: LD_EXP 44
10773: PUSH
10774: LD_VAR 0 3
10778: ADD
10779: ST_TO_ADDR
// end ;
10780: GO 10687
10782: POP
10783: POP
// enable ( 99 ) ;
10784: LD_INT 99
10786: ENABLE_MARKED
// end ;
10787: PPOPN 3
10789: END
// every 0 0$01 trigger ru_spec_group marked 99 do var i , enemy , filter ;
10790: LD_EXP 44
10794: IFFALSE 10963
10796: GO 10798
10798: DISABLE
10799: LD_INT 0
10801: PPUSH
10802: PPUSH
10803: PPUSH
// begin enable ;
10804: ENABLE
// filter := ru_spec_group ;
10805: LD_ADDR_VAR 0 3
10809: PUSH
10810: LD_EXP 44
10814: ST_TO_ADDR
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
10815: LD_INT 22
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: CALL_OW 69
10829: PUSH
10830: LD_INT 0
10832: EQUAL
10833: IFFALSE 10875
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) else
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 4
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: PPUSH
10868: CALL_OW 69
10872: ST_TO_ADDR
10873: GO 10895
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
10875: LD_ADDR_VAR 0 2
10879: PUSH
10880: LD_INT 22
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 69
10894: ST_TO_ADDR
// if filter > 0 then
10895: LD_VAR 0 3
10899: PUSH
10900: LD_INT 0
10902: GREATER
10903: IFFALSE 10963
// for i = 1 to filter do
10905: LD_ADDR_VAR 0 1
10909: PUSH
10910: DOUBLE
10911: LD_INT 1
10913: DEC
10914: ST_TO_ADDR
10915: LD_VAR 0 3
10919: PUSH
10920: FOR_TO
10921: IFFALSE 10961
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
10923: LD_VAR 0 3
10927: PUSH
10928: LD_VAR 0 1
10932: ARRAY
10933: PPUSH
10934: LD_VAR 0 2
10938: PPUSH
10939: LD_VAR 0 3
10943: PUSH
10944: LD_VAR 0 1
10948: ARRAY
10949: PPUSH
10950: CALL_OW 74
10954: PPUSH
10955: CALL_OW 115
10959: GO 10920
10961: POP
10962: POP
// end ; end_of_file
10963: PPOPN 3
10965: END
// export function ArabianAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
10966: LD_INT 0
10968: PPUSH
10969: PPUSH
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
// uc_side := side ;
10975: LD_ADDR_OWVAR 20
10979: PUSH
10980: LD_VAR 0 1
10984: ST_TO_ADDR
// uc_nation := nation_arabian ;
10985: LD_ADDR_OWVAR 21
10989: PUSH
10990: LD_INT 2
10992: ST_TO_ADDR
// chassis := [ ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
10993: LD_ADDR_VAR 0 10
10997: PUSH
10998: LD_INT 12
11000: PUSH
11001: LD_INT 13
11003: PUSH
11004: LD_INT 14
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: ST_TO_ADDR
// weapon := [ ar_multimissile_ballista , ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher ] ;
11012: LD_ADDR_VAR 0 11
11016: PUSH
11017: LD_INT 22
11019: PUSH
11020: LD_INT 24
11022: PUSH
11023: LD_INT 25
11025: PUSH
11026: LD_INT 27
11028: PUSH
11029: LD_INT 28
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: ST_TO_ADDR
// case typ of 1 :
11039: LD_VAR 0 3
11043: PUSH
11044: LD_INT 1
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11277
11052: POP
// begin for i = 1 to num do
11053: LD_ADDR_VAR 0 6
11057: PUSH
11058: DOUBLE
11059: LD_INT 1
11061: DEC
11062: ST_TO_ADDR
11063: LD_VAR 0 2
11067: PUSH
11068: FOR_TO
11069: IFFALSE 11228
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
11071: LD_ADDR_OWVAR 37
11075: PUSH
11076: LD_VAR 0 10
11080: PUSH
11081: LD_INT 1
11083: PPUSH
11084: LD_INT 2
11086: PPUSH
11087: CALL_OW 12
11091: ARRAY
11092: ST_TO_ADDR
// vc_engine := engine_combustion ;
11093: LD_ADDR_OWVAR 39
11097: PUSH
11098: LD_INT 1
11100: ST_TO_ADDR
// vc_control := control_manual ;
11101: LD_ADDR_OWVAR 38
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 2 ) ] ;
11109: LD_ADDR_OWVAR 40
11113: PUSH
11114: LD_VAR 0 11
11118: PUSH
11119: LD_INT 1
11121: PPUSH
11122: LD_INT 2
11124: PPUSH
11125: CALL_OW 12
11129: ARRAY
11130: ST_TO_ADDR
// veh := CreateVehicle ;
11131: LD_ADDR_VAR 0 9
11135: PUSH
11136: CALL_OW 45
11140: ST_TO_ADDR
// if area = ar_area1 then
11141: LD_VAR 0 4
11145: PUSH
11146: LD_INT 6
11148: EQUAL
11149: IFFALSE 11165
// SetDir ( veh , 3 ) else
11151: LD_VAR 0 9
11155: PPUSH
11156: LD_INT 3
11158: PPUSH
11159: CALL_OW 233
11163: GO 11177
// SetDir ( veh , 0 ) ;
11165: LD_VAR 0 9
11169: PPUSH
11170: LD_INT 0
11172: PPUSH
11173: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
11177: LD_VAR 0 9
11181: PPUSH
11182: LD_VAR 0 4
11186: PPUSH
11187: LD_INT 0
11189: PPUSH
11190: CALL_OW 49
// un := CreateHumanWithClass ( 1 , ar_def ) ;
11194: LD_ADDR_VAR 0 7
11198: PUSH
11199: LD_INT 1
11201: PPUSH
11202: LD_EXP 8
11206: PPUSH
11207: CALL 425 0 2
11211: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11212: LD_VAR 0 7
11216: PPUSH
11217: LD_VAR 0 9
11221: PPUSH
11222: CALL_OW 52
// end ;
11226: GO 11068
11228: POP
11229: POP
// for i = 1 to 3 do
11230: LD_ADDR_VAR 0 6
11234: PUSH
11235: DOUBLE
11236: LD_INT 1
11238: DEC
11239: ST_TO_ADDR
11240: LD_INT 3
11242: PUSH
11243: FOR_TO
11244: IFFALSE 11273
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , ar_def ) , area , false ) ;
11246: LD_INT 8
11248: PPUSH
11249: LD_EXP 8
11253: PPUSH
11254: CALL 425 0 2
11258: PPUSH
11259: LD_VAR 0 4
11263: PPUSH
11264: LD_INT 0
11266: PPUSH
11267: CALL_OW 49
11271: GO 11243
11273: POP
11274: POP
// end ; 2 :
11275: GO 11544
11277: LD_INT 2
11279: DOUBLE
11280: EQUAL
11281: IFTRUE 11285
11283: GO 11543
11285: POP
// begin for i = 1 to num do
11286: LD_ADDR_VAR 0 6
11290: PUSH
11291: DOUBLE
11292: LD_INT 1
11294: DEC
11295: ST_TO_ADDR
11296: LD_VAR 0 2
11300: PUSH
11301: FOR_TO
11302: IFFALSE 11461
// begin vc_chassis := chassis [ Rand ( 2 , 3 ) ] ;
11304: LD_ADDR_OWVAR 37
11308: PUSH
11309: LD_VAR 0 10
11313: PUSH
11314: LD_INT 2
11316: PPUSH
11317: LD_INT 3
11319: PPUSH
11320: CALL_OW 12
11324: ARRAY
11325: ST_TO_ADDR
// vc_engine := engine_combustion ;
11326: LD_ADDR_OWVAR 39
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// vc_control := control_manual ;
11334: LD_ADDR_OWVAR 38
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
11342: LD_ADDR_OWVAR 40
11346: PUSH
11347: LD_VAR 0 11
11351: PUSH
11352: LD_INT 3
11354: PPUSH
11355: LD_INT 5
11357: PPUSH
11358: CALL_OW 12
11362: ARRAY
11363: ST_TO_ADDR
// veh := CreateVehicle ;
11364: LD_ADDR_VAR 0 9
11368: PUSH
11369: CALL_OW 45
11373: ST_TO_ADDR
// if area = ar_area1 then
11374: LD_VAR 0 4
11378: PUSH
11379: LD_INT 6
11381: EQUAL
11382: IFFALSE 11398
// SetDir ( veh , 3 ) else
11384: LD_VAR 0 9
11388: PPUSH
11389: LD_INT 3
11391: PPUSH
11392: CALL_OW 233
11396: GO 11410
// SetDir ( veh , 0 ) ;
11398: LD_VAR 0 9
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
11410: LD_VAR 0 9
11414: PPUSH
11415: LD_VAR 0 4
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// un := CreateHumanWithClass ( 1 , ar_def ) ;
11427: LD_ADDR_VAR 0 7
11431: PUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_EXP 8
11439: PPUSH
11440: CALL 425 0 2
11444: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11445: LD_VAR 0 7
11449: PPUSH
11450: LD_VAR 0 9
11454: PPUSH
11455: CALL_OW 52
// end ;
11459: GO 11301
11461: POP
11462: POP
// for i = 1 to 2 do
11463: LD_ADDR_VAR 0 6
11467: PUSH
11468: DOUBLE
11469: LD_INT 1
11471: DEC
11472: ST_TO_ADDR
11473: LD_INT 2
11475: PUSH
11476: FOR_TO
11477: IFFALSE 11539
// begin uc_nation := 0 ;
11479: LD_ADDR_OWVAR 21
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// hc_class := 17 ;
11487: LD_ADDR_OWVAR 28
11491: PUSH
11492: LD_INT 17
11494: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
11495: LD_ADDR_OWVAR 29
11499: PUSH
11500: LD_INT 11
11502: PUSH
11503: LD_INT 13
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: ST_TO_ADDR
// un := CreateHuman ;
11510: LD_ADDR_VAR 0 7
11514: PUSH
11515: CALL_OW 44
11519: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
11520: LD_VAR 0 7
11524: PPUSH
11525: LD_VAR 0 4
11529: PPUSH
11530: LD_INT 0
11532: PPUSH
11533: CALL_OW 49
// end ;
11537: GO 11476
11539: POP
11540: POP
// end ; end ;
11541: GO 11544
11543: POP
// end ;
11544: LD_VAR 0 5
11548: RET
// export function FHeike ; begin
11549: LD_INT 0
11551: PPUSH
// uc_side := 2 ;
11552: LD_ADDR_OWVAR 20
11556: PUSH
11557: LD_INT 2
11559: ST_TO_ADDR
// uc_nation := 2 ;
11560: LD_ADDR_OWVAR 21
11564: PUSH
11565: LD_INT 2
11567: ST_TO_ADDR
// hc_gallery := sandar ;
11568: LD_ADDR_OWVAR 33
11572: PUSH
11573: LD_STRING sandar
11575: ST_TO_ADDR
// hc_face_number := 14 ;
11576: LD_ADDR_OWVAR 34
11580: PUSH
11581: LD_INT 14
11583: ST_TO_ADDR
// hc_name := Heike Steyer ;
11584: LD_ADDR_OWVAR 26
11588: PUSH
11589: LD_STRING Heike Steyer
11591: ST_TO_ADDR
// hc_sex := sex_female ;
11592: LD_ADDR_OWVAR 27
11596: PUSH
11597: LD_INT 2
11599: ST_TO_ADDR
// hc_class := 1 ;
11600: LD_ADDR_OWVAR 28
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// heike := CreateHuman ;
11608: LD_ADDR_EXP 16
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// end ;
11618: LD_VAR 0 1
11622: RET
// every 0 0$01 do var filter , enemy , i ;
11623: GO 11625
11625: DISABLE
11626: LD_INT 0
11628: PPUSH
11629: PPUSH
11630: PPUSH
// begin enable ;
11631: ENABLE
// filter := FilterAllUnits ( [ f_side , 2 ] ) ;
11632: LD_ADDR_VAR 0 1
11636: PUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
11652: LD_ADDR_VAR 0 2
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 1
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 22
11682: PUSH
11683: LD_INT 6
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if filter > 0 then
11701: LD_VAR 0 1
11705: PUSH
11706: LD_INT 0
11708: GREATER
11709: IFFALSE 11769
// for i = 1 to filter do
11711: LD_ADDR_VAR 0 3
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 1
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11767
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
11729: LD_VAR 0 1
11733: PUSH
11734: LD_VAR 0 3
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: LD_VAR 0 1
11749: PUSH
11750: LD_VAR 0 3
11754: ARRAY
11755: PPUSH
11756: CALL_OW 74
11760: PPUSH
11761: CALL_OW 115
11765: GO 11726
11767: POP
11768: POP
// end ; end_of_file
11769: PPOPN 3
11771: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11772: LD_VAR 0 1
11776: PPUSH
11777: CALL 26217 0 1
// if un = sikorski then
11781: LD_VAR 0 1
11785: PUSH
11786: LD_EXP 14
11790: EQUAL
11791: IFFALSE 11800
// YouLost ( sik ) ;
11793: LD_STRING sik
11795: PPUSH
11796: CALL_OW 104
// if un = omikron then
11800: LD_VAR 0 1
11804: PUSH
11805: LD_INT 64
11807: EQUAL
11808: IFFALSE 11817
// YouLost ( omi ) ;
11810: LD_STRING omi
11812: PPUSH
11813: CALL_OW 104
// if un in ru_list_attackers then
11817: LD_VAR 0 1
11821: PUSH
11822: LD_EXP 43
11826: IN
11827: IFFALSE 11845
// ru_list_attackers := ru_list_attackers diff un ;
11829: LD_ADDR_EXP 43
11833: PUSH
11834: LD_EXP 43
11838: PUSH
11839: LD_VAR 0 1
11843: DIFF
11844: ST_TO_ADDR
// if GetSide ( un ) = 6 and un in FilterAllUnits ( [ f_type , unit_building ] ) then
11845: LD_VAR 0 1
11849: PPUSH
11850: CALL_OW 255
11854: PUSH
11855: LD_INT 6
11857: EQUAL
11858: PUSH
11859: LD_VAR 0 1
11863: PUSH
11864: LD_INT 21
11866: PUSH
11867: LD_INT 3
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PPUSH
11874: CALL_OW 69
11878: IN
11879: AND
11880: IFFALSE 12099
// begin if GetBType ( un ) = b_factory then
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 266
11891: PUSH
11892: LD_INT 3
11894: EQUAL
11895: IFFALSE 11911
// ru_bul := ru_bul ^ b_workshop ;
11897: LD_ADDR_EXP 31
11901: PUSH
11902: LD_EXP 31
11906: PUSH
11907: LD_INT 2
11909: ADD
11910: ST_TO_ADDR
// if GetBType ( un ) = b_lab_full or GetBType ( un ) = b_lab_half then
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL_OW 266
11920: PUSH
11921: LD_INT 8
11923: EQUAL
11924: PUSH
11925: LD_VAR 0 1
11929: PPUSH
11930: CALL_OW 266
11934: PUSH
11935: LD_INT 7
11937: EQUAL
11938: OR
11939: IFFALSE 11955
// ru_bul := ru_bul ^ b_lab ;
11941: LD_ADDR_EXP 31
11945: PUSH
11946: LD_EXP 31
11950: PUSH
11951: LD_INT 6
11953: ADD
11954: ST_TO_ADDR
// if GetBType ( un ) = b_barracks then
11955: LD_VAR 0 1
11959: PPUSH
11960: CALL_OW 266
11964: PUSH
11965: LD_INT 5
11967: EQUAL
11968: IFFALSE 11984
// ru_bul := ru_bul ^ b_armoury ;
11970: LD_ADDR_EXP 31
11974: PUSH
11975: LD_EXP 31
11979: PUSH
11980: LD_INT 4
11982: ADD
11983: ST_TO_ADDR
// if not GetBType ( un ) in [ b_factory , b_lab_full , b_lab_half , b_barracks ] then
11984: LD_VAR 0 1
11988: PPUSH
11989: CALL_OW 266
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: LD_INT 8
11999: PUSH
12000: LD_INT 7
12002: PUSH
12003: LD_INT 5
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: IN
12012: NOT
12013: IFFALSE 12036
// ru_bul := ru_bul ^ GetBType ( un ) ;
12015: LD_ADDR_EXP 31
12019: PUSH
12020: LD_EXP 31
12024: PUSH
12025: LD_VAR 0 1
12029: PPUSH
12030: CALL_OW 266
12034: ADD
12035: ST_TO_ADDR
// ru_bul := ru_bul ^ GetX ( un ) ;
12036: LD_ADDR_EXP 31
12040: PUSH
12041: LD_EXP 31
12045: PUSH
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 250
12055: ADD
12056: ST_TO_ADDR
// ru_bul := ru_bul ^ GetY ( un ) ;
12057: LD_ADDR_EXP 31
12061: PUSH
12062: LD_EXP 31
12066: PUSH
12067: LD_VAR 0 1
12071: PPUSH
12072: CALL_OW 251
12076: ADD
12077: ST_TO_ADDR
// ru_bul := ru_bul ^ GetDir ( un ) ;
12078: LD_ADDR_EXP 31
12082: PUSH
12083: LD_EXP 31
12087: PUSH
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 254
12097: ADD
12098: ST_TO_ADDR
// end ; if GetSide ( un ) = 6 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) diff FilterAllUnits ( [ f_weapon , ru_rocket_launcher ] ) then
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 255
12108: PUSH
12109: LD_INT 6
12111: EQUAL
12112: PUSH
12113: LD_VAR 0 1
12117: PUSH
12118: LD_INT 21
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 69
12132: PUSH
12133: LD_INT 34
12135: PUSH
12136: LD_INT 45
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: DIFF
12148: IN
12149: AND
12150: IFFALSE 12236
// begin ru_veh := ru_veh ^ GetChassis ( un ) ;
12152: LD_ADDR_EXP 27
12156: PUSH
12157: LD_EXP 27
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 265
12171: ADD
12172: ST_TO_ADDR
// ru_veh := ru_veh ^ GetEngine ( un ) ;
12173: LD_ADDR_EXP 27
12177: PUSH
12178: LD_EXP 27
12182: PUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL_OW 262
12192: ADD
12193: ST_TO_ADDR
// ru_veh := ru_veh ^ GetControl ( un ) ;
12194: LD_ADDR_EXP 27
12198: PUSH
12199: LD_EXP 27
12203: PUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 263
12213: ADD
12214: ST_TO_ADDR
// ru_veh := ru_veh ^ GetWeapon ( un ) ;
12215: LD_ADDR_EXP 27
12219: PUSH
12220: LD_EXP 27
12224: PUSH
12225: LD_VAR 0 1
12229: PPUSH
12230: CALL_OW 264
12234: ADD
12235: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_lives , 251 ] ] ) > 0 then
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 22
12243: PUSH
12244: LD_INT 6
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 25
12253: PUSH
12254: LD_INT 3
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: IN
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: LD_INT 6
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: LD_INT 3
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 24
12293: PUSH
12294: LD_INT 251
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 69
12310: PUSH
12311: LD_INT 0
12313: GREATER
12314: AND
12315: IFFALSE 12363
// begin uc_side := 6 ;
12317: LD_ADDR_OWVAR 20
12321: PUSH
12322: LD_INT 6
12324: ST_TO_ADDR
// uc_nation := 3 ;
12325: LD_ADDR_OWVAR 21
12329: PUSH
12330: LD_INT 3
12332: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_INT 3
12340: PPUSH
12341: LD_EXP 5
12345: PPUSH
12346: CALL 425 0 2
12350: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
12351: LD_VAR 0 1
12355: PPUSH
12356: LD_INT 92
12358: PPUSH
12359: CALL_OW 52
// end ; if GetSide ( un ) = 3 and un in FilterAllUnits ( [ f_type , unit_building ] ) then
12363: LD_VAR 0 1
12367: PPUSH
12368: CALL_OW 255
12372: PUSH
12373: LD_INT 3
12375: EQUAL
12376: PUSH
12377: LD_VAR 0 1
12381: PUSH
12382: LD_INT 21
12384: PUSH
12385: LD_INT 3
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 69
12396: IN
12397: AND
12398: IFFALSE 12629
// begin if GetBType ( un ) = b_factory then
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 266
12409: PUSH
12410: LD_INT 3
12412: EQUAL
12413: IFFALSE 12429
// ru2_bul := ru2_bul ^ b_workshop ;
12415: LD_ADDR_EXP 41
12419: PUSH
12420: LD_EXP 41
12424: PUSH
12425: LD_INT 2
12427: ADD
12428: ST_TO_ADDR
// if GetBType ( un ) = b_lab_full or GetBType ( un ) = b_lab_half then
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 266
12438: PUSH
12439: LD_INT 8
12441: EQUAL
12442: PUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 266
12452: PUSH
12453: LD_INT 7
12455: EQUAL
12456: OR
12457: IFFALSE 12473
// ru2_bul := ru2_bul ^ b_lab ;
12459: LD_ADDR_EXP 41
12463: PUSH
12464: LD_EXP 41
12468: PUSH
12469: LD_INT 6
12471: ADD
12472: ST_TO_ADDR
// if GetBType ( un ) = b_barracks then
12473: LD_VAR 0 1
12477: PPUSH
12478: CALL_OW 266
12482: PUSH
12483: LD_INT 5
12485: EQUAL
12486: IFFALSE 12502
// ru2_bul := ru2_bul ^ b_armoury ;
12488: LD_ADDR_EXP 41
12492: PUSH
12493: LD_EXP 41
12497: PUSH
12498: LD_INT 4
12500: ADD
12501: ST_TO_ADDR
// if not GetBType ( un ) in [ b_factory , b_lab_full , b_lab_half , b_barracks , b_ext_gun , b_ext_noncombat , b_ext_track ] then
12502: LD_VAR 0 1
12506: PPUSH
12507: CALL_OW 266
12511: PUSH
12512: LD_INT 3
12514: PUSH
12515: LD_INT 8
12517: PUSH
12518: LD_INT 7
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: LD_INT 17
12526: PUSH
12527: LD_INT 19
12529: PUSH
12530: LD_INT 16
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: IN
12542: NOT
12543: IFFALSE 12566
// ru2_bul := ru2_bul ^ GetBType ( un ) ;
12545: LD_ADDR_EXP 41
12549: PUSH
12550: LD_EXP 41
12554: PUSH
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 266
12564: ADD
12565: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetX ( un ) ;
12566: LD_ADDR_EXP 41
12570: PUSH
12571: LD_EXP 41
12575: PUSH
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 250
12585: ADD
12586: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetY ( un ) ;
12587: LD_ADDR_EXP 41
12591: PUSH
12592: LD_EXP 41
12596: PUSH
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 251
12606: ADD
12607: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetDir ( un ) ;
12608: LD_ADDR_EXP 41
12612: PUSH
12613: LD_EXP 41
12617: PUSH
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 254
12627: ADD
12628: ST_TO_ADDR
// end ; if GetSide ( un ) = 3 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) diff FilterAllUnits ( [ f_weapon , ru_rocket_launcher ] ) then
12629: LD_VAR 0 1
12633: PPUSH
12634: CALL_OW 255
12638: PUSH
12639: LD_INT 3
12641: EQUAL
12642: PUSH
12643: LD_VAR 0 1
12647: PUSH
12648: LD_INT 21
12650: PUSH
12651: LD_INT 2
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PPUSH
12658: CALL_OW 69
12662: PUSH
12663: LD_INT 34
12665: PUSH
12666: LD_INT 45
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: DIFF
12678: IN
12679: AND
12680: IFFALSE 12766
// begin ru2_veh := ru2_veh ^ GetChassis ( un ) ;
12682: LD_ADDR_EXP 37
12686: PUSH
12687: LD_EXP 37
12691: PUSH
12692: LD_VAR 0 1
12696: PPUSH
12697: CALL_OW 265
12701: ADD
12702: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetEngine ( un ) ;
12703: LD_ADDR_EXP 37
12707: PUSH
12708: LD_EXP 37
12712: PUSH
12713: LD_VAR 0 1
12717: PPUSH
12718: CALL_OW 262
12722: ADD
12723: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetControl ( un ) ;
12724: LD_ADDR_EXP 37
12728: PUSH
12729: LD_EXP 37
12733: PUSH
12734: LD_VAR 0 1
12738: PPUSH
12739: CALL_OW 263
12743: ADD
12744: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetWeapon ( un ) ;
12745: LD_ADDR_EXP 37
12749: PUSH
12750: LD_EXP 37
12754: PUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 264
12764: ADD
12765: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_lives , 251 ] ] ) > 0 then
12766: LD_VAR 0 1
12770: PUSH
12771: LD_INT 22
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 25
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: IN
12800: PUSH
12801: LD_INT 22
12803: PUSH
12804: LD_INT 3
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 30
12813: PUSH
12814: LD_INT 3
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 24
12823: PUSH
12824: LD_INT 251
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: PUSH
12841: LD_INT 0
12843: GREATER
12844: AND
12845: IFFALSE 12923
// begin uc_side := 3 ;
12847: LD_ADDR_OWVAR 20
12851: PUSH
12852: LD_INT 3
12854: ST_TO_ADDR
// uc_nation := 3 ;
12855: LD_ADDR_OWVAR 21
12859: PUSH
12860: LD_INT 3
12862: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
12863: LD_ADDR_VAR 0 1
12867: PUSH
12868: LD_INT 3
12870: PPUSH
12871: LD_EXP 5
12875: PPUSH
12876: CALL 425 0 2
12880: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12881: LD_VAR 0 1
12885: PPUSH
12886: LD_INT 22
12888: PUSH
12889: LD_INT 3
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 30
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: CALL_OW 52
// end ; end ;
12923: PPOPN 1
12925: END
// on VehicleConstructed ( veh , fac ) do begin if veh in FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] ] ] ] ) then
12926: LD_VAR 0 1
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_INT 6
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 22
12946: PUSH
12947: LD_INT 3
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 21
12961: PUSH
12962: LD_INT 2
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: LD_INT 2
12974: PUSH
12975: LD_INT 34
12977: PUSH
12978: LD_INT 52
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 34
12987: PUSH
12988: LD_INT 51
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 34
12997: PUSH
12998: LD_INT 53
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 69
13024: IN
13025: IFFALSE 13050
// ru_list_attackers := Insert ( ru_list_attackers , 1 , veh ) ;
13027: LD_ADDR_EXP 43
13031: PUSH
13032: LD_EXP 43
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: CALL_OW 2
13049: ST_TO_ADDR
// end ;
13050: PPOPN 2
13052: END
// on BuildingComplete ( b ) do var i ;
13053: LD_INT 0
13055: PPUSH
// begin if b in FilterAllUnits ( [ f_side , 6 ] ) then
13056: LD_VAR 0 1
13060: PUSH
13061: LD_INT 22
13063: PUSH
13064: LD_INT 6
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: IN
13076: IFFALSE 13116
// for i = 1 to 4 do
13078: LD_ADDR_VAR 0 2
13082: PUSH
13083: DOUBLE
13084: LD_INT 1
13086: DEC
13087: ST_TO_ADDR
13088: LD_INT 4
13090: PUSH
13091: FOR_TO
13092: IFFALSE 13114
// ru_bul := Delete ( ru_bul , 1 ) ;
13094: LD_ADDR_EXP 31
13098: PUSH
13099: LD_EXP 31
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 3
13111: ST_TO_ADDR
13112: GO 13091
13114: POP
13115: POP
// if b in FilterAllUnits ( [ f_side , 3 ] ) then
13116: LD_VAR 0 1
13120: PUSH
13121: LD_INT 22
13123: PUSH
13124: LD_INT 3
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 69
13135: IN
13136: IFFALSE 13176
// for i = 1 to 4 do
13138: LD_ADDR_VAR 0 2
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_INT 4
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13174
// ru2_bul := Delete ( ru2_bul , 1 ) ;
13154: LD_ADDR_EXP 41
13158: PUSH
13159: LD_EXP 41
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: CALL_OW 3
13171: ST_TO_ADDR
13172: GO 13151
13174: POP
13175: POP
// end ;
13176: PPOPN 2
13178: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
13179: LD_VAR 0 1
13183: PPUSH
13184: LD_VAR 0 2
13188: PPUSH
13189: LD_VAR 0 3
13193: PPUSH
13194: CALL 26315 0 3
// end ;
13198: PPOPN 3
13200: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: CALL 26323 0 1
// end ; end_of_file
13210: PPOPN 1
13212: END
// export function Start_Game ; begin
13213: LD_INT 0
13215: PPUSH
// global_diff := GetMultiplayerSetting ( 0 ) ;
13216: LD_ADDR_EXP 3
13220: PUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 426
13228: ST_TO_ADDR
// if not global_diff then
13229: LD_EXP 3
13233: NOT
13234: IFFALSE 13244
// global_diff := 1 ;
13236: LD_ADDR_EXP 3
13240: PUSH
13241: LD_INT 1
13243: ST_TO_ADDR
// CenterOnXY ( 70 , 130 ) ;
13244: LD_INT 70
13246: PPUSH
13247: LD_INT 130
13249: PPUSH
13250: CALL_OW 84
// case Query ( text1 ) of 1 :
13254: LD_STRING text1
13256: PPUSH
13257: CALL_OW 97
13261: PUSH
13262: LD_INT 1
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13273
13270: POP
// ; end ;
13271: GO 13274
13273: POP
// ChangeMissionObjectives ( target1 ) ;
13274: LD_STRING target1
13276: PPUSH
13277: CALL_OW 337
// game_started := true ;
13281: LD_ADDR_EXP 10
13285: PUSH
13286: LD_INT 1
13288: ST_TO_ADDR
// crates_allow := true ;
13289: LD_ADDR_EXP 13
13293: PUSH
13294: LD_INT 1
13296: ST_TO_ADDR
// if global_diff > 2 then
13297: LD_EXP 3
13301: PUSH
13302: LD_INT 2
13304: GREATER
13305: IFFALSE 13314
// RemoveUnit ( us_spec_b ) ;
13307: LD_INT 140
13309: PPUSH
13310: CALL_OW 64
// end ;
13314: LD_VAR 0 1
13318: RET
// every 0 0$0.3 trigger SeeSide ( sikorski_veh , 6 ) or SeeSide ( sikorski_veh , 3 ) or SeeSide ( sikorski , 3 ) or SeeSide ( sikorski , 6 ) do
13319: LD_EXP 22
13323: PPUSH
13324: LD_INT 6
13326: PPUSH
13327: CALL 870 0 2
13331: PUSH
13332: LD_EXP 22
13336: PPUSH
13337: LD_INT 3
13339: PPUSH
13340: CALL 870 0 2
13344: OR
13345: PUSH
13346: LD_EXP 14
13350: PPUSH
13351: LD_INT 3
13353: PPUSH
13354: CALL 870 0 2
13358: OR
13359: PUSH
13360: LD_EXP 14
13364: PPUSH
13365: LD_INT 6
13367: PPUSH
13368: CALL 870 0 2
13372: OR
13373: IFFALSE 13390
13375: GO 13377
13377: DISABLE
// Say ( sikorski , DRus ) ;
13378: LD_EXP 14
13382: PPUSH
13383: LD_STRING DRus
13385: PPUSH
13386: CALL_OW 88
13390: END
// every 0 0$03 trigger See ( 4 , sikorski ) or See ( 4 , sikorski_veh ) do var i , per ;
13391: LD_INT 4
13393: PPUSH
13394: LD_EXP 14
13398: PPUSH
13399: CALL_OW 292
13403: PUSH
13404: LD_INT 4
13406: PPUSH
13407: LD_EXP 22
13411: PPUSH
13412: CALL_OW 292
13416: OR
13417: IFFALSE 13839
13419: GO 13421
13421: DISABLE
13422: LD_INT 0
13424: PPUSH
13425: PPUSH
// begin Wait ( 0 0$05 ) ;
13426: LD_INT 175
13428: PPUSH
13429: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
13433: LD_ADDR_VAR 0 1
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_INT 4
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: PUSH
13453: FOR_IN
13454: IFFALSE 13470
// SetSide ( i , 1 ) ;
13456: LD_VAR 0 1
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: CALL_OW 235
13468: GO 13453
13470: POP
13471: POP
// per := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff sikorski ;
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 21
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 26
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 69
13516: PUSH
13517: LD_EXP 14
13521: DIFF
13522: ST_TO_ADDR
// InGameOn ;
13523: CALL_OW 8
// CenterNowOnXY ( 19 , 13 ) ;
13527: LD_INT 19
13529: PPUSH
13530: LD_INT 13
13532: PPUSH
13533: CALL_OW 86
// if IsInUnit ( sikorski ) then
13537: LD_EXP 14
13541: PPUSH
13542: CALL_OW 310
13546: IFFALSE 13564
// begin ComExitVehicle ( sikorski ) ;
13548: LD_EXP 14
13552: PPUSH
13553: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
13557: LD_INT 10
13559: PPUSH
13560: CALL_OW 67
// end ; ComTurnUnit ( sikorski , per [ 1 ] ) ;
13564: LD_EXP 14
13568: PPUSH
13569: LD_VAR 0 2
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: CALL_OW 119
// ComTurnUnit ( per [ 1 ] , sikorski ) ;
13582: LD_VAR 0 2
13586: PUSH
13587: LD_INT 1
13589: ARRAY
13590: PPUSH
13591: LD_EXP 14
13595: PPUSH
13596: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
13600: LD_INT 10
13602: PPUSH
13603: CALL_OW 67
// Say ( sikorski , DS-1 ) ;
13607: LD_EXP 14
13611: PPUSH
13612: LD_STRING DS-1
13614: PPUSH
13615: CALL_OW 88
// Say ( per [ 1 ] , DP-1 ) ;
13619: LD_VAR 0 2
13623: PUSH
13624: LD_INT 1
13626: ARRAY
13627: PPUSH
13628: LD_STRING DP-1
13630: PPUSH
13631: CALL_OW 88
// Say ( sikorski , DS-2 ) ;
13635: LD_EXP 14
13639: PPUSH
13640: LD_STRING DS-2
13642: PPUSH
13643: CALL_OW 88
// Say ( per [ 1 ] , DP-2 ) ;
13647: LD_VAR 0 2
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: LD_STRING DP-2
13658: PPUSH
13659: CALL_OW 88
// Say ( sikorski , DS-3 ) ;
13663: LD_EXP 14
13667: PPUSH
13668: LD_STRING DS-3
13670: PPUSH
13671: CALL_OW 88
// Say ( per [ 1 ] , DP-3 ) ;
13675: LD_VAR 0 2
13679: PUSH
13680: LD_INT 1
13682: ARRAY
13683: PPUSH
13684: LD_STRING DP-3
13686: PPUSH
13687: CALL_OW 88
// Say ( sikorski , DS-4 ) ;
13691: LD_EXP 14
13695: PPUSH
13696: LD_STRING DS-4
13698: PPUSH
13699: CALL_OW 88
// Wait ( 0 0$0.6 ) ;
13703: LD_INT 21
13705: PPUSH
13706: CALL_OW 67
// SayRadio ( ron , DR-1 ) ;
13710: LD_EXP 17
13714: PPUSH
13715: LD_STRING DR-1
13717: PPUSH
13718: CALL_OW 94
// Say ( sikorski , DS-5 ) ;
13722: LD_EXP 14
13726: PPUSH
13727: LD_STRING DS-5
13729: PPUSH
13730: CALL_OW 88
// SayRadio ( ron , DR-2 ) ;
13734: LD_EXP 17
13738: PPUSH
13739: LD_STRING DR-2
13741: PPUSH
13742: CALL_OW 94
// Say ( sikorski , DS-6 ) ;
13746: LD_EXP 14
13750: PPUSH
13751: LD_STRING DS-6
13753: PPUSH
13754: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
13758: LD_INT 10
13760: PPUSH
13761: CALL_OW 67
// SayRadio ( ron , DR-3 ) ;
13765: LD_EXP 17
13769: PPUSH
13770: LD_STRING DR-3
13772: PPUSH
13773: CALL_OW 94
// InGameOff ;
13777: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
13781: LD_STRING target2
13783: PPUSH
13784: CALL_OW 337
// Wait ( 0 0$03 ) ;
13788: LD_INT 105
13790: PPUSH
13791: CALL_OW 67
// Say ( sikorski , DS-7 ) ;
13795: LD_EXP 14
13799: PPUSH
13800: LD_STRING DS-7
13802: PPUSH
13803: CALL_OW 88
// Wait ( [ 6 6$00 , 5 5$00 , 4 4$00 ] [ global_diff ] ) ;
13807: LD_INT 12600
13809: PUSH
13810: LD_INT 10500
13812: PUSH
13813: LD_INT 8400
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: LD_EXP 3
13825: ARRAY
13826: PPUSH
13827: CALL_OW 67
// russian_produce := true ;
13831: LD_ADDR_EXP 20
13835: PUSH
13836: LD_INT 1
13838: ST_TO_ADDR
// end ;
13839: PPOPN 2
13841: END
// export us_unit ; every 0 0$11 trigger timer >= [ 25 25$00 , 27 27$30 , 29 29$20 ] [ global_diff ] do
13842: LD_EXP 2
13846: PUSH
13847: LD_INT 52500
13849: PUSH
13850: LD_INT 57750
13852: PUSH
13853: LD_INT 61600
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: PUSH
13861: LD_EXP 3
13865: ARRAY
13866: GREATEREQUAL
13867: IFFALSE 14035
13869: GO 13871
13871: DISABLE
// begin uc_side := 8 ;
13872: LD_ADDR_OWVAR 20
13876: PUSH
13877: LD_INT 8
13879: ST_TO_ADDR
// uc_nation := 1 ;
13880: LD_ADDR_OWVAR 21
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// hc_sex := sex_male ;
13888: LD_ADDR_OWVAR 27
13892: PUSH
13893: LD_INT 1
13895: ST_TO_ADDR
// hc_gallery :=  ;
13896: LD_ADDR_OWVAR 33
13900: PUSH
13901: LD_STRING 
13903: ST_TO_ADDR
// hc_name :=  ;
13904: LD_ADDR_OWVAR 26
13908: PUSH
13909: LD_STRING 
13911: ST_TO_ADDR
// hc_class := Rand ( 1 , 4 ) ;
13912: LD_ADDR_OWVAR 28
13916: PUSH
13917: LD_INT 1
13919: PPUSH
13920: LD_INT 4
13922: PPUSH
13923: CALL_OW 12
13927: ST_TO_ADDR
// hc_skills := [ Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) ] ;
13928: LD_ADDR_OWVAR 31
13932: PUSH
13933: LD_INT 2
13935: PPUSH
13936: LD_EXP 6
13940: PPUSH
13941: CALL_OW 12
13945: PUSH
13946: LD_INT 2
13948: PPUSH
13949: LD_EXP 6
13953: PPUSH
13954: CALL_OW 12
13958: PUSH
13959: LD_INT 2
13961: PPUSH
13962: LD_EXP 6
13966: PPUSH
13967: CALL_OW 12
13971: PUSH
13972: LD_INT 2
13974: PPUSH
13975: LD_EXP 6
13979: PPUSH
13980: CALL_OW 12
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: ST_TO_ADDR
// us_unit := CreateHuman ;
13991: LD_ADDR_EXP 45
13995: PUSH
13996: CALL_OW 44
14000: ST_TO_ADDR
// PlaceUnitArea ( us_unit , swamp_spawn , true ) ;
14001: LD_EXP 45
14005: PPUSH
14006: LD_INT 13
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 49
// Wait ( 0 0$0.3 ) ;
14016: LD_INT 10
14018: PPUSH
14019: CALL_OW 67
// SayRadio ( us_unit , Dun1 ) ;
14023: LD_EXP 45
14027: PPUSH
14028: LD_STRING Dun1
14030: PPUSH
14031: CALL_OW 94
// end ;
14035: END
// every 0 0$01 trigger See ( 1 , us_unit ) do
14036: LD_INT 1
14038: PPUSH
14039: LD_EXP 45
14043: PPUSH
14044: CALL_OW 292
14048: IFFALSE 14065
14050: GO 14052
14052: DISABLE
// SetSide ( us_unit , 1 ) ;
14053: LD_EXP 45
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 235
14065: END
// every 1 1$35 trigger timer >= [ 8 8$00 , 9 9$00 , 10 10$00 ] [ global_diff ] do var un , veh , i ;
14066: LD_EXP 2
14070: PUSH
14071: LD_INT 16800
14073: PUSH
14074: LD_INT 18900
14076: PUSH
14077: LD_INT 21000
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_EXP 3
14089: ARRAY
14090: GREATEREQUAL
14091: IFFALSE 14470
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
14099: PPUSH
14100: PPUSH
// begin uc_side := 4 ;
14101: LD_ADDR_OWVAR 20
14105: PUSH
14106: LD_INT 4
14108: ST_TO_ADDR
// uc_nation := 1 ;
14109: LD_ADDR_OWVAR 21
14113: PUSH
14114: LD_INT 1
14116: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_wheeled , us_medium_wheeled ] [ global_diff ] ;
14117: LD_ADDR_OWVAR 37
14121: PUSH
14122: LD_INT 3
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_EXP 3
14140: ARRAY
14141: ST_TO_ADDR
// vc_engine := engine_solar ;
14142: LD_ADDR_OWVAR 39
14146: PUSH
14147: LD_INT 2
14149: ST_TO_ADDR
// vc_control := control_manual ;
14150: LD_ADDR_OWVAR 38
14154: PUSH
14155: LD_INT 1
14157: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
14158: LD_ADDR_OWVAR 40
14162: PUSH
14163: LD_INT 12
14165: ST_TO_ADDR
// veh := CreateVehicle ;
14166: LD_ADDR_VAR 0 2
14170: PUSH
14171: CALL_OW 45
14175: ST_TO_ADDR
// PlaceUnitArea ( veh , am_car , false ) ;
14176: LD_VAR 0 2
14180: PPUSH
14181: LD_INT 20
14183: PPUSH
14184: LD_INT 0
14186: PPUSH
14187: CALL_OW 49
// hc_sex := sex_male ;
14191: LD_ADDR_OWVAR 27
14195: PUSH
14196: LD_INT 1
14198: ST_TO_ADDR
// hc_gallery :=  ;
14199: LD_ADDR_OWVAR 33
14203: PUSH
14204: LD_STRING 
14206: ST_TO_ADDR
// hc_name :=  ;
14207: LD_ADDR_OWVAR 26
14211: PUSH
14212: LD_STRING 
14214: ST_TO_ADDR
// hc_class := 3 ;
14215: LD_ADDR_OWVAR 28
14219: PUSH
14220: LD_INT 3
14222: ST_TO_ADDR
// hc_skills := [ Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) ] ;
14223: LD_ADDR_OWVAR 31
14227: PUSH
14228: LD_INT 2
14230: PPUSH
14231: LD_EXP 6
14235: PPUSH
14236: CALL_OW 12
14240: PUSH
14241: LD_INT 2
14243: PPUSH
14244: LD_EXP 6
14248: PPUSH
14249: CALL_OW 12
14253: PUSH
14254: LD_INT 2
14256: PPUSH
14257: LD_EXP 6
14261: PPUSH
14262: CALL_OW 12
14266: PUSH
14267: LD_INT 2
14269: PPUSH
14270: LD_EXP 6
14274: PPUSH
14275: CALL_OW 12
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: ST_TO_ADDR
// un := CreateHuman ;
14286: LD_ADDR_VAR 0 1
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceUnitArea ( veh , am_car , true ) ;
14296: LD_VAR 0 2
14300: PPUSH
14301: LD_INT 20
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_VAR 0 2
14320: PPUSH
14321: CALL_OW 52
// SetCargo ( veh , mat_cans , 60 ) ;
14325: LD_VAR 0 2
14329: PPUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 60
14335: PPUSH
14336: CALL_OW 290
// SetFuel ( veh , 98 ) ;
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 98
14347: PPUSH
14348: CALL_OW 240
// SetLives ( un , 500 ) ;
14352: LD_VAR 0 1
14356: PPUSH
14357: LD_INT 500
14359: PPUSH
14360: CALL_OW 234
// SetLives ( veh , Rand ( 900 , 999 ) ) ;
14364: LD_VAR 0 2
14368: PPUSH
14369: LD_INT 900
14371: PPUSH
14372: LD_INT 999
14374: PPUSH
14375: CALL_OW 12
14379: PPUSH
14380: CALL_OW 234
// ComMoveXY ( un , 14 , 9 ) ;
14384: LD_VAR 0 1
14388: PPUSH
14389: LD_INT 14
14391: PPUSH
14392: LD_INT 9
14394: PPUSH
14395: CALL_OW 111
// repeat Wait ( 0 0$01 ) ;
14399: LD_INT 35
14401: PPUSH
14402: CALL_OW 67
// until See ( 1 , veh ) or See ( 1 , un ) ;
14406: LD_INT 1
14408: PPUSH
14409: LD_VAR 0 2
14413: PPUSH
14414: CALL_OW 292
14418: PUSH
14419: LD_INT 1
14421: PPUSH
14422: LD_VAR 0 1
14426: PPUSH
14427: CALL_OW 292
14431: OR
14432: IFFALSE 14399
// Say ( un , Dcargo ) ;
14434: LD_VAR 0 1
14438: PPUSH
14439: LD_STRING Dcargo
14441: PPUSH
14442: CALL_OW 88
// SetSide ( un , 1 ) ;
14446: LD_VAR 0 1
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 235
// SetSide ( veh , 1 ) ;
14458: LD_VAR 0 2
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 235
// end ;
14470: PPOPN 3
14472: END
// every 0 0$01 trigger timer >= [ 18 18$00 , 19 19$00 , 21 21$00 ] [ global_diff ] and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) < 5 do var un , speaker , veh , i , area ;
14473: LD_EXP 2
14477: PUSH
14478: LD_INT 37800
14480: PUSH
14481: LD_INT 39900
14483: PUSH
14484: LD_INT 44100
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: LD_EXP 3
14496: ARRAY
14497: GREATEREQUAL
14498: PUSH
14499: LD_INT 22
14501: PUSH
14502: LD_INT 6
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 21
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PUSH
14528: LD_INT 5
14530: LESS
14531: AND
14532: IFFALSE 14867
14534: GO 14536
14536: DISABLE
14537: LD_INT 0
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
14543: PPUSH
// begin area := [ us_north , us_south , us_north ] [ global_diff ] ;
14544: LD_ADDR_VAR 0 5
14548: PUSH
14549: LD_INT 21
14551: PUSH
14552: LD_INT 14
14554: PUSH
14555: LD_INT 21
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_EXP 3
14567: ARRAY
14568: ST_TO_ADDR
// speaker := [ ] ;
14569: LD_ADDR_VAR 0 2
14573: PUSH
14574: EMPTY
14575: ST_TO_ADDR
// uc_side := 1 ;
14576: LD_ADDR_OWVAR 20
14580: PUSH
14581: LD_INT 1
14583: ST_TO_ADDR
// uc_nation := 1 ;
14584: LD_ADDR_OWVAR 21
14588: PUSH
14589: LD_INT 1
14591: ST_TO_ADDR
// for i = 1 to 7 - [ global_diff ] do
14592: LD_ADDR_VAR 0 4
14596: PUSH
14597: DOUBLE
14598: LD_INT 1
14600: DEC
14601: ST_TO_ADDR
14602: LD_INT 7
14604: PUSH
14605: LD_EXP 3
14609: PUSH
14610: EMPTY
14611: LIST
14612: MINUS
14613: PUSH
14614: FOR_TO
14615: IFFALSE 14678
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , am_def ) ;
14617: LD_ADDR_VAR 0 1
14621: PUSH
14622: LD_INT 1
14624: PPUSH
14625: LD_INT 4
14627: PPUSH
14628: CALL_OW 12
14632: PPUSH
14633: LD_EXP 6
14637: PPUSH
14638: CALL 425 0 2
14642: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
14643: LD_VAR 0 1
14647: PPUSH
14648: LD_VAR 0 5
14652: PPUSH
14653: LD_INT 0
14655: PPUSH
14656: CALL_OW 49
// speaker := speaker ^ un ;
14660: LD_ADDR_VAR 0 2
14664: PUSH
14665: LD_VAR 0 2
14669: PUSH
14670: LD_VAR 0 1
14674: ADD
14675: ST_TO_ADDR
// end ;
14676: GO 14614
14678: POP
14679: POP
// vc_chassis := [ us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ global_diff ] ;
14680: LD_ADDR_OWVAR 37
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: LD_INT 1
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: LD_EXP 3
14703: ARRAY
14704: ST_TO_ADDR
// vc_engine := engine_solar ;
14705: LD_ADDR_OWVAR 39
14709: PUSH
14710: LD_INT 2
14712: ST_TO_ADDR
// vc_control := control_manual ;
14713: LD_ADDR_OWVAR 38
14717: PUSH
14718: LD_INT 1
14720: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_gatling_gun , us_machine_gun ] [ global_diff ] ;
14721: LD_ADDR_OWVAR 40
14725: PUSH
14726: LD_INT 5
14728: PUSH
14729: LD_INT 4
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: PUSH
14740: LD_EXP 3
14744: ARRAY
14745: ST_TO_ADDR
// veh := CreateVehicle ;
14746: LD_ADDR_VAR 0 3
14750: PUSH
14751: CALL_OW 45
14755: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14756: LD_VAR 0 3
14760: PPUSH
14761: LD_VAR 0 5
14765: PPUSH
14766: LD_INT 0
14768: PPUSH
14769: CALL_OW 49
// un := CreateHumanWithClass ( 3 , am_def ) ;
14773: LD_ADDR_VAR 0 1
14777: PUSH
14778: LD_INT 3
14780: PPUSH
14781: LD_EXP 6
14785: PPUSH
14786: CALL 425 0 2
14790: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14791: LD_VAR 0 1
14795: PPUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: CALL_OW 52
// Wait ( 0 0$0.3 ) ;
14805: LD_INT 10
14807: PPUSH
14808: CALL_OW 67
// SayRadio ( UnitFilter ( speaker , [ f_sex , sex_male ] ) [ 1 ] , Dhelp ) ;
14812: LD_VAR 0 2
14816: PPUSH
14817: LD_INT 26
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PPUSH
14827: CALL_OW 72
14831: PUSH
14832: LD_INT 1
14834: ARRAY
14835: PPUSH
14836: LD_STRING Dhelp
14838: PPUSH
14839: CALL_OW 94
// CenterNowOnXY ( GetX ( un ) , GetY ( un ) ) ;
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 250
14852: PPUSH
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 251
14862: PPUSH
14863: CALL_OW 86
// end ;
14867: PPOPN 5
14869: END
// every 0 0$01 trigger FilterUnitsInArea ( kurin_a , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) and IsOk ( Kurin ) do
14870: LD_INT 19
14872: PPUSH
14873: LD_INT 2
14875: PUSH
14876: LD_INT 22
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_INT 6
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 70
14905: PUSH
14906: LD_EXP 15
14910: PPUSH
14911: CALL_OW 302
14915: AND
14916: IFFALSE 14933
14918: GO 14920
14920: DISABLE
// SayRadio ( Kurin , Dkurin ) ;
14921: LD_EXP 15
14925: PPUSH
14926: LD_STRING Dkurin
14928: PPUSH
14929: CALL_OW 94
14933: END
// every 0 0$01 trigger timer > 27 27$00 do
14934: LD_EXP 2
14938: PUSH
14939: LD_INT 56700
14941: GREATER
14942: IFFALSE 14959
14944: GO 14946
14946: DISABLE
// SayRadio ( jack , ar_come ) ;
14947: LD_EXP 18
14951: PPUSH
14952: LD_STRING ar_come
14954: PPUSH
14955: CALL_OW 94
14959: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) > 0 do
14960: LD_INT 22
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: PUSH
14975: LD_INT 0
14977: GREATER
14978: IFFALSE 15006
14980: GO 14982
14982: DISABLE
// begin FHeike ;
14983: CALL 11549 0 0
// Wait ( 0 0$01 ) ;
14987: LD_INT 35
14989: PPUSH
14990: CALL_OW 67
// SayRadio ( heike , heike1 ) ;
14994: LD_EXP 16
14998: PPUSH
14999: LD_STRING heike1
15001: PPUSH
15002: CALL_OW 94
// end ;
15006: END
// every 15 15$00 trigger timer > 22 22$00 do
15007: LD_EXP 2
15011: PUSH
15012: LD_INT 46200
15014: GREATER
15015: IFFALSE 15066
15017: GO 15019
15019: DISABLE
// begin enable ;
15020: ENABLE
// ArabianAttack ( 2 , ar_force , Rand ( 1 , 2 ) , [ ar_area1 , ar_area2 ] [ Rand ( 1 , 2 ) ] ) ;
15021: LD_INT 2
15023: PPUSH
15024: LD_EXP 9
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: LD_INT 2
15034: PPUSH
15035: CALL_OW 12
15039: PPUSH
15040: LD_INT 6
15042: PUSH
15043: LD_INT 16
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 1
15052: PPUSH
15053: LD_INT 2
15055: PPUSH
15056: CALL_OW 12
15060: ARRAY
15061: PPUSH
15062: CALL 10966 0 4
// end ;
15066: END
// every 0 0$01 trigger timer >= Rand ( 65 65$00 , 67 67$30 ) or ( FilterAllUnits ( [ f_side , 3 ] ) + FilterAllUnits ( [ f_side , 6 ] ) < 3 ) do var i ;
15067: LD_EXP 2
15071: PUSH
15072: LD_INT 136500
15074: PPUSH
15075: LD_INT 141750
15077: PPUSH
15078: CALL_OW 12
15082: GREATEREQUAL
15083: PUSH
15084: LD_INT 22
15086: PUSH
15087: LD_INT 3
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 69
15098: PUSH
15099: LD_INT 22
15101: PUSH
15102: LD_INT 6
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PLUS
15114: PUSH
15115: LD_INT 3
15117: LESS
15118: OR
15119: IFFALSE 15193
15121: GO 15123
15123: DISABLE
15124: LD_INT 0
15126: PPUSH
// begin InGameOn ;
15127: CALL_OW 8
// DialogueOn ;
15131: CALL_OW 6
// SayRadio ( ron , you_win ) ;
15135: LD_EXP 17
15139: PPUSH
15140: LD_STRING you_win
15142: PPUSH
15143: CALL_OW 94
// DialogueOff ;
15147: CALL_OW 7
// InGameOff ;
15151: CALL_OW 9
// AddMedal ( med , 1 ) ;
15155: LD_STRING med
15157: PPUSH
15158: LD_INT 1
15160: PPUSH
15161: CALL_OW 101
// End_The_Mission_Allowed := true ;
15165: LD_ADDR_OWVAR 57
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// case Query ( MEnd ) of 1 :
15173: LD_STRING MEnd
15175: PPUSH
15176: CALL_OW 97
15180: PUSH
15181: LD_INT 1
15183: DOUBLE
15184: EQUAL
15185: IFTRUE 15189
15187: GO 15192
15189: POP
// ; end ;
15190: GO 15193
15192: POP
// end ;
15193: PPOPN 1
15195: END
// on EndTheMissionRaised ( exitt ) do begin End_The_Mission_Allowed := false ;
15196: LD_ADDR_OWVAR 57
15200: PUSH
15201: LD_INT 0
15203: ST_TO_ADDR
// if FilterAllUnits ( [ f_side , 3 ] ) + FilterAllUnits ( [ f_side , 6 ] ) < 3 then
15204: LD_INT 22
15206: PUSH
15207: LD_INT 3
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PPUSH
15214: CALL_OW 69
15218: PUSH
15219: LD_INT 22
15221: PUSH
15222: LD_INT 6
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PPUSH
15229: CALL_OW 69
15233: PLUS
15234: PUSH
15235: LD_INT 3
15237: LESS
15238: IFFALSE 15252
// AddMedal ( ru , 1 ) else
15240: LD_STRING ru
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 101
15250: GO 15263
// AddMedal ( ru , - 1 ) ;
15252: LD_STRING ru
15254: PPUSH
15255: LD_INT 1
15257: NEG
15258: PPUSH
15259: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 6 then
15263: LD_INT 22
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 21
15275: PUSH
15276: LD_INT 1
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PPUSH
15287: CALL_OW 69
15291: PUSH
15292: LD_INT 6
15294: GREATER
15295: IFFALSE 15309
// AddMedal ( pep , 1 ) else
15297: LD_STRING pep
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: CALL_OW 101
15307: GO 15320
// AddMedal ( pep , - 1 ) ;
15309: LD_STRING pep
15311: PPUSH
15312: LD_INT 1
15314: NEG
15315: PPUSH
15316: CALL_OW 101
// GiveMedals ( MAIN ) ;
15320: LD_STRING MAIN
15322: PPUSH
15323: CALL_OW 102
// YouWin ;
15327: CALL_OW 103
// end ; end_of_file
15331: PPOPN 1
15333: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
15334: GO 15336
15336: DISABLE
// begin ru_radar := 98 ;
15337: LD_ADDR_EXP 46
15341: PUSH
15342: LD_INT 98
15344: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15345: LD_ADDR_EXP 47
15349: PUSH
15350: LD_INT 89
15352: ST_TO_ADDR
// us_hack := 99 ;
15353: LD_ADDR_EXP 48
15357: PUSH
15358: LD_INT 99
15360: ST_TO_ADDR
// us_artillery := 97 ;
15361: LD_ADDR_EXP 49
15365: PUSH
15366: LD_INT 97
15368: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15369: LD_ADDR_EXP 50
15373: PUSH
15374: LD_INT 91
15376: ST_TO_ADDR
// end ; end_of_file end_of_file
15377: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15378: GO 15380
15380: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15381: LD_STRING initStreamRollete();
15383: PPUSH
15384: CALL_OW 559
// InitStreamMode ;
15388: CALL 15397 0 0
// DefineStreamItems ( ) ;
15392: CALL 15837 0 0
// end ;
15396: END
// function InitStreamMode ; begin
15397: LD_INT 0
15399: PPUSH
// streamModeActive := false ;
15400: LD_ADDR_EXP 51
15404: PUSH
15405: LD_INT 0
15407: ST_TO_ADDR
// normalCounter := 36 ;
15408: LD_ADDR_EXP 52
15412: PUSH
15413: LD_INT 36
15415: ST_TO_ADDR
// hardcoreCounter := 16 ;
15416: LD_ADDR_EXP 53
15420: PUSH
15421: LD_INT 16
15423: ST_TO_ADDR
// sRocket := false ;
15424: LD_ADDR_EXP 56
15428: PUSH
15429: LD_INT 0
15431: ST_TO_ADDR
// sSpeed := false ;
15432: LD_ADDR_EXP 55
15436: PUSH
15437: LD_INT 0
15439: ST_TO_ADDR
// sEngine := false ;
15440: LD_ADDR_EXP 57
15444: PUSH
15445: LD_INT 0
15447: ST_TO_ADDR
// sSpec := false ;
15448: LD_ADDR_EXP 54
15452: PUSH
15453: LD_INT 0
15455: ST_TO_ADDR
// sLevel := false ;
15456: LD_ADDR_EXP 58
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
// sArmoury := false ;
15464: LD_ADDR_EXP 59
15468: PUSH
15469: LD_INT 0
15471: ST_TO_ADDR
// sRadar := false ;
15472: LD_ADDR_EXP 60
15476: PUSH
15477: LD_INT 0
15479: ST_TO_ADDR
// sBunker := false ;
15480: LD_ADDR_EXP 61
15484: PUSH
15485: LD_INT 0
15487: ST_TO_ADDR
// sHack := false ;
15488: LD_ADDR_EXP 62
15492: PUSH
15493: LD_INT 0
15495: ST_TO_ADDR
// sFire := false ;
15496: LD_ADDR_EXP 63
15500: PUSH
15501: LD_INT 0
15503: ST_TO_ADDR
// sRefresh := false ;
15504: LD_ADDR_EXP 64
15508: PUSH
15509: LD_INT 0
15511: ST_TO_ADDR
// sExp := false ;
15512: LD_ADDR_EXP 65
15516: PUSH
15517: LD_INT 0
15519: ST_TO_ADDR
// sDepot := false ;
15520: LD_ADDR_EXP 66
15524: PUSH
15525: LD_INT 0
15527: ST_TO_ADDR
// sFlag := false ;
15528: LD_ADDR_EXP 67
15532: PUSH
15533: LD_INT 0
15535: ST_TO_ADDR
// sKamikadze := false ;
15536: LD_ADDR_EXP 75
15540: PUSH
15541: LD_INT 0
15543: ST_TO_ADDR
// sTroll := false ;
15544: LD_ADDR_EXP 76
15548: PUSH
15549: LD_INT 0
15551: ST_TO_ADDR
// sSlow := false ;
15552: LD_ADDR_EXP 77
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// sLack := false ;
15560: LD_ADDR_EXP 78
15564: PUSH
15565: LD_INT 0
15567: ST_TO_ADDR
// sTank := false ;
15568: LD_ADDR_EXP 80
15572: PUSH
15573: LD_INT 0
15575: ST_TO_ADDR
// sRemote := false ;
15576: LD_ADDR_EXP 81
15580: PUSH
15581: LD_INT 0
15583: ST_TO_ADDR
// sPowell := false ;
15584: LD_ADDR_EXP 82
15588: PUSH
15589: LD_INT 0
15591: ST_TO_ADDR
// sTeleport := false ;
15592: LD_ADDR_EXP 85
15596: PUSH
15597: LD_INT 0
15599: ST_TO_ADDR
// sOilTower := false ;
15600: LD_ADDR_EXP 87
15604: PUSH
15605: LD_INT 0
15607: ST_TO_ADDR
// sShovel := false ;
15608: LD_ADDR_EXP 88
15612: PUSH
15613: LD_INT 0
15615: ST_TO_ADDR
// sSheik := false ;
15616: LD_ADDR_EXP 89
15620: PUSH
15621: LD_INT 0
15623: ST_TO_ADDR
// sEarthquake := false ;
15624: LD_ADDR_EXP 91
15628: PUSH
15629: LD_INT 0
15631: ST_TO_ADDR
// sAI := false ;
15632: LD_ADDR_EXP 92
15636: PUSH
15637: LD_INT 0
15639: ST_TO_ADDR
// sCargo := false ;
15640: LD_ADDR_EXP 95
15644: PUSH
15645: LD_INT 0
15647: ST_TO_ADDR
// sDLaser := false ;
15648: LD_ADDR_EXP 96
15652: PUSH
15653: LD_INT 0
15655: ST_TO_ADDR
// sExchange := false ;
15656: LD_ADDR_EXP 97
15660: PUSH
15661: LD_INT 0
15663: ST_TO_ADDR
// sFac := false ;
15664: LD_ADDR_EXP 98
15668: PUSH
15669: LD_INT 0
15671: ST_TO_ADDR
// sPower := false ;
15672: LD_ADDR_EXP 99
15676: PUSH
15677: LD_INT 0
15679: ST_TO_ADDR
// sRandom := false ;
15680: LD_ADDR_EXP 100
15684: PUSH
15685: LD_INT 0
15687: ST_TO_ADDR
// sShield := false ;
15688: LD_ADDR_EXP 101
15692: PUSH
15693: LD_INT 0
15695: ST_TO_ADDR
// sTime := false ;
15696: LD_ADDR_EXP 102
15700: PUSH
15701: LD_INT 0
15703: ST_TO_ADDR
// sTools := false ;
15704: LD_ADDR_EXP 103
15708: PUSH
15709: LD_INT 0
15711: ST_TO_ADDR
// sSold := false ;
15712: LD_ADDR_EXP 68
15716: PUSH
15717: LD_INT 0
15719: ST_TO_ADDR
// sDiff := false ;
15720: LD_ADDR_EXP 69
15724: PUSH
15725: LD_INT 0
15727: ST_TO_ADDR
// sFog := false ;
15728: LD_ADDR_EXP 72
15732: PUSH
15733: LD_INT 0
15735: ST_TO_ADDR
// sReset := false ;
15736: LD_ADDR_EXP 73
15740: PUSH
15741: LD_INT 0
15743: ST_TO_ADDR
// sSun := false ;
15744: LD_ADDR_EXP 74
15748: PUSH
15749: LD_INT 0
15751: ST_TO_ADDR
// sTiger := false ;
15752: LD_ADDR_EXP 70
15756: PUSH
15757: LD_INT 0
15759: ST_TO_ADDR
// sBomb := false ;
15760: LD_ADDR_EXP 71
15764: PUSH
15765: LD_INT 0
15767: ST_TO_ADDR
// sWound := false ;
15768: LD_ADDR_EXP 79
15772: PUSH
15773: LD_INT 0
15775: ST_TO_ADDR
// sBetray := false ;
15776: LD_ADDR_EXP 83
15780: PUSH
15781: LD_INT 0
15783: ST_TO_ADDR
// sContamin := false ;
15784: LD_ADDR_EXP 84
15788: PUSH
15789: LD_INT 0
15791: ST_TO_ADDR
// sOil := false ;
15792: LD_ADDR_EXP 86
15796: PUSH
15797: LD_INT 0
15799: ST_TO_ADDR
// sStu := false ;
15800: LD_ADDR_EXP 90
15804: PUSH
15805: LD_INT 0
15807: ST_TO_ADDR
// sBazooka := false ;
15808: LD_ADDR_EXP 93
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// sMortar := false ;
15816: LD_ADDR_EXP 94
15820: PUSH
15821: LD_INT 0
15823: ST_TO_ADDR
// sRanger := false ;
15824: LD_ADDR_EXP 104
15828: PUSH
15829: LD_INT 0
15831: ST_TO_ADDR
// end ;
15832: LD_VAR 0 1
15836: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
15837: LD_INT 0
15839: PPUSH
15840: PPUSH
15841: PPUSH
15842: PPUSH
15843: PPUSH
// result := [ ] ;
15844: LD_ADDR_VAR 0 1
15848: PUSH
15849: EMPTY
15850: ST_TO_ADDR
// if campaign_id = 1 then
15851: LD_OWVAR 69
15855: PUSH
15856: LD_INT 1
15858: EQUAL
15859: IFFALSE 18797
// begin case mission_number of 1 :
15861: LD_OWVAR 70
15865: PUSH
15866: LD_INT 1
15868: DOUBLE
15869: EQUAL
15870: IFTRUE 15874
15872: GO 15938
15874: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
15875: LD_ADDR_VAR 0 1
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: LD_INT 4
15885: PUSH
15886: LD_INT 11
15888: PUSH
15889: LD_INT 12
15891: PUSH
15892: LD_INT 15
15894: PUSH
15895: LD_INT 16
15897: PUSH
15898: LD_INT 22
15900: PUSH
15901: LD_INT 23
15903: PUSH
15904: LD_INT 26
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 101
15920: PUSH
15921: LD_INT 102
15923: PUSH
15924: LD_INT 106
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: ST_TO_ADDR
15936: GO 18795
15938: LD_INT 2
15940: DOUBLE
15941: EQUAL
15942: IFTRUE 15946
15944: GO 16018
15946: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
15947: LD_ADDR_VAR 0 1
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: LD_INT 4
15957: PUSH
15958: LD_INT 11
15960: PUSH
15961: LD_INT 12
15963: PUSH
15964: LD_INT 15
15966: PUSH
15967: LD_INT 16
15969: PUSH
15970: LD_INT 22
15972: PUSH
15973: LD_INT 23
15975: PUSH
15976: LD_INT 26
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 101
15992: PUSH
15993: LD_INT 102
15995: PUSH
15996: LD_INT 105
15998: PUSH
15999: LD_INT 106
16001: PUSH
16002: LD_INT 108
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: ST_TO_ADDR
16016: GO 18795
16018: LD_INT 3
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16026
16024: GO 16102
16026: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16027: LD_ADDR_VAR 0 1
16031: PUSH
16032: LD_INT 2
16034: PUSH
16035: LD_INT 4
16037: PUSH
16038: LD_INT 5
16040: PUSH
16041: LD_INT 11
16043: PUSH
16044: LD_INT 12
16046: PUSH
16047: LD_INT 15
16049: PUSH
16050: LD_INT 16
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_INT 26
16058: PUSH
16059: LD_INT 36
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 101
16076: PUSH
16077: LD_INT 102
16079: PUSH
16080: LD_INT 105
16082: PUSH
16083: LD_INT 106
16085: PUSH
16086: LD_INT 108
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: ST_TO_ADDR
16100: GO 18795
16102: LD_INT 4
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16110
16108: GO 16194
16110: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16111: LD_ADDR_VAR 0 1
16115: PUSH
16116: LD_INT 2
16118: PUSH
16119: LD_INT 4
16121: PUSH
16122: LD_INT 5
16124: PUSH
16125: LD_INT 8
16127: PUSH
16128: LD_INT 11
16130: PUSH
16131: LD_INT 12
16133: PUSH
16134: LD_INT 15
16136: PUSH
16137: LD_INT 16
16139: PUSH
16140: LD_INT 22
16142: PUSH
16143: LD_INT 23
16145: PUSH
16146: LD_INT 26
16148: PUSH
16149: LD_INT 36
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: PUSH
16166: LD_INT 101
16168: PUSH
16169: LD_INT 102
16171: PUSH
16172: LD_INT 105
16174: PUSH
16175: LD_INT 106
16177: PUSH
16178: LD_INT 108
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: ST_TO_ADDR
16192: GO 18795
16194: LD_INT 5
16196: DOUBLE
16197: EQUAL
16198: IFTRUE 16202
16200: GO 16302
16202: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16203: LD_ADDR_VAR 0 1
16207: PUSH
16208: LD_INT 2
16210: PUSH
16211: LD_INT 4
16213: PUSH
16214: LD_INT 5
16216: PUSH
16217: LD_INT 6
16219: PUSH
16220: LD_INT 8
16222: PUSH
16223: LD_INT 11
16225: PUSH
16226: LD_INT 12
16228: PUSH
16229: LD_INT 15
16231: PUSH
16232: LD_INT 16
16234: PUSH
16235: LD_INT 22
16237: PUSH
16238: LD_INT 23
16240: PUSH
16241: LD_INT 25
16243: PUSH
16244: LD_INT 26
16246: PUSH
16247: LD_INT 36
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 101
16268: PUSH
16269: LD_INT 102
16271: PUSH
16272: LD_INT 105
16274: PUSH
16275: LD_INT 106
16277: PUSH
16278: LD_INT 108
16280: PUSH
16281: LD_INT 109
16283: PUSH
16284: LD_INT 112
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: ST_TO_ADDR
16300: GO 18795
16302: LD_INT 6
16304: DOUBLE
16305: EQUAL
16306: IFTRUE 16310
16308: GO 16430
16310: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16311: LD_ADDR_VAR 0 1
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 4
16321: PUSH
16322: LD_INT 5
16324: PUSH
16325: LD_INT 6
16327: PUSH
16328: LD_INT 8
16330: PUSH
16331: LD_INT 11
16333: PUSH
16334: LD_INT 12
16336: PUSH
16337: LD_INT 15
16339: PUSH
16340: LD_INT 16
16342: PUSH
16343: LD_INT 20
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 22
16351: PUSH
16352: LD_INT 23
16354: PUSH
16355: LD_INT 25
16357: PUSH
16358: LD_INT 26
16360: PUSH
16361: LD_INT 30
16363: PUSH
16364: LD_INT 31
16366: PUSH
16367: LD_INT 32
16369: PUSH
16370: LD_INT 36
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 101
16396: PUSH
16397: LD_INT 102
16399: PUSH
16400: LD_INT 105
16402: PUSH
16403: LD_INT 106
16405: PUSH
16406: LD_INT 108
16408: PUSH
16409: LD_INT 109
16411: PUSH
16412: LD_INT 112
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: ST_TO_ADDR
16428: GO 18795
16430: LD_INT 7
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16438
16436: GO 16538
16438: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16439: LD_ADDR_VAR 0 1
16443: PUSH
16444: LD_INT 2
16446: PUSH
16447: LD_INT 4
16449: PUSH
16450: LD_INT 5
16452: PUSH
16453: LD_INT 7
16455: PUSH
16456: LD_INT 11
16458: PUSH
16459: LD_INT 12
16461: PUSH
16462: LD_INT 15
16464: PUSH
16465: LD_INT 16
16467: PUSH
16468: LD_INT 20
16470: PUSH
16471: LD_INT 21
16473: PUSH
16474: LD_INT 22
16476: PUSH
16477: LD_INT 23
16479: PUSH
16480: LD_INT 25
16482: PUSH
16483: LD_INT 26
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 101
16504: PUSH
16505: LD_INT 102
16507: PUSH
16508: LD_INT 103
16510: PUSH
16511: LD_INT 105
16513: PUSH
16514: LD_INT 106
16516: PUSH
16517: LD_INT 108
16519: PUSH
16520: LD_INT 112
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: ST_TO_ADDR
16536: GO 18795
16538: LD_INT 8
16540: DOUBLE
16541: EQUAL
16542: IFTRUE 16546
16544: GO 16674
16546: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16547: LD_ADDR_VAR 0 1
16551: PUSH
16552: LD_INT 2
16554: PUSH
16555: LD_INT 4
16557: PUSH
16558: LD_INT 5
16560: PUSH
16561: LD_INT 6
16563: PUSH
16564: LD_INT 7
16566: PUSH
16567: LD_INT 8
16569: PUSH
16570: LD_INT 11
16572: PUSH
16573: LD_INT 12
16575: PUSH
16576: LD_INT 15
16578: PUSH
16579: LD_INT 16
16581: PUSH
16582: LD_INT 20
16584: PUSH
16585: LD_INT 21
16587: PUSH
16588: LD_INT 22
16590: PUSH
16591: LD_INT 23
16593: PUSH
16594: LD_INT 25
16596: PUSH
16597: LD_INT 26
16599: PUSH
16600: LD_INT 30
16602: PUSH
16603: LD_INT 31
16605: PUSH
16606: LD_INT 32
16608: PUSH
16609: LD_INT 36
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 101
16636: PUSH
16637: LD_INT 102
16639: PUSH
16640: LD_INT 103
16642: PUSH
16643: LD_INT 105
16645: PUSH
16646: LD_INT 106
16648: PUSH
16649: LD_INT 108
16651: PUSH
16652: LD_INT 109
16654: PUSH
16655: LD_INT 112
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: ST_TO_ADDR
16672: GO 18795
16674: LD_INT 9
16676: DOUBLE
16677: EQUAL
16678: IFTRUE 16682
16680: GO 16818
16682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16683: LD_ADDR_VAR 0 1
16687: PUSH
16688: LD_INT 2
16690: PUSH
16691: LD_INT 4
16693: PUSH
16694: LD_INT 5
16696: PUSH
16697: LD_INT 6
16699: PUSH
16700: LD_INT 7
16702: PUSH
16703: LD_INT 8
16705: PUSH
16706: LD_INT 11
16708: PUSH
16709: LD_INT 12
16711: PUSH
16712: LD_INT 15
16714: PUSH
16715: LD_INT 16
16717: PUSH
16718: LD_INT 20
16720: PUSH
16721: LD_INT 21
16723: PUSH
16724: LD_INT 22
16726: PUSH
16727: LD_INT 23
16729: PUSH
16730: LD_INT 25
16732: PUSH
16733: LD_INT 26
16735: PUSH
16736: LD_INT 28
16738: PUSH
16739: LD_INT 30
16741: PUSH
16742: LD_INT 31
16744: PUSH
16745: LD_INT 32
16747: PUSH
16748: LD_INT 36
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 101
16776: PUSH
16777: LD_INT 102
16779: PUSH
16780: LD_INT 103
16782: PUSH
16783: LD_INT 105
16785: PUSH
16786: LD_INT 106
16788: PUSH
16789: LD_INT 108
16791: PUSH
16792: LD_INT 109
16794: PUSH
16795: LD_INT 112
16797: PUSH
16798: LD_INT 114
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: ST_TO_ADDR
16816: GO 18795
16818: LD_INT 10
16820: DOUBLE
16821: EQUAL
16822: IFTRUE 16826
16824: GO 17010
16826: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
16827: LD_ADDR_VAR 0 1
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 4
16837: PUSH
16838: LD_INT 5
16840: PUSH
16841: LD_INT 6
16843: PUSH
16844: LD_INT 7
16846: PUSH
16847: LD_INT 8
16849: PUSH
16850: LD_INT 9
16852: PUSH
16853: LD_INT 10
16855: PUSH
16856: LD_INT 11
16858: PUSH
16859: LD_INT 12
16861: PUSH
16862: LD_INT 13
16864: PUSH
16865: LD_INT 14
16867: PUSH
16868: LD_INT 15
16870: PUSH
16871: LD_INT 16
16873: PUSH
16874: LD_INT 17
16876: PUSH
16877: LD_INT 18
16879: PUSH
16880: LD_INT 19
16882: PUSH
16883: LD_INT 20
16885: PUSH
16886: LD_INT 21
16888: PUSH
16889: LD_INT 22
16891: PUSH
16892: LD_INT 23
16894: PUSH
16895: LD_INT 24
16897: PUSH
16898: LD_INT 25
16900: PUSH
16901: LD_INT 26
16903: PUSH
16904: LD_INT 28
16906: PUSH
16907: LD_INT 30
16909: PUSH
16910: LD_INT 31
16912: PUSH
16913: LD_INT 32
16915: PUSH
16916: LD_INT 36
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 101
16952: PUSH
16953: LD_INT 102
16955: PUSH
16956: LD_INT 103
16958: PUSH
16959: LD_INT 104
16961: PUSH
16962: LD_INT 105
16964: PUSH
16965: LD_INT 106
16967: PUSH
16968: LD_INT 107
16970: PUSH
16971: LD_INT 108
16973: PUSH
16974: LD_INT 109
16976: PUSH
16977: LD_INT 110
16979: PUSH
16980: LD_INT 111
16982: PUSH
16983: LD_INT 112
16985: PUSH
16986: LD_INT 114
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: ST_TO_ADDR
17008: GO 18795
17010: LD_INT 11
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17210
17018: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17019: LD_ADDR_VAR 0 1
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: LD_INT 3
17029: PUSH
17030: LD_INT 4
17032: PUSH
17033: LD_INT 5
17035: PUSH
17036: LD_INT 6
17038: PUSH
17039: LD_INT 7
17041: PUSH
17042: LD_INT 8
17044: PUSH
17045: LD_INT 9
17047: PUSH
17048: LD_INT 10
17050: PUSH
17051: LD_INT 11
17053: PUSH
17054: LD_INT 12
17056: PUSH
17057: LD_INT 13
17059: PUSH
17060: LD_INT 14
17062: PUSH
17063: LD_INT 15
17065: PUSH
17066: LD_INT 16
17068: PUSH
17069: LD_INT 17
17071: PUSH
17072: LD_INT 18
17074: PUSH
17075: LD_INT 19
17077: PUSH
17078: LD_INT 20
17080: PUSH
17081: LD_INT 21
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_INT 23
17089: PUSH
17090: LD_INT 24
17092: PUSH
17093: LD_INT 25
17095: PUSH
17096: LD_INT 26
17098: PUSH
17099: LD_INT 28
17101: PUSH
17102: LD_INT 30
17104: PUSH
17105: LD_INT 31
17107: PUSH
17108: LD_INT 32
17110: PUSH
17111: LD_INT 34
17113: PUSH
17114: LD_INT 36
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 101
17152: PUSH
17153: LD_INT 102
17155: PUSH
17156: LD_INT 103
17158: PUSH
17159: LD_INT 104
17161: PUSH
17162: LD_INT 105
17164: PUSH
17165: LD_INT 106
17167: PUSH
17168: LD_INT 107
17170: PUSH
17171: LD_INT 108
17173: PUSH
17174: LD_INT 109
17176: PUSH
17177: LD_INT 110
17179: PUSH
17180: LD_INT 111
17182: PUSH
17183: LD_INT 112
17185: PUSH
17186: LD_INT 114
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: ST_TO_ADDR
17208: GO 18795
17210: LD_INT 12
17212: DOUBLE
17213: EQUAL
17214: IFTRUE 17218
17216: GO 17426
17218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17219: LD_ADDR_VAR 0 1
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: LD_INT 4
17235: PUSH
17236: LD_INT 5
17238: PUSH
17239: LD_INT 6
17241: PUSH
17242: LD_INT 7
17244: PUSH
17245: LD_INT 8
17247: PUSH
17248: LD_INT 9
17250: PUSH
17251: LD_INT 10
17253: PUSH
17254: LD_INT 11
17256: PUSH
17257: LD_INT 12
17259: PUSH
17260: LD_INT 13
17262: PUSH
17263: LD_INT 14
17265: PUSH
17266: LD_INT 15
17268: PUSH
17269: LD_INT 16
17271: PUSH
17272: LD_INT 17
17274: PUSH
17275: LD_INT 18
17277: PUSH
17278: LD_INT 19
17280: PUSH
17281: LD_INT 20
17283: PUSH
17284: LD_INT 21
17286: PUSH
17287: LD_INT 22
17289: PUSH
17290: LD_INT 23
17292: PUSH
17293: LD_INT 24
17295: PUSH
17296: LD_INT 25
17298: PUSH
17299: LD_INT 26
17301: PUSH
17302: LD_INT 27
17304: PUSH
17305: LD_INT 28
17307: PUSH
17308: LD_INT 30
17310: PUSH
17311: LD_INT 31
17313: PUSH
17314: LD_INT 32
17316: PUSH
17317: LD_INT 33
17319: PUSH
17320: LD_INT 34
17322: PUSH
17323: LD_INT 36
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 101
17364: PUSH
17365: LD_INT 102
17367: PUSH
17368: LD_INT 103
17370: PUSH
17371: LD_INT 104
17373: PUSH
17374: LD_INT 105
17376: PUSH
17377: LD_INT 106
17379: PUSH
17380: LD_INT 107
17382: PUSH
17383: LD_INT 108
17385: PUSH
17386: LD_INT 109
17388: PUSH
17389: LD_INT 110
17391: PUSH
17392: LD_INT 111
17394: PUSH
17395: LD_INT 112
17397: PUSH
17398: LD_INT 113
17400: PUSH
17401: LD_INT 114
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: ST_TO_ADDR
17424: GO 18795
17426: LD_INT 13
17428: DOUBLE
17429: EQUAL
17430: IFTRUE 17434
17432: GO 17630
17434: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17435: LD_ADDR_VAR 0 1
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: LD_INT 2
17445: PUSH
17446: LD_INT 3
17448: PUSH
17449: LD_INT 4
17451: PUSH
17452: LD_INT 5
17454: PUSH
17455: LD_INT 8
17457: PUSH
17458: LD_INT 9
17460: PUSH
17461: LD_INT 10
17463: PUSH
17464: LD_INT 11
17466: PUSH
17467: LD_INT 12
17469: PUSH
17470: LD_INT 14
17472: PUSH
17473: LD_INT 15
17475: PUSH
17476: LD_INT 16
17478: PUSH
17479: LD_INT 17
17481: PUSH
17482: LD_INT 18
17484: PUSH
17485: LD_INT 19
17487: PUSH
17488: LD_INT 20
17490: PUSH
17491: LD_INT 21
17493: PUSH
17494: LD_INT 22
17496: PUSH
17497: LD_INT 23
17499: PUSH
17500: LD_INT 24
17502: PUSH
17503: LD_INT 25
17505: PUSH
17506: LD_INT 26
17508: PUSH
17509: LD_INT 27
17511: PUSH
17512: LD_INT 28
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: LD_INT 31
17520: PUSH
17521: LD_INT 32
17523: PUSH
17524: LD_INT 33
17526: PUSH
17527: LD_INT 34
17529: PUSH
17530: LD_INT 36
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 101
17568: PUSH
17569: LD_INT 102
17571: PUSH
17572: LD_INT 103
17574: PUSH
17575: LD_INT 104
17577: PUSH
17578: LD_INT 105
17580: PUSH
17581: LD_INT 106
17583: PUSH
17584: LD_INT 107
17586: PUSH
17587: LD_INT 108
17589: PUSH
17590: LD_INT 109
17592: PUSH
17593: LD_INT 110
17595: PUSH
17596: LD_INT 111
17598: PUSH
17599: LD_INT 112
17601: PUSH
17602: LD_INT 113
17604: PUSH
17605: LD_INT 114
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: ST_TO_ADDR
17628: GO 18795
17630: LD_INT 14
17632: DOUBLE
17633: EQUAL
17634: IFTRUE 17638
17636: GO 17850
17638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17639: LD_ADDR_VAR 0 1
17643: PUSH
17644: LD_INT 1
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: LD_INT 3
17652: PUSH
17653: LD_INT 4
17655: PUSH
17656: LD_INT 5
17658: PUSH
17659: LD_INT 6
17661: PUSH
17662: LD_INT 7
17664: PUSH
17665: LD_INT 8
17667: PUSH
17668: LD_INT 9
17670: PUSH
17671: LD_INT 10
17673: PUSH
17674: LD_INT 11
17676: PUSH
17677: LD_INT 12
17679: PUSH
17680: LD_INT 13
17682: PUSH
17683: LD_INT 14
17685: PUSH
17686: LD_INT 15
17688: PUSH
17689: LD_INT 16
17691: PUSH
17692: LD_INT 17
17694: PUSH
17695: LD_INT 18
17697: PUSH
17698: LD_INT 19
17700: PUSH
17701: LD_INT 20
17703: PUSH
17704: LD_INT 21
17706: PUSH
17707: LD_INT 22
17709: PUSH
17710: LD_INT 23
17712: PUSH
17713: LD_INT 24
17715: PUSH
17716: LD_INT 25
17718: PUSH
17719: LD_INT 26
17721: PUSH
17722: LD_INT 27
17724: PUSH
17725: LD_INT 28
17727: PUSH
17728: LD_INT 29
17730: PUSH
17731: LD_INT 30
17733: PUSH
17734: LD_INT 31
17736: PUSH
17737: LD_INT 32
17739: PUSH
17740: LD_INT 33
17742: PUSH
17743: LD_INT 34
17745: PUSH
17746: LD_INT 36
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 101
17788: PUSH
17789: LD_INT 102
17791: PUSH
17792: LD_INT 103
17794: PUSH
17795: LD_INT 104
17797: PUSH
17798: LD_INT 105
17800: PUSH
17801: LD_INT 106
17803: PUSH
17804: LD_INT 107
17806: PUSH
17807: LD_INT 108
17809: PUSH
17810: LD_INT 109
17812: PUSH
17813: LD_INT 110
17815: PUSH
17816: LD_INT 111
17818: PUSH
17819: LD_INT 112
17821: PUSH
17822: LD_INT 113
17824: PUSH
17825: LD_INT 114
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: ST_TO_ADDR
17848: GO 18795
17850: LD_INT 15
17852: DOUBLE
17853: EQUAL
17854: IFTRUE 17858
17856: GO 18070
17858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
17859: LD_ADDR_VAR 0 1
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: LD_INT 2
17869: PUSH
17870: LD_INT 3
17872: PUSH
17873: LD_INT 4
17875: PUSH
17876: LD_INT 5
17878: PUSH
17879: LD_INT 6
17881: PUSH
17882: LD_INT 7
17884: PUSH
17885: LD_INT 8
17887: PUSH
17888: LD_INT 9
17890: PUSH
17891: LD_INT 10
17893: PUSH
17894: LD_INT 11
17896: PUSH
17897: LD_INT 12
17899: PUSH
17900: LD_INT 13
17902: PUSH
17903: LD_INT 14
17905: PUSH
17906: LD_INT 15
17908: PUSH
17909: LD_INT 16
17911: PUSH
17912: LD_INT 17
17914: PUSH
17915: LD_INT 18
17917: PUSH
17918: LD_INT 19
17920: PUSH
17921: LD_INT 20
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: LD_INT 22
17929: PUSH
17930: LD_INT 23
17932: PUSH
17933: LD_INT 24
17935: PUSH
17936: LD_INT 25
17938: PUSH
17939: LD_INT 26
17941: PUSH
17942: LD_INT 27
17944: PUSH
17945: LD_INT 28
17947: PUSH
17948: LD_INT 29
17950: PUSH
17951: LD_INT 30
17953: PUSH
17954: LD_INT 31
17956: PUSH
17957: LD_INT 32
17959: PUSH
17960: LD_INT 33
17962: PUSH
17963: LD_INT 34
17965: PUSH
17966: LD_INT 36
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 101
18008: PUSH
18009: LD_INT 102
18011: PUSH
18012: LD_INT 103
18014: PUSH
18015: LD_INT 104
18017: PUSH
18018: LD_INT 105
18020: PUSH
18021: LD_INT 106
18023: PUSH
18024: LD_INT 107
18026: PUSH
18027: LD_INT 108
18029: PUSH
18030: LD_INT 109
18032: PUSH
18033: LD_INT 110
18035: PUSH
18036: LD_INT 111
18038: PUSH
18039: LD_INT 112
18041: PUSH
18042: LD_INT 113
18044: PUSH
18045: LD_INT 114
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: ST_TO_ADDR
18068: GO 18795
18070: LD_INT 16
18072: DOUBLE
18073: EQUAL
18074: IFTRUE 18078
18076: GO 18202
18078: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18079: LD_ADDR_VAR 0 1
18083: PUSH
18084: LD_INT 2
18086: PUSH
18087: LD_INT 4
18089: PUSH
18090: LD_INT 5
18092: PUSH
18093: LD_INT 7
18095: PUSH
18096: LD_INT 11
18098: PUSH
18099: LD_INT 12
18101: PUSH
18102: LD_INT 15
18104: PUSH
18105: LD_INT 16
18107: PUSH
18108: LD_INT 20
18110: PUSH
18111: LD_INT 21
18113: PUSH
18114: LD_INT 22
18116: PUSH
18117: LD_INT 23
18119: PUSH
18120: LD_INT 25
18122: PUSH
18123: LD_INT 26
18125: PUSH
18126: LD_INT 30
18128: PUSH
18129: LD_INT 31
18131: PUSH
18132: LD_INT 32
18134: PUSH
18135: LD_INT 33
18137: PUSH
18138: LD_INT 34
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 101
18164: PUSH
18165: LD_INT 102
18167: PUSH
18168: LD_INT 103
18170: PUSH
18171: LD_INT 106
18173: PUSH
18174: LD_INT 108
18176: PUSH
18177: LD_INT 112
18179: PUSH
18180: LD_INT 113
18182: PUSH
18183: LD_INT 114
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: ST_TO_ADDR
18200: GO 18795
18202: LD_INT 17
18204: DOUBLE
18205: EQUAL
18206: IFTRUE 18210
18208: GO 18422
18210: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18211: LD_ADDR_VAR 0 1
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: LD_INT 2
18221: PUSH
18222: LD_INT 3
18224: PUSH
18225: LD_INT 4
18227: PUSH
18228: LD_INT 5
18230: PUSH
18231: LD_INT 6
18233: PUSH
18234: LD_INT 7
18236: PUSH
18237: LD_INT 8
18239: PUSH
18240: LD_INT 9
18242: PUSH
18243: LD_INT 10
18245: PUSH
18246: LD_INT 11
18248: PUSH
18249: LD_INT 12
18251: PUSH
18252: LD_INT 13
18254: PUSH
18255: LD_INT 14
18257: PUSH
18258: LD_INT 15
18260: PUSH
18261: LD_INT 16
18263: PUSH
18264: LD_INT 17
18266: PUSH
18267: LD_INT 18
18269: PUSH
18270: LD_INT 19
18272: PUSH
18273: LD_INT 20
18275: PUSH
18276: LD_INT 21
18278: PUSH
18279: LD_INT 22
18281: PUSH
18282: LD_INT 23
18284: PUSH
18285: LD_INT 24
18287: PUSH
18288: LD_INT 25
18290: PUSH
18291: LD_INT 26
18293: PUSH
18294: LD_INT 27
18296: PUSH
18297: LD_INT 28
18299: PUSH
18300: LD_INT 29
18302: PUSH
18303: LD_INT 30
18305: PUSH
18306: LD_INT 31
18308: PUSH
18309: LD_INT 32
18311: PUSH
18312: LD_INT 33
18314: PUSH
18315: LD_INT 34
18317: PUSH
18318: LD_INT 36
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 101
18360: PUSH
18361: LD_INT 102
18363: PUSH
18364: LD_INT 103
18366: PUSH
18367: LD_INT 104
18369: PUSH
18370: LD_INT 105
18372: PUSH
18373: LD_INT 106
18375: PUSH
18376: LD_INT 107
18378: PUSH
18379: LD_INT 108
18381: PUSH
18382: LD_INT 109
18384: PUSH
18385: LD_INT 110
18387: PUSH
18388: LD_INT 111
18390: PUSH
18391: LD_INT 112
18393: PUSH
18394: LD_INT 113
18396: PUSH
18397: LD_INT 114
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: ST_TO_ADDR
18420: GO 18795
18422: LD_INT 18
18424: DOUBLE
18425: EQUAL
18426: IFTRUE 18430
18428: GO 18566
18430: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18431: LD_ADDR_VAR 0 1
18435: PUSH
18436: LD_INT 2
18438: PUSH
18439: LD_INT 4
18441: PUSH
18442: LD_INT 5
18444: PUSH
18445: LD_INT 7
18447: PUSH
18448: LD_INT 11
18450: PUSH
18451: LD_INT 12
18453: PUSH
18454: LD_INT 15
18456: PUSH
18457: LD_INT 16
18459: PUSH
18460: LD_INT 20
18462: PUSH
18463: LD_INT 21
18465: PUSH
18466: LD_INT 22
18468: PUSH
18469: LD_INT 23
18471: PUSH
18472: LD_INT 25
18474: PUSH
18475: LD_INT 26
18477: PUSH
18478: LD_INT 30
18480: PUSH
18481: LD_INT 31
18483: PUSH
18484: LD_INT 32
18486: PUSH
18487: LD_INT 33
18489: PUSH
18490: LD_INT 34
18492: PUSH
18493: LD_INT 35
18495: PUSH
18496: LD_INT 36
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 101
18524: PUSH
18525: LD_INT 102
18527: PUSH
18528: LD_INT 103
18530: PUSH
18531: LD_INT 106
18533: PUSH
18534: LD_INT 108
18536: PUSH
18537: LD_INT 112
18539: PUSH
18540: LD_INT 113
18542: PUSH
18543: LD_INT 114
18545: PUSH
18546: LD_INT 115
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: ST_TO_ADDR
18564: GO 18795
18566: LD_INT 19
18568: DOUBLE
18569: EQUAL
18570: IFTRUE 18574
18572: GO 18794
18574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18575: LD_ADDR_VAR 0 1
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: LD_INT 4
18591: PUSH
18592: LD_INT 5
18594: PUSH
18595: LD_INT 6
18597: PUSH
18598: LD_INT 7
18600: PUSH
18601: LD_INT 8
18603: PUSH
18604: LD_INT 9
18606: PUSH
18607: LD_INT 10
18609: PUSH
18610: LD_INT 11
18612: PUSH
18613: LD_INT 12
18615: PUSH
18616: LD_INT 13
18618: PUSH
18619: LD_INT 14
18621: PUSH
18622: LD_INT 15
18624: PUSH
18625: LD_INT 16
18627: PUSH
18628: LD_INT 17
18630: PUSH
18631: LD_INT 18
18633: PUSH
18634: LD_INT 19
18636: PUSH
18637: LD_INT 20
18639: PUSH
18640: LD_INT 21
18642: PUSH
18643: LD_INT 22
18645: PUSH
18646: LD_INT 23
18648: PUSH
18649: LD_INT 24
18651: PUSH
18652: LD_INT 25
18654: PUSH
18655: LD_INT 26
18657: PUSH
18658: LD_INT 27
18660: PUSH
18661: LD_INT 28
18663: PUSH
18664: LD_INT 29
18666: PUSH
18667: LD_INT 30
18669: PUSH
18670: LD_INT 31
18672: PUSH
18673: LD_INT 32
18675: PUSH
18676: LD_INT 33
18678: PUSH
18679: LD_INT 34
18681: PUSH
18682: LD_INT 35
18684: PUSH
18685: LD_INT 36
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 101
18728: PUSH
18729: LD_INT 102
18731: PUSH
18732: LD_INT 103
18734: PUSH
18735: LD_INT 104
18737: PUSH
18738: LD_INT 105
18740: PUSH
18741: LD_INT 106
18743: PUSH
18744: LD_INT 107
18746: PUSH
18747: LD_INT 108
18749: PUSH
18750: LD_INT 109
18752: PUSH
18753: LD_INT 110
18755: PUSH
18756: LD_INT 111
18758: PUSH
18759: LD_INT 112
18761: PUSH
18762: LD_INT 113
18764: PUSH
18765: LD_INT 114
18767: PUSH
18768: LD_INT 115
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: ST_TO_ADDR
18792: GO 18795
18794: POP
// end else
18795: GO 18832
// if campaign_id = 5 then
18797: LD_OWVAR 69
18801: PUSH
18802: LD_INT 5
18804: EQUAL
18805: IFFALSE 18832
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
18807: LD_ADDR_VAR 0 1
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 100
18824: PUSH
18825: EMPTY
18826: LIST
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: ST_TO_ADDR
// end ; if result then
18832: LD_VAR 0 1
18836: IFFALSE 19125
// begin normal :=  ;
18838: LD_ADDR_VAR 0 3
18842: PUSH
18843: LD_STRING 
18845: ST_TO_ADDR
// hardcore :=  ;
18846: LD_ADDR_VAR 0 4
18850: PUSH
18851: LD_STRING 
18853: ST_TO_ADDR
// for i = 1 to normalCounter do
18854: LD_ADDR_VAR 0 5
18858: PUSH
18859: DOUBLE
18860: LD_INT 1
18862: DEC
18863: ST_TO_ADDR
18864: LD_EXP 52
18868: PUSH
18869: FOR_TO
18870: IFFALSE 18971
// begin tmp := 0 ;
18872: LD_ADDR_VAR 0 2
18876: PUSH
18877: LD_STRING 0
18879: ST_TO_ADDR
// if result [ 1 ] then
18880: LD_VAR 0 1
18884: PUSH
18885: LD_INT 1
18887: ARRAY
18888: IFFALSE 18953
// if result [ 1 ] [ 1 ] = i then
18890: LD_VAR 0 1
18894: PUSH
18895: LD_INT 1
18897: ARRAY
18898: PUSH
18899: LD_INT 1
18901: ARRAY
18902: PUSH
18903: LD_VAR 0 5
18907: EQUAL
18908: IFFALSE 18953
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18910: LD_ADDR_VAR 0 1
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: LD_INT 1
18922: PPUSH
18923: LD_VAR 0 1
18927: PUSH
18928: LD_INT 1
18930: ARRAY
18931: PPUSH
18932: LD_INT 1
18934: PPUSH
18935: CALL_OW 3
18939: PPUSH
18940: CALL_OW 1
18944: ST_TO_ADDR
// tmp := 1 ;
18945: LD_ADDR_VAR 0 2
18949: PUSH
18950: LD_STRING 1
18952: ST_TO_ADDR
// end ; normal := normal & tmp ;
18953: LD_ADDR_VAR 0 3
18957: PUSH
18958: LD_VAR 0 3
18962: PUSH
18963: LD_VAR 0 2
18967: STR
18968: ST_TO_ADDR
// end ;
18969: GO 18869
18971: POP
18972: POP
// for i = 1 to hardcoreCounter do
18973: LD_ADDR_VAR 0 5
18977: PUSH
18978: DOUBLE
18979: LD_INT 1
18981: DEC
18982: ST_TO_ADDR
18983: LD_EXP 53
18987: PUSH
18988: FOR_TO
18989: IFFALSE 19094
// begin tmp := 0 ;
18991: LD_ADDR_VAR 0 2
18995: PUSH
18996: LD_STRING 0
18998: ST_TO_ADDR
// if result [ 2 ] then
18999: LD_VAR 0 1
19003: PUSH
19004: LD_INT 2
19006: ARRAY
19007: IFFALSE 19076
// if result [ 2 ] [ 1 ] = 100 + i then
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 2
19016: ARRAY
19017: PUSH
19018: LD_INT 1
19020: ARRAY
19021: PUSH
19022: LD_INT 100
19024: PUSH
19025: LD_VAR 0 5
19029: PLUS
19030: EQUAL
19031: IFFALSE 19076
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19033: LD_ADDR_VAR 0 1
19037: PUSH
19038: LD_VAR 0 1
19042: PPUSH
19043: LD_INT 2
19045: PPUSH
19046: LD_VAR 0 1
19050: PUSH
19051: LD_INT 2
19053: ARRAY
19054: PPUSH
19055: LD_INT 1
19057: PPUSH
19058: CALL_OW 3
19062: PPUSH
19063: CALL_OW 1
19067: ST_TO_ADDR
// tmp := 1 ;
19068: LD_ADDR_VAR 0 2
19072: PUSH
19073: LD_STRING 1
19075: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19076: LD_ADDR_VAR 0 4
19080: PUSH
19081: LD_VAR 0 4
19085: PUSH
19086: LD_VAR 0 2
19090: STR
19091: ST_TO_ADDR
// end ;
19092: GO 18988
19094: POP
19095: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19096: LD_STRING getStreamItemsFromMission("
19098: PUSH
19099: LD_VAR 0 3
19103: STR
19104: PUSH
19105: LD_STRING ","
19107: STR
19108: PUSH
19109: LD_VAR 0 4
19113: STR
19114: PUSH
19115: LD_STRING ")
19117: STR
19118: PPUSH
19119: CALL_OW 559
// end else
19123: GO 19132
// ToLua ( getStreamItemsFromMission("","") ) ;
19125: LD_STRING getStreamItemsFromMission("","")
19127: PPUSH
19128: CALL_OW 559
// end ;
19132: LD_VAR 0 1
19136: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19137: LD_VAR 0 2
19141: PUSH
19142: LD_INT 100
19144: EQUAL
19145: IFFALSE 20094
// begin if not StreamModeActive then
19147: LD_EXP 51
19151: NOT
19152: IFFALSE 19162
// StreamModeActive := true ;
19154: LD_ADDR_EXP 51
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// if p3 = 0 then
19162: LD_VAR 0 3
19166: PUSH
19167: LD_INT 0
19169: EQUAL
19170: IFFALSE 19176
// InitStreamMode ;
19172: CALL 15397 0 0
// if p3 = 1 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 1
19183: EQUAL
19184: IFFALSE 19194
// sRocket := true ;
19186: LD_ADDR_EXP 56
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 2 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 2
19201: EQUAL
19202: IFFALSE 19212
// sSpeed := true ;
19204: LD_ADDR_EXP 55
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 3 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 3
19219: EQUAL
19220: IFFALSE 19230
// sEngine := true ;
19222: LD_ADDR_EXP 57
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 4 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 4
19237: EQUAL
19238: IFFALSE 19248
// sSpec := true ;
19240: LD_ADDR_EXP 54
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 5 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 5
19255: EQUAL
19256: IFFALSE 19266
// sLevel := true ;
19258: LD_ADDR_EXP 58
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 6 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 6
19273: EQUAL
19274: IFFALSE 19284
// sArmoury := true ;
19276: LD_ADDR_EXP 59
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 7 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 7
19291: EQUAL
19292: IFFALSE 19302
// sRadar := true ;
19294: LD_ADDR_EXP 60
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 8 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 8
19309: EQUAL
19310: IFFALSE 19320
// sBunker := true ;
19312: LD_ADDR_EXP 61
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 9 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 9
19327: EQUAL
19328: IFFALSE 19338
// sHack := true ;
19330: LD_ADDR_EXP 62
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 10 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 10
19345: EQUAL
19346: IFFALSE 19356
// sFire := true ;
19348: LD_ADDR_EXP 63
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 11 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 11
19363: EQUAL
19364: IFFALSE 19374
// sRefresh := true ;
19366: LD_ADDR_EXP 64
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 12 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 12
19381: EQUAL
19382: IFFALSE 19392
// sExp := true ;
19384: LD_ADDR_EXP 65
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 13 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 13
19399: EQUAL
19400: IFFALSE 19410
// sDepot := true ;
19402: LD_ADDR_EXP 66
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 14 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 14
19417: EQUAL
19418: IFFALSE 19428
// sFlag := true ;
19420: LD_ADDR_EXP 67
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 15 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 15
19435: EQUAL
19436: IFFALSE 19446
// sKamikadze := true ;
19438: LD_ADDR_EXP 75
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 16 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 16
19453: EQUAL
19454: IFFALSE 19464
// sTroll := true ;
19456: LD_ADDR_EXP 76
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 17 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 17
19471: EQUAL
19472: IFFALSE 19482
// sSlow := true ;
19474: LD_ADDR_EXP 77
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 18 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 18
19489: EQUAL
19490: IFFALSE 19500
// sLack := true ;
19492: LD_ADDR_EXP 78
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 19 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 19
19507: EQUAL
19508: IFFALSE 19518
// sTank := true ;
19510: LD_ADDR_EXP 80
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 20 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 20
19525: EQUAL
19526: IFFALSE 19536
// sRemote := true ;
19528: LD_ADDR_EXP 81
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// if p3 = 21 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 21
19543: EQUAL
19544: IFFALSE 19554
// sPowell := true ;
19546: LD_ADDR_EXP 82
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// if p3 = 22 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 22
19561: EQUAL
19562: IFFALSE 19572
// sTeleport := true ;
19564: LD_ADDR_EXP 85
19568: PUSH
19569: LD_INT 1
19571: ST_TO_ADDR
// if p3 = 23 then
19572: LD_VAR 0 3
19576: PUSH
19577: LD_INT 23
19579: EQUAL
19580: IFFALSE 19590
// sOilTower := true ;
19582: LD_ADDR_EXP 87
19586: PUSH
19587: LD_INT 1
19589: ST_TO_ADDR
// if p3 = 24 then
19590: LD_VAR 0 3
19594: PUSH
19595: LD_INT 24
19597: EQUAL
19598: IFFALSE 19608
// sShovel := true ;
19600: LD_ADDR_EXP 88
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
// if p3 = 25 then
19608: LD_VAR 0 3
19612: PUSH
19613: LD_INT 25
19615: EQUAL
19616: IFFALSE 19626
// sSheik := true ;
19618: LD_ADDR_EXP 89
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 26 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 26
19633: EQUAL
19634: IFFALSE 19644
// sEarthquake := true ;
19636: LD_ADDR_EXP 91
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// if p3 = 27 then
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 27
19651: EQUAL
19652: IFFALSE 19662
// sAI := true ;
19654: LD_ADDR_EXP 92
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if p3 = 28 then
19662: LD_VAR 0 3
19666: PUSH
19667: LD_INT 28
19669: EQUAL
19670: IFFALSE 19680
// sCargo := true ;
19672: LD_ADDR_EXP 95
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// if p3 = 29 then
19680: LD_VAR 0 3
19684: PUSH
19685: LD_INT 29
19687: EQUAL
19688: IFFALSE 19698
// sDLaser := true ;
19690: LD_ADDR_EXP 96
19694: PUSH
19695: LD_INT 1
19697: ST_TO_ADDR
// if p3 = 30 then
19698: LD_VAR 0 3
19702: PUSH
19703: LD_INT 30
19705: EQUAL
19706: IFFALSE 19716
// sExchange := true ;
19708: LD_ADDR_EXP 97
19712: PUSH
19713: LD_INT 1
19715: ST_TO_ADDR
// if p3 = 31 then
19716: LD_VAR 0 3
19720: PUSH
19721: LD_INT 31
19723: EQUAL
19724: IFFALSE 19734
// sFac := true ;
19726: LD_ADDR_EXP 98
19730: PUSH
19731: LD_INT 1
19733: ST_TO_ADDR
// if p3 = 32 then
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 32
19741: EQUAL
19742: IFFALSE 19752
// sPower := true ;
19744: LD_ADDR_EXP 99
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// if p3 = 33 then
19752: LD_VAR 0 3
19756: PUSH
19757: LD_INT 33
19759: EQUAL
19760: IFFALSE 19770
// sRandom := true ;
19762: LD_ADDR_EXP 100
19766: PUSH
19767: LD_INT 1
19769: ST_TO_ADDR
// if p3 = 34 then
19770: LD_VAR 0 3
19774: PUSH
19775: LD_INT 34
19777: EQUAL
19778: IFFALSE 19788
// sShield := true ;
19780: LD_ADDR_EXP 101
19784: PUSH
19785: LD_INT 1
19787: ST_TO_ADDR
// if p3 = 35 then
19788: LD_VAR 0 3
19792: PUSH
19793: LD_INT 35
19795: EQUAL
19796: IFFALSE 19806
// sTime := true ;
19798: LD_ADDR_EXP 102
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
// if p3 = 36 then
19806: LD_VAR 0 3
19810: PUSH
19811: LD_INT 36
19813: EQUAL
19814: IFFALSE 19824
// sTools := true ;
19816: LD_ADDR_EXP 103
19820: PUSH
19821: LD_INT 1
19823: ST_TO_ADDR
// if p3 = 101 then
19824: LD_VAR 0 3
19828: PUSH
19829: LD_INT 101
19831: EQUAL
19832: IFFALSE 19842
// sSold := true ;
19834: LD_ADDR_EXP 68
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// if p3 = 102 then
19842: LD_VAR 0 3
19846: PUSH
19847: LD_INT 102
19849: EQUAL
19850: IFFALSE 19860
// sDiff := true ;
19852: LD_ADDR_EXP 69
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// if p3 = 103 then
19860: LD_VAR 0 3
19864: PUSH
19865: LD_INT 103
19867: EQUAL
19868: IFFALSE 19878
// sFog := true ;
19870: LD_ADDR_EXP 72
19874: PUSH
19875: LD_INT 1
19877: ST_TO_ADDR
// if p3 = 104 then
19878: LD_VAR 0 3
19882: PUSH
19883: LD_INT 104
19885: EQUAL
19886: IFFALSE 19896
// sReset := true ;
19888: LD_ADDR_EXP 73
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 105 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 105
19903: EQUAL
19904: IFFALSE 19914
// sSun := true ;
19906: LD_ADDR_EXP 74
19910: PUSH
19911: LD_INT 1
19913: ST_TO_ADDR
// if p3 = 106 then
19914: LD_VAR 0 3
19918: PUSH
19919: LD_INT 106
19921: EQUAL
19922: IFFALSE 19932
// sTiger := true ;
19924: LD_ADDR_EXP 70
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// if p3 = 107 then
19932: LD_VAR 0 3
19936: PUSH
19937: LD_INT 107
19939: EQUAL
19940: IFFALSE 19950
// sBomb := true ;
19942: LD_ADDR_EXP 71
19946: PUSH
19947: LD_INT 1
19949: ST_TO_ADDR
// if p3 = 108 then
19950: LD_VAR 0 3
19954: PUSH
19955: LD_INT 108
19957: EQUAL
19958: IFFALSE 19968
// sWound := true ;
19960: LD_ADDR_EXP 79
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// if p3 = 109 then
19968: LD_VAR 0 3
19972: PUSH
19973: LD_INT 109
19975: EQUAL
19976: IFFALSE 19986
// sBetray := true ;
19978: LD_ADDR_EXP 83
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// if p3 = 110 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 110
19993: EQUAL
19994: IFFALSE 20004
// sContamin := true ;
19996: LD_ADDR_EXP 84
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// if p3 = 111 then
20004: LD_VAR 0 3
20008: PUSH
20009: LD_INT 111
20011: EQUAL
20012: IFFALSE 20022
// sOil := true ;
20014: LD_ADDR_EXP 86
20018: PUSH
20019: LD_INT 1
20021: ST_TO_ADDR
// if p3 = 112 then
20022: LD_VAR 0 3
20026: PUSH
20027: LD_INT 112
20029: EQUAL
20030: IFFALSE 20040
// sStu := true ;
20032: LD_ADDR_EXP 90
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// if p3 = 113 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 113
20047: EQUAL
20048: IFFALSE 20058
// sBazooka := true ;
20050: LD_ADDR_EXP 93
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// if p3 = 114 then
20058: LD_VAR 0 3
20062: PUSH
20063: LD_INT 114
20065: EQUAL
20066: IFFALSE 20076
// sMortar := true ;
20068: LD_ADDR_EXP 94
20072: PUSH
20073: LD_INT 1
20075: ST_TO_ADDR
// if p3 = 115 then
20076: LD_VAR 0 3
20080: PUSH
20081: LD_INT 115
20083: EQUAL
20084: IFFALSE 20094
// sRanger := true ;
20086: LD_ADDR_EXP 104
20090: PUSH
20091: LD_INT 1
20093: ST_TO_ADDR
// end ; end ;
20094: PPOPN 6
20096: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20097: LD_EXP 51
20101: PUSH
20102: LD_EXP 56
20106: AND
20107: IFFALSE 20231
20109: GO 20111
20111: DISABLE
20112: LD_INT 0
20114: PPUSH
20115: PPUSH
// begin enable ;
20116: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20117: LD_ADDR_VAR 0 2
20121: PUSH
20122: LD_INT 22
20124: PUSH
20125: LD_OWVAR 2
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: LD_INT 34
20139: PUSH
20140: LD_INT 7
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 34
20149: PUSH
20150: LD_INT 45
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 34
20159: PUSH
20160: LD_INT 28
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 34
20169: PUSH
20170: LD_INT 47
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PPUSH
20188: CALL_OW 69
20192: ST_TO_ADDR
// if not tmp then
20193: LD_VAR 0 2
20197: NOT
20198: IFFALSE 20202
// exit ;
20200: GO 20231
// for i in tmp do
20202: LD_ADDR_VAR 0 1
20206: PUSH
20207: LD_VAR 0 2
20211: PUSH
20212: FOR_IN
20213: IFFALSE 20229
// begin SetLives ( i , 0 ) ;
20215: LD_VAR 0 1
20219: PPUSH
20220: LD_INT 0
20222: PPUSH
20223: CALL_OW 234
// end ;
20227: GO 20212
20229: POP
20230: POP
// end ;
20231: PPOPN 2
20233: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20234: LD_EXP 51
20238: PUSH
20239: LD_EXP 57
20243: AND
20244: IFFALSE 20328
20246: GO 20248
20248: DISABLE
20249: LD_INT 0
20251: PPUSH
20252: PPUSH
// begin enable ;
20253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20254: LD_ADDR_VAR 0 2
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_OWVAR 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 32
20273: PUSH
20274: LD_INT 3
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PPUSH
20285: CALL_OW 69
20289: ST_TO_ADDR
// if not tmp then
20290: LD_VAR 0 2
20294: NOT
20295: IFFALSE 20299
// exit ;
20297: GO 20328
// for i in tmp do
20299: LD_ADDR_VAR 0 1
20303: PUSH
20304: LD_VAR 0 2
20308: PUSH
20309: FOR_IN
20310: IFFALSE 20326
// begin SetLives ( i , 0 ) ;
20312: LD_VAR 0 1
20316: PPUSH
20317: LD_INT 0
20319: PPUSH
20320: CALL_OW 234
// end ;
20324: GO 20309
20326: POP
20327: POP
// end ;
20328: PPOPN 2
20330: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20331: LD_EXP 51
20335: PUSH
20336: LD_EXP 54
20340: AND
20341: IFFALSE 20434
20343: GO 20345
20345: DISABLE
20346: LD_INT 0
20348: PPUSH
// begin enable ;
20349: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20350: LD_ADDR_VAR 0 1
20354: PUSH
20355: LD_INT 22
20357: PUSH
20358: LD_OWVAR 2
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 2
20369: PUSH
20370: LD_INT 25
20372: PUSH
20373: LD_INT 5
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 25
20382: PUSH
20383: LD_INT 9
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 25
20392: PUSH
20393: LD_INT 8
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PPUSH
20410: CALL_OW 69
20414: PUSH
20415: FOR_IN
20416: IFFALSE 20432
// begin SetClass ( i , 1 ) ;
20418: LD_VAR 0 1
20422: PPUSH
20423: LD_INT 1
20425: PPUSH
20426: CALL_OW 336
// end ;
20430: GO 20415
20432: POP
20433: POP
// end ;
20434: PPOPN 1
20436: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20437: LD_EXP 51
20441: PUSH
20442: LD_EXP 55
20446: AND
20447: PUSH
20448: LD_OWVAR 65
20452: PUSH
20453: LD_INT 7
20455: LESS
20456: AND
20457: IFFALSE 20471
20459: GO 20461
20461: DISABLE
// begin enable ;
20462: ENABLE
// game_speed := 7 ;
20463: LD_ADDR_OWVAR 65
20467: PUSH
20468: LD_INT 7
20470: ST_TO_ADDR
// end ;
20471: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20472: LD_EXP 51
20476: PUSH
20477: LD_EXP 58
20481: AND
20482: IFFALSE 20684
20484: GO 20486
20486: DISABLE
20487: LD_INT 0
20489: PPUSH
20490: PPUSH
20491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20492: LD_ADDR_VAR 0 3
20496: PUSH
20497: LD_INT 81
20499: PUSH
20500: LD_OWVAR 2
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 21
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PPUSH
20523: CALL_OW 69
20527: ST_TO_ADDR
// if not tmp then
20528: LD_VAR 0 3
20532: NOT
20533: IFFALSE 20537
// exit ;
20535: GO 20684
// if tmp > 5 then
20537: LD_VAR 0 3
20541: PUSH
20542: LD_INT 5
20544: GREATER
20545: IFFALSE 20557
// k := 5 else
20547: LD_ADDR_VAR 0 2
20551: PUSH
20552: LD_INT 5
20554: ST_TO_ADDR
20555: GO 20567
// k := tmp ;
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: LD_VAR 0 3
20566: ST_TO_ADDR
// for i := 1 to k do
20567: LD_ADDR_VAR 0 1
20571: PUSH
20572: DOUBLE
20573: LD_INT 1
20575: DEC
20576: ST_TO_ADDR
20577: LD_VAR 0 2
20581: PUSH
20582: FOR_TO
20583: IFFALSE 20682
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20585: LD_VAR 0 3
20589: PUSH
20590: LD_VAR 0 1
20594: ARRAY
20595: PPUSH
20596: LD_VAR 0 1
20600: PUSH
20601: LD_INT 4
20603: MOD
20604: PUSH
20605: LD_INT 1
20607: PLUS
20608: PPUSH
20609: CALL_OW 259
20613: PUSH
20614: LD_INT 10
20616: LESS
20617: IFFALSE 20680
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20619: LD_VAR 0 3
20623: PUSH
20624: LD_VAR 0 1
20628: ARRAY
20629: PPUSH
20630: LD_VAR 0 1
20634: PUSH
20635: LD_INT 4
20637: MOD
20638: PUSH
20639: LD_INT 1
20641: PLUS
20642: PPUSH
20643: LD_VAR 0 3
20647: PUSH
20648: LD_VAR 0 1
20652: ARRAY
20653: PPUSH
20654: LD_VAR 0 1
20658: PUSH
20659: LD_INT 4
20661: MOD
20662: PUSH
20663: LD_INT 1
20665: PLUS
20666: PPUSH
20667: CALL_OW 259
20671: PUSH
20672: LD_INT 1
20674: PLUS
20675: PPUSH
20676: CALL_OW 237
20680: GO 20582
20682: POP
20683: POP
// end ;
20684: PPOPN 3
20686: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20687: LD_EXP 51
20691: PUSH
20692: LD_EXP 59
20696: AND
20697: IFFALSE 20717
20699: GO 20701
20701: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20702: LD_INT 4
20704: PPUSH
20705: LD_OWVAR 2
20709: PPUSH
20710: LD_INT 0
20712: PPUSH
20713: CALL_OW 324
20717: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20718: LD_EXP 51
20722: PUSH
20723: LD_EXP 88
20727: AND
20728: IFFALSE 20748
20730: GO 20732
20732: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20733: LD_INT 19
20735: PPUSH
20736: LD_OWVAR 2
20740: PPUSH
20741: LD_INT 0
20743: PPUSH
20744: CALL_OW 324
20748: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20749: LD_EXP 51
20753: PUSH
20754: LD_EXP 60
20758: AND
20759: IFFALSE 20861
20761: GO 20763
20763: DISABLE
20764: LD_INT 0
20766: PPUSH
20767: PPUSH
// begin enable ;
20768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20769: LD_ADDR_VAR 0 2
20773: PUSH
20774: LD_INT 22
20776: PUSH
20777: LD_OWVAR 2
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 34
20791: PUSH
20792: LD_INT 11
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 34
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PPUSH
20818: CALL_OW 69
20822: ST_TO_ADDR
// if not tmp then
20823: LD_VAR 0 2
20827: NOT
20828: IFFALSE 20832
// exit ;
20830: GO 20861
// for i in tmp do
20832: LD_ADDR_VAR 0 1
20836: PUSH
20837: LD_VAR 0 2
20841: PUSH
20842: FOR_IN
20843: IFFALSE 20859
// begin SetLives ( i , 0 ) ;
20845: LD_VAR 0 1
20849: PPUSH
20850: LD_INT 0
20852: PPUSH
20853: CALL_OW 234
// end ;
20857: GO 20842
20859: POP
20860: POP
// end ;
20861: PPOPN 2
20863: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20864: LD_EXP 51
20868: PUSH
20869: LD_EXP 61
20873: AND
20874: IFFALSE 20894
20876: GO 20878
20878: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20879: LD_INT 32
20881: PPUSH
20882: LD_OWVAR 2
20886: PPUSH
20887: LD_INT 0
20889: PPUSH
20890: CALL_OW 324
20894: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20895: LD_EXP 51
20899: PUSH
20900: LD_EXP 62
20904: AND
20905: IFFALSE 21086
20907: GO 20909
20909: DISABLE
20910: LD_INT 0
20912: PPUSH
20913: PPUSH
20914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20915: LD_ADDR_VAR 0 2
20919: PUSH
20920: LD_INT 22
20922: PUSH
20923: LD_OWVAR 2
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 33
20934: PUSH
20935: LD_INT 3
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 2
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 21086
// side := 0 ;
20960: LD_ADDR_VAR 0 3
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// for i := 1 to 8 do
20968: LD_ADDR_VAR 0 1
20972: PUSH
20973: DOUBLE
20974: LD_INT 1
20976: DEC
20977: ST_TO_ADDR
20978: LD_INT 8
20980: PUSH
20981: FOR_TO
20982: IFFALSE 21030
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20984: LD_OWVAR 2
20988: PUSH
20989: LD_VAR 0 1
20993: NONEQUAL
20994: PUSH
20995: LD_OWVAR 2
20999: PPUSH
21000: LD_VAR 0 1
21004: PPUSH
21005: CALL_OW 81
21009: PUSH
21010: LD_INT 2
21012: EQUAL
21013: AND
21014: IFFALSE 21028
// begin side := i ;
21016: LD_ADDR_VAR 0 3
21020: PUSH
21021: LD_VAR 0 1
21025: ST_TO_ADDR
// break ;
21026: GO 21030
// end ;
21028: GO 20981
21030: POP
21031: POP
// if not side then
21032: LD_VAR 0 3
21036: NOT
21037: IFFALSE 21041
// exit ;
21039: GO 21086
// for i := 1 to tmp do
21041: LD_ADDR_VAR 0 1
21045: PUSH
21046: DOUBLE
21047: LD_INT 1
21049: DEC
21050: ST_TO_ADDR
21051: LD_VAR 0 2
21055: PUSH
21056: FOR_TO
21057: IFFALSE 21084
// if Prob ( 60 ) then
21059: LD_INT 60
21061: PPUSH
21062: CALL_OW 13
21066: IFFALSE 21082
// SetSide ( i , side ) ;
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_VAR 0 3
21077: PPUSH
21078: CALL_OW 235
21082: GO 21056
21084: POP
21085: POP
// end ;
21086: PPOPN 3
21088: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21089: LD_EXP 51
21093: PUSH
21094: LD_EXP 64
21098: AND
21099: IFFALSE 21218
21101: GO 21103
21103: DISABLE
21104: LD_INT 0
21106: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21107: LD_ADDR_VAR 0 1
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_OWVAR 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 3
21136: PUSH
21137: LD_INT 23
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: PPUSH
21156: CALL_OW 69
21160: PUSH
21161: FOR_IN
21162: IFFALSE 21216
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21164: LD_VAR 0 1
21168: PPUSH
21169: CALL_OW 257
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: LD_INT 4
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: IN
21192: IFFALSE 21214
// SetClass ( un , rand ( 1 , 4 ) ) ;
21194: LD_VAR 0 1
21198: PPUSH
21199: LD_INT 1
21201: PPUSH
21202: LD_INT 4
21204: PPUSH
21205: CALL_OW 12
21209: PPUSH
21210: CALL_OW 336
21214: GO 21161
21216: POP
21217: POP
// end ;
21218: PPOPN 1
21220: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21221: LD_EXP 51
21225: PUSH
21226: LD_EXP 63
21230: AND
21231: IFFALSE 21310
21233: GO 21235
21235: DISABLE
21236: LD_INT 0
21238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 21
21258: PUSH
21259: LD_INT 3
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: ST_TO_ADDR
// if not tmp then
21275: LD_VAR 0 1
21279: NOT
21280: IFFALSE 21284
// exit ;
21282: GO 21310
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21284: LD_VAR 0 1
21288: PUSH
21289: LD_INT 1
21291: PPUSH
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 12
21301: ARRAY
21302: PPUSH
21303: LD_INT 100
21305: PPUSH
21306: CALL_OW 234
// end ;
21310: PPOPN 1
21312: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21313: LD_EXP 51
21317: PUSH
21318: LD_EXP 65
21322: AND
21323: IFFALSE 21421
21325: GO 21327
21327: DISABLE
21328: LD_INT 0
21330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21331: LD_ADDR_VAR 0 1
21335: PUSH
21336: LD_INT 22
21338: PUSH
21339: LD_OWVAR 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 21
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PPUSH
21362: CALL_OW 69
21366: ST_TO_ADDR
// if not tmp then
21367: LD_VAR 0 1
21371: NOT
21372: IFFALSE 21376
// exit ;
21374: GO 21421
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21376: LD_VAR 0 1
21380: PUSH
21381: LD_INT 1
21383: PPUSH
21384: LD_VAR 0 1
21388: PPUSH
21389: CALL_OW 12
21393: ARRAY
21394: PPUSH
21395: LD_INT 1
21397: PPUSH
21398: LD_INT 4
21400: PPUSH
21401: CALL_OW 12
21405: PPUSH
21406: LD_INT 3000
21408: PPUSH
21409: LD_INT 9000
21411: PPUSH
21412: CALL_OW 12
21416: PPUSH
21417: CALL_OW 492
// end ;
21421: PPOPN 1
21423: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21424: LD_EXP 51
21428: PUSH
21429: LD_EXP 66
21433: AND
21434: IFFALSE 21454
21436: GO 21438
21438: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21439: LD_INT 1
21441: PPUSH
21442: LD_OWVAR 2
21446: PPUSH
21447: LD_INT 0
21449: PPUSH
21450: CALL_OW 324
21454: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21455: LD_EXP 51
21459: PUSH
21460: LD_EXP 67
21464: AND
21465: IFFALSE 21548
21467: GO 21469
21469: DISABLE
21470: LD_INT 0
21472: PPUSH
21473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21474: LD_ADDR_VAR 0 2
21478: PUSH
21479: LD_INT 22
21481: PUSH
21482: LD_OWVAR 2
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 21
21493: PUSH
21494: LD_INT 3
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PPUSH
21505: CALL_OW 69
21509: ST_TO_ADDR
// if not tmp then
21510: LD_VAR 0 2
21514: NOT
21515: IFFALSE 21519
// exit ;
21517: GO 21548
// for i in tmp do
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_VAR 0 2
21528: PUSH
21529: FOR_IN
21530: IFFALSE 21546
// SetBLevel ( i , 10 ) ;
21532: LD_VAR 0 1
21536: PPUSH
21537: LD_INT 10
21539: PPUSH
21540: CALL_OW 241
21544: GO 21529
21546: POP
21547: POP
// end ;
21548: PPOPN 2
21550: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21551: LD_EXP 51
21555: PUSH
21556: LD_EXP 68
21560: AND
21561: IFFALSE 21672
21563: GO 21565
21565: DISABLE
21566: LD_INT 0
21568: PPUSH
21569: PPUSH
21570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21571: LD_ADDR_VAR 0 3
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_OWVAR 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 25
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PPUSH
21602: CALL_OW 69
21606: ST_TO_ADDR
// if not tmp then
21607: LD_VAR 0 3
21611: NOT
21612: IFFALSE 21616
// exit ;
21614: GO 21672
// un := tmp [ rand ( 1 , tmp ) ] ;
21616: LD_ADDR_VAR 0 2
21620: PUSH
21621: LD_VAR 0 3
21625: PUSH
21626: LD_INT 1
21628: PPUSH
21629: LD_VAR 0 3
21633: PPUSH
21634: CALL_OW 12
21638: ARRAY
21639: ST_TO_ADDR
// if Crawls ( un ) then
21640: LD_VAR 0 2
21644: PPUSH
21645: CALL_OW 318
21649: IFFALSE 21660
// ComWalk ( un ) ;
21651: LD_VAR 0 2
21655: PPUSH
21656: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21660: LD_VAR 0 2
21664: PPUSH
21665: LD_INT 5
21667: PPUSH
21668: CALL_OW 336
// end ;
21672: PPOPN 3
21674: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21675: LD_EXP 51
21679: PUSH
21680: LD_EXP 69
21684: AND
21685: PUSH
21686: LD_OWVAR 67
21690: PUSH
21691: LD_INT 3
21693: LESS
21694: AND
21695: IFFALSE 21714
21697: GO 21699
21699: DISABLE
// Difficulty := Difficulty + 1 ;
21700: LD_ADDR_OWVAR 67
21704: PUSH
21705: LD_OWVAR 67
21709: PUSH
21710: LD_INT 1
21712: PLUS
21713: ST_TO_ADDR
21714: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21715: LD_EXP 51
21719: PUSH
21720: LD_EXP 70
21724: AND
21725: IFFALSE 21828
21727: GO 21729
21729: DISABLE
21730: LD_INT 0
21732: PPUSH
// begin for i := 1 to 5 do
21733: LD_ADDR_VAR 0 1
21737: PUSH
21738: DOUBLE
21739: LD_INT 1
21741: DEC
21742: ST_TO_ADDR
21743: LD_INT 5
21745: PUSH
21746: FOR_TO
21747: IFFALSE 21826
// begin uc_nation := nation_nature ;
21749: LD_ADDR_OWVAR 21
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// uc_side := 0 ;
21757: LD_ADDR_OWVAR 20
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21765: LD_ADDR_OWVAR 29
21769: PUSH
21770: LD_INT 12
21772: PUSH
21773: LD_INT 12
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: ST_TO_ADDR
// hc_agressivity := 20 ;
21780: LD_ADDR_OWVAR 35
21784: PUSH
21785: LD_INT 20
21787: ST_TO_ADDR
// hc_class := class_tiger ;
21788: LD_ADDR_OWVAR 28
21792: PUSH
21793: LD_INT 14
21795: ST_TO_ADDR
// hc_gallery :=  ;
21796: LD_ADDR_OWVAR 33
21800: PUSH
21801: LD_STRING 
21803: ST_TO_ADDR
// hc_name :=  ;
21804: LD_ADDR_OWVAR 26
21808: PUSH
21809: LD_STRING 
21811: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21812: CALL_OW 44
21816: PPUSH
21817: LD_INT 0
21819: PPUSH
21820: CALL_OW 51
// end ;
21824: GO 21746
21826: POP
21827: POP
// end ;
21828: PPOPN 1
21830: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21831: LD_EXP 51
21835: PUSH
21836: LD_EXP 71
21840: AND
21841: IFFALSE 21850
21843: GO 21845
21845: DISABLE
// StreamSibBomb ;
21846: CALL 21851 0 0
21850: END
// export function StreamSibBomb ; var i , x , y ; begin
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
21855: PPUSH
21856: PPUSH
// result := false ;
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: LD_INT 0
21864: ST_TO_ADDR
// for i := 1 to 16 do
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: DOUBLE
21871: LD_INT 1
21873: DEC
21874: ST_TO_ADDR
21875: LD_INT 16
21877: PUSH
21878: FOR_TO
21879: IFFALSE 22078
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21881: LD_ADDR_VAR 0 3
21885: PUSH
21886: LD_INT 10
21888: PUSH
21889: LD_INT 20
21891: PUSH
21892: LD_INT 30
21894: PUSH
21895: LD_INT 40
21897: PUSH
21898: LD_INT 50
21900: PUSH
21901: LD_INT 60
21903: PUSH
21904: LD_INT 70
21906: PUSH
21907: LD_INT 80
21909: PUSH
21910: LD_INT 90
21912: PUSH
21913: LD_INT 100
21915: PUSH
21916: LD_INT 110
21918: PUSH
21919: LD_INT 120
21921: PUSH
21922: LD_INT 130
21924: PUSH
21925: LD_INT 140
21927: PUSH
21928: LD_INT 150
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: PPUSH
21951: LD_INT 15
21953: PPUSH
21954: CALL_OW 12
21958: ARRAY
21959: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21960: LD_ADDR_VAR 0 4
21964: PUSH
21965: LD_INT 10
21967: PUSH
21968: LD_INT 20
21970: PUSH
21971: LD_INT 30
21973: PUSH
21974: LD_INT 40
21976: PUSH
21977: LD_INT 50
21979: PUSH
21980: LD_INT 60
21982: PUSH
21983: LD_INT 70
21985: PUSH
21986: LD_INT 80
21988: PUSH
21989: LD_INT 90
21991: PUSH
21992: LD_INT 100
21994: PUSH
21995: LD_INT 110
21997: PUSH
21998: LD_INT 120
22000: PUSH
22001: LD_INT 130
22003: PUSH
22004: LD_INT 140
22006: PUSH
22007: LD_INT 150
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PPUSH
22030: LD_INT 15
22032: PPUSH
22033: CALL_OW 12
22037: ARRAY
22038: ST_TO_ADDR
// if ValidHex ( x , y ) then
22039: LD_VAR 0 3
22043: PPUSH
22044: LD_VAR 0 4
22048: PPUSH
22049: CALL_OW 488
22053: IFFALSE 22076
// begin result := [ x , y ] ;
22055: LD_ADDR_VAR 0 1
22059: PUSH
22060: LD_VAR 0 3
22064: PUSH
22065: LD_VAR 0 4
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: ST_TO_ADDR
// break ;
22074: GO 22078
// end ; end ;
22076: GO 21878
22078: POP
22079: POP
// if result then
22080: LD_VAR 0 1
22084: IFFALSE 22144
// begin ToLua ( playSibBomb() ) ;
22086: LD_STRING playSibBomb()
22088: PPUSH
22089: CALL_OW 559
// wait ( 0 0$14 ) ;
22093: LD_INT 490
22095: PPUSH
22096: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22100: LD_VAR 0 1
22104: PUSH
22105: LD_INT 1
22107: ARRAY
22108: PPUSH
22109: LD_VAR 0 1
22113: PUSH
22114: LD_INT 2
22116: ARRAY
22117: PPUSH
22118: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22122: LD_VAR 0 1
22126: PUSH
22127: LD_INT 1
22129: ARRAY
22130: PPUSH
22131: LD_VAR 0 1
22135: PUSH
22136: LD_INT 2
22138: ARRAY
22139: PPUSH
22140: CALL_OW 429
// end ; end ;
22144: LD_VAR 0 1
22148: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22149: LD_EXP 51
22153: PUSH
22154: LD_EXP 73
22158: AND
22159: IFFALSE 22171
22161: GO 22163
22163: DISABLE
// YouLost (  ) ;
22164: LD_STRING 
22166: PPUSH
22167: CALL_OW 104
22171: END
// every 0 0$1 trigger StreamModeActive and sFog do
22172: LD_EXP 51
22176: PUSH
22177: LD_EXP 72
22181: AND
22182: IFFALSE 22196
22184: GO 22186
22186: DISABLE
// FogOff ( your_side ) ;
22187: LD_OWVAR 2
22191: PPUSH
22192: CALL_OW 344
22196: END
// every 0 0$1 trigger StreamModeActive and sSun do
22197: LD_EXP 51
22201: PUSH
22202: LD_EXP 74
22206: AND
22207: IFFALSE 22235
22209: GO 22211
22211: DISABLE
// begin solar_recharge_percent := 0 ;
22212: LD_ADDR_OWVAR 79
22216: PUSH
22217: LD_INT 0
22219: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22220: LD_INT 10500
22222: PPUSH
22223: CALL_OW 67
// solar_recharge_percent := 100 ;
22227: LD_ADDR_OWVAR 79
22231: PUSH
22232: LD_INT 100
22234: ST_TO_ADDR
// end ;
22235: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22236: LD_EXP 51
22240: PUSH
22241: LD_EXP 75
22245: AND
22246: IFFALSE 22485
22248: GO 22250
22250: DISABLE
22251: LD_INT 0
22253: PPUSH
22254: PPUSH
22255: PPUSH
// begin tmp := [ ] ;
22256: LD_ADDR_VAR 0 3
22260: PUSH
22261: EMPTY
22262: ST_TO_ADDR
// for i := 1 to 6 do
22263: LD_ADDR_VAR 0 1
22267: PUSH
22268: DOUBLE
22269: LD_INT 1
22271: DEC
22272: ST_TO_ADDR
22273: LD_INT 6
22275: PUSH
22276: FOR_TO
22277: IFFALSE 22382
// begin uc_nation := nation_nature ;
22279: LD_ADDR_OWVAR 21
22283: PUSH
22284: LD_INT 0
22286: ST_TO_ADDR
// uc_side := 0 ;
22287: LD_ADDR_OWVAR 20
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22295: LD_ADDR_OWVAR 29
22299: PUSH
22300: LD_INT 12
22302: PUSH
22303: LD_INT 12
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: ST_TO_ADDR
// hc_agressivity := 20 ;
22310: LD_ADDR_OWVAR 35
22314: PUSH
22315: LD_INT 20
22317: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22318: LD_ADDR_OWVAR 28
22322: PUSH
22323: LD_INT 17
22325: ST_TO_ADDR
// hc_gallery :=  ;
22326: LD_ADDR_OWVAR 33
22330: PUSH
22331: LD_STRING 
22333: ST_TO_ADDR
// hc_name :=  ;
22334: LD_ADDR_OWVAR 26
22338: PUSH
22339: LD_STRING 
22341: ST_TO_ADDR
// un := CreateHuman ;
22342: LD_ADDR_VAR 0 2
22346: PUSH
22347: CALL_OW 44
22351: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22352: LD_VAR 0 2
22356: PPUSH
22357: LD_INT 1
22359: PPUSH
22360: CALL_OW 51
// tmp := tmp ^ un ;
22364: LD_ADDR_VAR 0 3
22368: PUSH
22369: LD_VAR 0 3
22373: PUSH
22374: LD_VAR 0 2
22378: ADD
22379: ST_TO_ADDR
// end ;
22380: GO 22276
22382: POP
22383: POP
// repeat wait ( 0 0$1 ) ;
22384: LD_INT 35
22386: PPUSH
22387: CALL_OW 67
// for un in tmp do
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_VAR 0 3
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22476
// begin if IsDead ( un ) then
22404: LD_VAR 0 2
22408: PPUSH
22409: CALL_OW 301
22413: IFFALSE 22433
// begin tmp := tmp diff un ;
22415: LD_ADDR_VAR 0 3
22419: PUSH
22420: LD_VAR 0 3
22424: PUSH
22425: LD_VAR 0 2
22429: DIFF
22430: ST_TO_ADDR
// continue ;
22431: GO 22401
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22433: LD_VAR 0 2
22437: PPUSH
22438: LD_INT 3
22440: PUSH
22441: LD_INT 22
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PPUSH
22455: CALL_OW 69
22459: PPUSH
22460: LD_VAR 0 2
22464: PPUSH
22465: CALL_OW 74
22469: PPUSH
22470: CALL_OW 115
// end ;
22474: GO 22401
22476: POP
22477: POP
// until not tmp ;
22478: LD_VAR 0 3
22482: NOT
22483: IFFALSE 22384
// end ;
22485: PPOPN 3
22487: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22488: LD_EXP 51
22492: PUSH
22493: LD_EXP 76
22497: AND
22498: IFFALSE 22552
22500: GO 22502
22502: DISABLE
// begin ToLua ( displayTroll(); ) ;
22503: LD_STRING displayTroll();
22505: PPUSH
22506: CALL_OW 559
// wait ( 3 3$00 ) ;
22510: LD_INT 6300
22512: PPUSH
22513: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22517: LD_STRING hideTroll();
22519: PPUSH
22520: CALL_OW 559
// wait ( 1 1$00 ) ;
22524: LD_INT 2100
22526: PPUSH
22527: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22531: LD_STRING displayTroll();
22533: PPUSH
22534: CALL_OW 559
// wait ( 1 1$00 ) ;
22538: LD_INT 2100
22540: PPUSH
22541: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22545: LD_STRING hideTroll();
22547: PPUSH
22548: CALL_OW 559
// end ;
22552: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22553: LD_EXP 51
22557: PUSH
22558: LD_EXP 77
22562: AND
22563: IFFALSE 22626
22565: GO 22567
22567: DISABLE
22568: LD_INT 0
22570: PPUSH
// begin p := 0 ;
22571: LD_ADDR_VAR 0 1
22575: PUSH
22576: LD_INT 0
22578: ST_TO_ADDR
// repeat game_speed := 1 ;
22579: LD_ADDR_OWVAR 65
22583: PUSH
22584: LD_INT 1
22586: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22587: LD_INT 35
22589: PPUSH
22590: CALL_OW 67
// p := p + 1 ;
22594: LD_ADDR_VAR 0 1
22598: PUSH
22599: LD_VAR 0 1
22603: PUSH
22604: LD_INT 1
22606: PLUS
22607: ST_TO_ADDR
// until p >= 60 ;
22608: LD_VAR 0 1
22612: PUSH
22613: LD_INT 60
22615: GREATEREQUAL
22616: IFFALSE 22579
// game_speed := 4 ;
22618: LD_ADDR_OWVAR 65
22622: PUSH
22623: LD_INT 4
22625: ST_TO_ADDR
// end ;
22626: PPOPN 1
22628: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22629: LD_EXP 51
22633: PUSH
22634: LD_EXP 78
22638: AND
22639: IFFALSE 22785
22641: GO 22643
22643: DISABLE
22644: LD_INT 0
22646: PPUSH
22647: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22648: LD_ADDR_VAR 0 1
22652: PUSH
22653: LD_INT 22
22655: PUSH
22656: LD_OWVAR 2
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: LD_INT 30
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 30
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PPUSH
22697: CALL_OW 69
22701: ST_TO_ADDR
// if not depot then
22702: LD_VAR 0 1
22706: NOT
22707: IFFALSE 22711
// exit ;
22709: GO 22785
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22711: LD_ADDR_VAR 0 2
22715: PUSH
22716: LD_VAR 0 1
22720: PUSH
22721: LD_INT 1
22723: PPUSH
22724: LD_VAR 0 1
22728: PPUSH
22729: CALL_OW 12
22733: ARRAY
22734: PPUSH
22735: CALL_OW 274
22739: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22740: LD_VAR 0 2
22744: PPUSH
22745: LD_INT 1
22747: PPUSH
22748: LD_INT 0
22750: PPUSH
22751: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22755: LD_VAR 0 2
22759: PPUSH
22760: LD_INT 2
22762: PPUSH
22763: LD_INT 0
22765: PPUSH
22766: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22770: LD_VAR 0 2
22774: PPUSH
22775: LD_INT 3
22777: PPUSH
22778: LD_INT 0
22780: PPUSH
22781: CALL_OW 277
// end ;
22785: PPOPN 2
22787: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22788: LD_EXP 51
22792: PUSH
22793: LD_EXP 79
22797: AND
22798: IFFALSE 22895
22800: GO 22802
22802: DISABLE
22803: LD_INT 0
22805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22806: LD_ADDR_VAR 0 1
22810: PUSH
22811: LD_INT 22
22813: PUSH
22814: LD_OWVAR 2
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 21
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 3
22835: PUSH
22836: LD_INT 23
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: LIST
22854: PPUSH
22855: CALL_OW 69
22859: ST_TO_ADDR
// if not tmp then
22860: LD_VAR 0 1
22864: NOT
22865: IFFALSE 22869
// exit ;
22867: GO 22895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22869: LD_VAR 0 1
22873: PUSH
22874: LD_INT 1
22876: PPUSH
22877: LD_VAR 0 1
22881: PPUSH
22882: CALL_OW 12
22886: ARRAY
22887: PPUSH
22888: LD_INT 200
22890: PPUSH
22891: CALL_OW 234
// end ;
22895: PPOPN 1
22897: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22898: LD_EXP 51
22902: PUSH
22903: LD_EXP 80
22907: AND
22908: IFFALSE 22987
22910: GO 22912
22912: DISABLE
22913: LD_INT 0
22915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22916: LD_ADDR_VAR 0 1
22920: PUSH
22921: LD_INT 22
22923: PUSH
22924: LD_OWVAR 2
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 21
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL_OW 69
22951: ST_TO_ADDR
// if not tmp then
22952: LD_VAR 0 1
22956: NOT
22957: IFFALSE 22961
// exit ;
22959: GO 22987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22961: LD_VAR 0 1
22965: PUSH
22966: LD_INT 1
22968: PPUSH
22969: LD_VAR 0 1
22973: PPUSH
22974: CALL_OW 12
22978: ARRAY
22979: PPUSH
22980: LD_INT 60
22982: PPUSH
22983: CALL_OW 234
// end ;
22987: PPOPN 1
22989: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22990: LD_EXP 51
22994: PUSH
22995: LD_EXP 81
22999: AND
23000: IFFALSE 23099
23002: GO 23004
23004: DISABLE
23005: LD_INT 0
23007: PPUSH
23008: PPUSH
// begin enable ;
23009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23010: LD_ADDR_VAR 0 1
23014: PUSH
23015: LD_INT 22
23017: PUSH
23018: LD_OWVAR 2
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 61
23029: PUSH
23030: EMPTY
23031: LIST
23032: PUSH
23033: LD_INT 33
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: PPUSH
23048: CALL_OW 69
23052: ST_TO_ADDR
// if not tmp then
23053: LD_VAR 0 1
23057: NOT
23058: IFFALSE 23062
// exit ;
23060: GO 23099
// for i in tmp do
23062: LD_ADDR_VAR 0 2
23066: PUSH
23067: LD_VAR 0 1
23071: PUSH
23072: FOR_IN
23073: IFFALSE 23097
// if IsControledBy ( i ) then
23075: LD_VAR 0 2
23079: PPUSH
23080: CALL_OW 312
23084: IFFALSE 23095
// ComUnlink ( i ) ;
23086: LD_VAR 0 2
23090: PPUSH
23091: CALL_OW 136
23095: GO 23072
23097: POP
23098: POP
// end ;
23099: PPOPN 2
23101: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23102: LD_EXP 51
23106: PUSH
23107: LD_EXP 82
23111: AND
23112: IFFALSE 23252
23114: GO 23116
23116: DISABLE
23117: LD_INT 0
23119: PPUSH
23120: PPUSH
// begin ToLua ( displayPowell(); ) ;
23121: LD_STRING displayPowell();
23123: PPUSH
23124: CALL_OW 559
// uc_side := 0 ;
23128: LD_ADDR_OWVAR 20
23132: PUSH
23133: LD_INT 0
23135: ST_TO_ADDR
// uc_nation := 2 ;
23136: LD_ADDR_OWVAR 21
23140: PUSH
23141: LD_INT 2
23143: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23144: LD_ADDR_OWVAR 37
23148: PUSH
23149: LD_INT 14
23151: ST_TO_ADDR
// vc_engine := engine_siberite ;
23152: LD_ADDR_OWVAR 39
23156: PUSH
23157: LD_INT 3
23159: ST_TO_ADDR
// vc_control := control_apeman ;
23160: LD_ADDR_OWVAR 38
23164: PUSH
23165: LD_INT 5
23167: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23168: LD_ADDR_OWVAR 40
23172: PUSH
23173: LD_INT 29
23175: ST_TO_ADDR
// un := CreateVehicle ;
23176: LD_ADDR_VAR 0 2
23180: PUSH
23181: CALL_OW 45
23185: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23186: LD_VAR 0 2
23190: PPUSH
23191: LD_INT 1
23193: PPUSH
23194: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23198: LD_INT 35
23200: PPUSH
23201: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23205: LD_VAR 0 2
23209: PPUSH
23210: LD_INT 22
23212: PUSH
23213: LD_OWVAR 2
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PPUSH
23222: CALL_OW 69
23226: PPUSH
23227: LD_VAR 0 2
23231: PPUSH
23232: CALL_OW 74
23236: PPUSH
23237: CALL_OW 115
// until IsDead ( un ) ;
23241: LD_VAR 0 2
23245: PPUSH
23246: CALL_OW 301
23250: IFFALSE 23198
// end ;
23252: PPOPN 2
23254: END
// every 0 0$1 trigger StreamModeActive and sStu do
23255: LD_EXP 51
23259: PUSH
23260: LD_EXP 90
23264: AND
23265: IFFALSE 23281
23267: GO 23269
23269: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23270: LD_STRING displayStucuk();
23272: PPUSH
23273: CALL_OW 559
// ResetFog ;
23277: CALL_OW 335
// end ;
23281: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23282: LD_EXP 51
23286: PUSH
23287: LD_EXP 83
23291: AND
23292: IFFALSE 23433
23294: GO 23296
23296: DISABLE
23297: LD_INT 0
23299: PPUSH
23300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23301: LD_ADDR_VAR 0 2
23305: PUSH
23306: LD_INT 22
23308: PUSH
23309: LD_OWVAR 2
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 21
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PPUSH
23332: CALL_OW 69
23336: ST_TO_ADDR
// if not tmp then
23337: LD_VAR 0 2
23341: NOT
23342: IFFALSE 23346
// exit ;
23344: GO 23433
// un := tmp [ rand ( 1 , tmp ) ] ;
23346: LD_ADDR_VAR 0 1
23350: PUSH
23351: LD_VAR 0 2
23355: PUSH
23356: LD_INT 1
23358: PPUSH
23359: LD_VAR 0 2
23363: PPUSH
23364: CALL_OW 12
23368: ARRAY
23369: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23370: LD_VAR 0 1
23374: PPUSH
23375: LD_INT 0
23377: PPUSH
23378: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23382: LD_VAR 0 1
23386: PPUSH
23387: LD_OWVAR 3
23391: PUSH
23392: LD_VAR 0 1
23396: DIFF
23397: PPUSH
23398: LD_VAR 0 1
23402: PPUSH
23403: CALL_OW 74
23407: PPUSH
23408: CALL_OW 115
// wait ( 0 0$20 ) ;
23412: LD_INT 700
23414: PPUSH
23415: CALL_OW 67
// SetSide ( un , your_side ) ;
23419: LD_VAR 0 1
23423: PPUSH
23424: LD_OWVAR 2
23428: PPUSH
23429: CALL_OW 235
// end ;
23433: PPOPN 2
23435: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23436: LD_EXP 51
23440: PUSH
23441: LD_EXP 84
23445: AND
23446: IFFALSE 23552
23448: GO 23450
23450: DISABLE
23451: LD_INT 0
23453: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23454: LD_ADDR_VAR 0 1
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_OWVAR 2
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: LD_INT 30
23476: PUSH
23477: LD_INT 0
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 30
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: LIST
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PPUSH
23503: CALL_OW 69
23507: ST_TO_ADDR
// if not depot then
23508: LD_VAR 0 1
23512: NOT
23513: IFFALSE 23517
// exit ;
23515: GO 23552
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23517: LD_VAR 0 1
23521: PUSH
23522: LD_INT 1
23524: ARRAY
23525: PPUSH
23526: CALL_OW 250
23530: PPUSH
23531: LD_VAR 0 1
23535: PUSH
23536: LD_INT 1
23538: ARRAY
23539: PPUSH
23540: CALL_OW 251
23544: PPUSH
23545: LD_INT 70
23547: PPUSH
23548: CALL_OW 495
// end ;
23552: PPOPN 1
23554: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23555: LD_EXP 51
23559: PUSH
23560: LD_EXP 85
23564: AND
23565: IFFALSE 23776
23567: GO 23569
23569: DISABLE
23570: LD_INT 0
23572: PPUSH
23573: PPUSH
23574: PPUSH
23575: PPUSH
23576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23577: LD_ADDR_VAR 0 5
23581: PUSH
23582: LD_INT 22
23584: PUSH
23585: LD_OWVAR 2
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 21
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PPUSH
23608: CALL_OW 69
23612: ST_TO_ADDR
// if not tmp then
23613: LD_VAR 0 5
23617: NOT
23618: IFFALSE 23622
// exit ;
23620: GO 23776
// for i in tmp do
23622: LD_ADDR_VAR 0 1
23626: PUSH
23627: LD_VAR 0 5
23631: PUSH
23632: FOR_IN
23633: IFFALSE 23774
// begin d := rand ( 0 , 5 ) ;
23635: LD_ADDR_VAR 0 4
23639: PUSH
23640: LD_INT 0
23642: PPUSH
23643: LD_INT 5
23645: PPUSH
23646: CALL_OW 12
23650: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23651: LD_ADDR_VAR 0 2
23655: PUSH
23656: LD_VAR 0 1
23660: PPUSH
23661: CALL_OW 250
23665: PPUSH
23666: LD_VAR 0 4
23670: PPUSH
23671: LD_INT 3
23673: PPUSH
23674: LD_INT 12
23676: PPUSH
23677: CALL_OW 12
23681: PPUSH
23682: CALL_OW 272
23686: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_VAR 0 1
23696: PPUSH
23697: CALL_OW 251
23701: PPUSH
23702: LD_VAR 0 4
23706: PPUSH
23707: LD_INT 3
23709: PPUSH
23710: LD_INT 12
23712: PPUSH
23713: CALL_OW 12
23717: PPUSH
23718: CALL_OW 273
23722: ST_TO_ADDR
// if ValidHex ( x , y ) then
23723: LD_VAR 0 2
23727: PPUSH
23728: LD_VAR 0 3
23732: PPUSH
23733: CALL_OW 488
23737: IFFALSE 23772
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23739: LD_VAR 0 1
23743: PPUSH
23744: LD_VAR 0 2
23748: PPUSH
23749: LD_VAR 0 3
23753: PPUSH
23754: LD_INT 3
23756: PPUSH
23757: LD_INT 6
23759: PPUSH
23760: CALL_OW 12
23764: PPUSH
23765: LD_INT 1
23767: PPUSH
23768: CALL_OW 483
// end ;
23772: GO 23632
23774: POP
23775: POP
// end ;
23776: PPOPN 5
23778: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23779: LD_EXP 51
23783: PUSH
23784: LD_EXP 86
23788: AND
23789: IFFALSE 23883
23791: GO 23793
23793: DISABLE
23794: LD_INT 0
23796: PPUSH
23797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23798: LD_ADDR_VAR 0 2
23802: PUSH
23803: LD_INT 22
23805: PUSH
23806: LD_OWVAR 2
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 32
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 21
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: PPUSH
23840: CALL_OW 69
23844: ST_TO_ADDR
// if not tmp then
23845: LD_VAR 0 2
23849: NOT
23850: IFFALSE 23854
// exit ;
23852: GO 23883
// for i in tmp do
23854: LD_ADDR_VAR 0 1
23858: PUSH
23859: LD_VAR 0 2
23863: PUSH
23864: FOR_IN
23865: IFFALSE 23881
// SetFuel ( i , 0 ) ;
23867: LD_VAR 0 1
23871: PPUSH
23872: LD_INT 0
23874: PPUSH
23875: CALL_OW 240
23879: GO 23864
23881: POP
23882: POP
// end ;
23883: PPOPN 2
23885: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23886: LD_EXP 51
23890: PUSH
23891: LD_EXP 87
23895: AND
23896: IFFALSE 23962
23898: GO 23900
23900: DISABLE
23901: LD_INT 0
23903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23904: LD_ADDR_VAR 0 1
23908: PUSH
23909: LD_INT 22
23911: PUSH
23912: LD_OWVAR 2
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 30
23923: PUSH
23924: LD_INT 29
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PPUSH
23935: CALL_OW 69
23939: ST_TO_ADDR
// if not tmp then
23940: LD_VAR 0 1
23944: NOT
23945: IFFALSE 23949
// exit ;
23947: GO 23962
// DestroyUnit ( tmp [ 1 ] ) ;
23949: LD_VAR 0 1
23953: PUSH
23954: LD_INT 1
23956: ARRAY
23957: PPUSH
23958: CALL_OW 65
// end ;
23962: PPOPN 1
23964: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23965: LD_EXP 51
23969: PUSH
23970: LD_EXP 89
23974: AND
23975: IFFALSE 24104
23977: GO 23979
23979: DISABLE
23980: LD_INT 0
23982: PPUSH
// begin uc_side := 0 ;
23983: LD_ADDR_OWVAR 20
23987: PUSH
23988: LD_INT 0
23990: ST_TO_ADDR
// uc_nation := nation_arabian ;
23991: LD_ADDR_OWVAR 21
23995: PUSH
23996: LD_INT 2
23998: ST_TO_ADDR
// hc_gallery :=  ;
23999: LD_ADDR_OWVAR 33
24003: PUSH
24004: LD_STRING 
24006: ST_TO_ADDR
// hc_name :=  ;
24007: LD_ADDR_OWVAR 26
24011: PUSH
24012: LD_STRING 
24014: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24015: LD_INT 1
24017: PPUSH
24018: LD_INT 11
24020: PPUSH
24021: LD_INT 10
24023: PPUSH
24024: CALL_OW 380
// un := CreateHuman ;
24028: LD_ADDR_VAR 0 1
24032: PUSH
24033: CALL_OW 44
24037: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24038: LD_VAR 0 1
24042: PPUSH
24043: LD_INT 1
24045: PPUSH
24046: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24050: LD_INT 35
24052: PPUSH
24053: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24057: LD_VAR 0 1
24061: PPUSH
24062: LD_INT 22
24064: PUSH
24065: LD_OWVAR 2
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PPUSH
24074: CALL_OW 69
24078: PPUSH
24079: LD_VAR 0 1
24083: PPUSH
24084: CALL_OW 74
24088: PPUSH
24089: CALL_OW 115
// until IsDead ( un ) ;
24093: LD_VAR 0 1
24097: PPUSH
24098: CALL_OW 301
24102: IFFALSE 24050
// end ;
24104: PPOPN 1
24106: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24107: LD_EXP 51
24111: PUSH
24112: LD_EXP 91
24116: AND
24117: IFFALSE 24129
24119: GO 24121
24121: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24122: LD_STRING earthquake(getX(game), 0, 32)
24124: PPUSH
24125: CALL_OW 559
24129: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24130: LD_EXP 51
24134: PUSH
24135: LD_EXP 92
24139: AND
24140: IFFALSE 24231
24142: GO 24144
24144: DISABLE
24145: LD_INT 0
24147: PPUSH
// begin enable ;
24148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24149: LD_ADDR_VAR 0 1
24153: PUSH
24154: LD_INT 22
24156: PUSH
24157: LD_OWVAR 2
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 21
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 33
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: PPUSH
24191: CALL_OW 69
24195: ST_TO_ADDR
// if not tmp then
24196: LD_VAR 0 1
24200: NOT
24201: IFFALSE 24205
// exit ;
24203: GO 24231
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24205: LD_VAR 0 1
24209: PUSH
24210: LD_INT 1
24212: PPUSH
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 12
24222: ARRAY
24223: PPUSH
24224: LD_INT 1
24226: PPUSH
24227: CALL_OW 234
// end ;
24231: PPOPN 1
24233: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24234: LD_EXP 51
24238: PUSH
24239: LD_EXP 93
24243: AND
24244: IFFALSE 24385
24246: GO 24248
24248: DISABLE
24249: LD_INT 0
24251: PPUSH
24252: PPUSH
24253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24254: LD_ADDR_VAR 0 3
24258: PUSH
24259: LD_INT 22
24261: PUSH
24262: LD_OWVAR 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 25
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 69
24289: ST_TO_ADDR
// if not tmp then
24290: LD_VAR 0 3
24294: NOT
24295: IFFALSE 24299
// exit ;
24297: GO 24385
// un := tmp [ rand ( 1 , tmp ) ] ;
24299: LD_ADDR_VAR 0 2
24303: PUSH
24304: LD_VAR 0 3
24308: PUSH
24309: LD_INT 1
24311: PPUSH
24312: LD_VAR 0 3
24316: PPUSH
24317: CALL_OW 12
24321: ARRAY
24322: ST_TO_ADDR
// if Crawls ( un ) then
24323: LD_VAR 0 2
24327: PPUSH
24328: CALL_OW 318
24332: IFFALSE 24343
// ComWalk ( un ) ;
24334: LD_VAR 0 2
24338: PPUSH
24339: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24343: LD_VAR 0 2
24347: PPUSH
24348: LD_INT 9
24350: PPUSH
24351: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24355: LD_INT 28
24357: PPUSH
24358: LD_OWVAR 2
24362: PPUSH
24363: LD_INT 2
24365: PPUSH
24366: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24370: LD_INT 29
24372: PPUSH
24373: LD_OWVAR 2
24377: PPUSH
24378: LD_INT 2
24380: PPUSH
24381: CALL_OW 322
// end ;
24385: PPOPN 3
24387: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24388: LD_EXP 51
24392: PUSH
24393: LD_EXP 94
24397: AND
24398: IFFALSE 24509
24400: GO 24402
24402: DISABLE
24403: LD_INT 0
24405: PPUSH
24406: PPUSH
24407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24408: LD_ADDR_VAR 0 3
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_OWVAR 2
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 25
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PPUSH
24439: CALL_OW 69
24443: ST_TO_ADDR
// if not tmp then
24444: LD_VAR 0 3
24448: NOT
24449: IFFALSE 24453
// exit ;
24451: GO 24509
// un := tmp [ rand ( 1 , tmp ) ] ;
24453: LD_ADDR_VAR 0 2
24457: PUSH
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 1
24465: PPUSH
24466: LD_VAR 0 3
24470: PPUSH
24471: CALL_OW 12
24475: ARRAY
24476: ST_TO_ADDR
// if Crawls ( un ) then
24477: LD_VAR 0 2
24481: PPUSH
24482: CALL_OW 318
24486: IFFALSE 24497
// ComWalk ( un ) ;
24488: LD_VAR 0 2
24492: PPUSH
24493: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24497: LD_VAR 0 2
24501: PPUSH
24502: LD_INT 8
24504: PPUSH
24505: CALL_OW 336
// end ;
24509: PPOPN 3
24511: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24512: LD_EXP 51
24516: PUSH
24517: LD_EXP 95
24521: AND
24522: IFFALSE 24666
24524: GO 24526
24526: DISABLE
24527: LD_INT 0
24529: PPUSH
24530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24531: LD_ADDR_VAR 0 2
24535: PUSH
24536: LD_INT 22
24538: PUSH
24539: LD_OWVAR 2
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 34
24563: PUSH
24564: LD_INT 12
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 34
24573: PUSH
24574: LD_INT 51
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 34
24583: PUSH
24584: LD_INT 32
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: PPUSH
24602: CALL_OW 69
24606: ST_TO_ADDR
// if not tmp then
24607: LD_VAR 0 2
24611: NOT
24612: IFFALSE 24616
// exit ;
24614: GO 24666
// for i in tmp do
24616: LD_ADDR_VAR 0 1
24620: PUSH
24621: LD_VAR 0 2
24625: PUSH
24626: FOR_IN
24627: IFFALSE 24664
// if GetCargo ( i , mat_artifact ) = 0 then
24629: LD_VAR 0 1
24633: PPUSH
24634: LD_INT 4
24636: PPUSH
24637: CALL_OW 289
24641: PUSH
24642: LD_INT 0
24644: EQUAL
24645: IFFALSE 24662
// SetCargo ( i , mat_siberit , 100 ) ;
24647: LD_VAR 0 1
24651: PPUSH
24652: LD_INT 3
24654: PPUSH
24655: LD_INT 100
24657: PPUSH
24658: CALL_OW 290
24662: GO 24626
24664: POP
24665: POP
// end ;
24666: PPOPN 2
24668: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24669: LD_EXP 51
24673: PUSH
24674: LD_EXP 96
24678: AND
24679: IFFALSE 24832
24681: GO 24683
24683: DISABLE
24684: LD_INT 0
24686: PPUSH
24687: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24688: LD_ADDR_VAR 0 2
24692: PUSH
24693: LD_INT 22
24695: PUSH
24696: LD_OWVAR 2
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PPUSH
24705: CALL_OW 69
24709: ST_TO_ADDR
// if not tmp then
24710: LD_VAR 0 2
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24832
// for i := 1 to 2 do
24719: LD_ADDR_VAR 0 1
24723: PUSH
24724: DOUBLE
24725: LD_INT 1
24727: DEC
24728: ST_TO_ADDR
24729: LD_INT 2
24731: PUSH
24732: FOR_TO
24733: IFFALSE 24830
// begin uc_side := your_side ;
24735: LD_ADDR_OWVAR 20
24739: PUSH
24740: LD_OWVAR 2
24744: ST_TO_ADDR
// uc_nation := nation_american ;
24745: LD_ADDR_OWVAR 21
24749: PUSH
24750: LD_INT 1
24752: ST_TO_ADDR
// vc_chassis := us_morphling ;
24753: LD_ADDR_OWVAR 37
24757: PUSH
24758: LD_INT 5
24760: ST_TO_ADDR
// vc_engine := engine_siberite ;
24761: LD_ADDR_OWVAR 39
24765: PUSH
24766: LD_INT 3
24768: ST_TO_ADDR
// vc_control := control_computer ;
24769: LD_ADDR_OWVAR 38
24773: PUSH
24774: LD_INT 3
24776: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24777: LD_ADDR_OWVAR 40
24781: PUSH
24782: LD_INT 10
24784: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
24785: CALL_OW 45
24789: PPUSH
24790: LD_VAR 0 2
24794: PUSH
24795: LD_INT 1
24797: ARRAY
24798: PPUSH
24799: CALL_OW 250
24803: PPUSH
24804: LD_VAR 0 2
24808: PUSH
24809: LD_INT 1
24811: ARRAY
24812: PPUSH
24813: CALL_OW 251
24817: PPUSH
24818: LD_INT 12
24820: PPUSH
24821: LD_INT 1
24823: PPUSH
24824: CALL_OW 50
// end ;
24828: GO 24732
24830: POP
24831: POP
// end ;
24832: PPOPN 2
24834: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24835: LD_EXP 51
24839: PUSH
24840: LD_EXP 97
24844: AND
24845: IFFALSE 25067
24847: GO 24849
24849: DISABLE
24850: LD_INT 0
24852: PPUSH
24853: PPUSH
24854: PPUSH
24855: PPUSH
24856: PPUSH
24857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24858: LD_ADDR_VAR 0 6
24862: PUSH
24863: LD_INT 22
24865: PUSH
24866: LD_OWVAR 2
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 21
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 3
24887: PUSH
24888: LD_INT 23
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: PPUSH
24907: CALL_OW 69
24911: ST_TO_ADDR
// if not tmp then
24912: LD_VAR 0 6
24916: NOT
24917: IFFALSE 24921
// exit ;
24919: GO 25067
// s1 := rand ( 1 , 4 ) ;
24921: LD_ADDR_VAR 0 2
24925: PUSH
24926: LD_INT 1
24928: PPUSH
24929: LD_INT 4
24931: PPUSH
24932: CALL_OW 12
24936: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24937: LD_ADDR_VAR 0 4
24941: PUSH
24942: LD_VAR 0 6
24946: PUSH
24947: LD_INT 1
24949: ARRAY
24950: PPUSH
24951: LD_VAR 0 2
24955: PPUSH
24956: CALL_OW 259
24960: ST_TO_ADDR
// if s1 = 1 then
24961: LD_VAR 0 2
24965: PUSH
24966: LD_INT 1
24968: EQUAL
24969: IFFALSE 24989
// s2 := rand ( 2 , 4 ) else
24971: LD_ADDR_VAR 0 3
24975: PUSH
24976: LD_INT 2
24978: PPUSH
24979: LD_INT 4
24981: PPUSH
24982: CALL_OW 12
24986: ST_TO_ADDR
24987: GO 24997
// s2 := 1 ;
24989: LD_ADDR_VAR 0 3
24993: PUSH
24994: LD_INT 1
24996: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24997: LD_ADDR_VAR 0 5
25001: PUSH
25002: LD_VAR 0 6
25006: PUSH
25007: LD_INT 1
25009: ARRAY
25010: PPUSH
25011: LD_VAR 0 3
25015: PPUSH
25016: CALL_OW 259
25020: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25021: LD_VAR 0 6
25025: PUSH
25026: LD_INT 1
25028: ARRAY
25029: PPUSH
25030: LD_VAR 0 2
25034: PPUSH
25035: LD_VAR 0 5
25039: PPUSH
25040: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25044: LD_VAR 0 6
25048: PUSH
25049: LD_INT 1
25051: ARRAY
25052: PPUSH
25053: LD_VAR 0 3
25057: PPUSH
25058: LD_VAR 0 4
25062: PPUSH
25063: CALL_OW 237
// end ;
25067: PPOPN 6
25069: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25070: LD_EXP 51
25074: PUSH
25075: LD_EXP 98
25079: AND
25080: IFFALSE 25159
25082: GO 25084
25084: DISABLE
25085: LD_INT 0
25087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_INT 22
25095: PUSH
25096: LD_OWVAR 2
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 30
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PPUSH
25119: CALL_OW 69
25123: ST_TO_ADDR
// if not tmp then
25124: LD_VAR 0 1
25128: NOT
25129: IFFALSE 25133
// exit ;
25131: GO 25159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25133: LD_VAR 0 1
25137: PUSH
25138: LD_INT 1
25140: PPUSH
25141: LD_VAR 0 1
25145: PPUSH
25146: CALL_OW 12
25150: ARRAY
25151: PPUSH
25152: LD_INT 1
25154: PPUSH
25155: CALL_OW 234
// end ;
25159: PPOPN 1
25161: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25162: LD_EXP 51
25166: PUSH
25167: LD_EXP 99
25171: AND
25172: IFFALSE 25284
25174: GO 25176
25176: DISABLE
25177: LD_INT 0
25179: PPUSH
25180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25181: LD_ADDR_VAR 0 2
25185: PUSH
25186: LD_INT 22
25188: PUSH
25189: LD_OWVAR 2
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 2
25200: PUSH
25201: LD_INT 30
25203: PUSH
25204: LD_INT 27
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 30
25213: PUSH
25214: LD_INT 26
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 30
25223: PUSH
25224: LD_INT 28
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PPUSH
25241: CALL_OW 69
25245: ST_TO_ADDR
// if not tmp then
25246: LD_VAR 0 2
25250: NOT
25251: IFFALSE 25255
// exit ;
25253: GO 25284
// for i in tmp do
25255: LD_ADDR_VAR 0 1
25259: PUSH
25260: LD_VAR 0 2
25264: PUSH
25265: FOR_IN
25266: IFFALSE 25282
// SetLives ( i , 1 ) ;
25268: LD_VAR 0 1
25272: PPUSH
25273: LD_INT 1
25275: PPUSH
25276: CALL_OW 234
25280: GO 25265
25282: POP
25283: POP
// end ;
25284: PPOPN 2
25286: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25287: LD_EXP 51
25291: PUSH
25292: LD_EXP 100
25296: AND
25297: IFFALSE 25571
25299: GO 25301
25301: DISABLE
25302: LD_INT 0
25304: PPUSH
25305: PPUSH
25306: PPUSH
// begin i := rand ( 1 , 7 ) ;
25307: LD_ADDR_VAR 0 1
25311: PUSH
25312: LD_INT 1
25314: PPUSH
25315: LD_INT 7
25317: PPUSH
25318: CALL_OW 12
25322: ST_TO_ADDR
// case i of 1 :
25323: LD_VAR 0 1
25327: PUSH
25328: LD_INT 1
25330: DOUBLE
25331: EQUAL
25332: IFTRUE 25336
25334: GO 25346
25336: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25337: LD_STRING earthquake(getX(game), 0, 32)
25339: PPUSH
25340: CALL_OW 559
25344: GO 25571
25346: LD_INT 2
25348: DOUBLE
25349: EQUAL
25350: IFTRUE 25354
25352: GO 25368
25354: POP
// begin ToLua ( displayStucuk(); ) ;
25355: LD_STRING displayStucuk();
25357: PPUSH
25358: CALL_OW 559
// ResetFog ;
25362: CALL_OW 335
// end ; 3 :
25366: GO 25571
25368: LD_INT 3
25370: DOUBLE
25371: EQUAL
25372: IFTRUE 25376
25374: GO 25480
25376: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25377: LD_ADDR_VAR 0 2
25381: PUSH
25382: LD_INT 22
25384: PUSH
25385: LD_OWVAR 2
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 25
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PPUSH
25408: CALL_OW 69
25412: ST_TO_ADDR
// if not tmp then
25413: LD_VAR 0 2
25417: NOT
25418: IFFALSE 25422
// exit ;
25420: GO 25571
// un := tmp [ rand ( 1 , tmp ) ] ;
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: LD_VAR 0 2
25431: PUSH
25432: LD_INT 1
25434: PPUSH
25435: LD_VAR 0 2
25439: PPUSH
25440: CALL_OW 12
25444: ARRAY
25445: ST_TO_ADDR
// if Crawls ( un ) then
25446: LD_VAR 0 3
25450: PPUSH
25451: CALL_OW 318
25455: IFFALSE 25466
// ComWalk ( un ) ;
25457: LD_VAR 0 3
25461: PPUSH
25462: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25466: LD_VAR 0 3
25470: PPUSH
25471: LD_INT 8
25473: PPUSH
25474: CALL_OW 336
// end ; 4 :
25478: GO 25571
25480: LD_INT 4
25482: DOUBLE
25483: EQUAL
25484: IFTRUE 25488
25486: GO 25549
25488: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25489: LD_ADDR_VAR 0 2
25493: PUSH
25494: LD_INT 22
25496: PUSH
25497: LD_OWVAR 2
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 30
25508: PUSH
25509: LD_INT 29
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: ST_TO_ADDR
// if not tmp then
25525: LD_VAR 0 2
25529: NOT
25530: IFFALSE 25534
// exit ;
25532: GO 25571
// DestroyUnit ( tmp [ 1 ] ) ;
25534: LD_VAR 0 2
25538: PUSH
25539: LD_INT 1
25541: ARRAY
25542: PPUSH
25543: CALL_OW 65
// end ; 5 .. 7 :
25547: GO 25571
25549: LD_INT 5
25551: DOUBLE
25552: GREATEREQUAL
25553: IFFALSE 25561
25555: LD_INT 7
25557: DOUBLE
25558: LESSEQUAL
25559: IFTRUE 25563
25561: GO 25570
25563: POP
// StreamSibBomb ; end ;
25564: CALL 21851 0 0
25568: GO 25571
25570: POP
// end ;
25571: PPOPN 3
25573: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25574: LD_EXP 51
25578: PUSH
25579: LD_EXP 101
25583: AND
25584: IFFALSE 25740
25586: GO 25588
25588: DISABLE
25589: LD_INT 0
25591: PPUSH
25592: PPUSH
25593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25594: LD_ADDR_VAR 0 2
25598: PUSH
25599: LD_INT 81
25601: PUSH
25602: LD_OWVAR 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 21
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 21
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PPUSH
25643: CALL_OW 69
25647: ST_TO_ADDR
// if not tmp then
25648: LD_VAR 0 2
25652: NOT
25653: IFFALSE 25657
// exit ;
25655: GO 25740
// p := 0 ;
25657: LD_ADDR_VAR 0 3
25661: PUSH
25662: LD_INT 0
25664: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25665: LD_INT 35
25667: PPUSH
25668: CALL_OW 67
// p := p + 1 ;
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_VAR 0 3
25681: PUSH
25682: LD_INT 1
25684: PLUS
25685: ST_TO_ADDR
// for i in tmp do
25686: LD_ADDR_VAR 0 1
25690: PUSH
25691: LD_VAR 0 2
25695: PUSH
25696: FOR_IN
25697: IFFALSE 25728
// if GetLives ( i ) < 1000 then
25699: LD_VAR 0 1
25703: PPUSH
25704: CALL_OW 256
25708: PUSH
25709: LD_INT 1000
25711: LESS
25712: IFFALSE 25726
// SetLives ( i , 1000 ) ;
25714: LD_VAR 0 1
25718: PPUSH
25719: LD_INT 1000
25721: PPUSH
25722: CALL_OW 234
25726: GO 25696
25728: POP
25729: POP
// until p > 20 ;
25730: LD_VAR 0 3
25734: PUSH
25735: LD_INT 20
25737: GREATER
25738: IFFALSE 25665
// end ;
25740: PPOPN 3
25742: END
// every 0 0$1 trigger StreamModeActive and sTime do
25743: LD_EXP 51
25747: PUSH
25748: LD_EXP 102
25752: AND
25753: IFFALSE 25788
25755: GO 25757
25757: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25758: LD_INT 28
25760: PPUSH
25761: LD_OWVAR 2
25765: PPUSH
25766: LD_INT 2
25768: PPUSH
25769: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25773: LD_INT 30
25775: PPUSH
25776: LD_OWVAR 2
25780: PPUSH
25781: LD_INT 2
25783: PPUSH
25784: CALL_OW 322
// end ;
25788: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25789: LD_EXP 51
25793: PUSH
25794: LD_EXP 103
25798: AND
25799: IFFALSE 25920
25801: GO 25803
25803: DISABLE
25804: LD_INT 0
25806: PPUSH
25807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25808: LD_ADDR_VAR 0 2
25812: PUSH
25813: LD_INT 22
25815: PUSH
25816: LD_OWVAR 2
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 21
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 3
25837: PUSH
25838: LD_INT 23
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: PPUSH
25857: CALL_OW 69
25861: ST_TO_ADDR
// if not tmp then
25862: LD_VAR 0 2
25866: NOT
25867: IFFALSE 25871
// exit ;
25869: GO 25920
// for i in tmp do
25871: LD_ADDR_VAR 0 1
25875: PUSH
25876: LD_VAR 0 2
25880: PUSH
25881: FOR_IN
25882: IFFALSE 25918
// begin if Crawls ( i ) then
25884: LD_VAR 0 1
25888: PPUSH
25889: CALL_OW 318
25893: IFFALSE 25904
// ComWalk ( i ) ;
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 138
// SetClass ( i , 2 ) ;
25904: LD_VAR 0 1
25908: PPUSH
25909: LD_INT 2
25911: PPUSH
25912: CALL_OW 336
// end ;
25916: GO 25881
25918: POP
25919: POP
// end ;
25920: PPOPN 2
25922: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25923: LD_EXP 51
25927: PUSH
25928: LD_EXP 104
25932: AND
25933: IFFALSE 26214
25935: GO 25937
25937: DISABLE
25938: LD_INT 0
25940: PPUSH
25941: PPUSH
25942: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25943: LD_OWVAR 2
25947: PPUSH
25948: LD_INT 9
25950: PPUSH
25951: LD_INT 1
25953: PPUSH
25954: LD_INT 1
25956: PPUSH
25957: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25961: LD_INT 9
25963: PPUSH
25964: LD_OWVAR 2
25968: PPUSH
25969: CALL_OW 343
// uc_side := 9 ;
25973: LD_ADDR_OWVAR 20
25977: PUSH
25978: LD_INT 9
25980: ST_TO_ADDR
// uc_nation := 2 ;
25981: LD_ADDR_OWVAR 21
25985: PUSH
25986: LD_INT 2
25988: ST_TO_ADDR
// hc_name := Dark Warrior ;
25989: LD_ADDR_OWVAR 26
25993: PUSH
25994: LD_STRING Dark Warrior
25996: ST_TO_ADDR
// hc_gallery :=  ;
25997: LD_ADDR_OWVAR 33
26001: PUSH
26002: LD_STRING 
26004: ST_TO_ADDR
// hc_noskilllimit := true ;
26005: LD_ADDR_OWVAR 76
26009: PUSH
26010: LD_INT 1
26012: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26013: LD_ADDR_OWVAR 31
26017: PUSH
26018: LD_INT 30
26020: PUSH
26021: LD_INT 30
26023: PUSH
26024: LD_INT 30
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: ST_TO_ADDR
// un := CreateHuman ;
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: CALL_OW 44
26045: ST_TO_ADDR
// hc_noskilllimit := false ;
26046: LD_ADDR_OWVAR 76
26050: PUSH
26051: LD_INT 0
26053: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26054: LD_VAR 0 3
26058: PPUSH
26059: LD_INT 1
26061: PPUSH
26062: CALL_OW 51
// p := 0 ;
26066: LD_ADDR_VAR 0 2
26070: PUSH
26071: LD_INT 0
26073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26074: LD_INT 35
26076: PPUSH
26077: CALL_OW 67
// p := p + 1 ;
26081: LD_ADDR_VAR 0 2
26085: PUSH
26086: LD_VAR 0 2
26090: PUSH
26091: LD_INT 1
26093: PLUS
26094: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26095: LD_VAR 0 3
26099: PPUSH
26100: CALL_OW 256
26104: PUSH
26105: LD_INT 1000
26107: LESS
26108: IFFALSE 26122
// SetLives ( un , 1000 ) ;
26110: LD_VAR 0 3
26114: PPUSH
26115: LD_INT 1000
26117: PPUSH
26118: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26122: LD_VAR 0 3
26126: PPUSH
26127: LD_INT 81
26129: PUSH
26130: LD_OWVAR 2
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 91
26141: PUSH
26142: LD_VAR 0 3
26146: PUSH
26147: LD_INT 30
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PPUSH
26159: CALL_OW 69
26163: PPUSH
26164: LD_VAR 0 3
26168: PPUSH
26169: CALL_OW 74
26173: PPUSH
26174: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26178: LD_VAR 0 2
26182: PUSH
26183: LD_INT 60
26185: GREATER
26186: PUSH
26187: LD_VAR 0 3
26191: PPUSH
26192: CALL_OW 301
26196: OR
26197: IFFALSE 26074
// if un then
26199: LD_VAR 0 3
26203: IFFALSE 26214
// RemoveUnit ( un ) ;
26205: LD_VAR 0 3
26209: PPUSH
26210: CALL_OW 64
// end ; end_of_file
26214: PPOPN 3
26216: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26217: LD_INT 0
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 264
26232: PUSH
26233: LD_EXP 50
26237: EQUAL
26238: IFFALSE 26310
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26240: LD_INT 68
26242: PPUSH
26243: LD_VAR 0 1
26247: PPUSH
26248: CALL_OW 255
26252: PPUSH
26253: CALL_OW 321
26257: PUSH
26258: LD_INT 2
26260: EQUAL
26261: IFFALSE 26273
// eff := 70 else
26263: LD_ADDR_VAR 0 4
26267: PUSH
26268: LD_INT 70
26270: ST_TO_ADDR
26271: GO 26281
// eff := 30 ;
26273: LD_ADDR_VAR 0 4
26277: PUSH
26278: LD_INT 30
26280: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 250
26290: PPUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 251
26300: PPUSH
26301: LD_VAR 0 4
26305: PPUSH
26306: CALL_OW 495
// end ; end ;
26310: LD_VAR 0 2
26314: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26315: LD_INT 0
26317: PPUSH
// end ;
26318: LD_VAR 0 4
26322: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
26323: LD_INT 0
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
26330: PPUSH
// if cmd = 124 then
26331: LD_VAR 0 1
26335: PUSH
26336: LD_INT 124
26338: EQUAL
26339: IFFALSE 26545
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
26341: LD_ADDR_VAR 0 5
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: LD_INT 34
26351: PUSH
26352: LD_INT 53
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 34
26361: PUSH
26362: LD_INT 14
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: PPUSH
26374: CALL_OW 69
26378: ST_TO_ADDR
// if not tmp then
26379: LD_VAR 0 5
26383: NOT
26384: IFFALSE 26388
// exit ;
26386: GO 26545
// for i in tmp do
26388: LD_ADDR_VAR 0 3
26392: PUSH
26393: LD_VAR 0 5
26397: PUSH
26398: FOR_IN
26399: IFFALSE 26543
// begin taskList := GetTaskList ( i ) ;
26401: LD_ADDR_VAR 0 6
26405: PUSH
26406: LD_VAR 0 3
26410: PPUSH
26411: CALL_OW 437
26415: ST_TO_ADDR
// if not taskList then
26416: LD_VAR 0 6
26420: NOT
26421: IFFALSE 26425
// continue ;
26423: GO 26398
// for j = 1 to taskList do
26425: LD_ADDR_VAR 0 4
26429: PUSH
26430: DOUBLE
26431: LD_INT 1
26433: DEC
26434: ST_TO_ADDR
26435: LD_VAR 0 6
26439: PUSH
26440: FOR_TO
26441: IFFALSE 26539
// if taskList [ j ] [ 1 ] = | then
26443: LD_VAR 0 6
26447: PUSH
26448: LD_VAR 0 4
26452: ARRAY
26453: PUSH
26454: LD_INT 1
26456: ARRAY
26457: PUSH
26458: LD_STRING |
26460: EQUAL
26461: IFFALSE 26537
// begin _taskList := Delete ( taskList , 1 ) ;
26463: LD_ADDR_VAR 0 7
26467: PUSH
26468: LD_VAR 0 6
26472: PPUSH
26473: LD_INT 1
26475: PPUSH
26476: CALL_OW 3
26480: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
26481: LD_VAR 0 3
26485: PPUSH
26486: LD_VAR 0 7
26490: PPUSH
26491: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
26495: LD_VAR 0 3
26499: PPUSH
26500: LD_VAR 0 6
26504: PUSH
26505: LD_VAR 0 4
26509: ARRAY
26510: PUSH
26511: LD_INT 2
26513: ARRAY
26514: PPUSH
26515: LD_VAR 0 6
26519: PUSH
26520: LD_VAR 0 4
26524: ARRAY
26525: PUSH
26526: LD_INT 3
26528: ARRAY
26529: PPUSH
26530: LD_INT 8
26532: PPUSH
26533: CALL 26550 0 4
// end ;
26537: GO 26440
26539: POP
26540: POP
// end ;
26541: GO 26398
26543: POP
26544: POP
// end ; end ;
26545: LD_VAR 0 2
26549: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26550: LD_INT 0
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
26556: PPUSH
26557: PPUSH
26558: PPUSH
26559: PPUSH
26560: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26561: LD_VAR 0 1
26565: NOT
26566: PUSH
26567: LD_VAR 0 2
26571: PPUSH
26572: LD_VAR 0 3
26576: PPUSH
26577: CALL_OW 488
26581: NOT
26582: OR
26583: PUSH
26584: LD_VAR 0 4
26588: NOT
26589: OR
26590: IFFALSE 26594
// exit ;
26592: GO 26934
// list := [ ] ;
26594: LD_ADDR_VAR 0 13
26598: PUSH
26599: EMPTY
26600: ST_TO_ADDR
// if x - r < 0 then
26601: LD_VAR 0 2
26605: PUSH
26606: LD_VAR 0 4
26610: MINUS
26611: PUSH
26612: LD_INT 0
26614: LESS
26615: IFFALSE 26627
// min_x := 0 else
26617: LD_ADDR_VAR 0 7
26621: PUSH
26622: LD_INT 0
26624: ST_TO_ADDR
26625: GO 26643
// min_x := x - r ;
26627: LD_ADDR_VAR 0 7
26631: PUSH
26632: LD_VAR 0 2
26636: PUSH
26637: LD_VAR 0 4
26641: MINUS
26642: ST_TO_ADDR
// if y - r < 0 then
26643: LD_VAR 0 3
26647: PUSH
26648: LD_VAR 0 4
26652: MINUS
26653: PUSH
26654: LD_INT 0
26656: LESS
26657: IFFALSE 26669
// min_y := 0 else
26659: LD_ADDR_VAR 0 8
26663: PUSH
26664: LD_INT 0
26666: ST_TO_ADDR
26667: GO 26685
// min_y := y - r ;
26669: LD_ADDR_VAR 0 8
26673: PUSH
26674: LD_VAR 0 3
26678: PUSH
26679: LD_VAR 0 4
26683: MINUS
26684: ST_TO_ADDR
// max_x := x + r ;
26685: LD_ADDR_VAR 0 9
26689: PUSH
26690: LD_VAR 0 2
26694: PUSH
26695: LD_VAR 0 4
26699: PLUS
26700: ST_TO_ADDR
// max_y := y + r ;
26701: LD_ADDR_VAR 0 10
26705: PUSH
26706: LD_VAR 0 3
26710: PUSH
26711: LD_VAR 0 4
26715: PLUS
26716: ST_TO_ADDR
// for _x = min_x to max_x do
26717: LD_ADDR_VAR 0 11
26721: PUSH
26722: DOUBLE
26723: LD_VAR 0 7
26727: DEC
26728: ST_TO_ADDR
26729: LD_VAR 0 9
26733: PUSH
26734: FOR_TO
26735: IFFALSE 26852
// for _y = min_y to max_y do
26737: LD_ADDR_VAR 0 12
26741: PUSH
26742: DOUBLE
26743: LD_VAR 0 8
26747: DEC
26748: ST_TO_ADDR
26749: LD_VAR 0 10
26753: PUSH
26754: FOR_TO
26755: IFFALSE 26848
// begin if not ValidHex ( _x , _y ) then
26757: LD_VAR 0 11
26761: PPUSH
26762: LD_VAR 0 12
26766: PPUSH
26767: CALL_OW 488
26771: NOT
26772: IFFALSE 26776
// continue ;
26774: GO 26754
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26776: LD_VAR 0 11
26780: PPUSH
26781: LD_VAR 0 12
26785: PPUSH
26786: CALL_OW 351
26790: PUSH
26791: LD_VAR 0 11
26795: PPUSH
26796: LD_VAR 0 12
26800: PPUSH
26801: CALL_OW 554
26805: AND
26806: IFFALSE 26846
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26808: LD_ADDR_VAR 0 13
26812: PUSH
26813: LD_VAR 0 13
26817: PPUSH
26818: LD_VAR 0 13
26822: PUSH
26823: LD_INT 1
26825: PLUS
26826: PPUSH
26827: LD_VAR 0 11
26831: PUSH
26832: LD_VAR 0 12
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PPUSH
26841: CALL_OW 2
26845: ST_TO_ADDR
// end ;
26846: GO 26754
26848: POP
26849: POP
26850: GO 26734
26852: POP
26853: POP
// if not list then
26854: LD_VAR 0 13
26858: NOT
26859: IFFALSE 26863
// exit ;
26861: GO 26934
// for i in list do
26863: LD_ADDR_VAR 0 6
26867: PUSH
26868: LD_VAR 0 13
26872: PUSH
26873: FOR_IN
26874: IFFALSE 26932
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_STRING M
26883: PUSH
26884: LD_VAR 0 6
26888: PUSH
26889: LD_INT 1
26891: ARRAY
26892: PUSH
26893: LD_VAR 0 6
26897: PUSH
26898: LD_INT 2
26900: ARRAY
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: PPUSH
26926: CALL_OW 447
26930: GO 26873
26932: POP
26933: POP
// end ;
26934: LD_VAR 0 5
26938: RET
