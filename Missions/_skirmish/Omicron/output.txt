// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 65792 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7093 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 31424 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 36264 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 36264 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 69640 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 31424 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 31424 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 31424 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 36264 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 31424 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 69640 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 36264 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 69640 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 72459 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 7
4706: PUSH
4707: LD_INT 12
4709: PUSH
4710: LD_INT 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: LESS
4724: IFFALSE 4798
// begin uc_side := 3 ;
4726: LD_ADDR_OWVAR 20
4730: PUSH
4731: LD_INT 3
4733: ST_TO_ADDR
// uc_nation := 3 ;
4734: LD_ADDR_OWVAR 21
4738: PUSH
4739: LD_INT 3
4741: ST_TO_ADDR
// ResetHc ;
4742: CALL 69640 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_INT 143
4793: PPUSH
4794: CALL_OW 52
// end ; if type = 1 then
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4829
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4808: LD_INT 143
4810: PPUSH
4811: LD_INT 21
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 51
4822: PPUSH
4823: CALL_OW 185
4827: GO 4908
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4829: LD_INT 143
4831: PPUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 23
4840: PUSH
4841: LD_INT 24
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_INT 44
4876: PUSH
4877: LD_INT 44
4879: PUSH
4880: LD_INT 43
4882: PUSH
4883: LD_INT 42
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: PPUSH
4904: CALL_OW 185
// end ;
4908: LD_VAR 0 2
4912: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4913: LD_EXP 8
4917: IFFALSE 5119
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4926: LD_EXP 25
4930: PPUSH
4931: LD_INT 79
4933: PPUSH
4934: LD_INT 155
4936: PPUSH
4937: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4941: LD_EXP 25
4945: PPUSH
4946: LD_INT 4
4948: PPUSH
4949: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_EXP 24
4962: PPUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PPUSH
4969: CALL_OW 72
4973: ST_TO_ADDR
// for i in tmp do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_VAR 0 2
4983: PUSH
4984: FOR_IN
4985: IFFALSE 5019
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_INT 123
4994: PPUSH
4995: LD_INT 60
4997: PPUSH
4998: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: LD_INT 153
5009: PPUSH
5010: LD_INT 103
5012: PPUSH
5013: CALL_OW 174
// end ;
5017: GO 4984
5019: POP
5020: POP
// repeat wait ( 0 0$1 ) ;
5021: LD_INT 35
5023: PPUSH
5024: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_EXP 24
5037: PPUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PPUSH
5044: CALL_OW 72
5048: ST_TO_ADDR
// for i in tmp do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 2
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5110
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 81
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 74
5103: PPUSH
5104: CALL_OW 115
5108: GO 5059
5110: POP
5111: POP
5112: LD_VAR 0 2
5116: NOT
5117: IFFALSE 5021
// end ;
5119: PPOPN 2
5121: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5122: LD_INT 5
5124: PPUSH
5125: LD_INT 81
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: IFFALSE 5152
5141: GO 5143
5143: DISABLE
// russianAlert := true ;
5144: LD_ADDR_EXP 5
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
5152: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5153: LD_INT 106
5155: PPUSH
5156: CALL_OW 302
5160: PUSH
5161: LD_INT 106
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: LD_INT 3
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_INT 106
5176: PPUSH
5177: CALL_OW 274
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 275
5189: PUSH
5190: LD_INT 100
5192: LESS
5193: AND
5194: IFFALSE 5218
5196: GO 5198
5198: DISABLE
// begin enable ;
5199: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 200
5213: PPUSH
5214: CALL_OW 276
// end ;
5218: END
// every 0 0$1 do var i , un , tmp ;
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
// begin uc_side := 3 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 3
5234: ST_TO_ADDR
// uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// tmp := [ ] ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to 2 do
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 2
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5341
// begin PrepareHuman ( false , 2 , 2 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: CALL_OW 380
// un := CreateHuman ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: CALL_OW 44
5288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 74
5325: PPUSH
5326: LD_INT 112
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 0
5334: PPUSH
5335: CALL_OW 50
// end ;
5339: GO 5263
5341: POP
5342: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5343: LD_INT 112
5345: PPUSH
5346: CALL_OW 274
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: LD_INT 100
5356: PPUSH
5357: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i in tmp do
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_IN
5379: IFFALSE 5461
// begin if IsDead ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 301
5390: IFFALSE 5408
// tmp := tmp diff i ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 3
5401: PUSH
5402: LD_VAR 0 1
5406: DIFF
5407: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 314
5417: NOT
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 281
5428: NOT
5429: AND
5430: IFFALSE 5459
// begin ComTransport ( i , kagan , mat_oil ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 112
5439: PPUSH
5440: LD_INT 2
5442: PPUSH
5443: CALL_OW 151
// AddComGive ( i , beria ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_INT 106
5454: PPUSH
5455: CALL_OW 221
// end ; end ;
5459: GO 5378
5461: POP
5462: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5463: LD_VAR 0 3
5467: NOT
5468: PUSH
5469: LD_INT 112
5471: PPUSH
5472: CALL_OW 301
5476: OR
5477: PUSH
5478: LD_INT 106
5480: PPUSH
5481: CALL_OW 301
5485: OR
5486: IFFALSE 5361
// end ;
5488: PPOPN 3
5490: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
// begin enable ;
5501: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 22
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 51
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: LD_INT 600
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5547: LD_ADDR_VAR 0 5
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 9
5606: PPUSH
5607: CALL_OW 435
5611: ST_TO_ADDR
// if not cargo or not skr or not dep then
5612: LD_VAR 0 4
5616: NOT
5617: PUSH
5618: LD_VAR 0 3
5622: NOT
5623: OR
5624: PUSH
5625: LD_VAR 0 5
5629: NOT
5630: OR
5631: IFFALSE 5635
// exit ;
5633: GO 5799
// for i in cargo do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 4
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5797
// begin if not skr then
5648: LD_VAR 0 3
5652: NOT
5653: IFFALSE 5659
// exit ;
5655: POP
5656: POP
5657: GO 5799
// if not HasTask ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 314
5668: NOT
5669: IFFALSE 5738
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: CALL_OW 117
// for j := 1 to 2 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 2
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5734
// skr := Delete ( skr , 1 ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
5732: GO 5711
5734: POP
5735: POP
// end else
5736: GO 5795
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 261
5747: PUSH
5748: LD_INT 3
5750: LESS
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 5
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 74
5771: PPUSH
5772: CALL_OW 296
5776: PUSH
5777: LD_INT 6
5779: LESS
5780: AND
5781: IFFALSE 5795
// SetFuel ( i , 100 ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_INT 100
5790: PPUSH
5791: CALL_OW 240
// end ;
5795: GO 5645
5797: POP
5798: POP
// end ;
5799: PPOPN 5
5801: END
// export function SendSupport ; var i , un ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// uc_nation := 3 ;
5807: LD_ADDR_OWVAR 21
5811: PUSH
5812: LD_INT 3
5814: ST_TO_ADDR
// uc_side := 3 ;
5815: LD_ADDR_OWVAR 20
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// ResetHc ;
5823: CALL 69640 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 3
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_OWVAR 67
5855: ARRAY
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5932
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_OWVAR 67
5870: PPUSH
5871: CALL_OW 380
// un := CreateHuman ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: CALL_OW 44
5884: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 107
5892: PPUSH
5893: LD_INT 95
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_INT 56
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: CALL_OW 114
// AddComHold ( un ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 200
// end ;
5930: GO 5857
5932: POP
5933: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 4
5939: PPUSH
5940: LD_OWVAR 67
5944: PPUSH
5945: CALL_OW 380
// un := CreateHuman ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: LD_INT 107
5966: PPUSH
5967: LD_INT 95
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5980: LD_VAR 0 3
5984: PPUSH
5985: LD_INT 59
5987: PPUSH
5988: LD_INT 25
5990: PPUSH
5991: CALL_OW 111
// if Difficulty > 1 then
5995: LD_OWVAR 67
5999: PUSH
6000: LD_INT 1
6002: GREATER
6003: IFFALSE 6112
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 2
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6110
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_OWVAR 67
6048: PPUSH
6049: CALL_OW 380
// un := CreateHuman ;
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: CALL_OW 44
6062: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 107
6070: PPUSH
6071: LD_INT 95
6073: PPUSH
6074: LD_INT 4
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 45
6091: PPUSH
6092: LD_INT 76
6094: PPUSH
6095: CALL_OW 114
// AddComHold ( un ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 200
// end ;
6108: GO 6035
6110: POP
6111: POP
// end ; end ;
6112: LD_VAR 0 1
6116: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6117: LD_OWVAR 1
6121: PUSH
6122: LD_INT 42000
6124: GREATEREQUAL
6125: PUSH
6126: LD_OWVAR 67
6130: PUSH
6131: LD_INT 1
6133: GREATER
6134: AND
6135: PUSH
6136: LD_EXP 24
6140: PUSH
6141: LD_INT 4
6143: GREATER
6144: AND
6145: PUSH
6146: LD_EXP 8
6150: NOT
6151: AND
6152: IFFALSE 6445
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
// begin enable ;
6163: ENABLE
// tmp := [ ] ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: LD_INT 91
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 47
6188: PUSH
6189: LD_INT 80
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 39
6198: PUSH
6199: LD_INT 67
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: LD_INT 60
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 52
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 1
6264: MINUS
6265: ARRAY
6266: PUSH
6267: FOR_TO
6268: IFFALSE 6419
// begin uc_side := 3 ;
6270: LD_ADDR_OWVAR 20
6274: PUSH
6275: LD_INT 3
6277: ST_TO_ADDR
// uc_nation := 3 ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_INT 3
6285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6286: LD_INT 22
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 42
6297: PUSH
6298: LD_INT 42
6300: PUSH
6301: LD_INT 44
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 3
6316: MOD
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ARRAY
6322: PPUSH
6323: LD_INT 100
6325: PPUSH
6326: CALL 36264 0 5
// un := CreateVehicle ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: CALL_OW 45
6339: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 57
6347: PPUSH
6348: LD_INT 103
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 5
6398: PPUSH
6399: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6403: CALL_OW 44
6407: PPUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: CALL_OW 52
// end ;
6417: GO 6267
6419: POP
6420: POP
// repeat wait ( 0 0$1 ) ;
6421: LD_INT 35
6423: PPUSH
6424: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_VAR 0 4
6437: PPUSH
6438: CALL 71719 0 2
6442: NOT
6443: IFFALSE 6421
// end ;
6445: PPOPN 4
6447: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6448: LD_INT 3
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: IFFALSE 6567
6485: GO 6487
6487: DISABLE
6488: LD_INT 0
6490: PPUSH
// begin enable ;
6491: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6565
// if GetFuel ( i ) < 3 then
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 261
6545: PUSH
6546: LD_INT 3
6548: LESS
6549: IFFALSE 6563
// SetFuel ( i , 3 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 240
6563: GO 6533
6565: POP
6566: POP
// end ; end_of_file
6567: PPOPN 1
6569: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// uc_side := 2 ;
6578: LD_ADDR_OWVAR 20
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// uc_nation := 2 ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_INT 2
6593: ST_TO_ADDR
// InitVc ;
6594: CALL_OW 20
// ResetHc ;
6598: CALL 69640 0 0
// for j := 1 to 2 do
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6840
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_INT 178
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 268
6635: PUSH
6636: LD_INT 121
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_VAR 0 3
6651: ARRAY
6652: ST_TO_ADDR
// for i := 1 to 8 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 8
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6836
// begin uc_side := 2 ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
// uc_nation := 2 ;
6677: LD_ADDR_OWVAR 21
6681: PUSH
6682: LD_INT 2
6684: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6685: LD_INT 14
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 26
6696: PUSH
6697: LD_INT 27
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 99
6718: PPUSH
6719: CALL 36264 0 5
// veh := CreateVehicle ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: CALL_OW 45
6732: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 3
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_VAR 0 6
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6775: LD_INT 0
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: LD_INT 6
6783: PPUSH
6784: CALL_OW 380
// un := CreateHuman ;
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: CALL_OW 44
6797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 186
6819: PPUSH
6820: LD_INT 17
6822: PPUSH
6823: CALL_OW 111
// wait ( 0 0$2 ) ;
6827: LD_INT 70
6829: PPUSH
6830: CALL_OW 67
// end ;
6834: GO 6666
6836: POP
6837: POP
// end ;
6838: GO 6615
6840: POP
6841: POP
// for i := 1 to 10 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 10
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6923
// begin PrepareHuman ( false , 1 , 5 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_INT 5
6866: PPUSH
6867: CALL_OW 380
// un := CreateHuman ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6881: LD_VAR 0 4
6885: PPUSH
6886: LD_INT 178
6888: PPUSH
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 186
6906: PPUSH
6907: LD_INT 17
6909: PPUSH
6910: CALL_OW 111
// wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// end ;
6921: GO 6855
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 1
6929: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 50
6942: PUSH
6943: EMPTY
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: IFFALSE 7090
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin enable ;
6963: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not enemy then
7002: LD_VAR 0 2
7006: NOT
7007: IFFALSE 7029
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 50
7046: PUSH
7047: EMPTY
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PUSH
7059: FOR_IN
7060: IFFALSE 7088
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 74
7081: PPUSH
7082: CALL_OW 115
7086: GO 7059
7088: POP
7089: POP
// end ; end_of_file
7090: PPOPN 2
7092: END
// export function Action ; begin
7093: LD_INT 0
7095: PPUSH
// InGameOn ;
7096: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7100: LD_INT 106
7102: PPUSH
7103: LD_INT 3
7105: PPUSH
7106: CALL_OW 86
// wait ( 0 0$2 ) ;
7110: LD_INT 70
7112: PPUSH
7113: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7117: LD_STRING target1
7119: PPUSH
7120: CALL_OW 337
// InGameOff ;
7124: CALL_OW 9
// SaveForQuickRestart ;
7128: CALL_OW 22
// end ;
7132: LD_VAR 0 1
7136: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7137: LD_INT 64
7139: PPUSH
7140: CALL_OW 301
7144: PUSH
7145: LD_EXP 8
7149: NOT
7150: AND
7151: IFFALSE 7171
7153: GO 7155
7155: DISABLE
// begin omicronFall := true ;
7156: LD_ADDR_EXP 7
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// YouLost ( omi ) ;
7164: LD_STRING omi
7166: PPUSH
7167: CALL_OW 104
// end ;
7171: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7172: LD_INT 4
7174: PPUSH
7175: LD_EXP 14
7179: PPUSH
7180: CALL_OW 292
7184: PUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_EXP 14
7192: PPUSH
7193: CALL_OW 310
7197: PPUSH
7198: CALL_OW 292
7202: OR
7203: PUSH
7204: LD_INT 64
7206: PPUSH
7207: CALL_OW 302
7211: AND
7212: IFFALSE 7765
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 4
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 72
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// for i in tmp do
7276: LD_ADDR_VAR 0 1
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7303
// SetSide ( i , 1 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 235
7301: GO 7286
7303: POP
7304: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7305: LD_EXP 14
7309: PPUSH
7310: LD_INT 37
7312: PPUSH
7313: LD_INT 40
7315: PPUSH
7316: CALL_OW 111
// wait ( 0 0$5 ) ;
7320: LD_INT 175
7322: PPUSH
7323: CALL_OW 67
// ComExit ( Sikorski ) ;
7327: LD_EXP 14
7331: PPUSH
7332: CALL 69513 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_INT 37
7343: PPUSH
7344: LD_INT 40
7346: PPUSH
7347: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7351: LD_EXP 14
7355: PPUSH
7356: CALL_OW 85
// wait ( 0 0$2 ) ;
7360: LD_INT 70
7362: PPUSH
7363: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL 69513 0 1
7381: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 14
7391: PPUSH
7392: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_EXP 14
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 5
7420: LESS
7421: PUSH
7422: LD_EXP 14
7426: PPUSH
7427: CALL_OW 310
7431: NOT
7432: AND
7433: IFFALSE 7396
// ComTurnUnit ( Sikorski , speaker ) ;
7435: LD_EXP 14
7439: PPUSH
7440: LD_VAR 0 3
7444: PPUSH
7445: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_EXP 14
7458: PPUSH
7459: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7463: LD_EXP 14
7467: PPUSH
7468: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7472: LD_EXP 14
7476: PPUSH
7477: LD_STRING DS-1
7479: PPUSH
7480: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_STRING DP-1
7491: PPUSH
7492: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DS-2
7503: PPUSH
7504: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_STRING DP-2
7515: PPUSH
7516: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7520: LD_EXP 14
7524: PPUSH
7525: LD_STRING DS-3
7527: PPUSH
7528: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_STRING DP-3
7539: PPUSH
7540: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7544: LD_EXP 14
7548: PPUSH
7549: LD_STRING DS-4
7551: PPUSH
7552: CALL_OW 88
// wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// if whereHeWas then
7563: LD_VAR 0 4
7567: IFFALSE 7583
// ComEnterUnit ( speaker , whereHeWas ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_VAR 0 4
7578: PPUSH
7579: CALL_OW 120
// ComHold ( Sikorski ) ;
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 140
// wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7599: LD_EXP 15
7603: PPUSH
7604: LD_STRING DR-1
7606: PPUSH
7607: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DS-5
7618: PPUSH
7619: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7623: LD_EXP 15
7627: PPUSH
7628: LD_STRING DR-2
7630: PPUSH
7631: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7635: LD_EXP 14
7639: PPUSH
7640: LD_STRING DS-6
7642: PPUSH
7643: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7647: LD_EXP 15
7651: PPUSH
7652: LD_STRING DR-3
7654: PPUSH
7655: CALL_OW 94
// InGameOff ;
7659: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7663: LD_STRING target2
7665: PPUSH
7666: CALL_OW 337
// sikorskiInOmicron := true ;
7670: LD_ADDR_EXP 9
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7678: LD_INT 70
7680: PPUSH
7681: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_STRING DS-7
7692: PPUSH
7693: CALL_OW 88
// wait ( 3 3$00 ) ;
7697: LD_INT 6300
7699: PPUSH
7700: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7704: LD_EXP 15
7708: PPUSH
7709: LD_STRING DRforce-5
7711: PPUSH
7712: CALL_OW 94
// wait ( 4 4$50 ) ;
7716: LD_INT 10150
7718: PPUSH
7719: CALL_OW 67
// FirstReinforcements ;
7723: CALL 7942 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7727: LD_INT 25200
7729: PPUSH
7730: LD_INT 31500
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7742: LD_EXP 15
7746: PPUSH
7747: LD_STRING DRforce-10
7749: PPUSH
7750: CALL_OW 94
// wait ( 9 9$50 ) ;
7754: LD_INT 20650
7756: PPUSH
7757: CALL_OW 67
// SecondReinforcements ;
7761: CALL 8785 0 0
// end ;
7765: PPOPN 4
7767: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7768: LD_EXP 14
7772: PPUSH
7773: CALL_OW 256
7777: PUSH
7778: LD_INT 1000
7780: LESS
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 101
7807: PUSH
7808: LD_INT 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: AND
7829: IFFALSE 7846
7831: GO 7833
7833: DISABLE
// Say ( Sikorski , DRus ) ;
7834: LD_EXP 14
7838: PPUSH
7839: LD_STRING DRus
7841: PPUSH
7842: CALL_OW 88
7846: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7847: LD_OWVAR 1
7851: PUSH
7852: LD_INT 23100
7854: PUSH
7855: LD_INT 22050
7857: PUSH
7858: LD_INT 20300
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: GREATEREQUAL
7872: IFFALSE 7941
7874: GO 7876
7876: DISABLE
// begin SendSupport ;
7877: CALL 5802 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7881: LD_EXP 24
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: PPUSH
7901: LD_INT 62
7903: PPUSH
7904: LD_INT 22
7906: PPUSH
7907: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7911: LD_EXP 25
7915: PPUSH
7916: LD_INT 69
7918: PPUSH
7919: LD_INT 27
7921: PPUSH
7922: CALL_OW 111
// wait ( 1 1$00 ) ;
7926: LD_INT 2100
7928: PPUSH
7929: CALL_OW 67
// startAttackOnOmicron := true ;
7933: LD_ADDR_EXP 6
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ;
7941: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// uc_side := 4 ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_INT 4
7957: ST_TO_ADDR
// uc_nation := 1 ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// tmp := [ ] ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// ResetHc ;
7973: CALL 69640 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 4
7988: PPUSH
7989: LD_INT 77
7991: PPUSH
7992: CALL 36264 0 5
// un := CreateVehicle ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: CALL_OW 45
8005: ST_TO_ADDR
// tmp := tmp union un ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 4
8015: PUSH
8016: LD_VAR 0 3
8020: UNION
8021: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 106
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8052: LD_INT 0
8054: PPUSH
8055: LD_INT 3
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 380
// un := CreateHuman ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: CALL_OW 44
8074: ST_TO_ADDR
// tmp := tmp union un ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 4
8084: PUSH
8085: LD_VAR 0 3
8089: UNION
8090: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: ARRAY
8110: PPUSH
8111: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 109
8122: PPUSH
8123: LD_INT 9
8125: PPUSH
8126: CALL_OW 111
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 2
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: PUSH
8167: FOR_TO
8168: IFFALSE 8232
// begin PrepareHuman ( false , 1 , 2 ) ;
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 2
8178: PPUSH
8179: CALL_OW 380
// un := CreateHuman ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: CALL_OW 44
8192: ST_TO_ADDR
// tmp := tmp union un ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: LD_VAR 0 3
8207: UNION
8208: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 105
8216: PPUSH
8217: LD_INT 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 50
// end ;
8230: GO 8167
8232: POP
8233: POP
// PrepareHuman ( false , 4 , 2 ) ;
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 380
// un := CreateHuman ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// tmp := tmp union un ;
8257: LD_ADDR_VAR 0 4
8261: PUSH
8262: LD_VAR 0 4
8266: PUSH
8267: LD_VAR 0 3
8271: UNION
8272: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 105
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8294: LD_VAR 0 4
8298: PPUSH
8299: LD_INT 26
8301: PPUSH
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 114
// spotted := false ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8332: LD_INT 35
8334: PPUSH
8335: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1000
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 5
8370: NOT
8371: AND
8372: IFFALSE 8498
// begin spotted := true ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_INT 3
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 1000
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: PUSH
8414: LD_INT 1
8416: ARRAY
8417: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 250
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: CALL_OW 251
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8447: LD_VAR 0 6
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 6
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 12
8470: NEG
8471: PPUSH
8472: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 6
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 84
// end ; for i in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8540
// if not HasTask ( i ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 314
8520: NOT
8521: IFFALSE 8538
// ComAgressiveMove ( i , 26 , 35 ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_INT 26
8530: PPUSH
8531: LD_INT 35
8533: PPUSH
8534: CALL_OW 114
8538: GO 8508
8540: POP
8541: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 50
8549: PUSH
8550: EMPTY
8551: LIST
8552: PPUSH
8553: CALL_OW 72
8557: NOT
8558: IFFALSE 8593
// begin if spotted then
8560: LD_VAR 0 5
8564: IFFALSE 8591
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8566: LD_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 6
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 331
// exit ;
8591: GO 8780
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 91
8600: PUSH
8601: LD_INT 64
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 4
8619: PPUSH
8620: LD_EXP 14
8624: PPUSH
8625: CALL_OW 292
8629: OR
8630: IFFALSE 8332
// omicronSquad := omicronSquad union tmp ;
8632: LD_ADDR_EXP 13
8636: PUSH
8637: LD_EXP 13
8641: PUSH
8642: LD_VAR 0 4
8646: UNION
8647: ST_TO_ADDR
// if spotted then
8648: LD_VAR 0 5
8652: IFFALSE 8679
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8654: LD_VAR 0 6
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 331
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8706
// SetSide ( i , 1 ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 235
8704: GO 8689
8706: POP
8707: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 50
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: IFFALSE 8780
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 26
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: EMPTY
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 72
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_STRING Dcargo
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: LD_VAR 0 1
8784: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// uc_side := 1 ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// uc_nation := 1 ;
8799: LD_ADDR_OWVAR 21
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// ResetHc ;
8807: CALL 69640 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: CALL_OW 380
// un := CreateHuman ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: CALL_OW 44
8833: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8834: LD_INT 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 5
8845: PPUSH
8846: LD_INT 90
8848: PPUSH
8849: CALL 36264 0 5
// veh := CreateVehicle ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 83
8882: PPUSH
8883: LD_INT 154
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_INT 4
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_OWVAR 67
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8989
// begin PrepareHuman ( false , 1 , 3 ) ;
8943: LD_INT 0
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 380
// un := CreateHuman ;
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: CALL_OW 44
8965: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 83
8973: PPUSH
8974: LD_INT 154
8976: PPUSH
8977: LD_INT 10
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 50
// end ;
8987: GO 8940
8989: POP
8990: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 83
9021: PPUSH
9022: LD_INT 154
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_STRING Dhelp
9042: PPUSH
9043: CALL_OW 94
// ResetHc ;
9047: CALL 69640 0 0
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9056: LD_EXP 5
9060: IFFALSE 9202
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_EXP 20
9079: PPUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 54
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// for i := 1 to tmp do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 2
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9200
// begin ComExitBuilding ( tmp [ i ] ) ;
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 3
9187: PUSH
9188: LD_VAR 0 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 180
// end ;
9198: GO 9154
9200: POP
9201: POP
// end ;
9202: PPOPN 3
9204: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9205: LD_EXP 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: AND
9239: IFFALSE 9385
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
9247: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9248: LD_EXP 16
9252: PPUSH
9253: LD_STRING D9a-Kur-1
9255: PPUSH
9256: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9260: LD_EXP 19
9264: PPUSH
9265: LD_STRING D9a-Bur-1
9267: PPUSH
9268: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D9a-Kur-2
9279: PPUSH
9280: CALL_OW 94
// retreatFromOmicron := true ;
9284: LD_ADDR_EXP 8
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_EXP 18
9301: PUSH
9302: LD_EXP 20
9306: PUSH
9307: LD_EXP 21
9311: UNION
9312: PPUSH
9313: LD_INT 3
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 72
9334: UNION
9335: ST_TO_ADDR
// for i in noncombat do
9336: LD_ADDR_VAR 0 1
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9383
// begin if IsInUnit ( i ) then
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 310
9358: IFFALSE 9369
// ComExitBuilding ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 173
// end ;
9381: GO 9346
9383: POP
9384: POP
// end ;
9385: PPOPN 2
9387: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9388: LD_OWVAR 1
9392: PUSH
9393: LD_INT 42000
9395: PPUSH
9396: LD_INT 63000
9398: PPUSH
9399: CALL_OW 12
9403: GREATER
9404: IFFALSE 9549
9406: GO 9408
9408: DISABLE
9409: LD_INT 0
9411: PPUSH
// begin uc_side := 4 ;
9412: LD_ADDR_OWVAR 20
9416: PUSH
9417: LD_INT 4
9419: ST_TO_ADDR
// uc_nation := 4 ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 4
9427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_INT 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 380
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 1
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 161
9466: PPUSH
9467: LD_INT 162
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 50
// ResetHc ;
9480: CALL 69640 0 0
// wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_STRING Dun1
9498: PPUSH
9499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9503: LD_INT 35
9505: PPUSH
9506: CALL_OW 67
// if IsDead ( un ) then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 301
9519: IFFALSE 9523
// exit ;
9521: GO 9549
// until See ( 1 , un ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 292
9535: IFFALSE 9503
// SetSide ( un , 1 ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 1
9551: END
// every 0 0$1 trigger tanksCounter >= 20 do
9552: LD_EXP 12
9556: PUSH
9557: LD_INT 20
9559: GREATEREQUAL
9560: IFFALSE 9572
9562: GO 9564
9564: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9565: LD_STRING ACH_PANZERKNACKER
9567: PPUSH
9568: CALL_OW 543
9572: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9573: LD_OWVAR 1
9577: PUSH
9578: LD_INT 94500
9580: PPUSH
9581: LD_INT 109200
9583: PPUSH
9584: CALL_OW 12
9588: GREATER
9589: IFFALSE 9852
9591: GO 9593
9593: DISABLE
9594: LD_INT 0
9596: PPUSH
// begin PrepareArabian ;
9597: CALL 6570 0 0
// uc_side := 4 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 4
9608: ST_TO_ADDR
// uc_nation := 1 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// ResetHc ;
9617: CALL 69640 0 0
// un := CreateHuman ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: CALL_OW 44
9630: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_STRING ar_come
9638: PPUSH
9639: CALL_OW 94
// wait ( 0 0$20 ) ;
9643: LD_INT 700
9645: PPUSH
9646: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DR-Back
9657: PPUSH
9658: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9662: LD_STRING target3
9664: PPUSH
9665: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9669: LD_INT 10
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9679: LD_INT 35
9681: PPUSH
9682: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9686: LD_EXP 14
9690: PPUSH
9691: LD_INT 10
9693: PPUSH
9694: CALL_OW 308
9698: PUSH
9699: LD_INT 10
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: OR
9717: IFFALSE 9679
// SayRadio ( Harrison , you_win ) ;
9719: LD_EXP 15
9723: PPUSH
9724: LD_STRING you_win
9726: PPUSH
9727: CALL_OW 94
// AddMedal ( med , 1 ) ;
9731: LD_STRING med
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9741: LD_EXP 11
9745: PUSH
9746: LD_INT 27
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_OWVAR 67
9764: ARRAY
9765: GREATER
9766: IFFALSE 9780
// AddMedal ( ru , 1 ) else
9768: LD_STRING ru
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 101
9778: GO 9791
// AddMedal ( ru , - 1 ) ;
9780: LD_STRING ru
9782: PPUSH
9783: LD_INT 1
9785: NEG
9786: PPUSH
9787: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9791: LD_EXP 10
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: LESS
9816: IFFALSE 9830
// AddMedal ( pep , 1 ) else
9818: LD_STRING pep
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 101
9828: GO 9841
// AddMedal ( pep , - 1 ) ;
9830: LD_STRING pep
9832: PPUSH
9833: LD_INT 1
9835: NEG
9836: PPUSH
9837: CALL_OW 101
// GiveMedals ( MAIN ) ;
9841: LD_STRING MAIN
9843: PPUSH
9844: CALL_OW 102
// YouWin ;
9848: CALL_OW 103
// end ; end_of_file
9852: PPOPN 1
9854: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL 10711 0 1
// if un = Sikorski then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 14
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( sik ) ;
9876: LD_STRING sik
9878: PPUSH
9879: CALL_OW 104
// if un in russianOmicronAttackers then
9883: LD_VAR 0 1
9887: PUSH
9888: LD_EXP 24
9892: IN
9893: IFFALSE 9911
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9895: LD_ADDR_EXP 24
9899: PUSH
9900: LD_EXP 24
9904: PUSH
9905: LD_VAR 0 1
9909: DIFF
9910: ST_TO_ADDR
// if un in russianCargo then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_EXP 25
9920: IN
9921: IFFALSE 9939
// russianCargo := russianCargo diff un ;
9923: LD_ADDR_EXP 25
9927: PUSH
9928: LD_EXP 25
9932: PUSH
9933: LD_VAR 0 1
9937: DIFF
9938: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 51
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: IN
9973: IFFALSE 9982
// ProduceNew ( 1 ) ;
9975: LD_INT 1
9977: PPUSH
9978: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: PUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 247
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: AND
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 248
10027: PUSH
10028: LD_INT 1
10030: EQUAL
10031: AND
10032: IFFALSE 10048
// usLoseCounter := usLoseCounter + 1 ;
10034: LD_ADDR_EXP 10
10038: PUSH
10039: LD_EXP 10
10043: PUSH
10044: LD_INT 1
10046: PLUS
10047: ST_TO_ADDR
// end ;
10048: PPOPN 1
10050: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 2
10060: PPUSH
10061: CALL 10831 0 2
// if GetSide ( factory ) <> 3 then
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 3
10077: NONEQUAL
10078: IFFALSE 10082
// exit ;
10080: GO 10144
// if GetWeapon ( veh ) = ru_cargo_bay then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 51
10094: EQUAL
10095: IFFALSE 10099
// exit ;
10097: GO 10144
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 310
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: UNION
10128: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 71
10136: PPUSH
10137: LD_INT 37
10139: PPUSH
10140: CALL_OW 174
// end ;
10144: PPOPN 2
10146: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10147: LD_VAR 0 2
10151: PUSH
10152: LD_EXP 24
10156: IN
10157: IFFALSE 10175
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10159: LD_ADDR_EXP 24
10163: PUSH
10164: LD_EXP 24
10168: PUSH
10169: LD_VAR 0 2
10173: DIFF
10174: ST_TO_ADDR
// if oldId in russianCargo then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_EXP 25
10184: IN
10185: IFFALSE 10203
// russianCargo := russianCargo diff oldId ;
10187: LD_ADDR_EXP 25
10191: PUSH
10192: LD_EXP 25
10196: PUSH
10197: LD_VAR 0 2
10201: DIFF
10202: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10203: LD_VAR 0 1
10207: PUSH
10208: LD_EXP 24
10212: IN
10213: IFFALSE 10231
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10215: LD_ADDR_EXP 24
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_VAR 0 1
10229: DIFF
10230: ST_TO_ADDR
// if newId in russianCargo then
10231: LD_VAR 0 1
10235: PUSH
10236: LD_EXP 25
10240: IN
10241: IFFALSE 10259
// russianCargo := russianCargo diff newId ;
10243: LD_ADDR_EXP 25
10247: PUSH
10248: LD_EXP 25
10252: PUSH
10253: LD_VAR 0 1
10257: DIFF
10258: ST_TO_ADDR
// end ;
10259: PPOPN 4
10261: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: CALL 10807 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10281: LD_VAR 0 2
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: AND
10318: IFFALSE 10334
// ruLoseCounter := ruLoseCounter + 1 ;
10320: LD_ADDR_EXP 11
10324: PUSH
10325: LD_EXP 11
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: IN
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 247
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// tanksCounter := tanksCounter + 1 ;
10388: LD_ADDR_EXP 12
10392: PUSH
10393: LD_EXP 12
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// end ;
10402: PPOPN 3
10404: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10574
// begin ComRepairVehicle ( driver , veh ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 301
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 301
10467: OR
10468: PUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 250
10481: GREATER
10482: OR
10483: IFFALSE 10441
// if GetLives ( veh ) > 250 then
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 250
10497: GREATER
10498: IFFALSE 10574
// begin ComEnterUnit ( driver , veh ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 71
10521: PPUSH
10522: LD_INT 29
10524: PPUSH
10525: CALL_OW 171
// SetTag ( veh , 1 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 109
// if not veh in russianOmicronAttackers then
10541: LD_VAR 0 2
10545: PUSH
10546: LD_EXP 24
10550: IN
10551: NOT
10552: IFFALSE 10574
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10554: LD_ADDR_EXP 24
10558: PUSH
10559: LD_EXP 24
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 69115 0 2
10573: ST_TO_ADDR
// end ; end ; end ;
10574: PPOPN 4
10576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL 10815 0 1
// end ; end_of_file
10586: PPOPN 1
10588: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10589: LD_EXP 9
10593: PUSH
10594: LD_INT 6
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 287
10604: PUSH
10605: LD_INT 18
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: LESS
10625: AND
10626: IFFALSE 10668
10628: GO 10630
10630: DISABLE
// begin enable ;
10631: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10632: LD_INT 350
10634: PPUSH
10635: LD_INT 1050
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10647: LD_INT 2
10649: PPUSH
10650: LD_INT 5
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: LD_INT 6
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 55
// end ;
10668: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10669: LD_INT 7
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 287
10679: PUSH
10680: LD_INT 5
10682: LESS
10683: IFFALSE 10710
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10689: LD_INT 2
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: CALL_OW 12
10699: PPUSH
10700: LD_INT 7
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 55
// end ; end_of_file end_of_file
10710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 264
10726: PUSH
10727: LD_INT 91
10729: EQUAL
10730: IFFALSE 10802
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10732: LD_INT 68
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: IFFALSE 10765
// eff := 70 else
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_INT 70
10762: ST_TO_ADDR
10763: GO 10773
// eff := 30 ;
10765: LD_ADDR_VAR 0 4
10769: PUSH
10770: LD_INT 30
10772: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 250
10782: PPUSH
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 251
10792: PPUSH
10793: LD_VAR 0 4
10797: PPUSH
10798: CALL_OW 495
// end ; end ;
10802: LD_VAR 0 2
10806: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10807: LD_INT 0
10809: PPUSH
// end ;
10810: LD_VAR 0 4
10814: RET
// export function SOS_Command ( cmd ) ; begin
10815: LD_INT 0
10817: PPUSH
// end ;
10818: LD_VAR 0 2
10822: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10823: LD_INT 0
10825: PPUSH
// end ;
10826: LD_VAR 0 6
10830: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// if not vehicle or not factory then
10835: LD_VAR 0 1
10839: NOT
10840: PUSH
10841: LD_VAR 0 2
10845: NOT
10846: OR
10847: IFFALSE 10851
// exit ;
10849: GO 11082
// if factoryWaypoints >= factory then
10851: LD_EXP 95
10855: PUSH
10856: LD_VAR 0 2
10860: GREATEREQUAL
10861: IFFALSE 11082
// if factoryWaypoints [ factory ] then
10863: LD_EXP 95
10867: PUSH
10868: LD_VAR 0 2
10872: ARRAY
10873: IFFALSE 11082
// begin if GetControl ( vehicle ) = control_manual then
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 263
10884: PUSH
10885: LD_INT 1
10887: EQUAL
10888: IFFALSE 10969
// begin driver := IsDrivenBy ( vehicle ) ;
10890: LD_ADDR_VAR 0 4
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 311
10904: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10905: LD_VAR 0 4
10909: PPUSH
10910: LD_EXP 95
10914: PUSH
10915: LD_VAR 0 2
10919: ARRAY
10920: PUSH
10921: LD_INT 3
10923: ARRAY
10924: PPUSH
10925: LD_EXP 95
10929: PUSH
10930: LD_VAR 0 2
10934: ARRAY
10935: PUSH
10936: LD_INT 4
10938: ARRAY
10939: PPUSH
10940: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10944: LD_VAR 0 4
10948: PPUSH
10949: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10953: LD_VAR 0 4
10957: PPUSH
10958: LD_VAR 0 2
10962: PPUSH
10963: CALL_OW 180
// end else
10967: GO 11082
// if GetControl ( vehicle ) = control_remote then
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: IFFALSE 11043
// begin wait ( 0 0$2 ) ;
10984: LD_INT 70
10986: PPUSH
10987: CALL_OW 67
// if Connect ( vehicle ) then
10991: LD_VAR 0 1
10995: PPUSH
10996: CALL 39732 0 1
11000: IFFALSE 11041
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_EXP 95
11011: PUSH
11012: LD_VAR 0 2
11016: ARRAY
11017: PUSH
11018: LD_INT 3
11020: ARRAY
11021: PPUSH
11022: LD_EXP 95
11026: PUSH
11027: LD_VAR 0 2
11031: ARRAY
11032: PUSH
11033: LD_INT 4
11035: ARRAY
11036: PPUSH
11037: CALL_OW 171
// end else
11041: GO 11082
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_EXP 95
11052: PUSH
11053: LD_VAR 0 2
11057: ARRAY
11058: PUSH
11059: LD_INT 3
11061: ARRAY
11062: PPUSH
11063: LD_EXP 95
11067: PUSH
11068: LD_VAR 0 2
11072: ARRAY
11073: PUSH
11074: LD_INT 4
11076: ARRAY
11077: PPUSH
11078: CALL_OW 171
// end ; end ;
11082: LD_VAR 0 3
11086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11087: LD_INT 0
11089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11090: LD_VAR 0 1
11094: PUSH
11095: LD_INT 250
11097: EQUAL
11098: PUSH
11099: LD_VAR 0 2
11103: PPUSH
11104: CALL_OW 264
11108: PUSH
11109: LD_INT 81
11111: EQUAL
11112: AND
11113: IFFALSE 11134
// MinerPlaceMine ( unit , x , y ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_VAR 0 5
11129: PPUSH
11130: CALL 14124 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11134: LD_VAR 0 1
11138: PUSH
11139: LD_INT 251
11141: EQUAL
11142: PUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 264
11152: PUSH
11153: LD_INT 81
11155: EQUAL
11156: AND
11157: IFFALSE 11178
// MinerDetonateMine ( unit , x , y ) ;
11159: LD_VAR 0 2
11163: PPUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: LD_VAR 0 5
11173: PPUSH
11174: CALL 14399 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11178: LD_VAR 0 1
11182: PUSH
11183: LD_INT 252
11185: EQUAL
11186: PUSH
11187: LD_VAR 0 2
11191: PPUSH
11192: CALL_OW 264
11196: PUSH
11197: LD_INT 81
11199: EQUAL
11200: AND
11201: IFFALSE 11222
// MinerCreateMinefield ( unit , x , y ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_VAR 0 4
11212: PPUSH
11213: LD_VAR 0 5
11217: PPUSH
11218: CALL 14816 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11222: LD_VAR 0 1
11226: PUSH
11227: LD_INT 253
11229: EQUAL
11230: PUSH
11231: LD_VAR 0 2
11235: PPUSH
11236: CALL_OW 257
11240: PUSH
11241: LD_INT 5
11243: EQUAL
11244: AND
11245: IFFALSE 11266
// ComBinocular ( unit , x , y ) ;
11247: LD_VAR 0 2
11251: PPUSH
11252: LD_VAR 0 4
11256: PPUSH
11257: LD_VAR 0 5
11261: PPUSH
11262: CALL 15185 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11266: LD_VAR 0 1
11270: PUSH
11271: LD_INT 254
11273: EQUAL
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 264
11284: PUSH
11285: LD_INT 99
11287: EQUAL
11288: AND
11289: PUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: CALL_OW 263
11299: PUSH
11300: LD_INT 3
11302: EQUAL
11303: AND
11304: IFFALSE 11320
// HackDestroyVehicle ( unit , selectedUnit ) ;
11306: LD_VAR 0 2
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: CALL 13488 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11320: LD_VAR 0 1
11324: PUSH
11325: LD_INT 255
11327: EQUAL
11328: PUSH
11329: LD_VAR 0 2
11333: PPUSH
11334: CALL_OW 264
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 53
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: IN
11349: AND
11350: PUSH
11351: LD_VAR 0 4
11355: PPUSH
11356: LD_VAR 0 5
11360: PPUSH
11361: CALL_OW 488
11365: AND
11366: IFFALSE 11390
// CutTreeXYR ( unit , x , y , 12 ) ;
11368: LD_VAR 0 2
11372: PPUSH
11373: LD_VAR 0 4
11377: PPUSH
11378: LD_VAR 0 5
11382: PPUSH
11383: LD_INT 12
11385: PPUSH
11386: CALL 11485 0 4
// if cmd = 256 then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 256
11397: EQUAL
11398: IFFALSE 11419
// SetFactoryWaypoint ( unit , x , y ) ;
11400: LD_VAR 0 2
11404: PPUSH
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 5
11414: PPUSH
11415: CALL 30113 0 3
// if cmd = 257 then
11419: LD_VAR 0 1
11423: PUSH
11424: LD_INT 257
11426: EQUAL
11427: IFFALSE 11448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11429: LD_VAR 0 2
11433: PPUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_VAR 0 5
11443: PPUSH
11444: CALL 30475 0 3
// if cmd = 258 then
11448: LD_VAR 0 1
11452: PUSH
11453: LD_INT 258
11455: EQUAL
11456: IFFALSE 11480
// BurnTreeXYR ( unit , x , y , 8 ) ;
11458: LD_VAR 0 2
11462: PPUSH
11463: LD_VAR 0 4
11467: PPUSH
11468: LD_VAR 0 5
11472: PPUSH
11473: LD_INT 8
11475: PPUSH
11476: CALL 11879 0 4
// end ;
11480: LD_VAR 0 6
11484: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11485: LD_INT 0
11487: PPUSH
11488: PPUSH
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
11496: LD_VAR 0 1
11500: PPUSH
11501: CALL_OW 302
11505: NOT
11506: PUSH
11507: LD_VAR 0 2
11511: PPUSH
11512: LD_VAR 0 3
11516: PPUSH
11517: CALL_OW 488
11521: NOT
11522: OR
11523: PUSH
11524: LD_VAR 0 4
11528: NOT
11529: OR
11530: IFFALSE 11534
// exit ;
11532: GO 11874
// list := [ ] ;
11534: LD_ADDR_VAR 0 13
11538: PUSH
11539: EMPTY
11540: ST_TO_ADDR
// if x - r < 0 then
11541: LD_VAR 0 2
11545: PUSH
11546: LD_VAR 0 4
11550: MINUS
11551: PUSH
11552: LD_INT 0
11554: LESS
11555: IFFALSE 11567
// min_x := 0 else
11557: LD_ADDR_VAR 0 7
11561: PUSH
11562: LD_INT 0
11564: ST_TO_ADDR
11565: GO 11583
// min_x := x - r ;
11567: LD_ADDR_VAR 0 7
11571: PUSH
11572: LD_VAR 0 2
11576: PUSH
11577: LD_VAR 0 4
11581: MINUS
11582: ST_TO_ADDR
// if y - r < 0 then
11583: LD_VAR 0 3
11587: PUSH
11588: LD_VAR 0 4
11592: MINUS
11593: PUSH
11594: LD_INT 0
11596: LESS
11597: IFFALSE 11609
// min_y := 0 else
11599: LD_ADDR_VAR 0 8
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
11607: GO 11625
// min_y := y - r ;
11609: LD_ADDR_VAR 0 8
11613: PUSH
11614: LD_VAR 0 3
11618: PUSH
11619: LD_VAR 0 4
11623: MINUS
11624: ST_TO_ADDR
// max_x := x + r ;
11625: LD_ADDR_VAR 0 9
11629: PUSH
11630: LD_VAR 0 2
11634: PUSH
11635: LD_VAR 0 4
11639: PLUS
11640: ST_TO_ADDR
// max_y := y + r ;
11641: LD_ADDR_VAR 0 10
11645: PUSH
11646: LD_VAR 0 3
11650: PUSH
11651: LD_VAR 0 4
11655: PLUS
11656: ST_TO_ADDR
// for _x = min_x to max_x do
11657: LD_ADDR_VAR 0 11
11661: PUSH
11662: DOUBLE
11663: LD_VAR 0 7
11667: DEC
11668: ST_TO_ADDR
11669: LD_VAR 0 9
11673: PUSH
11674: FOR_TO
11675: IFFALSE 11792
// for _y = min_y to max_y do
11677: LD_ADDR_VAR 0 12
11681: PUSH
11682: DOUBLE
11683: LD_VAR 0 8
11687: DEC
11688: ST_TO_ADDR
11689: LD_VAR 0 10
11693: PUSH
11694: FOR_TO
11695: IFFALSE 11788
// begin if not ValidHex ( _x , _y ) then
11697: LD_VAR 0 11
11701: PPUSH
11702: LD_VAR 0 12
11706: PPUSH
11707: CALL_OW 488
11711: NOT
11712: IFFALSE 11716
// continue ;
11714: GO 11694
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11716: LD_VAR 0 11
11720: PPUSH
11721: LD_VAR 0 12
11725: PPUSH
11726: CALL_OW 351
11730: PUSH
11731: LD_VAR 0 11
11735: PPUSH
11736: LD_VAR 0 12
11740: PPUSH
11741: CALL_OW 554
11745: AND
11746: IFFALSE 11786
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11748: LD_ADDR_VAR 0 13
11752: PUSH
11753: LD_VAR 0 13
11757: PPUSH
11758: LD_VAR 0 13
11762: PUSH
11763: LD_INT 1
11765: PLUS
11766: PPUSH
11767: LD_VAR 0 11
11771: PUSH
11772: LD_VAR 0 12
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PPUSH
11781: CALL_OW 2
11785: ST_TO_ADDR
// end ;
11786: GO 11694
11788: POP
11789: POP
11790: GO 11674
11792: POP
11793: POP
// if not list then
11794: LD_VAR 0 13
11798: NOT
11799: IFFALSE 11803
// exit ;
11801: GO 11874
// for i in list do
11803: LD_ADDR_VAR 0 6
11807: PUSH
11808: LD_VAR 0 13
11812: PUSH
11813: FOR_IN
11814: IFFALSE 11872
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11816: LD_VAR 0 1
11820: PPUSH
11821: LD_STRING M
11823: PUSH
11824: LD_VAR 0 6
11828: PUSH
11829: LD_INT 1
11831: ARRAY
11832: PUSH
11833: LD_VAR 0 6
11837: PUSH
11838: LD_INT 2
11840: ARRAY
11841: PUSH
11842: LD_INT 0
11844: PUSH
11845: LD_INT 0
11847: PUSH
11848: LD_INT 0
11850: PUSH
11851: LD_INT 0
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: PPUSH
11866: CALL_OW 447
11870: GO 11813
11872: POP
11873: POP
// end ;
11874: LD_VAR 0 5
11878: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
11879: LD_INT 0
11881: PPUSH
11882: PPUSH
11883: PPUSH
11884: PPUSH
11885: PPUSH
11886: PPUSH
11887: PPUSH
11888: PPUSH
11889: PPUSH
11890: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
11891: LD_VAR 0 1
11895: PPUSH
11896: CALL_OW 302
11900: NOT
11901: PUSH
11902: LD_VAR 0 2
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: CALL_OW 488
11916: NOT
11917: OR
11918: PUSH
11919: LD_VAR 0 4
11923: NOT
11924: OR
11925: IFFALSE 11929
// exit ;
11927: GO 12442
// list := [ ] ;
11929: LD_ADDR_VAR 0 13
11933: PUSH
11934: EMPTY
11935: ST_TO_ADDR
// if x - r < 0 then
11936: LD_VAR 0 2
11940: PUSH
11941: LD_VAR 0 4
11945: MINUS
11946: PUSH
11947: LD_INT 0
11949: LESS
11950: IFFALSE 11962
// min_x := 0 else
11952: LD_ADDR_VAR 0 7
11956: PUSH
11957: LD_INT 0
11959: ST_TO_ADDR
11960: GO 11978
// min_x := x - r ;
11962: LD_ADDR_VAR 0 7
11966: PUSH
11967: LD_VAR 0 2
11971: PUSH
11972: LD_VAR 0 4
11976: MINUS
11977: ST_TO_ADDR
// if y - r < 0 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_VAR 0 4
11987: MINUS
11988: PUSH
11989: LD_INT 0
11991: LESS
11992: IFFALSE 12004
// min_y := 0 else
11994: LD_ADDR_VAR 0 8
11998: PUSH
11999: LD_INT 0
12001: ST_TO_ADDR
12002: GO 12020
// min_y := y - r ;
12004: LD_ADDR_VAR 0 8
12008: PUSH
12009: LD_VAR 0 3
12013: PUSH
12014: LD_VAR 0 4
12018: MINUS
12019: ST_TO_ADDR
// max_x := x + r ;
12020: LD_ADDR_VAR 0 9
12024: PUSH
12025: LD_VAR 0 2
12029: PUSH
12030: LD_VAR 0 4
12034: PLUS
12035: ST_TO_ADDR
// max_y := y + r ;
12036: LD_ADDR_VAR 0 10
12040: PUSH
12041: LD_VAR 0 3
12045: PUSH
12046: LD_VAR 0 4
12050: PLUS
12051: ST_TO_ADDR
// for _x = min_x to max_x do
12052: LD_ADDR_VAR 0 11
12056: PUSH
12057: DOUBLE
12058: LD_VAR 0 7
12062: DEC
12063: ST_TO_ADDR
12064: LD_VAR 0 9
12068: PUSH
12069: FOR_TO
12070: IFFALSE 12187
// for _y = min_y to max_y do
12072: LD_ADDR_VAR 0 12
12076: PUSH
12077: DOUBLE
12078: LD_VAR 0 8
12082: DEC
12083: ST_TO_ADDR
12084: LD_VAR 0 10
12088: PUSH
12089: FOR_TO
12090: IFFALSE 12183
// begin if not ValidHex ( _x , _y ) then
12092: LD_VAR 0 11
12096: PPUSH
12097: LD_VAR 0 12
12101: PPUSH
12102: CALL_OW 488
12106: NOT
12107: IFFALSE 12111
// continue ;
12109: GO 12089
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12111: LD_VAR 0 11
12115: PPUSH
12116: LD_VAR 0 12
12120: PPUSH
12121: CALL_OW 351
12125: PUSH
12126: LD_VAR 0 11
12130: PPUSH
12131: LD_VAR 0 12
12135: PPUSH
12136: CALL_OW 554
12140: AND
12141: IFFALSE 12181
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12143: LD_ADDR_VAR 0 13
12147: PUSH
12148: LD_VAR 0 13
12152: PPUSH
12153: LD_VAR 0 13
12157: PUSH
12158: LD_INT 1
12160: PLUS
12161: PPUSH
12162: LD_VAR 0 11
12166: PUSH
12167: LD_VAR 0 12
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 2
12180: ST_TO_ADDR
// end ;
12181: GO 12089
12183: POP
12184: POP
12185: GO 12069
12187: POP
12188: POP
// if not list then
12189: LD_VAR 0 13
12193: NOT
12194: IFFALSE 12198
// exit ;
12196: GO 12442
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
12198: LD_ADDR_VAR 0 13
12202: PUSH
12203: LD_VAR 0 1
12207: PPUSH
12208: LD_VAR 0 13
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: CALL 36874 0 4
12223: ST_TO_ADDR
// ComStop ( flame ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: CALL_OW 141
// for i in list do
12233: LD_ADDR_VAR 0 6
12237: PUSH
12238: LD_VAR 0 13
12242: PUSH
12243: FOR_IN
12244: IFFALSE 12275
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
12246: LD_VAR 0 1
12250: PPUSH
12251: LD_VAR 0 6
12255: PUSH
12256: LD_INT 1
12258: ARRAY
12259: PPUSH
12260: LD_VAR 0 6
12264: PUSH
12265: LD_INT 2
12267: ARRAY
12268: PPUSH
12269: CALL_OW 176
12273: GO 12243
12275: POP
12276: POP
// repeat wait ( 0 0$1 ) ;
12277: LD_INT 35
12279: PPUSH
12280: CALL_OW 67
// task := GetTaskList ( flame ) ;
12284: LD_ADDR_VAR 0 14
12288: PUSH
12289: LD_VAR 0 1
12293: PPUSH
12294: CALL_OW 437
12298: ST_TO_ADDR
// if not task then
12299: LD_VAR 0 14
12303: NOT
12304: IFFALSE 12308
// exit ;
12306: GO 12442
// if task [ 1 ] [ 1 ] <> | then
12308: LD_VAR 0 14
12312: PUSH
12313: LD_INT 1
12315: ARRAY
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: PUSH
12321: LD_STRING |
12323: NONEQUAL
12324: IFFALSE 12328
// exit ;
12326: GO 12442
// _x := task [ 1 ] [ 2 ] ;
12328: LD_ADDR_VAR 0 11
12332: PUSH
12333: LD_VAR 0 14
12337: PUSH
12338: LD_INT 1
12340: ARRAY
12341: PUSH
12342: LD_INT 2
12344: ARRAY
12345: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
12346: LD_ADDR_VAR 0 12
12350: PUSH
12351: LD_VAR 0 14
12355: PUSH
12356: LD_INT 1
12358: ARRAY
12359: PUSH
12360: LD_INT 3
12362: ARRAY
12363: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
12364: LD_VAR 0 11
12368: PPUSH
12369: LD_VAR 0 12
12373: PPUSH
12374: CALL_OW 351
12378: NOT
12379: PUSH
12380: LD_VAR 0 11
12384: PPUSH
12385: LD_VAR 0 12
12389: PPUSH
12390: CALL_OW 554
12394: NOT
12395: OR
12396: IFFALSE 12430
// begin task := Delete ( task , 1 ) ;
12398: LD_ADDR_VAR 0 14
12402: PUSH
12403: LD_VAR 0 14
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 3
12415: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
12416: LD_VAR 0 1
12420: PPUSH
12421: LD_VAR 0 14
12425: PPUSH
12426: CALL_OW 446
// end ; until not HasTask ( flame ) ;
12430: LD_VAR 0 1
12434: PPUSH
12435: CALL_OW 314
12439: NOT
12440: IFFALSE 12277
// end ;
12442: LD_VAR 0 5
12446: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12447: LD_EXP 26
12451: NOT
12452: IFFALSE 12502
12454: GO 12456
12456: DISABLE
// begin initHack := true ;
12457: LD_ADDR_EXP 26
12461: PUSH
12462: LD_INT 1
12464: ST_TO_ADDR
// hackTanks := [ ] ;
12465: LD_ADDR_EXP 27
12469: PUSH
12470: EMPTY
12471: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12472: LD_ADDR_EXP 28
12476: PUSH
12477: EMPTY
12478: ST_TO_ADDR
// hackLimit := 3 ;
12479: LD_ADDR_EXP 29
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// hackDist := 12 ;
12487: LD_ADDR_EXP 30
12491: PUSH
12492: LD_INT 12
12494: ST_TO_ADDR
// hackCounter := [ ] ;
12495: LD_ADDR_EXP 31
12499: PUSH
12500: EMPTY
12501: ST_TO_ADDR
// end ;
12502: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12503: LD_EXP 26
12507: PUSH
12508: LD_INT 34
12510: PUSH
12511: LD_INT 99
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: AND
12523: IFFALSE 12776
12525: GO 12527
12527: DISABLE
12528: LD_INT 0
12530: PPUSH
12531: PPUSH
// begin enable ;
12532: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12533: LD_ADDR_VAR 0 1
12537: PUSH
12538: LD_INT 34
12540: PUSH
12541: LD_INT 99
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PPUSH
12548: CALL_OW 69
12552: PUSH
12553: FOR_IN
12554: IFFALSE 12774
// begin if not i in hackTanks then
12556: LD_VAR 0 1
12560: PUSH
12561: LD_EXP 27
12565: IN
12566: NOT
12567: IFFALSE 12650
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12569: LD_ADDR_EXP 27
12573: PUSH
12574: LD_EXP 27
12578: PPUSH
12579: LD_EXP 27
12583: PUSH
12584: LD_INT 1
12586: PLUS
12587: PPUSH
12588: LD_VAR 0 1
12592: PPUSH
12593: CALL_OW 1
12597: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12598: LD_ADDR_EXP 28
12602: PUSH
12603: LD_EXP 28
12607: PPUSH
12608: LD_EXP 28
12612: PUSH
12613: LD_INT 1
12615: PLUS
12616: PPUSH
12617: EMPTY
12618: PPUSH
12619: CALL_OW 1
12623: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12624: LD_ADDR_EXP 31
12628: PUSH
12629: LD_EXP 31
12633: PPUSH
12634: LD_EXP 31
12638: PUSH
12639: LD_INT 1
12641: PLUS
12642: PPUSH
12643: EMPTY
12644: PPUSH
12645: CALL_OW 1
12649: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12650: LD_VAR 0 1
12654: PPUSH
12655: CALL_OW 302
12659: NOT
12660: IFFALSE 12673
// begin HackUnlinkAll ( i ) ;
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL 12779 0 1
// continue ;
12671: GO 12553
// end ; HackCheckCapturedStatus ( i ) ;
12673: LD_VAR 0 1
12677: PPUSH
12678: CALL 13222 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12682: LD_ADDR_VAR 0 2
12686: PUSH
12687: LD_INT 81
12689: PUSH
12690: LD_VAR 0 1
12694: PPUSH
12695: CALL_OW 255
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 33
12706: PUSH
12707: LD_INT 3
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 91
12716: PUSH
12717: LD_VAR 0 1
12721: PUSH
12722: LD_EXP 30
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 50
12734: PUSH
12735: EMPTY
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 69
12748: ST_TO_ADDR
// if not tmp then
12749: LD_VAR 0 2
12753: NOT
12754: IFFALSE 12758
// continue ;
12756: GO 12553
// HackLink ( i , tmp ) ;
12758: LD_VAR 0 1
12762: PPUSH
12763: LD_VAR 0 2
12767: PPUSH
12768: CALL 12915 0 2
// end ;
12772: GO 12553
12774: POP
12775: POP
// end ;
12776: PPOPN 2
12778: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12779: LD_INT 0
12781: PPUSH
12782: PPUSH
12783: PPUSH
// if not hack in hackTanks then
12784: LD_VAR 0 1
12788: PUSH
12789: LD_EXP 27
12793: IN
12794: NOT
12795: IFFALSE 12799
// exit ;
12797: GO 12910
// index := GetElementIndex ( hackTanks , hack ) ;
12799: LD_ADDR_VAR 0 4
12803: PUSH
12804: LD_EXP 27
12808: PPUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL 36171 0 2
12818: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12819: LD_EXP 28
12823: PUSH
12824: LD_VAR 0 4
12828: ARRAY
12829: IFFALSE 12910
// begin for i in hackTanksCaptured [ index ] do
12831: LD_ADDR_VAR 0 3
12835: PUSH
12836: LD_EXP 28
12840: PUSH
12841: LD_VAR 0 4
12845: ARRAY
12846: PUSH
12847: FOR_IN
12848: IFFALSE 12874
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12850: LD_VAR 0 3
12854: PUSH
12855: LD_INT 1
12857: ARRAY
12858: PPUSH
12859: LD_VAR 0 3
12863: PUSH
12864: LD_INT 2
12866: ARRAY
12867: PPUSH
12868: CALL_OW 235
12872: GO 12847
12874: POP
12875: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12876: LD_ADDR_EXP 28
12880: PUSH
12881: LD_EXP 28
12885: PPUSH
12886: LD_VAR 0 4
12890: PPUSH
12891: EMPTY
12892: PPUSH
12893: CALL_OW 1
12897: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12898: LD_VAR 0 1
12902: PPUSH
12903: LD_INT 0
12905: PPUSH
12906: CALL_OW 505
// end ; end ;
12910: LD_VAR 0 2
12914: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12915: LD_INT 0
12917: PPUSH
12918: PPUSH
12919: PPUSH
// if not hack in hackTanks or not vehicles then
12920: LD_VAR 0 1
12924: PUSH
12925: LD_EXP 27
12929: IN
12930: NOT
12931: PUSH
12932: LD_VAR 0 2
12936: NOT
12937: OR
12938: IFFALSE 12942
// exit ;
12940: GO 13217
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12942: LD_ADDR_VAR 0 2
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: LD_VAR 0 2
12956: PPUSH
12957: LD_INT 1
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL 36821 0 4
12967: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12968: LD_ADDR_VAR 0 5
12972: PUSH
12973: LD_EXP 27
12977: PPUSH
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL 36171 0 2
12987: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12988: LD_EXP 28
12992: PUSH
12993: LD_VAR 0 5
12997: ARRAY
12998: PUSH
12999: LD_EXP 29
13003: LESS
13004: IFFALSE 13193
// begin for i := 1 to vehicles do
13006: LD_ADDR_VAR 0 4
13010: PUSH
13011: DOUBLE
13012: LD_INT 1
13014: DEC
13015: ST_TO_ADDR
13016: LD_VAR 0 2
13020: PUSH
13021: FOR_TO
13022: IFFALSE 13191
// begin if hackTanksCaptured [ index ] = hackLimit then
13024: LD_EXP 28
13028: PUSH
13029: LD_VAR 0 5
13033: ARRAY
13034: PUSH
13035: LD_EXP 29
13039: EQUAL
13040: IFFALSE 13044
// break ;
13042: GO 13191
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13044: LD_ADDR_EXP 31
13048: PUSH
13049: LD_EXP 31
13053: PPUSH
13054: LD_VAR 0 5
13058: PPUSH
13059: LD_EXP 31
13063: PUSH
13064: LD_VAR 0 5
13068: ARRAY
13069: PUSH
13070: LD_INT 1
13072: PLUS
13073: PPUSH
13074: CALL_OW 1
13078: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13079: LD_ADDR_EXP 28
13083: PUSH
13084: LD_EXP 28
13088: PPUSH
13089: LD_VAR 0 5
13093: PUSH
13094: LD_EXP 28
13098: PUSH
13099: LD_VAR 0 5
13103: ARRAY
13104: PUSH
13105: LD_INT 1
13107: PLUS
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PPUSH
13113: LD_VAR 0 2
13117: PUSH
13118: LD_VAR 0 4
13122: ARRAY
13123: PUSH
13124: LD_VAR 0 2
13128: PUSH
13129: LD_VAR 0 4
13133: ARRAY
13134: PPUSH
13135: CALL_OW 255
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PPUSH
13144: CALL 36386 0 3
13148: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13149: LD_VAR 0 2
13153: PUSH
13154: LD_VAR 0 4
13158: ARRAY
13159: PPUSH
13160: LD_VAR 0 1
13164: PPUSH
13165: CALL_OW 255
13169: PPUSH
13170: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13174: LD_VAR 0 2
13178: PUSH
13179: LD_VAR 0 4
13183: ARRAY
13184: PPUSH
13185: CALL_OW 141
// end ;
13189: GO 13021
13191: POP
13192: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13193: LD_VAR 0 1
13197: PPUSH
13198: LD_EXP 28
13202: PUSH
13203: LD_VAR 0 5
13207: ARRAY
13208: PUSH
13209: LD_INT 0
13211: PLUS
13212: PPUSH
13213: CALL_OW 505
// end ;
13217: LD_VAR 0 3
13221: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13222: LD_INT 0
13224: PPUSH
13225: PPUSH
13226: PPUSH
13227: PPUSH
// if not hack in hackTanks then
13228: LD_VAR 0 1
13232: PUSH
13233: LD_EXP 27
13237: IN
13238: NOT
13239: IFFALSE 13243
// exit ;
13241: GO 13483
// index := GetElementIndex ( hackTanks , hack ) ;
13243: LD_ADDR_VAR 0 4
13247: PUSH
13248: LD_EXP 27
13252: PPUSH
13253: LD_VAR 0 1
13257: PPUSH
13258: CALL 36171 0 2
13262: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13263: LD_ADDR_VAR 0 3
13267: PUSH
13268: DOUBLE
13269: LD_EXP 28
13273: PUSH
13274: LD_VAR 0 4
13278: ARRAY
13279: INC
13280: ST_TO_ADDR
13281: LD_INT 1
13283: PUSH
13284: FOR_DOWNTO
13285: IFFALSE 13457
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13287: LD_ADDR_VAR 0 5
13291: PUSH
13292: LD_EXP 28
13296: PUSH
13297: LD_VAR 0 4
13301: ARRAY
13302: PUSH
13303: LD_VAR 0 3
13307: ARRAY
13308: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13309: LD_VAR 0 5
13313: PUSH
13314: LD_INT 1
13316: ARRAY
13317: PPUSH
13318: CALL_OW 302
13322: NOT
13323: PUSH
13324: LD_VAR 0 5
13328: PUSH
13329: LD_INT 1
13331: ARRAY
13332: PPUSH
13333: CALL_OW 255
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 255
13347: NONEQUAL
13348: OR
13349: IFFALSE 13455
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13351: LD_VAR 0 5
13355: PUSH
13356: LD_INT 1
13358: ARRAY
13359: PPUSH
13360: CALL_OW 305
13364: PUSH
13365: LD_VAR 0 5
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PPUSH
13374: CALL_OW 255
13378: PUSH
13379: LD_VAR 0 1
13383: PPUSH
13384: CALL_OW 255
13388: EQUAL
13389: AND
13390: IFFALSE 13414
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13392: LD_VAR 0 5
13396: PUSH
13397: LD_INT 1
13399: ARRAY
13400: PPUSH
13401: LD_VAR 0 5
13405: PUSH
13406: LD_INT 2
13408: ARRAY
13409: PPUSH
13410: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13414: LD_ADDR_EXP 28
13418: PUSH
13419: LD_EXP 28
13423: PPUSH
13424: LD_VAR 0 4
13428: PPUSH
13429: LD_EXP 28
13433: PUSH
13434: LD_VAR 0 4
13438: ARRAY
13439: PPUSH
13440: LD_VAR 0 3
13444: PPUSH
13445: CALL_OW 3
13449: PPUSH
13450: CALL_OW 1
13454: ST_TO_ADDR
// end ; end ;
13455: GO 13284
13457: POP
13458: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13459: LD_VAR 0 1
13463: PPUSH
13464: LD_EXP 28
13468: PUSH
13469: LD_VAR 0 4
13473: ARRAY
13474: PUSH
13475: LD_INT 0
13477: PLUS
13478: PPUSH
13479: CALL_OW 505
// end ;
13483: LD_VAR 0 2
13487: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13488: LD_INT 0
13490: PPUSH
13491: PPUSH
13492: PPUSH
13493: PPUSH
// if not hack in hackTanks then
13494: LD_VAR 0 1
13498: PUSH
13499: LD_EXP 27
13503: IN
13504: NOT
13505: IFFALSE 13509
// exit ;
13507: GO 13594
// index := GetElementIndex ( hackTanks , hack ) ;
13509: LD_ADDR_VAR 0 5
13513: PUSH
13514: LD_EXP 27
13518: PPUSH
13519: LD_VAR 0 1
13523: PPUSH
13524: CALL 36171 0 2
13528: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13529: LD_ADDR_VAR 0 4
13533: PUSH
13534: DOUBLE
13535: LD_INT 1
13537: DEC
13538: ST_TO_ADDR
13539: LD_EXP 28
13543: PUSH
13544: LD_VAR 0 5
13548: ARRAY
13549: PUSH
13550: FOR_TO
13551: IFFALSE 13592
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13553: LD_EXP 28
13557: PUSH
13558: LD_VAR 0 5
13562: ARRAY
13563: PUSH
13564: LD_VAR 0 4
13568: ARRAY
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PUSH
13574: LD_VAR 0 2
13578: EQUAL
13579: IFFALSE 13590
// KillUnit ( vehicle ) ;
13581: LD_VAR 0 2
13585: PPUSH
13586: CALL_OW 66
13590: GO 13550
13592: POP
13593: POP
// end ;
13594: LD_VAR 0 3
13598: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13599: LD_EXP 32
13603: NOT
13604: IFFALSE 13639
13606: GO 13608
13608: DISABLE
// begin initMiner := true ;
13609: LD_ADDR_EXP 32
13613: PUSH
13614: LD_INT 1
13616: ST_TO_ADDR
// minersList := [ ] ;
13617: LD_ADDR_EXP 33
13621: PUSH
13622: EMPTY
13623: ST_TO_ADDR
// minerMinesList := [ ] ;
13624: LD_ADDR_EXP 34
13628: PUSH
13629: EMPTY
13630: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13631: LD_ADDR_EXP 35
13635: PUSH
13636: LD_INT 5
13638: ST_TO_ADDR
// end ;
13639: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13640: LD_EXP 32
13644: PUSH
13645: LD_INT 34
13647: PUSH
13648: LD_INT 81
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PPUSH
13655: CALL_OW 69
13659: AND
13660: IFFALSE 14121
13662: GO 13664
13664: DISABLE
13665: LD_INT 0
13667: PPUSH
13668: PPUSH
13669: PPUSH
13670: PPUSH
// begin enable ;
13671: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13672: LD_ADDR_VAR 0 1
13676: PUSH
13677: LD_INT 34
13679: PUSH
13680: LD_INT 81
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PUSH
13692: FOR_IN
13693: IFFALSE 13765
// begin if not i in minersList then
13695: LD_VAR 0 1
13699: PUSH
13700: LD_EXP 33
13704: IN
13705: NOT
13706: IFFALSE 13763
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13708: LD_ADDR_EXP 33
13712: PUSH
13713: LD_EXP 33
13717: PPUSH
13718: LD_EXP 33
13722: PUSH
13723: LD_INT 1
13725: PLUS
13726: PPUSH
13727: LD_VAR 0 1
13731: PPUSH
13732: CALL_OW 1
13736: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13737: LD_ADDR_EXP 34
13741: PUSH
13742: LD_EXP 34
13746: PPUSH
13747: LD_EXP 34
13751: PUSH
13752: LD_INT 1
13754: PLUS
13755: PPUSH
13756: EMPTY
13757: PPUSH
13758: CALL_OW 1
13762: ST_TO_ADDR
// end end ;
13763: GO 13692
13765: POP
13766: POP
// for i := minerMinesList downto 1 do
13767: LD_ADDR_VAR 0 1
13771: PUSH
13772: DOUBLE
13773: LD_EXP 34
13777: INC
13778: ST_TO_ADDR
13779: LD_INT 1
13781: PUSH
13782: FOR_DOWNTO
13783: IFFALSE 14119
// begin if IsLive ( minersList [ i ] ) then
13785: LD_EXP 33
13789: PUSH
13790: LD_VAR 0 1
13794: ARRAY
13795: PPUSH
13796: CALL_OW 300
13800: IFFALSE 13828
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13802: LD_EXP 33
13806: PUSH
13807: LD_VAR 0 1
13811: ARRAY
13812: PPUSH
13813: LD_EXP 34
13817: PUSH
13818: LD_VAR 0 1
13822: ARRAY
13823: PPUSH
13824: CALL_OW 505
// if not minerMinesList [ i ] then
13828: LD_EXP 34
13832: PUSH
13833: LD_VAR 0 1
13837: ARRAY
13838: NOT
13839: IFFALSE 13843
// continue ;
13841: GO 13782
// for j := minerMinesList [ i ] downto 1 do
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: DOUBLE
13849: LD_EXP 34
13853: PUSH
13854: LD_VAR 0 1
13858: ARRAY
13859: INC
13860: ST_TO_ADDR
13861: LD_INT 1
13863: PUSH
13864: FOR_DOWNTO
13865: IFFALSE 14115
// begin side := GetSide ( minersList [ i ] ) ;
13867: LD_ADDR_VAR 0 3
13871: PUSH
13872: LD_EXP 33
13876: PUSH
13877: LD_VAR 0 1
13881: ARRAY
13882: PPUSH
13883: CALL_OW 255
13887: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13888: LD_ADDR_VAR 0 4
13892: PUSH
13893: LD_EXP 34
13897: PUSH
13898: LD_VAR 0 1
13902: ARRAY
13903: PUSH
13904: LD_VAR 0 2
13908: ARRAY
13909: PUSH
13910: LD_INT 1
13912: ARRAY
13913: PPUSH
13914: LD_EXP 34
13918: PUSH
13919: LD_VAR 0 1
13923: ARRAY
13924: PUSH
13925: LD_VAR 0 2
13929: ARRAY
13930: PUSH
13931: LD_INT 2
13933: ARRAY
13934: PPUSH
13935: CALL_OW 428
13939: ST_TO_ADDR
// if not tmp then
13940: LD_VAR 0 4
13944: NOT
13945: IFFALSE 13949
// continue ;
13947: GO 13864
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13949: LD_VAR 0 4
13953: PUSH
13954: LD_INT 81
13956: PUSH
13957: LD_VAR 0 3
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 69
13970: IN
13971: PUSH
13972: LD_EXP 34
13976: PUSH
13977: LD_VAR 0 1
13981: ARRAY
13982: PUSH
13983: LD_VAR 0 2
13987: ARRAY
13988: PUSH
13989: LD_INT 1
13991: ARRAY
13992: PPUSH
13993: LD_EXP 34
13997: PUSH
13998: LD_VAR 0 1
14002: ARRAY
14003: PUSH
14004: LD_VAR 0 2
14008: ARRAY
14009: PUSH
14010: LD_INT 2
14012: ARRAY
14013: PPUSH
14014: CALL_OW 458
14018: AND
14019: IFFALSE 14113
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14021: LD_EXP 34
14025: PUSH
14026: LD_VAR 0 1
14030: ARRAY
14031: PUSH
14032: LD_VAR 0 2
14036: ARRAY
14037: PUSH
14038: LD_INT 1
14040: ARRAY
14041: PPUSH
14042: LD_EXP 34
14046: PUSH
14047: LD_VAR 0 1
14051: ARRAY
14052: PUSH
14053: LD_VAR 0 2
14057: ARRAY
14058: PUSH
14059: LD_INT 2
14061: ARRAY
14062: PPUSH
14063: LD_VAR 0 3
14067: PPUSH
14068: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14072: LD_ADDR_EXP 34
14076: PUSH
14077: LD_EXP 34
14081: PPUSH
14082: LD_VAR 0 1
14086: PPUSH
14087: LD_EXP 34
14091: PUSH
14092: LD_VAR 0 1
14096: ARRAY
14097: PPUSH
14098: LD_VAR 0 2
14102: PPUSH
14103: CALL_OW 3
14107: PPUSH
14108: CALL_OW 1
14112: ST_TO_ADDR
// end ; end ;
14113: GO 13864
14115: POP
14116: POP
// end ;
14117: GO 13782
14119: POP
14120: POP
// end ;
14121: PPOPN 4
14123: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
// result := false ;
14128: LD_ADDR_VAR 0 4
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14136: LD_VAR 0 1
14140: PPUSH
14141: CALL_OW 264
14145: PUSH
14146: LD_INT 81
14148: EQUAL
14149: NOT
14150: IFFALSE 14154
// exit ;
14152: GO 14394
// index := GetElementIndex ( minersList , unit ) ;
14154: LD_ADDR_VAR 0 5
14158: PUSH
14159: LD_EXP 33
14163: PPUSH
14164: LD_VAR 0 1
14168: PPUSH
14169: CALL 36171 0 2
14173: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14174: LD_EXP 34
14178: PUSH
14179: LD_VAR 0 5
14183: ARRAY
14184: PUSH
14185: LD_EXP 35
14189: GREATEREQUAL
14190: IFFALSE 14194
// exit ;
14192: GO 14394
// ComMoveXY ( unit , x , y ) ;
14194: LD_VAR 0 1
14198: PPUSH
14199: LD_VAR 0 2
14203: PPUSH
14204: LD_VAR 0 3
14208: PPUSH
14209: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14213: LD_INT 35
14215: PPUSH
14216: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14220: LD_VAR 0 1
14224: PPUSH
14225: LD_VAR 0 2
14229: PPUSH
14230: LD_VAR 0 3
14234: PPUSH
14235: CALL 67912 0 3
14239: NOT
14240: PUSH
14241: LD_VAR 0 1
14245: PPUSH
14246: CALL_OW 314
14250: AND
14251: IFFALSE 14255
// exit ;
14253: GO 14394
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14255: LD_VAR 0 2
14259: PPUSH
14260: LD_VAR 0 3
14264: PPUSH
14265: CALL_OW 428
14269: PUSH
14270: LD_VAR 0 1
14274: EQUAL
14275: PUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 314
14285: NOT
14286: AND
14287: IFFALSE 14213
// PlaySoundXY ( x , y , PlantMine ) ;
14289: LD_VAR 0 2
14293: PPUSH
14294: LD_VAR 0 3
14298: PPUSH
14299: LD_STRING PlantMine
14301: PPUSH
14302: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14306: LD_VAR 0 2
14310: PPUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: LD_VAR 0 1
14320: PPUSH
14321: CALL_OW 255
14325: PPUSH
14326: LD_INT 0
14328: PPUSH
14329: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14333: LD_ADDR_EXP 34
14337: PUSH
14338: LD_EXP 34
14342: PPUSH
14343: LD_VAR 0 5
14347: PUSH
14348: LD_EXP 34
14352: PUSH
14353: LD_VAR 0 5
14357: ARRAY
14358: PUSH
14359: LD_INT 1
14361: PLUS
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PPUSH
14367: LD_VAR 0 2
14371: PUSH
14372: LD_VAR 0 3
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL 36386 0 3
14385: ST_TO_ADDR
// result := true ;
14386: LD_ADDR_VAR 0 4
14390: PUSH
14391: LD_INT 1
14393: ST_TO_ADDR
// end ;
14394: LD_VAR 0 4
14398: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
14403: PPUSH
// if not unit in minersList then
14404: LD_VAR 0 1
14408: PUSH
14409: LD_EXP 33
14413: IN
14414: NOT
14415: IFFALSE 14419
// exit ;
14417: GO 14811
// index := GetElementIndex ( minersList , unit ) ;
14419: LD_ADDR_VAR 0 6
14423: PUSH
14424: LD_EXP 33
14428: PPUSH
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL 36171 0 2
14438: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14439: LD_ADDR_VAR 0 5
14443: PUSH
14444: DOUBLE
14445: LD_EXP 34
14449: PUSH
14450: LD_VAR 0 6
14454: ARRAY
14455: INC
14456: ST_TO_ADDR
14457: LD_INT 1
14459: PUSH
14460: FOR_DOWNTO
14461: IFFALSE 14622
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14463: LD_EXP 34
14467: PUSH
14468: LD_VAR 0 6
14472: ARRAY
14473: PUSH
14474: LD_VAR 0 5
14478: ARRAY
14479: PUSH
14480: LD_INT 1
14482: ARRAY
14483: PUSH
14484: LD_VAR 0 2
14488: EQUAL
14489: PUSH
14490: LD_EXP 34
14494: PUSH
14495: LD_VAR 0 6
14499: ARRAY
14500: PUSH
14501: LD_VAR 0 5
14505: ARRAY
14506: PUSH
14507: LD_INT 2
14509: ARRAY
14510: PUSH
14511: LD_VAR 0 3
14515: EQUAL
14516: AND
14517: IFFALSE 14620
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14519: LD_EXP 34
14523: PUSH
14524: LD_VAR 0 6
14528: ARRAY
14529: PUSH
14530: LD_VAR 0 5
14534: ARRAY
14535: PUSH
14536: LD_INT 1
14538: ARRAY
14539: PPUSH
14540: LD_EXP 34
14544: PUSH
14545: LD_VAR 0 6
14549: ARRAY
14550: PUSH
14551: LD_VAR 0 5
14555: ARRAY
14556: PUSH
14557: LD_INT 2
14559: ARRAY
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 255
14570: PPUSH
14571: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14575: LD_ADDR_EXP 34
14579: PUSH
14580: LD_EXP 34
14584: PPUSH
14585: LD_VAR 0 6
14589: PPUSH
14590: LD_EXP 34
14594: PUSH
14595: LD_VAR 0 6
14599: ARRAY
14600: PPUSH
14601: LD_VAR 0 5
14605: PPUSH
14606: CALL_OW 3
14610: PPUSH
14611: CALL_OW 1
14615: ST_TO_ADDR
// exit ;
14616: POP
14617: POP
14618: GO 14811
// end ; end ;
14620: GO 14460
14622: POP
14623: POP
// for i := minerMinesList [ index ] downto 1 do
14624: LD_ADDR_VAR 0 5
14628: PUSH
14629: DOUBLE
14630: LD_EXP 34
14634: PUSH
14635: LD_VAR 0 6
14639: ARRAY
14640: INC
14641: ST_TO_ADDR
14642: LD_INT 1
14644: PUSH
14645: FOR_DOWNTO
14646: IFFALSE 14809
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14648: LD_EXP 34
14652: PUSH
14653: LD_VAR 0 6
14657: ARRAY
14658: PUSH
14659: LD_VAR 0 5
14663: ARRAY
14664: PUSH
14665: LD_INT 1
14667: ARRAY
14668: PPUSH
14669: LD_EXP 34
14673: PUSH
14674: LD_VAR 0 6
14678: ARRAY
14679: PUSH
14680: LD_VAR 0 5
14684: ARRAY
14685: PUSH
14686: LD_INT 2
14688: ARRAY
14689: PPUSH
14690: LD_VAR 0 2
14694: PPUSH
14695: LD_VAR 0 3
14699: PPUSH
14700: CALL_OW 298
14704: PUSH
14705: LD_INT 6
14707: LESS
14708: IFFALSE 14807
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14710: LD_EXP 34
14714: PUSH
14715: LD_VAR 0 6
14719: ARRAY
14720: PUSH
14721: LD_VAR 0 5
14725: ARRAY
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: PPUSH
14731: LD_EXP 34
14735: PUSH
14736: LD_VAR 0 6
14740: ARRAY
14741: PUSH
14742: LD_VAR 0 5
14746: ARRAY
14747: PUSH
14748: LD_INT 2
14750: ARRAY
14751: PPUSH
14752: LD_VAR 0 1
14756: PPUSH
14757: CALL_OW 255
14761: PPUSH
14762: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14766: LD_ADDR_EXP 34
14770: PUSH
14771: LD_EXP 34
14775: PPUSH
14776: LD_VAR 0 6
14780: PPUSH
14781: LD_EXP 34
14785: PUSH
14786: LD_VAR 0 6
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 5
14796: PPUSH
14797: CALL_OW 3
14801: PPUSH
14802: CALL_OW 1
14806: ST_TO_ADDR
// end ; end ;
14807: GO 14645
14809: POP
14810: POP
// end ;
14811: LD_VAR 0 4
14815: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14816: LD_INT 0
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
14826: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 264
14836: PUSH
14837: LD_INT 81
14839: EQUAL
14840: NOT
14841: PUSH
14842: LD_VAR 0 1
14846: PUSH
14847: LD_EXP 33
14851: IN
14852: NOT
14853: OR
14854: IFFALSE 14858
// exit ;
14856: GO 15180
// index := GetElementIndex ( minersList , unit ) ;
14858: LD_ADDR_VAR 0 6
14862: PUSH
14863: LD_EXP 33
14867: PPUSH
14868: LD_VAR 0 1
14872: PPUSH
14873: CALL 36171 0 2
14877: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14878: LD_ADDR_VAR 0 8
14882: PUSH
14883: LD_EXP 35
14887: PUSH
14888: LD_EXP 34
14892: PUSH
14893: LD_VAR 0 6
14897: ARRAY
14898: MINUS
14899: ST_TO_ADDR
// if not minesFreeAmount then
14900: LD_VAR 0 8
14904: NOT
14905: IFFALSE 14909
// exit ;
14907: GO 15180
// tmp := [ ] ;
14909: LD_ADDR_VAR 0 7
14913: PUSH
14914: EMPTY
14915: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14916: LD_ADDR_VAR 0 5
14920: PUSH
14921: DOUBLE
14922: LD_INT 1
14924: DEC
14925: ST_TO_ADDR
14926: LD_VAR 0 8
14930: PUSH
14931: FOR_TO
14932: IFFALSE 15127
// begin _d := rand ( 0 , 5 ) ;
14934: LD_ADDR_VAR 0 11
14938: PUSH
14939: LD_INT 0
14941: PPUSH
14942: LD_INT 5
14944: PPUSH
14945: CALL_OW 12
14949: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14950: LD_ADDR_VAR 0 12
14954: PUSH
14955: LD_INT 2
14957: PPUSH
14958: LD_INT 6
14960: PPUSH
14961: CALL_OW 12
14965: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14966: LD_ADDR_VAR 0 9
14970: PUSH
14971: LD_VAR 0 2
14975: PPUSH
14976: LD_VAR 0 11
14980: PPUSH
14981: LD_VAR 0 12
14985: PPUSH
14986: CALL_OW 272
14990: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14991: LD_ADDR_VAR 0 10
14995: PUSH
14996: LD_VAR 0 3
15000: PPUSH
15001: LD_VAR 0 11
15005: PPUSH
15006: LD_VAR 0 12
15010: PPUSH
15011: CALL_OW 273
15015: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15016: LD_VAR 0 9
15020: PPUSH
15021: LD_VAR 0 10
15025: PPUSH
15026: CALL_OW 488
15030: PUSH
15031: LD_VAR 0 9
15035: PUSH
15036: LD_VAR 0 10
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_VAR 0 7
15049: IN
15050: NOT
15051: AND
15052: PUSH
15053: LD_VAR 0 9
15057: PPUSH
15058: LD_VAR 0 10
15062: PPUSH
15063: CALL_OW 458
15067: NOT
15068: AND
15069: IFFALSE 15111
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15071: LD_ADDR_VAR 0 7
15075: PUSH
15076: LD_VAR 0 7
15080: PPUSH
15081: LD_VAR 0 7
15085: PUSH
15086: LD_INT 1
15088: PLUS
15089: PPUSH
15090: LD_VAR 0 9
15094: PUSH
15095: LD_VAR 0 10
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 1
15108: ST_TO_ADDR
15109: GO 15125
// i := i - 1 ;
15111: LD_ADDR_VAR 0 5
15115: PUSH
15116: LD_VAR 0 5
15120: PUSH
15121: LD_INT 1
15123: MINUS
15124: ST_TO_ADDR
// end ;
15125: GO 14931
15127: POP
15128: POP
// for i in tmp do
15129: LD_ADDR_VAR 0 5
15133: PUSH
15134: LD_VAR 0 7
15138: PUSH
15139: FOR_IN
15140: IFFALSE 15178
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15142: LD_VAR 0 1
15146: PPUSH
15147: LD_VAR 0 5
15151: PUSH
15152: LD_INT 1
15154: ARRAY
15155: PPUSH
15156: LD_VAR 0 5
15160: PUSH
15161: LD_INT 2
15163: ARRAY
15164: PPUSH
15165: CALL 14124 0 3
15169: NOT
15170: IFFALSE 15176
// exit ;
15172: POP
15173: POP
15174: GO 15180
15176: GO 15139
15178: POP
15179: POP
// end ;
15180: LD_VAR 0 4
15184: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
15185: LD_INT 0
15187: PPUSH
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
// if not GetClass ( unit ) = class_sniper then
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 257
15203: PUSH
15204: LD_INT 5
15206: EQUAL
15207: NOT
15208: IFFALSE 15212
// exit ;
15210: GO 15600
// dist := 8 ;
15212: LD_ADDR_VAR 0 5
15216: PUSH
15217: LD_INT 8
15219: ST_TO_ADDR
// viewRange := 12 ;
15220: LD_ADDR_VAR 0 7
15224: PUSH
15225: LD_INT 12
15227: ST_TO_ADDR
// side := GetSide ( unit ) ;
15228: LD_ADDR_VAR 0 6
15232: PUSH
15233: LD_VAR 0 1
15237: PPUSH
15238: CALL_OW 255
15242: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15243: LD_INT 61
15245: PPUSH
15246: LD_VAR 0 6
15250: PPUSH
15251: CALL_OW 321
15255: PUSH
15256: LD_INT 2
15258: EQUAL
15259: IFFALSE 15269
// viewRange := 16 ;
15261: LD_ADDR_VAR 0 7
15265: PUSH
15266: LD_INT 16
15268: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15269: LD_VAR 0 1
15273: PPUSH
15274: LD_VAR 0 2
15278: PPUSH
15279: LD_VAR 0 3
15283: PPUSH
15284: CALL_OW 297
15288: PUSH
15289: LD_VAR 0 5
15293: GREATER
15294: IFFALSE 15373
// begin ComMoveXY ( unit , x , y ) ;
15296: LD_VAR 0 1
15300: PPUSH
15301: LD_VAR 0 2
15305: PPUSH
15306: LD_VAR 0 3
15310: PPUSH
15311: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15315: LD_INT 35
15317: PPUSH
15318: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15322: LD_VAR 0 1
15326: PPUSH
15327: LD_VAR 0 2
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: CALL 67912 0 3
15341: NOT
15342: IFFALSE 15346
// exit ;
15344: GO 15600
// until GetDistUnitXY ( unit , x , y ) < dist ;
15346: LD_VAR 0 1
15350: PPUSH
15351: LD_VAR 0 2
15355: PPUSH
15356: LD_VAR 0 3
15360: PPUSH
15361: CALL_OW 297
15365: PUSH
15366: LD_VAR 0 5
15370: LESS
15371: IFFALSE 15315
// end ; ComTurnXY ( unit , x , y ) ;
15373: LD_VAR 0 1
15377: PPUSH
15378: LD_VAR 0 2
15382: PPUSH
15383: LD_VAR 0 3
15387: PPUSH
15388: CALL_OW 118
// wait ( 5 ) ;
15392: LD_INT 5
15394: PPUSH
15395: CALL_OW 67
// _d := GetDir ( unit ) ;
15399: LD_ADDR_VAR 0 10
15403: PUSH
15404: LD_VAR 0 1
15408: PPUSH
15409: CALL_OW 254
15413: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
15414: LD_ADDR_VAR 0 8
15418: PUSH
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL_OW 250
15428: PPUSH
15429: LD_VAR 0 10
15433: PPUSH
15434: LD_VAR 0 5
15438: PPUSH
15439: CALL_OW 272
15443: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
15444: LD_ADDR_VAR 0 9
15448: PUSH
15449: LD_VAR 0 1
15453: PPUSH
15454: CALL_OW 251
15458: PPUSH
15459: LD_VAR 0 10
15463: PPUSH
15464: LD_VAR 0 5
15468: PPUSH
15469: CALL_OW 273
15473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15474: LD_VAR 0 8
15478: PPUSH
15479: LD_VAR 0 9
15483: PPUSH
15484: CALL_OW 488
15488: NOT
15489: IFFALSE 15493
// exit ;
15491: GO 15600
// ComAnimCustom ( unit , 1 ) ;
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 1
15500: PPUSH
15501: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15505: LD_VAR 0 8
15509: PPUSH
15510: LD_VAR 0 9
15514: PPUSH
15515: LD_VAR 0 6
15519: PPUSH
15520: LD_VAR 0 7
15524: PPUSH
15525: CALL_OW 330
// repeat wait ( 1 ) ;
15529: LD_INT 1
15531: PPUSH
15532: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
15536: LD_VAR 0 1
15540: PPUSH
15541: CALL_OW 316
15545: PUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 314
15555: OR
15556: PUSH
15557: LD_VAR 0 1
15561: PPUSH
15562: CALL_OW 302
15566: NOT
15567: OR
15568: PUSH
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL_OW 301
15578: OR
15579: IFFALSE 15529
// RemoveSeeing ( _x , _y , side ) ;
15581: LD_VAR 0 8
15585: PPUSH
15586: LD_VAR 0 9
15590: PPUSH
15591: LD_VAR 0 6
15595: PPUSH
15596: CALL_OW 331
// end ; end_of_file
15600: LD_VAR 0 4
15604: RET
// export globalGameSaveCounter ; every 0 0$1 do
15605: GO 15607
15607: DISABLE
// begin enable ;
15608: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15609: LD_STRING updateTimer(
15611: PUSH
15612: LD_OWVAR 1
15616: STR
15617: PUSH
15618: LD_STRING );
15620: STR
15621: PPUSH
15622: CALL_OW 559
// end ;
15626: END
// every 0 0$1 do
15627: GO 15629
15629: DISABLE
// begin globalGameSaveCounter := 0 ;
15630: LD_ADDR_EXP 36
15634: PUSH
15635: LD_INT 0
15637: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15638: LD_STRING setGameSaveCounter(0)
15640: PPUSH
15641: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15645: LD_STRING initStreamRollete();
15647: PPUSH
15648: CALL_OW 559
// InitStreamMode ;
15652: CALL 16995 0 0
// DefineStreamItems ( false ) ;
15656: LD_INT 0
15658: PPUSH
15659: CALL 17459 0 1
// end ;
15663: END
// export function SOS_MapStart ( ) ; begin
15664: LD_INT 0
15666: PPUSH
// if streamModeActive then
15667: LD_EXP 37
15671: IFFALSE 15680
// DefineStreamItems ( true ) ;
15673: LD_INT 1
15675: PPUSH
15676: CALL 17459 0 1
// UpdateLuaVariables ( ) ;
15680: CALL 15697 0 0
// UpdateFactoryWaypoints ( ) ;
15684: CALL 30328 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15688: CALL 30585 0 0
// end ;
15692: LD_VAR 0 1
15696: RET
// function UpdateLuaVariables ( ) ; begin
15697: LD_INT 0
15699: PPUSH
// if globalGameSaveCounter then
15700: LD_EXP 36
15704: IFFALSE 15738
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15706: LD_ADDR_EXP 36
15710: PUSH
15711: LD_EXP 36
15715: PPUSH
15716: CALL 70476 0 1
15720: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15721: LD_STRING setGameSaveCounter(
15723: PUSH
15724: LD_EXP 36
15728: STR
15729: PUSH
15730: LD_STRING )
15732: STR
15733: PPUSH
15734: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15738: LD_STRING setGameDifficulty(
15740: PUSH
15741: LD_OWVAR 67
15745: STR
15746: PUSH
15747: LD_STRING )
15749: STR
15750: PPUSH
15751: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15755: LD_STRING displayDifficulty(
15757: PUSH
15758: LD_OWVAR 67
15762: STR
15763: PUSH
15764: LD_STRING )
15766: STR
15767: PPUSH
15768: CALL_OW 559
// end ;
15772: LD_VAR 0 1
15776: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15777: LD_INT 0
15779: PPUSH
// if p2 = stream_mode then
15780: LD_VAR 0 2
15784: PUSH
15785: LD_INT 100
15787: EQUAL
15788: IFFALSE 16791
// begin if not StreamModeActive then
15790: LD_EXP 37
15794: NOT
15795: IFFALSE 15805
// StreamModeActive := true ;
15797: LD_ADDR_EXP 37
15801: PUSH
15802: LD_INT 1
15804: ST_TO_ADDR
// if p3 = 0 then
15805: LD_VAR 0 3
15809: PUSH
15810: LD_INT 0
15812: EQUAL
15813: IFFALSE 15819
// InitStreamMode ;
15815: CALL 16995 0 0
// if p3 = 1 then
15819: LD_VAR 0 3
15823: PUSH
15824: LD_INT 1
15826: EQUAL
15827: IFFALSE 15837
// sRocket := true ;
15829: LD_ADDR_EXP 42
15833: PUSH
15834: LD_INT 1
15836: ST_TO_ADDR
// if p3 = 2 then
15837: LD_VAR 0 3
15841: PUSH
15842: LD_INT 2
15844: EQUAL
15845: IFFALSE 15855
// sSpeed := true ;
15847: LD_ADDR_EXP 41
15851: PUSH
15852: LD_INT 1
15854: ST_TO_ADDR
// if p3 = 3 then
15855: LD_VAR 0 3
15859: PUSH
15860: LD_INT 3
15862: EQUAL
15863: IFFALSE 15873
// sEngine := true ;
15865: LD_ADDR_EXP 43
15869: PUSH
15870: LD_INT 1
15872: ST_TO_ADDR
// if p3 = 4 then
15873: LD_VAR 0 3
15877: PUSH
15878: LD_INT 4
15880: EQUAL
15881: IFFALSE 15891
// sSpec := true ;
15883: LD_ADDR_EXP 40
15887: PUSH
15888: LD_INT 1
15890: ST_TO_ADDR
// if p3 = 5 then
15891: LD_VAR 0 3
15895: PUSH
15896: LD_INT 5
15898: EQUAL
15899: IFFALSE 15909
// sLevel := true ;
15901: LD_ADDR_EXP 44
15905: PUSH
15906: LD_INT 1
15908: ST_TO_ADDR
// if p3 = 6 then
15909: LD_VAR 0 3
15913: PUSH
15914: LD_INT 6
15916: EQUAL
15917: IFFALSE 15927
// sArmoury := true ;
15919: LD_ADDR_EXP 45
15923: PUSH
15924: LD_INT 1
15926: ST_TO_ADDR
// if p3 = 7 then
15927: LD_VAR 0 3
15931: PUSH
15932: LD_INT 7
15934: EQUAL
15935: IFFALSE 15945
// sRadar := true ;
15937: LD_ADDR_EXP 46
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// if p3 = 8 then
15945: LD_VAR 0 3
15949: PUSH
15950: LD_INT 8
15952: EQUAL
15953: IFFALSE 15963
// sBunker := true ;
15955: LD_ADDR_EXP 47
15959: PUSH
15960: LD_INT 1
15962: ST_TO_ADDR
// if p3 = 9 then
15963: LD_VAR 0 3
15967: PUSH
15968: LD_INT 9
15970: EQUAL
15971: IFFALSE 15981
// sHack := true ;
15973: LD_ADDR_EXP 48
15977: PUSH
15978: LD_INT 1
15980: ST_TO_ADDR
// if p3 = 10 then
15981: LD_VAR 0 3
15985: PUSH
15986: LD_INT 10
15988: EQUAL
15989: IFFALSE 15999
// sFire := true ;
15991: LD_ADDR_EXP 49
15995: PUSH
15996: LD_INT 1
15998: ST_TO_ADDR
// if p3 = 11 then
15999: LD_VAR 0 3
16003: PUSH
16004: LD_INT 11
16006: EQUAL
16007: IFFALSE 16017
// sRefresh := true ;
16009: LD_ADDR_EXP 50
16013: PUSH
16014: LD_INT 1
16016: ST_TO_ADDR
// if p3 = 12 then
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 12
16024: EQUAL
16025: IFFALSE 16035
// sExp := true ;
16027: LD_ADDR_EXP 51
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// if p3 = 13 then
16035: LD_VAR 0 3
16039: PUSH
16040: LD_INT 13
16042: EQUAL
16043: IFFALSE 16053
// sDepot := true ;
16045: LD_ADDR_EXP 52
16049: PUSH
16050: LD_INT 1
16052: ST_TO_ADDR
// if p3 = 14 then
16053: LD_VAR 0 3
16057: PUSH
16058: LD_INT 14
16060: EQUAL
16061: IFFALSE 16071
// sFlag := true ;
16063: LD_ADDR_EXP 53
16067: PUSH
16068: LD_INT 1
16070: ST_TO_ADDR
// if p3 = 15 then
16071: LD_VAR 0 3
16075: PUSH
16076: LD_INT 15
16078: EQUAL
16079: IFFALSE 16089
// sKamikadze := true ;
16081: LD_ADDR_EXP 61
16085: PUSH
16086: LD_INT 1
16088: ST_TO_ADDR
// if p3 = 16 then
16089: LD_VAR 0 3
16093: PUSH
16094: LD_INT 16
16096: EQUAL
16097: IFFALSE 16107
// sTroll := true ;
16099: LD_ADDR_EXP 62
16103: PUSH
16104: LD_INT 1
16106: ST_TO_ADDR
// if p3 = 17 then
16107: LD_VAR 0 3
16111: PUSH
16112: LD_INT 17
16114: EQUAL
16115: IFFALSE 16125
// sSlow := true ;
16117: LD_ADDR_EXP 63
16121: PUSH
16122: LD_INT 1
16124: ST_TO_ADDR
// if p3 = 18 then
16125: LD_VAR 0 3
16129: PUSH
16130: LD_INT 18
16132: EQUAL
16133: IFFALSE 16143
// sLack := true ;
16135: LD_ADDR_EXP 64
16139: PUSH
16140: LD_INT 1
16142: ST_TO_ADDR
// if p3 = 19 then
16143: LD_VAR 0 3
16147: PUSH
16148: LD_INT 19
16150: EQUAL
16151: IFFALSE 16161
// sTank := true ;
16153: LD_ADDR_EXP 66
16157: PUSH
16158: LD_INT 1
16160: ST_TO_ADDR
// if p3 = 20 then
16161: LD_VAR 0 3
16165: PUSH
16166: LD_INT 20
16168: EQUAL
16169: IFFALSE 16179
// sRemote := true ;
16171: LD_ADDR_EXP 67
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// if p3 = 21 then
16179: LD_VAR 0 3
16183: PUSH
16184: LD_INT 21
16186: EQUAL
16187: IFFALSE 16197
// sPowell := true ;
16189: LD_ADDR_EXP 68
16193: PUSH
16194: LD_INT 1
16196: ST_TO_ADDR
// if p3 = 22 then
16197: LD_VAR 0 3
16201: PUSH
16202: LD_INT 22
16204: EQUAL
16205: IFFALSE 16215
// sTeleport := true ;
16207: LD_ADDR_EXP 71
16211: PUSH
16212: LD_INT 1
16214: ST_TO_ADDR
// if p3 = 23 then
16215: LD_VAR 0 3
16219: PUSH
16220: LD_INT 23
16222: EQUAL
16223: IFFALSE 16233
// sOilTower := true ;
16225: LD_ADDR_EXP 73
16229: PUSH
16230: LD_INT 1
16232: ST_TO_ADDR
// if p3 = 24 then
16233: LD_VAR 0 3
16237: PUSH
16238: LD_INT 24
16240: EQUAL
16241: IFFALSE 16251
// sShovel := true ;
16243: LD_ADDR_EXP 74
16247: PUSH
16248: LD_INT 1
16250: ST_TO_ADDR
// if p3 = 25 then
16251: LD_VAR 0 3
16255: PUSH
16256: LD_INT 25
16258: EQUAL
16259: IFFALSE 16269
// sSheik := true ;
16261: LD_ADDR_EXP 75
16265: PUSH
16266: LD_INT 1
16268: ST_TO_ADDR
// if p3 = 26 then
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 26
16276: EQUAL
16277: IFFALSE 16287
// sEarthquake := true ;
16279: LD_ADDR_EXP 77
16283: PUSH
16284: LD_INT 1
16286: ST_TO_ADDR
// if p3 = 27 then
16287: LD_VAR 0 3
16291: PUSH
16292: LD_INT 27
16294: EQUAL
16295: IFFALSE 16305
// sAI := true ;
16297: LD_ADDR_EXP 78
16301: PUSH
16302: LD_INT 1
16304: ST_TO_ADDR
// if p3 = 28 then
16305: LD_VAR 0 3
16309: PUSH
16310: LD_INT 28
16312: EQUAL
16313: IFFALSE 16323
// sCargo := true ;
16315: LD_ADDR_EXP 81
16319: PUSH
16320: LD_INT 1
16322: ST_TO_ADDR
// if p3 = 29 then
16323: LD_VAR 0 3
16327: PUSH
16328: LD_INT 29
16330: EQUAL
16331: IFFALSE 16341
// sDLaser := true ;
16333: LD_ADDR_EXP 82
16337: PUSH
16338: LD_INT 1
16340: ST_TO_ADDR
// if p3 = 30 then
16341: LD_VAR 0 3
16345: PUSH
16346: LD_INT 30
16348: EQUAL
16349: IFFALSE 16359
// sExchange := true ;
16351: LD_ADDR_EXP 83
16355: PUSH
16356: LD_INT 1
16358: ST_TO_ADDR
// if p3 = 31 then
16359: LD_VAR 0 3
16363: PUSH
16364: LD_INT 31
16366: EQUAL
16367: IFFALSE 16377
// sFac := true ;
16369: LD_ADDR_EXP 84
16373: PUSH
16374: LD_INT 1
16376: ST_TO_ADDR
// if p3 = 32 then
16377: LD_VAR 0 3
16381: PUSH
16382: LD_INT 32
16384: EQUAL
16385: IFFALSE 16395
// sPower := true ;
16387: LD_ADDR_EXP 85
16391: PUSH
16392: LD_INT 1
16394: ST_TO_ADDR
// if p3 = 33 then
16395: LD_VAR 0 3
16399: PUSH
16400: LD_INT 33
16402: EQUAL
16403: IFFALSE 16413
// sRandom := true ;
16405: LD_ADDR_EXP 86
16409: PUSH
16410: LD_INT 1
16412: ST_TO_ADDR
// if p3 = 34 then
16413: LD_VAR 0 3
16417: PUSH
16418: LD_INT 34
16420: EQUAL
16421: IFFALSE 16431
// sShield := true ;
16423: LD_ADDR_EXP 87
16427: PUSH
16428: LD_INT 1
16430: ST_TO_ADDR
// if p3 = 35 then
16431: LD_VAR 0 3
16435: PUSH
16436: LD_INT 35
16438: EQUAL
16439: IFFALSE 16449
// sTime := true ;
16441: LD_ADDR_EXP 88
16445: PUSH
16446: LD_INT 1
16448: ST_TO_ADDR
// if p3 = 36 then
16449: LD_VAR 0 3
16453: PUSH
16454: LD_INT 36
16456: EQUAL
16457: IFFALSE 16467
// sTools := true ;
16459: LD_ADDR_EXP 89
16463: PUSH
16464: LD_INT 1
16466: ST_TO_ADDR
// if p3 = 101 then
16467: LD_VAR 0 3
16471: PUSH
16472: LD_INT 101
16474: EQUAL
16475: IFFALSE 16485
// sSold := true ;
16477: LD_ADDR_EXP 54
16481: PUSH
16482: LD_INT 1
16484: ST_TO_ADDR
// if p3 = 102 then
16485: LD_VAR 0 3
16489: PUSH
16490: LD_INT 102
16492: EQUAL
16493: IFFALSE 16503
// sDiff := true ;
16495: LD_ADDR_EXP 55
16499: PUSH
16500: LD_INT 1
16502: ST_TO_ADDR
// if p3 = 103 then
16503: LD_VAR 0 3
16507: PUSH
16508: LD_INT 103
16510: EQUAL
16511: IFFALSE 16521
// sFog := true ;
16513: LD_ADDR_EXP 58
16517: PUSH
16518: LD_INT 1
16520: ST_TO_ADDR
// if p3 = 104 then
16521: LD_VAR 0 3
16525: PUSH
16526: LD_INT 104
16528: EQUAL
16529: IFFALSE 16539
// sReset := true ;
16531: LD_ADDR_EXP 59
16535: PUSH
16536: LD_INT 1
16538: ST_TO_ADDR
// if p3 = 105 then
16539: LD_VAR 0 3
16543: PUSH
16544: LD_INT 105
16546: EQUAL
16547: IFFALSE 16557
// sSun := true ;
16549: LD_ADDR_EXP 60
16553: PUSH
16554: LD_INT 1
16556: ST_TO_ADDR
// if p3 = 106 then
16557: LD_VAR 0 3
16561: PUSH
16562: LD_INT 106
16564: EQUAL
16565: IFFALSE 16575
// sTiger := true ;
16567: LD_ADDR_EXP 56
16571: PUSH
16572: LD_INT 1
16574: ST_TO_ADDR
// if p3 = 107 then
16575: LD_VAR 0 3
16579: PUSH
16580: LD_INT 107
16582: EQUAL
16583: IFFALSE 16593
// sBomb := true ;
16585: LD_ADDR_EXP 57
16589: PUSH
16590: LD_INT 1
16592: ST_TO_ADDR
// if p3 = 108 then
16593: LD_VAR 0 3
16597: PUSH
16598: LD_INT 108
16600: EQUAL
16601: IFFALSE 16611
// sWound := true ;
16603: LD_ADDR_EXP 65
16607: PUSH
16608: LD_INT 1
16610: ST_TO_ADDR
// if p3 = 109 then
16611: LD_VAR 0 3
16615: PUSH
16616: LD_INT 109
16618: EQUAL
16619: IFFALSE 16629
// sBetray := true ;
16621: LD_ADDR_EXP 69
16625: PUSH
16626: LD_INT 1
16628: ST_TO_ADDR
// if p3 = 110 then
16629: LD_VAR 0 3
16633: PUSH
16634: LD_INT 110
16636: EQUAL
16637: IFFALSE 16647
// sContamin := true ;
16639: LD_ADDR_EXP 70
16643: PUSH
16644: LD_INT 1
16646: ST_TO_ADDR
// if p3 = 111 then
16647: LD_VAR 0 3
16651: PUSH
16652: LD_INT 111
16654: EQUAL
16655: IFFALSE 16665
// sOil := true ;
16657: LD_ADDR_EXP 72
16661: PUSH
16662: LD_INT 1
16664: ST_TO_ADDR
// if p3 = 112 then
16665: LD_VAR 0 3
16669: PUSH
16670: LD_INT 112
16672: EQUAL
16673: IFFALSE 16683
// sStu := true ;
16675: LD_ADDR_EXP 76
16679: PUSH
16680: LD_INT 1
16682: ST_TO_ADDR
// if p3 = 113 then
16683: LD_VAR 0 3
16687: PUSH
16688: LD_INT 113
16690: EQUAL
16691: IFFALSE 16701
// sBazooka := true ;
16693: LD_ADDR_EXP 79
16697: PUSH
16698: LD_INT 1
16700: ST_TO_ADDR
// if p3 = 114 then
16701: LD_VAR 0 3
16705: PUSH
16706: LD_INT 114
16708: EQUAL
16709: IFFALSE 16719
// sMortar := true ;
16711: LD_ADDR_EXP 80
16715: PUSH
16716: LD_INT 1
16718: ST_TO_ADDR
// if p3 = 115 then
16719: LD_VAR 0 3
16723: PUSH
16724: LD_INT 115
16726: EQUAL
16727: IFFALSE 16737
// sRanger := true ;
16729: LD_ADDR_EXP 90
16733: PUSH
16734: LD_INT 1
16736: ST_TO_ADDR
// if p3 = 116 then
16737: LD_VAR 0 3
16741: PUSH
16742: LD_INT 116
16744: EQUAL
16745: IFFALSE 16755
// sComputer := true ;
16747: LD_ADDR_EXP 91
16751: PUSH
16752: LD_INT 1
16754: ST_TO_ADDR
// if p3 = 117 then
16755: LD_VAR 0 3
16759: PUSH
16760: LD_INT 117
16762: EQUAL
16763: IFFALSE 16773
// s30 := true ;
16765: LD_ADDR_EXP 92
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// if p3 = 118 then
16773: LD_VAR 0 3
16777: PUSH
16778: LD_INT 118
16780: EQUAL
16781: IFFALSE 16791
// s60 := true ;
16783: LD_ADDR_EXP 93
16787: PUSH
16788: LD_INT 1
16790: ST_TO_ADDR
// end ; if p2 = hack_mode then
16791: LD_VAR 0 2
16795: PUSH
16796: LD_INT 101
16798: EQUAL
16799: IFFALSE 16927
// begin case p3 of 1 :
16801: LD_VAR 0 3
16805: PUSH
16806: LD_INT 1
16808: DOUBLE
16809: EQUAL
16810: IFTRUE 16814
16812: GO 16821
16814: POP
// hHackUnlimitedResources ; 2 :
16815: CALL 29074 0 0
16819: GO 16927
16821: LD_INT 2
16823: DOUBLE
16824: EQUAL
16825: IFTRUE 16829
16827: GO 16836
16829: POP
// hHackSetLevel10 ; 3 :
16830: CALL 29207 0 0
16834: GO 16927
16836: LD_INT 3
16838: DOUBLE
16839: EQUAL
16840: IFTRUE 16844
16842: GO 16851
16844: POP
// hHackSetLevel10YourUnits ; 4 :
16845: CALL 29292 0 0
16849: GO 16927
16851: LD_INT 4
16853: DOUBLE
16854: EQUAL
16855: IFTRUE 16859
16857: GO 16866
16859: POP
// hHackInvincible ; 5 :
16860: CALL 29740 0 0
16864: GO 16927
16866: LD_INT 5
16868: DOUBLE
16869: EQUAL
16870: IFTRUE 16874
16872: GO 16881
16874: POP
// hHackInvisible ; 6 :
16875: CALL 29851 0 0
16879: GO 16927
16881: LD_INT 6
16883: DOUBLE
16884: EQUAL
16885: IFTRUE 16889
16887: GO 16896
16889: POP
// hHackChangeYourSide ; 7 :
16890: CALL 29908 0 0
16894: GO 16927
16896: LD_INT 7
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16911
16904: POP
// hHackChangeUnitSide ; 8 :
16905: CALL 29950 0 0
16909: GO 16927
16911: LD_INT 8
16913: DOUBLE
16914: EQUAL
16915: IFTRUE 16919
16917: GO 16926
16919: POP
// hHackFog ; end ;
16920: CALL 30051 0 0
16924: GO 16927
16926: POP
// end ; if p2 = game_save_mode then
16927: LD_VAR 0 2
16931: PUSH
16932: LD_INT 102
16934: EQUAL
16935: IFFALSE 16990
// begin if p3 = 1 then
16937: LD_VAR 0 3
16941: PUSH
16942: LD_INT 1
16944: EQUAL
16945: IFFALSE 16957
// globalGameSaveCounter := p4 ;
16947: LD_ADDR_EXP 36
16951: PUSH
16952: LD_VAR 0 4
16956: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16957: LD_VAR 0 3
16961: PUSH
16962: LD_INT 2
16964: EQUAL
16965: PUSH
16966: LD_EXP 36
16970: AND
16971: IFFALSE 16990
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16973: LD_STRING setGameSaveCounter(
16975: PUSH
16976: LD_EXP 36
16980: STR
16981: PUSH
16982: LD_STRING )
16984: STR
16985: PPUSH
16986: CALL_OW 559
// end ; end ;
16990: LD_VAR 0 7
16994: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16995: LD_INT 0
16997: PPUSH
// streamModeActive := false ;
16998: LD_ADDR_EXP 37
17002: PUSH
17003: LD_INT 0
17005: ST_TO_ADDR
// normalCounter := 36 ;
17006: LD_ADDR_EXP 38
17010: PUSH
17011: LD_INT 36
17013: ST_TO_ADDR
// hardcoreCounter := 18 ;
17014: LD_ADDR_EXP 39
17018: PUSH
17019: LD_INT 18
17021: ST_TO_ADDR
// sRocket := false ;
17022: LD_ADDR_EXP 42
17026: PUSH
17027: LD_INT 0
17029: ST_TO_ADDR
// sSpeed := false ;
17030: LD_ADDR_EXP 41
17034: PUSH
17035: LD_INT 0
17037: ST_TO_ADDR
// sEngine := false ;
17038: LD_ADDR_EXP 43
17042: PUSH
17043: LD_INT 0
17045: ST_TO_ADDR
// sSpec := false ;
17046: LD_ADDR_EXP 40
17050: PUSH
17051: LD_INT 0
17053: ST_TO_ADDR
// sLevel := false ;
17054: LD_ADDR_EXP 44
17058: PUSH
17059: LD_INT 0
17061: ST_TO_ADDR
// sArmoury := false ;
17062: LD_ADDR_EXP 45
17066: PUSH
17067: LD_INT 0
17069: ST_TO_ADDR
// sRadar := false ;
17070: LD_ADDR_EXP 46
17074: PUSH
17075: LD_INT 0
17077: ST_TO_ADDR
// sBunker := false ;
17078: LD_ADDR_EXP 47
17082: PUSH
17083: LD_INT 0
17085: ST_TO_ADDR
// sHack := false ;
17086: LD_ADDR_EXP 48
17090: PUSH
17091: LD_INT 0
17093: ST_TO_ADDR
// sFire := false ;
17094: LD_ADDR_EXP 49
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// sRefresh := false ;
17102: LD_ADDR_EXP 50
17106: PUSH
17107: LD_INT 0
17109: ST_TO_ADDR
// sExp := false ;
17110: LD_ADDR_EXP 51
17114: PUSH
17115: LD_INT 0
17117: ST_TO_ADDR
// sDepot := false ;
17118: LD_ADDR_EXP 52
17122: PUSH
17123: LD_INT 0
17125: ST_TO_ADDR
// sFlag := false ;
17126: LD_ADDR_EXP 53
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
// sKamikadze := false ;
17134: LD_ADDR_EXP 61
17138: PUSH
17139: LD_INT 0
17141: ST_TO_ADDR
// sTroll := false ;
17142: LD_ADDR_EXP 62
17146: PUSH
17147: LD_INT 0
17149: ST_TO_ADDR
// sSlow := false ;
17150: LD_ADDR_EXP 63
17154: PUSH
17155: LD_INT 0
17157: ST_TO_ADDR
// sLack := false ;
17158: LD_ADDR_EXP 64
17162: PUSH
17163: LD_INT 0
17165: ST_TO_ADDR
// sTank := false ;
17166: LD_ADDR_EXP 66
17170: PUSH
17171: LD_INT 0
17173: ST_TO_ADDR
// sRemote := false ;
17174: LD_ADDR_EXP 67
17178: PUSH
17179: LD_INT 0
17181: ST_TO_ADDR
// sPowell := false ;
17182: LD_ADDR_EXP 68
17186: PUSH
17187: LD_INT 0
17189: ST_TO_ADDR
// sTeleport := false ;
17190: LD_ADDR_EXP 71
17194: PUSH
17195: LD_INT 0
17197: ST_TO_ADDR
// sOilTower := false ;
17198: LD_ADDR_EXP 73
17202: PUSH
17203: LD_INT 0
17205: ST_TO_ADDR
// sShovel := false ;
17206: LD_ADDR_EXP 74
17210: PUSH
17211: LD_INT 0
17213: ST_TO_ADDR
// sSheik := false ;
17214: LD_ADDR_EXP 75
17218: PUSH
17219: LD_INT 0
17221: ST_TO_ADDR
// sEarthquake := false ;
17222: LD_ADDR_EXP 77
17226: PUSH
17227: LD_INT 0
17229: ST_TO_ADDR
// sAI := false ;
17230: LD_ADDR_EXP 78
17234: PUSH
17235: LD_INT 0
17237: ST_TO_ADDR
// sCargo := false ;
17238: LD_ADDR_EXP 81
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// sDLaser := false ;
17246: LD_ADDR_EXP 82
17250: PUSH
17251: LD_INT 0
17253: ST_TO_ADDR
// sExchange := false ;
17254: LD_ADDR_EXP 83
17258: PUSH
17259: LD_INT 0
17261: ST_TO_ADDR
// sFac := false ;
17262: LD_ADDR_EXP 84
17266: PUSH
17267: LD_INT 0
17269: ST_TO_ADDR
// sPower := false ;
17270: LD_ADDR_EXP 85
17274: PUSH
17275: LD_INT 0
17277: ST_TO_ADDR
// sRandom := false ;
17278: LD_ADDR_EXP 86
17282: PUSH
17283: LD_INT 0
17285: ST_TO_ADDR
// sShield := false ;
17286: LD_ADDR_EXP 87
17290: PUSH
17291: LD_INT 0
17293: ST_TO_ADDR
// sTime := false ;
17294: LD_ADDR_EXP 88
17298: PUSH
17299: LD_INT 0
17301: ST_TO_ADDR
// sTools := false ;
17302: LD_ADDR_EXP 89
17306: PUSH
17307: LD_INT 0
17309: ST_TO_ADDR
// sSold := false ;
17310: LD_ADDR_EXP 54
17314: PUSH
17315: LD_INT 0
17317: ST_TO_ADDR
// sDiff := false ;
17318: LD_ADDR_EXP 55
17322: PUSH
17323: LD_INT 0
17325: ST_TO_ADDR
// sFog := false ;
17326: LD_ADDR_EXP 58
17330: PUSH
17331: LD_INT 0
17333: ST_TO_ADDR
// sReset := false ;
17334: LD_ADDR_EXP 59
17338: PUSH
17339: LD_INT 0
17341: ST_TO_ADDR
// sSun := false ;
17342: LD_ADDR_EXP 60
17346: PUSH
17347: LD_INT 0
17349: ST_TO_ADDR
// sTiger := false ;
17350: LD_ADDR_EXP 56
17354: PUSH
17355: LD_INT 0
17357: ST_TO_ADDR
// sBomb := false ;
17358: LD_ADDR_EXP 57
17362: PUSH
17363: LD_INT 0
17365: ST_TO_ADDR
// sWound := false ;
17366: LD_ADDR_EXP 65
17370: PUSH
17371: LD_INT 0
17373: ST_TO_ADDR
// sBetray := false ;
17374: LD_ADDR_EXP 69
17378: PUSH
17379: LD_INT 0
17381: ST_TO_ADDR
// sContamin := false ;
17382: LD_ADDR_EXP 70
17386: PUSH
17387: LD_INT 0
17389: ST_TO_ADDR
// sOil := false ;
17390: LD_ADDR_EXP 72
17394: PUSH
17395: LD_INT 0
17397: ST_TO_ADDR
// sStu := false ;
17398: LD_ADDR_EXP 76
17402: PUSH
17403: LD_INT 0
17405: ST_TO_ADDR
// sBazooka := false ;
17406: LD_ADDR_EXP 79
17410: PUSH
17411: LD_INT 0
17413: ST_TO_ADDR
// sMortar := false ;
17414: LD_ADDR_EXP 80
17418: PUSH
17419: LD_INT 0
17421: ST_TO_ADDR
// sRanger := false ;
17422: LD_ADDR_EXP 90
17426: PUSH
17427: LD_INT 0
17429: ST_TO_ADDR
// sComputer := false ;
17430: LD_ADDR_EXP 91
17434: PUSH
17435: LD_INT 0
17437: ST_TO_ADDR
// s30 := false ;
17438: LD_ADDR_EXP 92
17442: PUSH
17443: LD_INT 0
17445: ST_TO_ADDR
// s60 := false ;
17446: LD_ADDR_EXP 93
17450: PUSH
17451: LD_INT 0
17453: ST_TO_ADDR
// end ;
17454: LD_VAR 0 1
17458: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17459: LD_INT 0
17461: PPUSH
17462: PPUSH
17463: PPUSH
17464: PPUSH
17465: PPUSH
17466: PPUSH
17467: PPUSH
// result := [ ] ;
17468: LD_ADDR_VAR 0 2
17472: PUSH
17473: EMPTY
17474: ST_TO_ADDR
// if campaign_id = 1 then
17475: LD_OWVAR 69
17479: PUSH
17480: LD_INT 1
17482: EQUAL
17483: IFFALSE 20649
// begin case mission_number of 1 :
17485: LD_OWVAR 70
17489: PUSH
17490: LD_INT 1
17492: DOUBLE
17493: EQUAL
17494: IFTRUE 17498
17496: GO 17574
17498: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: LD_INT 2
17506: PUSH
17507: LD_INT 4
17509: PUSH
17510: LD_INT 11
17512: PUSH
17513: LD_INT 12
17515: PUSH
17516: LD_INT 15
17518: PUSH
17519: LD_INT 16
17521: PUSH
17522: LD_INT 22
17524: PUSH
17525: LD_INT 23
17527: PUSH
17528: LD_INT 26
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 101
17544: PUSH
17545: LD_INT 102
17547: PUSH
17548: LD_INT 106
17550: PUSH
17551: LD_INT 116
17553: PUSH
17554: LD_INT 117
17556: PUSH
17557: LD_INT 118
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: ST_TO_ADDR
17572: GO 20647
17574: LD_INT 2
17576: DOUBLE
17577: EQUAL
17578: IFTRUE 17582
17580: GO 17666
17582: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17583: LD_ADDR_VAR 0 2
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 4
17593: PUSH
17594: LD_INT 11
17596: PUSH
17597: LD_INT 12
17599: PUSH
17600: LD_INT 15
17602: PUSH
17603: LD_INT 16
17605: PUSH
17606: LD_INT 22
17608: PUSH
17609: LD_INT 23
17611: PUSH
17612: LD_INT 26
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 101
17628: PUSH
17629: LD_INT 102
17631: PUSH
17632: LD_INT 105
17634: PUSH
17635: LD_INT 106
17637: PUSH
17638: LD_INT 108
17640: PUSH
17641: LD_INT 116
17643: PUSH
17644: LD_INT 117
17646: PUSH
17647: LD_INT 118
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: ST_TO_ADDR
17664: GO 20647
17666: LD_INT 3
17668: DOUBLE
17669: EQUAL
17670: IFTRUE 17674
17672: GO 17762
17674: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17675: LD_ADDR_VAR 0 2
17679: PUSH
17680: LD_INT 2
17682: PUSH
17683: LD_INT 4
17685: PUSH
17686: LD_INT 5
17688: PUSH
17689: LD_INT 11
17691: PUSH
17692: LD_INT 12
17694: PUSH
17695: LD_INT 15
17697: PUSH
17698: LD_INT 16
17700: PUSH
17701: LD_INT 22
17703: PUSH
17704: LD_INT 26
17706: PUSH
17707: LD_INT 36
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 101
17724: PUSH
17725: LD_INT 102
17727: PUSH
17728: LD_INT 105
17730: PUSH
17731: LD_INT 106
17733: PUSH
17734: LD_INT 108
17736: PUSH
17737: LD_INT 116
17739: PUSH
17740: LD_INT 117
17742: PUSH
17743: LD_INT 118
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: ST_TO_ADDR
17760: GO 20647
17762: LD_INT 4
17764: DOUBLE
17765: EQUAL
17766: IFTRUE 17770
17768: GO 17866
17770: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17771: LD_ADDR_VAR 0 2
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: LD_INT 4
17781: PUSH
17782: LD_INT 5
17784: PUSH
17785: LD_INT 8
17787: PUSH
17788: LD_INT 11
17790: PUSH
17791: LD_INT 12
17793: PUSH
17794: LD_INT 15
17796: PUSH
17797: LD_INT 16
17799: PUSH
17800: LD_INT 22
17802: PUSH
17803: LD_INT 23
17805: PUSH
17806: LD_INT 26
17808: PUSH
17809: LD_INT 36
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 101
17828: PUSH
17829: LD_INT 102
17831: PUSH
17832: LD_INT 105
17834: PUSH
17835: LD_INT 106
17837: PUSH
17838: LD_INT 108
17840: PUSH
17841: LD_INT 116
17843: PUSH
17844: LD_INT 117
17846: PUSH
17847: LD_INT 118
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: ST_TO_ADDR
17864: GO 20647
17866: LD_INT 5
17868: DOUBLE
17869: EQUAL
17870: IFTRUE 17874
17872: GO 17986
17874: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17875: LD_ADDR_VAR 0 2
17879: PUSH
17880: LD_INT 2
17882: PUSH
17883: LD_INT 4
17885: PUSH
17886: LD_INT 5
17888: PUSH
17889: LD_INT 6
17891: PUSH
17892: LD_INT 8
17894: PUSH
17895: LD_INT 11
17897: PUSH
17898: LD_INT 12
17900: PUSH
17901: LD_INT 15
17903: PUSH
17904: LD_INT 16
17906: PUSH
17907: LD_INT 22
17909: PUSH
17910: LD_INT 23
17912: PUSH
17913: LD_INT 25
17915: PUSH
17916: LD_INT 26
17918: PUSH
17919: LD_INT 36
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 101
17940: PUSH
17941: LD_INT 102
17943: PUSH
17944: LD_INT 105
17946: PUSH
17947: LD_INT 106
17949: PUSH
17950: LD_INT 108
17952: PUSH
17953: LD_INT 109
17955: PUSH
17956: LD_INT 112
17958: PUSH
17959: LD_INT 116
17961: PUSH
17962: LD_INT 117
17964: PUSH
17965: LD_INT 118
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: ST_TO_ADDR
17984: GO 20647
17986: LD_INT 6
17988: DOUBLE
17989: EQUAL
17990: IFTRUE 17994
17992: GO 18126
17994: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17995: LD_ADDR_VAR 0 2
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: LD_INT 4
18005: PUSH
18006: LD_INT 5
18008: PUSH
18009: LD_INT 6
18011: PUSH
18012: LD_INT 8
18014: PUSH
18015: LD_INT 11
18017: PUSH
18018: LD_INT 12
18020: PUSH
18021: LD_INT 15
18023: PUSH
18024: LD_INT 16
18026: PUSH
18027: LD_INT 20
18029: PUSH
18030: LD_INT 21
18032: PUSH
18033: LD_INT 22
18035: PUSH
18036: LD_INT 23
18038: PUSH
18039: LD_INT 25
18041: PUSH
18042: LD_INT 26
18044: PUSH
18045: LD_INT 30
18047: PUSH
18048: LD_INT 31
18050: PUSH
18051: LD_INT 32
18053: PUSH
18054: LD_INT 36
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 101
18080: PUSH
18081: LD_INT 102
18083: PUSH
18084: LD_INT 105
18086: PUSH
18087: LD_INT 106
18089: PUSH
18090: LD_INT 108
18092: PUSH
18093: LD_INT 109
18095: PUSH
18096: LD_INT 112
18098: PUSH
18099: LD_INT 116
18101: PUSH
18102: LD_INT 117
18104: PUSH
18105: LD_INT 118
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: ST_TO_ADDR
18124: GO 20647
18126: LD_INT 7
18128: DOUBLE
18129: EQUAL
18130: IFTRUE 18134
18132: GO 18246
18134: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18135: LD_ADDR_VAR 0 2
18139: PUSH
18140: LD_INT 2
18142: PUSH
18143: LD_INT 4
18145: PUSH
18146: LD_INT 5
18148: PUSH
18149: LD_INT 7
18151: PUSH
18152: LD_INT 11
18154: PUSH
18155: LD_INT 12
18157: PUSH
18158: LD_INT 15
18160: PUSH
18161: LD_INT 16
18163: PUSH
18164: LD_INT 20
18166: PUSH
18167: LD_INT 21
18169: PUSH
18170: LD_INT 22
18172: PUSH
18173: LD_INT 23
18175: PUSH
18176: LD_INT 25
18178: PUSH
18179: LD_INT 26
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 101
18200: PUSH
18201: LD_INT 102
18203: PUSH
18204: LD_INT 103
18206: PUSH
18207: LD_INT 105
18209: PUSH
18210: LD_INT 106
18212: PUSH
18213: LD_INT 108
18215: PUSH
18216: LD_INT 112
18218: PUSH
18219: LD_INT 116
18221: PUSH
18222: LD_INT 117
18224: PUSH
18225: LD_INT 118
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: ST_TO_ADDR
18244: GO 20647
18246: LD_INT 8
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 18394
18254: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18255: LD_ADDR_VAR 0 2
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 4
18265: PUSH
18266: LD_INT 5
18268: PUSH
18269: LD_INT 6
18271: PUSH
18272: LD_INT 7
18274: PUSH
18275: LD_INT 8
18277: PUSH
18278: LD_INT 11
18280: PUSH
18281: LD_INT 12
18283: PUSH
18284: LD_INT 15
18286: PUSH
18287: LD_INT 16
18289: PUSH
18290: LD_INT 20
18292: PUSH
18293: LD_INT 21
18295: PUSH
18296: LD_INT 22
18298: PUSH
18299: LD_INT 23
18301: PUSH
18302: LD_INT 25
18304: PUSH
18305: LD_INT 26
18307: PUSH
18308: LD_INT 30
18310: PUSH
18311: LD_INT 31
18313: PUSH
18314: LD_INT 32
18316: PUSH
18317: LD_INT 36
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 101
18344: PUSH
18345: LD_INT 102
18347: PUSH
18348: LD_INT 103
18350: PUSH
18351: LD_INT 105
18353: PUSH
18354: LD_INT 106
18356: PUSH
18357: LD_INT 108
18359: PUSH
18360: LD_INT 109
18362: PUSH
18363: LD_INT 112
18365: PUSH
18366: LD_INT 116
18368: PUSH
18369: LD_INT 117
18371: PUSH
18372: LD_INT 118
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: ST_TO_ADDR
18392: GO 20647
18394: LD_INT 9
18396: DOUBLE
18397: EQUAL
18398: IFTRUE 18402
18400: GO 18550
18402: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18403: LD_ADDR_VAR 0 2
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: LD_INT 4
18413: PUSH
18414: LD_INT 5
18416: PUSH
18417: LD_INT 6
18419: PUSH
18420: LD_INT 7
18422: PUSH
18423: LD_INT 8
18425: PUSH
18426: LD_INT 11
18428: PUSH
18429: LD_INT 12
18431: PUSH
18432: LD_INT 15
18434: PUSH
18435: LD_INT 16
18437: PUSH
18438: LD_INT 20
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 22
18446: PUSH
18447: LD_INT 23
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 26
18455: PUSH
18456: LD_INT 28
18458: PUSH
18459: LD_INT 30
18461: PUSH
18462: LD_INT 31
18464: PUSH
18465: LD_INT 32
18467: PUSH
18468: LD_INT 36
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 101
18496: PUSH
18497: LD_INT 102
18499: PUSH
18500: LD_INT 103
18502: PUSH
18503: LD_INT 105
18505: PUSH
18506: LD_INT 106
18508: PUSH
18509: LD_INT 108
18511: PUSH
18512: LD_INT 109
18514: PUSH
18515: LD_INT 112
18517: PUSH
18518: LD_INT 114
18520: PUSH
18521: LD_INT 116
18523: PUSH
18524: LD_INT 117
18526: PUSH
18527: LD_INT 118
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: ST_TO_ADDR
18548: GO 20647
18550: LD_INT 10
18552: DOUBLE
18553: EQUAL
18554: IFTRUE 18558
18556: GO 18754
18558: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18559: LD_ADDR_VAR 0 2
18563: PUSH
18564: LD_INT 2
18566: PUSH
18567: LD_INT 4
18569: PUSH
18570: LD_INT 5
18572: PUSH
18573: LD_INT 6
18575: PUSH
18576: LD_INT 7
18578: PUSH
18579: LD_INT 8
18581: PUSH
18582: LD_INT 9
18584: PUSH
18585: LD_INT 10
18587: PUSH
18588: LD_INT 11
18590: PUSH
18591: LD_INT 12
18593: PUSH
18594: LD_INT 13
18596: PUSH
18597: LD_INT 14
18599: PUSH
18600: LD_INT 15
18602: PUSH
18603: LD_INT 16
18605: PUSH
18606: LD_INT 17
18608: PUSH
18609: LD_INT 18
18611: PUSH
18612: LD_INT 19
18614: PUSH
18615: LD_INT 20
18617: PUSH
18618: LD_INT 21
18620: PUSH
18621: LD_INT 22
18623: PUSH
18624: LD_INT 23
18626: PUSH
18627: LD_INT 24
18629: PUSH
18630: LD_INT 25
18632: PUSH
18633: LD_INT 26
18635: PUSH
18636: LD_INT 28
18638: PUSH
18639: LD_INT 30
18641: PUSH
18642: LD_INT 31
18644: PUSH
18645: LD_INT 32
18647: PUSH
18648: LD_INT 36
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 101
18684: PUSH
18685: LD_INT 102
18687: PUSH
18688: LD_INT 103
18690: PUSH
18691: LD_INT 104
18693: PUSH
18694: LD_INT 105
18696: PUSH
18697: LD_INT 106
18699: PUSH
18700: LD_INT 107
18702: PUSH
18703: LD_INT 108
18705: PUSH
18706: LD_INT 109
18708: PUSH
18709: LD_INT 110
18711: PUSH
18712: LD_INT 111
18714: PUSH
18715: LD_INT 112
18717: PUSH
18718: LD_INT 114
18720: PUSH
18721: LD_INT 116
18723: PUSH
18724: LD_INT 117
18726: PUSH
18727: LD_INT 118
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: ST_TO_ADDR
18752: GO 20647
18754: LD_INT 11
18756: DOUBLE
18757: EQUAL
18758: IFTRUE 18762
18760: GO 18966
18762: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18763: LD_ADDR_VAR 0 2
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: LD_INT 3
18773: PUSH
18774: LD_INT 4
18776: PUSH
18777: LD_INT 5
18779: PUSH
18780: LD_INT 6
18782: PUSH
18783: LD_INT 7
18785: PUSH
18786: LD_INT 8
18788: PUSH
18789: LD_INT 9
18791: PUSH
18792: LD_INT 10
18794: PUSH
18795: LD_INT 11
18797: PUSH
18798: LD_INT 12
18800: PUSH
18801: LD_INT 13
18803: PUSH
18804: LD_INT 14
18806: PUSH
18807: LD_INT 15
18809: PUSH
18810: LD_INT 16
18812: PUSH
18813: LD_INT 17
18815: PUSH
18816: LD_INT 18
18818: PUSH
18819: LD_INT 19
18821: PUSH
18822: LD_INT 20
18824: PUSH
18825: LD_INT 21
18827: PUSH
18828: LD_INT 22
18830: PUSH
18831: LD_INT 23
18833: PUSH
18834: LD_INT 24
18836: PUSH
18837: LD_INT 25
18839: PUSH
18840: LD_INT 26
18842: PUSH
18843: LD_INT 28
18845: PUSH
18846: LD_INT 30
18848: PUSH
18849: LD_INT 31
18851: PUSH
18852: LD_INT 32
18854: PUSH
18855: LD_INT 34
18857: PUSH
18858: LD_INT 36
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 101
18896: PUSH
18897: LD_INT 102
18899: PUSH
18900: LD_INT 103
18902: PUSH
18903: LD_INT 104
18905: PUSH
18906: LD_INT 105
18908: PUSH
18909: LD_INT 106
18911: PUSH
18912: LD_INT 107
18914: PUSH
18915: LD_INT 108
18917: PUSH
18918: LD_INT 109
18920: PUSH
18921: LD_INT 110
18923: PUSH
18924: LD_INT 111
18926: PUSH
18927: LD_INT 112
18929: PUSH
18930: LD_INT 114
18932: PUSH
18933: LD_INT 116
18935: PUSH
18936: LD_INT 117
18938: PUSH
18939: LD_INT 118
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: ST_TO_ADDR
18964: GO 20647
18966: LD_INT 12
18968: DOUBLE
18969: EQUAL
18970: IFTRUE 18974
18972: GO 19194
18974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18975: LD_ADDR_VAR 0 2
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 3
18988: PUSH
18989: LD_INT 4
18991: PUSH
18992: LD_INT 5
18994: PUSH
18995: LD_INT 6
18997: PUSH
18998: LD_INT 7
19000: PUSH
19001: LD_INT 8
19003: PUSH
19004: LD_INT 9
19006: PUSH
19007: LD_INT 10
19009: PUSH
19010: LD_INT 11
19012: PUSH
19013: LD_INT 12
19015: PUSH
19016: LD_INT 13
19018: PUSH
19019: LD_INT 14
19021: PUSH
19022: LD_INT 15
19024: PUSH
19025: LD_INT 16
19027: PUSH
19028: LD_INT 17
19030: PUSH
19031: LD_INT 18
19033: PUSH
19034: LD_INT 19
19036: PUSH
19037: LD_INT 20
19039: PUSH
19040: LD_INT 21
19042: PUSH
19043: LD_INT 22
19045: PUSH
19046: LD_INT 23
19048: PUSH
19049: LD_INT 24
19051: PUSH
19052: LD_INT 25
19054: PUSH
19055: LD_INT 26
19057: PUSH
19058: LD_INT 27
19060: PUSH
19061: LD_INT 28
19063: PUSH
19064: LD_INT 30
19066: PUSH
19067: LD_INT 31
19069: PUSH
19070: LD_INT 32
19072: PUSH
19073: LD_INT 33
19075: PUSH
19076: LD_INT 34
19078: PUSH
19079: LD_INT 36
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 101
19120: PUSH
19121: LD_INT 102
19123: PUSH
19124: LD_INT 103
19126: PUSH
19127: LD_INT 104
19129: PUSH
19130: LD_INT 105
19132: PUSH
19133: LD_INT 106
19135: PUSH
19136: LD_INT 107
19138: PUSH
19139: LD_INT 108
19141: PUSH
19142: LD_INT 109
19144: PUSH
19145: LD_INT 110
19147: PUSH
19148: LD_INT 111
19150: PUSH
19151: LD_INT 112
19153: PUSH
19154: LD_INT 113
19156: PUSH
19157: LD_INT 114
19159: PUSH
19160: LD_INT 116
19162: PUSH
19163: LD_INT 117
19165: PUSH
19166: LD_INT 118
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: ST_TO_ADDR
19192: GO 20647
19194: LD_INT 13
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19410
19202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19203: LD_ADDR_VAR 0 2
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 3
19216: PUSH
19217: LD_INT 4
19219: PUSH
19220: LD_INT 5
19222: PUSH
19223: LD_INT 8
19225: PUSH
19226: LD_INT 9
19228: PUSH
19229: LD_INT 10
19231: PUSH
19232: LD_INT 11
19234: PUSH
19235: LD_INT 12
19237: PUSH
19238: LD_INT 14
19240: PUSH
19241: LD_INT 15
19243: PUSH
19244: LD_INT 16
19246: PUSH
19247: LD_INT 17
19249: PUSH
19250: LD_INT 18
19252: PUSH
19253: LD_INT 19
19255: PUSH
19256: LD_INT 20
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_INT 23
19267: PUSH
19268: LD_INT 24
19270: PUSH
19271: LD_INT 25
19273: PUSH
19274: LD_INT 26
19276: PUSH
19277: LD_INT 27
19279: PUSH
19280: LD_INT 28
19282: PUSH
19283: LD_INT 30
19285: PUSH
19286: LD_INT 31
19288: PUSH
19289: LD_INT 32
19291: PUSH
19292: LD_INT 33
19294: PUSH
19295: LD_INT 34
19297: PUSH
19298: LD_INT 36
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 101
19336: PUSH
19337: LD_INT 102
19339: PUSH
19340: LD_INT 103
19342: PUSH
19343: LD_INT 104
19345: PUSH
19346: LD_INT 105
19348: PUSH
19349: LD_INT 106
19351: PUSH
19352: LD_INT 107
19354: PUSH
19355: LD_INT 108
19357: PUSH
19358: LD_INT 109
19360: PUSH
19361: LD_INT 110
19363: PUSH
19364: LD_INT 111
19366: PUSH
19367: LD_INT 112
19369: PUSH
19370: LD_INT 113
19372: PUSH
19373: LD_INT 114
19375: PUSH
19376: LD_INT 116
19378: PUSH
19379: LD_INT 117
19381: PUSH
19382: LD_INT 118
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: ST_TO_ADDR
19408: GO 20647
19410: LD_INT 14
19412: DOUBLE
19413: EQUAL
19414: IFTRUE 19418
19416: GO 19642
19418: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19419: LD_ADDR_VAR 0 2
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: LD_INT 2
19429: PUSH
19430: LD_INT 3
19432: PUSH
19433: LD_INT 4
19435: PUSH
19436: LD_INT 5
19438: PUSH
19439: LD_INT 6
19441: PUSH
19442: LD_INT 7
19444: PUSH
19445: LD_INT 8
19447: PUSH
19448: LD_INT 9
19450: PUSH
19451: LD_INT 10
19453: PUSH
19454: LD_INT 11
19456: PUSH
19457: LD_INT 12
19459: PUSH
19460: LD_INT 13
19462: PUSH
19463: LD_INT 14
19465: PUSH
19466: LD_INT 15
19468: PUSH
19469: LD_INT 16
19471: PUSH
19472: LD_INT 17
19474: PUSH
19475: LD_INT 18
19477: PUSH
19478: LD_INT 19
19480: PUSH
19481: LD_INT 20
19483: PUSH
19484: LD_INT 21
19486: PUSH
19487: LD_INT 22
19489: PUSH
19490: LD_INT 23
19492: PUSH
19493: LD_INT 24
19495: PUSH
19496: LD_INT 25
19498: PUSH
19499: LD_INT 26
19501: PUSH
19502: LD_INT 27
19504: PUSH
19505: LD_INT 28
19507: PUSH
19508: LD_INT 29
19510: PUSH
19511: LD_INT 30
19513: PUSH
19514: LD_INT 31
19516: PUSH
19517: LD_INT 32
19519: PUSH
19520: LD_INT 33
19522: PUSH
19523: LD_INT 34
19525: PUSH
19526: LD_INT 36
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 101
19568: PUSH
19569: LD_INT 102
19571: PUSH
19572: LD_INT 103
19574: PUSH
19575: LD_INT 104
19577: PUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 106
19583: PUSH
19584: LD_INT 107
19586: PUSH
19587: LD_INT 108
19589: PUSH
19590: LD_INT 109
19592: PUSH
19593: LD_INT 110
19595: PUSH
19596: LD_INT 111
19598: PUSH
19599: LD_INT 112
19601: PUSH
19602: LD_INT 113
19604: PUSH
19605: LD_INT 114
19607: PUSH
19608: LD_INT 116
19610: PUSH
19611: LD_INT 117
19613: PUSH
19614: LD_INT 118
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: ST_TO_ADDR
19640: GO 20647
19642: LD_INT 15
19644: DOUBLE
19645: EQUAL
19646: IFTRUE 19650
19648: GO 19874
19650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19651: LD_ADDR_VAR 0 2
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: LD_INT 2
19661: PUSH
19662: LD_INT 3
19664: PUSH
19665: LD_INT 4
19667: PUSH
19668: LD_INT 5
19670: PUSH
19671: LD_INT 6
19673: PUSH
19674: LD_INT 7
19676: PUSH
19677: LD_INT 8
19679: PUSH
19680: LD_INT 9
19682: PUSH
19683: LD_INT 10
19685: PUSH
19686: LD_INT 11
19688: PUSH
19689: LD_INT 12
19691: PUSH
19692: LD_INT 13
19694: PUSH
19695: LD_INT 14
19697: PUSH
19698: LD_INT 15
19700: PUSH
19701: LD_INT 16
19703: PUSH
19704: LD_INT 17
19706: PUSH
19707: LD_INT 18
19709: PUSH
19710: LD_INT 19
19712: PUSH
19713: LD_INT 20
19715: PUSH
19716: LD_INT 21
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_INT 23
19724: PUSH
19725: LD_INT 24
19727: PUSH
19728: LD_INT 25
19730: PUSH
19731: LD_INT 26
19733: PUSH
19734: LD_INT 27
19736: PUSH
19737: LD_INT 28
19739: PUSH
19740: LD_INT 29
19742: PUSH
19743: LD_INT 30
19745: PUSH
19746: LD_INT 31
19748: PUSH
19749: LD_INT 32
19751: PUSH
19752: LD_INT 33
19754: PUSH
19755: LD_INT 34
19757: PUSH
19758: LD_INT 36
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 101
19800: PUSH
19801: LD_INT 102
19803: PUSH
19804: LD_INT 103
19806: PUSH
19807: LD_INT 104
19809: PUSH
19810: LD_INT 105
19812: PUSH
19813: LD_INT 106
19815: PUSH
19816: LD_INT 107
19818: PUSH
19819: LD_INT 108
19821: PUSH
19822: LD_INT 109
19824: PUSH
19825: LD_INT 110
19827: PUSH
19828: LD_INT 111
19830: PUSH
19831: LD_INT 112
19833: PUSH
19834: LD_INT 113
19836: PUSH
19837: LD_INT 114
19839: PUSH
19840: LD_INT 116
19842: PUSH
19843: LD_INT 117
19845: PUSH
19846: LD_INT 118
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: ST_TO_ADDR
19872: GO 20647
19874: LD_INT 16
19876: DOUBLE
19877: EQUAL
19878: IFTRUE 19882
19880: GO 20018
19882: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_INT 2
19890: PUSH
19891: LD_INT 4
19893: PUSH
19894: LD_INT 5
19896: PUSH
19897: LD_INT 7
19899: PUSH
19900: LD_INT 11
19902: PUSH
19903: LD_INT 12
19905: PUSH
19906: LD_INT 15
19908: PUSH
19909: LD_INT 16
19911: PUSH
19912: LD_INT 20
19914: PUSH
19915: LD_INT 21
19917: PUSH
19918: LD_INT 22
19920: PUSH
19921: LD_INT 23
19923: PUSH
19924: LD_INT 25
19926: PUSH
19927: LD_INT 26
19929: PUSH
19930: LD_INT 30
19932: PUSH
19933: LD_INT 31
19935: PUSH
19936: LD_INT 32
19938: PUSH
19939: LD_INT 33
19941: PUSH
19942: LD_INT 34
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 101
19968: PUSH
19969: LD_INT 102
19971: PUSH
19972: LD_INT 103
19974: PUSH
19975: LD_INT 106
19977: PUSH
19978: LD_INT 108
19980: PUSH
19981: LD_INT 112
19983: PUSH
19984: LD_INT 113
19986: PUSH
19987: LD_INT 114
19989: PUSH
19990: LD_INT 116
19992: PUSH
19993: LD_INT 117
19995: PUSH
19996: LD_INT 118
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: ST_TO_ADDR
20016: GO 20647
20018: LD_INT 17
20020: DOUBLE
20021: EQUAL
20022: IFTRUE 20026
20024: GO 20250
20026: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 3
20040: PUSH
20041: LD_INT 4
20043: PUSH
20044: LD_INT 5
20046: PUSH
20047: LD_INT 6
20049: PUSH
20050: LD_INT 7
20052: PUSH
20053: LD_INT 8
20055: PUSH
20056: LD_INT 9
20058: PUSH
20059: LD_INT 10
20061: PUSH
20062: LD_INT 11
20064: PUSH
20065: LD_INT 12
20067: PUSH
20068: LD_INT 13
20070: PUSH
20071: LD_INT 14
20073: PUSH
20074: LD_INT 15
20076: PUSH
20077: LD_INT 16
20079: PUSH
20080: LD_INT 17
20082: PUSH
20083: LD_INT 18
20085: PUSH
20086: LD_INT 19
20088: PUSH
20089: LD_INT 20
20091: PUSH
20092: LD_INT 21
20094: PUSH
20095: LD_INT 22
20097: PUSH
20098: LD_INT 23
20100: PUSH
20101: LD_INT 24
20103: PUSH
20104: LD_INT 25
20106: PUSH
20107: LD_INT 26
20109: PUSH
20110: LD_INT 27
20112: PUSH
20113: LD_INT 28
20115: PUSH
20116: LD_INT 29
20118: PUSH
20119: LD_INT 30
20121: PUSH
20122: LD_INT 31
20124: PUSH
20125: LD_INT 32
20127: PUSH
20128: LD_INT 33
20130: PUSH
20131: LD_INT 34
20133: PUSH
20134: LD_INT 36
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 101
20176: PUSH
20177: LD_INT 102
20179: PUSH
20180: LD_INT 103
20182: PUSH
20183: LD_INT 104
20185: PUSH
20186: LD_INT 105
20188: PUSH
20189: LD_INT 106
20191: PUSH
20192: LD_INT 107
20194: PUSH
20195: LD_INT 108
20197: PUSH
20198: LD_INT 109
20200: PUSH
20201: LD_INT 110
20203: PUSH
20204: LD_INT 111
20206: PUSH
20207: LD_INT 112
20209: PUSH
20210: LD_INT 113
20212: PUSH
20213: LD_INT 114
20215: PUSH
20216: LD_INT 116
20218: PUSH
20219: LD_INT 117
20221: PUSH
20222: LD_INT 118
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: ST_TO_ADDR
20248: GO 20647
20250: LD_INT 18
20252: DOUBLE
20253: EQUAL
20254: IFTRUE 20258
20256: GO 20406
20258: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20259: LD_ADDR_VAR 0 2
20263: PUSH
20264: LD_INT 2
20266: PUSH
20267: LD_INT 4
20269: PUSH
20270: LD_INT 5
20272: PUSH
20273: LD_INT 7
20275: PUSH
20276: LD_INT 11
20278: PUSH
20279: LD_INT 12
20281: PUSH
20282: LD_INT 15
20284: PUSH
20285: LD_INT 16
20287: PUSH
20288: LD_INT 20
20290: PUSH
20291: LD_INT 21
20293: PUSH
20294: LD_INT 22
20296: PUSH
20297: LD_INT 23
20299: PUSH
20300: LD_INT 25
20302: PUSH
20303: LD_INT 26
20305: PUSH
20306: LD_INT 30
20308: PUSH
20309: LD_INT 31
20311: PUSH
20312: LD_INT 32
20314: PUSH
20315: LD_INT 33
20317: PUSH
20318: LD_INT 34
20320: PUSH
20321: LD_INT 35
20323: PUSH
20324: LD_INT 36
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 101
20352: PUSH
20353: LD_INT 102
20355: PUSH
20356: LD_INT 103
20358: PUSH
20359: LD_INT 106
20361: PUSH
20362: LD_INT 108
20364: PUSH
20365: LD_INT 112
20367: PUSH
20368: LD_INT 113
20370: PUSH
20371: LD_INT 114
20373: PUSH
20374: LD_INT 115
20376: PUSH
20377: LD_INT 116
20379: PUSH
20380: LD_INT 117
20382: PUSH
20383: LD_INT 118
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: ST_TO_ADDR
20404: GO 20647
20406: LD_INT 19
20408: DOUBLE
20409: EQUAL
20410: IFTRUE 20414
20412: GO 20646
20414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20415: LD_ADDR_VAR 0 2
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 3
20428: PUSH
20429: LD_INT 4
20431: PUSH
20432: LD_INT 5
20434: PUSH
20435: LD_INT 6
20437: PUSH
20438: LD_INT 7
20440: PUSH
20441: LD_INT 8
20443: PUSH
20444: LD_INT 9
20446: PUSH
20447: LD_INT 10
20449: PUSH
20450: LD_INT 11
20452: PUSH
20453: LD_INT 12
20455: PUSH
20456: LD_INT 13
20458: PUSH
20459: LD_INT 14
20461: PUSH
20462: LD_INT 15
20464: PUSH
20465: LD_INT 16
20467: PUSH
20468: LD_INT 17
20470: PUSH
20471: LD_INT 18
20473: PUSH
20474: LD_INT 19
20476: PUSH
20477: LD_INT 20
20479: PUSH
20480: LD_INT 21
20482: PUSH
20483: LD_INT 22
20485: PUSH
20486: LD_INT 23
20488: PUSH
20489: LD_INT 24
20491: PUSH
20492: LD_INT 25
20494: PUSH
20495: LD_INT 26
20497: PUSH
20498: LD_INT 27
20500: PUSH
20501: LD_INT 28
20503: PUSH
20504: LD_INT 29
20506: PUSH
20507: LD_INT 30
20509: PUSH
20510: LD_INT 31
20512: PUSH
20513: LD_INT 32
20515: PUSH
20516: LD_INT 33
20518: PUSH
20519: LD_INT 34
20521: PUSH
20522: LD_INT 35
20524: PUSH
20525: LD_INT 36
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 101
20568: PUSH
20569: LD_INT 102
20571: PUSH
20572: LD_INT 103
20574: PUSH
20575: LD_INT 104
20577: PUSH
20578: LD_INT 105
20580: PUSH
20581: LD_INT 106
20583: PUSH
20584: LD_INT 107
20586: PUSH
20587: LD_INT 108
20589: PUSH
20590: LD_INT 109
20592: PUSH
20593: LD_INT 110
20595: PUSH
20596: LD_INT 111
20598: PUSH
20599: LD_INT 112
20601: PUSH
20602: LD_INT 113
20604: PUSH
20605: LD_INT 114
20607: PUSH
20608: LD_INT 115
20610: PUSH
20611: LD_INT 116
20613: PUSH
20614: LD_INT 117
20616: PUSH
20617: LD_INT 118
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: ST_TO_ADDR
20644: GO 20647
20646: POP
// end else
20647: GO 20878
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20649: LD_ADDR_VAR 0 2
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: LD_INT 3
20662: PUSH
20663: LD_INT 4
20665: PUSH
20666: LD_INT 5
20668: PUSH
20669: LD_INT 6
20671: PUSH
20672: LD_INT 7
20674: PUSH
20675: LD_INT 8
20677: PUSH
20678: LD_INT 9
20680: PUSH
20681: LD_INT 10
20683: PUSH
20684: LD_INT 11
20686: PUSH
20687: LD_INT 12
20689: PUSH
20690: LD_INT 13
20692: PUSH
20693: LD_INT 14
20695: PUSH
20696: LD_INT 15
20698: PUSH
20699: LD_INT 16
20701: PUSH
20702: LD_INT 17
20704: PUSH
20705: LD_INT 18
20707: PUSH
20708: LD_INT 19
20710: PUSH
20711: LD_INT 20
20713: PUSH
20714: LD_INT 21
20716: PUSH
20717: LD_INT 22
20719: PUSH
20720: LD_INT 23
20722: PUSH
20723: LD_INT 24
20725: PUSH
20726: LD_INT 25
20728: PUSH
20729: LD_INT 26
20731: PUSH
20732: LD_INT 27
20734: PUSH
20735: LD_INT 28
20737: PUSH
20738: LD_INT 29
20740: PUSH
20741: LD_INT 30
20743: PUSH
20744: LD_INT 31
20746: PUSH
20747: LD_INT 32
20749: PUSH
20750: LD_INT 33
20752: PUSH
20753: LD_INT 34
20755: PUSH
20756: LD_INT 35
20758: PUSH
20759: LD_INT 36
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 101
20802: PUSH
20803: LD_INT 102
20805: PUSH
20806: LD_INT 103
20808: PUSH
20809: LD_INT 104
20811: PUSH
20812: LD_INT 105
20814: PUSH
20815: LD_INT 106
20817: PUSH
20818: LD_INT 107
20820: PUSH
20821: LD_INT 108
20823: PUSH
20824: LD_INT 109
20826: PUSH
20827: LD_INT 110
20829: PUSH
20830: LD_INT 111
20832: PUSH
20833: LD_INT 112
20835: PUSH
20836: LD_INT 113
20838: PUSH
20839: LD_INT 114
20841: PUSH
20842: LD_INT 115
20844: PUSH
20845: LD_INT 116
20847: PUSH
20848: LD_INT 117
20850: PUSH
20851: LD_INT 118
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: ST_TO_ADDR
// if result then
20878: LD_VAR 0 2
20882: IFFALSE 21668
// begin normal :=  ;
20884: LD_ADDR_VAR 0 5
20888: PUSH
20889: LD_STRING 
20891: ST_TO_ADDR
// hardcore :=  ;
20892: LD_ADDR_VAR 0 6
20896: PUSH
20897: LD_STRING 
20899: ST_TO_ADDR
// active :=  ;
20900: LD_ADDR_VAR 0 7
20904: PUSH
20905: LD_STRING 
20907: ST_TO_ADDR
// for i = 1 to normalCounter do
20908: LD_ADDR_VAR 0 8
20912: PUSH
20913: DOUBLE
20914: LD_INT 1
20916: DEC
20917: ST_TO_ADDR
20918: LD_EXP 38
20922: PUSH
20923: FOR_TO
20924: IFFALSE 21025
// begin tmp := 0 ;
20926: LD_ADDR_VAR 0 3
20930: PUSH
20931: LD_STRING 0
20933: ST_TO_ADDR
// if result [ 1 ] then
20934: LD_VAR 0 2
20938: PUSH
20939: LD_INT 1
20941: ARRAY
20942: IFFALSE 21007
// if result [ 1 ] [ 1 ] = i then
20944: LD_VAR 0 2
20948: PUSH
20949: LD_INT 1
20951: ARRAY
20952: PUSH
20953: LD_INT 1
20955: ARRAY
20956: PUSH
20957: LD_VAR 0 8
20961: EQUAL
20962: IFFALSE 21007
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_VAR 0 2
20973: PPUSH
20974: LD_INT 1
20976: PPUSH
20977: LD_VAR 0 2
20981: PUSH
20982: LD_INT 1
20984: ARRAY
20985: PPUSH
20986: LD_INT 1
20988: PPUSH
20989: CALL_OW 3
20993: PPUSH
20994: CALL_OW 1
20998: ST_TO_ADDR
// tmp := 1 ;
20999: LD_ADDR_VAR 0 3
21003: PUSH
21004: LD_STRING 1
21006: ST_TO_ADDR
// end ; normal := normal & tmp ;
21007: LD_ADDR_VAR 0 5
21011: PUSH
21012: LD_VAR 0 5
21016: PUSH
21017: LD_VAR 0 3
21021: STR
21022: ST_TO_ADDR
// end ;
21023: GO 20923
21025: POP
21026: POP
// for i = 1 to hardcoreCounter do
21027: LD_ADDR_VAR 0 8
21031: PUSH
21032: DOUBLE
21033: LD_INT 1
21035: DEC
21036: ST_TO_ADDR
21037: LD_EXP 39
21041: PUSH
21042: FOR_TO
21043: IFFALSE 21148
// begin tmp := 0 ;
21045: LD_ADDR_VAR 0 3
21049: PUSH
21050: LD_STRING 0
21052: ST_TO_ADDR
// if result [ 2 ] then
21053: LD_VAR 0 2
21057: PUSH
21058: LD_INT 2
21060: ARRAY
21061: IFFALSE 21130
// if result [ 2 ] [ 1 ] = 100 + i then
21063: LD_VAR 0 2
21067: PUSH
21068: LD_INT 2
21070: ARRAY
21071: PUSH
21072: LD_INT 1
21074: ARRAY
21075: PUSH
21076: LD_INT 100
21078: PUSH
21079: LD_VAR 0 8
21083: PLUS
21084: EQUAL
21085: IFFALSE 21130
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21087: LD_ADDR_VAR 0 2
21091: PUSH
21092: LD_VAR 0 2
21096: PPUSH
21097: LD_INT 2
21099: PPUSH
21100: LD_VAR 0 2
21104: PUSH
21105: LD_INT 2
21107: ARRAY
21108: PPUSH
21109: LD_INT 1
21111: PPUSH
21112: CALL_OW 3
21116: PPUSH
21117: CALL_OW 1
21121: ST_TO_ADDR
// tmp := 1 ;
21122: LD_ADDR_VAR 0 3
21126: PUSH
21127: LD_STRING 1
21129: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21130: LD_ADDR_VAR 0 6
21134: PUSH
21135: LD_VAR 0 6
21139: PUSH
21140: LD_VAR 0 3
21144: STR
21145: ST_TO_ADDR
// end ;
21146: GO 21042
21148: POP
21149: POP
// if isGameLoad then
21150: LD_VAR 0 1
21154: IFFALSE 21629
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21156: LD_ADDR_VAR 0 4
21160: PUSH
21161: LD_EXP 42
21165: PUSH
21166: LD_EXP 41
21170: PUSH
21171: LD_EXP 43
21175: PUSH
21176: LD_EXP 40
21180: PUSH
21181: LD_EXP 44
21185: PUSH
21186: LD_EXP 45
21190: PUSH
21191: LD_EXP 46
21195: PUSH
21196: LD_EXP 47
21200: PUSH
21201: LD_EXP 48
21205: PUSH
21206: LD_EXP 49
21210: PUSH
21211: LD_EXP 50
21215: PUSH
21216: LD_EXP 51
21220: PUSH
21221: LD_EXP 52
21225: PUSH
21226: LD_EXP 53
21230: PUSH
21231: LD_EXP 61
21235: PUSH
21236: LD_EXP 62
21240: PUSH
21241: LD_EXP 63
21245: PUSH
21246: LD_EXP 64
21250: PUSH
21251: LD_EXP 66
21255: PUSH
21256: LD_EXP 67
21260: PUSH
21261: LD_EXP 68
21265: PUSH
21266: LD_EXP 71
21270: PUSH
21271: LD_EXP 73
21275: PUSH
21276: LD_EXP 74
21280: PUSH
21281: LD_EXP 75
21285: PUSH
21286: LD_EXP 77
21290: PUSH
21291: LD_EXP 78
21295: PUSH
21296: LD_EXP 81
21300: PUSH
21301: LD_EXP 82
21305: PUSH
21306: LD_EXP 83
21310: PUSH
21311: LD_EXP 84
21315: PUSH
21316: LD_EXP 85
21320: PUSH
21321: LD_EXP 86
21325: PUSH
21326: LD_EXP 87
21330: PUSH
21331: LD_EXP 88
21335: PUSH
21336: LD_EXP 89
21340: PUSH
21341: LD_EXP 54
21345: PUSH
21346: LD_EXP 55
21350: PUSH
21351: LD_EXP 58
21355: PUSH
21356: LD_EXP 59
21360: PUSH
21361: LD_EXP 60
21365: PUSH
21366: LD_EXP 56
21370: PUSH
21371: LD_EXP 57
21375: PUSH
21376: LD_EXP 65
21380: PUSH
21381: LD_EXP 69
21385: PUSH
21386: LD_EXP 70
21390: PUSH
21391: LD_EXP 72
21395: PUSH
21396: LD_EXP 76
21400: PUSH
21401: LD_EXP 79
21405: PUSH
21406: LD_EXP 80
21410: PUSH
21411: LD_EXP 90
21415: PUSH
21416: LD_EXP 91
21420: PUSH
21421: LD_EXP 92
21425: PUSH
21426: LD_EXP 93
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: ST_TO_ADDR
// tmp :=  ;
21487: LD_ADDR_VAR 0 3
21491: PUSH
21492: LD_STRING 
21494: ST_TO_ADDR
// for i = 1 to normalCounter do
21495: LD_ADDR_VAR 0 8
21499: PUSH
21500: DOUBLE
21501: LD_INT 1
21503: DEC
21504: ST_TO_ADDR
21505: LD_EXP 38
21509: PUSH
21510: FOR_TO
21511: IFFALSE 21547
// begin if flags [ i ] then
21513: LD_VAR 0 4
21517: PUSH
21518: LD_VAR 0 8
21522: ARRAY
21523: IFFALSE 21545
// tmp := tmp & i & ; ;
21525: LD_ADDR_VAR 0 3
21529: PUSH
21530: LD_VAR 0 3
21534: PUSH
21535: LD_VAR 0 8
21539: STR
21540: PUSH
21541: LD_STRING ;
21543: STR
21544: ST_TO_ADDR
// end ;
21545: GO 21510
21547: POP
21548: POP
// for i = 1 to hardcoreCounter do
21549: LD_ADDR_VAR 0 8
21553: PUSH
21554: DOUBLE
21555: LD_INT 1
21557: DEC
21558: ST_TO_ADDR
21559: LD_EXP 39
21563: PUSH
21564: FOR_TO
21565: IFFALSE 21611
// begin if flags [ normalCounter + i ] then
21567: LD_VAR 0 4
21571: PUSH
21572: LD_EXP 38
21576: PUSH
21577: LD_VAR 0 8
21581: PLUS
21582: ARRAY
21583: IFFALSE 21609
// tmp := tmp & ( 100 + i ) & ; ;
21585: LD_ADDR_VAR 0 3
21589: PUSH
21590: LD_VAR 0 3
21594: PUSH
21595: LD_INT 100
21597: PUSH
21598: LD_VAR 0 8
21602: PLUS
21603: STR
21604: PUSH
21605: LD_STRING ;
21607: STR
21608: ST_TO_ADDR
// end ;
21609: GO 21564
21611: POP
21612: POP
// if tmp then
21613: LD_VAR 0 3
21617: IFFALSE 21629
// active := tmp ;
21619: LD_ADDR_VAR 0 7
21623: PUSH
21624: LD_VAR 0 3
21628: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21629: LD_STRING getStreamItemsFromMission("
21631: PUSH
21632: LD_VAR 0 5
21636: STR
21637: PUSH
21638: LD_STRING ","
21640: STR
21641: PUSH
21642: LD_VAR 0 6
21646: STR
21647: PUSH
21648: LD_STRING ","
21650: STR
21651: PUSH
21652: LD_VAR 0 7
21656: STR
21657: PUSH
21658: LD_STRING ")
21660: STR
21661: PPUSH
21662: CALL_OW 559
// end else
21666: GO 21675
// ToLua ( getStreamItemsFromMission("","","") ) ;
21668: LD_STRING getStreamItemsFromMission("","","")
21670: PPUSH
21671: CALL_OW 559
// end ;
21675: LD_VAR 0 2
21679: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21680: LD_EXP 37
21684: PUSH
21685: LD_EXP 42
21689: AND
21690: IFFALSE 21814
21692: GO 21694
21694: DISABLE
21695: LD_INT 0
21697: PPUSH
21698: PPUSH
// begin enable ;
21699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21700: LD_ADDR_VAR 0 2
21704: PUSH
21705: LD_INT 22
21707: PUSH
21708: LD_OWVAR 2
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: PUSH
21720: LD_INT 34
21722: PUSH
21723: LD_INT 7
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 34
21732: PUSH
21733: LD_INT 45
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 34
21742: PUSH
21743: LD_INT 28
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 34
21752: PUSH
21753: LD_INT 47
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PPUSH
21771: CALL_OW 69
21775: ST_TO_ADDR
// if not tmp then
21776: LD_VAR 0 2
21780: NOT
21781: IFFALSE 21785
// exit ;
21783: GO 21814
// for i in tmp do
21785: LD_ADDR_VAR 0 1
21789: PUSH
21790: LD_VAR 0 2
21794: PUSH
21795: FOR_IN
21796: IFFALSE 21812
// begin SetLives ( i , 0 ) ;
21798: LD_VAR 0 1
21802: PPUSH
21803: LD_INT 0
21805: PPUSH
21806: CALL_OW 234
// end ;
21810: GO 21795
21812: POP
21813: POP
// end ;
21814: PPOPN 2
21816: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21817: LD_EXP 37
21821: PUSH
21822: LD_EXP 43
21826: AND
21827: IFFALSE 21911
21829: GO 21831
21831: DISABLE
21832: LD_INT 0
21834: PPUSH
21835: PPUSH
// begin enable ;
21836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21837: LD_ADDR_VAR 0 2
21841: PUSH
21842: LD_INT 22
21844: PUSH
21845: LD_OWVAR 2
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 32
21856: PUSH
21857: LD_INT 3
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PPUSH
21868: CALL_OW 69
21872: ST_TO_ADDR
// if not tmp then
21873: LD_VAR 0 2
21877: NOT
21878: IFFALSE 21882
// exit ;
21880: GO 21911
// for i in tmp do
21882: LD_ADDR_VAR 0 1
21886: PUSH
21887: LD_VAR 0 2
21891: PUSH
21892: FOR_IN
21893: IFFALSE 21909
// begin SetLives ( i , 0 ) ;
21895: LD_VAR 0 1
21899: PPUSH
21900: LD_INT 0
21902: PPUSH
21903: CALL_OW 234
// end ;
21907: GO 21892
21909: POP
21910: POP
// end ;
21911: PPOPN 2
21913: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21914: LD_EXP 37
21918: PUSH
21919: LD_EXP 40
21923: AND
21924: IFFALSE 22017
21926: GO 21928
21928: DISABLE
21929: LD_INT 0
21931: PPUSH
// begin enable ;
21932: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_OWVAR 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: LD_INT 25
21955: PUSH
21956: LD_INT 5
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 25
21965: PUSH
21966: LD_INT 9
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 25
21975: PUSH
21976: LD_INT 8
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PPUSH
21993: CALL_OW 69
21997: PUSH
21998: FOR_IN
21999: IFFALSE 22015
// begin SetClass ( i , 1 ) ;
22001: LD_VAR 0 1
22005: PPUSH
22006: LD_INT 1
22008: PPUSH
22009: CALL_OW 336
// end ;
22013: GO 21998
22015: POP
22016: POP
// end ;
22017: PPOPN 1
22019: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22020: LD_EXP 37
22024: PUSH
22025: LD_EXP 41
22029: AND
22030: PUSH
22031: LD_OWVAR 65
22035: PUSH
22036: LD_INT 7
22038: LESS
22039: AND
22040: IFFALSE 22054
22042: GO 22044
22044: DISABLE
// begin enable ;
22045: ENABLE
// game_speed := 7 ;
22046: LD_ADDR_OWVAR 65
22050: PUSH
22051: LD_INT 7
22053: ST_TO_ADDR
// end ;
22054: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22055: LD_EXP 37
22059: PUSH
22060: LD_EXP 44
22064: AND
22065: IFFALSE 22267
22067: GO 22069
22069: DISABLE
22070: LD_INT 0
22072: PPUSH
22073: PPUSH
22074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22075: LD_ADDR_VAR 0 3
22079: PUSH
22080: LD_INT 81
22082: PUSH
22083: LD_OWVAR 2
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 21
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PPUSH
22106: CALL_OW 69
22110: ST_TO_ADDR
// if not tmp then
22111: LD_VAR 0 3
22115: NOT
22116: IFFALSE 22120
// exit ;
22118: GO 22267
// if tmp > 5 then
22120: LD_VAR 0 3
22124: PUSH
22125: LD_INT 5
22127: GREATER
22128: IFFALSE 22140
// k := 5 else
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_INT 5
22137: ST_TO_ADDR
22138: GO 22150
// k := tmp ;
22140: LD_ADDR_VAR 0 2
22144: PUSH
22145: LD_VAR 0 3
22149: ST_TO_ADDR
// for i := 1 to k do
22150: LD_ADDR_VAR 0 1
22154: PUSH
22155: DOUBLE
22156: LD_INT 1
22158: DEC
22159: ST_TO_ADDR
22160: LD_VAR 0 2
22164: PUSH
22165: FOR_TO
22166: IFFALSE 22265
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22168: LD_VAR 0 3
22172: PUSH
22173: LD_VAR 0 1
22177: ARRAY
22178: PPUSH
22179: LD_VAR 0 1
22183: PUSH
22184: LD_INT 4
22186: MOD
22187: PUSH
22188: LD_INT 1
22190: PLUS
22191: PPUSH
22192: CALL_OW 259
22196: PUSH
22197: LD_INT 10
22199: LESS
22200: IFFALSE 22263
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22202: LD_VAR 0 3
22206: PUSH
22207: LD_VAR 0 1
22211: ARRAY
22212: PPUSH
22213: LD_VAR 0 1
22217: PUSH
22218: LD_INT 4
22220: MOD
22221: PUSH
22222: LD_INT 1
22224: PLUS
22225: PPUSH
22226: LD_VAR 0 3
22230: PUSH
22231: LD_VAR 0 1
22235: ARRAY
22236: PPUSH
22237: LD_VAR 0 1
22241: PUSH
22242: LD_INT 4
22244: MOD
22245: PUSH
22246: LD_INT 1
22248: PLUS
22249: PPUSH
22250: CALL_OW 259
22254: PUSH
22255: LD_INT 1
22257: PLUS
22258: PPUSH
22259: CALL_OW 237
22263: GO 22165
22265: POP
22266: POP
// end ;
22267: PPOPN 3
22269: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22270: LD_EXP 37
22274: PUSH
22275: LD_EXP 45
22279: AND
22280: IFFALSE 22300
22282: GO 22284
22284: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22285: LD_INT 4
22287: PPUSH
22288: LD_OWVAR 2
22292: PPUSH
22293: LD_INT 0
22295: PPUSH
22296: CALL_OW 324
22300: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22301: LD_EXP 37
22305: PUSH
22306: LD_EXP 74
22310: AND
22311: IFFALSE 22331
22313: GO 22315
22315: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22316: LD_INT 19
22318: PPUSH
22319: LD_OWVAR 2
22323: PPUSH
22324: LD_INT 0
22326: PPUSH
22327: CALL_OW 324
22331: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22332: LD_EXP 37
22336: PUSH
22337: LD_EXP 46
22341: AND
22342: IFFALSE 22444
22344: GO 22346
22346: DISABLE
22347: LD_INT 0
22349: PPUSH
22350: PPUSH
// begin enable ;
22351: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22352: LD_ADDR_VAR 0 2
22356: PUSH
22357: LD_INT 22
22359: PUSH
22360: LD_OWVAR 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 2
22371: PUSH
22372: LD_INT 34
22374: PUSH
22375: LD_INT 11
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 34
22384: PUSH
22385: LD_INT 30
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PPUSH
22401: CALL_OW 69
22405: ST_TO_ADDR
// if not tmp then
22406: LD_VAR 0 2
22410: NOT
22411: IFFALSE 22415
// exit ;
22413: GO 22444
// for i in tmp do
22415: LD_ADDR_VAR 0 1
22419: PUSH
22420: LD_VAR 0 2
22424: PUSH
22425: FOR_IN
22426: IFFALSE 22442
// begin SetLives ( i , 0 ) ;
22428: LD_VAR 0 1
22432: PPUSH
22433: LD_INT 0
22435: PPUSH
22436: CALL_OW 234
// end ;
22440: GO 22425
22442: POP
22443: POP
// end ;
22444: PPOPN 2
22446: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22447: LD_EXP 37
22451: PUSH
22452: LD_EXP 47
22456: AND
22457: IFFALSE 22477
22459: GO 22461
22461: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22462: LD_INT 32
22464: PPUSH
22465: LD_OWVAR 2
22469: PPUSH
22470: LD_INT 0
22472: PPUSH
22473: CALL_OW 324
22477: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22478: LD_EXP 37
22482: PUSH
22483: LD_EXP 48
22487: AND
22488: IFFALSE 22669
22490: GO 22492
22492: DISABLE
22493: LD_INT 0
22495: PPUSH
22496: PPUSH
22497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22498: LD_ADDR_VAR 0 2
22502: PUSH
22503: LD_INT 22
22505: PUSH
22506: LD_OWVAR 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 33
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PPUSH
22529: CALL_OW 69
22533: ST_TO_ADDR
// if not tmp then
22534: LD_VAR 0 2
22538: NOT
22539: IFFALSE 22543
// exit ;
22541: GO 22669
// side := 0 ;
22543: LD_ADDR_VAR 0 3
22547: PUSH
22548: LD_INT 0
22550: ST_TO_ADDR
// for i := 1 to 8 do
22551: LD_ADDR_VAR 0 1
22555: PUSH
22556: DOUBLE
22557: LD_INT 1
22559: DEC
22560: ST_TO_ADDR
22561: LD_INT 8
22563: PUSH
22564: FOR_TO
22565: IFFALSE 22613
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22567: LD_OWVAR 2
22571: PUSH
22572: LD_VAR 0 1
22576: NONEQUAL
22577: PUSH
22578: LD_OWVAR 2
22582: PPUSH
22583: LD_VAR 0 1
22587: PPUSH
22588: CALL_OW 81
22592: PUSH
22593: LD_INT 2
22595: EQUAL
22596: AND
22597: IFFALSE 22611
// begin side := i ;
22599: LD_ADDR_VAR 0 3
22603: PUSH
22604: LD_VAR 0 1
22608: ST_TO_ADDR
// break ;
22609: GO 22613
// end ;
22611: GO 22564
22613: POP
22614: POP
// if not side then
22615: LD_VAR 0 3
22619: NOT
22620: IFFALSE 22624
// exit ;
22622: GO 22669
// for i := 1 to tmp do
22624: LD_ADDR_VAR 0 1
22628: PUSH
22629: DOUBLE
22630: LD_INT 1
22632: DEC
22633: ST_TO_ADDR
22634: LD_VAR 0 2
22638: PUSH
22639: FOR_TO
22640: IFFALSE 22667
// if Prob ( 60 ) then
22642: LD_INT 60
22644: PPUSH
22645: CALL_OW 13
22649: IFFALSE 22665
// SetSide ( i , side ) ;
22651: LD_VAR 0 1
22655: PPUSH
22656: LD_VAR 0 3
22660: PPUSH
22661: CALL_OW 235
22665: GO 22639
22667: POP
22668: POP
// end ;
22669: PPOPN 3
22671: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22672: LD_EXP 37
22676: PUSH
22677: LD_EXP 50
22681: AND
22682: IFFALSE 22801
22684: GO 22686
22686: DISABLE
22687: LD_INT 0
22689: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22690: LD_ADDR_VAR 0 1
22694: PUSH
22695: LD_INT 22
22697: PUSH
22698: LD_OWVAR 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 21
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 23
22722: PUSH
22723: LD_INT 0
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: PPUSH
22739: CALL_OW 69
22743: PUSH
22744: FOR_IN
22745: IFFALSE 22799
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22747: LD_VAR 0 1
22751: PPUSH
22752: CALL_OW 257
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: LD_INT 3
22765: PUSH
22766: LD_INT 4
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: IN
22775: IFFALSE 22797
// SetClass ( un , rand ( 1 , 4 ) ) ;
22777: LD_VAR 0 1
22781: PPUSH
22782: LD_INT 1
22784: PPUSH
22785: LD_INT 4
22787: PPUSH
22788: CALL_OW 12
22792: PPUSH
22793: CALL_OW 336
22797: GO 22744
22799: POP
22800: POP
// end ;
22801: PPOPN 1
22803: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22804: LD_EXP 37
22808: PUSH
22809: LD_EXP 49
22813: AND
22814: IFFALSE 22893
22816: GO 22818
22818: DISABLE
22819: LD_INT 0
22821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22822: LD_ADDR_VAR 0 1
22826: PUSH
22827: LD_INT 22
22829: PUSH
22830: LD_OWVAR 2
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 21
22841: PUSH
22842: LD_INT 3
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 69
22857: ST_TO_ADDR
// if not tmp then
22858: LD_VAR 0 1
22862: NOT
22863: IFFALSE 22867
// exit ;
22865: GO 22893
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22867: LD_VAR 0 1
22871: PUSH
22872: LD_INT 1
22874: PPUSH
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 12
22884: ARRAY
22885: PPUSH
22886: LD_INT 100
22888: PPUSH
22889: CALL_OW 234
// end ;
22893: PPOPN 1
22895: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22896: LD_EXP 37
22900: PUSH
22901: LD_EXP 51
22905: AND
22906: IFFALSE 23004
22908: GO 22910
22910: DISABLE
22911: LD_INT 0
22913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22914: LD_ADDR_VAR 0 1
22918: PUSH
22919: LD_INT 22
22921: PUSH
22922: LD_OWVAR 2
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 21
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PPUSH
22945: CALL_OW 69
22949: ST_TO_ADDR
// if not tmp then
22950: LD_VAR 0 1
22954: NOT
22955: IFFALSE 22959
// exit ;
22957: GO 23004
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22959: LD_VAR 0 1
22963: PUSH
22964: LD_INT 1
22966: PPUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 12
22976: ARRAY
22977: PPUSH
22978: LD_INT 1
22980: PPUSH
22981: LD_INT 4
22983: PPUSH
22984: CALL_OW 12
22988: PPUSH
22989: LD_INT 3000
22991: PPUSH
22992: LD_INT 9000
22994: PPUSH
22995: CALL_OW 12
22999: PPUSH
23000: CALL_OW 492
// end ;
23004: PPOPN 1
23006: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23007: LD_EXP 37
23011: PUSH
23012: LD_EXP 52
23016: AND
23017: IFFALSE 23037
23019: GO 23021
23021: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23022: LD_INT 1
23024: PPUSH
23025: LD_OWVAR 2
23029: PPUSH
23030: LD_INT 0
23032: PPUSH
23033: CALL_OW 324
23037: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23038: LD_EXP 37
23042: PUSH
23043: LD_EXP 53
23047: AND
23048: IFFALSE 23131
23050: GO 23052
23052: DISABLE
23053: LD_INT 0
23055: PPUSH
23056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23057: LD_ADDR_VAR 0 2
23061: PUSH
23062: LD_INT 22
23064: PUSH
23065: LD_OWVAR 2
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 21
23076: PUSH
23077: LD_INT 3
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PPUSH
23088: CALL_OW 69
23092: ST_TO_ADDR
// if not tmp then
23093: LD_VAR 0 2
23097: NOT
23098: IFFALSE 23102
// exit ;
23100: GO 23131
// for i in tmp do
23102: LD_ADDR_VAR 0 1
23106: PUSH
23107: LD_VAR 0 2
23111: PUSH
23112: FOR_IN
23113: IFFALSE 23129
// SetBLevel ( i , 10 ) ;
23115: LD_VAR 0 1
23119: PPUSH
23120: LD_INT 10
23122: PPUSH
23123: CALL_OW 241
23127: GO 23112
23129: POP
23130: POP
// end ;
23131: PPOPN 2
23133: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23134: LD_EXP 37
23138: PUSH
23139: LD_EXP 54
23143: AND
23144: IFFALSE 23255
23146: GO 23148
23148: DISABLE
23149: LD_INT 0
23151: PPUSH
23152: PPUSH
23153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23154: LD_ADDR_VAR 0 3
23158: PUSH
23159: LD_INT 22
23161: PUSH
23162: LD_OWVAR 2
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 25
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PPUSH
23185: CALL_OW 69
23189: ST_TO_ADDR
// if not tmp then
23190: LD_VAR 0 3
23194: NOT
23195: IFFALSE 23199
// exit ;
23197: GO 23255
// un := tmp [ rand ( 1 , tmp ) ] ;
23199: LD_ADDR_VAR 0 2
23203: PUSH
23204: LD_VAR 0 3
23208: PUSH
23209: LD_INT 1
23211: PPUSH
23212: LD_VAR 0 3
23216: PPUSH
23217: CALL_OW 12
23221: ARRAY
23222: ST_TO_ADDR
// if Crawls ( un ) then
23223: LD_VAR 0 2
23227: PPUSH
23228: CALL_OW 318
23232: IFFALSE 23243
// ComWalk ( un ) ;
23234: LD_VAR 0 2
23238: PPUSH
23239: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23243: LD_VAR 0 2
23247: PPUSH
23248: LD_INT 5
23250: PPUSH
23251: CALL_OW 336
// end ;
23255: PPOPN 3
23257: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23258: LD_EXP 37
23262: PUSH
23263: LD_EXP 55
23267: AND
23268: PUSH
23269: LD_OWVAR 67
23273: PUSH
23274: LD_INT 4
23276: LESS
23277: AND
23278: IFFALSE 23297
23280: GO 23282
23282: DISABLE
// begin Difficulty := Difficulty + 1 ;
23283: LD_ADDR_OWVAR 67
23287: PUSH
23288: LD_OWVAR 67
23292: PUSH
23293: LD_INT 1
23295: PLUS
23296: ST_TO_ADDR
// end ;
23297: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23298: LD_EXP 37
23302: PUSH
23303: LD_EXP 56
23307: AND
23308: IFFALSE 23411
23310: GO 23312
23312: DISABLE
23313: LD_INT 0
23315: PPUSH
// begin for i := 1 to 5 do
23316: LD_ADDR_VAR 0 1
23320: PUSH
23321: DOUBLE
23322: LD_INT 1
23324: DEC
23325: ST_TO_ADDR
23326: LD_INT 5
23328: PUSH
23329: FOR_TO
23330: IFFALSE 23409
// begin uc_nation := nation_nature ;
23332: LD_ADDR_OWVAR 21
23336: PUSH
23337: LD_INT 0
23339: ST_TO_ADDR
// uc_side := 0 ;
23340: LD_ADDR_OWVAR 20
23344: PUSH
23345: LD_INT 0
23347: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23348: LD_ADDR_OWVAR 29
23352: PUSH
23353: LD_INT 12
23355: PUSH
23356: LD_INT 12
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: ST_TO_ADDR
// hc_agressivity := 20 ;
23363: LD_ADDR_OWVAR 35
23367: PUSH
23368: LD_INT 20
23370: ST_TO_ADDR
// hc_class := class_tiger ;
23371: LD_ADDR_OWVAR 28
23375: PUSH
23376: LD_INT 14
23378: ST_TO_ADDR
// hc_gallery :=  ;
23379: LD_ADDR_OWVAR 33
23383: PUSH
23384: LD_STRING 
23386: ST_TO_ADDR
// hc_name :=  ;
23387: LD_ADDR_OWVAR 26
23391: PUSH
23392: LD_STRING 
23394: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23395: CALL_OW 44
23399: PPUSH
23400: LD_INT 0
23402: PPUSH
23403: CALL_OW 51
// end ;
23407: GO 23329
23409: POP
23410: POP
// end ;
23411: PPOPN 1
23413: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23414: LD_EXP 37
23418: PUSH
23419: LD_EXP 57
23423: AND
23424: IFFALSE 23433
23426: GO 23428
23428: DISABLE
// StreamSibBomb ;
23429: CALL 23434 0 0
23433: END
// export function StreamSibBomb ; var i , x , y ; begin
23434: LD_INT 0
23436: PPUSH
23437: PPUSH
23438: PPUSH
23439: PPUSH
// result := false ;
23440: LD_ADDR_VAR 0 1
23444: PUSH
23445: LD_INT 0
23447: ST_TO_ADDR
// for i := 1 to 16 do
23448: LD_ADDR_VAR 0 2
23452: PUSH
23453: DOUBLE
23454: LD_INT 1
23456: DEC
23457: ST_TO_ADDR
23458: LD_INT 16
23460: PUSH
23461: FOR_TO
23462: IFFALSE 23661
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23464: LD_ADDR_VAR 0 3
23468: PUSH
23469: LD_INT 10
23471: PUSH
23472: LD_INT 20
23474: PUSH
23475: LD_INT 30
23477: PUSH
23478: LD_INT 40
23480: PUSH
23481: LD_INT 50
23483: PUSH
23484: LD_INT 60
23486: PUSH
23487: LD_INT 70
23489: PUSH
23490: LD_INT 80
23492: PUSH
23493: LD_INT 90
23495: PUSH
23496: LD_INT 100
23498: PUSH
23499: LD_INT 110
23501: PUSH
23502: LD_INT 120
23504: PUSH
23505: LD_INT 130
23507: PUSH
23508: LD_INT 140
23510: PUSH
23511: LD_INT 150
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: PPUSH
23534: LD_INT 15
23536: PPUSH
23537: CALL_OW 12
23541: ARRAY
23542: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23543: LD_ADDR_VAR 0 4
23547: PUSH
23548: LD_INT 10
23550: PUSH
23551: LD_INT 20
23553: PUSH
23554: LD_INT 30
23556: PUSH
23557: LD_INT 40
23559: PUSH
23560: LD_INT 50
23562: PUSH
23563: LD_INT 60
23565: PUSH
23566: LD_INT 70
23568: PUSH
23569: LD_INT 80
23571: PUSH
23572: LD_INT 90
23574: PUSH
23575: LD_INT 100
23577: PUSH
23578: LD_INT 110
23580: PUSH
23581: LD_INT 120
23583: PUSH
23584: LD_INT 130
23586: PUSH
23587: LD_INT 140
23589: PUSH
23590: LD_INT 150
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 1
23612: PPUSH
23613: LD_INT 15
23615: PPUSH
23616: CALL_OW 12
23620: ARRAY
23621: ST_TO_ADDR
// if ValidHex ( x , y ) then
23622: LD_VAR 0 3
23626: PPUSH
23627: LD_VAR 0 4
23631: PPUSH
23632: CALL_OW 488
23636: IFFALSE 23659
// begin result := [ x , y ] ;
23638: LD_ADDR_VAR 0 1
23642: PUSH
23643: LD_VAR 0 3
23647: PUSH
23648: LD_VAR 0 4
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: ST_TO_ADDR
// break ;
23657: GO 23661
// end ; end ;
23659: GO 23461
23661: POP
23662: POP
// if result then
23663: LD_VAR 0 1
23667: IFFALSE 23727
// begin ToLua ( playSibBomb() ) ;
23669: LD_STRING playSibBomb()
23671: PPUSH
23672: CALL_OW 559
// wait ( 0 0$14 ) ;
23676: LD_INT 490
23678: PPUSH
23679: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23683: LD_VAR 0 1
23687: PUSH
23688: LD_INT 1
23690: ARRAY
23691: PPUSH
23692: LD_VAR 0 1
23696: PUSH
23697: LD_INT 2
23699: ARRAY
23700: PPUSH
23701: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23705: LD_VAR 0 1
23709: PUSH
23710: LD_INT 1
23712: ARRAY
23713: PPUSH
23714: LD_VAR 0 1
23718: PUSH
23719: LD_INT 2
23721: ARRAY
23722: PPUSH
23723: CALL_OW 429
// end ; end ;
23727: LD_VAR 0 1
23731: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23732: LD_EXP 37
23736: PUSH
23737: LD_EXP 59
23741: AND
23742: IFFALSE 23754
23744: GO 23746
23746: DISABLE
// YouLost (  ) ;
23747: LD_STRING 
23749: PPUSH
23750: CALL_OW 104
23754: END
// every 0 0$1 trigger StreamModeActive and sFog do
23755: LD_EXP 37
23759: PUSH
23760: LD_EXP 58
23764: AND
23765: IFFALSE 23779
23767: GO 23769
23769: DISABLE
// FogOff ( your_side ) ;
23770: LD_OWVAR 2
23774: PPUSH
23775: CALL_OW 344
23779: END
// every 0 0$1 trigger StreamModeActive and sSun do
23780: LD_EXP 37
23784: PUSH
23785: LD_EXP 60
23789: AND
23790: IFFALSE 23818
23792: GO 23794
23794: DISABLE
// begin solar_recharge_percent := 0 ;
23795: LD_ADDR_OWVAR 79
23799: PUSH
23800: LD_INT 0
23802: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23803: LD_INT 10500
23805: PPUSH
23806: CALL_OW 67
// solar_recharge_percent := 100 ;
23810: LD_ADDR_OWVAR 79
23814: PUSH
23815: LD_INT 100
23817: ST_TO_ADDR
// end ;
23818: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23819: LD_EXP 37
23823: PUSH
23824: LD_EXP 61
23828: AND
23829: IFFALSE 24068
23831: GO 23833
23833: DISABLE
23834: LD_INT 0
23836: PPUSH
23837: PPUSH
23838: PPUSH
// begin tmp := [ ] ;
23839: LD_ADDR_VAR 0 3
23843: PUSH
23844: EMPTY
23845: ST_TO_ADDR
// for i := 1 to 6 do
23846: LD_ADDR_VAR 0 1
23850: PUSH
23851: DOUBLE
23852: LD_INT 1
23854: DEC
23855: ST_TO_ADDR
23856: LD_INT 6
23858: PUSH
23859: FOR_TO
23860: IFFALSE 23965
// begin uc_nation := nation_nature ;
23862: LD_ADDR_OWVAR 21
23866: PUSH
23867: LD_INT 0
23869: ST_TO_ADDR
// uc_side := 0 ;
23870: LD_ADDR_OWVAR 20
23874: PUSH
23875: LD_INT 0
23877: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23878: LD_ADDR_OWVAR 29
23882: PUSH
23883: LD_INT 12
23885: PUSH
23886: LD_INT 12
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: ST_TO_ADDR
// hc_agressivity := 20 ;
23893: LD_ADDR_OWVAR 35
23897: PUSH
23898: LD_INT 20
23900: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23901: LD_ADDR_OWVAR 28
23905: PUSH
23906: LD_INT 17
23908: ST_TO_ADDR
// hc_gallery :=  ;
23909: LD_ADDR_OWVAR 33
23913: PUSH
23914: LD_STRING 
23916: ST_TO_ADDR
// hc_name :=  ;
23917: LD_ADDR_OWVAR 26
23921: PUSH
23922: LD_STRING 
23924: ST_TO_ADDR
// un := CreateHuman ;
23925: LD_ADDR_VAR 0 2
23929: PUSH
23930: CALL_OW 44
23934: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23935: LD_VAR 0 2
23939: PPUSH
23940: LD_INT 1
23942: PPUSH
23943: CALL_OW 51
// tmp := tmp ^ un ;
23947: LD_ADDR_VAR 0 3
23951: PUSH
23952: LD_VAR 0 3
23956: PUSH
23957: LD_VAR 0 2
23961: ADD
23962: ST_TO_ADDR
// end ;
23963: GO 23859
23965: POP
23966: POP
// repeat wait ( 0 0$1 ) ;
23967: LD_INT 35
23969: PPUSH
23970: CALL_OW 67
// for un in tmp do
23974: LD_ADDR_VAR 0 2
23978: PUSH
23979: LD_VAR 0 3
23983: PUSH
23984: FOR_IN
23985: IFFALSE 24059
// begin if IsDead ( un ) then
23987: LD_VAR 0 2
23991: PPUSH
23992: CALL_OW 301
23996: IFFALSE 24016
// begin tmp := tmp diff un ;
23998: LD_ADDR_VAR 0 3
24002: PUSH
24003: LD_VAR 0 3
24007: PUSH
24008: LD_VAR 0 2
24012: DIFF
24013: ST_TO_ADDR
// continue ;
24014: GO 23984
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_INT 3
24023: PUSH
24024: LD_INT 22
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PPUSH
24038: CALL_OW 69
24042: PPUSH
24043: LD_VAR 0 2
24047: PPUSH
24048: CALL_OW 74
24052: PPUSH
24053: CALL_OW 115
// end ;
24057: GO 23984
24059: POP
24060: POP
// until not tmp ;
24061: LD_VAR 0 3
24065: NOT
24066: IFFALSE 23967
// end ;
24068: PPOPN 3
24070: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24071: LD_EXP 37
24075: PUSH
24076: LD_EXP 62
24080: AND
24081: IFFALSE 24135
24083: GO 24085
24085: DISABLE
// begin ToLua ( displayTroll(); ) ;
24086: LD_STRING displayTroll();
24088: PPUSH
24089: CALL_OW 559
// wait ( 3 3$00 ) ;
24093: LD_INT 6300
24095: PPUSH
24096: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24100: LD_STRING hideTroll();
24102: PPUSH
24103: CALL_OW 559
// wait ( 1 1$00 ) ;
24107: LD_INT 2100
24109: PPUSH
24110: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24114: LD_STRING displayTroll();
24116: PPUSH
24117: CALL_OW 559
// wait ( 1 1$00 ) ;
24121: LD_INT 2100
24123: PPUSH
24124: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24128: LD_STRING hideTroll();
24130: PPUSH
24131: CALL_OW 559
// end ;
24135: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24136: LD_EXP 37
24140: PUSH
24141: LD_EXP 63
24145: AND
24146: IFFALSE 24209
24148: GO 24150
24150: DISABLE
24151: LD_INT 0
24153: PPUSH
// begin p := 0 ;
24154: LD_ADDR_VAR 0 1
24158: PUSH
24159: LD_INT 0
24161: ST_TO_ADDR
// repeat game_speed := 1 ;
24162: LD_ADDR_OWVAR 65
24166: PUSH
24167: LD_INT 1
24169: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24170: LD_INT 35
24172: PPUSH
24173: CALL_OW 67
// p := p + 1 ;
24177: LD_ADDR_VAR 0 1
24181: PUSH
24182: LD_VAR 0 1
24186: PUSH
24187: LD_INT 1
24189: PLUS
24190: ST_TO_ADDR
// until p >= 60 ;
24191: LD_VAR 0 1
24195: PUSH
24196: LD_INT 60
24198: GREATEREQUAL
24199: IFFALSE 24162
// game_speed := 4 ;
24201: LD_ADDR_OWVAR 65
24205: PUSH
24206: LD_INT 4
24208: ST_TO_ADDR
// end ;
24209: PPOPN 1
24211: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24212: LD_EXP 37
24216: PUSH
24217: LD_EXP 64
24221: AND
24222: IFFALSE 24368
24224: GO 24226
24226: DISABLE
24227: LD_INT 0
24229: PPUSH
24230: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24231: LD_ADDR_VAR 0 1
24235: PUSH
24236: LD_INT 22
24238: PUSH
24239: LD_OWVAR 2
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: LD_INT 30
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 30
24263: PUSH
24264: LD_INT 1
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PPUSH
24280: CALL_OW 69
24284: ST_TO_ADDR
// if not depot then
24285: LD_VAR 0 1
24289: NOT
24290: IFFALSE 24294
// exit ;
24292: GO 24368
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24294: LD_ADDR_VAR 0 2
24298: PUSH
24299: LD_VAR 0 1
24303: PUSH
24304: LD_INT 1
24306: PPUSH
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 12
24316: ARRAY
24317: PPUSH
24318: CALL_OW 274
24322: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24323: LD_VAR 0 2
24327: PPUSH
24328: LD_INT 1
24330: PPUSH
24331: LD_INT 0
24333: PPUSH
24334: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24338: LD_VAR 0 2
24342: PPUSH
24343: LD_INT 2
24345: PPUSH
24346: LD_INT 0
24348: PPUSH
24349: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24353: LD_VAR 0 2
24357: PPUSH
24358: LD_INT 3
24360: PPUSH
24361: LD_INT 0
24363: PPUSH
24364: CALL_OW 277
// end ;
24368: PPOPN 2
24370: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24371: LD_EXP 37
24375: PUSH
24376: LD_EXP 65
24380: AND
24381: IFFALSE 24478
24383: GO 24385
24385: DISABLE
24386: LD_INT 0
24388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24389: LD_ADDR_VAR 0 1
24393: PUSH
24394: LD_INT 22
24396: PUSH
24397: LD_OWVAR 2
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 21
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 3
24418: PUSH
24419: LD_INT 23
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: LIST
24437: PPUSH
24438: CALL_OW 69
24442: ST_TO_ADDR
// if not tmp then
24443: LD_VAR 0 1
24447: NOT
24448: IFFALSE 24452
// exit ;
24450: GO 24478
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24452: LD_VAR 0 1
24456: PUSH
24457: LD_INT 1
24459: PPUSH
24460: LD_VAR 0 1
24464: PPUSH
24465: CALL_OW 12
24469: ARRAY
24470: PPUSH
24471: LD_INT 200
24473: PPUSH
24474: CALL_OW 234
// end ;
24478: PPOPN 1
24480: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24481: LD_EXP 37
24485: PUSH
24486: LD_EXP 66
24490: AND
24491: IFFALSE 24570
24493: GO 24495
24495: DISABLE
24496: LD_INT 0
24498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24499: LD_ADDR_VAR 0 1
24503: PUSH
24504: LD_INT 22
24506: PUSH
24507: LD_OWVAR 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 21
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PPUSH
24530: CALL_OW 69
24534: ST_TO_ADDR
// if not tmp then
24535: LD_VAR 0 1
24539: NOT
24540: IFFALSE 24544
// exit ;
24542: GO 24570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24544: LD_VAR 0 1
24548: PUSH
24549: LD_INT 1
24551: PPUSH
24552: LD_VAR 0 1
24556: PPUSH
24557: CALL_OW 12
24561: ARRAY
24562: PPUSH
24563: LD_INT 60
24565: PPUSH
24566: CALL_OW 234
// end ;
24570: PPOPN 1
24572: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24573: LD_EXP 37
24577: PUSH
24578: LD_EXP 67
24582: AND
24583: IFFALSE 24682
24585: GO 24587
24587: DISABLE
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
// begin enable ;
24592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24593: LD_ADDR_VAR 0 1
24597: PUSH
24598: LD_INT 22
24600: PUSH
24601: LD_OWVAR 2
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 61
24612: PUSH
24613: EMPTY
24614: LIST
24615: PUSH
24616: LD_INT 33
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: PPUSH
24631: CALL_OW 69
24635: ST_TO_ADDR
// if not tmp then
24636: LD_VAR 0 1
24640: NOT
24641: IFFALSE 24645
// exit ;
24643: GO 24682
// for i in tmp do
24645: LD_ADDR_VAR 0 2
24649: PUSH
24650: LD_VAR 0 1
24654: PUSH
24655: FOR_IN
24656: IFFALSE 24680
// if IsControledBy ( i ) then
24658: LD_VAR 0 2
24662: PPUSH
24663: CALL_OW 312
24667: IFFALSE 24678
// ComUnlink ( i ) ;
24669: LD_VAR 0 2
24673: PPUSH
24674: CALL_OW 136
24678: GO 24655
24680: POP
24681: POP
// end ;
24682: PPOPN 2
24684: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24685: LD_EXP 37
24689: PUSH
24690: LD_EXP 68
24694: AND
24695: IFFALSE 24835
24697: GO 24699
24699: DISABLE
24700: LD_INT 0
24702: PPUSH
24703: PPUSH
// begin ToLua ( displayPowell(); ) ;
24704: LD_STRING displayPowell();
24706: PPUSH
24707: CALL_OW 559
// uc_side := 0 ;
24711: LD_ADDR_OWVAR 20
24715: PUSH
24716: LD_INT 0
24718: ST_TO_ADDR
// uc_nation := 2 ;
24719: LD_ADDR_OWVAR 21
24723: PUSH
24724: LD_INT 2
24726: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24727: LD_ADDR_OWVAR 37
24731: PUSH
24732: LD_INT 14
24734: ST_TO_ADDR
// vc_engine := engine_siberite ;
24735: LD_ADDR_OWVAR 39
24739: PUSH
24740: LD_INT 3
24742: ST_TO_ADDR
// vc_control := control_apeman ;
24743: LD_ADDR_OWVAR 38
24747: PUSH
24748: LD_INT 5
24750: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24751: LD_ADDR_OWVAR 40
24755: PUSH
24756: LD_INT 29
24758: ST_TO_ADDR
// un := CreateVehicle ;
24759: LD_ADDR_VAR 0 2
24763: PUSH
24764: CALL_OW 45
24768: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24769: LD_VAR 0 2
24773: PPUSH
24774: LD_INT 1
24776: PPUSH
24777: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24781: LD_INT 35
24783: PPUSH
24784: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24788: LD_VAR 0 2
24792: PPUSH
24793: LD_INT 22
24795: PUSH
24796: LD_OWVAR 2
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PPUSH
24805: CALL_OW 69
24809: PPUSH
24810: LD_VAR 0 2
24814: PPUSH
24815: CALL_OW 74
24819: PPUSH
24820: CALL_OW 115
// until IsDead ( un ) ;
24824: LD_VAR 0 2
24828: PPUSH
24829: CALL_OW 301
24833: IFFALSE 24781
// end ;
24835: PPOPN 2
24837: END
// every 0 0$1 trigger StreamModeActive and sStu do
24838: LD_EXP 37
24842: PUSH
24843: LD_EXP 76
24847: AND
24848: IFFALSE 24864
24850: GO 24852
24852: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24853: LD_STRING displayStucuk();
24855: PPUSH
24856: CALL_OW 559
// ResetFog ;
24860: CALL_OW 335
// end ;
24864: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24865: LD_EXP 37
24869: PUSH
24870: LD_EXP 69
24874: AND
24875: IFFALSE 25016
24877: GO 24879
24879: DISABLE
24880: LD_INT 0
24882: PPUSH
24883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24884: LD_ADDR_VAR 0 2
24888: PUSH
24889: LD_INT 22
24891: PUSH
24892: LD_OWVAR 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PPUSH
24915: CALL_OW 69
24919: ST_TO_ADDR
// if not tmp then
24920: LD_VAR 0 2
24924: NOT
24925: IFFALSE 24929
// exit ;
24927: GO 25016
// un := tmp [ rand ( 1 , tmp ) ] ;
24929: LD_ADDR_VAR 0 1
24933: PUSH
24934: LD_VAR 0 2
24938: PUSH
24939: LD_INT 1
24941: PPUSH
24942: LD_VAR 0 2
24946: PPUSH
24947: CALL_OW 12
24951: ARRAY
24952: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24953: LD_VAR 0 1
24957: PPUSH
24958: LD_INT 0
24960: PPUSH
24961: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24965: LD_VAR 0 1
24969: PPUSH
24970: LD_OWVAR 3
24974: PUSH
24975: LD_VAR 0 1
24979: DIFF
24980: PPUSH
24981: LD_VAR 0 1
24985: PPUSH
24986: CALL_OW 74
24990: PPUSH
24991: CALL_OW 115
// wait ( 0 0$20 ) ;
24995: LD_INT 700
24997: PPUSH
24998: CALL_OW 67
// SetSide ( un , your_side ) ;
25002: LD_VAR 0 1
25006: PPUSH
25007: LD_OWVAR 2
25011: PPUSH
25012: CALL_OW 235
// end ;
25016: PPOPN 2
25018: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25019: LD_EXP 37
25023: PUSH
25024: LD_EXP 70
25028: AND
25029: IFFALSE 25135
25031: GO 25033
25033: DISABLE
25034: LD_INT 0
25036: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25037: LD_ADDR_VAR 0 1
25041: PUSH
25042: LD_INT 22
25044: PUSH
25045: LD_OWVAR 2
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: LD_INT 30
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 30
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PPUSH
25086: CALL_OW 69
25090: ST_TO_ADDR
// if not depot then
25091: LD_VAR 0 1
25095: NOT
25096: IFFALSE 25100
// exit ;
25098: GO 25135
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25100: LD_VAR 0 1
25104: PUSH
25105: LD_INT 1
25107: ARRAY
25108: PPUSH
25109: CALL_OW 250
25113: PPUSH
25114: LD_VAR 0 1
25118: PUSH
25119: LD_INT 1
25121: ARRAY
25122: PPUSH
25123: CALL_OW 251
25127: PPUSH
25128: LD_INT 70
25130: PPUSH
25131: CALL_OW 495
// end ;
25135: PPOPN 1
25137: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25138: LD_EXP 37
25142: PUSH
25143: LD_EXP 71
25147: AND
25148: IFFALSE 25359
25150: GO 25152
25152: DISABLE
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25160: LD_ADDR_VAR 0 5
25164: PUSH
25165: LD_INT 22
25167: PUSH
25168: LD_OWVAR 2
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 21
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PPUSH
25191: CALL_OW 69
25195: ST_TO_ADDR
// if not tmp then
25196: LD_VAR 0 5
25200: NOT
25201: IFFALSE 25205
// exit ;
25203: GO 25359
// for i in tmp do
25205: LD_ADDR_VAR 0 1
25209: PUSH
25210: LD_VAR 0 5
25214: PUSH
25215: FOR_IN
25216: IFFALSE 25357
// begin d := rand ( 0 , 5 ) ;
25218: LD_ADDR_VAR 0 4
25222: PUSH
25223: LD_INT 0
25225: PPUSH
25226: LD_INT 5
25228: PPUSH
25229: CALL_OW 12
25233: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25234: LD_ADDR_VAR 0 2
25238: PUSH
25239: LD_VAR 0 1
25243: PPUSH
25244: CALL_OW 250
25248: PPUSH
25249: LD_VAR 0 4
25253: PPUSH
25254: LD_INT 3
25256: PPUSH
25257: LD_INT 12
25259: PPUSH
25260: CALL_OW 12
25264: PPUSH
25265: CALL_OW 272
25269: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25270: LD_ADDR_VAR 0 3
25274: PUSH
25275: LD_VAR 0 1
25279: PPUSH
25280: CALL_OW 251
25284: PPUSH
25285: LD_VAR 0 4
25289: PPUSH
25290: LD_INT 3
25292: PPUSH
25293: LD_INT 12
25295: PPUSH
25296: CALL_OW 12
25300: PPUSH
25301: CALL_OW 273
25305: ST_TO_ADDR
// if ValidHex ( x , y ) then
25306: LD_VAR 0 2
25310: PPUSH
25311: LD_VAR 0 3
25315: PPUSH
25316: CALL_OW 488
25320: IFFALSE 25355
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25322: LD_VAR 0 1
25326: PPUSH
25327: LD_VAR 0 2
25331: PPUSH
25332: LD_VAR 0 3
25336: PPUSH
25337: LD_INT 3
25339: PPUSH
25340: LD_INT 6
25342: PPUSH
25343: CALL_OW 12
25347: PPUSH
25348: LD_INT 1
25350: PPUSH
25351: CALL_OW 483
// end ;
25355: GO 25215
25357: POP
25358: POP
// end ;
25359: PPOPN 5
25361: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25362: LD_EXP 37
25366: PUSH
25367: LD_EXP 72
25371: AND
25372: IFFALSE 25466
25374: GO 25376
25376: DISABLE
25377: LD_INT 0
25379: PPUSH
25380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25381: LD_ADDR_VAR 0 2
25385: PUSH
25386: LD_INT 22
25388: PUSH
25389: LD_OWVAR 2
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 32
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 21
25410: PUSH
25411: LD_INT 2
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: PPUSH
25423: CALL_OW 69
25427: ST_TO_ADDR
// if not tmp then
25428: LD_VAR 0 2
25432: NOT
25433: IFFALSE 25437
// exit ;
25435: GO 25466
// for i in tmp do
25437: LD_ADDR_VAR 0 1
25441: PUSH
25442: LD_VAR 0 2
25446: PUSH
25447: FOR_IN
25448: IFFALSE 25464
// SetFuel ( i , 0 ) ;
25450: LD_VAR 0 1
25454: PPUSH
25455: LD_INT 0
25457: PPUSH
25458: CALL_OW 240
25462: GO 25447
25464: POP
25465: POP
// end ;
25466: PPOPN 2
25468: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25469: LD_EXP 37
25473: PUSH
25474: LD_EXP 73
25478: AND
25479: IFFALSE 25545
25481: GO 25483
25483: DISABLE
25484: LD_INT 0
25486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25487: LD_ADDR_VAR 0 1
25491: PUSH
25492: LD_INT 22
25494: PUSH
25495: LD_OWVAR 2
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 30
25506: PUSH
25507: LD_INT 29
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PPUSH
25518: CALL_OW 69
25522: ST_TO_ADDR
// if not tmp then
25523: LD_VAR 0 1
25527: NOT
25528: IFFALSE 25532
// exit ;
25530: GO 25545
// DestroyUnit ( tmp [ 1 ] ) ;
25532: LD_VAR 0 1
25536: PUSH
25537: LD_INT 1
25539: ARRAY
25540: PPUSH
25541: CALL_OW 65
// end ;
25545: PPOPN 1
25547: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25548: LD_EXP 37
25552: PUSH
25553: LD_EXP 75
25557: AND
25558: IFFALSE 25687
25560: GO 25562
25562: DISABLE
25563: LD_INT 0
25565: PPUSH
// begin uc_side := 0 ;
25566: LD_ADDR_OWVAR 20
25570: PUSH
25571: LD_INT 0
25573: ST_TO_ADDR
// uc_nation := nation_arabian ;
25574: LD_ADDR_OWVAR 21
25578: PUSH
25579: LD_INT 2
25581: ST_TO_ADDR
// hc_gallery :=  ;
25582: LD_ADDR_OWVAR 33
25586: PUSH
25587: LD_STRING 
25589: ST_TO_ADDR
// hc_name :=  ;
25590: LD_ADDR_OWVAR 26
25594: PUSH
25595: LD_STRING 
25597: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25598: LD_INT 1
25600: PPUSH
25601: LD_INT 11
25603: PPUSH
25604: LD_INT 10
25606: PPUSH
25607: CALL_OW 380
// un := CreateHuman ;
25611: LD_ADDR_VAR 0 1
25615: PUSH
25616: CALL_OW 44
25620: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25621: LD_VAR 0 1
25625: PPUSH
25626: LD_INT 1
25628: PPUSH
25629: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25633: LD_INT 35
25635: PPUSH
25636: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25640: LD_VAR 0 1
25644: PPUSH
25645: LD_INT 22
25647: PUSH
25648: LD_OWVAR 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PPUSH
25657: CALL_OW 69
25661: PPUSH
25662: LD_VAR 0 1
25666: PPUSH
25667: CALL_OW 74
25671: PPUSH
25672: CALL_OW 115
// until IsDead ( un ) ;
25676: LD_VAR 0 1
25680: PPUSH
25681: CALL_OW 301
25685: IFFALSE 25633
// end ;
25687: PPOPN 1
25689: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25690: LD_EXP 37
25694: PUSH
25695: LD_EXP 77
25699: AND
25700: IFFALSE 25712
25702: GO 25704
25704: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25705: LD_STRING earthquake(getX(game), 0, 32)
25707: PPUSH
25708: CALL_OW 559
25712: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25713: LD_EXP 37
25717: PUSH
25718: LD_EXP 78
25722: AND
25723: IFFALSE 25814
25725: GO 25727
25727: DISABLE
25728: LD_INT 0
25730: PPUSH
// begin enable ;
25731: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25732: LD_ADDR_VAR 0 1
25736: PUSH
25737: LD_INT 22
25739: PUSH
25740: LD_OWVAR 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 21
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 33
25761: PUSH
25762: LD_INT 3
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// if not tmp then
25779: LD_VAR 0 1
25783: NOT
25784: IFFALSE 25788
// exit ;
25786: GO 25814
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25788: LD_VAR 0 1
25792: PUSH
25793: LD_INT 1
25795: PPUSH
25796: LD_VAR 0 1
25800: PPUSH
25801: CALL_OW 12
25805: ARRAY
25806: PPUSH
25807: LD_INT 1
25809: PPUSH
25810: CALL_OW 234
// end ;
25814: PPOPN 1
25816: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25817: LD_EXP 37
25821: PUSH
25822: LD_EXP 79
25826: AND
25827: IFFALSE 25968
25829: GO 25831
25831: DISABLE
25832: LD_INT 0
25834: PPUSH
25835: PPUSH
25836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25837: LD_ADDR_VAR 0 3
25841: PUSH
25842: LD_INT 22
25844: PUSH
25845: LD_OWVAR 2
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 25
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL_OW 69
25872: ST_TO_ADDR
// if not tmp then
25873: LD_VAR 0 3
25877: NOT
25878: IFFALSE 25882
// exit ;
25880: GO 25968
// un := tmp [ rand ( 1 , tmp ) ] ;
25882: LD_ADDR_VAR 0 2
25886: PUSH
25887: LD_VAR 0 3
25891: PUSH
25892: LD_INT 1
25894: PPUSH
25895: LD_VAR 0 3
25899: PPUSH
25900: CALL_OW 12
25904: ARRAY
25905: ST_TO_ADDR
// if Crawls ( un ) then
25906: LD_VAR 0 2
25910: PPUSH
25911: CALL_OW 318
25915: IFFALSE 25926
// ComWalk ( un ) ;
25917: LD_VAR 0 2
25921: PPUSH
25922: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25926: LD_VAR 0 2
25930: PPUSH
25931: LD_INT 9
25933: PPUSH
25934: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25938: LD_INT 28
25940: PPUSH
25941: LD_OWVAR 2
25945: PPUSH
25946: LD_INT 2
25948: PPUSH
25949: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25953: LD_INT 29
25955: PPUSH
25956: LD_OWVAR 2
25960: PPUSH
25961: LD_INT 2
25963: PPUSH
25964: CALL_OW 322
// end ;
25968: PPOPN 3
25970: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25971: LD_EXP 37
25975: PUSH
25976: LD_EXP 80
25980: AND
25981: IFFALSE 26092
25983: GO 25985
25985: DISABLE
25986: LD_INT 0
25988: PPUSH
25989: PPUSH
25990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25991: LD_ADDR_VAR 0 3
25995: PUSH
25996: LD_INT 22
25998: PUSH
25999: LD_OWVAR 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 25
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PPUSH
26022: CALL_OW 69
26026: ST_TO_ADDR
// if not tmp then
26027: LD_VAR 0 3
26031: NOT
26032: IFFALSE 26036
// exit ;
26034: GO 26092
// un := tmp [ rand ( 1 , tmp ) ] ;
26036: LD_ADDR_VAR 0 2
26040: PUSH
26041: LD_VAR 0 3
26045: PUSH
26046: LD_INT 1
26048: PPUSH
26049: LD_VAR 0 3
26053: PPUSH
26054: CALL_OW 12
26058: ARRAY
26059: ST_TO_ADDR
// if Crawls ( un ) then
26060: LD_VAR 0 2
26064: PPUSH
26065: CALL_OW 318
26069: IFFALSE 26080
// ComWalk ( un ) ;
26071: LD_VAR 0 2
26075: PPUSH
26076: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26080: LD_VAR 0 2
26084: PPUSH
26085: LD_INT 8
26087: PPUSH
26088: CALL_OW 336
// end ;
26092: PPOPN 3
26094: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26095: LD_EXP 37
26099: PUSH
26100: LD_EXP 81
26104: AND
26105: IFFALSE 26249
26107: GO 26109
26109: DISABLE
26110: LD_INT 0
26112: PPUSH
26113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26114: LD_ADDR_VAR 0 2
26118: PUSH
26119: LD_INT 22
26121: PUSH
26122: LD_OWVAR 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 21
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: LD_INT 34
26146: PUSH
26147: LD_INT 12
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 34
26156: PUSH
26157: LD_INT 51
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 34
26166: PUSH
26167: LD_INT 32
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: PPUSH
26185: CALL_OW 69
26189: ST_TO_ADDR
// if not tmp then
26190: LD_VAR 0 2
26194: NOT
26195: IFFALSE 26199
// exit ;
26197: GO 26249
// for i in tmp do
26199: LD_ADDR_VAR 0 1
26203: PUSH
26204: LD_VAR 0 2
26208: PUSH
26209: FOR_IN
26210: IFFALSE 26247
// if GetCargo ( i , mat_artifact ) = 0 then
26212: LD_VAR 0 1
26216: PPUSH
26217: LD_INT 4
26219: PPUSH
26220: CALL_OW 289
26224: PUSH
26225: LD_INT 0
26227: EQUAL
26228: IFFALSE 26245
// SetCargo ( i , mat_siberit , 100 ) ;
26230: LD_VAR 0 1
26234: PPUSH
26235: LD_INT 3
26237: PPUSH
26238: LD_INT 100
26240: PPUSH
26241: CALL_OW 290
26245: GO 26209
26247: POP
26248: POP
// end ;
26249: PPOPN 2
26251: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26252: LD_EXP 37
26256: PUSH
26257: LD_EXP 82
26261: AND
26262: IFFALSE 26445
26264: GO 26266
26266: DISABLE
26267: LD_INT 0
26269: PPUSH
26270: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26271: LD_ADDR_VAR 0 2
26275: PUSH
26276: LD_INT 22
26278: PUSH
26279: LD_OWVAR 2
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PPUSH
26288: CALL_OW 69
26292: ST_TO_ADDR
// if not tmp then
26293: LD_VAR 0 2
26297: NOT
26298: IFFALSE 26302
// exit ;
26300: GO 26445
// for i := 1 to 2 do
26302: LD_ADDR_VAR 0 1
26306: PUSH
26307: DOUBLE
26308: LD_INT 1
26310: DEC
26311: ST_TO_ADDR
26312: LD_INT 2
26314: PUSH
26315: FOR_TO
26316: IFFALSE 26443
// begin uc_side := your_side ;
26318: LD_ADDR_OWVAR 20
26322: PUSH
26323: LD_OWVAR 2
26327: ST_TO_ADDR
// uc_nation := nation_american ;
26328: LD_ADDR_OWVAR 21
26332: PUSH
26333: LD_INT 1
26335: ST_TO_ADDR
// vc_chassis := us_morphling ;
26336: LD_ADDR_OWVAR 37
26340: PUSH
26341: LD_INT 5
26343: ST_TO_ADDR
// vc_engine := engine_siberite ;
26344: LD_ADDR_OWVAR 39
26348: PUSH
26349: LD_INT 3
26351: ST_TO_ADDR
// vc_control := control_computer ;
26352: LD_ADDR_OWVAR 38
26356: PUSH
26357: LD_INT 3
26359: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26360: LD_ADDR_OWVAR 40
26364: PUSH
26365: LD_INT 10
26367: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26368: LD_VAR 0 2
26372: PUSH
26373: LD_INT 1
26375: ARRAY
26376: PPUSH
26377: CALL_OW 310
26381: NOT
26382: IFFALSE 26429
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26384: CALL_OW 45
26388: PPUSH
26389: LD_VAR 0 2
26393: PUSH
26394: LD_INT 1
26396: ARRAY
26397: PPUSH
26398: CALL_OW 250
26402: PPUSH
26403: LD_VAR 0 2
26407: PUSH
26408: LD_INT 1
26410: ARRAY
26411: PPUSH
26412: CALL_OW 251
26416: PPUSH
26417: LD_INT 12
26419: PPUSH
26420: LD_INT 1
26422: PPUSH
26423: CALL_OW 50
26427: GO 26441
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26429: CALL_OW 45
26433: PPUSH
26434: LD_INT 1
26436: PPUSH
26437: CALL_OW 51
// end ;
26441: GO 26315
26443: POP
26444: POP
// end ;
26445: PPOPN 2
26447: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26448: LD_EXP 37
26452: PUSH
26453: LD_EXP 83
26457: AND
26458: IFFALSE 26680
26460: GO 26462
26462: DISABLE
26463: LD_INT 0
26465: PPUSH
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
26470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26471: LD_ADDR_VAR 0 6
26475: PUSH
26476: LD_INT 22
26478: PUSH
26479: LD_OWVAR 2
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 21
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 3
26500: PUSH
26501: LD_INT 23
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: PPUSH
26520: CALL_OW 69
26524: ST_TO_ADDR
// if not tmp then
26525: LD_VAR 0 6
26529: NOT
26530: IFFALSE 26534
// exit ;
26532: GO 26680
// s1 := rand ( 1 , 4 ) ;
26534: LD_ADDR_VAR 0 2
26538: PUSH
26539: LD_INT 1
26541: PPUSH
26542: LD_INT 4
26544: PPUSH
26545: CALL_OW 12
26549: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26550: LD_ADDR_VAR 0 4
26554: PUSH
26555: LD_VAR 0 6
26559: PUSH
26560: LD_INT 1
26562: ARRAY
26563: PPUSH
26564: LD_VAR 0 2
26568: PPUSH
26569: CALL_OW 259
26573: ST_TO_ADDR
// if s1 = 1 then
26574: LD_VAR 0 2
26578: PUSH
26579: LD_INT 1
26581: EQUAL
26582: IFFALSE 26602
// s2 := rand ( 2 , 4 ) else
26584: LD_ADDR_VAR 0 3
26588: PUSH
26589: LD_INT 2
26591: PPUSH
26592: LD_INT 4
26594: PPUSH
26595: CALL_OW 12
26599: ST_TO_ADDR
26600: GO 26610
// s2 := 1 ;
26602: LD_ADDR_VAR 0 3
26606: PUSH
26607: LD_INT 1
26609: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26610: LD_ADDR_VAR 0 5
26614: PUSH
26615: LD_VAR 0 6
26619: PUSH
26620: LD_INT 1
26622: ARRAY
26623: PPUSH
26624: LD_VAR 0 3
26628: PPUSH
26629: CALL_OW 259
26633: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26634: LD_VAR 0 6
26638: PUSH
26639: LD_INT 1
26641: ARRAY
26642: PPUSH
26643: LD_VAR 0 2
26647: PPUSH
26648: LD_VAR 0 5
26652: PPUSH
26653: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26657: LD_VAR 0 6
26661: PUSH
26662: LD_INT 1
26664: ARRAY
26665: PPUSH
26666: LD_VAR 0 3
26670: PPUSH
26671: LD_VAR 0 4
26675: PPUSH
26676: CALL_OW 237
// end ;
26680: PPOPN 6
26682: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26683: LD_EXP 37
26687: PUSH
26688: LD_EXP 84
26692: AND
26693: IFFALSE 26772
26695: GO 26697
26697: DISABLE
26698: LD_INT 0
26700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26701: LD_ADDR_VAR 0 1
26705: PUSH
26706: LD_INT 22
26708: PUSH
26709: LD_OWVAR 2
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 30
26720: PUSH
26721: LD_INT 3
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PPUSH
26732: CALL_OW 69
26736: ST_TO_ADDR
// if not tmp then
26737: LD_VAR 0 1
26741: NOT
26742: IFFALSE 26746
// exit ;
26744: GO 26772
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26746: LD_VAR 0 1
26750: PUSH
26751: LD_INT 1
26753: PPUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL_OW 12
26763: ARRAY
26764: PPUSH
26765: LD_INT 1
26767: PPUSH
26768: CALL_OW 234
// end ;
26772: PPOPN 1
26774: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26775: LD_EXP 37
26779: PUSH
26780: LD_EXP 85
26784: AND
26785: IFFALSE 26897
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
26793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26794: LD_ADDR_VAR 0 2
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_OWVAR 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: LD_INT 30
26816: PUSH
26817: LD_INT 27
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 30
26826: PUSH
26827: LD_INT 26
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 30
26836: PUSH
26837: LD_INT 28
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: ST_TO_ADDR
// if not tmp then
26859: LD_VAR 0 2
26863: NOT
26864: IFFALSE 26868
// exit ;
26866: GO 26897
// for i in tmp do
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_VAR 0 2
26877: PUSH
26878: FOR_IN
26879: IFFALSE 26895
// SetLives ( i , 1 ) ;
26881: LD_VAR 0 1
26885: PPUSH
26886: LD_INT 1
26888: PPUSH
26889: CALL_OW 234
26893: GO 26878
26895: POP
26896: POP
// end ;
26897: PPOPN 2
26899: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26900: LD_EXP 37
26904: PUSH
26905: LD_EXP 86
26909: AND
26910: IFFALSE 27197
26912: GO 26914
26914: DISABLE
26915: LD_INT 0
26917: PPUSH
26918: PPUSH
26919: PPUSH
// begin i := rand ( 1 , 7 ) ;
26920: LD_ADDR_VAR 0 1
26924: PUSH
26925: LD_INT 1
26927: PPUSH
26928: LD_INT 7
26930: PPUSH
26931: CALL_OW 12
26935: ST_TO_ADDR
// case i of 1 :
26936: LD_VAR 0 1
26940: PUSH
26941: LD_INT 1
26943: DOUBLE
26944: EQUAL
26945: IFTRUE 26949
26947: GO 26959
26949: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26950: LD_STRING earthquake(getX(game), 0, 32)
26952: PPUSH
26953: CALL_OW 559
26957: GO 27197
26959: LD_INT 2
26961: DOUBLE
26962: EQUAL
26963: IFTRUE 26967
26965: GO 26981
26967: POP
// begin ToLua ( displayStucuk(); ) ;
26968: LD_STRING displayStucuk();
26970: PPUSH
26971: CALL_OW 559
// ResetFog ;
26975: CALL_OW 335
// end ; 3 :
26979: GO 27197
26981: LD_INT 3
26983: DOUBLE
26984: EQUAL
26985: IFTRUE 26989
26987: GO 27093
26989: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26990: LD_ADDR_VAR 0 2
26994: PUSH
26995: LD_INT 22
26997: PUSH
26998: LD_OWVAR 2
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 25
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PPUSH
27021: CALL_OW 69
27025: ST_TO_ADDR
// if not tmp then
27026: LD_VAR 0 2
27030: NOT
27031: IFFALSE 27035
// exit ;
27033: GO 27197
// un := tmp [ rand ( 1 , tmp ) ] ;
27035: LD_ADDR_VAR 0 3
27039: PUSH
27040: LD_VAR 0 2
27044: PUSH
27045: LD_INT 1
27047: PPUSH
27048: LD_VAR 0 2
27052: PPUSH
27053: CALL_OW 12
27057: ARRAY
27058: ST_TO_ADDR
// if Crawls ( un ) then
27059: LD_VAR 0 3
27063: PPUSH
27064: CALL_OW 318
27068: IFFALSE 27079
// ComWalk ( un ) ;
27070: LD_VAR 0 3
27074: PPUSH
27075: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27079: LD_VAR 0 3
27083: PPUSH
27084: LD_INT 8
27086: PPUSH
27087: CALL_OW 336
// end ; 4 :
27091: GO 27197
27093: LD_INT 4
27095: DOUBLE
27096: EQUAL
27097: IFTRUE 27101
27099: GO 27175
27101: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27102: LD_ADDR_VAR 0 2
27106: PUSH
27107: LD_INT 22
27109: PUSH
27110: LD_OWVAR 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 30
27121: PUSH
27122: LD_INT 29
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PPUSH
27133: CALL_OW 69
27137: ST_TO_ADDR
// if not tmp then
27138: LD_VAR 0 2
27142: NOT
27143: IFFALSE 27147
// exit ;
27145: GO 27197
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27147: LD_VAR 0 2
27151: PUSH
27152: LD_INT 1
27154: ARRAY
27155: PPUSH
27156: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27160: LD_VAR 0 2
27164: PUSH
27165: LD_INT 1
27167: ARRAY
27168: PPUSH
27169: CALL_OW 65
// end ; 5 .. 7 :
27173: GO 27197
27175: LD_INT 5
27177: DOUBLE
27178: GREATEREQUAL
27179: IFFALSE 27187
27181: LD_INT 7
27183: DOUBLE
27184: LESSEQUAL
27185: IFTRUE 27189
27187: GO 27196
27189: POP
// StreamSibBomb ; end ;
27190: CALL 23434 0 0
27194: GO 27197
27196: POP
// end ;
27197: PPOPN 3
27199: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27200: LD_EXP 37
27204: PUSH
27205: LD_EXP 87
27209: AND
27210: IFFALSE 27366
27212: GO 27214
27214: DISABLE
27215: LD_INT 0
27217: PPUSH
27218: PPUSH
27219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27220: LD_ADDR_VAR 0 2
27224: PUSH
27225: LD_INT 81
27227: PUSH
27228: LD_OWVAR 2
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: LD_INT 21
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 21
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: ST_TO_ADDR
// if not tmp then
27274: LD_VAR 0 2
27278: NOT
27279: IFFALSE 27283
// exit ;
27281: GO 27366
// p := 0 ;
27283: LD_ADDR_VAR 0 3
27287: PUSH
27288: LD_INT 0
27290: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27291: LD_INT 35
27293: PPUSH
27294: CALL_OW 67
// p := p + 1 ;
27298: LD_ADDR_VAR 0 3
27302: PUSH
27303: LD_VAR 0 3
27307: PUSH
27308: LD_INT 1
27310: PLUS
27311: ST_TO_ADDR
// for i in tmp do
27312: LD_ADDR_VAR 0 1
27316: PUSH
27317: LD_VAR 0 2
27321: PUSH
27322: FOR_IN
27323: IFFALSE 27354
// if GetLives ( i ) < 1000 then
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 256
27334: PUSH
27335: LD_INT 1000
27337: LESS
27338: IFFALSE 27352
// SetLives ( i , 1000 ) ;
27340: LD_VAR 0 1
27344: PPUSH
27345: LD_INT 1000
27347: PPUSH
27348: CALL_OW 234
27352: GO 27322
27354: POP
27355: POP
// until p > 20 ;
27356: LD_VAR 0 3
27360: PUSH
27361: LD_INT 20
27363: GREATER
27364: IFFALSE 27291
// end ;
27366: PPOPN 3
27368: END
// every 0 0$1 trigger StreamModeActive and sTime do
27369: LD_EXP 37
27373: PUSH
27374: LD_EXP 88
27378: AND
27379: IFFALSE 27414
27381: GO 27383
27383: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27384: LD_INT 28
27386: PPUSH
27387: LD_OWVAR 2
27391: PPUSH
27392: LD_INT 2
27394: PPUSH
27395: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27399: LD_INT 30
27401: PPUSH
27402: LD_OWVAR 2
27406: PPUSH
27407: LD_INT 2
27409: PPUSH
27410: CALL_OW 322
// end ;
27414: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27415: LD_EXP 37
27419: PUSH
27420: LD_EXP 89
27424: AND
27425: IFFALSE 27546
27427: GO 27429
27429: DISABLE
27430: LD_INT 0
27432: PPUSH
27433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: LD_INT 22
27441: PUSH
27442: LD_OWVAR 2
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 21
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 3
27463: PUSH
27464: LD_INT 23
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: PPUSH
27483: CALL_OW 69
27487: ST_TO_ADDR
// if not tmp then
27488: LD_VAR 0 2
27492: NOT
27493: IFFALSE 27497
// exit ;
27495: GO 27546
// for i in tmp do
27497: LD_ADDR_VAR 0 1
27501: PUSH
27502: LD_VAR 0 2
27506: PUSH
27507: FOR_IN
27508: IFFALSE 27544
// begin if Crawls ( i ) then
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 318
27519: IFFALSE 27530
// ComWalk ( i ) ;
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL_OW 138
// SetClass ( i , 2 ) ;
27530: LD_VAR 0 1
27534: PPUSH
27535: LD_INT 2
27537: PPUSH
27538: CALL_OW 336
// end ;
27542: GO 27507
27544: POP
27545: POP
// end ;
27546: PPOPN 2
27548: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27549: LD_EXP 37
27553: PUSH
27554: LD_EXP 90
27558: AND
27559: IFFALSE 27847
27561: GO 27563
27563: DISABLE
27564: LD_INT 0
27566: PPUSH
27567: PPUSH
27568: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27569: LD_OWVAR 2
27573: PPUSH
27574: LD_INT 9
27576: PPUSH
27577: LD_INT 1
27579: PPUSH
27580: LD_INT 1
27582: PPUSH
27583: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27587: LD_INT 9
27589: PPUSH
27590: LD_OWVAR 2
27594: PPUSH
27595: CALL_OW 343
// uc_side := 9 ;
27599: LD_ADDR_OWVAR 20
27603: PUSH
27604: LD_INT 9
27606: ST_TO_ADDR
// uc_nation := 2 ;
27607: LD_ADDR_OWVAR 21
27611: PUSH
27612: LD_INT 2
27614: ST_TO_ADDR
// hc_name := Dark Warrior ;
27615: LD_ADDR_OWVAR 26
27619: PUSH
27620: LD_STRING Dark Warrior
27622: ST_TO_ADDR
// hc_gallery :=  ;
27623: LD_ADDR_OWVAR 33
27627: PUSH
27628: LD_STRING 
27630: ST_TO_ADDR
// hc_noskilllimit := true ;
27631: LD_ADDR_OWVAR 76
27635: PUSH
27636: LD_INT 1
27638: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27639: LD_ADDR_OWVAR 31
27643: PUSH
27644: LD_INT 30
27646: PUSH
27647: LD_INT 30
27649: PUSH
27650: LD_INT 30
27652: PUSH
27653: LD_INT 30
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// un := CreateHuman ;
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: CALL_OW 44
27671: ST_TO_ADDR
// hc_noskilllimit := false ;
27672: LD_ADDR_OWVAR 76
27676: PUSH
27677: LD_INT 0
27679: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27680: LD_VAR 0 3
27684: PPUSH
27685: LD_INT 1
27687: PPUSH
27688: CALL_OW 51
// ToLua ( playRanger() ) ;
27692: LD_STRING playRanger()
27694: PPUSH
27695: CALL_OW 559
// p := 0 ;
27699: LD_ADDR_VAR 0 2
27703: PUSH
27704: LD_INT 0
27706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27707: LD_INT 35
27709: PPUSH
27710: CALL_OW 67
// p := p + 1 ;
27714: LD_ADDR_VAR 0 2
27718: PUSH
27719: LD_VAR 0 2
27723: PUSH
27724: LD_INT 1
27726: PLUS
27727: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27728: LD_VAR 0 3
27732: PPUSH
27733: CALL_OW 256
27737: PUSH
27738: LD_INT 1000
27740: LESS
27741: IFFALSE 27755
// SetLives ( un , 1000 ) ;
27743: LD_VAR 0 3
27747: PPUSH
27748: LD_INT 1000
27750: PPUSH
27751: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27755: LD_VAR 0 3
27759: PPUSH
27760: LD_INT 81
27762: PUSH
27763: LD_OWVAR 2
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 91
27774: PUSH
27775: LD_VAR 0 3
27779: PUSH
27780: LD_INT 30
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PPUSH
27792: CALL_OW 69
27796: PPUSH
27797: LD_VAR 0 3
27801: PPUSH
27802: CALL_OW 74
27806: PPUSH
27807: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27811: LD_VAR 0 2
27815: PUSH
27816: LD_INT 80
27818: GREATER
27819: PUSH
27820: LD_VAR 0 3
27824: PPUSH
27825: CALL_OW 301
27829: OR
27830: IFFALSE 27707
// if un then
27832: LD_VAR 0 3
27836: IFFALSE 27847
// RemoveUnit ( un ) ;
27838: LD_VAR 0 3
27842: PPUSH
27843: CALL_OW 64
// end ;
27847: PPOPN 3
27849: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27850: LD_EXP 91
27854: IFFALSE 27970
27856: GO 27858
27858: DISABLE
27859: LD_INT 0
27861: PPUSH
27862: PPUSH
27863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27864: LD_ADDR_VAR 0 2
27868: PUSH
27869: LD_INT 81
27871: PUSH
27872: LD_OWVAR 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 21
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PPUSH
27895: CALL_OW 69
27899: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27900: LD_STRING playComputer()
27902: PPUSH
27903: CALL_OW 559
// if not tmp then
27907: LD_VAR 0 2
27911: NOT
27912: IFFALSE 27916
// exit ;
27914: GO 27970
// for i in tmp do
27916: LD_ADDR_VAR 0 1
27920: PUSH
27921: LD_VAR 0 2
27925: PUSH
27926: FOR_IN
27927: IFFALSE 27968
// for j := 1 to 4 do
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: DOUBLE
27935: LD_INT 1
27937: DEC
27938: ST_TO_ADDR
27939: LD_INT 4
27941: PUSH
27942: FOR_TO
27943: IFFALSE 27964
// SetSkill ( i , j , 10 ) ;
27945: LD_VAR 0 1
27949: PPUSH
27950: LD_VAR 0 3
27954: PPUSH
27955: LD_INT 10
27957: PPUSH
27958: CALL_OW 237
27962: GO 27942
27964: POP
27965: POP
27966: GO 27926
27968: POP
27969: POP
// end ;
27970: PPOPN 3
27972: END
// every 0 0$1 trigger s30 do var i , tmp ;
27973: LD_EXP 92
27977: IFFALSE 28046
27979: GO 27981
27981: DISABLE
27982: LD_INT 0
27984: PPUSH
27985: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27986: LD_ADDR_VAR 0 2
27990: PUSH
27991: LD_INT 22
27993: PUSH
27994: LD_OWVAR 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PPUSH
28003: CALL_OW 69
28007: ST_TO_ADDR
// if not tmp then
28008: LD_VAR 0 2
28012: NOT
28013: IFFALSE 28017
// exit ;
28015: GO 28046
// for i in tmp do
28017: LD_ADDR_VAR 0 1
28021: PUSH
28022: LD_VAR 0 2
28026: PUSH
28027: FOR_IN
28028: IFFALSE 28044
// SetLives ( i , 300 ) ;
28030: LD_VAR 0 1
28034: PPUSH
28035: LD_INT 300
28037: PPUSH
28038: CALL_OW 234
28042: GO 28027
28044: POP
28045: POP
// end ;
28046: PPOPN 2
28048: END
// every 0 0$1 trigger s60 do var i , tmp ;
28049: LD_EXP 93
28053: IFFALSE 28122
28055: GO 28057
28057: DISABLE
28058: LD_INT 0
28060: PPUSH
28061: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28062: LD_ADDR_VAR 0 2
28066: PUSH
28067: LD_INT 22
28069: PUSH
28070: LD_OWVAR 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PPUSH
28079: CALL_OW 69
28083: ST_TO_ADDR
// if not tmp then
28084: LD_VAR 0 2
28088: NOT
28089: IFFALSE 28093
// exit ;
28091: GO 28122
// for i in tmp do
28093: LD_ADDR_VAR 0 1
28097: PUSH
28098: LD_VAR 0 2
28102: PUSH
28103: FOR_IN
28104: IFFALSE 28120
// SetLives ( i , 600 ) ;
28106: LD_VAR 0 1
28110: PPUSH
28111: LD_INT 600
28113: PPUSH
28114: CALL_OW 234
28118: GO 28103
28120: POP
28121: POP
// end ;
28122: PPOPN 2
28124: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28125: LD_INT 0
28127: PPUSH
// case cmd of 301 :
28128: LD_VAR 0 1
28132: PUSH
28133: LD_INT 301
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28173
28141: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28142: LD_VAR 0 6
28146: PPUSH
28147: LD_VAR 0 7
28151: PPUSH
28152: LD_VAR 0 8
28156: PPUSH
28157: LD_VAR 0 4
28161: PPUSH
28162: LD_VAR 0 5
28166: PPUSH
28167: CALL 29382 0 5
28171: GO 28294
28173: LD_INT 302
28175: DOUBLE
28176: EQUAL
28177: IFTRUE 28181
28179: GO 28218
28181: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28182: LD_VAR 0 6
28186: PPUSH
28187: LD_VAR 0 7
28191: PPUSH
28192: LD_VAR 0 8
28196: PPUSH
28197: LD_VAR 0 9
28201: PPUSH
28202: LD_VAR 0 4
28206: PPUSH
28207: LD_VAR 0 5
28211: PPUSH
28212: CALL 29473 0 6
28216: GO 28294
28218: LD_INT 303
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28263
28226: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28227: LD_VAR 0 6
28231: PPUSH
28232: LD_VAR 0 7
28236: PPUSH
28237: LD_VAR 0 8
28241: PPUSH
28242: LD_VAR 0 9
28246: PPUSH
28247: LD_VAR 0 4
28251: PPUSH
28252: LD_VAR 0 5
28256: PPUSH
28257: CALL 28299 0 6
28261: GO 28294
28263: LD_INT 304
28265: DOUBLE
28266: EQUAL
28267: IFTRUE 28271
28269: GO 28293
28271: POP
// hHackTeleport ( unit , x , y ) ; end ;
28272: LD_VAR 0 2
28276: PPUSH
28277: LD_VAR 0 4
28281: PPUSH
28282: LD_VAR 0 5
28286: PPUSH
28287: CALL 30066 0 3
28291: GO 28294
28293: POP
// end ;
28294: LD_VAR 0 12
28298: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28299: LD_INT 0
28301: PPUSH
28302: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28303: LD_VAR 0 1
28307: PUSH
28308: LD_INT 1
28310: LESS
28311: PUSH
28312: LD_VAR 0 1
28316: PUSH
28317: LD_INT 3
28319: GREATER
28320: OR
28321: PUSH
28322: LD_VAR 0 5
28326: PPUSH
28327: LD_VAR 0 6
28331: PPUSH
28332: CALL_OW 428
28336: OR
28337: IFFALSE 28341
// exit ;
28339: GO 29069
// uc_side := your_side ;
28341: LD_ADDR_OWVAR 20
28345: PUSH
28346: LD_OWVAR 2
28350: ST_TO_ADDR
// uc_nation := nation ;
28351: LD_ADDR_OWVAR 21
28355: PUSH
28356: LD_VAR 0 1
28360: ST_TO_ADDR
// bc_level = 1 ;
28361: LD_ADDR_OWVAR 43
28365: PUSH
28366: LD_INT 1
28368: ST_TO_ADDR
// case btype of 1 :
28369: LD_VAR 0 2
28373: PUSH
28374: LD_INT 1
28376: DOUBLE
28377: EQUAL
28378: IFTRUE 28382
28380: GO 28393
28382: POP
// bc_type := b_depot ; 2 :
28383: LD_ADDR_OWVAR 42
28387: PUSH
28388: LD_INT 0
28390: ST_TO_ADDR
28391: GO 29013
28393: LD_INT 2
28395: DOUBLE
28396: EQUAL
28397: IFTRUE 28401
28399: GO 28412
28401: POP
// bc_type := b_warehouse ; 3 :
28402: LD_ADDR_OWVAR 42
28406: PUSH
28407: LD_INT 1
28409: ST_TO_ADDR
28410: GO 29013
28412: LD_INT 3
28414: DOUBLE
28415: EQUAL
28416: IFTRUE 28420
28418: GO 28431
28420: POP
// bc_type := b_lab ; 4 .. 9 :
28421: LD_ADDR_OWVAR 42
28425: PUSH
28426: LD_INT 6
28428: ST_TO_ADDR
28429: GO 29013
28431: LD_INT 4
28433: DOUBLE
28434: GREATEREQUAL
28435: IFFALSE 28443
28437: LD_INT 9
28439: DOUBLE
28440: LESSEQUAL
28441: IFTRUE 28445
28443: GO 28505
28445: POP
// begin bc_type := b_lab_half ;
28446: LD_ADDR_OWVAR 42
28450: PUSH
28451: LD_INT 7
28453: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28454: LD_ADDR_OWVAR 44
28458: PUSH
28459: LD_INT 10
28461: PUSH
28462: LD_INT 11
28464: PUSH
28465: LD_INT 12
28467: PUSH
28468: LD_INT 15
28470: PUSH
28471: LD_INT 14
28473: PUSH
28474: LD_INT 13
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: PUSH
28485: LD_VAR 0 2
28489: PUSH
28490: LD_INT 3
28492: MINUS
28493: ARRAY
28494: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28495: LD_ADDR_OWVAR 45
28499: PUSH
28500: LD_INT 9
28502: ST_TO_ADDR
// end ; 10 .. 13 :
28503: GO 29013
28505: LD_INT 10
28507: DOUBLE
28508: GREATEREQUAL
28509: IFFALSE 28517
28511: LD_INT 13
28513: DOUBLE
28514: LESSEQUAL
28515: IFTRUE 28519
28517: GO 28596
28519: POP
// begin bc_type := b_lab_full ;
28520: LD_ADDR_OWVAR 42
28524: PUSH
28525: LD_INT 8
28527: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28528: LD_ADDR_OWVAR 44
28532: PUSH
28533: LD_INT 10
28535: PUSH
28536: LD_INT 12
28538: PUSH
28539: LD_INT 14
28541: PUSH
28542: LD_INT 13
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: PUSH
28551: LD_VAR 0 2
28555: PUSH
28556: LD_INT 9
28558: MINUS
28559: ARRAY
28560: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28561: LD_ADDR_OWVAR 45
28565: PUSH
28566: LD_INT 11
28568: PUSH
28569: LD_INT 15
28571: PUSH
28572: LD_INT 12
28574: PUSH
28575: LD_INT 15
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: PUSH
28584: LD_VAR 0 2
28588: PUSH
28589: LD_INT 9
28591: MINUS
28592: ARRAY
28593: ST_TO_ADDR
// end ; 14 :
28594: GO 29013
28596: LD_INT 14
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28615
28604: POP
// bc_type := b_workshop ; 15 :
28605: LD_ADDR_OWVAR 42
28609: PUSH
28610: LD_INT 2
28612: ST_TO_ADDR
28613: GO 29013
28615: LD_INT 15
28617: DOUBLE
28618: EQUAL
28619: IFTRUE 28623
28621: GO 28634
28623: POP
// bc_type := b_factory ; 16 :
28624: LD_ADDR_OWVAR 42
28628: PUSH
28629: LD_INT 3
28631: ST_TO_ADDR
28632: GO 29013
28634: LD_INT 16
28636: DOUBLE
28637: EQUAL
28638: IFTRUE 28642
28640: GO 28653
28642: POP
// bc_type := b_ext_gun ; 17 :
28643: LD_ADDR_OWVAR 42
28647: PUSH
28648: LD_INT 17
28650: ST_TO_ADDR
28651: GO 29013
28653: LD_INT 17
28655: DOUBLE
28656: EQUAL
28657: IFTRUE 28661
28659: GO 28689
28661: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28662: LD_ADDR_OWVAR 42
28666: PUSH
28667: LD_INT 19
28669: PUSH
28670: LD_INT 23
28672: PUSH
28673: LD_INT 19
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: LIST
28680: PUSH
28681: LD_VAR 0 1
28685: ARRAY
28686: ST_TO_ADDR
28687: GO 29013
28689: LD_INT 18
28691: DOUBLE
28692: EQUAL
28693: IFTRUE 28697
28695: GO 28708
28697: POP
// bc_type := b_ext_radar ; 19 :
28698: LD_ADDR_OWVAR 42
28702: PUSH
28703: LD_INT 20
28705: ST_TO_ADDR
28706: GO 29013
28708: LD_INT 19
28710: DOUBLE
28711: EQUAL
28712: IFTRUE 28716
28714: GO 28727
28716: POP
// bc_type := b_ext_radio ; 20 :
28717: LD_ADDR_OWVAR 42
28721: PUSH
28722: LD_INT 22
28724: ST_TO_ADDR
28725: GO 29013
28727: LD_INT 20
28729: DOUBLE
28730: EQUAL
28731: IFTRUE 28735
28733: GO 28746
28735: POP
// bc_type := b_ext_siberium ; 21 :
28736: LD_ADDR_OWVAR 42
28740: PUSH
28741: LD_INT 21
28743: ST_TO_ADDR
28744: GO 29013
28746: LD_INT 21
28748: DOUBLE
28749: EQUAL
28750: IFTRUE 28754
28752: GO 28765
28754: POP
// bc_type := b_ext_computer ; 22 :
28755: LD_ADDR_OWVAR 42
28759: PUSH
28760: LD_INT 24
28762: ST_TO_ADDR
28763: GO 29013
28765: LD_INT 22
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28784
28773: POP
// bc_type := b_ext_track ; 23 :
28774: LD_ADDR_OWVAR 42
28778: PUSH
28779: LD_INT 16
28781: ST_TO_ADDR
28782: GO 29013
28784: LD_INT 23
28786: DOUBLE
28787: EQUAL
28788: IFTRUE 28792
28790: GO 28803
28792: POP
// bc_type := b_ext_laser ; 24 :
28793: LD_ADDR_OWVAR 42
28797: PUSH
28798: LD_INT 25
28800: ST_TO_ADDR
28801: GO 29013
28803: LD_INT 24
28805: DOUBLE
28806: EQUAL
28807: IFTRUE 28811
28809: GO 28822
28811: POP
// bc_type := b_control_tower ; 25 :
28812: LD_ADDR_OWVAR 42
28816: PUSH
28817: LD_INT 36
28819: ST_TO_ADDR
28820: GO 29013
28822: LD_INT 25
28824: DOUBLE
28825: EQUAL
28826: IFTRUE 28830
28828: GO 28841
28830: POP
// bc_type := b_breastwork ; 26 :
28831: LD_ADDR_OWVAR 42
28835: PUSH
28836: LD_INT 31
28838: ST_TO_ADDR
28839: GO 29013
28841: LD_INT 26
28843: DOUBLE
28844: EQUAL
28845: IFTRUE 28849
28847: GO 28860
28849: POP
// bc_type := b_bunker ; 27 :
28850: LD_ADDR_OWVAR 42
28854: PUSH
28855: LD_INT 32
28857: ST_TO_ADDR
28858: GO 29013
28860: LD_INT 27
28862: DOUBLE
28863: EQUAL
28864: IFTRUE 28868
28866: GO 28879
28868: POP
// bc_type := b_turret ; 28 :
28869: LD_ADDR_OWVAR 42
28873: PUSH
28874: LD_INT 33
28876: ST_TO_ADDR
28877: GO 29013
28879: LD_INT 28
28881: DOUBLE
28882: EQUAL
28883: IFTRUE 28887
28885: GO 28898
28887: POP
// bc_type := b_armoury ; 29 :
28888: LD_ADDR_OWVAR 42
28892: PUSH
28893: LD_INT 4
28895: ST_TO_ADDR
28896: GO 29013
28898: LD_INT 29
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 28917
28906: POP
// bc_type := b_barracks ; 30 :
28907: LD_ADDR_OWVAR 42
28911: PUSH
28912: LD_INT 5
28914: ST_TO_ADDR
28915: GO 29013
28917: LD_INT 30
28919: DOUBLE
28920: EQUAL
28921: IFTRUE 28925
28923: GO 28936
28925: POP
// bc_type := b_solar_power ; 31 :
28926: LD_ADDR_OWVAR 42
28930: PUSH
28931: LD_INT 27
28933: ST_TO_ADDR
28934: GO 29013
28936: LD_INT 31
28938: DOUBLE
28939: EQUAL
28940: IFTRUE 28944
28942: GO 28955
28944: POP
// bc_type := b_oil_power ; 32 :
28945: LD_ADDR_OWVAR 42
28949: PUSH
28950: LD_INT 26
28952: ST_TO_ADDR
28953: GO 29013
28955: LD_INT 32
28957: DOUBLE
28958: EQUAL
28959: IFTRUE 28963
28961: GO 28974
28963: POP
// bc_type := b_siberite_power ; 33 :
28964: LD_ADDR_OWVAR 42
28968: PUSH
28969: LD_INT 28
28971: ST_TO_ADDR
28972: GO 29013
28974: LD_INT 33
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28982
28980: GO 28993
28982: POP
// bc_type := b_oil_mine ; 34 :
28983: LD_ADDR_OWVAR 42
28987: PUSH
28988: LD_INT 29
28990: ST_TO_ADDR
28991: GO 29013
28993: LD_INT 34
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29012
29001: POP
// bc_type := b_siberite_mine ; end ;
29002: LD_ADDR_OWVAR 42
29006: PUSH
29007: LD_INT 30
29009: ST_TO_ADDR
29010: GO 29013
29012: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29013: LD_ADDR_VAR 0 8
29017: PUSH
29018: LD_VAR 0 5
29022: PPUSH
29023: LD_VAR 0 6
29027: PPUSH
29028: LD_VAR 0 3
29032: PPUSH
29033: CALL_OW 47
29037: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29038: LD_OWVAR 42
29042: PUSH
29043: LD_INT 32
29045: PUSH
29046: LD_INT 33
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: IN
29053: IFFALSE 29069
// PlaceWeaponTurret ( b , weapon ) ;
29055: LD_VAR 0 8
29059: PPUSH
29060: LD_VAR 0 4
29064: PPUSH
29065: CALL_OW 431
// end ;
29069: LD_VAR 0 7
29073: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29074: LD_INT 0
29076: PPUSH
29077: PPUSH
29078: PPUSH
29079: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29080: LD_ADDR_VAR 0 4
29084: PUSH
29085: LD_INT 22
29087: PUSH
29088: LD_OWVAR 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 2
29099: PUSH
29100: LD_INT 30
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 30
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PPUSH
29129: CALL_OW 69
29133: ST_TO_ADDR
// if not tmp then
29134: LD_VAR 0 4
29138: NOT
29139: IFFALSE 29143
// exit ;
29141: GO 29202
// for i in tmp do
29143: LD_ADDR_VAR 0 2
29147: PUSH
29148: LD_VAR 0 4
29152: PUSH
29153: FOR_IN
29154: IFFALSE 29200
// for j = 1 to 3 do
29156: LD_ADDR_VAR 0 3
29160: PUSH
29161: DOUBLE
29162: LD_INT 1
29164: DEC
29165: ST_TO_ADDR
29166: LD_INT 3
29168: PUSH
29169: FOR_TO
29170: IFFALSE 29196
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29172: LD_VAR 0 2
29176: PPUSH
29177: CALL_OW 274
29181: PPUSH
29182: LD_VAR 0 3
29186: PPUSH
29187: LD_INT 99999
29189: PPUSH
29190: CALL_OW 277
29194: GO 29169
29196: POP
29197: POP
29198: GO 29153
29200: POP
29201: POP
// end ;
29202: LD_VAR 0 1
29206: RET
// export function hHackSetLevel10 ; var i , j ; begin
29207: LD_INT 0
29209: PPUSH
29210: PPUSH
29211: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29212: LD_ADDR_VAR 0 2
29216: PUSH
29217: LD_INT 21
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PPUSH
29227: CALL_OW 69
29231: PUSH
29232: FOR_IN
29233: IFFALSE 29285
// if IsSelected ( i ) then
29235: LD_VAR 0 2
29239: PPUSH
29240: CALL_OW 306
29244: IFFALSE 29283
// begin for j := 1 to 4 do
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: DOUBLE
29252: LD_INT 1
29254: DEC
29255: ST_TO_ADDR
29256: LD_INT 4
29258: PUSH
29259: FOR_TO
29260: IFFALSE 29281
// SetSkill ( i , j , 10 ) ;
29262: LD_VAR 0 2
29266: PPUSH
29267: LD_VAR 0 3
29271: PPUSH
29272: LD_INT 10
29274: PPUSH
29275: CALL_OW 237
29279: GO 29259
29281: POP
29282: POP
// end ;
29283: GO 29232
29285: POP
29286: POP
// end ;
29287: LD_VAR 0 1
29291: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29292: LD_INT 0
29294: PPUSH
29295: PPUSH
29296: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29297: LD_ADDR_VAR 0 2
29301: PUSH
29302: LD_INT 22
29304: PUSH
29305: LD_OWVAR 2
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 21
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL_OW 69
29332: PUSH
29333: FOR_IN
29334: IFFALSE 29375
// begin for j := 1 to 4 do
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: DOUBLE
29342: LD_INT 1
29344: DEC
29345: ST_TO_ADDR
29346: LD_INT 4
29348: PUSH
29349: FOR_TO
29350: IFFALSE 29371
// SetSkill ( i , j , 10 ) ;
29352: LD_VAR 0 2
29356: PPUSH
29357: LD_VAR 0 3
29361: PPUSH
29362: LD_INT 10
29364: PPUSH
29365: CALL_OW 237
29369: GO 29349
29371: POP
29372: POP
// end ;
29373: GO 29333
29375: POP
29376: POP
// end ;
29377: LD_VAR 0 1
29381: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29382: LD_INT 0
29384: PPUSH
// uc_side := your_side ;
29385: LD_ADDR_OWVAR 20
29389: PUSH
29390: LD_OWVAR 2
29394: ST_TO_ADDR
// uc_nation := nation ;
29395: LD_ADDR_OWVAR 21
29399: PUSH
29400: LD_VAR 0 1
29404: ST_TO_ADDR
// InitHc ;
29405: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29409: LD_INT 0
29411: PPUSH
29412: LD_VAR 0 2
29416: PPUSH
29417: LD_VAR 0 3
29421: PPUSH
29422: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29426: LD_VAR 0 4
29430: PPUSH
29431: LD_VAR 0 5
29435: PPUSH
29436: CALL_OW 428
29440: PUSH
29441: LD_INT 0
29443: EQUAL
29444: IFFALSE 29468
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29446: CALL_OW 44
29450: PPUSH
29451: LD_VAR 0 4
29455: PPUSH
29456: LD_VAR 0 5
29460: PPUSH
29461: LD_INT 1
29463: PPUSH
29464: CALL_OW 48
// end ;
29468: LD_VAR 0 6
29472: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29473: LD_INT 0
29475: PPUSH
29476: PPUSH
// uc_side := your_side ;
29477: LD_ADDR_OWVAR 20
29481: PUSH
29482: LD_OWVAR 2
29486: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29487: LD_VAR 0 1
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: LD_INT 3
29500: PUSH
29501: LD_INT 4
29503: PUSH
29504: LD_INT 5
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: IN
29514: IFFALSE 29526
// uc_nation := nation_american else
29516: LD_ADDR_OWVAR 21
29520: PUSH
29521: LD_INT 1
29523: ST_TO_ADDR
29524: GO 29569
// if chassis in [ 11 , 12 , 13 , 14 ] then
29526: LD_VAR 0 1
29530: PUSH
29531: LD_INT 11
29533: PUSH
29534: LD_INT 12
29536: PUSH
29537: LD_INT 13
29539: PUSH
29540: LD_INT 14
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: IN
29549: IFFALSE 29561
// uc_nation := nation_arabian else
29551: LD_ADDR_OWVAR 21
29555: PUSH
29556: LD_INT 2
29558: ST_TO_ADDR
29559: GO 29569
// uc_nation := nation_russian ;
29561: LD_ADDR_OWVAR 21
29565: PUSH
29566: LD_INT 3
29568: ST_TO_ADDR
// vc_chassis := chassis ;
29569: LD_ADDR_OWVAR 37
29573: PUSH
29574: LD_VAR 0 1
29578: ST_TO_ADDR
// vc_engine := engine ;
29579: LD_ADDR_OWVAR 39
29583: PUSH
29584: LD_VAR 0 2
29588: ST_TO_ADDR
// vc_control := control ;
29589: LD_ADDR_OWVAR 38
29593: PUSH
29594: LD_VAR 0 3
29598: ST_TO_ADDR
// vc_weapon := weapon ;
29599: LD_ADDR_OWVAR 40
29603: PUSH
29604: LD_VAR 0 4
29608: ST_TO_ADDR
// un := CreateVehicle ;
29609: LD_ADDR_VAR 0 8
29613: PUSH
29614: CALL_OW 45
29618: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29619: LD_VAR 0 8
29623: PPUSH
29624: LD_INT 0
29626: PPUSH
29627: LD_INT 5
29629: PPUSH
29630: CALL_OW 12
29634: PPUSH
29635: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29639: LD_VAR 0 8
29643: PPUSH
29644: LD_VAR 0 5
29648: PPUSH
29649: LD_VAR 0 6
29653: PPUSH
29654: LD_INT 1
29656: PPUSH
29657: CALL_OW 48
// end ;
29661: LD_VAR 0 7
29665: RET
// export hInvincible ; every 1 do
29666: GO 29668
29668: DISABLE
// hInvincible := [ ] ;
29669: LD_ADDR_EXP 94
29673: PUSH
29674: EMPTY
29675: ST_TO_ADDR
29676: END
// every 10 do var i ;
29677: GO 29679
29679: DISABLE
29680: LD_INT 0
29682: PPUSH
// begin enable ;
29683: ENABLE
// if not hInvincible then
29684: LD_EXP 94
29688: NOT
29689: IFFALSE 29693
// exit ;
29691: GO 29737
// for i in hInvincible do
29693: LD_ADDR_VAR 0 1
29697: PUSH
29698: LD_EXP 94
29702: PUSH
29703: FOR_IN
29704: IFFALSE 29735
// if GetLives ( i ) < 1000 then
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL_OW 256
29715: PUSH
29716: LD_INT 1000
29718: LESS
29719: IFFALSE 29733
// SetLives ( i , 1000 ) ;
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_INT 1000
29728: PPUSH
29729: CALL_OW 234
29733: GO 29703
29735: POP
29736: POP
// end ;
29737: PPOPN 1
29739: END
// export function hHackInvincible ; var i ; begin
29740: LD_INT 0
29742: PPUSH
29743: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29744: LD_ADDR_VAR 0 2
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: LD_INT 21
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 21
29764: PUSH
29765: LD_INT 2
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: LIST
29776: PPUSH
29777: CALL_OW 69
29781: PUSH
29782: FOR_IN
29783: IFFALSE 29844
// if IsSelected ( i ) then
29785: LD_VAR 0 2
29789: PPUSH
29790: CALL_OW 306
29794: IFFALSE 29842
// begin if i in hInvincible then
29796: LD_VAR 0 2
29800: PUSH
29801: LD_EXP 94
29805: IN
29806: IFFALSE 29826
// hInvincible := hInvincible diff i else
29808: LD_ADDR_EXP 94
29812: PUSH
29813: LD_EXP 94
29817: PUSH
29818: LD_VAR 0 2
29822: DIFF
29823: ST_TO_ADDR
29824: GO 29842
// hInvincible := hInvincible union i ;
29826: LD_ADDR_EXP 94
29830: PUSH
29831: LD_EXP 94
29835: PUSH
29836: LD_VAR 0 2
29840: UNION
29841: ST_TO_ADDR
// end ;
29842: GO 29782
29844: POP
29845: POP
// end ;
29846: LD_VAR 0 1
29850: RET
// export function hHackInvisible ; var i , j ; begin
29851: LD_INT 0
29853: PPUSH
29854: PPUSH
29855: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29856: LD_ADDR_VAR 0 2
29860: PUSH
29861: LD_INT 21
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PPUSH
29871: CALL_OW 69
29875: PUSH
29876: FOR_IN
29877: IFFALSE 29901
// if IsSelected ( i ) then
29879: LD_VAR 0 2
29883: PPUSH
29884: CALL_OW 306
29888: IFFALSE 29899
// ComForceInvisible ( i ) ;
29890: LD_VAR 0 2
29894: PPUSH
29895: CALL_OW 496
29899: GO 29876
29901: POP
29902: POP
// end ;
29903: LD_VAR 0 1
29907: RET
// export function hHackChangeYourSide ; begin
29908: LD_INT 0
29910: PPUSH
// if your_side = 8 then
29911: LD_OWVAR 2
29915: PUSH
29916: LD_INT 8
29918: EQUAL
29919: IFFALSE 29931
// your_side := 0 else
29921: LD_ADDR_OWVAR 2
29925: PUSH
29926: LD_INT 0
29928: ST_TO_ADDR
29929: GO 29945
// your_side := your_side + 1 ;
29931: LD_ADDR_OWVAR 2
29935: PUSH
29936: LD_OWVAR 2
29940: PUSH
29941: LD_INT 1
29943: PLUS
29944: ST_TO_ADDR
// end ;
29945: LD_VAR 0 1
29949: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29950: LD_INT 0
29952: PPUSH
29953: PPUSH
29954: PPUSH
// for i in all_units do
29955: LD_ADDR_VAR 0 2
29959: PUSH
29960: LD_OWVAR 3
29964: PUSH
29965: FOR_IN
29966: IFFALSE 30044
// if IsSelected ( i ) then
29968: LD_VAR 0 2
29972: PPUSH
29973: CALL_OW 306
29977: IFFALSE 30042
// begin j := GetSide ( i ) ;
29979: LD_ADDR_VAR 0 3
29983: PUSH
29984: LD_VAR 0 2
29988: PPUSH
29989: CALL_OW 255
29993: ST_TO_ADDR
// if j = 8 then
29994: LD_VAR 0 3
29998: PUSH
29999: LD_INT 8
30001: EQUAL
30002: IFFALSE 30014
// j := 0 else
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: LD_INT 0
30011: ST_TO_ADDR
30012: GO 30028
// j := j + 1 ;
30014: LD_ADDR_VAR 0 3
30018: PUSH
30019: LD_VAR 0 3
30023: PUSH
30024: LD_INT 1
30026: PLUS
30027: ST_TO_ADDR
// SetSide ( i , j ) ;
30028: LD_VAR 0 2
30032: PPUSH
30033: LD_VAR 0 3
30037: PPUSH
30038: CALL_OW 235
// end ;
30042: GO 29965
30044: POP
30045: POP
// end ;
30046: LD_VAR 0 1
30050: RET
// export function hHackFog ; begin
30051: LD_INT 0
30053: PPUSH
// FogOff ( true ) ;
30054: LD_INT 1
30056: PPUSH
30057: CALL_OW 344
// end ;
30061: LD_VAR 0 1
30065: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30066: LD_INT 0
30068: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30069: LD_VAR 0 1
30073: PPUSH
30074: LD_VAR 0 2
30078: PPUSH
30079: LD_VAR 0 3
30083: PPUSH
30084: LD_INT 1
30086: PPUSH
30087: LD_INT 1
30089: PPUSH
30090: CALL_OW 483
// CenterOnXY ( x , y ) ;
30094: LD_VAR 0 2
30098: PPUSH
30099: LD_VAR 0 3
30103: PPUSH
30104: CALL_OW 84
// end ;
30108: LD_VAR 0 4
30112: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30113: LD_INT 0
30115: PPUSH
30116: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30117: LD_VAR 0 1
30121: NOT
30122: PUSH
30123: LD_VAR 0 2
30127: PPUSH
30128: LD_VAR 0 3
30132: PPUSH
30133: CALL_OW 488
30137: NOT
30138: OR
30139: PUSH
30140: LD_VAR 0 1
30144: PPUSH
30145: CALL_OW 266
30149: PUSH
30150: LD_INT 3
30152: NONEQUAL
30153: PUSH
30154: LD_VAR 0 1
30158: PPUSH
30159: CALL_OW 247
30163: PUSH
30164: LD_INT 1
30166: EQUAL
30167: NOT
30168: AND
30169: OR
30170: IFFALSE 30174
// exit ;
30172: GO 30323
// if GetType ( factory ) = unit_human then
30174: LD_VAR 0 1
30178: PPUSH
30179: CALL_OW 247
30183: PUSH
30184: LD_INT 1
30186: EQUAL
30187: IFFALSE 30204
// factory := IsInUnit ( factory ) ;
30189: LD_ADDR_VAR 0 1
30193: PUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: CALL_OW 310
30203: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30204: LD_VAR 0 1
30208: PPUSH
30209: CALL_OW 266
30213: PUSH
30214: LD_INT 3
30216: NONEQUAL
30217: IFFALSE 30221
// exit ;
30219: GO 30323
// if HexInfo ( x , y ) = factory then
30221: LD_VAR 0 2
30225: PPUSH
30226: LD_VAR 0 3
30230: PPUSH
30231: CALL_OW 428
30235: PUSH
30236: LD_VAR 0 1
30240: EQUAL
30241: IFFALSE 30268
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30243: LD_ADDR_EXP 95
30247: PUSH
30248: LD_EXP 95
30252: PPUSH
30253: LD_VAR 0 1
30257: PPUSH
30258: LD_INT 0
30260: PPUSH
30261: CALL_OW 1
30265: ST_TO_ADDR
30266: GO 30319
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30268: LD_ADDR_EXP 95
30272: PUSH
30273: LD_EXP 95
30277: PPUSH
30278: LD_VAR 0 1
30282: PPUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 255
30292: PUSH
30293: LD_VAR 0 1
30297: PUSH
30298: LD_VAR 0 2
30302: PUSH
30303: LD_VAR 0 3
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: PPUSH
30314: CALL_OW 1
30318: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30319: CALL 30328 0 0
// end ;
30323: LD_VAR 0 4
30327: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30328: LD_INT 0
30330: PPUSH
30331: PPUSH
30332: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30333: LD_STRING resetFactoryWaypoint();
30335: PPUSH
30336: CALL_OW 559
// if factoryWaypoints then
30340: LD_EXP 95
30344: IFFALSE 30470
// begin list := PrepareArray ( factoryWaypoints ) ;
30346: LD_ADDR_VAR 0 3
30350: PUSH
30351: LD_EXP 95
30355: PPUSH
30356: CALL 72873 0 1
30360: ST_TO_ADDR
// for i := 1 to list do
30361: LD_ADDR_VAR 0 2
30365: PUSH
30366: DOUBLE
30367: LD_INT 1
30369: DEC
30370: ST_TO_ADDR
30371: LD_VAR 0 3
30375: PUSH
30376: FOR_TO
30377: IFFALSE 30468
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30379: LD_STRING setFactoryWaypointXY(
30381: PUSH
30382: LD_VAR 0 3
30386: PUSH
30387: LD_VAR 0 2
30391: ARRAY
30392: PUSH
30393: LD_INT 1
30395: ARRAY
30396: STR
30397: PUSH
30398: LD_STRING ,
30400: STR
30401: PUSH
30402: LD_VAR 0 3
30406: PUSH
30407: LD_VAR 0 2
30411: ARRAY
30412: PUSH
30413: LD_INT 2
30415: ARRAY
30416: STR
30417: PUSH
30418: LD_STRING ,
30420: STR
30421: PUSH
30422: LD_VAR 0 3
30426: PUSH
30427: LD_VAR 0 2
30431: ARRAY
30432: PUSH
30433: LD_INT 3
30435: ARRAY
30436: STR
30437: PUSH
30438: LD_STRING ,
30440: STR
30441: PUSH
30442: LD_VAR 0 3
30446: PUSH
30447: LD_VAR 0 2
30451: ARRAY
30452: PUSH
30453: LD_INT 4
30455: ARRAY
30456: STR
30457: PUSH
30458: LD_STRING )
30460: STR
30461: PPUSH
30462: CALL_OW 559
30466: GO 30376
30468: POP
30469: POP
// end ; end ;
30470: LD_VAR 0 1
30474: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30475: LD_INT 0
30477: PPUSH
// if HexInfo ( x , y ) = warehouse then
30478: LD_VAR 0 2
30482: PPUSH
30483: LD_VAR 0 3
30487: PPUSH
30488: CALL_OW 428
30492: PUSH
30493: LD_VAR 0 1
30497: EQUAL
30498: IFFALSE 30525
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30500: LD_ADDR_EXP 96
30504: PUSH
30505: LD_EXP 96
30509: PPUSH
30510: LD_VAR 0 1
30514: PPUSH
30515: LD_INT 0
30517: PPUSH
30518: CALL_OW 1
30522: ST_TO_ADDR
30523: GO 30576
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30525: LD_ADDR_EXP 96
30529: PUSH
30530: LD_EXP 96
30534: PPUSH
30535: LD_VAR 0 1
30539: PPUSH
30540: LD_VAR 0 1
30544: PPUSH
30545: CALL_OW 255
30549: PUSH
30550: LD_VAR 0 1
30554: PUSH
30555: LD_VAR 0 2
30559: PUSH
30560: LD_VAR 0 3
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: PPUSH
30571: CALL_OW 1
30575: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30576: CALL 30585 0 0
// end ;
30580: LD_VAR 0 4
30584: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30585: LD_INT 0
30587: PPUSH
30588: PPUSH
30589: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30590: LD_STRING resetWarehouseGatheringPoints();
30592: PPUSH
30593: CALL_OW 559
// if warehouseGatheringPoints then
30597: LD_EXP 96
30601: IFFALSE 30727
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30603: LD_ADDR_VAR 0 3
30607: PUSH
30608: LD_EXP 96
30612: PPUSH
30613: CALL 72873 0 1
30617: ST_TO_ADDR
// for i := 1 to list do
30618: LD_ADDR_VAR 0 2
30622: PUSH
30623: DOUBLE
30624: LD_INT 1
30626: DEC
30627: ST_TO_ADDR
30628: LD_VAR 0 3
30632: PUSH
30633: FOR_TO
30634: IFFALSE 30725
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30636: LD_STRING setWarehouseGatheringPointXY(
30638: PUSH
30639: LD_VAR 0 3
30643: PUSH
30644: LD_VAR 0 2
30648: ARRAY
30649: PUSH
30650: LD_INT 1
30652: ARRAY
30653: STR
30654: PUSH
30655: LD_STRING ,
30657: STR
30658: PUSH
30659: LD_VAR 0 3
30663: PUSH
30664: LD_VAR 0 2
30668: ARRAY
30669: PUSH
30670: LD_INT 2
30672: ARRAY
30673: STR
30674: PUSH
30675: LD_STRING ,
30677: STR
30678: PUSH
30679: LD_VAR 0 3
30683: PUSH
30684: LD_VAR 0 2
30688: ARRAY
30689: PUSH
30690: LD_INT 3
30692: ARRAY
30693: STR
30694: PUSH
30695: LD_STRING ,
30697: STR
30698: PUSH
30699: LD_VAR 0 3
30703: PUSH
30704: LD_VAR 0 2
30708: ARRAY
30709: PUSH
30710: LD_INT 4
30712: ARRAY
30713: STR
30714: PUSH
30715: LD_STRING )
30717: STR
30718: PPUSH
30719: CALL_OW 559
30723: GO 30633
30725: POP
30726: POP
// end ; end ;
30727: LD_VAR 0 1
30731: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30732: LD_EXP 96
30736: IFFALSE 31421
30738: GO 30740
30740: DISABLE
30741: LD_INT 0
30743: PPUSH
30744: PPUSH
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
// begin enable ;
30752: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30753: LD_ADDR_VAR 0 3
30757: PUSH
30758: LD_EXP 96
30762: PPUSH
30763: CALL 72873 0 1
30767: ST_TO_ADDR
// if not list then
30768: LD_VAR 0 3
30772: NOT
30773: IFFALSE 30777
// exit ;
30775: GO 31421
// for i := 1 to list do
30777: LD_ADDR_VAR 0 1
30781: PUSH
30782: DOUBLE
30783: LD_INT 1
30785: DEC
30786: ST_TO_ADDR
30787: LD_VAR 0 3
30791: PUSH
30792: FOR_TO
30793: IFFALSE 31419
// begin depot := list [ i ] [ 2 ] ;
30795: LD_ADDR_VAR 0 8
30799: PUSH
30800: LD_VAR 0 3
30804: PUSH
30805: LD_VAR 0 1
30809: ARRAY
30810: PUSH
30811: LD_INT 2
30813: ARRAY
30814: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30815: LD_ADDR_VAR 0 5
30819: PUSH
30820: LD_VAR 0 3
30824: PUSH
30825: LD_VAR 0 1
30829: ARRAY
30830: PUSH
30831: LD_INT 1
30833: ARRAY
30834: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30835: LD_VAR 0 8
30839: PPUSH
30840: CALL_OW 301
30844: PUSH
30845: LD_VAR 0 5
30849: PUSH
30850: LD_VAR 0 8
30854: PPUSH
30855: CALL_OW 255
30859: NONEQUAL
30860: OR
30861: IFFALSE 30890
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30863: LD_ADDR_EXP 96
30867: PUSH
30868: LD_EXP 96
30872: PPUSH
30873: LD_VAR 0 8
30877: PPUSH
30878: LD_INT 0
30880: PPUSH
30881: CALL_OW 1
30885: ST_TO_ADDR
// exit ;
30886: POP
30887: POP
30888: GO 31421
// end ; x := list [ i ] [ 3 ] ;
30890: LD_ADDR_VAR 0 6
30894: PUSH
30895: LD_VAR 0 3
30899: PUSH
30900: LD_VAR 0 1
30904: ARRAY
30905: PUSH
30906: LD_INT 3
30908: ARRAY
30909: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30910: LD_ADDR_VAR 0 7
30914: PUSH
30915: LD_VAR 0 3
30919: PUSH
30920: LD_VAR 0 1
30924: ARRAY
30925: PUSH
30926: LD_INT 4
30928: ARRAY
30929: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30930: LD_ADDR_VAR 0 9
30934: PUSH
30935: LD_VAR 0 6
30939: PPUSH
30940: LD_VAR 0 7
30944: PPUSH
30945: LD_INT 16
30947: PPUSH
30948: CALL 71461 0 3
30952: ST_TO_ADDR
// if not cratesNearbyPoint then
30953: LD_VAR 0 9
30957: NOT
30958: IFFALSE 30964
// exit ;
30960: POP
30961: POP
30962: GO 31421
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30964: LD_ADDR_VAR 0 4
30968: PUSH
30969: LD_INT 22
30971: PUSH
30972: LD_VAR 0 5
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: LD_INT 60
30986: PUSH
30987: EMPTY
30988: LIST
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 91
30996: PUSH
30997: LD_VAR 0 8
31001: PUSH
31002: LD_INT 6
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 2
31012: PUSH
31013: LD_INT 25
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 25
31025: PUSH
31026: LD_INT 16
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: PPUSH
31044: CALL_OW 69
31048: PUSH
31049: LD_VAR 0 8
31053: PPUSH
31054: CALL_OW 313
31058: PPUSH
31059: LD_INT 3
31061: PUSH
31062: LD_INT 60
31064: PUSH
31065: EMPTY
31066: LIST
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: LD_INT 25
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 25
31087: PUSH
31088: LD_INT 16
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PPUSH
31104: CALL_OW 72
31108: UNION
31109: ST_TO_ADDR
// if tmp then
31110: LD_VAR 0 4
31114: IFFALSE 31194
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31116: LD_ADDR_VAR 0 4
31120: PUSH
31121: LD_VAR 0 4
31125: PPUSH
31126: LD_INT 3
31128: PPUSH
31129: CALL 69430 0 2
31133: ST_TO_ADDR
// for j in tmp do
31134: LD_ADDR_VAR 0 2
31138: PUSH
31139: LD_VAR 0 4
31143: PUSH
31144: FOR_IN
31145: IFFALSE 31188
// begin if IsInUnit ( j ) then
31147: LD_VAR 0 2
31151: PPUSH
31152: CALL_OW 310
31156: IFFALSE 31167
// ComExit ( j ) ;
31158: LD_VAR 0 2
31162: PPUSH
31163: CALL 69513 0 1
// AddComCollect ( j , x , y ) ;
31167: LD_VAR 0 2
31171: PPUSH
31172: LD_VAR 0 6
31176: PPUSH
31177: LD_VAR 0 7
31181: PPUSH
31182: CALL_OW 177
// end ;
31186: GO 31144
31188: POP
31189: POP
// exit ;
31190: POP
31191: POP
31192: GO 31421
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31194: LD_ADDR_VAR 0 4
31198: PUSH
31199: LD_INT 22
31201: PUSH
31202: LD_VAR 0 5
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 91
31213: PUSH
31214: LD_VAR 0 8
31218: PUSH
31219: LD_INT 8
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 34
31232: PUSH
31233: LD_INT 12
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 34
31242: PUSH
31243: LD_INT 51
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 34
31252: PUSH
31253: LD_INT 32
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 34
31262: PUSH
31263: LD_INT 89
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: PPUSH
31282: CALL_OW 69
31286: ST_TO_ADDR
// if tmp then
31287: LD_VAR 0 4
31291: IFFALSE 31417
// begin for j in tmp do
31293: LD_ADDR_VAR 0 2
31297: PUSH
31298: LD_VAR 0 4
31302: PUSH
31303: FOR_IN
31304: IFFALSE 31415
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31306: LD_VAR 0 2
31310: PPUSH
31311: CALL_OW 262
31315: PUSH
31316: LD_INT 3
31318: EQUAL
31319: PUSH
31320: LD_VAR 0 2
31324: PPUSH
31325: CALL_OW 261
31329: PUSH
31330: LD_INT 20
31332: GREATER
31333: OR
31334: PUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: CALL_OW 314
31344: NOT
31345: AND
31346: PUSH
31347: LD_VAR 0 2
31351: PPUSH
31352: CALL_OW 263
31356: PUSH
31357: LD_INT 1
31359: NONEQUAL
31360: PUSH
31361: LD_VAR 0 2
31365: PPUSH
31366: CALL_OW 311
31370: OR
31371: AND
31372: IFFALSE 31413
// begin ComCollect ( j , x , y ) ;
31374: LD_VAR 0 2
31378: PPUSH
31379: LD_VAR 0 6
31383: PPUSH
31384: LD_VAR 0 7
31388: PPUSH
31389: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31393: LD_VAR 0 2
31397: PPUSH
31398: LD_VAR 0 8
31402: PPUSH
31403: CALL_OW 172
// exit ;
31407: POP
31408: POP
31409: POP
31410: POP
31411: GO 31421
// end ;
31413: GO 31303
31415: POP
31416: POP
// end ; end ;
31417: GO 30792
31419: POP
31420: POP
// end ; end_of_file end_of_file
31421: PPOPN 9
31423: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31424: LD_INT 0
31426: PPUSH
31427: PPUSH
// if exist_mode then
31428: LD_VAR 0 2
31432: IFFALSE 31457
// unit := CreateCharacter ( prefix & ident ) else
31434: LD_ADDR_VAR 0 5
31438: PUSH
31439: LD_VAR 0 3
31443: PUSH
31444: LD_VAR 0 1
31448: STR
31449: PPUSH
31450: CALL_OW 34
31454: ST_TO_ADDR
31455: GO 31472
// unit := NewCharacter ( ident ) ;
31457: LD_ADDR_VAR 0 5
31461: PUSH
31462: LD_VAR 0 1
31466: PPUSH
31467: CALL_OW 25
31471: ST_TO_ADDR
// result := unit ;
31472: LD_ADDR_VAR 0 4
31476: PUSH
31477: LD_VAR 0 5
31481: ST_TO_ADDR
// end ;
31482: LD_VAR 0 4
31486: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
// if not side or not nation then
31491: LD_VAR 0 1
31495: NOT
31496: PUSH
31497: LD_VAR 0 2
31501: NOT
31502: OR
31503: IFFALSE 31507
// exit ;
31505: GO 32275
// case nation of nation_american :
31507: LD_VAR 0 2
31511: PUSH
31512: LD_INT 1
31514: DOUBLE
31515: EQUAL
31516: IFTRUE 31520
31518: GO 31734
31520: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31521: LD_ADDR_VAR 0 4
31525: PUSH
31526: LD_INT 35
31528: PUSH
31529: LD_INT 45
31531: PUSH
31532: LD_INT 46
31534: PUSH
31535: LD_INT 47
31537: PUSH
31538: LD_INT 82
31540: PUSH
31541: LD_INT 83
31543: PUSH
31544: LD_INT 84
31546: PUSH
31547: LD_INT 85
31549: PUSH
31550: LD_INT 86
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: LD_INT 6
31561: PUSH
31562: LD_INT 15
31564: PUSH
31565: LD_INT 16
31567: PUSH
31568: LD_INT 7
31570: PUSH
31571: LD_INT 12
31573: PUSH
31574: LD_INT 13
31576: PUSH
31577: LD_INT 10
31579: PUSH
31580: LD_INT 14
31582: PUSH
31583: LD_INT 20
31585: PUSH
31586: LD_INT 21
31588: PUSH
31589: LD_INT 22
31591: PUSH
31592: LD_INT 25
31594: PUSH
31595: LD_INT 32
31597: PUSH
31598: LD_INT 27
31600: PUSH
31601: LD_INT 36
31603: PUSH
31604: LD_INT 69
31606: PUSH
31607: LD_INT 39
31609: PUSH
31610: LD_INT 34
31612: PUSH
31613: LD_INT 40
31615: PUSH
31616: LD_INT 48
31618: PUSH
31619: LD_INT 49
31621: PUSH
31622: LD_INT 50
31624: PUSH
31625: LD_INT 51
31627: PUSH
31628: LD_INT 52
31630: PUSH
31631: LD_INT 53
31633: PUSH
31634: LD_INT 54
31636: PUSH
31637: LD_INT 55
31639: PUSH
31640: LD_INT 56
31642: PUSH
31643: LD_INT 57
31645: PUSH
31646: LD_INT 58
31648: PUSH
31649: LD_INT 59
31651: PUSH
31652: LD_INT 60
31654: PUSH
31655: LD_INT 61
31657: PUSH
31658: LD_INT 62
31660: PUSH
31661: LD_INT 80
31663: PUSH
31664: LD_INT 82
31666: PUSH
31667: LD_INT 83
31669: PUSH
31670: LD_INT 84
31672: PUSH
31673: LD_INT 85
31675: PUSH
31676: LD_INT 86
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
31732: GO 32199
31734: LD_INT 2
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31968
31742: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31743: LD_ADDR_VAR 0 4
31747: PUSH
31748: LD_INT 35
31750: PUSH
31751: LD_INT 45
31753: PUSH
31754: LD_INT 46
31756: PUSH
31757: LD_INT 47
31759: PUSH
31760: LD_INT 82
31762: PUSH
31763: LD_INT 83
31765: PUSH
31766: LD_INT 84
31768: PUSH
31769: LD_INT 85
31771: PUSH
31772: LD_INT 87
31774: PUSH
31775: LD_INT 70
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: LD_INT 11
31783: PUSH
31784: LD_INT 3
31786: PUSH
31787: LD_INT 4
31789: PUSH
31790: LD_INT 5
31792: PUSH
31793: LD_INT 6
31795: PUSH
31796: LD_INT 15
31798: PUSH
31799: LD_INT 18
31801: PUSH
31802: LD_INT 7
31804: PUSH
31805: LD_INT 17
31807: PUSH
31808: LD_INT 8
31810: PUSH
31811: LD_INT 20
31813: PUSH
31814: LD_INT 21
31816: PUSH
31817: LD_INT 22
31819: PUSH
31820: LD_INT 72
31822: PUSH
31823: LD_INT 26
31825: PUSH
31826: LD_INT 69
31828: PUSH
31829: LD_INT 39
31831: PUSH
31832: LD_INT 40
31834: PUSH
31835: LD_INT 41
31837: PUSH
31838: LD_INT 42
31840: PUSH
31841: LD_INT 43
31843: PUSH
31844: LD_INT 48
31846: PUSH
31847: LD_INT 49
31849: PUSH
31850: LD_INT 50
31852: PUSH
31853: LD_INT 51
31855: PUSH
31856: LD_INT 52
31858: PUSH
31859: LD_INT 53
31861: PUSH
31862: LD_INT 54
31864: PUSH
31865: LD_INT 55
31867: PUSH
31868: LD_INT 56
31870: PUSH
31871: LD_INT 60
31873: PUSH
31874: LD_INT 61
31876: PUSH
31877: LD_INT 62
31879: PUSH
31880: LD_INT 66
31882: PUSH
31883: LD_INT 67
31885: PUSH
31886: LD_INT 68
31888: PUSH
31889: LD_INT 81
31891: PUSH
31892: LD_INT 82
31894: PUSH
31895: LD_INT 83
31897: PUSH
31898: LD_INT 84
31900: PUSH
31901: LD_INT 85
31903: PUSH
31904: LD_INT 87
31906: PUSH
31907: LD_INT 88
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
31966: GO 32199
31968: LD_INT 3
31970: DOUBLE
31971: EQUAL
31972: IFTRUE 31976
31974: GO 32198
31976: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31977: LD_ADDR_VAR 0 4
31981: PUSH
31982: LD_INT 46
31984: PUSH
31985: LD_INT 47
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 82
31996: PUSH
31997: LD_INT 83
31999: PUSH
32000: LD_INT 84
32002: PUSH
32003: LD_INT 85
32005: PUSH
32006: LD_INT 86
32008: PUSH
32009: LD_INT 11
32011: PUSH
32012: LD_INT 9
32014: PUSH
32015: LD_INT 20
32017: PUSH
32018: LD_INT 19
32020: PUSH
32021: LD_INT 21
32023: PUSH
32024: LD_INT 24
32026: PUSH
32027: LD_INT 22
32029: PUSH
32030: LD_INT 25
32032: PUSH
32033: LD_INT 28
32035: PUSH
32036: LD_INT 29
32038: PUSH
32039: LD_INT 30
32041: PUSH
32042: LD_INT 31
32044: PUSH
32045: LD_INT 37
32047: PUSH
32048: LD_INT 38
32050: PUSH
32051: LD_INT 32
32053: PUSH
32054: LD_INT 27
32056: PUSH
32057: LD_INT 33
32059: PUSH
32060: LD_INT 69
32062: PUSH
32063: LD_INT 39
32065: PUSH
32066: LD_INT 34
32068: PUSH
32069: LD_INT 40
32071: PUSH
32072: LD_INT 71
32074: PUSH
32075: LD_INT 23
32077: PUSH
32078: LD_INT 44
32080: PUSH
32081: LD_INT 48
32083: PUSH
32084: LD_INT 49
32086: PUSH
32087: LD_INT 50
32089: PUSH
32090: LD_INT 51
32092: PUSH
32093: LD_INT 52
32095: PUSH
32096: LD_INT 53
32098: PUSH
32099: LD_INT 54
32101: PUSH
32102: LD_INT 55
32104: PUSH
32105: LD_INT 56
32107: PUSH
32108: LD_INT 57
32110: PUSH
32111: LD_INT 58
32113: PUSH
32114: LD_INT 59
32116: PUSH
32117: LD_INT 63
32119: PUSH
32120: LD_INT 64
32122: PUSH
32123: LD_INT 65
32125: PUSH
32126: LD_INT 82
32128: PUSH
32129: LD_INT 83
32131: PUSH
32132: LD_INT 84
32134: PUSH
32135: LD_INT 85
32137: PUSH
32138: LD_INT 86
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
32196: GO 32199
32198: POP
// if state > - 1 and state < 3 then
32199: LD_VAR 0 3
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: GREATER
32208: PUSH
32209: LD_VAR 0 3
32213: PUSH
32214: LD_INT 3
32216: LESS
32217: AND
32218: IFFALSE 32275
// for i in result do
32220: LD_ADDR_VAR 0 5
32224: PUSH
32225: LD_VAR 0 4
32229: PUSH
32230: FOR_IN
32231: IFFALSE 32273
// if GetTech ( i , side ) <> state then
32233: LD_VAR 0 5
32237: PPUSH
32238: LD_VAR 0 1
32242: PPUSH
32243: CALL_OW 321
32247: PUSH
32248: LD_VAR 0 3
32252: NONEQUAL
32253: IFFALSE 32271
// result := result diff i ;
32255: LD_ADDR_VAR 0 4
32259: PUSH
32260: LD_VAR 0 4
32264: PUSH
32265: LD_VAR 0 5
32269: DIFF
32270: ST_TO_ADDR
32271: GO 32230
32273: POP
32274: POP
// end ;
32275: LD_VAR 0 4
32279: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32280: LD_INT 0
32282: PPUSH
32283: PPUSH
32284: PPUSH
// result := true ;
32285: LD_ADDR_VAR 0 3
32289: PUSH
32290: LD_INT 1
32292: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32293: LD_ADDR_VAR 0 5
32297: PUSH
32298: LD_VAR 0 2
32302: PPUSH
32303: CALL_OW 480
32307: ST_TO_ADDR
// if not tmp then
32308: LD_VAR 0 5
32312: NOT
32313: IFFALSE 32317
// exit ;
32315: GO 32366
// for i in tmp do
32317: LD_ADDR_VAR 0 4
32321: PUSH
32322: LD_VAR 0 5
32326: PUSH
32327: FOR_IN
32328: IFFALSE 32364
// if GetTech ( i , side ) <> state_researched then
32330: LD_VAR 0 4
32334: PPUSH
32335: LD_VAR 0 1
32339: PPUSH
32340: CALL_OW 321
32344: PUSH
32345: LD_INT 2
32347: NONEQUAL
32348: IFFALSE 32362
// begin result := false ;
32350: LD_ADDR_VAR 0 3
32354: PUSH
32355: LD_INT 0
32357: ST_TO_ADDR
// exit ;
32358: POP
32359: POP
32360: GO 32366
// end ;
32362: GO 32327
32364: POP
32365: POP
// end ;
32366: LD_VAR 0 3
32370: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32371: LD_INT 0
32373: PPUSH
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
32379: PPUSH
32380: PPUSH
32381: PPUSH
32382: PPUSH
32383: PPUSH
32384: PPUSH
32385: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32386: LD_VAR 0 1
32390: NOT
32391: PUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 257
32401: PUSH
32402: LD_INT 9
32404: NONEQUAL
32405: OR
32406: IFFALSE 32410
// exit ;
32408: GO 32983
// side := GetSide ( unit ) ;
32410: LD_ADDR_VAR 0 9
32414: PUSH
32415: LD_VAR 0 1
32419: PPUSH
32420: CALL_OW 255
32424: ST_TO_ADDR
// tech_space := tech_spacanom ;
32425: LD_ADDR_VAR 0 12
32429: PUSH
32430: LD_INT 29
32432: ST_TO_ADDR
// tech_time := tech_taurad ;
32433: LD_ADDR_VAR 0 13
32437: PUSH
32438: LD_INT 28
32440: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32441: LD_ADDR_VAR 0 11
32445: PUSH
32446: LD_VAR 0 1
32450: PPUSH
32451: CALL_OW 310
32455: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32456: LD_VAR 0 11
32460: PPUSH
32461: CALL_OW 247
32465: PUSH
32466: LD_INT 2
32468: EQUAL
32469: IFFALSE 32473
// exit ;
32471: GO 32983
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32473: LD_ADDR_VAR 0 8
32477: PUSH
32478: LD_INT 81
32480: PUSH
32481: LD_VAR 0 9
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: LD_INT 21
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PPUSH
32511: CALL_OW 69
32515: ST_TO_ADDR
// if not tmp then
32516: LD_VAR 0 8
32520: NOT
32521: IFFALSE 32525
// exit ;
32523: GO 32983
// if in_unit then
32525: LD_VAR 0 11
32529: IFFALSE 32553
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32531: LD_ADDR_VAR 0 10
32535: PUSH
32536: LD_VAR 0 8
32540: PPUSH
32541: LD_VAR 0 11
32545: PPUSH
32546: CALL_OW 74
32550: ST_TO_ADDR
32551: GO 32573
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32553: LD_ADDR_VAR 0 10
32557: PUSH
32558: LD_VAR 0 8
32562: PPUSH
32563: LD_VAR 0 1
32567: PPUSH
32568: CALL_OW 74
32572: ST_TO_ADDR
// if not enemy then
32573: LD_VAR 0 10
32577: NOT
32578: IFFALSE 32582
// exit ;
32580: GO 32983
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32582: LD_VAR 0 11
32586: PUSH
32587: LD_VAR 0 11
32591: PPUSH
32592: LD_VAR 0 10
32596: PPUSH
32597: CALL_OW 296
32601: PUSH
32602: LD_INT 13
32604: GREATER
32605: AND
32606: PUSH
32607: LD_VAR 0 1
32611: PPUSH
32612: LD_VAR 0 10
32616: PPUSH
32617: CALL_OW 296
32621: PUSH
32622: LD_INT 12
32624: GREATER
32625: OR
32626: IFFALSE 32630
// exit ;
32628: GO 32983
// missile := [ 1 ] ;
32630: LD_ADDR_VAR 0 14
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32641: LD_VAR 0 9
32645: PPUSH
32646: LD_VAR 0 12
32650: PPUSH
32651: CALL_OW 325
32655: IFFALSE 32684
// missile := Replace ( missile , missile + 1 , 2 ) ;
32657: LD_ADDR_VAR 0 14
32661: PUSH
32662: LD_VAR 0 14
32666: PPUSH
32667: LD_VAR 0 14
32671: PUSH
32672: LD_INT 1
32674: PLUS
32675: PPUSH
32676: LD_INT 2
32678: PPUSH
32679: CALL_OW 1
32683: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32684: LD_VAR 0 9
32688: PPUSH
32689: LD_VAR 0 13
32693: PPUSH
32694: CALL_OW 325
32698: PUSH
32699: LD_VAR 0 10
32703: PPUSH
32704: CALL_OW 255
32708: PPUSH
32709: LD_VAR 0 13
32713: PPUSH
32714: CALL_OW 325
32718: NOT
32719: AND
32720: IFFALSE 32749
// missile := Replace ( missile , missile + 1 , 3 ) ;
32722: LD_ADDR_VAR 0 14
32726: PUSH
32727: LD_VAR 0 14
32731: PPUSH
32732: LD_VAR 0 14
32736: PUSH
32737: LD_INT 1
32739: PLUS
32740: PPUSH
32741: LD_INT 3
32743: PPUSH
32744: CALL_OW 1
32748: ST_TO_ADDR
// if missile < 2 then
32749: LD_VAR 0 14
32753: PUSH
32754: LD_INT 2
32756: LESS
32757: IFFALSE 32761
// exit ;
32759: GO 32983
// x := GetX ( enemy ) ;
32761: LD_ADDR_VAR 0 4
32765: PUSH
32766: LD_VAR 0 10
32770: PPUSH
32771: CALL_OW 250
32775: ST_TO_ADDR
// y := GetY ( enemy ) ;
32776: LD_ADDR_VAR 0 5
32780: PUSH
32781: LD_VAR 0 10
32785: PPUSH
32786: CALL_OW 251
32790: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32791: LD_ADDR_VAR 0 6
32795: PUSH
32796: LD_VAR 0 4
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PPUSH
32805: LD_INT 1
32807: PPUSH
32808: CALL_OW 12
32812: PLUS
32813: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32814: LD_ADDR_VAR 0 7
32818: PUSH
32819: LD_VAR 0 5
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PPUSH
32828: LD_INT 1
32830: PPUSH
32831: CALL_OW 12
32835: PLUS
32836: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32837: LD_VAR 0 6
32841: PPUSH
32842: LD_VAR 0 7
32846: PPUSH
32847: CALL_OW 488
32851: NOT
32852: IFFALSE 32874
// begin _x := x ;
32854: LD_ADDR_VAR 0 6
32858: PUSH
32859: LD_VAR 0 4
32863: ST_TO_ADDR
// _y := y ;
32864: LD_ADDR_VAR 0 7
32868: PUSH
32869: LD_VAR 0 5
32873: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_INT 1
32881: PPUSH
32882: LD_VAR 0 14
32886: PPUSH
32887: CALL_OW 12
32891: ST_TO_ADDR
// case i of 1 :
32892: LD_VAR 0 3
32896: PUSH
32897: LD_INT 1
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32922
32905: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32906: LD_VAR 0 1
32910: PPUSH
32911: LD_VAR 0 10
32915: PPUSH
32916: CALL_OW 115
32920: GO 32983
32922: LD_INT 2
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32952
32930: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32931: LD_VAR 0 1
32935: PPUSH
32936: LD_VAR 0 6
32940: PPUSH
32941: LD_VAR 0 7
32945: PPUSH
32946: CALL_OW 153
32950: GO 32983
32952: LD_INT 3
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32960
32958: GO 32982
32960: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32961: LD_VAR 0 1
32965: PPUSH
32966: LD_VAR 0 6
32970: PPUSH
32971: LD_VAR 0 7
32975: PPUSH
32976: CALL_OW 154
32980: GO 32983
32982: POP
// end ;
32983: LD_VAR 0 2
32987: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32988: LD_INT 0
32990: PPUSH
32991: PPUSH
32992: PPUSH
32993: PPUSH
32994: PPUSH
32995: PPUSH
// if not unit or not building then
32996: LD_VAR 0 1
33000: NOT
33001: PUSH
33002: LD_VAR 0 2
33006: NOT
33007: OR
33008: IFFALSE 33012
// exit ;
33010: GO 33170
// x := GetX ( building ) ;
33012: LD_ADDR_VAR 0 5
33016: PUSH
33017: LD_VAR 0 2
33021: PPUSH
33022: CALL_OW 250
33026: ST_TO_ADDR
// y := GetY ( building ) ;
33027: LD_ADDR_VAR 0 6
33031: PUSH
33032: LD_VAR 0 2
33036: PPUSH
33037: CALL_OW 251
33041: ST_TO_ADDR
// for i = 0 to 5 do
33042: LD_ADDR_VAR 0 4
33046: PUSH
33047: DOUBLE
33048: LD_INT 0
33050: DEC
33051: ST_TO_ADDR
33052: LD_INT 5
33054: PUSH
33055: FOR_TO
33056: IFFALSE 33168
// begin _x := ShiftX ( x , i , 3 ) ;
33058: LD_ADDR_VAR 0 7
33062: PUSH
33063: LD_VAR 0 5
33067: PPUSH
33068: LD_VAR 0 4
33072: PPUSH
33073: LD_INT 3
33075: PPUSH
33076: CALL_OW 272
33080: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33081: LD_ADDR_VAR 0 8
33085: PUSH
33086: LD_VAR 0 6
33090: PPUSH
33091: LD_VAR 0 4
33095: PPUSH
33096: LD_INT 3
33098: PPUSH
33099: CALL_OW 273
33103: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33104: LD_VAR 0 7
33108: PPUSH
33109: LD_VAR 0 8
33113: PPUSH
33114: CALL_OW 488
33118: NOT
33119: IFFALSE 33123
// continue ;
33121: GO 33055
// if HexInfo ( _x , _y ) = 0 then
33123: LD_VAR 0 7
33127: PPUSH
33128: LD_VAR 0 8
33132: PPUSH
33133: CALL_OW 428
33137: PUSH
33138: LD_INT 0
33140: EQUAL
33141: IFFALSE 33166
// begin ComMoveXY ( unit , _x , _y ) ;
33143: LD_VAR 0 1
33147: PPUSH
33148: LD_VAR 0 7
33152: PPUSH
33153: LD_VAR 0 8
33157: PPUSH
33158: CALL_OW 111
// exit ;
33162: POP
33163: POP
33164: GO 33170
// end ; end ;
33166: GO 33055
33168: POP
33169: POP
// end ;
33170: LD_VAR 0 3
33174: RET
// export function ScanBase ( side , base_area ) ; begin
33175: LD_INT 0
33177: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33178: LD_ADDR_VAR 0 3
33182: PUSH
33183: LD_VAR 0 2
33187: PPUSH
33188: LD_INT 81
33190: PUSH
33191: LD_VAR 0 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PPUSH
33200: CALL_OW 70
33204: ST_TO_ADDR
// end ;
33205: LD_VAR 0 3
33209: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33210: LD_INT 0
33212: PPUSH
33213: PPUSH
33214: PPUSH
33215: PPUSH
// result := false ;
33216: LD_ADDR_VAR 0 2
33220: PUSH
33221: LD_INT 0
33223: ST_TO_ADDR
// side := GetSide ( unit ) ;
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_VAR 0 1
33233: PPUSH
33234: CALL_OW 255
33238: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33239: LD_ADDR_VAR 0 4
33243: PUSH
33244: LD_VAR 0 1
33248: PPUSH
33249: CALL_OW 248
33253: ST_TO_ADDR
// case nat of 1 :
33254: LD_VAR 0 4
33258: PUSH
33259: LD_INT 1
33261: DOUBLE
33262: EQUAL
33263: IFTRUE 33267
33265: GO 33278
33267: POP
// tech := tech_lassight ; 2 :
33268: LD_ADDR_VAR 0 5
33272: PUSH
33273: LD_INT 12
33275: ST_TO_ADDR
33276: GO 33317
33278: LD_INT 2
33280: DOUBLE
33281: EQUAL
33282: IFTRUE 33286
33284: GO 33297
33286: POP
// tech := tech_mortar ; 3 :
33287: LD_ADDR_VAR 0 5
33291: PUSH
33292: LD_INT 41
33294: ST_TO_ADDR
33295: GO 33317
33297: LD_INT 3
33299: DOUBLE
33300: EQUAL
33301: IFTRUE 33305
33303: GO 33316
33305: POP
// tech := tech_bazooka ; end ;
33306: LD_ADDR_VAR 0 5
33310: PUSH
33311: LD_INT 44
33313: ST_TO_ADDR
33314: GO 33317
33316: POP
// if Researched ( side , tech ) then
33317: LD_VAR 0 3
33321: PPUSH
33322: LD_VAR 0 5
33326: PPUSH
33327: CALL_OW 325
33331: IFFALSE 33358
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33333: LD_ADDR_VAR 0 2
33337: PUSH
33338: LD_INT 5
33340: PUSH
33341: LD_INT 8
33343: PUSH
33344: LD_INT 9
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: PUSH
33352: LD_VAR 0 4
33356: ARRAY
33357: ST_TO_ADDR
// end ;
33358: LD_VAR 0 2
33362: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33363: LD_INT 0
33365: PPUSH
33366: PPUSH
33367: PPUSH
// if not mines then
33368: LD_VAR 0 2
33372: NOT
33373: IFFALSE 33377
// exit ;
33375: GO 33521
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33377: LD_ADDR_VAR 0 5
33381: PUSH
33382: LD_INT 81
33384: PUSH
33385: LD_VAR 0 1
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 3
33396: PUSH
33397: LD_INT 21
33399: PUSH
33400: LD_INT 3
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PPUSH
33415: CALL_OW 69
33419: ST_TO_ADDR
// for i in mines do
33420: LD_ADDR_VAR 0 4
33424: PUSH
33425: LD_VAR 0 2
33429: PUSH
33430: FOR_IN
33431: IFFALSE 33519
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33433: LD_VAR 0 4
33437: PUSH
33438: LD_INT 1
33440: ARRAY
33441: PPUSH
33442: LD_VAR 0 4
33446: PUSH
33447: LD_INT 2
33449: ARRAY
33450: PPUSH
33451: CALL_OW 458
33455: NOT
33456: IFFALSE 33460
// continue ;
33458: GO 33430
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33460: LD_VAR 0 4
33464: PUSH
33465: LD_INT 1
33467: ARRAY
33468: PPUSH
33469: LD_VAR 0 4
33473: PUSH
33474: LD_INT 2
33476: ARRAY
33477: PPUSH
33478: CALL_OW 428
33482: PUSH
33483: LD_VAR 0 5
33487: IN
33488: IFFALSE 33517
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33490: LD_VAR 0 4
33494: PUSH
33495: LD_INT 1
33497: ARRAY
33498: PPUSH
33499: LD_VAR 0 4
33503: PUSH
33504: LD_INT 2
33506: ARRAY
33507: PPUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: CALL_OW 456
// end ;
33517: GO 33430
33519: POP
33520: POP
// end ;
33521: LD_VAR 0 3
33525: RET
// export function Count ( array ) ; begin
33526: LD_INT 0
33528: PPUSH
// result := array + 0 ;
33529: LD_ADDR_VAR 0 2
33533: PUSH
33534: LD_VAR 0 1
33538: PUSH
33539: LD_INT 0
33541: PLUS
33542: ST_TO_ADDR
// end ;
33543: LD_VAR 0 2
33547: RET
// export function IsEmpty ( building ) ; begin
33548: LD_INT 0
33550: PPUSH
// if not building then
33551: LD_VAR 0 1
33555: NOT
33556: IFFALSE 33560
// exit ;
33558: GO 33603
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33560: LD_ADDR_VAR 0 2
33564: PUSH
33565: LD_VAR 0 1
33569: PUSH
33570: LD_INT 22
33572: PUSH
33573: LD_VAR 0 1
33577: PPUSH
33578: CALL_OW 255
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 58
33589: PUSH
33590: EMPTY
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PPUSH
33597: CALL_OW 69
33601: IN
33602: ST_TO_ADDR
// end ;
33603: LD_VAR 0 2
33607: RET
// export function IsNotFull ( building ) ; var places ; begin
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
// if not building then
33612: LD_VAR 0 1
33616: NOT
33617: IFFALSE 33621
// exit ;
33619: GO 33649
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33621: LD_ADDR_VAR 0 2
33625: PUSH
33626: LD_VAR 0 1
33630: PPUSH
33631: LD_INT 3
33633: PUSH
33634: LD_INT 62
33636: PUSH
33637: EMPTY
33638: LIST
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PPUSH
33644: CALL_OW 72
33648: ST_TO_ADDR
// end ;
33649: LD_VAR 0 2
33653: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33654: LD_INT 0
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
// tmp := [ ] ;
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: EMPTY
33666: ST_TO_ADDR
// list := [ ] ;
33667: LD_ADDR_VAR 0 5
33671: PUSH
33672: EMPTY
33673: ST_TO_ADDR
// for i = 16 to 25 do
33674: LD_ADDR_VAR 0 4
33678: PUSH
33679: DOUBLE
33680: LD_INT 16
33682: DEC
33683: ST_TO_ADDR
33684: LD_INT 25
33686: PUSH
33687: FOR_TO
33688: IFFALSE 33761
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33690: LD_ADDR_VAR 0 3
33694: PUSH
33695: LD_VAR 0 3
33699: PUSH
33700: LD_INT 22
33702: PUSH
33703: LD_VAR 0 1
33707: PPUSH
33708: CALL_OW 255
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 91
33719: PUSH
33720: LD_VAR 0 1
33724: PUSH
33725: LD_INT 6
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 30
33735: PUSH
33736: LD_VAR 0 4
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: PUSH
33750: EMPTY
33751: LIST
33752: PPUSH
33753: CALL_OW 69
33757: ADD
33758: ST_TO_ADDR
33759: GO 33687
33761: POP
33762: POP
// for i = 1 to tmp do
33763: LD_ADDR_VAR 0 4
33767: PUSH
33768: DOUBLE
33769: LD_INT 1
33771: DEC
33772: ST_TO_ADDR
33773: LD_VAR 0 3
33777: PUSH
33778: FOR_TO
33779: IFFALSE 33867
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33781: LD_ADDR_VAR 0 5
33785: PUSH
33786: LD_VAR 0 5
33790: PUSH
33791: LD_VAR 0 3
33795: PUSH
33796: LD_VAR 0 4
33800: ARRAY
33801: PPUSH
33802: CALL_OW 266
33806: PUSH
33807: LD_VAR 0 3
33811: PUSH
33812: LD_VAR 0 4
33816: ARRAY
33817: PPUSH
33818: CALL_OW 250
33822: PUSH
33823: LD_VAR 0 3
33827: PUSH
33828: LD_VAR 0 4
33832: ARRAY
33833: PPUSH
33834: CALL_OW 251
33838: PUSH
33839: LD_VAR 0 3
33843: PUSH
33844: LD_VAR 0 4
33848: ARRAY
33849: PPUSH
33850: CALL_OW 254
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: ADD
33864: ST_TO_ADDR
33865: GO 33778
33867: POP
33868: POP
// result := list ;
33869: LD_ADDR_VAR 0 2
33873: PUSH
33874: LD_VAR 0 5
33878: ST_TO_ADDR
// end ;
33879: LD_VAR 0 2
33883: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33884: LD_INT 0
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
// if not factory then
33893: LD_VAR 0 1
33897: NOT
33898: IFFALSE 33902
// exit ;
33900: GO 34495
// if control = control_apeman then
33902: LD_VAR 0 4
33906: PUSH
33907: LD_INT 5
33909: EQUAL
33910: IFFALSE 34019
// begin tmp := UnitsInside ( factory ) ;
33912: LD_ADDR_VAR 0 8
33916: PUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 313
33926: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33927: LD_VAR 0 8
33931: PPUSH
33932: LD_INT 25
33934: PUSH
33935: LD_INT 12
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PPUSH
33942: CALL_OW 72
33946: NOT
33947: IFFALSE 33957
// control := control_manual ;
33949: LD_ADDR_VAR 0 4
33953: PUSH
33954: LD_INT 1
33956: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33957: LD_ADDR_VAR 0 8
33961: PUSH
33962: LD_VAR 0 1
33966: PPUSH
33967: CALL 33654 0 1
33971: ST_TO_ADDR
// if tmp then
33972: LD_VAR 0 8
33976: IFFALSE 34019
// begin for i in tmp do
33978: LD_ADDR_VAR 0 7
33982: PUSH
33983: LD_VAR 0 8
33987: PUSH
33988: FOR_IN
33989: IFFALSE 34017
// if i [ 1 ] = b_ext_radio then
33991: LD_VAR 0 7
33995: PUSH
33996: LD_INT 1
33998: ARRAY
33999: PUSH
34000: LD_INT 22
34002: EQUAL
34003: IFFALSE 34015
// begin control := control_remote ;
34005: LD_ADDR_VAR 0 4
34009: PUSH
34010: LD_INT 2
34012: ST_TO_ADDR
// break ;
34013: GO 34017
// end ;
34015: GO 33988
34017: POP
34018: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34019: LD_VAR 0 1
34023: PPUSH
34024: LD_VAR 0 2
34028: PPUSH
34029: LD_VAR 0 3
34033: PPUSH
34034: LD_VAR 0 4
34038: PPUSH
34039: LD_VAR 0 5
34043: PPUSH
34044: CALL_OW 448
34048: IFFALSE 34083
// begin result := [ chassis , engine , control , weapon ] ;
34050: LD_ADDR_VAR 0 6
34054: PUSH
34055: LD_VAR 0 2
34059: PUSH
34060: LD_VAR 0 3
34064: PUSH
34065: LD_VAR 0 4
34069: PUSH
34070: LD_VAR 0 5
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
// exit ;
34081: GO 34495
// end ; _chassis := AvailableChassisList ( factory ) ;
34083: LD_ADDR_VAR 0 9
34087: PUSH
34088: LD_VAR 0 1
34092: PPUSH
34093: CALL_OW 475
34097: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34098: LD_ADDR_VAR 0 11
34102: PUSH
34103: LD_VAR 0 1
34107: PPUSH
34108: CALL_OW 476
34112: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34113: LD_ADDR_VAR 0 12
34117: PUSH
34118: LD_VAR 0 1
34122: PPUSH
34123: CALL_OW 477
34127: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34128: LD_ADDR_VAR 0 10
34132: PUSH
34133: LD_VAR 0 1
34137: PPUSH
34138: CALL_OW 478
34142: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34143: LD_VAR 0 9
34147: NOT
34148: PUSH
34149: LD_VAR 0 11
34153: NOT
34154: OR
34155: PUSH
34156: LD_VAR 0 12
34160: NOT
34161: OR
34162: PUSH
34163: LD_VAR 0 10
34167: NOT
34168: OR
34169: IFFALSE 34204
// begin result := [ chassis , engine , control , weapon ] ;
34171: LD_ADDR_VAR 0 6
34175: PUSH
34176: LD_VAR 0 2
34180: PUSH
34181: LD_VAR 0 3
34185: PUSH
34186: LD_VAR 0 4
34190: PUSH
34191: LD_VAR 0 5
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
// exit ;
34202: GO 34495
// end ; if not chassis in _chassis then
34204: LD_VAR 0 2
34208: PUSH
34209: LD_VAR 0 9
34213: IN
34214: NOT
34215: IFFALSE 34241
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34217: LD_ADDR_VAR 0 2
34221: PUSH
34222: LD_VAR 0 9
34226: PUSH
34227: LD_INT 1
34229: PPUSH
34230: LD_VAR 0 9
34234: PPUSH
34235: CALL_OW 12
34239: ARRAY
34240: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34241: LD_VAR 0 2
34245: PPUSH
34246: LD_VAR 0 3
34250: PPUSH
34251: CALL 34500 0 2
34255: NOT
34256: IFFALSE 34315
// repeat engine := _engine [ 1 ] ;
34258: LD_ADDR_VAR 0 3
34262: PUSH
34263: LD_VAR 0 11
34267: PUSH
34268: LD_INT 1
34270: ARRAY
34271: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34272: LD_ADDR_VAR 0 11
34276: PUSH
34277: LD_VAR 0 11
34281: PPUSH
34282: LD_INT 1
34284: PPUSH
34285: CALL_OW 3
34289: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 3
34299: PPUSH
34300: CALL 34500 0 2
34304: PUSH
34305: LD_VAR 0 11
34309: PUSH
34310: EMPTY
34311: EQUAL
34312: OR
34313: IFFALSE 34258
// if not control in _control then
34315: LD_VAR 0 4
34319: PUSH
34320: LD_VAR 0 12
34324: IN
34325: NOT
34326: IFFALSE 34352
// control := _control [ rand ( 1 , _control ) ] ;
34328: LD_ADDR_VAR 0 4
34332: PUSH
34333: LD_VAR 0 12
34337: PUSH
34338: LD_INT 1
34340: PPUSH
34341: LD_VAR 0 12
34345: PPUSH
34346: CALL_OW 12
34350: ARRAY
34351: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34352: LD_VAR 0 2
34356: PPUSH
34357: LD_VAR 0 5
34361: PPUSH
34362: CALL 34720 0 2
34366: NOT
34367: IFFALSE 34426
// repeat weapon := _weapon [ 1 ] ;
34369: LD_ADDR_VAR 0 5
34373: PUSH
34374: LD_VAR 0 10
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34383: LD_ADDR_VAR 0 10
34387: PUSH
34388: LD_VAR 0 10
34392: PPUSH
34393: LD_INT 1
34395: PPUSH
34396: CALL_OW 3
34400: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34401: LD_VAR 0 2
34405: PPUSH
34406: LD_VAR 0 5
34410: PPUSH
34411: CALL 34720 0 2
34415: PUSH
34416: LD_VAR 0 10
34420: PUSH
34421: EMPTY
34422: EQUAL
34423: OR
34424: IFFALSE 34369
// result := [ ] ;
34426: LD_ADDR_VAR 0 6
34430: PUSH
34431: EMPTY
34432: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34433: LD_VAR 0 1
34437: PPUSH
34438: LD_VAR 0 2
34442: PPUSH
34443: LD_VAR 0 3
34447: PPUSH
34448: LD_VAR 0 4
34452: PPUSH
34453: LD_VAR 0 5
34457: PPUSH
34458: CALL_OW 448
34462: IFFALSE 34495
// result := [ chassis , engine , control , weapon ] ;
34464: LD_ADDR_VAR 0 6
34468: PUSH
34469: LD_VAR 0 2
34473: PUSH
34474: LD_VAR 0 3
34478: PUSH
34479: LD_VAR 0 4
34483: PUSH
34484: LD_VAR 0 5
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
// end ;
34495: LD_VAR 0 6
34499: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34500: LD_INT 0
34502: PPUSH
// if not chassis or not engine then
34503: LD_VAR 0 1
34507: NOT
34508: PUSH
34509: LD_VAR 0 2
34513: NOT
34514: OR
34515: IFFALSE 34519
// exit ;
34517: GO 34715
// case engine of engine_solar :
34519: LD_VAR 0 2
34523: PUSH
34524: LD_INT 2
34526: DOUBLE
34527: EQUAL
34528: IFTRUE 34532
34530: GO 34570
34532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: LD_INT 11
34540: PUSH
34541: LD_INT 12
34543: PUSH
34544: LD_INT 13
34546: PUSH
34547: LD_INT 14
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: ST_TO_ADDR
34568: GO 34699
34570: LD_INT 1
34572: DOUBLE
34573: EQUAL
34574: IFTRUE 34578
34576: GO 34640
34578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34579: LD_ADDR_VAR 0 3
34583: PUSH
34584: LD_INT 11
34586: PUSH
34587: LD_INT 12
34589: PUSH
34590: LD_INT 13
34592: PUSH
34593: LD_INT 14
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 3
34604: PUSH
34605: LD_INT 4
34607: PUSH
34608: LD_INT 5
34610: PUSH
34611: LD_INT 21
34613: PUSH
34614: LD_INT 23
34616: PUSH
34617: LD_INT 22
34619: PUSH
34620: LD_INT 24
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: ST_TO_ADDR
34638: GO 34699
34640: LD_INT 3
34642: DOUBLE
34643: EQUAL
34644: IFTRUE 34648
34646: GO 34698
34648: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34649: LD_ADDR_VAR 0 3
34653: PUSH
34654: LD_INT 13
34656: PUSH
34657: LD_INT 14
34659: PUSH
34660: LD_INT 2
34662: PUSH
34663: LD_INT 3
34665: PUSH
34666: LD_INT 4
34668: PUSH
34669: LD_INT 5
34671: PUSH
34672: LD_INT 21
34674: PUSH
34675: LD_INT 22
34677: PUSH
34678: LD_INT 23
34680: PUSH
34681: LD_INT 24
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: ST_TO_ADDR
34696: GO 34699
34698: POP
// result := ( chassis in result ) ;
34699: LD_ADDR_VAR 0 3
34703: PUSH
34704: LD_VAR 0 1
34708: PUSH
34709: LD_VAR 0 3
34713: IN
34714: ST_TO_ADDR
// end ;
34715: LD_VAR 0 3
34719: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34720: LD_INT 0
34722: PPUSH
// if not chassis or not weapon then
34723: LD_VAR 0 1
34727: NOT
34728: PUSH
34729: LD_VAR 0 2
34733: NOT
34734: OR
34735: IFFALSE 34739
// exit ;
34737: GO 35799
// case weapon of us_machine_gun :
34739: LD_VAR 0 2
34743: PUSH
34744: LD_INT 2
34746: DOUBLE
34747: EQUAL
34748: IFTRUE 34752
34750: GO 34782
34752: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34753: LD_ADDR_VAR 0 3
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: LD_INT 4
34769: PUSH
34770: LD_INT 5
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
34780: GO 35783
34782: LD_INT 3
34784: DOUBLE
34785: EQUAL
34786: IFTRUE 34790
34788: GO 34820
34790: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34791: LD_ADDR_VAR 0 3
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: LD_INT 4
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: ST_TO_ADDR
34818: GO 35783
34820: LD_INT 11
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34828
34826: GO 34858
34828: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34829: LD_ADDR_VAR 0 3
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: LD_INT 4
34845: PUSH
34846: LD_INT 5
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: ST_TO_ADDR
34856: GO 35783
34858: LD_INT 4
34860: DOUBLE
34861: EQUAL
34862: IFTRUE 34866
34864: GO 34892
34866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34867: LD_ADDR_VAR 0 3
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: LD_INT 4
34880: PUSH
34881: LD_INT 5
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
34890: GO 35783
34892: LD_INT 5
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34900
34898: GO 34926
34900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34901: LD_ADDR_VAR 0 3
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: LD_INT 3
34911: PUSH
34912: LD_INT 4
34914: PUSH
34915: LD_INT 5
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: ST_TO_ADDR
34924: GO 35783
34926: LD_INT 9
34928: DOUBLE
34929: EQUAL
34930: IFTRUE 34934
34932: GO 34960
34934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34935: LD_ADDR_VAR 0 3
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: LD_INT 4
34948: PUSH
34949: LD_INT 5
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: ST_TO_ADDR
34958: GO 35783
34960: LD_INT 7
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 34994
34968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: LD_INT 4
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
34992: GO 35783
34994: LD_INT 12
34996: DOUBLE
34997: EQUAL
34998: IFTRUE 35002
35000: GO 35028
35002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: LD_INT 3
35013: PUSH
35014: LD_INT 4
35016: PUSH
35017: LD_INT 5
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
35026: GO 35783
35028: LD_INT 13
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35062
35036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 2
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: LD_INT 4
35050: PUSH
35051: LD_INT 5
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
35060: GO 35783
35062: LD_INT 14
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35088
35070: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 4
35078: PUSH
35079: LD_INT 5
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: ST_TO_ADDR
35086: GO 35783
35088: LD_INT 6
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35096
35094: GO 35114
35096: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35097: LD_ADDR_VAR 0 3
35101: PUSH
35102: LD_INT 4
35104: PUSH
35105: LD_INT 5
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: ST_TO_ADDR
35112: GO 35783
35114: LD_INT 10
35116: DOUBLE
35117: EQUAL
35118: IFTRUE 35122
35120: GO 35140
35122: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35123: LD_ADDR_VAR 0 3
35127: PUSH
35128: LD_INT 4
35130: PUSH
35131: LD_INT 5
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: ST_TO_ADDR
35138: GO 35783
35140: LD_INT 22
35142: DOUBLE
35143: EQUAL
35144: IFTRUE 35148
35146: GO 35174
35148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35149: LD_ADDR_VAR 0 3
35153: PUSH
35154: LD_INT 11
35156: PUSH
35157: LD_INT 12
35159: PUSH
35160: LD_INT 13
35162: PUSH
35163: LD_INT 14
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
35172: GO 35783
35174: LD_INT 23
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35208
35182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_INT 11
35190: PUSH
35191: LD_INT 12
35193: PUSH
35194: LD_INT 13
35196: PUSH
35197: LD_INT 14
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: ST_TO_ADDR
35206: GO 35783
35208: LD_INT 24
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35242
35216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35217: LD_ADDR_VAR 0 3
35221: PUSH
35222: LD_INT 11
35224: PUSH
35225: LD_INT 12
35227: PUSH
35228: LD_INT 13
35230: PUSH
35231: LD_INT 14
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: ST_TO_ADDR
35240: GO 35783
35242: LD_INT 30
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35250
35248: GO 35276
35250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: LD_INT 11
35258: PUSH
35259: LD_INT 12
35261: PUSH
35262: LD_INT 13
35264: PUSH
35265: LD_INT 14
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: ST_TO_ADDR
35274: GO 35783
35276: LD_INT 25
35278: DOUBLE
35279: EQUAL
35280: IFTRUE 35284
35282: GO 35302
35284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35285: LD_ADDR_VAR 0 3
35289: PUSH
35290: LD_INT 13
35292: PUSH
35293: LD_INT 14
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: ST_TO_ADDR
35300: GO 35783
35302: LD_INT 27
35304: DOUBLE
35305: EQUAL
35306: IFTRUE 35310
35308: GO 35328
35310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: LD_INT 13
35318: PUSH
35319: LD_INT 14
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: ST_TO_ADDR
35326: GO 35783
35328: LD_INT 92
35330: DOUBLE
35331: EQUAL
35332: IFTRUE 35336
35334: GO 35362
35336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35337: LD_ADDR_VAR 0 3
35341: PUSH
35342: LD_INT 11
35344: PUSH
35345: LD_INT 12
35347: PUSH
35348: LD_INT 13
35350: PUSH
35351: LD_INT 14
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: ST_TO_ADDR
35360: GO 35783
35362: LD_INT 28
35364: DOUBLE
35365: EQUAL
35366: IFTRUE 35370
35368: GO 35388
35370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35371: LD_ADDR_VAR 0 3
35375: PUSH
35376: LD_INT 13
35378: PUSH
35379: LD_INT 14
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: ST_TO_ADDR
35386: GO 35783
35388: LD_INT 29
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35396
35394: GO 35414
35396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35397: LD_ADDR_VAR 0 3
35401: PUSH
35402: LD_INT 13
35404: PUSH
35405: LD_INT 14
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: ST_TO_ADDR
35412: GO 35783
35414: LD_INT 31
35416: DOUBLE
35417: EQUAL
35418: IFTRUE 35422
35420: GO 35440
35422: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35423: LD_ADDR_VAR 0 3
35427: PUSH
35428: LD_INT 13
35430: PUSH
35431: LD_INT 14
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: ST_TO_ADDR
35438: GO 35783
35440: LD_INT 26
35442: DOUBLE
35443: EQUAL
35444: IFTRUE 35448
35446: GO 35466
35448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35449: LD_ADDR_VAR 0 3
35453: PUSH
35454: LD_INT 13
35456: PUSH
35457: LD_INT 14
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: ST_TO_ADDR
35464: GO 35783
35466: LD_INT 42
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35474
35472: GO 35500
35474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35475: LD_ADDR_VAR 0 3
35479: PUSH
35480: LD_INT 21
35482: PUSH
35483: LD_INT 22
35485: PUSH
35486: LD_INT 23
35488: PUSH
35489: LD_INT 24
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: ST_TO_ADDR
35498: GO 35783
35500: LD_INT 43
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35534
35508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35509: LD_ADDR_VAR 0 3
35513: PUSH
35514: LD_INT 21
35516: PUSH
35517: LD_INT 22
35519: PUSH
35520: LD_INT 23
35522: PUSH
35523: LD_INT 24
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
35532: GO 35783
35534: LD_INT 44
35536: DOUBLE
35537: EQUAL
35538: IFTRUE 35542
35540: GO 35568
35542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35543: LD_ADDR_VAR 0 3
35547: PUSH
35548: LD_INT 21
35550: PUSH
35551: LD_INT 22
35553: PUSH
35554: LD_INT 23
35556: PUSH
35557: LD_INT 24
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: ST_TO_ADDR
35566: GO 35783
35568: LD_INT 45
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35576
35574: GO 35602
35576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35577: LD_ADDR_VAR 0 3
35581: PUSH
35582: LD_INT 21
35584: PUSH
35585: LD_INT 22
35587: PUSH
35588: LD_INT 23
35590: PUSH
35591: LD_INT 24
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: ST_TO_ADDR
35600: GO 35783
35602: LD_INT 49
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35610
35608: GO 35636
35610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35611: LD_ADDR_VAR 0 3
35615: PUSH
35616: LD_INT 21
35618: PUSH
35619: LD_INT 22
35621: PUSH
35622: LD_INT 23
35624: PUSH
35625: LD_INT 24
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: ST_TO_ADDR
35634: GO 35783
35636: LD_INT 51
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35644
35642: GO 35670
35644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35645: LD_ADDR_VAR 0 3
35649: PUSH
35650: LD_INT 21
35652: PUSH
35653: LD_INT 22
35655: PUSH
35656: LD_INT 23
35658: PUSH
35659: LD_INT 24
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: ST_TO_ADDR
35668: GO 35783
35670: LD_INT 52
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35704
35678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35679: LD_ADDR_VAR 0 3
35683: PUSH
35684: LD_INT 21
35686: PUSH
35687: LD_INT 22
35689: PUSH
35690: LD_INT 23
35692: PUSH
35693: LD_INT 24
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: ST_TO_ADDR
35702: GO 35783
35704: LD_INT 53
35706: DOUBLE
35707: EQUAL
35708: IFTRUE 35712
35710: GO 35730
35712: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35713: LD_ADDR_VAR 0 3
35717: PUSH
35718: LD_INT 23
35720: PUSH
35721: LD_INT 24
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: ST_TO_ADDR
35728: GO 35783
35730: LD_INT 46
35732: DOUBLE
35733: EQUAL
35734: IFTRUE 35738
35736: GO 35756
35738: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35739: LD_ADDR_VAR 0 3
35743: PUSH
35744: LD_INT 23
35746: PUSH
35747: LD_INT 24
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: ST_TO_ADDR
35754: GO 35783
35756: LD_INT 47
35758: DOUBLE
35759: EQUAL
35760: IFTRUE 35764
35762: GO 35782
35764: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35765: LD_ADDR_VAR 0 3
35769: PUSH
35770: LD_INT 23
35772: PUSH
35773: LD_INT 24
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: ST_TO_ADDR
35780: GO 35783
35782: POP
// result := ( chassis in result ) ;
35783: LD_ADDR_VAR 0 3
35787: PUSH
35788: LD_VAR 0 1
35792: PUSH
35793: LD_VAR 0 3
35797: IN
35798: ST_TO_ADDR
// end ;
35799: LD_VAR 0 3
35803: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35804: LD_INT 0
35806: PPUSH
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
35811: PPUSH
35812: PPUSH
// result := array ;
35813: LD_ADDR_VAR 0 5
35817: PUSH
35818: LD_VAR 0 1
35822: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35823: LD_VAR 0 1
35827: NOT
35828: PUSH
35829: LD_VAR 0 2
35833: NOT
35834: OR
35835: PUSH
35836: LD_VAR 0 3
35840: NOT
35841: OR
35842: PUSH
35843: LD_VAR 0 2
35847: PUSH
35848: LD_VAR 0 1
35852: GREATER
35853: OR
35854: PUSH
35855: LD_VAR 0 3
35859: PUSH
35860: LD_VAR 0 1
35864: GREATER
35865: OR
35866: IFFALSE 35870
// exit ;
35868: GO 36166
// if direction then
35870: LD_VAR 0 4
35874: IFFALSE 35938
// begin d := 1 ;
35876: LD_ADDR_VAR 0 9
35880: PUSH
35881: LD_INT 1
35883: ST_TO_ADDR
// if i_from > i_to then
35884: LD_VAR 0 2
35888: PUSH
35889: LD_VAR 0 3
35893: GREATER
35894: IFFALSE 35920
// length := ( array - i_from ) + i_to else
35896: LD_ADDR_VAR 0 11
35900: PUSH
35901: LD_VAR 0 1
35905: PUSH
35906: LD_VAR 0 2
35910: MINUS
35911: PUSH
35912: LD_VAR 0 3
35916: PLUS
35917: ST_TO_ADDR
35918: GO 35936
// length := i_to - i_from ;
35920: LD_ADDR_VAR 0 11
35924: PUSH
35925: LD_VAR 0 3
35929: PUSH
35930: LD_VAR 0 2
35934: MINUS
35935: ST_TO_ADDR
// end else
35936: GO 35999
// begin d := - 1 ;
35938: LD_ADDR_VAR 0 9
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: ST_TO_ADDR
// if i_from > i_to then
35947: LD_VAR 0 2
35951: PUSH
35952: LD_VAR 0 3
35956: GREATER
35957: IFFALSE 35977
// length := i_from - i_to else
35959: LD_ADDR_VAR 0 11
35963: PUSH
35964: LD_VAR 0 2
35968: PUSH
35969: LD_VAR 0 3
35973: MINUS
35974: ST_TO_ADDR
35975: GO 35999
// length := ( array - i_to ) + i_from ;
35977: LD_ADDR_VAR 0 11
35981: PUSH
35982: LD_VAR 0 1
35986: PUSH
35987: LD_VAR 0 3
35991: MINUS
35992: PUSH
35993: LD_VAR 0 2
35997: PLUS
35998: ST_TO_ADDR
// end ; if not length then
35999: LD_VAR 0 11
36003: NOT
36004: IFFALSE 36008
// exit ;
36006: GO 36166
// tmp := array ;
36008: LD_ADDR_VAR 0 10
36012: PUSH
36013: LD_VAR 0 1
36017: ST_TO_ADDR
// for i = 1 to length do
36018: LD_ADDR_VAR 0 6
36022: PUSH
36023: DOUBLE
36024: LD_INT 1
36026: DEC
36027: ST_TO_ADDR
36028: LD_VAR 0 11
36032: PUSH
36033: FOR_TO
36034: IFFALSE 36154
// begin for j = 1 to array do
36036: LD_ADDR_VAR 0 7
36040: PUSH
36041: DOUBLE
36042: LD_INT 1
36044: DEC
36045: ST_TO_ADDR
36046: LD_VAR 0 1
36050: PUSH
36051: FOR_TO
36052: IFFALSE 36140
// begin k := j + d ;
36054: LD_ADDR_VAR 0 8
36058: PUSH
36059: LD_VAR 0 7
36063: PUSH
36064: LD_VAR 0 9
36068: PLUS
36069: ST_TO_ADDR
// if k > array then
36070: LD_VAR 0 8
36074: PUSH
36075: LD_VAR 0 1
36079: GREATER
36080: IFFALSE 36090
// k := 1 ;
36082: LD_ADDR_VAR 0 8
36086: PUSH
36087: LD_INT 1
36089: ST_TO_ADDR
// if not k then
36090: LD_VAR 0 8
36094: NOT
36095: IFFALSE 36107
// k := array ;
36097: LD_ADDR_VAR 0 8
36101: PUSH
36102: LD_VAR 0 1
36106: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36107: LD_ADDR_VAR 0 10
36111: PUSH
36112: LD_VAR 0 10
36116: PPUSH
36117: LD_VAR 0 8
36121: PPUSH
36122: LD_VAR 0 1
36126: PUSH
36127: LD_VAR 0 7
36131: ARRAY
36132: PPUSH
36133: CALL_OW 1
36137: ST_TO_ADDR
// end ;
36138: GO 36051
36140: POP
36141: POP
// array := tmp ;
36142: LD_ADDR_VAR 0 1
36146: PUSH
36147: LD_VAR 0 10
36151: ST_TO_ADDR
// end ;
36152: GO 36033
36154: POP
36155: POP
// result := array ;
36156: LD_ADDR_VAR 0 5
36160: PUSH
36161: LD_VAR 0 1
36165: ST_TO_ADDR
// end ;
36166: LD_VAR 0 5
36170: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36171: LD_INT 0
36173: PPUSH
36174: PPUSH
// result := 0 ;
36175: LD_ADDR_VAR 0 3
36179: PUSH
36180: LD_INT 0
36182: ST_TO_ADDR
// if not array or not value in array then
36183: LD_VAR 0 1
36187: NOT
36188: PUSH
36189: LD_VAR 0 2
36193: PUSH
36194: LD_VAR 0 1
36198: IN
36199: NOT
36200: OR
36201: IFFALSE 36205
// exit ;
36203: GO 36259
// for i = 1 to array do
36205: LD_ADDR_VAR 0 4
36209: PUSH
36210: DOUBLE
36211: LD_INT 1
36213: DEC
36214: ST_TO_ADDR
36215: LD_VAR 0 1
36219: PUSH
36220: FOR_TO
36221: IFFALSE 36257
// if value = array [ i ] then
36223: LD_VAR 0 2
36227: PUSH
36228: LD_VAR 0 1
36232: PUSH
36233: LD_VAR 0 4
36237: ARRAY
36238: EQUAL
36239: IFFALSE 36255
// begin result := i ;
36241: LD_ADDR_VAR 0 3
36245: PUSH
36246: LD_VAR 0 4
36250: ST_TO_ADDR
// exit ;
36251: POP
36252: POP
36253: GO 36259
// end ;
36255: GO 36220
36257: POP
36258: POP
// end ;
36259: LD_VAR 0 3
36263: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36264: LD_INT 0
36266: PPUSH
// vc_chassis := chassis ;
36267: LD_ADDR_OWVAR 37
36271: PUSH
36272: LD_VAR 0 1
36276: ST_TO_ADDR
// vc_engine := engine ;
36277: LD_ADDR_OWVAR 39
36281: PUSH
36282: LD_VAR 0 2
36286: ST_TO_ADDR
// vc_control := control ;
36287: LD_ADDR_OWVAR 38
36291: PUSH
36292: LD_VAR 0 3
36296: ST_TO_ADDR
// vc_weapon := weapon ;
36297: LD_ADDR_OWVAR 40
36301: PUSH
36302: LD_VAR 0 4
36306: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36307: LD_ADDR_OWVAR 41
36311: PUSH
36312: LD_VAR 0 5
36316: ST_TO_ADDR
// end ;
36317: LD_VAR 0 6
36321: RET
// export function WantPlant ( unit ) ; var task ; begin
36322: LD_INT 0
36324: PPUSH
36325: PPUSH
// result := false ;
36326: LD_ADDR_VAR 0 2
36330: PUSH
36331: LD_INT 0
36333: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36334: LD_ADDR_VAR 0 3
36338: PUSH
36339: LD_VAR 0 1
36343: PPUSH
36344: CALL_OW 437
36348: ST_TO_ADDR
// if task then
36349: LD_VAR 0 3
36353: IFFALSE 36381
// if task [ 1 ] [ 1 ] = p then
36355: LD_VAR 0 3
36359: PUSH
36360: LD_INT 1
36362: ARRAY
36363: PUSH
36364: LD_INT 1
36366: ARRAY
36367: PUSH
36368: LD_STRING p
36370: EQUAL
36371: IFFALSE 36381
// result := true ;
36373: LD_ADDR_VAR 0 2
36377: PUSH
36378: LD_INT 1
36380: ST_TO_ADDR
// end ;
36381: LD_VAR 0 2
36385: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36386: LD_INT 0
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
// if pos < 1 then
36392: LD_VAR 0 2
36396: PUSH
36397: LD_INT 1
36399: LESS
36400: IFFALSE 36404
// exit ;
36402: GO 36707
// if pos = 1 then
36404: LD_VAR 0 2
36408: PUSH
36409: LD_INT 1
36411: EQUAL
36412: IFFALSE 36445
// result := Replace ( arr , pos [ 1 ] , value ) else
36414: LD_ADDR_VAR 0 4
36418: PUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: LD_VAR 0 2
36428: PUSH
36429: LD_INT 1
36431: ARRAY
36432: PPUSH
36433: LD_VAR 0 3
36437: PPUSH
36438: CALL_OW 1
36442: ST_TO_ADDR
36443: GO 36707
// begin tmp := arr ;
36445: LD_ADDR_VAR 0 6
36449: PUSH
36450: LD_VAR 0 1
36454: ST_TO_ADDR
// s_arr := [ tmp ] ;
36455: LD_ADDR_VAR 0 7
36459: PUSH
36460: LD_VAR 0 6
36464: PUSH
36465: EMPTY
36466: LIST
36467: ST_TO_ADDR
// for i = 1 to pos - 1 do
36468: LD_ADDR_VAR 0 5
36472: PUSH
36473: DOUBLE
36474: LD_INT 1
36476: DEC
36477: ST_TO_ADDR
36478: LD_VAR 0 2
36482: PUSH
36483: LD_INT 1
36485: MINUS
36486: PUSH
36487: FOR_TO
36488: IFFALSE 36533
// begin tmp := tmp [ pos [ i ] ] ;
36490: LD_ADDR_VAR 0 6
36494: PUSH
36495: LD_VAR 0 6
36499: PUSH
36500: LD_VAR 0 2
36504: PUSH
36505: LD_VAR 0 5
36509: ARRAY
36510: ARRAY
36511: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36512: LD_ADDR_VAR 0 7
36516: PUSH
36517: LD_VAR 0 7
36521: PUSH
36522: LD_VAR 0 6
36526: PUSH
36527: EMPTY
36528: LIST
36529: ADD
36530: ST_TO_ADDR
// end ;
36531: GO 36487
36533: POP
36534: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36535: LD_ADDR_VAR 0 6
36539: PUSH
36540: LD_VAR 0 6
36544: PPUSH
36545: LD_VAR 0 2
36549: PUSH
36550: LD_VAR 0 2
36554: ARRAY
36555: PPUSH
36556: LD_VAR 0 3
36560: PPUSH
36561: CALL_OW 1
36565: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36566: LD_ADDR_VAR 0 7
36570: PUSH
36571: LD_VAR 0 7
36575: PPUSH
36576: LD_VAR 0 7
36580: PPUSH
36581: LD_VAR 0 6
36585: PPUSH
36586: CALL_OW 1
36590: ST_TO_ADDR
// for i = s_arr downto 2 do
36591: LD_ADDR_VAR 0 5
36595: PUSH
36596: DOUBLE
36597: LD_VAR 0 7
36601: INC
36602: ST_TO_ADDR
36603: LD_INT 2
36605: PUSH
36606: FOR_DOWNTO
36607: IFFALSE 36691
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36609: LD_ADDR_VAR 0 6
36613: PUSH
36614: LD_VAR 0 7
36618: PUSH
36619: LD_VAR 0 5
36623: PUSH
36624: LD_INT 1
36626: MINUS
36627: ARRAY
36628: PPUSH
36629: LD_VAR 0 2
36633: PUSH
36634: LD_VAR 0 5
36638: PUSH
36639: LD_INT 1
36641: MINUS
36642: ARRAY
36643: PPUSH
36644: LD_VAR 0 7
36648: PUSH
36649: LD_VAR 0 5
36653: ARRAY
36654: PPUSH
36655: CALL_OW 1
36659: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36660: LD_ADDR_VAR 0 7
36664: PUSH
36665: LD_VAR 0 7
36669: PPUSH
36670: LD_VAR 0 5
36674: PUSH
36675: LD_INT 1
36677: MINUS
36678: PPUSH
36679: LD_VAR 0 6
36683: PPUSH
36684: CALL_OW 1
36688: ST_TO_ADDR
// end ;
36689: GO 36606
36691: POP
36692: POP
// result := s_arr [ 1 ] ;
36693: LD_ADDR_VAR 0 4
36697: PUSH
36698: LD_VAR 0 7
36702: PUSH
36703: LD_INT 1
36705: ARRAY
36706: ST_TO_ADDR
// end ; end ;
36707: LD_VAR 0 4
36711: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36712: LD_INT 0
36714: PPUSH
36715: PPUSH
// if not list then
36716: LD_VAR 0 1
36720: NOT
36721: IFFALSE 36725
// exit ;
36723: GO 36816
// i := list [ pos1 ] ;
36725: LD_ADDR_VAR 0 5
36729: PUSH
36730: LD_VAR 0 1
36734: PUSH
36735: LD_VAR 0 2
36739: ARRAY
36740: ST_TO_ADDR
// if not i then
36741: LD_VAR 0 5
36745: NOT
36746: IFFALSE 36750
// exit ;
36748: GO 36816
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36750: LD_ADDR_VAR 0 1
36754: PUSH
36755: LD_VAR 0 1
36759: PPUSH
36760: LD_VAR 0 2
36764: PPUSH
36765: LD_VAR 0 1
36769: PUSH
36770: LD_VAR 0 3
36774: ARRAY
36775: PPUSH
36776: CALL_OW 1
36780: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36781: LD_ADDR_VAR 0 1
36785: PUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: LD_VAR 0 3
36795: PPUSH
36796: LD_VAR 0 5
36800: PPUSH
36801: CALL_OW 1
36805: ST_TO_ADDR
// result := list ;
36806: LD_ADDR_VAR 0 4
36810: PUSH
36811: LD_VAR 0 1
36815: ST_TO_ADDR
// end ;
36816: LD_VAR 0 4
36820: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36821: LD_INT 0
36823: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36824: LD_ADDR_VAR 0 5
36828: PUSH
36829: LD_VAR 0 1
36833: PPUSH
36834: CALL_OW 250
36838: PPUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 251
36848: PPUSH
36849: LD_VAR 0 2
36853: PPUSH
36854: LD_VAR 0 3
36858: PPUSH
36859: LD_VAR 0 4
36863: PPUSH
36864: CALL 37242 0 5
36868: ST_TO_ADDR
// end ;
36869: LD_VAR 0 5
36873: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36874: LD_INT 0
36876: PPUSH
36877: PPUSH
36878: PPUSH
36879: PPUSH
// if not list or not unit then
36880: LD_VAR 0 2
36884: NOT
36885: PUSH
36886: LD_VAR 0 1
36890: NOT
36891: OR
36892: IFFALSE 36896
// exit ;
36894: GO 37237
// result := [ ] ;
36896: LD_ADDR_VAR 0 5
36900: PUSH
36901: EMPTY
36902: ST_TO_ADDR
// for i in list do
36903: LD_ADDR_VAR 0 6
36907: PUSH
36908: LD_VAR 0 2
36912: PUSH
36913: FOR_IN
36914: IFFALSE 37132
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36916: LD_ADDR_VAR 0 8
36920: PUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: LD_VAR 0 6
36930: PUSH
36931: LD_INT 1
36933: ARRAY
36934: PPUSH
36935: LD_VAR 0 6
36939: PUSH
36940: LD_INT 2
36942: ARRAY
36943: PPUSH
36944: CALL_OW 297
36948: ST_TO_ADDR
// if not Count ( result ) then
36949: LD_VAR 0 5
36953: PPUSH
36954: CALL 33526 0 1
36958: NOT
36959: IFFALSE 36992
// begin result := Join ( result , [ i , tmp ] ) ;
36961: LD_ADDR_VAR 0 5
36965: PUSH
36966: LD_VAR 0 5
36970: PPUSH
36971: LD_VAR 0 6
36975: PUSH
36976: LD_VAR 0 8
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PPUSH
36985: CALL 69115 0 2
36989: ST_TO_ADDR
// continue ;
36990: GO 36913
// end ; if result [ result ] [ 2 ] <= tmp then
36992: LD_VAR 0 5
36996: PUSH
36997: LD_VAR 0 5
37001: ARRAY
37002: PUSH
37003: LD_INT 2
37005: ARRAY
37006: PUSH
37007: LD_VAR 0 8
37011: LESSEQUAL
37012: IFFALSE 37045
// result := Join ( result , [ i , tmp ] ) else
37014: LD_ADDR_VAR 0 5
37018: PUSH
37019: LD_VAR 0 5
37023: PPUSH
37024: LD_VAR 0 6
37028: PUSH
37029: LD_VAR 0 8
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PPUSH
37038: CALL 69115 0 2
37042: ST_TO_ADDR
37043: GO 37130
// begin for j := 1 to Count ( result ) do
37045: LD_ADDR_VAR 0 7
37049: PUSH
37050: DOUBLE
37051: LD_INT 1
37053: DEC
37054: ST_TO_ADDR
37055: LD_VAR 0 5
37059: PPUSH
37060: CALL 33526 0 1
37064: PUSH
37065: FOR_TO
37066: IFFALSE 37128
// begin if tmp < result [ j ] [ 2 ] then
37068: LD_VAR 0 8
37072: PUSH
37073: LD_VAR 0 5
37077: PUSH
37078: LD_VAR 0 7
37082: ARRAY
37083: PUSH
37084: LD_INT 2
37086: ARRAY
37087: LESS
37088: IFFALSE 37126
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37090: LD_ADDR_VAR 0 5
37094: PUSH
37095: LD_VAR 0 5
37099: PPUSH
37100: LD_VAR 0 7
37104: PPUSH
37105: LD_VAR 0 6
37109: PUSH
37110: LD_VAR 0 8
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PPUSH
37119: CALL_OW 2
37123: ST_TO_ADDR
// break ;
37124: GO 37128
// end ; end ;
37126: GO 37065
37128: POP
37129: POP
// end ; end ;
37130: GO 36913
37132: POP
37133: POP
// if result and not asc then
37134: LD_VAR 0 5
37138: PUSH
37139: LD_VAR 0 3
37143: NOT
37144: AND
37145: IFFALSE 37162
// result := ReverseArray ( result ) ;
37147: LD_ADDR_VAR 0 5
37151: PUSH
37152: LD_VAR 0 5
37156: PPUSH
37157: CALL 64402 0 1
37161: ST_TO_ADDR
// tmp := [ ] ;
37162: LD_ADDR_VAR 0 8
37166: PUSH
37167: EMPTY
37168: ST_TO_ADDR
// if mode then
37169: LD_VAR 0 4
37173: IFFALSE 37237
// begin for i := 1 to result do
37175: LD_ADDR_VAR 0 6
37179: PUSH
37180: DOUBLE
37181: LD_INT 1
37183: DEC
37184: ST_TO_ADDR
37185: LD_VAR 0 5
37189: PUSH
37190: FOR_TO
37191: IFFALSE 37225
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37193: LD_ADDR_VAR 0 8
37197: PUSH
37198: LD_VAR 0 8
37202: PPUSH
37203: LD_VAR 0 5
37207: PUSH
37208: LD_VAR 0 6
37212: ARRAY
37213: PUSH
37214: LD_INT 1
37216: ARRAY
37217: PPUSH
37218: CALL 69115 0 2
37222: ST_TO_ADDR
37223: GO 37190
37225: POP
37226: POP
// result := tmp ;
37227: LD_ADDR_VAR 0 5
37231: PUSH
37232: LD_VAR 0 8
37236: ST_TO_ADDR
// end ; end ;
37237: LD_VAR 0 5
37241: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37242: LD_INT 0
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
// if not list then
37248: LD_VAR 0 3
37252: NOT
37253: IFFALSE 37257
// exit ;
37255: GO 37645
// result := [ ] ;
37257: LD_ADDR_VAR 0 6
37261: PUSH
37262: EMPTY
37263: ST_TO_ADDR
// for i in list do
37264: LD_ADDR_VAR 0 7
37268: PUSH
37269: LD_VAR 0 3
37273: PUSH
37274: FOR_IN
37275: IFFALSE 37477
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37277: LD_ADDR_VAR 0 9
37281: PUSH
37282: LD_VAR 0 7
37286: PPUSH
37287: LD_VAR 0 1
37291: PPUSH
37292: LD_VAR 0 2
37296: PPUSH
37297: CALL_OW 297
37301: ST_TO_ADDR
// if not result then
37302: LD_VAR 0 6
37306: NOT
37307: IFFALSE 37333
// result := [ [ i , tmp ] ] else
37309: LD_ADDR_VAR 0 6
37313: PUSH
37314: LD_VAR 0 7
37318: PUSH
37319: LD_VAR 0 9
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: ST_TO_ADDR
37331: GO 37475
// begin if result [ result ] [ 2 ] < tmp then
37333: LD_VAR 0 6
37337: PUSH
37338: LD_VAR 0 6
37342: ARRAY
37343: PUSH
37344: LD_INT 2
37346: ARRAY
37347: PUSH
37348: LD_VAR 0 9
37352: LESS
37353: IFFALSE 37395
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37355: LD_ADDR_VAR 0 6
37359: PUSH
37360: LD_VAR 0 6
37364: PPUSH
37365: LD_VAR 0 6
37369: PUSH
37370: LD_INT 1
37372: PLUS
37373: PPUSH
37374: LD_VAR 0 7
37378: PUSH
37379: LD_VAR 0 9
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PPUSH
37388: CALL_OW 2
37392: ST_TO_ADDR
37393: GO 37475
// for j = 1 to result do
37395: LD_ADDR_VAR 0 8
37399: PUSH
37400: DOUBLE
37401: LD_INT 1
37403: DEC
37404: ST_TO_ADDR
37405: LD_VAR 0 6
37409: PUSH
37410: FOR_TO
37411: IFFALSE 37473
// begin if tmp < result [ j ] [ 2 ] then
37413: LD_VAR 0 9
37417: PUSH
37418: LD_VAR 0 6
37422: PUSH
37423: LD_VAR 0 8
37427: ARRAY
37428: PUSH
37429: LD_INT 2
37431: ARRAY
37432: LESS
37433: IFFALSE 37471
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37435: LD_ADDR_VAR 0 6
37439: PUSH
37440: LD_VAR 0 6
37444: PPUSH
37445: LD_VAR 0 8
37449: PPUSH
37450: LD_VAR 0 7
37454: PUSH
37455: LD_VAR 0 9
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PPUSH
37464: CALL_OW 2
37468: ST_TO_ADDR
// break ;
37469: GO 37473
// end ; end ;
37471: GO 37410
37473: POP
37474: POP
// end ; end ;
37475: GO 37274
37477: POP
37478: POP
// if result and not asc then
37479: LD_VAR 0 6
37483: PUSH
37484: LD_VAR 0 4
37488: NOT
37489: AND
37490: IFFALSE 37565
// begin tmp := result ;
37492: LD_ADDR_VAR 0 9
37496: PUSH
37497: LD_VAR 0 6
37501: ST_TO_ADDR
// for i = tmp downto 1 do
37502: LD_ADDR_VAR 0 7
37506: PUSH
37507: DOUBLE
37508: LD_VAR 0 9
37512: INC
37513: ST_TO_ADDR
37514: LD_INT 1
37516: PUSH
37517: FOR_DOWNTO
37518: IFFALSE 37563
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37520: LD_ADDR_VAR 0 6
37524: PUSH
37525: LD_VAR 0 6
37529: PPUSH
37530: LD_VAR 0 9
37534: PUSH
37535: LD_VAR 0 7
37539: MINUS
37540: PUSH
37541: LD_INT 1
37543: PLUS
37544: PPUSH
37545: LD_VAR 0 9
37549: PUSH
37550: LD_VAR 0 7
37554: ARRAY
37555: PPUSH
37556: CALL_OW 1
37560: ST_TO_ADDR
37561: GO 37517
37563: POP
37564: POP
// end ; tmp := [ ] ;
37565: LD_ADDR_VAR 0 9
37569: PUSH
37570: EMPTY
37571: ST_TO_ADDR
// if mode then
37572: LD_VAR 0 5
37576: IFFALSE 37645
// begin for i = 1 to result do
37578: LD_ADDR_VAR 0 7
37582: PUSH
37583: DOUBLE
37584: LD_INT 1
37586: DEC
37587: ST_TO_ADDR
37588: LD_VAR 0 6
37592: PUSH
37593: FOR_TO
37594: IFFALSE 37633
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37596: LD_ADDR_VAR 0 9
37600: PUSH
37601: LD_VAR 0 9
37605: PPUSH
37606: LD_VAR 0 7
37610: PPUSH
37611: LD_VAR 0 6
37615: PUSH
37616: LD_VAR 0 7
37620: ARRAY
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: PPUSH
37626: CALL_OW 1
37630: ST_TO_ADDR
37631: GO 37593
37633: POP
37634: POP
// result := tmp ;
37635: LD_ADDR_VAR 0 6
37639: PUSH
37640: LD_VAR 0 9
37644: ST_TO_ADDR
// end ; end ;
37645: LD_VAR 0 6
37649: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37650: LD_INT 0
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
37657: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37658: LD_ADDR_VAR 0 5
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: ST_TO_ADDR
// if not x or not y then
37680: LD_VAR 0 2
37684: NOT
37685: PUSH
37686: LD_VAR 0 3
37690: NOT
37691: OR
37692: IFFALSE 37696
// exit ;
37694: GO 39346
// if not range then
37696: LD_VAR 0 4
37700: NOT
37701: IFFALSE 37711
// range := 10 ;
37703: LD_ADDR_VAR 0 4
37707: PUSH
37708: LD_INT 10
37710: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37711: LD_ADDR_VAR 0 8
37715: PUSH
37716: LD_INT 81
37718: PUSH
37719: LD_VAR 0 1
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 92
37730: PUSH
37731: LD_VAR 0 2
37735: PUSH
37736: LD_VAR 0 3
37740: PUSH
37741: LD_VAR 0 4
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 3
37754: PUSH
37755: LD_INT 21
37757: PUSH
37758: LD_INT 3
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: PPUSH
37774: CALL_OW 69
37778: ST_TO_ADDR
// if not tmp then
37779: LD_VAR 0 8
37783: NOT
37784: IFFALSE 37788
// exit ;
37786: GO 39346
// for i in tmp do
37788: LD_ADDR_VAR 0 6
37792: PUSH
37793: LD_VAR 0 8
37797: PUSH
37798: FOR_IN
37799: IFFALSE 39321
// begin points := [ 0 , 0 , 0 ] ;
37801: LD_ADDR_VAR 0 9
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// bpoints := 1 ;
37820: LD_ADDR_VAR 0 10
37824: PUSH
37825: LD_INT 1
37827: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37828: LD_VAR 0 6
37832: PPUSH
37833: CALL_OW 247
37837: PUSH
37838: LD_INT 1
37840: DOUBLE
37841: EQUAL
37842: IFTRUE 37846
37844: GO 38424
37846: POP
// begin if GetClass ( i ) = 1 then
37847: LD_VAR 0 6
37851: PPUSH
37852: CALL_OW 257
37856: PUSH
37857: LD_INT 1
37859: EQUAL
37860: IFFALSE 37881
// points := [ 10 , 5 , 3 ] ;
37862: LD_ADDR_VAR 0 9
37866: PUSH
37867: LD_INT 10
37869: PUSH
37870: LD_INT 5
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37881: LD_VAR 0 6
37885: PPUSH
37886: CALL_OW 257
37890: PUSH
37891: LD_INT 2
37893: PUSH
37894: LD_INT 3
37896: PUSH
37897: LD_INT 4
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: LIST
37904: IN
37905: IFFALSE 37926
// points := [ 3 , 2 , 1 ] ;
37907: LD_ADDR_VAR 0 9
37911: PUSH
37912: LD_INT 3
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37926: LD_VAR 0 6
37930: PPUSH
37931: CALL_OW 257
37935: PUSH
37936: LD_INT 5
37938: EQUAL
37939: IFFALSE 37960
// points := [ 130 , 5 , 2 ] ;
37941: LD_ADDR_VAR 0 9
37945: PUSH
37946: LD_INT 130
37948: PUSH
37949: LD_INT 5
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37960: LD_VAR 0 6
37964: PPUSH
37965: CALL_OW 257
37969: PUSH
37970: LD_INT 8
37972: EQUAL
37973: IFFALSE 37994
// points := [ 35 , 35 , 30 ] ;
37975: LD_ADDR_VAR 0 9
37979: PUSH
37980: LD_INT 35
37982: PUSH
37983: LD_INT 35
37985: PUSH
37986: LD_INT 30
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37994: LD_VAR 0 6
37998: PPUSH
37999: CALL_OW 257
38003: PUSH
38004: LD_INT 9
38006: EQUAL
38007: IFFALSE 38028
// points := [ 20 , 55 , 40 ] ;
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_INT 20
38016: PUSH
38017: LD_INT 55
38019: PUSH
38020: LD_INT 40
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38028: LD_VAR 0 6
38032: PPUSH
38033: CALL_OW 257
38037: PUSH
38038: LD_INT 12
38040: PUSH
38041: LD_INT 16
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: IN
38048: IFFALSE 38069
// points := [ 5 , 3 , 2 ] ;
38050: LD_ADDR_VAR 0 9
38054: PUSH
38055: LD_INT 5
38057: PUSH
38058: LD_INT 3
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38069: LD_VAR 0 6
38073: PPUSH
38074: CALL_OW 257
38078: PUSH
38079: LD_INT 17
38081: EQUAL
38082: IFFALSE 38103
// points := [ 100 , 50 , 75 ] ;
38084: LD_ADDR_VAR 0 9
38088: PUSH
38089: LD_INT 100
38091: PUSH
38092: LD_INT 50
38094: PUSH
38095: LD_INT 75
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38103: LD_VAR 0 6
38107: PPUSH
38108: CALL_OW 257
38112: PUSH
38113: LD_INT 15
38115: EQUAL
38116: IFFALSE 38137
// points := [ 10 , 5 , 3 ] ;
38118: LD_ADDR_VAR 0 9
38122: PUSH
38123: LD_INT 10
38125: PUSH
38126: LD_INT 5
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: LIST
38136: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38137: LD_VAR 0 6
38141: PPUSH
38142: CALL_OW 257
38146: PUSH
38147: LD_INT 14
38149: EQUAL
38150: IFFALSE 38171
// points := [ 10 , 0 , 0 ] ;
38152: LD_ADDR_VAR 0 9
38156: PUSH
38157: LD_INT 10
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38171: LD_VAR 0 6
38175: PPUSH
38176: CALL_OW 257
38180: PUSH
38181: LD_INT 11
38183: EQUAL
38184: IFFALSE 38205
// points := [ 30 , 10 , 5 ] ;
38186: LD_ADDR_VAR 0 9
38190: PUSH
38191: LD_INT 30
38193: PUSH
38194: LD_INT 10
38196: PUSH
38197: LD_INT 5
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38205: LD_VAR 0 1
38209: PPUSH
38210: LD_INT 5
38212: PPUSH
38213: CALL_OW 321
38217: PUSH
38218: LD_INT 2
38220: EQUAL
38221: IFFALSE 38238
// bpoints := bpoints * 1.8 ;
38223: LD_ADDR_VAR 0 10
38227: PUSH
38228: LD_VAR 0 10
38232: PUSH
38233: LD_REAL  1.80000000000000E+0000
38236: MUL
38237: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38238: LD_VAR 0 6
38242: PPUSH
38243: CALL_OW 257
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: LD_INT 3
38256: PUSH
38257: LD_INT 4
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: IN
38266: PUSH
38267: LD_VAR 0 1
38271: PPUSH
38272: LD_INT 51
38274: PPUSH
38275: CALL_OW 321
38279: PUSH
38280: LD_INT 2
38282: EQUAL
38283: AND
38284: IFFALSE 38301
// bpoints := bpoints * 1.2 ;
38286: LD_ADDR_VAR 0 10
38290: PUSH
38291: LD_VAR 0 10
38295: PUSH
38296: LD_REAL  1.20000000000000E+0000
38299: MUL
38300: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38301: LD_VAR 0 6
38305: PPUSH
38306: CALL_OW 257
38310: PUSH
38311: LD_INT 5
38313: PUSH
38314: LD_INT 7
38316: PUSH
38317: LD_INT 9
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: IN
38325: PUSH
38326: LD_VAR 0 1
38330: PPUSH
38331: LD_INT 52
38333: PPUSH
38334: CALL_OW 321
38338: PUSH
38339: LD_INT 2
38341: EQUAL
38342: AND
38343: IFFALSE 38360
// bpoints := bpoints * 1.5 ;
38345: LD_ADDR_VAR 0 10
38349: PUSH
38350: LD_VAR 0 10
38354: PUSH
38355: LD_REAL  1.50000000000000E+0000
38358: MUL
38359: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38360: LD_VAR 0 1
38364: PPUSH
38365: LD_INT 66
38367: PPUSH
38368: CALL_OW 321
38372: PUSH
38373: LD_INT 2
38375: EQUAL
38376: IFFALSE 38393
// bpoints := bpoints * 1.1 ;
38378: LD_ADDR_VAR 0 10
38382: PUSH
38383: LD_VAR 0 10
38387: PUSH
38388: LD_REAL  1.10000000000000E+0000
38391: MUL
38392: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38393: LD_ADDR_VAR 0 10
38397: PUSH
38398: LD_VAR 0 10
38402: PUSH
38403: LD_VAR 0 6
38407: PPUSH
38408: LD_INT 1
38410: PPUSH
38411: CALL_OW 259
38415: PUSH
38416: LD_REAL  1.15000000000000E+0000
38419: MUL
38420: MUL
38421: ST_TO_ADDR
// end ; unit_vehicle :
38422: GO 39250
38424: LD_INT 2
38426: DOUBLE
38427: EQUAL
38428: IFTRUE 38432
38430: GO 39238
38432: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38433: LD_VAR 0 6
38437: PPUSH
38438: CALL_OW 264
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: LD_INT 42
38448: PUSH
38449: LD_INT 24
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: IN
38457: IFFALSE 38478
// points := [ 25 , 5 , 3 ] ;
38459: LD_ADDR_VAR 0 9
38463: PUSH
38464: LD_INT 25
38466: PUSH
38467: LD_INT 5
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38478: LD_VAR 0 6
38482: PPUSH
38483: CALL_OW 264
38487: PUSH
38488: LD_INT 4
38490: PUSH
38491: LD_INT 43
38493: PUSH
38494: LD_INT 25
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: IN
38502: IFFALSE 38523
// points := [ 40 , 15 , 5 ] ;
38504: LD_ADDR_VAR 0 9
38508: PUSH
38509: LD_INT 40
38511: PUSH
38512: LD_INT 15
38514: PUSH
38515: LD_INT 5
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38523: LD_VAR 0 6
38527: PPUSH
38528: CALL_OW 264
38532: PUSH
38533: LD_INT 3
38535: PUSH
38536: LD_INT 23
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: IN
38543: IFFALSE 38564
// points := [ 7 , 25 , 8 ] ;
38545: LD_ADDR_VAR 0 9
38549: PUSH
38550: LD_INT 7
38552: PUSH
38553: LD_INT 25
38555: PUSH
38556: LD_INT 8
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38564: LD_VAR 0 6
38568: PPUSH
38569: CALL_OW 264
38573: PUSH
38574: LD_INT 5
38576: PUSH
38577: LD_INT 27
38579: PUSH
38580: LD_INT 44
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: IN
38588: IFFALSE 38609
// points := [ 14 , 50 , 16 ] ;
38590: LD_ADDR_VAR 0 9
38594: PUSH
38595: LD_INT 14
38597: PUSH
38598: LD_INT 50
38600: PUSH
38601: LD_INT 16
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38609: LD_VAR 0 6
38613: PPUSH
38614: CALL_OW 264
38618: PUSH
38619: LD_INT 6
38621: PUSH
38622: LD_INT 46
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: IN
38629: IFFALSE 38650
// points := [ 32 , 120 , 70 ] ;
38631: LD_ADDR_VAR 0 9
38635: PUSH
38636: LD_INT 32
38638: PUSH
38639: LD_INT 120
38641: PUSH
38642: LD_INT 70
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38650: LD_VAR 0 6
38654: PPUSH
38655: CALL_OW 264
38659: PUSH
38660: LD_INT 7
38662: PUSH
38663: LD_INT 28
38665: PUSH
38666: LD_INT 45
38668: PUSH
38669: LD_INT 92
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: IN
38678: IFFALSE 38699
// points := [ 35 , 20 , 45 ] ;
38680: LD_ADDR_VAR 0 9
38684: PUSH
38685: LD_INT 35
38687: PUSH
38688: LD_INT 20
38690: PUSH
38691: LD_INT 45
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38699: LD_VAR 0 6
38703: PPUSH
38704: CALL_OW 264
38708: PUSH
38709: LD_INT 47
38711: PUSH
38712: EMPTY
38713: LIST
38714: IN
38715: IFFALSE 38736
// points := [ 67 , 45 , 75 ] ;
38717: LD_ADDR_VAR 0 9
38721: PUSH
38722: LD_INT 67
38724: PUSH
38725: LD_INT 45
38727: PUSH
38728: LD_INT 75
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38736: LD_VAR 0 6
38740: PPUSH
38741: CALL_OW 264
38745: PUSH
38746: LD_INT 26
38748: PUSH
38749: EMPTY
38750: LIST
38751: IN
38752: IFFALSE 38773
// points := [ 120 , 30 , 80 ] ;
38754: LD_ADDR_VAR 0 9
38758: PUSH
38759: LD_INT 120
38761: PUSH
38762: LD_INT 30
38764: PUSH
38765: LD_INT 80
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38773: LD_VAR 0 6
38777: PPUSH
38778: CALL_OW 264
38782: PUSH
38783: LD_INT 22
38785: PUSH
38786: EMPTY
38787: LIST
38788: IN
38789: IFFALSE 38810
// points := [ 40 , 1 , 1 ] ;
38791: LD_ADDR_VAR 0 9
38795: PUSH
38796: LD_INT 40
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38810: LD_VAR 0 6
38814: PPUSH
38815: CALL_OW 264
38819: PUSH
38820: LD_INT 29
38822: PUSH
38823: EMPTY
38824: LIST
38825: IN
38826: IFFALSE 38847
// points := [ 70 , 200 , 400 ] ;
38828: LD_ADDR_VAR 0 9
38832: PUSH
38833: LD_INT 70
38835: PUSH
38836: LD_INT 200
38838: PUSH
38839: LD_INT 400
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38847: LD_VAR 0 6
38851: PPUSH
38852: CALL_OW 264
38856: PUSH
38857: LD_INT 14
38859: PUSH
38860: LD_INT 53
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: IN
38867: IFFALSE 38888
// points := [ 40 , 10 , 20 ] ;
38869: LD_ADDR_VAR 0 9
38873: PUSH
38874: LD_INT 40
38876: PUSH
38877: LD_INT 10
38879: PUSH
38880: LD_INT 20
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38888: LD_VAR 0 6
38892: PPUSH
38893: CALL_OW 264
38897: PUSH
38898: LD_INT 9
38900: PUSH
38901: EMPTY
38902: LIST
38903: IN
38904: IFFALSE 38925
// points := [ 5 , 70 , 20 ] ;
38906: LD_ADDR_VAR 0 9
38910: PUSH
38911: LD_INT 5
38913: PUSH
38914: LD_INT 70
38916: PUSH
38917: LD_INT 20
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38925: LD_VAR 0 6
38929: PPUSH
38930: CALL_OW 264
38934: PUSH
38935: LD_INT 10
38937: PUSH
38938: EMPTY
38939: LIST
38940: IN
38941: IFFALSE 38962
// points := [ 35 , 110 , 70 ] ;
38943: LD_ADDR_VAR 0 9
38947: PUSH
38948: LD_INT 35
38950: PUSH
38951: LD_INT 110
38953: PUSH
38954: LD_INT 70
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38962: LD_VAR 0 6
38966: PPUSH
38967: CALL_OW 265
38971: PUSH
38972: LD_INT 25
38974: EQUAL
38975: IFFALSE 38996
// points := [ 80 , 65 , 100 ] ;
38977: LD_ADDR_VAR 0 9
38981: PUSH
38982: LD_INT 80
38984: PUSH
38985: LD_INT 65
38987: PUSH
38988: LD_INT 100
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38996: LD_VAR 0 6
39000: PPUSH
39001: CALL_OW 263
39005: PUSH
39006: LD_INT 1
39008: EQUAL
39009: IFFALSE 39044
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39011: LD_ADDR_VAR 0 10
39015: PUSH
39016: LD_VAR 0 10
39020: PUSH
39021: LD_VAR 0 6
39025: PPUSH
39026: CALL_OW 311
39030: PPUSH
39031: LD_INT 3
39033: PPUSH
39034: CALL_OW 259
39038: PUSH
39039: LD_INT 4
39041: MUL
39042: MUL
39043: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39044: LD_VAR 0 6
39048: PPUSH
39049: CALL_OW 263
39053: PUSH
39054: LD_INT 2
39056: EQUAL
39057: IFFALSE 39108
// begin j := IsControledBy ( i ) ;
39059: LD_ADDR_VAR 0 7
39063: PUSH
39064: LD_VAR 0 6
39068: PPUSH
39069: CALL_OW 312
39073: ST_TO_ADDR
// if j then
39074: LD_VAR 0 7
39078: IFFALSE 39108
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39080: LD_ADDR_VAR 0 10
39084: PUSH
39085: LD_VAR 0 10
39089: PUSH
39090: LD_VAR 0 7
39094: PPUSH
39095: LD_INT 3
39097: PPUSH
39098: CALL_OW 259
39102: PUSH
39103: LD_INT 3
39105: MUL
39106: MUL
39107: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39108: LD_VAR 0 6
39112: PPUSH
39113: CALL_OW 264
39117: PUSH
39118: LD_INT 5
39120: PUSH
39121: LD_INT 6
39123: PUSH
39124: LD_INT 46
39126: PUSH
39127: LD_INT 44
39129: PUSH
39130: LD_INT 47
39132: PUSH
39133: LD_INT 45
39135: PUSH
39136: LD_INT 28
39138: PUSH
39139: LD_INT 7
39141: PUSH
39142: LD_INT 27
39144: PUSH
39145: LD_INT 29
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: IN
39160: PUSH
39161: LD_VAR 0 1
39165: PPUSH
39166: LD_INT 52
39168: PPUSH
39169: CALL_OW 321
39173: PUSH
39174: LD_INT 2
39176: EQUAL
39177: AND
39178: IFFALSE 39195
// bpoints := bpoints * 1.2 ;
39180: LD_ADDR_VAR 0 10
39184: PUSH
39185: LD_VAR 0 10
39189: PUSH
39190: LD_REAL  1.20000000000000E+0000
39193: MUL
39194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39195: LD_VAR 0 6
39199: PPUSH
39200: CALL_OW 264
39204: PUSH
39205: LD_INT 6
39207: PUSH
39208: LD_INT 46
39210: PUSH
39211: LD_INT 47
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: IN
39219: IFFALSE 39236
// bpoints := bpoints * 1.2 ;
39221: LD_ADDR_VAR 0 10
39225: PUSH
39226: LD_VAR 0 10
39230: PUSH
39231: LD_REAL  1.20000000000000E+0000
39234: MUL
39235: ST_TO_ADDR
// end ; unit_building :
39236: GO 39250
39238: LD_INT 3
39240: DOUBLE
39241: EQUAL
39242: IFTRUE 39246
39244: GO 39249
39246: POP
// ; end ;
39247: GO 39250
39249: POP
// for j = 1 to 3 do
39250: LD_ADDR_VAR 0 7
39254: PUSH
39255: DOUBLE
39256: LD_INT 1
39258: DEC
39259: ST_TO_ADDR
39260: LD_INT 3
39262: PUSH
39263: FOR_TO
39264: IFFALSE 39317
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39266: LD_ADDR_VAR 0 5
39270: PUSH
39271: LD_VAR 0 5
39275: PPUSH
39276: LD_VAR 0 7
39280: PPUSH
39281: LD_VAR 0 5
39285: PUSH
39286: LD_VAR 0 7
39290: ARRAY
39291: PUSH
39292: LD_VAR 0 9
39296: PUSH
39297: LD_VAR 0 7
39301: ARRAY
39302: PUSH
39303: LD_VAR 0 10
39307: MUL
39308: PLUS
39309: PPUSH
39310: CALL_OW 1
39314: ST_TO_ADDR
39315: GO 39263
39317: POP
39318: POP
// end ;
39319: GO 37798
39321: POP
39322: POP
// result := Replace ( result , 4 , tmp ) ;
39323: LD_ADDR_VAR 0 5
39327: PUSH
39328: LD_VAR 0 5
39332: PPUSH
39333: LD_INT 4
39335: PPUSH
39336: LD_VAR 0 8
39340: PPUSH
39341: CALL_OW 1
39345: ST_TO_ADDR
// end ;
39346: LD_VAR 0 5
39350: RET
// export function DangerAtRange ( unit , range ) ; begin
39351: LD_INT 0
39353: PPUSH
// if not unit then
39354: LD_VAR 0 1
39358: NOT
39359: IFFALSE 39363
// exit ;
39361: GO 39408
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39363: LD_ADDR_VAR 0 3
39367: PUSH
39368: LD_VAR 0 1
39372: PPUSH
39373: CALL_OW 255
39377: PPUSH
39378: LD_VAR 0 1
39382: PPUSH
39383: CALL_OW 250
39387: PPUSH
39388: LD_VAR 0 1
39392: PPUSH
39393: CALL_OW 251
39397: PPUSH
39398: LD_VAR 0 2
39402: PPUSH
39403: CALL 37650 0 4
39407: ST_TO_ADDR
// end ;
39408: LD_VAR 0 3
39412: RET
// export function DangerInArea ( side , area ) ; begin
39413: LD_INT 0
39415: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39416: LD_ADDR_VAR 0 3
39420: PUSH
39421: LD_VAR 0 2
39425: PPUSH
39426: LD_INT 81
39428: PUSH
39429: LD_VAR 0 1
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PPUSH
39438: CALL_OW 70
39442: ST_TO_ADDR
// end ;
39443: LD_VAR 0 3
39447: RET
// export function IsExtension ( b ) ; begin
39448: LD_INT 0
39450: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39451: LD_ADDR_VAR 0 2
39455: PUSH
39456: LD_VAR 0 1
39460: PUSH
39461: LD_INT 23
39463: PUSH
39464: LD_INT 20
39466: PUSH
39467: LD_INT 22
39469: PUSH
39470: LD_INT 17
39472: PUSH
39473: LD_INT 24
39475: PUSH
39476: LD_INT 21
39478: PUSH
39479: LD_INT 19
39481: PUSH
39482: LD_INT 16
39484: PUSH
39485: LD_INT 25
39487: PUSH
39488: LD_INT 18
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: IN
39503: ST_TO_ADDR
// end ;
39504: LD_VAR 0 2
39508: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39509: LD_INT 0
39511: PPUSH
39512: PPUSH
39513: PPUSH
// result := [ ] ;
39514: LD_ADDR_VAR 0 4
39518: PUSH
39519: EMPTY
39520: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39521: LD_ADDR_VAR 0 5
39525: PUSH
39526: LD_VAR 0 2
39530: PPUSH
39531: LD_INT 21
39533: PUSH
39534: LD_INT 3
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PPUSH
39541: CALL_OW 70
39545: ST_TO_ADDR
// if not tmp then
39546: LD_VAR 0 5
39550: NOT
39551: IFFALSE 39555
// exit ;
39553: GO 39619
// if checkLink then
39555: LD_VAR 0 3
39559: IFFALSE 39609
// begin for i in tmp do
39561: LD_ADDR_VAR 0 6
39565: PUSH
39566: LD_VAR 0 5
39570: PUSH
39571: FOR_IN
39572: IFFALSE 39607
// if GetBase ( i ) <> base then
39574: LD_VAR 0 6
39578: PPUSH
39579: CALL_OW 274
39583: PUSH
39584: LD_VAR 0 1
39588: NONEQUAL
39589: IFFALSE 39605
// ComLinkToBase ( base , i ) ;
39591: LD_VAR 0 1
39595: PPUSH
39596: LD_VAR 0 6
39600: PPUSH
39601: CALL_OW 169
39605: GO 39571
39607: POP
39608: POP
// end ; result := tmp ;
39609: LD_ADDR_VAR 0 4
39613: PUSH
39614: LD_VAR 0 5
39618: ST_TO_ADDR
// end ;
39619: LD_VAR 0 4
39623: RET
// export function ComComplete ( units , b ) ; var i ; begin
39624: LD_INT 0
39626: PPUSH
39627: PPUSH
// if not units then
39628: LD_VAR 0 1
39632: NOT
39633: IFFALSE 39637
// exit ;
39635: GO 39727
// for i in units do
39637: LD_ADDR_VAR 0 4
39641: PUSH
39642: LD_VAR 0 1
39646: PUSH
39647: FOR_IN
39648: IFFALSE 39725
// if BuildingStatus ( b ) = bs_build then
39650: LD_VAR 0 2
39654: PPUSH
39655: CALL_OW 461
39659: PUSH
39660: LD_INT 1
39662: EQUAL
39663: IFFALSE 39723
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39665: LD_VAR 0 4
39669: PPUSH
39670: LD_STRING h
39672: PUSH
39673: LD_VAR 0 2
39677: PPUSH
39678: CALL_OW 250
39682: PUSH
39683: LD_VAR 0 2
39687: PPUSH
39688: CALL_OW 251
39692: PUSH
39693: LD_VAR 0 2
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: PUSH
39716: EMPTY
39717: LIST
39718: PPUSH
39719: CALL_OW 446
39723: GO 39647
39725: POP
39726: POP
// end ;
39727: LD_VAR 0 3
39731: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39732: LD_INT 0
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
39738: PPUSH
39739: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39740: LD_VAR 0 1
39744: NOT
39745: PUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL_OW 263
39755: PUSH
39756: LD_INT 2
39758: NONEQUAL
39759: OR
39760: IFFALSE 39764
// exit ;
39762: GO 40080
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39764: LD_ADDR_VAR 0 6
39768: PUSH
39769: LD_INT 22
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 255
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: LD_INT 30
39791: PUSH
39792: LD_INT 36
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 34
39801: PUSH
39802: LD_INT 31
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: LIST
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PPUSH
39818: CALL_OW 69
39822: ST_TO_ADDR
// if not tmp then
39823: LD_VAR 0 6
39827: NOT
39828: IFFALSE 39832
// exit ;
39830: GO 40080
// result := [ ] ;
39832: LD_ADDR_VAR 0 2
39836: PUSH
39837: EMPTY
39838: ST_TO_ADDR
// for i in tmp do
39839: LD_ADDR_VAR 0 3
39843: PUSH
39844: LD_VAR 0 6
39848: PUSH
39849: FOR_IN
39850: IFFALSE 39921
// begin t := UnitsInside ( i ) ;
39852: LD_ADDR_VAR 0 4
39856: PUSH
39857: LD_VAR 0 3
39861: PPUSH
39862: CALL_OW 313
39866: ST_TO_ADDR
// if t then
39867: LD_VAR 0 4
39871: IFFALSE 39919
// for j in t do
39873: LD_ADDR_VAR 0 7
39877: PUSH
39878: LD_VAR 0 4
39882: PUSH
39883: FOR_IN
39884: IFFALSE 39917
// result := Replace ( result , result + 1 , j ) ;
39886: LD_ADDR_VAR 0 2
39890: PUSH
39891: LD_VAR 0 2
39895: PPUSH
39896: LD_VAR 0 2
39900: PUSH
39901: LD_INT 1
39903: PLUS
39904: PPUSH
39905: LD_VAR 0 7
39909: PPUSH
39910: CALL_OW 1
39914: ST_TO_ADDR
39915: GO 39883
39917: POP
39918: POP
// end ;
39919: GO 39849
39921: POP
39922: POP
// if not result then
39923: LD_VAR 0 2
39927: NOT
39928: IFFALSE 39932
// exit ;
39930: GO 40080
// mech := result [ 1 ] ;
39932: LD_ADDR_VAR 0 5
39936: PUSH
39937: LD_VAR 0 2
39941: PUSH
39942: LD_INT 1
39944: ARRAY
39945: ST_TO_ADDR
// if result > 1 then
39946: LD_VAR 0 2
39950: PUSH
39951: LD_INT 1
39953: GREATER
39954: IFFALSE 40066
// begin for i = 2 to result do
39956: LD_ADDR_VAR 0 3
39960: PUSH
39961: DOUBLE
39962: LD_INT 2
39964: DEC
39965: ST_TO_ADDR
39966: LD_VAR 0 2
39970: PUSH
39971: FOR_TO
39972: IFFALSE 40064
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39974: LD_ADDR_VAR 0 4
39978: PUSH
39979: LD_VAR 0 2
39983: PUSH
39984: LD_VAR 0 3
39988: ARRAY
39989: PPUSH
39990: LD_INT 3
39992: PPUSH
39993: CALL_OW 259
39997: PUSH
39998: LD_VAR 0 2
40002: PUSH
40003: LD_VAR 0 3
40007: ARRAY
40008: PPUSH
40009: CALL_OW 432
40013: MINUS
40014: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40015: LD_VAR 0 4
40019: PUSH
40020: LD_VAR 0 5
40024: PPUSH
40025: LD_INT 3
40027: PPUSH
40028: CALL_OW 259
40032: PUSH
40033: LD_VAR 0 5
40037: PPUSH
40038: CALL_OW 432
40042: MINUS
40043: GREATEREQUAL
40044: IFFALSE 40062
// mech := result [ i ] ;
40046: LD_ADDR_VAR 0 5
40050: PUSH
40051: LD_VAR 0 2
40055: PUSH
40056: LD_VAR 0 3
40060: ARRAY
40061: ST_TO_ADDR
// end ;
40062: GO 39971
40064: POP
40065: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40066: LD_VAR 0 1
40070: PPUSH
40071: LD_VAR 0 5
40075: PPUSH
40076: CALL_OW 135
// end ;
40080: LD_VAR 0 2
40084: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40085: LD_INT 0
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
// result := [ ] ;
40100: LD_ADDR_VAR 0 7
40104: PUSH
40105: EMPTY
40106: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40107: LD_VAR 0 1
40111: PPUSH
40112: CALL_OW 266
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: IN
40127: NOT
40128: IFFALSE 40132
// exit ;
40130: GO 41766
// if name then
40132: LD_VAR 0 3
40136: IFFALSE 40152
// SetBName ( base_dep , name ) ;
40138: LD_VAR 0 1
40142: PPUSH
40143: LD_VAR 0 3
40147: PPUSH
40148: CALL_OW 500
// base := GetBase ( base_dep ) ;
40152: LD_ADDR_VAR 0 15
40156: PUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 274
40166: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40167: LD_ADDR_VAR 0 16
40171: PUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: CALL_OW 255
40181: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40182: LD_ADDR_VAR 0 17
40186: PUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 248
40196: ST_TO_ADDR
// if sources then
40197: LD_VAR 0 5
40201: IFFALSE 40248
// for i = 1 to 3 do
40203: LD_ADDR_VAR 0 8
40207: PUSH
40208: DOUBLE
40209: LD_INT 1
40211: DEC
40212: ST_TO_ADDR
40213: LD_INT 3
40215: PUSH
40216: FOR_TO
40217: IFFALSE 40246
// AddResourceType ( base , i , sources [ i ] ) ;
40219: LD_VAR 0 15
40223: PPUSH
40224: LD_VAR 0 8
40228: PPUSH
40229: LD_VAR 0 5
40233: PUSH
40234: LD_VAR 0 8
40238: ARRAY
40239: PPUSH
40240: CALL_OW 276
40244: GO 40216
40246: POP
40247: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40248: LD_ADDR_VAR 0 18
40252: PUSH
40253: LD_VAR 0 15
40257: PPUSH
40258: LD_VAR 0 2
40262: PPUSH
40263: LD_INT 1
40265: PPUSH
40266: CALL 39509 0 3
40270: ST_TO_ADDR
// InitHc ;
40271: CALL_OW 19
// InitUc ;
40275: CALL_OW 18
// uc_side := side ;
40279: LD_ADDR_OWVAR 20
40283: PUSH
40284: LD_VAR 0 16
40288: ST_TO_ADDR
// uc_nation := nation ;
40289: LD_ADDR_OWVAR 21
40293: PUSH
40294: LD_VAR 0 17
40298: ST_TO_ADDR
// if buildings then
40299: LD_VAR 0 18
40303: IFFALSE 41625
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40305: LD_ADDR_VAR 0 19
40309: PUSH
40310: LD_VAR 0 18
40314: PPUSH
40315: LD_INT 2
40317: PUSH
40318: LD_INT 30
40320: PUSH
40321: LD_INT 29
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 30
40330: PUSH
40331: LD_INT 30
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: PPUSH
40343: CALL_OW 72
40347: ST_TO_ADDR
// if tmp then
40348: LD_VAR 0 19
40352: IFFALSE 40400
// for i in tmp do
40354: LD_ADDR_VAR 0 8
40358: PUSH
40359: LD_VAR 0 19
40363: PUSH
40364: FOR_IN
40365: IFFALSE 40398
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40367: LD_VAR 0 8
40371: PPUSH
40372: CALL_OW 250
40376: PPUSH
40377: LD_VAR 0 8
40381: PPUSH
40382: CALL_OW 251
40386: PPUSH
40387: LD_VAR 0 16
40391: PPUSH
40392: CALL_OW 441
40396: GO 40364
40398: POP
40399: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40400: LD_VAR 0 18
40404: PPUSH
40405: LD_INT 2
40407: PUSH
40408: LD_INT 30
40410: PUSH
40411: LD_INT 32
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 30
40420: PUSH
40421: LD_INT 33
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: PPUSH
40433: CALL_OW 72
40437: IFFALSE 40525
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40439: LD_ADDR_VAR 0 8
40443: PUSH
40444: LD_VAR 0 18
40448: PPUSH
40449: LD_INT 2
40451: PUSH
40452: LD_INT 30
40454: PUSH
40455: LD_INT 32
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 30
40464: PUSH
40465: LD_INT 33
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: LIST
40476: PPUSH
40477: CALL_OW 72
40481: PUSH
40482: FOR_IN
40483: IFFALSE 40523
// begin if not GetBWeapon ( i ) then
40485: LD_VAR 0 8
40489: PPUSH
40490: CALL_OW 269
40494: NOT
40495: IFFALSE 40521
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40497: LD_VAR 0 8
40501: PPUSH
40502: LD_VAR 0 8
40506: PPUSH
40507: LD_VAR 0 2
40511: PPUSH
40512: CALL 41771 0 2
40516: PPUSH
40517: CALL_OW 431
// end ;
40521: GO 40482
40523: POP
40524: POP
// end ; for i = 1 to personel do
40525: LD_ADDR_VAR 0 8
40529: PUSH
40530: DOUBLE
40531: LD_INT 1
40533: DEC
40534: ST_TO_ADDR
40535: LD_VAR 0 6
40539: PUSH
40540: FOR_TO
40541: IFFALSE 41605
// begin if i > 4 then
40543: LD_VAR 0 8
40547: PUSH
40548: LD_INT 4
40550: GREATER
40551: IFFALSE 40555
// break ;
40553: GO 41605
// case i of 1 :
40555: LD_VAR 0 8
40559: PUSH
40560: LD_INT 1
40562: DOUBLE
40563: EQUAL
40564: IFTRUE 40568
40566: GO 40648
40568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40569: LD_ADDR_VAR 0 12
40573: PUSH
40574: LD_VAR 0 18
40578: PPUSH
40579: LD_INT 22
40581: PUSH
40582: LD_VAR 0 16
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 58
40593: PUSH
40594: EMPTY
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 30
40602: PUSH
40603: LD_INT 32
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 30
40612: PUSH
40613: LD_INT 4
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 30
40622: PUSH
40623: LD_INT 5
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: LIST
40640: PPUSH
40641: CALL_OW 72
40645: ST_TO_ADDR
40646: GO 40870
40648: LD_INT 2
40650: DOUBLE
40651: EQUAL
40652: IFTRUE 40656
40654: GO 40718
40656: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40657: LD_ADDR_VAR 0 12
40661: PUSH
40662: LD_VAR 0 18
40666: PPUSH
40667: LD_INT 22
40669: PUSH
40670: LD_VAR 0 16
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 30
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 30
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PPUSH
40711: CALL_OW 72
40715: ST_TO_ADDR
40716: GO 40870
40718: LD_INT 3
40720: DOUBLE
40721: EQUAL
40722: IFTRUE 40726
40724: GO 40788
40726: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40727: LD_ADDR_VAR 0 12
40731: PUSH
40732: LD_VAR 0 18
40736: PPUSH
40737: LD_INT 22
40739: PUSH
40740: LD_VAR 0 16
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: LD_INT 30
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 30
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PPUSH
40781: CALL_OW 72
40785: ST_TO_ADDR
40786: GO 40870
40788: LD_INT 4
40790: DOUBLE
40791: EQUAL
40792: IFTRUE 40796
40794: GO 40869
40796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40797: LD_ADDR_VAR 0 12
40801: PUSH
40802: LD_VAR 0 18
40806: PPUSH
40807: LD_INT 22
40809: PUSH
40810: LD_VAR 0 16
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: LD_INT 30
40824: PUSH
40825: LD_INT 6
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 30
40834: PUSH
40835: LD_INT 7
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 30
40844: PUSH
40845: LD_INT 8
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PPUSH
40862: CALL_OW 72
40866: ST_TO_ADDR
40867: GO 40870
40869: POP
// if i = 1 then
40870: LD_VAR 0 8
40874: PUSH
40875: LD_INT 1
40877: EQUAL
40878: IFFALSE 40989
// begin tmp := [ ] ;
40880: LD_ADDR_VAR 0 19
40884: PUSH
40885: EMPTY
40886: ST_TO_ADDR
// for j in f do
40887: LD_ADDR_VAR 0 9
40891: PUSH
40892: LD_VAR 0 12
40896: PUSH
40897: FOR_IN
40898: IFFALSE 40971
// if GetBType ( j ) = b_bunker then
40900: LD_VAR 0 9
40904: PPUSH
40905: CALL_OW 266
40909: PUSH
40910: LD_INT 32
40912: EQUAL
40913: IFFALSE 40940
// tmp := Insert ( tmp , 1 , j ) else
40915: LD_ADDR_VAR 0 19
40919: PUSH
40920: LD_VAR 0 19
40924: PPUSH
40925: LD_INT 1
40927: PPUSH
40928: LD_VAR 0 9
40932: PPUSH
40933: CALL_OW 2
40937: ST_TO_ADDR
40938: GO 40969
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40940: LD_ADDR_VAR 0 19
40944: PUSH
40945: LD_VAR 0 19
40949: PPUSH
40950: LD_VAR 0 19
40954: PUSH
40955: LD_INT 1
40957: PLUS
40958: PPUSH
40959: LD_VAR 0 9
40963: PPUSH
40964: CALL_OW 2
40968: ST_TO_ADDR
40969: GO 40897
40971: POP
40972: POP
// if tmp then
40973: LD_VAR 0 19
40977: IFFALSE 40989
// f := tmp ;
40979: LD_ADDR_VAR 0 12
40983: PUSH
40984: LD_VAR 0 19
40988: ST_TO_ADDR
// end ; x := personel [ i ] ;
40989: LD_ADDR_VAR 0 13
40993: PUSH
40994: LD_VAR 0 6
40998: PUSH
40999: LD_VAR 0 8
41003: ARRAY
41004: ST_TO_ADDR
// if x = - 1 then
41005: LD_VAR 0 13
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: EQUAL
41014: IFFALSE 41223
// begin for j in f do
41016: LD_ADDR_VAR 0 9
41020: PUSH
41021: LD_VAR 0 12
41025: PUSH
41026: FOR_IN
41027: IFFALSE 41219
// repeat InitHc ;
41029: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41033: LD_VAR 0 9
41037: PPUSH
41038: CALL_OW 266
41042: PUSH
41043: LD_INT 5
41045: EQUAL
41046: IFFALSE 41116
// begin if UnitsInside ( j ) < 3 then
41048: LD_VAR 0 9
41052: PPUSH
41053: CALL_OW 313
41057: PUSH
41058: LD_INT 3
41060: LESS
41061: IFFALSE 41097
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41063: LD_INT 0
41065: PPUSH
41066: LD_INT 5
41068: PUSH
41069: LD_INT 8
41071: PUSH
41072: LD_INT 9
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: PUSH
41080: LD_VAR 0 17
41084: ARRAY
41085: PPUSH
41086: LD_VAR 0 4
41090: PPUSH
41091: CALL_OW 380
41095: GO 41114
// PrepareHuman ( false , i , skill ) ;
41097: LD_INT 0
41099: PPUSH
41100: LD_VAR 0 8
41104: PPUSH
41105: LD_VAR 0 4
41109: PPUSH
41110: CALL_OW 380
// end else
41114: GO 41133
// PrepareHuman ( false , i , skill ) ;
41116: LD_INT 0
41118: PPUSH
41119: LD_VAR 0 8
41123: PPUSH
41124: LD_VAR 0 4
41128: PPUSH
41129: CALL_OW 380
// un := CreateHuman ;
41133: LD_ADDR_VAR 0 14
41137: PUSH
41138: CALL_OW 44
41142: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41143: LD_ADDR_VAR 0 7
41147: PUSH
41148: LD_VAR 0 7
41152: PPUSH
41153: LD_INT 1
41155: PPUSH
41156: LD_VAR 0 14
41160: PPUSH
41161: CALL_OW 2
41165: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41166: LD_VAR 0 14
41170: PPUSH
41171: LD_VAR 0 9
41175: PPUSH
41176: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41180: LD_VAR 0 9
41184: PPUSH
41185: CALL_OW 313
41189: PUSH
41190: LD_INT 6
41192: EQUAL
41193: PUSH
41194: LD_VAR 0 9
41198: PPUSH
41199: CALL_OW 266
41203: PUSH
41204: LD_INT 32
41206: PUSH
41207: LD_INT 31
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: IN
41214: OR
41215: IFFALSE 41029
41217: GO 41026
41219: POP
41220: POP
// end else
41221: GO 41603
// for j = 1 to x do
41223: LD_ADDR_VAR 0 9
41227: PUSH
41228: DOUBLE
41229: LD_INT 1
41231: DEC
41232: ST_TO_ADDR
41233: LD_VAR 0 13
41237: PUSH
41238: FOR_TO
41239: IFFALSE 41601
// begin InitHc ;
41241: CALL_OW 19
// if not f then
41245: LD_VAR 0 12
41249: NOT
41250: IFFALSE 41339
// begin PrepareHuman ( false , i , skill ) ;
41252: LD_INT 0
41254: PPUSH
41255: LD_VAR 0 8
41259: PPUSH
41260: LD_VAR 0 4
41264: PPUSH
41265: CALL_OW 380
// un := CreateHuman ;
41269: LD_ADDR_VAR 0 14
41273: PUSH
41274: CALL_OW 44
41278: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41279: LD_ADDR_VAR 0 7
41283: PUSH
41284: LD_VAR 0 7
41288: PPUSH
41289: LD_INT 1
41291: PPUSH
41292: LD_VAR 0 14
41296: PPUSH
41297: CALL_OW 2
41301: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41302: LD_VAR 0 14
41306: PPUSH
41307: LD_VAR 0 1
41311: PPUSH
41312: CALL_OW 250
41316: PPUSH
41317: LD_VAR 0 1
41321: PPUSH
41322: CALL_OW 251
41326: PPUSH
41327: LD_INT 10
41329: PPUSH
41330: LD_INT 0
41332: PPUSH
41333: CALL_OW 50
// continue ;
41337: GO 41238
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41339: LD_VAR 0 12
41343: PUSH
41344: LD_INT 1
41346: ARRAY
41347: PPUSH
41348: CALL_OW 313
41352: PUSH
41353: LD_VAR 0 12
41357: PUSH
41358: LD_INT 1
41360: ARRAY
41361: PPUSH
41362: CALL_OW 266
41366: PUSH
41367: LD_INT 32
41369: PUSH
41370: LD_INT 31
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: IN
41377: AND
41378: PUSH
41379: LD_VAR 0 12
41383: PUSH
41384: LD_INT 1
41386: ARRAY
41387: PPUSH
41388: CALL_OW 313
41392: PUSH
41393: LD_INT 6
41395: EQUAL
41396: OR
41397: IFFALSE 41417
// f := Delete ( f , 1 ) ;
41399: LD_ADDR_VAR 0 12
41403: PUSH
41404: LD_VAR 0 12
41408: PPUSH
41409: LD_INT 1
41411: PPUSH
41412: CALL_OW 3
41416: ST_TO_ADDR
// if not f then
41417: LD_VAR 0 12
41421: NOT
41422: IFFALSE 41440
// begin x := x + 2 ;
41424: LD_ADDR_VAR 0 13
41428: PUSH
41429: LD_VAR 0 13
41433: PUSH
41434: LD_INT 2
41436: PLUS
41437: ST_TO_ADDR
// continue ;
41438: GO 41238
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41440: LD_VAR 0 12
41444: PUSH
41445: LD_INT 1
41447: ARRAY
41448: PPUSH
41449: CALL_OW 266
41453: PUSH
41454: LD_INT 5
41456: EQUAL
41457: IFFALSE 41531
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41459: LD_VAR 0 12
41463: PUSH
41464: LD_INT 1
41466: ARRAY
41467: PPUSH
41468: CALL_OW 313
41472: PUSH
41473: LD_INT 3
41475: LESS
41476: IFFALSE 41512
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41478: LD_INT 0
41480: PPUSH
41481: LD_INT 5
41483: PUSH
41484: LD_INT 8
41486: PUSH
41487: LD_INT 9
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: LIST
41494: PUSH
41495: LD_VAR 0 17
41499: ARRAY
41500: PPUSH
41501: LD_VAR 0 4
41505: PPUSH
41506: CALL_OW 380
41510: GO 41529
// PrepareHuman ( false , i , skill ) ;
41512: LD_INT 0
41514: PPUSH
41515: LD_VAR 0 8
41519: PPUSH
41520: LD_VAR 0 4
41524: PPUSH
41525: CALL_OW 380
// end else
41529: GO 41548
// PrepareHuman ( false , i , skill ) ;
41531: LD_INT 0
41533: PPUSH
41534: LD_VAR 0 8
41538: PPUSH
41539: LD_VAR 0 4
41543: PPUSH
41544: CALL_OW 380
// un := CreateHuman ;
41548: LD_ADDR_VAR 0 14
41552: PUSH
41553: CALL_OW 44
41557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41558: LD_ADDR_VAR 0 7
41562: PUSH
41563: LD_VAR 0 7
41567: PPUSH
41568: LD_INT 1
41570: PPUSH
41571: LD_VAR 0 14
41575: PPUSH
41576: CALL_OW 2
41580: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41581: LD_VAR 0 14
41585: PPUSH
41586: LD_VAR 0 12
41590: PUSH
41591: LD_INT 1
41593: ARRAY
41594: PPUSH
41595: CALL_OW 52
// end ;
41599: GO 41238
41601: POP
41602: POP
// end ;
41603: GO 40540
41605: POP
41606: POP
// result := result ^ buildings ;
41607: LD_ADDR_VAR 0 7
41611: PUSH
41612: LD_VAR 0 7
41616: PUSH
41617: LD_VAR 0 18
41621: ADD
41622: ST_TO_ADDR
// end else
41623: GO 41766
// begin for i = 1 to personel do
41625: LD_ADDR_VAR 0 8
41629: PUSH
41630: DOUBLE
41631: LD_INT 1
41633: DEC
41634: ST_TO_ADDR
41635: LD_VAR 0 6
41639: PUSH
41640: FOR_TO
41641: IFFALSE 41764
// begin if i > 4 then
41643: LD_VAR 0 8
41647: PUSH
41648: LD_INT 4
41650: GREATER
41651: IFFALSE 41655
// break ;
41653: GO 41764
// x := personel [ i ] ;
41655: LD_ADDR_VAR 0 13
41659: PUSH
41660: LD_VAR 0 6
41664: PUSH
41665: LD_VAR 0 8
41669: ARRAY
41670: ST_TO_ADDR
// if x = - 1 then
41671: LD_VAR 0 13
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: EQUAL
41680: IFFALSE 41684
// continue ;
41682: GO 41640
// PrepareHuman ( false , i , skill ) ;
41684: LD_INT 0
41686: PPUSH
41687: LD_VAR 0 8
41691: PPUSH
41692: LD_VAR 0 4
41696: PPUSH
41697: CALL_OW 380
// un := CreateHuman ;
41701: LD_ADDR_VAR 0 14
41705: PUSH
41706: CALL_OW 44
41710: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41711: LD_VAR 0 14
41715: PPUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: CALL_OW 250
41725: PPUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 251
41735: PPUSH
41736: LD_INT 10
41738: PPUSH
41739: LD_INT 0
41741: PPUSH
41742: CALL_OW 50
// result := result ^ un ;
41746: LD_ADDR_VAR 0 7
41750: PUSH
41751: LD_VAR 0 7
41755: PUSH
41756: LD_VAR 0 14
41760: ADD
41761: ST_TO_ADDR
// end ;
41762: GO 41640
41764: POP
41765: POP
// end ; end ;
41766: LD_VAR 0 7
41770: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
41785: PPUSH
41786: PPUSH
41787: PPUSH
41788: PPUSH
// result := false ;
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_INT 0
41796: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41797: LD_VAR 0 1
41801: NOT
41802: PUSH
41803: LD_VAR 0 1
41807: PPUSH
41808: CALL_OW 266
41812: PUSH
41813: LD_INT 32
41815: PUSH
41816: LD_INT 33
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: IN
41823: NOT
41824: OR
41825: IFFALSE 41829
// exit ;
41827: GO 42938
// nat := GetNation ( tower ) ;
41829: LD_ADDR_VAR 0 12
41833: PUSH
41834: LD_VAR 0 1
41838: PPUSH
41839: CALL_OW 248
41843: ST_TO_ADDR
// side := GetSide ( tower ) ;
41844: LD_ADDR_VAR 0 16
41848: PUSH
41849: LD_VAR 0 1
41853: PPUSH
41854: CALL_OW 255
41858: ST_TO_ADDR
// x := GetX ( tower ) ;
41859: LD_ADDR_VAR 0 10
41863: PUSH
41864: LD_VAR 0 1
41868: PPUSH
41869: CALL_OW 250
41873: ST_TO_ADDR
// y := GetY ( tower ) ;
41874: LD_ADDR_VAR 0 11
41878: PUSH
41879: LD_VAR 0 1
41883: PPUSH
41884: CALL_OW 251
41888: ST_TO_ADDR
// if not x or not y then
41889: LD_VAR 0 10
41893: NOT
41894: PUSH
41895: LD_VAR 0 11
41899: NOT
41900: OR
41901: IFFALSE 41905
// exit ;
41903: GO 42938
// weapon := 0 ;
41905: LD_ADDR_VAR 0 18
41909: PUSH
41910: LD_INT 0
41912: ST_TO_ADDR
// fac_list := [ ] ;
41913: LD_ADDR_VAR 0 17
41917: PUSH
41918: EMPTY
41919: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41920: LD_ADDR_VAR 0 6
41924: PUSH
41925: LD_VAR 0 1
41929: PPUSH
41930: CALL_OW 274
41934: PPUSH
41935: LD_VAR 0 2
41939: PPUSH
41940: LD_INT 0
41942: PPUSH
41943: CALL 39509 0 3
41947: PPUSH
41948: LD_INT 30
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PPUSH
41958: CALL_OW 72
41962: ST_TO_ADDR
// if not factories then
41963: LD_VAR 0 6
41967: NOT
41968: IFFALSE 41972
// exit ;
41970: GO 42938
// for i in factories do
41972: LD_ADDR_VAR 0 8
41976: PUSH
41977: LD_VAR 0 6
41981: PUSH
41982: FOR_IN
41983: IFFALSE 42008
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41985: LD_ADDR_VAR 0 17
41989: PUSH
41990: LD_VAR 0 17
41994: PUSH
41995: LD_VAR 0 8
41999: PPUSH
42000: CALL_OW 478
42004: UNION
42005: ST_TO_ADDR
42006: GO 41982
42008: POP
42009: POP
// if not fac_list then
42010: LD_VAR 0 17
42014: NOT
42015: IFFALSE 42019
// exit ;
42017: GO 42938
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42019: LD_ADDR_VAR 0 5
42023: PUSH
42024: LD_INT 4
42026: PUSH
42027: LD_INT 5
42029: PUSH
42030: LD_INT 9
42032: PUSH
42033: LD_INT 10
42035: PUSH
42036: LD_INT 6
42038: PUSH
42039: LD_INT 7
42041: PUSH
42042: LD_INT 11
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 27
42056: PUSH
42057: LD_INT 28
42059: PUSH
42060: LD_INT 26
42062: PUSH
42063: LD_INT 30
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 43
42074: PUSH
42075: LD_INT 44
42077: PUSH
42078: LD_INT 46
42080: PUSH
42081: LD_INT 45
42083: PUSH
42084: LD_INT 47
42086: PUSH
42087: LD_INT 49
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: PUSH
42103: LD_VAR 0 12
42107: ARRAY
42108: ST_TO_ADDR
// list := list isect fac_list ;
42109: LD_ADDR_VAR 0 5
42113: PUSH
42114: LD_VAR 0 5
42118: PUSH
42119: LD_VAR 0 17
42123: ISECT
42124: ST_TO_ADDR
// if not list then
42125: LD_VAR 0 5
42129: NOT
42130: IFFALSE 42134
// exit ;
42132: GO 42938
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42134: LD_VAR 0 12
42138: PUSH
42139: LD_INT 3
42141: EQUAL
42142: PUSH
42143: LD_INT 49
42145: PUSH
42146: LD_VAR 0 5
42150: IN
42151: AND
42152: PUSH
42153: LD_INT 31
42155: PPUSH
42156: LD_VAR 0 16
42160: PPUSH
42161: CALL_OW 321
42165: PUSH
42166: LD_INT 2
42168: EQUAL
42169: AND
42170: IFFALSE 42230
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42172: LD_INT 22
42174: PUSH
42175: LD_VAR 0 16
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 35
42186: PUSH
42187: LD_INT 49
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 91
42196: PUSH
42197: LD_VAR 0 1
42201: PUSH
42202: LD_INT 10
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: PPUSH
42215: CALL_OW 69
42219: NOT
42220: IFFALSE 42230
// weapon := ru_time_lapser ;
42222: LD_ADDR_VAR 0 18
42226: PUSH
42227: LD_INT 49
42229: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42230: LD_VAR 0 12
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: IN
42245: PUSH
42246: LD_INT 11
42248: PUSH
42249: LD_VAR 0 5
42253: IN
42254: PUSH
42255: LD_INT 30
42257: PUSH
42258: LD_VAR 0 5
42262: IN
42263: OR
42264: AND
42265: PUSH
42266: LD_INT 6
42268: PPUSH
42269: LD_VAR 0 16
42273: PPUSH
42274: CALL_OW 321
42278: PUSH
42279: LD_INT 2
42281: EQUAL
42282: AND
42283: IFFALSE 42448
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42285: LD_INT 22
42287: PUSH
42288: LD_VAR 0 16
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: LD_INT 35
42302: PUSH
42303: LD_INT 11
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 35
42312: PUSH
42313: LD_INT 30
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 91
42327: PUSH
42328: LD_VAR 0 1
42332: PUSH
42333: LD_INT 18
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: PPUSH
42346: CALL_OW 69
42350: NOT
42351: PUSH
42352: LD_INT 22
42354: PUSH
42355: LD_VAR 0 16
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 30
42369: PUSH
42370: LD_INT 32
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 30
42379: PUSH
42380: LD_INT 33
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 91
42394: PUSH
42395: LD_VAR 0 1
42399: PUSH
42400: LD_INT 12
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: PUSH
42413: EMPTY
42414: LIST
42415: PPUSH
42416: CALL_OW 69
42420: PUSH
42421: LD_INT 2
42423: GREATER
42424: AND
42425: IFFALSE 42448
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42427: LD_ADDR_VAR 0 18
42431: PUSH
42432: LD_INT 11
42434: PUSH
42435: LD_INT 30
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_VAR 0 12
42446: ARRAY
42447: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42448: LD_VAR 0 18
42452: NOT
42453: PUSH
42454: LD_INT 40
42456: PPUSH
42457: LD_VAR 0 16
42461: PPUSH
42462: CALL_OW 321
42466: PUSH
42467: LD_INT 2
42469: EQUAL
42470: AND
42471: PUSH
42472: LD_INT 7
42474: PUSH
42475: LD_VAR 0 5
42479: IN
42480: PUSH
42481: LD_INT 28
42483: PUSH
42484: LD_VAR 0 5
42488: IN
42489: OR
42490: PUSH
42491: LD_INT 45
42493: PUSH
42494: LD_VAR 0 5
42498: IN
42499: OR
42500: AND
42501: IFFALSE 42755
// begin hex := GetHexInfo ( x , y ) ;
42503: LD_ADDR_VAR 0 4
42507: PUSH
42508: LD_VAR 0 10
42512: PPUSH
42513: LD_VAR 0 11
42517: PPUSH
42518: CALL_OW 546
42522: ST_TO_ADDR
// if hex [ 1 ] then
42523: LD_VAR 0 4
42527: PUSH
42528: LD_INT 1
42530: ARRAY
42531: IFFALSE 42535
// exit ;
42533: GO 42938
// height := hex [ 2 ] ;
42535: LD_ADDR_VAR 0 15
42539: PUSH
42540: LD_VAR 0 4
42544: PUSH
42545: LD_INT 2
42547: ARRAY
42548: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42549: LD_ADDR_VAR 0 14
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: LD_INT 5
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: ST_TO_ADDR
// for i in tmp do
42572: LD_ADDR_VAR 0 8
42576: PUSH
42577: LD_VAR 0 14
42581: PUSH
42582: FOR_IN
42583: IFFALSE 42753
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42585: LD_ADDR_VAR 0 9
42589: PUSH
42590: LD_VAR 0 10
42594: PPUSH
42595: LD_VAR 0 8
42599: PPUSH
42600: LD_INT 5
42602: PPUSH
42603: CALL_OW 272
42607: PUSH
42608: LD_VAR 0 11
42612: PPUSH
42613: LD_VAR 0 8
42617: PPUSH
42618: LD_INT 5
42620: PPUSH
42621: CALL_OW 273
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42630: LD_VAR 0 9
42634: PUSH
42635: LD_INT 1
42637: ARRAY
42638: PPUSH
42639: LD_VAR 0 9
42643: PUSH
42644: LD_INT 2
42646: ARRAY
42647: PPUSH
42648: CALL_OW 488
42652: IFFALSE 42751
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42654: LD_ADDR_VAR 0 4
42658: PUSH
42659: LD_VAR 0 9
42663: PUSH
42664: LD_INT 1
42666: ARRAY
42667: PPUSH
42668: LD_VAR 0 9
42672: PUSH
42673: LD_INT 2
42675: ARRAY
42676: PPUSH
42677: CALL_OW 546
42681: ST_TO_ADDR
// if hex [ 1 ] then
42682: LD_VAR 0 4
42686: PUSH
42687: LD_INT 1
42689: ARRAY
42690: IFFALSE 42694
// continue ;
42692: GO 42582
// h := hex [ 2 ] ;
42694: LD_ADDR_VAR 0 13
42698: PUSH
42699: LD_VAR 0 4
42703: PUSH
42704: LD_INT 2
42706: ARRAY
42707: ST_TO_ADDR
// if h + 7 < height then
42708: LD_VAR 0 13
42712: PUSH
42713: LD_INT 7
42715: PLUS
42716: PUSH
42717: LD_VAR 0 15
42721: LESS
42722: IFFALSE 42751
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42724: LD_ADDR_VAR 0 18
42728: PUSH
42729: LD_INT 7
42731: PUSH
42732: LD_INT 28
42734: PUSH
42735: LD_INT 45
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: PUSH
42743: LD_VAR 0 12
42747: ARRAY
42748: ST_TO_ADDR
// break ;
42749: GO 42753
// end ; end ; end ;
42751: GO 42582
42753: POP
42754: POP
// end ; if not weapon then
42755: LD_VAR 0 18
42759: NOT
42760: IFFALSE 42820
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42762: LD_ADDR_VAR 0 5
42766: PUSH
42767: LD_VAR 0 5
42771: PUSH
42772: LD_INT 11
42774: PUSH
42775: LD_INT 30
42777: PUSH
42778: LD_INT 49
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: DIFF
42786: ST_TO_ADDR
// if not list then
42787: LD_VAR 0 5
42791: NOT
42792: IFFALSE 42796
// exit ;
42794: GO 42938
// weapon := list [ rand ( 1 , list ) ] ;
42796: LD_ADDR_VAR 0 18
42800: PUSH
42801: LD_VAR 0 5
42805: PUSH
42806: LD_INT 1
42808: PPUSH
42809: LD_VAR 0 5
42813: PPUSH
42814: CALL_OW 12
42818: ARRAY
42819: ST_TO_ADDR
// end ; if weapon then
42820: LD_VAR 0 18
42824: IFFALSE 42938
// begin tmp := CostOfWeapon ( weapon ) ;
42826: LD_ADDR_VAR 0 14
42830: PUSH
42831: LD_VAR 0 18
42835: PPUSH
42836: CALL_OW 451
42840: ST_TO_ADDR
// j := GetBase ( tower ) ;
42841: LD_ADDR_VAR 0 9
42845: PUSH
42846: LD_VAR 0 1
42850: PPUSH
42851: CALL_OW 274
42855: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42856: LD_VAR 0 9
42860: PPUSH
42861: LD_INT 1
42863: PPUSH
42864: CALL_OW 275
42868: PUSH
42869: LD_VAR 0 14
42873: PUSH
42874: LD_INT 1
42876: ARRAY
42877: GREATEREQUAL
42878: PUSH
42879: LD_VAR 0 9
42883: PPUSH
42884: LD_INT 2
42886: PPUSH
42887: CALL_OW 275
42891: PUSH
42892: LD_VAR 0 14
42896: PUSH
42897: LD_INT 2
42899: ARRAY
42900: GREATEREQUAL
42901: AND
42902: PUSH
42903: LD_VAR 0 9
42907: PPUSH
42908: LD_INT 3
42910: PPUSH
42911: CALL_OW 275
42915: PUSH
42916: LD_VAR 0 14
42920: PUSH
42921: LD_INT 3
42923: ARRAY
42924: GREATEREQUAL
42925: AND
42926: IFFALSE 42938
// result := weapon ;
42928: LD_ADDR_VAR 0 3
42932: PUSH
42933: LD_VAR 0 18
42937: ST_TO_ADDR
// end ; end ;
42938: LD_VAR 0 3
42942: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42943: LD_INT 0
42945: PPUSH
42946: PPUSH
// result := true ;
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: LD_INT 1
42954: ST_TO_ADDR
// if array1 = array2 then
42955: LD_VAR 0 1
42959: PUSH
42960: LD_VAR 0 2
42964: EQUAL
42965: IFFALSE 43025
// begin for i = 1 to array1 do
42967: LD_ADDR_VAR 0 4
42971: PUSH
42972: DOUBLE
42973: LD_INT 1
42975: DEC
42976: ST_TO_ADDR
42977: LD_VAR 0 1
42981: PUSH
42982: FOR_TO
42983: IFFALSE 43021
// if array1 [ i ] <> array2 [ i ] then
42985: LD_VAR 0 1
42989: PUSH
42990: LD_VAR 0 4
42994: ARRAY
42995: PUSH
42996: LD_VAR 0 2
43000: PUSH
43001: LD_VAR 0 4
43005: ARRAY
43006: NONEQUAL
43007: IFFALSE 43019
// begin result := false ;
43009: LD_ADDR_VAR 0 3
43013: PUSH
43014: LD_INT 0
43016: ST_TO_ADDR
// break ;
43017: GO 43021
// end ;
43019: GO 42982
43021: POP
43022: POP
// end else
43023: GO 43033
// result := false ;
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 0
43032: ST_TO_ADDR
// end ;
43033: LD_VAR 0 3
43037: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43038: LD_INT 0
43040: PPUSH
43041: PPUSH
// if not array1 or not array2 then
43042: LD_VAR 0 1
43046: NOT
43047: PUSH
43048: LD_VAR 0 2
43052: NOT
43053: OR
43054: IFFALSE 43058
// exit ;
43056: GO 43122
// result := true ;
43058: LD_ADDR_VAR 0 3
43062: PUSH
43063: LD_INT 1
43065: ST_TO_ADDR
// for i = 1 to array1 do
43066: LD_ADDR_VAR 0 4
43070: PUSH
43071: DOUBLE
43072: LD_INT 1
43074: DEC
43075: ST_TO_ADDR
43076: LD_VAR 0 1
43080: PUSH
43081: FOR_TO
43082: IFFALSE 43120
// if array1 [ i ] <> array2 [ i ] then
43084: LD_VAR 0 1
43088: PUSH
43089: LD_VAR 0 4
43093: ARRAY
43094: PUSH
43095: LD_VAR 0 2
43099: PUSH
43100: LD_VAR 0 4
43104: ARRAY
43105: NONEQUAL
43106: IFFALSE 43118
// begin result := false ;
43108: LD_ADDR_VAR 0 3
43112: PUSH
43113: LD_INT 0
43115: ST_TO_ADDR
// break ;
43116: GO 43120
// end ;
43118: GO 43081
43120: POP
43121: POP
// end ;
43122: LD_VAR 0 3
43126: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43127: LD_INT 0
43129: PPUSH
43130: PPUSH
43131: PPUSH
// pom := GetBase ( fac ) ;
43132: LD_ADDR_VAR 0 5
43136: PUSH
43137: LD_VAR 0 1
43141: PPUSH
43142: CALL_OW 274
43146: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43147: LD_ADDR_VAR 0 4
43151: PUSH
43152: LD_VAR 0 2
43156: PUSH
43157: LD_INT 1
43159: ARRAY
43160: PPUSH
43161: LD_VAR 0 2
43165: PUSH
43166: LD_INT 2
43168: ARRAY
43169: PPUSH
43170: LD_VAR 0 2
43174: PUSH
43175: LD_INT 3
43177: ARRAY
43178: PPUSH
43179: LD_VAR 0 2
43183: PUSH
43184: LD_INT 4
43186: ARRAY
43187: PPUSH
43188: CALL_OW 449
43192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43193: LD_ADDR_VAR 0 3
43197: PUSH
43198: LD_VAR 0 5
43202: PPUSH
43203: LD_INT 1
43205: PPUSH
43206: CALL_OW 275
43210: PUSH
43211: LD_VAR 0 4
43215: PUSH
43216: LD_INT 1
43218: ARRAY
43219: GREATEREQUAL
43220: PUSH
43221: LD_VAR 0 5
43225: PPUSH
43226: LD_INT 2
43228: PPUSH
43229: CALL_OW 275
43233: PUSH
43234: LD_VAR 0 4
43238: PUSH
43239: LD_INT 2
43241: ARRAY
43242: GREATEREQUAL
43243: AND
43244: PUSH
43245: LD_VAR 0 5
43249: PPUSH
43250: LD_INT 3
43252: PPUSH
43253: CALL_OW 275
43257: PUSH
43258: LD_VAR 0 4
43262: PUSH
43263: LD_INT 3
43265: ARRAY
43266: GREATEREQUAL
43267: AND
43268: ST_TO_ADDR
// end ;
43269: LD_VAR 0 3
43273: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43274: LD_INT 0
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
// pom := GetBase ( building ) ;
43280: LD_ADDR_VAR 0 3
43284: PUSH
43285: LD_VAR 0 1
43289: PPUSH
43290: CALL_OW 274
43294: ST_TO_ADDR
// if not pom then
43295: LD_VAR 0 3
43299: NOT
43300: IFFALSE 43304
// exit ;
43302: GO 43474
// btype := GetBType ( building ) ;
43304: LD_ADDR_VAR 0 5
43308: PUSH
43309: LD_VAR 0 1
43313: PPUSH
43314: CALL_OW 266
43318: ST_TO_ADDR
// if btype = b_armoury then
43319: LD_VAR 0 5
43323: PUSH
43324: LD_INT 4
43326: EQUAL
43327: IFFALSE 43337
// btype := b_barracks ;
43329: LD_ADDR_VAR 0 5
43333: PUSH
43334: LD_INT 5
43336: ST_TO_ADDR
// if btype = b_depot then
43337: LD_VAR 0 5
43341: PUSH
43342: LD_INT 0
43344: EQUAL
43345: IFFALSE 43355
// btype := b_warehouse ;
43347: LD_ADDR_VAR 0 5
43351: PUSH
43352: LD_INT 1
43354: ST_TO_ADDR
// if btype = b_workshop then
43355: LD_VAR 0 5
43359: PUSH
43360: LD_INT 2
43362: EQUAL
43363: IFFALSE 43373
// btype := b_factory ;
43365: LD_ADDR_VAR 0 5
43369: PUSH
43370: LD_INT 3
43372: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43373: LD_ADDR_VAR 0 4
43377: PUSH
43378: LD_VAR 0 5
43382: PPUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 248
43392: PPUSH
43393: CALL_OW 450
43397: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43398: LD_ADDR_VAR 0 2
43402: PUSH
43403: LD_VAR 0 3
43407: PPUSH
43408: LD_INT 1
43410: PPUSH
43411: CALL_OW 275
43415: PUSH
43416: LD_VAR 0 4
43420: PUSH
43421: LD_INT 1
43423: ARRAY
43424: GREATEREQUAL
43425: PUSH
43426: LD_VAR 0 3
43430: PPUSH
43431: LD_INT 2
43433: PPUSH
43434: CALL_OW 275
43438: PUSH
43439: LD_VAR 0 4
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: GREATEREQUAL
43448: AND
43449: PUSH
43450: LD_VAR 0 3
43454: PPUSH
43455: LD_INT 3
43457: PPUSH
43458: CALL_OW 275
43462: PUSH
43463: LD_VAR 0 4
43467: PUSH
43468: LD_INT 3
43470: ARRAY
43471: GREATEREQUAL
43472: AND
43473: ST_TO_ADDR
// end ;
43474: LD_VAR 0 2
43478: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43479: LD_INT 0
43481: PPUSH
43482: PPUSH
43483: PPUSH
// pom := GetBase ( building ) ;
43484: LD_ADDR_VAR 0 4
43488: PUSH
43489: LD_VAR 0 1
43493: PPUSH
43494: CALL_OW 274
43498: ST_TO_ADDR
// if not pom then
43499: LD_VAR 0 4
43503: NOT
43504: IFFALSE 43508
// exit ;
43506: GO 43609
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43508: LD_ADDR_VAR 0 5
43512: PUSH
43513: LD_VAR 0 2
43517: PPUSH
43518: LD_VAR 0 1
43522: PPUSH
43523: CALL_OW 248
43527: PPUSH
43528: CALL_OW 450
43532: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: LD_VAR 0 4
43542: PPUSH
43543: LD_INT 1
43545: PPUSH
43546: CALL_OW 275
43550: PUSH
43551: LD_VAR 0 5
43555: PUSH
43556: LD_INT 1
43558: ARRAY
43559: GREATEREQUAL
43560: PUSH
43561: LD_VAR 0 4
43565: PPUSH
43566: LD_INT 2
43568: PPUSH
43569: CALL_OW 275
43573: PUSH
43574: LD_VAR 0 5
43578: PUSH
43579: LD_INT 2
43581: ARRAY
43582: GREATEREQUAL
43583: AND
43584: PUSH
43585: LD_VAR 0 4
43589: PPUSH
43590: LD_INT 3
43592: PPUSH
43593: CALL_OW 275
43597: PUSH
43598: LD_VAR 0 5
43602: PUSH
43603: LD_INT 3
43605: ARRAY
43606: GREATEREQUAL
43607: AND
43608: ST_TO_ADDR
// end ;
43609: LD_VAR 0 3
43613: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43614: LD_INT 0
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
// result := false ;
43627: LD_ADDR_VAR 0 8
43631: PUSH
43632: LD_INT 0
43634: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43635: LD_VAR 0 5
43639: NOT
43640: PUSH
43641: LD_VAR 0 1
43645: NOT
43646: OR
43647: PUSH
43648: LD_VAR 0 2
43652: NOT
43653: OR
43654: PUSH
43655: LD_VAR 0 3
43659: NOT
43660: OR
43661: IFFALSE 43665
// exit ;
43663: GO 44479
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43665: LD_ADDR_VAR 0 14
43669: PUSH
43670: LD_VAR 0 1
43674: PPUSH
43675: LD_VAR 0 2
43679: PPUSH
43680: LD_VAR 0 3
43684: PPUSH
43685: LD_VAR 0 4
43689: PPUSH
43690: LD_VAR 0 5
43694: PUSH
43695: LD_INT 1
43697: ARRAY
43698: PPUSH
43699: CALL_OW 248
43703: PPUSH
43704: LD_INT 0
43706: PPUSH
43707: CALL 45732 0 6
43711: ST_TO_ADDR
// if not hexes then
43712: LD_VAR 0 14
43716: NOT
43717: IFFALSE 43721
// exit ;
43719: GO 44479
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43721: LD_ADDR_VAR 0 17
43725: PUSH
43726: LD_VAR 0 5
43730: PPUSH
43731: LD_INT 22
43733: PUSH
43734: LD_VAR 0 13
43738: PPUSH
43739: CALL_OW 255
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 30
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 30
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PPUSH
43780: CALL_OW 72
43784: ST_TO_ADDR
// for i = 1 to hexes do
43785: LD_ADDR_VAR 0 9
43789: PUSH
43790: DOUBLE
43791: LD_INT 1
43793: DEC
43794: ST_TO_ADDR
43795: LD_VAR 0 14
43799: PUSH
43800: FOR_TO
43801: IFFALSE 44477
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43803: LD_ADDR_VAR 0 13
43807: PUSH
43808: LD_VAR 0 14
43812: PUSH
43813: LD_VAR 0 9
43817: ARRAY
43818: PUSH
43819: LD_INT 1
43821: ARRAY
43822: PPUSH
43823: LD_VAR 0 14
43827: PUSH
43828: LD_VAR 0 9
43832: ARRAY
43833: PUSH
43834: LD_INT 2
43836: ARRAY
43837: PPUSH
43838: CALL_OW 428
43842: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43843: LD_VAR 0 14
43847: PUSH
43848: LD_VAR 0 9
43852: ARRAY
43853: PUSH
43854: LD_INT 1
43856: ARRAY
43857: PPUSH
43858: LD_VAR 0 14
43862: PUSH
43863: LD_VAR 0 9
43867: ARRAY
43868: PUSH
43869: LD_INT 2
43871: ARRAY
43872: PPUSH
43873: CALL_OW 351
43877: PUSH
43878: LD_VAR 0 14
43882: PUSH
43883: LD_VAR 0 9
43887: ARRAY
43888: PUSH
43889: LD_INT 1
43891: ARRAY
43892: PPUSH
43893: LD_VAR 0 14
43897: PUSH
43898: LD_VAR 0 9
43902: ARRAY
43903: PUSH
43904: LD_INT 2
43906: ARRAY
43907: PPUSH
43908: CALL_OW 488
43912: NOT
43913: OR
43914: PUSH
43915: LD_VAR 0 13
43919: PPUSH
43920: CALL_OW 247
43924: PUSH
43925: LD_INT 3
43927: EQUAL
43928: OR
43929: IFFALSE 43935
// exit ;
43931: POP
43932: POP
43933: GO 44479
// if not tmp then
43935: LD_VAR 0 13
43939: NOT
43940: IFFALSE 43944
// continue ;
43942: GO 43800
// result := true ;
43944: LD_ADDR_VAR 0 8
43948: PUSH
43949: LD_INT 1
43951: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43952: LD_VAR 0 6
43956: PUSH
43957: LD_VAR 0 13
43961: PPUSH
43962: CALL_OW 247
43966: PUSH
43967: LD_INT 2
43969: EQUAL
43970: AND
43971: PUSH
43972: LD_VAR 0 13
43976: PPUSH
43977: CALL_OW 263
43981: PUSH
43982: LD_INT 1
43984: EQUAL
43985: AND
43986: IFFALSE 44150
// begin if IsDrivenBy ( tmp ) then
43988: LD_VAR 0 13
43992: PPUSH
43993: CALL_OW 311
43997: IFFALSE 44001
// continue ;
43999: GO 43800
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44001: LD_VAR 0 6
44005: PPUSH
44006: LD_INT 3
44008: PUSH
44009: LD_INT 60
44011: PUSH
44012: EMPTY
44013: LIST
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: LD_INT 55
44024: PUSH
44025: EMPTY
44026: LIST
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PPUSH
44036: CALL_OW 72
44040: IFFALSE 44148
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44042: LD_ADDR_VAR 0 18
44046: PUSH
44047: LD_VAR 0 6
44051: PPUSH
44052: LD_INT 3
44054: PUSH
44055: LD_INT 60
44057: PUSH
44058: EMPTY
44059: LIST
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: PUSH
44068: LD_INT 55
44070: PUSH
44071: EMPTY
44072: LIST
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PPUSH
44082: CALL_OW 72
44086: PUSH
44087: LD_INT 1
44089: ARRAY
44090: ST_TO_ADDR
// if IsInUnit ( driver ) then
44091: LD_VAR 0 18
44095: PPUSH
44096: CALL_OW 310
44100: IFFALSE 44111
// ComExit ( driver ) ;
44102: LD_VAR 0 18
44106: PPUSH
44107: CALL 69513 0 1
// AddComEnterUnit ( driver , tmp ) ;
44111: LD_VAR 0 18
44115: PPUSH
44116: LD_VAR 0 13
44120: PPUSH
44121: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44125: LD_VAR 0 18
44129: PPUSH
44130: LD_VAR 0 7
44134: PPUSH
44135: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44139: LD_VAR 0 18
44143: PPUSH
44144: CALL_OW 181
// end ; continue ;
44148: GO 43800
// end ; if not cleaners or not tmp in cleaners then
44150: LD_VAR 0 6
44154: NOT
44155: PUSH
44156: LD_VAR 0 13
44160: PUSH
44161: LD_VAR 0 6
44165: IN
44166: NOT
44167: OR
44168: IFFALSE 44475
// begin if dep then
44170: LD_VAR 0 17
44174: IFFALSE 44310
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44176: LD_ADDR_VAR 0 16
44180: PUSH
44181: LD_VAR 0 17
44185: PUSH
44186: LD_INT 1
44188: ARRAY
44189: PPUSH
44190: CALL_OW 250
44194: PPUSH
44195: LD_VAR 0 17
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: PPUSH
44204: CALL_OW 254
44208: PPUSH
44209: LD_INT 5
44211: PPUSH
44212: CALL_OW 272
44216: PUSH
44217: LD_VAR 0 17
44221: PUSH
44222: LD_INT 1
44224: ARRAY
44225: PPUSH
44226: CALL_OW 251
44230: PPUSH
44231: LD_VAR 0 17
44235: PUSH
44236: LD_INT 1
44238: ARRAY
44239: PPUSH
44240: CALL_OW 254
44244: PPUSH
44245: LD_INT 5
44247: PPUSH
44248: CALL_OW 273
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44257: LD_VAR 0 16
44261: PUSH
44262: LD_INT 1
44264: ARRAY
44265: PPUSH
44266: LD_VAR 0 16
44270: PUSH
44271: LD_INT 2
44273: ARRAY
44274: PPUSH
44275: CALL_OW 488
44279: IFFALSE 44310
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44281: LD_VAR 0 13
44285: PPUSH
44286: LD_VAR 0 16
44290: PUSH
44291: LD_INT 1
44293: ARRAY
44294: PPUSH
44295: LD_VAR 0 16
44299: PUSH
44300: LD_INT 2
44302: ARRAY
44303: PPUSH
44304: CALL_OW 111
// continue ;
44308: GO 43800
// end ; end ; r := GetDir ( tmp ) ;
44310: LD_ADDR_VAR 0 15
44314: PUSH
44315: LD_VAR 0 13
44319: PPUSH
44320: CALL_OW 254
44324: ST_TO_ADDR
// if r = 5 then
44325: LD_VAR 0 15
44329: PUSH
44330: LD_INT 5
44332: EQUAL
44333: IFFALSE 44343
// r := 0 ;
44335: LD_ADDR_VAR 0 15
44339: PUSH
44340: LD_INT 0
44342: ST_TO_ADDR
// for j = r to 5 do
44343: LD_ADDR_VAR 0 10
44347: PUSH
44348: DOUBLE
44349: LD_VAR 0 15
44353: DEC
44354: ST_TO_ADDR
44355: LD_INT 5
44357: PUSH
44358: FOR_TO
44359: IFFALSE 44473
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44361: LD_ADDR_VAR 0 11
44365: PUSH
44366: LD_VAR 0 13
44370: PPUSH
44371: CALL_OW 250
44375: PPUSH
44376: LD_VAR 0 10
44380: PPUSH
44381: LD_INT 2
44383: PPUSH
44384: CALL_OW 272
44388: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44389: LD_ADDR_VAR 0 12
44393: PUSH
44394: LD_VAR 0 13
44398: PPUSH
44399: CALL_OW 251
44403: PPUSH
44404: LD_VAR 0 10
44408: PPUSH
44409: LD_INT 2
44411: PPUSH
44412: CALL_OW 273
44416: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44417: LD_VAR 0 11
44421: PPUSH
44422: LD_VAR 0 12
44426: PPUSH
44427: CALL_OW 488
44431: PUSH
44432: LD_VAR 0 11
44436: PPUSH
44437: LD_VAR 0 12
44441: PPUSH
44442: CALL_OW 428
44446: NOT
44447: AND
44448: IFFALSE 44471
// begin ComMoveXY ( tmp , _x , _y ) ;
44450: LD_VAR 0 13
44454: PPUSH
44455: LD_VAR 0 11
44459: PPUSH
44460: LD_VAR 0 12
44464: PPUSH
44465: CALL_OW 111
// break ;
44469: GO 44473
// end ; end ;
44471: GO 44358
44473: POP
44474: POP
// end ; end ;
44475: GO 43800
44477: POP
44478: POP
// end ;
44479: LD_VAR 0 8
44483: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44484: LD_INT 0
44486: PPUSH
// result := true ;
44487: LD_ADDR_VAR 0 3
44491: PUSH
44492: LD_INT 1
44494: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44495: LD_VAR 0 2
44499: PUSH
44500: LD_INT 24
44502: DOUBLE
44503: EQUAL
44504: IFTRUE 44514
44506: LD_INT 33
44508: DOUBLE
44509: EQUAL
44510: IFTRUE 44514
44512: GO 44539
44514: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44515: LD_ADDR_VAR 0 3
44519: PUSH
44520: LD_INT 32
44522: PPUSH
44523: LD_VAR 0 1
44527: PPUSH
44528: CALL_OW 321
44532: PUSH
44533: LD_INT 2
44535: EQUAL
44536: ST_TO_ADDR
44537: GO 44855
44539: LD_INT 20
44541: DOUBLE
44542: EQUAL
44543: IFTRUE 44547
44545: GO 44572
44547: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44548: LD_ADDR_VAR 0 3
44552: PUSH
44553: LD_INT 6
44555: PPUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 321
44565: PUSH
44566: LD_INT 2
44568: EQUAL
44569: ST_TO_ADDR
44570: GO 44855
44572: LD_INT 22
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44586
44578: LD_INT 36
44580: DOUBLE
44581: EQUAL
44582: IFTRUE 44586
44584: GO 44611
44586: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44587: LD_ADDR_VAR 0 3
44591: PUSH
44592: LD_INT 15
44594: PPUSH
44595: LD_VAR 0 1
44599: PPUSH
44600: CALL_OW 321
44604: PUSH
44605: LD_INT 2
44607: EQUAL
44608: ST_TO_ADDR
44609: GO 44855
44611: LD_INT 30
44613: DOUBLE
44614: EQUAL
44615: IFTRUE 44619
44617: GO 44644
44619: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_INT 20
44627: PPUSH
44628: LD_VAR 0 1
44632: PPUSH
44633: CALL_OW 321
44637: PUSH
44638: LD_INT 2
44640: EQUAL
44641: ST_TO_ADDR
44642: GO 44855
44644: LD_INT 28
44646: DOUBLE
44647: EQUAL
44648: IFTRUE 44658
44650: LD_INT 21
44652: DOUBLE
44653: EQUAL
44654: IFTRUE 44658
44656: GO 44683
44658: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44659: LD_ADDR_VAR 0 3
44663: PUSH
44664: LD_INT 21
44666: PPUSH
44667: LD_VAR 0 1
44671: PPUSH
44672: CALL_OW 321
44676: PUSH
44677: LD_INT 2
44679: EQUAL
44680: ST_TO_ADDR
44681: GO 44855
44683: LD_INT 16
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44691
44689: GO 44716
44691: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44692: LD_ADDR_VAR 0 3
44696: PUSH
44697: LD_INT 84
44699: PPUSH
44700: LD_VAR 0 1
44704: PPUSH
44705: CALL_OW 321
44709: PUSH
44710: LD_INT 2
44712: EQUAL
44713: ST_TO_ADDR
44714: GO 44855
44716: LD_INT 19
44718: DOUBLE
44719: EQUAL
44720: IFTRUE 44730
44722: LD_INT 23
44724: DOUBLE
44725: EQUAL
44726: IFTRUE 44730
44728: GO 44755
44730: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44731: LD_ADDR_VAR 0 3
44735: PUSH
44736: LD_INT 83
44738: PPUSH
44739: LD_VAR 0 1
44743: PPUSH
44744: CALL_OW 321
44748: PUSH
44749: LD_INT 2
44751: EQUAL
44752: ST_TO_ADDR
44753: GO 44855
44755: LD_INT 17
44757: DOUBLE
44758: EQUAL
44759: IFTRUE 44763
44761: GO 44788
44763: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44764: LD_ADDR_VAR 0 3
44768: PUSH
44769: LD_INT 39
44771: PPUSH
44772: LD_VAR 0 1
44776: PPUSH
44777: CALL_OW 321
44781: PUSH
44782: LD_INT 2
44784: EQUAL
44785: ST_TO_ADDR
44786: GO 44855
44788: LD_INT 18
44790: DOUBLE
44791: EQUAL
44792: IFTRUE 44796
44794: GO 44821
44796: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44797: LD_ADDR_VAR 0 3
44801: PUSH
44802: LD_INT 40
44804: PPUSH
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL_OW 321
44814: PUSH
44815: LD_INT 2
44817: EQUAL
44818: ST_TO_ADDR
44819: GO 44855
44821: LD_INT 27
44823: DOUBLE
44824: EQUAL
44825: IFTRUE 44829
44827: GO 44854
44829: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44830: LD_ADDR_VAR 0 3
44834: PUSH
44835: LD_INT 35
44837: PPUSH
44838: LD_VAR 0 1
44842: PPUSH
44843: CALL_OW 321
44847: PUSH
44848: LD_INT 2
44850: EQUAL
44851: ST_TO_ADDR
44852: GO 44855
44854: POP
// end ;
44855: LD_VAR 0 3
44859: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44860: LD_INT 0
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
// result := false ;
44873: LD_ADDR_VAR 0 6
44877: PUSH
44878: LD_INT 0
44880: ST_TO_ADDR
// if btype = b_depot then
44881: LD_VAR 0 2
44885: PUSH
44886: LD_INT 0
44888: EQUAL
44889: IFFALSE 44901
// begin result := true ;
44891: LD_ADDR_VAR 0 6
44895: PUSH
44896: LD_INT 1
44898: ST_TO_ADDR
// exit ;
44899: GO 45727
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44901: LD_VAR 0 1
44905: NOT
44906: PUSH
44907: LD_VAR 0 1
44911: PPUSH
44912: CALL_OW 266
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: IN
44927: NOT
44928: OR
44929: PUSH
44930: LD_VAR 0 2
44934: NOT
44935: OR
44936: PUSH
44937: LD_VAR 0 5
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: LD_INT 4
44956: PUSH
44957: LD_INT 5
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: IN
44968: NOT
44969: OR
44970: PUSH
44971: LD_VAR 0 3
44975: PPUSH
44976: LD_VAR 0 4
44980: PPUSH
44981: CALL_OW 488
44985: NOT
44986: OR
44987: IFFALSE 44991
// exit ;
44989: GO 45727
// side := GetSide ( depot ) ;
44991: LD_ADDR_VAR 0 9
44995: PUSH
44996: LD_VAR 0 1
45000: PPUSH
45001: CALL_OW 255
45005: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45006: LD_VAR 0 9
45010: PPUSH
45011: LD_VAR 0 2
45015: PPUSH
45016: CALL 44484 0 2
45020: NOT
45021: IFFALSE 45025
// exit ;
45023: GO 45727
// pom := GetBase ( depot ) ;
45025: LD_ADDR_VAR 0 10
45029: PUSH
45030: LD_VAR 0 1
45034: PPUSH
45035: CALL_OW 274
45039: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45040: LD_ADDR_VAR 0 11
45044: PUSH
45045: LD_VAR 0 2
45049: PPUSH
45050: LD_VAR 0 1
45054: PPUSH
45055: CALL_OW 248
45059: PPUSH
45060: CALL_OW 450
45064: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45065: LD_VAR 0 10
45069: PPUSH
45070: LD_INT 1
45072: PPUSH
45073: CALL_OW 275
45077: PUSH
45078: LD_VAR 0 11
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: GREATEREQUAL
45087: PUSH
45088: LD_VAR 0 10
45092: PPUSH
45093: LD_INT 2
45095: PPUSH
45096: CALL_OW 275
45100: PUSH
45101: LD_VAR 0 11
45105: PUSH
45106: LD_INT 2
45108: ARRAY
45109: GREATEREQUAL
45110: AND
45111: PUSH
45112: LD_VAR 0 10
45116: PPUSH
45117: LD_INT 3
45119: PPUSH
45120: CALL_OW 275
45124: PUSH
45125: LD_VAR 0 11
45129: PUSH
45130: LD_INT 3
45132: ARRAY
45133: GREATEREQUAL
45134: AND
45135: NOT
45136: IFFALSE 45140
// exit ;
45138: GO 45727
// if GetBType ( depot ) = b_depot then
45140: LD_VAR 0 1
45144: PPUSH
45145: CALL_OW 266
45149: PUSH
45150: LD_INT 0
45152: EQUAL
45153: IFFALSE 45165
// dist := 28 else
45155: LD_ADDR_VAR 0 14
45159: PUSH
45160: LD_INT 28
45162: ST_TO_ADDR
45163: GO 45173
// dist := 36 ;
45165: LD_ADDR_VAR 0 14
45169: PUSH
45170: LD_INT 36
45172: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45173: LD_VAR 0 1
45177: PPUSH
45178: LD_VAR 0 3
45182: PPUSH
45183: LD_VAR 0 4
45187: PPUSH
45188: CALL_OW 297
45192: PUSH
45193: LD_VAR 0 14
45197: GREATER
45198: IFFALSE 45202
// exit ;
45200: GO 45727
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45202: LD_ADDR_VAR 0 12
45206: PUSH
45207: LD_VAR 0 2
45211: PPUSH
45212: LD_VAR 0 3
45216: PPUSH
45217: LD_VAR 0 4
45221: PPUSH
45222: LD_VAR 0 5
45226: PPUSH
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL_OW 248
45236: PPUSH
45237: LD_INT 0
45239: PPUSH
45240: CALL 45732 0 6
45244: ST_TO_ADDR
// if not hexes then
45245: LD_VAR 0 12
45249: NOT
45250: IFFALSE 45254
// exit ;
45252: GO 45727
// hex := GetHexInfo ( x , y ) ;
45254: LD_ADDR_VAR 0 15
45258: PUSH
45259: LD_VAR 0 3
45263: PPUSH
45264: LD_VAR 0 4
45268: PPUSH
45269: CALL_OW 546
45273: ST_TO_ADDR
// if hex [ 1 ] then
45274: LD_VAR 0 15
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: IFFALSE 45286
// exit ;
45284: GO 45727
// height := hex [ 2 ] ;
45286: LD_ADDR_VAR 0 13
45290: PUSH
45291: LD_VAR 0 15
45295: PUSH
45296: LD_INT 2
45298: ARRAY
45299: ST_TO_ADDR
// for i = 1 to hexes do
45300: LD_ADDR_VAR 0 7
45304: PUSH
45305: DOUBLE
45306: LD_INT 1
45308: DEC
45309: ST_TO_ADDR
45310: LD_VAR 0 12
45314: PUSH
45315: FOR_TO
45316: IFFALSE 45646
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45318: LD_VAR 0 12
45322: PUSH
45323: LD_VAR 0 7
45327: ARRAY
45328: PUSH
45329: LD_INT 1
45331: ARRAY
45332: PPUSH
45333: LD_VAR 0 12
45337: PUSH
45338: LD_VAR 0 7
45342: ARRAY
45343: PUSH
45344: LD_INT 2
45346: ARRAY
45347: PPUSH
45348: CALL_OW 488
45352: NOT
45353: PUSH
45354: LD_VAR 0 12
45358: PUSH
45359: LD_VAR 0 7
45363: ARRAY
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: PPUSH
45369: LD_VAR 0 12
45373: PUSH
45374: LD_VAR 0 7
45378: ARRAY
45379: PUSH
45380: LD_INT 2
45382: ARRAY
45383: PPUSH
45384: CALL_OW 428
45388: PUSH
45389: LD_INT 0
45391: GREATER
45392: OR
45393: PUSH
45394: LD_VAR 0 12
45398: PUSH
45399: LD_VAR 0 7
45403: ARRAY
45404: PUSH
45405: LD_INT 1
45407: ARRAY
45408: PPUSH
45409: LD_VAR 0 12
45413: PUSH
45414: LD_VAR 0 7
45418: ARRAY
45419: PUSH
45420: LD_INT 2
45422: ARRAY
45423: PPUSH
45424: CALL_OW 351
45428: OR
45429: IFFALSE 45435
// exit ;
45431: POP
45432: POP
45433: GO 45727
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45435: LD_ADDR_VAR 0 8
45439: PUSH
45440: LD_VAR 0 12
45444: PUSH
45445: LD_VAR 0 7
45449: ARRAY
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: PPUSH
45455: LD_VAR 0 12
45459: PUSH
45460: LD_VAR 0 7
45464: ARRAY
45465: PUSH
45466: LD_INT 2
45468: ARRAY
45469: PPUSH
45470: CALL_OW 546
45474: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45475: LD_VAR 0 8
45479: PUSH
45480: LD_INT 1
45482: ARRAY
45483: PUSH
45484: LD_VAR 0 8
45488: PUSH
45489: LD_INT 2
45491: ARRAY
45492: PUSH
45493: LD_VAR 0 13
45497: PUSH
45498: LD_INT 2
45500: PLUS
45501: GREATER
45502: OR
45503: PUSH
45504: LD_VAR 0 8
45508: PUSH
45509: LD_INT 2
45511: ARRAY
45512: PUSH
45513: LD_VAR 0 13
45517: PUSH
45518: LD_INT 2
45520: MINUS
45521: LESS
45522: OR
45523: PUSH
45524: LD_VAR 0 8
45528: PUSH
45529: LD_INT 3
45531: ARRAY
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 8
45538: PUSH
45539: LD_INT 9
45541: PUSH
45542: LD_INT 10
45544: PUSH
45545: LD_INT 11
45547: PUSH
45548: LD_INT 12
45550: PUSH
45551: LD_INT 13
45553: PUSH
45554: LD_INT 16
45556: PUSH
45557: LD_INT 17
45559: PUSH
45560: LD_INT 18
45562: PUSH
45563: LD_INT 19
45565: PUSH
45566: LD_INT 20
45568: PUSH
45569: LD_INT 21
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: IN
45587: NOT
45588: OR
45589: PUSH
45590: LD_VAR 0 8
45594: PUSH
45595: LD_INT 5
45597: ARRAY
45598: NOT
45599: OR
45600: PUSH
45601: LD_VAR 0 8
45605: PUSH
45606: LD_INT 6
45608: ARRAY
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: LD_INT 7
45618: PUSH
45619: LD_INT 9
45621: PUSH
45622: LD_INT 10
45624: PUSH
45625: LD_INT 11
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: IN
45636: NOT
45637: OR
45638: IFFALSE 45644
// exit ;
45640: POP
45641: POP
45642: GO 45727
// end ;
45644: GO 45315
45646: POP
45647: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45648: LD_VAR 0 9
45652: PPUSH
45653: LD_VAR 0 3
45657: PPUSH
45658: LD_VAR 0 4
45662: PPUSH
45663: LD_INT 20
45665: PPUSH
45666: CALL 37650 0 4
45670: PUSH
45671: LD_INT 4
45673: ARRAY
45674: IFFALSE 45678
// exit ;
45676: GO 45727
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45678: LD_VAR 0 2
45682: PUSH
45683: LD_INT 29
45685: PUSH
45686: LD_INT 30
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: IN
45693: PUSH
45694: LD_VAR 0 3
45698: PPUSH
45699: LD_VAR 0 4
45703: PPUSH
45704: LD_VAR 0 9
45708: PPUSH
45709: CALL_OW 440
45713: NOT
45714: AND
45715: IFFALSE 45719
// exit ;
45717: GO 45727
// result := true ;
45719: LD_ADDR_VAR 0 6
45723: PUSH
45724: LD_INT 1
45726: ST_TO_ADDR
// end ;
45727: LD_VAR 0 6
45731: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45732: LD_INT 0
45734: PPUSH
45735: PPUSH
45736: PPUSH
45737: PPUSH
45738: PPUSH
45739: PPUSH
45740: PPUSH
45741: PPUSH
45742: PPUSH
45743: PPUSH
45744: PPUSH
45745: PPUSH
45746: PPUSH
45747: PPUSH
45748: PPUSH
45749: PPUSH
45750: PPUSH
45751: PPUSH
45752: PPUSH
45753: PPUSH
45754: PPUSH
45755: PPUSH
45756: PPUSH
45757: PPUSH
45758: PPUSH
45759: PPUSH
45760: PPUSH
45761: PPUSH
45762: PPUSH
45763: PPUSH
45764: PPUSH
45765: PPUSH
45766: PPUSH
45767: PPUSH
45768: PPUSH
45769: PPUSH
45770: PPUSH
45771: PPUSH
45772: PPUSH
45773: PPUSH
45774: PPUSH
45775: PPUSH
45776: PPUSH
45777: PPUSH
45778: PPUSH
45779: PPUSH
45780: PPUSH
45781: PPUSH
45782: PPUSH
45783: PPUSH
45784: PPUSH
45785: PPUSH
45786: PPUSH
45787: PPUSH
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
// result = [ ] ;
45792: LD_ADDR_VAR 0 7
45796: PUSH
45797: EMPTY
45798: ST_TO_ADDR
// temp_list = [ ] ;
45799: LD_ADDR_VAR 0 9
45803: PUSH
45804: EMPTY
45805: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45806: LD_VAR 0 4
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 3
45822: PUSH
45823: LD_INT 4
45825: PUSH
45826: LD_INT 5
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: IN
45837: NOT
45838: PUSH
45839: LD_VAR 0 1
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: IN
45854: PUSH
45855: LD_VAR 0 5
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: IN
45874: NOT
45875: AND
45876: OR
45877: IFFALSE 45881
// exit ;
45879: GO 64272
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45881: LD_VAR 0 1
45885: PUSH
45886: LD_INT 6
45888: PUSH
45889: LD_INT 7
45891: PUSH
45892: LD_INT 8
45894: PUSH
45895: LD_INT 13
45897: PUSH
45898: LD_INT 12
45900: PUSH
45901: LD_INT 15
45903: PUSH
45904: LD_INT 11
45906: PUSH
45907: LD_INT 14
45909: PUSH
45910: LD_INT 10
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: IN
45924: IFFALSE 45934
// btype = b_lab ;
45926: LD_ADDR_VAR 0 1
45930: PUSH
45931: LD_INT 6
45933: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45934: LD_VAR 0 6
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: IN
45953: NOT
45954: PUSH
45955: LD_VAR 0 1
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: LD_INT 6
45974: PUSH
45975: LD_INT 36
45977: PUSH
45978: LD_INT 4
45980: PUSH
45981: LD_INT 5
45983: PUSH
45984: LD_INT 31
45986: PUSH
45987: LD_INT 32
45989: PUSH
45990: LD_INT 33
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: IN
46006: NOT
46007: PUSH
46008: LD_VAR 0 6
46012: PUSH
46013: LD_INT 1
46015: EQUAL
46016: AND
46017: OR
46018: PUSH
46019: LD_VAR 0 1
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: IN
46034: NOT
46035: PUSH
46036: LD_VAR 0 6
46040: PUSH
46041: LD_INT 2
46043: EQUAL
46044: AND
46045: OR
46046: IFFALSE 46056
// mode = 0 ;
46048: LD_ADDR_VAR 0 6
46052: PUSH
46053: LD_INT 0
46055: ST_TO_ADDR
// case mode of 0 :
46056: LD_VAR 0 6
46060: PUSH
46061: LD_INT 0
46063: DOUBLE
46064: EQUAL
46065: IFTRUE 46069
46067: GO 57522
46069: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46070: LD_ADDR_VAR 0 11
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46263: LD_ADDR_VAR 0 12
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 3
46431: NEG
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46459: LD_ADDR_VAR 0 13
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 3
46618: NEG
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 3
46630: NEG
46631: PUSH
46632: LD_INT 3
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46658: LD_ADDR_VAR 0 14
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 3
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 3
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46854: LD_ADDR_VAR 0 15
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47047: LD_ADDR_VAR 0 16
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 3
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 3
47204: PUSH
47205: LD_INT 3
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 3
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47240: LD_ADDR_VAR 0 17
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47470: LD_ADDR_VAR 0 18
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47700: LD_ADDR_VAR 0 19
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47930: LD_ADDR_VAR 0 20
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48160: LD_ADDR_VAR 0 21
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48390: LD_ADDR_VAR 0 22
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48620: LD_ADDR_VAR 0 23
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 3
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48900: LD_ADDR_VAR 0 24
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49176: LD_ADDR_VAR 0 25
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49450: LD_ADDR_VAR 0 26
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 2
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49726: LD_ADDR_VAR 0 27
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50006: LD_ADDR_VAR 0 28
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: LD_INT 3
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: LD_INT 3
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50288: LD_ADDR_VAR 0 29
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 3
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50567: LD_ADDR_VAR 0 30
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50845: LD_ADDR_VAR 0 31
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: NEG
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51123: LD_ADDR_VAR 0 32
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 3
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51401: LD_ADDR_VAR 0 33
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51680: LD_ADDR_VAR 0 34
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 3
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51960: LD_ADDR_VAR 0 35
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52072: LD_ADDR_VAR 0 36
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52184: LD_ADDR_VAR 0 37
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52296: LD_ADDR_VAR 0 38
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52408: LD_ADDR_VAR 0 39
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52520: LD_ADDR_VAR 0 40
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52632: LD_ADDR_VAR 0 41
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 3
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: NEG
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: LD_INT 3
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52982: LD_ADDR_VAR 0 42
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 3
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: LD_INT 3
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 3
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 3
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: NEG
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 3
53291: NEG
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53332: LD_ADDR_VAR 0 43
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53680: LD_ADDR_VAR 0 44
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: NEG
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54030: LD_ADDR_VAR 0 45
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: LD_INT 3
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: NEG
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54380: LD_ADDR_VAR 0 46
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 3
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 3
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 3
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 3
54676: NEG
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 3
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54728: LD_ADDR_VAR 0 47
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54879: LD_ADDR_VAR 0 48
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55026: LD_ADDR_VAR 0 49
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55170: LD_ADDR_VAR 0 50
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55314: LD_ADDR_VAR 0 51
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55461: LD_ADDR_VAR 0 52
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55612: LD_ADDR_VAR 0 53
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55842: LD_ADDR_VAR 0 54
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56072: LD_ADDR_VAR 0 55
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56302: LD_ADDR_VAR 0 56
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56532: LD_ADDR_VAR 0 57
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 2
56719: NEG
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56762: LD_ADDR_VAR 0 58
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56992: LD_ADDR_VAR 0 59
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57080: LD_ADDR_VAR 0 60
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57168: LD_ADDR_VAR 0 61
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57256: LD_ADDR_VAR 0 62
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57344: LD_ADDR_VAR 0 63
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57432: LD_ADDR_VAR 0 64
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: ST_TO_ADDR
// end ; 1 :
57520: GO 63417
57522: LD_INT 1
57524: DOUBLE
57525: EQUAL
57526: IFTRUE 57530
57528: GO 60153
57530: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57531: LD_ADDR_VAR 0 11
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 3
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57575: LD_ADDR_VAR 0 12
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: LIST
57615: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57616: LD_ADDR_VAR 0 13
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 3
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57656: LD_ADDR_VAR 0 14
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 3
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57697: LD_ADDR_VAR 0 15
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 3
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57741: LD_ADDR_VAR 0 16
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: LD_INT 3
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: LD_INT 3
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57787: LD_ADDR_VAR 0 17
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 3
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57831: LD_ADDR_VAR 0 18
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57872: LD_ADDR_VAR 0 19
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57912: LD_ADDR_VAR 0 20
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57953: LD_ADDR_VAR 0 21
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 3
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57997: LD_ADDR_VAR 0 22
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: NEG
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58043: LD_ADDR_VAR 0 23
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 4
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 3
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58087: LD_ADDR_VAR 0 24
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 4
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: LIST
58127: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58128: LD_ADDR_VAR 0 25
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 4
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58168: LD_ADDR_VAR 0 26
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 4
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58209: LD_ADDR_VAR 0 27
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 4
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58253: LD_ADDR_VAR 0 28
58257: PUSH
58258: LD_INT 3
58260: NEG
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: LD_INT 4
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 4
58284: NEG
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58299: LD_ADDR_VAR 0 29
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 4
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 4
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 5
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 5
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 4
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 6
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 6
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 5
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58454: LD_ADDR_VAR 0 30
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 3
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 3
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 4
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 4
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 4
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 5
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 5
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 5
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 6
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 6
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58597: LD_ADDR_VAR 0 31
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 4
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 4
58644: PUSH
58645: LD_INT 4
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: LD_INT 4
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 5
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 5
58674: PUSH
58675: LD_INT 5
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 4
58684: PUSH
58685: LD_INT 5
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 6
58694: PUSH
58695: LD_INT 5
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 6
58704: PUSH
58705: LD_INT 6
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 5
58714: PUSH
58715: LD_INT 6
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58736: LD_ADDR_VAR 0 32
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 3
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 4
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 4
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: LD_INT 5
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: LD_INT 5
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 4
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: LD_INT 6
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 6
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 5
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58879: LD_ADDR_VAR 0 33
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 3
58897: NEG
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 4
58931: NEG
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 4
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 4
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 5
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 5
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 5
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 6
58999: NEG
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 6
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59034: LD_ADDR_VAR 0 34
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: LD_INT 3
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: LD_INT 4
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 4
59089: NEG
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 4
59101: NEG
59102: PUSH
59103: LD_INT 4
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 4
59113: NEG
59114: PUSH
59115: LD_INT 5
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 5
59125: NEG
59126: PUSH
59127: LD_INT 4
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 5
59137: NEG
59138: PUSH
59139: LD_INT 5
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 5
59149: NEG
59150: PUSH
59151: LD_INT 6
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 6
59161: NEG
59162: PUSH
59163: LD_INT 5
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 6
59173: NEG
59174: PUSH
59175: LD_INT 6
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59197: LD_ADDR_VAR 0 41
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: LD_INT 3
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59241: LD_ADDR_VAR 0 42
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59282: LD_ADDR_VAR 0 43
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59322: LD_ADDR_VAR 0 44
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59363: LD_ADDR_VAR 0 45
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: LIST
59406: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59407: LD_ADDR_VAR 0 46
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 2
59426: NEG
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59453: LD_ADDR_VAR 0 47
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 3
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59486: LD_ADDR_VAR 0 48
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59517: LD_ADDR_VAR 0 49
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59546: LD_ADDR_VAR 0 50
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: LD_INT 3
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 3
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59575: LD_ADDR_VAR 0 51
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59606: LD_ADDR_VAR 0 52
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59639: LD_ADDR_VAR 0 53
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 3
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 2
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: LIST
59682: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59683: LD_ADDR_VAR 0 54
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59724: LD_ADDR_VAR 0 55
59728: PUSH
59729: LD_INT 3
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 3
59741: PUSH
59742: LD_INT 3
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59764: LD_ADDR_VAR 0 56
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: LD_INT 3
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 3
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59805: LD_ADDR_VAR 0 57
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59849: LD_ADDR_VAR 0 58
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 3
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 3
59868: NEG
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: LD_INT 3
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59895: LD_ADDR_VAR 0 59
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: LIST
59938: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59939: LD_ADDR_VAR 0 60
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59980: LD_ADDR_VAR 0 61
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60020: LD_ADDR_VAR 0 62
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 2
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60061: LD_ADDR_VAR 0 63
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60105: LD_ADDR_VAR 0 64
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: ST_TO_ADDR
// end ; 2 :
60151: GO 63417
60153: LD_INT 2
60155: DOUBLE
60156: EQUAL
60157: IFTRUE 60161
60159: GO 63416
60161: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60162: LD_ADDR_VAR 0 29
60166: PUSH
60167: LD_INT 4
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 4
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 5
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 5
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 3
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 5
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 4
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 4
60292: PUSH
60293: LD_INT 4
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: LD_INT 4
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 4
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: LD_INT 4
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 4
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 4
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 5
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: LD_INT 5
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: LD_INT 4
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: LD_INT 3
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 5
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 2
60468: NEG
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 2
60479: NEG
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 4
60501: NEG
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 4
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 4
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 4
60547: NEG
60548: PUSH
60549: LD_INT 4
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 4
60559: NEG
60560: PUSH
60561: LD_INT 5
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 3
60571: NEG
60572: PUSH
60573: LD_INT 4
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 3
60583: NEG
60584: PUSH
60585: LD_INT 3
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 4
60595: NEG
60596: PUSH
60597: LD_INT 3
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 5
60607: NEG
60608: PUSH
60609: LD_INT 4
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 5
60619: NEG
60620: PUSH
60621: LD_INT 5
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 3
60631: NEG
60632: PUSH
60633: LD_INT 5
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 5
60643: NEG
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60700: LD_ADDR_VAR 0 30
60704: PUSH
60705: LD_INT 4
60707: PUSH
60708: LD_INT 4
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 4
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 5
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 5
60737: PUSH
60738: LD_INT 5
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 4
60747: PUSH
60748: LD_INT 5
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: LD_INT 4
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 3
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 5
60777: PUSH
60778: LD_INT 3
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 5
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: LD_INT 4
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: LD_INT 4
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: LD_INT 3
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 2
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: LD_INT 4
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 4
60890: NEG
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: NEG
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 4
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 5
60946: NEG
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 5
60957: NEG
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 5
60969: NEG
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: LD_INT 4
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 4
61052: NEG
61053: PUSH
61054: LD_INT 3
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 4
61064: NEG
61065: PUSH
61066: LD_INT 4
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 4
61088: NEG
61089: PUSH
61090: LD_INT 2
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 4
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 5
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 4
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 5
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: LD_INT 3
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: LD_INT 5
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61247: LD_ADDR_VAR 0 31
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 4
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 4
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 5
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 5
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 4
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 5
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 3
61347: NEG
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 4
61403: NEG
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 4
61414: NEG
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 4
61426: NEG
61427: PUSH
61428: LD_INT 2
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 4
61449: NEG
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 4
61461: NEG
61462: PUSH
61463: LD_INT 5
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: LD_INT 4
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: LD_INT 3
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 4
61497: NEG
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 5
61509: NEG
61510: PUSH
61511: LD_INT 4
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 5
61521: NEG
61522: PUSH
61523: LD_INT 5
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: LD_INT 5
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 5
61545: NEG
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 4
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 3
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 4
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 4
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 4
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 4
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 5
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 5
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 4
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 3
61731: PUSH
61732: LD_INT 2
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 5
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61797: LD_ADDR_VAR 0 32
61801: PUSH
61802: LD_INT 4
61804: NEG
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 4
61815: NEG
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 4
61849: NEG
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 5
61860: NEG
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 5
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 5
61883: NEG
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 3
61895: NEG
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: NEG
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 3
61918: NEG
61919: PUSH
61920: LD_INT 4
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: NEG
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 3
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 4
61966: NEG
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 4
61978: NEG
61979: PUSH
61980: LD_INT 4
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: LD_INT 4
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 4
62002: NEG
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: LD_INT 4
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 5
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: LD_INT 4
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 3
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 4
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 5
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 3
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: NEG
62105: PUSH
62106: LD_INT 5
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 3
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 3
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 4
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 4
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 4
62209: PUSH
62210: LD_INT 4
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 4
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 5
62229: PUSH
62230: LD_INT 4
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 5
62239: PUSH
62240: LD_INT 5
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 4
62249: PUSH
62250: LD_INT 5
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: LD_INT 4
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: LD_INT 3
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 5
62279: PUSH
62280: LD_INT 3
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 3
62289: PUSH
62290: LD_INT 5
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62344: LD_ADDR_VAR 0 33
62348: PUSH
62349: LD_INT 4
62351: NEG
62352: PUSH
62353: LD_INT 4
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 4
62363: NEG
62364: PUSH
62365: LD_INT 5
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: NEG
62376: PUSH
62377: LD_INT 4
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 4
62399: NEG
62400: PUSH
62401: LD_INT 3
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 5
62411: NEG
62412: PUSH
62413: LD_INT 4
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 5
62423: NEG
62424: PUSH
62425: LD_INT 5
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: NEG
62436: PUSH
62437: LD_INT 5
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 5
62447: NEG
62448: PUSH
62449: LD_INT 3
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 3
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: LD_INT 4
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 3
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: LD_INT 4
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: LD_INT 4
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 4
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 4
62571: PUSH
62572: LD_INT 1
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 5
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 5
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 3
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: LD_INT 2
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 5
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 3
62654: PUSH
62655: LD_INT 3
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 4
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 4
62684: PUSH
62685: LD_INT 4
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: PUSH
62695: LD_INT 4
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: LD_INT 3
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: LD_INT 2
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 4
62724: PUSH
62725: LD_INT 2
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 4
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: LD_INT 4
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: LD_INT 4
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: LD_INT 5
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_INT 5
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: NEG
62795: PUSH
62796: LD_INT 4
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: LD_INT 3
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 5
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62882: LD_ADDR_VAR 0 34
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 4
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 5
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: LD_INT 4
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 3
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 3
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: LD_INT 4
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 5
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 3
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: LD_INT 5
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 4
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 4
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 3
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 4
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 4
63084: PUSH
63085: LD_INT 4
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 4
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 5
63104: PUSH
63105: LD_INT 4
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 5
63114: PUSH
63115: LD_INT 5
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 4
63124: PUSH
63125: LD_INT 5
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: LD_INT 4
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 5
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: LD_INT 5
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 3
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: LD_INT 3
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 4
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: LD_INT 4
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: LD_INT 3
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: LD_INT 4
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: LD_INT 2
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 4
63267: NEG
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 4
63278: NEG
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 3
63290: NEG
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 3
63301: NEG
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 4
63312: NEG
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 5
63323: NEG
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 5
63334: NEG
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 5
63346: NEG
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 3
63358: NEG
63359: PUSH
63360: LD_INT 2
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: ST_TO_ADDR
// end ; end ;
63414: GO 63417
63416: POP
// case btype of b_depot , b_warehouse :
63417: LD_VAR 0 1
63421: PUSH
63422: LD_INT 0
63424: DOUBLE
63425: EQUAL
63426: IFTRUE 63436
63428: LD_INT 1
63430: DOUBLE
63431: EQUAL
63432: IFTRUE 63436
63434: GO 63637
63436: POP
// case nation of nation_american :
63437: LD_VAR 0 5
63441: PUSH
63442: LD_INT 1
63444: DOUBLE
63445: EQUAL
63446: IFTRUE 63450
63448: GO 63506
63450: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63451: LD_ADDR_VAR 0 9
63455: PUSH
63456: LD_VAR 0 11
63460: PUSH
63461: LD_VAR 0 12
63465: PUSH
63466: LD_VAR 0 13
63470: PUSH
63471: LD_VAR 0 14
63475: PUSH
63476: LD_VAR 0 15
63480: PUSH
63481: LD_VAR 0 16
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: PUSH
63494: LD_VAR 0 4
63498: PUSH
63499: LD_INT 1
63501: PLUS
63502: ARRAY
63503: ST_TO_ADDR
63504: GO 63635
63506: LD_INT 2
63508: DOUBLE
63509: EQUAL
63510: IFTRUE 63514
63512: GO 63570
63514: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63515: LD_ADDR_VAR 0 9
63519: PUSH
63520: LD_VAR 0 17
63524: PUSH
63525: LD_VAR 0 18
63529: PUSH
63530: LD_VAR 0 19
63534: PUSH
63535: LD_VAR 0 20
63539: PUSH
63540: LD_VAR 0 21
63544: PUSH
63545: LD_VAR 0 22
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: PUSH
63558: LD_VAR 0 4
63562: PUSH
63563: LD_INT 1
63565: PLUS
63566: ARRAY
63567: ST_TO_ADDR
63568: GO 63635
63570: LD_INT 3
63572: DOUBLE
63573: EQUAL
63574: IFTRUE 63578
63576: GO 63634
63578: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63579: LD_ADDR_VAR 0 9
63583: PUSH
63584: LD_VAR 0 23
63588: PUSH
63589: LD_VAR 0 24
63593: PUSH
63594: LD_VAR 0 25
63598: PUSH
63599: LD_VAR 0 26
63603: PUSH
63604: LD_VAR 0 27
63608: PUSH
63609: LD_VAR 0 28
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: PUSH
63622: LD_VAR 0 4
63626: PUSH
63627: LD_INT 1
63629: PLUS
63630: ARRAY
63631: ST_TO_ADDR
63632: GO 63635
63634: POP
63635: GO 64190
63637: LD_INT 2
63639: DOUBLE
63640: EQUAL
63641: IFTRUE 63651
63643: LD_INT 3
63645: DOUBLE
63646: EQUAL
63647: IFTRUE 63651
63649: GO 63707
63651: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63652: LD_ADDR_VAR 0 9
63656: PUSH
63657: LD_VAR 0 29
63661: PUSH
63662: LD_VAR 0 30
63666: PUSH
63667: LD_VAR 0 31
63671: PUSH
63672: LD_VAR 0 32
63676: PUSH
63677: LD_VAR 0 33
63681: PUSH
63682: LD_VAR 0 34
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: PUSH
63695: LD_VAR 0 4
63699: PUSH
63700: LD_INT 1
63702: PLUS
63703: ARRAY
63704: ST_TO_ADDR
63705: GO 64190
63707: LD_INT 16
63709: DOUBLE
63710: EQUAL
63711: IFTRUE 63769
63713: LD_INT 17
63715: DOUBLE
63716: EQUAL
63717: IFTRUE 63769
63719: LD_INT 18
63721: DOUBLE
63722: EQUAL
63723: IFTRUE 63769
63725: LD_INT 19
63727: DOUBLE
63728: EQUAL
63729: IFTRUE 63769
63731: LD_INT 22
63733: DOUBLE
63734: EQUAL
63735: IFTRUE 63769
63737: LD_INT 20
63739: DOUBLE
63740: EQUAL
63741: IFTRUE 63769
63743: LD_INT 21
63745: DOUBLE
63746: EQUAL
63747: IFTRUE 63769
63749: LD_INT 23
63751: DOUBLE
63752: EQUAL
63753: IFTRUE 63769
63755: LD_INT 24
63757: DOUBLE
63758: EQUAL
63759: IFTRUE 63769
63761: LD_INT 25
63763: DOUBLE
63764: EQUAL
63765: IFTRUE 63769
63767: GO 63825
63769: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63770: LD_ADDR_VAR 0 9
63774: PUSH
63775: LD_VAR 0 35
63779: PUSH
63780: LD_VAR 0 36
63784: PUSH
63785: LD_VAR 0 37
63789: PUSH
63790: LD_VAR 0 38
63794: PUSH
63795: LD_VAR 0 39
63799: PUSH
63800: LD_VAR 0 40
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: PUSH
63813: LD_VAR 0 4
63817: PUSH
63818: LD_INT 1
63820: PLUS
63821: ARRAY
63822: ST_TO_ADDR
63823: GO 64190
63825: LD_INT 6
63827: DOUBLE
63828: EQUAL
63829: IFTRUE 63881
63831: LD_INT 7
63833: DOUBLE
63834: EQUAL
63835: IFTRUE 63881
63837: LD_INT 8
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63881
63843: LD_INT 13
63845: DOUBLE
63846: EQUAL
63847: IFTRUE 63881
63849: LD_INT 12
63851: DOUBLE
63852: EQUAL
63853: IFTRUE 63881
63855: LD_INT 15
63857: DOUBLE
63858: EQUAL
63859: IFTRUE 63881
63861: LD_INT 11
63863: DOUBLE
63864: EQUAL
63865: IFTRUE 63881
63867: LD_INT 14
63869: DOUBLE
63870: EQUAL
63871: IFTRUE 63881
63873: LD_INT 10
63875: DOUBLE
63876: EQUAL
63877: IFTRUE 63881
63879: GO 63937
63881: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63882: LD_ADDR_VAR 0 9
63886: PUSH
63887: LD_VAR 0 41
63891: PUSH
63892: LD_VAR 0 42
63896: PUSH
63897: LD_VAR 0 43
63901: PUSH
63902: LD_VAR 0 44
63906: PUSH
63907: LD_VAR 0 45
63911: PUSH
63912: LD_VAR 0 46
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: PUSH
63925: LD_VAR 0 4
63929: PUSH
63930: LD_INT 1
63932: PLUS
63933: ARRAY
63934: ST_TO_ADDR
63935: GO 64190
63937: LD_INT 36
63939: DOUBLE
63940: EQUAL
63941: IFTRUE 63945
63943: GO 64001
63945: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63946: LD_ADDR_VAR 0 9
63950: PUSH
63951: LD_VAR 0 47
63955: PUSH
63956: LD_VAR 0 48
63960: PUSH
63961: LD_VAR 0 49
63965: PUSH
63966: LD_VAR 0 50
63970: PUSH
63971: LD_VAR 0 51
63975: PUSH
63976: LD_VAR 0 52
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: PUSH
63989: LD_VAR 0 4
63993: PUSH
63994: LD_INT 1
63996: PLUS
63997: ARRAY
63998: ST_TO_ADDR
63999: GO 64190
64001: LD_INT 4
64003: DOUBLE
64004: EQUAL
64005: IFTRUE 64027
64007: LD_INT 5
64009: DOUBLE
64010: EQUAL
64011: IFTRUE 64027
64013: LD_INT 34
64015: DOUBLE
64016: EQUAL
64017: IFTRUE 64027
64019: LD_INT 37
64021: DOUBLE
64022: EQUAL
64023: IFTRUE 64027
64025: GO 64083
64027: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64028: LD_ADDR_VAR 0 9
64032: PUSH
64033: LD_VAR 0 53
64037: PUSH
64038: LD_VAR 0 54
64042: PUSH
64043: LD_VAR 0 55
64047: PUSH
64048: LD_VAR 0 56
64052: PUSH
64053: LD_VAR 0 57
64057: PUSH
64058: LD_VAR 0 58
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: PUSH
64071: LD_VAR 0 4
64075: PUSH
64076: LD_INT 1
64078: PLUS
64079: ARRAY
64080: ST_TO_ADDR
64081: GO 64190
64083: LD_INT 31
64085: DOUBLE
64086: EQUAL
64087: IFTRUE 64133
64089: LD_INT 32
64091: DOUBLE
64092: EQUAL
64093: IFTRUE 64133
64095: LD_INT 33
64097: DOUBLE
64098: EQUAL
64099: IFTRUE 64133
64101: LD_INT 27
64103: DOUBLE
64104: EQUAL
64105: IFTRUE 64133
64107: LD_INT 26
64109: DOUBLE
64110: EQUAL
64111: IFTRUE 64133
64113: LD_INT 28
64115: DOUBLE
64116: EQUAL
64117: IFTRUE 64133
64119: LD_INT 29
64121: DOUBLE
64122: EQUAL
64123: IFTRUE 64133
64125: LD_INT 30
64127: DOUBLE
64128: EQUAL
64129: IFTRUE 64133
64131: GO 64189
64133: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64134: LD_ADDR_VAR 0 9
64138: PUSH
64139: LD_VAR 0 59
64143: PUSH
64144: LD_VAR 0 60
64148: PUSH
64149: LD_VAR 0 61
64153: PUSH
64154: LD_VAR 0 62
64158: PUSH
64159: LD_VAR 0 63
64163: PUSH
64164: LD_VAR 0 64
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: PUSH
64177: LD_VAR 0 4
64181: PUSH
64182: LD_INT 1
64184: PLUS
64185: ARRAY
64186: ST_TO_ADDR
64187: GO 64190
64189: POP
// temp_list2 = [ ] ;
64190: LD_ADDR_VAR 0 10
64194: PUSH
64195: EMPTY
64196: ST_TO_ADDR
// for i in temp_list do
64197: LD_ADDR_VAR 0 8
64201: PUSH
64202: LD_VAR 0 9
64206: PUSH
64207: FOR_IN
64208: IFFALSE 64260
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64210: LD_ADDR_VAR 0 10
64214: PUSH
64215: LD_VAR 0 10
64219: PUSH
64220: LD_VAR 0 8
64224: PUSH
64225: LD_INT 1
64227: ARRAY
64228: PUSH
64229: LD_VAR 0 2
64233: PLUS
64234: PUSH
64235: LD_VAR 0 8
64239: PUSH
64240: LD_INT 2
64242: ARRAY
64243: PUSH
64244: LD_VAR 0 3
64248: PLUS
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: ADD
64257: ST_TO_ADDR
64258: GO 64207
64260: POP
64261: POP
// result = temp_list2 ;
64262: LD_ADDR_VAR 0 7
64266: PUSH
64267: LD_VAR 0 10
64271: ST_TO_ADDR
// end ;
64272: LD_VAR 0 7
64276: RET
// export function EnemyInRange ( unit , dist ) ; begin
64277: LD_INT 0
64279: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64280: LD_ADDR_VAR 0 3
64284: PUSH
64285: LD_VAR 0 1
64289: PPUSH
64290: CALL_OW 255
64294: PPUSH
64295: LD_VAR 0 1
64299: PPUSH
64300: CALL_OW 250
64304: PPUSH
64305: LD_VAR 0 1
64309: PPUSH
64310: CALL_OW 251
64314: PPUSH
64315: LD_VAR 0 2
64319: PPUSH
64320: CALL 37650 0 4
64324: PUSH
64325: LD_INT 4
64327: ARRAY
64328: ST_TO_ADDR
// end ;
64329: LD_VAR 0 3
64333: RET
// export function PlayerSeeMe ( unit ) ; begin
64334: LD_INT 0
64336: PPUSH
// result := See ( your_side , unit ) ;
64337: LD_ADDR_VAR 0 2
64341: PUSH
64342: LD_OWVAR 2
64346: PPUSH
64347: LD_VAR 0 1
64351: PPUSH
64352: CALL_OW 292
64356: ST_TO_ADDR
// end ;
64357: LD_VAR 0 2
64361: RET
// export function ReverseDir ( unit ) ; begin
64362: LD_INT 0
64364: PPUSH
// if not unit then
64365: LD_VAR 0 1
64369: NOT
64370: IFFALSE 64374
// exit ;
64372: GO 64397
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64374: LD_ADDR_VAR 0 2
64378: PUSH
64379: LD_VAR 0 1
64383: PPUSH
64384: CALL_OW 254
64388: PUSH
64389: LD_INT 3
64391: PLUS
64392: PUSH
64393: LD_INT 6
64395: MOD
64396: ST_TO_ADDR
// end ;
64397: LD_VAR 0 2
64401: RET
// export function ReverseArray ( array ) ; var i ; begin
64402: LD_INT 0
64404: PPUSH
64405: PPUSH
// if not array then
64406: LD_VAR 0 1
64410: NOT
64411: IFFALSE 64415
// exit ;
64413: GO 64470
// result := [ ] ;
64415: LD_ADDR_VAR 0 2
64419: PUSH
64420: EMPTY
64421: ST_TO_ADDR
// for i := array downto 1 do
64422: LD_ADDR_VAR 0 3
64426: PUSH
64427: DOUBLE
64428: LD_VAR 0 1
64432: INC
64433: ST_TO_ADDR
64434: LD_INT 1
64436: PUSH
64437: FOR_DOWNTO
64438: IFFALSE 64468
// result := Join ( result , array [ i ] ) ;
64440: LD_ADDR_VAR 0 2
64444: PUSH
64445: LD_VAR 0 2
64449: PPUSH
64450: LD_VAR 0 1
64454: PUSH
64455: LD_VAR 0 3
64459: ARRAY
64460: PPUSH
64461: CALL 69115 0 2
64465: ST_TO_ADDR
64466: GO 64437
64468: POP
64469: POP
// end ;
64470: LD_VAR 0 2
64474: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64475: LD_INT 0
64477: PPUSH
64478: PPUSH
64479: PPUSH
64480: PPUSH
64481: PPUSH
64482: PPUSH
// if not unit or not hexes then
64483: LD_VAR 0 1
64487: NOT
64488: PUSH
64489: LD_VAR 0 2
64493: NOT
64494: OR
64495: IFFALSE 64499
// exit ;
64497: GO 64622
// dist := 9999 ;
64499: LD_ADDR_VAR 0 5
64503: PUSH
64504: LD_INT 9999
64506: ST_TO_ADDR
// for i = 1 to hexes do
64507: LD_ADDR_VAR 0 4
64511: PUSH
64512: DOUBLE
64513: LD_INT 1
64515: DEC
64516: ST_TO_ADDR
64517: LD_VAR 0 2
64521: PUSH
64522: FOR_TO
64523: IFFALSE 64610
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64525: LD_ADDR_VAR 0 6
64529: PUSH
64530: LD_VAR 0 1
64534: PPUSH
64535: LD_VAR 0 2
64539: PUSH
64540: LD_VAR 0 4
64544: ARRAY
64545: PUSH
64546: LD_INT 1
64548: ARRAY
64549: PPUSH
64550: LD_VAR 0 2
64554: PUSH
64555: LD_VAR 0 4
64559: ARRAY
64560: PUSH
64561: LD_INT 2
64563: ARRAY
64564: PPUSH
64565: CALL_OW 297
64569: ST_TO_ADDR
// if tdist < dist then
64570: LD_VAR 0 6
64574: PUSH
64575: LD_VAR 0 5
64579: LESS
64580: IFFALSE 64608
// begin hex := hexes [ i ] ;
64582: LD_ADDR_VAR 0 8
64586: PUSH
64587: LD_VAR 0 2
64591: PUSH
64592: LD_VAR 0 4
64596: ARRAY
64597: ST_TO_ADDR
// dist := tdist ;
64598: LD_ADDR_VAR 0 5
64602: PUSH
64603: LD_VAR 0 6
64607: ST_TO_ADDR
// end ; end ;
64608: GO 64522
64610: POP
64611: POP
// result := hex ;
64612: LD_ADDR_VAR 0 3
64616: PUSH
64617: LD_VAR 0 8
64621: ST_TO_ADDR
// end ;
64622: LD_VAR 0 3
64626: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64627: LD_INT 0
64629: PPUSH
64630: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64631: LD_VAR 0 1
64635: NOT
64636: PUSH
64637: LD_VAR 0 1
64641: PUSH
64642: LD_INT 21
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 23
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PPUSH
64666: CALL_OW 69
64670: IN
64671: NOT
64672: OR
64673: IFFALSE 64677
// exit ;
64675: GO 64724
// for i = 1 to 3 do
64677: LD_ADDR_VAR 0 3
64681: PUSH
64682: DOUBLE
64683: LD_INT 1
64685: DEC
64686: ST_TO_ADDR
64687: LD_INT 3
64689: PUSH
64690: FOR_TO
64691: IFFALSE 64722
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64693: LD_VAR 0 1
64697: PPUSH
64698: CALL_OW 250
64702: PPUSH
64703: LD_VAR 0 1
64707: PPUSH
64708: CALL_OW 251
64712: PPUSH
64713: LD_INT 1
64715: PPUSH
64716: CALL_OW 453
64720: GO 64690
64722: POP
64723: POP
// end ;
64724: LD_VAR 0 2
64728: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64729: LD_INT 0
64731: PPUSH
64732: PPUSH
64733: PPUSH
64734: PPUSH
64735: PPUSH
64736: PPUSH
// if not unit or not enemy_unit then
64737: LD_VAR 0 1
64741: NOT
64742: PUSH
64743: LD_VAR 0 2
64747: NOT
64748: OR
64749: IFFALSE 64753
// exit ;
64751: GO 65220
// if GetLives ( i ) < 250 then
64753: LD_VAR 0 4
64757: PPUSH
64758: CALL_OW 256
64762: PUSH
64763: LD_INT 250
64765: LESS
64766: IFFALSE 64779
// begin ComAutodestruct ( i ) ;
64768: LD_VAR 0 4
64772: PPUSH
64773: CALL 64627 0 1
// exit ;
64777: GO 65220
// end ; x := GetX ( enemy_unit ) ;
64779: LD_ADDR_VAR 0 7
64783: PUSH
64784: LD_VAR 0 2
64788: PPUSH
64789: CALL_OW 250
64793: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64794: LD_ADDR_VAR 0 8
64798: PUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: CALL_OW 251
64808: ST_TO_ADDR
// if not x or not y then
64809: LD_VAR 0 7
64813: NOT
64814: PUSH
64815: LD_VAR 0 8
64819: NOT
64820: OR
64821: IFFALSE 64825
// exit ;
64823: GO 65220
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64825: LD_ADDR_VAR 0 6
64829: PUSH
64830: LD_VAR 0 7
64834: PPUSH
64835: LD_INT 0
64837: PPUSH
64838: LD_INT 4
64840: PPUSH
64841: CALL_OW 272
64845: PUSH
64846: LD_VAR 0 8
64850: PPUSH
64851: LD_INT 0
64853: PPUSH
64854: LD_INT 4
64856: PPUSH
64857: CALL_OW 273
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_VAR 0 7
64870: PPUSH
64871: LD_INT 1
64873: PPUSH
64874: LD_INT 4
64876: PPUSH
64877: CALL_OW 272
64881: PUSH
64882: LD_VAR 0 8
64886: PPUSH
64887: LD_INT 1
64889: PPUSH
64890: LD_INT 4
64892: PPUSH
64893: CALL_OW 273
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_VAR 0 7
64906: PPUSH
64907: LD_INT 2
64909: PPUSH
64910: LD_INT 4
64912: PPUSH
64913: CALL_OW 272
64917: PUSH
64918: LD_VAR 0 8
64922: PPUSH
64923: LD_INT 2
64925: PPUSH
64926: LD_INT 4
64928: PPUSH
64929: CALL_OW 273
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_VAR 0 7
64942: PPUSH
64943: LD_INT 3
64945: PPUSH
64946: LD_INT 4
64948: PPUSH
64949: CALL_OW 272
64953: PUSH
64954: LD_VAR 0 8
64958: PPUSH
64959: LD_INT 3
64961: PPUSH
64962: LD_INT 4
64964: PPUSH
64965: CALL_OW 273
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_VAR 0 7
64978: PPUSH
64979: LD_INT 4
64981: PPUSH
64982: LD_INT 4
64984: PPUSH
64985: CALL_OW 272
64989: PUSH
64990: LD_VAR 0 8
64994: PPUSH
64995: LD_INT 4
64997: PPUSH
64998: LD_INT 4
65000: PPUSH
65001: CALL_OW 273
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_VAR 0 7
65014: PPUSH
65015: LD_INT 5
65017: PPUSH
65018: LD_INT 4
65020: PPUSH
65021: CALL_OW 272
65025: PUSH
65026: LD_VAR 0 8
65030: PPUSH
65031: LD_INT 5
65033: PPUSH
65034: LD_INT 4
65036: PPUSH
65037: CALL_OW 273
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: ST_TO_ADDR
// for i = tmp downto 1 do
65054: LD_ADDR_VAR 0 4
65058: PUSH
65059: DOUBLE
65060: LD_VAR 0 6
65064: INC
65065: ST_TO_ADDR
65066: LD_INT 1
65068: PUSH
65069: FOR_DOWNTO
65070: IFFALSE 65171
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65072: LD_VAR 0 6
65076: PUSH
65077: LD_VAR 0 4
65081: ARRAY
65082: PUSH
65083: LD_INT 1
65085: ARRAY
65086: PPUSH
65087: LD_VAR 0 6
65091: PUSH
65092: LD_VAR 0 4
65096: ARRAY
65097: PUSH
65098: LD_INT 2
65100: ARRAY
65101: PPUSH
65102: CALL_OW 488
65106: NOT
65107: PUSH
65108: LD_VAR 0 6
65112: PUSH
65113: LD_VAR 0 4
65117: ARRAY
65118: PUSH
65119: LD_INT 1
65121: ARRAY
65122: PPUSH
65123: LD_VAR 0 6
65127: PUSH
65128: LD_VAR 0 4
65132: ARRAY
65133: PUSH
65134: LD_INT 2
65136: ARRAY
65137: PPUSH
65138: CALL_OW 428
65142: PUSH
65143: LD_INT 0
65145: NONEQUAL
65146: OR
65147: IFFALSE 65169
// tmp := Delete ( tmp , i ) ;
65149: LD_ADDR_VAR 0 6
65153: PUSH
65154: LD_VAR 0 6
65158: PPUSH
65159: LD_VAR 0 4
65163: PPUSH
65164: CALL_OW 3
65168: ST_TO_ADDR
65169: GO 65069
65171: POP
65172: POP
// j := GetClosestHex ( unit , tmp ) ;
65173: LD_ADDR_VAR 0 5
65177: PUSH
65178: LD_VAR 0 1
65182: PPUSH
65183: LD_VAR 0 6
65187: PPUSH
65188: CALL 64475 0 2
65192: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65193: LD_VAR 0 1
65197: PPUSH
65198: LD_VAR 0 5
65202: PUSH
65203: LD_INT 1
65205: ARRAY
65206: PPUSH
65207: LD_VAR 0 5
65211: PUSH
65212: LD_INT 2
65214: ARRAY
65215: PPUSH
65216: CALL_OW 111
// end ;
65220: LD_VAR 0 3
65224: RET
// export function PrepareApemanSoldier ( ) ; begin
65225: LD_INT 0
65227: PPUSH
// uc_nation := 0 ;
65228: LD_ADDR_OWVAR 21
65232: PUSH
65233: LD_INT 0
65235: ST_TO_ADDR
// hc_sex := sex_male ;
65236: LD_ADDR_OWVAR 27
65240: PUSH
65241: LD_INT 1
65243: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65244: LD_ADDR_OWVAR 28
65248: PUSH
65249: LD_INT 15
65251: ST_TO_ADDR
// hc_gallery :=  ;
65252: LD_ADDR_OWVAR 33
65256: PUSH
65257: LD_STRING 
65259: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65260: LD_ADDR_OWVAR 31
65264: PUSH
65265: LD_INT 0
65267: PPUSH
65268: LD_INT 3
65270: PPUSH
65271: CALL_OW 12
65275: PUSH
65276: LD_INT 0
65278: PPUSH
65279: LD_INT 3
65281: PPUSH
65282: CALL_OW 12
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: ST_TO_ADDR
// end ;
65299: LD_VAR 0 1
65303: RET
// export function PrepareApemanEngineer ( ) ; begin
65304: LD_INT 0
65306: PPUSH
// uc_nation := 0 ;
65307: LD_ADDR_OWVAR 21
65311: PUSH
65312: LD_INT 0
65314: ST_TO_ADDR
// hc_sex := sex_male ;
65315: LD_ADDR_OWVAR 27
65319: PUSH
65320: LD_INT 1
65322: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65323: LD_ADDR_OWVAR 28
65327: PUSH
65328: LD_INT 16
65330: ST_TO_ADDR
// hc_gallery :=  ;
65331: LD_ADDR_OWVAR 33
65335: PUSH
65336: LD_STRING 
65338: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65339: LD_ADDR_OWVAR 31
65343: PUSH
65344: LD_INT 0
65346: PPUSH
65347: LD_INT 3
65349: PPUSH
65350: CALL_OW 12
65354: PUSH
65355: LD_INT 0
65357: PPUSH
65358: LD_INT 3
65360: PPUSH
65361: CALL_OW 12
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// end ;
65378: LD_VAR 0 1
65382: RET
// export function PrepareApeman ( agressivity ) ; begin
65383: LD_INT 0
65385: PPUSH
// uc_side := 0 ;
65386: LD_ADDR_OWVAR 20
65390: PUSH
65391: LD_INT 0
65393: ST_TO_ADDR
// uc_nation := 0 ;
65394: LD_ADDR_OWVAR 21
65398: PUSH
65399: LD_INT 0
65401: ST_TO_ADDR
// hc_sex := sex_male ;
65402: LD_ADDR_OWVAR 27
65406: PUSH
65407: LD_INT 1
65409: ST_TO_ADDR
// hc_class := class_apeman ;
65410: LD_ADDR_OWVAR 28
65414: PUSH
65415: LD_INT 12
65417: ST_TO_ADDR
// hc_gallery :=  ;
65418: LD_ADDR_OWVAR 33
65422: PUSH
65423: LD_STRING 
65425: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65426: LD_ADDR_OWVAR 35
65430: PUSH
65431: LD_VAR 0 1
65435: NEG
65436: PPUSH
65437: LD_VAR 0 1
65441: PPUSH
65442: CALL_OW 12
65446: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65447: LD_ADDR_OWVAR 31
65451: PUSH
65452: LD_INT 0
65454: PPUSH
65455: LD_INT 3
65457: PPUSH
65458: CALL_OW 12
65462: PUSH
65463: LD_INT 0
65465: PPUSH
65466: LD_INT 3
65468: PPUSH
65469: CALL_OW 12
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: ST_TO_ADDR
// end ;
65486: LD_VAR 0 2
65490: RET
// export function PrepareTiger ( agressivity ) ; begin
65491: LD_INT 0
65493: PPUSH
// uc_side := 0 ;
65494: LD_ADDR_OWVAR 20
65498: PUSH
65499: LD_INT 0
65501: ST_TO_ADDR
// uc_nation := 0 ;
65502: LD_ADDR_OWVAR 21
65506: PUSH
65507: LD_INT 0
65509: ST_TO_ADDR
// hc_class := class_tiger ;
65510: LD_ADDR_OWVAR 28
65514: PUSH
65515: LD_INT 14
65517: ST_TO_ADDR
// hc_gallery :=  ;
65518: LD_ADDR_OWVAR 33
65522: PUSH
65523: LD_STRING 
65525: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65526: LD_ADDR_OWVAR 35
65530: PUSH
65531: LD_VAR 0 1
65535: NEG
65536: PPUSH
65537: LD_VAR 0 1
65541: PPUSH
65542: CALL_OW 12
65546: ST_TO_ADDR
// end ;
65547: LD_VAR 0 2
65551: RET
// export function PrepareEnchidna ( ) ; begin
65552: LD_INT 0
65554: PPUSH
// uc_side := 0 ;
65555: LD_ADDR_OWVAR 20
65559: PUSH
65560: LD_INT 0
65562: ST_TO_ADDR
// uc_nation := 0 ;
65563: LD_ADDR_OWVAR 21
65567: PUSH
65568: LD_INT 0
65570: ST_TO_ADDR
// hc_class := class_baggie ;
65571: LD_ADDR_OWVAR 28
65575: PUSH
65576: LD_INT 13
65578: ST_TO_ADDR
// hc_gallery :=  ;
65579: LD_ADDR_OWVAR 33
65583: PUSH
65584: LD_STRING 
65586: ST_TO_ADDR
// end ;
65587: LD_VAR 0 1
65591: RET
// export function PrepareFrog ( ) ; begin
65592: LD_INT 0
65594: PPUSH
// uc_side := 0 ;
65595: LD_ADDR_OWVAR 20
65599: PUSH
65600: LD_INT 0
65602: ST_TO_ADDR
// uc_nation := 0 ;
65603: LD_ADDR_OWVAR 21
65607: PUSH
65608: LD_INT 0
65610: ST_TO_ADDR
// hc_class := class_frog ;
65611: LD_ADDR_OWVAR 28
65615: PUSH
65616: LD_INT 19
65618: ST_TO_ADDR
// hc_gallery :=  ;
65619: LD_ADDR_OWVAR 33
65623: PUSH
65624: LD_STRING 
65626: ST_TO_ADDR
// end ;
65627: LD_VAR 0 1
65631: RET
// export function PrepareFish ( ) ; begin
65632: LD_INT 0
65634: PPUSH
// uc_side := 0 ;
65635: LD_ADDR_OWVAR 20
65639: PUSH
65640: LD_INT 0
65642: ST_TO_ADDR
// uc_nation := 0 ;
65643: LD_ADDR_OWVAR 21
65647: PUSH
65648: LD_INT 0
65650: ST_TO_ADDR
// hc_class := class_fish ;
65651: LD_ADDR_OWVAR 28
65655: PUSH
65656: LD_INT 20
65658: ST_TO_ADDR
// hc_gallery :=  ;
65659: LD_ADDR_OWVAR 33
65663: PUSH
65664: LD_STRING 
65666: ST_TO_ADDR
// end ;
65667: LD_VAR 0 1
65671: RET
// export function PrepareBird ( ) ; begin
65672: LD_INT 0
65674: PPUSH
// uc_side := 0 ;
65675: LD_ADDR_OWVAR 20
65679: PUSH
65680: LD_INT 0
65682: ST_TO_ADDR
// uc_nation := 0 ;
65683: LD_ADDR_OWVAR 21
65687: PUSH
65688: LD_INT 0
65690: ST_TO_ADDR
// hc_class := class_phororhacos ;
65691: LD_ADDR_OWVAR 28
65695: PUSH
65696: LD_INT 18
65698: ST_TO_ADDR
// hc_gallery :=  ;
65699: LD_ADDR_OWVAR 33
65703: PUSH
65704: LD_STRING 
65706: ST_TO_ADDR
// end ;
65707: LD_VAR 0 1
65711: RET
// export function PrepareHorse ( ) ; begin
65712: LD_INT 0
65714: PPUSH
// uc_side := 0 ;
65715: LD_ADDR_OWVAR 20
65719: PUSH
65720: LD_INT 0
65722: ST_TO_ADDR
// uc_nation := 0 ;
65723: LD_ADDR_OWVAR 21
65727: PUSH
65728: LD_INT 0
65730: ST_TO_ADDR
// hc_class := class_horse ;
65731: LD_ADDR_OWVAR 28
65735: PUSH
65736: LD_INT 21
65738: ST_TO_ADDR
// hc_gallery :=  ;
65739: LD_ADDR_OWVAR 33
65743: PUSH
65744: LD_STRING 
65746: ST_TO_ADDR
// end ;
65747: LD_VAR 0 1
65751: RET
// export function PrepareMastodont ( ) ; begin
65752: LD_INT 0
65754: PPUSH
// uc_side := 0 ;
65755: LD_ADDR_OWVAR 20
65759: PUSH
65760: LD_INT 0
65762: ST_TO_ADDR
// uc_nation := 0 ;
65763: LD_ADDR_OWVAR 21
65767: PUSH
65768: LD_INT 0
65770: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65771: LD_ADDR_OWVAR 37
65775: PUSH
65776: LD_INT 31
65778: ST_TO_ADDR
// vc_control := control_rider ;
65779: LD_ADDR_OWVAR 38
65783: PUSH
65784: LD_INT 4
65786: ST_TO_ADDR
// end ;
65787: LD_VAR 0 1
65791: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65792: LD_INT 0
65794: PPUSH
65795: PPUSH
65796: PPUSH
// uc_side = 0 ;
65797: LD_ADDR_OWVAR 20
65801: PUSH
65802: LD_INT 0
65804: ST_TO_ADDR
// uc_nation = 0 ;
65805: LD_ADDR_OWVAR 21
65809: PUSH
65810: LD_INT 0
65812: ST_TO_ADDR
// InitHc_All ( ) ;
65813: CALL_OW 584
// InitVc ;
65817: CALL_OW 20
// if mastodonts then
65821: LD_VAR 0 6
65825: IFFALSE 65892
// for i = 1 to mastodonts do
65827: LD_ADDR_VAR 0 11
65831: PUSH
65832: DOUBLE
65833: LD_INT 1
65835: DEC
65836: ST_TO_ADDR
65837: LD_VAR 0 6
65841: PUSH
65842: FOR_TO
65843: IFFALSE 65890
// begin vc_chassis := 31 ;
65845: LD_ADDR_OWVAR 37
65849: PUSH
65850: LD_INT 31
65852: ST_TO_ADDR
// vc_control := control_rider ;
65853: LD_ADDR_OWVAR 38
65857: PUSH
65858: LD_INT 4
65860: ST_TO_ADDR
// animal := CreateVehicle ;
65861: LD_ADDR_VAR 0 12
65865: PUSH
65866: CALL_OW 45
65870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65871: LD_VAR 0 12
65875: PPUSH
65876: LD_VAR 0 8
65880: PPUSH
65881: LD_INT 0
65883: PPUSH
65884: CALL 68020 0 3
// end ;
65888: GO 65842
65890: POP
65891: POP
// if horses then
65892: LD_VAR 0 5
65896: IFFALSE 65963
// for i = 1 to horses do
65898: LD_ADDR_VAR 0 11
65902: PUSH
65903: DOUBLE
65904: LD_INT 1
65906: DEC
65907: ST_TO_ADDR
65908: LD_VAR 0 5
65912: PUSH
65913: FOR_TO
65914: IFFALSE 65961
// begin hc_class := 21 ;
65916: LD_ADDR_OWVAR 28
65920: PUSH
65921: LD_INT 21
65923: ST_TO_ADDR
// hc_gallery :=  ;
65924: LD_ADDR_OWVAR 33
65928: PUSH
65929: LD_STRING 
65931: ST_TO_ADDR
// animal := CreateHuman ;
65932: LD_ADDR_VAR 0 12
65936: PUSH
65937: CALL_OW 44
65941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65942: LD_VAR 0 12
65946: PPUSH
65947: LD_VAR 0 8
65951: PPUSH
65952: LD_INT 0
65954: PPUSH
65955: CALL 68020 0 3
// end ;
65959: GO 65913
65961: POP
65962: POP
// if birds then
65963: LD_VAR 0 1
65967: IFFALSE 66034
// for i = 1 to birds do
65969: LD_ADDR_VAR 0 11
65973: PUSH
65974: DOUBLE
65975: LD_INT 1
65977: DEC
65978: ST_TO_ADDR
65979: LD_VAR 0 1
65983: PUSH
65984: FOR_TO
65985: IFFALSE 66032
// begin hc_class := 18 ;
65987: LD_ADDR_OWVAR 28
65991: PUSH
65992: LD_INT 18
65994: ST_TO_ADDR
// hc_gallery =  ;
65995: LD_ADDR_OWVAR 33
65999: PUSH
66000: LD_STRING 
66002: ST_TO_ADDR
// animal := CreateHuman ;
66003: LD_ADDR_VAR 0 12
66007: PUSH
66008: CALL_OW 44
66012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66013: LD_VAR 0 12
66017: PPUSH
66018: LD_VAR 0 8
66022: PPUSH
66023: LD_INT 0
66025: PPUSH
66026: CALL 68020 0 3
// end ;
66030: GO 65984
66032: POP
66033: POP
// if tigers then
66034: LD_VAR 0 2
66038: IFFALSE 66122
// for i = 1 to tigers do
66040: LD_ADDR_VAR 0 11
66044: PUSH
66045: DOUBLE
66046: LD_INT 1
66048: DEC
66049: ST_TO_ADDR
66050: LD_VAR 0 2
66054: PUSH
66055: FOR_TO
66056: IFFALSE 66120
// begin hc_class = class_tiger ;
66058: LD_ADDR_OWVAR 28
66062: PUSH
66063: LD_INT 14
66065: ST_TO_ADDR
// hc_gallery =  ;
66066: LD_ADDR_OWVAR 33
66070: PUSH
66071: LD_STRING 
66073: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66074: LD_ADDR_OWVAR 35
66078: PUSH
66079: LD_INT 7
66081: NEG
66082: PPUSH
66083: LD_INT 7
66085: PPUSH
66086: CALL_OW 12
66090: ST_TO_ADDR
// animal := CreateHuman ;
66091: LD_ADDR_VAR 0 12
66095: PUSH
66096: CALL_OW 44
66100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66101: LD_VAR 0 12
66105: PPUSH
66106: LD_VAR 0 8
66110: PPUSH
66111: LD_INT 0
66113: PPUSH
66114: CALL 68020 0 3
// end ;
66118: GO 66055
66120: POP
66121: POP
// if apemans then
66122: LD_VAR 0 3
66126: IFFALSE 66249
// for i = 1 to apemans do
66128: LD_ADDR_VAR 0 11
66132: PUSH
66133: DOUBLE
66134: LD_INT 1
66136: DEC
66137: ST_TO_ADDR
66138: LD_VAR 0 3
66142: PUSH
66143: FOR_TO
66144: IFFALSE 66247
// begin hc_class = class_apeman ;
66146: LD_ADDR_OWVAR 28
66150: PUSH
66151: LD_INT 12
66153: ST_TO_ADDR
// hc_gallery =  ;
66154: LD_ADDR_OWVAR 33
66158: PUSH
66159: LD_STRING 
66161: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66162: LD_ADDR_OWVAR 35
66166: PUSH
66167: LD_INT 2
66169: NEG
66170: PPUSH
66171: LD_INT 2
66173: PPUSH
66174: CALL_OW 12
66178: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66179: LD_ADDR_OWVAR 31
66183: PUSH
66184: LD_INT 1
66186: PPUSH
66187: LD_INT 3
66189: PPUSH
66190: CALL_OW 12
66194: PUSH
66195: LD_INT 1
66197: PPUSH
66198: LD_INT 3
66200: PPUSH
66201: CALL_OW 12
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// animal := CreateHuman ;
66218: LD_ADDR_VAR 0 12
66222: PUSH
66223: CALL_OW 44
66227: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66228: LD_VAR 0 12
66232: PPUSH
66233: LD_VAR 0 8
66237: PPUSH
66238: LD_INT 0
66240: PPUSH
66241: CALL 68020 0 3
// end ;
66245: GO 66143
66247: POP
66248: POP
// if enchidnas then
66249: LD_VAR 0 4
66253: IFFALSE 66320
// for i = 1 to enchidnas do
66255: LD_ADDR_VAR 0 11
66259: PUSH
66260: DOUBLE
66261: LD_INT 1
66263: DEC
66264: ST_TO_ADDR
66265: LD_VAR 0 4
66269: PUSH
66270: FOR_TO
66271: IFFALSE 66318
// begin hc_class = 13 ;
66273: LD_ADDR_OWVAR 28
66277: PUSH
66278: LD_INT 13
66280: ST_TO_ADDR
// hc_gallery =  ;
66281: LD_ADDR_OWVAR 33
66285: PUSH
66286: LD_STRING 
66288: ST_TO_ADDR
// animal := CreateHuman ;
66289: LD_ADDR_VAR 0 12
66293: PUSH
66294: CALL_OW 44
66298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66299: LD_VAR 0 12
66303: PPUSH
66304: LD_VAR 0 8
66308: PPUSH
66309: LD_INT 0
66311: PPUSH
66312: CALL 68020 0 3
// end ;
66316: GO 66270
66318: POP
66319: POP
// if fishes then
66320: LD_VAR 0 7
66324: IFFALSE 66391
// for i = 1 to fishes do
66326: LD_ADDR_VAR 0 11
66330: PUSH
66331: DOUBLE
66332: LD_INT 1
66334: DEC
66335: ST_TO_ADDR
66336: LD_VAR 0 7
66340: PUSH
66341: FOR_TO
66342: IFFALSE 66389
// begin hc_class = 20 ;
66344: LD_ADDR_OWVAR 28
66348: PUSH
66349: LD_INT 20
66351: ST_TO_ADDR
// hc_gallery =  ;
66352: LD_ADDR_OWVAR 33
66356: PUSH
66357: LD_STRING 
66359: ST_TO_ADDR
// animal := CreateHuman ;
66360: LD_ADDR_VAR 0 12
66364: PUSH
66365: CALL_OW 44
66369: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66370: LD_VAR 0 12
66374: PPUSH
66375: LD_VAR 0 9
66379: PPUSH
66380: LD_INT 0
66382: PPUSH
66383: CALL 68020 0 3
// end ;
66387: GO 66341
66389: POP
66390: POP
// end ;
66391: LD_VAR 0 10
66395: RET
// export function WantHeal ( sci , unit ) ; begin
66396: LD_INT 0
66398: PPUSH
// if GetTaskList ( sci ) > 0 then
66399: LD_VAR 0 1
66403: PPUSH
66404: CALL_OW 437
66408: PUSH
66409: LD_INT 0
66411: GREATER
66412: IFFALSE 66482
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66414: LD_VAR 0 1
66418: PPUSH
66419: CALL_OW 437
66423: PUSH
66424: LD_INT 1
66426: ARRAY
66427: PUSH
66428: LD_INT 1
66430: ARRAY
66431: PUSH
66432: LD_STRING l
66434: EQUAL
66435: PUSH
66436: LD_VAR 0 1
66440: PPUSH
66441: CALL_OW 437
66445: PUSH
66446: LD_INT 1
66448: ARRAY
66449: PUSH
66450: LD_INT 4
66452: ARRAY
66453: PUSH
66454: LD_VAR 0 2
66458: EQUAL
66459: AND
66460: IFFALSE 66472
// result := true else
66462: LD_ADDR_VAR 0 3
66466: PUSH
66467: LD_INT 1
66469: ST_TO_ADDR
66470: GO 66480
// result := false ;
66472: LD_ADDR_VAR 0 3
66476: PUSH
66477: LD_INT 0
66479: ST_TO_ADDR
// end else
66480: GO 66490
// result := false ;
66482: LD_ADDR_VAR 0 3
66486: PUSH
66487: LD_INT 0
66489: ST_TO_ADDR
// end ;
66490: LD_VAR 0 3
66494: RET
// export function HealTarget ( sci ) ; begin
66495: LD_INT 0
66497: PPUSH
// if not sci then
66498: LD_VAR 0 1
66502: NOT
66503: IFFALSE 66507
// exit ;
66505: GO 66572
// result := 0 ;
66507: LD_ADDR_VAR 0 2
66511: PUSH
66512: LD_INT 0
66514: ST_TO_ADDR
// if GetTaskList ( sci ) then
66515: LD_VAR 0 1
66519: PPUSH
66520: CALL_OW 437
66524: IFFALSE 66572
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66526: LD_VAR 0 1
66530: PPUSH
66531: CALL_OW 437
66535: PUSH
66536: LD_INT 1
66538: ARRAY
66539: PUSH
66540: LD_INT 1
66542: ARRAY
66543: PUSH
66544: LD_STRING l
66546: EQUAL
66547: IFFALSE 66572
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66549: LD_ADDR_VAR 0 2
66553: PUSH
66554: LD_VAR 0 1
66558: PPUSH
66559: CALL_OW 437
66563: PUSH
66564: LD_INT 1
66566: ARRAY
66567: PUSH
66568: LD_INT 4
66570: ARRAY
66571: ST_TO_ADDR
// end ;
66572: LD_VAR 0 2
66576: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66577: LD_INT 0
66579: PPUSH
66580: PPUSH
66581: PPUSH
66582: PPUSH
// if not base_units then
66583: LD_VAR 0 1
66587: NOT
66588: IFFALSE 66592
// exit ;
66590: GO 66679
// result := false ;
66592: LD_ADDR_VAR 0 2
66596: PUSH
66597: LD_INT 0
66599: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66600: LD_ADDR_VAR 0 5
66604: PUSH
66605: LD_VAR 0 1
66609: PPUSH
66610: LD_INT 21
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PPUSH
66620: CALL_OW 72
66624: ST_TO_ADDR
// if not tmp then
66625: LD_VAR 0 5
66629: NOT
66630: IFFALSE 66634
// exit ;
66632: GO 66679
// for i in tmp do
66634: LD_ADDR_VAR 0 3
66638: PUSH
66639: LD_VAR 0 5
66643: PUSH
66644: FOR_IN
66645: IFFALSE 66677
// begin result := EnemyInRange ( i , 22 ) ;
66647: LD_ADDR_VAR 0 2
66651: PUSH
66652: LD_VAR 0 3
66656: PPUSH
66657: LD_INT 22
66659: PPUSH
66660: CALL 64277 0 2
66664: ST_TO_ADDR
// if result then
66665: LD_VAR 0 2
66669: IFFALSE 66675
// exit ;
66671: POP
66672: POP
66673: GO 66679
// end ;
66675: GO 66644
66677: POP
66678: POP
// end ;
66679: LD_VAR 0 2
66683: RET
// export function FilterByTag ( units , tag ) ; begin
66684: LD_INT 0
66686: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66687: LD_ADDR_VAR 0 3
66691: PUSH
66692: LD_VAR 0 1
66696: PPUSH
66697: LD_INT 120
66699: PUSH
66700: LD_VAR 0 2
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PPUSH
66709: CALL_OW 72
66713: ST_TO_ADDR
// end ;
66714: LD_VAR 0 3
66718: RET
// export function IsDriver ( un ) ; begin
66719: LD_INT 0
66721: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66722: LD_ADDR_VAR 0 2
66726: PUSH
66727: LD_VAR 0 1
66731: PUSH
66732: LD_INT 55
66734: PUSH
66735: EMPTY
66736: LIST
66737: PPUSH
66738: CALL_OW 69
66742: IN
66743: ST_TO_ADDR
// end ;
66744: LD_VAR 0 2
66748: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66749: LD_INT 0
66751: PPUSH
66752: PPUSH
// list := [ ] ;
66753: LD_ADDR_VAR 0 5
66757: PUSH
66758: EMPTY
66759: ST_TO_ADDR
// case d of 0 :
66760: LD_VAR 0 3
66764: PUSH
66765: LD_INT 0
66767: DOUBLE
66768: EQUAL
66769: IFTRUE 66773
66771: GO 66906
66773: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66774: LD_ADDR_VAR 0 5
66778: PUSH
66779: LD_VAR 0 1
66783: PUSH
66784: LD_INT 4
66786: MINUS
66787: PUSH
66788: LD_VAR 0 2
66792: PUSH
66793: LD_INT 4
66795: MINUS
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: PUSH
66805: LD_VAR 0 1
66809: PUSH
66810: LD_INT 3
66812: MINUS
66813: PUSH
66814: LD_VAR 0 2
66818: PUSH
66819: LD_INT 1
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: LIST
66826: PUSH
66827: LD_VAR 0 1
66831: PUSH
66832: LD_INT 4
66834: PLUS
66835: PUSH
66836: LD_VAR 0 2
66840: PUSH
66841: LD_INT 4
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: LIST
66848: PUSH
66849: LD_VAR 0 1
66853: PUSH
66854: LD_INT 3
66856: PLUS
66857: PUSH
66858: LD_VAR 0 2
66862: PUSH
66863: LD_INT 3
66865: PLUS
66866: PUSH
66867: LD_INT 5
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: LIST
66874: PUSH
66875: LD_VAR 0 1
66879: PUSH
66880: LD_VAR 0 2
66884: PUSH
66885: LD_INT 4
66887: PLUS
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: LIST
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: ST_TO_ADDR
// end ; 1 :
66904: GO 67604
66906: LD_INT 1
66908: DOUBLE
66909: EQUAL
66910: IFTRUE 66914
66912: GO 67047
66914: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66915: LD_ADDR_VAR 0 5
66919: PUSH
66920: LD_VAR 0 1
66924: PUSH
66925: LD_VAR 0 2
66929: PUSH
66930: LD_INT 4
66932: MINUS
66933: PUSH
66934: LD_INT 3
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: LIST
66941: PUSH
66942: LD_VAR 0 1
66946: PUSH
66947: LD_INT 3
66949: MINUS
66950: PUSH
66951: LD_VAR 0 2
66955: PUSH
66956: LD_INT 3
66958: MINUS
66959: PUSH
66960: LD_INT 2
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: LIST
66967: PUSH
66968: LD_VAR 0 1
66972: PUSH
66973: LD_INT 4
66975: MINUS
66976: PUSH
66977: LD_VAR 0 2
66981: PUSH
66982: LD_INT 1
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: PUSH
66990: LD_VAR 0 1
66994: PUSH
66995: LD_VAR 0 2
66999: PUSH
67000: LD_INT 3
67002: PLUS
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: PUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_INT 4
67019: PLUS
67020: PUSH
67021: LD_VAR 0 2
67025: PUSH
67026: LD_INT 4
67028: PLUS
67029: PUSH
67030: LD_INT 5
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// end ; 2 :
67045: GO 67604
67047: LD_INT 2
67049: DOUBLE
67050: EQUAL
67051: IFTRUE 67055
67053: GO 67184
67055: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67056: LD_ADDR_VAR 0 5
67060: PUSH
67061: LD_VAR 0 1
67065: PUSH
67066: LD_VAR 0 2
67070: PUSH
67071: LD_INT 3
67073: MINUS
67074: PUSH
67075: LD_INT 3
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: LIST
67082: PUSH
67083: LD_VAR 0 1
67087: PUSH
67088: LD_INT 4
67090: PLUS
67091: PUSH
67092: LD_VAR 0 2
67096: PUSH
67097: LD_INT 4
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: PUSH
67105: LD_VAR 0 1
67109: PUSH
67110: LD_VAR 0 2
67114: PUSH
67115: LD_INT 4
67117: PLUS
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: LIST
67126: PUSH
67127: LD_VAR 0 1
67131: PUSH
67132: LD_INT 3
67134: MINUS
67135: PUSH
67136: LD_VAR 0 2
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: PUSH
67149: LD_VAR 0 1
67153: PUSH
67154: LD_INT 4
67156: MINUS
67157: PUSH
67158: LD_VAR 0 2
67162: PUSH
67163: LD_INT 4
67165: MINUS
67166: PUSH
67167: LD_INT 2
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: ST_TO_ADDR
// end ; 3 :
67182: GO 67604
67184: LD_INT 3
67186: DOUBLE
67187: EQUAL
67188: IFTRUE 67192
67190: GO 67325
67192: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67193: LD_ADDR_VAR 0 5
67197: PUSH
67198: LD_VAR 0 1
67202: PUSH
67203: LD_INT 3
67205: PLUS
67206: PUSH
67207: LD_VAR 0 2
67211: PUSH
67212: LD_INT 4
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: LIST
67219: PUSH
67220: LD_VAR 0 1
67224: PUSH
67225: LD_INT 4
67227: PLUS
67228: PUSH
67229: LD_VAR 0 2
67233: PUSH
67234: LD_INT 4
67236: PLUS
67237: PUSH
67238: LD_INT 5
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: LIST
67245: PUSH
67246: LD_VAR 0 1
67250: PUSH
67251: LD_INT 4
67253: MINUS
67254: PUSH
67255: LD_VAR 0 2
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: LIST
67267: PUSH
67268: LD_VAR 0 1
67272: PUSH
67273: LD_VAR 0 2
67277: PUSH
67278: LD_INT 4
67280: MINUS
67281: PUSH
67282: LD_INT 3
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: PUSH
67290: LD_VAR 0 1
67294: PUSH
67295: LD_INT 3
67297: MINUS
67298: PUSH
67299: LD_VAR 0 2
67303: PUSH
67304: LD_INT 3
67306: MINUS
67307: PUSH
67308: LD_INT 2
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: ST_TO_ADDR
// end ; 4 :
67323: GO 67604
67325: LD_INT 4
67327: DOUBLE
67328: EQUAL
67329: IFTRUE 67333
67331: GO 67466
67333: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67334: LD_ADDR_VAR 0 5
67338: PUSH
67339: LD_VAR 0 1
67343: PUSH
67344: LD_VAR 0 2
67348: PUSH
67349: LD_INT 4
67351: PLUS
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: PUSH
67361: LD_VAR 0 1
67365: PUSH
67366: LD_INT 3
67368: PLUS
67369: PUSH
67370: LD_VAR 0 2
67374: PUSH
67375: LD_INT 3
67377: PLUS
67378: PUSH
67379: LD_INT 5
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: PUSH
67387: LD_VAR 0 1
67391: PUSH
67392: LD_INT 4
67394: PLUS
67395: PUSH
67396: LD_VAR 0 2
67400: PUSH
67401: LD_INT 4
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: PUSH
67409: LD_VAR 0 1
67413: PUSH
67414: LD_VAR 0 2
67418: PUSH
67419: LD_INT 3
67421: MINUS
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: LIST
67430: PUSH
67431: LD_VAR 0 1
67435: PUSH
67436: LD_INT 4
67438: MINUS
67439: PUSH
67440: LD_VAR 0 2
67444: PUSH
67445: LD_INT 4
67447: MINUS
67448: PUSH
67449: LD_INT 2
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: ST_TO_ADDR
// end ; 5 :
67464: GO 67604
67466: LD_INT 5
67468: DOUBLE
67469: EQUAL
67470: IFTRUE 67474
67472: GO 67603
67474: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67475: LD_ADDR_VAR 0 5
67479: PUSH
67480: LD_VAR 0 1
67484: PUSH
67485: LD_INT 4
67487: MINUS
67488: PUSH
67489: LD_VAR 0 2
67493: PUSH
67494: LD_INT 1
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: PUSH
67502: LD_VAR 0 1
67506: PUSH
67507: LD_VAR 0 2
67511: PUSH
67512: LD_INT 4
67514: MINUS
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: LIST
67523: PUSH
67524: LD_VAR 0 1
67528: PUSH
67529: LD_INT 4
67531: PLUS
67532: PUSH
67533: LD_VAR 0 2
67537: PUSH
67538: LD_INT 4
67540: PLUS
67541: PUSH
67542: LD_INT 5
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: LIST
67549: PUSH
67550: LD_VAR 0 1
67554: PUSH
67555: LD_INT 3
67557: PLUS
67558: PUSH
67559: LD_VAR 0 2
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: LIST
67571: PUSH
67572: LD_VAR 0 1
67576: PUSH
67577: LD_VAR 0 2
67581: PUSH
67582: LD_INT 3
67584: PLUS
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: ST_TO_ADDR
// end ; end ;
67601: GO 67604
67603: POP
// result := list ;
67604: LD_ADDR_VAR 0 4
67608: PUSH
67609: LD_VAR 0 5
67613: ST_TO_ADDR
// end ;
67614: LD_VAR 0 4
67618: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67619: LD_INT 0
67621: PPUSH
67622: PPUSH
67623: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67624: LD_VAR 0 1
67628: NOT
67629: PUSH
67630: LD_VAR 0 2
67634: PUSH
67635: LD_INT 1
67637: PUSH
67638: LD_INT 2
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: LD_INT 4
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: IN
67653: NOT
67654: OR
67655: IFFALSE 67659
// exit ;
67657: GO 67742
// tmp := [ ] ;
67659: LD_ADDR_VAR 0 5
67663: PUSH
67664: EMPTY
67665: ST_TO_ADDR
// for i in units do
67666: LD_ADDR_VAR 0 4
67670: PUSH
67671: LD_VAR 0 1
67675: PUSH
67676: FOR_IN
67677: IFFALSE 67711
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67679: LD_ADDR_VAR 0 5
67683: PUSH
67684: LD_VAR 0 5
67688: PPUSH
67689: LD_VAR 0 4
67693: PPUSH
67694: LD_VAR 0 2
67698: PPUSH
67699: CALL_OW 259
67703: PPUSH
67704: CALL 69115 0 2
67708: ST_TO_ADDR
67709: GO 67676
67711: POP
67712: POP
// if not tmp then
67713: LD_VAR 0 5
67717: NOT
67718: IFFALSE 67722
// exit ;
67720: GO 67742
// result := SortListByListDesc ( units , tmp ) ;
67722: LD_ADDR_VAR 0 3
67726: PUSH
67727: LD_VAR 0 1
67731: PPUSH
67732: LD_VAR 0 5
67736: PPUSH
67737: CALL_OW 77
67741: ST_TO_ADDR
// end ;
67742: LD_VAR 0 3
67746: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67747: LD_INT 0
67749: PPUSH
67750: PPUSH
67751: PPUSH
// result := false ;
67752: LD_ADDR_VAR 0 3
67756: PUSH
67757: LD_INT 0
67759: ST_TO_ADDR
// if not building then
67760: LD_VAR 0 2
67764: NOT
67765: IFFALSE 67769
// exit ;
67767: GO 67907
// x := GetX ( building ) ;
67769: LD_ADDR_VAR 0 4
67773: PUSH
67774: LD_VAR 0 2
67778: PPUSH
67779: CALL_OW 250
67783: ST_TO_ADDR
// y := GetY ( building ) ;
67784: LD_ADDR_VAR 0 5
67788: PUSH
67789: LD_VAR 0 2
67793: PPUSH
67794: CALL_OW 251
67798: ST_TO_ADDR
// if not x or not y then
67799: LD_VAR 0 4
67803: NOT
67804: PUSH
67805: LD_VAR 0 5
67809: NOT
67810: OR
67811: IFFALSE 67815
// exit ;
67813: GO 67907
// if GetTaskList ( unit ) then
67815: LD_VAR 0 1
67819: PPUSH
67820: CALL_OW 437
67824: IFFALSE 67907
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67826: LD_STRING e
67828: PUSH
67829: LD_VAR 0 1
67833: PPUSH
67834: CALL_OW 437
67838: PUSH
67839: LD_INT 1
67841: ARRAY
67842: PUSH
67843: LD_INT 1
67845: ARRAY
67846: EQUAL
67847: PUSH
67848: LD_VAR 0 4
67852: PUSH
67853: LD_VAR 0 1
67857: PPUSH
67858: CALL_OW 437
67862: PUSH
67863: LD_INT 1
67865: ARRAY
67866: PUSH
67867: LD_INT 2
67869: ARRAY
67870: EQUAL
67871: AND
67872: PUSH
67873: LD_VAR 0 5
67877: PUSH
67878: LD_VAR 0 1
67882: PPUSH
67883: CALL_OW 437
67887: PUSH
67888: LD_INT 1
67890: ARRAY
67891: PUSH
67892: LD_INT 3
67894: ARRAY
67895: EQUAL
67896: AND
67897: IFFALSE 67907
// result := true end ;
67899: LD_ADDR_VAR 0 3
67903: PUSH
67904: LD_INT 1
67906: ST_TO_ADDR
// end ;
67907: LD_VAR 0 3
67911: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67912: LD_INT 0
67914: PPUSH
// result := false ;
67915: LD_ADDR_VAR 0 4
67919: PUSH
67920: LD_INT 0
67922: ST_TO_ADDR
// if GetTaskList ( unit ) then
67923: LD_VAR 0 1
67927: PPUSH
67928: CALL_OW 437
67932: IFFALSE 68015
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67934: LD_STRING M
67936: PUSH
67937: LD_VAR 0 1
67941: PPUSH
67942: CALL_OW 437
67946: PUSH
67947: LD_INT 1
67949: ARRAY
67950: PUSH
67951: LD_INT 1
67953: ARRAY
67954: EQUAL
67955: PUSH
67956: LD_VAR 0 2
67960: PUSH
67961: LD_VAR 0 1
67965: PPUSH
67966: CALL_OW 437
67970: PUSH
67971: LD_INT 1
67973: ARRAY
67974: PUSH
67975: LD_INT 2
67977: ARRAY
67978: EQUAL
67979: AND
67980: PUSH
67981: LD_VAR 0 3
67985: PUSH
67986: LD_VAR 0 1
67990: PPUSH
67991: CALL_OW 437
67995: PUSH
67996: LD_INT 1
67998: ARRAY
67999: PUSH
68000: LD_INT 3
68002: ARRAY
68003: EQUAL
68004: AND
68005: IFFALSE 68015
// result := true ;
68007: LD_ADDR_VAR 0 4
68011: PUSH
68012: LD_INT 1
68014: ST_TO_ADDR
// end ; end ;
68015: LD_VAR 0 4
68019: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68020: LD_INT 0
68022: PPUSH
68023: PPUSH
68024: PPUSH
68025: PPUSH
// if not unit or not area then
68026: LD_VAR 0 1
68030: NOT
68031: PUSH
68032: LD_VAR 0 2
68036: NOT
68037: OR
68038: IFFALSE 68042
// exit ;
68040: GO 68218
// tmp := AreaToList ( area , i ) ;
68042: LD_ADDR_VAR 0 6
68046: PUSH
68047: LD_VAR 0 2
68051: PPUSH
68052: LD_VAR 0 5
68056: PPUSH
68057: CALL_OW 517
68061: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68062: LD_ADDR_VAR 0 5
68066: PUSH
68067: DOUBLE
68068: LD_INT 1
68070: DEC
68071: ST_TO_ADDR
68072: LD_VAR 0 6
68076: PUSH
68077: LD_INT 1
68079: ARRAY
68080: PUSH
68081: FOR_TO
68082: IFFALSE 68216
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68084: LD_ADDR_VAR 0 7
68088: PUSH
68089: LD_VAR 0 6
68093: PUSH
68094: LD_INT 1
68096: ARRAY
68097: PUSH
68098: LD_VAR 0 5
68102: ARRAY
68103: PUSH
68104: LD_VAR 0 6
68108: PUSH
68109: LD_INT 2
68111: ARRAY
68112: PUSH
68113: LD_VAR 0 5
68117: ARRAY
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68123: LD_INT 92
68125: PUSH
68126: LD_VAR 0 7
68130: PUSH
68131: LD_INT 1
68133: ARRAY
68134: PUSH
68135: LD_VAR 0 7
68139: PUSH
68140: LD_INT 2
68142: ARRAY
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: PPUSH
68153: CALL_OW 69
68157: PUSH
68158: LD_INT 0
68160: EQUAL
68161: IFFALSE 68214
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68163: LD_VAR 0 1
68167: PPUSH
68168: LD_VAR 0 7
68172: PUSH
68173: LD_INT 1
68175: ARRAY
68176: PPUSH
68177: LD_VAR 0 7
68181: PUSH
68182: LD_INT 2
68184: ARRAY
68185: PPUSH
68186: LD_VAR 0 3
68190: PPUSH
68191: CALL_OW 48
// result := IsPlaced ( unit ) ;
68195: LD_ADDR_VAR 0 4
68199: PUSH
68200: LD_VAR 0 1
68204: PPUSH
68205: CALL_OW 305
68209: ST_TO_ADDR
// exit ;
68210: POP
68211: POP
68212: GO 68218
// end ; end ;
68214: GO 68081
68216: POP
68217: POP
// end ;
68218: LD_VAR 0 4
68222: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68223: LD_INT 0
68225: PPUSH
68226: PPUSH
68227: PPUSH
// if not side or side > 8 then
68228: LD_VAR 0 1
68232: NOT
68233: PUSH
68234: LD_VAR 0 1
68238: PUSH
68239: LD_INT 8
68241: GREATER
68242: OR
68243: IFFALSE 68247
// exit ;
68245: GO 68434
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68247: LD_ADDR_VAR 0 4
68251: PUSH
68252: LD_INT 22
68254: PUSH
68255: LD_VAR 0 1
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 21
68266: PUSH
68267: LD_INT 3
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PPUSH
68278: CALL_OW 69
68282: ST_TO_ADDR
// if not tmp then
68283: LD_VAR 0 4
68287: NOT
68288: IFFALSE 68292
// exit ;
68290: GO 68434
// enable_addtolog := true ;
68292: LD_ADDR_OWVAR 81
68296: PUSH
68297: LD_INT 1
68299: ST_TO_ADDR
// AddToLog ( [ ) ;
68300: LD_STRING [
68302: PPUSH
68303: CALL_OW 561
// for i in tmp do
68307: LD_ADDR_VAR 0 3
68311: PUSH
68312: LD_VAR 0 4
68316: PUSH
68317: FOR_IN
68318: IFFALSE 68425
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68320: LD_STRING [
68322: PUSH
68323: LD_VAR 0 3
68327: PPUSH
68328: CALL_OW 266
68332: STR
68333: PUSH
68334: LD_STRING , 
68336: STR
68337: PUSH
68338: LD_VAR 0 3
68342: PPUSH
68343: CALL_OW 250
68347: STR
68348: PUSH
68349: LD_STRING , 
68351: STR
68352: PUSH
68353: LD_VAR 0 3
68357: PPUSH
68358: CALL_OW 251
68362: STR
68363: PUSH
68364: LD_STRING , 
68366: STR
68367: PUSH
68368: LD_VAR 0 3
68372: PPUSH
68373: CALL_OW 254
68377: STR
68378: PUSH
68379: LD_STRING , 
68381: STR
68382: PUSH
68383: LD_VAR 0 3
68387: PPUSH
68388: LD_INT 1
68390: PPUSH
68391: CALL_OW 268
68395: STR
68396: PUSH
68397: LD_STRING , 
68399: STR
68400: PUSH
68401: LD_VAR 0 3
68405: PPUSH
68406: LD_INT 2
68408: PPUSH
68409: CALL_OW 268
68413: STR
68414: PUSH
68415: LD_STRING ],
68417: STR
68418: PPUSH
68419: CALL_OW 561
// end ;
68423: GO 68317
68425: POP
68426: POP
// AddToLog ( ]; ) ;
68427: LD_STRING ];
68429: PPUSH
68430: CALL_OW 561
// end ;
68434: LD_VAR 0 2
68438: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68439: LD_INT 0
68441: PPUSH
68442: PPUSH
68443: PPUSH
68444: PPUSH
68445: PPUSH
// if not area or not rate or not max then
68446: LD_VAR 0 1
68450: NOT
68451: PUSH
68452: LD_VAR 0 2
68456: NOT
68457: OR
68458: PUSH
68459: LD_VAR 0 4
68463: NOT
68464: OR
68465: IFFALSE 68469
// exit ;
68467: GO 68658
// while 1 do
68469: LD_INT 1
68471: IFFALSE 68658
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68473: LD_ADDR_VAR 0 9
68477: PUSH
68478: LD_VAR 0 1
68482: PPUSH
68483: LD_INT 1
68485: PPUSH
68486: CALL_OW 287
68490: PUSH
68491: LD_INT 10
68493: MUL
68494: ST_TO_ADDR
// r := rate / 10 ;
68495: LD_ADDR_VAR 0 7
68499: PUSH
68500: LD_VAR 0 2
68504: PUSH
68505: LD_INT 10
68507: DIVREAL
68508: ST_TO_ADDR
// time := 1 1$00 ;
68509: LD_ADDR_VAR 0 8
68513: PUSH
68514: LD_INT 2100
68516: ST_TO_ADDR
// if amount < min then
68517: LD_VAR 0 9
68521: PUSH
68522: LD_VAR 0 3
68526: LESS
68527: IFFALSE 68545
// r := r * 2 else
68529: LD_ADDR_VAR 0 7
68533: PUSH
68534: LD_VAR 0 7
68538: PUSH
68539: LD_INT 2
68541: MUL
68542: ST_TO_ADDR
68543: GO 68571
// if amount > max then
68545: LD_VAR 0 9
68549: PUSH
68550: LD_VAR 0 4
68554: GREATER
68555: IFFALSE 68571
// r := r / 2 ;
68557: LD_ADDR_VAR 0 7
68561: PUSH
68562: LD_VAR 0 7
68566: PUSH
68567: LD_INT 2
68569: DIVREAL
68570: ST_TO_ADDR
// time := time / r ;
68571: LD_ADDR_VAR 0 8
68575: PUSH
68576: LD_VAR 0 8
68580: PUSH
68581: LD_VAR 0 7
68585: DIVREAL
68586: ST_TO_ADDR
// if time < 0 then
68587: LD_VAR 0 8
68591: PUSH
68592: LD_INT 0
68594: LESS
68595: IFFALSE 68612
// time := time * - 1 ;
68597: LD_ADDR_VAR 0 8
68601: PUSH
68602: LD_VAR 0 8
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: MUL
68611: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68612: LD_VAR 0 8
68616: PUSH
68617: LD_INT 35
68619: PPUSH
68620: LD_INT 875
68622: PPUSH
68623: CALL_OW 12
68627: PLUS
68628: PPUSH
68629: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68633: LD_INT 1
68635: PPUSH
68636: LD_INT 5
68638: PPUSH
68639: CALL_OW 12
68643: PPUSH
68644: LD_VAR 0 1
68648: PPUSH
68649: LD_INT 1
68651: PPUSH
68652: CALL_OW 55
// end ;
68656: GO 68469
// end ;
68658: LD_VAR 0 5
68662: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68663: LD_INT 0
68665: PPUSH
68666: PPUSH
68667: PPUSH
68668: PPUSH
68669: PPUSH
68670: PPUSH
68671: PPUSH
68672: PPUSH
// if not turrets or not factories then
68673: LD_VAR 0 1
68677: NOT
68678: PUSH
68679: LD_VAR 0 2
68683: NOT
68684: OR
68685: IFFALSE 68689
// exit ;
68687: GO 68996
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68689: LD_ADDR_VAR 0 10
68693: PUSH
68694: LD_INT 5
68696: PUSH
68697: LD_INT 6
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 2
68706: PUSH
68707: LD_INT 4
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: LD_INT 5
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 24
68731: PUSH
68732: LD_INT 25
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 23
68741: PUSH
68742: LD_INT 27
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 42
68755: PUSH
68756: LD_INT 43
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 44
68765: PUSH
68766: LD_INT 46
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 45
68775: PUSH
68776: LD_INT 47
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: LIST
68792: ST_TO_ADDR
// result := [ ] ;
68793: LD_ADDR_VAR 0 3
68797: PUSH
68798: EMPTY
68799: ST_TO_ADDR
// for i in turrets do
68800: LD_ADDR_VAR 0 4
68804: PUSH
68805: LD_VAR 0 1
68809: PUSH
68810: FOR_IN
68811: IFFALSE 68994
// begin nat := GetNation ( i ) ;
68813: LD_ADDR_VAR 0 7
68817: PUSH
68818: LD_VAR 0 4
68822: PPUSH
68823: CALL_OW 248
68827: ST_TO_ADDR
// weapon := 0 ;
68828: LD_ADDR_VAR 0 8
68832: PUSH
68833: LD_INT 0
68835: ST_TO_ADDR
// if not nat then
68836: LD_VAR 0 7
68840: NOT
68841: IFFALSE 68845
// continue ;
68843: GO 68810
// for j in list [ nat ] do
68845: LD_ADDR_VAR 0 5
68849: PUSH
68850: LD_VAR 0 10
68854: PUSH
68855: LD_VAR 0 7
68859: ARRAY
68860: PUSH
68861: FOR_IN
68862: IFFALSE 68903
// if GetBWeapon ( i ) = j [ 1 ] then
68864: LD_VAR 0 4
68868: PPUSH
68869: CALL_OW 269
68873: PUSH
68874: LD_VAR 0 5
68878: PUSH
68879: LD_INT 1
68881: ARRAY
68882: EQUAL
68883: IFFALSE 68901
// begin weapon := j [ 2 ] ;
68885: LD_ADDR_VAR 0 8
68889: PUSH
68890: LD_VAR 0 5
68894: PUSH
68895: LD_INT 2
68897: ARRAY
68898: ST_TO_ADDR
// break ;
68899: GO 68903
// end ;
68901: GO 68861
68903: POP
68904: POP
// if not weapon then
68905: LD_VAR 0 8
68909: NOT
68910: IFFALSE 68914
// continue ;
68912: GO 68810
// for k in factories do
68914: LD_ADDR_VAR 0 6
68918: PUSH
68919: LD_VAR 0 2
68923: PUSH
68924: FOR_IN
68925: IFFALSE 68990
// begin weapons := AvailableWeaponList ( k ) ;
68927: LD_ADDR_VAR 0 9
68931: PUSH
68932: LD_VAR 0 6
68936: PPUSH
68937: CALL_OW 478
68941: ST_TO_ADDR
// if not weapons then
68942: LD_VAR 0 9
68946: NOT
68947: IFFALSE 68951
// continue ;
68949: GO 68924
// if weapon in weapons then
68951: LD_VAR 0 8
68955: PUSH
68956: LD_VAR 0 9
68960: IN
68961: IFFALSE 68988
// begin result := [ i , weapon ] ;
68963: LD_ADDR_VAR 0 3
68967: PUSH
68968: LD_VAR 0 4
68972: PUSH
68973: LD_VAR 0 8
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: ST_TO_ADDR
// exit ;
68982: POP
68983: POP
68984: POP
68985: POP
68986: GO 68996
// end ; end ;
68988: GO 68924
68990: POP
68991: POP
// end ;
68992: GO 68810
68994: POP
68995: POP
// end ;
68996: LD_VAR 0 3
69000: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69001: LD_INT 0
69003: PPUSH
// if not side or side > 8 then
69004: LD_VAR 0 3
69008: NOT
69009: PUSH
69010: LD_VAR 0 3
69014: PUSH
69015: LD_INT 8
69017: GREATER
69018: OR
69019: IFFALSE 69023
// exit ;
69021: GO 69082
// if not range then
69023: LD_VAR 0 4
69027: NOT
69028: IFFALSE 69039
// range := - 12 ;
69030: LD_ADDR_VAR 0 4
69034: PUSH
69035: LD_INT 12
69037: NEG
69038: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69039: LD_VAR 0 1
69043: PPUSH
69044: LD_VAR 0 2
69048: PPUSH
69049: LD_VAR 0 3
69053: PPUSH
69054: LD_VAR 0 4
69058: PPUSH
69059: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69063: LD_VAR 0 1
69067: PPUSH
69068: LD_VAR 0 2
69072: PPUSH
69073: LD_VAR 0 3
69077: PPUSH
69078: CALL_OW 331
// end ;
69082: LD_VAR 0 5
69086: RET
// export function Video ( mode ) ; begin
69087: LD_INT 0
69089: PPUSH
// ingame_video = mode ;
69090: LD_ADDR_OWVAR 52
69094: PUSH
69095: LD_VAR 0 1
69099: ST_TO_ADDR
// interface_hidden = mode ;
69100: LD_ADDR_OWVAR 54
69104: PUSH
69105: LD_VAR 0 1
69109: ST_TO_ADDR
// end ;
69110: LD_VAR 0 2
69114: RET
// export function Join ( array , element ) ; begin
69115: LD_INT 0
69117: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69118: LD_ADDR_VAR 0 3
69122: PUSH
69123: LD_VAR 0 1
69127: PPUSH
69128: LD_VAR 0 1
69132: PUSH
69133: LD_INT 1
69135: PLUS
69136: PPUSH
69137: LD_VAR 0 2
69141: PPUSH
69142: CALL_OW 1
69146: ST_TO_ADDR
// end ;
69147: LD_VAR 0 3
69151: RET
// export function JoinUnion ( array , element ) ; begin
69152: LD_INT 0
69154: PPUSH
// result := array union element ;
69155: LD_ADDR_VAR 0 3
69159: PUSH
69160: LD_VAR 0 1
69164: PUSH
69165: LD_VAR 0 2
69169: UNION
69170: ST_TO_ADDR
// end ;
69171: LD_VAR 0 3
69175: RET
// export function GetBehemoths ( side ) ; begin
69176: LD_INT 0
69178: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69179: LD_ADDR_VAR 0 2
69183: PUSH
69184: LD_INT 22
69186: PUSH
69187: LD_VAR 0 1
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 31
69198: PUSH
69199: LD_INT 25
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PPUSH
69210: CALL_OW 69
69214: ST_TO_ADDR
// end ;
69215: LD_VAR 0 2
69219: RET
// export function Shuffle ( array ) ; var i , index ; begin
69220: LD_INT 0
69222: PPUSH
69223: PPUSH
69224: PPUSH
// result := [ ] ;
69225: LD_ADDR_VAR 0 2
69229: PUSH
69230: EMPTY
69231: ST_TO_ADDR
// if not array then
69232: LD_VAR 0 1
69236: NOT
69237: IFFALSE 69241
// exit ;
69239: GO 69340
// Randomize ;
69241: CALL_OW 10
// for i = array downto 1 do
69245: LD_ADDR_VAR 0 3
69249: PUSH
69250: DOUBLE
69251: LD_VAR 0 1
69255: INC
69256: ST_TO_ADDR
69257: LD_INT 1
69259: PUSH
69260: FOR_DOWNTO
69261: IFFALSE 69338
// begin index := rand ( 1 , array ) ;
69263: LD_ADDR_VAR 0 4
69267: PUSH
69268: LD_INT 1
69270: PPUSH
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL_OW 12
69280: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69281: LD_ADDR_VAR 0 2
69285: PUSH
69286: LD_VAR 0 2
69290: PPUSH
69291: LD_VAR 0 2
69295: PUSH
69296: LD_INT 1
69298: PLUS
69299: PPUSH
69300: LD_VAR 0 1
69304: PUSH
69305: LD_VAR 0 4
69309: ARRAY
69310: PPUSH
69311: CALL_OW 2
69315: ST_TO_ADDR
// array := Delete ( array , index ) ;
69316: LD_ADDR_VAR 0 1
69320: PUSH
69321: LD_VAR 0 1
69325: PPUSH
69326: LD_VAR 0 4
69330: PPUSH
69331: CALL_OW 3
69335: ST_TO_ADDR
// end ;
69336: GO 69260
69338: POP
69339: POP
// end ;
69340: LD_VAR 0 2
69344: RET
// export function GetBaseMaterials ( base ) ; begin
69345: LD_INT 0
69347: PPUSH
// result := [ 0 , 0 , 0 ] ;
69348: LD_ADDR_VAR 0 2
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: LIST
69366: ST_TO_ADDR
// if not base then
69367: LD_VAR 0 1
69371: NOT
69372: IFFALSE 69376
// exit ;
69374: GO 69425
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69376: LD_ADDR_VAR 0 2
69380: PUSH
69381: LD_VAR 0 1
69385: PPUSH
69386: LD_INT 1
69388: PPUSH
69389: CALL_OW 275
69393: PUSH
69394: LD_VAR 0 1
69398: PPUSH
69399: LD_INT 2
69401: PPUSH
69402: CALL_OW 275
69406: PUSH
69407: LD_VAR 0 1
69411: PPUSH
69412: LD_INT 3
69414: PPUSH
69415: CALL_OW 275
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: LIST
69424: ST_TO_ADDR
// end ;
69425: LD_VAR 0 2
69429: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69430: LD_INT 0
69432: PPUSH
69433: PPUSH
// result := array ;
69434: LD_ADDR_VAR 0 3
69438: PUSH
69439: LD_VAR 0 1
69443: ST_TO_ADDR
// if size >= result then
69444: LD_VAR 0 2
69448: PUSH
69449: LD_VAR 0 3
69453: GREATEREQUAL
69454: IFFALSE 69458
// exit ;
69456: GO 69508
// if size then
69458: LD_VAR 0 2
69462: IFFALSE 69508
// for i := array downto size do
69464: LD_ADDR_VAR 0 4
69468: PUSH
69469: DOUBLE
69470: LD_VAR 0 1
69474: INC
69475: ST_TO_ADDR
69476: LD_VAR 0 2
69480: PUSH
69481: FOR_DOWNTO
69482: IFFALSE 69506
// result := Delete ( result , result ) ;
69484: LD_ADDR_VAR 0 3
69488: PUSH
69489: LD_VAR 0 3
69493: PPUSH
69494: LD_VAR 0 3
69498: PPUSH
69499: CALL_OW 3
69503: ST_TO_ADDR
69504: GO 69481
69506: POP
69507: POP
// end ;
69508: LD_VAR 0 3
69512: RET
// export function ComExit ( unit ) ; var tmp ; begin
69513: LD_INT 0
69515: PPUSH
69516: PPUSH
// if not IsInUnit ( unit ) then
69517: LD_VAR 0 1
69521: PPUSH
69522: CALL_OW 310
69526: NOT
69527: IFFALSE 69531
// exit ;
69529: GO 69591
// tmp := IsInUnit ( unit ) ;
69531: LD_ADDR_VAR 0 3
69535: PUSH
69536: LD_VAR 0 1
69540: PPUSH
69541: CALL_OW 310
69545: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69546: LD_VAR 0 3
69550: PPUSH
69551: CALL_OW 247
69555: PUSH
69556: LD_INT 2
69558: EQUAL
69559: IFFALSE 69572
// ComExitVehicle ( unit ) else
69561: LD_VAR 0 1
69565: PPUSH
69566: CALL_OW 121
69570: GO 69581
// ComExitBuilding ( unit ) ;
69572: LD_VAR 0 1
69576: PPUSH
69577: CALL_OW 122
// result := tmp ;
69581: LD_ADDR_VAR 0 2
69585: PUSH
69586: LD_VAR 0 3
69590: ST_TO_ADDR
// end ;
69591: LD_VAR 0 2
69595: RET
// export function ComExitAll ( units ) ; var i ; begin
69596: LD_INT 0
69598: PPUSH
69599: PPUSH
// if not units then
69600: LD_VAR 0 1
69604: NOT
69605: IFFALSE 69609
// exit ;
69607: GO 69635
// for i in units do
69609: LD_ADDR_VAR 0 3
69613: PUSH
69614: LD_VAR 0 1
69618: PUSH
69619: FOR_IN
69620: IFFALSE 69633
// ComExit ( i ) ;
69622: LD_VAR 0 3
69626: PPUSH
69627: CALL 69513 0 1
69631: GO 69619
69633: POP
69634: POP
// end ;
69635: LD_VAR 0 2
69639: RET
// export function ResetHc ; begin
69640: LD_INT 0
69642: PPUSH
// InitHc ;
69643: CALL_OW 19
// hc_importance := 0 ;
69647: LD_ADDR_OWVAR 32
69651: PUSH
69652: LD_INT 0
69654: ST_TO_ADDR
// end ;
69655: LD_VAR 0 1
69659: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69660: LD_INT 0
69662: PPUSH
69663: PPUSH
69664: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69665: LD_ADDR_VAR 0 6
69669: PUSH
69670: LD_VAR 0 1
69674: PUSH
69675: LD_VAR 0 3
69679: PLUS
69680: PUSH
69681: LD_INT 2
69683: DIV
69684: ST_TO_ADDR
// if _x < 0 then
69685: LD_VAR 0 6
69689: PUSH
69690: LD_INT 0
69692: LESS
69693: IFFALSE 69710
// _x := _x * - 1 ;
69695: LD_ADDR_VAR 0 6
69699: PUSH
69700: LD_VAR 0 6
69704: PUSH
69705: LD_INT 1
69707: NEG
69708: MUL
69709: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69710: LD_ADDR_VAR 0 7
69714: PUSH
69715: LD_VAR 0 2
69719: PUSH
69720: LD_VAR 0 4
69724: PLUS
69725: PUSH
69726: LD_INT 2
69728: DIV
69729: ST_TO_ADDR
// if _y < 0 then
69730: LD_VAR 0 7
69734: PUSH
69735: LD_INT 0
69737: LESS
69738: IFFALSE 69755
// _y := _y * - 1 ;
69740: LD_ADDR_VAR 0 7
69744: PUSH
69745: LD_VAR 0 7
69749: PUSH
69750: LD_INT 1
69752: NEG
69753: MUL
69754: ST_TO_ADDR
// result := [ _x , _y ] ;
69755: LD_ADDR_VAR 0 5
69759: PUSH
69760: LD_VAR 0 6
69764: PUSH
69765: LD_VAR 0 7
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: ST_TO_ADDR
// end ;
69774: LD_VAR 0 5
69778: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69779: LD_INT 0
69781: PPUSH
69782: PPUSH
69783: PPUSH
69784: PPUSH
// task := GetTaskList ( unit ) ;
69785: LD_ADDR_VAR 0 7
69789: PUSH
69790: LD_VAR 0 1
69794: PPUSH
69795: CALL_OW 437
69799: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69800: LD_VAR 0 7
69804: NOT
69805: PUSH
69806: LD_VAR 0 1
69810: PPUSH
69811: LD_VAR 0 2
69815: PPUSH
69816: CALL_OW 308
69820: NOT
69821: AND
69822: IFFALSE 69826
// exit ;
69824: GO 69944
// if IsInArea ( unit , area ) then
69826: LD_VAR 0 1
69830: PPUSH
69831: LD_VAR 0 2
69835: PPUSH
69836: CALL_OW 308
69840: IFFALSE 69858
// begin ComMoveToArea ( unit , goAway ) ;
69842: LD_VAR 0 1
69846: PPUSH
69847: LD_VAR 0 3
69851: PPUSH
69852: CALL_OW 113
// exit ;
69856: GO 69944
// end ; if task [ 1 ] [ 1 ] <> M then
69858: LD_VAR 0 7
69862: PUSH
69863: LD_INT 1
69865: ARRAY
69866: PUSH
69867: LD_INT 1
69869: ARRAY
69870: PUSH
69871: LD_STRING M
69873: NONEQUAL
69874: IFFALSE 69878
// exit ;
69876: GO 69944
// x := task [ 1 ] [ 2 ] ;
69878: LD_ADDR_VAR 0 5
69882: PUSH
69883: LD_VAR 0 7
69887: PUSH
69888: LD_INT 1
69890: ARRAY
69891: PUSH
69892: LD_INT 2
69894: ARRAY
69895: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69896: LD_ADDR_VAR 0 6
69900: PUSH
69901: LD_VAR 0 7
69905: PUSH
69906: LD_INT 1
69908: ARRAY
69909: PUSH
69910: LD_INT 3
69912: ARRAY
69913: ST_TO_ADDR
// if InArea ( x , y , area ) then
69914: LD_VAR 0 5
69918: PPUSH
69919: LD_VAR 0 6
69923: PPUSH
69924: LD_VAR 0 2
69928: PPUSH
69929: CALL_OW 309
69933: IFFALSE 69944
// ComStop ( unit ) ;
69935: LD_VAR 0 1
69939: PPUSH
69940: CALL_OW 141
// end ;
69944: LD_VAR 0 4
69948: RET
// export function Abs ( value ) ; begin
69949: LD_INT 0
69951: PPUSH
// result := value ;
69952: LD_ADDR_VAR 0 2
69956: PUSH
69957: LD_VAR 0 1
69961: ST_TO_ADDR
// if value < 0 then
69962: LD_VAR 0 1
69966: PUSH
69967: LD_INT 0
69969: LESS
69970: IFFALSE 69987
// result := value * - 1 ;
69972: LD_ADDR_VAR 0 2
69976: PUSH
69977: LD_VAR 0 1
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: MUL
69986: ST_TO_ADDR
// end ;
69987: LD_VAR 0 2
69991: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69992: LD_INT 0
69994: PPUSH
69995: PPUSH
69996: PPUSH
69997: PPUSH
69998: PPUSH
69999: PPUSH
70000: PPUSH
70001: PPUSH
// if not unit or not building then
70002: LD_VAR 0 1
70006: NOT
70007: PUSH
70008: LD_VAR 0 2
70012: NOT
70013: OR
70014: IFFALSE 70018
// exit ;
70016: GO 70244
// x := GetX ( building ) ;
70018: LD_ADDR_VAR 0 4
70022: PUSH
70023: LD_VAR 0 2
70027: PPUSH
70028: CALL_OW 250
70032: ST_TO_ADDR
// y := GetY ( building ) ;
70033: LD_ADDR_VAR 0 6
70037: PUSH
70038: LD_VAR 0 2
70042: PPUSH
70043: CALL_OW 251
70047: ST_TO_ADDR
// d := GetDir ( building ) ;
70048: LD_ADDR_VAR 0 8
70052: PUSH
70053: LD_VAR 0 2
70057: PPUSH
70058: CALL_OW 254
70062: ST_TO_ADDR
// r := 4 ;
70063: LD_ADDR_VAR 0 9
70067: PUSH
70068: LD_INT 4
70070: ST_TO_ADDR
// for i := 1 to 5 do
70071: LD_ADDR_VAR 0 10
70075: PUSH
70076: DOUBLE
70077: LD_INT 1
70079: DEC
70080: ST_TO_ADDR
70081: LD_INT 5
70083: PUSH
70084: FOR_TO
70085: IFFALSE 70242
// begin _x := ShiftX ( x , d , r + i ) ;
70087: LD_ADDR_VAR 0 5
70091: PUSH
70092: LD_VAR 0 4
70096: PPUSH
70097: LD_VAR 0 8
70101: PPUSH
70102: LD_VAR 0 9
70106: PUSH
70107: LD_VAR 0 10
70111: PLUS
70112: PPUSH
70113: CALL_OW 272
70117: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70118: LD_ADDR_VAR 0 7
70122: PUSH
70123: LD_VAR 0 6
70127: PPUSH
70128: LD_VAR 0 8
70132: PPUSH
70133: LD_VAR 0 9
70137: PUSH
70138: LD_VAR 0 10
70142: PLUS
70143: PPUSH
70144: CALL_OW 273
70148: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70149: LD_VAR 0 5
70153: PPUSH
70154: LD_VAR 0 7
70158: PPUSH
70159: CALL_OW 488
70163: PUSH
70164: LD_VAR 0 5
70168: PPUSH
70169: LD_VAR 0 7
70173: PPUSH
70174: CALL_OW 428
70178: PPUSH
70179: CALL_OW 247
70183: PUSH
70184: LD_INT 3
70186: PUSH
70187: LD_INT 2
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: IN
70194: NOT
70195: AND
70196: IFFALSE 70240
// begin ComMoveXY ( unit , _x , _y ) ;
70198: LD_VAR 0 1
70202: PPUSH
70203: LD_VAR 0 5
70207: PPUSH
70208: LD_VAR 0 7
70212: PPUSH
70213: CALL_OW 111
// result := [ _x , _y ] ;
70217: LD_ADDR_VAR 0 3
70221: PUSH
70222: LD_VAR 0 5
70226: PUSH
70227: LD_VAR 0 7
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: ST_TO_ADDR
// exit ;
70236: POP
70237: POP
70238: GO 70244
// end ; end ;
70240: GO 70084
70242: POP
70243: POP
// end ;
70244: LD_VAR 0 3
70248: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70249: LD_INT 0
70251: PPUSH
70252: PPUSH
70253: PPUSH
// result := 0 ;
70254: LD_ADDR_VAR 0 3
70258: PUSH
70259: LD_INT 0
70261: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70262: LD_VAR 0 1
70266: PUSH
70267: LD_INT 0
70269: LESS
70270: PUSH
70271: LD_VAR 0 1
70275: PUSH
70276: LD_INT 8
70278: GREATER
70279: OR
70280: PUSH
70281: LD_VAR 0 2
70285: PUSH
70286: LD_INT 0
70288: LESS
70289: OR
70290: PUSH
70291: LD_VAR 0 2
70295: PUSH
70296: LD_INT 8
70298: GREATER
70299: OR
70300: IFFALSE 70304
// exit ;
70302: GO 70379
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70304: LD_ADDR_VAR 0 4
70308: PUSH
70309: LD_INT 22
70311: PUSH
70312: LD_VAR 0 2
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PPUSH
70321: CALL_OW 69
70325: PUSH
70326: FOR_IN
70327: IFFALSE 70377
// begin un := UnitShoot ( i ) ;
70329: LD_ADDR_VAR 0 5
70333: PUSH
70334: LD_VAR 0 4
70338: PPUSH
70339: CALL_OW 504
70343: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70344: LD_VAR 0 5
70348: PPUSH
70349: CALL_OW 255
70353: PUSH
70354: LD_VAR 0 1
70358: EQUAL
70359: IFFALSE 70375
// begin result := un ;
70361: LD_ADDR_VAR 0 3
70365: PUSH
70366: LD_VAR 0 5
70370: ST_TO_ADDR
// exit ;
70371: POP
70372: POP
70373: GO 70379
// end ; end ;
70375: GO 70326
70377: POP
70378: POP
// end ;
70379: LD_VAR 0 3
70383: RET
// export function GetCargoBay ( units ) ; begin
70384: LD_INT 0
70386: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70387: LD_ADDR_VAR 0 2
70391: PUSH
70392: LD_VAR 0 1
70396: PPUSH
70397: LD_INT 2
70399: PUSH
70400: LD_INT 34
70402: PUSH
70403: LD_INT 12
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 34
70412: PUSH
70413: LD_INT 51
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 34
70422: PUSH
70423: LD_INT 32
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 34
70432: PUSH
70433: LD_INT 89
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: PPUSH
70447: CALL_OW 72
70451: ST_TO_ADDR
// end ;
70452: LD_VAR 0 2
70456: RET
// export function Negate ( value ) ; begin
70457: LD_INT 0
70459: PPUSH
// result := not value ;
70460: LD_ADDR_VAR 0 2
70464: PUSH
70465: LD_VAR 0 1
70469: NOT
70470: ST_TO_ADDR
// end ;
70471: LD_VAR 0 2
70475: RET
// export function Inc ( value ) ; begin
70476: LD_INT 0
70478: PPUSH
// result := value + 1 ;
70479: LD_ADDR_VAR 0 2
70483: PUSH
70484: LD_VAR 0 1
70488: PUSH
70489: LD_INT 1
70491: PLUS
70492: ST_TO_ADDR
// end ;
70493: LD_VAR 0 2
70497: RET
// export function Dec ( value ) ; begin
70498: LD_INT 0
70500: PPUSH
// result := value - 1 ;
70501: LD_ADDR_VAR 0 2
70505: PUSH
70506: LD_VAR 0 1
70510: PUSH
70511: LD_INT 1
70513: MINUS
70514: ST_TO_ADDR
// end ;
70515: LD_VAR 0 2
70519: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70520: LD_INT 0
70522: PPUSH
70523: PPUSH
70524: PPUSH
70525: PPUSH
70526: PPUSH
70527: PPUSH
70528: PPUSH
70529: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70530: LD_VAR 0 1
70534: PPUSH
70535: LD_VAR 0 2
70539: PPUSH
70540: CALL_OW 488
70544: NOT
70545: PUSH
70546: LD_VAR 0 3
70550: PPUSH
70551: LD_VAR 0 4
70555: PPUSH
70556: CALL_OW 488
70560: NOT
70561: OR
70562: IFFALSE 70575
// begin result := - 1 ;
70564: LD_ADDR_VAR 0 5
70568: PUSH
70569: LD_INT 1
70571: NEG
70572: ST_TO_ADDR
// exit ;
70573: GO 70810
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70575: LD_ADDR_VAR 0 12
70579: PUSH
70580: LD_VAR 0 1
70584: PPUSH
70585: LD_VAR 0 2
70589: PPUSH
70590: LD_VAR 0 3
70594: PPUSH
70595: LD_VAR 0 4
70599: PPUSH
70600: CALL 69660 0 4
70604: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70605: LD_ADDR_VAR 0 11
70609: PUSH
70610: LD_VAR 0 1
70614: PPUSH
70615: LD_VAR 0 2
70619: PPUSH
70620: LD_VAR 0 12
70624: PUSH
70625: LD_INT 1
70627: ARRAY
70628: PPUSH
70629: LD_VAR 0 12
70633: PUSH
70634: LD_INT 2
70636: ARRAY
70637: PPUSH
70638: CALL_OW 298
70642: ST_TO_ADDR
// distance := 9999 ;
70643: LD_ADDR_VAR 0 10
70647: PUSH
70648: LD_INT 9999
70650: ST_TO_ADDR
// for i := 0 to 5 do
70651: LD_ADDR_VAR 0 6
70655: PUSH
70656: DOUBLE
70657: LD_INT 0
70659: DEC
70660: ST_TO_ADDR
70661: LD_INT 5
70663: PUSH
70664: FOR_TO
70665: IFFALSE 70808
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70667: LD_ADDR_VAR 0 7
70671: PUSH
70672: LD_VAR 0 1
70676: PPUSH
70677: LD_VAR 0 6
70681: PPUSH
70682: LD_VAR 0 11
70686: PPUSH
70687: CALL_OW 272
70691: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70692: LD_ADDR_VAR 0 8
70696: PUSH
70697: LD_VAR 0 2
70701: PPUSH
70702: LD_VAR 0 6
70706: PPUSH
70707: LD_VAR 0 11
70711: PPUSH
70712: CALL_OW 273
70716: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70717: LD_VAR 0 7
70721: PPUSH
70722: LD_VAR 0 8
70726: PPUSH
70727: CALL_OW 488
70731: NOT
70732: IFFALSE 70736
// continue ;
70734: GO 70664
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70736: LD_ADDR_VAR 0 9
70740: PUSH
70741: LD_VAR 0 12
70745: PUSH
70746: LD_INT 1
70748: ARRAY
70749: PPUSH
70750: LD_VAR 0 12
70754: PUSH
70755: LD_INT 2
70757: ARRAY
70758: PPUSH
70759: LD_VAR 0 7
70763: PPUSH
70764: LD_VAR 0 8
70768: PPUSH
70769: CALL_OW 298
70773: ST_TO_ADDR
// if tmp < distance then
70774: LD_VAR 0 9
70778: PUSH
70779: LD_VAR 0 10
70783: LESS
70784: IFFALSE 70806
// begin result := i ;
70786: LD_ADDR_VAR 0 5
70790: PUSH
70791: LD_VAR 0 6
70795: ST_TO_ADDR
// distance := tmp ;
70796: LD_ADDR_VAR 0 10
70800: PUSH
70801: LD_VAR 0 9
70805: ST_TO_ADDR
// end ; end ;
70806: GO 70664
70808: POP
70809: POP
// end ;
70810: LD_VAR 0 5
70814: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70815: LD_INT 0
70817: PPUSH
70818: PPUSH
// if not driver or not IsInUnit ( driver ) then
70819: LD_VAR 0 1
70823: NOT
70824: PUSH
70825: LD_VAR 0 1
70829: PPUSH
70830: CALL_OW 310
70834: NOT
70835: OR
70836: IFFALSE 70840
// exit ;
70838: GO 70930
// vehicle := IsInUnit ( driver ) ;
70840: LD_ADDR_VAR 0 3
70844: PUSH
70845: LD_VAR 0 1
70849: PPUSH
70850: CALL_OW 310
70854: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70855: LD_VAR 0 1
70859: PPUSH
70860: LD_STRING \
70862: PUSH
70863: LD_INT 0
70865: PUSH
70866: LD_INT 0
70868: PUSH
70869: LD_INT 0
70871: PUSH
70872: LD_INT 0
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: LD_INT 0
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: PUSH
70890: LD_STRING E
70892: PUSH
70893: LD_INT 0
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: LD_VAR 0 3
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: LD_INT 0
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PPUSH
70926: CALL_OW 446
// end ;
70930: LD_VAR 0 2
70934: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70935: LD_INT 0
70937: PPUSH
70938: PPUSH
// if not driver or not IsInUnit ( driver ) then
70939: LD_VAR 0 1
70943: NOT
70944: PUSH
70945: LD_VAR 0 1
70949: PPUSH
70950: CALL_OW 310
70954: NOT
70955: OR
70956: IFFALSE 70960
// exit ;
70958: GO 71050
// vehicle := IsInUnit ( driver ) ;
70960: LD_ADDR_VAR 0 3
70964: PUSH
70965: LD_VAR 0 1
70969: PPUSH
70970: CALL_OW 310
70974: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70975: LD_VAR 0 1
70979: PPUSH
70980: LD_STRING \
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: LD_INT 0
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: LD_INT 0
70994: PUSH
70995: LD_INT 0
70997: PUSH
70998: LD_INT 0
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: PUSH
71010: LD_STRING E
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: LD_VAR 0 3
71023: PUSH
71024: LD_INT 0
71026: PUSH
71027: LD_INT 0
71029: PUSH
71030: LD_INT 0
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PPUSH
71046: CALL_OW 447
// end ;
71050: LD_VAR 0 2
71054: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71055: LD_INT 0
71057: PPUSH
71058: PPUSH
71059: PPUSH
// tmp := [ ] ;
71060: LD_ADDR_VAR 0 5
71064: PUSH
71065: EMPTY
71066: ST_TO_ADDR
// for i in units do
71067: LD_ADDR_VAR 0 4
71071: PUSH
71072: LD_VAR 0 1
71076: PUSH
71077: FOR_IN
71078: IFFALSE 71116
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71080: LD_ADDR_VAR 0 5
71084: PUSH
71085: LD_VAR 0 5
71089: PPUSH
71090: LD_VAR 0 5
71094: PUSH
71095: LD_INT 1
71097: PLUS
71098: PPUSH
71099: LD_VAR 0 4
71103: PPUSH
71104: CALL_OW 256
71108: PPUSH
71109: CALL_OW 2
71113: ST_TO_ADDR
71114: GO 71077
71116: POP
71117: POP
// if not tmp then
71118: LD_VAR 0 5
71122: NOT
71123: IFFALSE 71127
// exit ;
71125: GO 71175
// if asc then
71127: LD_VAR 0 2
71131: IFFALSE 71155
// result := SortListByListAsc ( units , tmp ) else
71133: LD_ADDR_VAR 0 3
71137: PUSH
71138: LD_VAR 0 1
71142: PPUSH
71143: LD_VAR 0 5
71147: PPUSH
71148: CALL_OW 76
71152: ST_TO_ADDR
71153: GO 71175
// result := SortListByListDesc ( units , tmp ) ;
71155: LD_ADDR_VAR 0 3
71159: PUSH
71160: LD_VAR 0 1
71164: PPUSH
71165: LD_VAR 0 5
71169: PPUSH
71170: CALL_OW 77
71174: ST_TO_ADDR
// end ;
71175: LD_VAR 0 3
71179: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71180: LD_INT 0
71182: PPUSH
71183: PPUSH
// task := GetTaskList ( mech ) ;
71184: LD_ADDR_VAR 0 4
71188: PUSH
71189: LD_VAR 0 1
71193: PPUSH
71194: CALL_OW 437
71198: ST_TO_ADDR
// if not task then
71199: LD_VAR 0 4
71203: NOT
71204: IFFALSE 71208
// exit ;
71206: GO 71250
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71208: LD_ADDR_VAR 0 3
71212: PUSH
71213: LD_VAR 0 4
71217: PUSH
71218: LD_INT 1
71220: ARRAY
71221: PUSH
71222: LD_INT 1
71224: ARRAY
71225: PUSH
71226: LD_STRING r
71228: EQUAL
71229: PUSH
71230: LD_VAR 0 4
71234: PUSH
71235: LD_INT 1
71237: ARRAY
71238: PUSH
71239: LD_INT 4
71241: ARRAY
71242: PUSH
71243: LD_VAR 0 2
71247: EQUAL
71248: AND
71249: ST_TO_ADDR
// end ;
71250: LD_VAR 0 3
71254: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71255: LD_INT 0
71257: PPUSH
// SetDir ( unit , d ) ;
71258: LD_VAR 0 1
71262: PPUSH
71263: LD_VAR 0 4
71267: PPUSH
71268: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71272: LD_VAR 0 1
71276: PPUSH
71277: LD_VAR 0 2
71281: PPUSH
71282: LD_VAR 0 3
71286: PPUSH
71287: LD_VAR 0 5
71291: PPUSH
71292: CALL_OW 48
// end ;
71296: LD_VAR 0 6
71300: RET
// export function ToNaturalNumber ( number ) ; begin
71301: LD_INT 0
71303: PPUSH
// result := number div 1 ;
71304: LD_ADDR_VAR 0 2
71308: PUSH
71309: LD_VAR 0 1
71313: PUSH
71314: LD_INT 1
71316: DIV
71317: ST_TO_ADDR
// if number < 0 then
71318: LD_VAR 0 1
71322: PUSH
71323: LD_INT 0
71325: LESS
71326: IFFALSE 71336
// result := 0 ;
71328: LD_ADDR_VAR 0 2
71332: PUSH
71333: LD_INT 0
71335: ST_TO_ADDR
// end ;
71336: LD_VAR 0 2
71340: RET
// export function SortByClass ( units , class ) ; var un ; begin
71341: LD_INT 0
71343: PPUSH
71344: PPUSH
// if not units or not class then
71345: LD_VAR 0 1
71349: NOT
71350: PUSH
71351: LD_VAR 0 2
71355: NOT
71356: OR
71357: IFFALSE 71361
// exit ;
71359: GO 71456
// result := [ ] ;
71361: LD_ADDR_VAR 0 3
71365: PUSH
71366: EMPTY
71367: ST_TO_ADDR
// for un in units do
71368: LD_ADDR_VAR 0 4
71372: PUSH
71373: LD_VAR 0 1
71377: PUSH
71378: FOR_IN
71379: IFFALSE 71454
// if GetClass ( un ) = class then
71381: LD_VAR 0 4
71385: PPUSH
71386: CALL_OW 257
71390: PUSH
71391: LD_VAR 0 2
71395: EQUAL
71396: IFFALSE 71423
// result := Insert ( result , 1 , un ) else
71398: LD_ADDR_VAR 0 3
71402: PUSH
71403: LD_VAR 0 3
71407: PPUSH
71408: LD_INT 1
71410: PPUSH
71411: LD_VAR 0 4
71415: PPUSH
71416: CALL_OW 2
71420: ST_TO_ADDR
71421: GO 71452
// result := Replace ( result , result + 1 , un ) ;
71423: LD_ADDR_VAR 0 3
71427: PUSH
71428: LD_VAR 0 3
71432: PPUSH
71433: LD_VAR 0 3
71437: PUSH
71438: LD_INT 1
71440: PLUS
71441: PPUSH
71442: LD_VAR 0 4
71446: PPUSH
71447: CALL_OW 1
71451: ST_TO_ADDR
71452: GO 71378
71454: POP
71455: POP
// end ;
71456: LD_VAR 0 3
71460: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71461: LD_INT 0
71463: PPUSH
71464: PPUSH
71465: PPUSH
71466: PPUSH
71467: PPUSH
71468: PPUSH
71469: PPUSH
// result := [ ] ;
71470: LD_ADDR_VAR 0 4
71474: PUSH
71475: EMPTY
71476: ST_TO_ADDR
// if x - r < 0 then
71477: LD_VAR 0 1
71481: PUSH
71482: LD_VAR 0 3
71486: MINUS
71487: PUSH
71488: LD_INT 0
71490: LESS
71491: IFFALSE 71503
// min_x := 0 else
71493: LD_ADDR_VAR 0 8
71497: PUSH
71498: LD_INT 0
71500: ST_TO_ADDR
71501: GO 71519
// min_x := x - r ;
71503: LD_ADDR_VAR 0 8
71507: PUSH
71508: LD_VAR 0 1
71512: PUSH
71513: LD_VAR 0 3
71517: MINUS
71518: ST_TO_ADDR
// if y - r < 0 then
71519: LD_VAR 0 2
71523: PUSH
71524: LD_VAR 0 3
71528: MINUS
71529: PUSH
71530: LD_INT 0
71532: LESS
71533: IFFALSE 71545
// min_y := 0 else
71535: LD_ADDR_VAR 0 7
71539: PUSH
71540: LD_INT 0
71542: ST_TO_ADDR
71543: GO 71561
// min_y := y - r ;
71545: LD_ADDR_VAR 0 7
71549: PUSH
71550: LD_VAR 0 2
71554: PUSH
71555: LD_VAR 0 3
71559: MINUS
71560: ST_TO_ADDR
// max_x := x + r ;
71561: LD_ADDR_VAR 0 9
71565: PUSH
71566: LD_VAR 0 1
71570: PUSH
71571: LD_VAR 0 3
71575: PLUS
71576: ST_TO_ADDR
// max_y := y + r ;
71577: LD_ADDR_VAR 0 10
71581: PUSH
71582: LD_VAR 0 2
71586: PUSH
71587: LD_VAR 0 3
71591: PLUS
71592: ST_TO_ADDR
// for _x = min_x to max_x do
71593: LD_ADDR_VAR 0 5
71597: PUSH
71598: DOUBLE
71599: LD_VAR 0 8
71603: DEC
71604: ST_TO_ADDR
71605: LD_VAR 0 9
71609: PUSH
71610: FOR_TO
71611: IFFALSE 71712
// for _y = min_y to max_y do
71613: LD_ADDR_VAR 0 6
71617: PUSH
71618: DOUBLE
71619: LD_VAR 0 7
71623: DEC
71624: ST_TO_ADDR
71625: LD_VAR 0 10
71629: PUSH
71630: FOR_TO
71631: IFFALSE 71708
// begin if not ValidHex ( _x , _y ) then
71633: LD_VAR 0 5
71637: PPUSH
71638: LD_VAR 0 6
71642: PPUSH
71643: CALL_OW 488
71647: NOT
71648: IFFALSE 71652
// continue ;
71650: GO 71630
// if GetResourceTypeXY ( _x , _y ) then
71652: LD_VAR 0 5
71656: PPUSH
71657: LD_VAR 0 6
71661: PPUSH
71662: CALL_OW 283
71666: IFFALSE 71706
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71668: LD_ADDR_VAR 0 4
71672: PUSH
71673: LD_VAR 0 4
71677: PPUSH
71678: LD_VAR 0 4
71682: PUSH
71683: LD_INT 1
71685: PLUS
71686: PPUSH
71687: LD_VAR 0 5
71691: PUSH
71692: LD_VAR 0 6
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PPUSH
71701: CALL_OW 1
71705: ST_TO_ADDR
// end ;
71706: GO 71630
71708: POP
71709: POP
71710: GO 71610
71712: POP
71713: POP
// end ;
71714: LD_VAR 0 4
71718: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71719: LD_INT 0
71721: PPUSH
71722: PPUSH
71723: PPUSH
71724: PPUSH
71725: PPUSH
71726: PPUSH
71727: PPUSH
71728: PPUSH
// if not units then
71729: LD_VAR 0 1
71733: NOT
71734: IFFALSE 71738
// exit ;
71736: GO 72262
// result := UnitFilter ( units , [ f_ok ] ) ;
71738: LD_ADDR_VAR 0 3
71742: PUSH
71743: LD_VAR 0 1
71747: PPUSH
71748: LD_INT 50
71750: PUSH
71751: EMPTY
71752: LIST
71753: PPUSH
71754: CALL_OW 72
71758: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71759: LD_ADDR_VAR 0 8
71763: PUSH
71764: LD_VAR 0 1
71768: PUSH
71769: LD_INT 1
71771: ARRAY
71772: PPUSH
71773: CALL_OW 255
71777: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71778: LD_ADDR_VAR 0 10
71782: PUSH
71783: LD_INT 29
71785: PUSH
71786: LD_INT 91
71788: PUSH
71789: LD_INT 49
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: LIST
71796: ST_TO_ADDR
// if not result then
71797: LD_VAR 0 3
71801: NOT
71802: IFFALSE 71806
// exit ;
71804: GO 72262
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71806: LD_ADDR_VAR 0 5
71810: PUSH
71811: LD_INT 81
71813: PUSH
71814: LD_VAR 0 8
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PPUSH
71823: CALL_OW 69
71827: ST_TO_ADDR
// for i in result do
71828: LD_ADDR_VAR 0 4
71832: PUSH
71833: LD_VAR 0 3
71837: PUSH
71838: FOR_IN
71839: IFFALSE 72260
// begin tag := GetTag ( i ) + 1 ;
71841: LD_ADDR_VAR 0 9
71845: PUSH
71846: LD_VAR 0 4
71850: PPUSH
71851: CALL_OW 110
71855: PUSH
71856: LD_INT 1
71858: PLUS
71859: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71860: LD_ADDR_VAR 0 7
71864: PUSH
71865: LD_VAR 0 4
71869: PPUSH
71870: CALL_OW 250
71874: PPUSH
71875: LD_VAR 0 4
71879: PPUSH
71880: CALL_OW 251
71884: PPUSH
71885: LD_INT 6
71887: PPUSH
71888: CALL 71461 0 3
71892: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71893: LD_VAR 0 4
71897: PPUSH
71898: CALL_OW 247
71902: PUSH
71903: LD_INT 2
71905: EQUAL
71906: PUSH
71907: LD_VAR 0 7
71911: AND
71912: PUSH
71913: LD_VAR 0 4
71917: PPUSH
71918: CALL_OW 264
71922: PUSH
71923: LD_VAR 0 10
71927: IN
71928: NOT
71929: AND
71930: IFFALSE 71969
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71932: LD_VAR 0 4
71936: PPUSH
71937: LD_VAR 0 7
71941: PUSH
71942: LD_INT 1
71944: ARRAY
71945: PUSH
71946: LD_INT 1
71948: ARRAY
71949: PPUSH
71950: LD_VAR 0 7
71954: PUSH
71955: LD_INT 1
71957: ARRAY
71958: PUSH
71959: LD_INT 2
71961: ARRAY
71962: PPUSH
71963: CALL_OW 116
71967: GO 72258
// if path > tag then
71969: LD_VAR 0 2
71973: PUSH
71974: LD_VAR 0 9
71978: GREATER
71979: IFFALSE 72187
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71981: LD_ADDR_VAR 0 6
71985: PUSH
71986: LD_VAR 0 5
71990: PPUSH
71991: LD_INT 91
71993: PUSH
71994: LD_VAR 0 4
71998: PUSH
71999: LD_INT 8
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: LIST
72006: PPUSH
72007: CALL_OW 72
72011: ST_TO_ADDR
// if nearEnemy then
72012: LD_VAR 0 6
72016: IFFALSE 72085
// begin if GetWeapon ( i ) = ru_time_lapser then
72018: LD_VAR 0 4
72022: PPUSH
72023: CALL_OW 264
72027: PUSH
72028: LD_INT 49
72030: EQUAL
72031: IFFALSE 72059
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72033: LD_VAR 0 4
72037: PPUSH
72038: LD_VAR 0 6
72042: PPUSH
72043: LD_VAR 0 4
72047: PPUSH
72048: CALL_OW 74
72052: PPUSH
72053: CALL_OW 112
72057: GO 72083
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72059: LD_VAR 0 4
72063: PPUSH
72064: LD_VAR 0 6
72068: PPUSH
72069: LD_VAR 0 4
72073: PPUSH
72074: CALL_OW 74
72078: PPUSH
72079: CALL 73187 0 2
// end else
72083: GO 72185
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72085: LD_VAR 0 4
72089: PPUSH
72090: LD_VAR 0 2
72094: PUSH
72095: LD_VAR 0 9
72099: ARRAY
72100: PUSH
72101: LD_INT 1
72103: ARRAY
72104: PPUSH
72105: LD_VAR 0 2
72109: PUSH
72110: LD_VAR 0 9
72114: ARRAY
72115: PUSH
72116: LD_INT 2
72118: ARRAY
72119: PPUSH
72120: CALL_OW 297
72124: PUSH
72125: LD_INT 6
72127: GREATER
72128: IFFALSE 72171
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72130: LD_VAR 0 4
72134: PPUSH
72135: LD_VAR 0 2
72139: PUSH
72140: LD_VAR 0 9
72144: ARRAY
72145: PUSH
72146: LD_INT 1
72148: ARRAY
72149: PPUSH
72150: LD_VAR 0 2
72154: PUSH
72155: LD_VAR 0 9
72159: ARRAY
72160: PUSH
72161: LD_INT 2
72163: ARRAY
72164: PPUSH
72165: CALL_OW 114
72169: GO 72185
// SetTag ( i , tag ) ;
72171: LD_VAR 0 4
72175: PPUSH
72176: LD_VAR 0 9
72180: PPUSH
72181: CALL_OW 109
// end else
72185: GO 72258
// if enemy then
72187: LD_VAR 0 5
72191: IFFALSE 72258
// begin if GetWeapon ( i ) = ru_time_lapser then
72193: LD_VAR 0 4
72197: PPUSH
72198: CALL_OW 264
72202: PUSH
72203: LD_INT 49
72205: EQUAL
72206: IFFALSE 72234
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72208: LD_VAR 0 4
72212: PPUSH
72213: LD_VAR 0 5
72217: PPUSH
72218: LD_VAR 0 4
72222: PPUSH
72223: CALL_OW 74
72227: PPUSH
72228: CALL_OW 112
72232: GO 72258
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72234: LD_VAR 0 4
72238: PPUSH
72239: LD_VAR 0 5
72243: PPUSH
72244: LD_VAR 0 4
72248: PPUSH
72249: CALL_OW 74
72253: PPUSH
72254: CALL 73187 0 2
// end ; end ;
72258: GO 71838
72260: POP
72261: POP
// end ;
72262: LD_VAR 0 3
72266: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72267: LD_INT 0
72269: PPUSH
72270: PPUSH
72271: PPUSH
// if not unit or IsInUnit ( unit ) then
72272: LD_VAR 0 1
72276: NOT
72277: PUSH
72278: LD_VAR 0 1
72282: PPUSH
72283: CALL_OW 310
72287: OR
72288: IFFALSE 72292
// exit ;
72290: GO 72383
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72292: LD_ADDR_VAR 0 4
72296: PUSH
72297: LD_VAR 0 1
72301: PPUSH
72302: CALL_OW 250
72306: PPUSH
72307: LD_VAR 0 2
72311: PPUSH
72312: LD_INT 1
72314: PPUSH
72315: CALL_OW 272
72319: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72320: LD_ADDR_VAR 0 5
72324: PUSH
72325: LD_VAR 0 1
72329: PPUSH
72330: CALL_OW 251
72334: PPUSH
72335: LD_VAR 0 2
72339: PPUSH
72340: LD_INT 1
72342: PPUSH
72343: CALL_OW 273
72347: ST_TO_ADDR
// if ValidHex ( x , y ) then
72348: LD_VAR 0 4
72352: PPUSH
72353: LD_VAR 0 5
72357: PPUSH
72358: CALL_OW 488
72362: IFFALSE 72383
// ComTurnXY ( unit , x , y ) ;
72364: LD_VAR 0 1
72368: PPUSH
72369: LD_VAR 0 4
72373: PPUSH
72374: LD_VAR 0 5
72378: PPUSH
72379: CALL_OW 118
// end ;
72383: LD_VAR 0 3
72387: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72388: LD_INT 0
72390: PPUSH
72391: PPUSH
// result := false ;
72392: LD_ADDR_VAR 0 3
72396: PUSH
72397: LD_INT 0
72399: ST_TO_ADDR
// if not units then
72400: LD_VAR 0 2
72404: NOT
72405: IFFALSE 72409
// exit ;
72407: GO 72454
// for i in units do
72409: LD_ADDR_VAR 0 4
72413: PUSH
72414: LD_VAR 0 2
72418: PUSH
72419: FOR_IN
72420: IFFALSE 72452
// if See ( side , i ) then
72422: LD_VAR 0 1
72426: PPUSH
72427: LD_VAR 0 4
72431: PPUSH
72432: CALL_OW 292
72436: IFFALSE 72450
// begin result := true ;
72438: LD_ADDR_VAR 0 3
72442: PUSH
72443: LD_INT 1
72445: ST_TO_ADDR
// exit ;
72446: POP
72447: POP
72448: GO 72454
// end ;
72450: GO 72419
72452: POP
72453: POP
// end ;
72454: LD_VAR 0 3
72458: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72459: LD_INT 0
72461: PPUSH
72462: PPUSH
72463: PPUSH
72464: PPUSH
// if not unit or not points then
72465: LD_VAR 0 1
72469: NOT
72470: PUSH
72471: LD_VAR 0 2
72475: NOT
72476: OR
72477: IFFALSE 72481
// exit ;
72479: GO 72571
// dist := 99999 ;
72481: LD_ADDR_VAR 0 5
72485: PUSH
72486: LD_INT 99999
72488: ST_TO_ADDR
// for i in points do
72489: LD_ADDR_VAR 0 4
72493: PUSH
72494: LD_VAR 0 2
72498: PUSH
72499: FOR_IN
72500: IFFALSE 72569
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72502: LD_ADDR_VAR 0 6
72506: PUSH
72507: LD_VAR 0 1
72511: PPUSH
72512: LD_VAR 0 4
72516: PUSH
72517: LD_INT 1
72519: ARRAY
72520: PPUSH
72521: LD_VAR 0 4
72525: PUSH
72526: LD_INT 2
72528: ARRAY
72529: PPUSH
72530: CALL_OW 297
72534: ST_TO_ADDR
// if tmpDist < dist then
72535: LD_VAR 0 6
72539: PUSH
72540: LD_VAR 0 5
72544: LESS
72545: IFFALSE 72567
// begin result := i ;
72547: LD_ADDR_VAR 0 3
72551: PUSH
72552: LD_VAR 0 4
72556: ST_TO_ADDR
// dist := tmpDist ;
72557: LD_ADDR_VAR 0 5
72561: PUSH
72562: LD_VAR 0 6
72566: ST_TO_ADDR
// end ; end ;
72567: GO 72499
72569: POP
72570: POP
// end ;
72571: LD_VAR 0 3
72575: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72576: LD_INT 0
72578: PPUSH
// uc_side := side ;
72579: LD_ADDR_OWVAR 20
72583: PUSH
72584: LD_VAR 0 1
72588: ST_TO_ADDR
// uc_nation := 3 ;
72589: LD_ADDR_OWVAR 21
72593: PUSH
72594: LD_INT 3
72596: ST_TO_ADDR
// vc_chassis := 25 ;
72597: LD_ADDR_OWVAR 37
72601: PUSH
72602: LD_INT 25
72604: ST_TO_ADDR
// vc_engine := engine_siberite ;
72605: LD_ADDR_OWVAR 39
72609: PUSH
72610: LD_INT 3
72612: ST_TO_ADDR
// vc_control := control_computer ;
72613: LD_ADDR_OWVAR 38
72617: PUSH
72618: LD_INT 3
72620: ST_TO_ADDR
// vc_weapon := 59 ;
72621: LD_ADDR_OWVAR 40
72625: PUSH
72626: LD_INT 59
72628: ST_TO_ADDR
// result := CreateVehicle ;
72629: LD_ADDR_VAR 0 5
72633: PUSH
72634: CALL_OW 45
72638: ST_TO_ADDR
// SetDir ( result , d ) ;
72639: LD_VAR 0 5
72643: PPUSH
72644: LD_VAR 0 4
72648: PPUSH
72649: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72653: LD_VAR 0 5
72657: PPUSH
72658: LD_VAR 0 2
72662: PPUSH
72663: LD_VAR 0 3
72667: PPUSH
72668: LD_INT 0
72670: PPUSH
72671: CALL_OW 48
// end ;
72675: LD_VAR 0 5
72679: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72680: LD_INT 0
72682: PPUSH
72683: PPUSH
72684: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72685: LD_ADDR_VAR 0 2
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: LD_INT 0
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72708: LD_VAR 0 1
72712: NOT
72713: PUSH
72714: LD_VAR 0 1
72718: PPUSH
72719: CALL_OW 264
72723: PUSH
72724: LD_INT 12
72726: PUSH
72727: LD_INT 51
72729: PUSH
72730: LD_INT 32
72732: PUSH
72733: LD_INT 89
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: IN
72742: NOT
72743: OR
72744: IFFALSE 72748
// exit ;
72746: GO 72846
// for i := 1 to 3 do
72748: LD_ADDR_VAR 0 3
72752: PUSH
72753: DOUBLE
72754: LD_INT 1
72756: DEC
72757: ST_TO_ADDR
72758: LD_INT 3
72760: PUSH
72761: FOR_TO
72762: IFFALSE 72844
// begin tmp := GetCargo ( cargo , i ) ;
72764: LD_ADDR_VAR 0 4
72768: PUSH
72769: LD_VAR 0 1
72773: PPUSH
72774: LD_VAR 0 3
72778: PPUSH
72779: CALL_OW 289
72783: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72784: LD_ADDR_VAR 0 2
72788: PUSH
72789: LD_VAR 0 2
72793: PPUSH
72794: LD_VAR 0 3
72798: PPUSH
72799: LD_VAR 0 4
72803: PPUSH
72804: CALL_OW 1
72808: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72809: LD_ADDR_VAR 0 2
72813: PUSH
72814: LD_VAR 0 2
72818: PPUSH
72819: LD_INT 4
72821: PPUSH
72822: LD_VAR 0 2
72826: PUSH
72827: LD_INT 4
72829: ARRAY
72830: PUSH
72831: LD_VAR 0 4
72835: PLUS
72836: PPUSH
72837: CALL_OW 1
72841: ST_TO_ADDR
// end ;
72842: GO 72761
72844: POP
72845: POP
// end ;
72846: LD_VAR 0 2
72850: RET
// export function Length ( array ) ; begin
72851: LD_INT 0
72853: PPUSH
// result := array + 0 ;
72854: LD_ADDR_VAR 0 2
72858: PUSH
72859: LD_VAR 0 1
72863: PUSH
72864: LD_INT 0
72866: PLUS
72867: ST_TO_ADDR
// end ;
72868: LD_VAR 0 2
72872: RET
// export function PrepareArray ( array ) ; begin
72873: LD_INT 0
72875: PPUSH
// result := array diff 0 ;
72876: LD_ADDR_VAR 0 2
72880: PUSH
72881: LD_VAR 0 1
72885: PUSH
72886: LD_INT 0
72888: DIFF
72889: ST_TO_ADDR
// if not result [ 1 ] then
72890: LD_VAR 0 2
72894: PUSH
72895: LD_INT 1
72897: ARRAY
72898: NOT
72899: IFFALSE 72919
// result := Delete ( result , 1 ) ;
72901: LD_ADDR_VAR 0 2
72905: PUSH
72906: LD_VAR 0 2
72910: PPUSH
72911: LD_INT 1
72913: PPUSH
72914: CALL_OW 3
72918: ST_TO_ADDR
// end ;
72919: LD_VAR 0 2
72923: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72924: LD_INT 0
72926: PPUSH
72927: PPUSH
72928: PPUSH
72929: PPUSH
// sibRocketRange := 25 ;
72930: LD_ADDR_VAR 0 6
72934: PUSH
72935: LD_INT 25
72937: ST_TO_ADDR
// result := false ;
72938: LD_ADDR_VAR 0 4
72942: PUSH
72943: LD_INT 0
72945: ST_TO_ADDR
// for i := 0 to 5 do
72946: LD_ADDR_VAR 0 5
72950: PUSH
72951: DOUBLE
72952: LD_INT 0
72954: DEC
72955: ST_TO_ADDR
72956: LD_INT 5
72958: PUSH
72959: FOR_TO
72960: IFFALSE 73027
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72962: LD_VAR 0 1
72966: PPUSH
72967: LD_VAR 0 5
72971: PPUSH
72972: LD_VAR 0 6
72976: PPUSH
72977: CALL_OW 272
72981: PPUSH
72982: LD_VAR 0 2
72986: PPUSH
72987: LD_VAR 0 5
72991: PPUSH
72992: LD_VAR 0 6
72996: PPUSH
72997: CALL_OW 273
73001: PPUSH
73002: LD_VAR 0 3
73006: PPUSH
73007: CALL_OW 309
73011: IFFALSE 73025
// begin result := true ;
73013: LD_ADDR_VAR 0 4
73017: PUSH
73018: LD_INT 1
73020: ST_TO_ADDR
// exit ;
73021: POP
73022: POP
73023: GO 73029
// end ;
73025: GO 72959
73027: POP
73028: POP
// end ;
73029: LD_VAR 0 4
73033: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73034: LD_INT 0
73036: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73037: LD_VAR 0 1
73041: PPUSH
73042: LD_VAR 0 2
73046: PPUSH
73047: LD_INT 0
73049: PPUSH
73050: LD_INT 0
73052: PPUSH
73053: LD_INT 1
73055: PPUSH
73056: LD_INT 0
73058: PPUSH
73059: CALL_OW 587
// end ;
73063: LD_VAR 0 3
73067: RET
// export function CenterOnNow ( unit ) ; begin
73068: LD_INT 0
73070: PPUSH
// result := IsInUnit ( unit ) ;
73071: LD_ADDR_VAR 0 2
73075: PUSH
73076: LD_VAR 0 1
73080: PPUSH
73081: CALL_OW 310
73085: ST_TO_ADDR
// if not result then
73086: LD_VAR 0 2
73090: NOT
73091: IFFALSE 73103
// result := unit ;
73093: LD_ADDR_VAR 0 2
73097: PUSH
73098: LD_VAR 0 1
73102: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73103: LD_VAR 0 1
73107: PPUSH
73108: CALL_OW 87
// end ;
73112: LD_VAR 0 2
73116: RET
// export function ComMoveHex ( unit , hex ) ; begin
73117: LD_INT 0
73119: PPUSH
// if not hex then
73120: LD_VAR 0 2
73124: NOT
73125: IFFALSE 73129
// exit ;
73127: GO 73182
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73129: LD_VAR 0 2
73133: PUSH
73134: LD_INT 1
73136: ARRAY
73137: PPUSH
73138: LD_VAR 0 2
73142: PUSH
73143: LD_INT 2
73145: ARRAY
73146: PPUSH
73147: CALL_OW 428
73151: IFFALSE 73155
// exit ;
73153: GO 73182
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73155: LD_VAR 0 1
73159: PPUSH
73160: LD_VAR 0 2
73164: PUSH
73165: LD_INT 1
73167: ARRAY
73168: PPUSH
73169: LD_VAR 0 2
73173: PUSH
73174: LD_INT 2
73176: ARRAY
73177: PPUSH
73178: CALL_OW 111
// end ;
73182: LD_VAR 0 3
73186: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73187: LD_INT 0
73189: PPUSH
73190: PPUSH
73191: PPUSH
// if not unit or not enemy then
73192: LD_VAR 0 1
73196: NOT
73197: PUSH
73198: LD_VAR 0 2
73202: NOT
73203: OR
73204: IFFALSE 73208
// exit ;
73206: GO 73332
// x := GetX ( enemy ) ;
73208: LD_ADDR_VAR 0 4
73212: PUSH
73213: LD_VAR 0 2
73217: PPUSH
73218: CALL_OW 250
73222: ST_TO_ADDR
// y := GetY ( enemy ) ;
73223: LD_ADDR_VAR 0 5
73227: PUSH
73228: LD_VAR 0 2
73232: PPUSH
73233: CALL_OW 251
73237: ST_TO_ADDR
// if ValidHex ( x , y ) then
73238: LD_VAR 0 4
73242: PPUSH
73243: LD_VAR 0 5
73247: PPUSH
73248: CALL_OW 488
73252: IFFALSE 73332
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73254: LD_VAR 0 2
73258: PPUSH
73259: CALL_OW 247
73263: PUSH
73264: LD_INT 3
73266: PUSH
73267: LD_INT 2
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: IN
73274: PUSH
73275: LD_VAR 0 1
73279: PPUSH
73280: CALL_OW 255
73284: PPUSH
73285: LD_VAR 0 2
73289: PPUSH
73290: CALL_OW 292
73294: OR
73295: IFFALSE 73313
// ComAttackUnit ( unit , enemy ) else
73297: LD_VAR 0 1
73301: PPUSH
73302: LD_VAR 0 2
73306: PPUSH
73307: CALL_OW 115
73311: GO 73332
// ComAgressiveMove ( unit , x , y ) ;
73313: LD_VAR 0 1
73317: PPUSH
73318: LD_VAR 0 4
73322: PPUSH
73323: LD_VAR 0 5
73327: PPUSH
73328: CALL_OW 114
// end ;
73332: LD_VAR 0 3
73336: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73337: LD_INT 0
73339: PPUSH
73340: PPUSH
73341: PPUSH
// list := AreaToList ( area , 0 ) ;
73342: LD_ADDR_VAR 0 5
73346: PUSH
73347: LD_VAR 0 1
73351: PPUSH
73352: LD_INT 0
73354: PPUSH
73355: CALL_OW 517
73359: ST_TO_ADDR
// if not list then
73360: LD_VAR 0 5
73364: NOT
73365: IFFALSE 73369
// exit ;
73367: GO 73499
// if all then
73369: LD_VAR 0 2
73373: IFFALSE 73461
// begin for i := 1 to list [ 1 ] do
73375: LD_ADDR_VAR 0 4
73379: PUSH
73380: DOUBLE
73381: LD_INT 1
73383: DEC
73384: ST_TO_ADDR
73385: LD_VAR 0 5
73389: PUSH
73390: LD_INT 1
73392: ARRAY
73393: PUSH
73394: FOR_TO
73395: IFFALSE 73457
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73397: LD_ADDR_VAR 0 3
73401: PUSH
73402: LD_VAR 0 3
73406: PPUSH
73407: LD_VAR 0 3
73411: PUSH
73412: LD_INT 1
73414: PLUS
73415: PPUSH
73416: LD_VAR 0 5
73420: PUSH
73421: LD_INT 1
73423: ARRAY
73424: PUSH
73425: LD_VAR 0 4
73429: ARRAY
73430: PUSH
73431: LD_VAR 0 5
73435: PUSH
73436: LD_INT 2
73438: ARRAY
73439: PUSH
73440: LD_VAR 0 4
73444: ARRAY
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PPUSH
73450: CALL_OW 1
73454: ST_TO_ADDR
73455: GO 73394
73457: POP
73458: POP
// exit ;
73459: GO 73499
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73461: LD_ADDR_VAR 0 3
73465: PUSH
73466: LD_VAR 0 5
73470: PUSH
73471: LD_INT 1
73473: ARRAY
73474: PUSH
73475: LD_INT 1
73477: ARRAY
73478: PUSH
73479: LD_VAR 0 5
73483: PUSH
73484: LD_INT 2
73486: ARRAY
73487: PUSH
73488: LD_INT 1
73490: ARRAY
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: EMPTY
73497: LIST
73498: ST_TO_ADDR
// end ;
73499: LD_VAR 0 3
73503: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73504: LD_INT 0
73506: PPUSH
73507: PPUSH
// list := AreaToList ( area , 0 ) ;
73508: LD_ADDR_VAR 0 4
73512: PUSH
73513: LD_VAR 0 1
73517: PPUSH
73518: LD_INT 0
73520: PPUSH
73521: CALL_OW 517
73525: ST_TO_ADDR
// if not list then
73526: LD_VAR 0 4
73530: NOT
73531: IFFALSE 73535
// exit ;
73533: GO 73576
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73535: LD_ADDR_VAR 0 3
73539: PUSH
73540: LD_VAR 0 4
73544: PUSH
73545: LD_INT 1
73547: ARRAY
73548: PUSH
73549: LD_INT 1
73551: ARRAY
73552: PUSH
73553: LD_VAR 0 4
73557: PUSH
73558: LD_INT 2
73560: ARRAY
73561: PUSH
73562: LD_INT 1
73564: ARRAY
73565: PUSH
73566: LD_VAR 0 2
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: LIST
73575: ST_TO_ADDR
// end ;
73576: LD_VAR 0 3
73580: RET
// export function First ( array ) ; begin
73581: LD_INT 0
73583: PPUSH
// if not array then
73584: LD_VAR 0 1
73588: NOT
73589: IFFALSE 73593
// exit ;
73591: GO 73607
// result := array [ 1 ] ;
73593: LD_ADDR_VAR 0 2
73597: PUSH
73598: LD_VAR 0 1
73602: PUSH
73603: LD_INT 1
73605: ARRAY
73606: ST_TO_ADDR
// end ;
73607: LD_VAR 0 2
73611: RET
// export function Last ( array ) ; begin
73612: LD_INT 0
73614: PPUSH
// if not array then
73615: LD_VAR 0 1
73619: NOT
73620: IFFALSE 73624
// exit ;
73622: GO 73640
// result := array [ array ] ;
73624: LD_ADDR_VAR 0 2
73628: PUSH
73629: LD_VAR 0 1
73633: PUSH
73634: LD_VAR 0 1
73638: ARRAY
73639: ST_TO_ADDR
// end ;
73640: LD_VAR 0 2
73644: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73645: LD_INT 0
73647: PPUSH
73648: PPUSH
// result := [ ] ;
73649: LD_ADDR_VAR 0 5
73653: PUSH
73654: EMPTY
73655: ST_TO_ADDR
// if not array then
73656: LD_VAR 0 1
73660: NOT
73661: IFFALSE 73665
// exit ;
73663: GO 73777
// for i := 1 to array do
73665: LD_ADDR_VAR 0 6
73669: PUSH
73670: DOUBLE
73671: LD_INT 1
73673: DEC
73674: ST_TO_ADDR
73675: LD_VAR 0 1
73679: PUSH
73680: FOR_TO
73681: IFFALSE 73775
// if array [ i ] [ index ] = value then
73683: LD_VAR 0 1
73687: PUSH
73688: LD_VAR 0 6
73692: ARRAY
73693: PUSH
73694: LD_VAR 0 2
73698: ARRAY
73699: PUSH
73700: LD_VAR 0 3
73704: EQUAL
73705: IFFALSE 73773
// begin if indexColumn then
73707: LD_VAR 0 4
73711: IFFALSE 73747
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73713: LD_ADDR_VAR 0 5
73717: PUSH
73718: LD_VAR 0 5
73722: PPUSH
73723: LD_VAR 0 1
73727: PUSH
73728: LD_VAR 0 6
73732: ARRAY
73733: PUSH
73734: LD_VAR 0 4
73738: ARRAY
73739: PPUSH
73740: CALL 69115 0 2
73744: ST_TO_ADDR
73745: GO 73773
// result := Join ( result , array [ i ] ) ;
73747: LD_ADDR_VAR 0 5
73751: PUSH
73752: LD_VAR 0 5
73756: PPUSH
73757: LD_VAR 0 1
73761: PUSH
73762: LD_VAR 0 6
73766: ARRAY
73767: PPUSH
73768: CALL 69115 0 2
73772: ST_TO_ADDR
// end ;
73773: GO 73680
73775: POP
73776: POP
// end ;
73777: LD_VAR 0 5
73781: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73782: LD_INT 0
73784: PPUSH
73785: PPUSH
73786: PPUSH
// if btype = b_depot then
73787: LD_VAR 0 2
73791: PUSH
73792: LD_INT 0
73794: EQUAL
73795: IFFALSE 73807
// begin result := true ;
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_INT 1
73804: ST_TO_ADDR
// exit ;
73805: GO 73923
// end ; pom := GetBase ( depot ) ;
73807: LD_ADDR_VAR 0 4
73811: PUSH
73812: LD_VAR 0 1
73816: PPUSH
73817: CALL_OW 274
73821: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73822: LD_ADDR_VAR 0 5
73826: PUSH
73827: LD_VAR 0 2
73831: PPUSH
73832: LD_VAR 0 1
73836: PPUSH
73837: CALL_OW 248
73841: PPUSH
73842: CALL_OW 450
73846: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73847: LD_ADDR_VAR 0 3
73851: PUSH
73852: LD_VAR 0 4
73856: PPUSH
73857: LD_INT 1
73859: PPUSH
73860: CALL_OW 275
73864: PUSH
73865: LD_VAR 0 5
73869: PUSH
73870: LD_INT 1
73872: ARRAY
73873: GREATEREQUAL
73874: PUSH
73875: LD_VAR 0 4
73879: PPUSH
73880: LD_INT 2
73882: PPUSH
73883: CALL_OW 275
73887: PUSH
73888: LD_VAR 0 5
73892: PUSH
73893: LD_INT 2
73895: ARRAY
73896: GREATEREQUAL
73897: AND
73898: PUSH
73899: LD_VAR 0 4
73903: PPUSH
73904: LD_INT 3
73906: PPUSH
73907: CALL_OW 275
73911: PUSH
73912: LD_VAR 0 5
73916: PUSH
73917: LD_INT 3
73919: ARRAY
73920: GREATEREQUAL
73921: AND
73922: ST_TO_ADDR
// end ;
73923: LD_VAR 0 3
73927: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73928: LD_INT 0
73930: PPUSH
// if not vehicles or not parkingPoint then
73931: LD_VAR 0 1
73935: NOT
73936: PUSH
73937: LD_VAR 0 2
73941: NOT
73942: OR
73943: IFFALSE 73947
// exit ;
73945: GO 74045
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73947: LD_ADDR_VAR 0 1
73951: PUSH
73952: LD_VAR 0 1
73956: PPUSH
73957: LD_INT 50
73959: PUSH
73960: EMPTY
73961: LIST
73962: PUSH
73963: LD_INT 3
73965: PUSH
73966: LD_INT 92
73968: PUSH
73969: LD_VAR 0 2
73973: PUSH
73974: LD_INT 1
73976: ARRAY
73977: PUSH
73978: LD_VAR 0 2
73982: PUSH
73983: LD_INT 2
73985: ARRAY
73986: PUSH
73987: LD_INT 8
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PPUSH
74004: CALL_OW 72
74008: ST_TO_ADDR
// if not vehicles then
74009: LD_VAR 0 1
74013: NOT
74014: IFFALSE 74018
// exit ;
74016: GO 74045
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74018: LD_VAR 0 1
74022: PPUSH
74023: LD_VAR 0 2
74027: PUSH
74028: LD_INT 1
74030: ARRAY
74031: PPUSH
74032: LD_VAR 0 2
74036: PUSH
74037: LD_INT 2
74039: ARRAY
74040: PPUSH
74041: CALL_OW 111
// end ;
74045: LD_VAR 0 3
74049: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74050: LD_INT 0
74052: PPUSH
74053: PPUSH
74054: PPUSH
// if not side or not area then
74055: LD_VAR 0 1
74059: NOT
74060: PUSH
74061: LD_VAR 0 2
74065: NOT
74066: OR
74067: IFFALSE 74071
// exit ;
74069: GO 74190
// tmp := AreaToList ( area , 0 ) ;
74071: LD_ADDR_VAR 0 5
74075: PUSH
74076: LD_VAR 0 2
74080: PPUSH
74081: LD_INT 0
74083: PPUSH
74084: CALL_OW 517
74088: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74089: LD_ADDR_VAR 0 4
74093: PUSH
74094: DOUBLE
74095: LD_INT 1
74097: DEC
74098: ST_TO_ADDR
74099: LD_VAR 0 5
74103: PUSH
74104: LD_INT 1
74106: ARRAY
74107: PUSH
74108: FOR_TO
74109: IFFALSE 74188
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74111: LD_VAR 0 5
74115: PUSH
74116: LD_INT 1
74118: ARRAY
74119: PUSH
74120: LD_VAR 0 4
74124: ARRAY
74125: PPUSH
74126: LD_VAR 0 5
74130: PUSH
74131: LD_INT 2
74133: ARRAY
74134: PUSH
74135: LD_VAR 0 4
74139: ARRAY
74140: PPUSH
74141: CALL_OW 351
74145: IFFALSE 74186
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74147: LD_VAR 0 5
74151: PUSH
74152: LD_INT 1
74154: ARRAY
74155: PUSH
74156: LD_VAR 0 4
74160: ARRAY
74161: PPUSH
74162: LD_VAR 0 5
74166: PUSH
74167: LD_INT 2
74169: ARRAY
74170: PUSH
74171: LD_VAR 0 4
74175: ARRAY
74176: PPUSH
74177: LD_VAR 0 1
74181: PPUSH
74182: CALL_OW 244
// end ;
74186: GO 74108
74188: POP
74189: POP
// end ; end_of_file
74190: LD_VAR 0 3
74194: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74195: LD_VAR 0 1
74199: PUSH
74200: LD_INT 200
74202: DOUBLE
74203: GREATEREQUAL
74204: IFFALSE 74212
74206: LD_INT 299
74208: DOUBLE
74209: LESSEQUAL
74210: IFTRUE 74214
74212: GO 74246
74214: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74215: LD_VAR 0 1
74219: PPUSH
74220: LD_VAR 0 2
74224: PPUSH
74225: LD_VAR 0 3
74229: PPUSH
74230: LD_VAR 0 4
74234: PPUSH
74235: LD_VAR 0 5
74239: PPUSH
74240: CALL 11087 0 5
74244: GO 74323
74246: LD_INT 300
74248: DOUBLE
74249: GREATEREQUAL
74250: IFFALSE 74258
74252: LD_INT 399
74254: DOUBLE
74255: LESSEQUAL
74256: IFTRUE 74260
74258: GO 74322
74260: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74261: LD_VAR 0 1
74265: PPUSH
74266: LD_VAR 0 2
74270: PPUSH
74271: LD_VAR 0 3
74275: PPUSH
74276: LD_VAR 0 4
74280: PPUSH
74281: LD_VAR 0 5
74285: PPUSH
74286: LD_VAR 0 6
74290: PPUSH
74291: LD_VAR 0 7
74295: PPUSH
74296: LD_VAR 0 8
74300: PPUSH
74301: LD_VAR 0 9
74305: PPUSH
74306: LD_VAR 0 10
74310: PPUSH
74311: LD_VAR 0 11
74315: PPUSH
74316: CALL 28125 0 11
74320: GO 74323
74322: POP
// end ;
74323: PPOPN 11
74325: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74326: LD_VAR 0 1
74330: PPUSH
74331: LD_VAR 0 2
74335: PPUSH
74336: LD_VAR 0 3
74340: PPUSH
74341: LD_VAR 0 4
74345: PPUSH
74346: LD_VAR 0 5
74350: PPUSH
74351: CALL 10823 0 5
// end ; end_of_file
74355: PPOPN 5
74357: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74358: LD_VAR 0 1
74362: PPUSH
74363: LD_VAR 0 2
74367: PPUSH
74368: LD_VAR 0 3
74372: PPUSH
74373: LD_VAR 0 4
74377: PPUSH
74378: LD_VAR 0 5
74382: PPUSH
74383: LD_VAR 0 6
74387: PPUSH
74388: CALL 15777 0 6
// end ;
74392: PPOPN 6
74394: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74395: LD_INT 0
74397: PPUSH
// begin if not units then
74398: LD_VAR 0 1
74402: NOT
74403: IFFALSE 74407
// exit ;
74405: GO 74407
// end ;
74407: PPOPN 7
74409: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74410: CALL 15664 0 0
// end ;
74414: PPOPN 1
74416: END
