// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 63048 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7093 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 29685 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 34549 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 34549 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 66881 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 29685 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 29685 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 29685 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 34549 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 29685 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 66881 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 34549 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 66881 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 69603 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 7
4706: PUSH
4707: LD_INT 12
4709: PUSH
4710: LD_INT 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: LESS
4724: IFFALSE 4798
// begin uc_side := 3 ;
4726: LD_ADDR_OWVAR 20
4730: PUSH
4731: LD_INT 3
4733: ST_TO_ADDR
// uc_nation := 3 ;
4734: LD_ADDR_OWVAR 21
4738: PUSH
4739: LD_INT 3
4741: ST_TO_ADDR
// ResetHc ;
4742: CALL 66881 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_INT 143
4793: PPUSH
4794: CALL_OW 52
// end ; if type = 1 then
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4829
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4808: LD_INT 143
4810: PPUSH
4811: LD_INT 21
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 51
4822: PPUSH
4823: CALL_OW 185
4827: GO 4908
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4829: LD_INT 143
4831: PPUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 23
4840: PUSH
4841: LD_INT 24
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_INT 44
4876: PUSH
4877: LD_INT 44
4879: PUSH
4880: LD_INT 43
4882: PUSH
4883: LD_INT 42
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: PPUSH
4904: CALL_OW 185
// end ;
4908: LD_VAR 0 2
4912: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4913: LD_EXP 8
4917: IFFALSE 5119
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4926: LD_EXP 25
4930: PPUSH
4931: LD_INT 79
4933: PPUSH
4934: LD_INT 155
4936: PPUSH
4937: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4941: LD_EXP 25
4945: PPUSH
4946: LD_INT 4
4948: PPUSH
4949: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_EXP 24
4962: PPUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PPUSH
4969: CALL_OW 72
4973: ST_TO_ADDR
// for i in tmp do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_VAR 0 2
4983: PUSH
4984: FOR_IN
4985: IFFALSE 5019
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_INT 123
4994: PPUSH
4995: LD_INT 60
4997: PPUSH
4998: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: LD_INT 153
5009: PPUSH
5010: LD_INT 103
5012: PPUSH
5013: CALL_OW 174
// end ;
5017: GO 4984
5019: POP
5020: POP
// repeat wait ( 0 0$1 ) ;
5021: LD_INT 35
5023: PPUSH
5024: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_EXP 24
5037: PPUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PPUSH
5044: CALL_OW 72
5048: ST_TO_ADDR
// for i in tmp do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 2
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5110
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 81
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 74
5103: PPUSH
5104: CALL_OW 115
5108: GO 5059
5110: POP
5111: POP
5112: LD_VAR 0 2
5116: NOT
5117: IFFALSE 5021
// end ;
5119: PPOPN 2
5121: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5122: LD_INT 5
5124: PPUSH
5125: LD_INT 81
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: IFFALSE 5152
5141: GO 5143
5143: DISABLE
// russianAlert := true ;
5144: LD_ADDR_EXP 5
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
5152: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5153: LD_INT 106
5155: PPUSH
5156: CALL_OW 302
5160: PUSH
5161: LD_INT 106
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: LD_INT 3
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_INT 106
5176: PPUSH
5177: CALL_OW 274
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 275
5189: PUSH
5190: LD_INT 100
5192: LESS
5193: AND
5194: IFFALSE 5218
5196: GO 5198
5198: DISABLE
// begin enable ;
5199: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 200
5213: PPUSH
5214: CALL_OW 276
// end ;
5218: END
// every 0 0$1 do var i , un , tmp ;
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
// begin uc_side := 3 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 3
5234: ST_TO_ADDR
// uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// tmp := [ ] ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to 2 do
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 2
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5341
// begin PrepareHuman ( false , 2 , 2 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: CALL_OW 380
// un := CreateHuman ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: CALL_OW 44
5288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 74
5325: PPUSH
5326: LD_INT 112
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 0
5334: PPUSH
5335: CALL_OW 50
// end ;
5339: GO 5263
5341: POP
5342: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5343: LD_INT 112
5345: PPUSH
5346: CALL_OW 274
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: LD_INT 100
5356: PPUSH
5357: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i in tmp do
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_IN
5379: IFFALSE 5461
// begin if IsDead ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 301
5390: IFFALSE 5408
// tmp := tmp diff i ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 3
5401: PUSH
5402: LD_VAR 0 1
5406: DIFF
5407: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 314
5417: NOT
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 281
5428: NOT
5429: AND
5430: IFFALSE 5459
// begin ComTransport ( i , kagan , mat_oil ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 112
5439: PPUSH
5440: LD_INT 2
5442: PPUSH
5443: CALL_OW 151
// AddComGive ( i , beria ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_INT 106
5454: PPUSH
5455: CALL_OW 221
// end ; end ;
5459: GO 5378
5461: POP
5462: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5463: LD_VAR 0 3
5467: NOT
5468: PUSH
5469: LD_INT 112
5471: PPUSH
5472: CALL_OW 301
5476: OR
5477: PUSH
5478: LD_INT 106
5480: PPUSH
5481: CALL_OW 301
5485: OR
5486: IFFALSE 5361
// end ;
5488: PPOPN 3
5490: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
// begin enable ;
5501: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 22
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 51
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: LD_INT 600
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5547: LD_ADDR_VAR 0 5
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 9
5606: PPUSH
5607: CALL_OW 435
5611: ST_TO_ADDR
// if not cargo or not skr or not dep then
5612: LD_VAR 0 4
5616: NOT
5617: PUSH
5618: LD_VAR 0 3
5622: NOT
5623: OR
5624: PUSH
5625: LD_VAR 0 5
5629: NOT
5630: OR
5631: IFFALSE 5635
// exit ;
5633: GO 5799
// for i in cargo do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 4
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5797
// begin if not skr then
5648: LD_VAR 0 3
5652: NOT
5653: IFFALSE 5659
// exit ;
5655: POP
5656: POP
5657: GO 5799
// if not HasTask ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 314
5668: NOT
5669: IFFALSE 5738
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: CALL_OW 117
// for j := 1 to 2 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 2
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5734
// skr := Delete ( skr , 1 ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
5732: GO 5711
5734: POP
5735: POP
// end else
5736: GO 5795
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 261
5747: PUSH
5748: LD_INT 3
5750: LESS
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 5
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 74
5771: PPUSH
5772: CALL_OW 296
5776: PUSH
5777: LD_INT 6
5779: LESS
5780: AND
5781: IFFALSE 5795
// SetFuel ( i , 100 ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_INT 100
5790: PPUSH
5791: CALL_OW 240
// end ;
5795: GO 5645
5797: POP
5798: POP
// end ;
5799: PPOPN 5
5801: END
// export function SendSupport ; var i , un ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// uc_nation := 3 ;
5807: LD_ADDR_OWVAR 21
5811: PUSH
5812: LD_INT 3
5814: ST_TO_ADDR
// uc_side := 3 ;
5815: LD_ADDR_OWVAR 20
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// ResetHc ;
5823: CALL 66881 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 3
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_OWVAR 67
5855: ARRAY
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5932
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_OWVAR 67
5870: PPUSH
5871: CALL_OW 380
// un := CreateHuman ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: CALL_OW 44
5884: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 107
5892: PPUSH
5893: LD_INT 95
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_INT 56
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: CALL_OW 114
// AddComHold ( un ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 200
// end ;
5930: GO 5857
5932: POP
5933: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 4
5939: PPUSH
5940: LD_OWVAR 67
5944: PPUSH
5945: CALL_OW 380
// un := CreateHuman ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: LD_INT 107
5966: PPUSH
5967: LD_INT 95
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5980: LD_VAR 0 3
5984: PPUSH
5985: LD_INT 59
5987: PPUSH
5988: LD_INT 25
5990: PPUSH
5991: CALL_OW 111
// if Difficulty > 1 then
5995: LD_OWVAR 67
5999: PUSH
6000: LD_INT 1
6002: GREATER
6003: IFFALSE 6112
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 2
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6110
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_OWVAR 67
6048: PPUSH
6049: CALL_OW 380
// un := CreateHuman ;
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: CALL_OW 44
6062: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 107
6070: PPUSH
6071: LD_INT 95
6073: PPUSH
6074: LD_INT 4
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 45
6091: PPUSH
6092: LD_INT 76
6094: PPUSH
6095: CALL_OW 114
// AddComHold ( un ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 200
// end ;
6108: GO 6035
6110: POP
6111: POP
// end ; end ;
6112: LD_VAR 0 1
6116: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6117: LD_OWVAR 1
6121: PUSH
6122: LD_INT 42000
6124: GREATEREQUAL
6125: PUSH
6126: LD_OWVAR 67
6130: PUSH
6131: LD_INT 1
6133: GREATER
6134: AND
6135: PUSH
6136: LD_EXP 24
6140: PUSH
6141: LD_INT 4
6143: GREATER
6144: AND
6145: PUSH
6146: LD_EXP 8
6150: NOT
6151: AND
6152: IFFALSE 6445
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
// begin enable ;
6163: ENABLE
// tmp := [ ] ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: LD_INT 91
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 47
6188: PUSH
6189: LD_INT 80
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 39
6198: PUSH
6199: LD_INT 67
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: LD_INT 60
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 52
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 1
6264: MINUS
6265: ARRAY
6266: PUSH
6267: FOR_TO
6268: IFFALSE 6419
// begin uc_side := 3 ;
6270: LD_ADDR_OWVAR 20
6274: PUSH
6275: LD_INT 3
6277: ST_TO_ADDR
// uc_nation := 3 ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_INT 3
6285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6286: LD_INT 22
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 42
6297: PUSH
6298: LD_INT 42
6300: PUSH
6301: LD_INT 44
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 3
6316: MOD
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ARRAY
6322: PPUSH
6323: LD_INT 100
6325: PPUSH
6326: CALL 34549 0 5
// un := CreateVehicle ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: CALL_OW 45
6339: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 57
6347: PPUSH
6348: LD_INT 103
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 5
6398: PPUSH
6399: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6403: CALL_OW 44
6407: PPUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: CALL_OW 52
// end ;
6417: GO 6267
6419: POP
6420: POP
// repeat wait ( 0 0$1 ) ;
6421: LD_INT 35
6423: PPUSH
6424: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_VAR 0 4
6437: PPUSH
6438: CALL 68962 0 2
6442: NOT
6443: IFFALSE 6421
// end ;
6445: PPOPN 4
6447: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6448: LD_INT 3
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: IFFALSE 6567
6485: GO 6487
6487: DISABLE
6488: LD_INT 0
6490: PPUSH
// begin enable ;
6491: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6565
// if GetFuel ( i ) < 3 then
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 261
6545: PUSH
6546: LD_INT 3
6548: LESS
6549: IFFALSE 6563
// SetFuel ( i , 3 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 240
6563: GO 6533
6565: POP
6566: POP
// end ; end_of_file
6567: PPOPN 1
6569: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// uc_side := 2 ;
6578: LD_ADDR_OWVAR 20
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// uc_nation := 2 ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_INT 2
6593: ST_TO_ADDR
// InitVc ;
6594: CALL_OW 20
// ResetHc ;
6598: CALL 66881 0 0
// for j := 1 to 2 do
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6840
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_INT 178
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 268
6635: PUSH
6636: LD_INT 121
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_VAR 0 3
6651: ARRAY
6652: ST_TO_ADDR
// for i := 1 to 8 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 8
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6836
// begin uc_side := 2 ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
// uc_nation := 2 ;
6677: LD_ADDR_OWVAR 21
6681: PUSH
6682: LD_INT 2
6684: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6685: LD_INT 14
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 26
6696: PUSH
6697: LD_INT 27
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 99
6718: PPUSH
6719: CALL 34549 0 5
// veh := CreateVehicle ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: CALL_OW 45
6732: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 3
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_VAR 0 6
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6775: LD_INT 0
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: LD_INT 6
6783: PPUSH
6784: CALL_OW 380
// un := CreateHuman ;
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: CALL_OW 44
6797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 186
6819: PPUSH
6820: LD_INT 17
6822: PPUSH
6823: CALL_OW 111
// wait ( 0 0$2 ) ;
6827: LD_INT 70
6829: PPUSH
6830: CALL_OW 67
// end ;
6834: GO 6666
6836: POP
6837: POP
// end ;
6838: GO 6615
6840: POP
6841: POP
// for i := 1 to 10 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 10
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6923
// begin PrepareHuman ( false , 1 , 5 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_INT 5
6866: PPUSH
6867: CALL_OW 380
// un := CreateHuman ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6881: LD_VAR 0 4
6885: PPUSH
6886: LD_INT 178
6888: PPUSH
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 186
6906: PPUSH
6907: LD_INT 17
6909: PPUSH
6910: CALL_OW 111
// wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// end ;
6921: GO 6855
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 1
6929: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 50
6942: PUSH
6943: EMPTY
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: IFFALSE 7090
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin enable ;
6963: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not enemy then
7002: LD_VAR 0 2
7006: NOT
7007: IFFALSE 7029
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 50
7046: PUSH
7047: EMPTY
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PUSH
7059: FOR_IN
7060: IFFALSE 7088
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 74
7081: PPUSH
7082: CALL_OW 115
7086: GO 7059
7088: POP
7089: POP
// end ; end_of_file
7090: PPOPN 2
7092: END
// export function Action ; begin
7093: LD_INT 0
7095: PPUSH
// InGameOn ;
7096: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7100: LD_INT 106
7102: PPUSH
7103: LD_INT 3
7105: PPUSH
7106: CALL_OW 86
// wait ( 0 0$2 ) ;
7110: LD_INT 70
7112: PPUSH
7113: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7117: LD_STRING target1
7119: PPUSH
7120: CALL_OW 337
// InGameOff ;
7124: CALL_OW 9
// SaveForQuickRestart ;
7128: CALL_OW 22
// end ;
7132: LD_VAR 0 1
7136: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7137: LD_INT 64
7139: PPUSH
7140: CALL_OW 301
7144: PUSH
7145: LD_EXP 8
7149: NOT
7150: AND
7151: IFFALSE 7171
7153: GO 7155
7155: DISABLE
// begin omicronFall := true ;
7156: LD_ADDR_EXP 7
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// YouLost ( omi ) ;
7164: LD_STRING omi
7166: PPUSH
7167: CALL_OW 104
// end ;
7171: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7172: LD_INT 4
7174: PPUSH
7175: LD_EXP 14
7179: PPUSH
7180: CALL_OW 292
7184: PUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_EXP 14
7192: PPUSH
7193: CALL_OW 310
7197: PPUSH
7198: CALL_OW 292
7202: OR
7203: PUSH
7204: LD_INT 64
7206: PPUSH
7207: CALL_OW 302
7211: AND
7212: IFFALSE 7765
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 4
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 72
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// for i in tmp do
7276: LD_ADDR_VAR 0 1
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7303
// SetSide ( i , 1 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 235
7301: GO 7286
7303: POP
7304: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7305: LD_EXP 14
7309: PPUSH
7310: LD_INT 37
7312: PPUSH
7313: LD_INT 40
7315: PPUSH
7316: CALL_OW 111
// wait ( 0 0$5 ) ;
7320: LD_INT 175
7322: PPUSH
7323: CALL_OW 67
// ComExit ( Sikorski ) ;
7327: LD_EXP 14
7331: PPUSH
7332: CALL 66754 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_INT 37
7343: PPUSH
7344: LD_INT 40
7346: PPUSH
7347: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7351: LD_EXP 14
7355: PPUSH
7356: CALL_OW 85
// wait ( 0 0$2 ) ;
7360: LD_INT 70
7362: PPUSH
7363: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL 66754 0 1
7381: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 14
7391: PPUSH
7392: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_EXP 14
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 5
7420: LESS
7421: PUSH
7422: LD_EXP 14
7426: PPUSH
7427: CALL_OW 310
7431: NOT
7432: AND
7433: IFFALSE 7396
// ComTurnUnit ( Sikorski , speaker ) ;
7435: LD_EXP 14
7439: PPUSH
7440: LD_VAR 0 3
7444: PPUSH
7445: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_EXP 14
7458: PPUSH
7459: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7463: LD_EXP 14
7467: PPUSH
7468: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7472: LD_EXP 14
7476: PPUSH
7477: LD_STRING DS-1
7479: PPUSH
7480: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_STRING DP-1
7491: PPUSH
7492: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DS-2
7503: PPUSH
7504: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_STRING DP-2
7515: PPUSH
7516: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7520: LD_EXP 14
7524: PPUSH
7525: LD_STRING DS-3
7527: PPUSH
7528: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_STRING DP-3
7539: PPUSH
7540: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7544: LD_EXP 14
7548: PPUSH
7549: LD_STRING DS-4
7551: PPUSH
7552: CALL_OW 88
// wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// if whereHeWas then
7563: LD_VAR 0 4
7567: IFFALSE 7583
// ComEnterUnit ( speaker , whereHeWas ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_VAR 0 4
7578: PPUSH
7579: CALL_OW 120
// ComHold ( Sikorski ) ;
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 140
// wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7599: LD_EXP 15
7603: PPUSH
7604: LD_STRING DR-1
7606: PPUSH
7607: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DS-5
7618: PPUSH
7619: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7623: LD_EXP 15
7627: PPUSH
7628: LD_STRING DR-2
7630: PPUSH
7631: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7635: LD_EXP 14
7639: PPUSH
7640: LD_STRING DS-6
7642: PPUSH
7643: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7647: LD_EXP 15
7651: PPUSH
7652: LD_STRING DR-3
7654: PPUSH
7655: CALL_OW 94
// InGameOff ;
7659: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7663: LD_STRING target2
7665: PPUSH
7666: CALL_OW 337
// sikorskiInOmicron := true ;
7670: LD_ADDR_EXP 9
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7678: LD_INT 70
7680: PPUSH
7681: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_STRING DS-7
7692: PPUSH
7693: CALL_OW 88
// wait ( 3 3$00 ) ;
7697: LD_INT 6300
7699: PPUSH
7700: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7704: LD_EXP 15
7708: PPUSH
7709: LD_STRING DRforce-5
7711: PPUSH
7712: CALL_OW 94
// wait ( 4 4$50 ) ;
7716: LD_INT 10150
7718: PPUSH
7719: CALL_OW 67
// FirstReinforcements ;
7723: CALL 7942 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7727: LD_INT 25200
7729: PPUSH
7730: LD_INT 31500
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7742: LD_EXP 15
7746: PPUSH
7747: LD_STRING DRforce-10
7749: PPUSH
7750: CALL_OW 94
// wait ( 9 9$50 ) ;
7754: LD_INT 20650
7756: PPUSH
7757: CALL_OW 67
// SecondReinforcements ;
7761: CALL 8785 0 0
// end ;
7765: PPOPN 4
7767: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7768: LD_EXP 14
7772: PPUSH
7773: CALL_OW 256
7777: PUSH
7778: LD_INT 1000
7780: LESS
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 101
7807: PUSH
7808: LD_INT 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: AND
7829: IFFALSE 7846
7831: GO 7833
7833: DISABLE
// Say ( Sikorski , DRus ) ;
7834: LD_EXP 14
7838: PPUSH
7839: LD_STRING DRus
7841: PPUSH
7842: CALL_OW 88
7846: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7847: LD_OWVAR 1
7851: PUSH
7852: LD_INT 23100
7854: PUSH
7855: LD_INT 22050
7857: PUSH
7858: LD_INT 20300
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: GREATEREQUAL
7872: IFFALSE 7941
7874: GO 7876
7876: DISABLE
// begin SendSupport ;
7877: CALL 5802 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7881: LD_EXP 24
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: PPUSH
7901: LD_INT 62
7903: PPUSH
7904: LD_INT 22
7906: PPUSH
7907: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7911: LD_EXP 25
7915: PPUSH
7916: LD_INT 69
7918: PPUSH
7919: LD_INT 27
7921: PPUSH
7922: CALL_OW 111
// wait ( 1 1$00 ) ;
7926: LD_INT 2100
7928: PPUSH
7929: CALL_OW 67
// startAttackOnOmicron := true ;
7933: LD_ADDR_EXP 6
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ;
7941: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// uc_side := 4 ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_INT 4
7957: ST_TO_ADDR
// uc_nation := 1 ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// tmp := [ ] ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// ResetHc ;
7973: CALL 66881 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 4
7988: PPUSH
7989: LD_INT 77
7991: PPUSH
7992: CALL 34549 0 5
// un := CreateVehicle ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: CALL_OW 45
8005: ST_TO_ADDR
// tmp := tmp union un ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 4
8015: PUSH
8016: LD_VAR 0 3
8020: UNION
8021: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 106
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8052: LD_INT 0
8054: PPUSH
8055: LD_INT 3
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 380
// un := CreateHuman ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: CALL_OW 44
8074: ST_TO_ADDR
// tmp := tmp union un ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 4
8084: PUSH
8085: LD_VAR 0 3
8089: UNION
8090: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: ARRAY
8110: PPUSH
8111: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 109
8122: PPUSH
8123: LD_INT 9
8125: PPUSH
8126: CALL_OW 111
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 2
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: PUSH
8167: FOR_TO
8168: IFFALSE 8232
// begin PrepareHuman ( false , 1 , 2 ) ;
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 2
8178: PPUSH
8179: CALL_OW 380
// un := CreateHuman ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: CALL_OW 44
8192: ST_TO_ADDR
// tmp := tmp union un ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: LD_VAR 0 3
8207: UNION
8208: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 105
8216: PPUSH
8217: LD_INT 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 50
// end ;
8230: GO 8167
8232: POP
8233: POP
// PrepareHuman ( false , 4 , 2 ) ;
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 380
// un := CreateHuman ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// tmp := tmp union un ;
8257: LD_ADDR_VAR 0 4
8261: PUSH
8262: LD_VAR 0 4
8266: PUSH
8267: LD_VAR 0 3
8271: UNION
8272: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 105
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8294: LD_VAR 0 4
8298: PPUSH
8299: LD_INT 26
8301: PPUSH
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 114
// spotted := false ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8332: LD_INT 35
8334: PPUSH
8335: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1000
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 5
8370: NOT
8371: AND
8372: IFFALSE 8498
// begin spotted := true ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_INT 3
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 1000
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: PUSH
8414: LD_INT 1
8416: ARRAY
8417: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 250
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: CALL_OW 251
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8447: LD_VAR 0 6
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 6
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 12
8470: NEG
8471: PPUSH
8472: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 6
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 84
// end ; for i in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8540
// if not HasTask ( i ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 314
8520: NOT
8521: IFFALSE 8538
// ComAgressiveMove ( i , 26 , 35 ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_INT 26
8530: PPUSH
8531: LD_INT 35
8533: PPUSH
8534: CALL_OW 114
8538: GO 8508
8540: POP
8541: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 50
8549: PUSH
8550: EMPTY
8551: LIST
8552: PPUSH
8553: CALL_OW 72
8557: NOT
8558: IFFALSE 8593
// begin if spotted then
8560: LD_VAR 0 5
8564: IFFALSE 8591
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8566: LD_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 6
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 331
// exit ;
8591: GO 8780
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 91
8600: PUSH
8601: LD_INT 64
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 4
8619: PPUSH
8620: LD_EXP 14
8624: PPUSH
8625: CALL_OW 292
8629: OR
8630: IFFALSE 8332
// omicronSquad := omicronSquad union tmp ;
8632: LD_ADDR_EXP 13
8636: PUSH
8637: LD_EXP 13
8641: PUSH
8642: LD_VAR 0 4
8646: UNION
8647: ST_TO_ADDR
// if spotted then
8648: LD_VAR 0 5
8652: IFFALSE 8679
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8654: LD_VAR 0 6
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 331
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8706
// SetSide ( i , 1 ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 235
8704: GO 8689
8706: POP
8707: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 50
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: IFFALSE 8780
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 26
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: EMPTY
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 72
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_STRING Dcargo
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: LD_VAR 0 1
8784: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// uc_side := 1 ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// uc_nation := 1 ;
8799: LD_ADDR_OWVAR 21
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// ResetHc ;
8807: CALL 66881 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: CALL_OW 380
// un := CreateHuman ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: CALL_OW 44
8833: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8834: LD_INT 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 5
8845: PPUSH
8846: LD_INT 90
8848: PPUSH
8849: CALL 34549 0 5
// veh := CreateVehicle ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 83
8882: PPUSH
8883: LD_INT 154
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_INT 4
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_OWVAR 67
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8989
// begin PrepareHuman ( false , 1 , 3 ) ;
8943: LD_INT 0
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 380
// un := CreateHuman ;
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: CALL_OW 44
8965: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 83
8973: PPUSH
8974: LD_INT 154
8976: PPUSH
8977: LD_INT 10
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 50
// end ;
8987: GO 8940
8989: POP
8990: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 83
9021: PPUSH
9022: LD_INT 154
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_STRING Dhelp
9042: PPUSH
9043: CALL_OW 94
// ResetHc ;
9047: CALL 66881 0 0
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9056: LD_EXP 5
9060: IFFALSE 9202
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_EXP 20
9079: PPUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 54
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// for i := 1 to tmp do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 2
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9200
// begin ComExitBuilding ( tmp [ i ] ) ;
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 3
9187: PUSH
9188: LD_VAR 0 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 180
// end ;
9198: GO 9154
9200: POP
9201: POP
// end ;
9202: PPOPN 3
9204: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9205: LD_EXP 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: AND
9239: IFFALSE 9385
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
9247: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9248: LD_EXP 16
9252: PPUSH
9253: LD_STRING D9a-Kur-1
9255: PPUSH
9256: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9260: LD_EXP 19
9264: PPUSH
9265: LD_STRING D9a-Bur-1
9267: PPUSH
9268: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D9a-Kur-2
9279: PPUSH
9280: CALL_OW 94
// retreatFromOmicron := true ;
9284: LD_ADDR_EXP 8
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_EXP 18
9301: PUSH
9302: LD_EXP 20
9306: PUSH
9307: LD_EXP 21
9311: UNION
9312: PPUSH
9313: LD_INT 3
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 72
9334: UNION
9335: ST_TO_ADDR
// for i in noncombat do
9336: LD_ADDR_VAR 0 1
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9383
// begin if IsInUnit ( i ) then
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 310
9358: IFFALSE 9369
// ComExitBuilding ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 173
// end ;
9381: GO 9346
9383: POP
9384: POP
// end ;
9385: PPOPN 2
9387: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9388: LD_OWVAR 1
9392: PUSH
9393: LD_INT 42000
9395: PPUSH
9396: LD_INT 63000
9398: PPUSH
9399: CALL_OW 12
9403: GREATER
9404: IFFALSE 9549
9406: GO 9408
9408: DISABLE
9409: LD_INT 0
9411: PPUSH
// begin uc_side := 4 ;
9412: LD_ADDR_OWVAR 20
9416: PUSH
9417: LD_INT 4
9419: ST_TO_ADDR
// uc_nation := 4 ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 4
9427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_INT 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 380
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 1
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 161
9466: PPUSH
9467: LD_INT 162
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 50
// ResetHc ;
9480: CALL 66881 0 0
// wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_STRING Dun1
9498: PPUSH
9499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9503: LD_INT 35
9505: PPUSH
9506: CALL_OW 67
// if IsDead ( un ) then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 301
9519: IFFALSE 9523
// exit ;
9521: GO 9549
// until See ( 1 , un ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 292
9535: IFFALSE 9503
// SetSide ( un , 1 ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 1
9551: END
// every 0 0$1 trigger tanksCounter >= 20 do
9552: LD_EXP 12
9556: PUSH
9557: LD_INT 20
9559: GREATEREQUAL
9560: IFFALSE 9572
9562: GO 9564
9564: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9565: LD_STRING ACH_PANZERKNACKER
9567: PPUSH
9568: CALL_OW 543
9572: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9573: LD_OWVAR 1
9577: PUSH
9578: LD_INT 94500
9580: PPUSH
9581: LD_INT 109200
9583: PPUSH
9584: CALL_OW 12
9588: GREATER
9589: IFFALSE 9852
9591: GO 9593
9593: DISABLE
9594: LD_INT 0
9596: PPUSH
// begin PrepareArabian ;
9597: CALL 6570 0 0
// uc_side := 4 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 4
9608: ST_TO_ADDR
// uc_nation := 1 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// ResetHc ;
9617: CALL 66881 0 0
// un := CreateHuman ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: CALL_OW 44
9630: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_STRING ar_come
9638: PPUSH
9639: CALL_OW 94
// wait ( 0 0$20 ) ;
9643: LD_INT 700
9645: PPUSH
9646: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DR-Back
9657: PPUSH
9658: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9662: LD_STRING target3
9664: PPUSH
9665: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9669: LD_INT 10
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9679: LD_INT 35
9681: PPUSH
9682: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9686: LD_EXP 14
9690: PPUSH
9691: LD_INT 10
9693: PPUSH
9694: CALL_OW 308
9698: PUSH
9699: LD_INT 10
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: OR
9717: IFFALSE 9679
// SayRadio ( Harrison , you_win ) ;
9719: LD_EXP 15
9723: PPUSH
9724: LD_STRING you_win
9726: PPUSH
9727: CALL_OW 94
// AddMedal ( med , 1 ) ;
9731: LD_STRING med
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9741: LD_EXP 11
9745: PUSH
9746: LD_INT 27
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_OWVAR 67
9764: ARRAY
9765: GREATER
9766: IFFALSE 9780
// AddMedal ( ru , 1 ) else
9768: LD_STRING ru
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 101
9778: GO 9791
// AddMedal ( ru , - 1 ) ;
9780: LD_STRING ru
9782: PPUSH
9783: LD_INT 1
9785: NEG
9786: PPUSH
9787: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9791: LD_EXP 10
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: LESS
9816: IFFALSE 9830
// AddMedal ( pep , 1 ) else
9818: LD_STRING pep
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 101
9828: GO 9841
// AddMedal ( pep , - 1 ) ;
9830: LD_STRING pep
9832: PPUSH
9833: LD_INT 1
9835: NEG
9836: PPUSH
9837: CALL_OW 101
// GiveMedals ( MAIN ) ;
9841: LD_STRING MAIN
9843: PPUSH
9844: CALL_OW 102
// YouWin ;
9848: CALL_OW 103
// end ; end_of_file
9852: PPOPN 1
9854: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL 10711 0 1
// if un = Sikorski then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 14
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( sik ) ;
9876: LD_STRING sik
9878: PPUSH
9879: CALL_OW 104
// if un in russianOmicronAttackers then
9883: LD_VAR 0 1
9887: PUSH
9888: LD_EXP 24
9892: IN
9893: IFFALSE 9911
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9895: LD_ADDR_EXP 24
9899: PUSH
9900: LD_EXP 24
9904: PUSH
9905: LD_VAR 0 1
9909: DIFF
9910: ST_TO_ADDR
// if un in russianCargo then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_EXP 25
9920: IN
9921: IFFALSE 9939
// russianCargo := russianCargo diff un ;
9923: LD_ADDR_EXP 25
9927: PUSH
9928: LD_EXP 25
9932: PUSH
9933: LD_VAR 0 1
9937: DIFF
9938: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 51
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: IN
9973: IFFALSE 9982
// ProduceNew ( 1 ) ;
9975: LD_INT 1
9977: PPUSH
9978: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: PUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 247
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: AND
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 248
10027: PUSH
10028: LD_INT 1
10030: EQUAL
10031: AND
10032: IFFALSE 10048
// usLoseCounter := usLoseCounter + 1 ;
10034: LD_ADDR_EXP 10
10038: PUSH
10039: LD_EXP 10
10043: PUSH
10044: LD_INT 1
10046: PLUS
10047: ST_TO_ADDR
// end ;
10048: PPOPN 1
10050: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 2
10060: PPUSH
10061: CALL 10833 0 2
// if GetSide ( factory ) <> 3 then
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 3
10077: NONEQUAL
10078: IFFALSE 10082
// exit ;
10080: GO 10144
// if GetWeapon ( veh ) = ru_cargo_bay then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 51
10094: EQUAL
10095: IFFALSE 10099
// exit ;
10097: GO 10144
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 310
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: UNION
10128: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 71
10136: PPUSH
10137: LD_INT 37
10139: PPUSH
10140: CALL_OW 174
// end ;
10144: PPOPN 2
10146: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10147: LD_VAR 0 2
10151: PUSH
10152: LD_EXP 24
10156: IN
10157: IFFALSE 10175
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10159: LD_ADDR_EXP 24
10163: PUSH
10164: LD_EXP 24
10168: PUSH
10169: LD_VAR 0 2
10173: DIFF
10174: ST_TO_ADDR
// if oldId in russianCargo then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_EXP 25
10184: IN
10185: IFFALSE 10203
// russianCargo := russianCargo diff oldId ;
10187: LD_ADDR_EXP 25
10191: PUSH
10192: LD_EXP 25
10196: PUSH
10197: LD_VAR 0 2
10201: DIFF
10202: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10203: LD_VAR 0 1
10207: PUSH
10208: LD_EXP 24
10212: IN
10213: IFFALSE 10231
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10215: LD_ADDR_EXP 24
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_VAR 0 1
10229: DIFF
10230: ST_TO_ADDR
// if newId in russianCargo then
10231: LD_VAR 0 1
10235: PUSH
10236: LD_EXP 25
10240: IN
10241: IFFALSE 10259
// russianCargo := russianCargo diff newId ;
10243: LD_ADDR_EXP 25
10247: PUSH
10248: LD_EXP 25
10252: PUSH
10253: LD_VAR 0 1
10257: DIFF
10258: ST_TO_ADDR
// end ;
10259: PPOPN 4
10261: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: CALL 10809 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10281: LD_VAR 0 2
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: AND
10318: IFFALSE 10334
// ruLoseCounter := ruLoseCounter + 1 ;
10320: LD_ADDR_EXP 11
10324: PUSH
10325: LD_EXP 11
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: IN
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 247
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// tanksCounter := tanksCounter + 1 ;
10388: LD_ADDR_EXP 12
10392: PUSH
10393: LD_EXP 12
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// end ;
10402: PPOPN 3
10404: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10574
// begin ComRepairVehicle ( driver , veh ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 301
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 301
10467: OR
10468: PUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 250
10481: GREATER
10482: OR
10483: IFFALSE 10441
// if GetLives ( veh ) > 250 then
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 250
10497: GREATER
10498: IFFALSE 10574
// begin ComEnterUnit ( driver , veh ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 71
10521: PPUSH
10522: LD_INT 29
10524: PPUSH
10525: CALL_OW 171
// SetTag ( veh , 1 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 109
// if not veh in russianOmicronAttackers then
10541: LD_VAR 0 2
10545: PUSH
10546: LD_EXP 24
10550: IN
10551: NOT
10552: IFFALSE 10574
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10554: LD_ADDR_EXP 24
10558: PUSH
10559: LD_EXP 24
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 66366 0 2
10573: ST_TO_ADDR
// end ; end ; end ;
10574: PPOPN 4
10576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL 10817 0 1
// end ; end_of_file
10586: PPOPN 1
10588: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10589: LD_EXP 9
10593: PUSH
10594: LD_INT 6
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 287
10604: PUSH
10605: LD_INT 18
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: LESS
10625: AND
10626: IFFALSE 10668
10628: GO 10630
10630: DISABLE
// begin enable ;
10631: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10632: LD_INT 350
10634: PPUSH
10635: LD_INT 1050
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10647: LD_INT 2
10649: PPUSH
10650: LD_INT 5
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: LD_INT 6
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 55
// end ;
10668: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10669: LD_INT 7
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 287
10679: PUSH
10680: LD_INT 5
10682: LESS
10683: IFFALSE 10710
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10689: LD_INT 2
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: CALL_OW 12
10699: PPUSH
10700: LD_INT 7
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 55
// end ; end_of_file end_of_file
10710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 264
10726: PUSH
10727: LD_EXP 99
10731: EQUAL
10732: IFFALSE 10804
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10734: LD_INT 68
10736: PPUSH
10737: LD_VAR 0 1
10741: PPUSH
10742: CALL_OW 255
10746: PPUSH
10747: CALL_OW 321
10751: PUSH
10752: LD_INT 2
10754: EQUAL
10755: IFFALSE 10767
// eff := 70 else
10757: LD_ADDR_VAR 0 4
10761: PUSH
10762: LD_INT 70
10764: ST_TO_ADDR
10765: GO 10775
// eff := 30 ;
10767: LD_ADDR_VAR 0 4
10771: PUSH
10772: LD_INT 30
10774: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10775: LD_VAR 0 1
10779: PPUSH
10780: CALL_OW 250
10784: PPUSH
10785: LD_VAR 0 1
10789: PPUSH
10790: CALL_OW 251
10794: PPUSH
10795: LD_VAR 0 4
10799: PPUSH
10800: CALL_OW 495
// end ; end ;
10804: LD_VAR 0 2
10808: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10809: LD_INT 0
10811: PPUSH
// end ;
10812: LD_VAR 0 4
10816: RET
// export function SOS_Command ( cmd ) ; begin
10817: LD_INT 0
10819: PPUSH
// end ;
10820: LD_VAR 0 2
10824: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10825: LD_INT 0
10827: PPUSH
// end ;
10828: LD_VAR 0 6
10832: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10833: LD_INT 0
10835: PPUSH
10836: PPUSH
// if not vehicle or not factory then
10837: LD_VAR 0 1
10841: NOT
10842: PUSH
10843: LD_VAR 0 2
10847: NOT
10848: OR
10849: IFFALSE 10853
// exit ;
10851: GO 11084
// if factoryWaypoints >= factory then
10853: LD_EXP 26
10857: PUSH
10858: LD_VAR 0 2
10862: GREATEREQUAL
10863: IFFALSE 11084
// if factoryWaypoints [ factory ] then
10865: LD_EXP 26
10869: PUSH
10870: LD_VAR 0 2
10874: ARRAY
10875: IFFALSE 11084
// begin if GetControl ( vehicle ) = control_manual then
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 263
10886: PUSH
10887: LD_INT 1
10889: EQUAL
10890: IFFALSE 10971
// begin driver := IsDrivenBy ( vehicle ) ;
10892: LD_ADDR_VAR 0 4
10896: PUSH
10897: LD_VAR 0 1
10901: PPUSH
10902: CALL_OW 311
10906: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10907: LD_VAR 0 4
10911: PPUSH
10912: LD_EXP 26
10916: PUSH
10917: LD_VAR 0 2
10921: ARRAY
10922: PUSH
10923: LD_INT 3
10925: ARRAY
10926: PPUSH
10927: LD_EXP 26
10931: PUSH
10932: LD_VAR 0 2
10936: ARRAY
10937: PUSH
10938: LD_INT 4
10940: ARRAY
10941: PPUSH
10942: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10946: LD_VAR 0 4
10950: PPUSH
10951: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10955: LD_VAR 0 4
10959: PPUSH
10960: LD_VAR 0 2
10964: PPUSH
10965: CALL_OW 180
// end else
10969: GO 11084
// if GetControl ( vehicle ) = control_remote then
10971: LD_VAR 0 1
10975: PPUSH
10976: CALL_OW 263
10980: PUSH
10981: LD_INT 2
10983: EQUAL
10984: IFFALSE 11045
// begin wait ( 0 0$2 ) ;
10986: LD_INT 70
10988: PPUSH
10989: CALL_OW 67
// if Connect ( vehicle ) then
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL 37642 0 1
11002: IFFALSE 11043
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11004: LD_VAR 0 1
11008: PPUSH
11009: LD_EXP 26
11013: PUSH
11014: LD_VAR 0 2
11018: ARRAY
11019: PUSH
11020: LD_INT 3
11022: ARRAY
11023: PPUSH
11024: LD_EXP 26
11028: PUSH
11029: LD_VAR 0 2
11033: ARRAY
11034: PUSH
11035: LD_INT 4
11037: ARRAY
11038: PPUSH
11039: CALL_OW 171
// end else
11043: GO 11084
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_EXP 26
11054: PUSH
11055: LD_VAR 0 2
11059: ARRAY
11060: PUSH
11061: LD_INT 3
11063: ARRAY
11064: PPUSH
11065: LD_EXP 26
11069: PUSH
11070: LD_VAR 0 2
11074: ARRAY
11075: PUSH
11076: LD_INT 4
11078: ARRAY
11079: PPUSH
11080: CALL_OW 171
// end ; end ;
11084: LD_VAR 0 3
11088: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11089: LD_INT 0
11091: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11092: LD_VAR 0 1
11096: PUSH
11097: LD_INT 250
11099: EQUAL
11100: PUSH
11101: LD_VAR 0 2
11105: PPUSH
11106: CALL_OW 264
11110: PUSH
11111: LD_EXP 102
11115: EQUAL
11116: AND
11117: IFFALSE 11138
// MinerPlaceMine ( unit , x , y ) ;
11119: LD_VAR 0 2
11123: PPUSH
11124: LD_VAR 0 4
11128: PPUSH
11129: LD_VAR 0 5
11133: PPUSH
11134: CALL 13866 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11138: LD_VAR 0 1
11142: PUSH
11143: LD_INT 251
11145: EQUAL
11146: PUSH
11147: LD_VAR 0 2
11151: PPUSH
11152: CALL_OW 264
11156: PUSH
11157: LD_EXP 102
11161: EQUAL
11162: AND
11163: IFFALSE 11184
// MinerDetonateMine ( unit , x , y ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: LD_VAR 0 4
11174: PPUSH
11175: LD_VAR 0 5
11179: PPUSH
11180: CALL 14143 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11184: LD_VAR 0 1
11188: PUSH
11189: LD_INT 252
11191: EQUAL
11192: PUSH
11193: LD_VAR 0 2
11197: PPUSH
11198: CALL_OW 264
11202: PUSH
11203: LD_EXP 102
11207: EQUAL
11208: AND
11209: IFFALSE 11230
// MinerCreateMinefield ( unit , x , y ) ;
11211: LD_VAR 0 2
11215: PPUSH
11216: LD_VAR 0 4
11220: PPUSH
11221: LD_VAR 0 5
11225: PPUSH
11226: CALL 14560 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11230: LD_VAR 0 1
11234: PUSH
11235: LD_INT 253
11237: EQUAL
11238: PUSH
11239: LD_VAR 0 2
11243: PPUSH
11244: CALL_OW 257
11248: PUSH
11249: LD_INT 5
11251: EQUAL
11252: AND
11253: IFFALSE 11274
// ComBinocular ( unit , x , y ) ;
11255: LD_VAR 0 2
11259: PPUSH
11260: LD_VAR 0 4
11264: PPUSH
11265: LD_VAR 0 5
11269: PPUSH
11270: CALL 14931 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11274: LD_VAR 0 1
11278: PUSH
11279: LD_INT 254
11281: EQUAL
11282: PUSH
11283: LD_VAR 0 2
11287: PPUSH
11288: CALL_OW 264
11292: PUSH
11293: LD_EXP 97
11297: EQUAL
11298: AND
11299: PUSH
11300: LD_VAR 0 3
11304: PPUSH
11305: CALL_OW 263
11309: PUSH
11310: LD_INT 3
11312: EQUAL
11313: AND
11314: IFFALSE 11330
// HackDestroyVehicle ( unit , selectedUnit ) ;
11316: LD_VAR 0 2
11320: PPUSH
11321: LD_VAR 0 3
11325: PPUSH
11326: CALL 13226 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11330: LD_VAR 0 1
11334: PUSH
11335: LD_INT 255
11337: EQUAL
11338: PUSH
11339: LD_VAR 0 2
11343: PPUSH
11344: CALL_OW 264
11348: PUSH
11349: LD_INT 14
11351: PUSH
11352: LD_INT 53
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: IN
11359: AND
11360: PUSH
11361: LD_VAR 0 4
11365: PPUSH
11366: LD_VAR 0 5
11370: PPUSH
11371: CALL_OW 488
11375: AND
11376: IFFALSE 11400
// CutTreeXYR ( unit , x , y , 12 ) ;
11378: LD_VAR 0 2
11382: PPUSH
11383: LD_VAR 0 4
11387: PPUSH
11388: LD_VAR 0 5
11392: PPUSH
11393: LD_INT 12
11395: PPUSH
11396: CALL 11792 0 4
// if cmd = 256 then
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 256
11407: EQUAL
11408: IFFALSE 11429
// SetFactoryWaypoint ( unit , x , y ) ;
11410: LD_VAR 0 2
11414: PPUSH
11415: LD_VAR 0 4
11419: PPUSH
11420: LD_VAR 0 5
11424: PPUSH
11425: CALL 11434 0 3
// end ;
11429: LD_VAR 0 6
11433: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
11434: LD_INT 0
11436: PPUSH
11437: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
11438: LD_VAR 0 1
11442: NOT
11443: PUSH
11444: LD_VAR 0 2
11448: PPUSH
11449: LD_VAR 0 3
11453: PPUSH
11454: CALL_OW 488
11458: NOT
11459: OR
11460: PUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 266
11470: PUSH
11471: LD_INT 3
11473: NONEQUAL
11474: PUSH
11475: LD_VAR 0 1
11479: PPUSH
11480: CALL_OW 247
11484: PUSH
11485: LD_INT 1
11487: EQUAL
11488: NOT
11489: AND
11490: OR
11491: IFFALSE 11495
// exit ;
11493: GO 11644
// if GetType ( factory ) = unit_human then
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 247
11504: PUSH
11505: LD_INT 1
11507: EQUAL
11508: IFFALSE 11525
// factory := IsInUnit ( factory ) ;
11510: LD_ADDR_VAR 0 1
11514: PUSH
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL_OW 310
11524: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
11525: LD_VAR 0 1
11529: PPUSH
11530: CALL_OW 266
11534: PUSH
11535: LD_INT 3
11537: NONEQUAL
11538: IFFALSE 11542
// exit ;
11540: GO 11644
// if HexInfo ( x , y ) = factory then
11542: LD_VAR 0 2
11546: PPUSH
11547: LD_VAR 0 3
11551: PPUSH
11552: CALL_OW 428
11556: PUSH
11557: LD_VAR 0 1
11561: EQUAL
11562: IFFALSE 11589
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
11564: LD_ADDR_EXP 26
11568: PUSH
11569: LD_EXP 26
11573: PPUSH
11574: LD_VAR 0 1
11578: PPUSH
11579: LD_INT 0
11581: PPUSH
11582: CALL_OW 1
11586: ST_TO_ADDR
11587: GO 11640
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
11589: LD_ADDR_EXP 26
11593: PUSH
11594: LD_EXP 26
11598: PPUSH
11599: LD_VAR 0 1
11603: PPUSH
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 255
11613: PUSH
11614: LD_VAR 0 1
11618: PUSH
11619: LD_VAR 0 2
11623: PUSH
11624: LD_VAR 0 3
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: PPUSH
11635: CALL_OW 1
11639: ST_TO_ADDR
// UpdateFactoryWaypoints ;
11640: CALL 11649 0 0
// end ;
11644: LD_VAR 0 4
11648: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
11649: LD_INT 0
11651: PPUSH
11652: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
11653: LD_STRING resetFactoryWaypoint();
11655: PPUSH
11656: CALL_OW 559
// if factoryWaypoints then
11660: LD_EXP 26
11664: IFFALSE 11787
// begin for i := 1 to factoryWaypoints do
11666: LD_ADDR_VAR 0 2
11670: PUSH
11671: DOUBLE
11672: LD_INT 1
11674: DEC
11675: ST_TO_ADDR
11676: LD_EXP 26
11680: PUSH
11681: FOR_TO
11682: IFFALSE 11785
// if factoryWaypoints [ i ] then
11684: LD_EXP 26
11688: PUSH
11689: LD_VAR 0 2
11693: ARRAY
11694: IFFALSE 11783
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
11696: LD_STRING setFactoryWaypointXY(
11698: PUSH
11699: LD_EXP 26
11703: PUSH
11704: LD_VAR 0 2
11708: ARRAY
11709: PUSH
11710: LD_INT 1
11712: ARRAY
11713: STR
11714: PUSH
11715: LD_STRING ,
11717: STR
11718: PUSH
11719: LD_EXP 26
11723: PUSH
11724: LD_VAR 0 2
11728: ARRAY
11729: PUSH
11730: LD_INT 2
11732: ARRAY
11733: STR
11734: PUSH
11735: LD_STRING ,
11737: STR
11738: PUSH
11739: LD_EXP 26
11743: PUSH
11744: LD_VAR 0 2
11748: ARRAY
11749: PUSH
11750: LD_INT 3
11752: ARRAY
11753: STR
11754: PUSH
11755: LD_STRING ,
11757: STR
11758: PUSH
11759: LD_EXP 26
11763: PUSH
11764: LD_VAR 0 2
11768: ARRAY
11769: PUSH
11770: LD_INT 4
11772: ARRAY
11773: STR
11774: PUSH
11775: LD_STRING )
11777: STR
11778: PPUSH
11779: CALL_OW 559
11783: GO 11681
11785: POP
11786: POP
// end ; end ;
11787: LD_VAR 0 1
11791: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11792: LD_INT 0
11794: PPUSH
11795: PPUSH
11796: PPUSH
11797: PPUSH
11798: PPUSH
11799: PPUSH
11800: PPUSH
11801: PPUSH
11802: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11803: LD_VAR 0 1
11807: NOT
11808: PUSH
11809: LD_VAR 0 2
11813: PPUSH
11814: LD_VAR 0 3
11818: PPUSH
11819: CALL_OW 488
11823: NOT
11824: OR
11825: PUSH
11826: LD_VAR 0 4
11830: NOT
11831: OR
11832: IFFALSE 11836
// exit ;
11834: GO 12176
// list := [ ] ;
11836: LD_ADDR_VAR 0 13
11840: PUSH
11841: EMPTY
11842: ST_TO_ADDR
// if x - r < 0 then
11843: LD_VAR 0 2
11847: PUSH
11848: LD_VAR 0 4
11852: MINUS
11853: PUSH
11854: LD_INT 0
11856: LESS
11857: IFFALSE 11869
// min_x := 0 else
11859: LD_ADDR_VAR 0 7
11863: PUSH
11864: LD_INT 0
11866: ST_TO_ADDR
11867: GO 11885
// min_x := x - r ;
11869: LD_ADDR_VAR 0 7
11873: PUSH
11874: LD_VAR 0 2
11878: PUSH
11879: LD_VAR 0 4
11883: MINUS
11884: ST_TO_ADDR
// if y - r < 0 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_VAR 0 4
11894: MINUS
11895: PUSH
11896: LD_INT 0
11898: LESS
11899: IFFALSE 11911
// min_y := 0 else
11901: LD_ADDR_VAR 0 8
11905: PUSH
11906: LD_INT 0
11908: ST_TO_ADDR
11909: GO 11927
// min_y := y - r ;
11911: LD_ADDR_VAR 0 8
11915: PUSH
11916: LD_VAR 0 3
11920: PUSH
11921: LD_VAR 0 4
11925: MINUS
11926: ST_TO_ADDR
// max_x := x + r ;
11927: LD_ADDR_VAR 0 9
11931: PUSH
11932: LD_VAR 0 2
11936: PUSH
11937: LD_VAR 0 4
11941: PLUS
11942: ST_TO_ADDR
// max_y := y + r ;
11943: LD_ADDR_VAR 0 10
11947: PUSH
11948: LD_VAR 0 3
11952: PUSH
11953: LD_VAR 0 4
11957: PLUS
11958: ST_TO_ADDR
// for _x = min_x to max_x do
11959: LD_ADDR_VAR 0 11
11963: PUSH
11964: DOUBLE
11965: LD_VAR 0 7
11969: DEC
11970: ST_TO_ADDR
11971: LD_VAR 0 9
11975: PUSH
11976: FOR_TO
11977: IFFALSE 12094
// for _y = min_y to max_y do
11979: LD_ADDR_VAR 0 12
11983: PUSH
11984: DOUBLE
11985: LD_VAR 0 8
11989: DEC
11990: ST_TO_ADDR
11991: LD_VAR 0 10
11995: PUSH
11996: FOR_TO
11997: IFFALSE 12090
// begin if not ValidHex ( _x , _y ) then
11999: LD_VAR 0 11
12003: PPUSH
12004: LD_VAR 0 12
12008: PPUSH
12009: CALL_OW 488
12013: NOT
12014: IFFALSE 12018
// continue ;
12016: GO 11996
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12018: LD_VAR 0 11
12022: PPUSH
12023: LD_VAR 0 12
12027: PPUSH
12028: CALL_OW 351
12032: PUSH
12033: LD_VAR 0 11
12037: PPUSH
12038: LD_VAR 0 12
12042: PPUSH
12043: CALL_OW 554
12047: AND
12048: IFFALSE 12088
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12050: LD_ADDR_VAR 0 13
12054: PUSH
12055: LD_VAR 0 13
12059: PPUSH
12060: LD_VAR 0 13
12064: PUSH
12065: LD_INT 1
12067: PLUS
12068: PPUSH
12069: LD_VAR 0 11
12073: PUSH
12074: LD_VAR 0 12
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PPUSH
12083: CALL_OW 2
12087: ST_TO_ADDR
// end ;
12088: GO 11996
12090: POP
12091: POP
12092: GO 11976
12094: POP
12095: POP
// if not list then
12096: LD_VAR 0 13
12100: NOT
12101: IFFALSE 12105
// exit ;
12103: GO 12176
// for i in list do
12105: LD_ADDR_VAR 0 6
12109: PUSH
12110: LD_VAR 0 13
12114: PUSH
12115: FOR_IN
12116: IFFALSE 12174
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12118: LD_VAR 0 1
12122: PPUSH
12123: LD_STRING M
12125: PUSH
12126: LD_VAR 0 6
12130: PUSH
12131: LD_INT 1
12133: ARRAY
12134: PUSH
12135: LD_VAR 0 6
12139: PUSH
12140: LD_INT 2
12142: ARRAY
12143: PUSH
12144: LD_INT 0
12146: PUSH
12147: LD_INT 0
12149: PUSH
12150: LD_INT 0
12152: PUSH
12153: LD_INT 0
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: PUSH
12165: EMPTY
12166: LIST
12167: PPUSH
12168: CALL_OW 447
12172: GO 12115
12174: POP
12175: POP
// end ;
12176: LD_VAR 0 5
12180: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12181: LD_EXP 27
12185: NOT
12186: IFFALSE 12236
12188: GO 12190
12190: DISABLE
// begin initHack := true ;
12191: LD_ADDR_EXP 27
12195: PUSH
12196: LD_INT 1
12198: ST_TO_ADDR
// hackTanks := [ ] ;
12199: LD_ADDR_EXP 28
12203: PUSH
12204: EMPTY
12205: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12206: LD_ADDR_EXP 29
12210: PUSH
12211: EMPTY
12212: ST_TO_ADDR
// hackLimit := 3 ;
12213: LD_ADDR_EXP 30
12217: PUSH
12218: LD_INT 3
12220: ST_TO_ADDR
// hackDist := 12 ;
12221: LD_ADDR_EXP 31
12225: PUSH
12226: LD_INT 12
12228: ST_TO_ADDR
// hackCounter := [ ] ;
12229: LD_ADDR_EXP 32
12233: PUSH
12234: EMPTY
12235: ST_TO_ADDR
// end ;
12236: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12237: LD_EXP 27
12241: PUSH
12242: LD_INT 34
12244: PUSH
12245: LD_EXP 97
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PPUSH
12254: CALL_OW 69
12258: AND
12259: IFFALSE 12514
12261: GO 12263
12263: DISABLE
12264: LD_INT 0
12266: PPUSH
12267: PPUSH
// begin enable ;
12268: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12269: LD_ADDR_VAR 0 1
12273: PUSH
12274: LD_INT 34
12276: PUSH
12277: LD_EXP 97
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: PUSH
12291: FOR_IN
12292: IFFALSE 12512
// begin if not i in hackTanks then
12294: LD_VAR 0 1
12298: PUSH
12299: LD_EXP 28
12303: IN
12304: NOT
12305: IFFALSE 12388
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12307: LD_ADDR_EXP 28
12311: PUSH
12312: LD_EXP 28
12316: PPUSH
12317: LD_EXP 28
12321: PUSH
12322: LD_INT 1
12324: PLUS
12325: PPUSH
12326: LD_VAR 0 1
12330: PPUSH
12331: CALL_OW 1
12335: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12336: LD_ADDR_EXP 29
12340: PUSH
12341: LD_EXP 29
12345: PPUSH
12346: LD_EXP 29
12350: PUSH
12351: LD_INT 1
12353: PLUS
12354: PPUSH
12355: EMPTY
12356: PPUSH
12357: CALL_OW 1
12361: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12362: LD_ADDR_EXP 32
12366: PUSH
12367: LD_EXP 32
12371: PPUSH
12372: LD_EXP 32
12376: PUSH
12377: LD_INT 1
12379: PLUS
12380: PPUSH
12381: EMPTY
12382: PPUSH
12383: CALL_OW 1
12387: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 302
12397: NOT
12398: IFFALSE 12411
// begin HackUnlinkAll ( i ) ;
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL 12517 0 1
// continue ;
12409: GO 12291
// end ; HackCheckCapturedStatus ( i ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: CALL 12960 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12420: LD_ADDR_VAR 0 2
12424: PUSH
12425: LD_INT 81
12427: PUSH
12428: LD_VAR 0 1
12432: PPUSH
12433: CALL_OW 255
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 33
12444: PUSH
12445: LD_INT 3
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 91
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: LD_EXP 31
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 50
12472: PUSH
12473: EMPTY
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 69
12486: ST_TO_ADDR
// if not tmp then
12487: LD_VAR 0 2
12491: NOT
12492: IFFALSE 12496
// continue ;
12494: GO 12291
// HackLink ( i , tmp ) ;
12496: LD_VAR 0 1
12500: PPUSH
12501: LD_VAR 0 2
12505: PPUSH
12506: CALL 12653 0 2
// end ;
12510: GO 12291
12512: POP
12513: POP
// end ;
12514: PPOPN 2
12516: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12517: LD_INT 0
12519: PPUSH
12520: PPUSH
12521: PPUSH
// if not hack in hackTanks then
12522: LD_VAR 0 1
12526: PUSH
12527: LD_EXP 28
12531: IN
12532: NOT
12533: IFFALSE 12537
// exit ;
12535: GO 12648
// index := GetElementIndex ( hackTanks , hack ) ;
12537: LD_ADDR_VAR 0 4
12541: PUSH
12542: LD_EXP 28
12546: PPUSH
12547: LD_VAR 0 1
12551: PPUSH
12552: CALL 34456 0 2
12556: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12557: LD_EXP 29
12561: PUSH
12562: LD_VAR 0 4
12566: ARRAY
12567: IFFALSE 12648
// begin for i in hackTanksCaptured [ index ] do
12569: LD_ADDR_VAR 0 3
12573: PUSH
12574: LD_EXP 29
12578: PUSH
12579: LD_VAR 0 4
12583: ARRAY
12584: PUSH
12585: FOR_IN
12586: IFFALSE 12612
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12588: LD_VAR 0 3
12592: PUSH
12593: LD_INT 1
12595: ARRAY
12596: PPUSH
12597: LD_VAR 0 3
12601: PUSH
12602: LD_INT 2
12604: ARRAY
12605: PPUSH
12606: CALL_OW 235
12610: GO 12585
12612: POP
12613: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12614: LD_ADDR_EXP 29
12618: PUSH
12619: LD_EXP 29
12623: PPUSH
12624: LD_VAR 0 4
12628: PPUSH
12629: EMPTY
12630: PPUSH
12631: CALL_OW 1
12635: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12636: LD_VAR 0 1
12640: PPUSH
12641: LD_INT 0
12643: PPUSH
12644: CALL_OW 505
// end ; end ;
12648: LD_VAR 0 2
12652: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12653: LD_INT 0
12655: PPUSH
12656: PPUSH
12657: PPUSH
// if not hack in hackTanks or not vehicles then
12658: LD_VAR 0 1
12662: PUSH
12663: LD_EXP 28
12667: IN
12668: NOT
12669: PUSH
12670: LD_VAR 0 2
12674: NOT
12675: OR
12676: IFFALSE 12680
// exit ;
12678: GO 12955
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12680: LD_ADDR_VAR 0 2
12684: PUSH
12685: LD_VAR 0 1
12689: PPUSH
12690: LD_VAR 0 2
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL 35106 0 4
12705: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12706: LD_ADDR_VAR 0 5
12710: PUSH
12711: LD_EXP 28
12715: PPUSH
12716: LD_VAR 0 1
12720: PPUSH
12721: CALL 34456 0 2
12725: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12726: LD_EXP 29
12730: PUSH
12731: LD_VAR 0 5
12735: ARRAY
12736: PUSH
12737: LD_EXP 30
12741: LESS
12742: IFFALSE 12931
// begin for i := 1 to vehicles do
12744: LD_ADDR_VAR 0 4
12748: PUSH
12749: DOUBLE
12750: LD_INT 1
12752: DEC
12753: ST_TO_ADDR
12754: LD_VAR 0 2
12758: PUSH
12759: FOR_TO
12760: IFFALSE 12929
// begin if hackTanksCaptured [ index ] = hackLimit then
12762: LD_EXP 29
12766: PUSH
12767: LD_VAR 0 5
12771: ARRAY
12772: PUSH
12773: LD_EXP 30
12777: EQUAL
12778: IFFALSE 12782
// break ;
12780: GO 12929
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12782: LD_ADDR_EXP 32
12786: PUSH
12787: LD_EXP 32
12791: PPUSH
12792: LD_VAR 0 5
12796: PPUSH
12797: LD_EXP 32
12801: PUSH
12802: LD_VAR 0 5
12806: ARRAY
12807: PUSH
12808: LD_INT 1
12810: PLUS
12811: PPUSH
12812: CALL_OW 1
12816: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12817: LD_ADDR_EXP 29
12821: PUSH
12822: LD_EXP 29
12826: PPUSH
12827: LD_VAR 0 5
12831: PUSH
12832: LD_EXP 29
12836: PUSH
12837: LD_VAR 0 5
12841: ARRAY
12842: PUSH
12843: LD_INT 1
12845: PLUS
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PPUSH
12851: LD_VAR 0 2
12855: PUSH
12856: LD_VAR 0 4
12860: ARRAY
12861: PUSH
12862: LD_VAR 0 2
12866: PUSH
12867: LD_VAR 0 4
12871: ARRAY
12872: PPUSH
12873: CALL_OW 255
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PPUSH
12882: CALL 34671 0 3
12886: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12887: LD_VAR 0 2
12891: PUSH
12892: LD_VAR 0 4
12896: ARRAY
12897: PPUSH
12898: LD_VAR 0 1
12902: PPUSH
12903: CALL_OW 255
12907: PPUSH
12908: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12912: LD_VAR 0 2
12916: PUSH
12917: LD_VAR 0 4
12921: ARRAY
12922: PPUSH
12923: CALL_OW 141
// end ;
12927: GO 12759
12929: POP
12930: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12931: LD_VAR 0 1
12935: PPUSH
12936: LD_EXP 29
12940: PUSH
12941: LD_VAR 0 5
12945: ARRAY
12946: PUSH
12947: LD_INT 0
12949: PLUS
12950: PPUSH
12951: CALL_OW 505
// end ;
12955: LD_VAR 0 3
12959: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12960: LD_INT 0
12962: PPUSH
12963: PPUSH
12964: PPUSH
12965: PPUSH
// if not hack in hackTanks then
12966: LD_VAR 0 1
12970: PUSH
12971: LD_EXP 28
12975: IN
12976: NOT
12977: IFFALSE 12981
// exit ;
12979: GO 13221
// index := GetElementIndex ( hackTanks , hack ) ;
12981: LD_ADDR_VAR 0 4
12985: PUSH
12986: LD_EXP 28
12990: PPUSH
12991: LD_VAR 0 1
12995: PPUSH
12996: CALL 34456 0 2
13000: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13001: LD_ADDR_VAR 0 3
13005: PUSH
13006: DOUBLE
13007: LD_EXP 29
13011: PUSH
13012: LD_VAR 0 4
13016: ARRAY
13017: INC
13018: ST_TO_ADDR
13019: LD_INT 1
13021: PUSH
13022: FOR_DOWNTO
13023: IFFALSE 13195
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13025: LD_ADDR_VAR 0 5
13029: PUSH
13030: LD_EXP 29
13034: PUSH
13035: LD_VAR 0 4
13039: ARRAY
13040: PUSH
13041: LD_VAR 0 3
13045: ARRAY
13046: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13047: LD_VAR 0 5
13051: PUSH
13052: LD_INT 1
13054: ARRAY
13055: PPUSH
13056: CALL_OW 302
13060: NOT
13061: PUSH
13062: LD_VAR 0 5
13066: PUSH
13067: LD_INT 1
13069: ARRAY
13070: PPUSH
13071: CALL_OW 255
13075: PUSH
13076: LD_VAR 0 1
13080: PPUSH
13081: CALL_OW 255
13085: NONEQUAL
13086: OR
13087: IFFALSE 13193
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13089: LD_VAR 0 5
13093: PUSH
13094: LD_INT 1
13096: ARRAY
13097: PPUSH
13098: CALL_OW 305
13102: PUSH
13103: LD_VAR 0 5
13107: PUSH
13108: LD_INT 1
13110: ARRAY
13111: PPUSH
13112: CALL_OW 255
13116: PUSH
13117: LD_VAR 0 1
13121: PPUSH
13122: CALL_OW 255
13126: EQUAL
13127: AND
13128: IFFALSE 13152
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13130: LD_VAR 0 5
13134: PUSH
13135: LD_INT 1
13137: ARRAY
13138: PPUSH
13139: LD_VAR 0 5
13143: PUSH
13144: LD_INT 2
13146: ARRAY
13147: PPUSH
13148: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13152: LD_ADDR_EXP 29
13156: PUSH
13157: LD_EXP 29
13161: PPUSH
13162: LD_VAR 0 4
13166: PPUSH
13167: LD_EXP 29
13171: PUSH
13172: LD_VAR 0 4
13176: ARRAY
13177: PPUSH
13178: LD_VAR 0 3
13182: PPUSH
13183: CALL_OW 3
13187: PPUSH
13188: CALL_OW 1
13192: ST_TO_ADDR
// end ; end ;
13193: GO 13022
13195: POP
13196: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13197: LD_VAR 0 1
13201: PPUSH
13202: LD_EXP 29
13206: PUSH
13207: LD_VAR 0 4
13211: ARRAY
13212: PUSH
13213: LD_INT 0
13215: PLUS
13216: PPUSH
13217: CALL_OW 505
// end ;
13221: LD_VAR 0 2
13225: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13226: LD_INT 0
13228: PPUSH
13229: PPUSH
13230: PPUSH
13231: PPUSH
// if not hack in hackTanks then
13232: LD_VAR 0 1
13236: PUSH
13237: LD_EXP 28
13241: IN
13242: NOT
13243: IFFALSE 13247
// exit ;
13245: GO 13332
// index := GetElementIndex ( hackTanks , hack ) ;
13247: LD_ADDR_VAR 0 5
13251: PUSH
13252: LD_EXP 28
13256: PPUSH
13257: LD_VAR 0 1
13261: PPUSH
13262: CALL 34456 0 2
13266: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13267: LD_ADDR_VAR 0 4
13271: PUSH
13272: DOUBLE
13273: LD_INT 1
13275: DEC
13276: ST_TO_ADDR
13277: LD_EXP 29
13281: PUSH
13282: LD_VAR 0 5
13286: ARRAY
13287: PUSH
13288: FOR_TO
13289: IFFALSE 13330
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13291: LD_EXP 29
13295: PUSH
13296: LD_VAR 0 5
13300: ARRAY
13301: PUSH
13302: LD_VAR 0 4
13306: ARRAY
13307: PUSH
13308: LD_INT 1
13310: ARRAY
13311: PUSH
13312: LD_VAR 0 2
13316: EQUAL
13317: IFFALSE 13328
// KillUnit ( vehicle ) ;
13319: LD_VAR 0 2
13323: PPUSH
13324: CALL_OW 66
13328: GO 13288
13330: POP
13331: POP
// end ;
13332: LD_VAR 0 3
13336: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13337: LD_EXP 33
13341: NOT
13342: IFFALSE 13377
13344: GO 13346
13346: DISABLE
// begin initMiner := true ;
13347: LD_ADDR_EXP 33
13351: PUSH
13352: LD_INT 1
13354: ST_TO_ADDR
// minersList := [ ] ;
13355: LD_ADDR_EXP 34
13359: PUSH
13360: EMPTY
13361: ST_TO_ADDR
// minerMinesList := [ ] ;
13362: LD_ADDR_EXP 35
13366: PUSH
13367: EMPTY
13368: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13369: LD_ADDR_EXP 36
13373: PUSH
13374: LD_INT 5
13376: ST_TO_ADDR
// end ;
13377: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13378: LD_EXP 33
13382: PUSH
13383: LD_INT 34
13385: PUSH
13386: LD_EXP 102
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PPUSH
13395: CALL_OW 69
13399: AND
13400: IFFALSE 13863
13402: GO 13404
13404: DISABLE
13405: LD_INT 0
13407: PPUSH
13408: PPUSH
13409: PPUSH
13410: PPUSH
// begin enable ;
13411: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13412: LD_ADDR_VAR 0 1
13416: PUSH
13417: LD_INT 34
13419: PUSH
13420: LD_EXP 102
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PPUSH
13429: CALL_OW 69
13433: PUSH
13434: FOR_IN
13435: IFFALSE 13507
// begin if not i in minersList then
13437: LD_VAR 0 1
13441: PUSH
13442: LD_EXP 34
13446: IN
13447: NOT
13448: IFFALSE 13505
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13450: LD_ADDR_EXP 34
13454: PUSH
13455: LD_EXP 34
13459: PPUSH
13460: LD_EXP 34
13464: PUSH
13465: LD_INT 1
13467: PLUS
13468: PPUSH
13469: LD_VAR 0 1
13473: PPUSH
13474: CALL_OW 1
13478: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13479: LD_ADDR_EXP 35
13483: PUSH
13484: LD_EXP 35
13488: PPUSH
13489: LD_EXP 35
13493: PUSH
13494: LD_INT 1
13496: PLUS
13497: PPUSH
13498: EMPTY
13499: PPUSH
13500: CALL_OW 1
13504: ST_TO_ADDR
// end end ;
13505: GO 13434
13507: POP
13508: POP
// for i := minerMinesList downto 1 do
13509: LD_ADDR_VAR 0 1
13513: PUSH
13514: DOUBLE
13515: LD_EXP 35
13519: INC
13520: ST_TO_ADDR
13521: LD_INT 1
13523: PUSH
13524: FOR_DOWNTO
13525: IFFALSE 13861
// begin if IsLive ( minersList [ i ] ) then
13527: LD_EXP 34
13531: PUSH
13532: LD_VAR 0 1
13536: ARRAY
13537: PPUSH
13538: CALL_OW 300
13542: IFFALSE 13570
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13544: LD_EXP 34
13548: PUSH
13549: LD_VAR 0 1
13553: ARRAY
13554: PPUSH
13555: LD_EXP 35
13559: PUSH
13560: LD_VAR 0 1
13564: ARRAY
13565: PPUSH
13566: CALL_OW 505
// if not minerMinesList [ i ] then
13570: LD_EXP 35
13574: PUSH
13575: LD_VAR 0 1
13579: ARRAY
13580: NOT
13581: IFFALSE 13585
// continue ;
13583: GO 13524
// for j := minerMinesList [ i ] downto 1 do
13585: LD_ADDR_VAR 0 2
13589: PUSH
13590: DOUBLE
13591: LD_EXP 35
13595: PUSH
13596: LD_VAR 0 1
13600: ARRAY
13601: INC
13602: ST_TO_ADDR
13603: LD_INT 1
13605: PUSH
13606: FOR_DOWNTO
13607: IFFALSE 13857
// begin side := GetSide ( minersList [ i ] ) ;
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: LD_EXP 34
13618: PUSH
13619: LD_VAR 0 1
13623: ARRAY
13624: PPUSH
13625: CALL_OW 255
13629: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13630: LD_ADDR_VAR 0 4
13634: PUSH
13635: LD_EXP 35
13639: PUSH
13640: LD_VAR 0 1
13644: ARRAY
13645: PUSH
13646: LD_VAR 0 2
13650: ARRAY
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: LD_EXP 35
13660: PUSH
13661: LD_VAR 0 1
13665: ARRAY
13666: PUSH
13667: LD_VAR 0 2
13671: ARRAY
13672: PUSH
13673: LD_INT 2
13675: ARRAY
13676: PPUSH
13677: CALL_OW 428
13681: ST_TO_ADDR
// if not tmp then
13682: LD_VAR 0 4
13686: NOT
13687: IFFALSE 13691
// continue ;
13689: GO 13606
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13691: LD_VAR 0 4
13695: PUSH
13696: LD_INT 81
13698: PUSH
13699: LD_VAR 0 3
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PPUSH
13708: CALL_OW 69
13712: IN
13713: PUSH
13714: LD_EXP 35
13718: PUSH
13719: LD_VAR 0 1
13723: ARRAY
13724: PUSH
13725: LD_VAR 0 2
13729: ARRAY
13730: PUSH
13731: LD_INT 1
13733: ARRAY
13734: PPUSH
13735: LD_EXP 35
13739: PUSH
13740: LD_VAR 0 1
13744: ARRAY
13745: PUSH
13746: LD_VAR 0 2
13750: ARRAY
13751: PUSH
13752: LD_INT 2
13754: ARRAY
13755: PPUSH
13756: CALL_OW 458
13760: AND
13761: IFFALSE 13855
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13763: LD_EXP 35
13767: PUSH
13768: LD_VAR 0 1
13772: ARRAY
13773: PUSH
13774: LD_VAR 0 2
13778: ARRAY
13779: PUSH
13780: LD_INT 1
13782: ARRAY
13783: PPUSH
13784: LD_EXP 35
13788: PUSH
13789: LD_VAR 0 1
13793: ARRAY
13794: PUSH
13795: LD_VAR 0 2
13799: ARRAY
13800: PUSH
13801: LD_INT 2
13803: ARRAY
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13814: LD_ADDR_EXP 35
13818: PUSH
13819: LD_EXP 35
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: LD_EXP 35
13833: PUSH
13834: LD_VAR 0 1
13838: ARRAY
13839: PPUSH
13840: LD_VAR 0 2
13844: PPUSH
13845: CALL_OW 3
13849: PPUSH
13850: CALL_OW 1
13854: ST_TO_ADDR
// end ; end ;
13855: GO 13606
13857: POP
13858: POP
// end ;
13859: GO 13524
13861: POP
13862: POP
// end ;
13863: PPOPN 4
13865: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13866: LD_INT 0
13868: PPUSH
13869: PPUSH
// result := false ;
13870: LD_ADDR_VAR 0 4
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13878: LD_VAR 0 1
13882: PPUSH
13883: CALL_OW 264
13887: PUSH
13888: LD_EXP 102
13892: EQUAL
13893: NOT
13894: IFFALSE 13898
// exit ;
13896: GO 14138
// index := GetElementIndex ( minersList , unit ) ;
13898: LD_ADDR_VAR 0 5
13902: PUSH
13903: LD_EXP 34
13907: PPUSH
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL 34456 0 2
13917: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13918: LD_EXP 35
13922: PUSH
13923: LD_VAR 0 5
13927: ARRAY
13928: PUSH
13929: LD_EXP 36
13933: GREATEREQUAL
13934: IFFALSE 13938
// exit ;
13936: GO 14138
// ComMoveXY ( unit , x , y ) ;
13938: LD_VAR 0 1
13942: PPUSH
13943: LD_VAR 0 2
13947: PPUSH
13948: LD_VAR 0 3
13952: PPUSH
13953: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13957: LD_INT 35
13959: PPUSH
13960: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13964: LD_VAR 0 1
13968: PPUSH
13969: LD_VAR 0 2
13973: PPUSH
13974: LD_VAR 0 3
13978: PPUSH
13979: CALL 65175 0 3
13983: NOT
13984: PUSH
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 314
13994: AND
13995: IFFALSE 13999
// exit ;
13997: GO 14138
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13999: LD_VAR 0 2
14003: PPUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: CALL_OW 428
14013: PUSH
14014: LD_VAR 0 1
14018: EQUAL
14019: PUSH
14020: LD_VAR 0 1
14024: PPUSH
14025: CALL_OW 314
14029: NOT
14030: AND
14031: IFFALSE 13957
// PlaySoundXY ( x , y , PlantMine ) ;
14033: LD_VAR 0 2
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_STRING PlantMine
14045: PPUSH
14046: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14050: LD_VAR 0 2
14054: PPUSH
14055: LD_VAR 0 3
14059: PPUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 255
14069: PPUSH
14070: LD_INT 0
14072: PPUSH
14073: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14077: LD_ADDR_EXP 35
14081: PUSH
14082: LD_EXP 35
14086: PPUSH
14087: LD_VAR 0 5
14091: PUSH
14092: LD_EXP 35
14096: PUSH
14097: LD_VAR 0 5
14101: ARRAY
14102: PUSH
14103: LD_INT 1
14105: PLUS
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PPUSH
14111: LD_VAR 0 2
14115: PUSH
14116: LD_VAR 0 3
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL 34671 0 3
14129: ST_TO_ADDR
// result := true ;
14130: LD_ADDR_VAR 0 4
14134: PUSH
14135: LD_INT 1
14137: ST_TO_ADDR
// end ;
14138: LD_VAR 0 4
14142: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14143: LD_INT 0
14145: PPUSH
14146: PPUSH
14147: PPUSH
// if not unit in minersList then
14148: LD_VAR 0 1
14152: PUSH
14153: LD_EXP 34
14157: IN
14158: NOT
14159: IFFALSE 14163
// exit ;
14161: GO 14555
// index := GetElementIndex ( minersList , unit ) ;
14163: LD_ADDR_VAR 0 6
14167: PUSH
14168: LD_EXP 34
14172: PPUSH
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL 34456 0 2
14182: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14183: LD_ADDR_VAR 0 5
14187: PUSH
14188: DOUBLE
14189: LD_EXP 35
14193: PUSH
14194: LD_VAR 0 6
14198: ARRAY
14199: INC
14200: ST_TO_ADDR
14201: LD_INT 1
14203: PUSH
14204: FOR_DOWNTO
14205: IFFALSE 14366
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14207: LD_EXP 35
14211: PUSH
14212: LD_VAR 0 6
14216: ARRAY
14217: PUSH
14218: LD_VAR 0 5
14222: ARRAY
14223: PUSH
14224: LD_INT 1
14226: ARRAY
14227: PUSH
14228: LD_VAR 0 2
14232: EQUAL
14233: PUSH
14234: LD_EXP 35
14238: PUSH
14239: LD_VAR 0 6
14243: ARRAY
14244: PUSH
14245: LD_VAR 0 5
14249: ARRAY
14250: PUSH
14251: LD_INT 2
14253: ARRAY
14254: PUSH
14255: LD_VAR 0 3
14259: EQUAL
14260: AND
14261: IFFALSE 14364
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14263: LD_EXP 35
14267: PUSH
14268: LD_VAR 0 6
14272: ARRAY
14273: PUSH
14274: LD_VAR 0 5
14278: ARRAY
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: PPUSH
14284: LD_EXP 35
14288: PUSH
14289: LD_VAR 0 6
14293: ARRAY
14294: PUSH
14295: LD_VAR 0 5
14299: ARRAY
14300: PUSH
14301: LD_INT 2
14303: ARRAY
14304: PPUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 255
14314: PPUSH
14315: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14319: LD_ADDR_EXP 35
14323: PUSH
14324: LD_EXP 35
14328: PPUSH
14329: LD_VAR 0 6
14333: PPUSH
14334: LD_EXP 35
14338: PUSH
14339: LD_VAR 0 6
14343: ARRAY
14344: PPUSH
14345: LD_VAR 0 5
14349: PPUSH
14350: CALL_OW 3
14354: PPUSH
14355: CALL_OW 1
14359: ST_TO_ADDR
// exit ;
14360: POP
14361: POP
14362: GO 14555
// end ; end ;
14364: GO 14204
14366: POP
14367: POP
// for i := minerMinesList [ index ] downto 1 do
14368: LD_ADDR_VAR 0 5
14372: PUSH
14373: DOUBLE
14374: LD_EXP 35
14378: PUSH
14379: LD_VAR 0 6
14383: ARRAY
14384: INC
14385: ST_TO_ADDR
14386: LD_INT 1
14388: PUSH
14389: FOR_DOWNTO
14390: IFFALSE 14553
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14392: LD_EXP 35
14396: PUSH
14397: LD_VAR 0 6
14401: ARRAY
14402: PUSH
14403: LD_VAR 0 5
14407: ARRAY
14408: PUSH
14409: LD_INT 1
14411: ARRAY
14412: PPUSH
14413: LD_EXP 35
14417: PUSH
14418: LD_VAR 0 6
14422: ARRAY
14423: PUSH
14424: LD_VAR 0 5
14428: ARRAY
14429: PUSH
14430: LD_INT 2
14432: ARRAY
14433: PPUSH
14434: LD_VAR 0 2
14438: PPUSH
14439: LD_VAR 0 3
14443: PPUSH
14444: CALL_OW 298
14448: PUSH
14449: LD_INT 6
14451: LESS
14452: IFFALSE 14551
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14454: LD_EXP 35
14458: PUSH
14459: LD_VAR 0 6
14463: ARRAY
14464: PUSH
14465: LD_VAR 0 5
14469: ARRAY
14470: PUSH
14471: LD_INT 1
14473: ARRAY
14474: PPUSH
14475: LD_EXP 35
14479: PUSH
14480: LD_VAR 0 6
14484: ARRAY
14485: PUSH
14486: LD_VAR 0 5
14490: ARRAY
14491: PUSH
14492: LD_INT 2
14494: ARRAY
14495: PPUSH
14496: LD_VAR 0 1
14500: PPUSH
14501: CALL_OW 255
14505: PPUSH
14506: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14510: LD_ADDR_EXP 35
14514: PUSH
14515: LD_EXP 35
14519: PPUSH
14520: LD_VAR 0 6
14524: PPUSH
14525: LD_EXP 35
14529: PUSH
14530: LD_VAR 0 6
14534: ARRAY
14535: PPUSH
14536: LD_VAR 0 5
14540: PPUSH
14541: CALL_OW 3
14545: PPUSH
14546: CALL_OW 1
14550: ST_TO_ADDR
// end ; end ;
14551: GO 14389
14553: POP
14554: POP
// end ;
14555: LD_VAR 0 4
14559: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14560: LD_INT 0
14562: PPUSH
14563: PPUSH
14564: PPUSH
14565: PPUSH
14566: PPUSH
14567: PPUSH
14568: PPUSH
14569: PPUSH
14570: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14571: LD_VAR 0 1
14575: PPUSH
14576: CALL_OW 264
14580: PUSH
14581: LD_EXP 102
14585: EQUAL
14586: NOT
14587: PUSH
14588: LD_VAR 0 1
14592: PUSH
14593: LD_EXP 34
14597: IN
14598: NOT
14599: OR
14600: IFFALSE 14604
// exit ;
14602: GO 14926
// index := GetElementIndex ( minersList , unit ) ;
14604: LD_ADDR_VAR 0 6
14608: PUSH
14609: LD_EXP 34
14613: PPUSH
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL 34456 0 2
14623: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14624: LD_ADDR_VAR 0 8
14628: PUSH
14629: LD_EXP 36
14633: PUSH
14634: LD_EXP 35
14638: PUSH
14639: LD_VAR 0 6
14643: ARRAY
14644: MINUS
14645: ST_TO_ADDR
// if not minesFreeAmount then
14646: LD_VAR 0 8
14650: NOT
14651: IFFALSE 14655
// exit ;
14653: GO 14926
// tmp := [ ] ;
14655: LD_ADDR_VAR 0 7
14659: PUSH
14660: EMPTY
14661: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14662: LD_ADDR_VAR 0 5
14666: PUSH
14667: DOUBLE
14668: LD_INT 1
14670: DEC
14671: ST_TO_ADDR
14672: LD_VAR 0 8
14676: PUSH
14677: FOR_TO
14678: IFFALSE 14873
// begin _d := rand ( 0 , 5 ) ;
14680: LD_ADDR_VAR 0 11
14684: PUSH
14685: LD_INT 0
14687: PPUSH
14688: LD_INT 5
14690: PPUSH
14691: CALL_OW 12
14695: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14696: LD_ADDR_VAR 0 12
14700: PUSH
14701: LD_INT 2
14703: PPUSH
14704: LD_INT 6
14706: PPUSH
14707: CALL_OW 12
14711: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14712: LD_ADDR_VAR 0 9
14716: PUSH
14717: LD_VAR 0 2
14721: PPUSH
14722: LD_VAR 0 11
14726: PPUSH
14727: LD_VAR 0 12
14731: PPUSH
14732: CALL_OW 272
14736: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14737: LD_ADDR_VAR 0 10
14741: PUSH
14742: LD_VAR 0 3
14746: PPUSH
14747: LD_VAR 0 11
14751: PPUSH
14752: LD_VAR 0 12
14756: PPUSH
14757: CALL_OW 273
14761: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14762: LD_VAR 0 9
14766: PPUSH
14767: LD_VAR 0 10
14771: PPUSH
14772: CALL_OW 488
14776: PUSH
14777: LD_VAR 0 9
14781: PUSH
14782: LD_VAR 0 10
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_VAR 0 7
14795: IN
14796: NOT
14797: AND
14798: PUSH
14799: LD_VAR 0 9
14803: PPUSH
14804: LD_VAR 0 10
14808: PPUSH
14809: CALL_OW 458
14813: NOT
14814: AND
14815: IFFALSE 14857
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14817: LD_ADDR_VAR 0 7
14821: PUSH
14822: LD_VAR 0 7
14826: PPUSH
14827: LD_VAR 0 7
14831: PUSH
14832: LD_INT 1
14834: PLUS
14835: PPUSH
14836: LD_VAR 0 9
14840: PUSH
14841: LD_VAR 0 10
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PPUSH
14850: CALL_OW 1
14854: ST_TO_ADDR
14855: GO 14871
// i := i - 1 ;
14857: LD_ADDR_VAR 0 5
14861: PUSH
14862: LD_VAR 0 5
14866: PUSH
14867: LD_INT 1
14869: MINUS
14870: ST_TO_ADDR
// end ;
14871: GO 14677
14873: POP
14874: POP
// for i in tmp do
14875: LD_ADDR_VAR 0 5
14879: PUSH
14880: LD_VAR 0 7
14884: PUSH
14885: FOR_IN
14886: IFFALSE 14924
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14888: LD_VAR 0 1
14892: PPUSH
14893: LD_VAR 0 5
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: LD_VAR 0 5
14906: PUSH
14907: LD_INT 2
14909: ARRAY
14910: PPUSH
14911: CALL 13866 0 3
14915: NOT
14916: IFFALSE 14922
// exit ;
14918: POP
14919: POP
14920: GO 14926
14922: GO 14885
14924: POP
14925: POP
// end ;
14926: LD_VAR 0 4
14930: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14931: LD_INT 0
14933: PPUSH
14934: PPUSH
14935: PPUSH
14936: PPUSH
14937: PPUSH
14938: PPUSH
14939: PPUSH
// if not GetClass ( unit ) = class_sniper then
14940: LD_VAR 0 1
14944: PPUSH
14945: CALL_OW 257
14949: PUSH
14950: LD_INT 5
14952: EQUAL
14953: NOT
14954: IFFALSE 14958
// exit ;
14956: GO 15346
// dist := 8 ;
14958: LD_ADDR_VAR 0 5
14962: PUSH
14963: LD_INT 8
14965: ST_TO_ADDR
// viewRange := 12 ;
14966: LD_ADDR_VAR 0 7
14970: PUSH
14971: LD_INT 12
14973: ST_TO_ADDR
// side := GetSide ( unit ) ;
14974: LD_ADDR_VAR 0 6
14978: PUSH
14979: LD_VAR 0 1
14983: PPUSH
14984: CALL_OW 255
14988: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14989: LD_INT 61
14991: PPUSH
14992: LD_VAR 0 6
14996: PPUSH
14997: CALL_OW 321
15001: PUSH
15002: LD_INT 2
15004: EQUAL
15005: IFFALSE 15015
// viewRange := 16 ;
15007: LD_ADDR_VAR 0 7
15011: PUSH
15012: LD_INT 16
15014: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15015: LD_VAR 0 1
15019: PPUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: LD_VAR 0 3
15029: PPUSH
15030: CALL_OW 297
15034: PUSH
15035: LD_VAR 0 5
15039: GREATER
15040: IFFALSE 15119
// begin ComMoveXY ( unit , x , y ) ;
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_VAR 0 2
15051: PPUSH
15052: LD_VAR 0 3
15056: PPUSH
15057: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15061: LD_INT 35
15063: PPUSH
15064: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15068: LD_VAR 0 1
15072: PPUSH
15073: LD_VAR 0 2
15077: PPUSH
15078: LD_VAR 0 3
15082: PPUSH
15083: CALL 65175 0 3
15087: NOT
15088: IFFALSE 15092
// exit ;
15090: GO 15346
// until GetDistUnitXY ( unit , x , y ) < dist ;
15092: LD_VAR 0 1
15096: PPUSH
15097: LD_VAR 0 2
15101: PPUSH
15102: LD_VAR 0 3
15106: PPUSH
15107: CALL_OW 297
15111: PUSH
15112: LD_VAR 0 5
15116: LESS
15117: IFFALSE 15061
// end ; ComTurnXY ( unit , x , y ) ;
15119: LD_VAR 0 1
15123: PPUSH
15124: LD_VAR 0 2
15128: PPUSH
15129: LD_VAR 0 3
15133: PPUSH
15134: CALL_OW 118
// wait ( 5 ) ;
15138: LD_INT 5
15140: PPUSH
15141: CALL_OW 67
// _d := GetDir ( unit ) ;
15145: LD_ADDR_VAR 0 10
15149: PUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 254
15159: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
15160: LD_ADDR_VAR 0 8
15164: PUSH
15165: LD_VAR 0 1
15169: PPUSH
15170: CALL_OW 250
15174: PPUSH
15175: LD_VAR 0 10
15179: PPUSH
15180: LD_VAR 0 5
15184: PPUSH
15185: CALL_OW 272
15189: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
15190: LD_ADDR_VAR 0 9
15194: PUSH
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 251
15204: PPUSH
15205: LD_VAR 0 10
15209: PPUSH
15210: LD_VAR 0 5
15214: PPUSH
15215: CALL_OW 273
15219: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15220: LD_VAR 0 8
15224: PPUSH
15225: LD_VAR 0 9
15229: PPUSH
15230: CALL_OW 488
15234: NOT
15235: IFFALSE 15239
// exit ;
15237: GO 15346
// ComAnimCustom ( unit , 1 ) ;
15239: LD_VAR 0 1
15243: PPUSH
15244: LD_INT 1
15246: PPUSH
15247: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15251: LD_VAR 0 8
15255: PPUSH
15256: LD_VAR 0 9
15260: PPUSH
15261: LD_VAR 0 6
15265: PPUSH
15266: LD_VAR 0 7
15270: PPUSH
15271: CALL_OW 330
// repeat wait ( 1 ) ;
15275: LD_INT 1
15277: PPUSH
15278: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 316
15291: PUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 314
15301: OR
15302: PUSH
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 302
15312: NOT
15313: OR
15314: PUSH
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL_OW 301
15324: OR
15325: IFFALSE 15275
// RemoveSeeing ( _x , _y , side ) ;
15327: LD_VAR 0 8
15331: PPUSH
15332: LD_VAR 0 9
15336: PPUSH
15337: LD_VAR 0 6
15341: PPUSH
15342: CALL_OW 331
// end ; end_of_file
15346: LD_VAR 0 4
15350: RET
// every 0 0$1 do
15351: GO 15353
15353: DISABLE
// begin enable ;
15354: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15355: LD_STRING updateTimer(
15357: PUSH
15358: LD_OWVAR 1
15362: STR
15363: PUSH
15364: LD_STRING );
15366: STR
15367: PPUSH
15368: CALL_OW 559
// end ;
15372: END
// export function SOS_MapStart ( ) ; begin
15373: LD_INT 0
15375: PPUSH
// if streamModeActive then
15376: LD_EXP 37
15380: IFFALSE 15389
// DefineStreamItems ( true ) ;
15382: LD_INT 1
15384: PPUSH
15385: CALL 17039 0 1
// UpdateFactoryWaypoints ( ) ;
15389: CALL 11649 0 0
// end ;
15393: LD_VAR 0 1
15397: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15398: LD_INT 0
15400: PPUSH
// if p2 = 100 then
15401: LD_VAR 0 2
15405: PUSH
15406: LD_INT 100
15408: EQUAL
15409: IFFALSE 16412
// begin if not StreamModeActive then
15411: LD_EXP 37
15415: NOT
15416: IFFALSE 15426
// StreamModeActive := true ;
15418: LD_ADDR_EXP 37
15422: PUSH
15423: LD_INT 1
15425: ST_TO_ADDR
// if p3 = 0 then
15426: LD_VAR 0 3
15430: PUSH
15431: LD_INT 0
15433: EQUAL
15434: IFFALSE 15440
// InitStreamMode ;
15436: CALL 16575 0 0
// if p3 = 1 then
15440: LD_VAR 0 3
15444: PUSH
15445: LD_INT 1
15447: EQUAL
15448: IFFALSE 15458
// sRocket := true ;
15450: LD_ADDR_EXP 42
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// if p3 = 2 then
15458: LD_VAR 0 3
15462: PUSH
15463: LD_INT 2
15465: EQUAL
15466: IFFALSE 15476
// sSpeed := true ;
15468: LD_ADDR_EXP 41
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// if p3 = 3 then
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 3
15483: EQUAL
15484: IFFALSE 15494
// sEngine := true ;
15486: LD_ADDR_EXP 43
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if p3 = 4 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 4
15501: EQUAL
15502: IFFALSE 15512
// sSpec := true ;
15504: LD_ADDR_EXP 40
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 5 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 5
15519: EQUAL
15520: IFFALSE 15530
// sLevel := true ;
15522: LD_ADDR_EXP 44
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 6 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 6
15537: EQUAL
15538: IFFALSE 15548
// sArmoury := true ;
15540: LD_ADDR_EXP 45
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 7 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 7
15555: EQUAL
15556: IFFALSE 15566
// sRadar := true ;
15558: LD_ADDR_EXP 46
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 8 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 8
15573: EQUAL
15574: IFFALSE 15584
// sBunker := true ;
15576: LD_ADDR_EXP 47
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 9 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 9
15591: EQUAL
15592: IFFALSE 15602
// sHack := true ;
15594: LD_ADDR_EXP 48
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 10 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 10
15609: EQUAL
15610: IFFALSE 15620
// sFire := true ;
15612: LD_ADDR_EXP 49
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 11 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 11
15627: EQUAL
15628: IFFALSE 15638
// sRefresh := true ;
15630: LD_ADDR_EXP 50
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 12 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 12
15645: EQUAL
15646: IFFALSE 15656
// sExp := true ;
15648: LD_ADDR_EXP 51
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 13 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 13
15663: EQUAL
15664: IFFALSE 15674
// sDepot := true ;
15666: LD_ADDR_EXP 52
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 14 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 14
15681: EQUAL
15682: IFFALSE 15692
// sFlag := true ;
15684: LD_ADDR_EXP 53
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 15 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 15
15699: EQUAL
15700: IFFALSE 15710
// sKamikadze := true ;
15702: LD_ADDR_EXP 61
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 16 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 16
15717: EQUAL
15718: IFFALSE 15728
// sTroll := true ;
15720: LD_ADDR_EXP 62
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 17 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 17
15735: EQUAL
15736: IFFALSE 15746
// sSlow := true ;
15738: LD_ADDR_EXP 63
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 18 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 18
15753: EQUAL
15754: IFFALSE 15764
// sLack := true ;
15756: LD_ADDR_EXP 64
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 19 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 19
15771: EQUAL
15772: IFFALSE 15782
// sTank := true ;
15774: LD_ADDR_EXP 66
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 20 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 20
15789: EQUAL
15790: IFFALSE 15800
// sRemote := true ;
15792: LD_ADDR_EXP 67
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 21 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 21
15807: EQUAL
15808: IFFALSE 15818
// sPowell := true ;
15810: LD_ADDR_EXP 68
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 22 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 22
15825: EQUAL
15826: IFFALSE 15836
// sTeleport := true ;
15828: LD_ADDR_EXP 71
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 23 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 23
15843: EQUAL
15844: IFFALSE 15854
// sOilTower := true ;
15846: LD_ADDR_EXP 73
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 24 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 24
15861: EQUAL
15862: IFFALSE 15872
// sShovel := true ;
15864: LD_ADDR_EXP 74
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 25 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 25
15879: EQUAL
15880: IFFALSE 15890
// sSheik := true ;
15882: LD_ADDR_EXP 75
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 26 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 26
15897: EQUAL
15898: IFFALSE 15908
// sEarthquake := true ;
15900: LD_ADDR_EXP 77
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 27 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 27
15915: EQUAL
15916: IFFALSE 15926
// sAI := true ;
15918: LD_ADDR_EXP 78
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if p3 = 28 then
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 28
15933: EQUAL
15934: IFFALSE 15944
// sCargo := true ;
15936: LD_ADDR_EXP 81
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if p3 = 29 then
15944: LD_VAR 0 3
15948: PUSH
15949: LD_INT 29
15951: EQUAL
15952: IFFALSE 15962
// sDLaser := true ;
15954: LD_ADDR_EXP 82
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// if p3 = 30 then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 30
15969: EQUAL
15970: IFFALSE 15980
// sExchange := true ;
15972: LD_ADDR_EXP 83
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// if p3 = 31 then
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 31
15987: EQUAL
15988: IFFALSE 15998
// sFac := true ;
15990: LD_ADDR_EXP 84
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if p3 = 32 then
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 32
16005: EQUAL
16006: IFFALSE 16016
// sPower := true ;
16008: LD_ADDR_EXP 85
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if p3 = 33 then
16016: LD_VAR 0 3
16020: PUSH
16021: LD_INT 33
16023: EQUAL
16024: IFFALSE 16034
// sRandom := true ;
16026: LD_ADDR_EXP 86
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// if p3 = 34 then
16034: LD_VAR 0 3
16038: PUSH
16039: LD_INT 34
16041: EQUAL
16042: IFFALSE 16052
// sShield := true ;
16044: LD_ADDR_EXP 87
16048: PUSH
16049: LD_INT 1
16051: ST_TO_ADDR
// if p3 = 35 then
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 35
16059: EQUAL
16060: IFFALSE 16070
// sTime := true ;
16062: LD_ADDR_EXP 88
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// if p3 = 36 then
16070: LD_VAR 0 3
16074: PUSH
16075: LD_INT 36
16077: EQUAL
16078: IFFALSE 16088
// sTools := true ;
16080: LD_ADDR_EXP 89
16084: PUSH
16085: LD_INT 1
16087: ST_TO_ADDR
// if p3 = 101 then
16088: LD_VAR 0 3
16092: PUSH
16093: LD_INT 101
16095: EQUAL
16096: IFFALSE 16106
// sSold := true ;
16098: LD_ADDR_EXP 54
16102: PUSH
16103: LD_INT 1
16105: ST_TO_ADDR
// if p3 = 102 then
16106: LD_VAR 0 3
16110: PUSH
16111: LD_INT 102
16113: EQUAL
16114: IFFALSE 16124
// sDiff := true ;
16116: LD_ADDR_EXP 55
16120: PUSH
16121: LD_INT 1
16123: ST_TO_ADDR
// if p3 = 103 then
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 103
16131: EQUAL
16132: IFFALSE 16142
// sFog := true ;
16134: LD_ADDR_EXP 58
16138: PUSH
16139: LD_INT 1
16141: ST_TO_ADDR
// if p3 = 104 then
16142: LD_VAR 0 3
16146: PUSH
16147: LD_INT 104
16149: EQUAL
16150: IFFALSE 16160
// sReset := true ;
16152: LD_ADDR_EXP 59
16156: PUSH
16157: LD_INT 1
16159: ST_TO_ADDR
// if p3 = 105 then
16160: LD_VAR 0 3
16164: PUSH
16165: LD_INT 105
16167: EQUAL
16168: IFFALSE 16178
// sSun := true ;
16170: LD_ADDR_EXP 60
16174: PUSH
16175: LD_INT 1
16177: ST_TO_ADDR
// if p3 = 106 then
16178: LD_VAR 0 3
16182: PUSH
16183: LD_INT 106
16185: EQUAL
16186: IFFALSE 16196
// sTiger := true ;
16188: LD_ADDR_EXP 56
16192: PUSH
16193: LD_INT 1
16195: ST_TO_ADDR
// if p3 = 107 then
16196: LD_VAR 0 3
16200: PUSH
16201: LD_INT 107
16203: EQUAL
16204: IFFALSE 16214
// sBomb := true ;
16206: LD_ADDR_EXP 57
16210: PUSH
16211: LD_INT 1
16213: ST_TO_ADDR
// if p3 = 108 then
16214: LD_VAR 0 3
16218: PUSH
16219: LD_INT 108
16221: EQUAL
16222: IFFALSE 16232
// sWound := true ;
16224: LD_ADDR_EXP 65
16228: PUSH
16229: LD_INT 1
16231: ST_TO_ADDR
// if p3 = 109 then
16232: LD_VAR 0 3
16236: PUSH
16237: LD_INT 109
16239: EQUAL
16240: IFFALSE 16250
// sBetray := true ;
16242: LD_ADDR_EXP 69
16246: PUSH
16247: LD_INT 1
16249: ST_TO_ADDR
// if p3 = 110 then
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 110
16257: EQUAL
16258: IFFALSE 16268
// sContamin := true ;
16260: LD_ADDR_EXP 70
16264: PUSH
16265: LD_INT 1
16267: ST_TO_ADDR
// if p3 = 111 then
16268: LD_VAR 0 3
16272: PUSH
16273: LD_INT 111
16275: EQUAL
16276: IFFALSE 16286
// sOil := true ;
16278: LD_ADDR_EXP 72
16282: PUSH
16283: LD_INT 1
16285: ST_TO_ADDR
// if p3 = 112 then
16286: LD_VAR 0 3
16290: PUSH
16291: LD_INT 112
16293: EQUAL
16294: IFFALSE 16304
// sStu := true ;
16296: LD_ADDR_EXP 76
16300: PUSH
16301: LD_INT 1
16303: ST_TO_ADDR
// if p3 = 113 then
16304: LD_VAR 0 3
16308: PUSH
16309: LD_INT 113
16311: EQUAL
16312: IFFALSE 16322
// sBazooka := true ;
16314: LD_ADDR_EXP 79
16318: PUSH
16319: LD_INT 1
16321: ST_TO_ADDR
// if p3 = 114 then
16322: LD_VAR 0 3
16326: PUSH
16327: LD_INT 114
16329: EQUAL
16330: IFFALSE 16340
// sMortar := true ;
16332: LD_ADDR_EXP 80
16336: PUSH
16337: LD_INT 1
16339: ST_TO_ADDR
// if p3 = 115 then
16340: LD_VAR 0 3
16344: PUSH
16345: LD_INT 115
16347: EQUAL
16348: IFFALSE 16358
// sRanger := true ;
16350: LD_ADDR_EXP 90
16354: PUSH
16355: LD_INT 1
16357: ST_TO_ADDR
// if p3 = 116 then
16358: LD_VAR 0 3
16362: PUSH
16363: LD_INT 116
16365: EQUAL
16366: IFFALSE 16376
// sComputer := true ;
16368: LD_ADDR_EXP 91
16372: PUSH
16373: LD_INT 1
16375: ST_TO_ADDR
// if p3 = 117 then
16376: LD_VAR 0 3
16380: PUSH
16381: LD_INT 117
16383: EQUAL
16384: IFFALSE 16394
// s30 := true ;
16386: LD_ADDR_EXP 92
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// if p3 = 118 then
16394: LD_VAR 0 3
16398: PUSH
16399: LD_INT 118
16401: EQUAL
16402: IFFALSE 16412
// s60 := true ;
16404: LD_ADDR_EXP 93
16408: PUSH
16409: LD_INT 1
16411: ST_TO_ADDR
// end ; if p2 = 101 then
16412: LD_VAR 0 2
16416: PUSH
16417: LD_INT 101
16419: EQUAL
16420: IFFALSE 16548
// begin case p3 of 1 :
16422: LD_VAR 0 3
16426: PUSH
16427: LD_INT 1
16429: DOUBLE
16430: EQUAL
16431: IFTRUE 16435
16433: GO 16442
16435: POP
// hHackUnlimitedResources ; 2 :
16436: CALL 28646 0 0
16440: GO 16548
16442: LD_INT 2
16444: DOUBLE
16445: EQUAL
16446: IFTRUE 16450
16448: GO 16457
16450: POP
// hHackSetLevel10 ; 3 :
16451: CALL 28779 0 0
16455: GO 16548
16457: LD_INT 3
16459: DOUBLE
16460: EQUAL
16461: IFTRUE 16465
16463: GO 16472
16465: POP
// hHackSetLevel10YourUnits ; 4 :
16466: CALL 28864 0 0
16470: GO 16548
16472: LD_INT 4
16474: DOUBLE
16475: EQUAL
16476: IFTRUE 16480
16478: GO 16487
16480: POP
// hHackInvincible ; 5 :
16481: CALL 29312 0 0
16485: GO 16548
16487: LD_INT 5
16489: DOUBLE
16490: EQUAL
16491: IFTRUE 16495
16493: GO 16502
16495: POP
// hHackInvisible ; 6 :
16496: CALL 29423 0 0
16500: GO 16548
16502: LD_INT 6
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16510
16508: GO 16517
16510: POP
// hHackChangeYourSide ; 7 :
16511: CALL 29480 0 0
16515: GO 16548
16517: LD_INT 7
16519: DOUBLE
16520: EQUAL
16521: IFTRUE 16525
16523: GO 16532
16525: POP
// hHackChangeUnitSide ; 8 :
16526: CALL 29522 0 0
16530: GO 16548
16532: LD_INT 8
16534: DOUBLE
16535: EQUAL
16536: IFTRUE 16540
16538: GO 16547
16540: POP
// hHackFog ; end ;
16541: CALL 29623 0 0
16545: GO 16548
16547: POP
// end ; end ;
16548: LD_VAR 0 7
16552: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16553: GO 16555
16555: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16556: LD_STRING initStreamRollete();
16558: PPUSH
16559: CALL_OW 559
// InitStreamMode ;
16563: CALL 16575 0 0
// DefineStreamItems ( false ) ;
16567: LD_INT 0
16569: PPUSH
16570: CALL 17039 0 1
// end ;
16574: END
// function InitStreamMode ; begin
16575: LD_INT 0
16577: PPUSH
// streamModeActive := false ;
16578: LD_ADDR_EXP 37
16582: PUSH
16583: LD_INT 0
16585: ST_TO_ADDR
// normalCounter := 36 ;
16586: LD_ADDR_EXP 38
16590: PUSH
16591: LD_INT 36
16593: ST_TO_ADDR
// hardcoreCounter := 18 ;
16594: LD_ADDR_EXP 39
16598: PUSH
16599: LD_INT 18
16601: ST_TO_ADDR
// sRocket := false ;
16602: LD_ADDR_EXP 42
16606: PUSH
16607: LD_INT 0
16609: ST_TO_ADDR
// sSpeed := false ;
16610: LD_ADDR_EXP 41
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// sEngine := false ;
16618: LD_ADDR_EXP 43
16622: PUSH
16623: LD_INT 0
16625: ST_TO_ADDR
// sSpec := false ;
16626: LD_ADDR_EXP 40
16630: PUSH
16631: LD_INT 0
16633: ST_TO_ADDR
// sLevel := false ;
16634: LD_ADDR_EXP 44
16638: PUSH
16639: LD_INT 0
16641: ST_TO_ADDR
// sArmoury := false ;
16642: LD_ADDR_EXP 45
16646: PUSH
16647: LD_INT 0
16649: ST_TO_ADDR
// sRadar := false ;
16650: LD_ADDR_EXP 46
16654: PUSH
16655: LD_INT 0
16657: ST_TO_ADDR
// sBunker := false ;
16658: LD_ADDR_EXP 47
16662: PUSH
16663: LD_INT 0
16665: ST_TO_ADDR
// sHack := false ;
16666: LD_ADDR_EXP 48
16670: PUSH
16671: LD_INT 0
16673: ST_TO_ADDR
// sFire := false ;
16674: LD_ADDR_EXP 49
16678: PUSH
16679: LD_INT 0
16681: ST_TO_ADDR
// sRefresh := false ;
16682: LD_ADDR_EXP 50
16686: PUSH
16687: LD_INT 0
16689: ST_TO_ADDR
// sExp := false ;
16690: LD_ADDR_EXP 51
16694: PUSH
16695: LD_INT 0
16697: ST_TO_ADDR
// sDepot := false ;
16698: LD_ADDR_EXP 52
16702: PUSH
16703: LD_INT 0
16705: ST_TO_ADDR
// sFlag := false ;
16706: LD_ADDR_EXP 53
16710: PUSH
16711: LD_INT 0
16713: ST_TO_ADDR
// sKamikadze := false ;
16714: LD_ADDR_EXP 61
16718: PUSH
16719: LD_INT 0
16721: ST_TO_ADDR
// sTroll := false ;
16722: LD_ADDR_EXP 62
16726: PUSH
16727: LD_INT 0
16729: ST_TO_ADDR
// sSlow := false ;
16730: LD_ADDR_EXP 63
16734: PUSH
16735: LD_INT 0
16737: ST_TO_ADDR
// sLack := false ;
16738: LD_ADDR_EXP 64
16742: PUSH
16743: LD_INT 0
16745: ST_TO_ADDR
// sTank := false ;
16746: LD_ADDR_EXP 66
16750: PUSH
16751: LD_INT 0
16753: ST_TO_ADDR
// sRemote := false ;
16754: LD_ADDR_EXP 67
16758: PUSH
16759: LD_INT 0
16761: ST_TO_ADDR
// sPowell := false ;
16762: LD_ADDR_EXP 68
16766: PUSH
16767: LD_INT 0
16769: ST_TO_ADDR
// sTeleport := false ;
16770: LD_ADDR_EXP 71
16774: PUSH
16775: LD_INT 0
16777: ST_TO_ADDR
// sOilTower := false ;
16778: LD_ADDR_EXP 73
16782: PUSH
16783: LD_INT 0
16785: ST_TO_ADDR
// sShovel := false ;
16786: LD_ADDR_EXP 74
16790: PUSH
16791: LD_INT 0
16793: ST_TO_ADDR
// sSheik := false ;
16794: LD_ADDR_EXP 75
16798: PUSH
16799: LD_INT 0
16801: ST_TO_ADDR
// sEarthquake := false ;
16802: LD_ADDR_EXP 77
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// sAI := false ;
16810: LD_ADDR_EXP 78
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// sCargo := false ;
16818: LD_ADDR_EXP 81
16822: PUSH
16823: LD_INT 0
16825: ST_TO_ADDR
// sDLaser := false ;
16826: LD_ADDR_EXP 82
16830: PUSH
16831: LD_INT 0
16833: ST_TO_ADDR
// sExchange := false ;
16834: LD_ADDR_EXP 83
16838: PUSH
16839: LD_INT 0
16841: ST_TO_ADDR
// sFac := false ;
16842: LD_ADDR_EXP 84
16846: PUSH
16847: LD_INT 0
16849: ST_TO_ADDR
// sPower := false ;
16850: LD_ADDR_EXP 85
16854: PUSH
16855: LD_INT 0
16857: ST_TO_ADDR
// sRandom := false ;
16858: LD_ADDR_EXP 86
16862: PUSH
16863: LD_INT 0
16865: ST_TO_ADDR
// sShield := false ;
16866: LD_ADDR_EXP 87
16870: PUSH
16871: LD_INT 0
16873: ST_TO_ADDR
// sTime := false ;
16874: LD_ADDR_EXP 88
16878: PUSH
16879: LD_INT 0
16881: ST_TO_ADDR
// sTools := false ;
16882: LD_ADDR_EXP 89
16886: PUSH
16887: LD_INT 0
16889: ST_TO_ADDR
// sSold := false ;
16890: LD_ADDR_EXP 54
16894: PUSH
16895: LD_INT 0
16897: ST_TO_ADDR
// sDiff := false ;
16898: LD_ADDR_EXP 55
16902: PUSH
16903: LD_INT 0
16905: ST_TO_ADDR
// sFog := false ;
16906: LD_ADDR_EXP 58
16910: PUSH
16911: LD_INT 0
16913: ST_TO_ADDR
// sReset := false ;
16914: LD_ADDR_EXP 59
16918: PUSH
16919: LD_INT 0
16921: ST_TO_ADDR
// sSun := false ;
16922: LD_ADDR_EXP 60
16926: PUSH
16927: LD_INT 0
16929: ST_TO_ADDR
// sTiger := false ;
16930: LD_ADDR_EXP 56
16934: PUSH
16935: LD_INT 0
16937: ST_TO_ADDR
// sBomb := false ;
16938: LD_ADDR_EXP 57
16942: PUSH
16943: LD_INT 0
16945: ST_TO_ADDR
// sWound := false ;
16946: LD_ADDR_EXP 65
16950: PUSH
16951: LD_INT 0
16953: ST_TO_ADDR
// sBetray := false ;
16954: LD_ADDR_EXP 69
16958: PUSH
16959: LD_INT 0
16961: ST_TO_ADDR
// sContamin := false ;
16962: LD_ADDR_EXP 70
16966: PUSH
16967: LD_INT 0
16969: ST_TO_ADDR
// sOil := false ;
16970: LD_ADDR_EXP 72
16974: PUSH
16975: LD_INT 0
16977: ST_TO_ADDR
// sStu := false ;
16978: LD_ADDR_EXP 76
16982: PUSH
16983: LD_INT 0
16985: ST_TO_ADDR
// sBazooka := false ;
16986: LD_ADDR_EXP 79
16990: PUSH
16991: LD_INT 0
16993: ST_TO_ADDR
// sMortar := false ;
16994: LD_ADDR_EXP 80
16998: PUSH
16999: LD_INT 0
17001: ST_TO_ADDR
// sRanger := false ;
17002: LD_ADDR_EXP 90
17006: PUSH
17007: LD_INT 0
17009: ST_TO_ADDR
// sComputer := false ;
17010: LD_ADDR_EXP 91
17014: PUSH
17015: LD_INT 0
17017: ST_TO_ADDR
// s30 := false ;
17018: LD_ADDR_EXP 92
17022: PUSH
17023: LD_INT 0
17025: ST_TO_ADDR
// s60 := false ;
17026: LD_ADDR_EXP 93
17030: PUSH
17031: LD_INT 0
17033: ST_TO_ADDR
// end ;
17034: LD_VAR 0 1
17038: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17039: LD_INT 0
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
17047: PPUSH
// result := [ ] ;
17048: LD_ADDR_VAR 0 2
17052: PUSH
17053: EMPTY
17054: ST_TO_ADDR
// if campaign_id = 1 then
17055: LD_OWVAR 69
17059: PUSH
17060: LD_INT 1
17062: EQUAL
17063: IFFALSE 20229
// begin case mission_number of 1 :
17065: LD_OWVAR 70
17069: PUSH
17070: LD_INT 1
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17154
17078: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: LD_INT 4
17089: PUSH
17090: LD_INT 11
17092: PUSH
17093: LD_INT 12
17095: PUSH
17096: LD_INT 15
17098: PUSH
17099: LD_INT 16
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 23
17107: PUSH
17108: LD_INT 26
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 101
17124: PUSH
17125: LD_INT 102
17127: PUSH
17128: LD_INT 106
17130: PUSH
17131: LD_INT 116
17133: PUSH
17134: LD_INT 117
17136: PUSH
17137: LD_INT 118
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: ST_TO_ADDR
17152: GO 20227
17154: LD_INT 2
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17246
17162: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17163: LD_ADDR_VAR 0 2
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: LD_INT 4
17173: PUSH
17174: LD_INT 11
17176: PUSH
17177: LD_INT 12
17179: PUSH
17180: LD_INT 15
17182: PUSH
17183: LD_INT 16
17185: PUSH
17186: LD_INT 22
17188: PUSH
17189: LD_INT 23
17191: PUSH
17192: LD_INT 26
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 101
17208: PUSH
17209: LD_INT 102
17211: PUSH
17212: LD_INT 105
17214: PUSH
17215: LD_INT 106
17217: PUSH
17218: LD_INT 108
17220: PUSH
17221: LD_INT 116
17223: PUSH
17224: LD_INT 117
17226: PUSH
17227: LD_INT 118
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: ST_TO_ADDR
17244: GO 20227
17246: LD_INT 3
17248: DOUBLE
17249: EQUAL
17250: IFTRUE 17254
17252: GO 17342
17254: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_INT 2
17262: PUSH
17263: LD_INT 4
17265: PUSH
17266: LD_INT 5
17268: PUSH
17269: LD_INT 11
17271: PUSH
17272: LD_INT 12
17274: PUSH
17275: LD_INT 15
17277: PUSH
17278: LD_INT 16
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_INT 26
17286: PUSH
17287: LD_INT 36
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 101
17304: PUSH
17305: LD_INT 102
17307: PUSH
17308: LD_INT 105
17310: PUSH
17311: LD_INT 106
17313: PUSH
17314: LD_INT 108
17316: PUSH
17317: LD_INT 116
17319: PUSH
17320: LD_INT 117
17322: PUSH
17323: LD_INT 118
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: ST_TO_ADDR
17340: GO 20227
17342: LD_INT 4
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17446
17350: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17351: LD_ADDR_VAR 0 2
17355: PUSH
17356: LD_INT 2
17358: PUSH
17359: LD_INT 4
17361: PUSH
17362: LD_INT 5
17364: PUSH
17365: LD_INT 8
17367: PUSH
17368: LD_INT 11
17370: PUSH
17371: LD_INT 12
17373: PUSH
17374: LD_INT 15
17376: PUSH
17377: LD_INT 16
17379: PUSH
17380: LD_INT 22
17382: PUSH
17383: LD_INT 23
17385: PUSH
17386: LD_INT 26
17388: PUSH
17389: LD_INT 36
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 101
17408: PUSH
17409: LD_INT 102
17411: PUSH
17412: LD_INT 105
17414: PUSH
17415: LD_INT 106
17417: PUSH
17418: LD_INT 108
17420: PUSH
17421: LD_INT 116
17423: PUSH
17424: LD_INT 117
17426: PUSH
17427: LD_INT 118
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: ST_TO_ADDR
17444: GO 20227
17446: LD_INT 5
17448: DOUBLE
17449: EQUAL
17450: IFTRUE 17454
17452: GO 17566
17454: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17455: LD_ADDR_VAR 0 2
17459: PUSH
17460: LD_INT 2
17462: PUSH
17463: LD_INT 4
17465: PUSH
17466: LD_INT 5
17468: PUSH
17469: LD_INT 6
17471: PUSH
17472: LD_INT 8
17474: PUSH
17475: LD_INT 11
17477: PUSH
17478: LD_INT 12
17480: PUSH
17481: LD_INT 15
17483: PUSH
17484: LD_INT 16
17486: PUSH
17487: LD_INT 22
17489: PUSH
17490: LD_INT 23
17492: PUSH
17493: LD_INT 25
17495: PUSH
17496: LD_INT 26
17498: PUSH
17499: LD_INT 36
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 101
17520: PUSH
17521: LD_INT 102
17523: PUSH
17524: LD_INT 105
17526: PUSH
17527: LD_INT 106
17529: PUSH
17530: LD_INT 108
17532: PUSH
17533: LD_INT 109
17535: PUSH
17536: LD_INT 112
17538: PUSH
17539: LD_INT 116
17541: PUSH
17542: LD_INT 117
17544: PUSH
17545: LD_INT 118
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: ST_TO_ADDR
17564: GO 20227
17566: LD_INT 6
17568: DOUBLE
17569: EQUAL
17570: IFTRUE 17574
17572: GO 17706
17574: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17575: LD_ADDR_VAR 0 2
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: LD_INT 4
17585: PUSH
17586: LD_INT 5
17588: PUSH
17589: LD_INT 6
17591: PUSH
17592: LD_INT 8
17594: PUSH
17595: LD_INT 11
17597: PUSH
17598: LD_INT 12
17600: PUSH
17601: LD_INT 15
17603: PUSH
17604: LD_INT 16
17606: PUSH
17607: LD_INT 20
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 22
17615: PUSH
17616: LD_INT 23
17618: PUSH
17619: LD_INT 25
17621: PUSH
17622: LD_INT 26
17624: PUSH
17625: LD_INT 30
17627: PUSH
17628: LD_INT 31
17630: PUSH
17631: LD_INT 32
17633: PUSH
17634: LD_INT 36
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 101
17660: PUSH
17661: LD_INT 102
17663: PUSH
17664: LD_INT 105
17666: PUSH
17667: LD_INT 106
17669: PUSH
17670: LD_INT 108
17672: PUSH
17673: LD_INT 109
17675: PUSH
17676: LD_INT 112
17678: PUSH
17679: LD_INT 116
17681: PUSH
17682: LD_INT 117
17684: PUSH
17685: LD_INT 118
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: ST_TO_ADDR
17704: GO 20227
17706: LD_INT 7
17708: DOUBLE
17709: EQUAL
17710: IFTRUE 17714
17712: GO 17826
17714: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: LD_INT 4
17725: PUSH
17726: LD_INT 5
17728: PUSH
17729: LD_INT 7
17731: PUSH
17732: LD_INT 11
17734: PUSH
17735: LD_INT 12
17737: PUSH
17738: LD_INT 15
17740: PUSH
17741: LD_INT 16
17743: PUSH
17744: LD_INT 20
17746: PUSH
17747: LD_INT 21
17749: PUSH
17750: LD_INT 22
17752: PUSH
17753: LD_INT 23
17755: PUSH
17756: LD_INT 25
17758: PUSH
17759: LD_INT 26
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 101
17780: PUSH
17781: LD_INT 102
17783: PUSH
17784: LD_INT 103
17786: PUSH
17787: LD_INT 105
17789: PUSH
17790: LD_INT 106
17792: PUSH
17793: LD_INT 108
17795: PUSH
17796: LD_INT 112
17798: PUSH
17799: LD_INT 116
17801: PUSH
17802: LD_INT 117
17804: PUSH
17805: LD_INT 118
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: ST_TO_ADDR
17824: GO 20227
17826: LD_INT 8
17828: DOUBLE
17829: EQUAL
17830: IFTRUE 17834
17832: GO 17974
17834: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17835: LD_ADDR_VAR 0 2
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: LD_INT 4
17845: PUSH
17846: LD_INT 5
17848: PUSH
17849: LD_INT 6
17851: PUSH
17852: LD_INT 7
17854: PUSH
17855: LD_INT 8
17857: PUSH
17858: LD_INT 11
17860: PUSH
17861: LD_INT 12
17863: PUSH
17864: LD_INT 15
17866: PUSH
17867: LD_INT 16
17869: PUSH
17870: LD_INT 20
17872: PUSH
17873: LD_INT 21
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_INT 23
17881: PUSH
17882: LD_INT 25
17884: PUSH
17885: LD_INT 26
17887: PUSH
17888: LD_INT 30
17890: PUSH
17891: LD_INT 31
17893: PUSH
17894: LD_INT 32
17896: PUSH
17897: LD_INT 36
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 101
17924: PUSH
17925: LD_INT 102
17927: PUSH
17928: LD_INT 103
17930: PUSH
17931: LD_INT 105
17933: PUSH
17934: LD_INT 106
17936: PUSH
17937: LD_INT 108
17939: PUSH
17940: LD_INT 109
17942: PUSH
17943: LD_INT 112
17945: PUSH
17946: LD_INT 116
17948: PUSH
17949: LD_INT 117
17951: PUSH
17952: LD_INT 118
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: ST_TO_ADDR
17972: GO 20227
17974: LD_INT 9
17976: DOUBLE
17977: EQUAL
17978: IFTRUE 17982
17980: GO 18130
17982: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_INT 2
17990: PUSH
17991: LD_INT 4
17993: PUSH
17994: LD_INT 5
17996: PUSH
17997: LD_INT 6
17999: PUSH
18000: LD_INT 7
18002: PUSH
18003: LD_INT 8
18005: PUSH
18006: LD_INT 11
18008: PUSH
18009: LD_INT 12
18011: PUSH
18012: LD_INT 15
18014: PUSH
18015: LD_INT 16
18017: PUSH
18018: LD_INT 20
18020: PUSH
18021: LD_INT 21
18023: PUSH
18024: LD_INT 22
18026: PUSH
18027: LD_INT 23
18029: PUSH
18030: LD_INT 25
18032: PUSH
18033: LD_INT 26
18035: PUSH
18036: LD_INT 28
18038: PUSH
18039: LD_INT 30
18041: PUSH
18042: LD_INT 31
18044: PUSH
18045: LD_INT 32
18047: PUSH
18048: LD_INT 36
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 101
18076: PUSH
18077: LD_INT 102
18079: PUSH
18080: LD_INT 103
18082: PUSH
18083: LD_INT 105
18085: PUSH
18086: LD_INT 106
18088: PUSH
18089: LD_INT 108
18091: PUSH
18092: LD_INT 109
18094: PUSH
18095: LD_INT 112
18097: PUSH
18098: LD_INT 114
18100: PUSH
18101: LD_INT 116
18103: PUSH
18104: LD_INT 117
18106: PUSH
18107: LD_INT 118
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: ST_TO_ADDR
18128: GO 20227
18130: LD_INT 10
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18138
18136: GO 18334
18138: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18139: LD_ADDR_VAR 0 2
18143: PUSH
18144: LD_INT 2
18146: PUSH
18147: LD_INT 4
18149: PUSH
18150: LD_INT 5
18152: PUSH
18153: LD_INT 6
18155: PUSH
18156: LD_INT 7
18158: PUSH
18159: LD_INT 8
18161: PUSH
18162: LD_INT 9
18164: PUSH
18165: LD_INT 10
18167: PUSH
18168: LD_INT 11
18170: PUSH
18171: LD_INT 12
18173: PUSH
18174: LD_INT 13
18176: PUSH
18177: LD_INT 14
18179: PUSH
18180: LD_INT 15
18182: PUSH
18183: LD_INT 16
18185: PUSH
18186: LD_INT 17
18188: PUSH
18189: LD_INT 18
18191: PUSH
18192: LD_INT 19
18194: PUSH
18195: LD_INT 20
18197: PUSH
18198: LD_INT 21
18200: PUSH
18201: LD_INT 22
18203: PUSH
18204: LD_INT 23
18206: PUSH
18207: LD_INT 24
18209: PUSH
18210: LD_INT 25
18212: PUSH
18213: LD_INT 26
18215: PUSH
18216: LD_INT 28
18218: PUSH
18219: LD_INT 30
18221: PUSH
18222: LD_INT 31
18224: PUSH
18225: LD_INT 32
18227: PUSH
18228: LD_INT 36
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 101
18264: PUSH
18265: LD_INT 102
18267: PUSH
18268: LD_INT 103
18270: PUSH
18271: LD_INT 104
18273: PUSH
18274: LD_INT 105
18276: PUSH
18277: LD_INT 106
18279: PUSH
18280: LD_INT 107
18282: PUSH
18283: LD_INT 108
18285: PUSH
18286: LD_INT 109
18288: PUSH
18289: LD_INT 110
18291: PUSH
18292: LD_INT 111
18294: PUSH
18295: LD_INT 112
18297: PUSH
18298: LD_INT 114
18300: PUSH
18301: LD_INT 116
18303: PUSH
18304: LD_INT 117
18306: PUSH
18307: LD_INT 118
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: ST_TO_ADDR
18332: GO 20227
18334: LD_INT 11
18336: DOUBLE
18337: EQUAL
18338: IFTRUE 18342
18340: GO 18546
18342: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18343: LD_ADDR_VAR 0 2
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: LD_INT 3
18353: PUSH
18354: LD_INT 4
18356: PUSH
18357: LD_INT 5
18359: PUSH
18360: LD_INT 6
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: LD_INT 8
18368: PUSH
18369: LD_INT 9
18371: PUSH
18372: LD_INT 10
18374: PUSH
18375: LD_INT 11
18377: PUSH
18378: LD_INT 12
18380: PUSH
18381: LD_INT 13
18383: PUSH
18384: LD_INT 14
18386: PUSH
18387: LD_INT 15
18389: PUSH
18390: LD_INT 16
18392: PUSH
18393: LD_INT 17
18395: PUSH
18396: LD_INT 18
18398: PUSH
18399: LD_INT 19
18401: PUSH
18402: LD_INT 20
18404: PUSH
18405: LD_INT 21
18407: PUSH
18408: LD_INT 22
18410: PUSH
18411: LD_INT 23
18413: PUSH
18414: LD_INT 24
18416: PUSH
18417: LD_INT 25
18419: PUSH
18420: LD_INT 26
18422: PUSH
18423: LD_INT 28
18425: PUSH
18426: LD_INT 30
18428: PUSH
18429: LD_INT 31
18431: PUSH
18432: LD_INT 32
18434: PUSH
18435: LD_INT 34
18437: PUSH
18438: LD_INT 36
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 101
18476: PUSH
18477: LD_INT 102
18479: PUSH
18480: LD_INT 103
18482: PUSH
18483: LD_INT 104
18485: PUSH
18486: LD_INT 105
18488: PUSH
18489: LD_INT 106
18491: PUSH
18492: LD_INT 107
18494: PUSH
18495: LD_INT 108
18497: PUSH
18498: LD_INT 109
18500: PUSH
18501: LD_INT 110
18503: PUSH
18504: LD_INT 111
18506: PUSH
18507: LD_INT 112
18509: PUSH
18510: LD_INT 114
18512: PUSH
18513: LD_INT 116
18515: PUSH
18516: LD_INT 117
18518: PUSH
18519: LD_INT 118
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: ST_TO_ADDR
18544: GO 20227
18546: LD_INT 12
18548: DOUBLE
18549: EQUAL
18550: IFTRUE 18554
18552: GO 18774
18554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18555: LD_ADDR_VAR 0 2
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: LD_INT 3
18568: PUSH
18569: LD_INT 4
18571: PUSH
18572: LD_INT 5
18574: PUSH
18575: LD_INT 6
18577: PUSH
18578: LD_INT 7
18580: PUSH
18581: LD_INT 8
18583: PUSH
18584: LD_INT 9
18586: PUSH
18587: LD_INT 10
18589: PUSH
18590: LD_INT 11
18592: PUSH
18593: LD_INT 12
18595: PUSH
18596: LD_INT 13
18598: PUSH
18599: LD_INT 14
18601: PUSH
18602: LD_INT 15
18604: PUSH
18605: LD_INT 16
18607: PUSH
18608: LD_INT 17
18610: PUSH
18611: LD_INT 18
18613: PUSH
18614: LD_INT 19
18616: PUSH
18617: LD_INT 20
18619: PUSH
18620: LD_INT 21
18622: PUSH
18623: LD_INT 22
18625: PUSH
18626: LD_INT 23
18628: PUSH
18629: LD_INT 24
18631: PUSH
18632: LD_INT 25
18634: PUSH
18635: LD_INT 26
18637: PUSH
18638: LD_INT 27
18640: PUSH
18641: LD_INT 28
18643: PUSH
18644: LD_INT 30
18646: PUSH
18647: LD_INT 31
18649: PUSH
18650: LD_INT 32
18652: PUSH
18653: LD_INT 33
18655: PUSH
18656: LD_INT 34
18658: PUSH
18659: LD_INT 36
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 101
18700: PUSH
18701: LD_INT 102
18703: PUSH
18704: LD_INT 103
18706: PUSH
18707: LD_INT 104
18709: PUSH
18710: LD_INT 105
18712: PUSH
18713: LD_INT 106
18715: PUSH
18716: LD_INT 107
18718: PUSH
18719: LD_INT 108
18721: PUSH
18722: LD_INT 109
18724: PUSH
18725: LD_INT 110
18727: PUSH
18728: LD_INT 111
18730: PUSH
18731: LD_INT 112
18733: PUSH
18734: LD_INT 113
18736: PUSH
18737: LD_INT 114
18739: PUSH
18740: LD_INT 116
18742: PUSH
18743: LD_INT 117
18745: PUSH
18746: LD_INT 118
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: ST_TO_ADDR
18772: GO 20227
18774: LD_INT 13
18776: DOUBLE
18777: EQUAL
18778: IFTRUE 18782
18780: GO 18990
18782: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18783: LD_ADDR_VAR 0 2
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: LD_INT 2
18793: PUSH
18794: LD_INT 3
18796: PUSH
18797: LD_INT 4
18799: PUSH
18800: LD_INT 5
18802: PUSH
18803: LD_INT 8
18805: PUSH
18806: LD_INT 9
18808: PUSH
18809: LD_INT 10
18811: PUSH
18812: LD_INT 11
18814: PUSH
18815: LD_INT 12
18817: PUSH
18818: LD_INT 14
18820: PUSH
18821: LD_INT 15
18823: PUSH
18824: LD_INT 16
18826: PUSH
18827: LD_INT 17
18829: PUSH
18830: LD_INT 18
18832: PUSH
18833: LD_INT 19
18835: PUSH
18836: LD_INT 20
18838: PUSH
18839: LD_INT 21
18841: PUSH
18842: LD_INT 22
18844: PUSH
18845: LD_INT 23
18847: PUSH
18848: LD_INT 24
18850: PUSH
18851: LD_INT 25
18853: PUSH
18854: LD_INT 26
18856: PUSH
18857: LD_INT 27
18859: PUSH
18860: LD_INT 28
18862: PUSH
18863: LD_INT 30
18865: PUSH
18866: LD_INT 31
18868: PUSH
18869: LD_INT 32
18871: PUSH
18872: LD_INT 33
18874: PUSH
18875: LD_INT 34
18877: PUSH
18878: LD_INT 36
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 101
18916: PUSH
18917: LD_INT 102
18919: PUSH
18920: LD_INT 103
18922: PUSH
18923: LD_INT 104
18925: PUSH
18926: LD_INT 105
18928: PUSH
18929: LD_INT 106
18931: PUSH
18932: LD_INT 107
18934: PUSH
18935: LD_INT 108
18937: PUSH
18938: LD_INT 109
18940: PUSH
18941: LD_INT 110
18943: PUSH
18944: LD_INT 111
18946: PUSH
18947: LD_INT 112
18949: PUSH
18950: LD_INT 113
18952: PUSH
18953: LD_INT 114
18955: PUSH
18956: LD_INT 116
18958: PUSH
18959: LD_INT 117
18961: PUSH
18962: LD_INT 118
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: ST_TO_ADDR
18988: GO 20227
18990: LD_INT 14
18992: DOUBLE
18993: EQUAL
18994: IFTRUE 18998
18996: GO 19222
18998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18999: LD_ADDR_VAR 0 2
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 6
19021: PUSH
19022: LD_INT 7
19024: PUSH
19025: LD_INT 8
19027: PUSH
19028: LD_INT 9
19030: PUSH
19031: LD_INT 10
19033: PUSH
19034: LD_INT 11
19036: PUSH
19037: LD_INT 12
19039: PUSH
19040: LD_INT 13
19042: PUSH
19043: LD_INT 14
19045: PUSH
19046: LD_INT 15
19048: PUSH
19049: LD_INT 16
19051: PUSH
19052: LD_INT 17
19054: PUSH
19055: LD_INT 18
19057: PUSH
19058: LD_INT 19
19060: PUSH
19061: LD_INT 20
19063: PUSH
19064: LD_INT 21
19066: PUSH
19067: LD_INT 22
19069: PUSH
19070: LD_INT 23
19072: PUSH
19073: LD_INT 24
19075: PUSH
19076: LD_INT 25
19078: PUSH
19079: LD_INT 26
19081: PUSH
19082: LD_INT 27
19084: PUSH
19085: LD_INT 28
19087: PUSH
19088: LD_INT 29
19090: PUSH
19091: LD_INT 30
19093: PUSH
19094: LD_INT 31
19096: PUSH
19097: LD_INT 32
19099: PUSH
19100: LD_INT 33
19102: PUSH
19103: LD_INT 34
19105: PUSH
19106: LD_INT 36
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 101
19148: PUSH
19149: LD_INT 102
19151: PUSH
19152: LD_INT 103
19154: PUSH
19155: LD_INT 104
19157: PUSH
19158: LD_INT 105
19160: PUSH
19161: LD_INT 106
19163: PUSH
19164: LD_INT 107
19166: PUSH
19167: LD_INT 108
19169: PUSH
19170: LD_INT 109
19172: PUSH
19173: LD_INT 110
19175: PUSH
19176: LD_INT 111
19178: PUSH
19179: LD_INT 112
19181: PUSH
19182: LD_INT 113
19184: PUSH
19185: LD_INT 114
19187: PUSH
19188: LD_INT 116
19190: PUSH
19191: LD_INT 117
19193: PUSH
19194: LD_INT 118
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: ST_TO_ADDR
19220: GO 20227
19222: LD_INT 15
19224: DOUBLE
19225: EQUAL
19226: IFTRUE 19230
19228: GO 19454
19230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19231: LD_ADDR_VAR 0 2
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: LD_INT 3
19244: PUSH
19245: LD_INT 4
19247: PUSH
19248: LD_INT 5
19250: PUSH
19251: LD_INT 6
19253: PUSH
19254: LD_INT 7
19256: PUSH
19257: LD_INT 8
19259: PUSH
19260: LD_INT 9
19262: PUSH
19263: LD_INT 10
19265: PUSH
19266: LD_INT 11
19268: PUSH
19269: LD_INT 12
19271: PUSH
19272: LD_INT 13
19274: PUSH
19275: LD_INT 14
19277: PUSH
19278: LD_INT 15
19280: PUSH
19281: LD_INT 16
19283: PUSH
19284: LD_INT 17
19286: PUSH
19287: LD_INT 18
19289: PUSH
19290: LD_INT 19
19292: PUSH
19293: LD_INT 20
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_INT 23
19304: PUSH
19305: LD_INT 24
19307: PUSH
19308: LD_INT 25
19310: PUSH
19311: LD_INT 26
19313: PUSH
19314: LD_INT 27
19316: PUSH
19317: LD_INT 28
19319: PUSH
19320: LD_INT 29
19322: PUSH
19323: LD_INT 30
19325: PUSH
19326: LD_INT 31
19328: PUSH
19329: LD_INT 32
19331: PUSH
19332: LD_INT 33
19334: PUSH
19335: LD_INT 34
19337: PUSH
19338: LD_INT 36
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 101
19380: PUSH
19381: LD_INT 102
19383: PUSH
19384: LD_INT 103
19386: PUSH
19387: LD_INT 104
19389: PUSH
19390: LD_INT 105
19392: PUSH
19393: LD_INT 106
19395: PUSH
19396: LD_INT 107
19398: PUSH
19399: LD_INT 108
19401: PUSH
19402: LD_INT 109
19404: PUSH
19405: LD_INT 110
19407: PUSH
19408: LD_INT 111
19410: PUSH
19411: LD_INT 112
19413: PUSH
19414: LD_INT 113
19416: PUSH
19417: LD_INT 114
19419: PUSH
19420: LD_INT 116
19422: PUSH
19423: LD_INT 117
19425: PUSH
19426: LD_INT 118
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: ST_TO_ADDR
19452: GO 20227
19454: LD_INT 16
19456: DOUBLE
19457: EQUAL
19458: IFTRUE 19462
19460: GO 19598
19462: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19463: LD_ADDR_VAR 0 2
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: LD_INT 4
19473: PUSH
19474: LD_INT 5
19476: PUSH
19477: LD_INT 7
19479: PUSH
19480: LD_INT 11
19482: PUSH
19483: LD_INT 12
19485: PUSH
19486: LD_INT 15
19488: PUSH
19489: LD_INT 16
19491: PUSH
19492: LD_INT 20
19494: PUSH
19495: LD_INT 21
19497: PUSH
19498: LD_INT 22
19500: PUSH
19501: LD_INT 23
19503: PUSH
19504: LD_INT 25
19506: PUSH
19507: LD_INT 26
19509: PUSH
19510: LD_INT 30
19512: PUSH
19513: LD_INT 31
19515: PUSH
19516: LD_INT 32
19518: PUSH
19519: LD_INT 33
19521: PUSH
19522: LD_INT 34
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 101
19548: PUSH
19549: LD_INT 102
19551: PUSH
19552: LD_INT 103
19554: PUSH
19555: LD_INT 106
19557: PUSH
19558: LD_INT 108
19560: PUSH
19561: LD_INT 112
19563: PUSH
19564: LD_INT 113
19566: PUSH
19567: LD_INT 114
19569: PUSH
19570: LD_INT 116
19572: PUSH
19573: LD_INT 117
19575: PUSH
19576: LD_INT 118
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: ST_TO_ADDR
19596: GO 20227
19598: LD_INT 17
19600: DOUBLE
19601: EQUAL
19602: IFTRUE 19606
19604: GO 19830
19606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19607: LD_ADDR_VAR 0 2
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: LD_INT 4
19623: PUSH
19624: LD_INT 5
19626: PUSH
19627: LD_INT 6
19629: PUSH
19630: LD_INT 7
19632: PUSH
19633: LD_INT 8
19635: PUSH
19636: LD_INT 9
19638: PUSH
19639: LD_INT 10
19641: PUSH
19642: LD_INT 11
19644: PUSH
19645: LD_INT 12
19647: PUSH
19648: LD_INT 13
19650: PUSH
19651: LD_INT 14
19653: PUSH
19654: LD_INT 15
19656: PUSH
19657: LD_INT 16
19659: PUSH
19660: LD_INT 17
19662: PUSH
19663: LD_INT 18
19665: PUSH
19666: LD_INT 19
19668: PUSH
19669: LD_INT 20
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 22
19677: PUSH
19678: LD_INT 23
19680: PUSH
19681: LD_INT 24
19683: PUSH
19684: LD_INT 25
19686: PUSH
19687: LD_INT 26
19689: PUSH
19690: LD_INT 27
19692: PUSH
19693: LD_INT 28
19695: PUSH
19696: LD_INT 29
19698: PUSH
19699: LD_INT 30
19701: PUSH
19702: LD_INT 31
19704: PUSH
19705: LD_INT 32
19707: PUSH
19708: LD_INT 33
19710: PUSH
19711: LD_INT 34
19713: PUSH
19714: LD_INT 36
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 101
19756: PUSH
19757: LD_INT 102
19759: PUSH
19760: LD_INT 103
19762: PUSH
19763: LD_INT 104
19765: PUSH
19766: LD_INT 105
19768: PUSH
19769: LD_INT 106
19771: PUSH
19772: LD_INT 107
19774: PUSH
19775: LD_INT 108
19777: PUSH
19778: LD_INT 109
19780: PUSH
19781: LD_INT 110
19783: PUSH
19784: LD_INT 111
19786: PUSH
19787: LD_INT 112
19789: PUSH
19790: LD_INT 113
19792: PUSH
19793: LD_INT 114
19795: PUSH
19796: LD_INT 116
19798: PUSH
19799: LD_INT 117
19801: PUSH
19802: LD_INT 118
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: ST_TO_ADDR
19828: GO 20227
19830: LD_INT 18
19832: DOUBLE
19833: EQUAL
19834: IFTRUE 19838
19836: GO 19986
19838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19839: LD_ADDR_VAR 0 2
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: LD_INT 4
19849: PUSH
19850: LD_INT 5
19852: PUSH
19853: LD_INT 7
19855: PUSH
19856: LD_INT 11
19858: PUSH
19859: LD_INT 12
19861: PUSH
19862: LD_INT 15
19864: PUSH
19865: LD_INT 16
19867: PUSH
19868: LD_INT 20
19870: PUSH
19871: LD_INT 21
19873: PUSH
19874: LD_INT 22
19876: PUSH
19877: LD_INT 23
19879: PUSH
19880: LD_INT 25
19882: PUSH
19883: LD_INT 26
19885: PUSH
19886: LD_INT 30
19888: PUSH
19889: LD_INT 31
19891: PUSH
19892: LD_INT 32
19894: PUSH
19895: LD_INT 33
19897: PUSH
19898: LD_INT 34
19900: PUSH
19901: LD_INT 35
19903: PUSH
19904: LD_INT 36
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 101
19932: PUSH
19933: LD_INT 102
19935: PUSH
19936: LD_INT 103
19938: PUSH
19939: LD_INT 106
19941: PUSH
19942: LD_INT 108
19944: PUSH
19945: LD_INT 112
19947: PUSH
19948: LD_INT 113
19950: PUSH
19951: LD_INT 114
19953: PUSH
19954: LD_INT 115
19956: PUSH
19957: LD_INT 116
19959: PUSH
19960: LD_INT 117
19962: PUSH
19963: LD_INT 118
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: ST_TO_ADDR
19984: GO 20227
19986: LD_INT 19
19988: DOUBLE
19989: EQUAL
19990: IFTRUE 19994
19992: GO 20226
19994: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19995: LD_ADDR_VAR 0 2
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: LD_INT 3
20008: PUSH
20009: LD_INT 4
20011: PUSH
20012: LD_INT 5
20014: PUSH
20015: LD_INT 6
20017: PUSH
20018: LD_INT 7
20020: PUSH
20021: LD_INT 8
20023: PUSH
20024: LD_INT 9
20026: PUSH
20027: LD_INT 10
20029: PUSH
20030: LD_INT 11
20032: PUSH
20033: LD_INT 12
20035: PUSH
20036: LD_INT 13
20038: PUSH
20039: LD_INT 14
20041: PUSH
20042: LD_INT 15
20044: PUSH
20045: LD_INT 16
20047: PUSH
20048: LD_INT 17
20050: PUSH
20051: LD_INT 18
20053: PUSH
20054: LD_INT 19
20056: PUSH
20057: LD_INT 20
20059: PUSH
20060: LD_INT 21
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_INT 23
20068: PUSH
20069: LD_INT 24
20071: PUSH
20072: LD_INT 25
20074: PUSH
20075: LD_INT 26
20077: PUSH
20078: LD_INT 27
20080: PUSH
20081: LD_INT 28
20083: PUSH
20084: LD_INT 29
20086: PUSH
20087: LD_INT 30
20089: PUSH
20090: LD_INT 31
20092: PUSH
20093: LD_INT 32
20095: PUSH
20096: LD_INT 33
20098: PUSH
20099: LD_INT 34
20101: PUSH
20102: LD_INT 35
20104: PUSH
20105: LD_INT 36
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 101
20148: PUSH
20149: LD_INT 102
20151: PUSH
20152: LD_INT 103
20154: PUSH
20155: LD_INT 104
20157: PUSH
20158: LD_INT 105
20160: PUSH
20161: LD_INT 106
20163: PUSH
20164: LD_INT 107
20166: PUSH
20167: LD_INT 108
20169: PUSH
20170: LD_INT 109
20172: PUSH
20173: LD_INT 110
20175: PUSH
20176: LD_INT 111
20178: PUSH
20179: LD_INT 112
20181: PUSH
20182: LD_INT 113
20184: PUSH
20185: LD_INT 114
20187: PUSH
20188: LD_INT 115
20190: PUSH
20191: LD_INT 116
20193: PUSH
20194: LD_INT 117
20196: PUSH
20197: LD_INT 118
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: ST_TO_ADDR
20224: GO 20227
20226: POP
// end else
20227: GO 20458
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20229: LD_ADDR_VAR 0 2
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: LD_INT 3
20242: PUSH
20243: LD_INT 4
20245: PUSH
20246: LD_INT 5
20248: PUSH
20249: LD_INT 6
20251: PUSH
20252: LD_INT 7
20254: PUSH
20255: LD_INT 8
20257: PUSH
20258: LD_INT 9
20260: PUSH
20261: LD_INT 10
20263: PUSH
20264: LD_INT 11
20266: PUSH
20267: LD_INT 12
20269: PUSH
20270: LD_INT 13
20272: PUSH
20273: LD_INT 14
20275: PUSH
20276: LD_INT 15
20278: PUSH
20279: LD_INT 16
20281: PUSH
20282: LD_INT 17
20284: PUSH
20285: LD_INT 18
20287: PUSH
20288: LD_INT 19
20290: PUSH
20291: LD_INT 20
20293: PUSH
20294: LD_INT 21
20296: PUSH
20297: LD_INT 22
20299: PUSH
20300: LD_INT 23
20302: PUSH
20303: LD_INT 24
20305: PUSH
20306: LD_INT 25
20308: PUSH
20309: LD_INT 26
20311: PUSH
20312: LD_INT 27
20314: PUSH
20315: LD_INT 28
20317: PUSH
20318: LD_INT 29
20320: PUSH
20321: LD_INT 30
20323: PUSH
20324: LD_INT 31
20326: PUSH
20327: LD_INT 32
20329: PUSH
20330: LD_INT 33
20332: PUSH
20333: LD_INT 34
20335: PUSH
20336: LD_INT 35
20338: PUSH
20339: LD_INT 36
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 101
20382: PUSH
20383: LD_INT 102
20385: PUSH
20386: LD_INT 103
20388: PUSH
20389: LD_INT 104
20391: PUSH
20392: LD_INT 105
20394: PUSH
20395: LD_INT 106
20397: PUSH
20398: LD_INT 107
20400: PUSH
20401: LD_INT 108
20403: PUSH
20404: LD_INT 109
20406: PUSH
20407: LD_INT 110
20409: PUSH
20410: LD_INT 111
20412: PUSH
20413: LD_INT 112
20415: PUSH
20416: LD_INT 113
20418: PUSH
20419: LD_INT 114
20421: PUSH
20422: LD_INT 115
20424: PUSH
20425: LD_INT 116
20427: PUSH
20428: LD_INT 117
20430: PUSH
20431: LD_INT 118
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: ST_TO_ADDR
// if result then
20458: LD_VAR 0 2
20462: IFFALSE 21248
// begin normal :=  ;
20464: LD_ADDR_VAR 0 5
20468: PUSH
20469: LD_STRING 
20471: ST_TO_ADDR
// hardcore :=  ;
20472: LD_ADDR_VAR 0 6
20476: PUSH
20477: LD_STRING 
20479: ST_TO_ADDR
// active :=  ;
20480: LD_ADDR_VAR 0 7
20484: PUSH
20485: LD_STRING 
20487: ST_TO_ADDR
// for i = 1 to normalCounter do
20488: LD_ADDR_VAR 0 8
20492: PUSH
20493: DOUBLE
20494: LD_INT 1
20496: DEC
20497: ST_TO_ADDR
20498: LD_EXP 38
20502: PUSH
20503: FOR_TO
20504: IFFALSE 20605
// begin tmp := 0 ;
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_STRING 0
20513: ST_TO_ADDR
// if result [ 1 ] then
20514: LD_VAR 0 2
20518: PUSH
20519: LD_INT 1
20521: ARRAY
20522: IFFALSE 20587
// if result [ 1 ] [ 1 ] = i then
20524: LD_VAR 0 2
20528: PUSH
20529: LD_INT 1
20531: ARRAY
20532: PUSH
20533: LD_INT 1
20535: ARRAY
20536: PUSH
20537: LD_VAR 0 8
20541: EQUAL
20542: IFFALSE 20587
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: LD_VAR 0 2
20553: PPUSH
20554: LD_INT 1
20556: PPUSH
20557: LD_VAR 0 2
20561: PUSH
20562: LD_INT 1
20564: ARRAY
20565: PPUSH
20566: LD_INT 1
20568: PPUSH
20569: CALL_OW 3
20573: PPUSH
20574: CALL_OW 1
20578: ST_TO_ADDR
// tmp := 1 ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_STRING 1
20586: ST_TO_ADDR
// end ; normal := normal & tmp ;
20587: LD_ADDR_VAR 0 5
20591: PUSH
20592: LD_VAR 0 5
20596: PUSH
20597: LD_VAR 0 3
20601: STR
20602: ST_TO_ADDR
// end ;
20603: GO 20503
20605: POP
20606: POP
// for i = 1 to hardcoreCounter do
20607: LD_ADDR_VAR 0 8
20611: PUSH
20612: DOUBLE
20613: LD_INT 1
20615: DEC
20616: ST_TO_ADDR
20617: LD_EXP 39
20621: PUSH
20622: FOR_TO
20623: IFFALSE 20728
// begin tmp := 0 ;
20625: LD_ADDR_VAR 0 3
20629: PUSH
20630: LD_STRING 0
20632: ST_TO_ADDR
// if result [ 2 ] then
20633: LD_VAR 0 2
20637: PUSH
20638: LD_INT 2
20640: ARRAY
20641: IFFALSE 20710
// if result [ 2 ] [ 1 ] = 100 + i then
20643: LD_VAR 0 2
20647: PUSH
20648: LD_INT 2
20650: ARRAY
20651: PUSH
20652: LD_INT 1
20654: ARRAY
20655: PUSH
20656: LD_INT 100
20658: PUSH
20659: LD_VAR 0 8
20663: PLUS
20664: EQUAL
20665: IFFALSE 20710
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20667: LD_ADDR_VAR 0 2
20671: PUSH
20672: LD_VAR 0 2
20676: PPUSH
20677: LD_INT 2
20679: PPUSH
20680: LD_VAR 0 2
20684: PUSH
20685: LD_INT 2
20687: ARRAY
20688: PPUSH
20689: LD_INT 1
20691: PPUSH
20692: CALL_OW 3
20696: PPUSH
20697: CALL_OW 1
20701: ST_TO_ADDR
// tmp := 1 ;
20702: LD_ADDR_VAR 0 3
20706: PUSH
20707: LD_STRING 1
20709: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20710: LD_ADDR_VAR 0 6
20714: PUSH
20715: LD_VAR 0 6
20719: PUSH
20720: LD_VAR 0 3
20724: STR
20725: ST_TO_ADDR
// end ;
20726: GO 20622
20728: POP
20729: POP
// if isGameLoad then
20730: LD_VAR 0 1
20734: IFFALSE 21209
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20736: LD_ADDR_VAR 0 4
20740: PUSH
20741: LD_EXP 42
20745: PUSH
20746: LD_EXP 41
20750: PUSH
20751: LD_EXP 43
20755: PUSH
20756: LD_EXP 40
20760: PUSH
20761: LD_EXP 44
20765: PUSH
20766: LD_EXP 45
20770: PUSH
20771: LD_EXP 46
20775: PUSH
20776: LD_EXP 47
20780: PUSH
20781: LD_EXP 48
20785: PUSH
20786: LD_EXP 49
20790: PUSH
20791: LD_EXP 50
20795: PUSH
20796: LD_EXP 51
20800: PUSH
20801: LD_EXP 52
20805: PUSH
20806: LD_EXP 53
20810: PUSH
20811: LD_EXP 61
20815: PUSH
20816: LD_EXP 62
20820: PUSH
20821: LD_EXP 63
20825: PUSH
20826: LD_EXP 64
20830: PUSH
20831: LD_EXP 66
20835: PUSH
20836: LD_EXP 67
20840: PUSH
20841: LD_EXP 68
20845: PUSH
20846: LD_EXP 71
20850: PUSH
20851: LD_EXP 73
20855: PUSH
20856: LD_EXP 74
20860: PUSH
20861: LD_EXP 75
20865: PUSH
20866: LD_EXP 77
20870: PUSH
20871: LD_EXP 78
20875: PUSH
20876: LD_EXP 81
20880: PUSH
20881: LD_EXP 82
20885: PUSH
20886: LD_EXP 83
20890: PUSH
20891: LD_EXP 84
20895: PUSH
20896: LD_EXP 85
20900: PUSH
20901: LD_EXP 86
20905: PUSH
20906: LD_EXP 87
20910: PUSH
20911: LD_EXP 88
20915: PUSH
20916: LD_EXP 89
20920: PUSH
20921: LD_EXP 54
20925: PUSH
20926: LD_EXP 55
20930: PUSH
20931: LD_EXP 58
20935: PUSH
20936: LD_EXP 59
20940: PUSH
20941: LD_EXP 60
20945: PUSH
20946: LD_EXP 56
20950: PUSH
20951: LD_EXP 57
20955: PUSH
20956: LD_EXP 65
20960: PUSH
20961: LD_EXP 69
20965: PUSH
20966: LD_EXP 70
20970: PUSH
20971: LD_EXP 72
20975: PUSH
20976: LD_EXP 76
20980: PUSH
20981: LD_EXP 79
20985: PUSH
20986: LD_EXP 80
20990: PUSH
20991: LD_EXP 90
20995: PUSH
20996: LD_EXP 91
21000: PUSH
21001: LD_EXP 92
21005: PUSH
21006: LD_EXP 93
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: ST_TO_ADDR
// tmp :=  ;
21067: LD_ADDR_VAR 0 3
21071: PUSH
21072: LD_STRING 
21074: ST_TO_ADDR
// for i = 1 to normalCounter do
21075: LD_ADDR_VAR 0 8
21079: PUSH
21080: DOUBLE
21081: LD_INT 1
21083: DEC
21084: ST_TO_ADDR
21085: LD_EXP 38
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21127
// begin if flags [ i ] then
21093: LD_VAR 0 4
21097: PUSH
21098: LD_VAR 0 8
21102: ARRAY
21103: IFFALSE 21125
// tmp := tmp & i & ; ;
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_VAR 0 3
21114: PUSH
21115: LD_VAR 0 8
21119: STR
21120: PUSH
21121: LD_STRING ;
21123: STR
21124: ST_TO_ADDR
// end ;
21125: GO 21090
21127: POP
21128: POP
// for i = 1 to hardcoreCounter do
21129: LD_ADDR_VAR 0 8
21133: PUSH
21134: DOUBLE
21135: LD_INT 1
21137: DEC
21138: ST_TO_ADDR
21139: LD_EXP 39
21143: PUSH
21144: FOR_TO
21145: IFFALSE 21191
// begin if flags [ normalCounter + i ] then
21147: LD_VAR 0 4
21151: PUSH
21152: LD_EXP 38
21156: PUSH
21157: LD_VAR 0 8
21161: PLUS
21162: ARRAY
21163: IFFALSE 21189
// tmp := tmp & ( 100 + i ) & ; ;
21165: LD_ADDR_VAR 0 3
21169: PUSH
21170: LD_VAR 0 3
21174: PUSH
21175: LD_INT 100
21177: PUSH
21178: LD_VAR 0 8
21182: PLUS
21183: STR
21184: PUSH
21185: LD_STRING ;
21187: STR
21188: ST_TO_ADDR
// end ;
21189: GO 21144
21191: POP
21192: POP
// if tmp then
21193: LD_VAR 0 3
21197: IFFALSE 21209
// active := tmp ;
21199: LD_ADDR_VAR 0 7
21203: PUSH
21204: LD_VAR 0 3
21208: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21209: LD_STRING getStreamItemsFromMission("
21211: PUSH
21212: LD_VAR 0 5
21216: STR
21217: PUSH
21218: LD_STRING ","
21220: STR
21221: PUSH
21222: LD_VAR 0 6
21226: STR
21227: PUSH
21228: LD_STRING ","
21230: STR
21231: PUSH
21232: LD_VAR 0 7
21236: STR
21237: PUSH
21238: LD_STRING ")
21240: STR
21241: PPUSH
21242: CALL_OW 559
// end else
21246: GO 21255
// ToLua ( getStreamItemsFromMission("","","") ) ;
21248: LD_STRING getStreamItemsFromMission("","","")
21250: PPUSH
21251: CALL_OW 559
// end ;
21255: LD_VAR 0 2
21259: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21260: LD_EXP 37
21264: PUSH
21265: LD_EXP 42
21269: AND
21270: IFFALSE 21394
21272: GO 21274
21274: DISABLE
21275: LD_INT 0
21277: PPUSH
21278: PPUSH
// begin enable ;
21279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_INT 22
21287: PUSH
21288: LD_OWVAR 2
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 34
21302: PUSH
21303: LD_INT 7
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 34
21312: PUSH
21313: LD_INT 45
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 34
21322: PUSH
21323: LD_INT 28
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 34
21332: PUSH
21333: LD_INT 47
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PPUSH
21351: CALL_OW 69
21355: ST_TO_ADDR
// if not tmp then
21356: LD_VAR 0 2
21360: NOT
21361: IFFALSE 21365
// exit ;
21363: GO 21394
// for i in tmp do
21365: LD_ADDR_VAR 0 1
21369: PUSH
21370: LD_VAR 0 2
21374: PUSH
21375: FOR_IN
21376: IFFALSE 21392
// begin SetLives ( i , 0 ) ;
21378: LD_VAR 0 1
21382: PPUSH
21383: LD_INT 0
21385: PPUSH
21386: CALL_OW 234
// end ;
21390: GO 21375
21392: POP
21393: POP
// end ;
21394: PPOPN 2
21396: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21397: LD_EXP 37
21401: PUSH
21402: LD_EXP 43
21406: AND
21407: IFFALSE 21491
21409: GO 21411
21411: DISABLE
21412: LD_INT 0
21414: PPUSH
21415: PPUSH
// begin enable ;
21416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21417: LD_ADDR_VAR 0 2
21421: PUSH
21422: LD_INT 22
21424: PUSH
21425: LD_OWVAR 2
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 32
21436: PUSH
21437: LD_INT 3
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PPUSH
21448: CALL_OW 69
21452: ST_TO_ADDR
// if not tmp then
21453: LD_VAR 0 2
21457: NOT
21458: IFFALSE 21462
// exit ;
21460: GO 21491
// for i in tmp do
21462: LD_ADDR_VAR 0 1
21466: PUSH
21467: LD_VAR 0 2
21471: PUSH
21472: FOR_IN
21473: IFFALSE 21489
// begin SetLives ( i , 0 ) ;
21475: LD_VAR 0 1
21479: PPUSH
21480: LD_INT 0
21482: PPUSH
21483: CALL_OW 234
// end ;
21487: GO 21472
21489: POP
21490: POP
// end ;
21491: PPOPN 2
21493: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21494: LD_EXP 37
21498: PUSH
21499: LD_EXP 40
21503: AND
21504: IFFALSE 21597
21506: GO 21508
21508: DISABLE
21509: LD_INT 0
21511: PPUSH
// begin enable ;
21512: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21513: LD_ADDR_VAR 0 1
21517: PUSH
21518: LD_INT 22
21520: PUSH
21521: LD_OWVAR 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: LD_INT 25
21535: PUSH
21536: LD_INT 5
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 25
21545: PUSH
21546: LD_INT 9
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 25
21555: PUSH
21556: LD_INT 8
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PPUSH
21573: CALL_OW 69
21577: PUSH
21578: FOR_IN
21579: IFFALSE 21595
// begin SetClass ( i , 1 ) ;
21581: LD_VAR 0 1
21585: PPUSH
21586: LD_INT 1
21588: PPUSH
21589: CALL_OW 336
// end ;
21593: GO 21578
21595: POP
21596: POP
// end ;
21597: PPOPN 1
21599: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21600: LD_EXP 37
21604: PUSH
21605: LD_EXP 41
21609: AND
21610: PUSH
21611: LD_OWVAR 65
21615: PUSH
21616: LD_INT 7
21618: LESS
21619: AND
21620: IFFALSE 21634
21622: GO 21624
21624: DISABLE
// begin enable ;
21625: ENABLE
// game_speed := 7 ;
21626: LD_ADDR_OWVAR 65
21630: PUSH
21631: LD_INT 7
21633: ST_TO_ADDR
// end ;
21634: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21635: LD_EXP 37
21639: PUSH
21640: LD_EXP 44
21644: AND
21645: IFFALSE 21847
21647: GO 21649
21649: DISABLE
21650: LD_INT 0
21652: PPUSH
21653: PPUSH
21654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21655: LD_ADDR_VAR 0 3
21659: PUSH
21660: LD_INT 81
21662: PUSH
21663: LD_OWVAR 2
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 21
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PPUSH
21686: CALL_OW 69
21690: ST_TO_ADDR
// if not tmp then
21691: LD_VAR 0 3
21695: NOT
21696: IFFALSE 21700
// exit ;
21698: GO 21847
// if tmp > 5 then
21700: LD_VAR 0 3
21704: PUSH
21705: LD_INT 5
21707: GREATER
21708: IFFALSE 21720
// k := 5 else
21710: LD_ADDR_VAR 0 2
21714: PUSH
21715: LD_INT 5
21717: ST_TO_ADDR
21718: GO 21730
// k := tmp ;
21720: LD_ADDR_VAR 0 2
21724: PUSH
21725: LD_VAR 0 3
21729: ST_TO_ADDR
// for i := 1 to k do
21730: LD_ADDR_VAR 0 1
21734: PUSH
21735: DOUBLE
21736: LD_INT 1
21738: DEC
21739: ST_TO_ADDR
21740: LD_VAR 0 2
21744: PUSH
21745: FOR_TO
21746: IFFALSE 21845
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21748: LD_VAR 0 3
21752: PUSH
21753: LD_VAR 0 1
21757: ARRAY
21758: PPUSH
21759: LD_VAR 0 1
21763: PUSH
21764: LD_INT 4
21766: MOD
21767: PUSH
21768: LD_INT 1
21770: PLUS
21771: PPUSH
21772: CALL_OW 259
21776: PUSH
21777: LD_INT 10
21779: LESS
21780: IFFALSE 21843
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21782: LD_VAR 0 3
21786: PUSH
21787: LD_VAR 0 1
21791: ARRAY
21792: PPUSH
21793: LD_VAR 0 1
21797: PUSH
21798: LD_INT 4
21800: MOD
21801: PUSH
21802: LD_INT 1
21804: PLUS
21805: PPUSH
21806: LD_VAR 0 3
21810: PUSH
21811: LD_VAR 0 1
21815: ARRAY
21816: PPUSH
21817: LD_VAR 0 1
21821: PUSH
21822: LD_INT 4
21824: MOD
21825: PUSH
21826: LD_INT 1
21828: PLUS
21829: PPUSH
21830: CALL_OW 259
21834: PUSH
21835: LD_INT 1
21837: PLUS
21838: PPUSH
21839: CALL_OW 237
21843: GO 21745
21845: POP
21846: POP
// end ;
21847: PPOPN 3
21849: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21850: LD_EXP 37
21854: PUSH
21855: LD_EXP 45
21859: AND
21860: IFFALSE 21880
21862: GO 21864
21864: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21865: LD_INT 4
21867: PPUSH
21868: LD_OWVAR 2
21872: PPUSH
21873: LD_INT 0
21875: PPUSH
21876: CALL_OW 324
21880: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21881: LD_EXP 37
21885: PUSH
21886: LD_EXP 74
21890: AND
21891: IFFALSE 21911
21893: GO 21895
21895: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21896: LD_INT 19
21898: PPUSH
21899: LD_OWVAR 2
21903: PPUSH
21904: LD_INT 0
21906: PPUSH
21907: CALL_OW 324
21911: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21912: LD_EXP 37
21916: PUSH
21917: LD_EXP 46
21921: AND
21922: IFFALSE 22024
21924: GO 21926
21926: DISABLE
21927: LD_INT 0
21929: PPUSH
21930: PPUSH
// begin enable ;
21931: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21932: LD_ADDR_VAR 0 2
21936: PUSH
21937: LD_INT 22
21939: PUSH
21940: LD_OWVAR 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 2
21951: PUSH
21952: LD_INT 34
21954: PUSH
21955: LD_INT 11
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 34
21964: PUSH
21965: LD_INT 30
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PPUSH
21981: CALL_OW 69
21985: ST_TO_ADDR
// if not tmp then
21986: LD_VAR 0 2
21990: NOT
21991: IFFALSE 21995
// exit ;
21993: GO 22024
// for i in tmp do
21995: LD_ADDR_VAR 0 1
21999: PUSH
22000: LD_VAR 0 2
22004: PUSH
22005: FOR_IN
22006: IFFALSE 22022
// begin SetLives ( i , 0 ) ;
22008: LD_VAR 0 1
22012: PPUSH
22013: LD_INT 0
22015: PPUSH
22016: CALL_OW 234
// end ;
22020: GO 22005
22022: POP
22023: POP
// end ;
22024: PPOPN 2
22026: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22027: LD_EXP 37
22031: PUSH
22032: LD_EXP 47
22036: AND
22037: IFFALSE 22057
22039: GO 22041
22041: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22042: LD_INT 32
22044: PPUSH
22045: LD_OWVAR 2
22049: PPUSH
22050: LD_INT 0
22052: PPUSH
22053: CALL_OW 324
22057: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22058: LD_EXP 37
22062: PUSH
22063: LD_EXP 48
22067: AND
22068: IFFALSE 22249
22070: GO 22072
22072: DISABLE
22073: LD_INT 0
22075: PPUSH
22076: PPUSH
22077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22078: LD_ADDR_VAR 0 2
22082: PUSH
22083: LD_INT 22
22085: PUSH
22086: LD_OWVAR 2
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 33
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 69
22113: ST_TO_ADDR
// if not tmp then
22114: LD_VAR 0 2
22118: NOT
22119: IFFALSE 22123
// exit ;
22121: GO 22249
// side := 0 ;
22123: LD_ADDR_VAR 0 3
22127: PUSH
22128: LD_INT 0
22130: ST_TO_ADDR
// for i := 1 to 8 do
22131: LD_ADDR_VAR 0 1
22135: PUSH
22136: DOUBLE
22137: LD_INT 1
22139: DEC
22140: ST_TO_ADDR
22141: LD_INT 8
22143: PUSH
22144: FOR_TO
22145: IFFALSE 22193
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22147: LD_OWVAR 2
22151: PUSH
22152: LD_VAR 0 1
22156: NONEQUAL
22157: PUSH
22158: LD_OWVAR 2
22162: PPUSH
22163: LD_VAR 0 1
22167: PPUSH
22168: CALL_OW 81
22172: PUSH
22173: LD_INT 2
22175: EQUAL
22176: AND
22177: IFFALSE 22191
// begin side := i ;
22179: LD_ADDR_VAR 0 3
22183: PUSH
22184: LD_VAR 0 1
22188: ST_TO_ADDR
// break ;
22189: GO 22193
// end ;
22191: GO 22144
22193: POP
22194: POP
// if not side then
22195: LD_VAR 0 3
22199: NOT
22200: IFFALSE 22204
// exit ;
22202: GO 22249
// for i := 1 to tmp do
22204: LD_ADDR_VAR 0 1
22208: PUSH
22209: DOUBLE
22210: LD_INT 1
22212: DEC
22213: ST_TO_ADDR
22214: LD_VAR 0 2
22218: PUSH
22219: FOR_TO
22220: IFFALSE 22247
// if Prob ( 60 ) then
22222: LD_INT 60
22224: PPUSH
22225: CALL_OW 13
22229: IFFALSE 22245
// SetSide ( i , side ) ;
22231: LD_VAR 0 1
22235: PPUSH
22236: LD_VAR 0 3
22240: PPUSH
22241: CALL_OW 235
22245: GO 22219
22247: POP
22248: POP
// end ;
22249: PPOPN 3
22251: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22252: LD_EXP 37
22256: PUSH
22257: LD_EXP 50
22261: AND
22262: IFFALSE 22381
22264: GO 22266
22266: DISABLE
22267: LD_INT 0
22269: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22270: LD_ADDR_VAR 0 1
22274: PUSH
22275: LD_INT 22
22277: PUSH
22278: LD_OWVAR 2
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 21
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 3
22299: PUSH
22300: LD_INT 23
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: LIST
22318: PPUSH
22319: CALL_OW 69
22323: PUSH
22324: FOR_IN
22325: IFFALSE 22379
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22327: LD_VAR 0 1
22331: PPUSH
22332: CALL_OW 257
22336: PUSH
22337: LD_INT 1
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: LD_INT 4
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: IN
22355: IFFALSE 22377
// SetClass ( un , rand ( 1 , 4 ) ) ;
22357: LD_VAR 0 1
22361: PPUSH
22362: LD_INT 1
22364: PPUSH
22365: LD_INT 4
22367: PPUSH
22368: CALL_OW 12
22372: PPUSH
22373: CALL_OW 336
22377: GO 22324
22379: POP
22380: POP
// end ;
22381: PPOPN 1
22383: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22384: LD_EXP 37
22388: PUSH
22389: LD_EXP 49
22393: AND
22394: IFFALSE 22473
22396: GO 22398
22398: DISABLE
22399: LD_INT 0
22401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22402: LD_ADDR_VAR 0 1
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_OWVAR 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 21
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PPUSH
22433: CALL_OW 69
22437: ST_TO_ADDR
// if not tmp then
22438: LD_VAR 0 1
22442: NOT
22443: IFFALSE 22447
// exit ;
22445: GO 22473
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22447: LD_VAR 0 1
22451: PUSH
22452: LD_INT 1
22454: PPUSH
22455: LD_VAR 0 1
22459: PPUSH
22460: CALL_OW 12
22464: ARRAY
22465: PPUSH
22466: LD_INT 100
22468: PPUSH
22469: CALL_OW 234
// end ;
22473: PPOPN 1
22475: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22476: LD_EXP 37
22480: PUSH
22481: LD_EXP 51
22485: AND
22486: IFFALSE 22584
22488: GO 22490
22490: DISABLE
22491: LD_INT 0
22493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22494: LD_ADDR_VAR 0 1
22498: PUSH
22499: LD_INT 22
22501: PUSH
22502: LD_OWVAR 2
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 21
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PPUSH
22525: CALL_OW 69
22529: ST_TO_ADDR
// if not tmp then
22530: LD_VAR 0 1
22534: NOT
22535: IFFALSE 22539
// exit ;
22537: GO 22584
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22539: LD_VAR 0 1
22543: PUSH
22544: LD_INT 1
22546: PPUSH
22547: LD_VAR 0 1
22551: PPUSH
22552: CALL_OW 12
22556: ARRAY
22557: PPUSH
22558: LD_INT 1
22560: PPUSH
22561: LD_INT 4
22563: PPUSH
22564: CALL_OW 12
22568: PPUSH
22569: LD_INT 3000
22571: PPUSH
22572: LD_INT 9000
22574: PPUSH
22575: CALL_OW 12
22579: PPUSH
22580: CALL_OW 492
// end ;
22584: PPOPN 1
22586: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22587: LD_EXP 37
22591: PUSH
22592: LD_EXP 52
22596: AND
22597: IFFALSE 22617
22599: GO 22601
22601: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22602: LD_INT 1
22604: PPUSH
22605: LD_OWVAR 2
22609: PPUSH
22610: LD_INT 0
22612: PPUSH
22613: CALL_OW 324
22617: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22618: LD_EXP 37
22622: PUSH
22623: LD_EXP 53
22627: AND
22628: IFFALSE 22711
22630: GO 22632
22632: DISABLE
22633: LD_INT 0
22635: PPUSH
22636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_OWVAR 2
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 21
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PPUSH
22668: CALL_OW 69
22672: ST_TO_ADDR
// if not tmp then
22673: LD_VAR 0 2
22677: NOT
22678: IFFALSE 22682
// exit ;
22680: GO 22711
// for i in tmp do
22682: LD_ADDR_VAR 0 1
22686: PUSH
22687: LD_VAR 0 2
22691: PUSH
22692: FOR_IN
22693: IFFALSE 22709
// SetBLevel ( i , 10 ) ;
22695: LD_VAR 0 1
22699: PPUSH
22700: LD_INT 10
22702: PPUSH
22703: CALL_OW 241
22707: GO 22692
22709: POP
22710: POP
// end ;
22711: PPOPN 2
22713: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22714: LD_EXP 37
22718: PUSH
22719: LD_EXP 54
22723: AND
22724: IFFALSE 22835
22726: GO 22728
22728: DISABLE
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
22733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22734: LD_ADDR_VAR 0 3
22738: PUSH
22739: LD_INT 22
22741: PUSH
22742: LD_OWVAR 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 25
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PPUSH
22765: CALL_OW 69
22769: ST_TO_ADDR
// if not tmp then
22770: LD_VAR 0 3
22774: NOT
22775: IFFALSE 22779
// exit ;
22777: GO 22835
// un := tmp [ rand ( 1 , tmp ) ] ;
22779: LD_ADDR_VAR 0 2
22783: PUSH
22784: LD_VAR 0 3
22788: PUSH
22789: LD_INT 1
22791: PPUSH
22792: LD_VAR 0 3
22796: PPUSH
22797: CALL_OW 12
22801: ARRAY
22802: ST_TO_ADDR
// if Crawls ( un ) then
22803: LD_VAR 0 2
22807: PPUSH
22808: CALL_OW 318
22812: IFFALSE 22823
// ComWalk ( un ) ;
22814: LD_VAR 0 2
22818: PPUSH
22819: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22823: LD_VAR 0 2
22827: PPUSH
22828: LD_INT 5
22830: PPUSH
22831: CALL_OW 336
// end ;
22835: PPOPN 3
22837: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22838: LD_EXP 37
22842: PUSH
22843: LD_EXP 55
22847: AND
22848: PUSH
22849: LD_OWVAR 67
22853: PUSH
22854: LD_INT 4
22856: LESS
22857: AND
22858: IFFALSE 22877
22860: GO 22862
22862: DISABLE
// begin Difficulty := Difficulty + 1 ;
22863: LD_ADDR_OWVAR 67
22867: PUSH
22868: LD_OWVAR 67
22872: PUSH
22873: LD_INT 1
22875: PLUS
22876: ST_TO_ADDR
// end ;
22877: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22878: LD_EXP 37
22882: PUSH
22883: LD_EXP 56
22887: AND
22888: IFFALSE 22991
22890: GO 22892
22892: DISABLE
22893: LD_INT 0
22895: PPUSH
// begin for i := 1 to 5 do
22896: LD_ADDR_VAR 0 1
22900: PUSH
22901: DOUBLE
22902: LD_INT 1
22904: DEC
22905: ST_TO_ADDR
22906: LD_INT 5
22908: PUSH
22909: FOR_TO
22910: IFFALSE 22989
// begin uc_nation := nation_nature ;
22912: LD_ADDR_OWVAR 21
22916: PUSH
22917: LD_INT 0
22919: ST_TO_ADDR
// uc_side := 0 ;
22920: LD_ADDR_OWVAR 20
22924: PUSH
22925: LD_INT 0
22927: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22928: LD_ADDR_OWVAR 29
22932: PUSH
22933: LD_INT 12
22935: PUSH
22936: LD_INT 12
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: ST_TO_ADDR
// hc_agressivity := 20 ;
22943: LD_ADDR_OWVAR 35
22947: PUSH
22948: LD_INT 20
22950: ST_TO_ADDR
// hc_class := class_tiger ;
22951: LD_ADDR_OWVAR 28
22955: PUSH
22956: LD_INT 14
22958: ST_TO_ADDR
// hc_gallery :=  ;
22959: LD_ADDR_OWVAR 33
22963: PUSH
22964: LD_STRING 
22966: ST_TO_ADDR
// hc_name :=  ;
22967: LD_ADDR_OWVAR 26
22971: PUSH
22972: LD_STRING 
22974: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22975: CALL_OW 44
22979: PPUSH
22980: LD_INT 0
22982: PPUSH
22983: CALL_OW 51
// end ;
22987: GO 22909
22989: POP
22990: POP
// end ;
22991: PPOPN 1
22993: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22994: LD_EXP 37
22998: PUSH
22999: LD_EXP 57
23003: AND
23004: IFFALSE 23013
23006: GO 23008
23008: DISABLE
// StreamSibBomb ;
23009: CALL 23014 0 0
23013: END
// export function StreamSibBomb ; var i , x , y ; begin
23014: LD_INT 0
23016: PPUSH
23017: PPUSH
23018: PPUSH
23019: PPUSH
// result := false ;
23020: LD_ADDR_VAR 0 1
23024: PUSH
23025: LD_INT 0
23027: ST_TO_ADDR
// for i := 1 to 16 do
23028: LD_ADDR_VAR 0 2
23032: PUSH
23033: DOUBLE
23034: LD_INT 1
23036: DEC
23037: ST_TO_ADDR
23038: LD_INT 16
23040: PUSH
23041: FOR_TO
23042: IFFALSE 23241
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23044: LD_ADDR_VAR 0 3
23048: PUSH
23049: LD_INT 10
23051: PUSH
23052: LD_INT 20
23054: PUSH
23055: LD_INT 30
23057: PUSH
23058: LD_INT 40
23060: PUSH
23061: LD_INT 50
23063: PUSH
23064: LD_INT 60
23066: PUSH
23067: LD_INT 70
23069: PUSH
23070: LD_INT 80
23072: PUSH
23073: LD_INT 90
23075: PUSH
23076: LD_INT 100
23078: PUSH
23079: LD_INT 110
23081: PUSH
23082: LD_INT 120
23084: PUSH
23085: LD_INT 130
23087: PUSH
23088: LD_INT 140
23090: PUSH
23091: LD_INT 150
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: PPUSH
23114: LD_INT 15
23116: PPUSH
23117: CALL_OW 12
23121: ARRAY
23122: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23123: LD_ADDR_VAR 0 4
23127: PUSH
23128: LD_INT 10
23130: PUSH
23131: LD_INT 20
23133: PUSH
23134: LD_INT 30
23136: PUSH
23137: LD_INT 40
23139: PUSH
23140: LD_INT 50
23142: PUSH
23143: LD_INT 60
23145: PUSH
23146: LD_INT 70
23148: PUSH
23149: LD_INT 80
23151: PUSH
23152: LD_INT 90
23154: PUSH
23155: LD_INT 100
23157: PUSH
23158: LD_INT 110
23160: PUSH
23161: LD_INT 120
23163: PUSH
23164: LD_INT 130
23166: PUSH
23167: LD_INT 140
23169: PUSH
23170: LD_INT 150
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 1
23192: PPUSH
23193: LD_INT 15
23195: PPUSH
23196: CALL_OW 12
23200: ARRAY
23201: ST_TO_ADDR
// if ValidHex ( x , y ) then
23202: LD_VAR 0 3
23206: PPUSH
23207: LD_VAR 0 4
23211: PPUSH
23212: CALL_OW 488
23216: IFFALSE 23239
// begin result := [ x , y ] ;
23218: LD_ADDR_VAR 0 1
23222: PUSH
23223: LD_VAR 0 3
23227: PUSH
23228: LD_VAR 0 4
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: ST_TO_ADDR
// break ;
23237: GO 23241
// end ; end ;
23239: GO 23041
23241: POP
23242: POP
// if result then
23243: LD_VAR 0 1
23247: IFFALSE 23307
// begin ToLua ( playSibBomb() ) ;
23249: LD_STRING playSibBomb()
23251: PPUSH
23252: CALL_OW 559
// wait ( 0 0$14 ) ;
23256: LD_INT 490
23258: PPUSH
23259: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23263: LD_VAR 0 1
23267: PUSH
23268: LD_INT 1
23270: ARRAY
23271: PPUSH
23272: LD_VAR 0 1
23276: PUSH
23277: LD_INT 2
23279: ARRAY
23280: PPUSH
23281: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23285: LD_VAR 0 1
23289: PUSH
23290: LD_INT 1
23292: ARRAY
23293: PPUSH
23294: LD_VAR 0 1
23298: PUSH
23299: LD_INT 2
23301: ARRAY
23302: PPUSH
23303: CALL_OW 429
// end ; end ;
23307: LD_VAR 0 1
23311: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23312: LD_EXP 37
23316: PUSH
23317: LD_EXP 59
23321: AND
23322: IFFALSE 23334
23324: GO 23326
23326: DISABLE
// YouLost (  ) ;
23327: LD_STRING 
23329: PPUSH
23330: CALL_OW 104
23334: END
// every 0 0$1 trigger StreamModeActive and sFog do
23335: LD_EXP 37
23339: PUSH
23340: LD_EXP 58
23344: AND
23345: IFFALSE 23359
23347: GO 23349
23349: DISABLE
// FogOff ( your_side ) ;
23350: LD_OWVAR 2
23354: PPUSH
23355: CALL_OW 344
23359: END
// every 0 0$1 trigger StreamModeActive and sSun do
23360: LD_EXP 37
23364: PUSH
23365: LD_EXP 60
23369: AND
23370: IFFALSE 23398
23372: GO 23374
23374: DISABLE
// begin solar_recharge_percent := 0 ;
23375: LD_ADDR_OWVAR 79
23379: PUSH
23380: LD_INT 0
23382: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23383: LD_INT 10500
23385: PPUSH
23386: CALL_OW 67
// solar_recharge_percent := 100 ;
23390: LD_ADDR_OWVAR 79
23394: PUSH
23395: LD_INT 100
23397: ST_TO_ADDR
// end ;
23398: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23399: LD_EXP 37
23403: PUSH
23404: LD_EXP 61
23408: AND
23409: IFFALSE 23648
23411: GO 23413
23413: DISABLE
23414: LD_INT 0
23416: PPUSH
23417: PPUSH
23418: PPUSH
// begin tmp := [ ] ;
23419: LD_ADDR_VAR 0 3
23423: PUSH
23424: EMPTY
23425: ST_TO_ADDR
// for i := 1 to 6 do
23426: LD_ADDR_VAR 0 1
23430: PUSH
23431: DOUBLE
23432: LD_INT 1
23434: DEC
23435: ST_TO_ADDR
23436: LD_INT 6
23438: PUSH
23439: FOR_TO
23440: IFFALSE 23545
// begin uc_nation := nation_nature ;
23442: LD_ADDR_OWVAR 21
23446: PUSH
23447: LD_INT 0
23449: ST_TO_ADDR
// uc_side := 0 ;
23450: LD_ADDR_OWVAR 20
23454: PUSH
23455: LD_INT 0
23457: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23458: LD_ADDR_OWVAR 29
23462: PUSH
23463: LD_INT 12
23465: PUSH
23466: LD_INT 12
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: ST_TO_ADDR
// hc_agressivity := 20 ;
23473: LD_ADDR_OWVAR 35
23477: PUSH
23478: LD_INT 20
23480: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23481: LD_ADDR_OWVAR 28
23485: PUSH
23486: LD_INT 17
23488: ST_TO_ADDR
// hc_gallery :=  ;
23489: LD_ADDR_OWVAR 33
23493: PUSH
23494: LD_STRING 
23496: ST_TO_ADDR
// hc_name :=  ;
23497: LD_ADDR_OWVAR 26
23501: PUSH
23502: LD_STRING 
23504: ST_TO_ADDR
// un := CreateHuman ;
23505: LD_ADDR_VAR 0 2
23509: PUSH
23510: CALL_OW 44
23514: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23515: LD_VAR 0 2
23519: PPUSH
23520: LD_INT 1
23522: PPUSH
23523: CALL_OW 51
// tmp := tmp ^ un ;
23527: LD_ADDR_VAR 0 3
23531: PUSH
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 2
23541: ADD
23542: ST_TO_ADDR
// end ;
23543: GO 23439
23545: POP
23546: POP
// repeat wait ( 0 0$1 ) ;
23547: LD_INT 35
23549: PPUSH
23550: CALL_OW 67
// for un in tmp do
23554: LD_ADDR_VAR 0 2
23558: PUSH
23559: LD_VAR 0 3
23563: PUSH
23564: FOR_IN
23565: IFFALSE 23639
// begin if IsDead ( un ) then
23567: LD_VAR 0 2
23571: PPUSH
23572: CALL_OW 301
23576: IFFALSE 23596
// begin tmp := tmp diff un ;
23578: LD_ADDR_VAR 0 3
23582: PUSH
23583: LD_VAR 0 3
23587: PUSH
23588: LD_VAR 0 2
23592: DIFF
23593: ST_TO_ADDR
// continue ;
23594: GO 23564
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23596: LD_VAR 0 2
23600: PPUSH
23601: LD_INT 3
23603: PUSH
23604: LD_INT 22
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PPUSH
23618: CALL_OW 69
23622: PPUSH
23623: LD_VAR 0 2
23627: PPUSH
23628: CALL_OW 74
23632: PPUSH
23633: CALL_OW 115
// end ;
23637: GO 23564
23639: POP
23640: POP
// until not tmp ;
23641: LD_VAR 0 3
23645: NOT
23646: IFFALSE 23547
// end ;
23648: PPOPN 3
23650: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23651: LD_EXP 37
23655: PUSH
23656: LD_EXP 62
23660: AND
23661: IFFALSE 23715
23663: GO 23665
23665: DISABLE
// begin ToLua ( displayTroll(); ) ;
23666: LD_STRING displayTroll();
23668: PPUSH
23669: CALL_OW 559
// wait ( 3 3$00 ) ;
23673: LD_INT 6300
23675: PPUSH
23676: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23680: LD_STRING hideTroll();
23682: PPUSH
23683: CALL_OW 559
// wait ( 1 1$00 ) ;
23687: LD_INT 2100
23689: PPUSH
23690: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23694: LD_STRING displayTroll();
23696: PPUSH
23697: CALL_OW 559
// wait ( 1 1$00 ) ;
23701: LD_INT 2100
23703: PPUSH
23704: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23708: LD_STRING hideTroll();
23710: PPUSH
23711: CALL_OW 559
// end ;
23715: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23716: LD_EXP 37
23720: PUSH
23721: LD_EXP 63
23725: AND
23726: IFFALSE 23789
23728: GO 23730
23730: DISABLE
23731: LD_INT 0
23733: PPUSH
// begin p := 0 ;
23734: LD_ADDR_VAR 0 1
23738: PUSH
23739: LD_INT 0
23741: ST_TO_ADDR
// repeat game_speed := 1 ;
23742: LD_ADDR_OWVAR 65
23746: PUSH
23747: LD_INT 1
23749: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23750: LD_INT 35
23752: PPUSH
23753: CALL_OW 67
// p := p + 1 ;
23757: LD_ADDR_VAR 0 1
23761: PUSH
23762: LD_VAR 0 1
23766: PUSH
23767: LD_INT 1
23769: PLUS
23770: ST_TO_ADDR
// until p >= 60 ;
23771: LD_VAR 0 1
23775: PUSH
23776: LD_INT 60
23778: GREATEREQUAL
23779: IFFALSE 23742
// game_speed := 4 ;
23781: LD_ADDR_OWVAR 65
23785: PUSH
23786: LD_INT 4
23788: ST_TO_ADDR
// end ;
23789: PPOPN 1
23791: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23792: LD_EXP 37
23796: PUSH
23797: LD_EXP 64
23801: AND
23802: IFFALSE 23948
23804: GO 23806
23806: DISABLE
23807: LD_INT 0
23809: PPUSH
23810: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23811: LD_ADDR_VAR 0 1
23815: PUSH
23816: LD_INT 22
23818: PUSH
23819: LD_OWVAR 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: LD_INT 30
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 30
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PPUSH
23860: CALL_OW 69
23864: ST_TO_ADDR
// if not depot then
23865: LD_VAR 0 1
23869: NOT
23870: IFFALSE 23874
// exit ;
23872: GO 23948
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23874: LD_ADDR_VAR 0 2
23878: PUSH
23879: LD_VAR 0 1
23883: PUSH
23884: LD_INT 1
23886: PPUSH
23887: LD_VAR 0 1
23891: PPUSH
23892: CALL_OW 12
23896: ARRAY
23897: PPUSH
23898: CALL_OW 274
23902: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23903: LD_VAR 0 2
23907: PPUSH
23908: LD_INT 1
23910: PPUSH
23911: LD_INT 0
23913: PPUSH
23914: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23918: LD_VAR 0 2
23922: PPUSH
23923: LD_INT 2
23925: PPUSH
23926: LD_INT 0
23928: PPUSH
23929: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23933: LD_VAR 0 2
23937: PPUSH
23938: LD_INT 3
23940: PPUSH
23941: LD_INT 0
23943: PPUSH
23944: CALL_OW 277
// end ;
23948: PPOPN 2
23950: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23951: LD_EXP 37
23955: PUSH
23956: LD_EXP 65
23960: AND
23961: IFFALSE 24058
23963: GO 23965
23965: DISABLE
23966: LD_INT 0
23968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23969: LD_ADDR_VAR 0 1
23973: PUSH
23974: LD_INT 22
23976: PUSH
23977: LD_OWVAR 2
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 21
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 3
23998: PUSH
23999: LD_INT 23
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: LIST
24017: PPUSH
24018: CALL_OW 69
24022: ST_TO_ADDR
// if not tmp then
24023: LD_VAR 0 1
24027: NOT
24028: IFFALSE 24032
// exit ;
24030: GO 24058
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24032: LD_VAR 0 1
24036: PUSH
24037: LD_INT 1
24039: PPUSH
24040: LD_VAR 0 1
24044: PPUSH
24045: CALL_OW 12
24049: ARRAY
24050: PPUSH
24051: LD_INT 200
24053: PPUSH
24054: CALL_OW 234
// end ;
24058: PPOPN 1
24060: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24061: LD_EXP 37
24065: PUSH
24066: LD_EXP 66
24070: AND
24071: IFFALSE 24150
24073: GO 24075
24075: DISABLE
24076: LD_INT 0
24078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24079: LD_ADDR_VAR 0 1
24083: PUSH
24084: LD_INT 22
24086: PUSH
24087: LD_OWVAR 2
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 21
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PPUSH
24110: CALL_OW 69
24114: ST_TO_ADDR
// if not tmp then
24115: LD_VAR 0 1
24119: NOT
24120: IFFALSE 24124
// exit ;
24122: GO 24150
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24124: LD_VAR 0 1
24128: PUSH
24129: LD_INT 1
24131: PPUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 12
24141: ARRAY
24142: PPUSH
24143: LD_INT 60
24145: PPUSH
24146: CALL_OW 234
// end ;
24150: PPOPN 1
24152: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24153: LD_EXP 37
24157: PUSH
24158: LD_EXP 67
24162: AND
24163: IFFALSE 24262
24165: GO 24167
24167: DISABLE
24168: LD_INT 0
24170: PPUSH
24171: PPUSH
// begin enable ;
24172: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24173: LD_ADDR_VAR 0 1
24177: PUSH
24178: LD_INT 22
24180: PUSH
24181: LD_OWVAR 2
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 61
24192: PUSH
24193: EMPTY
24194: LIST
24195: PUSH
24196: LD_INT 33
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: PPUSH
24211: CALL_OW 69
24215: ST_TO_ADDR
// if not tmp then
24216: LD_VAR 0 1
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24262
// for i in tmp do
24225: LD_ADDR_VAR 0 2
24229: PUSH
24230: LD_VAR 0 1
24234: PUSH
24235: FOR_IN
24236: IFFALSE 24260
// if IsControledBy ( i ) then
24238: LD_VAR 0 2
24242: PPUSH
24243: CALL_OW 312
24247: IFFALSE 24258
// ComUnlink ( i ) ;
24249: LD_VAR 0 2
24253: PPUSH
24254: CALL_OW 136
24258: GO 24235
24260: POP
24261: POP
// end ;
24262: PPOPN 2
24264: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24265: LD_EXP 37
24269: PUSH
24270: LD_EXP 68
24274: AND
24275: IFFALSE 24415
24277: GO 24279
24279: DISABLE
24280: LD_INT 0
24282: PPUSH
24283: PPUSH
// begin ToLua ( displayPowell(); ) ;
24284: LD_STRING displayPowell();
24286: PPUSH
24287: CALL_OW 559
// uc_side := 0 ;
24291: LD_ADDR_OWVAR 20
24295: PUSH
24296: LD_INT 0
24298: ST_TO_ADDR
// uc_nation := 2 ;
24299: LD_ADDR_OWVAR 21
24303: PUSH
24304: LD_INT 2
24306: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24307: LD_ADDR_OWVAR 37
24311: PUSH
24312: LD_INT 14
24314: ST_TO_ADDR
// vc_engine := engine_siberite ;
24315: LD_ADDR_OWVAR 39
24319: PUSH
24320: LD_INT 3
24322: ST_TO_ADDR
// vc_control := control_apeman ;
24323: LD_ADDR_OWVAR 38
24327: PUSH
24328: LD_INT 5
24330: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24331: LD_ADDR_OWVAR 40
24335: PUSH
24336: LD_INT 29
24338: ST_TO_ADDR
// un := CreateVehicle ;
24339: LD_ADDR_VAR 0 2
24343: PUSH
24344: CALL_OW 45
24348: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24349: LD_VAR 0 2
24353: PPUSH
24354: LD_INT 1
24356: PPUSH
24357: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24361: LD_INT 35
24363: PPUSH
24364: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24368: LD_VAR 0 2
24372: PPUSH
24373: LD_INT 22
24375: PUSH
24376: LD_OWVAR 2
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PPUSH
24385: CALL_OW 69
24389: PPUSH
24390: LD_VAR 0 2
24394: PPUSH
24395: CALL_OW 74
24399: PPUSH
24400: CALL_OW 115
// until IsDead ( un ) ;
24404: LD_VAR 0 2
24408: PPUSH
24409: CALL_OW 301
24413: IFFALSE 24361
// end ;
24415: PPOPN 2
24417: END
// every 0 0$1 trigger StreamModeActive and sStu do
24418: LD_EXP 37
24422: PUSH
24423: LD_EXP 76
24427: AND
24428: IFFALSE 24444
24430: GO 24432
24432: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24433: LD_STRING displayStucuk();
24435: PPUSH
24436: CALL_OW 559
// ResetFog ;
24440: CALL_OW 335
// end ;
24444: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24445: LD_EXP 37
24449: PUSH
24450: LD_EXP 69
24454: AND
24455: IFFALSE 24596
24457: GO 24459
24459: DISABLE
24460: LD_INT 0
24462: PPUSH
24463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24464: LD_ADDR_VAR 0 2
24468: PUSH
24469: LD_INT 22
24471: PUSH
24472: LD_OWVAR 2
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 21
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: ST_TO_ADDR
// if not tmp then
24500: LD_VAR 0 2
24504: NOT
24505: IFFALSE 24509
// exit ;
24507: GO 24596
// un := tmp [ rand ( 1 , tmp ) ] ;
24509: LD_ADDR_VAR 0 1
24513: PUSH
24514: LD_VAR 0 2
24518: PUSH
24519: LD_INT 1
24521: PPUSH
24522: LD_VAR 0 2
24526: PPUSH
24527: CALL_OW 12
24531: ARRAY
24532: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24533: LD_VAR 0 1
24537: PPUSH
24538: LD_INT 0
24540: PPUSH
24541: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24545: LD_VAR 0 1
24549: PPUSH
24550: LD_OWVAR 3
24554: PUSH
24555: LD_VAR 0 1
24559: DIFF
24560: PPUSH
24561: LD_VAR 0 1
24565: PPUSH
24566: CALL_OW 74
24570: PPUSH
24571: CALL_OW 115
// wait ( 0 0$20 ) ;
24575: LD_INT 700
24577: PPUSH
24578: CALL_OW 67
// SetSide ( un , your_side ) ;
24582: LD_VAR 0 1
24586: PPUSH
24587: LD_OWVAR 2
24591: PPUSH
24592: CALL_OW 235
// end ;
24596: PPOPN 2
24598: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24599: LD_EXP 37
24603: PUSH
24604: LD_EXP 70
24608: AND
24609: IFFALSE 24715
24611: GO 24613
24613: DISABLE
24614: LD_INT 0
24616: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24617: LD_ADDR_VAR 0 1
24621: PUSH
24622: LD_INT 22
24624: PUSH
24625: LD_OWVAR 2
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 30
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 30
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PPUSH
24666: CALL_OW 69
24670: ST_TO_ADDR
// if not depot then
24671: LD_VAR 0 1
24675: NOT
24676: IFFALSE 24680
// exit ;
24678: GO 24715
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24680: LD_VAR 0 1
24684: PUSH
24685: LD_INT 1
24687: ARRAY
24688: PPUSH
24689: CALL_OW 250
24693: PPUSH
24694: LD_VAR 0 1
24698: PUSH
24699: LD_INT 1
24701: ARRAY
24702: PPUSH
24703: CALL_OW 251
24707: PPUSH
24708: LD_INT 70
24710: PPUSH
24711: CALL_OW 495
// end ;
24715: PPOPN 1
24717: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24718: LD_EXP 37
24722: PUSH
24723: LD_EXP 71
24727: AND
24728: IFFALSE 24939
24730: GO 24732
24732: DISABLE
24733: LD_INT 0
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
24739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24740: LD_ADDR_VAR 0 5
24744: PUSH
24745: LD_INT 22
24747: PUSH
24748: LD_OWVAR 2
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 21
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PPUSH
24771: CALL_OW 69
24775: ST_TO_ADDR
// if not tmp then
24776: LD_VAR 0 5
24780: NOT
24781: IFFALSE 24785
// exit ;
24783: GO 24939
// for i in tmp do
24785: LD_ADDR_VAR 0 1
24789: PUSH
24790: LD_VAR 0 5
24794: PUSH
24795: FOR_IN
24796: IFFALSE 24937
// begin d := rand ( 0 , 5 ) ;
24798: LD_ADDR_VAR 0 4
24802: PUSH
24803: LD_INT 0
24805: PPUSH
24806: LD_INT 5
24808: PPUSH
24809: CALL_OW 12
24813: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24814: LD_ADDR_VAR 0 2
24818: PUSH
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL_OW 250
24828: PPUSH
24829: LD_VAR 0 4
24833: PPUSH
24834: LD_INT 3
24836: PPUSH
24837: LD_INT 12
24839: PPUSH
24840: CALL_OW 12
24844: PPUSH
24845: CALL_OW 272
24849: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: LD_VAR 0 1
24859: PPUSH
24860: CALL_OW 251
24864: PPUSH
24865: LD_VAR 0 4
24869: PPUSH
24870: LD_INT 3
24872: PPUSH
24873: LD_INT 12
24875: PPUSH
24876: CALL_OW 12
24880: PPUSH
24881: CALL_OW 273
24885: ST_TO_ADDR
// if ValidHex ( x , y ) then
24886: LD_VAR 0 2
24890: PPUSH
24891: LD_VAR 0 3
24895: PPUSH
24896: CALL_OW 488
24900: IFFALSE 24935
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24902: LD_VAR 0 1
24906: PPUSH
24907: LD_VAR 0 2
24911: PPUSH
24912: LD_VAR 0 3
24916: PPUSH
24917: LD_INT 3
24919: PPUSH
24920: LD_INT 6
24922: PPUSH
24923: CALL_OW 12
24927: PPUSH
24928: LD_INT 1
24930: PPUSH
24931: CALL_OW 483
// end ;
24935: GO 24795
24937: POP
24938: POP
// end ;
24939: PPOPN 5
24941: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24942: LD_EXP 37
24946: PUSH
24947: LD_EXP 72
24951: AND
24952: IFFALSE 25046
24954: GO 24956
24956: DISABLE
24957: LD_INT 0
24959: PPUSH
24960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24961: LD_ADDR_VAR 0 2
24965: PUSH
24966: LD_INT 22
24968: PUSH
24969: LD_OWVAR 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 32
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 21
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: PPUSH
25003: CALL_OW 69
25007: ST_TO_ADDR
// if not tmp then
25008: LD_VAR 0 2
25012: NOT
25013: IFFALSE 25017
// exit ;
25015: GO 25046
// for i in tmp do
25017: LD_ADDR_VAR 0 1
25021: PUSH
25022: LD_VAR 0 2
25026: PUSH
25027: FOR_IN
25028: IFFALSE 25044
// SetFuel ( i , 0 ) ;
25030: LD_VAR 0 1
25034: PPUSH
25035: LD_INT 0
25037: PPUSH
25038: CALL_OW 240
25042: GO 25027
25044: POP
25045: POP
// end ;
25046: PPOPN 2
25048: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25049: LD_EXP 37
25053: PUSH
25054: LD_EXP 73
25058: AND
25059: IFFALSE 25125
25061: GO 25063
25063: DISABLE
25064: LD_INT 0
25066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25067: LD_ADDR_VAR 0 1
25071: PUSH
25072: LD_INT 22
25074: PUSH
25075: LD_OWVAR 2
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 30
25086: PUSH
25087: LD_INT 29
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PPUSH
25098: CALL_OW 69
25102: ST_TO_ADDR
// if not tmp then
25103: LD_VAR 0 1
25107: NOT
25108: IFFALSE 25112
// exit ;
25110: GO 25125
// DestroyUnit ( tmp [ 1 ] ) ;
25112: LD_VAR 0 1
25116: PUSH
25117: LD_INT 1
25119: ARRAY
25120: PPUSH
25121: CALL_OW 65
// end ;
25125: PPOPN 1
25127: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25128: LD_EXP 37
25132: PUSH
25133: LD_EXP 75
25137: AND
25138: IFFALSE 25267
25140: GO 25142
25142: DISABLE
25143: LD_INT 0
25145: PPUSH
// begin uc_side := 0 ;
25146: LD_ADDR_OWVAR 20
25150: PUSH
25151: LD_INT 0
25153: ST_TO_ADDR
// uc_nation := nation_arabian ;
25154: LD_ADDR_OWVAR 21
25158: PUSH
25159: LD_INT 2
25161: ST_TO_ADDR
// hc_gallery :=  ;
25162: LD_ADDR_OWVAR 33
25166: PUSH
25167: LD_STRING 
25169: ST_TO_ADDR
// hc_name :=  ;
25170: LD_ADDR_OWVAR 26
25174: PUSH
25175: LD_STRING 
25177: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25178: LD_INT 1
25180: PPUSH
25181: LD_INT 11
25183: PPUSH
25184: LD_INT 10
25186: PPUSH
25187: CALL_OW 380
// un := CreateHuman ;
25191: LD_ADDR_VAR 0 1
25195: PUSH
25196: CALL_OW 44
25200: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25201: LD_VAR 0 1
25205: PPUSH
25206: LD_INT 1
25208: PPUSH
25209: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25213: LD_INT 35
25215: PPUSH
25216: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25220: LD_VAR 0 1
25224: PPUSH
25225: LD_INT 22
25227: PUSH
25228: LD_OWVAR 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PPUSH
25237: CALL_OW 69
25241: PPUSH
25242: LD_VAR 0 1
25246: PPUSH
25247: CALL_OW 74
25251: PPUSH
25252: CALL_OW 115
// until IsDead ( un ) ;
25256: LD_VAR 0 1
25260: PPUSH
25261: CALL_OW 301
25265: IFFALSE 25213
// end ;
25267: PPOPN 1
25269: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25270: LD_EXP 37
25274: PUSH
25275: LD_EXP 77
25279: AND
25280: IFFALSE 25292
25282: GO 25284
25284: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25285: LD_STRING earthquake(getX(game), 0, 32)
25287: PPUSH
25288: CALL_OW 559
25292: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25293: LD_EXP 37
25297: PUSH
25298: LD_EXP 78
25302: AND
25303: IFFALSE 25394
25305: GO 25307
25307: DISABLE
25308: LD_INT 0
25310: PPUSH
// begin enable ;
25311: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25312: LD_ADDR_VAR 0 1
25316: PUSH
25317: LD_INT 22
25319: PUSH
25320: LD_OWVAR 2
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 21
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 33
25341: PUSH
25342: LD_INT 3
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 69
25358: ST_TO_ADDR
// if not tmp then
25359: LD_VAR 0 1
25363: NOT
25364: IFFALSE 25368
// exit ;
25366: GO 25394
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25368: LD_VAR 0 1
25372: PUSH
25373: LD_INT 1
25375: PPUSH
25376: LD_VAR 0 1
25380: PPUSH
25381: CALL_OW 12
25385: ARRAY
25386: PPUSH
25387: LD_INT 1
25389: PPUSH
25390: CALL_OW 234
// end ;
25394: PPOPN 1
25396: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25397: LD_EXP 37
25401: PUSH
25402: LD_EXP 79
25406: AND
25407: IFFALSE 25548
25409: GO 25411
25411: DISABLE
25412: LD_INT 0
25414: PPUSH
25415: PPUSH
25416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25417: LD_ADDR_VAR 0 3
25421: PUSH
25422: LD_INT 22
25424: PUSH
25425: LD_OWVAR 2
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 25
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PPUSH
25448: CALL_OW 69
25452: ST_TO_ADDR
// if not tmp then
25453: LD_VAR 0 3
25457: NOT
25458: IFFALSE 25462
// exit ;
25460: GO 25548
// un := tmp [ rand ( 1 , tmp ) ] ;
25462: LD_ADDR_VAR 0 2
25466: PUSH
25467: LD_VAR 0 3
25471: PUSH
25472: LD_INT 1
25474: PPUSH
25475: LD_VAR 0 3
25479: PPUSH
25480: CALL_OW 12
25484: ARRAY
25485: ST_TO_ADDR
// if Crawls ( un ) then
25486: LD_VAR 0 2
25490: PPUSH
25491: CALL_OW 318
25495: IFFALSE 25506
// ComWalk ( un ) ;
25497: LD_VAR 0 2
25501: PPUSH
25502: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25506: LD_VAR 0 2
25510: PPUSH
25511: LD_INT 9
25513: PPUSH
25514: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25518: LD_INT 28
25520: PPUSH
25521: LD_OWVAR 2
25525: PPUSH
25526: LD_INT 2
25528: PPUSH
25529: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25533: LD_INT 29
25535: PPUSH
25536: LD_OWVAR 2
25540: PPUSH
25541: LD_INT 2
25543: PPUSH
25544: CALL_OW 322
// end ;
25548: PPOPN 3
25550: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25551: LD_EXP 37
25555: PUSH
25556: LD_EXP 80
25560: AND
25561: IFFALSE 25672
25563: GO 25565
25565: DISABLE
25566: LD_INT 0
25568: PPUSH
25569: PPUSH
25570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25571: LD_ADDR_VAR 0 3
25575: PUSH
25576: LD_INT 22
25578: PUSH
25579: LD_OWVAR 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 25
25590: PUSH
25591: LD_INT 1
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PPUSH
25602: CALL_OW 69
25606: ST_TO_ADDR
// if not tmp then
25607: LD_VAR 0 3
25611: NOT
25612: IFFALSE 25616
// exit ;
25614: GO 25672
// un := tmp [ rand ( 1 , tmp ) ] ;
25616: LD_ADDR_VAR 0 2
25620: PUSH
25621: LD_VAR 0 3
25625: PUSH
25626: LD_INT 1
25628: PPUSH
25629: LD_VAR 0 3
25633: PPUSH
25634: CALL_OW 12
25638: ARRAY
25639: ST_TO_ADDR
// if Crawls ( un ) then
25640: LD_VAR 0 2
25644: PPUSH
25645: CALL_OW 318
25649: IFFALSE 25660
// ComWalk ( un ) ;
25651: LD_VAR 0 2
25655: PPUSH
25656: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25660: LD_VAR 0 2
25664: PPUSH
25665: LD_INT 8
25667: PPUSH
25668: CALL_OW 336
// end ;
25672: PPOPN 3
25674: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25675: LD_EXP 37
25679: PUSH
25680: LD_EXP 81
25684: AND
25685: IFFALSE 25829
25687: GO 25689
25689: DISABLE
25690: LD_INT 0
25692: PPUSH
25693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25694: LD_ADDR_VAR 0 2
25698: PUSH
25699: LD_INT 22
25701: PUSH
25702: LD_OWVAR 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 21
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 2
25723: PUSH
25724: LD_INT 34
25726: PUSH
25727: LD_INT 12
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 34
25736: PUSH
25737: LD_INT 51
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 34
25746: PUSH
25747: LD_INT 32
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: PPUSH
25765: CALL_OW 69
25769: ST_TO_ADDR
// if not tmp then
25770: LD_VAR 0 2
25774: NOT
25775: IFFALSE 25779
// exit ;
25777: GO 25829
// for i in tmp do
25779: LD_ADDR_VAR 0 1
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: FOR_IN
25790: IFFALSE 25827
// if GetCargo ( i , mat_artifact ) = 0 then
25792: LD_VAR 0 1
25796: PPUSH
25797: LD_INT 4
25799: PPUSH
25800: CALL_OW 289
25804: PUSH
25805: LD_INT 0
25807: EQUAL
25808: IFFALSE 25825
// SetCargo ( i , mat_siberit , 100 ) ;
25810: LD_VAR 0 1
25814: PPUSH
25815: LD_INT 3
25817: PPUSH
25818: LD_INT 100
25820: PPUSH
25821: CALL_OW 290
25825: GO 25789
25827: POP
25828: POP
// end ;
25829: PPOPN 2
25831: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25832: LD_EXP 37
25836: PUSH
25837: LD_EXP 82
25841: AND
25842: IFFALSE 26025
25844: GO 25846
25846: DISABLE
25847: LD_INT 0
25849: PPUSH
25850: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25851: LD_ADDR_VAR 0 2
25855: PUSH
25856: LD_INT 22
25858: PUSH
25859: LD_OWVAR 2
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL_OW 69
25872: ST_TO_ADDR
// if not tmp then
25873: LD_VAR 0 2
25877: NOT
25878: IFFALSE 25882
// exit ;
25880: GO 26025
// for i := 1 to 2 do
25882: LD_ADDR_VAR 0 1
25886: PUSH
25887: DOUBLE
25888: LD_INT 1
25890: DEC
25891: ST_TO_ADDR
25892: LD_INT 2
25894: PUSH
25895: FOR_TO
25896: IFFALSE 26023
// begin uc_side := your_side ;
25898: LD_ADDR_OWVAR 20
25902: PUSH
25903: LD_OWVAR 2
25907: ST_TO_ADDR
// uc_nation := nation_american ;
25908: LD_ADDR_OWVAR 21
25912: PUSH
25913: LD_INT 1
25915: ST_TO_ADDR
// vc_chassis := us_morphling ;
25916: LD_ADDR_OWVAR 37
25920: PUSH
25921: LD_INT 5
25923: ST_TO_ADDR
// vc_engine := engine_siberite ;
25924: LD_ADDR_OWVAR 39
25928: PUSH
25929: LD_INT 3
25931: ST_TO_ADDR
// vc_control := control_computer ;
25932: LD_ADDR_OWVAR 38
25936: PUSH
25937: LD_INT 3
25939: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25940: LD_ADDR_OWVAR 40
25944: PUSH
25945: LD_INT 10
25947: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25948: LD_VAR 0 2
25952: PUSH
25953: LD_INT 1
25955: ARRAY
25956: PPUSH
25957: CALL_OW 310
25961: NOT
25962: IFFALSE 26009
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25964: CALL_OW 45
25968: PPUSH
25969: LD_VAR 0 2
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PPUSH
25978: CALL_OW 250
25982: PPUSH
25983: LD_VAR 0 2
25987: PUSH
25988: LD_INT 1
25990: ARRAY
25991: PPUSH
25992: CALL_OW 251
25996: PPUSH
25997: LD_INT 12
25999: PPUSH
26000: LD_INT 1
26002: PPUSH
26003: CALL_OW 50
26007: GO 26021
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26009: CALL_OW 45
26013: PPUSH
26014: LD_INT 1
26016: PPUSH
26017: CALL_OW 51
// end ;
26021: GO 25895
26023: POP
26024: POP
// end ;
26025: PPOPN 2
26027: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26028: LD_EXP 37
26032: PUSH
26033: LD_EXP 83
26037: AND
26038: IFFALSE 26260
26040: GO 26042
26042: DISABLE
26043: LD_INT 0
26045: PPUSH
26046: PPUSH
26047: PPUSH
26048: PPUSH
26049: PPUSH
26050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26051: LD_ADDR_VAR 0 6
26055: PUSH
26056: LD_INT 22
26058: PUSH
26059: LD_OWVAR 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 21
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 3
26080: PUSH
26081: LD_INT 23
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: LIST
26099: PPUSH
26100: CALL_OW 69
26104: ST_TO_ADDR
// if not tmp then
26105: LD_VAR 0 6
26109: NOT
26110: IFFALSE 26114
// exit ;
26112: GO 26260
// s1 := rand ( 1 , 4 ) ;
26114: LD_ADDR_VAR 0 2
26118: PUSH
26119: LD_INT 1
26121: PPUSH
26122: LD_INT 4
26124: PPUSH
26125: CALL_OW 12
26129: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26130: LD_ADDR_VAR 0 4
26134: PUSH
26135: LD_VAR 0 6
26139: PUSH
26140: LD_INT 1
26142: ARRAY
26143: PPUSH
26144: LD_VAR 0 2
26148: PPUSH
26149: CALL_OW 259
26153: ST_TO_ADDR
// if s1 = 1 then
26154: LD_VAR 0 2
26158: PUSH
26159: LD_INT 1
26161: EQUAL
26162: IFFALSE 26182
// s2 := rand ( 2 , 4 ) else
26164: LD_ADDR_VAR 0 3
26168: PUSH
26169: LD_INT 2
26171: PPUSH
26172: LD_INT 4
26174: PPUSH
26175: CALL_OW 12
26179: ST_TO_ADDR
26180: GO 26190
// s2 := 1 ;
26182: LD_ADDR_VAR 0 3
26186: PUSH
26187: LD_INT 1
26189: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26190: LD_ADDR_VAR 0 5
26194: PUSH
26195: LD_VAR 0 6
26199: PUSH
26200: LD_INT 1
26202: ARRAY
26203: PPUSH
26204: LD_VAR 0 3
26208: PPUSH
26209: CALL_OW 259
26213: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26214: LD_VAR 0 6
26218: PUSH
26219: LD_INT 1
26221: ARRAY
26222: PPUSH
26223: LD_VAR 0 2
26227: PPUSH
26228: LD_VAR 0 5
26232: PPUSH
26233: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26237: LD_VAR 0 6
26241: PUSH
26242: LD_INT 1
26244: ARRAY
26245: PPUSH
26246: LD_VAR 0 3
26250: PPUSH
26251: LD_VAR 0 4
26255: PPUSH
26256: CALL_OW 237
// end ;
26260: PPOPN 6
26262: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26263: LD_EXP 37
26267: PUSH
26268: LD_EXP 84
26272: AND
26273: IFFALSE 26352
26275: GO 26277
26277: DISABLE
26278: LD_INT 0
26280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26281: LD_ADDR_VAR 0 1
26285: PUSH
26286: LD_INT 22
26288: PUSH
26289: LD_OWVAR 2
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 30
26300: PUSH
26301: LD_INT 3
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PPUSH
26312: CALL_OW 69
26316: ST_TO_ADDR
// if not tmp then
26317: LD_VAR 0 1
26321: NOT
26322: IFFALSE 26326
// exit ;
26324: GO 26352
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26326: LD_VAR 0 1
26330: PUSH
26331: LD_INT 1
26333: PPUSH
26334: LD_VAR 0 1
26338: PPUSH
26339: CALL_OW 12
26343: ARRAY
26344: PPUSH
26345: LD_INT 1
26347: PPUSH
26348: CALL_OW 234
// end ;
26352: PPOPN 1
26354: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26355: LD_EXP 37
26359: PUSH
26360: LD_EXP 85
26364: AND
26365: IFFALSE 26477
26367: GO 26369
26369: DISABLE
26370: LD_INT 0
26372: PPUSH
26373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26374: LD_ADDR_VAR 0 2
26378: PUSH
26379: LD_INT 22
26381: PUSH
26382: LD_OWVAR 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: LD_INT 30
26396: PUSH
26397: LD_INT 27
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 30
26406: PUSH
26407: LD_INT 26
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 30
26416: PUSH
26417: LD_INT 28
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PPUSH
26434: CALL_OW 69
26438: ST_TO_ADDR
// if not tmp then
26439: LD_VAR 0 2
26443: NOT
26444: IFFALSE 26448
// exit ;
26446: GO 26477
// for i in tmp do
26448: LD_ADDR_VAR 0 1
26452: PUSH
26453: LD_VAR 0 2
26457: PUSH
26458: FOR_IN
26459: IFFALSE 26475
// SetLives ( i , 1 ) ;
26461: LD_VAR 0 1
26465: PPUSH
26466: LD_INT 1
26468: PPUSH
26469: CALL_OW 234
26473: GO 26458
26475: POP
26476: POP
// end ;
26477: PPOPN 2
26479: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26480: LD_EXP 37
26484: PUSH
26485: LD_EXP 86
26489: AND
26490: IFFALSE 26777
26492: GO 26494
26494: DISABLE
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
26499: PPUSH
// begin i := rand ( 1 , 7 ) ;
26500: LD_ADDR_VAR 0 1
26504: PUSH
26505: LD_INT 1
26507: PPUSH
26508: LD_INT 7
26510: PPUSH
26511: CALL_OW 12
26515: ST_TO_ADDR
// case i of 1 :
26516: LD_VAR 0 1
26520: PUSH
26521: LD_INT 1
26523: DOUBLE
26524: EQUAL
26525: IFTRUE 26529
26527: GO 26539
26529: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26530: LD_STRING earthquake(getX(game), 0, 32)
26532: PPUSH
26533: CALL_OW 559
26537: GO 26777
26539: LD_INT 2
26541: DOUBLE
26542: EQUAL
26543: IFTRUE 26547
26545: GO 26561
26547: POP
// begin ToLua ( displayStucuk(); ) ;
26548: LD_STRING displayStucuk();
26550: PPUSH
26551: CALL_OW 559
// ResetFog ;
26555: CALL_OW 335
// end ; 3 :
26559: GO 26777
26561: LD_INT 3
26563: DOUBLE
26564: EQUAL
26565: IFTRUE 26569
26567: GO 26673
26569: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26570: LD_ADDR_VAR 0 2
26574: PUSH
26575: LD_INT 22
26577: PUSH
26578: LD_OWVAR 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 25
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PPUSH
26601: CALL_OW 69
26605: ST_TO_ADDR
// if not tmp then
26606: LD_VAR 0 2
26610: NOT
26611: IFFALSE 26615
// exit ;
26613: GO 26777
// un := tmp [ rand ( 1 , tmp ) ] ;
26615: LD_ADDR_VAR 0 3
26619: PUSH
26620: LD_VAR 0 2
26624: PUSH
26625: LD_INT 1
26627: PPUSH
26628: LD_VAR 0 2
26632: PPUSH
26633: CALL_OW 12
26637: ARRAY
26638: ST_TO_ADDR
// if Crawls ( un ) then
26639: LD_VAR 0 3
26643: PPUSH
26644: CALL_OW 318
26648: IFFALSE 26659
// ComWalk ( un ) ;
26650: LD_VAR 0 3
26654: PPUSH
26655: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26659: LD_VAR 0 3
26663: PPUSH
26664: LD_INT 8
26666: PPUSH
26667: CALL_OW 336
// end ; 4 :
26671: GO 26777
26673: LD_INT 4
26675: DOUBLE
26676: EQUAL
26677: IFTRUE 26681
26679: GO 26755
26681: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26682: LD_ADDR_VAR 0 2
26686: PUSH
26687: LD_INT 22
26689: PUSH
26690: LD_OWVAR 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 30
26701: PUSH
26702: LD_INT 29
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PPUSH
26713: CALL_OW 69
26717: ST_TO_ADDR
// if not tmp then
26718: LD_VAR 0 2
26722: NOT
26723: IFFALSE 26727
// exit ;
26725: GO 26777
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26727: LD_VAR 0 2
26731: PUSH
26732: LD_INT 1
26734: ARRAY
26735: PPUSH
26736: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26740: LD_VAR 0 2
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PPUSH
26749: CALL_OW 65
// end ; 5 .. 7 :
26753: GO 26777
26755: LD_INT 5
26757: DOUBLE
26758: GREATEREQUAL
26759: IFFALSE 26767
26761: LD_INT 7
26763: DOUBLE
26764: LESSEQUAL
26765: IFTRUE 26769
26767: GO 26776
26769: POP
// StreamSibBomb ; end ;
26770: CALL 23014 0 0
26774: GO 26777
26776: POP
// end ;
26777: PPOPN 3
26779: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26780: LD_EXP 37
26784: PUSH
26785: LD_EXP 87
26789: AND
26790: IFFALSE 26946
26792: GO 26794
26794: DISABLE
26795: LD_INT 0
26797: PPUSH
26798: PPUSH
26799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26800: LD_ADDR_VAR 0 2
26804: PUSH
26805: LD_INT 81
26807: PUSH
26808: LD_OWVAR 2
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 2
26819: PUSH
26820: LD_INT 21
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 21
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PPUSH
26849: CALL_OW 69
26853: ST_TO_ADDR
// if not tmp then
26854: LD_VAR 0 2
26858: NOT
26859: IFFALSE 26863
// exit ;
26861: GO 26946
// p := 0 ;
26863: LD_ADDR_VAR 0 3
26867: PUSH
26868: LD_INT 0
26870: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26871: LD_INT 35
26873: PPUSH
26874: CALL_OW 67
// p := p + 1 ;
26878: LD_ADDR_VAR 0 3
26882: PUSH
26883: LD_VAR 0 3
26887: PUSH
26888: LD_INT 1
26890: PLUS
26891: ST_TO_ADDR
// for i in tmp do
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_VAR 0 2
26901: PUSH
26902: FOR_IN
26903: IFFALSE 26934
// if GetLives ( i ) < 1000 then
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 256
26914: PUSH
26915: LD_INT 1000
26917: LESS
26918: IFFALSE 26932
// SetLives ( i , 1000 ) ;
26920: LD_VAR 0 1
26924: PPUSH
26925: LD_INT 1000
26927: PPUSH
26928: CALL_OW 234
26932: GO 26902
26934: POP
26935: POP
// until p > 20 ;
26936: LD_VAR 0 3
26940: PUSH
26941: LD_INT 20
26943: GREATER
26944: IFFALSE 26871
// end ;
26946: PPOPN 3
26948: END
// every 0 0$1 trigger StreamModeActive and sTime do
26949: LD_EXP 37
26953: PUSH
26954: LD_EXP 88
26958: AND
26959: IFFALSE 26994
26961: GO 26963
26963: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26964: LD_INT 28
26966: PPUSH
26967: LD_OWVAR 2
26971: PPUSH
26972: LD_INT 2
26974: PPUSH
26975: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26979: LD_INT 30
26981: PPUSH
26982: LD_OWVAR 2
26986: PPUSH
26987: LD_INT 2
26989: PPUSH
26990: CALL_OW 322
// end ;
26994: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26995: LD_EXP 37
26999: PUSH
27000: LD_EXP 89
27004: AND
27005: IFFALSE 27126
27007: GO 27009
27009: DISABLE
27010: LD_INT 0
27012: PPUSH
27013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27014: LD_ADDR_VAR 0 2
27018: PUSH
27019: LD_INT 22
27021: PUSH
27022: LD_OWVAR 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 21
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 3
27043: PUSH
27044: LD_INT 23
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: PPUSH
27063: CALL_OW 69
27067: ST_TO_ADDR
// if not tmp then
27068: LD_VAR 0 2
27072: NOT
27073: IFFALSE 27077
// exit ;
27075: GO 27126
// for i in tmp do
27077: LD_ADDR_VAR 0 1
27081: PUSH
27082: LD_VAR 0 2
27086: PUSH
27087: FOR_IN
27088: IFFALSE 27124
// begin if Crawls ( i ) then
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 318
27099: IFFALSE 27110
// ComWalk ( i ) ;
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 138
// SetClass ( i , 2 ) ;
27110: LD_VAR 0 1
27114: PPUSH
27115: LD_INT 2
27117: PPUSH
27118: CALL_OW 336
// end ;
27122: GO 27087
27124: POP
27125: POP
// end ;
27126: PPOPN 2
27128: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27129: LD_EXP 37
27133: PUSH
27134: LD_EXP 90
27138: AND
27139: IFFALSE 27427
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
27148: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27149: LD_OWVAR 2
27153: PPUSH
27154: LD_INT 9
27156: PPUSH
27157: LD_INT 1
27159: PPUSH
27160: LD_INT 1
27162: PPUSH
27163: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27167: LD_INT 9
27169: PPUSH
27170: LD_OWVAR 2
27174: PPUSH
27175: CALL_OW 343
// uc_side := 9 ;
27179: LD_ADDR_OWVAR 20
27183: PUSH
27184: LD_INT 9
27186: ST_TO_ADDR
// uc_nation := 2 ;
27187: LD_ADDR_OWVAR 21
27191: PUSH
27192: LD_INT 2
27194: ST_TO_ADDR
// hc_name := Dark Warrior ;
27195: LD_ADDR_OWVAR 26
27199: PUSH
27200: LD_STRING Dark Warrior
27202: ST_TO_ADDR
// hc_gallery :=  ;
27203: LD_ADDR_OWVAR 33
27207: PUSH
27208: LD_STRING 
27210: ST_TO_ADDR
// hc_noskilllimit := true ;
27211: LD_ADDR_OWVAR 76
27215: PUSH
27216: LD_INT 1
27218: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27219: LD_ADDR_OWVAR 31
27223: PUSH
27224: LD_INT 30
27226: PUSH
27227: LD_INT 30
27229: PUSH
27230: LD_INT 30
27232: PUSH
27233: LD_INT 30
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: ST_TO_ADDR
// un := CreateHuman ;
27242: LD_ADDR_VAR 0 3
27246: PUSH
27247: CALL_OW 44
27251: ST_TO_ADDR
// hc_noskilllimit := false ;
27252: LD_ADDR_OWVAR 76
27256: PUSH
27257: LD_INT 0
27259: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27260: LD_VAR 0 3
27264: PPUSH
27265: LD_INT 1
27267: PPUSH
27268: CALL_OW 51
// ToLua ( playRanger() ) ;
27272: LD_STRING playRanger()
27274: PPUSH
27275: CALL_OW 559
// p := 0 ;
27279: LD_ADDR_VAR 0 2
27283: PUSH
27284: LD_INT 0
27286: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27287: LD_INT 35
27289: PPUSH
27290: CALL_OW 67
// p := p + 1 ;
27294: LD_ADDR_VAR 0 2
27298: PUSH
27299: LD_VAR 0 2
27303: PUSH
27304: LD_INT 1
27306: PLUS
27307: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27308: LD_VAR 0 3
27312: PPUSH
27313: CALL_OW 256
27317: PUSH
27318: LD_INT 1000
27320: LESS
27321: IFFALSE 27335
// SetLives ( un , 1000 ) ;
27323: LD_VAR 0 3
27327: PPUSH
27328: LD_INT 1000
27330: PPUSH
27331: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27335: LD_VAR 0 3
27339: PPUSH
27340: LD_INT 81
27342: PUSH
27343: LD_OWVAR 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 91
27354: PUSH
27355: LD_VAR 0 3
27359: PUSH
27360: LD_INT 30
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PPUSH
27372: CALL_OW 69
27376: PPUSH
27377: LD_VAR 0 3
27381: PPUSH
27382: CALL_OW 74
27386: PPUSH
27387: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27391: LD_VAR 0 2
27395: PUSH
27396: LD_INT 80
27398: GREATER
27399: PUSH
27400: LD_VAR 0 3
27404: PPUSH
27405: CALL_OW 301
27409: OR
27410: IFFALSE 27287
// if un then
27412: LD_VAR 0 3
27416: IFFALSE 27427
// RemoveUnit ( un ) ;
27418: LD_VAR 0 3
27422: PPUSH
27423: CALL_OW 64
// end ;
27427: PPOPN 3
27429: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27430: LD_EXP 91
27434: IFFALSE 27550
27436: GO 27438
27438: DISABLE
27439: LD_INT 0
27441: PPUSH
27442: PPUSH
27443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27444: LD_ADDR_VAR 0 2
27448: PUSH
27449: LD_INT 81
27451: PUSH
27452: LD_OWVAR 2
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 21
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL_OW 69
27479: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27480: LD_STRING playComputer()
27482: PPUSH
27483: CALL_OW 559
// if not tmp then
27487: LD_VAR 0 2
27491: NOT
27492: IFFALSE 27496
// exit ;
27494: GO 27550
// for i in tmp do
27496: LD_ADDR_VAR 0 1
27500: PUSH
27501: LD_VAR 0 2
27505: PUSH
27506: FOR_IN
27507: IFFALSE 27548
// for j := 1 to 4 do
27509: LD_ADDR_VAR 0 3
27513: PUSH
27514: DOUBLE
27515: LD_INT 1
27517: DEC
27518: ST_TO_ADDR
27519: LD_INT 4
27521: PUSH
27522: FOR_TO
27523: IFFALSE 27544
// SetSkill ( i , j , 10 ) ;
27525: LD_VAR 0 1
27529: PPUSH
27530: LD_VAR 0 3
27534: PPUSH
27535: LD_INT 10
27537: PPUSH
27538: CALL_OW 237
27542: GO 27522
27544: POP
27545: POP
27546: GO 27506
27548: POP
27549: POP
// end ;
27550: PPOPN 3
27552: END
// every 0 0$1 trigger s30 do var i , tmp ;
27553: LD_EXP 92
27557: IFFALSE 27626
27559: GO 27561
27561: DISABLE
27562: LD_INT 0
27564: PPUSH
27565: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27566: LD_ADDR_VAR 0 2
27570: PUSH
27571: LD_INT 22
27573: PUSH
27574: LD_OWVAR 2
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 69
27587: ST_TO_ADDR
// if not tmp then
27588: LD_VAR 0 2
27592: NOT
27593: IFFALSE 27597
// exit ;
27595: GO 27626
// for i in tmp do
27597: LD_ADDR_VAR 0 1
27601: PUSH
27602: LD_VAR 0 2
27606: PUSH
27607: FOR_IN
27608: IFFALSE 27624
// SetLives ( i , 300 ) ;
27610: LD_VAR 0 1
27614: PPUSH
27615: LD_INT 300
27617: PPUSH
27618: CALL_OW 234
27622: GO 27607
27624: POP
27625: POP
// end ;
27626: PPOPN 2
27628: END
// every 0 0$1 trigger s60 do var i , tmp ;
27629: LD_EXP 93
27633: IFFALSE 27702
27635: GO 27637
27637: DISABLE
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27642: LD_ADDR_VAR 0 2
27646: PUSH
27647: LD_INT 22
27649: PUSH
27650: LD_OWVAR 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PPUSH
27659: CALL_OW 69
27663: ST_TO_ADDR
// if not tmp then
27664: LD_VAR 0 2
27668: NOT
27669: IFFALSE 27673
// exit ;
27671: GO 27702
// for i in tmp do
27673: LD_ADDR_VAR 0 1
27677: PUSH
27678: LD_VAR 0 2
27682: PUSH
27683: FOR_IN
27684: IFFALSE 27700
// SetLives ( i , 600 ) ;
27686: LD_VAR 0 1
27690: PPUSH
27691: LD_INT 600
27693: PPUSH
27694: CALL_OW 234
27698: GO 27683
27700: POP
27701: POP
// end ;
27702: PPOPN 2
27704: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27705: LD_INT 0
27707: PPUSH
// case cmd of 301 :
27708: LD_VAR 0 1
27712: PUSH
27713: LD_INT 301
27715: DOUBLE
27716: EQUAL
27717: IFTRUE 27721
27719: GO 27753
27721: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27722: LD_VAR 0 6
27726: PPUSH
27727: LD_VAR 0 7
27731: PPUSH
27732: LD_VAR 0 8
27736: PPUSH
27737: LD_VAR 0 4
27741: PPUSH
27742: LD_VAR 0 5
27746: PPUSH
27747: CALL 28954 0 5
27751: GO 27874
27753: LD_INT 302
27755: DOUBLE
27756: EQUAL
27757: IFTRUE 27761
27759: GO 27798
27761: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27762: LD_VAR 0 6
27766: PPUSH
27767: LD_VAR 0 7
27771: PPUSH
27772: LD_VAR 0 8
27776: PPUSH
27777: LD_VAR 0 9
27781: PPUSH
27782: LD_VAR 0 4
27786: PPUSH
27787: LD_VAR 0 5
27791: PPUSH
27792: CALL 29045 0 6
27796: GO 27874
27798: LD_INT 303
27800: DOUBLE
27801: EQUAL
27802: IFTRUE 27806
27804: GO 27843
27806: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27807: LD_VAR 0 6
27811: PPUSH
27812: LD_VAR 0 7
27816: PPUSH
27817: LD_VAR 0 8
27821: PPUSH
27822: LD_VAR 0 9
27826: PPUSH
27827: LD_VAR 0 4
27831: PPUSH
27832: LD_VAR 0 5
27836: PPUSH
27837: CALL 27879 0 6
27841: GO 27874
27843: LD_INT 304
27845: DOUBLE
27846: EQUAL
27847: IFTRUE 27851
27849: GO 27873
27851: POP
// hHackTeleport ( unit , x , y ) ; end ;
27852: LD_VAR 0 2
27856: PPUSH
27857: LD_VAR 0 4
27861: PPUSH
27862: LD_VAR 0 5
27866: PPUSH
27867: CALL 29638 0 3
27871: GO 27874
27873: POP
// end ;
27874: LD_VAR 0 12
27878: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27879: LD_INT 0
27881: PPUSH
27882: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27883: LD_VAR 0 1
27887: PUSH
27888: LD_INT 1
27890: LESS
27891: PUSH
27892: LD_VAR 0 1
27896: PUSH
27897: LD_INT 3
27899: GREATER
27900: OR
27901: PUSH
27902: LD_VAR 0 5
27906: PPUSH
27907: LD_VAR 0 6
27911: PPUSH
27912: CALL_OW 428
27916: OR
27917: IFFALSE 27921
// exit ;
27919: GO 28641
// uc_side := your_side ;
27921: LD_ADDR_OWVAR 20
27925: PUSH
27926: LD_OWVAR 2
27930: ST_TO_ADDR
// uc_nation := nation ;
27931: LD_ADDR_OWVAR 21
27935: PUSH
27936: LD_VAR 0 1
27940: ST_TO_ADDR
// bc_level = 1 ;
27941: LD_ADDR_OWVAR 43
27945: PUSH
27946: LD_INT 1
27948: ST_TO_ADDR
// case btype of 1 :
27949: LD_VAR 0 2
27953: PUSH
27954: LD_INT 1
27956: DOUBLE
27957: EQUAL
27958: IFTRUE 27962
27960: GO 27973
27962: POP
// bc_type := b_depot ; 2 :
27963: LD_ADDR_OWVAR 42
27967: PUSH
27968: LD_INT 0
27970: ST_TO_ADDR
27971: GO 28585
27973: LD_INT 2
27975: DOUBLE
27976: EQUAL
27977: IFTRUE 27981
27979: GO 27992
27981: POP
// bc_type := b_warehouse ; 3 :
27982: LD_ADDR_OWVAR 42
27986: PUSH
27987: LD_INT 1
27989: ST_TO_ADDR
27990: GO 28585
27992: LD_INT 3
27994: DOUBLE
27995: EQUAL
27996: IFTRUE 28000
27998: GO 28011
28000: POP
// bc_type := b_lab ; 4 .. 9 :
28001: LD_ADDR_OWVAR 42
28005: PUSH
28006: LD_INT 6
28008: ST_TO_ADDR
28009: GO 28585
28011: LD_INT 4
28013: DOUBLE
28014: GREATEREQUAL
28015: IFFALSE 28023
28017: LD_INT 9
28019: DOUBLE
28020: LESSEQUAL
28021: IFTRUE 28025
28023: GO 28077
28025: POP
// begin bc_type := b_lab_half ;
28026: LD_ADDR_OWVAR 42
28030: PUSH
28031: LD_INT 7
28033: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28034: LD_ADDR_OWVAR 44
28038: PUSH
28039: LD_INT 10
28041: PUSH
28042: LD_INT 11
28044: PUSH
28045: LD_INT 12
28047: PUSH
28048: LD_INT 15
28050: PUSH
28051: LD_INT 14
28053: PUSH
28054: LD_INT 13
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: PUSH
28065: LD_VAR 0 2
28069: PUSH
28070: LD_INT 3
28072: MINUS
28073: ARRAY
28074: ST_TO_ADDR
// end ; 10 .. 13 :
28075: GO 28585
28077: LD_INT 10
28079: DOUBLE
28080: GREATEREQUAL
28081: IFFALSE 28089
28083: LD_INT 13
28085: DOUBLE
28086: LESSEQUAL
28087: IFTRUE 28091
28089: GO 28168
28091: POP
// begin bc_type := b_lab_full ;
28092: LD_ADDR_OWVAR 42
28096: PUSH
28097: LD_INT 8
28099: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28100: LD_ADDR_OWVAR 44
28104: PUSH
28105: LD_INT 10
28107: PUSH
28108: LD_INT 12
28110: PUSH
28111: LD_INT 14
28113: PUSH
28114: LD_INT 13
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: PUSH
28123: LD_VAR 0 2
28127: PUSH
28128: LD_INT 9
28130: MINUS
28131: ARRAY
28132: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28133: LD_ADDR_OWVAR 45
28137: PUSH
28138: LD_INT 11
28140: PUSH
28141: LD_INT 15
28143: PUSH
28144: LD_INT 12
28146: PUSH
28147: LD_INT 15
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: PUSH
28156: LD_VAR 0 2
28160: PUSH
28161: LD_INT 9
28163: MINUS
28164: ARRAY
28165: ST_TO_ADDR
// end ; 14 :
28166: GO 28585
28168: LD_INT 14
28170: DOUBLE
28171: EQUAL
28172: IFTRUE 28176
28174: GO 28187
28176: POP
// bc_type := b_workshop ; 15 :
28177: LD_ADDR_OWVAR 42
28181: PUSH
28182: LD_INT 2
28184: ST_TO_ADDR
28185: GO 28585
28187: LD_INT 15
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28195
28193: GO 28206
28195: POP
// bc_type := b_factory ; 16 :
28196: LD_ADDR_OWVAR 42
28200: PUSH
28201: LD_INT 3
28203: ST_TO_ADDR
28204: GO 28585
28206: LD_INT 16
28208: DOUBLE
28209: EQUAL
28210: IFTRUE 28214
28212: GO 28225
28214: POP
// bc_type := b_ext_gun ; 17 :
28215: LD_ADDR_OWVAR 42
28219: PUSH
28220: LD_INT 17
28222: ST_TO_ADDR
28223: GO 28585
28225: LD_INT 17
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28261
28233: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28234: LD_ADDR_OWVAR 42
28238: PUSH
28239: LD_INT 19
28241: PUSH
28242: LD_INT 23
28244: PUSH
28245: LD_INT 19
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: LIST
28252: PUSH
28253: LD_VAR 0 1
28257: ARRAY
28258: ST_TO_ADDR
28259: GO 28585
28261: LD_INT 18
28263: DOUBLE
28264: EQUAL
28265: IFTRUE 28269
28267: GO 28280
28269: POP
// bc_type := b_ext_radar ; 19 :
28270: LD_ADDR_OWVAR 42
28274: PUSH
28275: LD_INT 20
28277: ST_TO_ADDR
28278: GO 28585
28280: LD_INT 19
28282: DOUBLE
28283: EQUAL
28284: IFTRUE 28288
28286: GO 28299
28288: POP
// bc_type := b_ext_radio ; 20 :
28289: LD_ADDR_OWVAR 42
28293: PUSH
28294: LD_INT 22
28296: ST_TO_ADDR
28297: GO 28585
28299: LD_INT 20
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28318
28307: POP
// bc_type := b_ext_siberium ; 21 :
28308: LD_ADDR_OWVAR 42
28312: PUSH
28313: LD_INT 21
28315: ST_TO_ADDR
28316: GO 28585
28318: LD_INT 21
28320: DOUBLE
28321: EQUAL
28322: IFTRUE 28326
28324: GO 28337
28326: POP
// bc_type := b_ext_computer ; 22 :
28327: LD_ADDR_OWVAR 42
28331: PUSH
28332: LD_INT 24
28334: ST_TO_ADDR
28335: GO 28585
28337: LD_INT 22
28339: DOUBLE
28340: EQUAL
28341: IFTRUE 28345
28343: GO 28356
28345: POP
// bc_type := b_ext_track ; 23 :
28346: LD_ADDR_OWVAR 42
28350: PUSH
28351: LD_INT 16
28353: ST_TO_ADDR
28354: GO 28585
28356: LD_INT 23
28358: DOUBLE
28359: EQUAL
28360: IFTRUE 28364
28362: GO 28375
28364: POP
// bc_type := b_ext_laser ; 24 :
28365: LD_ADDR_OWVAR 42
28369: PUSH
28370: LD_INT 25
28372: ST_TO_ADDR
28373: GO 28585
28375: LD_INT 24
28377: DOUBLE
28378: EQUAL
28379: IFTRUE 28383
28381: GO 28394
28383: POP
// bc_type := b_control_tower ; 25 :
28384: LD_ADDR_OWVAR 42
28388: PUSH
28389: LD_INT 36
28391: ST_TO_ADDR
28392: GO 28585
28394: LD_INT 25
28396: DOUBLE
28397: EQUAL
28398: IFTRUE 28402
28400: GO 28413
28402: POP
// bc_type := b_breastwork ; 26 :
28403: LD_ADDR_OWVAR 42
28407: PUSH
28408: LD_INT 31
28410: ST_TO_ADDR
28411: GO 28585
28413: LD_INT 26
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28432
28421: POP
// bc_type := b_bunker ; 27 :
28422: LD_ADDR_OWVAR 42
28426: PUSH
28427: LD_INT 32
28429: ST_TO_ADDR
28430: GO 28585
28432: LD_INT 27
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28451
28440: POP
// bc_type := b_turret ; 28 :
28441: LD_ADDR_OWVAR 42
28445: PUSH
28446: LD_INT 33
28448: ST_TO_ADDR
28449: GO 28585
28451: LD_INT 28
28453: DOUBLE
28454: EQUAL
28455: IFTRUE 28459
28457: GO 28470
28459: POP
// bc_type := b_armoury ; 29 :
28460: LD_ADDR_OWVAR 42
28464: PUSH
28465: LD_INT 4
28467: ST_TO_ADDR
28468: GO 28585
28470: LD_INT 29
28472: DOUBLE
28473: EQUAL
28474: IFTRUE 28478
28476: GO 28489
28478: POP
// bc_type := b_barracks ; 30 :
28479: LD_ADDR_OWVAR 42
28483: PUSH
28484: LD_INT 5
28486: ST_TO_ADDR
28487: GO 28585
28489: LD_INT 30
28491: DOUBLE
28492: EQUAL
28493: IFTRUE 28497
28495: GO 28508
28497: POP
// bc_type := b_solar_power ; 31 :
28498: LD_ADDR_OWVAR 42
28502: PUSH
28503: LD_INT 27
28505: ST_TO_ADDR
28506: GO 28585
28508: LD_INT 31
28510: DOUBLE
28511: EQUAL
28512: IFTRUE 28516
28514: GO 28527
28516: POP
// bc_type := b_oil_power ; 32 :
28517: LD_ADDR_OWVAR 42
28521: PUSH
28522: LD_INT 26
28524: ST_TO_ADDR
28525: GO 28585
28527: LD_INT 32
28529: DOUBLE
28530: EQUAL
28531: IFTRUE 28535
28533: GO 28546
28535: POP
// bc_type := b_siberite_power ; 33 :
28536: LD_ADDR_OWVAR 42
28540: PUSH
28541: LD_INT 28
28543: ST_TO_ADDR
28544: GO 28585
28546: LD_INT 33
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28554
28552: GO 28565
28554: POP
// bc_type := b_oil_mine ; 34 :
28555: LD_ADDR_OWVAR 42
28559: PUSH
28560: LD_INT 29
28562: ST_TO_ADDR
28563: GO 28585
28565: LD_INT 34
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28573
28571: GO 28584
28573: POP
// bc_type := b_siberite_mine ; end ;
28574: LD_ADDR_OWVAR 42
28578: PUSH
28579: LD_INT 30
28581: ST_TO_ADDR
28582: GO 28585
28584: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28585: LD_ADDR_VAR 0 8
28589: PUSH
28590: LD_VAR 0 5
28594: PPUSH
28595: LD_VAR 0 6
28599: PPUSH
28600: LD_VAR 0 3
28604: PPUSH
28605: CALL_OW 47
28609: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28610: LD_OWVAR 42
28614: PUSH
28615: LD_INT 32
28617: PUSH
28618: LD_INT 33
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: IN
28625: IFFALSE 28641
// PlaceWeaponTurret ( b , weapon ) ;
28627: LD_VAR 0 8
28631: PPUSH
28632: LD_VAR 0 4
28636: PPUSH
28637: CALL_OW 431
// end ;
28641: LD_VAR 0 7
28645: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28646: LD_INT 0
28648: PPUSH
28649: PPUSH
28650: PPUSH
28651: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28652: LD_ADDR_VAR 0 4
28656: PUSH
28657: LD_INT 22
28659: PUSH
28660: LD_OWVAR 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 30
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 30
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PPUSH
28701: CALL_OW 69
28705: ST_TO_ADDR
// if not tmp then
28706: LD_VAR 0 4
28710: NOT
28711: IFFALSE 28715
// exit ;
28713: GO 28774
// for i in tmp do
28715: LD_ADDR_VAR 0 2
28719: PUSH
28720: LD_VAR 0 4
28724: PUSH
28725: FOR_IN
28726: IFFALSE 28772
// for j = 1 to 3 do
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: DOUBLE
28734: LD_INT 1
28736: DEC
28737: ST_TO_ADDR
28738: LD_INT 3
28740: PUSH
28741: FOR_TO
28742: IFFALSE 28768
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28744: LD_VAR 0 2
28748: PPUSH
28749: CALL_OW 274
28753: PPUSH
28754: LD_VAR 0 3
28758: PPUSH
28759: LD_INT 99999
28761: PPUSH
28762: CALL_OW 277
28766: GO 28741
28768: POP
28769: POP
28770: GO 28725
28772: POP
28773: POP
// end ;
28774: LD_VAR 0 1
28778: RET
// export function hHackSetLevel10 ; var i , j ; begin
28779: LD_INT 0
28781: PPUSH
28782: PPUSH
28783: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28784: LD_ADDR_VAR 0 2
28788: PUSH
28789: LD_INT 21
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PPUSH
28799: CALL_OW 69
28803: PUSH
28804: FOR_IN
28805: IFFALSE 28857
// if IsSelected ( i ) then
28807: LD_VAR 0 2
28811: PPUSH
28812: CALL_OW 306
28816: IFFALSE 28855
// begin for j := 1 to 4 do
28818: LD_ADDR_VAR 0 3
28822: PUSH
28823: DOUBLE
28824: LD_INT 1
28826: DEC
28827: ST_TO_ADDR
28828: LD_INT 4
28830: PUSH
28831: FOR_TO
28832: IFFALSE 28853
// SetSkill ( i , j , 10 ) ;
28834: LD_VAR 0 2
28838: PPUSH
28839: LD_VAR 0 3
28843: PPUSH
28844: LD_INT 10
28846: PPUSH
28847: CALL_OW 237
28851: GO 28831
28853: POP
28854: POP
// end ;
28855: GO 28804
28857: POP
28858: POP
// end ;
28859: LD_VAR 0 1
28863: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28864: LD_INT 0
28866: PPUSH
28867: PPUSH
28868: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28869: LD_ADDR_VAR 0 2
28873: PUSH
28874: LD_INT 22
28876: PUSH
28877: LD_OWVAR 2
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 21
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: PUSH
28905: FOR_IN
28906: IFFALSE 28947
// begin for j := 1 to 4 do
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: DOUBLE
28914: LD_INT 1
28916: DEC
28917: ST_TO_ADDR
28918: LD_INT 4
28920: PUSH
28921: FOR_TO
28922: IFFALSE 28943
// SetSkill ( i , j , 10 ) ;
28924: LD_VAR 0 2
28928: PPUSH
28929: LD_VAR 0 3
28933: PPUSH
28934: LD_INT 10
28936: PPUSH
28937: CALL_OW 237
28941: GO 28921
28943: POP
28944: POP
// end ;
28945: GO 28905
28947: POP
28948: POP
// end ;
28949: LD_VAR 0 1
28953: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28954: LD_INT 0
28956: PPUSH
// uc_side := your_side ;
28957: LD_ADDR_OWVAR 20
28961: PUSH
28962: LD_OWVAR 2
28966: ST_TO_ADDR
// uc_nation := nation ;
28967: LD_ADDR_OWVAR 21
28971: PUSH
28972: LD_VAR 0 1
28976: ST_TO_ADDR
// InitHc ;
28977: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28981: LD_INT 0
28983: PPUSH
28984: LD_VAR 0 2
28988: PPUSH
28989: LD_VAR 0 3
28993: PPUSH
28994: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28998: LD_VAR 0 4
29002: PPUSH
29003: LD_VAR 0 5
29007: PPUSH
29008: CALL_OW 428
29012: PUSH
29013: LD_INT 0
29015: EQUAL
29016: IFFALSE 29040
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29018: CALL_OW 44
29022: PPUSH
29023: LD_VAR 0 4
29027: PPUSH
29028: LD_VAR 0 5
29032: PPUSH
29033: LD_INT 1
29035: PPUSH
29036: CALL_OW 48
// end ;
29040: LD_VAR 0 6
29044: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29045: LD_INT 0
29047: PPUSH
29048: PPUSH
// uc_side := your_side ;
29049: LD_ADDR_OWVAR 20
29053: PUSH
29054: LD_OWVAR 2
29058: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29059: LD_VAR 0 1
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: LD_INT 3
29072: PUSH
29073: LD_INT 4
29075: PUSH
29076: LD_INT 5
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: IN
29086: IFFALSE 29098
// uc_nation := nation_american else
29088: LD_ADDR_OWVAR 21
29092: PUSH
29093: LD_INT 1
29095: ST_TO_ADDR
29096: GO 29141
// if chassis in [ 11 , 12 , 13 , 14 ] then
29098: LD_VAR 0 1
29102: PUSH
29103: LD_INT 11
29105: PUSH
29106: LD_INT 12
29108: PUSH
29109: LD_INT 13
29111: PUSH
29112: LD_INT 14
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: IN
29121: IFFALSE 29133
// uc_nation := nation_arabian else
29123: LD_ADDR_OWVAR 21
29127: PUSH
29128: LD_INT 2
29130: ST_TO_ADDR
29131: GO 29141
// uc_nation := nation_russian ;
29133: LD_ADDR_OWVAR 21
29137: PUSH
29138: LD_INT 3
29140: ST_TO_ADDR
// vc_chassis := chassis ;
29141: LD_ADDR_OWVAR 37
29145: PUSH
29146: LD_VAR 0 1
29150: ST_TO_ADDR
// vc_engine := engine ;
29151: LD_ADDR_OWVAR 39
29155: PUSH
29156: LD_VAR 0 2
29160: ST_TO_ADDR
// vc_control := control ;
29161: LD_ADDR_OWVAR 38
29165: PUSH
29166: LD_VAR 0 3
29170: ST_TO_ADDR
// vc_weapon := weapon ;
29171: LD_ADDR_OWVAR 40
29175: PUSH
29176: LD_VAR 0 4
29180: ST_TO_ADDR
// un := CreateVehicle ;
29181: LD_ADDR_VAR 0 8
29185: PUSH
29186: CALL_OW 45
29190: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29191: LD_VAR 0 8
29195: PPUSH
29196: LD_INT 0
29198: PPUSH
29199: LD_INT 5
29201: PPUSH
29202: CALL_OW 12
29206: PPUSH
29207: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29211: LD_VAR 0 8
29215: PPUSH
29216: LD_VAR 0 5
29220: PPUSH
29221: LD_VAR 0 6
29225: PPUSH
29226: LD_INT 1
29228: PPUSH
29229: CALL_OW 48
// end ;
29233: LD_VAR 0 7
29237: RET
// export hInvincible ; every 1 do
29238: GO 29240
29240: DISABLE
// hInvincible := [ ] ;
29241: LD_ADDR_EXP 94
29245: PUSH
29246: EMPTY
29247: ST_TO_ADDR
29248: END
// every 10 do var i ;
29249: GO 29251
29251: DISABLE
29252: LD_INT 0
29254: PPUSH
// begin enable ;
29255: ENABLE
// if not hInvincible then
29256: LD_EXP 94
29260: NOT
29261: IFFALSE 29265
// exit ;
29263: GO 29309
// for i in hInvincible do
29265: LD_ADDR_VAR 0 1
29269: PUSH
29270: LD_EXP 94
29274: PUSH
29275: FOR_IN
29276: IFFALSE 29307
// if GetLives ( i ) < 1000 then
29278: LD_VAR 0 1
29282: PPUSH
29283: CALL_OW 256
29287: PUSH
29288: LD_INT 1000
29290: LESS
29291: IFFALSE 29305
// SetLives ( i , 1000 ) ;
29293: LD_VAR 0 1
29297: PPUSH
29298: LD_INT 1000
29300: PPUSH
29301: CALL_OW 234
29305: GO 29275
29307: POP
29308: POP
// end ;
29309: PPOPN 1
29311: END
// export function hHackInvincible ; var i ; begin
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29316: LD_ADDR_VAR 0 2
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 21
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 21
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: LIST
29348: PPUSH
29349: CALL_OW 69
29353: PUSH
29354: FOR_IN
29355: IFFALSE 29416
// if IsSelected ( i ) then
29357: LD_VAR 0 2
29361: PPUSH
29362: CALL_OW 306
29366: IFFALSE 29414
// begin if i in hInvincible then
29368: LD_VAR 0 2
29372: PUSH
29373: LD_EXP 94
29377: IN
29378: IFFALSE 29398
// hInvincible := hInvincible diff i else
29380: LD_ADDR_EXP 94
29384: PUSH
29385: LD_EXP 94
29389: PUSH
29390: LD_VAR 0 2
29394: DIFF
29395: ST_TO_ADDR
29396: GO 29414
// hInvincible := hInvincible union i ;
29398: LD_ADDR_EXP 94
29402: PUSH
29403: LD_EXP 94
29407: PUSH
29408: LD_VAR 0 2
29412: UNION
29413: ST_TO_ADDR
// end ;
29414: GO 29354
29416: POP
29417: POP
// end ;
29418: LD_VAR 0 1
29422: RET
// export function hHackInvisible ; var i , j ; begin
29423: LD_INT 0
29425: PPUSH
29426: PPUSH
29427: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29428: LD_ADDR_VAR 0 2
29432: PUSH
29433: LD_INT 21
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PPUSH
29443: CALL_OW 69
29447: PUSH
29448: FOR_IN
29449: IFFALSE 29473
// if IsSelected ( i ) then
29451: LD_VAR 0 2
29455: PPUSH
29456: CALL_OW 306
29460: IFFALSE 29471
// ComForceInvisible ( i ) ;
29462: LD_VAR 0 2
29466: PPUSH
29467: CALL_OW 496
29471: GO 29448
29473: POP
29474: POP
// end ;
29475: LD_VAR 0 1
29479: RET
// export function hHackChangeYourSide ; begin
29480: LD_INT 0
29482: PPUSH
// if your_side = 8 then
29483: LD_OWVAR 2
29487: PUSH
29488: LD_INT 8
29490: EQUAL
29491: IFFALSE 29503
// your_side := 0 else
29493: LD_ADDR_OWVAR 2
29497: PUSH
29498: LD_INT 0
29500: ST_TO_ADDR
29501: GO 29517
// your_side := your_side + 1 ;
29503: LD_ADDR_OWVAR 2
29507: PUSH
29508: LD_OWVAR 2
29512: PUSH
29513: LD_INT 1
29515: PLUS
29516: ST_TO_ADDR
// end ;
29517: LD_VAR 0 1
29521: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29522: LD_INT 0
29524: PPUSH
29525: PPUSH
29526: PPUSH
// for i in all_units do
29527: LD_ADDR_VAR 0 2
29531: PUSH
29532: LD_OWVAR 3
29536: PUSH
29537: FOR_IN
29538: IFFALSE 29616
// if IsSelected ( i ) then
29540: LD_VAR 0 2
29544: PPUSH
29545: CALL_OW 306
29549: IFFALSE 29614
// begin j := GetSide ( i ) ;
29551: LD_ADDR_VAR 0 3
29555: PUSH
29556: LD_VAR 0 2
29560: PPUSH
29561: CALL_OW 255
29565: ST_TO_ADDR
// if j = 8 then
29566: LD_VAR 0 3
29570: PUSH
29571: LD_INT 8
29573: EQUAL
29574: IFFALSE 29586
// j := 0 else
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_INT 0
29583: ST_TO_ADDR
29584: GO 29600
// j := j + 1 ;
29586: LD_ADDR_VAR 0 3
29590: PUSH
29591: LD_VAR 0 3
29595: PUSH
29596: LD_INT 1
29598: PLUS
29599: ST_TO_ADDR
// SetSide ( i , j ) ;
29600: LD_VAR 0 2
29604: PPUSH
29605: LD_VAR 0 3
29609: PPUSH
29610: CALL_OW 235
// end ;
29614: GO 29537
29616: POP
29617: POP
// end ;
29618: LD_VAR 0 1
29622: RET
// export function hHackFog ; begin
29623: LD_INT 0
29625: PPUSH
// FogOff ( true ) ;
29626: LD_INT 1
29628: PPUSH
29629: CALL_OW 344
// end ;
29633: LD_VAR 0 1
29637: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29638: LD_INT 0
29640: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29641: LD_VAR 0 1
29645: PPUSH
29646: LD_VAR 0 2
29650: PPUSH
29651: LD_VAR 0 3
29655: PPUSH
29656: LD_INT 1
29658: PPUSH
29659: LD_INT 1
29661: PPUSH
29662: CALL_OW 483
// CenterOnXY ( x , y ) ;
29666: LD_VAR 0 2
29670: PPUSH
29671: LD_VAR 0 3
29675: PPUSH
29676: CALL_OW 84
// end ; end_of_file end_of_file
29680: LD_VAR 0 4
29684: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29685: LD_INT 0
29687: PPUSH
29688: PPUSH
// if exist_mode then
29689: LD_VAR 0 2
29693: IFFALSE 29718
// unit := CreateCharacter ( prefix & ident ) else
29695: LD_ADDR_VAR 0 5
29699: PUSH
29700: LD_VAR 0 3
29704: PUSH
29705: LD_VAR 0 1
29709: STR
29710: PPUSH
29711: CALL_OW 34
29715: ST_TO_ADDR
29716: GO 29733
// unit := NewCharacter ( ident ) ;
29718: LD_ADDR_VAR 0 5
29722: PUSH
29723: LD_VAR 0 1
29727: PPUSH
29728: CALL_OW 25
29732: ST_TO_ADDR
// result := unit ;
29733: LD_ADDR_VAR 0 4
29737: PUSH
29738: LD_VAR 0 5
29742: ST_TO_ADDR
// end ;
29743: LD_VAR 0 4
29747: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29748: LD_INT 0
29750: PPUSH
29751: PPUSH
// if not side or not nation then
29752: LD_VAR 0 1
29756: NOT
29757: PUSH
29758: LD_VAR 0 2
29762: NOT
29763: OR
29764: IFFALSE 29768
// exit ;
29766: GO 30536
// case nation of nation_american :
29768: LD_VAR 0 2
29772: PUSH
29773: LD_INT 1
29775: DOUBLE
29776: EQUAL
29777: IFTRUE 29781
29779: GO 29995
29781: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29782: LD_ADDR_VAR 0 4
29786: PUSH
29787: LD_INT 35
29789: PUSH
29790: LD_INT 45
29792: PUSH
29793: LD_INT 46
29795: PUSH
29796: LD_INT 47
29798: PUSH
29799: LD_INT 82
29801: PUSH
29802: LD_INT 83
29804: PUSH
29805: LD_INT 84
29807: PUSH
29808: LD_INT 85
29810: PUSH
29811: LD_INT 86
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 6
29822: PUSH
29823: LD_INT 15
29825: PUSH
29826: LD_INT 16
29828: PUSH
29829: LD_INT 7
29831: PUSH
29832: LD_INT 12
29834: PUSH
29835: LD_INT 13
29837: PUSH
29838: LD_INT 10
29840: PUSH
29841: LD_INT 14
29843: PUSH
29844: LD_INT 20
29846: PUSH
29847: LD_INT 21
29849: PUSH
29850: LD_INT 22
29852: PUSH
29853: LD_INT 25
29855: PUSH
29856: LD_INT 32
29858: PUSH
29859: LD_INT 27
29861: PUSH
29862: LD_INT 36
29864: PUSH
29865: LD_INT 69
29867: PUSH
29868: LD_INT 39
29870: PUSH
29871: LD_INT 34
29873: PUSH
29874: LD_INT 40
29876: PUSH
29877: LD_INT 48
29879: PUSH
29880: LD_INT 49
29882: PUSH
29883: LD_INT 50
29885: PUSH
29886: LD_INT 51
29888: PUSH
29889: LD_INT 52
29891: PUSH
29892: LD_INT 53
29894: PUSH
29895: LD_INT 54
29897: PUSH
29898: LD_INT 55
29900: PUSH
29901: LD_INT 56
29903: PUSH
29904: LD_INT 57
29906: PUSH
29907: LD_INT 58
29909: PUSH
29910: LD_INT 59
29912: PUSH
29913: LD_INT 60
29915: PUSH
29916: LD_INT 61
29918: PUSH
29919: LD_INT 62
29921: PUSH
29922: LD_INT 80
29924: PUSH
29925: LD_INT 82
29927: PUSH
29928: LD_INT 83
29930: PUSH
29931: LD_INT 84
29933: PUSH
29934: LD_INT 85
29936: PUSH
29937: LD_INT 86
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: ST_TO_ADDR
29993: GO 30460
29995: LD_INT 2
29997: DOUBLE
29998: EQUAL
29999: IFTRUE 30003
30001: GO 30229
30003: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30004: LD_ADDR_VAR 0 4
30008: PUSH
30009: LD_INT 35
30011: PUSH
30012: LD_INT 45
30014: PUSH
30015: LD_INT 46
30017: PUSH
30018: LD_INT 47
30020: PUSH
30021: LD_INT 82
30023: PUSH
30024: LD_INT 83
30026: PUSH
30027: LD_INT 84
30029: PUSH
30030: LD_INT 85
30032: PUSH
30033: LD_INT 87
30035: PUSH
30036: LD_INT 70
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 11
30044: PUSH
30045: LD_INT 3
30047: PUSH
30048: LD_INT 4
30050: PUSH
30051: LD_INT 5
30053: PUSH
30054: LD_INT 6
30056: PUSH
30057: LD_INT 15
30059: PUSH
30060: LD_INT 18
30062: PUSH
30063: LD_INT 7
30065: PUSH
30066: LD_INT 17
30068: PUSH
30069: LD_INT 8
30071: PUSH
30072: LD_INT 20
30074: PUSH
30075: LD_INT 21
30077: PUSH
30078: LD_INT 22
30080: PUSH
30081: LD_INT 72
30083: PUSH
30084: LD_INT 26
30086: PUSH
30087: LD_INT 69
30089: PUSH
30090: LD_INT 39
30092: PUSH
30093: LD_INT 40
30095: PUSH
30096: LD_INT 41
30098: PUSH
30099: LD_INT 42
30101: PUSH
30102: LD_INT 43
30104: PUSH
30105: LD_INT 48
30107: PUSH
30108: LD_INT 49
30110: PUSH
30111: LD_INT 50
30113: PUSH
30114: LD_INT 51
30116: PUSH
30117: LD_INT 52
30119: PUSH
30120: LD_INT 53
30122: PUSH
30123: LD_INT 54
30125: PUSH
30126: LD_INT 55
30128: PUSH
30129: LD_INT 56
30131: PUSH
30132: LD_INT 60
30134: PUSH
30135: LD_INT 61
30137: PUSH
30138: LD_INT 62
30140: PUSH
30141: LD_INT 66
30143: PUSH
30144: LD_INT 67
30146: PUSH
30147: LD_INT 68
30149: PUSH
30150: LD_INT 81
30152: PUSH
30153: LD_INT 82
30155: PUSH
30156: LD_INT 83
30158: PUSH
30159: LD_INT 84
30161: PUSH
30162: LD_INT 85
30164: PUSH
30165: LD_INT 87
30167: PUSH
30168: LD_INT 88
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: ST_TO_ADDR
30227: GO 30460
30229: LD_INT 3
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30237
30235: GO 30459
30237: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30238: LD_ADDR_VAR 0 4
30242: PUSH
30243: LD_INT 46
30245: PUSH
30246: LD_INT 47
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 82
30257: PUSH
30258: LD_INT 83
30260: PUSH
30261: LD_INT 84
30263: PUSH
30264: LD_INT 85
30266: PUSH
30267: LD_INT 86
30269: PUSH
30270: LD_INT 11
30272: PUSH
30273: LD_INT 9
30275: PUSH
30276: LD_INT 20
30278: PUSH
30279: LD_INT 19
30281: PUSH
30282: LD_INT 21
30284: PUSH
30285: LD_INT 24
30287: PUSH
30288: LD_INT 22
30290: PUSH
30291: LD_INT 25
30293: PUSH
30294: LD_INT 28
30296: PUSH
30297: LD_INT 29
30299: PUSH
30300: LD_INT 30
30302: PUSH
30303: LD_INT 31
30305: PUSH
30306: LD_INT 37
30308: PUSH
30309: LD_INT 38
30311: PUSH
30312: LD_INT 32
30314: PUSH
30315: LD_INT 27
30317: PUSH
30318: LD_INT 33
30320: PUSH
30321: LD_INT 69
30323: PUSH
30324: LD_INT 39
30326: PUSH
30327: LD_INT 34
30329: PUSH
30330: LD_INT 40
30332: PUSH
30333: LD_INT 71
30335: PUSH
30336: LD_INT 23
30338: PUSH
30339: LD_INT 44
30341: PUSH
30342: LD_INT 48
30344: PUSH
30345: LD_INT 49
30347: PUSH
30348: LD_INT 50
30350: PUSH
30351: LD_INT 51
30353: PUSH
30354: LD_INT 52
30356: PUSH
30357: LD_INT 53
30359: PUSH
30360: LD_INT 54
30362: PUSH
30363: LD_INT 55
30365: PUSH
30366: LD_INT 56
30368: PUSH
30369: LD_INT 57
30371: PUSH
30372: LD_INT 58
30374: PUSH
30375: LD_INT 59
30377: PUSH
30378: LD_INT 63
30380: PUSH
30381: LD_INT 64
30383: PUSH
30384: LD_INT 65
30386: PUSH
30387: LD_INT 82
30389: PUSH
30390: LD_INT 83
30392: PUSH
30393: LD_INT 84
30395: PUSH
30396: LD_INT 85
30398: PUSH
30399: LD_INT 86
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: ST_TO_ADDR
30457: GO 30460
30459: POP
// if state > - 1 and state < 3 then
30460: LD_VAR 0 3
30464: PUSH
30465: LD_INT 1
30467: NEG
30468: GREATER
30469: PUSH
30470: LD_VAR 0 3
30474: PUSH
30475: LD_INT 3
30477: LESS
30478: AND
30479: IFFALSE 30536
// for i in result do
30481: LD_ADDR_VAR 0 5
30485: PUSH
30486: LD_VAR 0 4
30490: PUSH
30491: FOR_IN
30492: IFFALSE 30534
// if GetTech ( i , side ) <> state then
30494: LD_VAR 0 5
30498: PPUSH
30499: LD_VAR 0 1
30503: PPUSH
30504: CALL_OW 321
30508: PUSH
30509: LD_VAR 0 3
30513: NONEQUAL
30514: IFFALSE 30532
// result := result diff i ;
30516: LD_ADDR_VAR 0 4
30520: PUSH
30521: LD_VAR 0 4
30525: PUSH
30526: LD_VAR 0 5
30530: DIFF
30531: ST_TO_ADDR
30532: GO 30491
30534: POP
30535: POP
// end ;
30536: LD_VAR 0 4
30540: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30541: LD_INT 0
30543: PPUSH
30544: PPUSH
30545: PPUSH
// result := true ;
30546: LD_ADDR_VAR 0 3
30550: PUSH
30551: LD_INT 1
30553: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30554: LD_ADDR_VAR 0 5
30558: PUSH
30559: LD_VAR 0 2
30563: PPUSH
30564: CALL_OW 480
30568: ST_TO_ADDR
// if not tmp then
30569: LD_VAR 0 5
30573: NOT
30574: IFFALSE 30578
// exit ;
30576: GO 30627
// for i in tmp do
30578: LD_ADDR_VAR 0 4
30582: PUSH
30583: LD_VAR 0 5
30587: PUSH
30588: FOR_IN
30589: IFFALSE 30625
// if GetTech ( i , side ) <> state_researched then
30591: LD_VAR 0 4
30595: PPUSH
30596: LD_VAR 0 1
30600: PPUSH
30601: CALL_OW 321
30605: PUSH
30606: LD_INT 2
30608: NONEQUAL
30609: IFFALSE 30623
// begin result := false ;
30611: LD_ADDR_VAR 0 3
30615: PUSH
30616: LD_INT 0
30618: ST_TO_ADDR
// exit ;
30619: POP
30620: POP
30621: GO 30627
// end ;
30623: GO 30588
30625: POP
30626: POP
// end ;
30627: LD_VAR 0 3
30631: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30632: LD_INT 0
30634: PPUSH
30635: PPUSH
30636: PPUSH
30637: PPUSH
30638: PPUSH
30639: PPUSH
30640: PPUSH
30641: PPUSH
30642: PPUSH
30643: PPUSH
30644: PPUSH
30645: PPUSH
30646: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30647: LD_VAR 0 1
30651: NOT
30652: PUSH
30653: LD_VAR 0 1
30657: PPUSH
30658: CALL_OW 257
30662: PUSH
30663: LD_INT 9
30665: NONEQUAL
30666: OR
30667: IFFALSE 30671
// exit ;
30669: GO 31244
// side := GetSide ( unit ) ;
30671: LD_ADDR_VAR 0 9
30675: PUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 255
30685: ST_TO_ADDR
// tech_space := tech_spacanom ;
30686: LD_ADDR_VAR 0 12
30690: PUSH
30691: LD_INT 29
30693: ST_TO_ADDR
// tech_time := tech_taurad ;
30694: LD_ADDR_VAR 0 13
30698: PUSH
30699: LD_INT 28
30701: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30702: LD_ADDR_VAR 0 11
30706: PUSH
30707: LD_VAR 0 1
30711: PPUSH
30712: CALL_OW 310
30716: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30717: LD_VAR 0 11
30721: PPUSH
30722: CALL_OW 247
30726: PUSH
30727: LD_INT 2
30729: EQUAL
30730: IFFALSE 30734
// exit ;
30732: GO 31244
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30734: LD_ADDR_VAR 0 8
30738: PUSH
30739: LD_INT 81
30741: PUSH
30742: LD_VAR 0 9
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 3
30753: PUSH
30754: LD_INT 21
30756: PUSH
30757: LD_INT 3
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PPUSH
30772: CALL_OW 69
30776: ST_TO_ADDR
// if not tmp then
30777: LD_VAR 0 8
30781: NOT
30782: IFFALSE 30786
// exit ;
30784: GO 31244
// if in_unit then
30786: LD_VAR 0 11
30790: IFFALSE 30814
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30792: LD_ADDR_VAR 0 10
30796: PUSH
30797: LD_VAR 0 8
30801: PPUSH
30802: LD_VAR 0 11
30806: PPUSH
30807: CALL_OW 74
30811: ST_TO_ADDR
30812: GO 30834
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30814: LD_ADDR_VAR 0 10
30818: PUSH
30819: LD_VAR 0 8
30823: PPUSH
30824: LD_VAR 0 1
30828: PPUSH
30829: CALL_OW 74
30833: ST_TO_ADDR
// if not enemy then
30834: LD_VAR 0 10
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 31244
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30843: LD_VAR 0 11
30847: PUSH
30848: LD_VAR 0 11
30852: PPUSH
30853: LD_VAR 0 10
30857: PPUSH
30858: CALL_OW 296
30862: PUSH
30863: LD_INT 13
30865: GREATER
30866: AND
30867: PUSH
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_VAR 0 10
30877: PPUSH
30878: CALL_OW 296
30882: PUSH
30883: LD_INT 12
30885: GREATER
30886: OR
30887: IFFALSE 30891
// exit ;
30889: GO 31244
// missile := [ 1 ] ;
30891: LD_ADDR_VAR 0 14
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: EMPTY
30900: LIST
30901: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30902: LD_VAR 0 9
30906: PPUSH
30907: LD_VAR 0 12
30911: PPUSH
30912: CALL_OW 325
30916: IFFALSE 30945
// missile := Replace ( missile , missile + 1 , 2 ) ;
30918: LD_ADDR_VAR 0 14
30922: PUSH
30923: LD_VAR 0 14
30927: PPUSH
30928: LD_VAR 0 14
30932: PUSH
30933: LD_INT 1
30935: PLUS
30936: PPUSH
30937: LD_INT 2
30939: PPUSH
30940: CALL_OW 1
30944: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30945: LD_VAR 0 9
30949: PPUSH
30950: LD_VAR 0 13
30954: PPUSH
30955: CALL_OW 325
30959: PUSH
30960: LD_VAR 0 10
30964: PPUSH
30965: CALL_OW 255
30969: PPUSH
30970: LD_VAR 0 13
30974: PPUSH
30975: CALL_OW 325
30979: NOT
30980: AND
30981: IFFALSE 31010
// missile := Replace ( missile , missile + 1 , 3 ) ;
30983: LD_ADDR_VAR 0 14
30987: PUSH
30988: LD_VAR 0 14
30992: PPUSH
30993: LD_VAR 0 14
30997: PUSH
30998: LD_INT 1
31000: PLUS
31001: PPUSH
31002: LD_INT 3
31004: PPUSH
31005: CALL_OW 1
31009: ST_TO_ADDR
// if missile < 2 then
31010: LD_VAR 0 14
31014: PUSH
31015: LD_INT 2
31017: LESS
31018: IFFALSE 31022
// exit ;
31020: GO 31244
// x := GetX ( enemy ) ;
31022: LD_ADDR_VAR 0 4
31026: PUSH
31027: LD_VAR 0 10
31031: PPUSH
31032: CALL_OW 250
31036: ST_TO_ADDR
// y := GetY ( enemy ) ;
31037: LD_ADDR_VAR 0 5
31041: PUSH
31042: LD_VAR 0 10
31046: PPUSH
31047: CALL_OW 251
31051: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31052: LD_ADDR_VAR 0 6
31056: PUSH
31057: LD_VAR 0 4
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PPUSH
31066: LD_INT 1
31068: PPUSH
31069: CALL_OW 12
31073: PLUS
31074: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31075: LD_ADDR_VAR 0 7
31079: PUSH
31080: LD_VAR 0 5
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PPUSH
31089: LD_INT 1
31091: PPUSH
31092: CALL_OW 12
31096: PLUS
31097: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31098: LD_VAR 0 6
31102: PPUSH
31103: LD_VAR 0 7
31107: PPUSH
31108: CALL_OW 488
31112: NOT
31113: IFFALSE 31135
// begin _x := x ;
31115: LD_ADDR_VAR 0 6
31119: PUSH
31120: LD_VAR 0 4
31124: ST_TO_ADDR
// _y := y ;
31125: LD_ADDR_VAR 0 7
31129: PUSH
31130: LD_VAR 0 5
31134: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31135: LD_ADDR_VAR 0 3
31139: PUSH
31140: LD_INT 1
31142: PPUSH
31143: LD_VAR 0 14
31147: PPUSH
31148: CALL_OW 12
31152: ST_TO_ADDR
// case i of 1 :
31153: LD_VAR 0 3
31157: PUSH
31158: LD_INT 1
31160: DOUBLE
31161: EQUAL
31162: IFTRUE 31166
31164: GO 31183
31166: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31167: LD_VAR 0 1
31171: PPUSH
31172: LD_VAR 0 10
31176: PPUSH
31177: CALL_OW 115
31181: GO 31244
31183: LD_INT 2
31185: DOUBLE
31186: EQUAL
31187: IFTRUE 31191
31189: GO 31213
31191: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31192: LD_VAR 0 1
31196: PPUSH
31197: LD_VAR 0 6
31201: PPUSH
31202: LD_VAR 0 7
31206: PPUSH
31207: CALL_OW 153
31211: GO 31244
31213: LD_INT 3
31215: DOUBLE
31216: EQUAL
31217: IFTRUE 31221
31219: GO 31243
31221: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31222: LD_VAR 0 1
31226: PPUSH
31227: LD_VAR 0 6
31231: PPUSH
31232: LD_VAR 0 7
31236: PPUSH
31237: CALL_OW 154
31241: GO 31244
31243: POP
// end ;
31244: LD_VAR 0 2
31248: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31249: LD_INT 0
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
// if not unit or not building then
31257: LD_VAR 0 1
31261: NOT
31262: PUSH
31263: LD_VAR 0 2
31267: NOT
31268: OR
31269: IFFALSE 31273
// exit ;
31271: GO 31431
// x := GetX ( building ) ;
31273: LD_ADDR_VAR 0 5
31277: PUSH
31278: LD_VAR 0 2
31282: PPUSH
31283: CALL_OW 250
31287: ST_TO_ADDR
// y := GetY ( building ) ;
31288: LD_ADDR_VAR 0 6
31292: PUSH
31293: LD_VAR 0 2
31297: PPUSH
31298: CALL_OW 251
31302: ST_TO_ADDR
// for i = 0 to 5 do
31303: LD_ADDR_VAR 0 4
31307: PUSH
31308: DOUBLE
31309: LD_INT 0
31311: DEC
31312: ST_TO_ADDR
31313: LD_INT 5
31315: PUSH
31316: FOR_TO
31317: IFFALSE 31429
// begin _x := ShiftX ( x , i , 3 ) ;
31319: LD_ADDR_VAR 0 7
31323: PUSH
31324: LD_VAR 0 5
31328: PPUSH
31329: LD_VAR 0 4
31333: PPUSH
31334: LD_INT 3
31336: PPUSH
31337: CALL_OW 272
31341: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31342: LD_ADDR_VAR 0 8
31346: PUSH
31347: LD_VAR 0 6
31351: PPUSH
31352: LD_VAR 0 4
31356: PPUSH
31357: LD_INT 3
31359: PPUSH
31360: CALL_OW 273
31364: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31365: LD_VAR 0 7
31369: PPUSH
31370: LD_VAR 0 8
31374: PPUSH
31375: CALL_OW 488
31379: NOT
31380: IFFALSE 31384
// continue ;
31382: GO 31316
// if HexInfo ( _x , _y ) = 0 then
31384: LD_VAR 0 7
31388: PPUSH
31389: LD_VAR 0 8
31393: PPUSH
31394: CALL_OW 428
31398: PUSH
31399: LD_INT 0
31401: EQUAL
31402: IFFALSE 31427
// begin ComMoveXY ( unit , _x , _y ) ;
31404: LD_VAR 0 1
31408: PPUSH
31409: LD_VAR 0 7
31413: PPUSH
31414: LD_VAR 0 8
31418: PPUSH
31419: CALL_OW 111
// exit ;
31423: POP
31424: POP
31425: GO 31431
// end ; end ;
31427: GO 31316
31429: POP
31430: POP
// end ;
31431: LD_VAR 0 3
31435: RET
// export function ScanBase ( side , base_area ) ; begin
31436: LD_INT 0
31438: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31439: LD_ADDR_VAR 0 3
31443: PUSH
31444: LD_VAR 0 2
31448: PPUSH
31449: LD_INT 81
31451: PUSH
31452: LD_VAR 0 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PPUSH
31461: CALL_OW 70
31465: ST_TO_ADDR
// end ;
31466: LD_VAR 0 3
31470: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31471: LD_INT 0
31473: PPUSH
31474: PPUSH
31475: PPUSH
31476: PPUSH
// result := false ;
31477: LD_ADDR_VAR 0 2
31481: PUSH
31482: LD_INT 0
31484: ST_TO_ADDR
// side := GetSide ( unit ) ;
31485: LD_ADDR_VAR 0 3
31489: PUSH
31490: LD_VAR 0 1
31494: PPUSH
31495: CALL_OW 255
31499: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31500: LD_ADDR_VAR 0 4
31504: PUSH
31505: LD_VAR 0 1
31509: PPUSH
31510: CALL_OW 248
31514: ST_TO_ADDR
// case nat of 1 :
31515: LD_VAR 0 4
31519: PUSH
31520: LD_INT 1
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31539
31528: POP
// tech := tech_lassight ; 2 :
31529: LD_ADDR_VAR 0 5
31533: PUSH
31534: LD_INT 12
31536: ST_TO_ADDR
31537: GO 31578
31539: LD_INT 2
31541: DOUBLE
31542: EQUAL
31543: IFTRUE 31547
31545: GO 31558
31547: POP
// tech := tech_mortar ; 3 :
31548: LD_ADDR_VAR 0 5
31552: PUSH
31553: LD_INT 41
31555: ST_TO_ADDR
31556: GO 31578
31558: LD_INT 3
31560: DOUBLE
31561: EQUAL
31562: IFTRUE 31566
31564: GO 31577
31566: POP
// tech := tech_bazooka ; end ;
31567: LD_ADDR_VAR 0 5
31571: PUSH
31572: LD_INT 44
31574: ST_TO_ADDR
31575: GO 31578
31577: POP
// if Researched ( side , tech ) then
31578: LD_VAR 0 3
31582: PPUSH
31583: LD_VAR 0 5
31587: PPUSH
31588: CALL_OW 325
31592: IFFALSE 31619
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31594: LD_ADDR_VAR 0 2
31598: PUSH
31599: LD_INT 5
31601: PUSH
31602: LD_INT 8
31604: PUSH
31605: LD_INT 9
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: PUSH
31613: LD_VAR 0 4
31617: ARRAY
31618: ST_TO_ADDR
// end ;
31619: LD_VAR 0 2
31623: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31624: LD_INT 0
31626: PPUSH
31627: PPUSH
31628: PPUSH
// if not mines then
31629: LD_VAR 0 2
31633: NOT
31634: IFFALSE 31638
// exit ;
31636: GO 31782
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31638: LD_ADDR_VAR 0 5
31642: PUSH
31643: LD_INT 81
31645: PUSH
31646: LD_VAR 0 1
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 3
31657: PUSH
31658: LD_INT 21
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PPUSH
31676: CALL_OW 69
31680: ST_TO_ADDR
// for i in mines do
31681: LD_ADDR_VAR 0 4
31685: PUSH
31686: LD_VAR 0 2
31690: PUSH
31691: FOR_IN
31692: IFFALSE 31780
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31694: LD_VAR 0 4
31698: PUSH
31699: LD_INT 1
31701: ARRAY
31702: PPUSH
31703: LD_VAR 0 4
31707: PUSH
31708: LD_INT 2
31710: ARRAY
31711: PPUSH
31712: CALL_OW 458
31716: NOT
31717: IFFALSE 31721
// continue ;
31719: GO 31691
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31721: LD_VAR 0 4
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: PPUSH
31730: LD_VAR 0 4
31734: PUSH
31735: LD_INT 2
31737: ARRAY
31738: PPUSH
31739: CALL_OW 428
31743: PUSH
31744: LD_VAR 0 5
31748: IN
31749: IFFALSE 31778
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31751: LD_VAR 0 4
31755: PUSH
31756: LD_INT 1
31758: ARRAY
31759: PPUSH
31760: LD_VAR 0 4
31764: PUSH
31765: LD_INT 2
31767: ARRAY
31768: PPUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 456
// end ;
31778: GO 31691
31780: POP
31781: POP
// end ;
31782: LD_VAR 0 3
31786: RET
// export function Count ( array ) ; var i ; begin
31787: LD_INT 0
31789: PPUSH
31790: PPUSH
// result := 0 ;
31791: LD_ADDR_VAR 0 2
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// for i in array do
31799: LD_ADDR_VAR 0 3
31803: PUSH
31804: LD_VAR 0 1
31808: PUSH
31809: FOR_IN
31810: IFFALSE 31834
// if i then
31812: LD_VAR 0 3
31816: IFFALSE 31832
// result := result + 1 ;
31818: LD_ADDR_VAR 0 2
31822: PUSH
31823: LD_VAR 0 2
31827: PUSH
31828: LD_INT 1
31830: PLUS
31831: ST_TO_ADDR
31832: GO 31809
31834: POP
31835: POP
// end ;
31836: LD_VAR 0 2
31840: RET
// export function IsEmpty ( building ) ; begin
31841: LD_INT 0
31843: PPUSH
// if not building then
31844: LD_VAR 0 1
31848: NOT
31849: IFFALSE 31853
// exit ;
31851: GO 31896
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31853: LD_ADDR_VAR 0 2
31857: PUSH
31858: LD_VAR 0 1
31862: PUSH
31863: LD_INT 22
31865: PUSH
31866: LD_VAR 0 1
31870: PPUSH
31871: CALL_OW 255
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 58
31882: PUSH
31883: EMPTY
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PPUSH
31890: CALL_OW 69
31894: IN
31895: ST_TO_ADDR
// end ;
31896: LD_VAR 0 2
31900: RET
// export function IsNotFull ( building ) ; begin
31901: LD_INT 0
31903: PPUSH
// if not building then
31904: LD_VAR 0 1
31908: NOT
31909: IFFALSE 31913
// exit ;
31911: GO 31932
// result := UnitsInside ( building ) < 6 ;
31913: LD_ADDR_VAR 0 2
31917: PUSH
31918: LD_VAR 0 1
31922: PPUSH
31923: CALL_OW 313
31927: PUSH
31928: LD_INT 6
31930: LESS
31931: ST_TO_ADDR
// end ;
31932: LD_VAR 0 2
31936: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31937: LD_INT 0
31939: PPUSH
31940: PPUSH
31941: PPUSH
31942: PPUSH
// tmp := [ ] ;
31943: LD_ADDR_VAR 0 3
31947: PUSH
31948: EMPTY
31949: ST_TO_ADDR
// list := [ ] ;
31950: LD_ADDR_VAR 0 5
31954: PUSH
31955: EMPTY
31956: ST_TO_ADDR
// for i = 16 to 25 do
31957: LD_ADDR_VAR 0 4
31961: PUSH
31962: DOUBLE
31963: LD_INT 16
31965: DEC
31966: ST_TO_ADDR
31967: LD_INT 25
31969: PUSH
31970: FOR_TO
31971: IFFALSE 32044
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31973: LD_ADDR_VAR 0 3
31977: PUSH
31978: LD_VAR 0 3
31982: PUSH
31983: LD_INT 22
31985: PUSH
31986: LD_VAR 0 1
31990: PPUSH
31991: CALL_OW 255
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 91
32002: PUSH
32003: LD_VAR 0 1
32007: PUSH
32008: LD_INT 6
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 30
32018: PUSH
32019: LD_VAR 0 4
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: PPUSH
32036: CALL_OW 69
32040: ADD
32041: ST_TO_ADDR
32042: GO 31970
32044: POP
32045: POP
// for i = 1 to tmp do
32046: LD_ADDR_VAR 0 4
32050: PUSH
32051: DOUBLE
32052: LD_INT 1
32054: DEC
32055: ST_TO_ADDR
32056: LD_VAR 0 3
32060: PUSH
32061: FOR_TO
32062: IFFALSE 32150
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32064: LD_ADDR_VAR 0 5
32068: PUSH
32069: LD_VAR 0 5
32073: PUSH
32074: LD_VAR 0 3
32078: PUSH
32079: LD_VAR 0 4
32083: ARRAY
32084: PPUSH
32085: CALL_OW 266
32089: PUSH
32090: LD_VAR 0 3
32094: PUSH
32095: LD_VAR 0 4
32099: ARRAY
32100: PPUSH
32101: CALL_OW 250
32105: PUSH
32106: LD_VAR 0 3
32110: PUSH
32111: LD_VAR 0 4
32115: ARRAY
32116: PPUSH
32117: CALL_OW 251
32121: PUSH
32122: LD_VAR 0 3
32126: PUSH
32127: LD_VAR 0 4
32131: ARRAY
32132: PPUSH
32133: CALL_OW 254
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: ADD
32147: ST_TO_ADDR
32148: GO 32061
32150: POP
32151: POP
// result := list ;
32152: LD_ADDR_VAR 0 2
32156: PUSH
32157: LD_VAR 0 5
32161: ST_TO_ADDR
// end ;
32162: LD_VAR 0 2
32166: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32167: LD_INT 0
32169: PPUSH
32170: PPUSH
32171: PPUSH
32172: PPUSH
32173: PPUSH
32174: PPUSH
32175: PPUSH
// if not factory then
32176: LD_VAR 0 1
32180: NOT
32181: IFFALSE 32185
// exit ;
32183: GO 32778
// if control = control_apeman then
32185: LD_VAR 0 4
32189: PUSH
32190: LD_INT 5
32192: EQUAL
32193: IFFALSE 32302
// begin tmp := UnitsInside ( factory ) ;
32195: LD_ADDR_VAR 0 8
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 313
32209: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32210: LD_VAR 0 8
32214: PPUSH
32215: LD_INT 25
32217: PUSH
32218: LD_INT 12
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PPUSH
32225: CALL_OW 72
32229: NOT
32230: IFFALSE 32240
// control := control_manual ;
32232: LD_ADDR_VAR 0 4
32236: PUSH
32237: LD_INT 1
32239: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32240: LD_ADDR_VAR 0 8
32244: PUSH
32245: LD_VAR 0 1
32249: PPUSH
32250: CALL 31937 0 1
32254: ST_TO_ADDR
// if tmp then
32255: LD_VAR 0 8
32259: IFFALSE 32302
// begin for i in tmp do
32261: LD_ADDR_VAR 0 7
32265: PUSH
32266: LD_VAR 0 8
32270: PUSH
32271: FOR_IN
32272: IFFALSE 32300
// if i [ 1 ] = b_ext_radio then
32274: LD_VAR 0 7
32278: PUSH
32279: LD_INT 1
32281: ARRAY
32282: PUSH
32283: LD_INT 22
32285: EQUAL
32286: IFFALSE 32298
// begin control := control_remote ;
32288: LD_ADDR_VAR 0 4
32292: PUSH
32293: LD_INT 2
32295: ST_TO_ADDR
// break ;
32296: GO 32300
// end ;
32298: GO 32271
32300: POP
32301: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32302: LD_VAR 0 1
32306: PPUSH
32307: LD_VAR 0 2
32311: PPUSH
32312: LD_VAR 0 3
32316: PPUSH
32317: LD_VAR 0 4
32321: PPUSH
32322: LD_VAR 0 5
32326: PPUSH
32327: CALL_OW 448
32331: IFFALSE 32366
// begin result := [ chassis , engine , control , weapon ] ;
32333: LD_ADDR_VAR 0 6
32337: PUSH
32338: LD_VAR 0 2
32342: PUSH
32343: LD_VAR 0 3
32347: PUSH
32348: LD_VAR 0 4
32352: PUSH
32353: LD_VAR 0 5
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: ST_TO_ADDR
// exit ;
32364: GO 32778
// end ; _chassis := AvailableChassisList ( factory ) ;
32366: LD_ADDR_VAR 0 9
32370: PUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 475
32380: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32381: LD_ADDR_VAR 0 11
32385: PUSH
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 476
32395: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32396: LD_ADDR_VAR 0 12
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 477
32410: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32411: LD_ADDR_VAR 0 10
32415: PUSH
32416: LD_VAR 0 1
32420: PPUSH
32421: CALL_OW 478
32425: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32426: LD_VAR 0 9
32430: NOT
32431: PUSH
32432: LD_VAR 0 11
32436: NOT
32437: OR
32438: PUSH
32439: LD_VAR 0 12
32443: NOT
32444: OR
32445: PUSH
32446: LD_VAR 0 10
32450: NOT
32451: OR
32452: IFFALSE 32487
// begin result := [ chassis , engine , control , weapon ] ;
32454: LD_ADDR_VAR 0 6
32458: PUSH
32459: LD_VAR 0 2
32463: PUSH
32464: LD_VAR 0 3
32468: PUSH
32469: LD_VAR 0 4
32473: PUSH
32474: LD_VAR 0 5
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
// exit ;
32485: GO 32778
// end ; if not chassis in _chassis then
32487: LD_VAR 0 2
32491: PUSH
32492: LD_VAR 0 9
32496: IN
32497: NOT
32498: IFFALSE 32524
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32500: LD_ADDR_VAR 0 2
32504: PUSH
32505: LD_VAR 0 9
32509: PUSH
32510: LD_INT 1
32512: PPUSH
32513: LD_VAR 0 9
32517: PPUSH
32518: CALL_OW 12
32522: ARRAY
32523: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32524: LD_VAR 0 2
32528: PPUSH
32529: LD_VAR 0 3
32533: PPUSH
32534: CALL 32783 0 2
32538: NOT
32539: IFFALSE 32598
// repeat engine := _engine [ 1 ] ;
32541: LD_ADDR_VAR 0 3
32545: PUSH
32546: LD_VAR 0 11
32550: PUSH
32551: LD_INT 1
32553: ARRAY
32554: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32555: LD_ADDR_VAR 0 11
32559: PUSH
32560: LD_VAR 0 11
32564: PPUSH
32565: LD_INT 1
32567: PPUSH
32568: CALL_OW 3
32572: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32573: LD_VAR 0 2
32577: PPUSH
32578: LD_VAR 0 3
32582: PPUSH
32583: CALL 32783 0 2
32587: PUSH
32588: LD_VAR 0 11
32592: PUSH
32593: EMPTY
32594: EQUAL
32595: OR
32596: IFFALSE 32541
// if not control in _control then
32598: LD_VAR 0 4
32602: PUSH
32603: LD_VAR 0 12
32607: IN
32608: NOT
32609: IFFALSE 32635
// control := _control [ rand ( 1 , _control ) ] ;
32611: LD_ADDR_VAR 0 4
32615: PUSH
32616: LD_VAR 0 12
32620: PUSH
32621: LD_INT 1
32623: PPUSH
32624: LD_VAR 0 12
32628: PPUSH
32629: CALL_OW 12
32633: ARRAY
32634: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32635: LD_VAR 0 2
32639: PPUSH
32640: LD_VAR 0 5
32644: PPUSH
32645: CALL 33003 0 2
32649: NOT
32650: IFFALSE 32709
// repeat weapon := _weapon [ 1 ] ;
32652: LD_ADDR_VAR 0 5
32656: PUSH
32657: LD_VAR 0 10
32661: PUSH
32662: LD_INT 1
32664: ARRAY
32665: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32666: LD_ADDR_VAR 0 10
32670: PUSH
32671: LD_VAR 0 10
32675: PPUSH
32676: LD_INT 1
32678: PPUSH
32679: CALL_OW 3
32683: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32684: LD_VAR 0 2
32688: PPUSH
32689: LD_VAR 0 5
32693: PPUSH
32694: CALL 33003 0 2
32698: PUSH
32699: LD_VAR 0 10
32703: PUSH
32704: EMPTY
32705: EQUAL
32706: OR
32707: IFFALSE 32652
// result := [ ] ;
32709: LD_ADDR_VAR 0 6
32713: PUSH
32714: EMPTY
32715: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32716: LD_VAR 0 1
32720: PPUSH
32721: LD_VAR 0 2
32725: PPUSH
32726: LD_VAR 0 3
32730: PPUSH
32731: LD_VAR 0 4
32735: PPUSH
32736: LD_VAR 0 5
32740: PPUSH
32741: CALL_OW 448
32745: IFFALSE 32778
// result := [ chassis , engine , control , weapon ] ;
32747: LD_ADDR_VAR 0 6
32751: PUSH
32752: LD_VAR 0 2
32756: PUSH
32757: LD_VAR 0 3
32761: PUSH
32762: LD_VAR 0 4
32766: PUSH
32767: LD_VAR 0 5
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: ST_TO_ADDR
// end ;
32778: LD_VAR 0 6
32782: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32783: LD_INT 0
32785: PPUSH
// if not chassis or not engine then
32786: LD_VAR 0 1
32790: NOT
32791: PUSH
32792: LD_VAR 0 2
32796: NOT
32797: OR
32798: IFFALSE 32802
// exit ;
32800: GO 32998
// case engine of engine_solar :
32802: LD_VAR 0 2
32806: PUSH
32807: LD_INT 2
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32853
32815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_INT 11
32823: PUSH
32824: LD_INT 12
32826: PUSH
32827: LD_INT 13
32829: PUSH
32830: LD_INT 14
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: ST_TO_ADDR
32851: GO 32982
32853: LD_INT 1
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32861
32859: GO 32923
32861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32862: LD_ADDR_VAR 0 3
32866: PUSH
32867: LD_INT 11
32869: PUSH
32870: LD_INT 12
32872: PUSH
32873: LD_INT 13
32875: PUSH
32876: LD_INT 14
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: LD_INT 4
32890: PUSH
32891: LD_INT 5
32893: PUSH
32894: LD_INT 21
32896: PUSH
32897: LD_INT 23
32899: PUSH
32900: LD_INT 22
32902: PUSH
32903: LD_INT 24
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
32921: GO 32982
32923: LD_INT 3
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32931
32929: GO 32981
32931: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32932: LD_ADDR_VAR 0 3
32936: PUSH
32937: LD_INT 13
32939: PUSH
32940: LD_INT 14
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 5
32954: PUSH
32955: LD_INT 21
32957: PUSH
32958: LD_INT 22
32960: PUSH
32961: LD_INT 23
32963: PUSH
32964: LD_INT 24
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: ST_TO_ADDR
32979: GO 32982
32981: POP
// result := ( chassis in result ) ;
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_VAR 0 1
32991: PUSH
32992: LD_VAR 0 3
32996: IN
32997: ST_TO_ADDR
// end ;
32998: LD_VAR 0 3
33002: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33003: LD_INT 0
33005: PPUSH
// if not chassis or not weapon then
33006: LD_VAR 0 1
33010: NOT
33011: PUSH
33012: LD_VAR 0 2
33016: NOT
33017: OR
33018: IFFALSE 33022
// exit ;
33020: GO 34084
// case weapon of us_machine_gun :
33022: LD_VAR 0 2
33026: PUSH
33027: LD_INT 2
33029: DOUBLE
33030: EQUAL
33031: IFTRUE 33035
33033: GO 33065
33035: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33036: LD_ADDR_VAR 0 3
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: LD_INT 4
33052: PUSH
33053: LD_INT 5
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
33063: GO 34068
33065: LD_INT 3
33067: DOUBLE
33068: EQUAL
33069: IFTRUE 33073
33071: GO 33103
33073: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33074: LD_ADDR_VAR 0 3
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: LD_INT 4
33090: PUSH
33091: LD_INT 5
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: ST_TO_ADDR
33101: GO 34068
33103: LD_INT 11
33105: DOUBLE
33106: EQUAL
33107: IFTRUE 33111
33109: GO 33141
33111: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33112: LD_ADDR_VAR 0 3
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: LD_INT 5
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: ST_TO_ADDR
33139: GO 34068
33141: LD_INT 4
33143: DOUBLE
33144: EQUAL
33145: IFTRUE 33149
33147: GO 33175
33149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33150: LD_ADDR_VAR 0 3
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: LD_INT 3
33160: PUSH
33161: LD_INT 4
33163: PUSH
33164: LD_INT 5
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: ST_TO_ADDR
33173: GO 34068
33175: LD_INT 5
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33209
33183: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: LD_INT 3
33194: PUSH
33195: LD_INT 4
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: ST_TO_ADDR
33207: GO 34068
33209: LD_INT 9
33211: DOUBLE
33212: EQUAL
33213: IFTRUE 33217
33215: GO 33243
33217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33218: LD_ADDR_VAR 0 3
33222: PUSH
33223: LD_INT 2
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: LD_INT 4
33231: PUSH
33232: LD_INT 5
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: ST_TO_ADDR
33241: GO 34068
33243: LD_INT 7
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33251
33249: GO 33277
33251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33252: LD_ADDR_VAR 0 3
33256: PUSH
33257: LD_INT 2
33259: PUSH
33260: LD_INT 3
33262: PUSH
33263: LD_INT 4
33265: PUSH
33266: LD_INT 5
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
33275: GO 34068
33277: LD_INT 12
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33311
33285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33286: LD_ADDR_VAR 0 3
33290: PUSH
33291: LD_INT 2
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: LD_INT 4
33299: PUSH
33300: LD_INT 5
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: ST_TO_ADDR
33309: GO 34068
33311: LD_INT 13
33313: DOUBLE
33314: EQUAL
33315: IFTRUE 33319
33317: GO 33345
33319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33320: LD_ADDR_VAR 0 3
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: LD_INT 3
33330: PUSH
33331: LD_INT 4
33333: PUSH
33334: LD_INT 5
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: ST_TO_ADDR
33343: GO 34068
33345: LD_INT 14
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33371
33353: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: LD_INT 4
33361: PUSH
33362: LD_INT 5
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: ST_TO_ADDR
33369: GO 34068
33371: LD_INT 6
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33397
33379: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33380: LD_ADDR_VAR 0 3
33384: PUSH
33385: LD_INT 4
33387: PUSH
33388: LD_INT 5
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: ST_TO_ADDR
33395: GO 34068
33397: LD_INT 10
33399: DOUBLE
33400: EQUAL
33401: IFTRUE 33405
33403: GO 33423
33405: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33406: LD_ADDR_VAR 0 3
33410: PUSH
33411: LD_INT 4
33413: PUSH
33414: LD_INT 5
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: ST_TO_ADDR
33421: GO 34068
33423: LD_INT 22
33425: DOUBLE
33426: EQUAL
33427: IFTRUE 33431
33429: GO 33457
33431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33432: LD_ADDR_VAR 0 3
33436: PUSH
33437: LD_INT 11
33439: PUSH
33440: LD_INT 12
33442: PUSH
33443: LD_INT 13
33445: PUSH
33446: LD_INT 14
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
33455: GO 34068
33457: LD_INT 23
33459: DOUBLE
33460: EQUAL
33461: IFTRUE 33465
33463: GO 33491
33465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33466: LD_ADDR_VAR 0 3
33470: PUSH
33471: LD_INT 11
33473: PUSH
33474: LD_INT 12
33476: PUSH
33477: LD_INT 13
33479: PUSH
33480: LD_INT 14
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: ST_TO_ADDR
33489: GO 34068
33491: LD_INT 24
33493: DOUBLE
33494: EQUAL
33495: IFTRUE 33499
33497: GO 33525
33499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_INT 11
33507: PUSH
33508: LD_INT 12
33510: PUSH
33511: LD_INT 13
33513: PUSH
33514: LD_INT 14
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: ST_TO_ADDR
33523: GO 34068
33525: LD_INT 30
33527: DOUBLE
33528: EQUAL
33529: IFTRUE 33533
33531: GO 33559
33533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33534: LD_ADDR_VAR 0 3
33538: PUSH
33539: LD_INT 11
33541: PUSH
33542: LD_INT 12
33544: PUSH
33545: LD_INT 13
33547: PUSH
33548: LD_INT 14
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: ST_TO_ADDR
33557: GO 34068
33559: LD_INT 25
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33585
33567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33568: LD_ADDR_VAR 0 3
33572: PUSH
33573: LD_INT 13
33575: PUSH
33576: LD_INT 14
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: ST_TO_ADDR
33583: GO 34068
33585: LD_INT 27
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33611
33593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33594: LD_ADDR_VAR 0 3
33598: PUSH
33599: LD_INT 13
33601: PUSH
33602: LD_INT 14
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: ST_TO_ADDR
33609: GO 34068
33611: LD_EXP 100
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33621
33619: GO 33647
33621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33622: LD_ADDR_VAR 0 3
33626: PUSH
33627: LD_INT 11
33629: PUSH
33630: LD_INT 12
33632: PUSH
33633: LD_INT 13
33635: PUSH
33636: LD_INT 14
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: ST_TO_ADDR
33645: GO 34068
33647: LD_INT 28
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33655
33653: GO 33673
33655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 13
33663: PUSH
33664: LD_INT 14
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: ST_TO_ADDR
33671: GO 34068
33673: LD_INT 29
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33681
33679: GO 33699
33681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33682: LD_ADDR_VAR 0 3
33686: PUSH
33687: LD_INT 13
33689: PUSH
33690: LD_INT 14
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: ST_TO_ADDR
33697: GO 34068
33699: LD_INT 31
33701: DOUBLE
33702: EQUAL
33703: IFTRUE 33707
33705: GO 33725
33707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33708: LD_ADDR_VAR 0 3
33712: PUSH
33713: LD_INT 13
33715: PUSH
33716: LD_INT 14
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: ST_TO_ADDR
33723: GO 34068
33725: LD_INT 26
33727: DOUBLE
33728: EQUAL
33729: IFTRUE 33733
33731: GO 33751
33733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33734: LD_ADDR_VAR 0 3
33738: PUSH
33739: LD_INT 13
33741: PUSH
33742: LD_INT 14
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: ST_TO_ADDR
33749: GO 34068
33751: LD_INT 42
33753: DOUBLE
33754: EQUAL
33755: IFTRUE 33759
33757: GO 33785
33759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33760: LD_ADDR_VAR 0 3
33764: PUSH
33765: LD_INT 21
33767: PUSH
33768: LD_INT 22
33770: PUSH
33771: LD_INT 23
33773: PUSH
33774: LD_INT 24
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: ST_TO_ADDR
33783: GO 34068
33785: LD_INT 43
33787: DOUBLE
33788: EQUAL
33789: IFTRUE 33793
33791: GO 33819
33793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33794: LD_ADDR_VAR 0 3
33798: PUSH
33799: LD_INT 21
33801: PUSH
33802: LD_INT 22
33804: PUSH
33805: LD_INT 23
33807: PUSH
33808: LD_INT 24
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: ST_TO_ADDR
33817: GO 34068
33819: LD_INT 44
33821: DOUBLE
33822: EQUAL
33823: IFTRUE 33827
33825: GO 33853
33827: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33828: LD_ADDR_VAR 0 3
33832: PUSH
33833: LD_INT 21
33835: PUSH
33836: LD_INT 22
33838: PUSH
33839: LD_INT 23
33841: PUSH
33842: LD_INT 24
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: ST_TO_ADDR
33851: GO 34068
33853: LD_INT 45
33855: DOUBLE
33856: EQUAL
33857: IFTRUE 33861
33859: GO 33887
33861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33862: LD_ADDR_VAR 0 3
33866: PUSH
33867: LD_INT 21
33869: PUSH
33870: LD_INT 22
33872: PUSH
33873: LD_INT 23
33875: PUSH
33876: LD_INT 24
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: ST_TO_ADDR
33885: GO 34068
33887: LD_INT 49
33889: DOUBLE
33890: EQUAL
33891: IFTRUE 33895
33893: GO 33921
33895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33896: LD_ADDR_VAR 0 3
33900: PUSH
33901: LD_INT 21
33903: PUSH
33904: LD_INT 22
33906: PUSH
33907: LD_INT 23
33909: PUSH
33910: LD_INT 24
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: ST_TO_ADDR
33919: GO 34068
33921: LD_INT 51
33923: DOUBLE
33924: EQUAL
33925: IFTRUE 33929
33927: GO 33955
33929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33930: LD_ADDR_VAR 0 3
33934: PUSH
33935: LD_INT 21
33937: PUSH
33938: LD_INT 22
33940: PUSH
33941: LD_INT 23
33943: PUSH
33944: LD_INT 24
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: ST_TO_ADDR
33953: GO 34068
33955: LD_INT 52
33957: DOUBLE
33958: EQUAL
33959: IFTRUE 33963
33961: GO 33989
33963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33964: LD_ADDR_VAR 0 3
33968: PUSH
33969: LD_INT 21
33971: PUSH
33972: LD_INT 22
33974: PUSH
33975: LD_INT 23
33977: PUSH
33978: LD_INT 24
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: ST_TO_ADDR
33987: GO 34068
33989: LD_INT 53
33991: DOUBLE
33992: EQUAL
33993: IFTRUE 33997
33995: GO 34015
33997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33998: LD_ADDR_VAR 0 3
34002: PUSH
34003: LD_INT 23
34005: PUSH
34006: LD_INT 24
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: ST_TO_ADDR
34013: GO 34068
34015: LD_INT 46
34017: DOUBLE
34018: EQUAL
34019: IFTRUE 34023
34021: GO 34041
34023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34024: LD_ADDR_VAR 0 3
34028: PUSH
34029: LD_INT 23
34031: PUSH
34032: LD_INT 24
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: ST_TO_ADDR
34039: GO 34068
34041: LD_INT 47
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34049
34047: GO 34067
34049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34050: LD_ADDR_VAR 0 3
34054: PUSH
34055: LD_INT 23
34057: PUSH
34058: LD_INT 24
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: ST_TO_ADDR
34065: GO 34068
34067: POP
// result := ( chassis in result ) ;
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: LD_VAR 0 1
34077: PUSH
34078: LD_VAR 0 3
34082: IN
34083: ST_TO_ADDR
// end ;
34084: LD_VAR 0 3
34088: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34089: LD_INT 0
34091: PPUSH
34092: PPUSH
34093: PPUSH
34094: PPUSH
34095: PPUSH
34096: PPUSH
34097: PPUSH
// result := array ;
34098: LD_ADDR_VAR 0 5
34102: PUSH
34103: LD_VAR 0 1
34107: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34108: LD_VAR 0 1
34112: NOT
34113: PUSH
34114: LD_VAR 0 2
34118: NOT
34119: OR
34120: PUSH
34121: LD_VAR 0 3
34125: NOT
34126: OR
34127: PUSH
34128: LD_VAR 0 2
34132: PUSH
34133: LD_VAR 0 1
34137: GREATER
34138: OR
34139: PUSH
34140: LD_VAR 0 3
34144: PUSH
34145: LD_VAR 0 1
34149: GREATER
34150: OR
34151: IFFALSE 34155
// exit ;
34153: GO 34451
// if direction then
34155: LD_VAR 0 4
34159: IFFALSE 34223
// begin d := 1 ;
34161: LD_ADDR_VAR 0 9
34165: PUSH
34166: LD_INT 1
34168: ST_TO_ADDR
// if i_from > i_to then
34169: LD_VAR 0 2
34173: PUSH
34174: LD_VAR 0 3
34178: GREATER
34179: IFFALSE 34205
// length := ( array - i_from ) + i_to else
34181: LD_ADDR_VAR 0 11
34185: PUSH
34186: LD_VAR 0 1
34190: PUSH
34191: LD_VAR 0 2
34195: MINUS
34196: PUSH
34197: LD_VAR 0 3
34201: PLUS
34202: ST_TO_ADDR
34203: GO 34221
// length := i_to - i_from ;
34205: LD_ADDR_VAR 0 11
34209: PUSH
34210: LD_VAR 0 3
34214: PUSH
34215: LD_VAR 0 2
34219: MINUS
34220: ST_TO_ADDR
// end else
34221: GO 34284
// begin d := - 1 ;
34223: LD_ADDR_VAR 0 9
34227: PUSH
34228: LD_INT 1
34230: NEG
34231: ST_TO_ADDR
// if i_from > i_to then
34232: LD_VAR 0 2
34236: PUSH
34237: LD_VAR 0 3
34241: GREATER
34242: IFFALSE 34262
// length := i_from - i_to else
34244: LD_ADDR_VAR 0 11
34248: PUSH
34249: LD_VAR 0 2
34253: PUSH
34254: LD_VAR 0 3
34258: MINUS
34259: ST_TO_ADDR
34260: GO 34284
// length := ( array - i_to ) + i_from ;
34262: LD_ADDR_VAR 0 11
34266: PUSH
34267: LD_VAR 0 1
34271: PUSH
34272: LD_VAR 0 3
34276: MINUS
34277: PUSH
34278: LD_VAR 0 2
34282: PLUS
34283: ST_TO_ADDR
// end ; if not length then
34284: LD_VAR 0 11
34288: NOT
34289: IFFALSE 34293
// exit ;
34291: GO 34451
// tmp := array ;
34293: LD_ADDR_VAR 0 10
34297: PUSH
34298: LD_VAR 0 1
34302: ST_TO_ADDR
// for i = 1 to length do
34303: LD_ADDR_VAR 0 6
34307: PUSH
34308: DOUBLE
34309: LD_INT 1
34311: DEC
34312: ST_TO_ADDR
34313: LD_VAR 0 11
34317: PUSH
34318: FOR_TO
34319: IFFALSE 34439
// begin for j = 1 to array do
34321: LD_ADDR_VAR 0 7
34325: PUSH
34326: DOUBLE
34327: LD_INT 1
34329: DEC
34330: ST_TO_ADDR
34331: LD_VAR 0 1
34335: PUSH
34336: FOR_TO
34337: IFFALSE 34425
// begin k := j + d ;
34339: LD_ADDR_VAR 0 8
34343: PUSH
34344: LD_VAR 0 7
34348: PUSH
34349: LD_VAR 0 9
34353: PLUS
34354: ST_TO_ADDR
// if k > array then
34355: LD_VAR 0 8
34359: PUSH
34360: LD_VAR 0 1
34364: GREATER
34365: IFFALSE 34375
// k := 1 ;
34367: LD_ADDR_VAR 0 8
34371: PUSH
34372: LD_INT 1
34374: ST_TO_ADDR
// if not k then
34375: LD_VAR 0 8
34379: NOT
34380: IFFALSE 34392
// k := array ;
34382: LD_ADDR_VAR 0 8
34386: PUSH
34387: LD_VAR 0 1
34391: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34392: LD_ADDR_VAR 0 10
34396: PUSH
34397: LD_VAR 0 10
34401: PPUSH
34402: LD_VAR 0 8
34406: PPUSH
34407: LD_VAR 0 1
34411: PUSH
34412: LD_VAR 0 7
34416: ARRAY
34417: PPUSH
34418: CALL_OW 1
34422: ST_TO_ADDR
// end ;
34423: GO 34336
34425: POP
34426: POP
// array := tmp ;
34427: LD_ADDR_VAR 0 1
34431: PUSH
34432: LD_VAR 0 10
34436: ST_TO_ADDR
// end ;
34437: GO 34318
34439: POP
34440: POP
// result := array ;
34441: LD_ADDR_VAR 0 5
34445: PUSH
34446: LD_VAR 0 1
34450: ST_TO_ADDR
// end ;
34451: LD_VAR 0 5
34455: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34456: LD_INT 0
34458: PPUSH
34459: PPUSH
// result := 0 ;
34460: LD_ADDR_VAR 0 3
34464: PUSH
34465: LD_INT 0
34467: ST_TO_ADDR
// if not array or not value in array then
34468: LD_VAR 0 1
34472: NOT
34473: PUSH
34474: LD_VAR 0 2
34478: PUSH
34479: LD_VAR 0 1
34483: IN
34484: NOT
34485: OR
34486: IFFALSE 34490
// exit ;
34488: GO 34544
// for i = 1 to array do
34490: LD_ADDR_VAR 0 4
34494: PUSH
34495: DOUBLE
34496: LD_INT 1
34498: DEC
34499: ST_TO_ADDR
34500: LD_VAR 0 1
34504: PUSH
34505: FOR_TO
34506: IFFALSE 34542
// if value = array [ i ] then
34508: LD_VAR 0 2
34512: PUSH
34513: LD_VAR 0 1
34517: PUSH
34518: LD_VAR 0 4
34522: ARRAY
34523: EQUAL
34524: IFFALSE 34540
// begin result := i ;
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_VAR 0 4
34535: ST_TO_ADDR
// exit ;
34536: POP
34537: POP
34538: GO 34544
// end ;
34540: GO 34505
34542: POP
34543: POP
// end ;
34544: LD_VAR 0 3
34548: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34549: LD_INT 0
34551: PPUSH
// vc_chassis := chassis ;
34552: LD_ADDR_OWVAR 37
34556: PUSH
34557: LD_VAR 0 1
34561: ST_TO_ADDR
// vc_engine := engine ;
34562: LD_ADDR_OWVAR 39
34566: PUSH
34567: LD_VAR 0 2
34571: ST_TO_ADDR
// vc_control := control ;
34572: LD_ADDR_OWVAR 38
34576: PUSH
34577: LD_VAR 0 3
34581: ST_TO_ADDR
// vc_weapon := weapon ;
34582: LD_ADDR_OWVAR 40
34586: PUSH
34587: LD_VAR 0 4
34591: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34592: LD_ADDR_OWVAR 41
34596: PUSH
34597: LD_VAR 0 5
34601: ST_TO_ADDR
// end ;
34602: LD_VAR 0 6
34606: RET
// export function WantPlant ( unit ) ; var task ; begin
34607: LD_INT 0
34609: PPUSH
34610: PPUSH
// result := false ;
34611: LD_ADDR_VAR 0 2
34615: PUSH
34616: LD_INT 0
34618: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34619: LD_ADDR_VAR 0 3
34623: PUSH
34624: LD_VAR 0 1
34628: PPUSH
34629: CALL_OW 437
34633: ST_TO_ADDR
// if task then
34634: LD_VAR 0 3
34638: IFFALSE 34666
// if task [ 1 ] [ 1 ] = p then
34640: LD_VAR 0 3
34644: PUSH
34645: LD_INT 1
34647: ARRAY
34648: PUSH
34649: LD_INT 1
34651: ARRAY
34652: PUSH
34653: LD_STRING p
34655: EQUAL
34656: IFFALSE 34666
// result := true ;
34658: LD_ADDR_VAR 0 2
34662: PUSH
34663: LD_INT 1
34665: ST_TO_ADDR
// end ;
34666: LD_VAR 0 2
34670: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34671: LD_INT 0
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
// if pos < 1 then
34677: LD_VAR 0 2
34681: PUSH
34682: LD_INT 1
34684: LESS
34685: IFFALSE 34689
// exit ;
34687: GO 34992
// if pos = 1 then
34689: LD_VAR 0 2
34693: PUSH
34694: LD_INT 1
34696: EQUAL
34697: IFFALSE 34730
// result := Replace ( arr , pos [ 1 ] , value ) else
34699: LD_ADDR_VAR 0 4
34703: PUSH
34704: LD_VAR 0 1
34708: PPUSH
34709: LD_VAR 0 2
34713: PUSH
34714: LD_INT 1
34716: ARRAY
34717: PPUSH
34718: LD_VAR 0 3
34722: PPUSH
34723: CALL_OW 1
34727: ST_TO_ADDR
34728: GO 34992
// begin tmp := arr ;
34730: LD_ADDR_VAR 0 6
34734: PUSH
34735: LD_VAR 0 1
34739: ST_TO_ADDR
// s_arr := [ tmp ] ;
34740: LD_ADDR_VAR 0 7
34744: PUSH
34745: LD_VAR 0 6
34749: PUSH
34750: EMPTY
34751: LIST
34752: ST_TO_ADDR
// for i = 1 to pos - 1 do
34753: LD_ADDR_VAR 0 5
34757: PUSH
34758: DOUBLE
34759: LD_INT 1
34761: DEC
34762: ST_TO_ADDR
34763: LD_VAR 0 2
34767: PUSH
34768: LD_INT 1
34770: MINUS
34771: PUSH
34772: FOR_TO
34773: IFFALSE 34818
// begin tmp := tmp [ pos [ i ] ] ;
34775: LD_ADDR_VAR 0 6
34779: PUSH
34780: LD_VAR 0 6
34784: PUSH
34785: LD_VAR 0 2
34789: PUSH
34790: LD_VAR 0 5
34794: ARRAY
34795: ARRAY
34796: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34797: LD_ADDR_VAR 0 7
34801: PUSH
34802: LD_VAR 0 7
34806: PUSH
34807: LD_VAR 0 6
34811: PUSH
34812: EMPTY
34813: LIST
34814: ADD
34815: ST_TO_ADDR
// end ;
34816: GO 34772
34818: POP
34819: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34820: LD_ADDR_VAR 0 6
34824: PUSH
34825: LD_VAR 0 6
34829: PPUSH
34830: LD_VAR 0 2
34834: PUSH
34835: LD_VAR 0 2
34839: ARRAY
34840: PPUSH
34841: LD_VAR 0 3
34845: PPUSH
34846: CALL_OW 1
34850: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34851: LD_ADDR_VAR 0 7
34855: PUSH
34856: LD_VAR 0 7
34860: PPUSH
34861: LD_VAR 0 7
34865: PPUSH
34866: LD_VAR 0 6
34870: PPUSH
34871: CALL_OW 1
34875: ST_TO_ADDR
// for i = s_arr downto 2 do
34876: LD_ADDR_VAR 0 5
34880: PUSH
34881: DOUBLE
34882: LD_VAR 0 7
34886: INC
34887: ST_TO_ADDR
34888: LD_INT 2
34890: PUSH
34891: FOR_DOWNTO
34892: IFFALSE 34976
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34894: LD_ADDR_VAR 0 6
34898: PUSH
34899: LD_VAR 0 7
34903: PUSH
34904: LD_VAR 0 5
34908: PUSH
34909: LD_INT 1
34911: MINUS
34912: ARRAY
34913: PPUSH
34914: LD_VAR 0 2
34918: PUSH
34919: LD_VAR 0 5
34923: PUSH
34924: LD_INT 1
34926: MINUS
34927: ARRAY
34928: PPUSH
34929: LD_VAR 0 7
34933: PUSH
34934: LD_VAR 0 5
34938: ARRAY
34939: PPUSH
34940: CALL_OW 1
34944: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34945: LD_ADDR_VAR 0 7
34949: PUSH
34950: LD_VAR 0 7
34954: PPUSH
34955: LD_VAR 0 5
34959: PUSH
34960: LD_INT 1
34962: MINUS
34963: PPUSH
34964: LD_VAR 0 6
34968: PPUSH
34969: CALL_OW 1
34973: ST_TO_ADDR
// end ;
34974: GO 34891
34976: POP
34977: POP
// result := s_arr [ 1 ] ;
34978: LD_ADDR_VAR 0 4
34982: PUSH
34983: LD_VAR 0 7
34987: PUSH
34988: LD_INT 1
34990: ARRAY
34991: ST_TO_ADDR
// end ; end ;
34992: LD_VAR 0 4
34996: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34997: LD_INT 0
34999: PPUSH
35000: PPUSH
// if not list then
35001: LD_VAR 0 1
35005: NOT
35006: IFFALSE 35010
// exit ;
35008: GO 35101
// i := list [ pos1 ] ;
35010: LD_ADDR_VAR 0 5
35014: PUSH
35015: LD_VAR 0 1
35019: PUSH
35020: LD_VAR 0 2
35024: ARRAY
35025: ST_TO_ADDR
// if not i then
35026: LD_VAR 0 5
35030: NOT
35031: IFFALSE 35035
// exit ;
35033: GO 35101
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35035: LD_ADDR_VAR 0 1
35039: PUSH
35040: LD_VAR 0 1
35044: PPUSH
35045: LD_VAR 0 2
35049: PPUSH
35050: LD_VAR 0 1
35054: PUSH
35055: LD_VAR 0 3
35059: ARRAY
35060: PPUSH
35061: CALL_OW 1
35065: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35066: LD_ADDR_VAR 0 1
35070: PUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: LD_VAR 0 3
35080: PPUSH
35081: LD_VAR 0 5
35085: PPUSH
35086: CALL_OW 1
35090: ST_TO_ADDR
// result := list ;
35091: LD_ADDR_VAR 0 4
35095: PUSH
35096: LD_VAR 0 1
35100: ST_TO_ADDR
// end ;
35101: LD_VAR 0 4
35105: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35106: LD_INT 0
35108: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35109: LD_ADDR_VAR 0 5
35113: PUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: CALL_OW 250
35123: PPUSH
35124: LD_VAR 0 1
35128: PPUSH
35129: CALL_OW 251
35133: PPUSH
35134: LD_VAR 0 2
35138: PPUSH
35139: LD_VAR 0 3
35143: PPUSH
35144: LD_VAR 0 4
35148: PPUSH
35149: CALL 35159 0 5
35153: ST_TO_ADDR
// end ;
35154: LD_VAR 0 5
35158: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35159: LD_INT 0
35161: PPUSH
35162: PPUSH
35163: PPUSH
35164: PPUSH
// if not list then
35165: LD_VAR 0 3
35169: NOT
35170: IFFALSE 35174
// exit ;
35172: GO 35562
// result := [ ] ;
35174: LD_ADDR_VAR 0 6
35178: PUSH
35179: EMPTY
35180: ST_TO_ADDR
// for i in list do
35181: LD_ADDR_VAR 0 7
35185: PUSH
35186: LD_VAR 0 3
35190: PUSH
35191: FOR_IN
35192: IFFALSE 35394
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35194: LD_ADDR_VAR 0 9
35198: PUSH
35199: LD_VAR 0 7
35203: PPUSH
35204: LD_VAR 0 1
35208: PPUSH
35209: LD_VAR 0 2
35213: PPUSH
35214: CALL_OW 297
35218: ST_TO_ADDR
// if not result then
35219: LD_VAR 0 6
35223: NOT
35224: IFFALSE 35250
// result := [ [ i , tmp ] ] else
35226: LD_ADDR_VAR 0 6
35230: PUSH
35231: LD_VAR 0 7
35235: PUSH
35236: LD_VAR 0 9
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: EMPTY
35246: LIST
35247: ST_TO_ADDR
35248: GO 35392
// begin if result [ result ] [ 2 ] < tmp then
35250: LD_VAR 0 6
35254: PUSH
35255: LD_VAR 0 6
35259: ARRAY
35260: PUSH
35261: LD_INT 2
35263: ARRAY
35264: PUSH
35265: LD_VAR 0 9
35269: LESS
35270: IFFALSE 35312
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35272: LD_ADDR_VAR 0 6
35276: PUSH
35277: LD_VAR 0 6
35281: PPUSH
35282: LD_VAR 0 6
35286: PUSH
35287: LD_INT 1
35289: PLUS
35290: PPUSH
35291: LD_VAR 0 7
35295: PUSH
35296: LD_VAR 0 9
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PPUSH
35305: CALL_OW 2
35309: ST_TO_ADDR
35310: GO 35392
// for j = 1 to result do
35312: LD_ADDR_VAR 0 8
35316: PUSH
35317: DOUBLE
35318: LD_INT 1
35320: DEC
35321: ST_TO_ADDR
35322: LD_VAR 0 6
35326: PUSH
35327: FOR_TO
35328: IFFALSE 35390
// begin if tmp < result [ j ] [ 2 ] then
35330: LD_VAR 0 9
35334: PUSH
35335: LD_VAR 0 6
35339: PUSH
35340: LD_VAR 0 8
35344: ARRAY
35345: PUSH
35346: LD_INT 2
35348: ARRAY
35349: LESS
35350: IFFALSE 35388
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35352: LD_ADDR_VAR 0 6
35356: PUSH
35357: LD_VAR 0 6
35361: PPUSH
35362: LD_VAR 0 8
35366: PPUSH
35367: LD_VAR 0 7
35371: PUSH
35372: LD_VAR 0 9
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PPUSH
35381: CALL_OW 2
35385: ST_TO_ADDR
// break ;
35386: GO 35390
// end ; end ;
35388: GO 35327
35390: POP
35391: POP
// end ; end ;
35392: GO 35191
35394: POP
35395: POP
// if result and not asc then
35396: LD_VAR 0 6
35400: PUSH
35401: LD_VAR 0 4
35405: NOT
35406: AND
35407: IFFALSE 35482
// begin tmp := result ;
35409: LD_ADDR_VAR 0 9
35413: PUSH
35414: LD_VAR 0 6
35418: ST_TO_ADDR
// for i = tmp downto 1 do
35419: LD_ADDR_VAR 0 7
35423: PUSH
35424: DOUBLE
35425: LD_VAR 0 9
35429: INC
35430: ST_TO_ADDR
35431: LD_INT 1
35433: PUSH
35434: FOR_DOWNTO
35435: IFFALSE 35480
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35437: LD_ADDR_VAR 0 6
35441: PUSH
35442: LD_VAR 0 6
35446: PPUSH
35447: LD_VAR 0 9
35451: PUSH
35452: LD_VAR 0 7
35456: MINUS
35457: PUSH
35458: LD_INT 1
35460: PLUS
35461: PPUSH
35462: LD_VAR 0 9
35466: PUSH
35467: LD_VAR 0 7
35471: ARRAY
35472: PPUSH
35473: CALL_OW 1
35477: ST_TO_ADDR
35478: GO 35434
35480: POP
35481: POP
// end ; tmp := [ ] ;
35482: LD_ADDR_VAR 0 9
35486: PUSH
35487: EMPTY
35488: ST_TO_ADDR
// if mode then
35489: LD_VAR 0 5
35493: IFFALSE 35562
// begin for i = 1 to result do
35495: LD_ADDR_VAR 0 7
35499: PUSH
35500: DOUBLE
35501: LD_INT 1
35503: DEC
35504: ST_TO_ADDR
35505: LD_VAR 0 6
35509: PUSH
35510: FOR_TO
35511: IFFALSE 35550
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35513: LD_ADDR_VAR 0 9
35517: PUSH
35518: LD_VAR 0 9
35522: PPUSH
35523: LD_VAR 0 7
35527: PPUSH
35528: LD_VAR 0 6
35532: PUSH
35533: LD_VAR 0 7
35537: ARRAY
35538: PUSH
35539: LD_INT 1
35541: ARRAY
35542: PPUSH
35543: CALL_OW 1
35547: ST_TO_ADDR
35548: GO 35510
35550: POP
35551: POP
// result := tmp ;
35552: LD_ADDR_VAR 0 6
35556: PUSH
35557: LD_VAR 0 9
35561: ST_TO_ADDR
// end ; end ;
35562: LD_VAR 0 6
35566: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35567: LD_INT 0
35569: PPUSH
35570: PPUSH
35571: PPUSH
35572: PPUSH
35573: PPUSH
35574: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35575: LD_ADDR_VAR 0 5
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: ST_TO_ADDR
// if not x or not y then
35597: LD_VAR 0 2
35601: NOT
35602: PUSH
35603: LD_VAR 0 3
35607: NOT
35608: OR
35609: IFFALSE 35613
// exit ;
35611: GO 37265
// if not range then
35613: LD_VAR 0 4
35617: NOT
35618: IFFALSE 35628
// range := 10 ;
35620: LD_ADDR_VAR 0 4
35624: PUSH
35625: LD_INT 10
35627: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35628: LD_ADDR_VAR 0 8
35632: PUSH
35633: LD_INT 81
35635: PUSH
35636: LD_VAR 0 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 92
35647: PUSH
35648: LD_VAR 0 2
35652: PUSH
35653: LD_VAR 0 3
35657: PUSH
35658: LD_VAR 0 4
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: LD_INT 21
35674: PUSH
35675: LD_INT 3
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: PPUSH
35691: CALL_OW 69
35695: ST_TO_ADDR
// if not tmp then
35696: LD_VAR 0 8
35700: NOT
35701: IFFALSE 35705
// exit ;
35703: GO 37265
// for i in tmp do
35705: LD_ADDR_VAR 0 6
35709: PUSH
35710: LD_VAR 0 8
35714: PUSH
35715: FOR_IN
35716: IFFALSE 37240
// begin points := [ 0 , 0 , 0 ] ;
35718: LD_ADDR_VAR 0 9
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: ST_TO_ADDR
// bpoints := 1 ;
35737: LD_ADDR_VAR 0 10
35741: PUSH
35742: LD_INT 1
35744: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35745: LD_VAR 0 6
35749: PPUSH
35750: CALL_OW 247
35754: PUSH
35755: LD_INT 1
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35763
35761: GO 36341
35763: POP
// begin if GetClass ( i ) = 1 then
35764: LD_VAR 0 6
35768: PPUSH
35769: CALL_OW 257
35773: PUSH
35774: LD_INT 1
35776: EQUAL
35777: IFFALSE 35798
// points := [ 10 , 5 , 3 ] ;
35779: LD_ADDR_VAR 0 9
35783: PUSH
35784: LD_INT 10
35786: PUSH
35787: LD_INT 5
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35798: LD_VAR 0 6
35802: PPUSH
35803: CALL_OW 257
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: LD_INT 4
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: IN
35822: IFFALSE 35843
// points := [ 3 , 2 , 1 ] ;
35824: LD_ADDR_VAR 0 9
35828: PUSH
35829: LD_INT 3
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35843: LD_VAR 0 6
35847: PPUSH
35848: CALL_OW 257
35852: PUSH
35853: LD_INT 5
35855: EQUAL
35856: IFFALSE 35877
// points := [ 130 , 5 , 2 ] ;
35858: LD_ADDR_VAR 0 9
35862: PUSH
35863: LD_INT 130
35865: PUSH
35866: LD_INT 5
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35877: LD_VAR 0 6
35881: PPUSH
35882: CALL_OW 257
35886: PUSH
35887: LD_INT 8
35889: EQUAL
35890: IFFALSE 35911
// points := [ 35 , 35 , 30 ] ;
35892: LD_ADDR_VAR 0 9
35896: PUSH
35897: LD_INT 35
35899: PUSH
35900: LD_INT 35
35902: PUSH
35903: LD_INT 30
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL_OW 257
35920: PUSH
35921: LD_INT 9
35923: EQUAL
35924: IFFALSE 35945
// points := [ 20 , 55 , 40 ] ;
35926: LD_ADDR_VAR 0 9
35930: PUSH
35931: LD_INT 20
35933: PUSH
35934: LD_INT 55
35936: PUSH
35937: LD_INT 40
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35945: LD_VAR 0 6
35949: PPUSH
35950: CALL_OW 257
35954: PUSH
35955: LD_INT 12
35957: PUSH
35958: LD_INT 16
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: IN
35965: IFFALSE 35986
// points := [ 5 , 3 , 2 ] ;
35967: LD_ADDR_VAR 0 9
35971: PUSH
35972: LD_INT 5
35974: PUSH
35975: LD_INT 3
35977: PUSH
35978: LD_INT 2
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35986: LD_VAR 0 6
35990: PPUSH
35991: CALL_OW 257
35995: PUSH
35996: LD_INT 17
35998: EQUAL
35999: IFFALSE 36020
// points := [ 100 , 50 , 75 ] ;
36001: LD_ADDR_VAR 0 9
36005: PUSH
36006: LD_INT 100
36008: PUSH
36009: LD_INT 50
36011: PUSH
36012: LD_INT 75
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36020: LD_VAR 0 6
36024: PPUSH
36025: CALL_OW 257
36029: PUSH
36030: LD_INT 15
36032: EQUAL
36033: IFFALSE 36054
// points := [ 10 , 5 , 3 ] ;
36035: LD_ADDR_VAR 0 9
36039: PUSH
36040: LD_INT 10
36042: PUSH
36043: LD_INT 5
36045: PUSH
36046: LD_INT 3
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36054: LD_VAR 0 6
36058: PPUSH
36059: CALL_OW 257
36063: PUSH
36064: LD_INT 14
36066: EQUAL
36067: IFFALSE 36088
// points := [ 10 , 0 , 0 ] ;
36069: LD_ADDR_VAR 0 9
36073: PUSH
36074: LD_INT 10
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36088: LD_VAR 0 6
36092: PPUSH
36093: CALL_OW 257
36097: PUSH
36098: LD_INT 11
36100: EQUAL
36101: IFFALSE 36122
// points := [ 30 , 10 , 5 ] ;
36103: LD_ADDR_VAR 0 9
36107: PUSH
36108: LD_INT 30
36110: PUSH
36111: LD_INT 10
36113: PUSH
36114: LD_INT 5
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36122: LD_VAR 0 1
36126: PPUSH
36127: LD_INT 5
36129: PPUSH
36130: CALL_OW 321
36134: PUSH
36135: LD_INT 2
36137: EQUAL
36138: IFFALSE 36155
// bpoints := bpoints * 1.8 ;
36140: LD_ADDR_VAR 0 10
36144: PUSH
36145: LD_VAR 0 10
36149: PUSH
36150: LD_REAL  1.80000000000000E+0000
36153: MUL
36154: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36155: LD_VAR 0 6
36159: PPUSH
36160: CALL_OW 257
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: LD_INT 4
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: IN
36183: PUSH
36184: LD_VAR 0 1
36188: PPUSH
36189: LD_INT 51
36191: PPUSH
36192: CALL_OW 321
36196: PUSH
36197: LD_INT 2
36199: EQUAL
36200: AND
36201: IFFALSE 36218
// bpoints := bpoints * 1.2 ;
36203: LD_ADDR_VAR 0 10
36207: PUSH
36208: LD_VAR 0 10
36212: PUSH
36213: LD_REAL  1.20000000000000E+0000
36216: MUL
36217: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36218: LD_VAR 0 6
36222: PPUSH
36223: CALL_OW 257
36227: PUSH
36228: LD_INT 5
36230: PUSH
36231: LD_INT 7
36233: PUSH
36234: LD_INT 9
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: IN
36242: PUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: LD_INT 52
36250: PPUSH
36251: CALL_OW 321
36255: PUSH
36256: LD_INT 2
36258: EQUAL
36259: AND
36260: IFFALSE 36277
// bpoints := bpoints * 1.5 ;
36262: LD_ADDR_VAR 0 10
36266: PUSH
36267: LD_VAR 0 10
36271: PUSH
36272: LD_REAL  1.50000000000000E+0000
36275: MUL
36276: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36277: LD_VAR 0 1
36281: PPUSH
36282: LD_INT 66
36284: PPUSH
36285: CALL_OW 321
36289: PUSH
36290: LD_INT 2
36292: EQUAL
36293: IFFALSE 36310
// bpoints := bpoints * 1.1 ;
36295: LD_ADDR_VAR 0 10
36299: PUSH
36300: LD_VAR 0 10
36304: PUSH
36305: LD_REAL  1.10000000000000E+0000
36308: MUL
36309: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36310: LD_ADDR_VAR 0 10
36314: PUSH
36315: LD_VAR 0 10
36319: PUSH
36320: LD_VAR 0 6
36324: PPUSH
36325: LD_INT 1
36327: PPUSH
36328: CALL_OW 259
36332: PUSH
36333: LD_REAL  1.15000000000000E+0000
36336: MUL
36337: MUL
36338: ST_TO_ADDR
// end ; unit_vehicle :
36339: GO 37169
36341: LD_INT 2
36343: DOUBLE
36344: EQUAL
36345: IFTRUE 36349
36347: GO 37157
36349: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36350: LD_VAR 0 6
36354: PPUSH
36355: CALL_OW 264
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: LD_INT 42
36365: PUSH
36366: LD_INT 24
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: IN
36374: IFFALSE 36395
// points := [ 25 , 5 , 3 ] ;
36376: LD_ADDR_VAR 0 9
36380: PUSH
36381: LD_INT 25
36383: PUSH
36384: LD_INT 5
36386: PUSH
36387: LD_INT 3
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36395: LD_VAR 0 6
36399: PPUSH
36400: CALL_OW 264
36404: PUSH
36405: LD_INT 4
36407: PUSH
36408: LD_INT 43
36410: PUSH
36411: LD_INT 25
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: IN
36419: IFFALSE 36440
// points := [ 40 , 15 , 5 ] ;
36421: LD_ADDR_VAR 0 9
36425: PUSH
36426: LD_INT 40
36428: PUSH
36429: LD_INT 15
36431: PUSH
36432: LD_INT 5
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36440: LD_VAR 0 6
36444: PPUSH
36445: CALL_OW 264
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: LD_INT 23
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: IN
36460: IFFALSE 36481
// points := [ 7 , 25 , 8 ] ;
36462: LD_ADDR_VAR 0 9
36466: PUSH
36467: LD_INT 7
36469: PUSH
36470: LD_INT 25
36472: PUSH
36473: LD_INT 8
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36481: LD_VAR 0 6
36485: PPUSH
36486: CALL_OW 264
36490: PUSH
36491: LD_INT 5
36493: PUSH
36494: LD_INT 27
36496: PUSH
36497: LD_INT 44
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: LIST
36504: IN
36505: IFFALSE 36526
// points := [ 14 , 50 , 16 ] ;
36507: LD_ADDR_VAR 0 9
36511: PUSH
36512: LD_INT 14
36514: PUSH
36515: LD_INT 50
36517: PUSH
36518: LD_INT 16
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36526: LD_VAR 0 6
36530: PPUSH
36531: CALL_OW 264
36535: PUSH
36536: LD_INT 6
36538: PUSH
36539: LD_INT 46
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: IN
36546: IFFALSE 36567
// points := [ 32 , 120 , 70 ] ;
36548: LD_ADDR_VAR 0 9
36552: PUSH
36553: LD_INT 32
36555: PUSH
36556: LD_INT 120
36558: PUSH
36559: LD_INT 70
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36567: LD_VAR 0 6
36571: PPUSH
36572: CALL_OW 264
36576: PUSH
36577: LD_INT 7
36579: PUSH
36580: LD_INT 28
36582: PUSH
36583: LD_INT 45
36585: PUSH
36586: LD_EXP 100
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: IN
36597: IFFALSE 36618
// points := [ 35 , 20 , 45 ] ;
36599: LD_ADDR_VAR 0 9
36603: PUSH
36604: LD_INT 35
36606: PUSH
36607: LD_INT 20
36609: PUSH
36610: LD_INT 45
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36618: LD_VAR 0 6
36622: PPUSH
36623: CALL_OW 264
36627: PUSH
36628: LD_INT 47
36630: PUSH
36631: EMPTY
36632: LIST
36633: IN
36634: IFFALSE 36655
// points := [ 67 , 45 , 75 ] ;
36636: LD_ADDR_VAR 0 9
36640: PUSH
36641: LD_INT 67
36643: PUSH
36644: LD_INT 45
36646: PUSH
36647: LD_INT 75
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36655: LD_VAR 0 6
36659: PPUSH
36660: CALL_OW 264
36664: PUSH
36665: LD_INT 26
36667: PUSH
36668: EMPTY
36669: LIST
36670: IN
36671: IFFALSE 36692
// points := [ 120 , 30 , 80 ] ;
36673: LD_ADDR_VAR 0 9
36677: PUSH
36678: LD_INT 120
36680: PUSH
36681: LD_INT 30
36683: PUSH
36684: LD_INT 80
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36692: LD_VAR 0 6
36696: PPUSH
36697: CALL_OW 264
36701: PUSH
36702: LD_INT 22
36704: PUSH
36705: EMPTY
36706: LIST
36707: IN
36708: IFFALSE 36729
// points := [ 40 , 1 , 1 ] ;
36710: LD_ADDR_VAR 0 9
36714: PUSH
36715: LD_INT 40
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36729: LD_VAR 0 6
36733: PPUSH
36734: CALL_OW 264
36738: PUSH
36739: LD_INT 29
36741: PUSH
36742: EMPTY
36743: LIST
36744: IN
36745: IFFALSE 36766
// points := [ 70 , 200 , 400 ] ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: LD_INT 70
36754: PUSH
36755: LD_INT 200
36757: PUSH
36758: LD_INT 400
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36766: LD_VAR 0 6
36770: PPUSH
36771: CALL_OW 264
36775: PUSH
36776: LD_INT 14
36778: PUSH
36779: LD_INT 53
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: IN
36786: IFFALSE 36807
// points := [ 40 , 10 , 20 ] ;
36788: LD_ADDR_VAR 0 9
36792: PUSH
36793: LD_INT 40
36795: PUSH
36796: LD_INT 10
36798: PUSH
36799: LD_INT 20
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36807: LD_VAR 0 6
36811: PPUSH
36812: CALL_OW 264
36816: PUSH
36817: LD_INT 9
36819: PUSH
36820: EMPTY
36821: LIST
36822: IN
36823: IFFALSE 36844
// points := [ 5 , 70 , 20 ] ;
36825: LD_ADDR_VAR 0 9
36829: PUSH
36830: LD_INT 5
36832: PUSH
36833: LD_INT 70
36835: PUSH
36836: LD_INT 20
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36844: LD_VAR 0 6
36848: PPUSH
36849: CALL_OW 264
36853: PUSH
36854: LD_INT 10
36856: PUSH
36857: EMPTY
36858: LIST
36859: IN
36860: IFFALSE 36881
// points := [ 35 , 110 , 70 ] ;
36862: LD_ADDR_VAR 0 9
36866: PUSH
36867: LD_INT 35
36869: PUSH
36870: LD_INT 110
36872: PUSH
36873: LD_INT 70
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36881: LD_VAR 0 6
36885: PPUSH
36886: CALL_OW 265
36890: PUSH
36891: LD_INT 25
36893: EQUAL
36894: IFFALSE 36915
// points := [ 80 , 65 , 100 ] ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_INT 80
36903: PUSH
36904: LD_INT 65
36906: PUSH
36907: LD_INT 100
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36915: LD_VAR 0 6
36919: PPUSH
36920: CALL_OW 263
36924: PUSH
36925: LD_INT 1
36927: EQUAL
36928: IFFALSE 36963
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36930: LD_ADDR_VAR 0 10
36934: PUSH
36935: LD_VAR 0 10
36939: PUSH
36940: LD_VAR 0 6
36944: PPUSH
36945: CALL_OW 311
36949: PPUSH
36950: LD_INT 3
36952: PPUSH
36953: CALL_OW 259
36957: PUSH
36958: LD_INT 4
36960: MUL
36961: MUL
36962: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36963: LD_VAR 0 6
36967: PPUSH
36968: CALL_OW 263
36972: PUSH
36973: LD_INT 2
36975: EQUAL
36976: IFFALSE 37027
// begin j := IsControledBy ( i ) ;
36978: LD_ADDR_VAR 0 7
36982: PUSH
36983: LD_VAR 0 6
36987: PPUSH
36988: CALL_OW 312
36992: ST_TO_ADDR
// if j then
36993: LD_VAR 0 7
36997: IFFALSE 37027
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36999: LD_ADDR_VAR 0 10
37003: PUSH
37004: LD_VAR 0 10
37008: PUSH
37009: LD_VAR 0 7
37013: PPUSH
37014: LD_INT 3
37016: PPUSH
37017: CALL_OW 259
37021: PUSH
37022: LD_INT 3
37024: MUL
37025: MUL
37026: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37027: LD_VAR 0 6
37031: PPUSH
37032: CALL_OW 264
37036: PUSH
37037: LD_INT 5
37039: PUSH
37040: LD_INT 6
37042: PUSH
37043: LD_INT 46
37045: PUSH
37046: LD_INT 44
37048: PUSH
37049: LD_INT 47
37051: PUSH
37052: LD_INT 45
37054: PUSH
37055: LD_INT 28
37057: PUSH
37058: LD_INT 7
37060: PUSH
37061: LD_INT 27
37063: PUSH
37064: LD_INT 29
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: IN
37079: PUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: LD_INT 52
37087: PPUSH
37088: CALL_OW 321
37092: PUSH
37093: LD_INT 2
37095: EQUAL
37096: AND
37097: IFFALSE 37114
// bpoints := bpoints * 1.2 ;
37099: LD_ADDR_VAR 0 10
37103: PUSH
37104: LD_VAR 0 10
37108: PUSH
37109: LD_REAL  1.20000000000000E+0000
37112: MUL
37113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37114: LD_VAR 0 6
37118: PPUSH
37119: CALL_OW 264
37123: PUSH
37124: LD_INT 6
37126: PUSH
37127: LD_INT 46
37129: PUSH
37130: LD_INT 47
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: IN
37138: IFFALSE 37155
// bpoints := bpoints * 1.2 ;
37140: LD_ADDR_VAR 0 10
37144: PUSH
37145: LD_VAR 0 10
37149: PUSH
37150: LD_REAL  1.20000000000000E+0000
37153: MUL
37154: ST_TO_ADDR
// end ; unit_building :
37155: GO 37169
37157: LD_INT 3
37159: DOUBLE
37160: EQUAL
37161: IFTRUE 37165
37163: GO 37168
37165: POP
// ; end ;
37166: GO 37169
37168: POP
// for j = 1 to 3 do
37169: LD_ADDR_VAR 0 7
37173: PUSH
37174: DOUBLE
37175: LD_INT 1
37177: DEC
37178: ST_TO_ADDR
37179: LD_INT 3
37181: PUSH
37182: FOR_TO
37183: IFFALSE 37236
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37185: LD_ADDR_VAR 0 5
37189: PUSH
37190: LD_VAR 0 5
37194: PPUSH
37195: LD_VAR 0 7
37199: PPUSH
37200: LD_VAR 0 5
37204: PUSH
37205: LD_VAR 0 7
37209: ARRAY
37210: PUSH
37211: LD_VAR 0 9
37215: PUSH
37216: LD_VAR 0 7
37220: ARRAY
37221: PUSH
37222: LD_VAR 0 10
37226: MUL
37227: PLUS
37228: PPUSH
37229: CALL_OW 1
37233: ST_TO_ADDR
37234: GO 37182
37236: POP
37237: POP
// end ;
37238: GO 35715
37240: POP
37241: POP
// result := Replace ( result , 4 , tmp ) ;
37242: LD_ADDR_VAR 0 5
37246: PUSH
37247: LD_VAR 0 5
37251: PPUSH
37252: LD_INT 4
37254: PPUSH
37255: LD_VAR 0 8
37259: PPUSH
37260: CALL_OW 1
37264: ST_TO_ADDR
// end ;
37265: LD_VAR 0 5
37269: RET
// export function DangerAtRange ( unit , range ) ; begin
37270: LD_INT 0
37272: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37273: LD_ADDR_VAR 0 3
37277: PUSH
37278: LD_VAR 0 1
37282: PPUSH
37283: CALL_OW 255
37287: PPUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 250
37297: PPUSH
37298: LD_VAR 0 1
37302: PPUSH
37303: CALL_OW 251
37307: PPUSH
37308: LD_VAR 0 2
37312: PPUSH
37313: CALL 35567 0 4
37317: ST_TO_ADDR
// end ;
37318: LD_VAR 0 3
37322: RET
// export function DangerInArea ( side , area ) ; begin
37323: LD_INT 0
37325: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37326: LD_ADDR_VAR 0 3
37330: PUSH
37331: LD_VAR 0 2
37335: PPUSH
37336: LD_INT 81
37338: PUSH
37339: LD_VAR 0 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PPUSH
37348: CALL_OW 70
37352: ST_TO_ADDR
// end ;
37353: LD_VAR 0 3
37357: RET
// export function IsExtension ( b ) ; begin
37358: LD_INT 0
37360: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37361: LD_ADDR_VAR 0 2
37365: PUSH
37366: LD_VAR 0 1
37370: PUSH
37371: LD_INT 23
37373: PUSH
37374: LD_INT 20
37376: PUSH
37377: LD_INT 22
37379: PUSH
37380: LD_INT 17
37382: PUSH
37383: LD_INT 24
37385: PUSH
37386: LD_INT 21
37388: PUSH
37389: LD_INT 19
37391: PUSH
37392: LD_INT 16
37394: PUSH
37395: LD_INT 25
37397: PUSH
37398: LD_INT 18
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: IN
37413: ST_TO_ADDR
// end ;
37414: LD_VAR 0 2
37418: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37419: LD_INT 0
37421: PPUSH
37422: PPUSH
37423: PPUSH
// result := [ ] ;
37424: LD_ADDR_VAR 0 4
37428: PUSH
37429: EMPTY
37430: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37431: LD_ADDR_VAR 0 5
37435: PUSH
37436: LD_VAR 0 2
37440: PPUSH
37441: LD_INT 21
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PPUSH
37451: CALL_OW 70
37455: ST_TO_ADDR
// if not tmp then
37456: LD_VAR 0 5
37460: NOT
37461: IFFALSE 37465
// exit ;
37463: GO 37529
// if checkLink then
37465: LD_VAR 0 3
37469: IFFALSE 37519
// begin for i in tmp do
37471: LD_ADDR_VAR 0 6
37475: PUSH
37476: LD_VAR 0 5
37480: PUSH
37481: FOR_IN
37482: IFFALSE 37517
// if GetBase ( i ) <> base then
37484: LD_VAR 0 6
37488: PPUSH
37489: CALL_OW 274
37493: PUSH
37494: LD_VAR 0 1
37498: NONEQUAL
37499: IFFALSE 37515
// ComLinkToBase ( base , i ) ;
37501: LD_VAR 0 1
37505: PPUSH
37506: LD_VAR 0 6
37510: PPUSH
37511: CALL_OW 169
37515: GO 37481
37517: POP
37518: POP
// end ; result := tmp ;
37519: LD_ADDR_VAR 0 4
37523: PUSH
37524: LD_VAR 0 5
37528: ST_TO_ADDR
// end ;
37529: LD_VAR 0 4
37533: RET
// export function ComComplete ( units , b ) ; var i ; begin
37534: LD_INT 0
37536: PPUSH
37537: PPUSH
// if not units then
37538: LD_VAR 0 1
37542: NOT
37543: IFFALSE 37547
// exit ;
37545: GO 37637
// for i in units do
37547: LD_ADDR_VAR 0 4
37551: PUSH
37552: LD_VAR 0 1
37556: PUSH
37557: FOR_IN
37558: IFFALSE 37635
// if BuildingStatus ( b ) = bs_build then
37560: LD_VAR 0 2
37564: PPUSH
37565: CALL_OW 461
37569: PUSH
37570: LD_INT 1
37572: EQUAL
37573: IFFALSE 37633
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37575: LD_VAR 0 4
37579: PPUSH
37580: LD_STRING h
37582: PUSH
37583: LD_VAR 0 2
37587: PPUSH
37588: CALL_OW 250
37592: PUSH
37593: LD_VAR 0 2
37597: PPUSH
37598: CALL_OW 251
37602: PUSH
37603: LD_VAR 0 2
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: PUSH
37626: EMPTY
37627: LIST
37628: PPUSH
37629: CALL_OW 446
37633: GO 37557
37635: POP
37636: POP
// end ;
37637: LD_VAR 0 3
37641: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37642: LD_INT 0
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37650: LD_VAR 0 1
37654: NOT
37655: PUSH
37656: LD_VAR 0 1
37660: PPUSH
37661: CALL_OW 263
37665: PUSH
37666: LD_INT 2
37668: NONEQUAL
37669: OR
37670: IFFALSE 37674
// exit ;
37672: GO 37990
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37674: LD_ADDR_VAR 0 6
37678: PUSH
37679: LD_INT 22
37681: PUSH
37682: LD_VAR 0 1
37686: PPUSH
37687: CALL_OW 255
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: LD_INT 30
37701: PUSH
37702: LD_INT 36
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 34
37711: PUSH
37712: LD_INT 31
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PPUSH
37728: CALL_OW 69
37732: ST_TO_ADDR
// if not tmp then
37733: LD_VAR 0 6
37737: NOT
37738: IFFALSE 37742
// exit ;
37740: GO 37990
// result := [ ] ;
37742: LD_ADDR_VAR 0 2
37746: PUSH
37747: EMPTY
37748: ST_TO_ADDR
// for i in tmp do
37749: LD_ADDR_VAR 0 3
37753: PUSH
37754: LD_VAR 0 6
37758: PUSH
37759: FOR_IN
37760: IFFALSE 37831
// begin t := UnitsInside ( i ) ;
37762: LD_ADDR_VAR 0 4
37766: PUSH
37767: LD_VAR 0 3
37771: PPUSH
37772: CALL_OW 313
37776: ST_TO_ADDR
// if t then
37777: LD_VAR 0 4
37781: IFFALSE 37829
// for j in t do
37783: LD_ADDR_VAR 0 7
37787: PUSH
37788: LD_VAR 0 4
37792: PUSH
37793: FOR_IN
37794: IFFALSE 37827
// result := Replace ( result , result + 1 , j ) ;
37796: LD_ADDR_VAR 0 2
37800: PUSH
37801: LD_VAR 0 2
37805: PPUSH
37806: LD_VAR 0 2
37810: PUSH
37811: LD_INT 1
37813: PLUS
37814: PPUSH
37815: LD_VAR 0 7
37819: PPUSH
37820: CALL_OW 1
37824: ST_TO_ADDR
37825: GO 37793
37827: POP
37828: POP
// end ;
37829: GO 37759
37831: POP
37832: POP
// if not result then
37833: LD_VAR 0 2
37837: NOT
37838: IFFALSE 37842
// exit ;
37840: GO 37990
// mech := result [ 1 ] ;
37842: LD_ADDR_VAR 0 5
37846: PUSH
37847: LD_VAR 0 2
37851: PUSH
37852: LD_INT 1
37854: ARRAY
37855: ST_TO_ADDR
// if result > 1 then
37856: LD_VAR 0 2
37860: PUSH
37861: LD_INT 1
37863: GREATER
37864: IFFALSE 37976
// begin for i = 2 to result do
37866: LD_ADDR_VAR 0 3
37870: PUSH
37871: DOUBLE
37872: LD_INT 2
37874: DEC
37875: ST_TO_ADDR
37876: LD_VAR 0 2
37880: PUSH
37881: FOR_TO
37882: IFFALSE 37974
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37884: LD_ADDR_VAR 0 4
37888: PUSH
37889: LD_VAR 0 2
37893: PUSH
37894: LD_VAR 0 3
37898: ARRAY
37899: PPUSH
37900: LD_INT 3
37902: PPUSH
37903: CALL_OW 259
37907: PUSH
37908: LD_VAR 0 2
37912: PUSH
37913: LD_VAR 0 3
37917: ARRAY
37918: PPUSH
37919: CALL_OW 432
37923: MINUS
37924: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37925: LD_VAR 0 4
37929: PUSH
37930: LD_VAR 0 5
37934: PPUSH
37935: LD_INT 3
37937: PPUSH
37938: CALL_OW 259
37942: PUSH
37943: LD_VAR 0 5
37947: PPUSH
37948: CALL_OW 432
37952: MINUS
37953: GREATEREQUAL
37954: IFFALSE 37972
// mech := result [ i ] ;
37956: LD_ADDR_VAR 0 5
37960: PUSH
37961: LD_VAR 0 2
37965: PUSH
37966: LD_VAR 0 3
37970: ARRAY
37971: ST_TO_ADDR
// end ;
37972: GO 37881
37974: POP
37975: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37976: LD_VAR 0 1
37980: PPUSH
37981: LD_VAR 0 5
37985: PPUSH
37986: CALL_OW 135
// end ;
37990: LD_VAR 0 2
37994: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37995: LD_INT 0
37997: PPUSH
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
// result := [ ] ;
38010: LD_ADDR_VAR 0 7
38014: PUSH
38015: EMPTY
38016: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38017: LD_VAR 0 1
38021: PPUSH
38022: CALL_OW 266
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: IN
38037: NOT
38038: IFFALSE 38042
// exit ;
38040: GO 39676
// if name then
38042: LD_VAR 0 3
38046: IFFALSE 38062
// SetBName ( base_dep , name ) ;
38048: LD_VAR 0 1
38052: PPUSH
38053: LD_VAR 0 3
38057: PPUSH
38058: CALL_OW 500
// base := GetBase ( base_dep ) ;
38062: LD_ADDR_VAR 0 15
38066: PUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL_OW 274
38076: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38077: LD_ADDR_VAR 0 16
38081: PUSH
38082: LD_VAR 0 1
38086: PPUSH
38087: CALL_OW 255
38091: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38092: LD_ADDR_VAR 0 17
38096: PUSH
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 248
38106: ST_TO_ADDR
// if sources then
38107: LD_VAR 0 5
38111: IFFALSE 38158
// for i = 1 to 3 do
38113: LD_ADDR_VAR 0 8
38117: PUSH
38118: DOUBLE
38119: LD_INT 1
38121: DEC
38122: ST_TO_ADDR
38123: LD_INT 3
38125: PUSH
38126: FOR_TO
38127: IFFALSE 38156
// AddResourceType ( base , i , sources [ i ] ) ;
38129: LD_VAR 0 15
38133: PPUSH
38134: LD_VAR 0 8
38138: PPUSH
38139: LD_VAR 0 5
38143: PUSH
38144: LD_VAR 0 8
38148: ARRAY
38149: PPUSH
38150: CALL_OW 276
38154: GO 38126
38156: POP
38157: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38158: LD_ADDR_VAR 0 18
38162: PUSH
38163: LD_VAR 0 15
38167: PPUSH
38168: LD_VAR 0 2
38172: PPUSH
38173: LD_INT 1
38175: PPUSH
38176: CALL 37419 0 3
38180: ST_TO_ADDR
// InitHc ;
38181: CALL_OW 19
// InitUc ;
38185: CALL_OW 18
// uc_side := side ;
38189: LD_ADDR_OWVAR 20
38193: PUSH
38194: LD_VAR 0 16
38198: ST_TO_ADDR
// uc_nation := nation ;
38199: LD_ADDR_OWVAR 21
38203: PUSH
38204: LD_VAR 0 17
38208: ST_TO_ADDR
// if buildings then
38209: LD_VAR 0 18
38213: IFFALSE 39535
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38215: LD_ADDR_VAR 0 19
38219: PUSH
38220: LD_VAR 0 18
38224: PPUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 30
38230: PUSH
38231: LD_INT 29
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 30
38240: PUSH
38241: LD_INT 30
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: PPUSH
38253: CALL_OW 72
38257: ST_TO_ADDR
// if tmp then
38258: LD_VAR 0 19
38262: IFFALSE 38310
// for i in tmp do
38264: LD_ADDR_VAR 0 8
38268: PUSH
38269: LD_VAR 0 19
38273: PUSH
38274: FOR_IN
38275: IFFALSE 38308
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38277: LD_VAR 0 8
38281: PPUSH
38282: CALL_OW 250
38286: PPUSH
38287: LD_VAR 0 8
38291: PPUSH
38292: CALL_OW 251
38296: PPUSH
38297: LD_VAR 0 16
38301: PPUSH
38302: CALL_OW 441
38306: GO 38274
38308: POP
38309: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38310: LD_VAR 0 18
38314: PPUSH
38315: LD_INT 2
38317: PUSH
38318: LD_INT 30
38320: PUSH
38321: LD_INT 32
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 30
38330: PUSH
38331: LD_INT 33
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: PPUSH
38343: CALL_OW 72
38347: IFFALSE 38435
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38349: LD_ADDR_VAR 0 8
38353: PUSH
38354: LD_VAR 0 18
38358: PPUSH
38359: LD_INT 2
38361: PUSH
38362: LD_INT 30
38364: PUSH
38365: LD_INT 32
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 30
38374: PUSH
38375: LD_INT 33
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: PPUSH
38387: CALL_OW 72
38391: PUSH
38392: FOR_IN
38393: IFFALSE 38433
// begin if not GetBWeapon ( i ) then
38395: LD_VAR 0 8
38399: PPUSH
38400: CALL_OW 269
38404: NOT
38405: IFFALSE 38431
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38407: LD_VAR 0 8
38411: PPUSH
38412: LD_VAR 0 8
38416: PPUSH
38417: LD_VAR 0 2
38421: PPUSH
38422: CALL 39681 0 2
38426: PPUSH
38427: CALL_OW 431
// end ;
38431: GO 38392
38433: POP
38434: POP
// end ; for i = 1 to personel do
38435: LD_ADDR_VAR 0 8
38439: PUSH
38440: DOUBLE
38441: LD_INT 1
38443: DEC
38444: ST_TO_ADDR
38445: LD_VAR 0 6
38449: PUSH
38450: FOR_TO
38451: IFFALSE 39515
// begin if i > 4 then
38453: LD_VAR 0 8
38457: PUSH
38458: LD_INT 4
38460: GREATER
38461: IFFALSE 38465
// break ;
38463: GO 39515
// case i of 1 :
38465: LD_VAR 0 8
38469: PUSH
38470: LD_INT 1
38472: DOUBLE
38473: EQUAL
38474: IFTRUE 38478
38476: GO 38558
38478: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38479: LD_ADDR_VAR 0 12
38483: PUSH
38484: LD_VAR 0 18
38488: PPUSH
38489: LD_INT 22
38491: PUSH
38492: LD_VAR 0 16
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 58
38503: PUSH
38504: EMPTY
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 30
38512: PUSH
38513: LD_INT 32
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 4
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 30
38532: PUSH
38533: LD_INT 5
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 72
38555: ST_TO_ADDR
38556: GO 38780
38558: LD_INT 2
38560: DOUBLE
38561: EQUAL
38562: IFTRUE 38566
38564: GO 38628
38566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38567: LD_ADDR_VAR 0 12
38571: PUSH
38572: LD_VAR 0 18
38576: PPUSH
38577: LD_INT 22
38579: PUSH
38580: LD_VAR 0 16
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: LD_INT 30
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 30
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PPUSH
38621: CALL_OW 72
38625: ST_TO_ADDR
38626: GO 38780
38628: LD_INT 3
38630: DOUBLE
38631: EQUAL
38632: IFTRUE 38636
38634: GO 38698
38636: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38637: LD_ADDR_VAR 0 12
38641: PUSH
38642: LD_VAR 0 18
38646: PPUSH
38647: LD_INT 22
38649: PUSH
38650: LD_VAR 0 16
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: LD_INT 30
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 30
38674: PUSH
38675: LD_INT 3
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PPUSH
38691: CALL_OW 72
38695: ST_TO_ADDR
38696: GO 38780
38698: LD_INT 4
38700: DOUBLE
38701: EQUAL
38702: IFTRUE 38706
38704: GO 38779
38706: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38707: LD_ADDR_VAR 0 12
38711: PUSH
38712: LD_VAR 0 18
38716: PPUSH
38717: LD_INT 22
38719: PUSH
38720: LD_VAR 0 16
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 30
38734: PUSH
38735: LD_INT 6
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 30
38744: PUSH
38745: LD_INT 7
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 30
38754: PUSH
38755: LD_INT 8
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PPUSH
38772: CALL_OW 72
38776: ST_TO_ADDR
38777: GO 38780
38779: POP
// if i = 1 then
38780: LD_VAR 0 8
38784: PUSH
38785: LD_INT 1
38787: EQUAL
38788: IFFALSE 38899
// begin tmp := [ ] ;
38790: LD_ADDR_VAR 0 19
38794: PUSH
38795: EMPTY
38796: ST_TO_ADDR
// for j in f do
38797: LD_ADDR_VAR 0 9
38801: PUSH
38802: LD_VAR 0 12
38806: PUSH
38807: FOR_IN
38808: IFFALSE 38881
// if GetBType ( j ) = b_bunker then
38810: LD_VAR 0 9
38814: PPUSH
38815: CALL_OW 266
38819: PUSH
38820: LD_INT 32
38822: EQUAL
38823: IFFALSE 38850
// tmp := Insert ( tmp , 1 , j ) else
38825: LD_ADDR_VAR 0 19
38829: PUSH
38830: LD_VAR 0 19
38834: PPUSH
38835: LD_INT 1
38837: PPUSH
38838: LD_VAR 0 9
38842: PPUSH
38843: CALL_OW 2
38847: ST_TO_ADDR
38848: GO 38879
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38850: LD_ADDR_VAR 0 19
38854: PUSH
38855: LD_VAR 0 19
38859: PPUSH
38860: LD_VAR 0 19
38864: PUSH
38865: LD_INT 1
38867: PLUS
38868: PPUSH
38869: LD_VAR 0 9
38873: PPUSH
38874: CALL_OW 2
38878: ST_TO_ADDR
38879: GO 38807
38881: POP
38882: POP
// if tmp then
38883: LD_VAR 0 19
38887: IFFALSE 38899
// f := tmp ;
38889: LD_ADDR_VAR 0 12
38893: PUSH
38894: LD_VAR 0 19
38898: ST_TO_ADDR
// end ; x := personel [ i ] ;
38899: LD_ADDR_VAR 0 13
38903: PUSH
38904: LD_VAR 0 6
38908: PUSH
38909: LD_VAR 0 8
38913: ARRAY
38914: ST_TO_ADDR
// if x = - 1 then
38915: LD_VAR 0 13
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: EQUAL
38924: IFFALSE 39133
// begin for j in f do
38926: LD_ADDR_VAR 0 9
38930: PUSH
38931: LD_VAR 0 12
38935: PUSH
38936: FOR_IN
38937: IFFALSE 39129
// repeat InitHc ;
38939: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38943: LD_VAR 0 9
38947: PPUSH
38948: CALL_OW 266
38952: PUSH
38953: LD_INT 5
38955: EQUAL
38956: IFFALSE 39026
// begin if UnitsInside ( j ) < 3 then
38958: LD_VAR 0 9
38962: PPUSH
38963: CALL_OW 313
38967: PUSH
38968: LD_INT 3
38970: LESS
38971: IFFALSE 39007
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38973: LD_INT 0
38975: PPUSH
38976: LD_INT 5
38978: PUSH
38979: LD_INT 8
38981: PUSH
38982: LD_INT 9
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: LD_VAR 0 17
38994: ARRAY
38995: PPUSH
38996: LD_VAR 0 4
39000: PPUSH
39001: CALL_OW 380
39005: GO 39024
// PrepareHuman ( false , i , skill ) ;
39007: LD_INT 0
39009: PPUSH
39010: LD_VAR 0 8
39014: PPUSH
39015: LD_VAR 0 4
39019: PPUSH
39020: CALL_OW 380
// end else
39024: GO 39043
// PrepareHuman ( false , i , skill ) ;
39026: LD_INT 0
39028: PPUSH
39029: LD_VAR 0 8
39033: PPUSH
39034: LD_VAR 0 4
39038: PPUSH
39039: CALL_OW 380
// un := CreateHuman ;
39043: LD_ADDR_VAR 0 14
39047: PUSH
39048: CALL_OW 44
39052: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39053: LD_ADDR_VAR 0 7
39057: PUSH
39058: LD_VAR 0 7
39062: PPUSH
39063: LD_INT 1
39065: PPUSH
39066: LD_VAR 0 14
39070: PPUSH
39071: CALL_OW 2
39075: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39076: LD_VAR 0 14
39080: PPUSH
39081: LD_VAR 0 9
39085: PPUSH
39086: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39090: LD_VAR 0 9
39094: PPUSH
39095: CALL_OW 313
39099: PUSH
39100: LD_INT 6
39102: EQUAL
39103: PUSH
39104: LD_VAR 0 9
39108: PPUSH
39109: CALL_OW 266
39113: PUSH
39114: LD_INT 32
39116: PUSH
39117: LD_INT 31
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: IN
39124: OR
39125: IFFALSE 38939
39127: GO 38936
39129: POP
39130: POP
// end else
39131: GO 39513
// for j = 1 to x do
39133: LD_ADDR_VAR 0 9
39137: PUSH
39138: DOUBLE
39139: LD_INT 1
39141: DEC
39142: ST_TO_ADDR
39143: LD_VAR 0 13
39147: PUSH
39148: FOR_TO
39149: IFFALSE 39511
// begin InitHc ;
39151: CALL_OW 19
// if not f then
39155: LD_VAR 0 12
39159: NOT
39160: IFFALSE 39249
// begin PrepareHuman ( false , i , skill ) ;
39162: LD_INT 0
39164: PPUSH
39165: LD_VAR 0 8
39169: PPUSH
39170: LD_VAR 0 4
39174: PPUSH
39175: CALL_OW 380
// un := CreateHuman ;
39179: LD_ADDR_VAR 0 14
39183: PUSH
39184: CALL_OW 44
39188: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39189: LD_ADDR_VAR 0 7
39193: PUSH
39194: LD_VAR 0 7
39198: PPUSH
39199: LD_INT 1
39201: PPUSH
39202: LD_VAR 0 14
39206: PPUSH
39207: CALL_OW 2
39211: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39212: LD_VAR 0 14
39216: PPUSH
39217: LD_VAR 0 1
39221: PPUSH
39222: CALL_OW 250
39226: PPUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: CALL_OW 251
39236: PPUSH
39237: LD_INT 10
39239: PPUSH
39240: LD_INT 0
39242: PPUSH
39243: CALL_OW 50
// continue ;
39247: GO 39148
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39249: LD_VAR 0 12
39253: PUSH
39254: LD_INT 1
39256: ARRAY
39257: PPUSH
39258: CALL_OW 313
39262: PUSH
39263: LD_VAR 0 12
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: PPUSH
39272: CALL_OW 266
39276: PUSH
39277: LD_INT 32
39279: PUSH
39280: LD_INT 31
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: IN
39287: AND
39288: PUSH
39289: LD_VAR 0 12
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: PPUSH
39298: CALL_OW 313
39302: PUSH
39303: LD_INT 6
39305: EQUAL
39306: OR
39307: IFFALSE 39327
// f := Delete ( f , 1 ) ;
39309: LD_ADDR_VAR 0 12
39313: PUSH
39314: LD_VAR 0 12
39318: PPUSH
39319: LD_INT 1
39321: PPUSH
39322: CALL_OW 3
39326: ST_TO_ADDR
// if not f then
39327: LD_VAR 0 12
39331: NOT
39332: IFFALSE 39350
// begin x := x + 2 ;
39334: LD_ADDR_VAR 0 13
39338: PUSH
39339: LD_VAR 0 13
39343: PUSH
39344: LD_INT 2
39346: PLUS
39347: ST_TO_ADDR
// continue ;
39348: GO 39148
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39350: LD_VAR 0 12
39354: PUSH
39355: LD_INT 1
39357: ARRAY
39358: PPUSH
39359: CALL_OW 266
39363: PUSH
39364: LD_INT 5
39366: EQUAL
39367: IFFALSE 39441
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39369: LD_VAR 0 12
39373: PUSH
39374: LD_INT 1
39376: ARRAY
39377: PPUSH
39378: CALL_OW 313
39382: PUSH
39383: LD_INT 3
39385: LESS
39386: IFFALSE 39422
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39388: LD_INT 0
39390: PPUSH
39391: LD_INT 5
39393: PUSH
39394: LD_INT 8
39396: PUSH
39397: LD_INT 9
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: PUSH
39405: LD_VAR 0 17
39409: ARRAY
39410: PPUSH
39411: LD_VAR 0 4
39415: PPUSH
39416: CALL_OW 380
39420: GO 39439
// PrepareHuman ( false , i , skill ) ;
39422: LD_INT 0
39424: PPUSH
39425: LD_VAR 0 8
39429: PPUSH
39430: LD_VAR 0 4
39434: PPUSH
39435: CALL_OW 380
// end else
39439: GO 39458
// PrepareHuman ( false , i , skill ) ;
39441: LD_INT 0
39443: PPUSH
39444: LD_VAR 0 8
39448: PPUSH
39449: LD_VAR 0 4
39453: PPUSH
39454: CALL_OW 380
// un := CreateHuman ;
39458: LD_ADDR_VAR 0 14
39462: PUSH
39463: CALL_OW 44
39467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39468: LD_ADDR_VAR 0 7
39472: PUSH
39473: LD_VAR 0 7
39477: PPUSH
39478: LD_INT 1
39480: PPUSH
39481: LD_VAR 0 14
39485: PPUSH
39486: CALL_OW 2
39490: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39491: LD_VAR 0 14
39495: PPUSH
39496: LD_VAR 0 12
39500: PUSH
39501: LD_INT 1
39503: ARRAY
39504: PPUSH
39505: CALL_OW 52
// end ;
39509: GO 39148
39511: POP
39512: POP
// end ;
39513: GO 38450
39515: POP
39516: POP
// result := result ^ buildings ;
39517: LD_ADDR_VAR 0 7
39521: PUSH
39522: LD_VAR 0 7
39526: PUSH
39527: LD_VAR 0 18
39531: ADD
39532: ST_TO_ADDR
// end else
39533: GO 39676
// begin for i = 1 to personel do
39535: LD_ADDR_VAR 0 8
39539: PUSH
39540: DOUBLE
39541: LD_INT 1
39543: DEC
39544: ST_TO_ADDR
39545: LD_VAR 0 6
39549: PUSH
39550: FOR_TO
39551: IFFALSE 39674
// begin if i > 4 then
39553: LD_VAR 0 8
39557: PUSH
39558: LD_INT 4
39560: GREATER
39561: IFFALSE 39565
// break ;
39563: GO 39674
// x := personel [ i ] ;
39565: LD_ADDR_VAR 0 13
39569: PUSH
39570: LD_VAR 0 6
39574: PUSH
39575: LD_VAR 0 8
39579: ARRAY
39580: ST_TO_ADDR
// if x = - 1 then
39581: LD_VAR 0 13
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: EQUAL
39590: IFFALSE 39594
// continue ;
39592: GO 39550
// PrepareHuman ( false , i , skill ) ;
39594: LD_INT 0
39596: PPUSH
39597: LD_VAR 0 8
39601: PPUSH
39602: LD_VAR 0 4
39606: PPUSH
39607: CALL_OW 380
// un := CreateHuman ;
39611: LD_ADDR_VAR 0 14
39615: PUSH
39616: CALL_OW 44
39620: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39621: LD_VAR 0 14
39625: PPUSH
39626: LD_VAR 0 1
39630: PPUSH
39631: CALL_OW 250
39635: PPUSH
39636: LD_VAR 0 1
39640: PPUSH
39641: CALL_OW 251
39645: PPUSH
39646: LD_INT 10
39648: PPUSH
39649: LD_INT 0
39651: PPUSH
39652: CALL_OW 50
// result := result ^ un ;
39656: LD_ADDR_VAR 0 7
39660: PUSH
39661: LD_VAR 0 7
39665: PUSH
39666: LD_VAR 0 14
39670: ADD
39671: ST_TO_ADDR
// end ;
39672: GO 39550
39674: POP
39675: POP
// end ; end ;
39676: LD_VAR 0 7
39680: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39681: LD_INT 0
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
39697: PPUSH
39698: PPUSH
// result := false ;
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_INT 0
39706: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39707: LD_VAR 0 1
39711: NOT
39712: PUSH
39713: LD_VAR 0 1
39717: PPUSH
39718: CALL_OW 266
39722: PUSH
39723: LD_INT 32
39725: PUSH
39726: LD_INT 33
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: IN
39733: NOT
39734: OR
39735: IFFALSE 39739
// exit ;
39737: GO 40848
// nat := GetNation ( tower ) ;
39739: LD_ADDR_VAR 0 12
39743: PUSH
39744: LD_VAR 0 1
39748: PPUSH
39749: CALL_OW 248
39753: ST_TO_ADDR
// side := GetSide ( tower ) ;
39754: LD_ADDR_VAR 0 16
39758: PUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 255
39768: ST_TO_ADDR
// x := GetX ( tower ) ;
39769: LD_ADDR_VAR 0 10
39773: PUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 250
39783: ST_TO_ADDR
// y := GetY ( tower ) ;
39784: LD_ADDR_VAR 0 11
39788: PUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 251
39798: ST_TO_ADDR
// if not x or not y then
39799: LD_VAR 0 10
39803: NOT
39804: PUSH
39805: LD_VAR 0 11
39809: NOT
39810: OR
39811: IFFALSE 39815
// exit ;
39813: GO 40848
// weapon := 0 ;
39815: LD_ADDR_VAR 0 18
39819: PUSH
39820: LD_INT 0
39822: ST_TO_ADDR
// fac_list := [ ] ;
39823: LD_ADDR_VAR 0 17
39827: PUSH
39828: EMPTY
39829: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39830: LD_ADDR_VAR 0 6
39834: PUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 274
39844: PPUSH
39845: LD_VAR 0 2
39849: PPUSH
39850: LD_INT 0
39852: PPUSH
39853: CALL 37419 0 3
39857: PPUSH
39858: LD_INT 30
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PPUSH
39868: CALL_OW 72
39872: ST_TO_ADDR
// if not factories then
39873: LD_VAR 0 6
39877: NOT
39878: IFFALSE 39882
// exit ;
39880: GO 40848
// for i in factories do
39882: LD_ADDR_VAR 0 8
39886: PUSH
39887: LD_VAR 0 6
39891: PUSH
39892: FOR_IN
39893: IFFALSE 39918
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39895: LD_ADDR_VAR 0 17
39899: PUSH
39900: LD_VAR 0 17
39904: PUSH
39905: LD_VAR 0 8
39909: PPUSH
39910: CALL_OW 478
39914: UNION
39915: ST_TO_ADDR
39916: GO 39892
39918: POP
39919: POP
// if not fac_list then
39920: LD_VAR 0 17
39924: NOT
39925: IFFALSE 39929
// exit ;
39927: GO 40848
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39929: LD_ADDR_VAR 0 5
39933: PUSH
39934: LD_INT 4
39936: PUSH
39937: LD_INT 5
39939: PUSH
39940: LD_INT 9
39942: PUSH
39943: LD_INT 10
39945: PUSH
39946: LD_INT 6
39948: PUSH
39949: LD_INT 7
39951: PUSH
39952: LD_INT 11
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 27
39966: PUSH
39967: LD_INT 28
39969: PUSH
39970: LD_INT 26
39972: PUSH
39973: LD_INT 30
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 43
39984: PUSH
39985: LD_INT 44
39987: PUSH
39988: LD_INT 46
39990: PUSH
39991: LD_INT 45
39993: PUSH
39994: LD_INT 47
39996: PUSH
39997: LD_INT 49
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: PUSH
40013: LD_VAR 0 12
40017: ARRAY
40018: ST_TO_ADDR
// list := list isect fac_list ;
40019: LD_ADDR_VAR 0 5
40023: PUSH
40024: LD_VAR 0 5
40028: PUSH
40029: LD_VAR 0 17
40033: ISECT
40034: ST_TO_ADDR
// if not list then
40035: LD_VAR 0 5
40039: NOT
40040: IFFALSE 40044
// exit ;
40042: GO 40848
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40044: LD_VAR 0 12
40048: PUSH
40049: LD_INT 3
40051: EQUAL
40052: PUSH
40053: LD_INT 49
40055: PUSH
40056: LD_VAR 0 5
40060: IN
40061: AND
40062: PUSH
40063: LD_INT 31
40065: PPUSH
40066: LD_VAR 0 16
40070: PPUSH
40071: CALL_OW 321
40075: PUSH
40076: LD_INT 2
40078: EQUAL
40079: AND
40080: IFFALSE 40140
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40082: LD_INT 22
40084: PUSH
40085: LD_VAR 0 16
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 35
40096: PUSH
40097: LD_INT 49
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 91
40106: PUSH
40107: LD_VAR 0 1
40111: PUSH
40112: LD_INT 10
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: PPUSH
40125: CALL_OW 69
40129: NOT
40130: IFFALSE 40140
// weapon := ru_time_lapser ;
40132: LD_ADDR_VAR 0 18
40136: PUSH
40137: LD_INT 49
40139: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40140: LD_VAR 0 12
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: IN
40155: PUSH
40156: LD_INT 11
40158: PUSH
40159: LD_VAR 0 5
40163: IN
40164: PUSH
40165: LD_INT 30
40167: PUSH
40168: LD_VAR 0 5
40172: IN
40173: OR
40174: AND
40175: PUSH
40176: LD_INT 6
40178: PPUSH
40179: LD_VAR 0 16
40183: PPUSH
40184: CALL_OW 321
40188: PUSH
40189: LD_INT 2
40191: EQUAL
40192: AND
40193: IFFALSE 40358
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40195: LD_INT 22
40197: PUSH
40198: LD_VAR 0 16
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 35
40212: PUSH
40213: LD_INT 11
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 35
40222: PUSH
40223: LD_INT 30
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 91
40237: PUSH
40238: LD_VAR 0 1
40242: PUSH
40243: LD_INT 18
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: PPUSH
40256: CALL_OW 69
40260: NOT
40261: PUSH
40262: LD_INT 22
40264: PUSH
40265: LD_VAR 0 16
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 30
40279: PUSH
40280: LD_INT 32
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 30
40289: PUSH
40290: LD_INT 33
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 91
40304: PUSH
40305: LD_VAR 0 1
40309: PUSH
40310: LD_INT 12
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: PUSH
40323: EMPTY
40324: LIST
40325: PPUSH
40326: CALL_OW 69
40330: PUSH
40331: LD_INT 2
40333: GREATER
40334: AND
40335: IFFALSE 40358
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40337: LD_ADDR_VAR 0 18
40341: PUSH
40342: LD_INT 11
40344: PUSH
40345: LD_INT 30
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_VAR 0 12
40356: ARRAY
40357: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40358: LD_VAR 0 18
40362: NOT
40363: PUSH
40364: LD_INT 40
40366: PPUSH
40367: LD_VAR 0 16
40371: PPUSH
40372: CALL_OW 321
40376: PUSH
40377: LD_INT 2
40379: EQUAL
40380: AND
40381: PUSH
40382: LD_INT 7
40384: PUSH
40385: LD_VAR 0 5
40389: IN
40390: PUSH
40391: LD_INT 28
40393: PUSH
40394: LD_VAR 0 5
40398: IN
40399: OR
40400: PUSH
40401: LD_INT 45
40403: PUSH
40404: LD_VAR 0 5
40408: IN
40409: OR
40410: AND
40411: IFFALSE 40665
// begin hex := GetHexInfo ( x , y ) ;
40413: LD_ADDR_VAR 0 4
40417: PUSH
40418: LD_VAR 0 10
40422: PPUSH
40423: LD_VAR 0 11
40427: PPUSH
40428: CALL_OW 546
40432: ST_TO_ADDR
// if hex [ 1 ] then
40433: LD_VAR 0 4
40437: PUSH
40438: LD_INT 1
40440: ARRAY
40441: IFFALSE 40445
// exit ;
40443: GO 40848
// height := hex [ 2 ] ;
40445: LD_ADDR_VAR 0 15
40449: PUSH
40450: LD_VAR 0 4
40454: PUSH
40455: LD_INT 2
40457: ARRAY
40458: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40459: LD_ADDR_VAR 0 14
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: LD_INT 3
40472: PUSH
40473: LD_INT 5
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: ST_TO_ADDR
// for i in tmp do
40482: LD_ADDR_VAR 0 8
40486: PUSH
40487: LD_VAR 0 14
40491: PUSH
40492: FOR_IN
40493: IFFALSE 40663
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40495: LD_ADDR_VAR 0 9
40499: PUSH
40500: LD_VAR 0 10
40504: PPUSH
40505: LD_VAR 0 8
40509: PPUSH
40510: LD_INT 5
40512: PPUSH
40513: CALL_OW 272
40517: PUSH
40518: LD_VAR 0 11
40522: PPUSH
40523: LD_VAR 0 8
40527: PPUSH
40528: LD_INT 5
40530: PPUSH
40531: CALL_OW 273
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40540: LD_VAR 0 9
40544: PUSH
40545: LD_INT 1
40547: ARRAY
40548: PPUSH
40549: LD_VAR 0 9
40553: PUSH
40554: LD_INT 2
40556: ARRAY
40557: PPUSH
40558: CALL_OW 488
40562: IFFALSE 40661
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40564: LD_ADDR_VAR 0 4
40568: PUSH
40569: LD_VAR 0 9
40573: PUSH
40574: LD_INT 1
40576: ARRAY
40577: PPUSH
40578: LD_VAR 0 9
40582: PUSH
40583: LD_INT 2
40585: ARRAY
40586: PPUSH
40587: CALL_OW 546
40591: ST_TO_ADDR
// if hex [ 1 ] then
40592: LD_VAR 0 4
40596: PUSH
40597: LD_INT 1
40599: ARRAY
40600: IFFALSE 40604
// continue ;
40602: GO 40492
// h := hex [ 2 ] ;
40604: LD_ADDR_VAR 0 13
40608: PUSH
40609: LD_VAR 0 4
40613: PUSH
40614: LD_INT 2
40616: ARRAY
40617: ST_TO_ADDR
// if h + 7 < height then
40618: LD_VAR 0 13
40622: PUSH
40623: LD_INT 7
40625: PLUS
40626: PUSH
40627: LD_VAR 0 15
40631: LESS
40632: IFFALSE 40661
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40634: LD_ADDR_VAR 0 18
40638: PUSH
40639: LD_INT 7
40641: PUSH
40642: LD_INT 28
40644: PUSH
40645: LD_INT 45
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: LIST
40652: PUSH
40653: LD_VAR 0 12
40657: ARRAY
40658: ST_TO_ADDR
// break ;
40659: GO 40663
// end ; end ; end ;
40661: GO 40492
40663: POP
40664: POP
// end ; if not weapon then
40665: LD_VAR 0 18
40669: NOT
40670: IFFALSE 40730
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40672: LD_ADDR_VAR 0 5
40676: PUSH
40677: LD_VAR 0 5
40681: PUSH
40682: LD_INT 11
40684: PUSH
40685: LD_INT 30
40687: PUSH
40688: LD_INT 49
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: DIFF
40696: ST_TO_ADDR
// if not list then
40697: LD_VAR 0 5
40701: NOT
40702: IFFALSE 40706
// exit ;
40704: GO 40848
// weapon := list [ rand ( 1 , list ) ] ;
40706: LD_ADDR_VAR 0 18
40710: PUSH
40711: LD_VAR 0 5
40715: PUSH
40716: LD_INT 1
40718: PPUSH
40719: LD_VAR 0 5
40723: PPUSH
40724: CALL_OW 12
40728: ARRAY
40729: ST_TO_ADDR
// end ; if weapon then
40730: LD_VAR 0 18
40734: IFFALSE 40848
// begin tmp := CostOfWeapon ( weapon ) ;
40736: LD_ADDR_VAR 0 14
40740: PUSH
40741: LD_VAR 0 18
40745: PPUSH
40746: CALL_OW 451
40750: ST_TO_ADDR
// j := GetBase ( tower ) ;
40751: LD_ADDR_VAR 0 9
40755: PUSH
40756: LD_VAR 0 1
40760: PPUSH
40761: CALL_OW 274
40765: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40766: LD_VAR 0 9
40770: PPUSH
40771: LD_INT 1
40773: PPUSH
40774: CALL_OW 275
40778: PUSH
40779: LD_VAR 0 14
40783: PUSH
40784: LD_INT 1
40786: ARRAY
40787: GREATEREQUAL
40788: PUSH
40789: LD_VAR 0 9
40793: PPUSH
40794: LD_INT 2
40796: PPUSH
40797: CALL_OW 275
40801: PUSH
40802: LD_VAR 0 14
40806: PUSH
40807: LD_INT 2
40809: ARRAY
40810: GREATEREQUAL
40811: AND
40812: PUSH
40813: LD_VAR 0 9
40817: PPUSH
40818: LD_INT 3
40820: PPUSH
40821: CALL_OW 275
40825: PUSH
40826: LD_VAR 0 14
40830: PUSH
40831: LD_INT 3
40833: ARRAY
40834: GREATEREQUAL
40835: AND
40836: IFFALSE 40848
// result := weapon ;
40838: LD_ADDR_VAR 0 3
40842: PUSH
40843: LD_VAR 0 18
40847: ST_TO_ADDR
// end ; end ;
40848: LD_VAR 0 3
40852: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40853: LD_INT 0
40855: PPUSH
40856: PPUSH
// result := true ;
40857: LD_ADDR_VAR 0 3
40861: PUSH
40862: LD_INT 1
40864: ST_TO_ADDR
// if array1 = array2 then
40865: LD_VAR 0 1
40869: PUSH
40870: LD_VAR 0 2
40874: EQUAL
40875: IFFALSE 40935
// begin for i = 1 to array1 do
40877: LD_ADDR_VAR 0 4
40881: PUSH
40882: DOUBLE
40883: LD_INT 1
40885: DEC
40886: ST_TO_ADDR
40887: LD_VAR 0 1
40891: PUSH
40892: FOR_TO
40893: IFFALSE 40931
// if array1 [ i ] <> array2 [ i ] then
40895: LD_VAR 0 1
40899: PUSH
40900: LD_VAR 0 4
40904: ARRAY
40905: PUSH
40906: LD_VAR 0 2
40910: PUSH
40911: LD_VAR 0 4
40915: ARRAY
40916: NONEQUAL
40917: IFFALSE 40929
// begin result := false ;
40919: LD_ADDR_VAR 0 3
40923: PUSH
40924: LD_INT 0
40926: ST_TO_ADDR
// break ;
40927: GO 40931
// end ;
40929: GO 40892
40931: POP
40932: POP
// end else
40933: GO 40943
// result := false ;
40935: LD_ADDR_VAR 0 3
40939: PUSH
40940: LD_INT 0
40942: ST_TO_ADDR
// end ;
40943: LD_VAR 0 3
40947: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40948: LD_INT 0
40950: PPUSH
40951: PPUSH
// if not array1 or not array2 then
40952: LD_VAR 0 1
40956: NOT
40957: PUSH
40958: LD_VAR 0 2
40962: NOT
40963: OR
40964: IFFALSE 40968
// exit ;
40966: GO 41032
// result := true ;
40968: LD_ADDR_VAR 0 3
40972: PUSH
40973: LD_INT 1
40975: ST_TO_ADDR
// for i = 1 to array1 do
40976: LD_ADDR_VAR 0 4
40980: PUSH
40981: DOUBLE
40982: LD_INT 1
40984: DEC
40985: ST_TO_ADDR
40986: LD_VAR 0 1
40990: PUSH
40991: FOR_TO
40992: IFFALSE 41030
// if array1 [ i ] <> array2 [ i ] then
40994: LD_VAR 0 1
40998: PUSH
40999: LD_VAR 0 4
41003: ARRAY
41004: PUSH
41005: LD_VAR 0 2
41009: PUSH
41010: LD_VAR 0 4
41014: ARRAY
41015: NONEQUAL
41016: IFFALSE 41028
// begin result := false ;
41018: LD_ADDR_VAR 0 3
41022: PUSH
41023: LD_INT 0
41025: ST_TO_ADDR
// break ;
41026: GO 41030
// end ;
41028: GO 40991
41030: POP
41031: POP
// end ;
41032: LD_VAR 0 3
41036: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41037: LD_INT 0
41039: PPUSH
41040: PPUSH
41041: PPUSH
// pom := GetBase ( fac ) ;
41042: LD_ADDR_VAR 0 5
41046: PUSH
41047: LD_VAR 0 1
41051: PPUSH
41052: CALL_OW 274
41056: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41057: LD_ADDR_VAR 0 4
41061: PUSH
41062: LD_VAR 0 2
41066: PUSH
41067: LD_INT 1
41069: ARRAY
41070: PPUSH
41071: LD_VAR 0 2
41075: PUSH
41076: LD_INT 2
41078: ARRAY
41079: PPUSH
41080: LD_VAR 0 2
41084: PUSH
41085: LD_INT 3
41087: ARRAY
41088: PPUSH
41089: LD_VAR 0 2
41093: PUSH
41094: LD_INT 4
41096: ARRAY
41097: PPUSH
41098: CALL_OW 449
41102: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41103: LD_ADDR_VAR 0 3
41107: PUSH
41108: LD_VAR 0 5
41112: PPUSH
41113: LD_INT 1
41115: PPUSH
41116: CALL_OW 275
41120: PUSH
41121: LD_VAR 0 4
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: GREATEREQUAL
41130: PUSH
41131: LD_VAR 0 5
41135: PPUSH
41136: LD_INT 2
41138: PPUSH
41139: CALL_OW 275
41143: PUSH
41144: LD_VAR 0 4
41148: PUSH
41149: LD_INT 2
41151: ARRAY
41152: GREATEREQUAL
41153: AND
41154: PUSH
41155: LD_VAR 0 5
41159: PPUSH
41160: LD_INT 3
41162: PPUSH
41163: CALL_OW 275
41167: PUSH
41168: LD_VAR 0 4
41172: PUSH
41173: LD_INT 3
41175: ARRAY
41176: GREATEREQUAL
41177: AND
41178: ST_TO_ADDR
// end ;
41179: LD_VAR 0 3
41183: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41184: LD_INT 0
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
// pom := GetBase ( building ) ;
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: CALL_OW 274
41204: ST_TO_ADDR
// if not pom then
41205: LD_VAR 0 3
41209: NOT
41210: IFFALSE 41214
// exit ;
41212: GO 41384
// btype := GetBType ( building ) ;
41214: LD_ADDR_VAR 0 5
41218: PUSH
41219: LD_VAR 0 1
41223: PPUSH
41224: CALL_OW 266
41228: ST_TO_ADDR
// if btype = b_armoury then
41229: LD_VAR 0 5
41233: PUSH
41234: LD_INT 4
41236: EQUAL
41237: IFFALSE 41247
// btype := b_barracks ;
41239: LD_ADDR_VAR 0 5
41243: PUSH
41244: LD_INT 5
41246: ST_TO_ADDR
// if btype = b_depot then
41247: LD_VAR 0 5
41251: PUSH
41252: LD_INT 0
41254: EQUAL
41255: IFFALSE 41265
// btype := b_warehouse ;
41257: LD_ADDR_VAR 0 5
41261: PUSH
41262: LD_INT 1
41264: ST_TO_ADDR
// if btype = b_workshop then
41265: LD_VAR 0 5
41269: PUSH
41270: LD_INT 2
41272: EQUAL
41273: IFFALSE 41283
// btype := b_factory ;
41275: LD_ADDR_VAR 0 5
41279: PUSH
41280: LD_INT 3
41282: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41283: LD_ADDR_VAR 0 4
41287: PUSH
41288: LD_VAR 0 5
41292: PPUSH
41293: LD_VAR 0 1
41297: PPUSH
41298: CALL_OW 248
41302: PPUSH
41303: CALL_OW 450
41307: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41308: LD_ADDR_VAR 0 2
41312: PUSH
41313: LD_VAR 0 3
41317: PPUSH
41318: LD_INT 1
41320: PPUSH
41321: CALL_OW 275
41325: PUSH
41326: LD_VAR 0 4
41330: PUSH
41331: LD_INT 1
41333: ARRAY
41334: GREATEREQUAL
41335: PUSH
41336: LD_VAR 0 3
41340: PPUSH
41341: LD_INT 2
41343: PPUSH
41344: CALL_OW 275
41348: PUSH
41349: LD_VAR 0 4
41353: PUSH
41354: LD_INT 2
41356: ARRAY
41357: GREATEREQUAL
41358: AND
41359: PUSH
41360: LD_VAR 0 3
41364: PPUSH
41365: LD_INT 3
41367: PPUSH
41368: CALL_OW 275
41372: PUSH
41373: LD_VAR 0 4
41377: PUSH
41378: LD_INT 3
41380: ARRAY
41381: GREATEREQUAL
41382: AND
41383: ST_TO_ADDR
// end ;
41384: LD_VAR 0 2
41388: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41389: LD_INT 0
41391: PPUSH
41392: PPUSH
41393: PPUSH
// pom := GetBase ( building ) ;
41394: LD_ADDR_VAR 0 4
41398: PUSH
41399: LD_VAR 0 1
41403: PPUSH
41404: CALL_OW 274
41408: ST_TO_ADDR
// if not pom then
41409: LD_VAR 0 4
41413: NOT
41414: IFFALSE 41418
// exit ;
41416: GO 41519
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41418: LD_ADDR_VAR 0 5
41422: PUSH
41423: LD_VAR 0 2
41427: PPUSH
41428: LD_VAR 0 1
41432: PPUSH
41433: CALL_OW 248
41437: PPUSH
41438: CALL_OW 450
41442: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_VAR 0 4
41452: PPUSH
41453: LD_INT 1
41455: PPUSH
41456: CALL_OW 275
41460: PUSH
41461: LD_VAR 0 5
41465: PUSH
41466: LD_INT 1
41468: ARRAY
41469: GREATEREQUAL
41470: PUSH
41471: LD_VAR 0 4
41475: PPUSH
41476: LD_INT 2
41478: PPUSH
41479: CALL_OW 275
41483: PUSH
41484: LD_VAR 0 5
41488: PUSH
41489: LD_INT 2
41491: ARRAY
41492: GREATEREQUAL
41493: AND
41494: PUSH
41495: LD_VAR 0 4
41499: PPUSH
41500: LD_INT 3
41502: PPUSH
41503: CALL_OW 275
41507: PUSH
41508: LD_VAR 0 5
41512: PUSH
41513: LD_INT 3
41515: ARRAY
41516: GREATEREQUAL
41517: AND
41518: ST_TO_ADDR
// end ;
41519: LD_VAR 0 3
41523: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41524: LD_INT 0
41526: PPUSH
41527: PPUSH
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
// result := false ;
41537: LD_ADDR_VAR 0 8
41541: PUSH
41542: LD_INT 0
41544: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41545: LD_VAR 0 5
41549: NOT
41550: PUSH
41551: LD_VAR 0 1
41555: NOT
41556: OR
41557: PUSH
41558: LD_VAR 0 2
41562: NOT
41563: OR
41564: PUSH
41565: LD_VAR 0 3
41569: NOT
41570: OR
41571: IFFALSE 41575
// exit ;
41573: GO 42389
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41575: LD_ADDR_VAR 0 14
41579: PUSH
41580: LD_VAR 0 1
41584: PPUSH
41585: LD_VAR 0 2
41589: PPUSH
41590: LD_VAR 0 3
41594: PPUSH
41595: LD_VAR 0 4
41599: PPUSH
41600: LD_VAR 0 5
41604: PUSH
41605: LD_INT 1
41607: ARRAY
41608: PPUSH
41609: CALL_OW 248
41613: PPUSH
41614: LD_INT 0
41616: PPUSH
41617: CALL 43626 0 6
41621: ST_TO_ADDR
// if not hexes then
41622: LD_VAR 0 14
41626: NOT
41627: IFFALSE 41631
// exit ;
41629: GO 42389
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41631: LD_ADDR_VAR 0 17
41635: PUSH
41636: LD_VAR 0 5
41640: PPUSH
41641: LD_INT 22
41643: PUSH
41644: LD_VAR 0 13
41648: PPUSH
41649: CALL_OW 255
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: LD_INT 30
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 30
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PPUSH
41690: CALL_OW 72
41694: ST_TO_ADDR
// for i = 1 to hexes do
41695: LD_ADDR_VAR 0 9
41699: PUSH
41700: DOUBLE
41701: LD_INT 1
41703: DEC
41704: ST_TO_ADDR
41705: LD_VAR 0 14
41709: PUSH
41710: FOR_TO
41711: IFFALSE 42387
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41713: LD_ADDR_VAR 0 13
41717: PUSH
41718: LD_VAR 0 14
41722: PUSH
41723: LD_VAR 0 9
41727: ARRAY
41728: PUSH
41729: LD_INT 1
41731: ARRAY
41732: PPUSH
41733: LD_VAR 0 14
41737: PUSH
41738: LD_VAR 0 9
41742: ARRAY
41743: PUSH
41744: LD_INT 2
41746: ARRAY
41747: PPUSH
41748: CALL_OW 428
41752: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41753: LD_VAR 0 14
41757: PUSH
41758: LD_VAR 0 9
41762: ARRAY
41763: PUSH
41764: LD_INT 1
41766: ARRAY
41767: PPUSH
41768: LD_VAR 0 14
41772: PUSH
41773: LD_VAR 0 9
41777: ARRAY
41778: PUSH
41779: LD_INT 2
41781: ARRAY
41782: PPUSH
41783: CALL_OW 351
41787: PUSH
41788: LD_VAR 0 14
41792: PUSH
41793: LD_VAR 0 9
41797: ARRAY
41798: PUSH
41799: LD_INT 1
41801: ARRAY
41802: PPUSH
41803: LD_VAR 0 14
41807: PUSH
41808: LD_VAR 0 9
41812: ARRAY
41813: PUSH
41814: LD_INT 2
41816: ARRAY
41817: PPUSH
41818: CALL_OW 488
41822: NOT
41823: OR
41824: PUSH
41825: LD_VAR 0 13
41829: PPUSH
41830: CALL_OW 247
41834: PUSH
41835: LD_INT 3
41837: EQUAL
41838: OR
41839: IFFALSE 41845
// exit ;
41841: POP
41842: POP
41843: GO 42389
// if not tmp then
41845: LD_VAR 0 13
41849: NOT
41850: IFFALSE 41854
// continue ;
41852: GO 41710
// result := true ;
41854: LD_ADDR_VAR 0 8
41858: PUSH
41859: LD_INT 1
41861: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41862: LD_VAR 0 6
41866: PUSH
41867: LD_VAR 0 13
41871: PPUSH
41872: CALL_OW 247
41876: PUSH
41877: LD_INT 2
41879: EQUAL
41880: AND
41881: PUSH
41882: LD_VAR 0 13
41886: PPUSH
41887: CALL_OW 263
41891: PUSH
41892: LD_INT 1
41894: EQUAL
41895: AND
41896: IFFALSE 42060
// begin if IsDrivenBy ( tmp ) then
41898: LD_VAR 0 13
41902: PPUSH
41903: CALL_OW 311
41907: IFFALSE 41911
// continue ;
41909: GO 41710
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41911: LD_VAR 0 6
41915: PPUSH
41916: LD_INT 3
41918: PUSH
41919: LD_INT 60
41921: PUSH
41922: EMPTY
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: LD_INT 55
41934: PUSH
41935: EMPTY
41936: LIST
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PPUSH
41946: CALL_OW 72
41950: IFFALSE 42058
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41952: LD_ADDR_VAR 0 18
41956: PUSH
41957: LD_VAR 0 6
41961: PPUSH
41962: LD_INT 3
41964: PUSH
41965: LD_INT 60
41967: PUSH
41968: EMPTY
41969: LIST
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: LD_INT 55
41980: PUSH
41981: EMPTY
41982: LIST
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PPUSH
41992: CALL_OW 72
41996: PUSH
41997: LD_INT 1
41999: ARRAY
42000: ST_TO_ADDR
// if IsInUnit ( driver ) then
42001: LD_VAR 0 18
42005: PPUSH
42006: CALL_OW 310
42010: IFFALSE 42021
// ComExit ( driver ) ;
42012: LD_VAR 0 18
42016: PPUSH
42017: CALL 66754 0 1
// AddComEnterUnit ( driver , tmp ) ;
42021: LD_VAR 0 18
42025: PPUSH
42026: LD_VAR 0 13
42030: PPUSH
42031: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42035: LD_VAR 0 18
42039: PPUSH
42040: LD_VAR 0 7
42044: PPUSH
42045: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42049: LD_VAR 0 18
42053: PPUSH
42054: CALL_OW 181
// end ; continue ;
42058: GO 41710
// end ; if not cleaners or not tmp in cleaners then
42060: LD_VAR 0 6
42064: NOT
42065: PUSH
42066: LD_VAR 0 13
42070: PUSH
42071: LD_VAR 0 6
42075: IN
42076: NOT
42077: OR
42078: IFFALSE 42385
// begin if dep then
42080: LD_VAR 0 17
42084: IFFALSE 42220
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42086: LD_ADDR_VAR 0 16
42090: PUSH
42091: LD_VAR 0 17
42095: PUSH
42096: LD_INT 1
42098: ARRAY
42099: PPUSH
42100: CALL_OW 250
42104: PPUSH
42105: LD_VAR 0 17
42109: PUSH
42110: LD_INT 1
42112: ARRAY
42113: PPUSH
42114: CALL_OW 254
42118: PPUSH
42119: LD_INT 5
42121: PPUSH
42122: CALL_OW 272
42126: PUSH
42127: LD_VAR 0 17
42131: PUSH
42132: LD_INT 1
42134: ARRAY
42135: PPUSH
42136: CALL_OW 251
42140: PPUSH
42141: LD_VAR 0 17
42145: PUSH
42146: LD_INT 1
42148: ARRAY
42149: PPUSH
42150: CALL_OW 254
42154: PPUSH
42155: LD_INT 5
42157: PPUSH
42158: CALL_OW 273
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42167: LD_VAR 0 16
42171: PUSH
42172: LD_INT 1
42174: ARRAY
42175: PPUSH
42176: LD_VAR 0 16
42180: PUSH
42181: LD_INT 2
42183: ARRAY
42184: PPUSH
42185: CALL_OW 488
42189: IFFALSE 42220
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42191: LD_VAR 0 13
42195: PPUSH
42196: LD_VAR 0 16
42200: PUSH
42201: LD_INT 1
42203: ARRAY
42204: PPUSH
42205: LD_VAR 0 16
42209: PUSH
42210: LD_INT 2
42212: ARRAY
42213: PPUSH
42214: CALL_OW 111
// continue ;
42218: GO 41710
// end ; end ; r := GetDir ( tmp ) ;
42220: LD_ADDR_VAR 0 15
42224: PUSH
42225: LD_VAR 0 13
42229: PPUSH
42230: CALL_OW 254
42234: ST_TO_ADDR
// if r = 5 then
42235: LD_VAR 0 15
42239: PUSH
42240: LD_INT 5
42242: EQUAL
42243: IFFALSE 42253
// r := 0 ;
42245: LD_ADDR_VAR 0 15
42249: PUSH
42250: LD_INT 0
42252: ST_TO_ADDR
// for j = r to 5 do
42253: LD_ADDR_VAR 0 10
42257: PUSH
42258: DOUBLE
42259: LD_VAR 0 15
42263: DEC
42264: ST_TO_ADDR
42265: LD_INT 5
42267: PUSH
42268: FOR_TO
42269: IFFALSE 42383
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42271: LD_ADDR_VAR 0 11
42275: PUSH
42276: LD_VAR 0 13
42280: PPUSH
42281: CALL_OW 250
42285: PPUSH
42286: LD_VAR 0 10
42290: PPUSH
42291: LD_INT 2
42293: PPUSH
42294: CALL_OW 272
42298: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42299: LD_ADDR_VAR 0 12
42303: PUSH
42304: LD_VAR 0 13
42308: PPUSH
42309: CALL_OW 251
42313: PPUSH
42314: LD_VAR 0 10
42318: PPUSH
42319: LD_INT 2
42321: PPUSH
42322: CALL_OW 273
42326: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42327: LD_VAR 0 11
42331: PPUSH
42332: LD_VAR 0 12
42336: PPUSH
42337: CALL_OW 488
42341: PUSH
42342: LD_VAR 0 11
42346: PPUSH
42347: LD_VAR 0 12
42351: PPUSH
42352: CALL_OW 428
42356: NOT
42357: AND
42358: IFFALSE 42381
// begin ComMoveXY ( tmp , _x , _y ) ;
42360: LD_VAR 0 13
42364: PPUSH
42365: LD_VAR 0 11
42369: PPUSH
42370: LD_VAR 0 12
42374: PPUSH
42375: CALL_OW 111
// break ;
42379: GO 42383
// end ; end ;
42381: GO 42268
42383: POP
42384: POP
// end ; end ;
42385: GO 41710
42387: POP
42388: POP
// end ;
42389: LD_VAR 0 8
42393: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42394: LD_INT 0
42396: PPUSH
// result := true ;
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: LD_INT 1
42404: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42405: LD_VAR 0 2
42409: PUSH
42410: LD_INT 24
42412: DOUBLE
42413: EQUAL
42414: IFTRUE 42424
42416: LD_INT 33
42418: DOUBLE
42419: EQUAL
42420: IFTRUE 42424
42422: GO 42449
42424: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42425: LD_ADDR_VAR 0 3
42429: PUSH
42430: LD_INT 32
42432: PPUSH
42433: LD_VAR 0 1
42437: PPUSH
42438: CALL_OW 321
42442: PUSH
42443: LD_INT 2
42445: EQUAL
42446: ST_TO_ADDR
42447: GO 42769
42449: LD_INT 20
42451: DOUBLE
42452: EQUAL
42453: IFTRUE 42457
42455: GO 42482
42457: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42458: LD_ADDR_VAR 0 3
42462: PUSH
42463: LD_INT 6
42465: PPUSH
42466: LD_VAR 0 1
42470: PPUSH
42471: CALL_OW 321
42475: PUSH
42476: LD_INT 2
42478: EQUAL
42479: ST_TO_ADDR
42480: GO 42769
42482: LD_INT 22
42484: DOUBLE
42485: EQUAL
42486: IFTRUE 42496
42488: LD_INT 36
42490: DOUBLE
42491: EQUAL
42492: IFTRUE 42496
42494: GO 42521
42496: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42497: LD_ADDR_VAR 0 3
42501: PUSH
42502: LD_INT 15
42504: PPUSH
42505: LD_VAR 0 1
42509: PPUSH
42510: CALL_OW 321
42514: PUSH
42515: LD_INT 2
42517: EQUAL
42518: ST_TO_ADDR
42519: GO 42769
42521: LD_INT 30
42523: DOUBLE
42524: EQUAL
42525: IFTRUE 42529
42527: GO 42554
42529: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42530: LD_ADDR_VAR 0 3
42534: PUSH
42535: LD_INT 20
42537: PPUSH
42538: LD_VAR 0 1
42542: PPUSH
42543: CALL_OW 321
42547: PUSH
42548: LD_INT 2
42550: EQUAL
42551: ST_TO_ADDR
42552: GO 42769
42554: LD_INT 28
42556: DOUBLE
42557: EQUAL
42558: IFTRUE 42568
42560: LD_INT 21
42562: DOUBLE
42563: EQUAL
42564: IFTRUE 42568
42566: GO 42593
42568: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42569: LD_ADDR_VAR 0 3
42573: PUSH
42574: LD_INT 21
42576: PPUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL_OW 321
42586: PUSH
42587: LD_INT 2
42589: EQUAL
42590: ST_TO_ADDR
42591: GO 42769
42593: LD_INT 16
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42601
42599: GO 42628
42601: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42602: LD_ADDR_VAR 0 3
42606: PUSH
42607: LD_EXP 108
42611: PPUSH
42612: LD_VAR 0 1
42616: PPUSH
42617: CALL_OW 321
42621: PUSH
42622: LD_INT 2
42624: EQUAL
42625: ST_TO_ADDR
42626: GO 42769
42628: LD_INT 19
42630: DOUBLE
42631: EQUAL
42632: IFTRUE 42642
42634: LD_INT 23
42636: DOUBLE
42637: EQUAL
42638: IFTRUE 42642
42640: GO 42669
42642: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42643: LD_ADDR_VAR 0 3
42647: PUSH
42648: LD_EXP 107
42652: PPUSH
42653: LD_VAR 0 1
42657: PPUSH
42658: CALL_OW 321
42662: PUSH
42663: LD_INT 2
42665: EQUAL
42666: ST_TO_ADDR
42667: GO 42769
42669: LD_INT 17
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42677
42675: GO 42702
42677: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42678: LD_ADDR_VAR 0 3
42682: PUSH
42683: LD_INT 39
42685: PPUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 321
42695: PUSH
42696: LD_INT 2
42698: EQUAL
42699: ST_TO_ADDR
42700: GO 42769
42702: LD_INT 18
42704: DOUBLE
42705: EQUAL
42706: IFTRUE 42710
42708: GO 42735
42710: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42711: LD_ADDR_VAR 0 3
42715: PUSH
42716: LD_INT 40
42718: PPUSH
42719: LD_VAR 0 1
42723: PPUSH
42724: CALL_OW 321
42728: PUSH
42729: LD_INT 2
42731: EQUAL
42732: ST_TO_ADDR
42733: GO 42769
42735: LD_INT 27
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42743
42741: GO 42768
42743: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42744: LD_ADDR_VAR 0 3
42748: PUSH
42749: LD_INT 35
42751: PPUSH
42752: LD_VAR 0 1
42756: PPUSH
42757: CALL_OW 321
42761: PUSH
42762: LD_INT 2
42764: EQUAL
42765: ST_TO_ADDR
42766: GO 42769
42768: POP
// end ;
42769: LD_VAR 0 3
42773: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42774: LD_INT 0
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
// result := false ;
42787: LD_ADDR_VAR 0 6
42791: PUSH
42792: LD_INT 0
42794: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42795: LD_VAR 0 1
42799: NOT
42800: PUSH
42801: LD_VAR 0 1
42805: PPUSH
42806: CALL_OW 266
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: IN
42821: NOT
42822: OR
42823: PUSH
42824: LD_VAR 0 2
42828: NOT
42829: OR
42830: PUSH
42831: LD_VAR 0 5
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: LD_INT 3
42847: PUSH
42848: LD_INT 4
42850: PUSH
42851: LD_INT 5
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: IN
42862: NOT
42863: OR
42864: PUSH
42865: LD_VAR 0 3
42869: PPUSH
42870: LD_VAR 0 4
42874: PPUSH
42875: CALL_OW 488
42879: NOT
42880: OR
42881: IFFALSE 42885
// exit ;
42883: GO 43621
// side := GetSide ( depot ) ;
42885: LD_ADDR_VAR 0 9
42889: PUSH
42890: LD_VAR 0 1
42894: PPUSH
42895: CALL_OW 255
42899: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42900: LD_VAR 0 9
42904: PPUSH
42905: LD_VAR 0 2
42909: PPUSH
42910: CALL 42394 0 2
42914: NOT
42915: IFFALSE 42919
// exit ;
42917: GO 43621
// pom := GetBase ( depot ) ;
42919: LD_ADDR_VAR 0 10
42923: PUSH
42924: LD_VAR 0 1
42928: PPUSH
42929: CALL_OW 274
42933: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42934: LD_ADDR_VAR 0 11
42938: PUSH
42939: LD_VAR 0 2
42943: PPUSH
42944: LD_VAR 0 1
42948: PPUSH
42949: CALL_OW 248
42953: PPUSH
42954: CALL_OW 450
42958: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42959: LD_VAR 0 10
42963: PPUSH
42964: LD_INT 1
42966: PPUSH
42967: CALL_OW 275
42971: PUSH
42972: LD_VAR 0 11
42976: PUSH
42977: LD_INT 1
42979: ARRAY
42980: GREATEREQUAL
42981: PUSH
42982: LD_VAR 0 10
42986: PPUSH
42987: LD_INT 2
42989: PPUSH
42990: CALL_OW 275
42994: PUSH
42995: LD_VAR 0 11
42999: PUSH
43000: LD_INT 2
43002: ARRAY
43003: GREATEREQUAL
43004: AND
43005: PUSH
43006: LD_VAR 0 10
43010: PPUSH
43011: LD_INT 3
43013: PPUSH
43014: CALL_OW 275
43018: PUSH
43019: LD_VAR 0 11
43023: PUSH
43024: LD_INT 3
43026: ARRAY
43027: GREATEREQUAL
43028: AND
43029: NOT
43030: IFFALSE 43034
// exit ;
43032: GO 43621
// if GetBType ( depot ) = b_depot then
43034: LD_VAR 0 1
43038: PPUSH
43039: CALL_OW 266
43043: PUSH
43044: LD_INT 0
43046: EQUAL
43047: IFFALSE 43059
// dist := 28 else
43049: LD_ADDR_VAR 0 14
43053: PUSH
43054: LD_INT 28
43056: ST_TO_ADDR
43057: GO 43067
// dist := 36 ;
43059: LD_ADDR_VAR 0 14
43063: PUSH
43064: LD_INT 36
43066: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43067: LD_VAR 0 1
43071: PPUSH
43072: LD_VAR 0 3
43076: PPUSH
43077: LD_VAR 0 4
43081: PPUSH
43082: CALL_OW 297
43086: PUSH
43087: LD_VAR 0 14
43091: GREATER
43092: IFFALSE 43096
// exit ;
43094: GO 43621
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43096: LD_ADDR_VAR 0 12
43100: PUSH
43101: LD_VAR 0 2
43105: PPUSH
43106: LD_VAR 0 3
43110: PPUSH
43111: LD_VAR 0 4
43115: PPUSH
43116: LD_VAR 0 5
43120: PPUSH
43121: LD_VAR 0 1
43125: PPUSH
43126: CALL_OW 248
43130: PPUSH
43131: LD_INT 0
43133: PPUSH
43134: CALL 43626 0 6
43138: ST_TO_ADDR
// if not hexes then
43139: LD_VAR 0 12
43143: NOT
43144: IFFALSE 43148
// exit ;
43146: GO 43621
// hex := GetHexInfo ( x , y ) ;
43148: LD_ADDR_VAR 0 15
43152: PUSH
43153: LD_VAR 0 3
43157: PPUSH
43158: LD_VAR 0 4
43162: PPUSH
43163: CALL_OW 546
43167: ST_TO_ADDR
// if hex [ 1 ] then
43168: LD_VAR 0 15
43172: PUSH
43173: LD_INT 1
43175: ARRAY
43176: IFFALSE 43180
// exit ;
43178: GO 43621
// height := hex [ 2 ] ;
43180: LD_ADDR_VAR 0 13
43184: PUSH
43185: LD_VAR 0 15
43189: PUSH
43190: LD_INT 2
43192: ARRAY
43193: ST_TO_ADDR
// for i = 1 to hexes do
43194: LD_ADDR_VAR 0 7
43198: PUSH
43199: DOUBLE
43200: LD_INT 1
43202: DEC
43203: ST_TO_ADDR
43204: LD_VAR 0 12
43208: PUSH
43209: FOR_TO
43210: IFFALSE 43540
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43212: LD_VAR 0 12
43216: PUSH
43217: LD_VAR 0 7
43221: ARRAY
43222: PUSH
43223: LD_INT 1
43225: ARRAY
43226: PPUSH
43227: LD_VAR 0 12
43231: PUSH
43232: LD_VAR 0 7
43236: ARRAY
43237: PUSH
43238: LD_INT 2
43240: ARRAY
43241: PPUSH
43242: CALL_OW 488
43246: NOT
43247: PUSH
43248: LD_VAR 0 12
43252: PUSH
43253: LD_VAR 0 7
43257: ARRAY
43258: PUSH
43259: LD_INT 1
43261: ARRAY
43262: PPUSH
43263: LD_VAR 0 12
43267: PUSH
43268: LD_VAR 0 7
43272: ARRAY
43273: PUSH
43274: LD_INT 2
43276: ARRAY
43277: PPUSH
43278: CALL_OW 428
43282: PUSH
43283: LD_INT 0
43285: GREATER
43286: OR
43287: PUSH
43288: LD_VAR 0 12
43292: PUSH
43293: LD_VAR 0 7
43297: ARRAY
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PPUSH
43303: LD_VAR 0 12
43307: PUSH
43308: LD_VAR 0 7
43312: ARRAY
43313: PUSH
43314: LD_INT 2
43316: ARRAY
43317: PPUSH
43318: CALL_OW 351
43322: OR
43323: IFFALSE 43329
// exit ;
43325: POP
43326: POP
43327: GO 43621
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43329: LD_ADDR_VAR 0 8
43333: PUSH
43334: LD_VAR 0 12
43338: PUSH
43339: LD_VAR 0 7
43343: ARRAY
43344: PUSH
43345: LD_INT 1
43347: ARRAY
43348: PPUSH
43349: LD_VAR 0 12
43353: PUSH
43354: LD_VAR 0 7
43358: ARRAY
43359: PUSH
43360: LD_INT 2
43362: ARRAY
43363: PPUSH
43364: CALL_OW 546
43368: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43369: LD_VAR 0 8
43373: PUSH
43374: LD_INT 1
43376: ARRAY
43377: PUSH
43378: LD_VAR 0 8
43382: PUSH
43383: LD_INT 2
43385: ARRAY
43386: PUSH
43387: LD_VAR 0 13
43391: PUSH
43392: LD_INT 2
43394: PLUS
43395: GREATER
43396: OR
43397: PUSH
43398: LD_VAR 0 8
43402: PUSH
43403: LD_INT 2
43405: ARRAY
43406: PUSH
43407: LD_VAR 0 13
43411: PUSH
43412: LD_INT 2
43414: MINUS
43415: LESS
43416: OR
43417: PUSH
43418: LD_VAR 0 8
43422: PUSH
43423: LD_INT 3
43425: ARRAY
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 8
43432: PUSH
43433: LD_INT 9
43435: PUSH
43436: LD_INT 10
43438: PUSH
43439: LD_INT 11
43441: PUSH
43442: LD_INT 12
43444: PUSH
43445: LD_INT 13
43447: PUSH
43448: LD_INT 16
43450: PUSH
43451: LD_INT 17
43453: PUSH
43454: LD_INT 18
43456: PUSH
43457: LD_INT 19
43459: PUSH
43460: LD_INT 20
43462: PUSH
43463: LD_INT 21
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: IN
43481: NOT
43482: OR
43483: PUSH
43484: LD_VAR 0 8
43488: PUSH
43489: LD_INT 5
43491: ARRAY
43492: NOT
43493: OR
43494: PUSH
43495: LD_VAR 0 8
43499: PUSH
43500: LD_INT 6
43502: ARRAY
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: LD_INT 7
43512: PUSH
43513: LD_INT 9
43515: PUSH
43516: LD_INT 10
43518: PUSH
43519: LD_INT 11
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: IN
43530: NOT
43531: OR
43532: IFFALSE 43538
// exit ;
43534: POP
43535: POP
43536: GO 43621
// end ;
43538: GO 43209
43540: POP
43541: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43542: LD_VAR 0 9
43546: PPUSH
43547: LD_VAR 0 3
43551: PPUSH
43552: LD_VAR 0 4
43556: PPUSH
43557: LD_INT 20
43559: PPUSH
43560: CALL 35567 0 4
43564: PUSH
43565: LD_INT 4
43567: ARRAY
43568: IFFALSE 43572
// exit ;
43570: GO 43621
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43572: LD_VAR 0 2
43576: PUSH
43577: LD_INT 29
43579: PUSH
43580: LD_INT 30
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: IN
43587: PUSH
43588: LD_VAR 0 3
43592: PPUSH
43593: LD_VAR 0 4
43597: PPUSH
43598: LD_VAR 0 9
43602: PPUSH
43603: CALL_OW 440
43607: NOT
43608: AND
43609: IFFALSE 43613
// exit ;
43611: GO 43621
// result := true ;
43613: LD_ADDR_VAR 0 6
43617: PUSH
43618: LD_INT 1
43620: ST_TO_ADDR
// end ;
43621: LD_VAR 0 6
43625: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43626: LD_INT 0
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
// result = [ ] ;
43686: LD_ADDR_VAR 0 7
43690: PUSH
43691: EMPTY
43692: ST_TO_ADDR
// temp_list = [ ] ;
43693: LD_ADDR_VAR 0 9
43697: PUSH
43698: EMPTY
43699: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43700: LD_VAR 0 4
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 3
43716: PUSH
43717: LD_INT 4
43719: PUSH
43720: LD_INT 5
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: IN
43731: NOT
43732: PUSH
43733: LD_VAR 0 1
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: IN
43748: PUSH
43749: LD_VAR 0 5
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 3
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: IN
43768: NOT
43769: AND
43770: OR
43771: IFFALSE 43775
// exit ;
43773: GO 62166
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43775: LD_VAR 0 1
43779: PUSH
43780: LD_INT 6
43782: PUSH
43783: LD_INT 7
43785: PUSH
43786: LD_INT 8
43788: PUSH
43789: LD_INT 13
43791: PUSH
43792: LD_INT 12
43794: PUSH
43795: LD_INT 15
43797: PUSH
43798: LD_INT 11
43800: PUSH
43801: LD_INT 14
43803: PUSH
43804: LD_INT 10
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: IN
43818: IFFALSE 43828
// btype = b_lab ;
43820: LD_ADDR_VAR 0 1
43824: PUSH
43825: LD_INT 6
43827: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43828: LD_VAR 0 6
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: IN
43847: NOT
43848: PUSH
43849: LD_VAR 0 1
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 3
43865: PUSH
43866: LD_INT 6
43868: PUSH
43869: LD_INT 36
43871: PUSH
43872: LD_INT 4
43874: PUSH
43875: LD_INT 5
43877: PUSH
43878: LD_INT 31
43880: PUSH
43881: LD_INT 32
43883: PUSH
43884: LD_INT 33
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: IN
43900: NOT
43901: PUSH
43902: LD_VAR 0 6
43906: PUSH
43907: LD_INT 1
43909: EQUAL
43910: AND
43911: OR
43912: PUSH
43913: LD_VAR 0 1
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 3
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: IN
43928: NOT
43929: PUSH
43930: LD_VAR 0 6
43934: PUSH
43935: LD_INT 2
43937: EQUAL
43938: AND
43939: OR
43940: IFFALSE 43950
// mode = 0 ;
43942: LD_ADDR_VAR 0 6
43946: PUSH
43947: LD_INT 0
43949: ST_TO_ADDR
// case mode of 0 :
43950: LD_VAR 0 6
43954: PUSH
43955: LD_INT 0
43957: DOUBLE
43958: EQUAL
43959: IFTRUE 43963
43961: GO 55416
43963: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43964: LD_ADDR_VAR 0 11
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44157: LD_ADDR_VAR 0 12
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 3
44314: NEG
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: NEG
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44353: LD_ADDR_VAR 0 13
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 3
44512: NEG
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: LD_INT 3
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44552: LD_ADDR_VAR 0 14
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 3
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44748: LD_ADDR_VAR 0 15
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44941: LD_ADDR_VAR 0 16
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 3
45098: PUSH
45099: LD_INT 3
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 3
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45134: LD_ADDR_VAR 0 17
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45364: LD_ADDR_VAR 0 18
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45594: LD_ADDR_VAR 0 19
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45824: LD_ADDR_VAR 0 20
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 2
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46054: LD_ADDR_VAR 0 21
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46284: LD_ADDR_VAR 0 22
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46514: LD_ADDR_VAR 0 23
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: LD_INT 3
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46794: LD_ADDR_VAR 0 24
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47070: LD_ADDR_VAR 0 25
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 3
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 3
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47344: LD_ADDR_VAR 0 26
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47620: LD_ADDR_VAR 0 27
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 3
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47900: LD_ADDR_VAR 0 28
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 3
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48182: LD_ADDR_VAR 0 29
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48461: LD_ADDR_VAR 0 30
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48739: LD_ADDR_VAR 0 31
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 3
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49017: LD_ADDR_VAR 0 32
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 3
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 3
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 3
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 3
49260: NEG
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49295: LD_ADDR_VAR 0 33
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49574: LD_ADDR_VAR 0 34
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 3
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49854: LD_ADDR_VAR 0 35
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49966: LD_ADDR_VAR 0 36
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50078: LD_ADDR_VAR 0 37
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50190: LD_ADDR_VAR 0 38
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50302: LD_ADDR_VAR 0 39
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50414: LD_ADDR_VAR 0 40
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50526: LD_ADDR_VAR 0 41
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: LD_INT 3
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: NEG
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50876: LD_ADDR_VAR 0 42
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 3
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: PUSH
51123: LD_INT 3
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: LD_INT 3
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51226: LD_ADDR_VAR 0 43
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: NEG
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51574: LD_ADDR_VAR 0 44
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: LD_INT 3
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 3
51883: NEG
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51924: LD_ADDR_VAR 0 45
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: NEG
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52274: LD_ADDR_VAR 0 46
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 3
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52622: LD_ADDR_VAR 0 47
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52773: LD_ADDR_VAR 0 48
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52920: LD_ADDR_VAR 0 49
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53064: LD_ADDR_VAR 0 50
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53208: LD_ADDR_VAR 0 51
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53355: LD_ADDR_VAR 0 52
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53506: LD_ADDR_VAR 0 53
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53736: LD_ADDR_VAR 0 54
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53966: LD_ADDR_VAR 0 55
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54196: LD_ADDR_VAR 0 56
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54426: LD_ADDR_VAR 0 57
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54656: LD_ADDR_VAR 0 58
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54886: LD_ADDR_VAR 0 59
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54974: LD_ADDR_VAR 0 60
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55062: LD_ADDR_VAR 0 61
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55150: LD_ADDR_VAR 0 62
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55238: LD_ADDR_VAR 0 63
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55326: LD_ADDR_VAR 0 64
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: ST_TO_ADDR
// end ; 1 :
55414: GO 61311
55416: LD_INT 1
55418: DOUBLE
55419: EQUAL
55420: IFTRUE 55424
55422: GO 58047
55424: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55425: LD_ADDR_VAR 0 11
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55469: LD_ADDR_VAR 0 12
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55510: LD_ADDR_VAR 0 13
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55550: LD_ADDR_VAR 0 14
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 3
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55591: LD_ADDR_VAR 0 15
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55635: LD_ADDR_VAR 0 16
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 3
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: LD_INT 3
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55681: LD_ADDR_VAR 0 17
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 3
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55725: LD_ADDR_VAR 0 18
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55766: LD_ADDR_VAR 0 19
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55806: LD_ADDR_VAR 0 20
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55847: LD_ADDR_VAR 0 21
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: NEG
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55891: LD_ADDR_VAR 0 22
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: LD_INT 3
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55937: LD_ADDR_VAR 0 23
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 4
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 3
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55981: LD_ADDR_VAR 0 24
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 4
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: LIST
56021: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56022: LD_ADDR_VAR 0 25
56026: PUSH
56027: LD_INT 3
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 4
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 4
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56062: LD_ADDR_VAR 0 26
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 4
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56103: LD_ADDR_VAR 0 27
56107: PUSH
56108: LD_INT 3
56110: NEG
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56147: LD_ADDR_VAR 0 28
56151: PUSH
56152: LD_INT 3
56154: NEG
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 4
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 4
56178: NEG
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56193: LD_ADDR_VAR 0 29
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 4
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 4
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 5
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 5
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 4
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 6
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 6
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 5
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56348: LD_ADDR_VAR 0 30
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 4
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 4
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 4
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 5
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 5
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 5
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 6
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 6
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56491: LD_ADDR_VAR 0 31
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 4
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 4
56538: PUSH
56539: LD_INT 4
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: LD_INT 4
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 5
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 5
56568: PUSH
56569: LD_INT 5
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 4
56578: PUSH
56579: LD_INT 5
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 6
56588: PUSH
56589: LD_INT 5
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 6
56598: PUSH
56599: LD_INT 6
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 5
56608: PUSH
56609: LD_INT 6
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56630: LD_ADDR_VAR 0 32
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 4
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 5
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 5
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 4
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: LD_INT 6
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 6
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 5
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56773: LD_ADDR_VAR 0 33
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 3
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 4
56825: NEG
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 4
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 4
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 5
56859: NEG
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 5
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 5
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 6
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 6
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56928: LD_ADDR_VAR 0 34
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 3
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 3
56947: NEG
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: NEG
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 4
56983: NEG
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 4
56995: NEG
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 4
57007: NEG
57008: PUSH
57009: LD_INT 5
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 5
57019: NEG
57020: PUSH
57021: LD_INT 4
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 5
57031: NEG
57032: PUSH
57033: LD_INT 5
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 5
57043: NEG
57044: PUSH
57045: LD_INT 6
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 6
57055: NEG
57056: PUSH
57057: LD_INT 5
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 6
57067: NEG
57068: PUSH
57069: LD_INT 6
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57091: LD_ADDR_VAR 0 41
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57135: LD_ADDR_VAR 0 42
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 3
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57176: LD_ADDR_VAR 0 43
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57216: LD_ADDR_VAR 0 44
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57257: LD_ADDR_VAR 0 45
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57301: LD_ADDR_VAR 0 46
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 3
57332: NEG
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57347: LD_ADDR_VAR 0 47
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57380: LD_ADDR_VAR 0 48
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57411: LD_ADDR_VAR 0 49
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57440: LD_ADDR_VAR 0 50
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57469: LD_ADDR_VAR 0 51
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57500: LD_ADDR_VAR 0 52
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57533: LD_ADDR_VAR 0 53
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57577: LD_ADDR_VAR 0 54
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57618: LD_ADDR_VAR 0 55
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: LD_INT 3
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: LD_INT 3
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: LIST
57657: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57658: LD_ADDR_VAR 0 56
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: LD_INT 3
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: LIST
57698: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57699: LD_ADDR_VAR 0 57
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57743: LD_ADDR_VAR 0 58
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: LD_INT 3
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: LD_INT 3
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57789: LD_ADDR_VAR 0 59
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57833: LD_ADDR_VAR 0 60
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57874: LD_ADDR_VAR 0 61
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57914: LD_ADDR_VAR 0 62
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: LIST
57954: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57955: LD_ADDR_VAR 0 63
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: NEG
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57999: LD_ADDR_VAR 0 64
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: LD_INT 2
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: ST_TO_ADDR
// end ; 2 :
58045: GO 61311
58047: LD_INT 2
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58055
58053: GO 61310
58055: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58056: LD_ADDR_VAR 0 29
58060: PUSH
58061: LD_INT 4
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 4
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 5
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 5
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 5
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 4
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 4
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: LD_INT 4
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 4
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 4
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 4
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 5
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 5
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 4
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 5
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 3
58339: NEG
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 3
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 4
58395: NEG
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 4
58418: NEG
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 4
58441: NEG
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 4
58453: NEG
58454: PUSH
58455: LD_INT 5
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 4
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 4
58489: NEG
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 5
58501: NEG
58502: PUSH
58503: LD_INT 4
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 5
58513: NEG
58514: PUSH
58515: LD_INT 5
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: LD_INT 5
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 5
58537: NEG
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58594: LD_ADDR_VAR 0 30
58598: PUSH
58599: LD_INT 4
58601: PUSH
58602: LD_INT 4
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 5
58621: PUSH
58622: LD_INT 4
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 5
58631: PUSH
58632: LD_INT 5
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 4
58641: PUSH
58642: LD_INT 5
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 4
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 5
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: LD_INT 5
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 4
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 4
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 4
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 4
58784: NEG
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 4
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 5
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 5
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 5
58863: NEG
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: LD_INT 4
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 4
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: LD_INT 4
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: NEG
58971: PUSH
58972: LD_INT 4
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 4
58982: NEG
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 5
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 4
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 3
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 3
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 4
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 5
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 3
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 5
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59141: LD_ADDR_VAR 0 31
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 4
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 3
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 4
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 5
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 5
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 4
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 3
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: LD_INT 5
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 4
59297: NEG
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 4
59320: NEG
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 4
59343: NEG
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 4
59355: NEG
59356: PUSH
59357: LD_INT 5
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 4
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 3
59379: NEG
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 4
59391: NEG
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 5
59403: NEG
59404: PUSH
59405: LD_INT 4
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 5
59415: NEG
59416: PUSH
59417: LD_INT 5
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 3
59427: NEG
59428: PUSH
59429: LD_INT 5
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 5
59439: NEG
59440: PUSH
59441: LD_INT 3
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 4
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 3
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 2
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 4
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: LD_INT 4
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 4
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 4
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 5
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 5
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 4
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 3
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 5
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59691: LD_ADDR_VAR 0 32
59695: PUSH
59696: LD_INT 4
59698: NEG
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 4
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 3
59721: NEG
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 4
59743: NEG
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 5
59754: NEG
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 5
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 5
59777: NEG
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: LD_INT 4
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: NEG
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 4
59860: NEG
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: LD_INT 4
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 4
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 4
59896: NEG
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: LD_INT 5
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 4
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 5
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 3
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 5
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 4
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: LD_INT 4
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 5
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: LD_INT 5
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 5
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: LD_INT 5
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60238: LD_ADDR_VAR 0 33
60242: PUSH
60243: LD_INT 4
60245: NEG
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 4
60257: NEG
60258: PUSH
60259: LD_INT 5
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 3
60269: NEG
60270: PUSH
60271: LD_INT 4
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 4
60293: NEG
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 5
60305: NEG
60306: PUSH
60307: LD_INT 4
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 5
60317: NEG
60318: PUSH
60319: LD_INT 5
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: LD_INT 5
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 5
60341: NEG
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 4
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 4
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 4
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 4
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 5
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 5
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 4
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 3
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 5
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 3
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 4
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 4
60578: PUSH
60579: LD_INT 4
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: LD_INT 4
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: LD_INT 4
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 4
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 3
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 4
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: LD_INT 5
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 5
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 4
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: LD_INT 5
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60776: LD_ADDR_VAR 0 34
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 4
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 5
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 4
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 3
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 4
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: LD_INT 5
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 2
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: LD_INT 5
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 4
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 4
60978: PUSH
60979: LD_INT 4
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 4
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 5
60998: PUSH
60999: LD_INT 4
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 5
61008: PUSH
61009: LD_INT 5
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 4
61018: PUSH
61019: LD_INT 5
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 3
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 5
61048: PUSH
61049: LD_INT 3
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: LD_INT 5
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 3
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 3
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 4
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 4
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: LD_INT 4
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 4
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 4
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: NEG
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 4
61206: NEG
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 5
61217: NEG
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 5
61228: NEG
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 5
61240: NEG
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: ST_TO_ADDR
// end ; end ;
61308: GO 61311
61310: POP
// case btype of b_depot , b_warehouse :
61311: LD_VAR 0 1
61315: PUSH
61316: LD_INT 0
61318: DOUBLE
61319: EQUAL
61320: IFTRUE 61330
61322: LD_INT 1
61324: DOUBLE
61325: EQUAL
61326: IFTRUE 61330
61328: GO 61531
61330: POP
// case nation of nation_american :
61331: LD_VAR 0 5
61335: PUSH
61336: LD_INT 1
61338: DOUBLE
61339: EQUAL
61340: IFTRUE 61344
61342: GO 61400
61344: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61345: LD_ADDR_VAR 0 9
61349: PUSH
61350: LD_VAR 0 11
61354: PUSH
61355: LD_VAR 0 12
61359: PUSH
61360: LD_VAR 0 13
61364: PUSH
61365: LD_VAR 0 14
61369: PUSH
61370: LD_VAR 0 15
61374: PUSH
61375: LD_VAR 0 16
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: PUSH
61388: LD_VAR 0 4
61392: PUSH
61393: LD_INT 1
61395: PLUS
61396: ARRAY
61397: ST_TO_ADDR
61398: GO 61529
61400: LD_INT 2
61402: DOUBLE
61403: EQUAL
61404: IFTRUE 61408
61406: GO 61464
61408: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61409: LD_ADDR_VAR 0 9
61413: PUSH
61414: LD_VAR 0 17
61418: PUSH
61419: LD_VAR 0 18
61423: PUSH
61424: LD_VAR 0 19
61428: PUSH
61429: LD_VAR 0 20
61433: PUSH
61434: LD_VAR 0 21
61438: PUSH
61439: LD_VAR 0 22
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: PUSH
61452: LD_VAR 0 4
61456: PUSH
61457: LD_INT 1
61459: PLUS
61460: ARRAY
61461: ST_TO_ADDR
61462: GO 61529
61464: LD_INT 3
61466: DOUBLE
61467: EQUAL
61468: IFTRUE 61472
61470: GO 61528
61472: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61473: LD_ADDR_VAR 0 9
61477: PUSH
61478: LD_VAR 0 23
61482: PUSH
61483: LD_VAR 0 24
61487: PUSH
61488: LD_VAR 0 25
61492: PUSH
61493: LD_VAR 0 26
61497: PUSH
61498: LD_VAR 0 27
61502: PUSH
61503: LD_VAR 0 28
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: PUSH
61516: LD_VAR 0 4
61520: PUSH
61521: LD_INT 1
61523: PLUS
61524: ARRAY
61525: ST_TO_ADDR
61526: GO 61529
61528: POP
61529: GO 62084
61531: LD_INT 2
61533: DOUBLE
61534: EQUAL
61535: IFTRUE 61545
61537: LD_INT 3
61539: DOUBLE
61540: EQUAL
61541: IFTRUE 61545
61543: GO 61601
61545: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61546: LD_ADDR_VAR 0 9
61550: PUSH
61551: LD_VAR 0 29
61555: PUSH
61556: LD_VAR 0 30
61560: PUSH
61561: LD_VAR 0 31
61565: PUSH
61566: LD_VAR 0 32
61570: PUSH
61571: LD_VAR 0 33
61575: PUSH
61576: LD_VAR 0 34
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: PUSH
61589: LD_VAR 0 4
61593: PUSH
61594: LD_INT 1
61596: PLUS
61597: ARRAY
61598: ST_TO_ADDR
61599: GO 62084
61601: LD_INT 16
61603: DOUBLE
61604: EQUAL
61605: IFTRUE 61663
61607: LD_INT 17
61609: DOUBLE
61610: EQUAL
61611: IFTRUE 61663
61613: LD_INT 18
61615: DOUBLE
61616: EQUAL
61617: IFTRUE 61663
61619: LD_INT 19
61621: DOUBLE
61622: EQUAL
61623: IFTRUE 61663
61625: LD_INT 22
61627: DOUBLE
61628: EQUAL
61629: IFTRUE 61663
61631: LD_INT 20
61633: DOUBLE
61634: EQUAL
61635: IFTRUE 61663
61637: LD_INT 21
61639: DOUBLE
61640: EQUAL
61641: IFTRUE 61663
61643: LD_INT 23
61645: DOUBLE
61646: EQUAL
61647: IFTRUE 61663
61649: LD_INT 24
61651: DOUBLE
61652: EQUAL
61653: IFTRUE 61663
61655: LD_INT 25
61657: DOUBLE
61658: EQUAL
61659: IFTRUE 61663
61661: GO 61719
61663: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61664: LD_ADDR_VAR 0 9
61668: PUSH
61669: LD_VAR 0 35
61673: PUSH
61674: LD_VAR 0 36
61678: PUSH
61679: LD_VAR 0 37
61683: PUSH
61684: LD_VAR 0 38
61688: PUSH
61689: LD_VAR 0 39
61693: PUSH
61694: LD_VAR 0 40
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: PUSH
61707: LD_VAR 0 4
61711: PUSH
61712: LD_INT 1
61714: PLUS
61715: ARRAY
61716: ST_TO_ADDR
61717: GO 62084
61719: LD_INT 6
61721: DOUBLE
61722: EQUAL
61723: IFTRUE 61775
61725: LD_INT 7
61727: DOUBLE
61728: EQUAL
61729: IFTRUE 61775
61731: LD_INT 8
61733: DOUBLE
61734: EQUAL
61735: IFTRUE 61775
61737: LD_INT 13
61739: DOUBLE
61740: EQUAL
61741: IFTRUE 61775
61743: LD_INT 12
61745: DOUBLE
61746: EQUAL
61747: IFTRUE 61775
61749: LD_INT 15
61751: DOUBLE
61752: EQUAL
61753: IFTRUE 61775
61755: LD_INT 11
61757: DOUBLE
61758: EQUAL
61759: IFTRUE 61775
61761: LD_INT 14
61763: DOUBLE
61764: EQUAL
61765: IFTRUE 61775
61767: LD_INT 10
61769: DOUBLE
61770: EQUAL
61771: IFTRUE 61775
61773: GO 61831
61775: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61776: LD_ADDR_VAR 0 9
61780: PUSH
61781: LD_VAR 0 41
61785: PUSH
61786: LD_VAR 0 42
61790: PUSH
61791: LD_VAR 0 43
61795: PUSH
61796: LD_VAR 0 44
61800: PUSH
61801: LD_VAR 0 45
61805: PUSH
61806: LD_VAR 0 46
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: PUSH
61819: LD_VAR 0 4
61823: PUSH
61824: LD_INT 1
61826: PLUS
61827: ARRAY
61828: ST_TO_ADDR
61829: GO 62084
61831: LD_INT 36
61833: DOUBLE
61834: EQUAL
61835: IFTRUE 61839
61837: GO 61895
61839: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61840: LD_ADDR_VAR 0 9
61844: PUSH
61845: LD_VAR 0 47
61849: PUSH
61850: LD_VAR 0 48
61854: PUSH
61855: LD_VAR 0 49
61859: PUSH
61860: LD_VAR 0 50
61864: PUSH
61865: LD_VAR 0 51
61869: PUSH
61870: LD_VAR 0 52
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: PUSH
61883: LD_VAR 0 4
61887: PUSH
61888: LD_INT 1
61890: PLUS
61891: ARRAY
61892: ST_TO_ADDR
61893: GO 62084
61895: LD_INT 4
61897: DOUBLE
61898: EQUAL
61899: IFTRUE 61921
61901: LD_INT 5
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61921
61907: LD_INT 34
61909: DOUBLE
61910: EQUAL
61911: IFTRUE 61921
61913: LD_INT 37
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61921
61919: GO 61977
61921: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61922: LD_ADDR_VAR 0 9
61926: PUSH
61927: LD_VAR 0 53
61931: PUSH
61932: LD_VAR 0 54
61936: PUSH
61937: LD_VAR 0 55
61941: PUSH
61942: LD_VAR 0 56
61946: PUSH
61947: LD_VAR 0 57
61951: PUSH
61952: LD_VAR 0 58
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: PUSH
61965: LD_VAR 0 4
61969: PUSH
61970: LD_INT 1
61972: PLUS
61973: ARRAY
61974: ST_TO_ADDR
61975: GO 62084
61977: LD_INT 31
61979: DOUBLE
61980: EQUAL
61981: IFTRUE 62027
61983: LD_INT 32
61985: DOUBLE
61986: EQUAL
61987: IFTRUE 62027
61989: LD_INT 33
61991: DOUBLE
61992: EQUAL
61993: IFTRUE 62027
61995: LD_INT 27
61997: DOUBLE
61998: EQUAL
61999: IFTRUE 62027
62001: LD_INT 26
62003: DOUBLE
62004: EQUAL
62005: IFTRUE 62027
62007: LD_INT 28
62009: DOUBLE
62010: EQUAL
62011: IFTRUE 62027
62013: LD_INT 29
62015: DOUBLE
62016: EQUAL
62017: IFTRUE 62027
62019: LD_INT 30
62021: DOUBLE
62022: EQUAL
62023: IFTRUE 62027
62025: GO 62083
62027: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62028: LD_ADDR_VAR 0 9
62032: PUSH
62033: LD_VAR 0 59
62037: PUSH
62038: LD_VAR 0 60
62042: PUSH
62043: LD_VAR 0 61
62047: PUSH
62048: LD_VAR 0 62
62052: PUSH
62053: LD_VAR 0 63
62057: PUSH
62058: LD_VAR 0 64
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: PUSH
62071: LD_VAR 0 4
62075: PUSH
62076: LD_INT 1
62078: PLUS
62079: ARRAY
62080: ST_TO_ADDR
62081: GO 62084
62083: POP
// temp_list2 = [ ] ;
62084: LD_ADDR_VAR 0 10
62088: PUSH
62089: EMPTY
62090: ST_TO_ADDR
// for i in temp_list do
62091: LD_ADDR_VAR 0 8
62095: PUSH
62096: LD_VAR 0 9
62100: PUSH
62101: FOR_IN
62102: IFFALSE 62154
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62104: LD_ADDR_VAR 0 10
62108: PUSH
62109: LD_VAR 0 10
62113: PUSH
62114: LD_VAR 0 8
62118: PUSH
62119: LD_INT 1
62121: ARRAY
62122: PUSH
62123: LD_VAR 0 2
62127: PLUS
62128: PUSH
62129: LD_VAR 0 8
62133: PUSH
62134: LD_INT 2
62136: ARRAY
62137: PUSH
62138: LD_VAR 0 3
62142: PLUS
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: EMPTY
62149: LIST
62150: ADD
62151: ST_TO_ADDR
62152: GO 62101
62154: POP
62155: POP
// result = temp_list2 ;
62156: LD_ADDR_VAR 0 7
62160: PUSH
62161: LD_VAR 0 10
62165: ST_TO_ADDR
// end ;
62166: LD_VAR 0 7
62170: RET
// export function EnemyInRange ( unit , dist ) ; begin
62171: LD_INT 0
62173: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62174: LD_ADDR_VAR 0 3
62178: PUSH
62179: LD_VAR 0 1
62183: PPUSH
62184: CALL_OW 255
62188: PPUSH
62189: LD_VAR 0 1
62193: PPUSH
62194: CALL_OW 250
62198: PPUSH
62199: LD_VAR 0 1
62203: PPUSH
62204: CALL_OW 251
62208: PPUSH
62209: LD_VAR 0 2
62213: PPUSH
62214: CALL 35567 0 4
62218: PUSH
62219: LD_INT 4
62221: ARRAY
62222: ST_TO_ADDR
// end ;
62223: LD_VAR 0 3
62227: RET
// export function PlayerSeeMe ( unit ) ; begin
62228: LD_INT 0
62230: PPUSH
// result := See ( your_side , unit ) ;
62231: LD_ADDR_VAR 0 2
62235: PUSH
62236: LD_OWVAR 2
62240: PPUSH
62241: LD_VAR 0 1
62245: PPUSH
62246: CALL_OW 292
62250: ST_TO_ADDR
// end ;
62251: LD_VAR 0 2
62255: RET
// export function ReverseDir ( unit ) ; begin
62256: LD_INT 0
62258: PPUSH
// if not unit then
62259: LD_VAR 0 1
62263: NOT
62264: IFFALSE 62268
// exit ;
62266: GO 62291
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62268: LD_ADDR_VAR 0 2
62272: PUSH
62273: LD_VAR 0 1
62277: PPUSH
62278: CALL_OW 254
62282: PUSH
62283: LD_INT 3
62285: PLUS
62286: PUSH
62287: LD_INT 6
62289: MOD
62290: ST_TO_ADDR
// end ;
62291: LD_VAR 0 2
62295: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62296: LD_INT 0
62298: PPUSH
62299: PPUSH
62300: PPUSH
62301: PPUSH
62302: PPUSH
// if not hexes then
62303: LD_VAR 0 2
62307: NOT
62308: IFFALSE 62312
// exit ;
62310: GO 62460
// dist := 9999 ;
62312: LD_ADDR_VAR 0 5
62316: PUSH
62317: LD_INT 9999
62319: ST_TO_ADDR
// for i = 1 to hexes do
62320: LD_ADDR_VAR 0 4
62324: PUSH
62325: DOUBLE
62326: LD_INT 1
62328: DEC
62329: ST_TO_ADDR
62330: LD_VAR 0 2
62334: PUSH
62335: FOR_TO
62336: IFFALSE 62448
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62338: LD_VAR 0 1
62342: PPUSH
62343: LD_VAR 0 2
62347: PUSH
62348: LD_VAR 0 4
62352: ARRAY
62353: PUSH
62354: LD_INT 1
62356: ARRAY
62357: PPUSH
62358: LD_VAR 0 2
62362: PUSH
62363: LD_VAR 0 4
62367: ARRAY
62368: PUSH
62369: LD_INT 2
62371: ARRAY
62372: PPUSH
62373: CALL_OW 297
62377: PUSH
62378: LD_VAR 0 5
62382: LESS
62383: IFFALSE 62446
// begin hex := hexes [ i ] ;
62385: LD_ADDR_VAR 0 7
62389: PUSH
62390: LD_VAR 0 2
62394: PUSH
62395: LD_VAR 0 4
62399: ARRAY
62400: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62401: LD_ADDR_VAR 0 5
62405: PUSH
62406: LD_VAR 0 1
62410: PPUSH
62411: LD_VAR 0 2
62415: PUSH
62416: LD_VAR 0 4
62420: ARRAY
62421: PUSH
62422: LD_INT 1
62424: ARRAY
62425: PPUSH
62426: LD_VAR 0 2
62430: PUSH
62431: LD_VAR 0 4
62435: ARRAY
62436: PUSH
62437: LD_INT 2
62439: ARRAY
62440: PPUSH
62441: CALL_OW 297
62445: ST_TO_ADDR
// end ; end ;
62446: GO 62335
62448: POP
62449: POP
// result := hex ;
62450: LD_ADDR_VAR 0 3
62454: PUSH
62455: LD_VAR 0 7
62459: ST_TO_ADDR
// end ;
62460: LD_VAR 0 3
62464: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62465: LD_INT 0
62467: PPUSH
62468: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62469: LD_VAR 0 1
62473: NOT
62474: PUSH
62475: LD_VAR 0 1
62479: PUSH
62480: LD_INT 21
62482: PUSH
62483: LD_INT 2
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 23
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PPUSH
62504: CALL_OW 69
62508: IN
62509: NOT
62510: OR
62511: IFFALSE 62515
// exit ;
62513: GO 62562
// for i = 1 to 3 do
62515: LD_ADDR_VAR 0 3
62519: PUSH
62520: DOUBLE
62521: LD_INT 1
62523: DEC
62524: ST_TO_ADDR
62525: LD_INT 3
62527: PUSH
62528: FOR_TO
62529: IFFALSE 62560
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62531: LD_VAR 0 1
62535: PPUSH
62536: CALL_OW 250
62540: PPUSH
62541: LD_VAR 0 1
62545: PPUSH
62546: CALL_OW 251
62550: PPUSH
62551: LD_INT 1
62553: PPUSH
62554: CALL_OW 453
62558: GO 62528
62560: POP
62561: POP
// end ;
62562: LD_VAR 0 2
62566: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62567: LD_INT 0
62569: PPUSH
62570: PPUSH
62571: PPUSH
62572: PPUSH
62573: PPUSH
62574: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62575: LD_VAR 0 1
62579: NOT
62580: PUSH
62581: LD_VAR 0 2
62585: NOT
62586: OR
62587: PUSH
62588: LD_VAR 0 1
62592: PPUSH
62593: CALL_OW 314
62597: OR
62598: IFFALSE 62602
// exit ;
62600: GO 63043
// x := GetX ( enemy_unit ) ;
62602: LD_ADDR_VAR 0 7
62606: PUSH
62607: LD_VAR 0 2
62611: PPUSH
62612: CALL_OW 250
62616: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62617: LD_ADDR_VAR 0 8
62621: PUSH
62622: LD_VAR 0 2
62626: PPUSH
62627: CALL_OW 251
62631: ST_TO_ADDR
// if not x or not y then
62632: LD_VAR 0 7
62636: NOT
62637: PUSH
62638: LD_VAR 0 8
62642: NOT
62643: OR
62644: IFFALSE 62648
// exit ;
62646: GO 63043
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62648: LD_ADDR_VAR 0 6
62652: PUSH
62653: LD_VAR 0 7
62657: PPUSH
62658: LD_INT 0
62660: PPUSH
62661: LD_INT 4
62663: PPUSH
62664: CALL_OW 272
62668: PUSH
62669: LD_VAR 0 8
62673: PPUSH
62674: LD_INT 0
62676: PPUSH
62677: LD_INT 4
62679: PPUSH
62680: CALL_OW 273
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_VAR 0 7
62693: PPUSH
62694: LD_INT 1
62696: PPUSH
62697: LD_INT 4
62699: PPUSH
62700: CALL_OW 272
62704: PUSH
62705: LD_VAR 0 8
62709: PPUSH
62710: LD_INT 1
62712: PPUSH
62713: LD_INT 4
62715: PPUSH
62716: CALL_OW 273
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_VAR 0 7
62729: PPUSH
62730: LD_INT 2
62732: PPUSH
62733: LD_INT 4
62735: PPUSH
62736: CALL_OW 272
62740: PUSH
62741: LD_VAR 0 8
62745: PPUSH
62746: LD_INT 2
62748: PPUSH
62749: LD_INT 4
62751: PPUSH
62752: CALL_OW 273
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_VAR 0 7
62765: PPUSH
62766: LD_INT 3
62768: PPUSH
62769: LD_INT 4
62771: PPUSH
62772: CALL_OW 272
62776: PUSH
62777: LD_VAR 0 8
62781: PPUSH
62782: LD_INT 3
62784: PPUSH
62785: LD_INT 4
62787: PPUSH
62788: CALL_OW 273
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_VAR 0 7
62801: PPUSH
62802: LD_INT 4
62804: PPUSH
62805: LD_INT 4
62807: PPUSH
62808: CALL_OW 272
62812: PUSH
62813: LD_VAR 0 8
62817: PPUSH
62818: LD_INT 4
62820: PPUSH
62821: LD_INT 4
62823: PPUSH
62824: CALL_OW 273
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_VAR 0 7
62837: PPUSH
62838: LD_INT 5
62840: PPUSH
62841: LD_INT 4
62843: PPUSH
62844: CALL_OW 272
62848: PUSH
62849: LD_VAR 0 8
62853: PPUSH
62854: LD_INT 5
62856: PPUSH
62857: LD_INT 4
62859: PPUSH
62860: CALL_OW 273
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: ST_TO_ADDR
// for i = tmp downto 1 do
62877: LD_ADDR_VAR 0 4
62881: PUSH
62882: DOUBLE
62883: LD_VAR 0 6
62887: INC
62888: ST_TO_ADDR
62889: LD_INT 1
62891: PUSH
62892: FOR_DOWNTO
62893: IFFALSE 62994
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62895: LD_VAR 0 6
62899: PUSH
62900: LD_VAR 0 4
62904: ARRAY
62905: PUSH
62906: LD_INT 1
62908: ARRAY
62909: PPUSH
62910: LD_VAR 0 6
62914: PUSH
62915: LD_VAR 0 4
62919: ARRAY
62920: PUSH
62921: LD_INT 2
62923: ARRAY
62924: PPUSH
62925: CALL_OW 488
62929: NOT
62930: PUSH
62931: LD_VAR 0 6
62935: PUSH
62936: LD_VAR 0 4
62940: ARRAY
62941: PUSH
62942: LD_INT 1
62944: ARRAY
62945: PPUSH
62946: LD_VAR 0 6
62950: PUSH
62951: LD_VAR 0 4
62955: ARRAY
62956: PUSH
62957: LD_INT 2
62959: ARRAY
62960: PPUSH
62961: CALL_OW 428
62965: PUSH
62966: LD_INT 0
62968: NONEQUAL
62969: OR
62970: IFFALSE 62992
// tmp := Delete ( tmp , i ) ;
62972: LD_ADDR_VAR 0 6
62976: PUSH
62977: LD_VAR 0 6
62981: PPUSH
62982: LD_VAR 0 4
62986: PPUSH
62987: CALL_OW 3
62991: ST_TO_ADDR
62992: GO 62892
62994: POP
62995: POP
// j := GetClosestHex ( unit , tmp ) ;
62996: LD_ADDR_VAR 0 5
63000: PUSH
63001: LD_VAR 0 1
63005: PPUSH
63006: LD_VAR 0 6
63010: PPUSH
63011: CALL 62296 0 2
63015: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63016: LD_VAR 0 1
63020: PPUSH
63021: LD_VAR 0 5
63025: PUSH
63026: LD_INT 1
63028: ARRAY
63029: PPUSH
63030: LD_VAR 0 5
63034: PUSH
63035: LD_INT 2
63037: ARRAY
63038: PPUSH
63039: CALL_OW 111
// end ;
63043: LD_VAR 0 3
63047: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63048: LD_INT 0
63050: PPUSH
63051: PPUSH
63052: PPUSH
// uc_side = 0 ;
63053: LD_ADDR_OWVAR 20
63057: PUSH
63058: LD_INT 0
63060: ST_TO_ADDR
// uc_nation = 0 ;
63061: LD_ADDR_OWVAR 21
63065: PUSH
63066: LD_INT 0
63068: ST_TO_ADDR
// InitHc_All ( ) ;
63069: CALL_OW 584
// InitVc ;
63073: CALL_OW 20
// if mastodonts then
63077: LD_VAR 0 6
63081: IFFALSE 63148
// for i = 1 to mastodonts do
63083: LD_ADDR_VAR 0 11
63087: PUSH
63088: DOUBLE
63089: LD_INT 1
63091: DEC
63092: ST_TO_ADDR
63093: LD_VAR 0 6
63097: PUSH
63098: FOR_TO
63099: IFFALSE 63146
// begin vc_chassis := 31 ;
63101: LD_ADDR_OWVAR 37
63105: PUSH
63106: LD_INT 31
63108: ST_TO_ADDR
// vc_control := control_rider ;
63109: LD_ADDR_OWVAR 38
63113: PUSH
63114: LD_INT 4
63116: ST_TO_ADDR
// animal := CreateVehicle ;
63117: LD_ADDR_VAR 0 12
63121: PUSH
63122: CALL_OW 45
63126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63127: LD_VAR 0 12
63131: PPUSH
63132: LD_VAR 0 8
63136: PPUSH
63137: LD_INT 0
63139: PPUSH
63140: CALL 65283 0 3
// end ;
63144: GO 63098
63146: POP
63147: POP
// if horses then
63148: LD_VAR 0 5
63152: IFFALSE 63219
// for i = 1 to horses do
63154: LD_ADDR_VAR 0 11
63158: PUSH
63159: DOUBLE
63160: LD_INT 1
63162: DEC
63163: ST_TO_ADDR
63164: LD_VAR 0 5
63168: PUSH
63169: FOR_TO
63170: IFFALSE 63217
// begin hc_class := 21 ;
63172: LD_ADDR_OWVAR 28
63176: PUSH
63177: LD_INT 21
63179: ST_TO_ADDR
// hc_gallery :=  ;
63180: LD_ADDR_OWVAR 33
63184: PUSH
63185: LD_STRING 
63187: ST_TO_ADDR
// animal := CreateHuman ;
63188: LD_ADDR_VAR 0 12
63192: PUSH
63193: CALL_OW 44
63197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63198: LD_VAR 0 12
63202: PPUSH
63203: LD_VAR 0 8
63207: PPUSH
63208: LD_INT 0
63210: PPUSH
63211: CALL 65283 0 3
// end ;
63215: GO 63169
63217: POP
63218: POP
// if birds then
63219: LD_VAR 0 1
63223: IFFALSE 63290
// for i = 1 to birds do
63225: LD_ADDR_VAR 0 11
63229: PUSH
63230: DOUBLE
63231: LD_INT 1
63233: DEC
63234: ST_TO_ADDR
63235: LD_VAR 0 1
63239: PUSH
63240: FOR_TO
63241: IFFALSE 63288
// begin hc_class = 18 ;
63243: LD_ADDR_OWVAR 28
63247: PUSH
63248: LD_INT 18
63250: ST_TO_ADDR
// hc_gallery =  ;
63251: LD_ADDR_OWVAR 33
63255: PUSH
63256: LD_STRING 
63258: ST_TO_ADDR
// animal := CreateHuman ;
63259: LD_ADDR_VAR 0 12
63263: PUSH
63264: CALL_OW 44
63268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63269: LD_VAR 0 12
63273: PPUSH
63274: LD_VAR 0 8
63278: PPUSH
63279: LD_INT 0
63281: PPUSH
63282: CALL 65283 0 3
// end ;
63286: GO 63240
63288: POP
63289: POP
// if tigers then
63290: LD_VAR 0 2
63294: IFFALSE 63378
// for i = 1 to tigers do
63296: LD_ADDR_VAR 0 11
63300: PUSH
63301: DOUBLE
63302: LD_INT 1
63304: DEC
63305: ST_TO_ADDR
63306: LD_VAR 0 2
63310: PUSH
63311: FOR_TO
63312: IFFALSE 63376
// begin hc_class = class_tiger ;
63314: LD_ADDR_OWVAR 28
63318: PUSH
63319: LD_INT 14
63321: ST_TO_ADDR
// hc_gallery =  ;
63322: LD_ADDR_OWVAR 33
63326: PUSH
63327: LD_STRING 
63329: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63330: LD_ADDR_OWVAR 35
63334: PUSH
63335: LD_INT 7
63337: NEG
63338: PPUSH
63339: LD_INT 7
63341: PPUSH
63342: CALL_OW 12
63346: ST_TO_ADDR
// animal := CreateHuman ;
63347: LD_ADDR_VAR 0 12
63351: PUSH
63352: CALL_OW 44
63356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63357: LD_VAR 0 12
63361: PPUSH
63362: LD_VAR 0 8
63366: PPUSH
63367: LD_INT 0
63369: PPUSH
63370: CALL 65283 0 3
// end ;
63374: GO 63311
63376: POP
63377: POP
// if apemans then
63378: LD_VAR 0 3
63382: IFFALSE 63505
// for i = 1 to apemans do
63384: LD_ADDR_VAR 0 11
63388: PUSH
63389: DOUBLE
63390: LD_INT 1
63392: DEC
63393: ST_TO_ADDR
63394: LD_VAR 0 3
63398: PUSH
63399: FOR_TO
63400: IFFALSE 63503
// begin hc_class = class_apeman ;
63402: LD_ADDR_OWVAR 28
63406: PUSH
63407: LD_INT 12
63409: ST_TO_ADDR
// hc_gallery =  ;
63410: LD_ADDR_OWVAR 33
63414: PUSH
63415: LD_STRING 
63417: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63418: LD_ADDR_OWVAR 35
63422: PUSH
63423: LD_INT 2
63425: NEG
63426: PPUSH
63427: LD_INT 2
63429: PPUSH
63430: CALL_OW 12
63434: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63435: LD_ADDR_OWVAR 31
63439: PUSH
63440: LD_INT 1
63442: PPUSH
63443: LD_INT 3
63445: PPUSH
63446: CALL_OW 12
63450: PUSH
63451: LD_INT 1
63453: PPUSH
63454: LD_INT 3
63456: PPUSH
63457: CALL_OW 12
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: ST_TO_ADDR
// animal := CreateHuman ;
63474: LD_ADDR_VAR 0 12
63478: PUSH
63479: CALL_OW 44
63483: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63484: LD_VAR 0 12
63488: PPUSH
63489: LD_VAR 0 8
63493: PPUSH
63494: LD_INT 0
63496: PPUSH
63497: CALL 65283 0 3
// end ;
63501: GO 63399
63503: POP
63504: POP
// if enchidnas then
63505: LD_VAR 0 4
63509: IFFALSE 63576
// for i = 1 to enchidnas do
63511: LD_ADDR_VAR 0 11
63515: PUSH
63516: DOUBLE
63517: LD_INT 1
63519: DEC
63520: ST_TO_ADDR
63521: LD_VAR 0 4
63525: PUSH
63526: FOR_TO
63527: IFFALSE 63574
// begin hc_class = 13 ;
63529: LD_ADDR_OWVAR 28
63533: PUSH
63534: LD_INT 13
63536: ST_TO_ADDR
// hc_gallery =  ;
63537: LD_ADDR_OWVAR 33
63541: PUSH
63542: LD_STRING 
63544: ST_TO_ADDR
// animal := CreateHuman ;
63545: LD_ADDR_VAR 0 12
63549: PUSH
63550: CALL_OW 44
63554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63555: LD_VAR 0 12
63559: PPUSH
63560: LD_VAR 0 8
63564: PPUSH
63565: LD_INT 0
63567: PPUSH
63568: CALL 65283 0 3
// end ;
63572: GO 63526
63574: POP
63575: POP
// if fishes then
63576: LD_VAR 0 7
63580: IFFALSE 63647
// for i = 1 to fishes do
63582: LD_ADDR_VAR 0 11
63586: PUSH
63587: DOUBLE
63588: LD_INT 1
63590: DEC
63591: ST_TO_ADDR
63592: LD_VAR 0 7
63596: PUSH
63597: FOR_TO
63598: IFFALSE 63645
// begin hc_class = 20 ;
63600: LD_ADDR_OWVAR 28
63604: PUSH
63605: LD_INT 20
63607: ST_TO_ADDR
// hc_gallery =  ;
63608: LD_ADDR_OWVAR 33
63612: PUSH
63613: LD_STRING 
63615: ST_TO_ADDR
// animal := CreateHuman ;
63616: LD_ADDR_VAR 0 12
63620: PUSH
63621: CALL_OW 44
63625: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63626: LD_VAR 0 12
63630: PPUSH
63631: LD_VAR 0 9
63635: PPUSH
63636: LD_INT 0
63638: PPUSH
63639: CALL 65283 0 3
// end ;
63643: GO 63597
63645: POP
63646: POP
// end ;
63647: LD_VAR 0 10
63651: RET
// export function WantHeal ( sci , unit ) ; begin
63652: LD_INT 0
63654: PPUSH
// if GetTaskList ( sci ) > 0 then
63655: LD_VAR 0 1
63659: PPUSH
63660: CALL_OW 437
63664: PUSH
63665: LD_INT 0
63667: GREATER
63668: IFFALSE 63738
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63670: LD_VAR 0 1
63674: PPUSH
63675: CALL_OW 437
63679: PUSH
63680: LD_INT 1
63682: ARRAY
63683: PUSH
63684: LD_INT 1
63686: ARRAY
63687: PUSH
63688: LD_STRING l
63690: EQUAL
63691: PUSH
63692: LD_VAR 0 1
63696: PPUSH
63697: CALL_OW 437
63701: PUSH
63702: LD_INT 1
63704: ARRAY
63705: PUSH
63706: LD_INT 4
63708: ARRAY
63709: PUSH
63710: LD_VAR 0 2
63714: EQUAL
63715: AND
63716: IFFALSE 63728
// result := true else
63718: LD_ADDR_VAR 0 3
63722: PUSH
63723: LD_INT 1
63725: ST_TO_ADDR
63726: GO 63736
// result := false ;
63728: LD_ADDR_VAR 0 3
63732: PUSH
63733: LD_INT 0
63735: ST_TO_ADDR
// end else
63736: GO 63746
// result := false ;
63738: LD_ADDR_VAR 0 3
63742: PUSH
63743: LD_INT 0
63745: ST_TO_ADDR
// end ;
63746: LD_VAR 0 3
63750: RET
// export function HealTarget ( sci ) ; begin
63751: LD_INT 0
63753: PPUSH
// if not sci then
63754: LD_VAR 0 1
63758: NOT
63759: IFFALSE 63763
// exit ;
63761: GO 63828
// result := 0 ;
63763: LD_ADDR_VAR 0 2
63767: PUSH
63768: LD_INT 0
63770: ST_TO_ADDR
// if GetTaskList ( sci ) then
63771: LD_VAR 0 1
63775: PPUSH
63776: CALL_OW 437
63780: IFFALSE 63828
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63782: LD_VAR 0 1
63786: PPUSH
63787: CALL_OW 437
63791: PUSH
63792: LD_INT 1
63794: ARRAY
63795: PUSH
63796: LD_INT 1
63798: ARRAY
63799: PUSH
63800: LD_STRING l
63802: EQUAL
63803: IFFALSE 63828
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63805: LD_ADDR_VAR 0 2
63809: PUSH
63810: LD_VAR 0 1
63814: PPUSH
63815: CALL_OW 437
63819: PUSH
63820: LD_INT 1
63822: ARRAY
63823: PUSH
63824: LD_INT 4
63826: ARRAY
63827: ST_TO_ADDR
// end ;
63828: LD_VAR 0 2
63832: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63833: LD_INT 0
63835: PPUSH
63836: PPUSH
63837: PPUSH
63838: PPUSH
// if not base_units then
63839: LD_VAR 0 1
63843: NOT
63844: IFFALSE 63848
// exit ;
63846: GO 63935
// result := false ;
63848: LD_ADDR_VAR 0 2
63852: PUSH
63853: LD_INT 0
63855: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63856: LD_ADDR_VAR 0 5
63860: PUSH
63861: LD_VAR 0 1
63865: PPUSH
63866: LD_INT 21
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PPUSH
63876: CALL_OW 72
63880: ST_TO_ADDR
// if not tmp then
63881: LD_VAR 0 5
63885: NOT
63886: IFFALSE 63890
// exit ;
63888: GO 63935
// for i in tmp do
63890: LD_ADDR_VAR 0 3
63894: PUSH
63895: LD_VAR 0 5
63899: PUSH
63900: FOR_IN
63901: IFFALSE 63933
// begin result := EnemyInRange ( i , 22 ) ;
63903: LD_ADDR_VAR 0 2
63907: PUSH
63908: LD_VAR 0 3
63912: PPUSH
63913: LD_INT 22
63915: PPUSH
63916: CALL 62171 0 2
63920: ST_TO_ADDR
// if result then
63921: LD_VAR 0 2
63925: IFFALSE 63931
// exit ;
63927: POP
63928: POP
63929: GO 63935
// end ;
63931: GO 63900
63933: POP
63934: POP
// end ;
63935: LD_VAR 0 2
63939: RET
// export function FilterByTag ( units , tag ) ; begin
63940: LD_INT 0
63942: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63943: LD_ADDR_VAR 0 3
63947: PUSH
63948: LD_VAR 0 1
63952: PPUSH
63953: LD_INT 120
63955: PUSH
63956: LD_VAR 0 2
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PPUSH
63965: CALL_OW 72
63969: ST_TO_ADDR
// end ;
63970: LD_VAR 0 3
63974: RET
// export function IsDriver ( un ) ; begin
63975: LD_INT 0
63977: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63978: LD_ADDR_VAR 0 2
63982: PUSH
63983: LD_VAR 0 1
63987: PUSH
63988: LD_INT 55
63990: PUSH
63991: EMPTY
63992: LIST
63993: PPUSH
63994: CALL_OW 69
63998: IN
63999: ST_TO_ADDR
// end ;
64000: LD_VAR 0 2
64004: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64005: LD_INT 0
64007: PPUSH
64008: PPUSH
// list := [ ] ;
64009: LD_ADDR_VAR 0 5
64013: PUSH
64014: EMPTY
64015: ST_TO_ADDR
// case d of 0 :
64016: LD_VAR 0 3
64020: PUSH
64021: LD_INT 0
64023: DOUBLE
64024: EQUAL
64025: IFTRUE 64029
64027: GO 64162
64029: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64030: LD_ADDR_VAR 0 5
64034: PUSH
64035: LD_VAR 0 1
64039: PUSH
64040: LD_INT 4
64042: MINUS
64043: PUSH
64044: LD_VAR 0 2
64048: PUSH
64049: LD_INT 4
64051: MINUS
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: PUSH
64061: LD_VAR 0 1
64065: PUSH
64066: LD_INT 3
64068: MINUS
64069: PUSH
64070: LD_VAR 0 2
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: PUSH
64083: LD_VAR 0 1
64087: PUSH
64088: LD_INT 4
64090: PLUS
64091: PUSH
64092: LD_VAR 0 2
64096: PUSH
64097: LD_INT 4
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: LIST
64104: PUSH
64105: LD_VAR 0 1
64109: PUSH
64110: LD_INT 3
64112: PLUS
64113: PUSH
64114: LD_VAR 0 2
64118: PUSH
64119: LD_INT 3
64121: PLUS
64122: PUSH
64123: LD_INT 5
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: PUSH
64131: LD_VAR 0 1
64135: PUSH
64136: LD_VAR 0 2
64140: PUSH
64141: LD_INT 4
64143: PLUS
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: ST_TO_ADDR
// end ; 1 :
64160: GO 64860
64162: LD_INT 1
64164: DOUBLE
64165: EQUAL
64166: IFTRUE 64170
64168: GO 64303
64170: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64171: LD_ADDR_VAR 0 5
64175: PUSH
64176: LD_VAR 0 1
64180: PUSH
64181: LD_VAR 0 2
64185: PUSH
64186: LD_INT 4
64188: MINUS
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: LIST
64197: PUSH
64198: LD_VAR 0 1
64202: PUSH
64203: LD_INT 3
64205: MINUS
64206: PUSH
64207: LD_VAR 0 2
64211: PUSH
64212: LD_INT 3
64214: MINUS
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: PUSH
64224: LD_VAR 0 1
64228: PUSH
64229: LD_INT 4
64231: MINUS
64232: PUSH
64233: LD_VAR 0 2
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: PUSH
64246: LD_VAR 0 1
64250: PUSH
64251: LD_VAR 0 2
64255: PUSH
64256: LD_INT 3
64258: PLUS
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: PUSH
64268: LD_VAR 0 1
64272: PUSH
64273: LD_INT 4
64275: PLUS
64276: PUSH
64277: LD_VAR 0 2
64281: PUSH
64282: LD_INT 4
64284: PLUS
64285: PUSH
64286: LD_INT 5
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: ST_TO_ADDR
// end ; 2 :
64301: GO 64860
64303: LD_INT 2
64305: DOUBLE
64306: EQUAL
64307: IFTRUE 64311
64309: GO 64440
64311: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64312: LD_ADDR_VAR 0 5
64316: PUSH
64317: LD_VAR 0 1
64321: PUSH
64322: LD_VAR 0 2
64326: PUSH
64327: LD_INT 3
64329: MINUS
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: PUSH
64339: LD_VAR 0 1
64343: PUSH
64344: LD_INT 4
64346: PLUS
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 4
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: LIST
64360: PUSH
64361: LD_VAR 0 1
64365: PUSH
64366: LD_VAR 0 2
64370: PUSH
64371: LD_INT 4
64373: PLUS
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: PUSH
64383: LD_VAR 0 1
64387: PUSH
64388: LD_INT 3
64390: MINUS
64391: PUSH
64392: LD_VAR 0 2
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: PUSH
64405: LD_VAR 0 1
64409: PUSH
64410: LD_INT 4
64412: MINUS
64413: PUSH
64414: LD_VAR 0 2
64418: PUSH
64419: LD_INT 4
64421: MINUS
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: LIST
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: ST_TO_ADDR
// end ; 3 :
64438: GO 64860
64440: LD_INT 3
64442: DOUBLE
64443: EQUAL
64444: IFTRUE 64448
64446: GO 64581
64448: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64449: LD_ADDR_VAR 0 5
64453: PUSH
64454: LD_VAR 0 1
64458: PUSH
64459: LD_INT 3
64461: PLUS
64462: PUSH
64463: LD_VAR 0 2
64467: PUSH
64468: LD_INT 4
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: PUSH
64476: LD_VAR 0 1
64480: PUSH
64481: LD_INT 4
64483: PLUS
64484: PUSH
64485: LD_VAR 0 2
64489: PUSH
64490: LD_INT 4
64492: PLUS
64493: PUSH
64494: LD_INT 5
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: PUSH
64502: LD_VAR 0 1
64506: PUSH
64507: LD_INT 4
64509: MINUS
64510: PUSH
64511: LD_VAR 0 2
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: LIST
64523: PUSH
64524: LD_VAR 0 1
64528: PUSH
64529: LD_VAR 0 2
64533: PUSH
64534: LD_INT 4
64536: MINUS
64537: PUSH
64538: LD_INT 3
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: PUSH
64546: LD_VAR 0 1
64550: PUSH
64551: LD_INT 3
64553: MINUS
64554: PUSH
64555: LD_VAR 0 2
64559: PUSH
64560: LD_INT 3
64562: MINUS
64563: PUSH
64564: LD_INT 2
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: LIST
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: ST_TO_ADDR
// end ; 4 :
64579: GO 64860
64581: LD_INT 4
64583: DOUBLE
64584: EQUAL
64585: IFTRUE 64589
64587: GO 64722
64589: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64590: LD_ADDR_VAR 0 5
64594: PUSH
64595: LD_VAR 0 1
64599: PUSH
64600: LD_VAR 0 2
64604: PUSH
64605: LD_INT 4
64607: PLUS
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: LIST
64616: PUSH
64617: LD_VAR 0 1
64621: PUSH
64622: LD_INT 3
64624: PLUS
64625: PUSH
64626: LD_VAR 0 2
64630: PUSH
64631: LD_INT 3
64633: PLUS
64634: PUSH
64635: LD_INT 5
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: LIST
64642: PUSH
64643: LD_VAR 0 1
64647: PUSH
64648: LD_INT 4
64650: PLUS
64651: PUSH
64652: LD_VAR 0 2
64656: PUSH
64657: LD_INT 4
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: PUSH
64665: LD_VAR 0 1
64669: PUSH
64670: LD_VAR 0 2
64674: PUSH
64675: LD_INT 3
64677: MINUS
64678: PUSH
64679: LD_INT 3
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: PUSH
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 4
64694: MINUS
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_INT 4
64703: MINUS
64704: PUSH
64705: LD_INT 2
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: LIST
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: ST_TO_ADDR
// end ; 5 :
64720: GO 64860
64722: LD_INT 5
64724: DOUBLE
64725: EQUAL
64726: IFTRUE 64730
64728: GO 64859
64730: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64731: LD_ADDR_VAR 0 5
64735: PUSH
64736: LD_VAR 0 1
64740: PUSH
64741: LD_INT 4
64743: MINUS
64744: PUSH
64745: LD_VAR 0 2
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: PUSH
64758: LD_VAR 0 1
64762: PUSH
64763: LD_VAR 0 2
64767: PUSH
64768: LD_INT 4
64770: MINUS
64771: PUSH
64772: LD_INT 3
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: PUSH
64780: LD_VAR 0 1
64784: PUSH
64785: LD_INT 4
64787: PLUS
64788: PUSH
64789: LD_VAR 0 2
64793: PUSH
64794: LD_INT 4
64796: PLUS
64797: PUSH
64798: LD_INT 5
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: PUSH
64806: LD_VAR 0 1
64810: PUSH
64811: LD_INT 3
64813: PLUS
64814: PUSH
64815: LD_VAR 0 2
64819: PUSH
64820: LD_INT 4
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: PUSH
64828: LD_VAR 0 1
64832: PUSH
64833: LD_VAR 0 2
64837: PUSH
64838: LD_INT 3
64840: PLUS
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: ST_TO_ADDR
// end ; end ;
64857: GO 64860
64859: POP
// result := list ;
64860: LD_ADDR_VAR 0 4
64864: PUSH
64865: LD_VAR 0 5
64869: ST_TO_ADDR
// end ;
64870: LD_VAR 0 4
64874: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64875: LD_INT 0
64877: PPUSH
64878: PPUSH
64879: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64880: LD_VAR 0 1
64884: NOT
64885: PUSH
64886: LD_VAR 0 2
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: LD_INT 2
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: LD_INT 4
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: IN
64909: NOT
64910: OR
64911: IFFALSE 64915
// exit ;
64913: GO 65007
// tmp := [ ] ;
64915: LD_ADDR_VAR 0 5
64919: PUSH
64920: EMPTY
64921: ST_TO_ADDR
// for i in units do
64922: LD_ADDR_VAR 0 4
64926: PUSH
64927: LD_VAR 0 1
64931: PUSH
64932: FOR_IN
64933: IFFALSE 64976
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64935: LD_ADDR_VAR 0 5
64939: PUSH
64940: LD_VAR 0 5
64944: PPUSH
64945: LD_VAR 0 5
64949: PUSH
64950: LD_INT 1
64952: PLUS
64953: PPUSH
64954: LD_VAR 0 4
64958: PPUSH
64959: LD_VAR 0 2
64963: PPUSH
64964: CALL_OW 259
64968: PPUSH
64969: CALL_OW 2
64973: ST_TO_ADDR
64974: GO 64932
64976: POP
64977: POP
// if not tmp then
64978: LD_VAR 0 5
64982: NOT
64983: IFFALSE 64987
// exit ;
64985: GO 65007
// result := SortListByListDesc ( units , tmp ) ;
64987: LD_ADDR_VAR 0 3
64991: PUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: LD_VAR 0 5
65001: PPUSH
65002: CALL_OW 77
65006: ST_TO_ADDR
// end ;
65007: LD_VAR 0 3
65011: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65012: LD_INT 0
65014: PPUSH
65015: PPUSH
65016: PPUSH
// result := false ;
65017: LD_ADDR_VAR 0 3
65021: PUSH
65022: LD_INT 0
65024: ST_TO_ADDR
// x := GetX ( building ) ;
65025: LD_ADDR_VAR 0 4
65029: PUSH
65030: LD_VAR 0 2
65034: PPUSH
65035: CALL_OW 250
65039: ST_TO_ADDR
// y := GetY ( building ) ;
65040: LD_ADDR_VAR 0 5
65044: PUSH
65045: LD_VAR 0 2
65049: PPUSH
65050: CALL_OW 251
65054: ST_TO_ADDR
// if not building or not x or not y then
65055: LD_VAR 0 2
65059: NOT
65060: PUSH
65061: LD_VAR 0 4
65065: NOT
65066: OR
65067: PUSH
65068: LD_VAR 0 5
65072: NOT
65073: OR
65074: IFFALSE 65078
// exit ;
65076: GO 65170
// if GetTaskList ( unit ) then
65078: LD_VAR 0 1
65082: PPUSH
65083: CALL_OW 437
65087: IFFALSE 65170
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65089: LD_STRING e
65091: PUSH
65092: LD_VAR 0 1
65096: PPUSH
65097: CALL_OW 437
65101: PUSH
65102: LD_INT 1
65104: ARRAY
65105: PUSH
65106: LD_INT 1
65108: ARRAY
65109: EQUAL
65110: PUSH
65111: LD_VAR 0 4
65115: PUSH
65116: LD_VAR 0 1
65120: PPUSH
65121: CALL_OW 437
65125: PUSH
65126: LD_INT 1
65128: ARRAY
65129: PUSH
65130: LD_INT 2
65132: ARRAY
65133: EQUAL
65134: AND
65135: PUSH
65136: LD_VAR 0 5
65140: PUSH
65141: LD_VAR 0 1
65145: PPUSH
65146: CALL_OW 437
65150: PUSH
65151: LD_INT 1
65153: ARRAY
65154: PUSH
65155: LD_INT 3
65157: ARRAY
65158: EQUAL
65159: AND
65160: IFFALSE 65170
// result := true end ;
65162: LD_ADDR_VAR 0 3
65166: PUSH
65167: LD_INT 1
65169: ST_TO_ADDR
// end ;
65170: LD_VAR 0 3
65174: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65175: LD_INT 0
65177: PPUSH
// result := false ;
65178: LD_ADDR_VAR 0 4
65182: PUSH
65183: LD_INT 0
65185: ST_TO_ADDR
// if GetTaskList ( unit ) then
65186: LD_VAR 0 1
65190: PPUSH
65191: CALL_OW 437
65195: IFFALSE 65278
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65197: LD_STRING M
65199: PUSH
65200: LD_VAR 0 1
65204: PPUSH
65205: CALL_OW 437
65209: PUSH
65210: LD_INT 1
65212: ARRAY
65213: PUSH
65214: LD_INT 1
65216: ARRAY
65217: EQUAL
65218: PUSH
65219: LD_VAR 0 2
65223: PUSH
65224: LD_VAR 0 1
65228: PPUSH
65229: CALL_OW 437
65233: PUSH
65234: LD_INT 1
65236: ARRAY
65237: PUSH
65238: LD_INT 2
65240: ARRAY
65241: EQUAL
65242: AND
65243: PUSH
65244: LD_VAR 0 3
65248: PUSH
65249: LD_VAR 0 1
65253: PPUSH
65254: CALL_OW 437
65258: PUSH
65259: LD_INT 1
65261: ARRAY
65262: PUSH
65263: LD_INT 3
65265: ARRAY
65266: EQUAL
65267: AND
65268: IFFALSE 65278
// result := true ;
65270: LD_ADDR_VAR 0 4
65274: PUSH
65275: LD_INT 1
65277: ST_TO_ADDR
// end ; end ;
65278: LD_VAR 0 4
65282: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65283: LD_INT 0
65285: PPUSH
65286: PPUSH
65287: PPUSH
65288: PPUSH
// if not unit or not area then
65289: LD_VAR 0 1
65293: NOT
65294: PUSH
65295: LD_VAR 0 2
65299: NOT
65300: OR
65301: IFFALSE 65305
// exit ;
65303: GO 65469
// tmp := AreaToList ( area , i ) ;
65305: LD_ADDR_VAR 0 6
65309: PUSH
65310: LD_VAR 0 2
65314: PPUSH
65315: LD_VAR 0 5
65319: PPUSH
65320: CALL_OW 517
65324: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65325: LD_ADDR_VAR 0 5
65329: PUSH
65330: DOUBLE
65331: LD_INT 1
65333: DEC
65334: ST_TO_ADDR
65335: LD_VAR 0 6
65339: PUSH
65340: LD_INT 1
65342: ARRAY
65343: PUSH
65344: FOR_TO
65345: IFFALSE 65467
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65347: LD_ADDR_VAR 0 7
65351: PUSH
65352: LD_VAR 0 6
65356: PUSH
65357: LD_INT 1
65359: ARRAY
65360: PUSH
65361: LD_VAR 0 5
65365: ARRAY
65366: PUSH
65367: LD_VAR 0 6
65371: PUSH
65372: LD_INT 2
65374: ARRAY
65375: PUSH
65376: LD_VAR 0 5
65380: ARRAY
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65386: LD_VAR 0 7
65390: PUSH
65391: LD_INT 1
65393: ARRAY
65394: PPUSH
65395: LD_VAR 0 7
65399: PUSH
65400: LD_INT 2
65402: ARRAY
65403: PPUSH
65404: CALL_OW 428
65408: PUSH
65409: LD_INT 0
65411: EQUAL
65412: IFFALSE 65465
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65414: LD_VAR 0 1
65418: PPUSH
65419: LD_VAR 0 7
65423: PUSH
65424: LD_INT 1
65426: ARRAY
65427: PPUSH
65428: LD_VAR 0 7
65432: PUSH
65433: LD_INT 2
65435: ARRAY
65436: PPUSH
65437: LD_VAR 0 3
65441: PPUSH
65442: CALL_OW 48
// result := IsPlaced ( unit ) ;
65446: LD_ADDR_VAR 0 4
65450: PUSH
65451: LD_VAR 0 1
65455: PPUSH
65456: CALL_OW 305
65460: ST_TO_ADDR
// exit ;
65461: POP
65462: POP
65463: GO 65469
// end ; end ;
65465: GO 65344
65467: POP
65468: POP
// end ;
65469: LD_VAR 0 4
65473: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65474: LD_INT 0
65476: PPUSH
65477: PPUSH
65478: PPUSH
// if not side or side > 8 then
65479: LD_VAR 0 1
65483: NOT
65484: PUSH
65485: LD_VAR 0 1
65489: PUSH
65490: LD_INT 8
65492: GREATER
65493: OR
65494: IFFALSE 65498
// exit ;
65496: GO 65685
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65498: LD_ADDR_VAR 0 4
65502: PUSH
65503: LD_INT 22
65505: PUSH
65506: LD_VAR 0 1
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 21
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PPUSH
65529: CALL_OW 69
65533: ST_TO_ADDR
// if not tmp then
65534: LD_VAR 0 4
65538: NOT
65539: IFFALSE 65543
// exit ;
65541: GO 65685
// enable_addtolog := true ;
65543: LD_ADDR_OWVAR 81
65547: PUSH
65548: LD_INT 1
65550: ST_TO_ADDR
// AddToLog ( [ ) ;
65551: LD_STRING [
65553: PPUSH
65554: CALL_OW 561
// for i in tmp do
65558: LD_ADDR_VAR 0 3
65562: PUSH
65563: LD_VAR 0 4
65567: PUSH
65568: FOR_IN
65569: IFFALSE 65676
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65571: LD_STRING [
65573: PUSH
65574: LD_VAR 0 3
65578: PPUSH
65579: CALL_OW 266
65583: STR
65584: PUSH
65585: LD_STRING , 
65587: STR
65588: PUSH
65589: LD_VAR 0 3
65593: PPUSH
65594: CALL_OW 250
65598: STR
65599: PUSH
65600: LD_STRING , 
65602: STR
65603: PUSH
65604: LD_VAR 0 3
65608: PPUSH
65609: CALL_OW 251
65613: STR
65614: PUSH
65615: LD_STRING , 
65617: STR
65618: PUSH
65619: LD_VAR 0 3
65623: PPUSH
65624: CALL_OW 254
65628: STR
65629: PUSH
65630: LD_STRING , 
65632: STR
65633: PUSH
65634: LD_VAR 0 3
65638: PPUSH
65639: LD_INT 1
65641: PPUSH
65642: CALL_OW 268
65646: STR
65647: PUSH
65648: LD_STRING , 
65650: STR
65651: PUSH
65652: LD_VAR 0 3
65656: PPUSH
65657: LD_INT 2
65659: PPUSH
65660: CALL_OW 268
65664: STR
65665: PUSH
65666: LD_STRING ],
65668: STR
65669: PPUSH
65670: CALL_OW 561
// end ;
65674: GO 65568
65676: POP
65677: POP
// AddToLog ( ]; ) ;
65678: LD_STRING ];
65680: PPUSH
65681: CALL_OW 561
// end ;
65685: LD_VAR 0 2
65689: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65690: LD_INT 0
65692: PPUSH
65693: PPUSH
65694: PPUSH
65695: PPUSH
65696: PPUSH
// if not area or not rate or not max then
65697: LD_VAR 0 1
65701: NOT
65702: PUSH
65703: LD_VAR 0 2
65707: NOT
65708: OR
65709: PUSH
65710: LD_VAR 0 4
65714: NOT
65715: OR
65716: IFFALSE 65720
// exit ;
65718: GO 65909
// while 1 do
65720: LD_INT 1
65722: IFFALSE 65909
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65724: LD_ADDR_VAR 0 9
65728: PUSH
65729: LD_VAR 0 1
65733: PPUSH
65734: LD_INT 1
65736: PPUSH
65737: CALL_OW 287
65741: PUSH
65742: LD_INT 10
65744: MUL
65745: ST_TO_ADDR
// r := rate / 10 ;
65746: LD_ADDR_VAR 0 7
65750: PUSH
65751: LD_VAR 0 2
65755: PUSH
65756: LD_INT 10
65758: DIVREAL
65759: ST_TO_ADDR
// time := 1 1$00 ;
65760: LD_ADDR_VAR 0 8
65764: PUSH
65765: LD_INT 2100
65767: ST_TO_ADDR
// if amount < min then
65768: LD_VAR 0 9
65772: PUSH
65773: LD_VAR 0 3
65777: LESS
65778: IFFALSE 65796
// r := r * 2 else
65780: LD_ADDR_VAR 0 7
65784: PUSH
65785: LD_VAR 0 7
65789: PUSH
65790: LD_INT 2
65792: MUL
65793: ST_TO_ADDR
65794: GO 65822
// if amount > max then
65796: LD_VAR 0 9
65800: PUSH
65801: LD_VAR 0 4
65805: GREATER
65806: IFFALSE 65822
// r := r / 2 ;
65808: LD_ADDR_VAR 0 7
65812: PUSH
65813: LD_VAR 0 7
65817: PUSH
65818: LD_INT 2
65820: DIVREAL
65821: ST_TO_ADDR
// time := time / r ;
65822: LD_ADDR_VAR 0 8
65826: PUSH
65827: LD_VAR 0 8
65831: PUSH
65832: LD_VAR 0 7
65836: DIVREAL
65837: ST_TO_ADDR
// if time < 0 then
65838: LD_VAR 0 8
65842: PUSH
65843: LD_INT 0
65845: LESS
65846: IFFALSE 65863
// time := time * - 1 ;
65848: LD_ADDR_VAR 0 8
65852: PUSH
65853: LD_VAR 0 8
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: MUL
65862: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65863: LD_VAR 0 8
65867: PUSH
65868: LD_INT 35
65870: PPUSH
65871: LD_INT 875
65873: PPUSH
65874: CALL_OW 12
65878: PLUS
65879: PPUSH
65880: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65884: LD_INT 1
65886: PPUSH
65887: LD_INT 5
65889: PPUSH
65890: CALL_OW 12
65894: PPUSH
65895: LD_VAR 0 1
65899: PPUSH
65900: LD_INT 1
65902: PPUSH
65903: CALL_OW 55
// end ;
65907: GO 65720
// end ;
65909: LD_VAR 0 5
65913: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65914: LD_INT 0
65916: PPUSH
65917: PPUSH
65918: PPUSH
65919: PPUSH
65920: PPUSH
65921: PPUSH
65922: PPUSH
65923: PPUSH
// if not turrets or not factories then
65924: LD_VAR 0 1
65928: NOT
65929: PUSH
65930: LD_VAR 0 2
65934: NOT
65935: OR
65936: IFFALSE 65940
// exit ;
65938: GO 66247
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65940: LD_ADDR_VAR 0 10
65944: PUSH
65945: LD_INT 5
65947: PUSH
65948: LD_INT 6
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: LD_INT 4
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 3
65967: PUSH
65968: LD_INT 5
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 24
65982: PUSH
65983: LD_INT 25
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 23
65992: PUSH
65993: LD_INT 27
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 42
66006: PUSH
66007: LD_INT 43
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 44
66016: PUSH
66017: LD_INT 46
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 45
66026: PUSH
66027: LD_INT 47
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: LIST
66043: ST_TO_ADDR
// result := [ ] ;
66044: LD_ADDR_VAR 0 3
66048: PUSH
66049: EMPTY
66050: ST_TO_ADDR
// for i in turrets do
66051: LD_ADDR_VAR 0 4
66055: PUSH
66056: LD_VAR 0 1
66060: PUSH
66061: FOR_IN
66062: IFFALSE 66245
// begin nat := GetNation ( i ) ;
66064: LD_ADDR_VAR 0 7
66068: PUSH
66069: LD_VAR 0 4
66073: PPUSH
66074: CALL_OW 248
66078: ST_TO_ADDR
// weapon := 0 ;
66079: LD_ADDR_VAR 0 8
66083: PUSH
66084: LD_INT 0
66086: ST_TO_ADDR
// if not nat then
66087: LD_VAR 0 7
66091: NOT
66092: IFFALSE 66096
// continue ;
66094: GO 66061
// for j in list [ nat ] do
66096: LD_ADDR_VAR 0 5
66100: PUSH
66101: LD_VAR 0 10
66105: PUSH
66106: LD_VAR 0 7
66110: ARRAY
66111: PUSH
66112: FOR_IN
66113: IFFALSE 66154
// if GetBWeapon ( i ) = j [ 1 ] then
66115: LD_VAR 0 4
66119: PPUSH
66120: CALL_OW 269
66124: PUSH
66125: LD_VAR 0 5
66129: PUSH
66130: LD_INT 1
66132: ARRAY
66133: EQUAL
66134: IFFALSE 66152
// begin weapon := j [ 2 ] ;
66136: LD_ADDR_VAR 0 8
66140: PUSH
66141: LD_VAR 0 5
66145: PUSH
66146: LD_INT 2
66148: ARRAY
66149: ST_TO_ADDR
// break ;
66150: GO 66154
// end ;
66152: GO 66112
66154: POP
66155: POP
// if not weapon then
66156: LD_VAR 0 8
66160: NOT
66161: IFFALSE 66165
// continue ;
66163: GO 66061
// for k in factories do
66165: LD_ADDR_VAR 0 6
66169: PUSH
66170: LD_VAR 0 2
66174: PUSH
66175: FOR_IN
66176: IFFALSE 66241
// begin weapons := AvailableWeaponList ( k ) ;
66178: LD_ADDR_VAR 0 9
66182: PUSH
66183: LD_VAR 0 6
66187: PPUSH
66188: CALL_OW 478
66192: ST_TO_ADDR
// if not weapons then
66193: LD_VAR 0 9
66197: NOT
66198: IFFALSE 66202
// continue ;
66200: GO 66175
// if weapon in weapons then
66202: LD_VAR 0 8
66206: PUSH
66207: LD_VAR 0 9
66211: IN
66212: IFFALSE 66239
// begin result := [ i , weapon ] ;
66214: LD_ADDR_VAR 0 3
66218: PUSH
66219: LD_VAR 0 4
66223: PUSH
66224: LD_VAR 0 8
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: ST_TO_ADDR
// exit ;
66233: POP
66234: POP
66235: POP
66236: POP
66237: GO 66247
// end ; end ;
66239: GO 66175
66241: POP
66242: POP
// end ;
66243: GO 66061
66245: POP
66246: POP
// end ;
66247: LD_VAR 0 3
66251: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66252: LD_INT 0
66254: PPUSH
// if not side or side > 8 then
66255: LD_VAR 0 3
66259: NOT
66260: PUSH
66261: LD_VAR 0 3
66265: PUSH
66266: LD_INT 8
66268: GREATER
66269: OR
66270: IFFALSE 66274
// exit ;
66272: GO 66333
// if not range then
66274: LD_VAR 0 4
66278: NOT
66279: IFFALSE 66290
// range := - 12 ;
66281: LD_ADDR_VAR 0 4
66285: PUSH
66286: LD_INT 12
66288: NEG
66289: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66290: LD_VAR 0 1
66294: PPUSH
66295: LD_VAR 0 2
66299: PPUSH
66300: LD_VAR 0 3
66304: PPUSH
66305: LD_VAR 0 4
66309: PPUSH
66310: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66314: LD_VAR 0 1
66318: PPUSH
66319: LD_VAR 0 2
66323: PPUSH
66324: LD_VAR 0 3
66328: PPUSH
66329: CALL_OW 331
// end ;
66333: LD_VAR 0 5
66337: RET
// export function Video ( mode ) ; begin
66338: LD_INT 0
66340: PPUSH
// ingame_video = mode ;
66341: LD_ADDR_OWVAR 52
66345: PUSH
66346: LD_VAR 0 1
66350: ST_TO_ADDR
// interface_hidden = mode ;
66351: LD_ADDR_OWVAR 54
66355: PUSH
66356: LD_VAR 0 1
66360: ST_TO_ADDR
// end ;
66361: LD_VAR 0 2
66365: RET
// export function Join ( array , element ) ; begin
66366: LD_INT 0
66368: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66369: LD_ADDR_VAR 0 3
66373: PUSH
66374: LD_VAR 0 1
66378: PPUSH
66379: LD_VAR 0 1
66383: PUSH
66384: LD_INT 1
66386: PLUS
66387: PPUSH
66388: LD_VAR 0 2
66392: PPUSH
66393: CALL_OW 1
66397: ST_TO_ADDR
// end ;
66398: LD_VAR 0 3
66402: RET
// export function JoinUnion ( array , element ) ; begin
66403: LD_INT 0
66405: PPUSH
// result := array union element ;
66406: LD_ADDR_VAR 0 3
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_VAR 0 2
66420: UNION
66421: ST_TO_ADDR
// end ;
66422: LD_VAR 0 3
66426: RET
// export function GetBehemoths ( side ) ; begin
66427: LD_INT 0
66429: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66430: LD_ADDR_VAR 0 2
66434: PUSH
66435: LD_INT 22
66437: PUSH
66438: LD_VAR 0 1
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 31
66449: PUSH
66450: LD_INT 25
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PPUSH
66461: CALL_OW 69
66465: ST_TO_ADDR
// end ;
66466: LD_VAR 0 2
66470: RET
// export function Shuffle ( array ) ; var i , index ; begin
66471: LD_INT 0
66473: PPUSH
66474: PPUSH
66475: PPUSH
// result := [ ] ;
66476: LD_ADDR_VAR 0 2
66480: PUSH
66481: EMPTY
66482: ST_TO_ADDR
// if not array then
66483: LD_VAR 0 1
66487: NOT
66488: IFFALSE 66492
// exit ;
66490: GO 66591
// Randomize ;
66492: CALL_OW 10
// for i = array downto 1 do
66496: LD_ADDR_VAR 0 3
66500: PUSH
66501: DOUBLE
66502: LD_VAR 0 1
66506: INC
66507: ST_TO_ADDR
66508: LD_INT 1
66510: PUSH
66511: FOR_DOWNTO
66512: IFFALSE 66589
// begin index := rand ( 1 , array ) ;
66514: LD_ADDR_VAR 0 4
66518: PUSH
66519: LD_INT 1
66521: PPUSH
66522: LD_VAR 0 1
66526: PPUSH
66527: CALL_OW 12
66531: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66532: LD_ADDR_VAR 0 2
66536: PUSH
66537: LD_VAR 0 2
66541: PPUSH
66542: LD_VAR 0 2
66546: PUSH
66547: LD_INT 1
66549: PLUS
66550: PPUSH
66551: LD_VAR 0 1
66555: PUSH
66556: LD_VAR 0 4
66560: ARRAY
66561: PPUSH
66562: CALL_OW 2
66566: ST_TO_ADDR
// array := Delete ( array , index ) ;
66567: LD_ADDR_VAR 0 1
66571: PUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: LD_VAR 0 4
66581: PPUSH
66582: CALL_OW 3
66586: ST_TO_ADDR
// end ;
66587: GO 66511
66589: POP
66590: POP
// end ;
66591: LD_VAR 0 2
66595: RET
// export function GetBaseMaterials ( base ) ; begin
66596: LD_INT 0
66598: PPUSH
// result := [ 0 , 0 , 0 ] ;
66599: LD_ADDR_VAR 0 2
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: ST_TO_ADDR
// if not base then
66618: LD_VAR 0 1
66622: NOT
66623: IFFALSE 66627
// exit ;
66625: GO 66676
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66627: LD_ADDR_VAR 0 2
66631: PUSH
66632: LD_VAR 0 1
66636: PPUSH
66637: LD_INT 1
66639: PPUSH
66640: CALL_OW 275
66644: PUSH
66645: LD_VAR 0 1
66649: PPUSH
66650: LD_INT 2
66652: PPUSH
66653: CALL_OW 275
66657: PUSH
66658: LD_VAR 0 1
66662: PPUSH
66663: LD_INT 3
66665: PPUSH
66666: CALL_OW 275
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: LIST
66675: ST_TO_ADDR
// end ;
66676: LD_VAR 0 2
66680: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66681: LD_INT 0
66683: PPUSH
66684: PPUSH
// result := array ;
66685: LD_ADDR_VAR 0 3
66689: PUSH
66690: LD_VAR 0 1
66694: ST_TO_ADDR
// if size > 0 then
66695: LD_VAR 0 2
66699: PUSH
66700: LD_INT 0
66702: GREATER
66703: IFFALSE 66749
// for i := array downto size do
66705: LD_ADDR_VAR 0 4
66709: PUSH
66710: DOUBLE
66711: LD_VAR 0 1
66715: INC
66716: ST_TO_ADDR
66717: LD_VAR 0 2
66721: PUSH
66722: FOR_DOWNTO
66723: IFFALSE 66747
// result := Delete ( result , result ) ;
66725: LD_ADDR_VAR 0 3
66729: PUSH
66730: LD_VAR 0 3
66734: PPUSH
66735: LD_VAR 0 3
66739: PPUSH
66740: CALL_OW 3
66744: ST_TO_ADDR
66745: GO 66722
66747: POP
66748: POP
// end ;
66749: LD_VAR 0 3
66753: RET
// export function ComExit ( unit ) ; var tmp ; begin
66754: LD_INT 0
66756: PPUSH
66757: PPUSH
// if not IsInUnit ( unit ) then
66758: LD_VAR 0 1
66762: PPUSH
66763: CALL_OW 310
66767: NOT
66768: IFFALSE 66772
// exit ;
66770: GO 66832
// tmp := IsInUnit ( unit ) ;
66772: LD_ADDR_VAR 0 3
66776: PUSH
66777: LD_VAR 0 1
66781: PPUSH
66782: CALL_OW 310
66786: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66787: LD_VAR 0 3
66791: PPUSH
66792: CALL_OW 247
66796: PUSH
66797: LD_INT 2
66799: EQUAL
66800: IFFALSE 66813
// ComExitVehicle ( unit ) else
66802: LD_VAR 0 1
66806: PPUSH
66807: CALL_OW 121
66811: GO 66822
// ComExitBuilding ( unit ) ;
66813: LD_VAR 0 1
66817: PPUSH
66818: CALL_OW 122
// result := tmp ;
66822: LD_ADDR_VAR 0 2
66826: PUSH
66827: LD_VAR 0 3
66831: ST_TO_ADDR
// end ;
66832: LD_VAR 0 2
66836: RET
// export function ComExitAll ( units ) ; var i ; begin
66837: LD_INT 0
66839: PPUSH
66840: PPUSH
// if not units then
66841: LD_VAR 0 1
66845: NOT
66846: IFFALSE 66850
// exit ;
66848: GO 66876
// for i in units do
66850: LD_ADDR_VAR 0 3
66854: PUSH
66855: LD_VAR 0 1
66859: PUSH
66860: FOR_IN
66861: IFFALSE 66874
// ComExit ( i ) ;
66863: LD_VAR 0 3
66867: PPUSH
66868: CALL 66754 0 1
66872: GO 66860
66874: POP
66875: POP
// end ;
66876: LD_VAR 0 2
66880: RET
// export function ResetHc ; begin
66881: LD_INT 0
66883: PPUSH
// InitHc ;
66884: CALL_OW 19
// hc_importance := 0 ;
66888: LD_ADDR_OWVAR 32
66892: PUSH
66893: LD_INT 0
66895: ST_TO_ADDR
// end ;
66896: LD_VAR 0 1
66900: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66901: LD_INT 0
66903: PPUSH
66904: PPUSH
66905: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66906: LD_ADDR_VAR 0 6
66910: PUSH
66911: LD_VAR 0 1
66915: PUSH
66916: LD_VAR 0 3
66920: PLUS
66921: PUSH
66922: LD_INT 2
66924: DIV
66925: ST_TO_ADDR
// if _x < 0 then
66926: LD_VAR 0 6
66930: PUSH
66931: LD_INT 0
66933: LESS
66934: IFFALSE 66951
// _x := _x * - 1 ;
66936: LD_ADDR_VAR 0 6
66940: PUSH
66941: LD_VAR 0 6
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: MUL
66950: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66951: LD_ADDR_VAR 0 7
66955: PUSH
66956: LD_VAR 0 2
66960: PUSH
66961: LD_VAR 0 4
66965: PLUS
66966: PUSH
66967: LD_INT 2
66969: DIV
66970: ST_TO_ADDR
// if _y < 0 then
66971: LD_VAR 0 7
66975: PUSH
66976: LD_INT 0
66978: LESS
66979: IFFALSE 66996
// _y := _y * - 1 ;
66981: LD_ADDR_VAR 0 7
66985: PUSH
66986: LD_VAR 0 7
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: MUL
66995: ST_TO_ADDR
// result := [ _x , _y ] ;
66996: LD_ADDR_VAR 0 5
67000: PUSH
67001: LD_VAR 0 6
67005: PUSH
67006: LD_VAR 0 7
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 5
67019: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67020: LD_INT 0
67022: PPUSH
67023: PPUSH
67024: PPUSH
67025: PPUSH
// task := GetTaskList ( unit ) ;
67026: LD_ADDR_VAR 0 7
67030: PUSH
67031: LD_VAR 0 1
67035: PPUSH
67036: CALL_OW 437
67040: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67041: LD_VAR 0 7
67045: NOT
67046: PUSH
67047: LD_VAR 0 1
67051: PPUSH
67052: LD_VAR 0 2
67056: PPUSH
67057: CALL_OW 308
67061: NOT
67062: AND
67063: IFFALSE 67067
// exit ;
67065: GO 67185
// if IsInArea ( unit , area ) then
67067: LD_VAR 0 1
67071: PPUSH
67072: LD_VAR 0 2
67076: PPUSH
67077: CALL_OW 308
67081: IFFALSE 67099
// begin ComMoveToArea ( unit , goAway ) ;
67083: LD_VAR 0 1
67087: PPUSH
67088: LD_VAR 0 3
67092: PPUSH
67093: CALL_OW 113
// exit ;
67097: GO 67185
// end ; if task [ 1 ] [ 1 ] <> M then
67099: LD_VAR 0 7
67103: PUSH
67104: LD_INT 1
67106: ARRAY
67107: PUSH
67108: LD_INT 1
67110: ARRAY
67111: PUSH
67112: LD_STRING M
67114: NONEQUAL
67115: IFFALSE 67119
// exit ;
67117: GO 67185
// x := task [ 1 ] [ 2 ] ;
67119: LD_ADDR_VAR 0 5
67123: PUSH
67124: LD_VAR 0 7
67128: PUSH
67129: LD_INT 1
67131: ARRAY
67132: PUSH
67133: LD_INT 2
67135: ARRAY
67136: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67137: LD_ADDR_VAR 0 6
67141: PUSH
67142: LD_VAR 0 7
67146: PUSH
67147: LD_INT 1
67149: ARRAY
67150: PUSH
67151: LD_INT 3
67153: ARRAY
67154: ST_TO_ADDR
// if InArea ( x , y , area ) then
67155: LD_VAR 0 5
67159: PPUSH
67160: LD_VAR 0 6
67164: PPUSH
67165: LD_VAR 0 2
67169: PPUSH
67170: CALL_OW 309
67174: IFFALSE 67185
// ComStop ( unit ) ;
67176: LD_VAR 0 1
67180: PPUSH
67181: CALL_OW 141
// end ;
67185: LD_VAR 0 4
67189: RET
// export function Abs ( value ) ; begin
67190: LD_INT 0
67192: PPUSH
// result := value ;
67193: LD_ADDR_VAR 0 2
67197: PUSH
67198: LD_VAR 0 1
67202: ST_TO_ADDR
// if value < 0 then
67203: LD_VAR 0 1
67207: PUSH
67208: LD_INT 0
67210: LESS
67211: IFFALSE 67228
// result := value * - 1 ;
67213: LD_ADDR_VAR 0 2
67217: PUSH
67218: LD_VAR 0 1
67222: PUSH
67223: LD_INT 1
67225: NEG
67226: MUL
67227: ST_TO_ADDR
// end ;
67228: LD_VAR 0 2
67232: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67233: LD_INT 0
67235: PPUSH
67236: PPUSH
67237: PPUSH
67238: PPUSH
67239: PPUSH
67240: PPUSH
67241: PPUSH
67242: PPUSH
// if not unit or not building then
67243: LD_VAR 0 1
67247: NOT
67248: PUSH
67249: LD_VAR 0 2
67253: NOT
67254: OR
67255: IFFALSE 67259
// exit ;
67257: GO 67485
// x := GetX ( building ) ;
67259: LD_ADDR_VAR 0 4
67263: PUSH
67264: LD_VAR 0 2
67268: PPUSH
67269: CALL_OW 250
67273: ST_TO_ADDR
// y := GetY ( building ) ;
67274: LD_ADDR_VAR 0 6
67278: PUSH
67279: LD_VAR 0 2
67283: PPUSH
67284: CALL_OW 251
67288: ST_TO_ADDR
// d := GetDir ( building ) ;
67289: LD_ADDR_VAR 0 8
67293: PUSH
67294: LD_VAR 0 2
67298: PPUSH
67299: CALL_OW 254
67303: ST_TO_ADDR
// r := 4 ;
67304: LD_ADDR_VAR 0 9
67308: PUSH
67309: LD_INT 4
67311: ST_TO_ADDR
// for i := 1 to 5 do
67312: LD_ADDR_VAR 0 10
67316: PUSH
67317: DOUBLE
67318: LD_INT 1
67320: DEC
67321: ST_TO_ADDR
67322: LD_INT 5
67324: PUSH
67325: FOR_TO
67326: IFFALSE 67483
// begin _x := ShiftX ( x , d , r + i ) ;
67328: LD_ADDR_VAR 0 5
67332: PUSH
67333: LD_VAR 0 4
67337: PPUSH
67338: LD_VAR 0 8
67342: PPUSH
67343: LD_VAR 0 9
67347: PUSH
67348: LD_VAR 0 10
67352: PLUS
67353: PPUSH
67354: CALL_OW 272
67358: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67359: LD_ADDR_VAR 0 7
67363: PUSH
67364: LD_VAR 0 6
67368: PPUSH
67369: LD_VAR 0 8
67373: PPUSH
67374: LD_VAR 0 9
67378: PUSH
67379: LD_VAR 0 10
67383: PLUS
67384: PPUSH
67385: CALL_OW 273
67389: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67390: LD_VAR 0 5
67394: PPUSH
67395: LD_VAR 0 7
67399: PPUSH
67400: CALL_OW 488
67404: PUSH
67405: LD_VAR 0 5
67409: PPUSH
67410: LD_VAR 0 7
67414: PPUSH
67415: CALL_OW 428
67419: PPUSH
67420: CALL_OW 247
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: LD_INT 2
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: IN
67435: NOT
67436: AND
67437: IFFALSE 67481
// begin ComMoveXY ( unit , _x , _y ) ;
67439: LD_VAR 0 1
67443: PPUSH
67444: LD_VAR 0 5
67448: PPUSH
67449: LD_VAR 0 7
67453: PPUSH
67454: CALL_OW 111
// result := [ _x , _y ] ;
67458: LD_ADDR_VAR 0 3
67462: PUSH
67463: LD_VAR 0 5
67467: PUSH
67468: LD_VAR 0 7
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// exit ;
67477: POP
67478: POP
67479: GO 67485
// end ; end ;
67481: GO 67325
67483: POP
67484: POP
// end ;
67485: LD_VAR 0 3
67489: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67490: LD_INT 0
67492: PPUSH
67493: PPUSH
67494: PPUSH
// result := 0 ;
67495: LD_ADDR_VAR 0 3
67499: PUSH
67500: LD_INT 0
67502: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67503: LD_VAR 0 1
67507: PUSH
67508: LD_INT 0
67510: LESS
67511: PUSH
67512: LD_VAR 0 1
67516: PUSH
67517: LD_INT 8
67519: GREATER
67520: OR
67521: PUSH
67522: LD_VAR 0 2
67526: PUSH
67527: LD_INT 0
67529: LESS
67530: OR
67531: PUSH
67532: LD_VAR 0 2
67536: PUSH
67537: LD_INT 8
67539: GREATER
67540: OR
67541: IFFALSE 67545
// exit ;
67543: GO 67620
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67545: LD_ADDR_VAR 0 4
67549: PUSH
67550: LD_INT 22
67552: PUSH
67553: LD_VAR 0 2
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PPUSH
67562: CALL_OW 69
67566: PUSH
67567: FOR_IN
67568: IFFALSE 67618
// begin un := UnitShoot ( i ) ;
67570: LD_ADDR_VAR 0 5
67574: PUSH
67575: LD_VAR 0 4
67579: PPUSH
67580: CALL_OW 504
67584: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67585: LD_VAR 0 5
67589: PPUSH
67590: CALL_OW 255
67594: PUSH
67595: LD_VAR 0 1
67599: EQUAL
67600: IFFALSE 67616
// begin result := un ;
67602: LD_ADDR_VAR 0 3
67606: PUSH
67607: LD_VAR 0 5
67611: ST_TO_ADDR
// exit ;
67612: POP
67613: POP
67614: GO 67620
// end ; end ;
67616: GO 67567
67618: POP
67619: POP
// end ;
67620: LD_VAR 0 3
67624: RET
// export function GetCargoBay ( units ) ; begin
67625: LD_INT 0
67627: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67628: LD_ADDR_VAR 0 2
67632: PUSH
67633: LD_VAR 0 1
67637: PPUSH
67638: LD_INT 2
67640: PUSH
67641: LD_INT 34
67643: PUSH
67644: LD_INT 12
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 34
67653: PUSH
67654: LD_INT 51
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 34
67663: PUSH
67664: LD_INT 32
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 34
67673: PUSH
67674: LD_EXP 96
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: PPUSH
67690: CALL_OW 72
67694: ST_TO_ADDR
// end ;
67695: LD_VAR 0 2
67699: RET
// export function Negate ( value ) ; begin
67700: LD_INT 0
67702: PPUSH
// result := not value ;
67703: LD_ADDR_VAR 0 2
67707: PUSH
67708: LD_VAR 0 1
67712: NOT
67713: ST_TO_ADDR
// end ;
67714: LD_VAR 0 2
67718: RET
// export function Inc ( value ) ; begin
67719: LD_INT 0
67721: PPUSH
// result := value + 1 ;
67722: LD_ADDR_VAR 0 2
67726: PUSH
67727: LD_VAR 0 1
67731: PUSH
67732: LD_INT 1
67734: PLUS
67735: ST_TO_ADDR
// end ;
67736: LD_VAR 0 2
67740: RET
// export function Dec ( value ) ; begin
67741: LD_INT 0
67743: PPUSH
// result := value - 1 ;
67744: LD_ADDR_VAR 0 2
67748: PUSH
67749: LD_VAR 0 1
67753: PUSH
67754: LD_INT 1
67756: MINUS
67757: ST_TO_ADDR
// end ;
67758: LD_VAR 0 2
67762: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67763: LD_INT 0
67765: PPUSH
67766: PPUSH
67767: PPUSH
67768: PPUSH
67769: PPUSH
67770: PPUSH
67771: PPUSH
67772: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67773: LD_VAR 0 1
67777: PPUSH
67778: LD_VAR 0 2
67782: PPUSH
67783: CALL_OW 488
67787: NOT
67788: PUSH
67789: LD_VAR 0 3
67793: PPUSH
67794: LD_VAR 0 4
67798: PPUSH
67799: CALL_OW 488
67803: NOT
67804: OR
67805: IFFALSE 67818
// begin result := - 1 ;
67807: LD_ADDR_VAR 0 5
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: ST_TO_ADDR
// exit ;
67816: GO 68053
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67818: LD_ADDR_VAR 0 12
67822: PUSH
67823: LD_VAR 0 1
67827: PPUSH
67828: LD_VAR 0 2
67832: PPUSH
67833: LD_VAR 0 3
67837: PPUSH
67838: LD_VAR 0 4
67842: PPUSH
67843: CALL 66901 0 4
67847: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67848: LD_ADDR_VAR 0 11
67852: PUSH
67853: LD_VAR 0 1
67857: PPUSH
67858: LD_VAR 0 2
67862: PPUSH
67863: LD_VAR 0 12
67867: PUSH
67868: LD_INT 1
67870: ARRAY
67871: PPUSH
67872: LD_VAR 0 12
67876: PUSH
67877: LD_INT 2
67879: ARRAY
67880: PPUSH
67881: CALL_OW 298
67885: ST_TO_ADDR
// distance := 9999 ;
67886: LD_ADDR_VAR 0 10
67890: PUSH
67891: LD_INT 9999
67893: ST_TO_ADDR
// for i := 0 to 5 do
67894: LD_ADDR_VAR 0 6
67898: PUSH
67899: DOUBLE
67900: LD_INT 0
67902: DEC
67903: ST_TO_ADDR
67904: LD_INT 5
67906: PUSH
67907: FOR_TO
67908: IFFALSE 68051
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67910: LD_ADDR_VAR 0 7
67914: PUSH
67915: LD_VAR 0 1
67919: PPUSH
67920: LD_VAR 0 6
67924: PPUSH
67925: LD_VAR 0 11
67929: PPUSH
67930: CALL_OW 272
67934: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67935: LD_ADDR_VAR 0 8
67939: PUSH
67940: LD_VAR 0 2
67944: PPUSH
67945: LD_VAR 0 6
67949: PPUSH
67950: LD_VAR 0 11
67954: PPUSH
67955: CALL_OW 273
67959: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67960: LD_VAR 0 7
67964: PPUSH
67965: LD_VAR 0 8
67969: PPUSH
67970: CALL_OW 488
67974: NOT
67975: IFFALSE 67979
// continue ;
67977: GO 67907
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67979: LD_ADDR_VAR 0 9
67983: PUSH
67984: LD_VAR 0 12
67988: PUSH
67989: LD_INT 1
67991: ARRAY
67992: PPUSH
67993: LD_VAR 0 12
67997: PUSH
67998: LD_INT 2
68000: ARRAY
68001: PPUSH
68002: LD_VAR 0 7
68006: PPUSH
68007: LD_VAR 0 8
68011: PPUSH
68012: CALL_OW 298
68016: ST_TO_ADDR
// if tmp < distance then
68017: LD_VAR 0 9
68021: PUSH
68022: LD_VAR 0 10
68026: LESS
68027: IFFALSE 68049
// begin result := i ;
68029: LD_ADDR_VAR 0 5
68033: PUSH
68034: LD_VAR 0 6
68038: ST_TO_ADDR
// distance := tmp ;
68039: LD_ADDR_VAR 0 10
68043: PUSH
68044: LD_VAR 0 9
68048: ST_TO_ADDR
// end ; end ;
68049: GO 67907
68051: POP
68052: POP
// end ;
68053: LD_VAR 0 5
68057: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68058: LD_INT 0
68060: PPUSH
68061: PPUSH
// if not driver or not IsInUnit ( driver ) then
68062: LD_VAR 0 1
68066: NOT
68067: PUSH
68068: LD_VAR 0 1
68072: PPUSH
68073: CALL_OW 310
68077: NOT
68078: OR
68079: IFFALSE 68083
// exit ;
68081: GO 68173
// vehicle := IsInUnit ( driver ) ;
68083: LD_ADDR_VAR 0 3
68087: PUSH
68088: LD_VAR 0 1
68092: PPUSH
68093: CALL_OW 310
68097: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68098: LD_VAR 0 1
68102: PPUSH
68103: LD_STRING \
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: PUSH
68133: LD_STRING E
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: LD_INT 0
68141: PUSH
68142: LD_VAR 0 3
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PPUSH
68169: CALL_OW 446
// end ;
68173: LD_VAR 0 2
68177: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68178: LD_INT 0
68180: PPUSH
68181: PPUSH
// if not driver or not IsInUnit ( driver ) then
68182: LD_VAR 0 1
68186: NOT
68187: PUSH
68188: LD_VAR 0 1
68192: PPUSH
68193: CALL_OW 310
68197: NOT
68198: OR
68199: IFFALSE 68203
// exit ;
68201: GO 68293
// vehicle := IsInUnit ( driver ) ;
68203: LD_ADDR_VAR 0 3
68207: PUSH
68208: LD_VAR 0 1
68212: PPUSH
68213: CALL_OW 310
68217: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68218: LD_VAR 0 1
68222: PPUSH
68223: LD_STRING \
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: LD_INT 0
68234: PUSH
68235: LD_INT 0
68237: PUSH
68238: LD_INT 0
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: PUSH
68253: LD_STRING E
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: LD_VAR 0 3
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PPUSH
68289: CALL_OW 447
// end ;
68293: LD_VAR 0 2
68297: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68298: LD_INT 0
68300: PPUSH
68301: PPUSH
68302: PPUSH
// tmp := [ ] ;
68303: LD_ADDR_VAR 0 5
68307: PUSH
68308: EMPTY
68309: ST_TO_ADDR
// for i in units do
68310: LD_ADDR_VAR 0 4
68314: PUSH
68315: LD_VAR 0 1
68319: PUSH
68320: FOR_IN
68321: IFFALSE 68359
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68323: LD_ADDR_VAR 0 5
68327: PUSH
68328: LD_VAR 0 5
68332: PPUSH
68333: LD_VAR 0 5
68337: PUSH
68338: LD_INT 1
68340: PLUS
68341: PPUSH
68342: LD_VAR 0 4
68346: PPUSH
68347: CALL_OW 256
68351: PPUSH
68352: CALL_OW 2
68356: ST_TO_ADDR
68357: GO 68320
68359: POP
68360: POP
// if not tmp then
68361: LD_VAR 0 5
68365: NOT
68366: IFFALSE 68370
// exit ;
68368: GO 68418
// if asc then
68370: LD_VAR 0 2
68374: IFFALSE 68398
// result := SortListByListAsc ( units , tmp ) else
68376: LD_ADDR_VAR 0 3
68380: PUSH
68381: LD_VAR 0 1
68385: PPUSH
68386: LD_VAR 0 5
68390: PPUSH
68391: CALL_OW 76
68395: ST_TO_ADDR
68396: GO 68418
// result := SortListByListDesc ( units , tmp ) ;
68398: LD_ADDR_VAR 0 3
68402: PUSH
68403: LD_VAR 0 1
68407: PPUSH
68408: LD_VAR 0 5
68412: PPUSH
68413: CALL_OW 77
68417: ST_TO_ADDR
// end ;
68418: LD_VAR 0 3
68422: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68423: LD_INT 0
68425: PPUSH
68426: PPUSH
// task := GetTaskList ( mech ) ;
68427: LD_ADDR_VAR 0 4
68431: PUSH
68432: LD_VAR 0 1
68436: PPUSH
68437: CALL_OW 437
68441: ST_TO_ADDR
// if not task then
68442: LD_VAR 0 4
68446: NOT
68447: IFFALSE 68451
// exit ;
68449: GO 68493
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68451: LD_ADDR_VAR 0 3
68455: PUSH
68456: LD_VAR 0 4
68460: PUSH
68461: LD_INT 1
68463: ARRAY
68464: PUSH
68465: LD_INT 1
68467: ARRAY
68468: PUSH
68469: LD_STRING r
68471: EQUAL
68472: PUSH
68473: LD_VAR 0 4
68477: PUSH
68478: LD_INT 1
68480: ARRAY
68481: PUSH
68482: LD_INT 4
68484: ARRAY
68485: PUSH
68486: LD_VAR 0 2
68490: EQUAL
68491: AND
68492: ST_TO_ADDR
// end ;
68493: LD_VAR 0 3
68497: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68498: LD_INT 0
68500: PPUSH
// SetDir ( unit , d ) ;
68501: LD_VAR 0 1
68505: PPUSH
68506: LD_VAR 0 4
68510: PPUSH
68511: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68515: LD_VAR 0 1
68519: PPUSH
68520: LD_VAR 0 2
68524: PPUSH
68525: LD_VAR 0 3
68529: PPUSH
68530: LD_VAR 0 5
68534: PPUSH
68535: CALL_OW 48
// end ;
68539: LD_VAR 0 6
68543: RET
// export function ToNaturalNumber ( number ) ; begin
68544: LD_INT 0
68546: PPUSH
// result := number div 1 ;
68547: LD_ADDR_VAR 0 2
68551: PUSH
68552: LD_VAR 0 1
68556: PUSH
68557: LD_INT 1
68559: DIV
68560: ST_TO_ADDR
// if number < 0 then
68561: LD_VAR 0 1
68565: PUSH
68566: LD_INT 0
68568: LESS
68569: IFFALSE 68579
// result := 0 ;
68571: LD_ADDR_VAR 0 2
68575: PUSH
68576: LD_INT 0
68578: ST_TO_ADDR
// end ;
68579: LD_VAR 0 2
68583: RET
// export function SortByClass ( units , class ) ; var un ; begin
68584: LD_INT 0
68586: PPUSH
68587: PPUSH
// if not units or not class then
68588: LD_VAR 0 1
68592: NOT
68593: PUSH
68594: LD_VAR 0 2
68598: NOT
68599: OR
68600: IFFALSE 68604
// exit ;
68602: GO 68699
// result := [ ] ;
68604: LD_ADDR_VAR 0 3
68608: PUSH
68609: EMPTY
68610: ST_TO_ADDR
// for un in units do
68611: LD_ADDR_VAR 0 4
68615: PUSH
68616: LD_VAR 0 1
68620: PUSH
68621: FOR_IN
68622: IFFALSE 68697
// if GetClass ( un ) = class then
68624: LD_VAR 0 4
68628: PPUSH
68629: CALL_OW 257
68633: PUSH
68634: LD_VAR 0 2
68638: EQUAL
68639: IFFALSE 68666
// result := Insert ( result , 1 , un ) else
68641: LD_ADDR_VAR 0 3
68645: PUSH
68646: LD_VAR 0 3
68650: PPUSH
68651: LD_INT 1
68653: PPUSH
68654: LD_VAR 0 4
68658: PPUSH
68659: CALL_OW 2
68663: ST_TO_ADDR
68664: GO 68695
// result := Replace ( result , result + 1 , un ) ;
68666: LD_ADDR_VAR 0 3
68670: PUSH
68671: LD_VAR 0 3
68675: PPUSH
68676: LD_VAR 0 3
68680: PUSH
68681: LD_INT 1
68683: PLUS
68684: PPUSH
68685: LD_VAR 0 4
68689: PPUSH
68690: CALL_OW 1
68694: ST_TO_ADDR
68695: GO 68621
68697: POP
68698: POP
// end ;
68699: LD_VAR 0 3
68703: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68704: LD_INT 0
68706: PPUSH
68707: PPUSH
68708: PPUSH
68709: PPUSH
68710: PPUSH
68711: PPUSH
68712: PPUSH
// result := [ ] ;
68713: LD_ADDR_VAR 0 4
68717: PUSH
68718: EMPTY
68719: ST_TO_ADDR
// if x - r < 0 then
68720: LD_VAR 0 1
68724: PUSH
68725: LD_VAR 0 3
68729: MINUS
68730: PUSH
68731: LD_INT 0
68733: LESS
68734: IFFALSE 68746
// min_x := 0 else
68736: LD_ADDR_VAR 0 8
68740: PUSH
68741: LD_INT 0
68743: ST_TO_ADDR
68744: GO 68762
// min_x := x - r ;
68746: LD_ADDR_VAR 0 8
68750: PUSH
68751: LD_VAR 0 1
68755: PUSH
68756: LD_VAR 0 3
68760: MINUS
68761: ST_TO_ADDR
// if y - r < 0 then
68762: LD_VAR 0 2
68766: PUSH
68767: LD_VAR 0 3
68771: MINUS
68772: PUSH
68773: LD_INT 0
68775: LESS
68776: IFFALSE 68788
// min_y := 0 else
68778: LD_ADDR_VAR 0 7
68782: PUSH
68783: LD_INT 0
68785: ST_TO_ADDR
68786: GO 68804
// min_y := y - r ;
68788: LD_ADDR_VAR 0 7
68792: PUSH
68793: LD_VAR 0 2
68797: PUSH
68798: LD_VAR 0 3
68802: MINUS
68803: ST_TO_ADDR
// max_x := x + r ;
68804: LD_ADDR_VAR 0 9
68808: PUSH
68809: LD_VAR 0 1
68813: PUSH
68814: LD_VAR 0 3
68818: PLUS
68819: ST_TO_ADDR
// max_y := y + r ;
68820: LD_ADDR_VAR 0 10
68824: PUSH
68825: LD_VAR 0 2
68829: PUSH
68830: LD_VAR 0 3
68834: PLUS
68835: ST_TO_ADDR
// for _x = min_x to max_x do
68836: LD_ADDR_VAR 0 5
68840: PUSH
68841: DOUBLE
68842: LD_VAR 0 8
68846: DEC
68847: ST_TO_ADDR
68848: LD_VAR 0 9
68852: PUSH
68853: FOR_TO
68854: IFFALSE 68955
// for _y = min_y to max_y do
68856: LD_ADDR_VAR 0 6
68860: PUSH
68861: DOUBLE
68862: LD_VAR 0 7
68866: DEC
68867: ST_TO_ADDR
68868: LD_VAR 0 10
68872: PUSH
68873: FOR_TO
68874: IFFALSE 68951
// begin if not ValidHex ( _x , _y ) then
68876: LD_VAR 0 5
68880: PPUSH
68881: LD_VAR 0 6
68885: PPUSH
68886: CALL_OW 488
68890: NOT
68891: IFFALSE 68895
// continue ;
68893: GO 68873
// if GetResourceTypeXY ( _x , _y ) then
68895: LD_VAR 0 5
68899: PPUSH
68900: LD_VAR 0 6
68904: PPUSH
68905: CALL_OW 283
68909: IFFALSE 68949
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68911: LD_ADDR_VAR 0 4
68915: PUSH
68916: LD_VAR 0 4
68920: PPUSH
68921: LD_VAR 0 4
68925: PUSH
68926: LD_INT 1
68928: PLUS
68929: PPUSH
68930: LD_VAR 0 5
68934: PUSH
68935: LD_VAR 0 6
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PPUSH
68944: CALL_OW 1
68948: ST_TO_ADDR
// end ;
68949: GO 68873
68951: POP
68952: POP
68953: GO 68853
68955: POP
68956: POP
// end ;
68957: LD_VAR 0 4
68961: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68962: LD_INT 0
68964: PPUSH
68965: PPUSH
68966: PPUSH
68967: PPUSH
68968: PPUSH
68969: PPUSH
68970: PPUSH
68971: PPUSH
// if not units then
68972: LD_VAR 0 1
68976: NOT
68977: IFFALSE 68981
// exit ;
68979: GO 69406
// result := UnitFilter ( units , [ f_ok ] ) ;
68981: LD_ADDR_VAR 0 3
68985: PUSH
68986: LD_VAR 0 1
68990: PPUSH
68991: LD_INT 50
68993: PUSH
68994: EMPTY
68995: LIST
68996: PPUSH
68997: CALL_OW 72
69001: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69002: LD_ADDR_VAR 0 8
69006: PUSH
69007: LD_VAR 0 1
69011: PUSH
69012: LD_INT 1
69014: ARRAY
69015: PPUSH
69016: CALL_OW 255
69020: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69021: LD_ADDR_VAR 0 10
69025: PUSH
69026: LD_INT 29
69028: PUSH
69029: LD_EXP 99
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: ST_TO_ADDR
// if not result then
69038: LD_VAR 0 3
69042: NOT
69043: IFFALSE 69047
// exit ;
69045: GO 69406
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69047: LD_ADDR_VAR 0 5
69051: PUSH
69052: LD_INT 81
69054: PUSH
69055: LD_VAR 0 8
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PPUSH
69064: CALL_OW 69
69068: ST_TO_ADDR
// for i in result do
69069: LD_ADDR_VAR 0 4
69073: PUSH
69074: LD_VAR 0 3
69078: PUSH
69079: FOR_IN
69080: IFFALSE 69404
// begin tag := GetTag ( i ) + 1 ;
69082: LD_ADDR_VAR 0 9
69086: PUSH
69087: LD_VAR 0 4
69091: PPUSH
69092: CALL_OW 110
69096: PUSH
69097: LD_INT 1
69099: PLUS
69100: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69101: LD_ADDR_VAR 0 7
69105: PUSH
69106: LD_VAR 0 4
69110: PPUSH
69111: CALL_OW 250
69115: PPUSH
69116: LD_VAR 0 4
69120: PPUSH
69121: CALL_OW 251
69125: PPUSH
69126: LD_INT 6
69128: PPUSH
69129: CALL 68704 0 3
69133: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69134: LD_VAR 0 7
69138: PUSH
69139: LD_VAR 0 4
69143: PPUSH
69144: CALL_OW 264
69148: PUSH
69149: LD_VAR 0 10
69153: IN
69154: NOT
69155: AND
69156: IFFALSE 69195
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69158: LD_VAR 0 4
69162: PPUSH
69163: LD_VAR 0 7
69167: PUSH
69168: LD_INT 1
69170: ARRAY
69171: PUSH
69172: LD_INT 1
69174: ARRAY
69175: PPUSH
69176: LD_VAR 0 7
69180: PUSH
69181: LD_INT 1
69183: ARRAY
69184: PUSH
69185: LD_INT 2
69187: ARRAY
69188: PPUSH
69189: CALL_OW 116
69193: GO 69402
// if path > tag then
69195: LD_VAR 0 2
69199: PUSH
69200: LD_VAR 0 9
69204: GREATER
69205: IFFALSE 69372
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69207: LD_ADDR_VAR 0 6
69211: PUSH
69212: LD_VAR 0 5
69216: PPUSH
69217: LD_INT 91
69219: PUSH
69220: LD_VAR 0 4
69224: PUSH
69225: LD_INT 12
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: LIST
69232: PPUSH
69233: CALL_OW 72
69237: ST_TO_ADDR
// if nearEnemy then
69238: LD_VAR 0 6
69242: IFFALSE 69270
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69244: LD_VAR 0 4
69248: PPUSH
69249: LD_VAR 0 6
69253: PPUSH
69254: LD_VAR 0 4
69258: PPUSH
69259: CALL_OW 74
69263: PPUSH
69264: CALL_OW 115
69268: GO 69370
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69270: LD_VAR 0 4
69274: PPUSH
69275: LD_VAR 0 2
69279: PUSH
69280: LD_VAR 0 9
69284: ARRAY
69285: PUSH
69286: LD_INT 1
69288: ARRAY
69289: PPUSH
69290: LD_VAR 0 2
69294: PUSH
69295: LD_VAR 0 9
69299: ARRAY
69300: PUSH
69301: LD_INT 2
69303: ARRAY
69304: PPUSH
69305: CALL_OW 297
69309: PUSH
69310: LD_INT 6
69312: GREATER
69313: IFFALSE 69356
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69315: LD_VAR 0 4
69319: PPUSH
69320: LD_VAR 0 2
69324: PUSH
69325: LD_VAR 0 9
69329: ARRAY
69330: PUSH
69331: LD_INT 1
69333: ARRAY
69334: PPUSH
69335: LD_VAR 0 2
69339: PUSH
69340: LD_VAR 0 9
69344: ARRAY
69345: PUSH
69346: LD_INT 2
69348: ARRAY
69349: PPUSH
69350: CALL_OW 114
69354: GO 69370
// SetTag ( i , tag ) ;
69356: LD_VAR 0 4
69360: PPUSH
69361: LD_VAR 0 9
69365: PPUSH
69366: CALL_OW 109
// end else
69370: GO 69402
// if enemy then
69372: LD_VAR 0 5
69376: IFFALSE 69402
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69378: LD_VAR 0 4
69382: PPUSH
69383: LD_VAR 0 5
69387: PPUSH
69388: LD_VAR 0 4
69392: PPUSH
69393: CALL_OW 74
69397: PPUSH
69398: CALL_OW 115
// end ;
69402: GO 69079
69404: POP
69405: POP
// end ;
69406: LD_VAR 0 3
69410: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69411: LD_INT 0
69413: PPUSH
69414: PPUSH
69415: PPUSH
// if not unit or IsInUnit ( unit ) then
69416: LD_VAR 0 1
69420: NOT
69421: PUSH
69422: LD_VAR 0 1
69426: PPUSH
69427: CALL_OW 310
69431: OR
69432: IFFALSE 69436
// exit ;
69434: GO 69527
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69436: LD_ADDR_VAR 0 4
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: CALL_OW 250
69450: PPUSH
69451: LD_VAR 0 2
69455: PPUSH
69456: LD_INT 1
69458: PPUSH
69459: CALL_OW 272
69463: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69464: LD_ADDR_VAR 0 5
69468: PUSH
69469: LD_VAR 0 1
69473: PPUSH
69474: CALL_OW 251
69478: PPUSH
69479: LD_VAR 0 2
69483: PPUSH
69484: LD_INT 1
69486: PPUSH
69487: CALL_OW 273
69491: ST_TO_ADDR
// if ValidHex ( x , y ) then
69492: LD_VAR 0 4
69496: PPUSH
69497: LD_VAR 0 5
69501: PPUSH
69502: CALL_OW 488
69506: IFFALSE 69527
// ComTurnXY ( unit , x , y ) ;
69508: LD_VAR 0 1
69512: PPUSH
69513: LD_VAR 0 4
69517: PPUSH
69518: LD_VAR 0 5
69522: PPUSH
69523: CALL_OW 118
// end ;
69527: LD_VAR 0 3
69531: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69532: LD_INT 0
69534: PPUSH
69535: PPUSH
// result := false ;
69536: LD_ADDR_VAR 0 3
69540: PUSH
69541: LD_INT 0
69543: ST_TO_ADDR
// if not units then
69544: LD_VAR 0 2
69548: NOT
69549: IFFALSE 69553
// exit ;
69551: GO 69598
// for i in units do
69553: LD_ADDR_VAR 0 4
69557: PUSH
69558: LD_VAR 0 2
69562: PUSH
69563: FOR_IN
69564: IFFALSE 69596
// if See ( side , i ) then
69566: LD_VAR 0 1
69570: PPUSH
69571: LD_VAR 0 4
69575: PPUSH
69576: CALL_OW 292
69580: IFFALSE 69594
// begin result := true ;
69582: LD_ADDR_VAR 0 3
69586: PUSH
69587: LD_INT 1
69589: ST_TO_ADDR
// exit ;
69590: POP
69591: POP
69592: GO 69598
// end ;
69594: GO 69563
69596: POP
69597: POP
// end ;
69598: LD_VAR 0 3
69602: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69603: LD_INT 0
69605: PPUSH
69606: PPUSH
69607: PPUSH
69608: PPUSH
// if not unit or not points then
69609: LD_VAR 0 1
69613: NOT
69614: PUSH
69615: LD_VAR 0 2
69619: NOT
69620: OR
69621: IFFALSE 69625
// exit ;
69623: GO 69715
// dist := 99999 ;
69625: LD_ADDR_VAR 0 5
69629: PUSH
69630: LD_INT 99999
69632: ST_TO_ADDR
// for i in points do
69633: LD_ADDR_VAR 0 4
69637: PUSH
69638: LD_VAR 0 2
69642: PUSH
69643: FOR_IN
69644: IFFALSE 69713
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69646: LD_ADDR_VAR 0 6
69650: PUSH
69651: LD_VAR 0 1
69655: PPUSH
69656: LD_VAR 0 4
69660: PUSH
69661: LD_INT 1
69663: ARRAY
69664: PPUSH
69665: LD_VAR 0 4
69669: PUSH
69670: LD_INT 2
69672: ARRAY
69673: PPUSH
69674: CALL_OW 297
69678: ST_TO_ADDR
// if tmpDist < dist then
69679: LD_VAR 0 6
69683: PUSH
69684: LD_VAR 0 5
69688: LESS
69689: IFFALSE 69711
// begin result := i ;
69691: LD_ADDR_VAR 0 3
69695: PUSH
69696: LD_VAR 0 4
69700: ST_TO_ADDR
// dist := tmpDist ;
69701: LD_ADDR_VAR 0 5
69705: PUSH
69706: LD_VAR 0 6
69710: ST_TO_ADDR
// end ; end ;
69711: GO 69643
69713: POP
69714: POP
// end ;
69715: LD_VAR 0 3
69719: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69720: LD_INT 0
69722: PPUSH
// uc_side := side ;
69723: LD_ADDR_OWVAR 20
69727: PUSH
69728: LD_VAR 0 1
69732: ST_TO_ADDR
// uc_nation := 3 ;
69733: LD_ADDR_OWVAR 21
69737: PUSH
69738: LD_INT 3
69740: ST_TO_ADDR
// vc_chassis := 25 ;
69741: LD_ADDR_OWVAR 37
69745: PUSH
69746: LD_INT 25
69748: ST_TO_ADDR
// vc_engine := engine_siberite ;
69749: LD_ADDR_OWVAR 39
69753: PUSH
69754: LD_INT 3
69756: ST_TO_ADDR
// vc_control := control_computer ;
69757: LD_ADDR_OWVAR 38
69761: PUSH
69762: LD_INT 3
69764: ST_TO_ADDR
// vc_weapon := 59 ;
69765: LD_ADDR_OWVAR 40
69769: PUSH
69770: LD_INT 59
69772: ST_TO_ADDR
// result := CreateVehicle ;
69773: LD_ADDR_VAR 0 5
69777: PUSH
69778: CALL_OW 45
69782: ST_TO_ADDR
// SetDir ( result , d ) ;
69783: LD_VAR 0 5
69787: PPUSH
69788: LD_VAR 0 4
69792: PPUSH
69793: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69797: LD_VAR 0 5
69801: PPUSH
69802: LD_VAR 0 2
69806: PPUSH
69807: LD_VAR 0 3
69811: PPUSH
69812: LD_INT 0
69814: PPUSH
69815: CALL_OW 48
// end ; end_of_file
69819: LD_VAR 0 5
69823: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
69824: LD_INT 0
69826: PPUSH
// ar_miner := 81 ;
69827: LD_ADDR_EXP 102
69831: PUSH
69832: LD_INT 81
69834: ST_TO_ADDR
// ar_crane := 88 ;
69835: LD_ADDR_EXP 101
69839: PUSH
69840: LD_INT 88
69842: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
69843: LD_ADDR_EXP 96
69847: PUSH
69848: LD_INT 89
69850: ST_TO_ADDR
// us_hack := 99 ;
69851: LD_ADDR_EXP 97
69855: PUSH
69856: LD_INT 99
69858: ST_TO_ADDR
// us_artillery := 97 ;
69859: LD_ADDR_EXP 98
69863: PUSH
69864: LD_INT 97
69866: ST_TO_ADDR
// ar_bio_bomb := 91 ;
69867: LD_ADDR_EXP 99
69871: PUSH
69872: LD_INT 91
69874: ST_TO_ADDR
// ar_mortar := 92 ;
69875: LD_ADDR_EXP 100
69879: PUSH
69880: LD_INT 92
69882: ST_TO_ADDR
// ru_flamethrower := 93 ;
69883: LD_ADDR_EXP 103
69887: PUSH
69888: LD_INT 93
69890: ST_TO_ADDR
// ru_radar := 98 ;
69891: LD_ADDR_EXP 95
69895: PUSH
69896: LD_INT 98
69898: ST_TO_ADDR
// tech_Artillery := 80 ;
69899: LD_ADDR_EXP 104
69903: PUSH
69904: LD_INT 80
69906: ST_TO_ADDR
// tech_RadMat := 81 ;
69907: LD_ADDR_EXP 105
69911: PUSH
69912: LD_INT 81
69914: ST_TO_ADDR
// tech_BasicTools := 82 ;
69915: LD_ADDR_EXP 106
69919: PUSH
69920: LD_INT 82
69922: ST_TO_ADDR
// tech_Cargo := 83 ;
69923: LD_ADDR_EXP 107
69927: PUSH
69928: LD_INT 83
69930: ST_TO_ADDR
// tech_Track := 84 ;
69931: LD_ADDR_EXP 108
69935: PUSH
69936: LD_INT 84
69938: ST_TO_ADDR
// tech_Crane := 85 ;
69939: LD_ADDR_EXP 109
69943: PUSH
69944: LD_INT 85
69946: ST_TO_ADDR
// tech_Bulldozer := 86 ;
69947: LD_ADDR_EXP 110
69951: PUSH
69952: LD_INT 86
69954: ST_TO_ADDR
// tech_Hovercraft := 87 ;
69955: LD_ADDR_EXP 111
69959: PUSH
69960: LD_INT 87
69962: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
69963: LD_ADDR_EXP 112
69967: PUSH
69968: LD_INT 88
69970: ST_TO_ADDR
// class_mastodont := 31 ;
69971: LD_ADDR_EXP 113
69975: PUSH
69976: LD_INT 31
69978: ST_TO_ADDR
// class_horse := 21 ;
69979: LD_ADDR_EXP 114
69983: PUSH
69984: LD_INT 21
69986: ST_TO_ADDR
// end ;
69987: LD_VAR 0 1
69991: RET
// every 1 do
69992: GO 69994
69994: DISABLE
// InitGlobalVariables ; end_of_file
69995: CALL 69824 0 0
69999: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70000: LD_VAR 0 1
70004: PUSH
70005: LD_INT 200
70007: DOUBLE
70008: GREATEREQUAL
70009: IFFALSE 70017
70011: LD_INT 299
70013: DOUBLE
70014: LESSEQUAL
70015: IFTRUE 70019
70017: GO 70051
70019: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70020: LD_VAR 0 1
70024: PPUSH
70025: LD_VAR 0 2
70029: PPUSH
70030: LD_VAR 0 3
70034: PPUSH
70035: LD_VAR 0 4
70039: PPUSH
70040: LD_VAR 0 5
70044: PPUSH
70045: CALL 11089 0 5
70049: GO 70128
70051: LD_INT 300
70053: DOUBLE
70054: GREATEREQUAL
70055: IFFALSE 70063
70057: LD_INT 399
70059: DOUBLE
70060: LESSEQUAL
70061: IFTRUE 70065
70063: GO 70127
70065: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70066: LD_VAR 0 1
70070: PPUSH
70071: LD_VAR 0 2
70075: PPUSH
70076: LD_VAR 0 3
70080: PPUSH
70081: LD_VAR 0 4
70085: PPUSH
70086: LD_VAR 0 5
70090: PPUSH
70091: LD_VAR 0 6
70095: PPUSH
70096: LD_VAR 0 7
70100: PPUSH
70101: LD_VAR 0 8
70105: PPUSH
70106: LD_VAR 0 9
70110: PPUSH
70111: LD_VAR 0 10
70115: PPUSH
70116: LD_VAR 0 11
70120: PPUSH
70121: CALL 27705 0 11
70125: GO 70128
70127: POP
// end ;
70128: PPOPN 11
70130: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70131: LD_VAR 0 1
70135: PPUSH
70136: LD_VAR 0 2
70140: PPUSH
70141: LD_VAR 0 3
70145: PPUSH
70146: LD_VAR 0 4
70150: PPUSH
70151: LD_VAR 0 5
70155: PPUSH
70156: CALL 10825 0 5
// end ; end_of_file
70160: PPOPN 5
70162: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70163: LD_VAR 0 1
70167: PPUSH
70168: LD_VAR 0 2
70172: PPUSH
70173: LD_VAR 0 3
70177: PPUSH
70178: LD_VAR 0 4
70182: PPUSH
70183: LD_VAR 0 5
70187: PPUSH
70188: LD_VAR 0 6
70192: PPUSH
70193: CALL 15398 0 6
// end ;
70197: PPOPN 6
70199: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70200: CALL 15373 0 0
// end ;
70204: PPOPN 1
70206: END
