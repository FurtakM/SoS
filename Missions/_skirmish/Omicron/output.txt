// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 63024 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7066 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 29661 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 34525 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 34525 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 66913 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 29661 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 29661 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 29661 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 34525 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 29661 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 66913 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 34525 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 66913 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 69635 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// uc_side := 3 ;
4699: LD_ADDR_OWVAR 20
4703: PUSH
4704: LD_INT 3
4706: ST_TO_ADDR
// uc_nation := 3 ;
4707: LD_ADDR_OWVAR 21
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// ResetHc ;
4715: CALL 66913 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4719: LD_INT 0
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_INT 3
4727: PUSH
4728: LD_INT 4
4730: PUSH
4731: LD_INT 5
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 380
// un := CreateHuman ;
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: CALL_OW 44
4758: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4759: LD_VAR 0 3
4763: PPUSH
4764: LD_INT 143
4766: PPUSH
4767: CALL_OW 52
// if type = 1 then
4771: LD_VAR 0 1
4775: PUSH
4776: LD_INT 1
4778: EQUAL
4779: IFFALSE 4802
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4781: LD_INT 143
4783: PPUSH
4784: LD_INT 21
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: LD_INT 51
4795: PPUSH
4796: CALL_OW 185
4800: GO 4881
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4802: LD_INT 143
4804: PPUSH
4805: LD_INT 21
4807: PUSH
4808: LD_INT 22
4810: PUSH
4811: LD_INT 23
4813: PUSH
4814: LD_INT 24
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 1
4833: PLUS
4834: PPUSH
4835: CALL_OW 12
4839: ARRAY
4840: PPUSH
4841: LD_INT 1
4843: PPUSH
4844: LD_INT 1
4846: PPUSH
4847: LD_INT 44
4849: PUSH
4850: LD_INT 44
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: LD_INT 42
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 1
4867: PPUSH
4868: LD_INT 4
4870: PPUSH
4871: CALL_OW 12
4875: ARRAY
4876: PPUSH
4877: CALL_OW 185
// end ;
4881: LD_VAR 0 2
4885: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4886: LD_EXP 8
4890: IFFALSE 5092
4892: GO 4894
4894: DISABLE
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4899: LD_EXP 25
4903: PPUSH
4904: LD_INT 79
4906: PPUSH
4907: LD_INT 155
4909: PPUSH
4910: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4914: LD_EXP 25
4918: PPUSH
4919: LD_INT 4
4921: PPUSH
4922: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4926: LD_ADDR_VAR 0 2
4930: PUSH
4931: LD_EXP 24
4935: PPUSH
4936: LD_INT 50
4938: PUSH
4939: EMPTY
4940: LIST
4941: PPUSH
4942: CALL_OW 72
4946: ST_TO_ADDR
// for i in tmp do
4947: LD_ADDR_VAR 0 1
4951: PUSH
4952: LD_VAR 0 2
4956: PUSH
4957: FOR_IN
4958: IFFALSE 4992
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4960: LD_VAR 0 1
4964: PPUSH
4965: LD_INT 123
4967: PPUSH
4968: LD_INT 60
4970: PPUSH
4971: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
4975: LD_VAR 0 1
4979: PPUSH
4980: LD_INT 153
4982: PPUSH
4983: LD_INT 103
4985: PPUSH
4986: CALL_OW 174
// end ;
4990: GO 4957
4992: POP
4993: POP
// repeat wait ( 0 0$1 ) ;
4994: LD_INT 35
4996: PPUSH
4997: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_EXP 24
5010: PPUSH
5011: LD_INT 50
5013: PUSH
5014: EMPTY
5015: LIST
5016: PPUSH
5017: CALL_OW 72
5021: ST_TO_ADDR
// for i in tmp do
5022: LD_ADDR_VAR 0 1
5026: PUSH
5027: LD_VAR 0 2
5031: PUSH
5032: FOR_IN
5033: IFFALSE 5083
// if not HasTask ( i ) then
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 314
5044: NOT
5045: IFFALSE 5081
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5047: LD_VAR 0 1
5051: PPUSH
5052: LD_INT 81
5054: PUSH
5055: LD_INT 3
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 69
5066: PPUSH
5067: LD_VAR 0 1
5071: PPUSH
5072: CALL_OW 74
5076: PPUSH
5077: CALL_OW 115
5081: GO 5032
5083: POP
5084: POP
5085: LD_VAR 0 2
5089: NOT
5090: IFFALSE 4994
// end ;
5092: PPOPN 2
5094: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5095: LD_INT 5
5097: PPUSH
5098: LD_INT 81
5100: PUSH
5101: LD_INT 6
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5125
5114: GO 5116
5116: DISABLE
// russianAlert := true ;
5117: LD_ADDR_EXP 5
5121: PUSH
5122: LD_INT 1
5124: ST_TO_ADDR
5125: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5126: LD_INT 106
5128: PPUSH
5129: CALL_OW 302
5133: PUSH
5134: LD_INT 106
5136: PPUSH
5137: CALL_OW 255
5141: PUSH
5142: LD_INT 3
5144: EQUAL
5145: AND
5146: PUSH
5147: LD_INT 106
5149: PPUSH
5150: CALL_OW 274
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 275
5162: PUSH
5163: LD_INT 100
5165: LESS
5166: AND
5167: IFFALSE 5191
5169: GO 5171
5171: DISABLE
// begin enable ;
5172: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5173: LD_INT 106
5175: PPUSH
5176: CALL_OW 274
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: LD_INT 200
5186: PPUSH
5187: CALL_OW 276
// end ;
5191: END
// every 0 0$1 do var i , un , tmp ;
5192: GO 5194
5194: DISABLE
5195: LD_INT 0
5197: PPUSH
5198: PPUSH
5199: PPUSH
// begin uc_side := 3 ;
5200: LD_ADDR_OWVAR 20
5204: PUSH
5205: LD_INT 3
5207: ST_TO_ADDR
// uc_nation := 3 ;
5208: LD_ADDR_OWVAR 21
5212: PUSH
5213: LD_INT 3
5215: ST_TO_ADDR
// tmp := [ ] ;
5216: LD_ADDR_VAR 0 3
5220: PUSH
5221: EMPTY
5222: ST_TO_ADDR
// for i := 1 to 2 do
5223: LD_ADDR_VAR 0 1
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 2
5235: PUSH
5236: FOR_TO
5237: IFFALSE 5314
// begin PrepareHuman ( false , 2 , 2 ) ;
5239: LD_INT 0
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: LD_INT 2
5247: PPUSH
5248: CALL_OW 380
// un := CreateHuman ;
5252: LD_ADDR_VAR 0 2
5256: PUSH
5257: CALL_OW 44
5261: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5262: LD_ADDR_VAR 0 3
5266: PUSH
5267: LD_VAR 0 3
5271: PPUSH
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 1
5279: PLUS
5280: PPUSH
5281: LD_VAR 0 2
5285: PPUSH
5286: CALL_OW 1
5290: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5291: LD_VAR 0 2
5295: PPUSH
5296: LD_INT 74
5298: PPUSH
5299: LD_INT 112
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 50
// end ;
5312: GO 5236
5314: POP
5315: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5316: LD_INT 112
5318: PPUSH
5319: CALL_OW 274
5323: PPUSH
5324: LD_INT 2
5326: PPUSH
5327: LD_INT 100
5329: PPUSH
5330: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// for i in tmp do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_VAR 0 3
5350: PUSH
5351: FOR_IN
5352: IFFALSE 5434
// begin if IsDead ( i ) then
5354: LD_VAR 0 1
5358: PPUSH
5359: CALL_OW 301
5363: IFFALSE 5381
// tmp := tmp diff i ;
5365: LD_ADDR_VAR 0 3
5369: PUSH
5370: LD_VAR 0 3
5374: PUSH
5375: LD_VAR 0 1
5379: DIFF
5380: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 314
5390: NOT
5391: PUSH
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 281
5401: NOT
5402: AND
5403: IFFALSE 5432
// begin ComTransport ( i , kagan , mat_oil ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_INT 112
5412: PPUSH
5413: LD_INT 2
5415: PPUSH
5416: CALL_OW 151
// AddComGive ( i , beria ) ;
5420: LD_VAR 0 1
5424: PPUSH
5425: LD_INT 106
5427: PPUSH
5428: CALL_OW 221
// end ; end ;
5432: GO 5351
5434: POP
5435: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5436: LD_VAR 0 3
5440: NOT
5441: PUSH
5442: LD_INT 112
5444: PPUSH
5445: CALL_OW 301
5449: OR
5450: PUSH
5451: LD_INT 106
5453: PPUSH
5454: CALL_OW 301
5458: OR
5459: IFFALSE 5334
// end ;
5461: PPOPN 3
5463: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5464: GO 5466
5466: DISABLE
5467: LD_INT 0
5469: PPUSH
5470: PPUSH
5471: PPUSH
5472: PPUSH
5473: PPUSH
// begin enable ;
5474: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5475: LD_ADDR_VAR 0 4
5479: PUSH
5480: LD_INT 22
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PUSH
5490: LD_INT 34
5492: PUSH
5493: LD_INT 51
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PUSH
5500: LD_INT 24
5502: PUSH
5503: LD_INT 600
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: PPUSH
5515: CALL_OW 69
5519: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5520: LD_ADDR_VAR 0 5
5524: PUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 3
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 2
5537: PUSH
5538: LD_INT 30
5540: PUSH
5541: LD_INT 0
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 30
5550: PUSH
5551: LD_INT 1
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 69
5571: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5572: LD_ADDR_VAR 0 3
5576: PUSH
5577: LD_INT 9
5579: PPUSH
5580: CALL_OW 435
5584: ST_TO_ADDR
// if not cargo or not skr or not dep then
5585: LD_VAR 0 4
5589: NOT
5590: PUSH
5591: LD_VAR 0 3
5595: NOT
5596: OR
5597: PUSH
5598: LD_VAR 0 5
5602: NOT
5603: OR
5604: IFFALSE 5608
// exit ;
5606: GO 5772
// for i in cargo do
5608: LD_ADDR_VAR 0 1
5612: PUSH
5613: LD_VAR 0 4
5617: PUSH
5618: FOR_IN
5619: IFFALSE 5770
// begin if not skr then
5621: LD_VAR 0 3
5625: NOT
5626: IFFALSE 5632
// exit ;
5628: POP
5629: POP
5630: GO 5772
// if not HasTask ( i ) then
5632: LD_VAR 0 1
5636: PPUSH
5637: CALL_OW 314
5641: NOT
5642: IFFALSE 5711
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5644: LD_VAR 0 1
5648: PPUSH
5649: LD_VAR 0 3
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 3
5662: PUSH
5663: LD_INT 2
5665: ARRAY
5666: PPUSH
5667: CALL_OW 117
// for j := 1 to 2 do
5671: LD_ADDR_VAR 0 2
5675: PUSH
5676: DOUBLE
5677: LD_INT 1
5679: DEC
5680: ST_TO_ADDR
5681: LD_INT 2
5683: PUSH
5684: FOR_TO
5685: IFFALSE 5707
// skr := Delete ( skr , 1 ) ;
5687: LD_ADDR_VAR 0 3
5691: PUSH
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: CALL_OW 3
5704: ST_TO_ADDR
5705: GO 5684
5707: POP
5708: POP
// end else
5709: GO 5768
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5711: LD_VAR 0 1
5715: PPUSH
5716: CALL_OW 261
5720: PUSH
5721: LD_INT 3
5723: LESS
5724: PUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_VAR 0 1
5739: PPUSH
5740: CALL_OW 74
5744: PPUSH
5745: CALL_OW 296
5749: PUSH
5750: LD_INT 6
5752: LESS
5753: AND
5754: IFFALSE 5768
// SetFuel ( i , 100 ) ;
5756: LD_VAR 0 1
5760: PPUSH
5761: LD_INT 100
5763: PPUSH
5764: CALL_OW 240
// end ;
5768: GO 5618
5770: POP
5771: POP
// end ;
5772: PPOPN 5
5774: END
// export function SendSupport ; var i , un ; begin
5775: LD_INT 0
5777: PPUSH
5778: PPUSH
5779: PPUSH
// uc_nation := 3 ;
5780: LD_ADDR_OWVAR 21
5784: PUSH
5785: LD_INT 3
5787: ST_TO_ADDR
// uc_side := 3 ;
5788: LD_ADDR_OWVAR 20
5792: PUSH
5793: LD_INT 3
5795: ST_TO_ADDR
// ResetHc ;
5796: CALL 66913 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: DOUBLE
5806: LD_INT 1
5808: DEC
5809: ST_TO_ADDR
5810: LD_INT 3
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: LD_INT 4
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_OWVAR 67
5828: ARRAY
5829: PUSH
5830: FOR_TO
5831: IFFALSE 5905
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5833: LD_INT 0
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_OWVAR 67
5843: PPUSH
5844: CALL_OW 380
// un := CreateHuman ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: CALL_OW 44
5857: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 107
5865: PPUSH
5866: LD_INT 95
5868: PPUSH
5869: LD_INT 4
5871: PPUSH
5872: LD_INT 0
5874: PPUSH
5875: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5879: LD_VAR 0 3
5883: PPUSH
5884: LD_INT 56
5886: PPUSH
5887: LD_INT 27
5889: PPUSH
5890: CALL_OW 114
// AddComHold ( un ) ;
5894: LD_VAR 0 3
5898: PPUSH
5899: CALL_OW 200
// end ;
5903: GO 5830
5905: POP
5906: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5907: LD_INT 0
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: LD_OWVAR 67
5917: PPUSH
5918: CALL_OW 380
// un := CreateHuman ;
5922: LD_ADDR_VAR 0 3
5926: PUSH
5927: CALL_OW 44
5931: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5932: LD_VAR 0 3
5936: PPUSH
5937: LD_INT 107
5939: PPUSH
5940: LD_INT 95
5942: PPUSH
5943: LD_INT 4
5945: PPUSH
5946: LD_INT 0
5948: PPUSH
5949: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_INT 59
5960: PPUSH
5961: LD_INT 25
5963: PPUSH
5964: CALL_OW 111
// if Difficulty > 1 then
5968: LD_OWVAR 67
5972: PUSH
5973: LD_INT 1
5975: GREATER
5976: IFFALSE 6085
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
5978: LD_ADDR_VAR 0 2
5982: PUSH
5983: DOUBLE
5984: LD_INT 1
5986: DEC
5987: ST_TO_ADDR
5988: LD_INT 2
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 3
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: PUSH
6002: LD_OWVAR 67
6006: ARRAY
6007: PUSH
6008: FOR_TO
6009: IFFALSE 6083
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6011: LD_INT 0
6013: PPUSH
6014: LD_INT 1
6016: PPUSH
6017: LD_OWVAR 67
6021: PPUSH
6022: CALL_OW 380
// un := CreateHuman ;
6026: LD_ADDR_VAR 0 3
6030: PUSH
6031: CALL_OW 44
6035: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 107
6043: PPUSH
6044: LD_INT 95
6046: PPUSH
6047: LD_INT 4
6049: PPUSH
6050: LD_INT 0
6052: PPUSH
6053: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 45
6064: PPUSH
6065: LD_INT 76
6067: PPUSH
6068: CALL_OW 114
// AddComHold ( un ) ;
6072: LD_VAR 0 3
6076: PPUSH
6077: CALL_OW 200
// end ;
6081: GO 6008
6083: POP
6084: POP
// end ; end ;
6085: LD_VAR 0 1
6089: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6090: LD_OWVAR 1
6094: PUSH
6095: LD_INT 42000
6097: GREATEREQUAL
6098: PUSH
6099: LD_OWVAR 67
6103: PUSH
6104: LD_INT 1
6106: GREATER
6107: AND
6108: PUSH
6109: LD_EXP 24
6113: PUSH
6114: LD_INT 4
6116: GREATER
6117: AND
6118: PUSH
6119: LD_EXP 8
6123: NOT
6124: AND
6125: IFFALSE 6418
6127: GO 6129
6129: DISABLE
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
6134: PPUSH
6135: PPUSH
// begin enable ;
6136: ENABLE
// tmp := [ ] ;
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: EMPTY
6143: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6144: LD_ADDR_VAR 0 4
6148: PUSH
6149: LD_INT 55
6151: PUSH
6152: LD_INT 91
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 47
6161: PUSH
6162: LD_INT 80
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 39
6171: PUSH
6172: LD_INT 67
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 36
6181: PUSH
6182: LD_INT 60
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 33
6191: PUSH
6192: LD_INT 52
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6206: LD_ADDR_VAR 0 1
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 2
6218: PUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_OWVAR 67
6234: PUSH
6235: LD_INT 1
6237: MINUS
6238: ARRAY
6239: PUSH
6240: FOR_TO
6241: IFFALSE 6392
// begin uc_side := 3 ;
6243: LD_ADDR_OWVAR 20
6247: PUSH
6248: LD_INT 3
6250: ST_TO_ADDR
// uc_nation := 3 ;
6251: LD_ADDR_OWVAR 21
6255: PUSH
6256: LD_INT 3
6258: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6259: LD_INT 22
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 1
6267: PPUSH
6268: LD_INT 42
6270: PUSH
6271: LD_INT 42
6273: PUSH
6274: LD_INT 44
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: PUSH
6282: LD_VAR 0 1
6286: PUSH
6287: LD_INT 3
6289: MOD
6290: PUSH
6291: LD_INT 1
6293: PLUS
6294: ARRAY
6295: PPUSH
6296: LD_INT 100
6298: PPUSH
6299: CALL 34525 0 5
// un := CreateVehicle ;
6303: LD_ADDR_VAR 0 2
6307: PUSH
6308: CALL_OW 45
6312: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_INT 57
6320: PPUSH
6321: LD_INT 103
6323: PPUSH
6324: LD_INT 4
6326: PPUSH
6327: LD_INT 0
6329: PPUSH
6330: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6334: LD_ADDR_VAR 0 3
6338: PUSH
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_VAR 0 3
6348: PUSH
6349: LD_INT 1
6351: PLUS
6352: PPUSH
6353: LD_VAR 0 2
6357: PPUSH
6358: CALL_OW 1
6362: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6363: LD_INT 0
6365: PPUSH
6366: LD_INT 3
6368: PPUSH
6369: LD_INT 5
6371: PPUSH
6372: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6376: CALL_OW 44
6380: PPUSH
6381: LD_VAR 0 2
6385: PPUSH
6386: CALL_OW 52
// end ;
6390: GO 6240
6392: POP
6393: POP
// repeat wait ( 0 0$1 ) ;
6394: LD_INT 35
6396: PPUSH
6397: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6401: LD_VAR 0 3
6405: PPUSH
6406: LD_VAR 0 4
6410: PPUSH
6411: CALL 68994 0 2
6415: NOT
6416: IFFALSE 6394
// end ;
6418: PPOPN 4
6420: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6421: LD_INT 3
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 32
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PPUSH
6452: CALL_OW 69
6456: IFFALSE 6540
6458: GO 6460
6460: DISABLE
6461: LD_INT 0
6463: PPUSH
// begin enable ;
6464: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6465: LD_ADDR_VAR 0 1
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: LD_INT 22
6475: PUSH
6476: LD_INT 1
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 32
6489: PUSH
6490: LD_INT 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PPUSH
6501: CALL_OW 69
6505: PUSH
6506: FOR_IN
6507: IFFALSE 6538
// if GetFuel ( i ) < 3 then
6509: LD_VAR 0 1
6513: PPUSH
6514: CALL_OW 261
6518: PUSH
6519: LD_INT 3
6521: LESS
6522: IFFALSE 6536
// SetFuel ( i , 3 ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 240
6536: GO 6506
6538: POP
6539: POP
// end ; end_of_file
6540: PPOPN 1
6542: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6543: LD_INT 0
6545: PPUSH
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
6550: PPUSH
// uc_side := 2 ;
6551: LD_ADDR_OWVAR 20
6555: PUSH
6556: LD_INT 2
6558: ST_TO_ADDR
// uc_nation := 2 ;
6559: LD_ADDR_OWVAR 21
6563: PUSH
6564: LD_INT 2
6566: ST_TO_ADDR
// InitVc ;
6567: CALL_OW 20
// ResetHc ;
6571: CALL 66913 0 0
// for j := 1 to 2 do
6575: LD_ADDR_VAR 0 3
6579: PUSH
6580: DOUBLE
6581: LD_INT 1
6583: DEC
6584: ST_TO_ADDR
6585: LD_INT 2
6587: PUSH
6588: FOR_TO
6589: IFFALSE 6813
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6591: LD_ADDR_VAR 0 6
6595: PUSH
6596: LD_INT 178
6598: PUSH
6599: LD_INT 3
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 268
6608: PUSH
6609: LD_INT 121
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ARRAY
6625: ST_TO_ADDR
// for i := 1 to 8 do
6626: LD_ADDR_VAR 0 2
6630: PUSH
6631: DOUBLE
6632: LD_INT 1
6634: DEC
6635: ST_TO_ADDR
6636: LD_INT 8
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6809
// begin uc_side := 2 ;
6642: LD_ADDR_OWVAR 20
6646: PUSH
6647: LD_INT 2
6649: ST_TO_ADDR
// uc_nation := 2 ;
6650: LD_ADDR_OWVAR 21
6654: PUSH
6655: LD_INT 2
6657: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6658: LD_INT 14
6660: PPUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: LD_INT 26
6669: PUSH
6670: LD_INT 27
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 1
6679: PPUSH
6680: LD_INT 2
6682: PPUSH
6683: CALL_OW 12
6687: ARRAY
6688: PPUSH
6689: LD_INT 99
6691: PPUSH
6692: CALL 34525 0 5
// veh := CreateVehicle ;
6696: LD_ADDR_VAR 0 5
6700: PUSH
6701: CALL_OW 45
6705: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6706: LD_VAR 0 5
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6718: LD_VAR 0 5
6722: PPUSH
6723: LD_VAR 0 6
6727: PUSH
6728: LD_INT 1
6730: ARRAY
6731: PPUSH
6732: LD_VAR 0 6
6736: PUSH
6737: LD_INT 2
6739: ARRAY
6740: PPUSH
6741: LD_INT 0
6743: PPUSH
6744: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6748: LD_INT 0
6750: PPUSH
6751: LD_INT 3
6753: PPUSH
6754: LD_INT 6
6756: PPUSH
6757: CALL_OW 380
// un := CreateHuman ;
6761: LD_ADDR_VAR 0 4
6765: PUSH
6766: CALL_OW 44
6770: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6771: LD_VAR 0 4
6775: PPUSH
6776: LD_VAR 0 5
6780: PPUSH
6781: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6785: LD_VAR 0 4
6789: PPUSH
6790: LD_INT 186
6792: PPUSH
6793: LD_INT 17
6795: PPUSH
6796: CALL_OW 111
// wait ( 0 0$2 ) ;
6800: LD_INT 70
6802: PPUSH
6803: CALL_OW 67
// end ;
6807: GO 6639
6809: POP
6810: POP
// end ;
6811: GO 6588
6813: POP
6814: POP
// for i := 1 to 10 do
6815: LD_ADDR_VAR 0 2
6819: PUSH
6820: DOUBLE
6821: LD_INT 1
6823: DEC
6824: ST_TO_ADDR
6825: LD_INT 10
6827: PUSH
6828: FOR_TO
6829: IFFALSE 6896
// begin PrepareHuman ( false , 1 , 5 ) ;
6831: LD_INT 0
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 5
6839: PPUSH
6840: CALL_OW 380
// un := CreateHuman ;
6844: LD_ADDR_VAR 0 4
6848: PUSH
6849: CALL_OW 44
6853: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6854: LD_VAR 0 4
6858: PPUSH
6859: LD_INT 178
6861: PPUSH
6862: LD_INT 3
6864: PPUSH
6865: LD_INT 0
6867: PPUSH
6868: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6872: LD_VAR 0 4
6876: PPUSH
6877: LD_INT 186
6879: PPUSH
6880: LD_INT 17
6882: PPUSH
6883: CALL_OW 111
// wait ( 0 0$2 ) ;
6887: LD_INT 70
6889: PPUSH
6890: CALL_OW 67
// end ;
6894: GO 6828
6896: POP
6897: POP
// end ;
6898: LD_VAR 0 1
6902: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6903: LD_INT 22
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 50
6915: PUSH
6916: EMPTY
6917: LIST
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PPUSH
6923: CALL_OW 69
6927: IFFALSE 7063
6929: GO 6931
6931: DISABLE
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
// begin enable ;
6936: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6937: LD_ADDR_VAR 0 2
6941: PUSH
6942: LD_INT 2
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 6
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 69
6974: ST_TO_ADDR
// if not enemy then
6975: LD_VAR 0 2
6979: NOT
6980: IFFALSE 7002
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7002: LD_ADDR_VAR 0 1
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 50
7019: PUSH
7020: EMPTY
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: PUSH
7032: FOR_IN
7033: IFFALSE 7061
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7035: LD_VAR 0 1
7039: PPUSH
7040: LD_VAR 0 2
7044: PPUSH
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 74
7054: PPUSH
7055: CALL_OW 115
7059: GO 7032
7061: POP
7062: POP
// end ; end_of_file
7063: PPOPN 2
7065: END
// export function Action ; begin
7066: LD_INT 0
7068: PPUSH
// InGameOn ;
7069: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7073: LD_INT 106
7075: PPUSH
7076: LD_INT 3
7078: PPUSH
7079: CALL_OW 86
// wait ( 0 0$2 ) ;
7083: LD_INT 70
7085: PPUSH
7086: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7090: LD_STRING target1
7092: PPUSH
7093: CALL_OW 337
// InGameOff ;
7097: CALL_OW 9
// SaveForQuickRestart ;
7101: CALL_OW 22
// end ;
7105: LD_VAR 0 1
7109: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7110: LD_INT 64
7112: PPUSH
7113: CALL_OW 301
7117: PUSH
7118: LD_EXP 8
7122: NOT
7123: AND
7124: IFFALSE 7144
7126: GO 7128
7128: DISABLE
// begin omicronFall := true ;
7129: LD_ADDR_EXP 7
7133: PUSH
7134: LD_INT 1
7136: ST_TO_ADDR
// YouLost ( omi ) ;
7137: LD_STRING omi
7139: PPUSH
7140: CALL_OW 104
// end ;
7144: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7145: LD_INT 4
7147: PPUSH
7148: LD_EXP 14
7152: PPUSH
7153: CALL_OW 292
7157: PUSH
7158: LD_INT 4
7160: PPUSH
7161: LD_EXP 14
7165: PPUSH
7166: CALL_OW 310
7170: PPUSH
7171: CALL_OW 292
7175: OR
7176: PUSH
7177: LD_INT 64
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7738
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// begin InGameOn ;
7196: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7200: LD_ADDR_VAR 0 2
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 4
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_VAR 0 2
7229: PPUSH
7230: LD_INT 26
7232: PUSH
7233: LD_INT 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 72
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: ST_TO_ADDR
// for i in tmp do
7249: LD_ADDR_VAR 0 1
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: FOR_IN
7260: IFFALSE 7276
// SetSide ( i , 1 ) ;
7262: LD_VAR 0 1
7266: PPUSH
7267: LD_INT 1
7269: PPUSH
7270: CALL_OW 235
7274: GO 7259
7276: POP
7277: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7278: LD_EXP 14
7282: PPUSH
7283: LD_INT 37
7285: PPUSH
7286: LD_INT 40
7288: PPUSH
7289: CALL_OW 111
// wait ( 0 0$5 ) ;
7293: LD_INT 175
7295: PPUSH
7296: CALL_OW 67
// ComExit ( Sikorski ) ;
7300: LD_EXP 14
7304: PPUSH
7305: CALL 66786 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7309: LD_EXP 14
7313: PPUSH
7314: LD_INT 37
7316: PPUSH
7317: LD_INT 40
7319: PPUSH
7320: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7324: LD_EXP 14
7328: PPUSH
7329: CALL_OW 85
// wait ( 0 0$2 ) ;
7333: LD_INT 70
7335: PPUSH
7336: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7340: LD_ADDR_VAR 0 4
7344: PUSH
7345: LD_VAR 0 3
7349: PPUSH
7350: CALL 66786 0 1
7354: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7355: LD_VAR 0 3
7359: PPUSH
7360: LD_EXP 14
7364: PPUSH
7365: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7376: LD_VAR 0 3
7380: PPUSH
7381: LD_EXP 14
7385: PPUSH
7386: CALL_OW 296
7390: PUSH
7391: LD_INT 5
7393: LESS
7394: PUSH
7395: LD_EXP 14
7399: PPUSH
7400: CALL_OW 310
7404: NOT
7405: AND
7406: IFFALSE 7369
// ComTurnUnit ( Sikorski , speaker ) ;
7408: LD_EXP 14
7412: PPUSH
7413: LD_VAR 0 3
7417: PPUSH
7418: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7422: LD_VAR 0 3
7426: PPUSH
7427: LD_EXP 14
7431: PPUSH
7432: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7436: LD_EXP 14
7440: PPUSH
7441: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7445: LD_EXP 14
7449: PPUSH
7450: LD_STRING DS-1
7452: PPUSH
7453: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7457: LD_VAR 0 3
7461: PPUSH
7462: LD_STRING DP-1
7464: PPUSH
7465: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7469: LD_EXP 14
7473: PPUSH
7474: LD_STRING DS-2
7476: PPUSH
7477: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7481: LD_VAR 0 3
7485: PPUSH
7486: LD_STRING DP-2
7488: PPUSH
7489: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7493: LD_EXP 14
7497: PPUSH
7498: LD_STRING DS-3
7500: PPUSH
7501: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7505: LD_VAR 0 3
7509: PPUSH
7510: LD_STRING DP-3
7512: PPUSH
7513: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7517: LD_EXP 14
7521: PPUSH
7522: LD_STRING DS-4
7524: PPUSH
7525: CALL_OW 88
// wait ( 0 0$1 ) ;
7529: LD_INT 35
7531: PPUSH
7532: CALL_OW 67
// if whereHeWas then
7536: LD_VAR 0 4
7540: IFFALSE 7556
// ComEnterUnit ( speaker , whereHeWas ) ;
7542: LD_VAR 0 3
7546: PPUSH
7547: LD_VAR 0 4
7551: PPUSH
7552: CALL_OW 120
// ComHold ( Sikorski ) ;
7556: LD_EXP 14
7560: PPUSH
7561: CALL_OW 140
// wait ( 0 0$1 ) ;
7565: LD_INT 35
7567: PPUSH
7568: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7572: LD_EXP 15
7576: PPUSH
7577: LD_STRING DR-1
7579: PPUSH
7580: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7584: LD_EXP 14
7588: PPUSH
7589: LD_STRING DS-5
7591: PPUSH
7592: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7596: LD_EXP 15
7600: PPUSH
7601: LD_STRING DR-2
7603: PPUSH
7604: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7608: LD_EXP 14
7612: PPUSH
7613: LD_STRING DS-6
7615: PPUSH
7616: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7620: LD_EXP 15
7624: PPUSH
7625: LD_STRING DR-3
7627: PPUSH
7628: CALL_OW 94
// InGameOff ;
7632: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7636: LD_STRING target2
7638: PPUSH
7639: CALL_OW 337
// sikorskiInOmicron := true ;
7643: LD_ADDR_EXP 9
7647: PUSH
7648: LD_INT 1
7650: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7651: LD_INT 70
7653: PPUSH
7654: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7658: LD_EXP 14
7662: PPUSH
7663: LD_STRING DS-7
7665: PPUSH
7666: CALL_OW 88
// wait ( 3 3$00 ) ;
7670: LD_INT 6300
7672: PPUSH
7673: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7677: LD_EXP 15
7681: PPUSH
7682: LD_STRING DRforce-5
7684: PPUSH
7685: CALL_OW 94
// wait ( 4 4$50 ) ;
7689: LD_INT 10150
7691: PPUSH
7692: CALL_OW 67
// FirstReinforcements ;
7696: CALL 7915 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7700: LD_INT 25200
7702: PPUSH
7703: LD_INT 31500
7705: PPUSH
7706: CALL_OW 12
7710: PPUSH
7711: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7715: LD_EXP 15
7719: PPUSH
7720: LD_STRING DRforce-10
7722: PPUSH
7723: CALL_OW 94
// wait ( 9 9$50 ) ;
7727: LD_INT 20650
7729: PPUSH
7730: CALL_OW 67
// SecondReinforcements ;
7734: CALL 8758 0 0
// end ;
7738: PPOPN 4
7740: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7741: LD_EXP 14
7745: PPUSH
7746: CALL_OW 256
7750: PUSH
7751: LD_INT 1000
7753: LESS
7754: PUSH
7755: LD_INT 22
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: LD_INT 101
7770: PUSH
7771: LD_INT 3
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 101
7780: PUSH
7781: LD_INT 6
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PPUSH
7797: CALL_OW 69
7801: AND
7802: IFFALSE 7819
7804: GO 7806
7806: DISABLE
// Say ( Sikorski , DRus ) ;
7807: LD_EXP 14
7811: PPUSH
7812: LD_STRING DRus
7814: PPUSH
7815: CALL_OW 88
7819: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7820: LD_OWVAR 1
7824: PUSH
7825: LD_INT 23100
7827: PUSH
7828: LD_INT 22050
7830: PUSH
7831: LD_INT 20300
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: LD_OWVAR 67
7843: ARRAY
7844: GREATEREQUAL
7845: IFFALSE 7914
7847: GO 7849
7849: DISABLE
// begin SendSupport ;
7850: CALL 5775 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7854: LD_EXP 24
7858: PPUSH
7859: LD_INT 21
7861: PUSH
7862: LD_INT 2
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 72
7873: PPUSH
7874: LD_INT 62
7876: PPUSH
7877: LD_INT 22
7879: PPUSH
7880: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7884: LD_EXP 25
7888: PPUSH
7889: LD_INT 69
7891: PPUSH
7892: LD_INT 27
7894: PPUSH
7895: CALL_OW 111
// wait ( 1 1$00 ) ;
7899: LD_INT 2100
7901: PPUSH
7902: CALL_OW 67
// startAttackOnOmicron := true ;
7906: LD_ADDR_EXP 6
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// end ;
7914: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7915: LD_INT 0
7917: PPUSH
7918: PPUSH
7919: PPUSH
7920: PPUSH
7921: PPUSH
7922: PPUSH
// uc_side := 4 ;
7923: LD_ADDR_OWVAR 20
7927: PUSH
7928: LD_INT 4
7930: ST_TO_ADDR
// uc_nation := 1 ;
7931: LD_ADDR_OWVAR 21
7935: PUSH
7936: LD_INT 1
7938: ST_TO_ADDR
// tmp := [ ] ;
7939: LD_ADDR_VAR 0 4
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// ResetHc ;
7946: CALL 66913 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7950: LD_INT 2
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: LD_INT 4
7961: PPUSH
7962: LD_INT 77
7964: PPUSH
7965: CALL 34525 0 5
// un := CreateVehicle ;
7969: LD_ADDR_VAR 0 3
7973: PUSH
7974: CALL_OW 45
7978: ST_TO_ADDR
// tmp := tmp union un ;
7979: LD_ADDR_VAR 0 4
7983: PUSH
7984: LD_VAR 0 4
7988: PUSH
7989: LD_VAR 0 3
7993: UNION
7994: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7995: LD_VAR 0 3
7999: PPUSH
8000: LD_INT 2
8002: PPUSH
8003: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8007: LD_VAR 0 3
8011: PPUSH
8012: LD_INT 106
8014: PPUSH
8015: LD_INT 3
8017: PPUSH
8018: LD_INT 0
8020: PPUSH
8021: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8025: LD_INT 0
8027: PPUSH
8028: LD_INT 3
8030: PPUSH
8031: LD_INT 2
8033: PPUSH
8034: CALL_OW 380
// un := CreateHuman ;
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: CALL_OW 44
8047: ST_TO_ADDR
// tmp := tmp union un ;
8048: LD_ADDR_VAR 0 4
8052: PUSH
8053: LD_VAR 0 4
8057: PUSH
8058: LD_VAR 0 3
8062: UNION
8063: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8064: LD_VAR 0 3
8068: PPUSH
8069: LD_VAR 0 4
8073: PUSH
8074: LD_VAR 0 4
8078: PUSH
8079: LD_INT 1
8081: MINUS
8082: ARRAY
8083: PPUSH
8084: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_INT 109
8095: PPUSH
8096: LD_INT 9
8098: PPUSH
8099: CALL_OW 111
// wait ( 0 0$1 ) ;
8103: LD_INT 35
8105: PPUSH
8106: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8110: LD_ADDR_VAR 0 2
8114: PUSH
8115: DOUBLE
8116: LD_INT 1
8118: DEC
8119: ST_TO_ADDR
8120: LD_INT 2
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: PUSH
8134: LD_OWVAR 67
8138: ARRAY
8139: PUSH
8140: FOR_TO
8141: IFFALSE 8205
// begin PrepareHuman ( false , 1 , 2 ) ;
8143: LD_INT 0
8145: PPUSH
8146: LD_INT 1
8148: PPUSH
8149: LD_INT 2
8151: PPUSH
8152: CALL_OW 380
// un := CreateHuman ;
8156: LD_ADDR_VAR 0 3
8160: PUSH
8161: CALL_OW 44
8165: ST_TO_ADDR
// tmp := tmp union un ;
8166: LD_ADDR_VAR 0 4
8170: PUSH
8171: LD_VAR 0 4
8175: PUSH
8176: LD_VAR 0 3
8180: UNION
8181: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8182: LD_VAR 0 3
8186: PPUSH
8187: LD_INT 105
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: LD_INT 0
8198: PPUSH
8199: CALL_OW 50
// end ;
8203: GO 8140
8205: POP
8206: POP
// PrepareHuman ( false , 4 , 2 ) ;
8207: LD_INT 0
8209: PPUSH
8210: LD_INT 4
8212: PPUSH
8213: LD_INT 2
8215: PPUSH
8216: CALL_OW 380
// un := CreateHuman ;
8220: LD_ADDR_VAR 0 3
8224: PUSH
8225: CALL_OW 44
8229: ST_TO_ADDR
// tmp := tmp union un ;
8230: LD_ADDR_VAR 0 4
8234: PUSH
8235: LD_VAR 0 4
8239: PUSH
8240: LD_VAR 0 3
8244: UNION
8245: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8246: LD_VAR 0 3
8250: PPUSH
8251: LD_INT 105
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: LD_INT 2
8259: PPUSH
8260: LD_INT 0
8262: PPUSH
8263: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8267: LD_VAR 0 4
8271: PPUSH
8272: LD_INT 26
8274: PPUSH
8275: LD_INT 35
8277: PPUSH
8278: CALL_OW 114
// spotted := false ;
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8290: LD_ADDR_VAR 0 6
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: LD_INT 0
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8305: LD_INT 35
8307: PPUSH
8308: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8312: LD_VAR 0 4
8316: PPUSH
8317: LD_INT 3
8319: PUSH
8320: LD_INT 24
8322: PUSH
8323: LD_INT 1000
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PPUSH
8334: CALL_OW 72
8338: PUSH
8339: LD_VAR 0 5
8343: NOT
8344: AND
8345: IFFALSE 8471
// begin spotted := true ;
8347: LD_ADDR_VAR 0 5
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_VAR 0 4
8364: PPUSH
8365: LD_INT 3
8367: PUSH
8368: LD_INT 24
8370: PUSH
8371: LD_INT 1000
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 72
8386: PUSH
8387: LD_INT 1
8389: ARRAY
8390: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8391: LD_ADDR_VAR 0 6
8395: PUSH
8396: LD_VAR 0 3
8400: PPUSH
8401: CALL_OW 250
8405: PUSH
8406: LD_VAR 0 3
8410: PPUSH
8411: CALL_OW 251
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8420: LD_VAR 0 6
8424: PUSH
8425: LD_INT 1
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 6
8433: PUSH
8434: LD_INT 2
8436: ARRAY
8437: PPUSH
8438: LD_INT 1
8440: PPUSH
8441: LD_INT 12
8443: NEG
8444: PPUSH
8445: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 1
8456: ARRAY
8457: PPUSH
8458: LD_VAR 0 6
8462: PUSH
8463: LD_INT 2
8465: ARRAY
8466: PPUSH
8467: CALL_OW 84
// end ; for i in tmp do
8471: LD_ADDR_VAR 0 2
8475: PUSH
8476: LD_VAR 0 4
8480: PUSH
8481: FOR_IN
8482: IFFALSE 8513
// if not HasTask ( i ) then
8484: LD_VAR 0 2
8488: PPUSH
8489: CALL_OW 314
8493: NOT
8494: IFFALSE 8511
// ComAgressiveMove ( i , 26 , 35 ) ;
8496: LD_VAR 0 2
8500: PPUSH
8501: LD_INT 26
8503: PPUSH
8504: LD_INT 35
8506: PPUSH
8507: CALL_OW 114
8511: GO 8481
8513: POP
8514: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8515: LD_VAR 0 4
8519: PPUSH
8520: LD_INT 50
8522: PUSH
8523: EMPTY
8524: LIST
8525: PPUSH
8526: CALL_OW 72
8530: NOT
8531: IFFALSE 8566
// begin if spotted then
8533: LD_VAR 0 5
8537: IFFALSE 8564
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8539: LD_VAR 0 6
8543: PUSH
8544: LD_INT 1
8546: ARRAY
8547: PPUSH
8548: LD_VAR 0 6
8552: PUSH
8553: LD_INT 2
8555: ARRAY
8556: PPUSH
8557: LD_INT 1
8559: PPUSH
8560: CALL_OW 331
// exit ;
8564: GO 8753
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8566: LD_VAR 0 4
8570: PPUSH
8571: LD_INT 91
8573: PUSH
8574: LD_INT 64
8576: PUSH
8577: LD_INT 12
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: PPUSH
8585: CALL_OW 72
8589: PUSH
8590: LD_INT 4
8592: PPUSH
8593: LD_EXP 14
8597: PPUSH
8598: CALL_OW 292
8602: OR
8603: IFFALSE 8305
// omicronSquad := omicronSquad union tmp ;
8605: LD_ADDR_EXP 13
8609: PUSH
8610: LD_EXP 13
8614: PUSH
8615: LD_VAR 0 4
8619: UNION
8620: ST_TO_ADDR
// if spotted then
8621: LD_VAR 0 5
8625: IFFALSE 8652
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8627: LD_VAR 0 6
8631: PUSH
8632: LD_INT 1
8634: ARRAY
8635: PPUSH
8636: LD_VAR 0 6
8640: PUSH
8641: LD_INT 2
8643: ARRAY
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 331
// for i in tmp do
8652: LD_ADDR_VAR 0 2
8656: PUSH
8657: LD_VAR 0 4
8661: PUSH
8662: FOR_IN
8663: IFFALSE 8679
// SetSide ( i , 1 ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 1
8672: PPUSH
8673: CALL_OW 235
8677: GO 8662
8679: POP
8680: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8681: LD_VAR 0 4
8685: PPUSH
8686: LD_INT 26
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 50
8698: PUSH
8699: EMPTY
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 72
8710: IFFALSE 8753
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8712: LD_VAR 0 4
8716: PPUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 50
8729: PUSH
8730: EMPTY
8731: LIST
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL_OW 72
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: LD_STRING Dcargo
8748: PPUSH
8749: CALL_OW 88
// end ;
8753: LD_VAR 0 1
8757: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8758: LD_INT 0
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
// uc_side := 1 ;
8764: LD_ADDR_OWVAR 20
8768: PUSH
8769: LD_INT 1
8771: ST_TO_ADDR
// uc_nation := 1 ;
8772: LD_ADDR_OWVAR 21
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// ResetHc ;
8780: CALL 66913 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8784: LD_INT 0
8786: PPUSH
8787: LD_INT 3
8789: PPUSH
8790: LD_INT 3
8792: PPUSH
8793: CALL_OW 380
// un := CreateHuman ;
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: CALL_OW 44
8806: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8807: LD_INT 3
8809: PPUSH
8810: LD_INT 1
8812: PPUSH
8813: LD_INT 1
8815: PPUSH
8816: LD_INT 5
8818: PPUSH
8819: LD_INT 90
8821: PPUSH
8822: CALL 34525 0 5
// veh := CreateVehicle ;
8826: LD_ADDR_VAR 0 3
8830: PUSH
8831: CALL_OW 45
8835: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8836: LD_VAR 0 3
8840: PPUSH
8841: LD_INT 2
8843: PPUSH
8844: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8848: LD_VAR 0 3
8852: PPUSH
8853: LD_INT 83
8855: PPUSH
8856: LD_INT 154
8858: PPUSH
8859: LD_INT 10
8861: PPUSH
8862: LD_INT 0
8864: PPUSH
8865: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_VAR 0 3
8878: PPUSH
8879: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8883: LD_ADDR_VAR 0 4
8887: PUSH
8888: DOUBLE
8889: LD_INT 1
8891: DEC
8892: ST_TO_ADDR
8893: LD_INT 4
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_OWVAR 67
8911: ARRAY
8912: PUSH
8913: FOR_TO
8914: IFFALSE 8962
// begin PrepareHuman ( false , 1 , 3 ) ;
8916: LD_INT 0
8918: PPUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: CALL_OW 380
// un := CreateHuman ;
8929: LD_ADDR_VAR 0 2
8933: PUSH
8934: CALL_OW 44
8938: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8939: LD_VAR 0 2
8943: PPUSH
8944: LD_INT 83
8946: PPUSH
8947: LD_INT 154
8949: PPUSH
8950: LD_INT 10
8952: PPUSH
8953: LD_INT 0
8955: PPUSH
8956: CALL_OW 50
// end ;
8960: GO 8913
8962: POP
8963: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8964: LD_INT 1
8966: PPUSH
8967: LD_INT 1
8969: PPUSH
8970: LD_INT 3
8972: PPUSH
8973: CALL_OW 380
// un := CreateHuman ;
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: CALL_OW 44
8986: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_INT 83
8994: PPUSH
8995: LD_INT 154
8997: PPUSH
8998: LD_INT 10
9000: PPUSH
9001: LD_INT 0
9003: PPUSH
9004: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9008: LD_VAR 0 2
9012: PPUSH
9013: LD_STRING Dhelp
9015: PPUSH
9016: CALL_OW 94
// ResetHc ;
9020: CALL 66913 0 0
// end ;
9024: LD_VAR 0 1
9028: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9029: LD_EXP 5
9033: IFFALSE 9175
9035: GO 9037
9037: DISABLE
9038: LD_INT 0
9040: PPUSH
9041: PPUSH
9042: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9043: LD_ADDR_VAR 0 2
9047: PUSH
9048: LD_EXP 20
9052: PPUSH
9053: LD_INT 25
9055: PUSH
9056: LD_INT 1
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 54
9065: PUSH
9066: EMPTY
9067: LIST
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PPUSH
9073: CALL_OW 72
9077: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9078: LD_ADDR_VAR 0 3
9082: PUSH
9083: LD_INT 22
9085: PUSH
9086: LD_INT 6
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 32
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PPUSH
9107: CALL_OW 69
9111: ST_TO_ADDR
// for i := 1 to tmp do
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_VAR 0 2
9126: PUSH
9127: FOR_TO
9128: IFFALSE 9173
// begin ComExitBuilding ( tmp [ i ] ) ;
9130: LD_VAR 0 2
9134: PUSH
9135: LD_VAR 0 1
9139: ARRAY
9140: PPUSH
9141: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9145: LD_VAR 0 2
9149: PUSH
9150: LD_VAR 0 1
9154: ARRAY
9155: PPUSH
9156: LD_VAR 0 3
9160: PUSH
9161: LD_VAR 0 1
9165: ARRAY
9166: PPUSH
9167: CALL_OW 180
// end ;
9171: GO 9127
9173: POP
9174: POP
// end ;
9175: PPOPN 3
9177: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9178: LD_EXP 5
9182: PUSH
9183: LD_INT 22
9185: PUSH
9186: LD_INT 2
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 101
9195: PUSH
9196: LD_INT 6
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PPUSH
9207: CALL_OW 69
9211: AND
9212: IFFALSE 9358
9214: GO 9216
9216: DISABLE
9217: LD_INT 0
9219: PPUSH
9220: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9221: LD_EXP 16
9225: PPUSH
9226: LD_STRING D9a-Kur-1
9228: PPUSH
9229: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9233: LD_EXP 19
9237: PPUSH
9238: LD_STRING D9a-Bur-1
9240: PPUSH
9241: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9245: LD_EXP 16
9249: PPUSH
9250: LD_STRING D9a-Kur-2
9252: PPUSH
9253: CALL_OW 94
// retreatFromOmicron := true ;
9257: LD_ADDR_EXP 8
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9265: LD_ADDR_VAR 0 2
9269: PUSH
9270: LD_EXP 18
9274: PUSH
9275: LD_EXP 20
9279: PUSH
9280: LD_EXP 21
9284: UNION
9285: PPUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 72
9307: UNION
9308: ST_TO_ADDR
// for i in noncombat do
9309: LD_ADDR_VAR 0 1
9313: PUSH
9314: LD_VAR 0 2
9318: PUSH
9319: FOR_IN
9320: IFFALSE 9356
// begin if IsInUnit ( i ) then
9322: LD_VAR 0 1
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( i ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9342: LD_VAR 0 1
9346: PPUSH
9347: LD_INT 4
9349: PPUSH
9350: CALL_OW 173
// end ;
9354: GO 9319
9356: POP
9357: POP
// end ;
9358: PPOPN 2
9360: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9361: LD_OWVAR 1
9365: PUSH
9366: LD_INT 42000
9368: PPUSH
9369: LD_INT 63000
9371: PPUSH
9372: CALL_OW 12
9376: GREATER
9377: IFFALSE 9522
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
// begin uc_side := 4 ;
9385: LD_ADDR_OWVAR 20
9389: PUSH
9390: LD_INT 4
9392: ST_TO_ADDR
// uc_nation := 4 ;
9393: LD_ADDR_OWVAR 21
9397: PUSH
9398: LD_INT 4
9400: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9401: LD_INT 1
9403: PPUSH
9404: LD_INT 4
9406: PPUSH
9407: LD_INT 3
9409: PPUSH
9410: CALL_OW 380
// hc_name :=  ;
9414: LD_ADDR_OWVAR 26
9418: PUSH
9419: LD_STRING 
9421: ST_TO_ADDR
// un := CreateHuman ;
9422: LD_ADDR_VAR 0 1
9426: PUSH
9427: CALL_OW 44
9431: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9432: LD_VAR 0 1
9436: PPUSH
9437: LD_INT 161
9439: PPUSH
9440: LD_INT 162
9442: PPUSH
9443: LD_INT 3
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: CALL_OW 50
// ResetHc ;
9453: CALL 66913 0 0
// wait ( 0 0$3 ) ;
9457: LD_INT 105
9459: PPUSH
9460: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_STRING Dun1
9471: PPUSH
9472: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9476: LD_INT 35
9478: PPUSH
9479: CALL_OW 67
// if IsDead ( un ) then
9483: LD_VAR 0 1
9487: PPUSH
9488: CALL_OW 301
9492: IFFALSE 9496
// exit ;
9494: GO 9522
// until See ( 1 , un ) ;
9496: LD_INT 1
9498: PPUSH
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 292
9508: IFFALSE 9476
// SetSide ( un , 1 ) ;
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 235
// end ;
9522: PPOPN 1
9524: END
// every 0 0$1 trigger tanksCounter >= 20 do
9525: LD_EXP 12
9529: PUSH
9530: LD_INT 20
9532: GREATEREQUAL
9533: IFFALSE 9545
9535: GO 9537
9537: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9538: LD_STRING ACH_PANZERKNACKER
9540: PPUSH
9541: CALL_OW 543
9545: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9546: LD_OWVAR 1
9550: PUSH
9551: LD_INT 94500
9553: PPUSH
9554: LD_INT 109200
9556: PPUSH
9557: CALL_OW 12
9561: GREATER
9562: IFFALSE 9825
9564: GO 9566
9566: DISABLE
9567: LD_INT 0
9569: PPUSH
// begin PrepareArabian ;
9570: CALL 6543 0 0
// uc_side := 4 ;
9574: LD_ADDR_OWVAR 20
9578: PUSH
9579: LD_INT 4
9581: ST_TO_ADDR
// uc_nation := 1 ;
9582: LD_ADDR_OWVAR 21
9586: PUSH
9587: LD_INT 1
9589: ST_TO_ADDR
// ResetHc ;
9590: CALL 66913 0 0
// un := CreateHuman ;
9594: LD_ADDR_VAR 0 1
9598: PUSH
9599: CALL_OW 44
9603: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9604: LD_VAR 0 1
9608: PPUSH
9609: LD_STRING ar_come
9611: PPUSH
9612: CALL_OW 94
// wait ( 0 0$20 ) ;
9616: LD_INT 700
9618: PPUSH
9619: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9623: LD_EXP 15
9627: PPUSH
9628: LD_STRING DR-Back
9630: PPUSH
9631: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9635: LD_STRING target3
9637: PPUSH
9638: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9642: LD_INT 10
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9652: LD_INT 35
9654: PPUSH
9655: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9659: LD_EXP 14
9663: PPUSH
9664: LD_INT 10
9666: PPUSH
9667: CALL_OW 308
9671: PUSH
9672: LD_INT 10
9674: PPUSH
9675: LD_INT 22
9677: PUSH
9678: LD_INT 1
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PPUSH
9685: CALL_OW 70
9689: OR
9690: IFFALSE 9652
// SayRadio ( Harrison , you_win ) ;
9692: LD_EXP 15
9696: PPUSH
9697: LD_STRING you_win
9699: PPUSH
9700: CALL_OW 94
// AddMedal ( med , 1 ) ;
9704: LD_STRING med
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9714: LD_EXP 11
9718: PUSH
9719: LD_INT 27
9721: PUSH
9722: LD_INT 32
9724: PUSH
9725: LD_INT 36
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: LD_OWVAR 67
9737: ARRAY
9738: GREATER
9739: IFFALSE 9753
// AddMedal ( ru , 1 ) else
9741: LD_STRING ru
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 101
9751: GO 9764
// AddMedal ( ru , - 1 ) ;
9753: LD_STRING ru
9755: PPUSH
9756: LD_INT 1
9758: NEG
9759: PPUSH
9760: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9764: LD_EXP 10
9768: PUSH
9769: LD_INT 4
9771: PUSH
9772: LD_INT 3
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: PUSH
9783: LD_OWVAR 67
9787: ARRAY
9788: LESS
9789: IFFALSE 9803
// AddMedal ( pep , 1 ) else
9791: LD_STRING pep
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 101
9801: GO 9814
// AddMedal ( pep , - 1 ) ;
9803: LD_STRING pep
9805: PPUSH
9806: LD_INT 1
9808: NEG
9809: PPUSH
9810: CALL_OW 101
// GiveMedals ( MAIN ) ;
9814: LD_STRING MAIN
9816: PPUSH
9817: CALL_OW 102
// YouWin ;
9821: CALL_OW 103
// end ; end_of_file
9825: PPOPN 1
9827: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9828: LD_VAR 0 1
9832: PPUSH
9833: CALL 10692 0 1
// if un = Sikorski then
9837: LD_VAR 0 1
9841: PUSH
9842: LD_EXP 14
9846: EQUAL
9847: IFFALSE 9856
// YouLost ( sik ) ;
9849: LD_STRING sik
9851: PPUSH
9852: CALL_OW 104
// if un in russianOmicronAttackers then
9856: LD_VAR 0 1
9860: PUSH
9861: LD_EXP 24
9865: IN
9866: IFFALSE 9884
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9868: LD_ADDR_EXP 24
9872: PUSH
9873: LD_EXP 24
9877: PUSH
9878: LD_VAR 0 1
9882: DIFF
9883: ST_TO_ADDR
// if un in russianCargo then
9884: LD_VAR 0 1
9888: PUSH
9889: LD_EXP 25
9893: IN
9894: IFFALSE 9912
// russianCargo := russianCargo diff un ;
9896: LD_ADDR_EXP 25
9900: PUSH
9901: LD_EXP 25
9905: PUSH
9906: LD_VAR 0 1
9910: DIFF
9911: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9912: LD_VAR 0 1
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 3
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 34
9929: PUSH
9930: LD_INT 51
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: IN
9946: IFFALSE 9955
// ProduceNew ( 1 ) ;
9948: LD_INT 1
9950: PPUSH
9951: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9955: LD_VAR 0 1
9959: PPUSH
9960: CALL_OW 255
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: IN
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 247
9985: PUSH
9986: LD_INT 1
9988: EQUAL
9989: AND
9990: PUSH
9991: LD_VAR 0 1
9995: PPUSH
9996: CALL_OW 248
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: AND
10005: IFFALSE 10021
// usLoseCounter := usLoseCounter + 1 ;
10007: LD_ADDR_EXP 10
10011: PUSH
10012: LD_EXP 10
10016: PUSH
10017: LD_INT 1
10019: PLUS
10020: ST_TO_ADDR
// end ;
10021: PPOPN 1
10023: END
// on VehicleConstructed ( veh , factory ) do begin if GetSide ( factory ) <> 3 then
10024: LD_VAR 0 2
10028: PPUSH
10029: CALL_OW 255
10033: PUSH
10034: LD_INT 3
10036: NONEQUAL
10037: IFFALSE 10041
// exit ;
10039: GO 10103
// if GetWeapon ( veh ) = ru_cargo_bay then
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 264
10050: PUSH
10051: LD_INT 51
10053: EQUAL
10054: IFFALSE 10058
// exit ;
10056: GO 10103
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10058: LD_ADDR_EXP 24
10062: PUSH
10063: LD_EXP 24
10067: PUSH
10068: LD_VAR 0 1
10072: PUSH
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 310
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: UNION
10087: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10088: LD_VAR 0 1
10092: PPUSH
10093: LD_INT 71
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// end ;
10103: PPOPN 2
10105: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10106: LD_VAR 0 2
10110: PUSH
10111: LD_EXP 24
10115: IN
10116: IFFALSE 10134
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10118: LD_ADDR_EXP 24
10122: PUSH
10123: LD_EXP 24
10127: PUSH
10128: LD_VAR 0 2
10132: DIFF
10133: ST_TO_ADDR
// if oldId in russianCargo then
10134: LD_VAR 0 2
10138: PUSH
10139: LD_EXP 25
10143: IN
10144: IFFALSE 10162
// russianCargo := russianCargo diff oldId ;
10146: LD_ADDR_EXP 25
10150: PUSH
10151: LD_EXP 25
10155: PUSH
10156: LD_VAR 0 2
10160: DIFF
10161: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10162: LD_VAR 0 1
10166: PUSH
10167: LD_EXP 24
10171: IN
10172: IFFALSE 10190
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10174: LD_ADDR_EXP 24
10178: PUSH
10179: LD_EXP 24
10183: PUSH
10184: LD_VAR 0 1
10188: DIFF
10189: ST_TO_ADDR
// if newId in russianCargo then
10190: LD_VAR 0 1
10194: PUSH
10195: LD_EXP 25
10199: IN
10200: IFFALSE 10218
// russianCargo := russianCargo diff newId ;
10202: LD_ADDR_EXP 25
10206: PUSH
10207: LD_EXP 25
10211: PUSH
10212: LD_VAR 0 1
10216: DIFF
10217: ST_TO_ADDR
// end ;
10218: PPOPN 4
10220: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_VAR 0 2
10230: PPUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: CALL 10790 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10240: LD_VAR 0 2
10244: PUSH
10245: LD_INT 1
10247: PUSH
10248: LD_INT 4
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: IN
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 255
10265: PUSH
10266: LD_INT 3
10268: PUSH
10269: LD_INT 6
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: IN
10276: AND
10277: IFFALSE 10293
// ruLoseCounter := ruLoseCounter + 1 ;
10279: LD_ADDR_EXP 11
10283: PUSH
10284: LD_EXP 11
10288: PUSH
10289: LD_INT 1
10291: PLUS
10292: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10293: LD_VAR 0 2
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: LD_INT 4
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: IN
10308: PUSH
10309: LD_VAR 0 1
10313: PPUSH
10314: CALL_OW 247
10318: PUSH
10319: LD_INT 2
10321: EQUAL
10322: AND
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 3
10336: PUSH
10337: LD_INT 6
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: IN
10344: AND
10345: IFFALSE 10361
// tanksCounter := tanksCounter + 1 ;
10347: LD_ADDR_EXP 12
10351: PUSH
10352: LD_EXP 12
10356: PUSH
10357: LD_INT 1
10359: PLUS
10360: ST_TO_ADDR
// end ;
10361: PPOPN 3
10363: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10364: LD_VAR 0 1
10368: PPUSH
10369: CALL_OW 255
10373: PUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 6
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: IN
10384: IFFALSE 10533
// begin ComRepairVehicle ( driver , veh ) ;
10386: LD_VAR 0 1
10390: PPUSH
10391: LD_VAR 0 2
10395: PPUSH
10396: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10400: LD_INT 35
10402: PPUSH
10403: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10407: LD_VAR 0 2
10411: PPUSH
10412: CALL_OW 301
10416: PUSH
10417: LD_VAR 0 1
10421: PPUSH
10422: CALL_OW 301
10426: OR
10427: PUSH
10428: LD_VAR 0 2
10432: PPUSH
10433: CALL_OW 256
10437: PUSH
10438: LD_INT 250
10440: GREATER
10441: OR
10442: IFFALSE 10400
// if GetLives ( veh ) > 250 then
10444: LD_VAR 0 2
10448: PPUSH
10449: CALL_OW 256
10453: PUSH
10454: LD_INT 250
10456: GREATER
10457: IFFALSE 10533
// begin ComEnterUnit ( driver , veh ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_VAR 0 2
10468: PPUSH
10469: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10473: LD_VAR 0 1
10477: PPUSH
10478: LD_INT 71
10480: PPUSH
10481: LD_INT 29
10483: PPUSH
10484: CALL_OW 171
// SetTag ( veh , 1 ) ;
10488: LD_VAR 0 2
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 109
// if not veh in russianOmicronAttackers then
10500: LD_VAR 0 2
10504: PUSH
10505: LD_EXP 24
10509: IN
10510: NOT
10511: IFFALSE 10533
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10513: LD_ADDR_EXP 24
10517: PUSH
10518: LD_EXP 24
10522: PPUSH
10523: LD_VAR 0 2
10527: PPUSH
10528: CALL 66398 0 2
10532: ST_TO_ADDR
// end ; end ; end ;
10533: PPOPN 4
10535: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10536: LD_VAR 0 1
10540: PPUSH
10541: CALL 10798 0 1
// end ; end_of_file
10545: PPOPN 1
10547: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10548: LD_EXP 9
10552: PUSH
10553: LD_INT 6
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 287
10563: PUSH
10564: LD_INT 18
10566: PUSH
10567: LD_INT 15
10569: PUSH
10570: LD_INT 12
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: PUSH
10578: LD_OWVAR 67
10582: ARRAY
10583: LESS
10584: AND
10585: IFFALSE 10627
10587: GO 10589
10589: DISABLE
// begin enable ;
10590: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10591: LD_INT 350
10593: PPUSH
10594: LD_INT 1050
10596: PPUSH
10597: CALL_OW 12
10601: PPUSH
10602: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10606: LD_INT 2
10608: PPUSH
10609: LD_INT 5
10611: PPUSH
10612: CALL_OW 12
10616: PPUSH
10617: LD_INT 6
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 55
// end ;
10627: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10628: LD_INT 7
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: CALL_OW 287
10638: PUSH
10639: LD_INT 5
10641: LESS
10642: IFFALSE 10669
10644: GO 10646
10646: DISABLE
// begin enable ;
10647: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10648: LD_INT 2
10650: PPUSH
10651: LD_INT 5
10653: PPUSH
10654: CALL_OW 12
10658: PPUSH
10659: LD_INT 7
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 55
// end ; end_of_file
10669: END
// every 0 0$01 do
10670: GO 10672
10672: DISABLE
// begin enable ;
10673: ENABLE
// display_strings := [ #tick , tick ] ;
10674: LD_ADDR_OWVAR 47
10678: PUSH
10679: LD_STRING #tick
10681: PUSH
10682: LD_OWVAR 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: ST_TO_ADDR
// end ; end_of_file
10691: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10692: LD_INT 0
10694: PPUSH
10695: PPUSH
10696: PPUSH
10697: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL_OW 264
10707: PUSH
10708: LD_EXP 99
10712: EQUAL
10713: IFFALSE 10785
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10715: LD_INT 68
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 255
10727: PPUSH
10728: CALL_OW 321
10732: PUSH
10733: LD_INT 2
10735: EQUAL
10736: IFFALSE 10748
// eff := 70 else
10738: LD_ADDR_VAR 0 4
10742: PUSH
10743: LD_INT 70
10745: ST_TO_ADDR
10746: GO 10756
// eff := 30 ;
10748: LD_ADDR_VAR 0 4
10752: PUSH
10753: LD_INT 30
10755: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10756: LD_VAR 0 1
10760: PPUSH
10761: CALL_OW 250
10765: PPUSH
10766: LD_VAR 0 1
10770: PPUSH
10771: CALL_OW 251
10775: PPUSH
10776: LD_VAR 0 4
10780: PPUSH
10781: CALL_OW 495
// end ; end ;
10785: LD_VAR 0 2
10789: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10790: LD_INT 0
10792: PPUSH
// end ;
10793: LD_VAR 0 4
10797: RET
// export function SOS_Command ( cmd ) ; begin
10798: LD_INT 0
10800: PPUSH
// end ;
10801: LD_VAR 0 2
10805: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10806: LD_INT 0
10808: PPUSH
// end ;
10809: LD_VAR 0 6
10813: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10814: LD_INT 0
10816: PPUSH
10817: PPUSH
// if not vehicle or not factory then
10818: LD_VAR 0 1
10822: NOT
10823: PUSH
10824: LD_VAR 0 2
10828: NOT
10829: OR
10830: IFFALSE 10834
// exit ;
10832: GO 11065
// if factoryWaypoints >= factory then
10834: LD_EXP 26
10838: PUSH
10839: LD_VAR 0 2
10843: GREATEREQUAL
10844: IFFALSE 11065
// if factoryWaypoints [ factory ] then
10846: LD_EXP 26
10850: PUSH
10851: LD_VAR 0 2
10855: ARRAY
10856: IFFALSE 11065
// begin if GetControl ( vehicle ) = control_manual then
10858: LD_VAR 0 1
10862: PPUSH
10863: CALL_OW 263
10867: PUSH
10868: LD_INT 1
10870: EQUAL
10871: IFFALSE 10952
// begin driver := IsDrivenBy ( vehicle ) ;
10873: LD_ADDR_VAR 0 4
10877: PUSH
10878: LD_VAR 0 1
10882: PPUSH
10883: CALL_OW 311
10887: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
10888: LD_VAR 0 4
10892: PPUSH
10893: LD_EXP 26
10897: PUSH
10898: LD_VAR 0 2
10902: ARRAY
10903: PUSH
10904: LD_INT 1
10906: ARRAY
10907: PPUSH
10908: LD_EXP 26
10912: PUSH
10913: LD_VAR 0 2
10917: ARRAY
10918: PUSH
10919: LD_INT 2
10921: ARRAY
10922: PPUSH
10923: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10927: LD_VAR 0 4
10931: PPUSH
10932: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10936: LD_VAR 0 4
10940: PPUSH
10941: LD_VAR 0 2
10945: PPUSH
10946: CALL_OW 180
// end else
10950: GO 11065
// if GetControl ( vehicle ) = control_remote then
10952: LD_VAR 0 1
10956: PPUSH
10957: CALL_OW 263
10961: PUSH
10962: LD_INT 2
10964: EQUAL
10965: IFFALSE 11026
// begin wait ( 0 0$2 ) ;
10967: LD_INT 70
10969: PPUSH
10970: CALL_OW 67
// if Connect ( vehicle ) then
10974: LD_VAR 0 1
10978: PPUSH
10979: CALL 37618 0 1
10983: IFFALSE 11024
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_EXP 26
10994: PUSH
10995: LD_VAR 0 2
10999: ARRAY
11000: PUSH
11001: LD_INT 1
11003: ARRAY
11004: PPUSH
11005: LD_EXP 26
11009: PUSH
11010: LD_VAR 0 2
11014: ARRAY
11015: PUSH
11016: LD_INT 2
11018: ARRAY
11019: PPUSH
11020: CALL_OW 171
// end else
11024: GO 11065
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
11026: LD_VAR 0 1
11030: PPUSH
11031: LD_EXP 26
11035: PUSH
11036: LD_VAR 0 2
11040: ARRAY
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PPUSH
11046: LD_EXP 26
11050: PUSH
11051: LD_VAR 0 2
11055: ARRAY
11056: PUSH
11057: LD_INT 2
11059: ARRAY
11060: PPUSH
11061: CALL_OW 171
// end ; end ;
11065: LD_VAR 0 3
11069: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11070: LD_INT 0
11072: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11073: LD_VAR 0 1
11077: PUSH
11078: LD_INT 250
11080: EQUAL
11081: PUSH
11082: LD_VAR 0 2
11086: PPUSH
11087: CALL_OW 264
11091: PUSH
11092: LD_EXP 102
11096: EQUAL
11097: AND
11098: IFFALSE 11119
// MinerPlaceMine ( unit , x , y ) ;
11100: LD_VAR 0 2
11104: PPUSH
11105: LD_VAR 0 4
11109: PPUSH
11110: LD_VAR 0 5
11114: PPUSH
11115: CALL 13847 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11119: LD_VAR 0 1
11123: PUSH
11124: LD_INT 251
11126: EQUAL
11127: PUSH
11128: LD_VAR 0 2
11132: PPUSH
11133: CALL_OW 264
11137: PUSH
11138: LD_EXP 102
11142: EQUAL
11143: AND
11144: IFFALSE 11165
// MinerDetonateMine ( unit , x , y ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: LD_VAR 0 4
11155: PPUSH
11156: LD_VAR 0 5
11160: PPUSH
11161: CALL 14124 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11165: LD_VAR 0 1
11169: PUSH
11170: LD_INT 252
11172: EQUAL
11173: PUSH
11174: LD_VAR 0 2
11178: PPUSH
11179: CALL_OW 264
11183: PUSH
11184: LD_EXP 102
11188: EQUAL
11189: AND
11190: IFFALSE 11211
// MinerCreateMinefield ( unit , x , y ) ;
11192: LD_VAR 0 2
11196: PPUSH
11197: LD_VAR 0 4
11201: PPUSH
11202: LD_VAR 0 5
11206: PPUSH
11207: CALL 14541 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11211: LD_VAR 0 1
11215: PUSH
11216: LD_INT 253
11218: EQUAL
11219: PUSH
11220: LD_VAR 0 2
11224: PPUSH
11225: CALL_OW 257
11229: PUSH
11230: LD_INT 5
11232: EQUAL
11233: AND
11234: IFFALSE 11255
// ComBinocular ( unit , x , y ) ;
11236: LD_VAR 0 2
11240: PPUSH
11241: LD_VAR 0 4
11245: PPUSH
11246: LD_VAR 0 5
11250: PPUSH
11251: CALL 14912 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11255: LD_VAR 0 1
11259: PUSH
11260: LD_INT 254
11262: EQUAL
11263: PUSH
11264: LD_VAR 0 2
11268: PPUSH
11269: CALL_OW 264
11273: PUSH
11274: LD_EXP 97
11278: EQUAL
11279: AND
11280: PUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: CALL_OW 263
11290: PUSH
11291: LD_INT 3
11293: EQUAL
11294: AND
11295: IFFALSE 11311
// HackDestroyVehicle ( unit , selectedUnit ) ;
11297: LD_VAR 0 2
11301: PPUSH
11302: LD_VAR 0 3
11306: PPUSH
11307: CALL 13207 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11311: LD_VAR 0 1
11315: PUSH
11316: LD_INT 255
11318: EQUAL
11319: PUSH
11320: LD_VAR 0 2
11324: PPUSH
11325: CALL_OW 264
11329: PUSH
11330: LD_INT 14
11332: PUSH
11333: LD_INT 53
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: IN
11340: AND
11341: PUSH
11342: LD_VAR 0 4
11346: PPUSH
11347: LD_VAR 0 5
11351: PPUSH
11352: CALL_OW 488
11356: AND
11357: IFFALSE 11381
// CutTreeXYR ( unit , x , y , 12 ) ;
11359: LD_VAR 0 2
11363: PPUSH
11364: LD_VAR 0 4
11368: PPUSH
11369: LD_VAR 0 5
11373: PPUSH
11374: LD_INT 12
11376: PPUSH
11377: CALL 11773 0 4
// if cmd = 256 then
11381: LD_VAR 0 1
11385: PUSH
11386: LD_INT 256
11388: EQUAL
11389: IFFALSE 11410
// SetFactoryWaypoint ( unit , x , y ) ;
11391: LD_VAR 0 2
11395: PPUSH
11396: LD_VAR 0 4
11400: PPUSH
11401: LD_VAR 0 5
11405: PPUSH
11406: CALL 11415 0 3
// end ;
11410: LD_VAR 0 6
11414: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
11415: LD_INT 0
11417: PPUSH
11418: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
11419: LD_VAR 0 1
11423: NOT
11424: PUSH
11425: LD_VAR 0 2
11429: PPUSH
11430: LD_VAR 0 3
11434: PPUSH
11435: CALL_OW 488
11439: NOT
11440: OR
11441: PUSH
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 266
11451: PUSH
11452: LD_INT 3
11454: NONEQUAL
11455: PUSH
11456: LD_VAR 0 1
11460: PPUSH
11461: CALL_OW 247
11465: PUSH
11466: LD_INT 1
11468: EQUAL
11469: NOT
11470: AND
11471: OR
11472: IFFALSE 11476
// exit ;
11474: GO 11625
// if GetType ( factory ) = unit_human then
11476: LD_VAR 0 1
11480: PPUSH
11481: CALL_OW 247
11485: PUSH
11486: LD_INT 1
11488: EQUAL
11489: IFFALSE 11506
// factory := IsInUnit ( factory ) ;
11491: LD_ADDR_VAR 0 1
11495: PUSH
11496: LD_VAR 0 1
11500: PPUSH
11501: CALL_OW 310
11505: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
11506: LD_VAR 0 1
11510: PPUSH
11511: CALL_OW 266
11515: PUSH
11516: LD_INT 3
11518: NONEQUAL
11519: IFFALSE 11523
// exit ;
11521: GO 11625
// if HexInfo ( x , y ) = factory then
11523: LD_VAR 0 2
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: CALL_OW 428
11537: PUSH
11538: LD_VAR 0 1
11542: EQUAL
11543: IFFALSE 11570
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
11545: LD_ADDR_EXP 26
11549: PUSH
11550: LD_EXP 26
11554: PPUSH
11555: LD_VAR 0 1
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 1
11567: ST_TO_ADDR
11568: GO 11621
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
11570: LD_ADDR_EXP 26
11574: PUSH
11575: LD_EXP 26
11579: PPUSH
11580: LD_VAR 0 1
11584: PPUSH
11585: LD_VAR 0 1
11589: PPUSH
11590: CALL_OW 255
11594: PUSH
11595: LD_VAR 0 1
11599: PUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_VAR 0 3
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: PPUSH
11616: CALL_OW 1
11620: ST_TO_ADDR
// UpdateFactoryWaypoints ;
11621: CALL 11630 0 0
// end ;
11625: LD_VAR 0 4
11629: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
11630: LD_INT 0
11632: PPUSH
11633: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
11634: LD_STRING resetFactoryWaypoint();
11636: PPUSH
11637: CALL_OW 559
// if factoryWaypoints then
11641: LD_EXP 26
11645: IFFALSE 11768
// begin for i := 1 to factoryWaypoints do
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: DOUBLE
11653: LD_INT 1
11655: DEC
11656: ST_TO_ADDR
11657: LD_EXP 26
11661: PUSH
11662: FOR_TO
11663: IFFALSE 11766
// if factoryWaypoints [ i ] then
11665: LD_EXP 26
11669: PUSH
11670: LD_VAR 0 2
11674: ARRAY
11675: IFFALSE 11764
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
11677: LD_STRING setFactoryWaypointXY(
11679: PUSH
11680: LD_EXP 26
11684: PUSH
11685: LD_VAR 0 2
11689: ARRAY
11690: PUSH
11691: LD_INT 1
11693: ARRAY
11694: STR
11695: PUSH
11696: LD_STRING ,
11698: STR
11699: PUSH
11700: LD_EXP 26
11704: PUSH
11705: LD_VAR 0 2
11709: ARRAY
11710: PUSH
11711: LD_INT 2
11713: ARRAY
11714: STR
11715: PUSH
11716: LD_STRING ,
11718: STR
11719: PUSH
11720: LD_EXP 26
11724: PUSH
11725: LD_VAR 0 2
11729: ARRAY
11730: PUSH
11731: LD_INT 3
11733: ARRAY
11734: STR
11735: PUSH
11736: LD_STRING ,
11738: STR
11739: PUSH
11740: LD_EXP 26
11744: PUSH
11745: LD_VAR 0 2
11749: ARRAY
11750: PUSH
11751: LD_INT 4
11753: ARRAY
11754: STR
11755: PUSH
11756: LD_STRING )
11758: STR
11759: PPUSH
11760: CALL_OW 559
11764: GO 11662
11766: POP
11767: POP
// end ; end ;
11768: LD_VAR 0 1
11772: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11773: LD_INT 0
11775: PPUSH
11776: PPUSH
11777: PPUSH
11778: PPUSH
11779: PPUSH
11780: PPUSH
11781: PPUSH
11782: PPUSH
11783: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11784: LD_VAR 0 1
11788: NOT
11789: PUSH
11790: LD_VAR 0 2
11794: PPUSH
11795: LD_VAR 0 3
11799: PPUSH
11800: CALL_OW 488
11804: NOT
11805: OR
11806: PUSH
11807: LD_VAR 0 4
11811: NOT
11812: OR
11813: IFFALSE 11817
// exit ;
11815: GO 12157
// list := [ ] ;
11817: LD_ADDR_VAR 0 13
11821: PUSH
11822: EMPTY
11823: ST_TO_ADDR
// if x - r < 0 then
11824: LD_VAR 0 2
11828: PUSH
11829: LD_VAR 0 4
11833: MINUS
11834: PUSH
11835: LD_INT 0
11837: LESS
11838: IFFALSE 11850
// min_x := 0 else
11840: LD_ADDR_VAR 0 7
11844: PUSH
11845: LD_INT 0
11847: ST_TO_ADDR
11848: GO 11866
// min_x := x - r ;
11850: LD_ADDR_VAR 0 7
11854: PUSH
11855: LD_VAR 0 2
11859: PUSH
11860: LD_VAR 0 4
11864: MINUS
11865: ST_TO_ADDR
// if y - r < 0 then
11866: LD_VAR 0 3
11870: PUSH
11871: LD_VAR 0 4
11875: MINUS
11876: PUSH
11877: LD_INT 0
11879: LESS
11880: IFFALSE 11892
// min_y := 0 else
11882: LD_ADDR_VAR 0 8
11886: PUSH
11887: LD_INT 0
11889: ST_TO_ADDR
11890: GO 11908
// min_y := y - r ;
11892: LD_ADDR_VAR 0 8
11896: PUSH
11897: LD_VAR 0 3
11901: PUSH
11902: LD_VAR 0 4
11906: MINUS
11907: ST_TO_ADDR
// max_x := x + r ;
11908: LD_ADDR_VAR 0 9
11912: PUSH
11913: LD_VAR 0 2
11917: PUSH
11918: LD_VAR 0 4
11922: PLUS
11923: ST_TO_ADDR
// max_y := y + r ;
11924: LD_ADDR_VAR 0 10
11928: PUSH
11929: LD_VAR 0 3
11933: PUSH
11934: LD_VAR 0 4
11938: PLUS
11939: ST_TO_ADDR
// for _x = min_x to max_x do
11940: LD_ADDR_VAR 0 11
11944: PUSH
11945: DOUBLE
11946: LD_VAR 0 7
11950: DEC
11951: ST_TO_ADDR
11952: LD_VAR 0 9
11956: PUSH
11957: FOR_TO
11958: IFFALSE 12075
// for _y = min_y to max_y do
11960: LD_ADDR_VAR 0 12
11964: PUSH
11965: DOUBLE
11966: LD_VAR 0 8
11970: DEC
11971: ST_TO_ADDR
11972: LD_VAR 0 10
11976: PUSH
11977: FOR_TO
11978: IFFALSE 12071
// begin if not ValidHex ( _x , _y ) then
11980: LD_VAR 0 11
11984: PPUSH
11985: LD_VAR 0 12
11989: PPUSH
11990: CALL_OW 488
11994: NOT
11995: IFFALSE 11999
// continue ;
11997: GO 11977
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11999: LD_VAR 0 11
12003: PPUSH
12004: LD_VAR 0 12
12008: PPUSH
12009: CALL_OW 351
12013: PUSH
12014: LD_VAR 0 11
12018: PPUSH
12019: LD_VAR 0 12
12023: PPUSH
12024: CALL_OW 554
12028: AND
12029: IFFALSE 12069
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12031: LD_ADDR_VAR 0 13
12035: PUSH
12036: LD_VAR 0 13
12040: PPUSH
12041: LD_VAR 0 13
12045: PUSH
12046: LD_INT 1
12048: PLUS
12049: PPUSH
12050: LD_VAR 0 11
12054: PUSH
12055: LD_VAR 0 12
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PPUSH
12064: CALL_OW 2
12068: ST_TO_ADDR
// end ;
12069: GO 11977
12071: POP
12072: POP
12073: GO 11957
12075: POP
12076: POP
// if not list then
12077: LD_VAR 0 13
12081: NOT
12082: IFFALSE 12086
// exit ;
12084: GO 12157
// for i in list do
12086: LD_ADDR_VAR 0 6
12090: PUSH
12091: LD_VAR 0 13
12095: PUSH
12096: FOR_IN
12097: IFFALSE 12155
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12099: LD_VAR 0 1
12103: PPUSH
12104: LD_STRING M
12106: PUSH
12107: LD_VAR 0 6
12111: PUSH
12112: LD_INT 1
12114: ARRAY
12115: PUSH
12116: LD_VAR 0 6
12120: PUSH
12121: LD_INT 2
12123: ARRAY
12124: PUSH
12125: LD_INT 0
12127: PUSH
12128: LD_INT 0
12130: PUSH
12131: LD_INT 0
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: PPUSH
12149: CALL_OW 447
12153: GO 12096
12155: POP
12156: POP
// end ;
12157: LD_VAR 0 5
12161: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12162: LD_EXP 27
12166: NOT
12167: IFFALSE 12217
12169: GO 12171
12171: DISABLE
// begin initHack := true ;
12172: LD_ADDR_EXP 27
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// hackTanks := [ ] ;
12180: LD_ADDR_EXP 28
12184: PUSH
12185: EMPTY
12186: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12187: LD_ADDR_EXP 29
12191: PUSH
12192: EMPTY
12193: ST_TO_ADDR
// hackLimit := 3 ;
12194: LD_ADDR_EXP 30
12198: PUSH
12199: LD_INT 3
12201: ST_TO_ADDR
// hackDist := 12 ;
12202: LD_ADDR_EXP 31
12206: PUSH
12207: LD_INT 12
12209: ST_TO_ADDR
// hackCounter := [ ] ;
12210: LD_ADDR_EXP 32
12214: PUSH
12215: EMPTY
12216: ST_TO_ADDR
// end ;
12217: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12218: LD_EXP 27
12222: PUSH
12223: LD_INT 34
12225: PUSH
12226: LD_EXP 97
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL_OW 69
12239: AND
12240: IFFALSE 12495
12242: GO 12244
12244: DISABLE
12245: LD_INT 0
12247: PPUSH
12248: PPUSH
// begin enable ;
12249: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12250: LD_ADDR_VAR 0 1
12254: PUSH
12255: LD_INT 34
12257: PUSH
12258: LD_EXP 97
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 69
12271: PUSH
12272: FOR_IN
12273: IFFALSE 12493
// begin if not i in hackTanks then
12275: LD_VAR 0 1
12279: PUSH
12280: LD_EXP 28
12284: IN
12285: NOT
12286: IFFALSE 12369
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12288: LD_ADDR_EXP 28
12292: PUSH
12293: LD_EXP 28
12297: PPUSH
12298: LD_EXP 28
12302: PUSH
12303: LD_INT 1
12305: PLUS
12306: PPUSH
12307: LD_VAR 0 1
12311: PPUSH
12312: CALL_OW 1
12316: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12317: LD_ADDR_EXP 29
12321: PUSH
12322: LD_EXP 29
12326: PPUSH
12327: LD_EXP 29
12331: PUSH
12332: LD_INT 1
12334: PLUS
12335: PPUSH
12336: EMPTY
12337: PPUSH
12338: CALL_OW 1
12342: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12343: LD_ADDR_EXP 32
12347: PUSH
12348: LD_EXP 32
12352: PPUSH
12353: LD_EXP 32
12357: PUSH
12358: LD_INT 1
12360: PLUS
12361: PPUSH
12362: EMPTY
12363: PPUSH
12364: CALL_OW 1
12368: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12369: LD_VAR 0 1
12373: PPUSH
12374: CALL_OW 302
12378: NOT
12379: IFFALSE 12392
// begin HackUnlinkAll ( i ) ;
12381: LD_VAR 0 1
12385: PPUSH
12386: CALL 12498 0 1
// continue ;
12390: GO 12272
// end ; HackCheckCapturedStatus ( i ) ;
12392: LD_VAR 0 1
12396: PPUSH
12397: CALL 12941 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12401: LD_ADDR_VAR 0 2
12405: PUSH
12406: LD_INT 81
12408: PUSH
12409: LD_VAR 0 1
12413: PPUSH
12414: CALL_OW 255
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 33
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 91
12435: PUSH
12436: LD_VAR 0 1
12440: PUSH
12441: LD_EXP 31
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 50
12453: PUSH
12454: EMPTY
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: PPUSH
12463: CALL_OW 69
12467: ST_TO_ADDR
// if not tmp then
12468: LD_VAR 0 2
12472: NOT
12473: IFFALSE 12477
// continue ;
12475: GO 12272
// HackLink ( i , tmp ) ;
12477: LD_VAR 0 1
12481: PPUSH
12482: LD_VAR 0 2
12486: PPUSH
12487: CALL 12634 0 2
// end ;
12491: GO 12272
12493: POP
12494: POP
// end ;
12495: PPOPN 2
12497: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12498: LD_INT 0
12500: PPUSH
12501: PPUSH
12502: PPUSH
// if not hack in hackTanks then
12503: LD_VAR 0 1
12507: PUSH
12508: LD_EXP 28
12512: IN
12513: NOT
12514: IFFALSE 12518
// exit ;
12516: GO 12629
// index := GetElementIndex ( hackTanks , hack ) ;
12518: LD_ADDR_VAR 0 4
12522: PUSH
12523: LD_EXP 28
12527: PPUSH
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL 34432 0 2
12537: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12538: LD_EXP 29
12542: PUSH
12543: LD_VAR 0 4
12547: ARRAY
12548: IFFALSE 12629
// begin for i in hackTanksCaptured [ index ] do
12550: LD_ADDR_VAR 0 3
12554: PUSH
12555: LD_EXP 29
12559: PUSH
12560: LD_VAR 0 4
12564: ARRAY
12565: PUSH
12566: FOR_IN
12567: IFFALSE 12593
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 1
12576: ARRAY
12577: PPUSH
12578: LD_VAR 0 3
12582: PUSH
12583: LD_INT 2
12585: ARRAY
12586: PPUSH
12587: CALL_OW 235
12591: GO 12566
12593: POP
12594: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12595: LD_ADDR_EXP 29
12599: PUSH
12600: LD_EXP 29
12604: PPUSH
12605: LD_VAR 0 4
12609: PPUSH
12610: EMPTY
12611: PPUSH
12612: CALL_OW 1
12616: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12617: LD_VAR 0 1
12621: PPUSH
12622: LD_INT 0
12624: PPUSH
12625: CALL_OW 505
// end ; end ;
12629: LD_VAR 0 2
12633: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12634: LD_INT 0
12636: PPUSH
12637: PPUSH
12638: PPUSH
// if not hack in hackTanks or not vehicles then
12639: LD_VAR 0 1
12643: PUSH
12644: LD_EXP 28
12648: IN
12649: NOT
12650: PUSH
12651: LD_VAR 0 2
12655: NOT
12656: OR
12657: IFFALSE 12661
// exit ;
12659: GO 12936
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_VAR 0 1
12670: PPUSH
12671: LD_VAR 0 2
12675: PPUSH
12676: LD_INT 1
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL 35082 0 4
12686: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12687: LD_ADDR_VAR 0 5
12691: PUSH
12692: LD_EXP 28
12696: PPUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL 34432 0 2
12706: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12707: LD_EXP 29
12711: PUSH
12712: LD_VAR 0 5
12716: ARRAY
12717: PUSH
12718: LD_EXP 30
12722: LESS
12723: IFFALSE 12912
// begin for i := 1 to vehicles do
12725: LD_ADDR_VAR 0 4
12729: PUSH
12730: DOUBLE
12731: LD_INT 1
12733: DEC
12734: ST_TO_ADDR
12735: LD_VAR 0 2
12739: PUSH
12740: FOR_TO
12741: IFFALSE 12910
// begin if hackTanksCaptured [ index ] = hackLimit then
12743: LD_EXP 29
12747: PUSH
12748: LD_VAR 0 5
12752: ARRAY
12753: PUSH
12754: LD_EXP 30
12758: EQUAL
12759: IFFALSE 12763
// break ;
12761: GO 12910
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12763: LD_ADDR_EXP 32
12767: PUSH
12768: LD_EXP 32
12772: PPUSH
12773: LD_VAR 0 5
12777: PPUSH
12778: LD_EXP 32
12782: PUSH
12783: LD_VAR 0 5
12787: ARRAY
12788: PUSH
12789: LD_INT 1
12791: PLUS
12792: PPUSH
12793: CALL_OW 1
12797: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12798: LD_ADDR_EXP 29
12802: PUSH
12803: LD_EXP 29
12807: PPUSH
12808: LD_VAR 0 5
12812: PUSH
12813: LD_EXP 29
12817: PUSH
12818: LD_VAR 0 5
12822: ARRAY
12823: PUSH
12824: LD_INT 1
12826: PLUS
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PPUSH
12832: LD_VAR 0 2
12836: PUSH
12837: LD_VAR 0 4
12841: ARRAY
12842: PUSH
12843: LD_VAR 0 2
12847: PUSH
12848: LD_VAR 0 4
12852: ARRAY
12853: PPUSH
12854: CALL_OW 255
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PPUSH
12863: CALL 34647 0 3
12867: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12868: LD_VAR 0 2
12872: PUSH
12873: LD_VAR 0 4
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 255
12888: PPUSH
12889: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12893: LD_VAR 0 2
12897: PUSH
12898: LD_VAR 0 4
12902: ARRAY
12903: PPUSH
12904: CALL_OW 141
// end ;
12908: GO 12740
12910: POP
12911: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12912: LD_VAR 0 1
12916: PPUSH
12917: LD_EXP 29
12921: PUSH
12922: LD_VAR 0 5
12926: ARRAY
12927: PUSH
12928: LD_INT 0
12930: PLUS
12931: PPUSH
12932: CALL_OW 505
// end ;
12936: LD_VAR 0 3
12940: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12941: LD_INT 0
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
// if not hack in hackTanks then
12947: LD_VAR 0 1
12951: PUSH
12952: LD_EXP 28
12956: IN
12957: NOT
12958: IFFALSE 12962
// exit ;
12960: GO 13202
// index := GetElementIndex ( hackTanks , hack ) ;
12962: LD_ADDR_VAR 0 4
12966: PUSH
12967: LD_EXP 28
12971: PPUSH
12972: LD_VAR 0 1
12976: PPUSH
12977: CALL 34432 0 2
12981: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12982: LD_ADDR_VAR 0 3
12986: PUSH
12987: DOUBLE
12988: LD_EXP 29
12992: PUSH
12993: LD_VAR 0 4
12997: ARRAY
12998: INC
12999: ST_TO_ADDR
13000: LD_INT 1
13002: PUSH
13003: FOR_DOWNTO
13004: IFFALSE 13176
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13006: LD_ADDR_VAR 0 5
13010: PUSH
13011: LD_EXP 29
13015: PUSH
13016: LD_VAR 0 4
13020: ARRAY
13021: PUSH
13022: LD_VAR 0 3
13026: ARRAY
13027: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13028: LD_VAR 0 5
13032: PUSH
13033: LD_INT 1
13035: ARRAY
13036: PPUSH
13037: CALL_OW 302
13041: NOT
13042: PUSH
13043: LD_VAR 0 5
13047: PUSH
13048: LD_INT 1
13050: ARRAY
13051: PPUSH
13052: CALL_OW 255
13056: PUSH
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 255
13066: NONEQUAL
13067: OR
13068: IFFALSE 13174
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13070: LD_VAR 0 5
13074: PUSH
13075: LD_INT 1
13077: ARRAY
13078: PPUSH
13079: CALL_OW 305
13083: PUSH
13084: LD_VAR 0 5
13088: PUSH
13089: LD_INT 1
13091: ARRAY
13092: PPUSH
13093: CALL_OW 255
13097: PUSH
13098: LD_VAR 0 1
13102: PPUSH
13103: CALL_OW 255
13107: EQUAL
13108: AND
13109: IFFALSE 13133
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13111: LD_VAR 0 5
13115: PUSH
13116: LD_INT 1
13118: ARRAY
13119: PPUSH
13120: LD_VAR 0 5
13124: PUSH
13125: LD_INT 2
13127: ARRAY
13128: PPUSH
13129: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13133: LD_ADDR_EXP 29
13137: PUSH
13138: LD_EXP 29
13142: PPUSH
13143: LD_VAR 0 4
13147: PPUSH
13148: LD_EXP 29
13152: PUSH
13153: LD_VAR 0 4
13157: ARRAY
13158: PPUSH
13159: LD_VAR 0 3
13163: PPUSH
13164: CALL_OW 3
13168: PPUSH
13169: CALL_OW 1
13173: ST_TO_ADDR
// end ; end ;
13174: GO 13003
13176: POP
13177: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13178: LD_VAR 0 1
13182: PPUSH
13183: LD_EXP 29
13187: PUSH
13188: LD_VAR 0 4
13192: ARRAY
13193: PUSH
13194: LD_INT 0
13196: PLUS
13197: PPUSH
13198: CALL_OW 505
// end ;
13202: LD_VAR 0 2
13206: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13207: LD_INT 0
13209: PPUSH
13210: PPUSH
13211: PPUSH
13212: PPUSH
// if not hack in hackTanks then
13213: LD_VAR 0 1
13217: PUSH
13218: LD_EXP 28
13222: IN
13223: NOT
13224: IFFALSE 13228
// exit ;
13226: GO 13313
// index := GetElementIndex ( hackTanks , hack ) ;
13228: LD_ADDR_VAR 0 5
13232: PUSH
13233: LD_EXP 28
13237: PPUSH
13238: LD_VAR 0 1
13242: PPUSH
13243: CALL 34432 0 2
13247: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13248: LD_ADDR_VAR 0 4
13252: PUSH
13253: DOUBLE
13254: LD_INT 1
13256: DEC
13257: ST_TO_ADDR
13258: LD_EXP 29
13262: PUSH
13263: LD_VAR 0 5
13267: ARRAY
13268: PUSH
13269: FOR_TO
13270: IFFALSE 13311
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13272: LD_EXP 29
13276: PUSH
13277: LD_VAR 0 5
13281: ARRAY
13282: PUSH
13283: LD_VAR 0 4
13287: ARRAY
13288: PUSH
13289: LD_INT 1
13291: ARRAY
13292: PUSH
13293: LD_VAR 0 2
13297: EQUAL
13298: IFFALSE 13309
// KillUnit ( vehicle ) ;
13300: LD_VAR 0 2
13304: PPUSH
13305: CALL_OW 66
13309: GO 13269
13311: POP
13312: POP
// end ;
13313: LD_VAR 0 3
13317: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13318: LD_EXP 33
13322: NOT
13323: IFFALSE 13358
13325: GO 13327
13327: DISABLE
// begin initMiner := true ;
13328: LD_ADDR_EXP 33
13332: PUSH
13333: LD_INT 1
13335: ST_TO_ADDR
// minersList := [ ] ;
13336: LD_ADDR_EXP 34
13340: PUSH
13341: EMPTY
13342: ST_TO_ADDR
// minerMinesList := [ ] ;
13343: LD_ADDR_EXP 35
13347: PUSH
13348: EMPTY
13349: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13350: LD_ADDR_EXP 36
13354: PUSH
13355: LD_INT 5
13357: ST_TO_ADDR
// end ;
13358: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13359: LD_EXP 33
13363: PUSH
13364: LD_INT 34
13366: PUSH
13367: LD_EXP 102
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: AND
13381: IFFALSE 13844
13383: GO 13385
13385: DISABLE
13386: LD_INT 0
13388: PPUSH
13389: PPUSH
13390: PPUSH
13391: PPUSH
// begin enable ;
13392: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13393: LD_ADDR_VAR 0 1
13397: PUSH
13398: LD_INT 34
13400: PUSH
13401: LD_EXP 102
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 69
13414: PUSH
13415: FOR_IN
13416: IFFALSE 13488
// begin if not i in minersList then
13418: LD_VAR 0 1
13422: PUSH
13423: LD_EXP 34
13427: IN
13428: NOT
13429: IFFALSE 13486
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13431: LD_ADDR_EXP 34
13435: PUSH
13436: LD_EXP 34
13440: PPUSH
13441: LD_EXP 34
13445: PUSH
13446: LD_INT 1
13448: PLUS
13449: PPUSH
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 1
13459: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13460: LD_ADDR_EXP 35
13464: PUSH
13465: LD_EXP 35
13469: PPUSH
13470: LD_EXP 35
13474: PUSH
13475: LD_INT 1
13477: PLUS
13478: PPUSH
13479: EMPTY
13480: PPUSH
13481: CALL_OW 1
13485: ST_TO_ADDR
// end end ;
13486: GO 13415
13488: POP
13489: POP
// for i := minerMinesList downto 1 do
13490: LD_ADDR_VAR 0 1
13494: PUSH
13495: DOUBLE
13496: LD_EXP 35
13500: INC
13501: ST_TO_ADDR
13502: LD_INT 1
13504: PUSH
13505: FOR_DOWNTO
13506: IFFALSE 13842
// begin if IsLive ( minersList [ i ] ) then
13508: LD_EXP 34
13512: PUSH
13513: LD_VAR 0 1
13517: ARRAY
13518: PPUSH
13519: CALL_OW 300
13523: IFFALSE 13551
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13525: LD_EXP 34
13529: PUSH
13530: LD_VAR 0 1
13534: ARRAY
13535: PPUSH
13536: LD_EXP 35
13540: PUSH
13541: LD_VAR 0 1
13545: ARRAY
13546: PPUSH
13547: CALL_OW 505
// if not minerMinesList [ i ] then
13551: LD_EXP 35
13555: PUSH
13556: LD_VAR 0 1
13560: ARRAY
13561: NOT
13562: IFFALSE 13566
// continue ;
13564: GO 13505
// for j := minerMinesList [ i ] downto 1 do
13566: LD_ADDR_VAR 0 2
13570: PUSH
13571: DOUBLE
13572: LD_EXP 35
13576: PUSH
13577: LD_VAR 0 1
13581: ARRAY
13582: INC
13583: ST_TO_ADDR
13584: LD_INT 1
13586: PUSH
13587: FOR_DOWNTO
13588: IFFALSE 13838
// begin side := GetSide ( minersList [ i ] ) ;
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_EXP 34
13599: PUSH
13600: LD_VAR 0 1
13604: ARRAY
13605: PPUSH
13606: CALL_OW 255
13610: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13611: LD_ADDR_VAR 0 4
13615: PUSH
13616: LD_EXP 35
13620: PUSH
13621: LD_VAR 0 1
13625: ARRAY
13626: PUSH
13627: LD_VAR 0 2
13631: ARRAY
13632: PUSH
13633: LD_INT 1
13635: ARRAY
13636: PPUSH
13637: LD_EXP 35
13641: PUSH
13642: LD_VAR 0 1
13646: ARRAY
13647: PUSH
13648: LD_VAR 0 2
13652: ARRAY
13653: PUSH
13654: LD_INT 2
13656: ARRAY
13657: PPUSH
13658: CALL_OW 428
13662: ST_TO_ADDR
// if not tmp then
13663: LD_VAR 0 4
13667: NOT
13668: IFFALSE 13672
// continue ;
13670: GO 13587
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13672: LD_VAR 0 4
13676: PUSH
13677: LD_INT 81
13679: PUSH
13680: LD_VAR 0 3
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: IN
13694: PUSH
13695: LD_EXP 35
13699: PUSH
13700: LD_VAR 0 1
13704: ARRAY
13705: PUSH
13706: LD_VAR 0 2
13710: ARRAY
13711: PUSH
13712: LD_INT 1
13714: ARRAY
13715: PPUSH
13716: LD_EXP 35
13720: PUSH
13721: LD_VAR 0 1
13725: ARRAY
13726: PUSH
13727: LD_VAR 0 2
13731: ARRAY
13732: PUSH
13733: LD_INT 2
13735: ARRAY
13736: PPUSH
13737: CALL_OW 458
13741: AND
13742: IFFALSE 13836
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13744: LD_EXP 35
13748: PUSH
13749: LD_VAR 0 1
13753: ARRAY
13754: PUSH
13755: LD_VAR 0 2
13759: ARRAY
13760: PUSH
13761: LD_INT 1
13763: ARRAY
13764: PPUSH
13765: LD_EXP 35
13769: PUSH
13770: LD_VAR 0 1
13774: ARRAY
13775: PUSH
13776: LD_VAR 0 2
13780: ARRAY
13781: PUSH
13782: LD_INT 2
13784: ARRAY
13785: PPUSH
13786: LD_VAR 0 3
13790: PPUSH
13791: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13795: LD_ADDR_EXP 35
13799: PUSH
13800: LD_EXP 35
13804: PPUSH
13805: LD_VAR 0 1
13809: PPUSH
13810: LD_EXP 35
13814: PUSH
13815: LD_VAR 0 1
13819: ARRAY
13820: PPUSH
13821: LD_VAR 0 2
13825: PPUSH
13826: CALL_OW 3
13830: PPUSH
13831: CALL_OW 1
13835: ST_TO_ADDR
// end ; end ;
13836: GO 13587
13838: POP
13839: POP
// end ;
13840: GO 13505
13842: POP
13843: POP
// end ;
13844: PPOPN 4
13846: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13847: LD_INT 0
13849: PPUSH
13850: PPUSH
// result := false ;
13851: LD_ADDR_VAR 0 4
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13859: LD_VAR 0 1
13863: PPUSH
13864: CALL_OW 264
13868: PUSH
13869: LD_EXP 102
13873: EQUAL
13874: NOT
13875: IFFALSE 13879
// exit ;
13877: GO 14119
// index := GetElementIndex ( minersList , unit ) ;
13879: LD_ADDR_VAR 0 5
13883: PUSH
13884: LD_EXP 34
13888: PPUSH
13889: LD_VAR 0 1
13893: PPUSH
13894: CALL 34432 0 2
13898: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13899: LD_EXP 35
13903: PUSH
13904: LD_VAR 0 5
13908: ARRAY
13909: PUSH
13910: LD_EXP 36
13914: GREATEREQUAL
13915: IFFALSE 13919
// exit ;
13917: GO 14119
// ComMoveXY ( unit , x , y ) ;
13919: LD_VAR 0 1
13923: PPUSH
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_VAR 0 3
13933: PPUSH
13934: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13938: LD_INT 35
13940: PPUSH
13941: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13945: LD_VAR 0 1
13949: PPUSH
13950: LD_VAR 0 2
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: CALL 65204 0 3
13964: NOT
13965: PUSH
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 314
13975: AND
13976: IFFALSE 13980
// exit ;
13978: GO 14119
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: CALL_OW 428
13994: PUSH
13995: LD_VAR 0 1
13999: EQUAL
14000: PUSH
14001: LD_VAR 0 1
14005: PPUSH
14006: CALL_OW 314
14010: NOT
14011: AND
14012: IFFALSE 13938
// PlaySoundXY ( x , y , PlantMine ) ;
14014: LD_VAR 0 2
14018: PPUSH
14019: LD_VAR 0 3
14023: PPUSH
14024: LD_STRING PlantMine
14026: PPUSH
14027: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14031: LD_VAR 0 2
14035: PPUSH
14036: LD_VAR 0 3
14040: PPUSH
14041: LD_VAR 0 1
14045: PPUSH
14046: CALL_OW 255
14050: PPUSH
14051: LD_INT 0
14053: PPUSH
14054: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14058: LD_ADDR_EXP 35
14062: PUSH
14063: LD_EXP 35
14067: PPUSH
14068: LD_VAR 0 5
14072: PUSH
14073: LD_EXP 35
14077: PUSH
14078: LD_VAR 0 5
14082: ARRAY
14083: PUSH
14084: LD_INT 1
14086: PLUS
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PPUSH
14092: LD_VAR 0 2
14096: PUSH
14097: LD_VAR 0 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PPUSH
14106: CALL 34647 0 3
14110: ST_TO_ADDR
// result := true ;
14111: LD_ADDR_VAR 0 4
14115: PUSH
14116: LD_INT 1
14118: ST_TO_ADDR
// end ;
14119: LD_VAR 0 4
14123: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
14128: PPUSH
// if not unit in minersList then
14129: LD_VAR 0 1
14133: PUSH
14134: LD_EXP 34
14138: IN
14139: NOT
14140: IFFALSE 14144
// exit ;
14142: GO 14536
// index := GetElementIndex ( minersList , unit ) ;
14144: LD_ADDR_VAR 0 6
14148: PUSH
14149: LD_EXP 34
14153: PPUSH
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL 34432 0 2
14163: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14164: LD_ADDR_VAR 0 5
14168: PUSH
14169: DOUBLE
14170: LD_EXP 35
14174: PUSH
14175: LD_VAR 0 6
14179: ARRAY
14180: INC
14181: ST_TO_ADDR
14182: LD_INT 1
14184: PUSH
14185: FOR_DOWNTO
14186: IFFALSE 14347
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14188: LD_EXP 35
14192: PUSH
14193: LD_VAR 0 6
14197: ARRAY
14198: PUSH
14199: LD_VAR 0 5
14203: ARRAY
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: PUSH
14209: LD_VAR 0 2
14213: EQUAL
14214: PUSH
14215: LD_EXP 35
14219: PUSH
14220: LD_VAR 0 6
14224: ARRAY
14225: PUSH
14226: LD_VAR 0 5
14230: ARRAY
14231: PUSH
14232: LD_INT 2
14234: ARRAY
14235: PUSH
14236: LD_VAR 0 3
14240: EQUAL
14241: AND
14242: IFFALSE 14345
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14244: LD_EXP 35
14248: PUSH
14249: LD_VAR 0 6
14253: ARRAY
14254: PUSH
14255: LD_VAR 0 5
14259: ARRAY
14260: PUSH
14261: LD_INT 1
14263: ARRAY
14264: PPUSH
14265: LD_EXP 35
14269: PUSH
14270: LD_VAR 0 6
14274: ARRAY
14275: PUSH
14276: LD_VAR 0 5
14280: ARRAY
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: PPUSH
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 255
14295: PPUSH
14296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14300: LD_ADDR_EXP 35
14304: PUSH
14305: LD_EXP 35
14309: PPUSH
14310: LD_VAR 0 6
14314: PPUSH
14315: LD_EXP 35
14319: PUSH
14320: LD_VAR 0 6
14324: ARRAY
14325: PPUSH
14326: LD_VAR 0 5
14330: PPUSH
14331: CALL_OW 3
14335: PPUSH
14336: CALL_OW 1
14340: ST_TO_ADDR
// exit ;
14341: POP
14342: POP
14343: GO 14536
// end ; end ;
14345: GO 14185
14347: POP
14348: POP
// for i := minerMinesList [ index ] downto 1 do
14349: LD_ADDR_VAR 0 5
14353: PUSH
14354: DOUBLE
14355: LD_EXP 35
14359: PUSH
14360: LD_VAR 0 6
14364: ARRAY
14365: INC
14366: ST_TO_ADDR
14367: LD_INT 1
14369: PUSH
14370: FOR_DOWNTO
14371: IFFALSE 14534
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14373: LD_EXP 35
14377: PUSH
14378: LD_VAR 0 6
14382: ARRAY
14383: PUSH
14384: LD_VAR 0 5
14388: ARRAY
14389: PUSH
14390: LD_INT 1
14392: ARRAY
14393: PPUSH
14394: LD_EXP 35
14398: PUSH
14399: LD_VAR 0 6
14403: ARRAY
14404: PUSH
14405: LD_VAR 0 5
14409: ARRAY
14410: PUSH
14411: LD_INT 2
14413: ARRAY
14414: PPUSH
14415: LD_VAR 0 2
14419: PPUSH
14420: LD_VAR 0 3
14424: PPUSH
14425: CALL_OW 298
14429: PUSH
14430: LD_INT 6
14432: LESS
14433: IFFALSE 14532
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14435: LD_EXP 35
14439: PUSH
14440: LD_VAR 0 6
14444: ARRAY
14445: PUSH
14446: LD_VAR 0 5
14450: ARRAY
14451: PUSH
14452: LD_INT 1
14454: ARRAY
14455: PPUSH
14456: LD_EXP 35
14460: PUSH
14461: LD_VAR 0 6
14465: ARRAY
14466: PUSH
14467: LD_VAR 0 5
14471: ARRAY
14472: PUSH
14473: LD_INT 2
14475: ARRAY
14476: PPUSH
14477: LD_VAR 0 1
14481: PPUSH
14482: CALL_OW 255
14486: PPUSH
14487: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14491: LD_ADDR_EXP 35
14495: PUSH
14496: LD_EXP 35
14500: PPUSH
14501: LD_VAR 0 6
14505: PPUSH
14506: LD_EXP 35
14510: PUSH
14511: LD_VAR 0 6
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 5
14521: PPUSH
14522: CALL_OW 3
14526: PPUSH
14527: CALL_OW 1
14531: ST_TO_ADDR
// end ; end ;
14532: GO 14370
14534: POP
14535: POP
// end ;
14536: LD_VAR 0 4
14540: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14541: LD_INT 0
14543: PPUSH
14544: PPUSH
14545: PPUSH
14546: PPUSH
14547: PPUSH
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14552: LD_VAR 0 1
14556: PPUSH
14557: CALL_OW 264
14561: PUSH
14562: LD_EXP 102
14566: EQUAL
14567: NOT
14568: PUSH
14569: LD_VAR 0 1
14573: PUSH
14574: LD_EXP 34
14578: IN
14579: NOT
14580: OR
14581: IFFALSE 14585
// exit ;
14583: GO 14907
// index := GetElementIndex ( minersList , unit ) ;
14585: LD_ADDR_VAR 0 6
14589: PUSH
14590: LD_EXP 34
14594: PPUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL 34432 0 2
14604: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14605: LD_ADDR_VAR 0 8
14609: PUSH
14610: LD_EXP 36
14614: PUSH
14615: LD_EXP 35
14619: PUSH
14620: LD_VAR 0 6
14624: ARRAY
14625: MINUS
14626: ST_TO_ADDR
// if not minesFreeAmount then
14627: LD_VAR 0 8
14631: NOT
14632: IFFALSE 14636
// exit ;
14634: GO 14907
// tmp := [ ] ;
14636: LD_ADDR_VAR 0 7
14640: PUSH
14641: EMPTY
14642: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14643: LD_ADDR_VAR 0 5
14647: PUSH
14648: DOUBLE
14649: LD_INT 1
14651: DEC
14652: ST_TO_ADDR
14653: LD_VAR 0 8
14657: PUSH
14658: FOR_TO
14659: IFFALSE 14854
// begin _d := rand ( 0 , 5 ) ;
14661: LD_ADDR_VAR 0 11
14665: PUSH
14666: LD_INT 0
14668: PPUSH
14669: LD_INT 5
14671: PPUSH
14672: CALL_OW 12
14676: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14677: LD_ADDR_VAR 0 12
14681: PUSH
14682: LD_INT 2
14684: PPUSH
14685: LD_INT 6
14687: PPUSH
14688: CALL_OW 12
14692: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14693: LD_ADDR_VAR 0 9
14697: PUSH
14698: LD_VAR 0 2
14702: PPUSH
14703: LD_VAR 0 11
14707: PPUSH
14708: LD_VAR 0 12
14712: PPUSH
14713: CALL_OW 272
14717: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14718: LD_ADDR_VAR 0 10
14722: PUSH
14723: LD_VAR 0 3
14727: PPUSH
14728: LD_VAR 0 11
14732: PPUSH
14733: LD_VAR 0 12
14737: PPUSH
14738: CALL_OW 273
14742: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14743: LD_VAR 0 9
14747: PPUSH
14748: LD_VAR 0 10
14752: PPUSH
14753: CALL_OW 488
14757: PUSH
14758: LD_VAR 0 9
14762: PUSH
14763: LD_VAR 0 10
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_VAR 0 7
14776: IN
14777: NOT
14778: AND
14779: PUSH
14780: LD_VAR 0 9
14784: PPUSH
14785: LD_VAR 0 10
14789: PPUSH
14790: CALL_OW 458
14794: NOT
14795: AND
14796: IFFALSE 14838
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14798: LD_ADDR_VAR 0 7
14802: PUSH
14803: LD_VAR 0 7
14807: PPUSH
14808: LD_VAR 0 7
14812: PUSH
14813: LD_INT 1
14815: PLUS
14816: PPUSH
14817: LD_VAR 0 9
14821: PUSH
14822: LD_VAR 0 10
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 1
14835: ST_TO_ADDR
14836: GO 14852
// i := i - 1 ;
14838: LD_ADDR_VAR 0 5
14842: PUSH
14843: LD_VAR 0 5
14847: PUSH
14848: LD_INT 1
14850: MINUS
14851: ST_TO_ADDR
// end ;
14852: GO 14658
14854: POP
14855: POP
// for i in tmp do
14856: LD_ADDR_VAR 0 5
14860: PUSH
14861: LD_VAR 0 7
14865: PUSH
14866: FOR_IN
14867: IFFALSE 14905
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14869: LD_VAR 0 1
14873: PPUSH
14874: LD_VAR 0 5
14878: PUSH
14879: LD_INT 1
14881: ARRAY
14882: PPUSH
14883: LD_VAR 0 5
14887: PUSH
14888: LD_INT 2
14890: ARRAY
14891: PPUSH
14892: CALL 13847 0 3
14896: NOT
14897: IFFALSE 14903
// exit ;
14899: POP
14900: POP
14901: GO 14907
14903: GO 14866
14905: POP
14906: POP
// end ;
14907: LD_VAR 0 4
14911: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14912: LD_INT 0
14914: PPUSH
14915: PPUSH
14916: PPUSH
14917: PPUSH
14918: PPUSH
14919: PPUSH
14920: PPUSH
// if not GetClass ( unit ) = class_sniper then
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL_OW 257
14930: PUSH
14931: LD_INT 5
14933: EQUAL
14934: NOT
14935: IFFALSE 14939
// exit ;
14937: GO 15327
// dist := 8 ;
14939: LD_ADDR_VAR 0 5
14943: PUSH
14944: LD_INT 8
14946: ST_TO_ADDR
// viewRange := 12 ;
14947: LD_ADDR_VAR 0 7
14951: PUSH
14952: LD_INT 12
14954: ST_TO_ADDR
// side := GetSide ( unit ) ;
14955: LD_ADDR_VAR 0 6
14959: PUSH
14960: LD_VAR 0 1
14964: PPUSH
14965: CALL_OW 255
14969: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14970: LD_INT 61
14972: PPUSH
14973: LD_VAR 0 6
14977: PPUSH
14978: CALL_OW 321
14982: PUSH
14983: LD_INT 2
14985: EQUAL
14986: IFFALSE 14996
// viewRange := 16 ;
14988: LD_ADDR_VAR 0 7
14992: PUSH
14993: LD_INT 16
14995: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14996: LD_VAR 0 1
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: LD_VAR 0 3
15010: PPUSH
15011: CALL_OW 297
15015: PUSH
15016: LD_VAR 0 5
15020: GREATER
15021: IFFALSE 15100
// begin ComMoveXY ( unit , x , y ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: LD_VAR 0 2
15032: PPUSH
15033: LD_VAR 0 3
15037: PPUSH
15038: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15042: LD_INT 35
15044: PPUSH
15045: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15049: LD_VAR 0 1
15053: PPUSH
15054: LD_VAR 0 2
15058: PPUSH
15059: LD_VAR 0 3
15063: PPUSH
15064: CALL 65204 0 3
15068: NOT
15069: IFFALSE 15073
// exit ;
15071: GO 15327
// until GetDistUnitXY ( unit , x , y ) < dist ;
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_VAR 0 2
15082: PPUSH
15083: LD_VAR 0 3
15087: PPUSH
15088: CALL_OW 297
15092: PUSH
15093: LD_VAR 0 5
15097: LESS
15098: IFFALSE 15042
// end ; ComTurnXY ( unit , x , y ) ;
15100: LD_VAR 0 1
15104: PPUSH
15105: LD_VAR 0 2
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: CALL_OW 118
// wait ( 5 ) ;
15119: LD_INT 5
15121: PPUSH
15122: CALL_OW 67
// _d := GetDir ( unit ) ;
15126: LD_ADDR_VAR 0 10
15130: PUSH
15131: LD_VAR 0 1
15135: PPUSH
15136: CALL_OW 254
15140: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
15141: LD_ADDR_VAR 0 8
15145: PUSH
15146: LD_VAR 0 1
15150: PPUSH
15151: CALL_OW 250
15155: PPUSH
15156: LD_VAR 0 10
15160: PPUSH
15161: LD_VAR 0 5
15165: PPUSH
15166: CALL_OW 272
15170: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
15171: LD_ADDR_VAR 0 9
15175: PUSH
15176: LD_VAR 0 1
15180: PPUSH
15181: CALL_OW 251
15185: PPUSH
15186: LD_VAR 0 10
15190: PPUSH
15191: LD_VAR 0 5
15195: PPUSH
15196: CALL_OW 273
15200: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15201: LD_VAR 0 8
15205: PPUSH
15206: LD_VAR 0 9
15210: PPUSH
15211: CALL_OW 488
15215: NOT
15216: IFFALSE 15220
// exit ;
15218: GO 15327
// ComAnimCustom ( unit , 1 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15232: LD_VAR 0 8
15236: PPUSH
15237: LD_VAR 0 9
15241: PPUSH
15242: LD_VAR 0 6
15246: PPUSH
15247: LD_VAR 0 7
15251: PPUSH
15252: CALL_OW 330
// repeat wait ( 1 ) ;
15256: LD_INT 1
15258: PPUSH
15259: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
15263: LD_VAR 0 1
15267: PPUSH
15268: CALL_OW 316
15272: PUSH
15273: LD_VAR 0 1
15277: PPUSH
15278: CALL_OW 314
15282: OR
15283: PUSH
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 302
15293: NOT
15294: OR
15295: PUSH
15296: LD_VAR 0 1
15300: PPUSH
15301: CALL_OW 301
15305: OR
15306: IFFALSE 15256
// RemoveSeeing ( _x , _y , side ) ;
15308: LD_VAR 0 8
15312: PPUSH
15313: LD_VAR 0 9
15317: PPUSH
15318: LD_VAR 0 6
15322: PPUSH
15323: CALL_OW 331
// end ; end_of_file
15327: LD_VAR 0 4
15331: RET
// every 0 0$1 do
15332: GO 15334
15334: DISABLE
// begin enable ;
15335: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15336: LD_STRING updateTimer(
15338: PUSH
15339: LD_OWVAR 1
15343: STR
15344: PUSH
15345: LD_STRING );
15347: STR
15348: PPUSH
15349: CALL_OW 559
// end ;
15353: END
// on MapStart ( p ) do begin if streamModeActive then
15354: LD_EXP 37
15358: IFFALSE 15367
// DefineStreamItems ( true ) ;
15360: LD_INT 1
15362: PPUSH
15363: CALL 17015 0 1
// UpdateFactoryWaypoints ( ) ;
15367: CALL 11630 0 0
// end ;
15371: PPOPN 1
15373: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15374: LD_INT 0
15376: PPUSH
// if p2 = 100 then
15377: LD_VAR 0 2
15381: PUSH
15382: LD_INT 100
15384: EQUAL
15385: IFFALSE 16388
// begin if not StreamModeActive then
15387: LD_EXP 37
15391: NOT
15392: IFFALSE 15402
// StreamModeActive := true ;
15394: LD_ADDR_EXP 37
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// if p3 = 0 then
15402: LD_VAR 0 3
15406: PUSH
15407: LD_INT 0
15409: EQUAL
15410: IFFALSE 15416
// InitStreamMode ;
15412: CALL 16551 0 0
// if p3 = 1 then
15416: LD_VAR 0 3
15420: PUSH
15421: LD_INT 1
15423: EQUAL
15424: IFFALSE 15434
// sRocket := true ;
15426: LD_ADDR_EXP 42
15430: PUSH
15431: LD_INT 1
15433: ST_TO_ADDR
// if p3 = 2 then
15434: LD_VAR 0 3
15438: PUSH
15439: LD_INT 2
15441: EQUAL
15442: IFFALSE 15452
// sSpeed := true ;
15444: LD_ADDR_EXP 41
15448: PUSH
15449: LD_INT 1
15451: ST_TO_ADDR
// if p3 = 3 then
15452: LD_VAR 0 3
15456: PUSH
15457: LD_INT 3
15459: EQUAL
15460: IFFALSE 15470
// sEngine := true ;
15462: LD_ADDR_EXP 43
15466: PUSH
15467: LD_INT 1
15469: ST_TO_ADDR
// if p3 = 4 then
15470: LD_VAR 0 3
15474: PUSH
15475: LD_INT 4
15477: EQUAL
15478: IFFALSE 15488
// sSpec := true ;
15480: LD_ADDR_EXP 40
15484: PUSH
15485: LD_INT 1
15487: ST_TO_ADDR
// if p3 = 5 then
15488: LD_VAR 0 3
15492: PUSH
15493: LD_INT 5
15495: EQUAL
15496: IFFALSE 15506
// sLevel := true ;
15498: LD_ADDR_EXP 44
15502: PUSH
15503: LD_INT 1
15505: ST_TO_ADDR
// if p3 = 6 then
15506: LD_VAR 0 3
15510: PUSH
15511: LD_INT 6
15513: EQUAL
15514: IFFALSE 15524
// sArmoury := true ;
15516: LD_ADDR_EXP 45
15520: PUSH
15521: LD_INT 1
15523: ST_TO_ADDR
// if p3 = 7 then
15524: LD_VAR 0 3
15528: PUSH
15529: LD_INT 7
15531: EQUAL
15532: IFFALSE 15542
// sRadar := true ;
15534: LD_ADDR_EXP 46
15538: PUSH
15539: LD_INT 1
15541: ST_TO_ADDR
// if p3 = 8 then
15542: LD_VAR 0 3
15546: PUSH
15547: LD_INT 8
15549: EQUAL
15550: IFFALSE 15560
// sBunker := true ;
15552: LD_ADDR_EXP 47
15556: PUSH
15557: LD_INT 1
15559: ST_TO_ADDR
// if p3 = 9 then
15560: LD_VAR 0 3
15564: PUSH
15565: LD_INT 9
15567: EQUAL
15568: IFFALSE 15578
// sHack := true ;
15570: LD_ADDR_EXP 48
15574: PUSH
15575: LD_INT 1
15577: ST_TO_ADDR
// if p3 = 10 then
15578: LD_VAR 0 3
15582: PUSH
15583: LD_INT 10
15585: EQUAL
15586: IFFALSE 15596
// sFire := true ;
15588: LD_ADDR_EXP 49
15592: PUSH
15593: LD_INT 1
15595: ST_TO_ADDR
// if p3 = 11 then
15596: LD_VAR 0 3
15600: PUSH
15601: LD_INT 11
15603: EQUAL
15604: IFFALSE 15614
// sRefresh := true ;
15606: LD_ADDR_EXP 50
15610: PUSH
15611: LD_INT 1
15613: ST_TO_ADDR
// if p3 = 12 then
15614: LD_VAR 0 3
15618: PUSH
15619: LD_INT 12
15621: EQUAL
15622: IFFALSE 15632
// sExp := true ;
15624: LD_ADDR_EXP 51
15628: PUSH
15629: LD_INT 1
15631: ST_TO_ADDR
// if p3 = 13 then
15632: LD_VAR 0 3
15636: PUSH
15637: LD_INT 13
15639: EQUAL
15640: IFFALSE 15650
// sDepot := true ;
15642: LD_ADDR_EXP 52
15646: PUSH
15647: LD_INT 1
15649: ST_TO_ADDR
// if p3 = 14 then
15650: LD_VAR 0 3
15654: PUSH
15655: LD_INT 14
15657: EQUAL
15658: IFFALSE 15668
// sFlag := true ;
15660: LD_ADDR_EXP 53
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// if p3 = 15 then
15668: LD_VAR 0 3
15672: PUSH
15673: LD_INT 15
15675: EQUAL
15676: IFFALSE 15686
// sKamikadze := true ;
15678: LD_ADDR_EXP 61
15682: PUSH
15683: LD_INT 1
15685: ST_TO_ADDR
// if p3 = 16 then
15686: LD_VAR 0 3
15690: PUSH
15691: LD_INT 16
15693: EQUAL
15694: IFFALSE 15704
// sTroll := true ;
15696: LD_ADDR_EXP 62
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// if p3 = 17 then
15704: LD_VAR 0 3
15708: PUSH
15709: LD_INT 17
15711: EQUAL
15712: IFFALSE 15722
// sSlow := true ;
15714: LD_ADDR_EXP 63
15718: PUSH
15719: LD_INT 1
15721: ST_TO_ADDR
// if p3 = 18 then
15722: LD_VAR 0 3
15726: PUSH
15727: LD_INT 18
15729: EQUAL
15730: IFFALSE 15740
// sLack := true ;
15732: LD_ADDR_EXP 64
15736: PUSH
15737: LD_INT 1
15739: ST_TO_ADDR
// if p3 = 19 then
15740: LD_VAR 0 3
15744: PUSH
15745: LD_INT 19
15747: EQUAL
15748: IFFALSE 15758
// sTank := true ;
15750: LD_ADDR_EXP 66
15754: PUSH
15755: LD_INT 1
15757: ST_TO_ADDR
// if p3 = 20 then
15758: LD_VAR 0 3
15762: PUSH
15763: LD_INT 20
15765: EQUAL
15766: IFFALSE 15776
// sRemote := true ;
15768: LD_ADDR_EXP 67
15772: PUSH
15773: LD_INT 1
15775: ST_TO_ADDR
// if p3 = 21 then
15776: LD_VAR 0 3
15780: PUSH
15781: LD_INT 21
15783: EQUAL
15784: IFFALSE 15794
// sPowell := true ;
15786: LD_ADDR_EXP 68
15790: PUSH
15791: LD_INT 1
15793: ST_TO_ADDR
// if p3 = 22 then
15794: LD_VAR 0 3
15798: PUSH
15799: LD_INT 22
15801: EQUAL
15802: IFFALSE 15812
// sTeleport := true ;
15804: LD_ADDR_EXP 71
15808: PUSH
15809: LD_INT 1
15811: ST_TO_ADDR
// if p3 = 23 then
15812: LD_VAR 0 3
15816: PUSH
15817: LD_INT 23
15819: EQUAL
15820: IFFALSE 15830
// sOilTower := true ;
15822: LD_ADDR_EXP 73
15826: PUSH
15827: LD_INT 1
15829: ST_TO_ADDR
// if p3 = 24 then
15830: LD_VAR 0 3
15834: PUSH
15835: LD_INT 24
15837: EQUAL
15838: IFFALSE 15848
// sShovel := true ;
15840: LD_ADDR_EXP 74
15844: PUSH
15845: LD_INT 1
15847: ST_TO_ADDR
// if p3 = 25 then
15848: LD_VAR 0 3
15852: PUSH
15853: LD_INT 25
15855: EQUAL
15856: IFFALSE 15866
// sSheik := true ;
15858: LD_ADDR_EXP 75
15862: PUSH
15863: LD_INT 1
15865: ST_TO_ADDR
// if p3 = 26 then
15866: LD_VAR 0 3
15870: PUSH
15871: LD_INT 26
15873: EQUAL
15874: IFFALSE 15884
// sEarthquake := true ;
15876: LD_ADDR_EXP 77
15880: PUSH
15881: LD_INT 1
15883: ST_TO_ADDR
// if p3 = 27 then
15884: LD_VAR 0 3
15888: PUSH
15889: LD_INT 27
15891: EQUAL
15892: IFFALSE 15902
// sAI := true ;
15894: LD_ADDR_EXP 78
15898: PUSH
15899: LD_INT 1
15901: ST_TO_ADDR
// if p3 = 28 then
15902: LD_VAR 0 3
15906: PUSH
15907: LD_INT 28
15909: EQUAL
15910: IFFALSE 15920
// sCargo := true ;
15912: LD_ADDR_EXP 81
15916: PUSH
15917: LD_INT 1
15919: ST_TO_ADDR
// if p3 = 29 then
15920: LD_VAR 0 3
15924: PUSH
15925: LD_INT 29
15927: EQUAL
15928: IFFALSE 15938
// sDLaser := true ;
15930: LD_ADDR_EXP 82
15934: PUSH
15935: LD_INT 1
15937: ST_TO_ADDR
// if p3 = 30 then
15938: LD_VAR 0 3
15942: PUSH
15943: LD_INT 30
15945: EQUAL
15946: IFFALSE 15956
// sExchange := true ;
15948: LD_ADDR_EXP 83
15952: PUSH
15953: LD_INT 1
15955: ST_TO_ADDR
// if p3 = 31 then
15956: LD_VAR 0 3
15960: PUSH
15961: LD_INT 31
15963: EQUAL
15964: IFFALSE 15974
// sFac := true ;
15966: LD_ADDR_EXP 84
15970: PUSH
15971: LD_INT 1
15973: ST_TO_ADDR
// if p3 = 32 then
15974: LD_VAR 0 3
15978: PUSH
15979: LD_INT 32
15981: EQUAL
15982: IFFALSE 15992
// sPower := true ;
15984: LD_ADDR_EXP 85
15988: PUSH
15989: LD_INT 1
15991: ST_TO_ADDR
// if p3 = 33 then
15992: LD_VAR 0 3
15996: PUSH
15997: LD_INT 33
15999: EQUAL
16000: IFFALSE 16010
// sRandom := true ;
16002: LD_ADDR_EXP 86
16006: PUSH
16007: LD_INT 1
16009: ST_TO_ADDR
// if p3 = 34 then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_INT 34
16017: EQUAL
16018: IFFALSE 16028
// sShield := true ;
16020: LD_ADDR_EXP 87
16024: PUSH
16025: LD_INT 1
16027: ST_TO_ADDR
// if p3 = 35 then
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 35
16035: EQUAL
16036: IFFALSE 16046
// sTime := true ;
16038: LD_ADDR_EXP 88
16042: PUSH
16043: LD_INT 1
16045: ST_TO_ADDR
// if p3 = 36 then
16046: LD_VAR 0 3
16050: PUSH
16051: LD_INT 36
16053: EQUAL
16054: IFFALSE 16064
// sTools := true ;
16056: LD_ADDR_EXP 89
16060: PUSH
16061: LD_INT 1
16063: ST_TO_ADDR
// if p3 = 101 then
16064: LD_VAR 0 3
16068: PUSH
16069: LD_INT 101
16071: EQUAL
16072: IFFALSE 16082
// sSold := true ;
16074: LD_ADDR_EXP 54
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// if p3 = 102 then
16082: LD_VAR 0 3
16086: PUSH
16087: LD_INT 102
16089: EQUAL
16090: IFFALSE 16100
// sDiff := true ;
16092: LD_ADDR_EXP 55
16096: PUSH
16097: LD_INT 1
16099: ST_TO_ADDR
// if p3 = 103 then
16100: LD_VAR 0 3
16104: PUSH
16105: LD_INT 103
16107: EQUAL
16108: IFFALSE 16118
// sFog := true ;
16110: LD_ADDR_EXP 58
16114: PUSH
16115: LD_INT 1
16117: ST_TO_ADDR
// if p3 = 104 then
16118: LD_VAR 0 3
16122: PUSH
16123: LD_INT 104
16125: EQUAL
16126: IFFALSE 16136
// sReset := true ;
16128: LD_ADDR_EXP 59
16132: PUSH
16133: LD_INT 1
16135: ST_TO_ADDR
// if p3 = 105 then
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 105
16143: EQUAL
16144: IFFALSE 16154
// sSun := true ;
16146: LD_ADDR_EXP 60
16150: PUSH
16151: LD_INT 1
16153: ST_TO_ADDR
// if p3 = 106 then
16154: LD_VAR 0 3
16158: PUSH
16159: LD_INT 106
16161: EQUAL
16162: IFFALSE 16172
// sTiger := true ;
16164: LD_ADDR_EXP 56
16168: PUSH
16169: LD_INT 1
16171: ST_TO_ADDR
// if p3 = 107 then
16172: LD_VAR 0 3
16176: PUSH
16177: LD_INT 107
16179: EQUAL
16180: IFFALSE 16190
// sBomb := true ;
16182: LD_ADDR_EXP 57
16186: PUSH
16187: LD_INT 1
16189: ST_TO_ADDR
// if p3 = 108 then
16190: LD_VAR 0 3
16194: PUSH
16195: LD_INT 108
16197: EQUAL
16198: IFFALSE 16208
// sWound := true ;
16200: LD_ADDR_EXP 65
16204: PUSH
16205: LD_INT 1
16207: ST_TO_ADDR
// if p3 = 109 then
16208: LD_VAR 0 3
16212: PUSH
16213: LD_INT 109
16215: EQUAL
16216: IFFALSE 16226
// sBetray := true ;
16218: LD_ADDR_EXP 69
16222: PUSH
16223: LD_INT 1
16225: ST_TO_ADDR
// if p3 = 110 then
16226: LD_VAR 0 3
16230: PUSH
16231: LD_INT 110
16233: EQUAL
16234: IFFALSE 16244
// sContamin := true ;
16236: LD_ADDR_EXP 70
16240: PUSH
16241: LD_INT 1
16243: ST_TO_ADDR
// if p3 = 111 then
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 111
16251: EQUAL
16252: IFFALSE 16262
// sOil := true ;
16254: LD_ADDR_EXP 72
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// if p3 = 112 then
16262: LD_VAR 0 3
16266: PUSH
16267: LD_INT 112
16269: EQUAL
16270: IFFALSE 16280
// sStu := true ;
16272: LD_ADDR_EXP 76
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if p3 = 113 then
16280: LD_VAR 0 3
16284: PUSH
16285: LD_INT 113
16287: EQUAL
16288: IFFALSE 16298
// sBazooka := true ;
16290: LD_ADDR_EXP 79
16294: PUSH
16295: LD_INT 1
16297: ST_TO_ADDR
// if p3 = 114 then
16298: LD_VAR 0 3
16302: PUSH
16303: LD_INT 114
16305: EQUAL
16306: IFFALSE 16316
// sMortar := true ;
16308: LD_ADDR_EXP 80
16312: PUSH
16313: LD_INT 1
16315: ST_TO_ADDR
// if p3 = 115 then
16316: LD_VAR 0 3
16320: PUSH
16321: LD_INT 115
16323: EQUAL
16324: IFFALSE 16334
// sRanger := true ;
16326: LD_ADDR_EXP 90
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// if p3 = 116 then
16334: LD_VAR 0 3
16338: PUSH
16339: LD_INT 116
16341: EQUAL
16342: IFFALSE 16352
// sComputer := true ;
16344: LD_ADDR_EXP 91
16348: PUSH
16349: LD_INT 1
16351: ST_TO_ADDR
// if p3 = 117 then
16352: LD_VAR 0 3
16356: PUSH
16357: LD_INT 117
16359: EQUAL
16360: IFFALSE 16370
// s30 := true ;
16362: LD_ADDR_EXP 92
16366: PUSH
16367: LD_INT 1
16369: ST_TO_ADDR
// if p3 = 118 then
16370: LD_VAR 0 3
16374: PUSH
16375: LD_INT 118
16377: EQUAL
16378: IFFALSE 16388
// s60 := true ;
16380: LD_ADDR_EXP 93
16384: PUSH
16385: LD_INT 1
16387: ST_TO_ADDR
// end ; if p2 = 101 then
16388: LD_VAR 0 2
16392: PUSH
16393: LD_INT 101
16395: EQUAL
16396: IFFALSE 16524
// begin case p3 of 1 :
16398: LD_VAR 0 3
16402: PUSH
16403: LD_INT 1
16405: DOUBLE
16406: EQUAL
16407: IFTRUE 16411
16409: GO 16418
16411: POP
// hHackUnlimitedResources ; 2 :
16412: CALL 28622 0 0
16416: GO 16524
16418: LD_INT 2
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16433
16426: POP
// hHackSetLevel10 ; 3 :
16427: CALL 28755 0 0
16431: GO 16524
16433: LD_INT 3
16435: DOUBLE
16436: EQUAL
16437: IFTRUE 16441
16439: GO 16448
16441: POP
// hHackSetLevel10YourUnits ; 4 :
16442: CALL 28840 0 0
16446: GO 16524
16448: LD_INT 4
16450: DOUBLE
16451: EQUAL
16452: IFTRUE 16456
16454: GO 16463
16456: POP
// hHackInvincible ; 5 :
16457: CALL 29288 0 0
16461: GO 16524
16463: LD_INT 5
16465: DOUBLE
16466: EQUAL
16467: IFTRUE 16471
16469: GO 16478
16471: POP
// hHackInvisible ; 6 :
16472: CALL 29399 0 0
16476: GO 16524
16478: LD_INT 6
16480: DOUBLE
16481: EQUAL
16482: IFTRUE 16486
16484: GO 16493
16486: POP
// hHackChangeYourSide ; 7 :
16487: CALL 29456 0 0
16491: GO 16524
16493: LD_INT 7
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16508
16501: POP
// hHackChangeUnitSide ; 8 :
16502: CALL 29498 0 0
16506: GO 16524
16508: LD_INT 8
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16516
16514: GO 16523
16516: POP
// hHackFog ; end ;
16517: CALL 29599 0 0
16521: GO 16524
16523: POP
// end ; end ;
16524: LD_VAR 0 7
16528: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16529: GO 16531
16531: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16532: LD_STRING initStreamRollete();
16534: PPUSH
16535: CALL_OW 559
// InitStreamMode ;
16539: CALL 16551 0 0
// DefineStreamItems ( false ) ;
16543: LD_INT 0
16545: PPUSH
16546: CALL 17015 0 1
// end ;
16550: END
// function InitStreamMode ; begin
16551: LD_INT 0
16553: PPUSH
// streamModeActive := false ;
16554: LD_ADDR_EXP 37
16558: PUSH
16559: LD_INT 0
16561: ST_TO_ADDR
// normalCounter := 36 ;
16562: LD_ADDR_EXP 38
16566: PUSH
16567: LD_INT 36
16569: ST_TO_ADDR
// hardcoreCounter := 18 ;
16570: LD_ADDR_EXP 39
16574: PUSH
16575: LD_INT 18
16577: ST_TO_ADDR
// sRocket := false ;
16578: LD_ADDR_EXP 42
16582: PUSH
16583: LD_INT 0
16585: ST_TO_ADDR
// sSpeed := false ;
16586: LD_ADDR_EXP 41
16590: PUSH
16591: LD_INT 0
16593: ST_TO_ADDR
// sEngine := false ;
16594: LD_ADDR_EXP 43
16598: PUSH
16599: LD_INT 0
16601: ST_TO_ADDR
// sSpec := false ;
16602: LD_ADDR_EXP 40
16606: PUSH
16607: LD_INT 0
16609: ST_TO_ADDR
// sLevel := false ;
16610: LD_ADDR_EXP 44
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// sArmoury := false ;
16618: LD_ADDR_EXP 45
16622: PUSH
16623: LD_INT 0
16625: ST_TO_ADDR
// sRadar := false ;
16626: LD_ADDR_EXP 46
16630: PUSH
16631: LD_INT 0
16633: ST_TO_ADDR
// sBunker := false ;
16634: LD_ADDR_EXP 47
16638: PUSH
16639: LD_INT 0
16641: ST_TO_ADDR
// sHack := false ;
16642: LD_ADDR_EXP 48
16646: PUSH
16647: LD_INT 0
16649: ST_TO_ADDR
// sFire := false ;
16650: LD_ADDR_EXP 49
16654: PUSH
16655: LD_INT 0
16657: ST_TO_ADDR
// sRefresh := false ;
16658: LD_ADDR_EXP 50
16662: PUSH
16663: LD_INT 0
16665: ST_TO_ADDR
// sExp := false ;
16666: LD_ADDR_EXP 51
16670: PUSH
16671: LD_INT 0
16673: ST_TO_ADDR
// sDepot := false ;
16674: LD_ADDR_EXP 52
16678: PUSH
16679: LD_INT 0
16681: ST_TO_ADDR
// sFlag := false ;
16682: LD_ADDR_EXP 53
16686: PUSH
16687: LD_INT 0
16689: ST_TO_ADDR
// sKamikadze := false ;
16690: LD_ADDR_EXP 61
16694: PUSH
16695: LD_INT 0
16697: ST_TO_ADDR
// sTroll := false ;
16698: LD_ADDR_EXP 62
16702: PUSH
16703: LD_INT 0
16705: ST_TO_ADDR
// sSlow := false ;
16706: LD_ADDR_EXP 63
16710: PUSH
16711: LD_INT 0
16713: ST_TO_ADDR
// sLack := false ;
16714: LD_ADDR_EXP 64
16718: PUSH
16719: LD_INT 0
16721: ST_TO_ADDR
// sTank := false ;
16722: LD_ADDR_EXP 66
16726: PUSH
16727: LD_INT 0
16729: ST_TO_ADDR
// sRemote := false ;
16730: LD_ADDR_EXP 67
16734: PUSH
16735: LD_INT 0
16737: ST_TO_ADDR
// sPowell := false ;
16738: LD_ADDR_EXP 68
16742: PUSH
16743: LD_INT 0
16745: ST_TO_ADDR
// sTeleport := false ;
16746: LD_ADDR_EXP 71
16750: PUSH
16751: LD_INT 0
16753: ST_TO_ADDR
// sOilTower := false ;
16754: LD_ADDR_EXP 73
16758: PUSH
16759: LD_INT 0
16761: ST_TO_ADDR
// sShovel := false ;
16762: LD_ADDR_EXP 74
16766: PUSH
16767: LD_INT 0
16769: ST_TO_ADDR
// sSheik := false ;
16770: LD_ADDR_EXP 75
16774: PUSH
16775: LD_INT 0
16777: ST_TO_ADDR
// sEarthquake := false ;
16778: LD_ADDR_EXP 77
16782: PUSH
16783: LD_INT 0
16785: ST_TO_ADDR
// sAI := false ;
16786: LD_ADDR_EXP 78
16790: PUSH
16791: LD_INT 0
16793: ST_TO_ADDR
// sCargo := false ;
16794: LD_ADDR_EXP 81
16798: PUSH
16799: LD_INT 0
16801: ST_TO_ADDR
// sDLaser := false ;
16802: LD_ADDR_EXP 82
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// sExchange := false ;
16810: LD_ADDR_EXP 83
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// sFac := false ;
16818: LD_ADDR_EXP 84
16822: PUSH
16823: LD_INT 0
16825: ST_TO_ADDR
// sPower := false ;
16826: LD_ADDR_EXP 85
16830: PUSH
16831: LD_INT 0
16833: ST_TO_ADDR
// sRandom := false ;
16834: LD_ADDR_EXP 86
16838: PUSH
16839: LD_INT 0
16841: ST_TO_ADDR
// sShield := false ;
16842: LD_ADDR_EXP 87
16846: PUSH
16847: LD_INT 0
16849: ST_TO_ADDR
// sTime := false ;
16850: LD_ADDR_EXP 88
16854: PUSH
16855: LD_INT 0
16857: ST_TO_ADDR
// sTools := false ;
16858: LD_ADDR_EXP 89
16862: PUSH
16863: LD_INT 0
16865: ST_TO_ADDR
// sSold := false ;
16866: LD_ADDR_EXP 54
16870: PUSH
16871: LD_INT 0
16873: ST_TO_ADDR
// sDiff := false ;
16874: LD_ADDR_EXP 55
16878: PUSH
16879: LD_INT 0
16881: ST_TO_ADDR
// sFog := false ;
16882: LD_ADDR_EXP 58
16886: PUSH
16887: LD_INT 0
16889: ST_TO_ADDR
// sReset := false ;
16890: LD_ADDR_EXP 59
16894: PUSH
16895: LD_INT 0
16897: ST_TO_ADDR
// sSun := false ;
16898: LD_ADDR_EXP 60
16902: PUSH
16903: LD_INT 0
16905: ST_TO_ADDR
// sTiger := false ;
16906: LD_ADDR_EXP 56
16910: PUSH
16911: LD_INT 0
16913: ST_TO_ADDR
// sBomb := false ;
16914: LD_ADDR_EXP 57
16918: PUSH
16919: LD_INT 0
16921: ST_TO_ADDR
// sWound := false ;
16922: LD_ADDR_EXP 65
16926: PUSH
16927: LD_INT 0
16929: ST_TO_ADDR
// sBetray := false ;
16930: LD_ADDR_EXP 69
16934: PUSH
16935: LD_INT 0
16937: ST_TO_ADDR
// sContamin := false ;
16938: LD_ADDR_EXP 70
16942: PUSH
16943: LD_INT 0
16945: ST_TO_ADDR
// sOil := false ;
16946: LD_ADDR_EXP 72
16950: PUSH
16951: LD_INT 0
16953: ST_TO_ADDR
// sStu := false ;
16954: LD_ADDR_EXP 76
16958: PUSH
16959: LD_INT 0
16961: ST_TO_ADDR
// sBazooka := false ;
16962: LD_ADDR_EXP 79
16966: PUSH
16967: LD_INT 0
16969: ST_TO_ADDR
// sMortar := false ;
16970: LD_ADDR_EXP 80
16974: PUSH
16975: LD_INT 0
16977: ST_TO_ADDR
// sRanger := false ;
16978: LD_ADDR_EXP 90
16982: PUSH
16983: LD_INT 0
16985: ST_TO_ADDR
// sComputer := false ;
16986: LD_ADDR_EXP 91
16990: PUSH
16991: LD_INT 0
16993: ST_TO_ADDR
// s30 := false ;
16994: LD_ADDR_EXP 92
16998: PUSH
16999: LD_INT 0
17001: ST_TO_ADDR
// s60 := false ;
17002: LD_ADDR_EXP 93
17006: PUSH
17007: LD_INT 0
17009: ST_TO_ADDR
// end ;
17010: LD_VAR 0 1
17014: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17015: LD_INT 0
17017: PPUSH
17018: PPUSH
17019: PPUSH
17020: PPUSH
17021: PPUSH
17022: PPUSH
17023: PPUSH
// result := [ ] ;
17024: LD_ADDR_VAR 0 2
17028: PUSH
17029: EMPTY
17030: ST_TO_ADDR
// if campaign_id = 1 then
17031: LD_OWVAR 69
17035: PUSH
17036: LD_INT 1
17038: EQUAL
17039: IFFALSE 20205
// begin case mission_number of 1 :
17041: LD_OWVAR 70
17045: PUSH
17046: LD_INT 1
17048: DOUBLE
17049: EQUAL
17050: IFTRUE 17054
17052: GO 17130
17054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 4
17065: PUSH
17066: LD_INT 11
17068: PUSH
17069: LD_INT 12
17071: PUSH
17072: LD_INT 15
17074: PUSH
17075: LD_INT 16
17077: PUSH
17078: LD_INT 22
17080: PUSH
17081: LD_INT 23
17083: PUSH
17084: LD_INT 26
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 101
17100: PUSH
17101: LD_INT 102
17103: PUSH
17104: LD_INT 106
17106: PUSH
17107: LD_INT 116
17109: PUSH
17110: LD_INT 117
17112: PUSH
17113: LD_INT 118
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: ST_TO_ADDR
17128: GO 20203
17130: LD_INT 2
17132: DOUBLE
17133: EQUAL
17134: IFTRUE 17138
17136: GO 17222
17138: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17139: LD_ADDR_VAR 0 2
17143: PUSH
17144: LD_INT 2
17146: PUSH
17147: LD_INT 4
17149: PUSH
17150: LD_INT 11
17152: PUSH
17153: LD_INT 12
17155: PUSH
17156: LD_INT 15
17158: PUSH
17159: LD_INT 16
17161: PUSH
17162: LD_INT 22
17164: PUSH
17165: LD_INT 23
17167: PUSH
17168: LD_INT 26
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 101
17184: PUSH
17185: LD_INT 102
17187: PUSH
17188: LD_INT 105
17190: PUSH
17191: LD_INT 106
17193: PUSH
17194: LD_INT 108
17196: PUSH
17197: LD_INT 116
17199: PUSH
17200: LD_INT 117
17202: PUSH
17203: LD_INT 118
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: ST_TO_ADDR
17220: GO 20203
17222: LD_INT 3
17224: DOUBLE
17225: EQUAL
17226: IFTRUE 17230
17228: GO 17318
17230: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17231: LD_ADDR_VAR 0 2
17235: PUSH
17236: LD_INT 2
17238: PUSH
17239: LD_INT 4
17241: PUSH
17242: LD_INT 5
17244: PUSH
17245: LD_INT 11
17247: PUSH
17248: LD_INT 12
17250: PUSH
17251: LD_INT 15
17253: PUSH
17254: LD_INT 16
17256: PUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 26
17262: PUSH
17263: LD_INT 36
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 101
17280: PUSH
17281: LD_INT 102
17283: PUSH
17284: LD_INT 105
17286: PUSH
17287: LD_INT 106
17289: PUSH
17290: LD_INT 108
17292: PUSH
17293: LD_INT 116
17295: PUSH
17296: LD_INT 117
17298: PUSH
17299: LD_INT 118
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: ST_TO_ADDR
17316: GO 20203
17318: LD_INT 4
17320: DOUBLE
17321: EQUAL
17322: IFTRUE 17326
17324: GO 17422
17326: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17327: LD_ADDR_VAR 0 2
17331: PUSH
17332: LD_INT 2
17334: PUSH
17335: LD_INT 4
17337: PUSH
17338: LD_INT 5
17340: PUSH
17341: LD_INT 8
17343: PUSH
17344: LD_INT 11
17346: PUSH
17347: LD_INT 12
17349: PUSH
17350: LD_INT 15
17352: PUSH
17353: LD_INT 16
17355: PUSH
17356: LD_INT 22
17358: PUSH
17359: LD_INT 23
17361: PUSH
17362: LD_INT 26
17364: PUSH
17365: LD_INT 36
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 101
17384: PUSH
17385: LD_INT 102
17387: PUSH
17388: LD_INT 105
17390: PUSH
17391: LD_INT 106
17393: PUSH
17394: LD_INT 108
17396: PUSH
17397: LD_INT 116
17399: PUSH
17400: LD_INT 117
17402: PUSH
17403: LD_INT 118
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: ST_TO_ADDR
17420: GO 20203
17422: LD_INT 5
17424: DOUBLE
17425: EQUAL
17426: IFTRUE 17430
17428: GO 17542
17430: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17431: LD_ADDR_VAR 0 2
17435: PUSH
17436: LD_INT 2
17438: PUSH
17439: LD_INT 4
17441: PUSH
17442: LD_INT 5
17444: PUSH
17445: LD_INT 6
17447: PUSH
17448: LD_INT 8
17450: PUSH
17451: LD_INT 11
17453: PUSH
17454: LD_INT 12
17456: PUSH
17457: LD_INT 15
17459: PUSH
17460: LD_INT 16
17462: PUSH
17463: LD_INT 22
17465: PUSH
17466: LD_INT 23
17468: PUSH
17469: LD_INT 25
17471: PUSH
17472: LD_INT 26
17474: PUSH
17475: LD_INT 36
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 101
17496: PUSH
17497: LD_INT 102
17499: PUSH
17500: LD_INT 105
17502: PUSH
17503: LD_INT 106
17505: PUSH
17506: LD_INT 108
17508: PUSH
17509: LD_INT 109
17511: PUSH
17512: LD_INT 112
17514: PUSH
17515: LD_INT 116
17517: PUSH
17518: LD_INT 117
17520: PUSH
17521: LD_INT 118
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: ST_TO_ADDR
17540: GO 20203
17542: LD_INT 6
17544: DOUBLE
17545: EQUAL
17546: IFTRUE 17550
17548: GO 17682
17550: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17551: LD_ADDR_VAR 0 2
17555: PUSH
17556: LD_INT 2
17558: PUSH
17559: LD_INT 4
17561: PUSH
17562: LD_INT 5
17564: PUSH
17565: LD_INT 6
17567: PUSH
17568: LD_INT 8
17570: PUSH
17571: LD_INT 11
17573: PUSH
17574: LD_INT 12
17576: PUSH
17577: LD_INT 15
17579: PUSH
17580: LD_INT 16
17582: PUSH
17583: LD_INT 20
17585: PUSH
17586: LD_INT 21
17588: PUSH
17589: LD_INT 22
17591: PUSH
17592: LD_INT 23
17594: PUSH
17595: LD_INT 25
17597: PUSH
17598: LD_INT 26
17600: PUSH
17601: LD_INT 30
17603: PUSH
17604: LD_INT 31
17606: PUSH
17607: LD_INT 32
17609: PUSH
17610: LD_INT 36
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 101
17636: PUSH
17637: LD_INT 102
17639: PUSH
17640: LD_INT 105
17642: PUSH
17643: LD_INT 106
17645: PUSH
17646: LD_INT 108
17648: PUSH
17649: LD_INT 109
17651: PUSH
17652: LD_INT 112
17654: PUSH
17655: LD_INT 116
17657: PUSH
17658: LD_INT 117
17660: PUSH
17661: LD_INT 118
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: ST_TO_ADDR
17680: GO 20203
17682: LD_INT 7
17684: DOUBLE
17685: EQUAL
17686: IFTRUE 17690
17688: GO 17802
17690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17691: LD_ADDR_VAR 0 2
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: LD_INT 4
17701: PUSH
17702: LD_INT 5
17704: PUSH
17705: LD_INT 7
17707: PUSH
17708: LD_INT 11
17710: PUSH
17711: LD_INT 12
17713: PUSH
17714: LD_INT 15
17716: PUSH
17717: LD_INT 16
17719: PUSH
17720: LD_INT 20
17722: PUSH
17723: LD_INT 21
17725: PUSH
17726: LD_INT 22
17728: PUSH
17729: LD_INT 23
17731: PUSH
17732: LD_INT 25
17734: PUSH
17735: LD_INT 26
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 101
17756: PUSH
17757: LD_INT 102
17759: PUSH
17760: LD_INT 103
17762: PUSH
17763: LD_INT 105
17765: PUSH
17766: LD_INT 106
17768: PUSH
17769: LD_INT 108
17771: PUSH
17772: LD_INT 112
17774: PUSH
17775: LD_INT 116
17777: PUSH
17778: LD_INT 117
17780: PUSH
17781: LD_INT 118
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: ST_TO_ADDR
17800: GO 20203
17802: LD_INT 8
17804: DOUBLE
17805: EQUAL
17806: IFTRUE 17810
17808: GO 17950
17810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17811: LD_ADDR_VAR 0 2
17815: PUSH
17816: LD_INT 2
17818: PUSH
17819: LD_INT 4
17821: PUSH
17822: LD_INT 5
17824: PUSH
17825: LD_INT 6
17827: PUSH
17828: LD_INT 7
17830: PUSH
17831: LD_INT 8
17833: PUSH
17834: LD_INT 11
17836: PUSH
17837: LD_INT 12
17839: PUSH
17840: LD_INT 15
17842: PUSH
17843: LD_INT 16
17845: PUSH
17846: LD_INT 20
17848: PUSH
17849: LD_INT 21
17851: PUSH
17852: LD_INT 22
17854: PUSH
17855: LD_INT 23
17857: PUSH
17858: LD_INT 25
17860: PUSH
17861: LD_INT 26
17863: PUSH
17864: LD_INT 30
17866: PUSH
17867: LD_INT 31
17869: PUSH
17870: LD_INT 32
17872: PUSH
17873: LD_INT 36
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 101
17900: PUSH
17901: LD_INT 102
17903: PUSH
17904: LD_INT 103
17906: PUSH
17907: LD_INT 105
17909: PUSH
17910: LD_INT 106
17912: PUSH
17913: LD_INT 108
17915: PUSH
17916: LD_INT 109
17918: PUSH
17919: LD_INT 112
17921: PUSH
17922: LD_INT 116
17924: PUSH
17925: LD_INT 117
17927: PUSH
17928: LD_INT 118
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: ST_TO_ADDR
17948: GO 20203
17950: LD_INT 9
17952: DOUBLE
17953: EQUAL
17954: IFTRUE 17958
17956: GO 18106
17958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17959: LD_ADDR_VAR 0 2
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: LD_INT 4
17969: PUSH
17970: LD_INT 5
17972: PUSH
17973: LD_INT 6
17975: PUSH
17976: LD_INT 7
17978: PUSH
17979: LD_INT 8
17981: PUSH
17982: LD_INT 11
17984: PUSH
17985: LD_INT 12
17987: PUSH
17988: LD_INT 15
17990: PUSH
17991: LD_INT 16
17993: PUSH
17994: LD_INT 20
17996: PUSH
17997: LD_INT 21
17999: PUSH
18000: LD_INT 22
18002: PUSH
18003: LD_INT 23
18005: PUSH
18006: LD_INT 25
18008: PUSH
18009: LD_INT 26
18011: PUSH
18012: LD_INT 28
18014: PUSH
18015: LD_INT 30
18017: PUSH
18018: LD_INT 31
18020: PUSH
18021: LD_INT 32
18023: PUSH
18024: LD_INT 36
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 101
18052: PUSH
18053: LD_INT 102
18055: PUSH
18056: LD_INT 103
18058: PUSH
18059: LD_INT 105
18061: PUSH
18062: LD_INT 106
18064: PUSH
18065: LD_INT 108
18067: PUSH
18068: LD_INT 109
18070: PUSH
18071: LD_INT 112
18073: PUSH
18074: LD_INT 114
18076: PUSH
18077: LD_INT 116
18079: PUSH
18080: LD_INT 117
18082: PUSH
18083: LD_INT 118
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: ST_TO_ADDR
18104: GO 20203
18106: LD_INT 10
18108: DOUBLE
18109: EQUAL
18110: IFTRUE 18114
18112: GO 18310
18114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18115: LD_ADDR_VAR 0 2
18119: PUSH
18120: LD_INT 2
18122: PUSH
18123: LD_INT 4
18125: PUSH
18126: LD_INT 5
18128: PUSH
18129: LD_INT 6
18131: PUSH
18132: LD_INT 7
18134: PUSH
18135: LD_INT 8
18137: PUSH
18138: LD_INT 9
18140: PUSH
18141: LD_INT 10
18143: PUSH
18144: LD_INT 11
18146: PUSH
18147: LD_INT 12
18149: PUSH
18150: LD_INT 13
18152: PUSH
18153: LD_INT 14
18155: PUSH
18156: LD_INT 15
18158: PUSH
18159: LD_INT 16
18161: PUSH
18162: LD_INT 17
18164: PUSH
18165: LD_INT 18
18167: PUSH
18168: LD_INT 19
18170: PUSH
18171: LD_INT 20
18173: PUSH
18174: LD_INT 21
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_INT 23
18182: PUSH
18183: LD_INT 24
18185: PUSH
18186: LD_INT 25
18188: PUSH
18189: LD_INT 26
18191: PUSH
18192: LD_INT 28
18194: PUSH
18195: LD_INT 30
18197: PUSH
18198: LD_INT 31
18200: PUSH
18201: LD_INT 32
18203: PUSH
18204: LD_INT 36
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 101
18240: PUSH
18241: LD_INT 102
18243: PUSH
18244: LD_INT 103
18246: PUSH
18247: LD_INT 104
18249: PUSH
18250: LD_INT 105
18252: PUSH
18253: LD_INT 106
18255: PUSH
18256: LD_INT 107
18258: PUSH
18259: LD_INT 108
18261: PUSH
18262: LD_INT 109
18264: PUSH
18265: LD_INT 110
18267: PUSH
18268: LD_INT 111
18270: PUSH
18271: LD_INT 112
18273: PUSH
18274: LD_INT 114
18276: PUSH
18277: LD_INT 116
18279: PUSH
18280: LD_INT 117
18282: PUSH
18283: LD_INT 118
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: ST_TO_ADDR
18308: GO 20203
18310: LD_INT 11
18312: DOUBLE
18313: EQUAL
18314: IFTRUE 18318
18316: GO 18522
18318: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18319: LD_ADDR_VAR 0 2
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: LD_INT 4
18332: PUSH
18333: LD_INT 5
18335: PUSH
18336: LD_INT 6
18338: PUSH
18339: LD_INT 7
18341: PUSH
18342: LD_INT 8
18344: PUSH
18345: LD_INT 9
18347: PUSH
18348: LD_INT 10
18350: PUSH
18351: LD_INT 11
18353: PUSH
18354: LD_INT 12
18356: PUSH
18357: LD_INT 13
18359: PUSH
18360: LD_INT 14
18362: PUSH
18363: LD_INT 15
18365: PUSH
18366: LD_INT 16
18368: PUSH
18369: LD_INT 17
18371: PUSH
18372: LD_INT 18
18374: PUSH
18375: LD_INT 19
18377: PUSH
18378: LD_INT 20
18380: PUSH
18381: LD_INT 21
18383: PUSH
18384: LD_INT 22
18386: PUSH
18387: LD_INT 23
18389: PUSH
18390: LD_INT 24
18392: PUSH
18393: LD_INT 25
18395: PUSH
18396: LD_INT 26
18398: PUSH
18399: LD_INT 28
18401: PUSH
18402: LD_INT 30
18404: PUSH
18405: LD_INT 31
18407: PUSH
18408: LD_INT 32
18410: PUSH
18411: LD_INT 34
18413: PUSH
18414: LD_INT 36
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 101
18452: PUSH
18453: LD_INT 102
18455: PUSH
18456: LD_INT 103
18458: PUSH
18459: LD_INT 104
18461: PUSH
18462: LD_INT 105
18464: PUSH
18465: LD_INT 106
18467: PUSH
18468: LD_INT 107
18470: PUSH
18471: LD_INT 108
18473: PUSH
18474: LD_INT 109
18476: PUSH
18477: LD_INT 110
18479: PUSH
18480: LD_INT 111
18482: PUSH
18483: LD_INT 112
18485: PUSH
18486: LD_INT 114
18488: PUSH
18489: LD_INT 116
18491: PUSH
18492: LD_INT 117
18494: PUSH
18495: LD_INT 118
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: ST_TO_ADDR
18520: GO 20203
18522: LD_INT 12
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18750
18530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18531: LD_ADDR_VAR 0 2
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 4
18547: PUSH
18548: LD_INT 5
18550: PUSH
18551: LD_INT 6
18553: PUSH
18554: LD_INT 7
18556: PUSH
18557: LD_INT 8
18559: PUSH
18560: LD_INT 9
18562: PUSH
18563: LD_INT 10
18565: PUSH
18566: LD_INT 11
18568: PUSH
18569: LD_INT 12
18571: PUSH
18572: LD_INT 13
18574: PUSH
18575: LD_INT 14
18577: PUSH
18578: LD_INT 15
18580: PUSH
18581: LD_INT 16
18583: PUSH
18584: LD_INT 17
18586: PUSH
18587: LD_INT 18
18589: PUSH
18590: LD_INT 19
18592: PUSH
18593: LD_INT 20
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 22
18601: PUSH
18602: LD_INT 23
18604: PUSH
18605: LD_INT 24
18607: PUSH
18608: LD_INT 25
18610: PUSH
18611: LD_INT 26
18613: PUSH
18614: LD_INT 27
18616: PUSH
18617: LD_INT 28
18619: PUSH
18620: LD_INT 30
18622: PUSH
18623: LD_INT 31
18625: PUSH
18626: LD_INT 32
18628: PUSH
18629: LD_INT 33
18631: PUSH
18632: LD_INT 34
18634: PUSH
18635: LD_INT 36
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 101
18676: PUSH
18677: LD_INT 102
18679: PUSH
18680: LD_INT 103
18682: PUSH
18683: LD_INT 104
18685: PUSH
18686: LD_INT 105
18688: PUSH
18689: LD_INT 106
18691: PUSH
18692: LD_INT 107
18694: PUSH
18695: LD_INT 108
18697: PUSH
18698: LD_INT 109
18700: PUSH
18701: LD_INT 110
18703: PUSH
18704: LD_INT 111
18706: PUSH
18707: LD_INT 112
18709: PUSH
18710: LD_INT 113
18712: PUSH
18713: LD_INT 114
18715: PUSH
18716: LD_INT 116
18718: PUSH
18719: LD_INT 117
18721: PUSH
18722: LD_INT 118
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: ST_TO_ADDR
18748: GO 20203
18750: LD_INT 13
18752: DOUBLE
18753: EQUAL
18754: IFTRUE 18758
18756: GO 18966
18758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18759: LD_ADDR_VAR 0 2
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: LD_INT 3
18772: PUSH
18773: LD_INT 4
18775: PUSH
18776: LD_INT 5
18778: PUSH
18779: LD_INT 8
18781: PUSH
18782: LD_INT 9
18784: PUSH
18785: LD_INT 10
18787: PUSH
18788: LD_INT 11
18790: PUSH
18791: LD_INT 12
18793: PUSH
18794: LD_INT 14
18796: PUSH
18797: LD_INT 15
18799: PUSH
18800: LD_INT 16
18802: PUSH
18803: LD_INT 17
18805: PUSH
18806: LD_INT 18
18808: PUSH
18809: LD_INT 19
18811: PUSH
18812: LD_INT 20
18814: PUSH
18815: LD_INT 21
18817: PUSH
18818: LD_INT 22
18820: PUSH
18821: LD_INT 23
18823: PUSH
18824: LD_INT 24
18826: PUSH
18827: LD_INT 25
18829: PUSH
18830: LD_INT 26
18832: PUSH
18833: LD_INT 27
18835: PUSH
18836: LD_INT 28
18838: PUSH
18839: LD_INT 30
18841: PUSH
18842: LD_INT 31
18844: PUSH
18845: LD_INT 32
18847: PUSH
18848: LD_INT 33
18850: PUSH
18851: LD_INT 34
18853: PUSH
18854: LD_INT 36
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 101
18892: PUSH
18893: LD_INT 102
18895: PUSH
18896: LD_INT 103
18898: PUSH
18899: LD_INT 104
18901: PUSH
18902: LD_INT 105
18904: PUSH
18905: LD_INT 106
18907: PUSH
18908: LD_INT 107
18910: PUSH
18911: LD_INT 108
18913: PUSH
18914: LD_INT 109
18916: PUSH
18917: LD_INT 110
18919: PUSH
18920: LD_INT 111
18922: PUSH
18923: LD_INT 112
18925: PUSH
18926: LD_INT 113
18928: PUSH
18929: LD_INT 114
18931: PUSH
18932: LD_INT 116
18934: PUSH
18935: LD_INT 117
18937: PUSH
18938: LD_INT 118
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: ST_TO_ADDR
18964: GO 20203
18966: LD_INT 14
18968: DOUBLE
18969: EQUAL
18970: IFTRUE 18974
18972: GO 19198
18974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18975: LD_ADDR_VAR 0 2
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 3
18988: PUSH
18989: LD_INT 4
18991: PUSH
18992: LD_INT 5
18994: PUSH
18995: LD_INT 6
18997: PUSH
18998: LD_INT 7
19000: PUSH
19001: LD_INT 8
19003: PUSH
19004: LD_INT 9
19006: PUSH
19007: LD_INT 10
19009: PUSH
19010: LD_INT 11
19012: PUSH
19013: LD_INT 12
19015: PUSH
19016: LD_INT 13
19018: PUSH
19019: LD_INT 14
19021: PUSH
19022: LD_INT 15
19024: PUSH
19025: LD_INT 16
19027: PUSH
19028: LD_INT 17
19030: PUSH
19031: LD_INT 18
19033: PUSH
19034: LD_INT 19
19036: PUSH
19037: LD_INT 20
19039: PUSH
19040: LD_INT 21
19042: PUSH
19043: LD_INT 22
19045: PUSH
19046: LD_INT 23
19048: PUSH
19049: LD_INT 24
19051: PUSH
19052: LD_INT 25
19054: PUSH
19055: LD_INT 26
19057: PUSH
19058: LD_INT 27
19060: PUSH
19061: LD_INT 28
19063: PUSH
19064: LD_INT 29
19066: PUSH
19067: LD_INT 30
19069: PUSH
19070: LD_INT 31
19072: PUSH
19073: LD_INT 32
19075: PUSH
19076: LD_INT 33
19078: PUSH
19079: LD_INT 34
19081: PUSH
19082: LD_INT 36
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 101
19124: PUSH
19125: LD_INT 102
19127: PUSH
19128: LD_INT 103
19130: PUSH
19131: LD_INT 104
19133: PUSH
19134: LD_INT 105
19136: PUSH
19137: LD_INT 106
19139: PUSH
19140: LD_INT 107
19142: PUSH
19143: LD_INT 108
19145: PUSH
19146: LD_INT 109
19148: PUSH
19149: LD_INT 110
19151: PUSH
19152: LD_INT 111
19154: PUSH
19155: LD_INT 112
19157: PUSH
19158: LD_INT 113
19160: PUSH
19161: LD_INT 114
19163: PUSH
19164: LD_INT 116
19166: PUSH
19167: LD_INT 117
19169: PUSH
19170: LD_INT 118
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: ST_TO_ADDR
19196: GO 20203
19198: LD_INT 15
19200: DOUBLE
19201: EQUAL
19202: IFTRUE 19206
19204: GO 19430
19206: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19207: LD_ADDR_VAR 0 2
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: LD_INT 2
19217: PUSH
19218: LD_INT 3
19220: PUSH
19221: LD_INT 4
19223: PUSH
19224: LD_INT 5
19226: PUSH
19227: LD_INT 6
19229: PUSH
19230: LD_INT 7
19232: PUSH
19233: LD_INT 8
19235: PUSH
19236: LD_INT 9
19238: PUSH
19239: LD_INT 10
19241: PUSH
19242: LD_INT 11
19244: PUSH
19245: LD_INT 12
19247: PUSH
19248: LD_INT 13
19250: PUSH
19251: LD_INT 14
19253: PUSH
19254: LD_INT 15
19256: PUSH
19257: LD_INT 16
19259: PUSH
19260: LD_INT 17
19262: PUSH
19263: LD_INT 18
19265: PUSH
19266: LD_INT 19
19268: PUSH
19269: LD_INT 20
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 22
19277: PUSH
19278: LD_INT 23
19280: PUSH
19281: LD_INT 24
19283: PUSH
19284: LD_INT 25
19286: PUSH
19287: LD_INT 26
19289: PUSH
19290: LD_INT 27
19292: PUSH
19293: LD_INT 28
19295: PUSH
19296: LD_INT 29
19298: PUSH
19299: LD_INT 30
19301: PUSH
19302: LD_INT 31
19304: PUSH
19305: LD_INT 32
19307: PUSH
19308: LD_INT 33
19310: PUSH
19311: LD_INT 34
19313: PUSH
19314: LD_INT 36
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 101
19356: PUSH
19357: LD_INT 102
19359: PUSH
19360: LD_INT 103
19362: PUSH
19363: LD_INT 104
19365: PUSH
19366: LD_INT 105
19368: PUSH
19369: LD_INT 106
19371: PUSH
19372: LD_INT 107
19374: PUSH
19375: LD_INT 108
19377: PUSH
19378: LD_INT 109
19380: PUSH
19381: LD_INT 110
19383: PUSH
19384: LD_INT 111
19386: PUSH
19387: LD_INT 112
19389: PUSH
19390: LD_INT 113
19392: PUSH
19393: LD_INT 114
19395: PUSH
19396: LD_INT 116
19398: PUSH
19399: LD_INT 117
19401: PUSH
19402: LD_INT 118
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: ST_TO_ADDR
19428: GO 20203
19430: LD_INT 16
19432: DOUBLE
19433: EQUAL
19434: IFTRUE 19438
19436: GO 19574
19438: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19439: LD_ADDR_VAR 0 2
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 4
19449: PUSH
19450: LD_INT 5
19452: PUSH
19453: LD_INT 7
19455: PUSH
19456: LD_INT 11
19458: PUSH
19459: LD_INT 12
19461: PUSH
19462: LD_INT 15
19464: PUSH
19465: LD_INT 16
19467: PUSH
19468: LD_INT 20
19470: PUSH
19471: LD_INT 21
19473: PUSH
19474: LD_INT 22
19476: PUSH
19477: LD_INT 23
19479: PUSH
19480: LD_INT 25
19482: PUSH
19483: LD_INT 26
19485: PUSH
19486: LD_INT 30
19488: PUSH
19489: LD_INT 31
19491: PUSH
19492: LD_INT 32
19494: PUSH
19495: LD_INT 33
19497: PUSH
19498: LD_INT 34
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 101
19524: PUSH
19525: LD_INT 102
19527: PUSH
19528: LD_INT 103
19530: PUSH
19531: LD_INT 106
19533: PUSH
19534: LD_INT 108
19536: PUSH
19537: LD_INT 112
19539: PUSH
19540: LD_INT 113
19542: PUSH
19543: LD_INT 114
19545: PUSH
19546: LD_INT 116
19548: PUSH
19549: LD_INT 117
19551: PUSH
19552: LD_INT 118
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: ST_TO_ADDR
19572: GO 20203
19574: LD_INT 17
19576: DOUBLE
19577: EQUAL
19578: IFTRUE 19582
19580: GO 19806
19582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19583: LD_ADDR_VAR 0 2
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 3
19596: PUSH
19597: LD_INT 4
19599: PUSH
19600: LD_INT 5
19602: PUSH
19603: LD_INT 6
19605: PUSH
19606: LD_INT 7
19608: PUSH
19609: LD_INT 8
19611: PUSH
19612: LD_INT 9
19614: PUSH
19615: LD_INT 10
19617: PUSH
19618: LD_INT 11
19620: PUSH
19621: LD_INT 12
19623: PUSH
19624: LD_INT 13
19626: PUSH
19627: LD_INT 14
19629: PUSH
19630: LD_INT 15
19632: PUSH
19633: LD_INT 16
19635: PUSH
19636: LD_INT 17
19638: PUSH
19639: LD_INT 18
19641: PUSH
19642: LD_INT 19
19644: PUSH
19645: LD_INT 20
19647: PUSH
19648: LD_INT 21
19650: PUSH
19651: LD_INT 22
19653: PUSH
19654: LD_INT 23
19656: PUSH
19657: LD_INT 24
19659: PUSH
19660: LD_INT 25
19662: PUSH
19663: LD_INT 26
19665: PUSH
19666: LD_INT 27
19668: PUSH
19669: LD_INT 28
19671: PUSH
19672: LD_INT 29
19674: PUSH
19675: LD_INT 30
19677: PUSH
19678: LD_INT 31
19680: PUSH
19681: LD_INT 32
19683: PUSH
19684: LD_INT 33
19686: PUSH
19687: LD_INT 34
19689: PUSH
19690: LD_INT 36
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 101
19732: PUSH
19733: LD_INT 102
19735: PUSH
19736: LD_INT 103
19738: PUSH
19739: LD_INT 104
19741: PUSH
19742: LD_INT 105
19744: PUSH
19745: LD_INT 106
19747: PUSH
19748: LD_INT 107
19750: PUSH
19751: LD_INT 108
19753: PUSH
19754: LD_INT 109
19756: PUSH
19757: LD_INT 110
19759: PUSH
19760: LD_INT 111
19762: PUSH
19763: LD_INT 112
19765: PUSH
19766: LD_INT 113
19768: PUSH
19769: LD_INT 114
19771: PUSH
19772: LD_INT 116
19774: PUSH
19775: LD_INT 117
19777: PUSH
19778: LD_INT 118
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: ST_TO_ADDR
19804: GO 20203
19806: LD_INT 18
19808: DOUBLE
19809: EQUAL
19810: IFTRUE 19814
19812: GO 19962
19814: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19815: LD_ADDR_VAR 0 2
19819: PUSH
19820: LD_INT 2
19822: PUSH
19823: LD_INT 4
19825: PUSH
19826: LD_INT 5
19828: PUSH
19829: LD_INT 7
19831: PUSH
19832: LD_INT 11
19834: PUSH
19835: LD_INT 12
19837: PUSH
19838: LD_INT 15
19840: PUSH
19841: LD_INT 16
19843: PUSH
19844: LD_INT 20
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 22
19852: PUSH
19853: LD_INT 23
19855: PUSH
19856: LD_INT 25
19858: PUSH
19859: LD_INT 26
19861: PUSH
19862: LD_INT 30
19864: PUSH
19865: LD_INT 31
19867: PUSH
19868: LD_INT 32
19870: PUSH
19871: LD_INT 33
19873: PUSH
19874: LD_INT 34
19876: PUSH
19877: LD_INT 35
19879: PUSH
19880: LD_INT 36
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 101
19908: PUSH
19909: LD_INT 102
19911: PUSH
19912: LD_INT 103
19914: PUSH
19915: LD_INT 106
19917: PUSH
19918: LD_INT 108
19920: PUSH
19921: LD_INT 112
19923: PUSH
19924: LD_INT 113
19926: PUSH
19927: LD_INT 114
19929: PUSH
19930: LD_INT 115
19932: PUSH
19933: LD_INT 116
19935: PUSH
19936: LD_INT 117
19938: PUSH
19939: LD_INT 118
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: ST_TO_ADDR
19960: GO 20203
19962: LD_INT 19
19964: DOUBLE
19965: EQUAL
19966: IFTRUE 19970
19968: GO 20202
19970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19971: LD_ADDR_VAR 0 2
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: LD_INT 2
19981: PUSH
19982: LD_INT 3
19984: PUSH
19985: LD_INT 4
19987: PUSH
19988: LD_INT 5
19990: PUSH
19991: LD_INT 6
19993: PUSH
19994: LD_INT 7
19996: PUSH
19997: LD_INT 8
19999: PUSH
20000: LD_INT 9
20002: PUSH
20003: LD_INT 10
20005: PUSH
20006: LD_INT 11
20008: PUSH
20009: LD_INT 12
20011: PUSH
20012: LD_INT 13
20014: PUSH
20015: LD_INT 14
20017: PUSH
20018: LD_INT 15
20020: PUSH
20021: LD_INT 16
20023: PUSH
20024: LD_INT 17
20026: PUSH
20027: LD_INT 18
20029: PUSH
20030: LD_INT 19
20032: PUSH
20033: LD_INT 20
20035: PUSH
20036: LD_INT 21
20038: PUSH
20039: LD_INT 22
20041: PUSH
20042: LD_INT 23
20044: PUSH
20045: LD_INT 24
20047: PUSH
20048: LD_INT 25
20050: PUSH
20051: LD_INT 26
20053: PUSH
20054: LD_INT 27
20056: PUSH
20057: LD_INT 28
20059: PUSH
20060: LD_INT 29
20062: PUSH
20063: LD_INT 30
20065: PUSH
20066: LD_INT 31
20068: PUSH
20069: LD_INT 32
20071: PUSH
20072: LD_INT 33
20074: PUSH
20075: LD_INT 34
20077: PUSH
20078: LD_INT 35
20080: PUSH
20081: LD_INT 36
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 101
20124: PUSH
20125: LD_INT 102
20127: PUSH
20128: LD_INT 103
20130: PUSH
20131: LD_INT 104
20133: PUSH
20134: LD_INT 105
20136: PUSH
20137: LD_INT 106
20139: PUSH
20140: LD_INT 107
20142: PUSH
20143: LD_INT 108
20145: PUSH
20146: LD_INT 109
20148: PUSH
20149: LD_INT 110
20151: PUSH
20152: LD_INT 111
20154: PUSH
20155: LD_INT 112
20157: PUSH
20158: LD_INT 113
20160: PUSH
20161: LD_INT 114
20163: PUSH
20164: LD_INT 115
20166: PUSH
20167: LD_INT 116
20169: PUSH
20170: LD_INT 117
20172: PUSH
20173: LD_INT 118
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: ST_TO_ADDR
20200: GO 20203
20202: POP
// end else
20203: GO 20434
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20205: LD_ADDR_VAR 0 2
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: LD_INT 3
20218: PUSH
20219: LD_INT 4
20221: PUSH
20222: LD_INT 5
20224: PUSH
20225: LD_INT 6
20227: PUSH
20228: LD_INT 7
20230: PUSH
20231: LD_INT 8
20233: PUSH
20234: LD_INT 9
20236: PUSH
20237: LD_INT 10
20239: PUSH
20240: LD_INT 11
20242: PUSH
20243: LD_INT 12
20245: PUSH
20246: LD_INT 13
20248: PUSH
20249: LD_INT 14
20251: PUSH
20252: LD_INT 15
20254: PUSH
20255: LD_INT 16
20257: PUSH
20258: LD_INT 17
20260: PUSH
20261: LD_INT 18
20263: PUSH
20264: LD_INT 19
20266: PUSH
20267: LD_INT 20
20269: PUSH
20270: LD_INT 21
20272: PUSH
20273: LD_INT 22
20275: PUSH
20276: LD_INT 23
20278: PUSH
20279: LD_INT 24
20281: PUSH
20282: LD_INT 25
20284: PUSH
20285: LD_INT 26
20287: PUSH
20288: LD_INT 27
20290: PUSH
20291: LD_INT 28
20293: PUSH
20294: LD_INT 29
20296: PUSH
20297: LD_INT 30
20299: PUSH
20300: LD_INT 31
20302: PUSH
20303: LD_INT 32
20305: PUSH
20306: LD_INT 33
20308: PUSH
20309: LD_INT 34
20311: PUSH
20312: LD_INT 35
20314: PUSH
20315: LD_INT 36
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 101
20358: PUSH
20359: LD_INT 102
20361: PUSH
20362: LD_INT 103
20364: PUSH
20365: LD_INT 104
20367: PUSH
20368: LD_INT 105
20370: PUSH
20371: LD_INT 106
20373: PUSH
20374: LD_INT 107
20376: PUSH
20377: LD_INT 108
20379: PUSH
20380: LD_INT 109
20382: PUSH
20383: LD_INT 110
20385: PUSH
20386: LD_INT 111
20388: PUSH
20389: LD_INT 112
20391: PUSH
20392: LD_INT 113
20394: PUSH
20395: LD_INT 114
20397: PUSH
20398: LD_INT 115
20400: PUSH
20401: LD_INT 116
20403: PUSH
20404: LD_INT 117
20406: PUSH
20407: LD_INT 118
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: ST_TO_ADDR
// if result then
20434: LD_VAR 0 2
20438: IFFALSE 21224
// begin normal :=  ;
20440: LD_ADDR_VAR 0 5
20444: PUSH
20445: LD_STRING 
20447: ST_TO_ADDR
// hardcore :=  ;
20448: LD_ADDR_VAR 0 6
20452: PUSH
20453: LD_STRING 
20455: ST_TO_ADDR
// active :=  ;
20456: LD_ADDR_VAR 0 7
20460: PUSH
20461: LD_STRING 
20463: ST_TO_ADDR
// for i = 1 to normalCounter do
20464: LD_ADDR_VAR 0 8
20468: PUSH
20469: DOUBLE
20470: LD_INT 1
20472: DEC
20473: ST_TO_ADDR
20474: LD_EXP 38
20478: PUSH
20479: FOR_TO
20480: IFFALSE 20581
// begin tmp := 0 ;
20482: LD_ADDR_VAR 0 3
20486: PUSH
20487: LD_STRING 0
20489: ST_TO_ADDR
// if result [ 1 ] then
20490: LD_VAR 0 2
20494: PUSH
20495: LD_INT 1
20497: ARRAY
20498: IFFALSE 20563
// if result [ 1 ] [ 1 ] = i then
20500: LD_VAR 0 2
20504: PUSH
20505: LD_INT 1
20507: ARRAY
20508: PUSH
20509: LD_INT 1
20511: ARRAY
20512: PUSH
20513: LD_VAR 0 8
20517: EQUAL
20518: IFFALSE 20563
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20520: LD_ADDR_VAR 0 2
20524: PUSH
20525: LD_VAR 0 2
20529: PPUSH
20530: LD_INT 1
20532: PPUSH
20533: LD_VAR 0 2
20537: PUSH
20538: LD_INT 1
20540: ARRAY
20541: PPUSH
20542: LD_INT 1
20544: PPUSH
20545: CALL_OW 3
20549: PPUSH
20550: CALL_OW 1
20554: ST_TO_ADDR
// tmp := 1 ;
20555: LD_ADDR_VAR 0 3
20559: PUSH
20560: LD_STRING 1
20562: ST_TO_ADDR
// end ; normal := normal & tmp ;
20563: LD_ADDR_VAR 0 5
20567: PUSH
20568: LD_VAR 0 5
20572: PUSH
20573: LD_VAR 0 3
20577: STR
20578: ST_TO_ADDR
// end ;
20579: GO 20479
20581: POP
20582: POP
// for i = 1 to hardcoreCounter do
20583: LD_ADDR_VAR 0 8
20587: PUSH
20588: DOUBLE
20589: LD_INT 1
20591: DEC
20592: ST_TO_ADDR
20593: LD_EXP 39
20597: PUSH
20598: FOR_TO
20599: IFFALSE 20704
// begin tmp := 0 ;
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: LD_STRING 0
20608: ST_TO_ADDR
// if result [ 2 ] then
20609: LD_VAR 0 2
20613: PUSH
20614: LD_INT 2
20616: ARRAY
20617: IFFALSE 20686
// if result [ 2 ] [ 1 ] = 100 + i then
20619: LD_VAR 0 2
20623: PUSH
20624: LD_INT 2
20626: ARRAY
20627: PUSH
20628: LD_INT 1
20630: ARRAY
20631: PUSH
20632: LD_INT 100
20634: PUSH
20635: LD_VAR 0 8
20639: PLUS
20640: EQUAL
20641: IFFALSE 20686
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20643: LD_ADDR_VAR 0 2
20647: PUSH
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_INT 2
20655: PPUSH
20656: LD_VAR 0 2
20660: PUSH
20661: LD_INT 2
20663: ARRAY
20664: PPUSH
20665: LD_INT 1
20667: PPUSH
20668: CALL_OW 3
20672: PPUSH
20673: CALL_OW 1
20677: ST_TO_ADDR
// tmp := 1 ;
20678: LD_ADDR_VAR 0 3
20682: PUSH
20683: LD_STRING 1
20685: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20686: LD_ADDR_VAR 0 6
20690: PUSH
20691: LD_VAR 0 6
20695: PUSH
20696: LD_VAR 0 3
20700: STR
20701: ST_TO_ADDR
// end ;
20702: GO 20598
20704: POP
20705: POP
// if isGameLoad then
20706: LD_VAR 0 1
20710: IFFALSE 21185
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20712: LD_ADDR_VAR 0 4
20716: PUSH
20717: LD_EXP 42
20721: PUSH
20722: LD_EXP 41
20726: PUSH
20727: LD_EXP 43
20731: PUSH
20732: LD_EXP 40
20736: PUSH
20737: LD_EXP 44
20741: PUSH
20742: LD_EXP 45
20746: PUSH
20747: LD_EXP 46
20751: PUSH
20752: LD_EXP 47
20756: PUSH
20757: LD_EXP 48
20761: PUSH
20762: LD_EXP 49
20766: PUSH
20767: LD_EXP 50
20771: PUSH
20772: LD_EXP 51
20776: PUSH
20777: LD_EXP 52
20781: PUSH
20782: LD_EXP 53
20786: PUSH
20787: LD_EXP 61
20791: PUSH
20792: LD_EXP 62
20796: PUSH
20797: LD_EXP 63
20801: PUSH
20802: LD_EXP 64
20806: PUSH
20807: LD_EXP 66
20811: PUSH
20812: LD_EXP 67
20816: PUSH
20817: LD_EXP 68
20821: PUSH
20822: LD_EXP 71
20826: PUSH
20827: LD_EXP 73
20831: PUSH
20832: LD_EXP 74
20836: PUSH
20837: LD_EXP 75
20841: PUSH
20842: LD_EXP 77
20846: PUSH
20847: LD_EXP 78
20851: PUSH
20852: LD_EXP 81
20856: PUSH
20857: LD_EXP 82
20861: PUSH
20862: LD_EXP 83
20866: PUSH
20867: LD_EXP 84
20871: PUSH
20872: LD_EXP 85
20876: PUSH
20877: LD_EXP 86
20881: PUSH
20882: LD_EXP 87
20886: PUSH
20887: LD_EXP 88
20891: PUSH
20892: LD_EXP 89
20896: PUSH
20897: LD_EXP 54
20901: PUSH
20902: LD_EXP 55
20906: PUSH
20907: LD_EXP 58
20911: PUSH
20912: LD_EXP 59
20916: PUSH
20917: LD_EXP 60
20921: PUSH
20922: LD_EXP 56
20926: PUSH
20927: LD_EXP 57
20931: PUSH
20932: LD_EXP 65
20936: PUSH
20937: LD_EXP 69
20941: PUSH
20942: LD_EXP 70
20946: PUSH
20947: LD_EXP 72
20951: PUSH
20952: LD_EXP 76
20956: PUSH
20957: LD_EXP 79
20961: PUSH
20962: LD_EXP 80
20966: PUSH
20967: LD_EXP 90
20971: PUSH
20972: LD_EXP 91
20976: PUSH
20977: LD_EXP 92
20981: PUSH
20982: LD_EXP 93
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: ST_TO_ADDR
// tmp :=  ;
21043: LD_ADDR_VAR 0 3
21047: PUSH
21048: LD_STRING 
21050: ST_TO_ADDR
// for i = 1 to normalCounter do
21051: LD_ADDR_VAR 0 8
21055: PUSH
21056: DOUBLE
21057: LD_INT 1
21059: DEC
21060: ST_TO_ADDR
21061: LD_EXP 38
21065: PUSH
21066: FOR_TO
21067: IFFALSE 21103
// begin if flags [ i ] then
21069: LD_VAR 0 4
21073: PUSH
21074: LD_VAR 0 8
21078: ARRAY
21079: IFFALSE 21101
// tmp := tmp & i & ; ;
21081: LD_ADDR_VAR 0 3
21085: PUSH
21086: LD_VAR 0 3
21090: PUSH
21091: LD_VAR 0 8
21095: STR
21096: PUSH
21097: LD_STRING ;
21099: STR
21100: ST_TO_ADDR
// end ;
21101: GO 21066
21103: POP
21104: POP
// for i = 1 to hardcoreCounter do
21105: LD_ADDR_VAR 0 8
21109: PUSH
21110: DOUBLE
21111: LD_INT 1
21113: DEC
21114: ST_TO_ADDR
21115: LD_EXP 39
21119: PUSH
21120: FOR_TO
21121: IFFALSE 21167
// begin if flags [ normalCounter + i ] then
21123: LD_VAR 0 4
21127: PUSH
21128: LD_EXP 38
21132: PUSH
21133: LD_VAR 0 8
21137: PLUS
21138: ARRAY
21139: IFFALSE 21165
// tmp := tmp & ( 100 + i ) & ; ;
21141: LD_ADDR_VAR 0 3
21145: PUSH
21146: LD_VAR 0 3
21150: PUSH
21151: LD_INT 100
21153: PUSH
21154: LD_VAR 0 8
21158: PLUS
21159: STR
21160: PUSH
21161: LD_STRING ;
21163: STR
21164: ST_TO_ADDR
// end ;
21165: GO 21120
21167: POP
21168: POP
// if tmp then
21169: LD_VAR 0 3
21173: IFFALSE 21185
// active := tmp ;
21175: LD_ADDR_VAR 0 7
21179: PUSH
21180: LD_VAR 0 3
21184: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21185: LD_STRING getStreamItemsFromMission("
21187: PUSH
21188: LD_VAR 0 5
21192: STR
21193: PUSH
21194: LD_STRING ","
21196: STR
21197: PUSH
21198: LD_VAR 0 6
21202: STR
21203: PUSH
21204: LD_STRING ","
21206: STR
21207: PUSH
21208: LD_VAR 0 7
21212: STR
21213: PUSH
21214: LD_STRING ")
21216: STR
21217: PPUSH
21218: CALL_OW 559
// end else
21222: GO 21231
// ToLua ( getStreamItemsFromMission("","","") ) ;
21224: LD_STRING getStreamItemsFromMission("","","")
21226: PPUSH
21227: CALL_OW 559
// end ;
21231: LD_VAR 0 2
21235: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21236: LD_EXP 37
21240: PUSH
21241: LD_EXP 42
21245: AND
21246: IFFALSE 21370
21248: GO 21250
21250: DISABLE
21251: LD_INT 0
21253: PPUSH
21254: PPUSH
// begin enable ;
21255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21256: LD_ADDR_VAR 0 2
21260: PUSH
21261: LD_INT 22
21263: PUSH
21264: LD_OWVAR 2
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 2
21275: PUSH
21276: LD_INT 34
21278: PUSH
21279: LD_INT 7
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 34
21288: PUSH
21289: LD_INT 45
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 34
21298: PUSH
21299: LD_INT 28
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 34
21308: PUSH
21309: LD_INT 47
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PPUSH
21327: CALL_OW 69
21331: ST_TO_ADDR
// if not tmp then
21332: LD_VAR 0 2
21336: NOT
21337: IFFALSE 21341
// exit ;
21339: GO 21370
// for i in tmp do
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_VAR 0 2
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21368
// begin SetLives ( i , 0 ) ;
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_INT 0
21361: PPUSH
21362: CALL_OW 234
// end ;
21366: GO 21351
21368: POP
21369: POP
// end ;
21370: PPOPN 2
21372: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21373: LD_EXP 37
21377: PUSH
21378: LD_EXP 43
21382: AND
21383: IFFALSE 21467
21385: GO 21387
21387: DISABLE
21388: LD_INT 0
21390: PPUSH
21391: PPUSH
// begin enable ;
21392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21393: LD_ADDR_VAR 0 2
21397: PUSH
21398: LD_INT 22
21400: PUSH
21401: LD_OWVAR 2
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 32
21412: PUSH
21413: LD_INT 3
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PPUSH
21424: CALL_OW 69
21428: ST_TO_ADDR
// if not tmp then
21429: LD_VAR 0 2
21433: NOT
21434: IFFALSE 21438
// exit ;
21436: GO 21467
// for i in tmp do
21438: LD_ADDR_VAR 0 1
21442: PUSH
21443: LD_VAR 0 2
21447: PUSH
21448: FOR_IN
21449: IFFALSE 21465
// begin SetLives ( i , 0 ) ;
21451: LD_VAR 0 1
21455: PPUSH
21456: LD_INT 0
21458: PPUSH
21459: CALL_OW 234
// end ;
21463: GO 21448
21465: POP
21466: POP
// end ;
21467: PPOPN 2
21469: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21470: LD_EXP 37
21474: PUSH
21475: LD_EXP 40
21479: AND
21480: IFFALSE 21573
21482: GO 21484
21484: DISABLE
21485: LD_INT 0
21487: PPUSH
// begin enable ;
21488: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21489: LD_ADDR_VAR 0 1
21493: PUSH
21494: LD_INT 22
21496: PUSH
21497: LD_OWVAR 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: LD_INT 25
21511: PUSH
21512: LD_INT 5
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 25
21521: PUSH
21522: LD_INT 9
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 25
21531: PUSH
21532: LD_INT 8
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PPUSH
21549: CALL_OW 69
21553: PUSH
21554: FOR_IN
21555: IFFALSE 21571
// begin SetClass ( i , 1 ) ;
21557: LD_VAR 0 1
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL_OW 336
// end ;
21569: GO 21554
21571: POP
21572: POP
// end ;
21573: PPOPN 1
21575: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21576: LD_EXP 37
21580: PUSH
21581: LD_EXP 41
21585: AND
21586: PUSH
21587: LD_OWVAR 65
21591: PUSH
21592: LD_INT 7
21594: LESS
21595: AND
21596: IFFALSE 21610
21598: GO 21600
21600: DISABLE
// begin enable ;
21601: ENABLE
// game_speed := 7 ;
21602: LD_ADDR_OWVAR 65
21606: PUSH
21607: LD_INT 7
21609: ST_TO_ADDR
// end ;
21610: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21611: LD_EXP 37
21615: PUSH
21616: LD_EXP 44
21620: AND
21621: IFFALSE 21823
21623: GO 21625
21625: DISABLE
21626: LD_INT 0
21628: PPUSH
21629: PPUSH
21630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21631: LD_ADDR_VAR 0 3
21635: PUSH
21636: LD_INT 81
21638: PUSH
21639: LD_OWVAR 2
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 21
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PPUSH
21662: CALL_OW 69
21666: ST_TO_ADDR
// if not tmp then
21667: LD_VAR 0 3
21671: NOT
21672: IFFALSE 21676
// exit ;
21674: GO 21823
// if tmp > 5 then
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 5
21683: GREATER
21684: IFFALSE 21696
// k := 5 else
21686: LD_ADDR_VAR 0 2
21690: PUSH
21691: LD_INT 5
21693: ST_TO_ADDR
21694: GO 21706
// k := tmp ;
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_VAR 0 3
21705: ST_TO_ADDR
// for i := 1 to k do
21706: LD_ADDR_VAR 0 1
21710: PUSH
21711: DOUBLE
21712: LD_INT 1
21714: DEC
21715: ST_TO_ADDR
21716: LD_VAR 0 2
21720: PUSH
21721: FOR_TO
21722: IFFALSE 21821
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21724: LD_VAR 0 3
21728: PUSH
21729: LD_VAR 0 1
21733: ARRAY
21734: PPUSH
21735: LD_VAR 0 1
21739: PUSH
21740: LD_INT 4
21742: MOD
21743: PUSH
21744: LD_INT 1
21746: PLUS
21747: PPUSH
21748: CALL_OW 259
21752: PUSH
21753: LD_INT 10
21755: LESS
21756: IFFALSE 21819
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21758: LD_VAR 0 3
21762: PUSH
21763: LD_VAR 0 1
21767: ARRAY
21768: PPUSH
21769: LD_VAR 0 1
21773: PUSH
21774: LD_INT 4
21776: MOD
21777: PUSH
21778: LD_INT 1
21780: PLUS
21781: PPUSH
21782: LD_VAR 0 3
21786: PUSH
21787: LD_VAR 0 1
21791: ARRAY
21792: PPUSH
21793: LD_VAR 0 1
21797: PUSH
21798: LD_INT 4
21800: MOD
21801: PUSH
21802: LD_INT 1
21804: PLUS
21805: PPUSH
21806: CALL_OW 259
21810: PUSH
21811: LD_INT 1
21813: PLUS
21814: PPUSH
21815: CALL_OW 237
21819: GO 21721
21821: POP
21822: POP
// end ;
21823: PPOPN 3
21825: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21826: LD_EXP 37
21830: PUSH
21831: LD_EXP 45
21835: AND
21836: IFFALSE 21856
21838: GO 21840
21840: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21841: LD_INT 4
21843: PPUSH
21844: LD_OWVAR 2
21848: PPUSH
21849: LD_INT 0
21851: PPUSH
21852: CALL_OW 324
21856: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21857: LD_EXP 37
21861: PUSH
21862: LD_EXP 74
21866: AND
21867: IFFALSE 21887
21869: GO 21871
21871: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21872: LD_INT 19
21874: PPUSH
21875: LD_OWVAR 2
21879: PPUSH
21880: LD_INT 0
21882: PPUSH
21883: CALL_OW 324
21887: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21888: LD_EXP 37
21892: PUSH
21893: LD_EXP 46
21897: AND
21898: IFFALSE 22000
21900: GO 21902
21902: DISABLE
21903: LD_INT 0
21905: PPUSH
21906: PPUSH
// begin enable ;
21907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21908: LD_ADDR_VAR 0 2
21912: PUSH
21913: LD_INT 22
21915: PUSH
21916: LD_OWVAR 2
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 2
21927: PUSH
21928: LD_INT 34
21930: PUSH
21931: LD_INT 11
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 34
21940: PUSH
21941: LD_INT 30
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PPUSH
21957: CALL_OW 69
21961: ST_TO_ADDR
// if not tmp then
21962: LD_VAR 0 2
21966: NOT
21967: IFFALSE 21971
// exit ;
21969: GO 22000
// for i in tmp do
21971: LD_ADDR_VAR 0 1
21975: PUSH
21976: LD_VAR 0 2
21980: PUSH
21981: FOR_IN
21982: IFFALSE 21998
// begin SetLives ( i , 0 ) ;
21984: LD_VAR 0 1
21988: PPUSH
21989: LD_INT 0
21991: PPUSH
21992: CALL_OW 234
// end ;
21996: GO 21981
21998: POP
21999: POP
// end ;
22000: PPOPN 2
22002: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22003: LD_EXP 37
22007: PUSH
22008: LD_EXP 47
22012: AND
22013: IFFALSE 22033
22015: GO 22017
22017: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22018: LD_INT 32
22020: PPUSH
22021: LD_OWVAR 2
22025: PPUSH
22026: LD_INT 0
22028: PPUSH
22029: CALL_OW 324
22033: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22034: LD_EXP 37
22038: PUSH
22039: LD_EXP 48
22043: AND
22044: IFFALSE 22225
22046: GO 22048
22048: DISABLE
22049: LD_INT 0
22051: PPUSH
22052: PPUSH
22053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22054: LD_ADDR_VAR 0 2
22058: PUSH
22059: LD_INT 22
22061: PUSH
22062: LD_OWVAR 2
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 33
22073: PUSH
22074: LD_INT 3
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PPUSH
22085: CALL_OW 69
22089: ST_TO_ADDR
// if not tmp then
22090: LD_VAR 0 2
22094: NOT
22095: IFFALSE 22099
// exit ;
22097: GO 22225
// side := 0 ;
22099: LD_ADDR_VAR 0 3
22103: PUSH
22104: LD_INT 0
22106: ST_TO_ADDR
// for i := 1 to 8 do
22107: LD_ADDR_VAR 0 1
22111: PUSH
22112: DOUBLE
22113: LD_INT 1
22115: DEC
22116: ST_TO_ADDR
22117: LD_INT 8
22119: PUSH
22120: FOR_TO
22121: IFFALSE 22169
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22123: LD_OWVAR 2
22127: PUSH
22128: LD_VAR 0 1
22132: NONEQUAL
22133: PUSH
22134: LD_OWVAR 2
22138: PPUSH
22139: LD_VAR 0 1
22143: PPUSH
22144: CALL_OW 81
22148: PUSH
22149: LD_INT 2
22151: EQUAL
22152: AND
22153: IFFALSE 22167
// begin side := i ;
22155: LD_ADDR_VAR 0 3
22159: PUSH
22160: LD_VAR 0 1
22164: ST_TO_ADDR
// break ;
22165: GO 22169
// end ;
22167: GO 22120
22169: POP
22170: POP
// if not side then
22171: LD_VAR 0 3
22175: NOT
22176: IFFALSE 22180
// exit ;
22178: GO 22225
// for i := 1 to tmp do
22180: LD_ADDR_VAR 0 1
22184: PUSH
22185: DOUBLE
22186: LD_INT 1
22188: DEC
22189: ST_TO_ADDR
22190: LD_VAR 0 2
22194: PUSH
22195: FOR_TO
22196: IFFALSE 22223
// if Prob ( 60 ) then
22198: LD_INT 60
22200: PPUSH
22201: CALL_OW 13
22205: IFFALSE 22221
// SetSide ( i , side ) ;
22207: LD_VAR 0 1
22211: PPUSH
22212: LD_VAR 0 3
22216: PPUSH
22217: CALL_OW 235
22221: GO 22195
22223: POP
22224: POP
// end ;
22225: PPOPN 3
22227: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22228: LD_EXP 37
22232: PUSH
22233: LD_EXP 50
22237: AND
22238: IFFALSE 22357
22240: GO 22242
22242: DISABLE
22243: LD_INT 0
22245: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22246: LD_ADDR_VAR 0 1
22250: PUSH
22251: LD_INT 22
22253: PUSH
22254: LD_OWVAR 2
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 21
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 3
22275: PUSH
22276: LD_INT 23
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: PPUSH
22295: CALL_OW 69
22299: PUSH
22300: FOR_IN
22301: IFFALSE 22355
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 257
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 3
22321: PUSH
22322: LD_INT 4
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: IN
22331: IFFALSE 22353
// SetClass ( un , rand ( 1 , 4 ) ) ;
22333: LD_VAR 0 1
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: LD_INT 4
22343: PPUSH
22344: CALL_OW 12
22348: PPUSH
22349: CALL_OW 336
22353: GO 22300
22355: POP
22356: POP
// end ;
22357: PPOPN 1
22359: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22360: LD_EXP 37
22364: PUSH
22365: LD_EXP 49
22369: AND
22370: IFFALSE 22449
22372: GO 22374
22374: DISABLE
22375: LD_INT 0
22377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22378: LD_ADDR_VAR 0 1
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_OWVAR 2
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 21
22397: PUSH
22398: LD_INT 3
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PPUSH
22409: CALL_OW 69
22413: ST_TO_ADDR
// if not tmp then
22414: LD_VAR 0 1
22418: NOT
22419: IFFALSE 22423
// exit ;
22421: GO 22449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22423: LD_VAR 0 1
22427: PUSH
22428: LD_INT 1
22430: PPUSH
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL_OW 12
22440: ARRAY
22441: PPUSH
22442: LD_INT 100
22444: PPUSH
22445: CALL_OW 234
// end ;
22449: PPOPN 1
22451: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22452: LD_EXP 37
22456: PUSH
22457: LD_EXP 51
22461: AND
22462: IFFALSE 22560
22464: GO 22466
22466: DISABLE
22467: LD_INT 0
22469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22470: LD_ADDR_VAR 0 1
22474: PUSH
22475: LD_INT 22
22477: PUSH
22478: LD_OWVAR 2
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PPUSH
22501: CALL_OW 69
22505: ST_TO_ADDR
// if not tmp then
22506: LD_VAR 0 1
22510: NOT
22511: IFFALSE 22515
// exit ;
22513: GO 22560
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22515: LD_VAR 0 1
22519: PUSH
22520: LD_INT 1
22522: PPUSH
22523: LD_VAR 0 1
22527: PPUSH
22528: CALL_OW 12
22532: ARRAY
22533: PPUSH
22534: LD_INT 1
22536: PPUSH
22537: LD_INT 4
22539: PPUSH
22540: CALL_OW 12
22544: PPUSH
22545: LD_INT 3000
22547: PPUSH
22548: LD_INT 9000
22550: PPUSH
22551: CALL_OW 12
22555: PPUSH
22556: CALL_OW 492
// end ;
22560: PPOPN 1
22562: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22563: LD_EXP 37
22567: PUSH
22568: LD_EXP 52
22572: AND
22573: IFFALSE 22593
22575: GO 22577
22577: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22578: LD_INT 1
22580: PPUSH
22581: LD_OWVAR 2
22585: PPUSH
22586: LD_INT 0
22588: PPUSH
22589: CALL_OW 324
22593: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22594: LD_EXP 37
22598: PUSH
22599: LD_EXP 53
22603: AND
22604: IFFALSE 22687
22606: GO 22608
22608: DISABLE
22609: LD_INT 0
22611: PPUSH
22612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22613: LD_ADDR_VAR 0 2
22617: PUSH
22618: LD_INT 22
22620: PUSH
22621: LD_OWVAR 2
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 21
22632: PUSH
22633: LD_INT 3
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PPUSH
22644: CALL_OW 69
22648: ST_TO_ADDR
// if not tmp then
22649: LD_VAR 0 2
22653: NOT
22654: IFFALSE 22658
// exit ;
22656: GO 22687
// for i in tmp do
22658: LD_ADDR_VAR 0 1
22662: PUSH
22663: LD_VAR 0 2
22667: PUSH
22668: FOR_IN
22669: IFFALSE 22685
// SetBLevel ( i , 10 ) ;
22671: LD_VAR 0 1
22675: PPUSH
22676: LD_INT 10
22678: PPUSH
22679: CALL_OW 241
22683: GO 22668
22685: POP
22686: POP
// end ;
22687: PPOPN 2
22689: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22690: LD_EXP 37
22694: PUSH
22695: LD_EXP 54
22699: AND
22700: IFFALSE 22811
22702: GO 22704
22704: DISABLE
22705: LD_INT 0
22707: PPUSH
22708: PPUSH
22709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22710: LD_ADDR_VAR 0 3
22714: PUSH
22715: LD_INT 22
22717: PUSH
22718: LD_OWVAR 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 25
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: CALL_OW 69
22745: ST_TO_ADDR
// if not tmp then
22746: LD_VAR 0 3
22750: NOT
22751: IFFALSE 22755
// exit ;
22753: GO 22811
// un := tmp [ rand ( 1 , tmp ) ] ;
22755: LD_ADDR_VAR 0 2
22759: PUSH
22760: LD_VAR 0 3
22764: PUSH
22765: LD_INT 1
22767: PPUSH
22768: LD_VAR 0 3
22772: PPUSH
22773: CALL_OW 12
22777: ARRAY
22778: ST_TO_ADDR
// if Crawls ( un ) then
22779: LD_VAR 0 2
22783: PPUSH
22784: CALL_OW 318
22788: IFFALSE 22799
// ComWalk ( un ) ;
22790: LD_VAR 0 2
22794: PPUSH
22795: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22799: LD_VAR 0 2
22803: PPUSH
22804: LD_INT 5
22806: PPUSH
22807: CALL_OW 336
// end ;
22811: PPOPN 3
22813: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22814: LD_EXP 37
22818: PUSH
22819: LD_EXP 55
22823: AND
22824: PUSH
22825: LD_OWVAR 67
22829: PUSH
22830: LD_INT 4
22832: LESS
22833: AND
22834: IFFALSE 22853
22836: GO 22838
22838: DISABLE
// begin Difficulty := Difficulty + 1 ;
22839: LD_ADDR_OWVAR 67
22843: PUSH
22844: LD_OWVAR 67
22848: PUSH
22849: LD_INT 1
22851: PLUS
22852: ST_TO_ADDR
// end ;
22853: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22854: LD_EXP 37
22858: PUSH
22859: LD_EXP 56
22863: AND
22864: IFFALSE 22967
22866: GO 22868
22868: DISABLE
22869: LD_INT 0
22871: PPUSH
// begin for i := 1 to 5 do
22872: LD_ADDR_VAR 0 1
22876: PUSH
22877: DOUBLE
22878: LD_INT 1
22880: DEC
22881: ST_TO_ADDR
22882: LD_INT 5
22884: PUSH
22885: FOR_TO
22886: IFFALSE 22965
// begin uc_nation := nation_nature ;
22888: LD_ADDR_OWVAR 21
22892: PUSH
22893: LD_INT 0
22895: ST_TO_ADDR
// uc_side := 0 ;
22896: LD_ADDR_OWVAR 20
22900: PUSH
22901: LD_INT 0
22903: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22904: LD_ADDR_OWVAR 29
22908: PUSH
22909: LD_INT 12
22911: PUSH
22912: LD_INT 12
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: ST_TO_ADDR
// hc_agressivity := 20 ;
22919: LD_ADDR_OWVAR 35
22923: PUSH
22924: LD_INT 20
22926: ST_TO_ADDR
// hc_class := class_tiger ;
22927: LD_ADDR_OWVAR 28
22931: PUSH
22932: LD_INT 14
22934: ST_TO_ADDR
// hc_gallery :=  ;
22935: LD_ADDR_OWVAR 33
22939: PUSH
22940: LD_STRING 
22942: ST_TO_ADDR
// hc_name :=  ;
22943: LD_ADDR_OWVAR 26
22947: PUSH
22948: LD_STRING 
22950: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22951: CALL_OW 44
22955: PPUSH
22956: LD_INT 0
22958: PPUSH
22959: CALL_OW 51
// end ;
22963: GO 22885
22965: POP
22966: POP
// end ;
22967: PPOPN 1
22969: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22970: LD_EXP 37
22974: PUSH
22975: LD_EXP 57
22979: AND
22980: IFFALSE 22989
22982: GO 22984
22984: DISABLE
// StreamSibBomb ;
22985: CALL 22990 0 0
22989: END
// export function StreamSibBomb ; var i , x , y ; begin
22990: LD_INT 0
22992: PPUSH
22993: PPUSH
22994: PPUSH
22995: PPUSH
// result := false ;
22996: LD_ADDR_VAR 0 1
23000: PUSH
23001: LD_INT 0
23003: ST_TO_ADDR
// for i := 1 to 16 do
23004: LD_ADDR_VAR 0 2
23008: PUSH
23009: DOUBLE
23010: LD_INT 1
23012: DEC
23013: ST_TO_ADDR
23014: LD_INT 16
23016: PUSH
23017: FOR_TO
23018: IFFALSE 23217
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23020: LD_ADDR_VAR 0 3
23024: PUSH
23025: LD_INT 10
23027: PUSH
23028: LD_INT 20
23030: PUSH
23031: LD_INT 30
23033: PUSH
23034: LD_INT 40
23036: PUSH
23037: LD_INT 50
23039: PUSH
23040: LD_INT 60
23042: PUSH
23043: LD_INT 70
23045: PUSH
23046: LD_INT 80
23048: PUSH
23049: LD_INT 90
23051: PUSH
23052: LD_INT 100
23054: PUSH
23055: LD_INT 110
23057: PUSH
23058: LD_INT 120
23060: PUSH
23061: LD_INT 130
23063: PUSH
23064: LD_INT 140
23066: PUSH
23067: LD_INT 150
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: PPUSH
23090: LD_INT 15
23092: PPUSH
23093: CALL_OW 12
23097: ARRAY
23098: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23099: LD_ADDR_VAR 0 4
23103: PUSH
23104: LD_INT 10
23106: PUSH
23107: LD_INT 20
23109: PUSH
23110: LD_INT 30
23112: PUSH
23113: LD_INT 40
23115: PUSH
23116: LD_INT 50
23118: PUSH
23119: LD_INT 60
23121: PUSH
23122: LD_INT 70
23124: PUSH
23125: LD_INT 80
23127: PUSH
23128: LD_INT 90
23130: PUSH
23131: LD_INT 100
23133: PUSH
23134: LD_INT 110
23136: PUSH
23137: LD_INT 120
23139: PUSH
23140: LD_INT 130
23142: PUSH
23143: LD_INT 140
23145: PUSH
23146: LD_INT 150
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: PPUSH
23169: LD_INT 15
23171: PPUSH
23172: CALL_OW 12
23176: ARRAY
23177: ST_TO_ADDR
// if ValidHex ( x , y ) then
23178: LD_VAR 0 3
23182: PPUSH
23183: LD_VAR 0 4
23187: PPUSH
23188: CALL_OW 488
23192: IFFALSE 23215
// begin result := [ x , y ] ;
23194: LD_ADDR_VAR 0 1
23198: PUSH
23199: LD_VAR 0 3
23203: PUSH
23204: LD_VAR 0 4
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: ST_TO_ADDR
// break ;
23213: GO 23217
// end ; end ;
23215: GO 23017
23217: POP
23218: POP
// if result then
23219: LD_VAR 0 1
23223: IFFALSE 23283
// begin ToLua ( playSibBomb() ) ;
23225: LD_STRING playSibBomb()
23227: PPUSH
23228: CALL_OW 559
// wait ( 0 0$14 ) ;
23232: LD_INT 490
23234: PPUSH
23235: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23239: LD_VAR 0 1
23243: PUSH
23244: LD_INT 1
23246: ARRAY
23247: PPUSH
23248: LD_VAR 0 1
23252: PUSH
23253: LD_INT 2
23255: ARRAY
23256: PPUSH
23257: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23261: LD_VAR 0 1
23265: PUSH
23266: LD_INT 1
23268: ARRAY
23269: PPUSH
23270: LD_VAR 0 1
23274: PUSH
23275: LD_INT 2
23277: ARRAY
23278: PPUSH
23279: CALL_OW 429
// end ; end ;
23283: LD_VAR 0 1
23287: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23288: LD_EXP 37
23292: PUSH
23293: LD_EXP 59
23297: AND
23298: IFFALSE 23310
23300: GO 23302
23302: DISABLE
// YouLost (  ) ;
23303: LD_STRING 
23305: PPUSH
23306: CALL_OW 104
23310: END
// every 0 0$1 trigger StreamModeActive and sFog do
23311: LD_EXP 37
23315: PUSH
23316: LD_EXP 58
23320: AND
23321: IFFALSE 23335
23323: GO 23325
23325: DISABLE
// FogOff ( your_side ) ;
23326: LD_OWVAR 2
23330: PPUSH
23331: CALL_OW 344
23335: END
// every 0 0$1 trigger StreamModeActive and sSun do
23336: LD_EXP 37
23340: PUSH
23341: LD_EXP 60
23345: AND
23346: IFFALSE 23374
23348: GO 23350
23350: DISABLE
// begin solar_recharge_percent := 0 ;
23351: LD_ADDR_OWVAR 79
23355: PUSH
23356: LD_INT 0
23358: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23359: LD_INT 10500
23361: PPUSH
23362: CALL_OW 67
// solar_recharge_percent := 100 ;
23366: LD_ADDR_OWVAR 79
23370: PUSH
23371: LD_INT 100
23373: ST_TO_ADDR
// end ;
23374: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23375: LD_EXP 37
23379: PUSH
23380: LD_EXP 61
23384: AND
23385: IFFALSE 23624
23387: GO 23389
23389: DISABLE
23390: LD_INT 0
23392: PPUSH
23393: PPUSH
23394: PPUSH
// begin tmp := [ ] ;
23395: LD_ADDR_VAR 0 3
23399: PUSH
23400: EMPTY
23401: ST_TO_ADDR
// for i := 1 to 6 do
23402: LD_ADDR_VAR 0 1
23406: PUSH
23407: DOUBLE
23408: LD_INT 1
23410: DEC
23411: ST_TO_ADDR
23412: LD_INT 6
23414: PUSH
23415: FOR_TO
23416: IFFALSE 23521
// begin uc_nation := nation_nature ;
23418: LD_ADDR_OWVAR 21
23422: PUSH
23423: LD_INT 0
23425: ST_TO_ADDR
// uc_side := 0 ;
23426: LD_ADDR_OWVAR 20
23430: PUSH
23431: LD_INT 0
23433: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23434: LD_ADDR_OWVAR 29
23438: PUSH
23439: LD_INT 12
23441: PUSH
23442: LD_INT 12
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: ST_TO_ADDR
// hc_agressivity := 20 ;
23449: LD_ADDR_OWVAR 35
23453: PUSH
23454: LD_INT 20
23456: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23457: LD_ADDR_OWVAR 28
23461: PUSH
23462: LD_INT 17
23464: ST_TO_ADDR
// hc_gallery :=  ;
23465: LD_ADDR_OWVAR 33
23469: PUSH
23470: LD_STRING 
23472: ST_TO_ADDR
// hc_name :=  ;
23473: LD_ADDR_OWVAR 26
23477: PUSH
23478: LD_STRING 
23480: ST_TO_ADDR
// un := CreateHuman ;
23481: LD_ADDR_VAR 0 2
23485: PUSH
23486: CALL_OW 44
23490: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23491: LD_VAR 0 2
23495: PPUSH
23496: LD_INT 1
23498: PPUSH
23499: CALL_OW 51
// tmp := tmp ^ un ;
23503: LD_ADDR_VAR 0 3
23507: PUSH
23508: LD_VAR 0 3
23512: PUSH
23513: LD_VAR 0 2
23517: ADD
23518: ST_TO_ADDR
// end ;
23519: GO 23415
23521: POP
23522: POP
// repeat wait ( 0 0$1 ) ;
23523: LD_INT 35
23525: PPUSH
23526: CALL_OW 67
// for un in tmp do
23530: LD_ADDR_VAR 0 2
23534: PUSH
23535: LD_VAR 0 3
23539: PUSH
23540: FOR_IN
23541: IFFALSE 23615
// begin if IsDead ( un ) then
23543: LD_VAR 0 2
23547: PPUSH
23548: CALL_OW 301
23552: IFFALSE 23572
// begin tmp := tmp diff un ;
23554: LD_ADDR_VAR 0 3
23558: PUSH
23559: LD_VAR 0 3
23563: PUSH
23564: LD_VAR 0 2
23568: DIFF
23569: ST_TO_ADDR
// continue ;
23570: GO 23540
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23572: LD_VAR 0 2
23576: PPUSH
23577: LD_INT 3
23579: PUSH
23580: LD_INT 22
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PPUSH
23594: CALL_OW 69
23598: PPUSH
23599: LD_VAR 0 2
23603: PPUSH
23604: CALL_OW 74
23608: PPUSH
23609: CALL_OW 115
// end ;
23613: GO 23540
23615: POP
23616: POP
// until not tmp ;
23617: LD_VAR 0 3
23621: NOT
23622: IFFALSE 23523
// end ;
23624: PPOPN 3
23626: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23627: LD_EXP 37
23631: PUSH
23632: LD_EXP 62
23636: AND
23637: IFFALSE 23691
23639: GO 23641
23641: DISABLE
// begin ToLua ( displayTroll(); ) ;
23642: LD_STRING displayTroll();
23644: PPUSH
23645: CALL_OW 559
// wait ( 3 3$00 ) ;
23649: LD_INT 6300
23651: PPUSH
23652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23656: LD_STRING hideTroll();
23658: PPUSH
23659: CALL_OW 559
// wait ( 1 1$00 ) ;
23663: LD_INT 2100
23665: PPUSH
23666: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23670: LD_STRING displayTroll();
23672: PPUSH
23673: CALL_OW 559
// wait ( 1 1$00 ) ;
23677: LD_INT 2100
23679: PPUSH
23680: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23684: LD_STRING hideTroll();
23686: PPUSH
23687: CALL_OW 559
// end ;
23691: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23692: LD_EXP 37
23696: PUSH
23697: LD_EXP 63
23701: AND
23702: IFFALSE 23765
23704: GO 23706
23706: DISABLE
23707: LD_INT 0
23709: PPUSH
// begin p := 0 ;
23710: LD_ADDR_VAR 0 1
23714: PUSH
23715: LD_INT 0
23717: ST_TO_ADDR
// repeat game_speed := 1 ;
23718: LD_ADDR_OWVAR 65
23722: PUSH
23723: LD_INT 1
23725: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23726: LD_INT 35
23728: PPUSH
23729: CALL_OW 67
// p := p + 1 ;
23733: LD_ADDR_VAR 0 1
23737: PUSH
23738: LD_VAR 0 1
23742: PUSH
23743: LD_INT 1
23745: PLUS
23746: ST_TO_ADDR
// until p >= 60 ;
23747: LD_VAR 0 1
23751: PUSH
23752: LD_INT 60
23754: GREATEREQUAL
23755: IFFALSE 23718
// game_speed := 4 ;
23757: LD_ADDR_OWVAR 65
23761: PUSH
23762: LD_INT 4
23764: ST_TO_ADDR
// end ;
23765: PPOPN 1
23767: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23768: LD_EXP 37
23772: PUSH
23773: LD_EXP 64
23777: AND
23778: IFFALSE 23924
23780: GO 23782
23782: DISABLE
23783: LD_INT 0
23785: PPUSH
23786: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23787: LD_ADDR_VAR 0 1
23791: PUSH
23792: LD_INT 22
23794: PUSH
23795: LD_OWVAR 2
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: LD_INT 30
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 30
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PPUSH
23836: CALL_OW 69
23840: ST_TO_ADDR
// if not depot then
23841: LD_VAR 0 1
23845: NOT
23846: IFFALSE 23850
// exit ;
23848: GO 23924
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23850: LD_ADDR_VAR 0 2
23854: PUSH
23855: LD_VAR 0 1
23859: PUSH
23860: LD_INT 1
23862: PPUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 12
23872: ARRAY
23873: PPUSH
23874: CALL_OW 274
23878: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23879: LD_VAR 0 2
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: LD_INT 0
23889: PPUSH
23890: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23894: LD_VAR 0 2
23898: PPUSH
23899: LD_INT 2
23901: PPUSH
23902: LD_INT 0
23904: PPUSH
23905: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23909: LD_VAR 0 2
23913: PPUSH
23914: LD_INT 3
23916: PPUSH
23917: LD_INT 0
23919: PPUSH
23920: CALL_OW 277
// end ;
23924: PPOPN 2
23926: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23927: LD_EXP 37
23931: PUSH
23932: LD_EXP 65
23936: AND
23937: IFFALSE 24034
23939: GO 23941
23941: DISABLE
23942: LD_INT 0
23944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23945: LD_ADDR_VAR 0 1
23949: PUSH
23950: LD_INT 22
23952: PUSH
23953: LD_OWVAR 2
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 21
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 3
23974: PUSH
23975: LD_INT 23
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: PPUSH
23994: CALL_OW 69
23998: ST_TO_ADDR
// if not tmp then
23999: LD_VAR 0 1
24003: NOT
24004: IFFALSE 24008
// exit ;
24006: GO 24034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24008: LD_VAR 0 1
24012: PUSH
24013: LD_INT 1
24015: PPUSH
24016: LD_VAR 0 1
24020: PPUSH
24021: CALL_OW 12
24025: ARRAY
24026: PPUSH
24027: LD_INT 200
24029: PPUSH
24030: CALL_OW 234
// end ;
24034: PPOPN 1
24036: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24037: LD_EXP 37
24041: PUSH
24042: LD_EXP 66
24046: AND
24047: IFFALSE 24126
24049: GO 24051
24051: DISABLE
24052: LD_INT 0
24054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24055: LD_ADDR_VAR 0 1
24059: PUSH
24060: LD_INT 22
24062: PUSH
24063: LD_OWVAR 2
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 21
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PPUSH
24086: CALL_OW 69
24090: ST_TO_ADDR
// if not tmp then
24091: LD_VAR 0 1
24095: NOT
24096: IFFALSE 24100
// exit ;
24098: GO 24126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24100: LD_VAR 0 1
24104: PUSH
24105: LD_INT 1
24107: PPUSH
24108: LD_VAR 0 1
24112: PPUSH
24113: CALL_OW 12
24117: ARRAY
24118: PPUSH
24119: LD_INT 60
24121: PPUSH
24122: CALL_OW 234
// end ;
24126: PPOPN 1
24128: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24129: LD_EXP 37
24133: PUSH
24134: LD_EXP 67
24138: AND
24139: IFFALSE 24238
24141: GO 24143
24143: DISABLE
24144: LD_INT 0
24146: PPUSH
24147: PPUSH
// begin enable ;
24148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24149: LD_ADDR_VAR 0 1
24153: PUSH
24154: LD_INT 22
24156: PUSH
24157: LD_OWVAR 2
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 61
24168: PUSH
24169: EMPTY
24170: LIST
24171: PUSH
24172: LD_INT 33
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: PPUSH
24187: CALL_OW 69
24191: ST_TO_ADDR
// if not tmp then
24192: LD_VAR 0 1
24196: NOT
24197: IFFALSE 24201
// exit ;
24199: GO 24238
// for i in tmp do
24201: LD_ADDR_VAR 0 2
24205: PUSH
24206: LD_VAR 0 1
24210: PUSH
24211: FOR_IN
24212: IFFALSE 24236
// if IsControledBy ( i ) then
24214: LD_VAR 0 2
24218: PPUSH
24219: CALL_OW 312
24223: IFFALSE 24234
// ComUnlink ( i ) ;
24225: LD_VAR 0 2
24229: PPUSH
24230: CALL_OW 136
24234: GO 24211
24236: POP
24237: POP
// end ;
24238: PPOPN 2
24240: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24241: LD_EXP 37
24245: PUSH
24246: LD_EXP 68
24250: AND
24251: IFFALSE 24391
24253: GO 24255
24255: DISABLE
24256: LD_INT 0
24258: PPUSH
24259: PPUSH
// begin ToLua ( displayPowell(); ) ;
24260: LD_STRING displayPowell();
24262: PPUSH
24263: CALL_OW 559
// uc_side := 0 ;
24267: LD_ADDR_OWVAR 20
24271: PUSH
24272: LD_INT 0
24274: ST_TO_ADDR
// uc_nation := 2 ;
24275: LD_ADDR_OWVAR 21
24279: PUSH
24280: LD_INT 2
24282: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24283: LD_ADDR_OWVAR 37
24287: PUSH
24288: LD_INT 14
24290: ST_TO_ADDR
// vc_engine := engine_siberite ;
24291: LD_ADDR_OWVAR 39
24295: PUSH
24296: LD_INT 3
24298: ST_TO_ADDR
// vc_control := control_apeman ;
24299: LD_ADDR_OWVAR 38
24303: PUSH
24304: LD_INT 5
24306: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24307: LD_ADDR_OWVAR 40
24311: PUSH
24312: LD_INT 29
24314: ST_TO_ADDR
// un := CreateVehicle ;
24315: LD_ADDR_VAR 0 2
24319: PUSH
24320: CALL_OW 45
24324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24325: LD_VAR 0 2
24329: PPUSH
24330: LD_INT 1
24332: PPUSH
24333: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24337: LD_INT 35
24339: PPUSH
24340: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24344: LD_VAR 0 2
24348: PPUSH
24349: LD_INT 22
24351: PUSH
24352: LD_OWVAR 2
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PPUSH
24361: CALL_OW 69
24365: PPUSH
24366: LD_VAR 0 2
24370: PPUSH
24371: CALL_OW 74
24375: PPUSH
24376: CALL_OW 115
// until IsDead ( un ) ;
24380: LD_VAR 0 2
24384: PPUSH
24385: CALL_OW 301
24389: IFFALSE 24337
// end ;
24391: PPOPN 2
24393: END
// every 0 0$1 trigger StreamModeActive and sStu do
24394: LD_EXP 37
24398: PUSH
24399: LD_EXP 76
24403: AND
24404: IFFALSE 24420
24406: GO 24408
24408: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24409: LD_STRING displayStucuk();
24411: PPUSH
24412: CALL_OW 559
// ResetFog ;
24416: CALL_OW 335
// end ;
24420: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24421: LD_EXP 37
24425: PUSH
24426: LD_EXP 69
24430: AND
24431: IFFALSE 24572
24433: GO 24435
24435: DISABLE
24436: LD_INT 0
24438: PPUSH
24439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24440: LD_ADDR_VAR 0 2
24444: PUSH
24445: LD_INT 22
24447: PUSH
24448: LD_OWVAR 2
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 21
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PPUSH
24471: CALL_OW 69
24475: ST_TO_ADDR
// if not tmp then
24476: LD_VAR 0 2
24480: NOT
24481: IFFALSE 24485
// exit ;
24483: GO 24572
// un := tmp [ rand ( 1 , tmp ) ] ;
24485: LD_ADDR_VAR 0 1
24489: PUSH
24490: LD_VAR 0 2
24494: PUSH
24495: LD_INT 1
24497: PPUSH
24498: LD_VAR 0 2
24502: PPUSH
24503: CALL_OW 12
24507: ARRAY
24508: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24509: LD_VAR 0 1
24513: PPUSH
24514: LD_INT 0
24516: PPUSH
24517: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24521: LD_VAR 0 1
24525: PPUSH
24526: LD_OWVAR 3
24530: PUSH
24531: LD_VAR 0 1
24535: DIFF
24536: PPUSH
24537: LD_VAR 0 1
24541: PPUSH
24542: CALL_OW 74
24546: PPUSH
24547: CALL_OW 115
// wait ( 0 0$20 ) ;
24551: LD_INT 700
24553: PPUSH
24554: CALL_OW 67
// SetSide ( un , your_side ) ;
24558: LD_VAR 0 1
24562: PPUSH
24563: LD_OWVAR 2
24567: PPUSH
24568: CALL_OW 235
// end ;
24572: PPOPN 2
24574: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24575: LD_EXP 37
24579: PUSH
24580: LD_EXP 70
24584: AND
24585: IFFALSE 24691
24587: GO 24589
24589: DISABLE
24590: LD_INT 0
24592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24593: LD_ADDR_VAR 0 1
24597: PUSH
24598: LD_INT 22
24600: PUSH
24601: LD_OWVAR 2
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: LD_INT 30
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 30
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: LIST
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PPUSH
24642: CALL_OW 69
24646: ST_TO_ADDR
// if not depot then
24647: LD_VAR 0 1
24651: NOT
24652: IFFALSE 24656
// exit ;
24654: GO 24691
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24656: LD_VAR 0 1
24660: PUSH
24661: LD_INT 1
24663: ARRAY
24664: PPUSH
24665: CALL_OW 250
24669: PPUSH
24670: LD_VAR 0 1
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PPUSH
24679: CALL_OW 251
24683: PPUSH
24684: LD_INT 70
24686: PPUSH
24687: CALL_OW 495
// end ;
24691: PPOPN 1
24693: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24694: LD_EXP 37
24698: PUSH
24699: LD_EXP 71
24703: AND
24704: IFFALSE 24915
24706: GO 24708
24708: DISABLE
24709: LD_INT 0
24711: PPUSH
24712: PPUSH
24713: PPUSH
24714: PPUSH
24715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24716: LD_ADDR_VAR 0 5
24720: PUSH
24721: LD_INT 22
24723: PUSH
24724: LD_OWVAR 2
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 21
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PPUSH
24747: CALL_OW 69
24751: ST_TO_ADDR
// if not tmp then
24752: LD_VAR 0 5
24756: NOT
24757: IFFALSE 24761
// exit ;
24759: GO 24915
// for i in tmp do
24761: LD_ADDR_VAR 0 1
24765: PUSH
24766: LD_VAR 0 5
24770: PUSH
24771: FOR_IN
24772: IFFALSE 24913
// begin d := rand ( 0 , 5 ) ;
24774: LD_ADDR_VAR 0 4
24778: PUSH
24779: LD_INT 0
24781: PPUSH
24782: LD_INT 5
24784: PPUSH
24785: CALL_OW 12
24789: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_VAR 0 1
24799: PPUSH
24800: CALL_OW 250
24804: PPUSH
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_INT 3
24812: PPUSH
24813: LD_INT 12
24815: PPUSH
24816: CALL_OW 12
24820: PPUSH
24821: CALL_OW 272
24825: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24826: LD_ADDR_VAR 0 3
24830: PUSH
24831: LD_VAR 0 1
24835: PPUSH
24836: CALL_OW 251
24840: PPUSH
24841: LD_VAR 0 4
24845: PPUSH
24846: LD_INT 3
24848: PPUSH
24849: LD_INT 12
24851: PPUSH
24852: CALL_OW 12
24856: PPUSH
24857: CALL_OW 273
24861: ST_TO_ADDR
// if ValidHex ( x , y ) then
24862: LD_VAR 0 2
24866: PPUSH
24867: LD_VAR 0 3
24871: PPUSH
24872: CALL_OW 488
24876: IFFALSE 24911
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24878: LD_VAR 0 1
24882: PPUSH
24883: LD_VAR 0 2
24887: PPUSH
24888: LD_VAR 0 3
24892: PPUSH
24893: LD_INT 3
24895: PPUSH
24896: LD_INT 6
24898: PPUSH
24899: CALL_OW 12
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL_OW 483
// end ;
24911: GO 24771
24913: POP
24914: POP
// end ;
24915: PPOPN 5
24917: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24918: LD_EXP 37
24922: PUSH
24923: LD_EXP 72
24927: AND
24928: IFFALSE 25022
24930: GO 24932
24932: DISABLE
24933: LD_INT 0
24935: PPUSH
24936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24937: LD_ADDR_VAR 0 2
24941: PUSH
24942: LD_INT 22
24944: PUSH
24945: LD_OWVAR 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 32
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 21
24966: PUSH
24967: LD_INT 2
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: LIST
24978: PPUSH
24979: CALL_OW 69
24983: ST_TO_ADDR
// if not tmp then
24984: LD_VAR 0 2
24988: NOT
24989: IFFALSE 24993
// exit ;
24991: GO 25022
// for i in tmp do
24993: LD_ADDR_VAR 0 1
24997: PUSH
24998: LD_VAR 0 2
25002: PUSH
25003: FOR_IN
25004: IFFALSE 25020
// SetFuel ( i , 0 ) ;
25006: LD_VAR 0 1
25010: PPUSH
25011: LD_INT 0
25013: PPUSH
25014: CALL_OW 240
25018: GO 25003
25020: POP
25021: POP
// end ;
25022: PPOPN 2
25024: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25025: LD_EXP 37
25029: PUSH
25030: LD_EXP 73
25034: AND
25035: IFFALSE 25101
25037: GO 25039
25039: DISABLE
25040: LD_INT 0
25042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25043: LD_ADDR_VAR 0 1
25047: PUSH
25048: LD_INT 22
25050: PUSH
25051: LD_OWVAR 2
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 30
25062: PUSH
25063: LD_INT 29
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PPUSH
25074: CALL_OW 69
25078: ST_TO_ADDR
// if not tmp then
25079: LD_VAR 0 1
25083: NOT
25084: IFFALSE 25088
// exit ;
25086: GO 25101
// DestroyUnit ( tmp [ 1 ] ) ;
25088: LD_VAR 0 1
25092: PUSH
25093: LD_INT 1
25095: ARRAY
25096: PPUSH
25097: CALL_OW 65
// end ;
25101: PPOPN 1
25103: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25104: LD_EXP 37
25108: PUSH
25109: LD_EXP 75
25113: AND
25114: IFFALSE 25243
25116: GO 25118
25118: DISABLE
25119: LD_INT 0
25121: PPUSH
// begin uc_side := 0 ;
25122: LD_ADDR_OWVAR 20
25126: PUSH
25127: LD_INT 0
25129: ST_TO_ADDR
// uc_nation := nation_arabian ;
25130: LD_ADDR_OWVAR 21
25134: PUSH
25135: LD_INT 2
25137: ST_TO_ADDR
// hc_gallery :=  ;
25138: LD_ADDR_OWVAR 33
25142: PUSH
25143: LD_STRING 
25145: ST_TO_ADDR
// hc_name :=  ;
25146: LD_ADDR_OWVAR 26
25150: PUSH
25151: LD_STRING 
25153: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25154: LD_INT 1
25156: PPUSH
25157: LD_INT 11
25159: PPUSH
25160: LD_INT 10
25162: PPUSH
25163: CALL_OW 380
// un := CreateHuman ;
25167: LD_ADDR_VAR 0 1
25171: PUSH
25172: CALL_OW 44
25176: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25177: LD_VAR 0 1
25181: PPUSH
25182: LD_INT 1
25184: PPUSH
25185: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25189: LD_INT 35
25191: PPUSH
25192: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25196: LD_VAR 0 1
25200: PPUSH
25201: LD_INT 22
25203: PUSH
25204: LD_OWVAR 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PPUSH
25213: CALL_OW 69
25217: PPUSH
25218: LD_VAR 0 1
25222: PPUSH
25223: CALL_OW 74
25227: PPUSH
25228: CALL_OW 115
// until IsDead ( un ) ;
25232: LD_VAR 0 1
25236: PPUSH
25237: CALL_OW 301
25241: IFFALSE 25189
// end ;
25243: PPOPN 1
25245: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25246: LD_EXP 37
25250: PUSH
25251: LD_EXP 77
25255: AND
25256: IFFALSE 25268
25258: GO 25260
25260: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25261: LD_STRING earthquake(getX(game), 0, 32)
25263: PPUSH
25264: CALL_OW 559
25268: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25269: LD_EXP 37
25273: PUSH
25274: LD_EXP 78
25278: AND
25279: IFFALSE 25370
25281: GO 25283
25283: DISABLE
25284: LD_INT 0
25286: PPUSH
// begin enable ;
25287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25288: LD_ADDR_VAR 0 1
25292: PUSH
25293: LD_INT 22
25295: PUSH
25296: LD_OWVAR 2
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 21
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 33
25317: PUSH
25318: LD_INT 3
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: LIST
25329: PPUSH
25330: CALL_OW 69
25334: ST_TO_ADDR
// if not tmp then
25335: LD_VAR 0 1
25339: NOT
25340: IFFALSE 25344
// exit ;
25342: GO 25370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25344: LD_VAR 0 1
25348: PUSH
25349: LD_INT 1
25351: PPUSH
25352: LD_VAR 0 1
25356: PPUSH
25357: CALL_OW 12
25361: ARRAY
25362: PPUSH
25363: LD_INT 1
25365: PPUSH
25366: CALL_OW 234
// end ;
25370: PPOPN 1
25372: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25373: LD_EXP 37
25377: PUSH
25378: LD_EXP 79
25382: AND
25383: IFFALSE 25524
25385: GO 25387
25387: DISABLE
25388: LD_INT 0
25390: PPUSH
25391: PPUSH
25392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: LD_OWVAR 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 25
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PPUSH
25424: CALL_OW 69
25428: ST_TO_ADDR
// if not tmp then
25429: LD_VAR 0 3
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25524
// un := tmp [ rand ( 1 , tmp ) ] ;
25438: LD_ADDR_VAR 0 2
25442: PUSH
25443: LD_VAR 0 3
25447: PUSH
25448: LD_INT 1
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: CALL_OW 12
25460: ARRAY
25461: ST_TO_ADDR
// if Crawls ( un ) then
25462: LD_VAR 0 2
25466: PPUSH
25467: CALL_OW 318
25471: IFFALSE 25482
// ComWalk ( un ) ;
25473: LD_VAR 0 2
25477: PPUSH
25478: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25482: LD_VAR 0 2
25486: PPUSH
25487: LD_INT 9
25489: PPUSH
25490: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25494: LD_INT 28
25496: PPUSH
25497: LD_OWVAR 2
25501: PPUSH
25502: LD_INT 2
25504: PPUSH
25505: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25509: LD_INT 29
25511: PPUSH
25512: LD_OWVAR 2
25516: PPUSH
25517: LD_INT 2
25519: PPUSH
25520: CALL_OW 322
// end ;
25524: PPOPN 3
25526: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25527: LD_EXP 37
25531: PUSH
25532: LD_EXP 80
25536: AND
25537: IFFALSE 25648
25539: GO 25541
25541: DISABLE
25542: LD_INT 0
25544: PPUSH
25545: PPUSH
25546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_INT 22
25554: PUSH
25555: LD_OWVAR 2
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 25
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PPUSH
25578: CALL_OW 69
25582: ST_TO_ADDR
// if not tmp then
25583: LD_VAR 0 3
25587: NOT
25588: IFFALSE 25592
// exit ;
25590: GO 25648
// un := tmp [ rand ( 1 , tmp ) ] ;
25592: LD_ADDR_VAR 0 2
25596: PUSH
25597: LD_VAR 0 3
25601: PUSH
25602: LD_INT 1
25604: PPUSH
25605: LD_VAR 0 3
25609: PPUSH
25610: CALL_OW 12
25614: ARRAY
25615: ST_TO_ADDR
// if Crawls ( un ) then
25616: LD_VAR 0 2
25620: PPUSH
25621: CALL_OW 318
25625: IFFALSE 25636
// ComWalk ( un ) ;
25627: LD_VAR 0 2
25631: PPUSH
25632: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25636: LD_VAR 0 2
25640: PPUSH
25641: LD_INT 8
25643: PPUSH
25644: CALL_OW 336
// end ;
25648: PPOPN 3
25650: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25651: LD_EXP 37
25655: PUSH
25656: LD_EXP 81
25660: AND
25661: IFFALSE 25805
25663: GO 25665
25665: DISABLE
25666: LD_INT 0
25668: PPUSH
25669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25670: LD_ADDR_VAR 0 2
25674: PUSH
25675: LD_INT 22
25677: PUSH
25678: LD_OWVAR 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 21
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: LD_INT 34
25702: PUSH
25703: LD_INT 12
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 34
25712: PUSH
25713: LD_INT 51
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 34
25722: PUSH
25723: LD_INT 32
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: PPUSH
25741: CALL_OW 69
25745: ST_TO_ADDR
// if not tmp then
25746: LD_VAR 0 2
25750: NOT
25751: IFFALSE 25755
// exit ;
25753: GO 25805
// for i in tmp do
25755: LD_ADDR_VAR 0 1
25759: PUSH
25760: LD_VAR 0 2
25764: PUSH
25765: FOR_IN
25766: IFFALSE 25803
// if GetCargo ( i , mat_artifact ) = 0 then
25768: LD_VAR 0 1
25772: PPUSH
25773: LD_INT 4
25775: PPUSH
25776: CALL_OW 289
25780: PUSH
25781: LD_INT 0
25783: EQUAL
25784: IFFALSE 25801
// SetCargo ( i , mat_siberit , 100 ) ;
25786: LD_VAR 0 1
25790: PPUSH
25791: LD_INT 3
25793: PPUSH
25794: LD_INT 100
25796: PPUSH
25797: CALL_OW 290
25801: GO 25765
25803: POP
25804: POP
// end ;
25805: PPOPN 2
25807: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25808: LD_EXP 37
25812: PUSH
25813: LD_EXP 82
25817: AND
25818: IFFALSE 26001
25820: GO 25822
25822: DISABLE
25823: LD_INT 0
25825: PPUSH
25826: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25827: LD_ADDR_VAR 0 2
25831: PUSH
25832: LD_INT 22
25834: PUSH
25835: LD_OWVAR 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PPUSH
25844: CALL_OW 69
25848: ST_TO_ADDR
// if not tmp then
25849: LD_VAR 0 2
25853: NOT
25854: IFFALSE 25858
// exit ;
25856: GO 26001
// for i := 1 to 2 do
25858: LD_ADDR_VAR 0 1
25862: PUSH
25863: DOUBLE
25864: LD_INT 1
25866: DEC
25867: ST_TO_ADDR
25868: LD_INT 2
25870: PUSH
25871: FOR_TO
25872: IFFALSE 25999
// begin uc_side := your_side ;
25874: LD_ADDR_OWVAR 20
25878: PUSH
25879: LD_OWVAR 2
25883: ST_TO_ADDR
// uc_nation := nation_american ;
25884: LD_ADDR_OWVAR 21
25888: PUSH
25889: LD_INT 1
25891: ST_TO_ADDR
// vc_chassis := us_morphling ;
25892: LD_ADDR_OWVAR 37
25896: PUSH
25897: LD_INT 5
25899: ST_TO_ADDR
// vc_engine := engine_siberite ;
25900: LD_ADDR_OWVAR 39
25904: PUSH
25905: LD_INT 3
25907: ST_TO_ADDR
// vc_control := control_computer ;
25908: LD_ADDR_OWVAR 38
25912: PUSH
25913: LD_INT 3
25915: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25916: LD_ADDR_OWVAR 40
25920: PUSH
25921: LD_INT 10
25923: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25924: LD_VAR 0 2
25928: PUSH
25929: LD_INT 1
25931: ARRAY
25932: PPUSH
25933: CALL_OW 310
25937: NOT
25938: IFFALSE 25985
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25940: CALL_OW 45
25944: PPUSH
25945: LD_VAR 0 2
25949: PUSH
25950: LD_INT 1
25952: ARRAY
25953: PPUSH
25954: CALL_OW 250
25958: PPUSH
25959: LD_VAR 0 2
25963: PUSH
25964: LD_INT 1
25966: ARRAY
25967: PPUSH
25968: CALL_OW 251
25972: PPUSH
25973: LD_INT 12
25975: PPUSH
25976: LD_INT 1
25978: PPUSH
25979: CALL_OW 50
25983: GO 25997
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25985: CALL_OW 45
25989: PPUSH
25990: LD_INT 1
25992: PPUSH
25993: CALL_OW 51
// end ;
25997: GO 25871
25999: POP
26000: POP
// end ;
26001: PPOPN 2
26003: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26004: LD_EXP 37
26008: PUSH
26009: LD_EXP 83
26013: AND
26014: IFFALSE 26236
26016: GO 26018
26018: DISABLE
26019: LD_INT 0
26021: PPUSH
26022: PPUSH
26023: PPUSH
26024: PPUSH
26025: PPUSH
26026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26027: LD_ADDR_VAR 0 6
26031: PUSH
26032: LD_INT 22
26034: PUSH
26035: LD_OWVAR 2
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 21
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 3
26056: PUSH
26057: LD_INT 23
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: PPUSH
26076: CALL_OW 69
26080: ST_TO_ADDR
// if not tmp then
26081: LD_VAR 0 6
26085: NOT
26086: IFFALSE 26090
// exit ;
26088: GO 26236
// s1 := rand ( 1 , 4 ) ;
26090: LD_ADDR_VAR 0 2
26094: PUSH
26095: LD_INT 1
26097: PPUSH
26098: LD_INT 4
26100: PPUSH
26101: CALL_OW 12
26105: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26106: LD_ADDR_VAR 0 4
26110: PUSH
26111: LD_VAR 0 6
26115: PUSH
26116: LD_INT 1
26118: ARRAY
26119: PPUSH
26120: LD_VAR 0 2
26124: PPUSH
26125: CALL_OW 259
26129: ST_TO_ADDR
// if s1 = 1 then
26130: LD_VAR 0 2
26134: PUSH
26135: LD_INT 1
26137: EQUAL
26138: IFFALSE 26158
// s2 := rand ( 2 , 4 ) else
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: LD_INT 2
26147: PPUSH
26148: LD_INT 4
26150: PPUSH
26151: CALL_OW 12
26155: ST_TO_ADDR
26156: GO 26166
// s2 := 1 ;
26158: LD_ADDR_VAR 0 3
26162: PUSH
26163: LD_INT 1
26165: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26166: LD_ADDR_VAR 0 5
26170: PUSH
26171: LD_VAR 0 6
26175: PUSH
26176: LD_INT 1
26178: ARRAY
26179: PPUSH
26180: LD_VAR 0 3
26184: PPUSH
26185: CALL_OW 259
26189: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26190: LD_VAR 0 6
26194: PUSH
26195: LD_INT 1
26197: ARRAY
26198: PPUSH
26199: LD_VAR 0 2
26203: PPUSH
26204: LD_VAR 0 5
26208: PPUSH
26209: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26213: LD_VAR 0 6
26217: PUSH
26218: LD_INT 1
26220: ARRAY
26221: PPUSH
26222: LD_VAR 0 3
26226: PPUSH
26227: LD_VAR 0 4
26231: PPUSH
26232: CALL_OW 237
// end ;
26236: PPOPN 6
26238: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26239: LD_EXP 37
26243: PUSH
26244: LD_EXP 84
26248: AND
26249: IFFALSE 26328
26251: GO 26253
26253: DISABLE
26254: LD_INT 0
26256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26257: LD_ADDR_VAR 0 1
26261: PUSH
26262: LD_INT 22
26264: PUSH
26265: LD_OWVAR 2
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 30
26276: PUSH
26277: LD_INT 3
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PPUSH
26288: CALL_OW 69
26292: ST_TO_ADDR
// if not tmp then
26293: LD_VAR 0 1
26297: NOT
26298: IFFALSE 26302
// exit ;
26300: GO 26328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26302: LD_VAR 0 1
26306: PUSH
26307: LD_INT 1
26309: PPUSH
26310: LD_VAR 0 1
26314: PPUSH
26315: CALL_OW 12
26319: ARRAY
26320: PPUSH
26321: LD_INT 1
26323: PPUSH
26324: CALL_OW 234
// end ;
26328: PPOPN 1
26330: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26331: LD_EXP 37
26335: PUSH
26336: LD_EXP 85
26340: AND
26341: IFFALSE 26453
26343: GO 26345
26345: DISABLE
26346: LD_INT 0
26348: PPUSH
26349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26350: LD_ADDR_VAR 0 2
26354: PUSH
26355: LD_INT 22
26357: PUSH
26358: LD_OWVAR 2
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 2
26369: PUSH
26370: LD_INT 30
26372: PUSH
26373: LD_INT 27
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 30
26382: PUSH
26383: LD_INT 26
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 30
26392: PUSH
26393: LD_INT 28
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 69
26414: ST_TO_ADDR
// if not tmp then
26415: LD_VAR 0 2
26419: NOT
26420: IFFALSE 26424
// exit ;
26422: GO 26453
// for i in tmp do
26424: LD_ADDR_VAR 0 1
26428: PUSH
26429: LD_VAR 0 2
26433: PUSH
26434: FOR_IN
26435: IFFALSE 26451
// SetLives ( i , 1 ) ;
26437: LD_VAR 0 1
26441: PPUSH
26442: LD_INT 1
26444: PPUSH
26445: CALL_OW 234
26449: GO 26434
26451: POP
26452: POP
// end ;
26453: PPOPN 2
26455: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26456: LD_EXP 37
26460: PUSH
26461: LD_EXP 86
26465: AND
26466: IFFALSE 26753
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
// begin i := rand ( 1 , 7 ) ;
26476: LD_ADDR_VAR 0 1
26480: PUSH
26481: LD_INT 1
26483: PPUSH
26484: LD_INT 7
26486: PPUSH
26487: CALL_OW 12
26491: ST_TO_ADDR
// case i of 1 :
26492: LD_VAR 0 1
26496: PUSH
26497: LD_INT 1
26499: DOUBLE
26500: EQUAL
26501: IFTRUE 26505
26503: GO 26515
26505: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26506: LD_STRING earthquake(getX(game), 0, 32)
26508: PPUSH
26509: CALL_OW 559
26513: GO 26753
26515: LD_INT 2
26517: DOUBLE
26518: EQUAL
26519: IFTRUE 26523
26521: GO 26537
26523: POP
// begin ToLua ( displayStucuk(); ) ;
26524: LD_STRING displayStucuk();
26526: PPUSH
26527: CALL_OW 559
// ResetFog ;
26531: CALL_OW 335
// end ; 3 :
26535: GO 26753
26537: LD_INT 3
26539: DOUBLE
26540: EQUAL
26541: IFTRUE 26545
26543: GO 26649
26545: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26546: LD_ADDR_VAR 0 2
26550: PUSH
26551: LD_INT 22
26553: PUSH
26554: LD_OWVAR 2
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 25
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PPUSH
26577: CALL_OW 69
26581: ST_TO_ADDR
// if not tmp then
26582: LD_VAR 0 2
26586: NOT
26587: IFFALSE 26591
// exit ;
26589: GO 26753
// un := tmp [ rand ( 1 , tmp ) ] ;
26591: LD_ADDR_VAR 0 3
26595: PUSH
26596: LD_VAR 0 2
26600: PUSH
26601: LD_INT 1
26603: PPUSH
26604: LD_VAR 0 2
26608: PPUSH
26609: CALL_OW 12
26613: ARRAY
26614: ST_TO_ADDR
// if Crawls ( un ) then
26615: LD_VAR 0 3
26619: PPUSH
26620: CALL_OW 318
26624: IFFALSE 26635
// ComWalk ( un ) ;
26626: LD_VAR 0 3
26630: PPUSH
26631: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26635: LD_VAR 0 3
26639: PPUSH
26640: LD_INT 8
26642: PPUSH
26643: CALL_OW 336
// end ; 4 :
26647: GO 26753
26649: LD_INT 4
26651: DOUBLE
26652: EQUAL
26653: IFTRUE 26657
26655: GO 26731
26657: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26658: LD_ADDR_VAR 0 2
26662: PUSH
26663: LD_INT 22
26665: PUSH
26666: LD_OWVAR 2
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 30
26677: PUSH
26678: LD_INT 29
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PPUSH
26689: CALL_OW 69
26693: ST_TO_ADDR
// if not tmp then
26694: LD_VAR 0 2
26698: NOT
26699: IFFALSE 26703
// exit ;
26701: GO 26753
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26703: LD_VAR 0 2
26707: PUSH
26708: LD_INT 1
26710: ARRAY
26711: PPUSH
26712: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26716: LD_VAR 0 2
26720: PUSH
26721: LD_INT 1
26723: ARRAY
26724: PPUSH
26725: CALL_OW 65
// end ; 5 .. 7 :
26729: GO 26753
26731: LD_INT 5
26733: DOUBLE
26734: GREATEREQUAL
26735: IFFALSE 26743
26737: LD_INT 7
26739: DOUBLE
26740: LESSEQUAL
26741: IFTRUE 26745
26743: GO 26752
26745: POP
// StreamSibBomb ; end ;
26746: CALL 22990 0 0
26750: GO 26753
26752: POP
// end ;
26753: PPOPN 3
26755: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26756: LD_EXP 37
26760: PUSH
26761: LD_EXP 87
26765: AND
26766: IFFALSE 26922
26768: GO 26770
26770: DISABLE
26771: LD_INT 0
26773: PPUSH
26774: PPUSH
26775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26776: LD_ADDR_VAR 0 2
26780: PUSH
26781: LD_INT 81
26783: PUSH
26784: LD_OWVAR 2
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 21
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 21
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PPUSH
26825: CALL_OW 69
26829: ST_TO_ADDR
// if not tmp then
26830: LD_VAR 0 2
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 26922
// p := 0 ;
26839: LD_ADDR_VAR 0 3
26843: PUSH
26844: LD_INT 0
26846: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26847: LD_INT 35
26849: PPUSH
26850: CALL_OW 67
// p := p + 1 ;
26854: LD_ADDR_VAR 0 3
26858: PUSH
26859: LD_VAR 0 3
26863: PUSH
26864: LD_INT 1
26866: PLUS
26867: ST_TO_ADDR
// for i in tmp do
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_VAR 0 2
26877: PUSH
26878: FOR_IN
26879: IFFALSE 26910
// if GetLives ( i ) < 1000 then
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 256
26890: PUSH
26891: LD_INT 1000
26893: LESS
26894: IFFALSE 26908
// SetLives ( i , 1000 ) ;
26896: LD_VAR 0 1
26900: PPUSH
26901: LD_INT 1000
26903: PPUSH
26904: CALL_OW 234
26908: GO 26878
26910: POP
26911: POP
// until p > 20 ;
26912: LD_VAR 0 3
26916: PUSH
26917: LD_INT 20
26919: GREATER
26920: IFFALSE 26847
// end ;
26922: PPOPN 3
26924: END
// every 0 0$1 trigger StreamModeActive and sTime do
26925: LD_EXP 37
26929: PUSH
26930: LD_EXP 88
26934: AND
26935: IFFALSE 26970
26937: GO 26939
26939: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26940: LD_INT 28
26942: PPUSH
26943: LD_OWVAR 2
26947: PPUSH
26948: LD_INT 2
26950: PPUSH
26951: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26955: LD_INT 30
26957: PPUSH
26958: LD_OWVAR 2
26962: PPUSH
26963: LD_INT 2
26965: PPUSH
26966: CALL_OW 322
// end ;
26970: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26971: LD_EXP 37
26975: PUSH
26976: LD_EXP 89
26980: AND
26981: IFFALSE 27102
26983: GO 26985
26985: DISABLE
26986: LD_INT 0
26988: PPUSH
26989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26990: LD_ADDR_VAR 0 2
26994: PUSH
26995: LD_INT 22
26997: PUSH
26998: LD_OWVAR 2
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 21
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 3
27019: PUSH
27020: LD_INT 23
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 69
27043: ST_TO_ADDR
// if not tmp then
27044: LD_VAR 0 2
27048: NOT
27049: IFFALSE 27053
// exit ;
27051: GO 27102
// for i in tmp do
27053: LD_ADDR_VAR 0 1
27057: PUSH
27058: LD_VAR 0 2
27062: PUSH
27063: FOR_IN
27064: IFFALSE 27100
// begin if Crawls ( i ) then
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL_OW 318
27075: IFFALSE 27086
// ComWalk ( i ) ;
27077: LD_VAR 0 1
27081: PPUSH
27082: CALL_OW 138
// SetClass ( i , 2 ) ;
27086: LD_VAR 0 1
27090: PPUSH
27091: LD_INT 2
27093: PPUSH
27094: CALL_OW 336
// end ;
27098: GO 27063
27100: POP
27101: POP
// end ;
27102: PPOPN 2
27104: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27105: LD_EXP 37
27109: PUSH
27110: LD_EXP 90
27114: AND
27115: IFFALSE 27403
27117: GO 27119
27119: DISABLE
27120: LD_INT 0
27122: PPUSH
27123: PPUSH
27124: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27125: LD_OWVAR 2
27129: PPUSH
27130: LD_INT 9
27132: PPUSH
27133: LD_INT 1
27135: PPUSH
27136: LD_INT 1
27138: PPUSH
27139: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27143: LD_INT 9
27145: PPUSH
27146: LD_OWVAR 2
27150: PPUSH
27151: CALL_OW 343
// uc_side := 9 ;
27155: LD_ADDR_OWVAR 20
27159: PUSH
27160: LD_INT 9
27162: ST_TO_ADDR
// uc_nation := 2 ;
27163: LD_ADDR_OWVAR 21
27167: PUSH
27168: LD_INT 2
27170: ST_TO_ADDR
// hc_name := Dark Warrior ;
27171: LD_ADDR_OWVAR 26
27175: PUSH
27176: LD_STRING Dark Warrior
27178: ST_TO_ADDR
// hc_gallery :=  ;
27179: LD_ADDR_OWVAR 33
27183: PUSH
27184: LD_STRING 
27186: ST_TO_ADDR
// hc_noskilllimit := true ;
27187: LD_ADDR_OWVAR 76
27191: PUSH
27192: LD_INT 1
27194: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27195: LD_ADDR_OWVAR 31
27199: PUSH
27200: LD_INT 30
27202: PUSH
27203: LD_INT 30
27205: PUSH
27206: LD_INT 30
27208: PUSH
27209: LD_INT 30
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: ST_TO_ADDR
// un := CreateHuman ;
27218: LD_ADDR_VAR 0 3
27222: PUSH
27223: CALL_OW 44
27227: ST_TO_ADDR
// hc_noskilllimit := false ;
27228: LD_ADDR_OWVAR 76
27232: PUSH
27233: LD_INT 0
27235: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27236: LD_VAR 0 3
27240: PPUSH
27241: LD_INT 1
27243: PPUSH
27244: CALL_OW 51
// ToLua ( playRanger() ) ;
27248: LD_STRING playRanger()
27250: PPUSH
27251: CALL_OW 559
// p := 0 ;
27255: LD_ADDR_VAR 0 2
27259: PUSH
27260: LD_INT 0
27262: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27263: LD_INT 35
27265: PPUSH
27266: CALL_OW 67
// p := p + 1 ;
27270: LD_ADDR_VAR 0 2
27274: PUSH
27275: LD_VAR 0 2
27279: PUSH
27280: LD_INT 1
27282: PLUS
27283: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27284: LD_VAR 0 3
27288: PPUSH
27289: CALL_OW 256
27293: PUSH
27294: LD_INT 1000
27296: LESS
27297: IFFALSE 27311
// SetLives ( un , 1000 ) ;
27299: LD_VAR 0 3
27303: PPUSH
27304: LD_INT 1000
27306: PPUSH
27307: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27311: LD_VAR 0 3
27315: PPUSH
27316: LD_INT 81
27318: PUSH
27319: LD_OWVAR 2
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 91
27330: PUSH
27331: LD_VAR 0 3
27335: PUSH
27336: LD_INT 30
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PPUSH
27348: CALL_OW 69
27352: PPUSH
27353: LD_VAR 0 3
27357: PPUSH
27358: CALL_OW 74
27362: PPUSH
27363: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27367: LD_VAR 0 2
27371: PUSH
27372: LD_INT 80
27374: GREATER
27375: PUSH
27376: LD_VAR 0 3
27380: PPUSH
27381: CALL_OW 301
27385: OR
27386: IFFALSE 27263
// if un then
27388: LD_VAR 0 3
27392: IFFALSE 27403
// RemoveUnit ( un ) ;
27394: LD_VAR 0 3
27398: PPUSH
27399: CALL_OW 64
// end ;
27403: PPOPN 3
27405: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27406: LD_EXP 91
27410: IFFALSE 27526
27412: GO 27414
27414: DISABLE
27415: LD_INT 0
27417: PPUSH
27418: PPUSH
27419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27420: LD_ADDR_VAR 0 2
27424: PUSH
27425: LD_INT 81
27427: PUSH
27428: LD_OWVAR 2
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 21
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27456: LD_STRING playComputer()
27458: PPUSH
27459: CALL_OW 559
// if not tmp then
27463: LD_VAR 0 2
27467: NOT
27468: IFFALSE 27472
// exit ;
27470: GO 27526
// for i in tmp do
27472: LD_ADDR_VAR 0 1
27476: PUSH
27477: LD_VAR 0 2
27481: PUSH
27482: FOR_IN
27483: IFFALSE 27524
// for j := 1 to 4 do
27485: LD_ADDR_VAR 0 3
27489: PUSH
27490: DOUBLE
27491: LD_INT 1
27493: DEC
27494: ST_TO_ADDR
27495: LD_INT 4
27497: PUSH
27498: FOR_TO
27499: IFFALSE 27520
// SetSkill ( i , j , 10 ) ;
27501: LD_VAR 0 1
27505: PPUSH
27506: LD_VAR 0 3
27510: PPUSH
27511: LD_INT 10
27513: PPUSH
27514: CALL_OW 237
27518: GO 27498
27520: POP
27521: POP
27522: GO 27482
27524: POP
27525: POP
// end ;
27526: PPOPN 3
27528: END
// every 0 0$1 trigger s30 do var i , tmp ;
27529: LD_EXP 92
27533: IFFALSE 27602
27535: GO 27537
27537: DISABLE
27538: LD_INT 0
27540: PPUSH
27541: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27542: LD_ADDR_VAR 0 2
27546: PUSH
27547: LD_INT 22
27549: PUSH
27550: LD_OWVAR 2
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PPUSH
27559: CALL_OW 69
27563: ST_TO_ADDR
// if not tmp then
27564: LD_VAR 0 2
27568: NOT
27569: IFFALSE 27573
// exit ;
27571: GO 27602
// for i in tmp do
27573: LD_ADDR_VAR 0 1
27577: PUSH
27578: LD_VAR 0 2
27582: PUSH
27583: FOR_IN
27584: IFFALSE 27600
// SetLives ( i , 300 ) ;
27586: LD_VAR 0 1
27590: PPUSH
27591: LD_INT 300
27593: PPUSH
27594: CALL_OW 234
27598: GO 27583
27600: POP
27601: POP
// end ;
27602: PPOPN 2
27604: END
// every 0 0$1 trigger s60 do var i , tmp ;
27605: LD_EXP 93
27609: IFFALSE 27678
27611: GO 27613
27613: DISABLE
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27618: LD_ADDR_VAR 0 2
27622: PUSH
27623: LD_INT 22
27625: PUSH
27626: LD_OWVAR 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 69
27639: ST_TO_ADDR
// if not tmp then
27640: LD_VAR 0 2
27644: NOT
27645: IFFALSE 27649
// exit ;
27647: GO 27678
// for i in tmp do
27649: LD_ADDR_VAR 0 1
27653: PUSH
27654: LD_VAR 0 2
27658: PUSH
27659: FOR_IN
27660: IFFALSE 27676
// SetLives ( i , 600 ) ;
27662: LD_VAR 0 1
27666: PPUSH
27667: LD_INT 600
27669: PPUSH
27670: CALL_OW 234
27674: GO 27659
27676: POP
27677: POP
// end ;
27678: PPOPN 2
27680: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27681: LD_INT 0
27683: PPUSH
// case cmd of 301 :
27684: LD_VAR 0 1
27688: PUSH
27689: LD_INT 301
27691: DOUBLE
27692: EQUAL
27693: IFTRUE 27697
27695: GO 27729
27697: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27698: LD_VAR 0 6
27702: PPUSH
27703: LD_VAR 0 7
27707: PPUSH
27708: LD_VAR 0 8
27712: PPUSH
27713: LD_VAR 0 4
27717: PPUSH
27718: LD_VAR 0 5
27722: PPUSH
27723: CALL 28930 0 5
27727: GO 27850
27729: LD_INT 302
27731: DOUBLE
27732: EQUAL
27733: IFTRUE 27737
27735: GO 27774
27737: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27738: LD_VAR 0 6
27742: PPUSH
27743: LD_VAR 0 7
27747: PPUSH
27748: LD_VAR 0 8
27752: PPUSH
27753: LD_VAR 0 9
27757: PPUSH
27758: LD_VAR 0 4
27762: PPUSH
27763: LD_VAR 0 5
27767: PPUSH
27768: CALL 29021 0 6
27772: GO 27850
27774: LD_INT 303
27776: DOUBLE
27777: EQUAL
27778: IFTRUE 27782
27780: GO 27819
27782: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27783: LD_VAR 0 6
27787: PPUSH
27788: LD_VAR 0 7
27792: PPUSH
27793: LD_VAR 0 8
27797: PPUSH
27798: LD_VAR 0 9
27802: PPUSH
27803: LD_VAR 0 4
27807: PPUSH
27808: LD_VAR 0 5
27812: PPUSH
27813: CALL 27855 0 6
27817: GO 27850
27819: LD_INT 304
27821: DOUBLE
27822: EQUAL
27823: IFTRUE 27827
27825: GO 27849
27827: POP
// hHackTeleport ( unit , x , y ) ; end ;
27828: LD_VAR 0 2
27832: PPUSH
27833: LD_VAR 0 4
27837: PPUSH
27838: LD_VAR 0 5
27842: PPUSH
27843: CALL 29614 0 3
27847: GO 27850
27849: POP
// end ;
27850: LD_VAR 0 12
27854: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27855: LD_INT 0
27857: PPUSH
27858: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27859: LD_VAR 0 1
27863: PUSH
27864: LD_INT 1
27866: LESS
27867: PUSH
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 3
27875: GREATER
27876: OR
27877: PUSH
27878: LD_VAR 0 5
27882: PPUSH
27883: LD_VAR 0 6
27887: PPUSH
27888: CALL_OW 428
27892: OR
27893: IFFALSE 27897
// exit ;
27895: GO 28617
// uc_side := your_side ;
27897: LD_ADDR_OWVAR 20
27901: PUSH
27902: LD_OWVAR 2
27906: ST_TO_ADDR
// uc_nation := nation ;
27907: LD_ADDR_OWVAR 21
27911: PUSH
27912: LD_VAR 0 1
27916: ST_TO_ADDR
// bc_level = 1 ;
27917: LD_ADDR_OWVAR 43
27921: PUSH
27922: LD_INT 1
27924: ST_TO_ADDR
// case btype of 1 :
27925: LD_VAR 0 2
27929: PUSH
27930: LD_INT 1
27932: DOUBLE
27933: EQUAL
27934: IFTRUE 27938
27936: GO 27949
27938: POP
// bc_type := b_depot ; 2 :
27939: LD_ADDR_OWVAR 42
27943: PUSH
27944: LD_INT 0
27946: ST_TO_ADDR
27947: GO 28561
27949: LD_INT 2
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 27968
27957: POP
// bc_type := b_warehouse ; 3 :
27958: LD_ADDR_OWVAR 42
27962: PUSH
27963: LD_INT 1
27965: ST_TO_ADDR
27966: GO 28561
27968: LD_INT 3
27970: DOUBLE
27971: EQUAL
27972: IFTRUE 27976
27974: GO 27987
27976: POP
// bc_type := b_lab ; 4 .. 9 :
27977: LD_ADDR_OWVAR 42
27981: PUSH
27982: LD_INT 6
27984: ST_TO_ADDR
27985: GO 28561
27987: LD_INT 4
27989: DOUBLE
27990: GREATEREQUAL
27991: IFFALSE 27999
27993: LD_INT 9
27995: DOUBLE
27996: LESSEQUAL
27997: IFTRUE 28001
27999: GO 28053
28001: POP
// begin bc_type := b_lab_half ;
28002: LD_ADDR_OWVAR 42
28006: PUSH
28007: LD_INT 7
28009: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28010: LD_ADDR_OWVAR 44
28014: PUSH
28015: LD_INT 10
28017: PUSH
28018: LD_INT 11
28020: PUSH
28021: LD_INT 12
28023: PUSH
28024: LD_INT 15
28026: PUSH
28027: LD_INT 14
28029: PUSH
28030: LD_INT 13
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: PUSH
28041: LD_VAR 0 2
28045: PUSH
28046: LD_INT 3
28048: MINUS
28049: ARRAY
28050: ST_TO_ADDR
// end ; 10 .. 13 :
28051: GO 28561
28053: LD_INT 10
28055: DOUBLE
28056: GREATEREQUAL
28057: IFFALSE 28065
28059: LD_INT 13
28061: DOUBLE
28062: LESSEQUAL
28063: IFTRUE 28067
28065: GO 28144
28067: POP
// begin bc_type := b_lab_full ;
28068: LD_ADDR_OWVAR 42
28072: PUSH
28073: LD_INT 8
28075: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28076: LD_ADDR_OWVAR 44
28080: PUSH
28081: LD_INT 10
28083: PUSH
28084: LD_INT 12
28086: PUSH
28087: LD_INT 14
28089: PUSH
28090: LD_INT 13
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: PUSH
28099: LD_VAR 0 2
28103: PUSH
28104: LD_INT 9
28106: MINUS
28107: ARRAY
28108: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28109: LD_ADDR_OWVAR 45
28113: PUSH
28114: LD_INT 11
28116: PUSH
28117: LD_INT 15
28119: PUSH
28120: LD_INT 12
28122: PUSH
28123: LD_INT 15
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: PUSH
28132: LD_VAR 0 2
28136: PUSH
28137: LD_INT 9
28139: MINUS
28140: ARRAY
28141: ST_TO_ADDR
// end ; 14 :
28142: GO 28561
28144: LD_INT 14
28146: DOUBLE
28147: EQUAL
28148: IFTRUE 28152
28150: GO 28163
28152: POP
// bc_type := b_workshop ; 15 :
28153: LD_ADDR_OWVAR 42
28157: PUSH
28158: LD_INT 2
28160: ST_TO_ADDR
28161: GO 28561
28163: LD_INT 15
28165: DOUBLE
28166: EQUAL
28167: IFTRUE 28171
28169: GO 28182
28171: POP
// bc_type := b_factory ; 16 :
28172: LD_ADDR_OWVAR 42
28176: PUSH
28177: LD_INT 3
28179: ST_TO_ADDR
28180: GO 28561
28182: LD_INT 16
28184: DOUBLE
28185: EQUAL
28186: IFTRUE 28190
28188: GO 28201
28190: POP
// bc_type := b_ext_gun ; 17 :
28191: LD_ADDR_OWVAR 42
28195: PUSH
28196: LD_INT 17
28198: ST_TO_ADDR
28199: GO 28561
28201: LD_INT 17
28203: DOUBLE
28204: EQUAL
28205: IFTRUE 28209
28207: GO 28237
28209: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28210: LD_ADDR_OWVAR 42
28214: PUSH
28215: LD_INT 19
28217: PUSH
28218: LD_INT 23
28220: PUSH
28221: LD_INT 19
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: PUSH
28229: LD_VAR 0 1
28233: ARRAY
28234: ST_TO_ADDR
28235: GO 28561
28237: LD_INT 18
28239: DOUBLE
28240: EQUAL
28241: IFTRUE 28245
28243: GO 28256
28245: POP
// bc_type := b_ext_radar ; 19 :
28246: LD_ADDR_OWVAR 42
28250: PUSH
28251: LD_INT 20
28253: ST_TO_ADDR
28254: GO 28561
28256: LD_INT 19
28258: DOUBLE
28259: EQUAL
28260: IFTRUE 28264
28262: GO 28275
28264: POP
// bc_type := b_ext_radio ; 20 :
28265: LD_ADDR_OWVAR 42
28269: PUSH
28270: LD_INT 22
28272: ST_TO_ADDR
28273: GO 28561
28275: LD_INT 20
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28283
28281: GO 28294
28283: POP
// bc_type := b_ext_siberium ; 21 :
28284: LD_ADDR_OWVAR 42
28288: PUSH
28289: LD_INT 21
28291: ST_TO_ADDR
28292: GO 28561
28294: LD_INT 21
28296: DOUBLE
28297: EQUAL
28298: IFTRUE 28302
28300: GO 28313
28302: POP
// bc_type := b_ext_computer ; 22 :
28303: LD_ADDR_OWVAR 42
28307: PUSH
28308: LD_INT 24
28310: ST_TO_ADDR
28311: GO 28561
28313: LD_INT 22
28315: DOUBLE
28316: EQUAL
28317: IFTRUE 28321
28319: GO 28332
28321: POP
// bc_type := b_ext_track ; 23 :
28322: LD_ADDR_OWVAR 42
28326: PUSH
28327: LD_INT 16
28329: ST_TO_ADDR
28330: GO 28561
28332: LD_INT 23
28334: DOUBLE
28335: EQUAL
28336: IFTRUE 28340
28338: GO 28351
28340: POP
// bc_type := b_ext_laser ; 24 :
28341: LD_ADDR_OWVAR 42
28345: PUSH
28346: LD_INT 25
28348: ST_TO_ADDR
28349: GO 28561
28351: LD_INT 24
28353: DOUBLE
28354: EQUAL
28355: IFTRUE 28359
28357: GO 28370
28359: POP
// bc_type := b_control_tower ; 25 :
28360: LD_ADDR_OWVAR 42
28364: PUSH
28365: LD_INT 36
28367: ST_TO_ADDR
28368: GO 28561
28370: LD_INT 25
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28389
28378: POP
// bc_type := b_breastwork ; 26 :
28379: LD_ADDR_OWVAR 42
28383: PUSH
28384: LD_INT 31
28386: ST_TO_ADDR
28387: GO 28561
28389: LD_INT 26
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28408
28397: POP
// bc_type := b_bunker ; 27 :
28398: LD_ADDR_OWVAR 42
28402: PUSH
28403: LD_INT 32
28405: ST_TO_ADDR
28406: GO 28561
28408: LD_INT 27
28410: DOUBLE
28411: EQUAL
28412: IFTRUE 28416
28414: GO 28427
28416: POP
// bc_type := b_turret ; 28 :
28417: LD_ADDR_OWVAR 42
28421: PUSH
28422: LD_INT 33
28424: ST_TO_ADDR
28425: GO 28561
28427: LD_INT 28
28429: DOUBLE
28430: EQUAL
28431: IFTRUE 28435
28433: GO 28446
28435: POP
// bc_type := b_armoury ; 29 :
28436: LD_ADDR_OWVAR 42
28440: PUSH
28441: LD_INT 4
28443: ST_TO_ADDR
28444: GO 28561
28446: LD_INT 29
28448: DOUBLE
28449: EQUAL
28450: IFTRUE 28454
28452: GO 28465
28454: POP
// bc_type := b_barracks ; 30 :
28455: LD_ADDR_OWVAR 42
28459: PUSH
28460: LD_INT 5
28462: ST_TO_ADDR
28463: GO 28561
28465: LD_INT 30
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28484
28473: POP
// bc_type := b_solar_power ; 31 :
28474: LD_ADDR_OWVAR 42
28478: PUSH
28479: LD_INT 27
28481: ST_TO_ADDR
28482: GO 28561
28484: LD_INT 31
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28503
28492: POP
// bc_type := b_oil_power ; 32 :
28493: LD_ADDR_OWVAR 42
28497: PUSH
28498: LD_INT 26
28500: ST_TO_ADDR
28501: GO 28561
28503: LD_INT 32
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28522
28511: POP
// bc_type := b_siberite_power ; 33 :
28512: LD_ADDR_OWVAR 42
28516: PUSH
28517: LD_INT 28
28519: ST_TO_ADDR
28520: GO 28561
28522: LD_INT 33
28524: DOUBLE
28525: EQUAL
28526: IFTRUE 28530
28528: GO 28541
28530: POP
// bc_type := b_oil_mine ; 34 :
28531: LD_ADDR_OWVAR 42
28535: PUSH
28536: LD_INT 29
28538: ST_TO_ADDR
28539: GO 28561
28541: LD_INT 34
28543: DOUBLE
28544: EQUAL
28545: IFTRUE 28549
28547: GO 28560
28549: POP
// bc_type := b_siberite_mine ; end ;
28550: LD_ADDR_OWVAR 42
28554: PUSH
28555: LD_INT 30
28557: ST_TO_ADDR
28558: GO 28561
28560: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28561: LD_ADDR_VAR 0 8
28565: PUSH
28566: LD_VAR 0 5
28570: PPUSH
28571: LD_VAR 0 6
28575: PPUSH
28576: LD_VAR 0 3
28580: PPUSH
28581: CALL_OW 47
28585: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28586: LD_OWVAR 42
28590: PUSH
28591: LD_INT 32
28593: PUSH
28594: LD_INT 33
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: IN
28601: IFFALSE 28617
// PlaceWeaponTurret ( b , weapon ) ;
28603: LD_VAR 0 8
28607: PPUSH
28608: LD_VAR 0 4
28612: PPUSH
28613: CALL_OW 431
// end ;
28617: LD_VAR 0 7
28621: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28622: LD_INT 0
28624: PPUSH
28625: PPUSH
28626: PPUSH
28627: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28628: LD_ADDR_VAR 0 4
28632: PUSH
28633: LD_INT 22
28635: PUSH
28636: LD_OWVAR 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: LD_INT 30
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 30
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PPUSH
28677: CALL_OW 69
28681: ST_TO_ADDR
// if not tmp then
28682: LD_VAR 0 4
28686: NOT
28687: IFFALSE 28691
// exit ;
28689: GO 28750
// for i in tmp do
28691: LD_ADDR_VAR 0 2
28695: PUSH
28696: LD_VAR 0 4
28700: PUSH
28701: FOR_IN
28702: IFFALSE 28748
// for j = 1 to 3 do
28704: LD_ADDR_VAR 0 3
28708: PUSH
28709: DOUBLE
28710: LD_INT 1
28712: DEC
28713: ST_TO_ADDR
28714: LD_INT 3
28716: PUSH
28717: FOR_TO
28718: IFFALSE 28744
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28720: LD_VAR 0 2
28724: PPUSH
28725: CALL_OW 274
28729: PPUSH
28730: LD_VAR 0 3
28734: PPUSH
28735: LD_INT 99999
28737: PPUSH
28738: CALL_OW 277
28742: GO 28717
28744: POP
28745: POP
28746: GO 28701
28748: POP
28749: POP
// end ;
28750: LD_VAR 0 1
28754: RET
// export function hHackSetLevel10 ; var i , j ; begin
28755: LD_INT 0
28757: PPUSH
28758: PPUSH
28759: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28760: LD_ADDR_VAR 0 2
28764: PUSH
28765: LD_INT 21
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PPUSH
28775: CALL_OW 69
28779: PUSH
28780: FOR_IN
28781: IFFALSE 28833
// if IsSelected ( i ) then
28783: LD_VAR 0 2
28787: PPUSH
28788: CALL_OW 306
28792: IFFALSE 28831
// begin for j := 1 to 4 do
28794: LD_ADDR_VAR 0 3
28798: PUSH
28799: DOUBLE
28800: LD_INT 1
28802: DEC
28803: ST_TO_ADDR
28804: LD_INT 4
28806: PUSH
28807: FOR_TO
28808: IFFALSE 28829
// SetSkill ( i , j , 10 ) ;
28810: LD_VAR 0 2
28814: PPUSH
28815: LD_VAR 0 3
28819: PPUSH
28820: LD_INT 10
28822: PPUSH
28823: CALL_OW 237
28827: GO 28807
28829: POP
28830: POP
// end ;
28831: GO 28780
28833: POP
28834: POP
// end ;
28835: LD_VAR 0 1
28839: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28840: LD_INT 0
28842: PPUSH
28843: PPUSH
28844: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28845: LD_ADDR_VAR 0 2
28849: PUSH
28850: LD_INT 22
28852: PUSH
28853: LD_OWVAR 2
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 21
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PPUSH
28876: CALL_OW 69
28880: PUSH
28881: FOR_IN
28882: IFFALSE 28923
// begin for j := 1 to 4 do
28884: LD_ADDR_VAR 0 3
28888: PUSH
28889: DOUBLE
28890: LD_INT 1
28892: DEC
28893: ST_TO_ADDR
28894: LD_INT 4
28896: PUSH
28897: FOR_TO
28898: IFFALSE 28919
// SetSkill ( i , j , 10 ) ;
28900: LD_VAR 0 2
28904: PPUSH
28905: LD_VAR 0 3
28909: PPUSH
28910: LD_INT 10
28912: PPUSH
28913: CALL_OW 237
28917: GO 28897
28919: POP
28920: POP
// end ;
28921: GO 28881
28923: POP
28924: POP
// end ;
28925: LD_VAR 0 1
28929: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28930: LD_INT 0
28932: PPUSH
// uc_side := your_side ;
28933: LD_ADDR_OWVAR 20
28937: PUSH
28938: LD_OWVAR 2
28942: ST_TO_ADDR
// uc_nation := nation ;
28943: LD_ADDR_OWVAR 21
28947: PUSH
28948: LD_VAR 0 1
28952: ST_TO_ADDR
// InitHc ;
28953: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28957: LD_INT 0
28959: PPUSH
28960: LD_VAR 0 2
28964: PPUSH
28965: LD_VAR 0 3
28969: PPUSH
28970: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28974: LD_VAR 0 4
28978: PPUSH
28979: LD_VAR 0 5
28983: PPUSH
28984: CALL_OW 428
28988: PUSH
28989: LD_INT 0
28991: EQUAL
28992: IFFALSE 29016
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28994: CALL_OW 44
28998: PPUSH
28999: LD_VAR 0 4
29003: PPUSH
29004: LD_VAR 0 5
29008: PPUSH
29009: LD_INT 1
29011: PPUSH
29012: CALL_OW 48
// end ;
29016: LD_VAR 0 6
29020: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29021: LD_INT 0
29023: PPUSH
29024: PPUSH
// uc_side := your_side ;
29025: LD_ADDR_OWVAR 20
29029: PUSH
29030: LD_OWVAR 2
29034: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29035: LD_VAR 0 1
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: LD_INT 2
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: LD_INT 4
29051: PUSH
29052: LD_INT 5
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: IN
29062: IFFALSE 29074
// uc_nation := nation_american else
29064: LD_ADDR_OWVAR 21
29068: PUSH
29069: LD_INT 1
29071: ST_TO_ADDR
29072: GO 29117
// if chassis in [ 11 , 12 , 13 , 14 ] then
29074: LD_VAR 0 1
29078: PUSH
29079: LD_INT 11
29081: PUSH
29082: LD_INT 12
29084: PUSH
29085: LD_INT 13
29087: PUSH
29088: LD_INT 14
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: IN
29097: IFFALSE 29109
// uc_nation := nation_arabian else
29099: LD_ADDR_OWVAR 21
29103: PUSH
29104: LD_INT 2
29106: ST_TO_ADDR
29107: GO 29117
// uc_nation := nation_russian ;
29109: LD_ADDR_OWVAR 21
29113: PUSH
29114: LD_INT 3
29116: ST_TO_ADDR
// vc_chassis := chassis ;
29117: LD_ADDR_OWVAR 37
29121: PUSH
29122: LD_VAR 0 1
29126: ST_TO_ADDR
// vc_engine := engine ;
29127: LD_ADDR_OWVAR 39
29131: PUSH
29132: LD_VAR 0 2
29136: ST_TO_ADDR
// vc_control := control ;
29137: LD_ADDR_OWVAR 38
29141: PUSH
29142: LD_VAR 0 3
29146: ST_TO_ADDR
// vc_weapon := weapon ;
29147: LD_ADDR_OWVAR 40
29151: PUSH
29152: LD_VAR 0 4
29156: ST_TO_ADDR
// un := CreateVehicle ;
29157: LD_ADDR_VAR 0 8
29161: PUSH
29162: CALL_OW 45
29166: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29167: LD_VAR 0 8
29171: PPUSH
29172: LD_INT 0
29174: PPUSH
29175: LD_INT 5
29177: PPUSH
29178: CALL_OW 12
29182: PPUSH
29183: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29187: LD_VAR 0 8
29191: PPUSH
29192: LD_VAR 0 5
29196: PPUSH
29197: LD_VAR 0 6
29201: PPUSH
29202: LD_INT 1
29204: PPUSH
29205: CALL_OW 48
// end ;
29209: LD_VAR 0 7
29213: RET
// export hInvincible ; every 1 do
29214: GO 29216
29216: DISABLE
// hInvincible := [ ] ;
29217: LD_ADDR_EXP 94
29221: PUSH
29222: EMPTY
29223: ST_TO_ADDR
29224: END
// every 10 do var i ;
29225: GO 29227
29227: DISABLE
29228: LD_INT 0
29230: PPUSH
// begin enable ;
29231: ENABLE
// if not hInvincible then
29232: LD_EXP 94
29236: NOT
29237: IFFALSE 29241
// exit ;
29239: GO 29285
// for i in hInvincible do
29241: LD_ADDR_VAR 0 1
29245: PUSH
29246: LD_EXP 94
29250: PUSH
29251: FOR_IN
29252: IFFALSE 29283
// if GetLives ( i ) < 1000 then
29254: LD_VAR 0 1
29258: PPUSH
29259: CALL_OW 256
29263: PUSH
29264: LD_INT 1000
29266: LESS
29267: IFFALSE 29281
// SetLives ( i , 1000 ) ;
29269: LD_VAR 0 1
29273: PPUSH
29274: LD_INT 1000
29276: PPUSH
29277: CALL_OW 234
29281: GO 29251
29283: POP
29284: POP
// end ;
29285: PPOPN 1
29287: END
// export function hHackInvincible ; var i ; begin
29288: LD_INT 0
29290: PPUSH
29291: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29292: LD_ADDR_VAR 0 2
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: LD_INT 21
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 21
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: LIST
29324: PPUSH
29325: CALL_OW 69
29329: PUSH
29330: FOR_IN
29331: IFFALSE 29392
// if IsSelected ( i ) then
29333: LD_VAR 0 2
29337: PPUSH
29338: CALL_OW 306
29342: IFFALSE 29390
// begin if i in hInvincible then
29344: LD_VAR 0 2
29348: PUSH
29349: LD_EXP 94
29353: IN
29354: IFFALSE 29374
// hInvincible := hInvincible diff i else
29356: LD_ADDR_EXP 94
29360: PUSH
29361: LD_EXP 94
29365: PUSH
29366: LD_VAR 0 2
29370: DIFF
29371: ST_TO_ADDR
29372: GO 29390
// hInvincible := hInvincible union i ;
29374: LD_ADDR_EXP 94
29378: PUSH
29379: LD_EXP 94
29383: PUSH
29384: LD_VAR 0 2
29388: UNION
29389: ST_TO_ADDR
// end ;
29390: GO 29330
29392: POP
29393: POP
// end ;
29394: LD_VAR 0 1
29398: RET
// export function hHackInvisible ; var i , j ; begin
29399: LD_INT 0
29401: PPUSH
29402: PPUSH
29403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29404: LD_ADDR_VAR 0 2
29408: PUSH
29409: LD_INT 21
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PPUSH
29419: CALL_OW 69
29423: PUSH
29424: FOR_IN
29425: IFFALSE 29449
// if IsSelected ( i ) then
29427: LD_VAR 0 2
29431: PPUSH
29432: CALL_OW 306
29436: IFFALSE 29447
// ComForceInvisible ( i ) ;
29438: LD_VAR 0 2
29442: PPUSH
29443: CALL_OW 496
29447: GO 29424
29449: POP
29450: POP
// end ;
29451: LD_VAR 0 1
29455: RET
// export function hHackChangeYourSide ; begin
29456: LD_INT 0
29458: PPUSH
// if your_side = 8 then
29459: LD_OWVAR 2
29463: PUSH
29464: LD_INT 8
29466: EQUAL
29467: IFFALSE 29479
// your_side := 0 else
29469: LD_ADDR_OWVAR 2
29473: PUSH
29474: LD_INT 0
29476: ST_TO_ADDR
29477: GO 29493
// your_side := your_side + 1 ;
29479: LD_ADDR_OWVAR 2
29483: PUSH
29484: LD_OWVAR 2
29488: PUSH
29489: LD_INT 1
29491: PLUS
29492: ST_TO_ADDR
// end ;
29493: LD_VAR 0 1
29497: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29498: LD_INT 0
29500: PPUSH
29501: PPUSH
29502: PPUSH
// for i in all_units do
29503: LD_ADDR_VAR 0 2
29507: PUSH
29508: LD_OWVAR 3
29512: PUSH
29513: FOR_IN
29514: IFFALSE 29592
// if IsSelected ( i ) then
29516: LD_VAR 0 2
29520: PPUSH
29521: CALL_OW 306
29525: IFFALSE 29590
// begin j := GetSide ( i ) ;
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: LD_VAR 0 2
29536: PPUSH
29537: CALL_OW 255
29541: ST_TO_ADDR
// if j = 8 then
29542: LD_VAR 0 3
29546: PUSH
29547: LD_INT 8
29549: EQUAL
29550: IFFALSE 29562
// j := 0 else
29552: LD_ADDR_VAR 0 3
29556: PUSH
29557: LD_INT 0
29559: ST_TO_ADDR
29560: GO 29576
// j := j + 1 ;
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_VAR 0 3
29571: PUSH
29572: LD_INT 1
29574: PLUS
29575: ST_TO_ADDR
// SetSide ( i , j ) ;
29576: LD_VAR 0 2
29580: PPUSH
29581: LD_VAR 0 3
29585: PPUSH
29586: CALL_OW 235
// end ;
29590: GO 29513
29592: POP
29593: POP
// end ;
29594: LD_VAR 0 1
29598: RET
// export function hHackFog ; begin
29599: LD_INT 0
29601: PPUSH
// FogOff ( true ) ;
29602: LD_INT 1
29604: PPUSH
29605: CALL_OW 344
// end ;
29609: LD_VAR 0 1
29613: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29614: LD_INT 0
29616: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_VAR 0 2
29626: PPUSH
29627: LD_VAR 0 3
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: LD_INT 1
29637: PPUSH
29638: CALL_OW 483
// CenterOnXY ( x , y ) ;
29642: LD_VAR 0 2
29646: PPUSH
29647: LD_VAR 0 3
29651: PPUSH
29652: CALL_OW 84
// end ; end_of_file end_of_file
29656: LD_VAR 0 4
29660: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29661: LD_INT 0
29663: PPUSH
29664: PPUSH
// if exist_mode then
29665: LD_VAR 0 2
29669: IFFALSE 29694
// unit := CreateCharacter ( prefix & ident ) else
29671: LD_ADDR_VAR 0 5
29675: PUSH
29676: LD_VAR 0 3
29680: PUSH
29681: LD_VAR 0 1
29685: STR
29686: PPUSH
29687: CALL_OW 34
29691: ST_TO_ADDR
29692: GO 29709
// unit := NewCharacter ( ident ) ;
29694: LD_ADDR_VAR 0 5
29698: PUSH
29699: LD_VAR 0 1
29703: PPUSH
29704: CALL_OW 25
29708: ST_TO_ADDR
// result := unit ;
29709: LD_ADDR_VAR 0 4
29713: PUSH
29714: LD_VAR 0 5
29718: ST_TO_ADDR
// end ;
29719: LD_VAR 0 4
29723: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29724: LD_INT 0
29726: PPUSH
29727: PPUSH
// if not side or not nation then
29728: LD_VAR 0 1
29732: NOT
29733: PUSH
29734: LD_VAR 0 2
29738: NOT
29739: OR
29740: IFFALSE 29744
// exit ;
29742: GO 30512
// case nation of nation_american :
29744: LD_VAR 0 2
29748: PUSH
29749: LD_INT 1
29751: DOUBLE
29752: EQUAL
29753: IFTRUE 29757
29755: GO 29971
29757: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29758: LD_ADDR_VAR 0 4
29762: PUSH
29763: LD_INT 35
29765: PUSH
29766: LD_INT 45
29768: PUSH
29769: LD_INT 46
29771: PUSH
29772: LD_INT 47
29774: PUSH
29775: LD_INT 82
29777: PUSH
29778: LD_INT 83
29780: PUSH
29781: LD_INT 84
29783: PUSH
29784: LD_INT 85
29786: PUSH
29787: LD_INT 86
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: LD_INT 6
29798: PUSH
29799: LD_INT 15
29801: PUSH
29802: LD_INT 16
29804: PUSH
29805: LD_INT 7
29807: PUSH
29808: LD_INT 12
29810: PUSH
29811: LD_INT 13
29813: PUSH
29814: LD_INT 10
29816: PUSH
29817: LD_INT 14
29819: PUSH
29820: LD_INT 20
29822: PUSH
29823: LD_INT 21
29825: PUSH
29826: LD_INT 22
29828: PUSH
29829: LD_INT 25
29831: PUSH
29832: LD_INT 32
29834: PUSH
29835: LD_INT 27
29837: PUSH
29838: LD_INT 36
29840: PUSH
29841: LD_INT 69
29843: PUSH
29844: LD_INT 39
29846: PUSH
29847: LD_INT 34
29849: PUSH
29850: LD_INT 40
29852: PUSH
29853: LD_INT 48
29855: PUSH
29856: LD_INT 49
29858: PUSH
29859: LD_INT 50
29861: PUSH
29862: LD_INT 51
29864: PUSH
29865: LD_INT 52
29867: PUSH
29868: LD_INT 53
29870: PUSH
29871: LD_INT 54
29873: PUSH
29874: LD_INT 55
29876: PUSH
29877: LD_INT 56
29879: PUSH
29880: LD_INT 57
29882: PUSH
29883: LD_INT 58
29885: PUSH
29886: LD_INT 59
29888: PUSH
29889: LD_INT 60
29891: PUSH
29892: LD_INT 61
29894: PUSH
29895: LD_INT 62
29897: PUSH
29898: LD_INT 80
29900: PUSH
29901: LD_INT 82
29903: PUSH
29904: LD_INT 83
29906: PUSH
29907: LD_INT 84
29909: PUSH
29910: LD_INT 85
29912: PUSH
29913: LD_INT 86
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: ST_TO_ADDR
29969: GO 30436
29971: LD_INT 2
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 30205
29979: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29980: LD_ADDR_VAR 0 4
29984: PUSH
29985: LD_INT 35
29987: PUSH
29988: LD_INT 45
29990: PUSH
29991: LD_INT 46
29993: PUSH
29994: LD_INT 47
29996: PUSH
29997: LD_INT 82
29999: PUSH
30000: LD_INT 83
30002: PUSH
30003: LD_INT 84
30005: PUSH
30006: LD_INT 85
30008: PUSH
30009: LD_INT 87
30011: PUSH
30012: LD_INT 70
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 11
30020: PUSH
30021: LD_INT 3
30023: PUSH
30024: LD_INT 4
30026: PUSH
30027: LD_INT 5
30029: PUSH
30030: LD_INT 6
30032: PUSH
30033: LD_INT 15
30035: PUSH
30036: LD_INT 18
30038: PUSH
30039: LD_INT 7
30041: PUSH
30042: LD_INT 17
30044: PUSH
30045: LD_INT 8
30047: PUSH
30048: LD_INT 20
30050: PUSH
30051: LD_INT 21
30053: PUSH
30054: LD_INT 22
30056: PUSH
30057: LD_INT 72
30059: PUSH
30060: LD_INT 26
30062: PUSH
30063: LD_INT 69
30065: PUSH
30066: LD_INT 39
30068: PUSH
30069: LD_INT 40
30071: PUSH
30072: LD_INT 41
30074: PUSH
30075: LD_INT 42
30077: PUSH
30078: LD_INT 43
30080: PUSH
30081: LD_INT 48
30083: PUSH
30084: LD_INT 49
30086: PUSH
30087: LD_INT 50
30089: PUSH
30090: LD_INT 51
30092: PUSH
30093: LD_INT 52
30095: PUSH
30096: LD_INT 53
30098: PUSH
30099: LD_INT 54
30101: PUSH
30102: LD_INT 55
30104: PUSH
30105: LD_INT 56
30107: PUSH
30108: LD_INT 60
30110: PUSH
30111: LD_INT 61
30113: PUSH
30114: LD_INT 62
30116: PUSH
30117: LD_INT 66
30119: PUSH
30120: LD_INT 67
30122: PUSH
30123: LD_INT 68
30125: PUSH
30126: LD_INT 81
30128: PUSH
30129: LD_INT 82
30131: PUSH
30132: LD_INT 83
30134: PUSH
30135: LD_INT 84
30137: PUSH
30138: LD_INT 85
30140: PUSH
30141: LD_INT 87
30143: PUSH
30144: LD_INT 88
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: ST_TO_ADDR
30203: GO 30436
30205: LD_INT 3
30207: DOUBLE
30208: EQUAL
30209: IFTRUE 30213
30211: GO 30435
30213: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30214: LD_ADDR_VAR 0 4
30218: PUSH
30219: LD_INT 46
30221: PUSH
30222: LD_INT 47
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: LD_INT 82
30233: PUSH
30234: LD_INT 83
30236: PUSH
30237: LD_INT 84
30239: PUSH
30240: LD_INT 85
30242: PUSH
30243: LD_INT 86
30245: PUSH
30246: LD_INT 11
30248: PUSH
30249: LD_INT 9
30251: PUSH
30252: LD_INT 20
30254: PUSH
30255: LD_INT 19
30257: PUSH
30258: LD_INT 21
30260: PUSH
30261: LD_INT 24
30263: PUSH
30264: LD_INT 22
30266: PUSH
30267: LD_INT 25
30269: PUSH
30270: LD_INT 28
30272: PUSH
30273: LD_INT 29
30275: PUSH
30276: LD_INT 30
30278: PUSH
30279: LD_INT 31
30281: PUSH
30282: LD_INT 37
30284: PUSH
30285: LD_INT 38
30287: PUSH
30288: LD_INT 32
30290: PUSH
30291: LD_INT 27
30293: PUSH
30294: LD_INT 33
30296: PUSH
30297: LD_INT 69
30299: PUSH
30300: LD_INT 39
30302: PUSH
30303: LD_INT 34
30305: PUSH
30306: LD_INT 40
30308: PUSH
30309: LD_INT 71
30311: PUSH
30312: LD_INT 23
30314: PUSH
30315: LD_INT 44
30317: PUSH
30318: LD_INT 48
30320: PUSH
30321: LD_INT 49
30323: PUSH
30324: LD_INT 50
30326: PUSH
30327: LD_INT 51
30329: PUSH
30330: LD_INT 52
30332: PUSH
30333: LD_INT 53
30335: PUSH
30336: LD_INT 54
30338: PUSH
30339: LD_INT 55
30341: PUSH
30342: LD_INT 56
30344: PUSH
30345: LD_INT 57
30347: PUSH
30348: LD_INT 58
30350: PUSH
30351: LD_INT 59
30353: PUSH
30354: LD_INT 63
30356: PUSH
30357: LD_INT 64
30359: PUSH
30360: LD_INT 65
30362: PUSH
30363: LD_INT 82
30365: PUSH
30366: LD_INT 83
30368: PUSH
30369: LD_INT 84
30371: PUSH
30372: LD_INT 85
30374: PUSH
30375: LD_INT 86
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: ST_TO_ADDR
30433: GO 30436
30435: POP
// if state > - 1 and state < 3 then
30436: LD_VAR 0 3
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: GREATER
30445: PUSH
30446: LD_VAR 0 3
30450: PUSH
30451: LD_INT 3
30453: LESS
30454: AND
30455: IFFALSE 30512
// for i in result do
30457: LD_ADDR_VAR 0 5
30461: PUSH
30462: LD_VAR 0 4
30466: PUSH
30467: FOR_IN
30468: IFFALSE 30510
// if GetTech ( i , side ) <> state then
30470: LD_VAR 0 5
30474: PPUSH
30475: LD_VAR 0 1
30479: PPUSH
30480: CALL_OW 321
30484: PUSH
30485: LD_VAR 0 3
30489: NONEQUAL
30490: IFFALSE 30508
// result := result diff i ;
30492: LD_ADDR_VAR 0 4
30496: PUSH
30497: LD_VAR 0 4
30501: PUSH
30502: LD_VAR 0 5
30506: DIFF
30507: ST_TO_ADDR
30508: GO 30467
30510: POP
30511: POP
// end ;
30512: LD_VAR 0 4
30516: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30517: LD_INT 0
30519: PPUSH
30520: PPUSH
30521: PPUSH
// result := true ;
30522: LD_ADDR_VAR 0 3
30526: PUSH
30527: LD_INT 1
30529: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30530: LD_ADDR_VAR 0 5
30534: PUSH
30535: LD_VAR 0 2
30539: PPUSH
30540: CALL_OW 480
30544: ST_TO_ADDR
// if not tmp then
30545: LD_VAR 0 5
30549: NOT
30550: IFFALSE 30554
// exit ;
30552: GO 30603
// for i in tmp do
30554: LD_ADDR_VAR 0 4
30558: PUSH
30559: LD_VAR 0 5
30563: PUSH
30564: FOR_IN
30565: IFFALSE 30601
// if GetTech ( i , side ) <> state_researched then
30567: LD_VAR 0 4
30571: PPUSH
30572: LD_VAR 0 1
30576: PPUSH
30577: CALL_OW 321
30581: PUSH
30582: LD_INT 2
30584: NONEQUAL
30585: IFFALSE 30599
// begin result := false ;
30587: LD_ADDR_VAR 0 3
30591: PUSH
30592: LD_INT 0
30594: ST_TO_ADDR
// exit ;
30595: POP
30596: POP
30597: GO 30603
// end ;
30599: GO 30564
30601: POP
30602: POP
// end ;
30603: LD_VAR 0 3
30607: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30608: LD_INT 0
30610: PPUSH
30611: PPUSH
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
30622: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30623: LD_VAR 0 1
30627: NOT
30628: PUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 257
30638: PUSH
30639: LD_INT 9
30641: NONEQUAL
30642: OR
30643: IFFALSE 30647
// exit ;
30645: GO 31220
// side := GetSide ( unit ) ;
30647: LD_ADDR_VAR 0 9
30651: PUSH
30652: LD_VAR 0 1
30656: PPUSH
30657: CALL_OW 255
30661: ST_TO_ADDR
// tech_space := tech_spacanom ;
30662: LD_ADDR_VAR 0 12
30666: PUSH
30667: LD_INT 29
30669: ST_TO_ADDR
// tech_time := tech_taurad ;
30670: LD_ADDR_VAR 0 13
30674: PUSH
30675: LD_INT 28
30677: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30678: LD_ADDR_VAR 0 11
30682: PUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 310
30692: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30693: LD_VAR 0 11
30697: PPUSH
30698: CALL_OW 247
30702: PUSH
30703: LD_INT 2
30705: EQUAL
30706: IFFALSE 30710
// exit ;
30708: GO 31220
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30710: LD_ADDR_VAR 0 8
30714: PUSH
30715: LD_INT 81
30717: PUSH
30718: LD_VAR 0 9
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 3
30729: PUSH
30730: LD_INT 21
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PPUSH
30748: CALL_OW 69
30752: ST_TO_ADDR
// if not tmp then
30753: LD_VAR 0 8
30757: NOT
30758: IFFALSE 30762
// exit ;
30760: GO 31220
// if in_unit then
30762: LD_VAR 0 11
30766: IFFALSE 30790
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30768: LD_ADDR_VAR 0 10
30772: PUSH
30773: LD_VAR 0 8
30777: PPUSH
30778: LD_VAR 0 11
30782: PPUSH
30783: CALL_OW 74
30787: ST_TO_ADDR
30788: GO 30810
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30790: LD_ADDR_VAR 0 10
30794: PUSH
30795: LD_VAR 0 8
30799: PPUSH
30800: LD_VAR 0 1
30804: PPUSH
30805: CALL_OW 74
30809: ST_TO_ADDR
// if not enemy then
30810: LD_VAR 0 10
30814: NOT
30815: IFFALSE 30819
// exit ;
30817: GO 31220
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30819: LD_VAR 0 11
30823: PUSH
30824: LD_VAR 0 11
30828: PPUSH
30829: LD_VAR 0 10
30833: PPUSH
30834: CALL_OW 296
30838: PUSH
30839: LD_INT 13
30841: GREATER
30842: AND
30843: PUSH
30844: LD_VAR 0 1
30848: PPUSH
30849: LD_VAR 0 10
30853: PPUSH
30854: CALL_OW 296
30858: PUSH
30859: LD_INT 12
30861: GREATER
30862: OR
30863: IFFALSE 30867
// exit ;
30865: GO 31220
// missile := [ 1 ] ;
30867: LD_ADDR_VAR 0 14
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: EMPTY
30876: LIST
30877: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30878: LD_VAR 0 9
30882: PPUSH
30883: LD_VAR 0 12
30887: PPUSH
30888: CALL_OW 325
30892: IFFALSE 30921
// missile := Insert ( missile , missile + 1 , 2 ) ;
30894: LD_ADDR_VAR 0 14
30898: PUSH
30899: LD_VAR 0 14
30903: PPUSH
30904: LD_VAR 0 14
30908: PUSH
30909: LD_INT 1
30911: PLUS
30912: PPUSH
30913: LD_INT 2
30915: PPUSH
30916: CALL_OW 2
30920: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30921: LD_VAR 0 9
30925: PPUSH
30926: LD_VAR 0 13
30930: PPUSH
30931: CALL_OW 325
30935: PUSH
30936: LD_VAR 0 10
30940: PPUSH
30941: CALL_OW 255
30945: PPUSH
30946: LD_VAR 0 13
30950: PPUSH
30951: CALL_OW 325
30955: NOT
30956: AND
30957: IFFALSE 30986
// missile := Insert ( missile , missile + 1 , 3 ) ;
30959: LD_ADDR_VAR 0 14
30963: PUSH
30964: LD_VAR 0 14
30968: PPUSH
30969: LD_VAR 0 14
30973: PUSH
30974: LD_INT 1
30976: PLUS
30977: PPUSH
30978: LD_INT 3
30980: PPUSH
30981: CALL_OW 2
30985: ST_TO_ADDR
// if missile < 2 then
30986: LD_VAR 0 14
30990: PUSH
30991: LD_INT 2
30993: LESS
30994: IFFALSE 30998
// exit ;
30996: GO 31220
// x := GetX ( enemy ) ;
30998: LD_ADDR_VAR 0 4
31002: PUSH
31003: LD_VAR 0 10
31007: PPUSH
31008: CALL_OW 250
31012: ST_TO_ADDR
// y := GetY ( enemy ) ;
31013: LD_ADDR_VAR 0 5
31017: PUSH
31018: LD_VAR 0 10
31022: PPUSH
31023: CALL_OW 251
31027: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31028: LD_ADDR_VAR 0 6
31032: PUSH
31033: LD_VAR 0 4
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PPUSH
31042: LD_INT 1
31044: PPUSH
31045: CALL_OW 12
31049: PLUS
31050: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31051: LD_ADDR_VAR 0 7
31055: PUSH
31056: LD_VAR 0 5
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PPUSH
31065: LD_INT 1
31067: PPUSH
31068: CALL_OW 12
31072: PLUS
31073: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31074: LD_VAR 0 6
31078: PPUSH
31079: LD_VAR 0 7
31083: PPUSH
31084: CALL_OW 488
31088: NOT
31089: IFFALSE 31111
// begin _x := x ;
31091: LD_ADDR_VAR 0 6
31095: PUSH
31096: LD_VAR 0 4
31100: ST_TO_ADDR
// _y := y ;
31101: LD_ADDR_VAR 0 7
31105: PUSH
31106: LD_VAR 0 5
31110: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31111: LD_ADDR_VAR 0 3
31115: PUSH
31116: LD_INT 1
31118: PPUSH
31119: LD_VAR 0 14
31123: PPUSH
31124: CALL_OW 12
31128: ST_TO_ADDR
// case i of 1 :
31129: LD_VAR 0 3
31133: PUSH
31134: LD_INT 1
31136: DOUBLE
31137: EQUAL
31138: IFTRUE 31142
31140: GO 31159
31142: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31143: LD_VAR 0 1
31147: PPUSH
31148: LD_VAR 0 10
31152: PPUSH
31153: CALL_OW 115
31157: GO 31220
31159: LD_INT 2
31161: DOUBLE
31162: EQUAL
31163: IFTRUE 31167
31165: GO 31189
31167: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31168: LD_VAR 0 1
31172: PPUSH
31173: LD_VAR 0 6
31177: PPUSH
31178: LD_VAR 0 7
31182: PPUSH
31183: CALL_OW 153
31187: GO 31220
31189: LD_INT 3
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31219
31197: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31198: LD_VAR 0 1
31202: PPUSH
31203: LD_VAR 0 6
31207: PPUSH
31208: LD_VAR 0 7
31212: PPUSH
31213: CALL_OW 154
31217: GO 31220
31219: POP
// end ;
31220: LD_VAR 0 2
31224: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31225: LD_INT 0
31227: PPUSH
31228: PPUSH
31229: PPUSH
31230: PPUSH
31231: PPUSH
31232: PPUSH
// if not unit or not building then
31233: LD_VAR 0 1
31237: NOT
31238: PUSH
31239: LD_VAR 0 2
31243: NOT
31244: OR
31245: IFFALSE 31249
// exit ;
31247: GO 31407
// x := GetX ( building ) ;
31249: LD_ADDR_VAR 0 5
31253: PUSH
31254: LD_VAR 0 2
31258: PPUSH
31259: CALL_OW 250
31263: ST_TO_ADDR
// y := GetY ( building ) ;
31264: LD_ADDR_VAR 0 6
31268: PUSH
31269: LD_VAR 0 2
31273: PPUSH
31274: CALL_OW 251
31278: ST_TO_ADDR
// for i = 0 to 5 do
31279: LD_ADDR_VAR 0 4
31283: PUSH
31284: DOUBLE
31285: LD_INT 0
31287: DEC
31288: ST_TO_ADDR
31289: LD_INT 5
31291: PUSH
31292: FOR_TO
31293: IFFALSE 31405
// begin _x := ShiftX ( x , i , 3 ) ;
31295: LD_ADDR_VAR 0 7
31299: PUSH
31300: LD_VAR 0 5
31304: PPUSH
31305: LD_VAR 0 4
31309: PPUSH
31310: LD_INT 3
31312: PPUSH
31313: CALL_OW 272
31317: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31318: LD_ADDR_VAR 0 8
31322: PUSH
31323: LD_VAR 0 6
31327: PPUSH
31328: LD_VAR 0 4
31332: PPUSH
31333: LD_INT 3
31335: PPUSH
31336: CALL_OW 273
31340: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31341: LD_VAR 0 7
31345: PPUSH
31346: LD_VAR 0 8
31350: PPUSH
31351: CALL_OW 488
31355: NOT
31356: IFFALSE 31360
// continue ;
31358: GO 31292
// if HexInfo ( _x , _y ) = 0 then
31360: LD_VAR 0 7
31364: PPUSH
31365: LD_VAR 0 8
31369: PPUSH
31370: CALL_OW 428
31374: PUSH
31375: LD_INT 0
31377: EQUAL
31378: IFFALSE 31403
// begin ComMoveXY ( unit , _x , _y ) ;
31380: LD_VAR 0 1
31384: PPUSH
31385: LD_VAR 0 7
31389: PPUSH
31390: LD_VAR 0 8
31394: PPUSH
31395: CALL_OW 111
// exit ;
31399: POP
31400: POP
31401: GO 31407
// end ; end ;
31403: GO 31292
31405: POP
31406: POP
// end ;
31407: LD_VAR 0 3
31411: RET
// export function ScanBase ( side , base_area ) ; begin
31412: LD_INT 0
31414: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31415: LD_ADDR_VAR 0 3
31419: PUSH
31420: LD_VAR 0 2
31424: PPUSH
31425: LD_INT 81
31427: PUSH
31428: LD_VAR 0 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 70
31441: ST_TO_ADDR
// end ;
31442: LD_VAR 0 3
31446: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31447: LD_INT 0
31449: PPUSH
31450: PPUSH
31451: PPUSH
31452: PPUSH
// result := false ;
31453: LD_ADDR_VAR 0 2
31457: PUSH
31458: LD_INT 0
31460: ST_TO_ADDR
// side := GetSide ( unit ) ;
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: LD_VAR 0 1
31470: PPUSH
31471: CALL_OW 255
31475: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31476: LD_ADDR_VAR 0 4
31480: PUSH
31481: LD_VAR 0 1
31485: PPUSH
31486: CALL_OW 248
31490: ST_TO_ADDR
// case nat of 1 :
31491: LD_VAR 0 4
31495: PUSH
31496: LD_INT 1
31498: DOUBLE
31499: EQUAL
31500: IFTRUE 31504
31502: GO 31515
31504: POP
// tech := tech_lassight ; 2 :
31505: LD_ADDR_VAR 0 5
31509: PUSH
31510: LD_INT 12
31512: ST_TO_ADDR
31513: GO 31554
31515: LD_INT 2
31517: DOUBLE
31518: EQUAL
31519: IFTRUE 31523
31521: GO 31534
31523: POP
// tech := tech_mortar ; 3 :
31524: LD_ADDR_VAR 0 5
31528: PUSH
31529: LD_INT 41
31531: ST_TO_ADDR
31532: GO 31554
31534: LD_INT 3
31536: DOUBLE
31537: EQUAL
31538: IFTRUE 31542
31540: GO 31553
31542: POP
// tech := tech_bazooka ; end ;
31543: LD_ADDR_VAR 0 5
31547: PUSH
31548: LD_INT 44
31550: ST_TO_ADDR
31551: GO 31554
31553: POP
// if Researched ( side , tech ) then
31554: LD_VAR 0 3
31558: PPUSH
31559: LD_VAR 0 5
31563: PPUSH
31564: CALL_OW 325
31568: IFFALSE 31595
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31570: LD_ADDR_VAR 0 2
31574: PUSH
31575: LD_INT 5
31577: PUSH
31578: LD_INT 8
31580: PUSH
31581: LD_INT 9
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: LIST
31588: PUSH
31589: LD_VAR 0 4
31593: ARRAY
31594: ST_TO_ADDR
// end ;
31595: LD_VAR 0 2
31599: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31600: LD_INT 0
31602: PPUSH
31603: PPUSH
31604: PPUSH
// if not mines then
31605: LD_VAR 0 2
31609: NOT
31610: IFFALSE 31614
// exit ;
31612: GO 31758
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31614: LD_ADDR_VAR 0 5
31618: PUSH
31619: LD_INT 81
31621: PUSH
31622: LD_VAR 0 1
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 3
31633: PUSH
31634: LD_INT 21
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PPUSH
31652: CALL_OW 69
31656: ST_TO_ADDR
// for i in mines do
31657: LD_ADDR_VAR 0 4
31661: PUSH
31662: LD_VAR 0 2
31666: PUSH
31667: FOR_IN
31668: IFFALSE 31756
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31670: LD_VAR 0 4
31674: PUSH
31675: LD_INT 1
31677: ARRAY
31678: PPUSH
31679: LD_VAR 0 4
31683: PUSH
31684: LD_INT 2
31686: ARRAY
31687: PPUSH
31688: CALL_OW 458
31692: NOT
31693: IFFALSE 31697
// continue ;
31695: GO 31667
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31697: LD_VAR 0 4
31701: PUSH
31702: LD_INT 1
31704: ARRAY
31705: PPUSH
31706: LD_VAR 0 4
31710: PUSH
31711: LD_INT 2
31713: ARRAY
31714: PPUSH
31715: CALL_OW 428
31719: PUSH
31720: LD_VAR 0 5
31724: IN
31725: IFFALSE 31754
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31727: LD_VAR 0 4
31731: PUSH
31732: LD_INT 1
31734: ARRAY
31735: PPUSH
31736: LD_VAR 0 4
31740: PUSH
31741: LD_INT 2
31743: ARRAY
31744: PPUSH
31745: LD_VAR 0 1
31749: PPUSH
31750: CALL_OW 456
// end ;
31754: GO 31667
31756: POP
31757: POP
// end ;
31758: LD_VAR 0 3
31762: RET
// export function Count ( array ) ; var i ; begin
31763: LD_INT 0
31765: PPUSH
31766: PPUSH
// result := 0 ;
31767: LD_ADDR_VAR 0 2
31771: PUSH
31772: LD_INT 0
31774: ST_TO_ADDR
// for i in array do
31775: LD_ADDR_VAR 0 3
31779: PUSH
31780: LD_VAR 0 1
31784: PUSH
31785: FOR_IN
31786: IFFALSE 31810
// if i then
31788: LD_VAR 0 3
31792: IFFALSE 31808
// result := result + 1 ;
31794: LD_ADDR_VAR 0 2
31798: PUSH
31799: LD_VAR 0 2
31803: PUSH
31804: LD_INT 1
31806: PLUS
31807: ST_TO_ADDR
31808: GO 31785
31810: POP
31811: POP
// end ;
31812: LD_VAR 0 2
31816: RET
// export function IsEmpty ( building ) ; begin
31817: LD_INT 0
31819: PPUSH
// if not building then
31820: LD_VAR 0 1
31824: NOT
31825: IFFALSE 31829
// exit ;
31827: GO 31872
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31829: LD_ADDR_VAR 0 2
31833: PUSH
31834: LD_VAR 0 1
31838: PUSH
31839: LD_INT 22
31841: PUSH
31842: LD_VAR 0 1
31846: PPUSH
31847: CALL_OW 255
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 58
31858: PUSH
31859: EMPTY
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PPUSH
31866: CALL_OW 69
31870: IN
31871: ST_TO_ADDR
// end ;
31872: LD_VAR 0 2
31876: RET
// export function IsNotFull ( building ) ; begin
31877: LD_INT 0
31879: PPUSH
// if not building then
31880: LD_VAR 0 1
31884: NOT
31885: IFFALSE 31889
// exit ;
31887: GO 31908
// result := UnitsInside ( building ) < 6 ;
31889: LD_ADDR_VAR 0 2
31893: PUSH
31894: LD_VAR 0 1
31898: PPUSH
31899: CALL_OW 313
31903: PUSH
31904: LD_INT 6
31906: LESS
31907: ST_TO_ADDR
// end ;
31908: LD_VAR 0 2
31912: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31913: LD_INT 0
31915: PPUSH
31916: PPUSH
31917: PPUSH
31918: PPUSH
// tmp := [ ] ;
31919: LD_ADDR_VAR 0 3
31923: PUSH
31924: EMPTY
31925: ST_TO_ADDR
// list := [ ] ;
31926: LD_ADDR_VAR 0 5
31930: PUSH
31931: EMPTY
31932: ST_TO_ADDR
// for i = 16 to 25 do
31933: LD_ADDR_VAR 0 4
31937: PUSH
31938: DOUBLE
31939: LD_INT 16
31941: DEC
31942: ST_TO_ADDR
31943: LD_INT 25
31945: PUSH
31946: FOR_TO
31947: IFFALSE 32020
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31949: LD_ADDR_VAR 0 3
31953: PUSH
31954: LD_VAR 0 3
31958: PUSH
31959: LD_INT 22
31961: PUSH
31962: LD_VAR 0 1
31966: PPUSH
31967: CALL_OW 255
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 91
31978: PUSH
31979: LD_VAR 0 1
31983: PUSH
31984: LD_INT 6
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 30
31994: PUSH
31995: LD_VAR 0 4
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: PUSH
32009: EMPTY
32010: LIST
32011: PPUSH
32012: CALL_OW 69
32016: ADD
32017: ST_TO_ADDR
32018: GO 31946
32020: POP
32021: POP
// for i = 1 to tmp do
32022: LD_ADDR_VAR 0 4
32026: PUSH
32027: DOUBLE
32028: LD_INT 1
32030: DEC
32031: ST_TO_ADDR
32032: LD_VAR 0 3
32036: PUSH
32037: FOR_TO
32038: IFFALSE 32126
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32040: LD_ADDR_VAR 0 5
32044: PUSH
32045: LD_VAR 0 5
32049: PUSH
32050: LD_VAR 0 3
32054: PUSH
32055: LD_VAR 0 4
32059: ARRAY
32060: PPUSH
32061: CALL_OW 266
32065: PUSH
32066: LD_VAR 0 3
32070: PUSH
32071: LD_VAR 0 4
32075: ARRAY
32076: PPUSH
32077: CALL_OW 250
32081: PUSH
32082: LD_VAR 0 3
32086: PUSH
32087: LD_VAR 0 4
32091: ARRAY
32092: PPUSH
32093: CALL_OW 251
32097: PUSH
32098: LD_VAR 0 3
32102: PUSH
32103: LD_VAR 0 4
32107: ARRAY
32108: PPUSH
32109: CALL_OW 254
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: PUSH
32120: EMPTY
32121: LIST
32122: ADD
32123: ST_TO_ADDR
32124: GO 32037
32126: POP
32127: POP
// result := list ;
32128: LD_ADDR_VAR 0 2
32132: PUSH
32133: LD_VAR 0 5
32137: ST_TO_ADDR
// end ;
32138: LD_VAR 0 2
32142: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32143: LD_INT 0
32145: PPUSH
32146: PPUSH
32147: PPUSH
32148: PPUSH
32149: PPUSH
32150: PPUSH
32151: PPUSH
// if not factory then
32152: LD_VAR 0 1
32156: NOT
32157: IFFALSE 32161
// exit ;
32159: GO 32754
// if control = control_apeman then
32161: LD_VAR 0 4
32165: PUSH
32166: LD_INT 5
32168: EQUAL
32169: IFFALSE 32278
// begin tmp := UnitsInside ( factory ) ;
32171: LD_ADDR_VAR 0 8
32175: PUSH
32176: LD_VAR 0 1
32180: PPUSH
32181: CALL_OW 313
32185: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32186: LD_VAR 0 8
32190: PPUSH
32191: LD_INT 25
32193: PUSH
32194: LD_INT 12
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PPUSH
32201: CALL_OW 72
32205: NOT
32206: IFFALSE 32216
// control := control_manual ;
32208: LD_ADDR_VAR 0 4
32212: PUSH
32213: LD_INT 1
32215: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32216: LD_ADDR_VAR 0 8
32220: PUSH
32221: LD_VAR 0 1
32225: PPUSH
32226: CALL 31913 0 1
32230: ST_TO_ADDR
// if tmp then
32231: LD_VAR 0 8
32235: IFFALSE 32278
// begin for i in tmp do
32237: LD_ADDR_VAR 0 7
32241: PUSH
32242: LD_VAR 0 8
32246: PUSH
32247: FOR_IN
32248: IFFALSE 32276
// if i [ 1 ] = b_ext_radio then
32250: LD_VAR 0 7
32254: PUSH
32255: LD_INT 1
32257: ARRAY
32258: PUSH
32259: LD_INT 22
32261: EQUAL
32262: IFFALSE 32274
// begin control := control_remote ;
32264: LD_ADDR_VAR 0 4
32268: PUSH
32269: LD_INT 2
32271: ST_TO_ADDR
// break ;
32272: GO 32276
// end ;
32274: GO 32247
32276: POP
32277: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32278: LD_VAR 0 1
32282: PPUSH
32283: LD_VAR 0 2
32287: PPUSH
32288: LD_VAR 0 3
32292: PPUSH
32293: LD_VAR 0 4
32297: PPUSH
32298: LD_VAR 0 5
32302: PPUSH
32303: CALL_OW 448
32307: IFFALSE 32342
// begin result := [ chassis , engine , control , weapon ] ;
32309: LD_ADDR_VAR 0 6
32313: PUSH
32314: LD_VAR 0 2
32318: PUSH
32319: LD_VAR 0 3
32323: PUSH
32324: LD_VAR 0 4
32328: PUSH
32329: LD_VAR 0 5
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: ST_TO_ADDR
// exit ;
32340: GO 32754
// end ; _chassis := AvailableChassisList ( factory ) ;
32342: LD_ADDR_VAR 0 9
32346: PUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: CALL_OW 475
32356: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32357: LD_ADDR_VAR 0 11
32361: PUSH
32362: LD_VAR 0 1
32366: PPUSH
32367: CALL_OW 476
32371: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32372: LD_ADDR_VAR 0 12
32376: PUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: CALL_OW 477
32386: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32387: LD_ADDR_VAR 0 10
32391: PUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 478
32401: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32402: LD_VAR 0 9
32406: NOT
32407: PUSH
32408: LD_VAR 0 11
32412: NOT
32413: OR
32414: PUSH
32415: LD_VAR 0 12
32419: NOT
32420: OR
32421: PUSH
32422: LD_VAR 0 10
32426: NOT
32427: OR
32428: IFFALSE 32463
// begin result := [ chassis , engine , control , weapon ] ;
32430: LD_ADDR_VAR 0 6
32434: PUSH
32435: LD_VAR 0 2
32439: PUSH
32440: LD_VAR 0 3
32444: PUSH
32445: LD_VAR 0 4
32449: PUSH
32450: LD_VAR 0 5
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: ST_TO_ADDR
// exit ;
32461: GO 32754
// end ; if not chassis in _chassis then
32463: LD_VAR 0 2
32467: PUSH
32468: LD_VAR 0 9
32472: IN
32473: NOT
32474: IFFALSE 32500
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32476: LD_ADDR_VAR 0 2
32480: PUSH
32481: LD_VAR 0 9
32485: PUSH
32486: LD_INT 1
32488: PPUSH
32489: LD_VAR 0 9
32493: PPUSH
32494: CALL_OW 12
32498: ARRAY
32499: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32500: LD_VAR 0 2
32504: PPUSH
32505: LD_VAR 0 3
32509: PPUSH
32510: CALL 32759 0 2
32514: NOT
32515: IFFALSE 32574
// repeat engine := _engine [ 1 ] ;
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_VAR 0 11
32526: PUSH
32527: LD_INT 1
32529: ARRAY
32530: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32531: LD_ADDR_VAR 0 11
32535: PUSH
32536: LD_VAR 0 11
32540: PPUSH
32541: LD_INT 1
32543: PPUSH
32544: CALL_OW 3
32548: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: CALL 32759 0 2
32563: PUSH
32564: LD_VAR 0 11
32568: PUSH
32569: EMPTY
32570: EQUAL
32571: OR
32572: IFFALSE 32517
// if not control in _control then
32574: LD_VAR 0 4
32578: PUSH
32579: LD_VAR 0 12
32583: IN
32584: NOT
32585: IFFALSE 32611
// control := _control [ rand ( 1 , _control ) ] ;
32587: LD_ADDR_VAR 0 4
32591: PUSH
32592: LD_VAR 0 12
32596: PUSH
32597: LD_INT 1
32599: PPUSH
32600: LD_VAR 0 12
32604: PPUSH
32605: CALL_OW 12
32609: ARRAY
32610: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32611: LD_VAR 0 2
32615: PPUSH
32616: LD_VAR 0 5
32620: PPUSH
32621: CALL 32979 0 2
32625: NOT
32626: IFFALSE 32685
// repeat weapon := _weapon [ 1 ] ;
32628: LD_ADDR_VAR 0 5
32632: PUSH
32633: LD_VAR 0 10
32637: PUSH
32638: LD_INT 1
32640: ARRAY
32641: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32642: LD_ADDR_VAR 0 10
32646: PUSH
32647: LD_VAR 0 10
32651: PPUSH
32652: LD_INT 1
32654: PPUSH
32655: CALL_OW 3
32659: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32660: LD_VAR 0 2
32664: PPUSH
32665: LD_VAR 0 5
32669: PPUSH
32670: CALL 32979 0 2
32674: PUSH
32675: LD_VAR 0 10
32679: PUSH
32680: EMPTY
32681: EQUAL
32682: OR
32683: IFFALSE 32628
// result := [ ] ;
32685: LD_ADDR_VAR 0 6
32689: PUSH
32690: EMPTY
32691: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32692: LD_VAR 0 1
32696: PPUSH
32697: LD_VAR 0 2
32701: PPUSH
32702: LD_VAR 0 3
32706: PPUSH
32707: LD_VAR 0 4
32711: PPUSH
32712: LD_VAR 0 5
32716: PPUSH
32717: CALL_OW 448
32721: IFFALSE 32754
// result := [ chassis , engine , control , weapon ] ;
32723: LD_ADDR_VAR 0 6
32727: PUSH
32728: LD_VAR 0 2
32732: PUSH
32733: LD_VAR 0 3
32737: PUSH
32738: LD_VAR 0 4
32742: PUSH
32743: LD_VAR 0 5
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
// end ;
32754: LD_VAR 0 6
32758: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32759: LD_INT 0
32761: PPUSH
// if not chassis or not engine then
32762: LD_VAR 0 1
32766: NOT
32767: PUSH
32768: LD_VAR 0 2
32772: NOT
32773: OR
32774: IFFALSE 32778
// exit ;
32776: GO 32974
// case engine of engine_solar :
32778: LD_VAR 0 2
32782: PUSH
32783: LD_INT 2
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32829
32791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32792: LD_ADDR_VAR 0 3
32796: PUSH
32797: LD_INT 11
32799: PUSH
32800: LD_INT 12
32802: PUSH
32803: LD_INT 13
32805: PUSH
32806: LD_INT 14
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: LD_INT 3
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: ST_TO_ADDR
32827: GO 32958
32829: LD_INT 1
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 32899
32837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_INT 11
32845: PUSH
32846: LD_INT 12
32848: PUSH
32849: LD_INT 13
32851: PUSH
32852: LD_INT 14
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: LD_INT 4
32866: PUSH
32867: LD_INT 5
32869: PUSH
32870: LD_INT 21
32872: PUSH
32873: LD_INT 23
32875: PUSH
32876: LD_INT 22
32878: PUSH
32879: LD_INT 24
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: ST_TO_ADDR
32897: GO 32958
32899: LD_INT 3
32901: DOUBLE
32902: EQUAL
32903: IFTRUE 32907
32905: GO 32957
32907: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: LD_INT 13
32915: PUSH
32916: LD_INT 14
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: LD_INT 21
32933: PUSH
32934: LD_INT 22
32936: PUSH
32937: LD_INT 23
32939: PUSH
32940: LD_INT 24
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: ST_TO_ADDR
32955: GO 32958
32957: POP
// result := ( chassis in result ) ;
32958: LD_ADDR_VAR 0 3
32962: PUSH
32963: LD_VAR 0 1
32967: PUSH
32968: LD_VAR 0 3
32972: IN
32973: ST_TO_ADDR
// end ;
32974: LD_VAR 0 3
32978: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32979: LD_INT 0
32981: PPUSH
// if not chassis or not weapon then
32982: LD_VAR 0 1
32986: NOT
32987: PUSH
32988: LD_VAR 0 2
32992: NOT
32993: OR
32994: IFFALSE 32998
// exit ;
32996: GO 34060
// case weapon of us_machine_gun :
32998: LD_VAR 0 2
33002: PUSH
33003: LD_INT 2
33005: DOUBLE
33006: EQUAL
33007: IFTRUE 33011
33009: GO 33041
33011: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33012: LD_ADDR_VAR 0 3
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 3
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: LD_INT 5
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: ST_TO_ADDR
33039: GO 34044
33041: LD_INT 3
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33049
33047: GO 33079
33049: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33050: LD_ADDR_VAR 0 3
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: LD_INT 3
33063: PUSH
33064: LD_INT 4
33066: PUSH
33067: LD_INT 5
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: ST_TO_ADDR
33077: GO 34044
33079: LD_INT 11
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33087
33085: GO 33117
33087: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33088: LD_ADDR_VAR 0 3
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: LD_INT 3
33101: PUSH
33102: LD_INT 4
33104: PUSH
33105: LD_INT 5
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: ST_TO_ADDR
33115: GO 34044
33117: LD_INT 4
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33125
33123: GO 33151
33125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33126: LD_ADDR_VAR 0 3
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: LD_INT 4
33139: PUSH
33140: LD_INT 5
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: ST_TO_ADDR
33149: GO 34044
33151: LD_INT 5
33153: DOUBLE
33154: EQUAL
33155: IFTRUE 33159
33157: GO 33185
33159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33160: LD_ADDR_VAR 0 3
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 3
33170: PUSH
33171: LD_INT 4
33173: PUSH
33174: LD_INT 5
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: ST_TO_ADDR
33183: GO 34044
33185: LD_INT 9
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33219
33193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 3
33204: PUSH
33205: LD_INT 4
33207: PUSH
33208: LD_INT 5
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: ST_TO_ADDR
33217: GO 34044
33219: LD_INT 7
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33253
33227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: LD_INT 4
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: ST_TO_ADDR
33251: GO 34044
33253: LD_INT 12
33255: DOUBLE
33256: EQUAL
33257: IFTRUE 33261
33259: GO 33287
33261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33262: LD_ADDR_VAR 0 3
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 3
33272: PUSH
33273: LD_INT 4
33275: PUSH
33276: LD_INT 5
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
33285: GO 34044
33287: LD_INT 13
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33295
33293: GO 33321
33295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33296: LD_ADDR_VAR 0 3
33300: PUSH
33301: LD_INT 2
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: LD_INT 5
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: ST_TO_ADDR
33319: GO 34044
33321: LD_INT 14
33323: DOUBLE
33324: EQUAL
33325: IFTRUE 33329
33327: GO 33347
33329: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33330: LD_ADDR_VAR 0 3
33334: PUSH
33335: LD_INT 4
33337: PUSH
33338: LD_INT 5
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: ST_TO_ADDR
33345: GO 34044
33347: LD_INT 6
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33373
33355: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_INT 4
33363: PUSH
33364: LD_INT 5
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: ST_TO_ADDR
33371: GO 34044
33373: LD_INT 10
33375: DOUBLE
33376: EQUAL
33377: IFTRUE 33381
33379: GO 33399
33381: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: LD_INT 4
33389: PUSH
33390: LD_INT 5
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: ST_TO_ADDR
33397: GO 34044
33399: LD_INT 22
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33407
33405: GO 33433
33407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_INT 11
33415: PUSH
33416: LD_INT 12
33418: PUSH
33419: LD_INT 13
33421: PUSH
33422: LD_INT 14
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: ST_TO_ADDR
33431: GO 34044
33433: LD_INT 23
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33441
33439: GO 33467
33441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33442: LD_ADDR_VAR 0 3
33446: PUSH
33447: LD_INT 11
33449: PUSH
33450: LD_INT 12
33452: PUSH
33453: LD_INT 13
33455: PUSH
33456: LD_INT 14
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: ST_TO_ADDR
33465: GO 34044
33467: LD_INT 24
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33501
33475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33476: LD_ADDR_VAR 0 3
33480: PUSH
33481: LD_INT 11
33483: PUSH
33484: LD_INT 12
33486: PUSH
33487: LD_INT 13
33489: PUSH
33490: LD_INT 14
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: ST_TO_ADDR
33499: GO 34044
33501: LD_INT 30
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33509
33507: GO 33535
33509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_INT 11
33517: PUSH
33518: LD_INT 12
33520: PUSH
33521: LD_INT 13
33523: PUSH
33524: LD_INT 14
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: ST_TO_ADDR
33533: GO 34044
33535: LD_INT 25
33537: DOUBLE
33538: EQUAL
33539: IFTRUE 33543
33541: GO 33561
33543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: LD_INT 13
33551: PUSH
33552: LD_INT 14
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: ST_TO_ADDR
33559: GO 34044
33561: LD_INT 27
33563: DOUBLE
33564: EQUAL
33565: IFTRUE 33569
33567: GO 33587
33569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33570: LD_ADDR_VAR 0 3
33574: PUSH
33575: LD_INT 13
33577: PUSH
33578: LD_INT 14
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: ST_TO_ADDR
33585: GO 34044
33587: LD_EXP 100
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33597
33595: GO 33623
33597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33598: LD_ADDR_VAR 0 3
33602: PUSH
33603: LD_INT 11
33605: PUSH
33606: LD_INT 12
33608: PUSH
33609: LD_INT 13
33611: PUSH
33612: LD_INT 14
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: ST_TO_ADDR
33621: GO 34044
33623: LD_INT 28
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33631
33629: GO 33649
33631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33632: LD_ADDR_VAR 0 3
33636: PUSH
33637: LD_INT 13
33639: PUSH
33640: LD_INT 14
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: ST_TO_ADDR
33647: GO 34044
33649: LD_INT 29
33651: DOUBLE
33652: EQUAL
33653: IFTRUE 33657
33655: GO 33675
33657: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_INT 13
33665: PUSH
33666: LD_INT 14
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: ST_TO_ADDR
33673: GO 34044
33675: LD_INT 31
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33683
33681: GO 33701
33683: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_INT 13
33691: PUSH
33692: LD_INT 14
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: ST_TO_ADDR
33699: GO 34044
33701: LD_INT 26
33703: DOUBLE
33704: EQUAL
33705: IFTRUE 33709
33707: GO 33727
33709: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33710: LD_ADDR_VAR 0 3
33714: PUSH
33715: LD_INT 13
33717: PUSH
33718: LD_INT 14
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: ST_TO_ADDR
33725: GO 34044
33727: LD_INT 42
33729: DOUBLE
33730: EQUAL
33731: IFTRUE 33735
33733: GO 33761
33735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33736: LD_ADDR_VAR 0 3
33740: PUSH
33741: LD_INT 21
33743: PUSH
33744: LD_INT 22
33746: PUSH
33747: LD_INT 23
33749: PUSH
33750: LD_INT 24
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: ST_TO_ADDR
33759: GO 34044
33761: LD_INT 43
33763: DOUBLE
33764: EQUAL
33765: IFTRUE 33769
33767: GO 33795
33769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33770: LD_ADDR_VAR 0 3
33774: PUSH
33775: LD_INT 21
33777: PUSH
33778: LD_INT 22
33780: PUSH
33781: LD_INT 23
33783: PUSH
33784: LD_INT 24
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 34044
33795: LD_INT 44
33797: DOUBLE
33798: EQUAL
33799: IFTRUE 33803
33801: GO 33829
33803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33804: LD_ADDR_VAR 0 3
33808: PUSH
33809: LD_INT 21
33811: PUSH
33812: LD_INT 22
33814: PUSH
33815: LD_INT 23
33817: PUSH
33818: LD_INT 24
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: ST_TO_ADDR
33827: GO 34044
33829: LD_INT 45
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33863
33837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_INT 21
33845: PUSH
33846: LD_INT 22
33848: PUSH
33849: LD_INT 23
33851: PUSH
33852: LD_INT 24
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: ST_TO_ADDR
33861: GO 34044
33863: LD_INT 49
33865: DOUBLE
33866: EQUAL
33867: IFTRUE 33871
33869: GO 33897
33871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33872: LD_ADDR_VAR 0 3
33876: PUSH
33877: LD_INT 21
33879: PUSH
33880: LD_INT 22
33882: PUSH
33883: LD_INT 23
33885: PUSH
33886: LD_INT 24
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: ST_TO_ADDR
33895: GO 34044
33897: LD_INT 51
33899: DOUBLE
33900: EQUAL
33901: IFTRUE 33905
33903: GO 33931
33905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33906: LD_ADDR_VAR 0 3
33910: PUSH
33911: LD_INT 21
33913: PUSH
33914: LD_INT 22
33916: PUSH
33917: LD_INT 23
33919: PUSH
33920: LD_INT 24
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: ST_TO_ADDR
33929: GO 34044
33931: LD_INT 52
33933: DOUBLE
33934: EQUAL
33935: IFTRUE 33939
33937: GO 33965
33939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: LD_INT 21
33947: PUSH
33948: LD_INT 22
33950: PUSH
33951: LD_INT 23
33953: PUSH
33954: LD_INT 24
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
33963: GO 34044
33965: LD_INT 53
33967: DOUBLE
33968: EQUAL
33969: IFTRUE 33973
33971: GO 33991
33973: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33974: LD_ADDR_VAR 0 3
33978: PUSH
33979: LD_INT 23
33981: PUSH
33982: LD_INT 24
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: ST_TO_ADDR
33989: GO 34044
33991: LD_INT 46
33993: DOUBLE
33994: EQUAL
33995: IFTRUE 33999
33997: GO 34017
33999: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34000: LD_ADDR_VAR 0 3
34004: PUSH
34005: LD_INT 23
34007: PUSH
34008: LD_INT 24
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: ST_TO_ADDR
34015: GO 34044
34017: LD_INT 47
34019: DOUBLE
34020: EQUAL
34021: IFTRUE 34025
34023: GO 34043
34025: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34026: LD_ADDR_VAR 0 3
34030: PUSH
34031: LD_INT 23
34033: PUSH
34034: LD_INT 24
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: ST_TO_ADDR
34041: GO 34044
34043: POP
// result := ( chassis in result ) ;
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_VAR 0 1
34053: PUSH
34054: LD_VAR 0 3
34058: IN
34059: ST_TO_ADDR
// end ;
34060: LD_VAR 0 3
34064: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34065: LD_INT 0
34067: PPUSH
34068: PPUSH
34069: PPUSH
34070: PPUSH
34071: PPUSH
34072: PPUSH
34073: PPUSH
// result := array ;
34074: LD_ADDR_VAR 0 5
34078: PUSH
34079: LD_VAR 0 1
34083: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34084: LD_VAR 0 1
34088: NOT
34089: PUSH
34090: LD_VAR 0 2
34094: NOT
34095: OR
34096: PUSH
34097: LD_VAR 0 3
34101: NOT
34102: OR
34103: PUSH
34104: LD_VAR 0 2
34108: PUSH
34109: LD_VAR 0 1
34113: GREATER
34114: OR
34115: PUSH
34116: LD_VAR 0 3
34120: PUSH
34121: LD_VAR 0 1
34125: GREATER
34126: OR
34127: IFFALSE 34131
// exit ;
34129: GO 34427
// if direction then
34131: LD_VAR 0 4
34135: IFFALSE 34199
// begin d := 1 ;
34137: LD_ADDR_VAR 0 9
34141: PUSH
34142: LD_INT 1
34144: ST_TO_ADDR
// if i_from > i_to then
34145: LD_VAR 0 2
34149: PUSH
34150: LD_VAR 0 3
34154: GREATER
34155: IFFALSE 34181
// length := ( array - i_from ) + i_to else
34157: LD_ADDR_VAR 0 11
34161: PUSH
34162: LD_VAR 0 1
34166: PUSH
34167: LD_VAR 0 2
34171: MINUS
34172: PUSH
34173: LD_VAR 0 3
34177: PLUS
34178: ST_TO_ADDR
34179: GO 34197
// length := i_to - i_from ;
34181: LD_ADDR_VAR 0 11
34185: PUSH
34186: LD_VAR 0 3
34190: PUSH
34191: LD_VAR 0 2
34195: MINUS
34196: ST_TO_ADDR
// end else
34197: GO 34260
// begin d := - 1 ;
34199: LD_ADDR_VAR 0 9
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: ST_TO_ADDR
// if i_from > i_to then
34208: LD_VAR 0 2
34212: PUSH
34213: LD_VAR 0 3
34217: GREATER
34218: IFFALSE 34238
// length := i_from - i_to else
34220: LD_ADDR_VAR 0 11
34224: PUSH
34225: LD_VAR 0 2
34229: PUSH
34230: LD_VAR 0 3
34234: MINUS
34235: ST_TO_ADDR
34236: GO 34260
// length := ( array - i_to ) + i_from ;
34238: LD_ADDR_VAR 0 11
34242: PUSH
34243: LD_VAR 0 1
34247: PUSH
34248: LD_VAR 0 3
34252: MINUS
34253: PUSH
34254: LD_VAR 0 2
34258: PLUS
34259: ST_TO_ADDR
// end ; if not length then
34260: LD_VAR 0 11
34264: NOT
34265: IFFALSE 34269
// exit ;
34267: GO 34427
// tmp := array ;
34269: LD_ADDR_VAR 0 10
34273: PUSH
34274: LD_VAR 0 1
34278: ST_TO_ADDR
// for i = 1 to length do
34279: LD_ADDR_VAR 0 6
34283: PUSH
34284: DOUBLE
34285: LD_INT 1
34287: DEC
34288: ST_TO_ADDR
34289: LD_VAR 0 11
34293: PUSH
34294: FOR_TO
34295: IFFALSE 34415
// begin for j = 1 to array do
34297: LD_ADDR_VAR 0 7
34301: PUSH
34302: DOUBLE
34303: LD_INT 1
34305: DEC
34306: ST_TO_ADDR
34307: LD_VAR 0 1
34311: PUSH
34312: FOR_TO
34313: IFFALSE 34401
// begin k := j + d ;
34315: LD_ADDR_VAR 0 8
34319: PUSH
34320: LD_VAR 0 7
34324: PUSH
34325: LD_VAR 0 9
34329: PLUS
34330: ST_TO_ADDR
// if k > array then
34331: LD_VAR 0 8
34335: PUSH
34336: LD_VAR 0 1
34340: GREATER
34341: IFFALSE 34351
// k := 1 ;
34343: LD_ADDR_VAR 0 8
34347: PUSH
34348: LD_INT 1
34350: ST_TO_ADDR
// if not k then
34351: LD_VAR 0 8
34355: NOT
34356: IFFALSE 34368
// k := array ;
34358: LD_ADDR_VAR 0 8
34362: PUSH
34363: LD_VAR 0 1
34367: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34368: LD_ADDR_VAR 0 10
34372: PUSH
34373: LD_VAR 0 10
34377: PPUSH
34378: LD_VAR 0 8
34382: PPUSH
34383: LD_VAR 0 1
34387: PUSH
34388: LD_VAR 0 7
34392: ARRAY
34393: PPUSH
34394: CALL_OW 1
34398: ST_TO_ADDR
// end ;
34399: GO 34312
34401: POP
34402: POP
// array := tmp ;
34403: LD_ADDR_VAR 0 1
34407: PUSH
34408: LD_VAR 0 10
34412: ST_TO_ADDR
// end ;
34413: GO 34294
34415: POP
34416: POP
// result := array ;
34417: LD_ADDR_VAR 0 5
34421: PUSH
34422: LD_VAR 0 1
34426: ST_TO_ADDR
// end ;
34427: LD_VAR 0 5
34431: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34432: LD_INT 0
34434: PPUSH
34435: PPUSH
// result := 0 ;
34436: LD_ADDR_VAR 0 3
34440: PUSH
34441: LD_INT 0
34443: ST_TO_ADDR
// if not array or not value in array then
34444: LD_VAR 0 1
34448: NOT
34449: PUSH
34450: LD_VAR 0 2
34454: PUSH
34455: LD_VAR 0 1
34459: IN
34460: NOT
34461: OR
34462: IFFALSE 34466
// exit ;
34464: GO 34520
// for i = 1 to array do
34466: LD_ADDR_VAR 0 4
34470: PUSH
34471: DOUBLE
34472: LD_INT 1
34474: DEC
34475: ST_TO_ADDR
34476: LD_VAR 0 1
34480: PUSH
34481: FOR_TO
34482: IFFALSE 34518
// if value = array [ i ] then
34484: LD_VAR 0 2
34488: PUSH
34489: LD_VAR 0 1
34493: PUSH
34494: LD_VAR 0 4
34498: ARRAY
34499: EQUAL
34500: IFFALSE 34516
// begin result := i ;
34502: LD_ADDR_VAR 0 3
34506: PUSH
34507: LD_VAR 0 4
34511: ST_TO_ADDR
// exit ;
34512: POP
34513: POP
34514: GO 34520
// end ;
34516: GO 34481
34518: POP
34519: POP
// end ;
34520: LD_VAR 0 3
34524: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34525: LD_INT 0
34527: PPUSH
// vc_chassis := chassis ;
34528: LD_ADDR_OWVAR 37
34532: PUSH
34533: LD_VAR 0 1
34537: ST_TO_ADDR
// vc_engine := engine ;
34538: LD_ADDR_OWVAR 39
34542: PUSH
34543: LD_VAR 0 2
34547: ST_TO_ADDR
// vc_control := control ;
34548: LD_ADDR_OWVAR 38
34552: PUSH
34553: LD_VAR 0 3
34557: ST_TO_ADDR
// vc_weapon := weapon ;
34558: LD_ADDR_OWVAR 40
34562: PUSH
34563: LD_VAR 0 4
34567: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34568: LD_ADDR_OWVAR 41
34572: PUSH
34573: LD_VAR 0 5
34577: ST_TO_ADDR
// end ;
34578: LD_VAR 0 6
34582: RET
// export function WantPlant ( unit ) ; var task ; begin
34583: LD_INT 0
34585: PPUSH
34586: PPUSH
// result := false ;
34587: LD_ADDR_VAR 0 2
34591: PUSH
34592: LD_INT 0
34594: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34595: LD_ADDR_VAR 0 3
34599: PUSH
34600: LD_VAR 0 1
34604: PPUSH
34605: CALL_OW 437
34609: ST_TO_ADDR
// if task then
34610: LD_VAR 0 3
34614: IFFALSE 34642
// if task [ 1 ] [ 1 ] = p then
34616: LD_VAR 0 3
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: PUSH
34625: LD_INT 1
34627: ARRAY
34628: PUSH
34629: LD_STRING p
34631: EQUAL
34632: IFFALSE 34642
// result := true ;
34634: LD_ADDR_VAR 0 2
34638: PUSH
34639: LD_INT 1
34641: ST_TO_ADDR
// end ;
34642: LD_VAR 0 2
34646: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34647: LD_INT 0
34649: PPUSH
34650: PPUSH
34651: PPUSH
34652: PPUSH
// if pos < 1 then
34653: LD_VAR 0 2
34657: PUSH
34658: LD_INT 1
34660: LESS
34661: IFFALSE 34665
// exit ;
34663: GO 34968
// if pos = 1 then
34665: LD_VAR 0 2
34669: PUSH
34670: LD_INT 1
34672: EQUAL
34673: IFFALSE 34706
// result := Replace ( arr , pos [ 1 ] , value ) else
34675: LD_ADDR_VAR 0 4
34679: PUSH
34680: LD_VAR 0 1
34684: PPUSH
34685: LD_VAR 0 2
34689: PUSH
34690: LD_INT 1
34692: ARRAY
34693: PPUSH
34694: LD_VAR 0 3
34698: PPUSH
34699: CALL_OW 1
34703: ST_TO_ADDR
34704: GO 34968
// begin tmp := arr ;
34706: LD_ADDR_VAR 0 6
34710: PUSH
34711: LD_VAR 0 1
34715: ST_TO_ADDR
// s_arr := [ tmp ] ;
34716: LD_ADDR_VAR 0 7
34720: PUSH
34721: LD_VAR 0 6
34725: PUSH
34726: EMPTY
34727: LIST
34728: ST_TO_ADDR
// for i = 1 to pos - 1 do
34729: LD_ADDR_VAR 0 5
34733: PUSH
34734: DOUBLE
34735: LD_INT 1
34737: DEC
34738: ST_TO_ADDR
34739: LD_VAR 0 2
34743: PUSH
34744: LD_INT 1
34746: MINUS
34747: PUSH
34748: FOR_TO
34749: IFFALSE 34794
// begin tmp := tmp [ pos [ i ] ] ;
34751: LD_ADDR_VAR 0 6
34755: PUSH
34756: LD_VAR 0 6
34760: PUSH
34761: LD_VAR 0 2
34765: PUSH
34766: LD_VAR 0 5
34770: ARRAY
34771: ARRAY
34772: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34773: LD_ADDR_VAR 0 7
34777: PUSH
34778: LD_VAR 0 7
34782: PUSH
34783: LD_VAR 0 6
34787: PUSH
34788: EMPTY
34789: LIST
34790: ADD
34791: ST_TO_ADDR
// end ;
34792: GO 34748
34794: POP
34795: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34796: LD_ADDR_VAR 0 6
34800: PUSH
34801: LD_VAR 0 6
34805: PPUSH
34806: LD_VAR 0 2
34810: PUSH
34811: LD_VAR 0 2
34815: ARRAY
34816: PPUSH
34817: LD_VAR 0 3
34821: PPUSH
34822: CALL_OW 1
34826: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34827: LD_ADDR_VAR 0 7
34831: PUSH
34832: LD_VAR 0 7
34836: PPUSH
34837: LD_VAR 0 7
34841: PPUSH
34842: LD_VAR 0 6
34846: PPUSH
34847: CALL_OW 1
34851: ST_TO_ADDR
// for i = s_arr downto 2 do
34852: LD_ADDR_VAR 0 5
34856: PUSH
34857: DOUBLE
34858: LD_VAR 0 7
34862: INC
34863: ST_TO_ADDR
34864: LD_INT 2
34866: PUSH
34867: FOR_DOWNTO
34868: IFFALSE 34952
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34870: LD_ADDR_VAR 0 6
34874: PUSH
34875: LD_VAR 0 7
34879: PUSH
34880: LD_VAR 0 5
34884: PUSH
34885: LD_INT 1
34887: MINUS
34888: ARRAY
34889: PPUSH
34890: LD_VAR 0 2
34894: PUSH
34895: LD_VAR 0 5
34899: PUSH
34900: LD_INT 1
34902: MINUS
34903: ARRAY
34904: PPUSH
34905: LD_VAR 0 7
34909: PUSH
34910: LD_VAR 0 5
34914: ARRAY
34915: PPUSH
34916: CALL_OW 1
34920: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34921: LD_ADDR_VAR 0 7
34925: PUSH
34926: LD_VAR 0 7
34930: PPUSH
34931: LD_VAR 0 5
34935: PUSH
34936: LD_INT 1
34938: MINUS
34939: PPUSH
34940: LD_VAR 0 6
34944: PPUSH
34945: CALL_OW 1
34949: ST_TO_ADDR
// end ;
34950: GO 34867
34952: POP
34953: POP
// result := s_arr [ 1 ] ;
34954: LD_ADDR_VAR 0 4
34958: PUSH
34959: LD_VAR 0 7
34963: PUSH
34964: LD_INT 1
34966: ARRAY
34967: ST_TO_ADDR
// end ; end ;
34968: LD_VAR 0 4
34972: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
// if not list then
34977: LD_VAR 0 1
34981: NOT
34982: IFFALSE 34986
// exit ;
34984: GO 35077
// i := list [ pos1 ] ;
34986: LD_ADDR_VAR 0 5
34990: PUSH
34991: LD_VAR 0 1
34995: PUSH
34996: LD_VAR 0 2
35000: ARRAY
35001: ST_TO_ADDR
// if not i then
35002: LD_VAR 0 5
35006: NOT
35007: IFFALSE 35011
// exit ;
35009: GO 35077
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35011: LD_ADDR_VAR 0 1
35015: PUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: LD_VAR 0 2
35025: PPUSH
35026: LD_VAR 0 1
35030: PUSH
35031: LD_VAR 0 3
35035: ARRAY
35036: PPUSH
35037: CALL_OW 1
35041: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35042: LD_ADDR_VAR 0 1
35046: PUSH
35047: LD_VAR 0 1
35051: PPUSH
35052: LD_VAR 0 3
35056: PPUSH
35057: LD_VAR 0 5
35061: PPUSH
35062: CALL_OW 1
35066: ST_TO_ADDR
// result := list ;
35067: LD_ADDR_VAR 0 4
35071: PUSH
35072: LD_VAR 0 1
35076: ST_TO_ADDR
// end ;
35077: LD_VAR 0 4
35081: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35082: LD_INT 0
35084: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35085: LD_ADDR_VAR 0 5
35089: PUSH
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 250
35099: PPUSH
35100: LD_VAR 0 1
35104: PPUSH
35105: CALL_OW 251
35109: PPUSH
35110: LD_VAR 0 2
35114: PPUSH
35115: LD_VAR 0 3
35119: PPUSH
35120: LD_VAR 0 4
35124: PPUSH
35125: CALL 35135 0 5
35129: ST_TO_ADDR
// end ;
35130: LD_VAR 0 5
35134: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35135: LD_INT 0
35137: PPUSH
35138: PPUSH
35139: PPUSH
35140: PPUSH
// if not list then
35141: LD_VAR 0 3
35145: NOT
35146: IFFALSE 35150
// exit ;
35148: GO 35538
// result := [ ] ;
35150: LD_ADDR_VAR 0 6
35154: PUSH
35155: EMPTY
35156: ST_TO_ADDR
// for i in list do
35157: LD_ADDR_VAR 0 7
35161: PUSH
35162: LD_VAR 0 3
35166: PUSH
35167: FOR_IN
35168: IFFALSE 35370
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35170: LD_ADDR_VAR 0 9
35174: PUSH
35175: LD_VAR 0 7
35179: PPUSH
35180: LD_VAR 0 1
35184: PPUSH
35185: LD_VAR 0 2
35189: PPUSH
35190: CALL_OW 297
35194: ST_TO_ADDR
// if not result then
35195: LD_VAR 0 6
35199: NOT
35200: IFFALSE 35226
// result := [ [ i , tmp ] ] else
35202: LD_ADDR_VAR 0 6
35206: PUSH
35207: LD_VAR 0 7
35211: PUSH
35212: LD_VAR 0 9
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: EMPTY
35222: LIST
35223: ST_TO_ADDR
35224: GO 35368
// begin if result [ result ] [ 2 ] < tmp then
35226: LD_VAR 0 6
35230: PUSH
35231: LD_VAR 0 6
35235: ARRAY
35236: PUSH
35237: LD_INT 2
35239: ARRAY
35240: PUSH
35241: LD_VAR 0 9
35245: LESS
35246: IFFALSE 35288
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35248: LD_ADDR_VAR 0 6
35252: PUSH
35253: LD_VAR 0 6
35257: PPUSH
35258: LD_VAR 0 6
35262: PUSH
35263: LD_INT 1
35265: PLUS
35266: PPUSH
35267: LD_VAR 0 7
35271: PUSH
35272: LD_VAR 0 9
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PPUSH
35281: CALL_OW 2
35285: ST_TO_ADDR
35286: GO 35368
// for j = 1 to result do
35288: LD_ADDR_VAR 0 8
35292: PUSH
35293: DOUBLE
35294: LD_INT 1
35296: DEC
35297: ST_TO_ADDR
35298: LD_VAR 0 6
35302: PUSH
35303: FOR_TO
35304: IFFALSE 35366
// begin if tmp < result [ j ] [ 2 ] then
35306: LD_VAR 0 9
35310: PUSH
35311: LD_VAR 0 6
35315: PUSH
35316: LD_VAR 0 8
35320: ARRAY
35321: PUSH
35322: LD_INT 2
35324: ARRAY
35325: LESS
35326: IFFALSE 35364
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35328: LD_ADDR_VAR 0 6
35332: PUSH
35333: LD_VAR 0 6
35337: PPUSH
35338: LD_VAR 0 8
35342: PPUSH
35343: LD_VAR 0 7
35347: PUSH
35348: LD_VAR 0 9
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PPUSH
35357: CALL_OW 2
35361: ST_TO_ADDR
// break ;
35362: GO 35366
// end ; end ;
35364: GO 35303
35366: POP
35367: POP
// end ; end ;
35368: GO 35167
35370: POP
35371: POP
// if result and not asc then
35372: LD_VAR 0 6
35376: PUSH
35377: LD_VAR 0 4
35381: NOT
35382: AND
35383: IFFALSE 35458
// begin tmp := result ;
35385: LD_ADDR_VAR 0 9
35389: PUSH
35390: LD_VAR 0 6
35394: ST_TO_ADDR
// for i = tmp downto 1 do
35395: LD_ADDR_VAR 0 7
35399: PUSH
35400: DOUBLE
35401: LD_VAR 0 9
35405: INC
35406: ST_TO_ADDR
35407: LD_INT 1
35409: PUSH
35410: FOR_DOWNTO
35411: IFFALSE 35456
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35413: LD_ADDR_VAR 0 6
35417: PUSH
35418: LD_VAR 0 6
35422: PPUSH
35423: LD_VAR 0 9
35427: PUSH
35428: LD_VAR 0 7
35432: MINUS
35433: PUSH
35434: LD_INT 1
35436: PLUS
35437: PPUSH
35438: LD_VAR 0 9
35442: PUSH
35443: LD_VAR 0 7
35447: ARRAY
35448: PPUSH
35449: CALL_OW 1
35453: ST_TO_ADDR
35454: GO 35410
35456: POP
35457: POP
// end ; tmp := [ ] ;
35458: LD_ADDR_VAR 0 9
35462: PUSH
35463: EMPTY
35464: ST_TO_ADDR
// if mode then
35465: LD_VAR 0 5
35469: IFFALSE 35538
// begin for i = 1 to result do
35471: LD_ADDR_VAR 0 7
35475: PUSH
35476: DOUBLE
35477: LD_INT 1
35479: DEC
35480: ST_TO_ADDR
35481: LD_VAR 0 6
35485: PUSH
35486: FOR_TO
35487: IFFALSE 35526
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35489: LD_ADDR_VAR 0 9
35493: PUSH
35494: LD_VAR 0 9
35498: PPUSH
35499: LD_VAR 0 7
35503: PPUSH
35504: LD_VAR 0 6
35508: PUSH
35509: LD_VAR 0 7
35513: ARRAY
35514: PUSH
35515: LD_INT 1
35517: ARRAY
35518: PPUSH
35519: CALL_OW 1
35523: ST_TO_ADDR
35524: GO 35486
35526: POP
35527: POP
// result := tmp ;
35528: LD_ADDR_VAR 0 6
35532: PUSH
35533: LD_VAR 0 9
35537: ST_TO_ADDR
// end ; end ;
35538: LD_VAR 0 6
35542: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35543: LD_INT 0
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
35550: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35551: LD_ADDR_VAR 0 5
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// if not x or not y then
35573: LD_VAR 0 2
35577: NOT
35578: PUSH
35579: LD_VAR 0 3
35583: NOT
35584: OR
35585: IFFALSE 35589
// exit ;
35587: GO 37241
// if not range then
35589: LD_VAR 0 4
35593: NOT
35594: IFFALSE 35604
// range := 10 ;
35596: LD_ADDR_VAR 0 4
35600: PUSH
35601: LD_INT 10
35603: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35604: LD_ADDR_VAR 0 8
35608: PUSH
35609: LD_INT 81
35611: PUSH
35612: LD_VAR 0 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 92
35623: PUSH
35624: LD_VAR 0 2
35628: PUSH
35629: LD_VAR 0 3
35633: PUSH
35634: LD_VAR 0 4
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: LD_INT 21
35650: PUSH
35651: LD_INT 3
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: PPUSH
35667: CALL_OW 69
35671: ST_TO_ADDR
// if not tmp then
35672: LD_VAR 0 8
35676: NOT
35677: IFFALSE 35681
// exit ;
35679: GO 37241
// for i in tmp do
35681: LD_ADDR_VAR 0 6
35685: PUSH
35686: LD_VAR 0 8
35690: PUSH
35691: FOR_IN
35692: IFFALSE 37216
// begin points := [ 0 , 0 , 0 ] ;
35694: LD_ADDR_VAR 0 9
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// bpoints := 1 ;
35713: LD_ADDR_VAR 0 10
35717: PUSH
35718: LD_INT 1
35720: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35721: LD_VAR 0 6
35725: PPUSH
35726: CALL_OW 247
35730: PUSH
35731: LD_INT 1
35733: DOUBLE
35734: EQUAL
35735: IFTRUE 35739
35737: GO 36317
35739: POP
// begin if GetClass ( i ) = 1 then
35740: LD_VAR 0 6
35744: PPUSH
35745: CALL_OW 257
35749: PUSH
35750: LD_INT 1
35752: EQUAL
35753: IFFALSE 35774
// points := [ 10 , 5 , 3 ] ;
35755: LD_ADDR_VAR 0 9
35759: PUSH
35760: LD_INT 10
35762: PUSH
35763: LD_INT 5
35765: PUSH
35766: LD_INT 3
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35774: LD_VAR 0 6
35778: PPUSH
35779: CALL_OW 257
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: LD_INT 4
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: IN
35798: IFFALSE 35819
// points := [ 3 , 2 , 1 ] ;
35800: LD_ADDR_VAR 0 9
35804: PUSH
35805: LD_INT 3
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35819: LD_VAR 0 6
35823: PPUSH
35824: CALL_OW 257
35828: PUSH
35829: LD_INT 5
35831: EQUAL
35832: IFFALSE 35853
// points := [ 130 , 5 , 2 ] ;
35834: LD_ADDR_VAR 0 9
35838: PUSH
35839: LD_INT 130
35841: PUSH
35842: LD_INT 5
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35853: LD_VAR 0 6
35857: PPUSH
35858: CALL_OW 257
35862: PUSH
35863: LD_INT 8
35865: EQUAL
35866: IFFALSE 35887
// points := [ 35 , 35 , 30 ] ;
35868: LD_ADDR_VAR 0 9
35872: PUSH
35873: LD_INT 35
35875: PUSH
35876: LD_INT 35
35878: PUSH
35879: LD_INT 30
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35887: LD_VAR 0 6
35891: PPUSH
35892: CALL_OW 257
35896: PUSH
35897: LD_INT 9
35899: EQUAL
35900: IFFALSE 35921
// points := [ 20 , 55 , 40 ] ;
35902: LD_ADDR_VAR 0 9
35906: PUSH
35907: LD_INT 20
35909: PUSH
35910: LD_INT 55
35912: PUSH
35913: LD_INT 40
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35921: LD_VAR 0 6
35925: PPUSH
35926: CALL_OW 257
35930: PUSH
35931: LD_INT 12
35933: PUSH
35934: LD_INT 16
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: IN
35941: IFFALSE 35962
// points := [ 5 , 3 , 2 ] ;
35943: LD_ADDR_VAR 0 9
35947: PUSH
35948: LD_INT 5
35950: PUSH
35951: LD_INT 3
35953: PUSH
35954: LD_INT 2
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: LIST
35961: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35962: LD_VAR 0 6
35966: PPUSH
35967: CALL_OW 257
35971: PUSH
35972: LD_INT 17
35974: EQUAL
35975: IFFALSE 35996
// points := [ 100 , 50 , 75 ] ;
35977: LD_ADDR_VAR 0 9
35981: PUSH
35982: LD_INT 100
35984: PUSH
35985: LD_INT 50
35987: PUSH
35988: LD_INT 75
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35996: LD_VAR 0 6
36000: PPUSH
36001: CALL_OW 257
36005: PUSH
36006: LD_INT 15
36008: EQUAL
36009: IFFALSE 36030
// points := [ 10 , 5 , 3 ] ;
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: LD_INT 10
36018: PUSH
36019: LD_INT 5
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36030: LD_VAR 0 6
36034: PPUSH
36035: CALL_OW 257
36039: PUSH
36040: LD_INT 14
36042: EQUAL
36043: IFFALSE 36064
// points := [ 10 , 0 , 0 ] ;
36045: LD_ADDR_VAR 0 9
36049: PUSH
36050: LD_INT 10
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36064: LD_VAR 0 6
36068: PPUSH
36069: CALL_OW 257
36073: PUSH
36074: LD_INT 11
36076: EQUAL
36077: IFFALSE 36098
// points := [ 30 , 10 , 5 ] ;
36079: LD_ADDR_VAR 0 9
36083: PUSH
36084: LD_INT 30
36086: PUSH
36087: LD_INT 10
36089: PUSH
36090: LD_INT 5
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36098: LD_VAR 0 1
36102: PPUSH
36103: LD_INT 5
36105: PPUSH
36106: CALL_OW 321
36110: PUSH
36111: LD_INT 2
36113: EQUAL
36114: IFFALSE 36131
// bpoints := bpoints * 1.8 ;
36116: LD_ADDR_VAR 0 10
36120: PUSH
36121: LD_VAR 0 10
36125: PUSH
36126: LD_REAL  1.80000000000000E+0000
36129: MUL
36130: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36131: LD_VAR 0 6
36135: PPUSH
36136: CALL_OW 257
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 3
36149: PUSH
36150: LD_INT 4
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: IN
36159: PUSH
36160: LD_VAR 0 1
36164: PPUSH
36165: LD_INT 51
36167: PPUSH
36168: CALL_OW 321
36172: PUSH
36173: LD_INT 2
36175: EQUAL
36176: AND
36177: IFFALSE 36194
// bpoints := bpoints * 1.2 ;
36179: LD_ADDR_VAR 0 10
36183: PUSH
36184: LD_VAR 0 10
36188: PUSH
36189: LD_REAL  1.20000000000000E+0000
36192: MUL
36193: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36194: LD_VAR 0 6
36198: PPUSH
36199: CALL_OW 257
36203: PUSH
36204: LD_INT 5
36206: PUSH
36207: LD_INT 7
36209: PUSH
36210: LD_INT 9
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: IN
36218: PUSH
36219: LD_VAR 0 1
36223: PPUSH
36224: LD_INT 52
36226: PPUSH
36227: CALL_OW 321
36231: PUSH
36232: LD_INT 2
36234: EQUAL
36235: AND
36236: IFFALSE 36253
// bpoints := bpoints * 1.5 ;
36238: LD_ADDR_VAR 0 10
36242: PUSH
36243: LD_VAR 0 10
36247: PUSH
36248: LD_REAL  1.50000000000000E+0000
36251: MUL
36252: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36253: LD_VAR 0 1
36257: PPUSH
36258: LD_INT 66
36260: PPUSH
36261: CALL_OW 321
36265: PUSH
36266: LD_INT 2
36268: EQUAL
36269: IFFALSE 36286
// bpoints := bpoints * 1.1 ;
36271: LD_ADDR_VAR 0 10
36275: PUSH
36276: LD_VAR 0 10
36280: PUSH
36281: LD_REAL  1.10000000000000E+0000
36284: MUL
36285: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36286: LD_ADDR_VAR 0 10
36290: PUSH
36291: LD_VAR 0 10
36295: PUSH
36296: LD_VAR 0 6
36300: PPUSH
36301: LD_INT 1
36303: PPUSH
36304: CALL_OW 259
36308: PUSH
36309: LD_REAL  1.15000000000000E+0000
36312: MUL
36313: MUL
36314: ST_TO_ADDR
// end ; unit_vehicle :
36315: GO 37145
36317: LD_INT 2
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36325
36323: GO 37133
36325: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36326: LD_VAR 0 6
36330: PPUSH
36331: CALL_OW 264
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 42
36341: PUSH
36342: LD_INT 24
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: IN
36350: IFFALSE 36371
// points := [ 25 , 5 , 3 ] ;
36352: LD_ADDR_VAR 0 9
36356: PUSH
36357: LD_INT 25
36359: PUSH
36360: LD_INT 5
36362: PUSH
36363: LD_INT 3
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36371: LD_VAR 0 6
36375: PPUSH
36376: CALL_OW 264
36380: PUSH
36381: LD_INT 4
36383: PUSH
36384: LD_INT 43
36386: PUSH
36387: LD_INT 25
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: IN
36395: IFFALSE 36416
// points := [ 40 , 15 , 5 ] ;
36397: LD_ADDR_VAR 0 9
36401: PUSH
36402: LD_INT 40
36404: PUSH
36405: LD_INT 15
36407: PUSH
36408: LD_INT 5
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36416: LD_VAR 0 6
36420: PPUSH
36421: CALL_OW 264
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: LD_INT 23
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: IN
36436: IFFALSE 36457
// points := [ 7 , 25 , 8 ] ;
36438: LD_ADDR_VAR 0 9
36442: PUSH
36443: LD_INT 7
36445: PUSH
36446: LD_INT 25
36448: PUSH
36449: LD_INT 8
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36457: LD_VAR 0 6
36461: PPUSH
36462: CALL_OW 264
36466: PUSH
36467: LD_INT 5
36469: PUSH
36470: LD_INT 27
36472: PUSH
36473: LD_INT 44
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: IN
36481: IFFALSE 36502
// points := [ 14 , 50 , 16 ] ;
36483: LD_ADDR_VAR 0 9
36487: PUSH
36488: LD_INT 14
36490: PUSH
36491: LD_INT 50
36493: PUSH
36494: LD_INT 16
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36502: LD_VAR 0 6
36506: PPUSH
36507: CALL_OW 264
36511: PUSH
36512: LD_INT 6
36514: PUSH
36515: LD_INT 46
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: IN
36522: IFFALSE 36543
// points := [ 32 , 120 , 70 ] ;
36524: LD_ADDR_VAR 0 9
36528: PUSH
36529: LD_INT 32
36531: PUSH
36532: LD_INT 120
36534: PUSH
36535: LD_INT 70
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36543: LD_VAR 0 6
36547: PPUSH
36548: CALL_OW 264
36552: PUSH
36553: LD_INT 7
36555: PUSH
36556: LD_INT 28
36558: PUSH
36559: LD_INT 45
36561: PUSH
36562: LD_EXP 100
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: IN
36573: IFFALSE 36594
// points := [ 35 , 20 , 45 ] ;
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: LD_INT 35
36582: PUSH
36583: LD_INT 20
36585: PUSH
36586: LD_INT 45
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36594: LD_VAR 0 6
36598: PPUSH
36599: CALL_OW 264
36603: PUSH
36604: LD_INT 47
36606: PUSH
36607: EMPTY
36608: LIST
36609: IN
36610: IFFALSE 36631
// points := [ 67 , 45 , 75 ] ;
36612: LD_ADDR_VAR 0 9
36616: PUSH
36617: LD_INT 67
36619: PUSH
36620: LD_INT 45
36622: PUSH
36623: LD_INT 75
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36631: LD_VAR 0 6
36635: PPUSH
36636: CALL_OW 264
36640: PUSH
36641: LD_INT 26
36643: PUSH
36644: EMPTY
36645: LIST
36646: IN
36647: IFFALSE 36668
// points := [ 120 , 30 , 80 ] ;
36649: LD_ADDR_VAR 0 9
36653: PUSH
36654: LD_INT 120
36656: PUSH
36657: LD_INT 30
36659: PUSH
36660: LD_INT 80
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36668: LD_VAR 0 6
36672: PPUSH
36673: CALL_OW 264
36677: PUSH
36678: LD_INT 22
36680: PUSH
36681: EMPTY
36682: LIST
36683: IN
36684: IFFALSE 36705
// points := [ 40 , 1 , 1 ] ;
36686: LD_ADDR_VAR 0 9
36690: PUSH
36691: LD_INT 40
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: LIST
36704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36705: LD_VAR 0 6
36709: PPUSH
36710: CALL_OW 264
36714: PUSH
36715: LD_INT 29
36717: PUSH
36718: EMPTY
36719: LIST
36720: IN
36721: IFFALSE 36742
// points := [ 70 , 200 , 400 ] ;
36723: LD_ADDR_VAR 0 9
36727: PUSH
36728: LD_INT 70
36730: PUSH
36731: LD_INT 200
36733: PUSH
36734: LD_INT 400
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36742: LD_VAR 0 6
36746: PPUSH
36747: CALL_OW 264
36751: PUSH
36752: LD_INT 14
36754: PUSH
36755: LD_INT 53
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: IN
36762: IFFALSE 36783
// points := [ 40 , 10 , 20 ] ;
36764: LD_ADDR_VAR 0 9
36768: PUSH
36769: LD_INT 40
36771: PUSH
36772: LD_INT 10
36774: PUSH
36775: LD_INT 20
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36783: LD_VAR 0 6
36787: PPUSH
36788: CALL_OW 264
36792: PUSH
36793: LD_INT 9
36795: PUSH
36796: EMPTY
36797: LIST
36798: IN
36799: IFFALSE 36820
// points := [ 5 , 70 , 20 ] ;
36801: LD_ADDR_VAR 0 9
36805: PUSH
36806: LD_INT 5
36808: PUSH
36809: LD_INT 70
36811: PUSH
36812: LD_INT 20
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36820: LD_VAR 0 6
36824: PPUSH
36825: CALL_OW 264
36829: PUSH
36830: LD_INT 10
36832: PUSH
36833: EMPTY
36834: LIST
36835: IN
36836: IFFALSE 36857
// points := [ 35 , 110 , 70 ] ;
36838: LD_ADDR_VAR 0 9
36842: PUSH
36843: LD_INT 35
36845: PUSH
36846: LD_INT 110
36848: PUSH
36849: LD_INT 70
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36857: LD_VAR 0 6
36861: PPUSH
36862: CALL_OW 265
36866: PUSH
36867: LD_INT 25
36869: EQUAL
36870: IFFALSE 36891
// points := [ 80 , 65 , 100 ] ;
36872: LD_ADDR_VAR 0 9
36876: PUSH
36877: LD_INT 80
36879: PUSH
36880: LD_INT 65
36882: PUSH
36883: LD_INT 100
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 263
36900: PUSH
36901: LD_INT 1
36903: EQUAL
36904: IFFALSE 36939
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36906: LD_ADDR_VAR 0 10
36910: PUSH
36911: LD_VAR 0 10
36915: PUSH
36916: LD_VAR 0 6
36920: PPUSH
36921: CALL_OW 311
36925: PPUSH
36926: LD_INT 3
36928: PPUSH
36929: CALL_OW 259
36933: PUSH
36934: LD_INT 4
36936: MUL
36937: MUL
36938: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36939: LD_VAR 0 6
36943: PPUSH
36944: CALL_OW 263
36948: PUSH
36949: LD_INT 2
36951: EQUAL
36952: IFFALSE 37003
// begin j := IsControledBy ( i ) ;
36954: LD_ADDR_VAR 0 7
36958: PUSH
36959: LD_VAR 0 6
36963: PPUSH
36964: CALL_OW 312
36968: ST_TO_ADDR
// if j then
36969: LD_VAR 0 7
36973: IFFALSE 37003
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36975: LD_ADDR_VAR 0 10
36979: PUSH
36980: LD_VAR 0 10
36984: PUSH
36985: LD_VAR 0 7
36989: PPUSH
36990: LD_INT 3
36992: PPUSH
36993: CALL_OW 259
36997: PUSH
36998: LD_INT 3
37000: MUL
37001: MUL
37002: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37003: LD_VAR 0 6
37007: PPUSH
37008: CALL_OW 264
37012: PUSH
37013: LD_INT 5
37015: PUSH
37016: LD_INT 6
37018: PUSH
37019: LD_INT 46
37021: PUSH
37022: LD_INT 44
37024: PUSH
37025: LD_INT 47
37027: PUSH
37028: LD_INT 45
37030: PUSH
37031: LD_INT 28
37033: PUSH
37034: LD_INT 7
37036: PUSH
37037: LD_INT 27
37039: PUSH
37040: LD_INT 29
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: IN
37055: PUSH
37056: LD_VAR 0 1
37060: PPUSH
37061: LD_INT 52
37063: PPUSH
37064: CALL_OW 321
37068: PUSH
37069: LD_INT 2
37071: EQUAL
37072: AND
37073: IFFALSE 37090
// bpoints := bpoints * 1.2 ;
37075: LD_ADDR_VAR 0 10
37079: PUSH
37080: LD_VAR 0 10
37084: PUSH
37085: LD_REAL  1.20000000000000E+0000
37088: MUL
37089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37090: LD_VAR 0 6
37094: PPUSH
37095: CALL_OW 264
37099: PUSH
37100: LD_INT 6
37102: PUSH
37103: LD_INT 46
37105: PUSH
37106: LD_INT 47
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: IN
37114: IFFALSE 37131
// bpoints := bpoints * 1.2 ;
37116: LD_ADDR_VAR 0 10
37120: PUSH
37121: LD_VAR 0 10
37125: PUSH
37126: LD_REAL  1.20000000000000E+0000
37129: MUL
37130: ST_TO_ADDR
// end ; unit_building :
37131: GO 37145
37133: LD_INT 3
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37141
37139: GO 37144
37141: POP
// ; end ;
37142: GO 37145
37144: POP
// for j = 1 to 3 do
37145: LD_ADDR_VAR 0 7
37149: PUSH
37150: DOUBLE
37151: LD_INT 1
37153: DEC
37154: ST_TO_ADDR
37155: LD_INT 3
37157: PUSH
37158: FOR_TO
37159: IFFALSE 37212
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37161: LD_ADDR_VAR 0 5
37165: PUSH
37166: LD_VAR 0 5
37170: PPUSH
37171: LD_VAR 0 7
37175: PPUSH
37176: LD_VAR 0 5
37180: PUSH
37181: LD_VAR 0 7
37185: ARRAY
37186: PUSH
37187: LD_VAR 0 9
37191: PUSH
37192: LD_VAR 0 7
37196: ARRAY
37197: PUSH
37198: LD_VAR 0 10
37202: MUL
37203: PLUS
37204: PPUSH
37205: CALL_OW 1
37209: ST_TO_ADDR
37210: GO 37158
37212: POP
37213: POP
// end ;
37214: GO 35691
37216: POP
37217: POP
// result := Replace ( result , 4 , tmp ) ;
37218: LD_ADDR_VAR 0 5
37222: PUSH
37223: LD_VAR 0 5
37227: PPUSH
37228: LD_INT 4
37230: PPUSH
37231: LD_VAR 0 8
37235: PPUSH
37236: CALL_OW 1
37240: ST_TO_ADDR
// end ;
37241: LD_VAR 0 5
37245: RET
// export function DangerAtRange ( unit , range ) ; begin
37246: LD_INT 0
37248: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_VAR 0 1
37258: PPUSH
37259: CALL_OW 255
37263: PPUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: CALL_OW 250
37273: PPUSH
37274: LD_VAR 0 1
37278: PPUSH
37279: CALL_OW 251
37283: PPUSH
37284: LD_VAR 0 2
37288: PPUSH
37289: CALL 35543 0 4
37293: ST_TO_ADDR
// end ;
37294: LD_VAR 0 3
37298: RET
// export function DangerInArea ( side , area ) ; begin
37299: LD_INT 0
37301: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37302: LD_ADDR_VAR 0 3
37306: PUSH
37307: LD_VAR 0 2
37311: PPUSH
37312: LD_INT 81
37314: PUSH
37315: LD_VAR 0 1
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PPUSH
37324: CALL_OW 70
37328: ST_TO_ADDR
// end ;
37329: LD_VAR 0 3
37333: RET
// export function IsExtension ( b ) ; begin
37334: LD_INT 0
37336: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37337: LD_ADDR_VAR 0 2
37341: PUSH
37342: LD_VAR 0 1
37346: PUSH
37347: LD_INT 23
37349: PUSH
37350: LD_INT 20
37352: PUSH
37353: LD_INT 22
37355: PUSH
37356: LD_INT 17
37358: PUSH
37359: LD_INT 24
37361: PUSH
37362: LD_INT 21
37364: PUSH
37365: LD_INT 19
37367: PUSH
37368: LD_INT 16
37370: PUSH
37371: LD_INT 25
37373: PUSH
37374: LD_INT 18
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: IN
37389: ST_TO_ADDR
// end ;
37390: LD_VAR 0 2
37394: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37395: LD_INT 0
37397: PPUSH
37398: PPUSH
37399: PPUSH
// result := [ ] ;
37400: LD_ADDR_VAR 0 4
37404: PUSH
37405: EMPTY
37406: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37407: LD_ADDR_VAR 0 5
37411: PUSH
37412: LD_VAR 0 2
37416: PPUSH
37417: LD_INT 21
37419: PUSH
37420: LD_INT 3
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PPUSH
37427: CALL_OW 70
37431: ST_TO_ADDR
// if not tmp then
37432: LD_VAR 0 5
37436: NOT
37437: IFFALSE 37441
// exit ;
37439: GO 37505
// if checkLink then
37441: LD_VAR 0 3
37445: IFFALSE 37495
// begin for i in tmp do
37447: LD_ADDR_VAR 0 6
37451: PUSH
37452: LD_VAR 0 5
37456: PUSH
37457: FOR_IN
37458: IFFALSE 37493
// if GetBase ( i ) <> base then
37460: LD_VAR 0 6
37464: PPUSH
37465: CALL_OW 274
37469: PUSH
37470: LD_VAR 0 1
37474: NONEQUAL
37475: IFFALSE 37491
// ComLinkToBase ( base , i ) ;
37477: LD_VAR 0 1
37481: PPUSH
37482: LD_VAR 0 6
37486: PPUSH
37487: CALL_OW 169
37491: GO 37457
37493: POP
37494: POP
// end ; result := tmp ;
37495: LD_ADDR_VAR 0 4
37499: PUSH
37500: LD_VAR 0 5
37504: ST_TO_ADDR
// end ;
37505: LD_VAR 0 4
37509: RET
// export function ComComplete ( units , b ) ; var i ; begin
37510: LD_INT 0
37512: PPUSH
37513: PPUSH
// if not units then
37514: LD_VAR 0 1
37518: NOT
37519: IFFALSE 37523
// exit ;
37521: GO 37613
// for i in units do
37523: LD_ADDR_VAR 0 4
37527: PUSH
37528: LD_VAR 0 1
37532: PUSH
37533: FOR_IN
37534: IFFALSE 37611
// if BuildingStatus ( b ) = bs_build then
37536: LD_VAR 0 2
37540: PPUSH
37541: CALL_OW 461
37545: PUSH
37546: LD_INT 1
37548: EQUAL
37549: IFFALSE 37609
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37551: LD_VAR 0 4
37555: PPUSH
37556: LD_STRING h
37558: PUSH
37559: LD_VAR 0 2
37563: PPUSH
37564: CALL_OW 250
37568: PUSH
37569: LD_VAR 0 2
37573: PPUSH
37574: CALL_OW 251
37578: PUSH
37579: LD_VAR 0 2
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: PPUSH
37605: CALL_OW 446
37609: GO 37533
37611: POP
37612: POP
// end ;
37613: LD_VAR 0 3
37617: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37618: LD_INT 0
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37626: LD_VAR 0 1
37630: NOT
37631: PUSH
37632: LD_VAR 0 1
37636: PPUSH
37637: CALL_OW 263
37641: PUSH
37642: LD_INT 2
37644: NONEQUAL
37645: OR
37646: IFFALSE 37650
// exit ;
37648: GO 37966
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37650: LD_ADDR_VAR 0 6
37654: PUSH
37655: LD_INT 22
37657: PUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: CALL_OW 255
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 2
37674: PUSH
37675: LD_INT 30
37677: PUSH
37678: LD_INT 36
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 34
37687: PUSH
37688: LD_INT 31
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PPUSH
37704: CALL_OW 69
37708: ST_TO_ADDR
// if not tmp then
37709: LD_VAR 0 6
37713: NOT
37714: IFFALSE 37718
// exit ;
37716: GO 37966
// result := [ ] ;
37718: LD_ADDR_VAR 0 2
37722: PUSH
37723: EMPTY
37724: ST_TO_ADDR
// for i in tmp do
37725: LD_ADDR_VAR 0 3
37729: PUSH
37730: LD_VAR 0 6
37734: PUSH
37735: FOR_IN
37736: IFFALSE 37807
// begin t := UnitsInside ( i ) ;
37738: LD_ADDR_VAR 0 4
37742: PUSH
37743: LD_VAR 0 3
37747: PPUSH
37748: CALL_OW 313
37752: ST_TO_ADDR
// if t then
37753: LD_VAR 0 4
37757: IFFALSE 37805
// for j in t do
37759: LD_ADDR_VAR 0 7
37763: PUSH
37764: LD_VAR 0 4
37768: PUSH
37769: FOR_IN
37770: IFFALSE 37803
// result := Replace ( result , result + 1 , j ) ;
37772: LD_ADDR_VAR 0 2
37776: PUSH
37777: LD_VAR 0 2
37781: PPUSH
37782: LD_VAR 0 2
37786: PUSH
37787: LD_INT 1
37789: PLUS
37790: PPUSH
37791: LD_VAR 0 7
37795: PPUSH
37796: CALL_OW 1
37800: ST_TO_ADDR
37801: GO 37769
37803: POP
37804: POP
// end ;
37805: GO 37735
37807: POP
37808: POP
// if not result then
37809: LD_VAR 0 2
37813: NOT
37814: IFFALSE 37818
// exit ;
37816: GO 37966
// mech := result [ 1 ] ;
37818: LD_ADDR_VAR 0 5
37822: PUSH
37823: LD_VAR 0 2
37827: PUSH
37828: LD_INT 1
37830: ARRAY
37831: ST_TO_ADDR
// if result > 1 then
37832: LD_VAR 0 2
37836: PUSH
37837: LD_INT 1
37839: GREATER
37840: IFFALSE 37952
// begin for i = 2 to result do
37842: LD_ADDR_VAR 0 3
37846: PUSH
37847: DOUBLE
37848: LD_INT 2
37850: DEC
37851: ST_TO_ADDR
37852: LD_VAR 0 2
37856: PUSH
37857: FOR_TO
37858: IFFALSE 37950
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37860: LD_ADDR_VAR 0 4
37864: PUSH
37865: LD_VAR 0 2
37869: PUSH
37870: LD_VAR 0 3
37874: ARRAY
37875: PPUSH
37876: LD_INT 3
37878: PPUSH
37879: CALL_OW 259
37883: PUSH
37884: LD_VAR 0 2
37888: PUSH
37889: LD_VAR 0 3
37893: ARRAY
37894: PPUSH
37895: CALL_OW 432
37899: MINUS
37900: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37901: LD_VAR 0 4
37905: PUSH
37906: LD_VAR 0 5
37910: PPUSH
37911: LD_INT 3
37913: PPUSH
37914: CALL_OW 259
37918: PUSH
37919: LD_VAR 0 5
37923: PPUSH
37924: CALL_OW 432
37928: MINUS
37929: GREATEREQUAL
37930: IFFALSE 37948
// mech := result [ i ] ;
37932: LD_ADDR_VAR 0 5
37936: PUSH
37937: LD_VAR 0 2
37941: PUSH
37942: LD_VAR 0 3
37946: ARRAY
37947: ST_TO_ADDR
// end ;
37948: GO 37857
37950: POP
37951: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37952: LD_VAR 0 1
37956: PPUSH
37957: LD_VAR 0 5
37961: PPUSH
37962: CALL_OW 135
// end ;
37966: LD_VAR 0 2
37970: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37971: LD_INT 0
37973: PPUSH
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
37981: PPUSH
37982: PPUSH
37983: PPUSH
37984: PPUSH
37985: PPUSH
// result := [ ] ;
37986: LD_ADDR_VAR 0 7
37990: PUSH
37991: EMPTY
37992: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37993: LD_VAR 0 1
37997: PPUSH
37998: CALL_OW 266
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: IN
38013: NOT
38014: IFFALSE 38018
// exit ;
38016: GO 39652
// if name then
38018: LD_VAR 0 3
38022: IFFALSE 38038
// SetBName ( base_dep , name ) ;
38024: LD_VAR 0 1
38028: PPUSH
38029: LD_VAR 0 3
38033: PPUSH
38034: CALL_OW 500
// base := GetBase ( base_dep ) ;
38038: LD_ADDR_VAR 0 15
38042: PUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL_OW 274
38052: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38053: LD_ADDR_VAR 0 16
38057: PUSH
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL_OW 255
38067: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38068: LD_ADDR_VAR 0 17
38072: PUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: CALL_OW 248
38082: ST_TO_ADDR
// if sources then
38083: LD_VAR 0 5
38087: IFFALSE 38134
// for i = 1 to 3 do
38089: LD_ADDR_VAR 0 8
38093: PUSH
38094: DOUBLE
38095: LD_INT 1
38097: DEC
38098: ST_TO_ADDR
38099: LD_INT 3
38101: PUSH
38102: FOR_TO
38103: IFFALSE 38132
// AddResourceType ( base , i , sources [ i ] ) ;
38105: LD_VAR 0 15
38109: PPUSH
38110: LD_VAR 0 8
38114: PPUSH
38115: LD_VAR 0 5
38119: PUSH
38120: LD_VAR 0 8
38124: ARRAY
38125: PPUSH
38126: CALL_OW 276
38130: GO 38102
38132: POP
38133: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38134: LD_ADDR_VAR 0 18
38138: PUSH
38139: LD_VAR 0 15
38143: PPUSH
38144: LD_VAR 0 2
38148: PPUSH
38149: LD_INT 1
38151: PPUSH
38152: CALL 37395 0 3
38156: ST_TO_ADDR
// InitHc ;
38157: CALL_OW 19
// InitUc ;
38161: CALL_OW 18
// uc_side := side ;
38165: LD_ADDR_OWVAR 20
38169: PUSH
38170: LD_VAR 0 16
38174: ST_TO_ADDR
// uc_nation := nation ;
38175: LD_ADDR_OWVAR 21
38179: PUSH
38180: LD_VAR 0 17
38184: ST_TO_ADDR
// if buildings then
38185: LD_VAR 0 18
38189: IFFALSE 39511
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38191: LD_ADDR_VAR 0 19
38195: PUSH
38196: LD_VAR 0 18
38200: PPUSH
38201: LD_INT 2
38203: PUSH
38204: LD_INT 30
38206: PUSH
38207: LD_INT 29
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 30
38216: PUSH
38217: LD_INT 30
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: PPUSH
38229: CALL_OW 72
38233: ST_TO_ADDR
// if tmp then
38234: LD_VAR 0 19
38238: IFFALSE 38286
// for i in tmp do
38240: LD_ADDR_VAR 0 8
38244: PUSH
38245: LD_VAR 0 19
38249: PUSH
38250: FOR_IN
38251: IFFALSE 38284
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38253: LD_VAR 0 8
38257: PPUSH
38258: CALL_OW 250
38262: PPUSH
38263: LD_VAR 0 8
38267: PPUSH
38268: CALL_OW 251
38272: PPUSH
38273: LD_VAR 0 16
38277: PPUSH
38278: CALL_OW 441
38282: GO 38250
38284: POP
38285: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38286: LD_VAR 0 18
38290: PPUSH
38291: LD_INT 2
38293: PUSH
38294: LD_INT 30
38296: PUSH
38297: LD_INT 32
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 30
38306: PUSH
38307: LD_INT 33
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: PPUSH
38319: CALL_OW 72
38323: IFFALSE 38411
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38325: LD_ADDR_VAR 0 8
38329: PUSH
38330: LD_VAR 0 18
38334: PPUSH
38335: LD_INT 2
38337: PUSH
38338: LD_INT 30
38340: PUSH
38341: LD_INT 32
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 30
38350: PUSH
38351: LD_INT 33
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: PPUSH
38363: CALL_OW 72
38367: PUSH
38368: FOR_IN
38369: IFFALSE 38409
// begin if not GetBWeapon ( i ) then
38371: LD_VAR 0 8
38375: PPUSH
38376: CALL_OW 269
38380: NOT
38381: IFFALSE 38407
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38383: LD_VAR 0 8
38387: PPUSH
38388: LD_VAR 0 8
38392: PPUSH
38393: LD_VAR 0 2
38397: PPUSH
38398: CALL 39657 0 2
38402: PPUSH
38403: CALL_OW 431
// end ;
38407: GO 38368
38409: POP
38410: POP
// end ; for i = 1 to personel do
38411: LD_ADDR_VAR 0 8
38415: PUSH
38416: DOUBLE
38417: LD_INT 1
38419: DEC
38420: ST_TO_ADDR
38421: LD_VAR 0 6
38425: PUSH
38426: FOR_TO
38427: IFFALSE 39491
// begin if i > 4 then
38429: LD_VAR 0 8
38433: PUSH
38434: LD_INT 4
38436: GREATER
38437: IFFALSE 38441
// break ;
38439: GO 39491
// case i of 1 :
38441: LD_VAR 0 8
38445: PUSH
38446: LD_INT 1
38448: DOUBLE
38449: EQUAL
38450: IFTRUE 38454
38452: GO 38534
38454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38455: LD_ADDR_VAR 0 12
38459: PUSH
38460: LD_VAR 0 18
38464: PPUSH
38465: LD_INT 22
38467: PUSH
38468: LD_VAR 0 16
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 58
38479: PUSH
38480: EMPTY
38481: LIST
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: LD_INT 30
38488: PUSH
38489: LD_INT 32
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 30
38498: PUSH
38499: LD_INT 4
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 30
38508: PUSH
38509: LD_INT 5
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: PPUSH
38527: CALL_OW 72
38531: ST_TO_ADDR
38532: GO 38756
38534: LD_INT 2
38536: DOUBLE
38537: EQUAL
38538: IFTRUE 38542
38540: GO 38604
38542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38543: LD_ADDR_VAR 0 12
38547: PUSH
38548: LD_VAR 0 18
38552: PPUSH
38553: LD_INT 22
38555: PUSH
38556: LD_VAR 0 16
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: LD_INT 30
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 30
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PPUSH
38597: CALL_OW 72
38601: ST_TO_ADDR
38602: GO 38756
38604: LD_INT 3
38606: DOUBLE
38607: EQUAL
38608: IFTRUE 38612
38610: GO 38674
38612: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38613: LD_ADDR_VAR 0 12
38617: PUSH
38618: LD_VAR 0 18
38622: PPUSH
38623: LD_INT 22
38625: PUSH
38626: LD_VAR 0 16
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 30
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 30
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PPUSH
38667: CALL_OW 72
38671: ST_TO_ADDR
38672: GO 38756
38674: LD_INT 4
38676: DOUBLE
38677: EQUAL
38678: IFTRUE 38682
38680: GO 38755
38682: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38683: LD_ADDR_VAR 0 12
38687: PUSH
38688: LD_VAR 0 18
38692: PPUSH
38693: LD_INT 22
38695: PUSH
38696: LD_VAR 0 16
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 30
38710: PUSH
38711: LD_INT 6
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 30
38720: PUSH
38721: LD_INT 7
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 30
38730: PUSH
38731: LD_INT 8
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PPUSH
38748: CALL_OW 72
38752: ST_TO_ADDR
38753: GO 38756
38755: POP
// if i = 1 then
38756: LD_VAR 0 8
38760: PUSH
38761: LD_INT 1
38763: EQUAL
38764: IFFALSE 38875
// begin tmp := [ ] ;
38766: LD_ADDR_VAR 0 19
38770: PUSH
38771: EMPTY
38772: ST_TO_ADDR
// for j in f do
38773: LD_ADDR_VAR 0 9
38777: PUSH
38778: LD_VAR 0 12
38782: PUSH
38783: FOR_IN
38784: IFFALSE 38857
// if GetBType ( j ) = b_bunker then
38786: LD_VAR 0 9
38790: PPUSH
38791: CALL_OW 266
38795: PUSH
38796: LD_INT 32
38798: EQUAL
38799: IFFALSE 38826
// tmp := Insert ( tmp , 1 , j ) else
38801: LD_ADDR_VAR 0 19
38805: PUSH
38806: LD_VAR 0 19
38810: PPUSH
38811: LD_INT 1
38813: PPUSH
38814: LD_VAR 0 9
38818: PPUSH
38819: CALL_OW 2
38823: ST_TO_ADDR
38824: GO 38855
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38826: LD_ADDR_VAR 0 19
38830: PUSH
38831: LD_VAR 0 19
38835: PPUSH
38836: LD_VAR 0 19
38840: PUSH
38841: LD_INT 1
38843: PLUS
38844: PPUSH
38845: LD_VAR 0 9
38849: PPUSH
38850: CALL_OW 2
38854: ST_TO_ADDR
38855: GO 38783
38857: POP
38858: POP
// if tmp then
38859: LD_VAR 0 19
38863: IFFALSE 38875
// f := tmp ;
38865: LD_ADDR_VAR 0 12
38869: PUSH
38870: LD_VAR 0 19
38874: ST_TO_ADDR
// end ; x := personel [ i ] ;
38875: LD_ADDR_VAR 0 13
38879: PUSH
38880: LD_VAR 0 6
38884: PUSH
38885: LD_VAR 0 8
38889: ARRAY
38890: ST_TO_ADDR
// if x = - 1 then
38891: LD_VAR 0 13
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: EQUAL
38900: IFFALSE 39109
// begin for j in f do
38902: LD_ADDR_VAR 0 9
38906: PUSH
38907: LD_VAR 0 12
38911: PUSH
38912: FOR_IN
38913: IFFALSE 39105
// repeat InitHc ;
38915: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38919: LD_VAR 0 9
38923: PPUSH
38924: CALL_OW 266
38928: PUSH
38929: LD_INT 5
38931: EQUAL
38932: IFFALSE 39002
// begin if UnitsInside ( j ) < 3 then
38934: LD_VAR 0 9
38938: PPUSH
38939: CALL_OW 313
38943: PUSH
38944: LD_INT 3
38946: LESS
38947: IFFALSE 38983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38949: LD_INT 0
38951: PPUSH
38952: LD_INT 5
38954: PUSH
38955: LD_INT 8
38957: PUSH
38958: LD_INT 9
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: LIST
38965: PUSH
38966: LD_VAR 0 17
38970: ARRAY
38971: PPUSH
38972: LD_VAR 0 4
38976: PPUSH
38977: CALL_OW 380
38981: GO 39000
// PrepareHuman ( false , i , skill ) ;
38983: LD_INT 0
38985: PPUSH
38986: LD_VAR 0 8
38990: PPUSH
38991: LD_VAR 0 4
38995: PPUSH
38996: CALL_OW 380
// end else
39000: GO 39019
// PrepareHuman ( false , i , skill ) ;
39002: LD_INT 0
39004: PPUSH
39005: LD_VAR 0 8
39009: PPUSH
39010: LD_VAR 0 4
39014: PPUSH
39015: CALL_OW 380
// un := CreateHuman ;
39019: LD_ADDR_VAR 0 14
39023: PUSH
39024: CALL_OW 44
39028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39029: LD_ADDR_VAR 0 7
39033: PUSH
39034: LD_VAR 0 7
39038: PPUSH
39039: LD_INT 1
39041: PPUSH
39042: LD_VAR 0 14
39046: PPUSH
39047: CALL_OW 2
39051: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39052: LD_VAR 0 14
39056: PPUSH
39057: LD_VAR 0 9
39061: PPUSH
39062: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39066: LD_VAR 0 9
39070: PPUSH
39071: CALL_OW 313
39075: PUSH
39076: LD_INT 6
39078: EQUAL
39079: PUSH
39080: LD_VAR 0 9
39084: PPUSH
39085: CALL_OW 266
39089: PUSH
39090: LD_INT 32
39092: PUSH
39093: LD_INT 31
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: IN
39100: OR
39101: IFFALSE 38915
39103: GO 38912
39105: POP
39106: POP
// end else
39107: GO 39489
// for j = 1 to x do
39109: LD_ADDR_VAR 0 9
39113: PUSH
39114: DOUBLE
39115: LD_INT 1
39117: DEC
39118: ST_TO_ADDR
39119: LD_VAR 0 13
39123: PUSH
39124: FOR_TO
39125: IFFALSE 39487
// begin InitHc ;
39127: CALL_OW 19
// if not f then
39131: LD_VAR 0 12
39135: NOT
39136: IFFALSE 39225
// begin PrepareHuman ( false , i , skill ) ;
39138: LD_INT 0
39140: PPUSH
39141: LD_VAR 0 8
39145: PPUSH
39146: LD_VAR 0 4
39150: PPUSH
39151: CALL_OW 380
// un := CreateHuman ;
39155: LD_ADDR_VAR 0 14
39159: PUSH
39160: CALL_OW 44
39164: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39165: LD_ADDR_VAR 0 7
39169: PUSH
39170: LD_VAR 0 7
39174: PPUSH
39175: LD_INT 1
39177: PPUSH
39178: LD_VAR 0 14
39182: PPUSH
39183: CALL_OW 2
39187: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39188: LD_VAR 0 14
39192: PPUSH
39193: LD_VAR 0 1
39197: PPUSH
39198: CALL_OW 250
39202: PPUSH
39203: LD_VAR 0 1
39207: PPUSH
39208: CALL_OW 251
39212: PPUSH
39213: LD_INT 10
39215: PPUSH
39216: LD_INT 0
39218: PPUSH
39219: CALL_OW 50
// continue ;
39223: GO 39124
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39225: LD_VAR 0 12
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: PPUSH
39234: CALL_OW 313
39238: PUSH
39239: LD_VAR 0 12
39243: PUSH
39244: LD_INT 1
39246: ARRAY
39247: PPUSH
39248: CALL_OW 266
39252: PUSH
39253: LD_INT 32
39255: PUSH
39256: LD_INT 31
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: IN
39263: AND
39264: PUSH
39265: LD_VAR 0 12
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: PPUSH
39274: CALL_OW 313
39278: PUSH
39279: LD_INT 6
39281: EQUAL
39282: OR
39283: IFFALSE 39303
// f := Delete ( f , 1 ) ;
39285: LD_ADDR_VAR 0 12
39289: PUSH
39290: LD_VAR 0 12
39294: PPUSH
39295: LD_INT 1
39297: PPUSH
39298: CALL_OW 3
39302: ST_TO_ADDR
// if not f then
39303: LD_VAR 0 12
39307: NOT
39308: IFFALSE 39326
// begin x := x + 2 ;
39310: LD_ADDR_VAR 0 13
39314: PUSH
39315: LD_VAR 0 13
39319: PUSH
39320: LD_INT 2
39322: PLUS
39323: ST_TO_ADDR
// continue ;
39324: GO 39124
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39326: LD_VAR 0 12
39330: PUSH
39331: LD_INT 1
39333: ARRAY
39334: PPUSH
39335: CALL_OW 266
39339: PUSH
39340: LD_INT 5
39342: EQUAL
39343: IFFALSE 39417
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39345: LD_VAR 0 12
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: CALL_OW 313
39358: PUSH
39359: LD_INT 3
39361: LESS
39362: IFFALSE 39398
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39364: LD_INT 0
39366: PPUSH
39367: LD_INT 5
39369: PUSH
39370: LD_INT 8
39372: PUSH
39373: LD_INT 9
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: PUSH
39381: LD_VAR 0 17
39385: ARRAY
39386: PPUSH
39387: LD_VAR 0 4
39391: PPUSH
39392: CALL_OW 380
39396: GO 39415
// PrepareHuman ( false , i , skill ) ;
39398: LD_INT 0
39400: PPUSH
39401: LD_VAR 0 8
39405: PPUSH
39406: LD_VAR 0 4
39410: PPUSH
39411: CALL_OW 380
// end else
39415: GO 39434
// PrepareHuman ( false , i , skill ) ;
39417: LD_INT 0
39419: PPUSH
39420: LD_VAR 0 8
39424: PPUSH
39425: LD_VAR 0 4
39429: PPUSH
39430: CALL_OW 380
// un := CreateHuman ;
39434: LD_ADDR_VAR 0 14
39438: PUSH
39439: CALL_OW 44
39443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39444: LD_ADDR_VAR 0 7
39448: PUSH
39449: LD_VAR 0 7
39453: PPUSH
39454: LD_INT 1
39456: PPUSH
39457: LD_VAR 0 14
39461: PPUSH
39462: CALL_OW 2
39466: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39467: LD_VAR 0 14
39471: PPUSH
39472: LD_VAR 0 12
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: CALL_OW 52
// end ;
39485: GO 39124
39487: POP
39488: POP
// end ;
39489: GO 38426
39491: POP
39492: POP
// result := result ^ buildings ;
39493: LD_ADDR_VAR 0 7
39497: PUSH
39498: LD_VAR 0 7
39502: PUSH
39503: LD_VAR 0 18
39507: ADD
39508: ST_TO_ADDR
// end else
39509: GO 39652
// begin for i = 1 to personel do
39511: LD_ADDR_VAR 0 8
39515: PUSH
39516: DOUBLE
39517: LD_INT 1
39519: DEC
39520: ST_TO_ADDR
39521: LD_VAR 0 6
39525: PUSH
39526: FOR_TO
39527: IFFALSE 39650
// begin if i > 4 then
39529: LD_VAR 0 8
39533: PUSH
39534: LD_INT 4
39536: GREATER
39537: IFFALSE 39541
// break ;
39539: GO 39650
// x := personel [ i ] ;
39541: LD_ADDR_VAR 0 13
39545: PUSH
39546: LD_VAR 0 6
39550: PUSH
39551: LD_VAR 0 8
39555: ARRAY
39556: ST_TO_ADDR
// if x = - 1 then
39557: LD_VAR 0 13
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: EQUAL
39566: IFFALSE 39570
// continue ;
39568: GO 39526
// PrepareHuman ( false , i , skill ) ;
39570: LD_INT 0
39572: PPUSH
39573: LD_VAR 0 8
39577: PPUSH
39578: LD_VAR 0 4
39582: PPUSH
39583: CALL_OW 380
// un := CreateHuman ;
39587: LD_ADDR_VAR 0 14
39591: PUSH
39592: CALL_OW 44
39596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39597: LD_VAR 0 14
39601: PPUSH
39602: LD_VAR 0 1
39606: PPUSH
39607: CALL_OW 250
39611: PPUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 251
39621: PPUSH
39622: LD_INT 10
39624: PPUSH
39625: LD_INT 0
39627: PPUSH
39628: CALL_OW 50
// result := result ^ un ;
39632: LD_ADDR_VAR 0 7
39636: PUSH
39637: LD_VAR 0 7
39641: PUSH
39642: LD_VAR 0 14
39646: ADD
39647: ST_TO_ADDR
// end ;
39648: GO 39526
39650: POP
39651: POP
// end ; end ;
39652: LD_VAR 0 7
39656: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39657: LD_INT 0
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
39667: PPUSH
39668: PPUSH
39669: PPUSH
39670: PPUSH
39671: PPUSH
39672: PPUSH
39673: PPUSH
39674: PPUSH
// result := false ;
39675: LD_ADDR_VAR 0 3
39679: PUSH
39680: LD_INT 0
39682: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39683: LD_VAR 0 1
39687: NOT
39688: PUSH
39689: LD_VAR 0 1
39693: PPUSH
39694: CALL_OW 266
39698: PUSH
39699: LD_INT 32
39701: PUSH
39702: LD_INT 33
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: IN
39709: NOT
39710: OR
39711: IFFALSE 39715
// exit ;
39713: GO 40824
// nat := GetNation ( tower ) ;
39715: LD_ADDR_VAR 0 12
39719: PUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL_OW 248
39729: ST_TO_ADDR
// side := GetSide ( tower ) ;
39730: LD_ADDR_VAR 0 16
39734: PUSH
39735: LD_VAR 0 1
39739: PPUSH
39740: CALL_OW 255
39744: ST_TO_ADDR
// x := GetX ( tower ) ;
39745: LD_ADDR_VAR 0 10
39749: PUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: CALL_OW 250
39759: ST_TO_ADDR
// y := GetY ( tower ) ;
39760: LD_ADDR_VAR 0 11
39764: PUSH
39765: LD_VAR 0 1
39769: PPUSH
39770: CALL_OW 251
39774: ST_TO_ADDR
// if not x or not y then
39775: LD_VAR 0 10
39779: NOT
39780: PUSH
39781: LD_VAR 0 11
39785: NOT
39786: OR
39787: IFFALSE 39791
// exit ;
39789: GO 40824
// weapon := 0 ;
39791: LD_ADDR_VAR 0 18
39795: PUSH
39796: LD_INT 0
39798: ST_TO_ADDR
// fac_list := [ ] ;
39799: LD_ADDR_VAR 0 17
39803: PUSH
39804: EMPTY
39805: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39806: LD_ADDR_VAR 0 6
39810: PUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 274
39820: PPUSH
39821: LD_VAR 0 2
39825: PPUSH
39826: LD_INT 0
39828: PPUSH
39829: CALL 37395 0 3
39833: PPUSH
39834: LD_INT 30
39836: PUSH
39837: LD_INT 3
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PPUSH
39844: CALL_OW 72
39848: ST_TO_ADDR
// if not factories then
39849: LD_VAR 0 6
39853: NOT
39854: IFFALSE 39858
// exit ;
39856: GO 40824
// for i in factories do
39858: LD_ADDR_VAR 0 8
39862: PUSH
39863: LD_VAR 0 6
39867: PUSH
39868: FOR_IN
39869: IFFALSE 39894
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39871: LD_ADDR_VAR 0 17
39875: PUSH
39876: LD_VAR 0 17
39880: PUSH
39881: LD_VAR 0 8
39885: PPUSH
39886: CALL_OW 478
39890: UNION
39891: ST_TO_ADDR
39892: GO 39868
39894: POP
39895: POP
// if not fac_list then
39896: LD_VAR 0 17
39900: NOT
39901: IFFALSE 39905
// exit ;
39903: GO 40824
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39905: LD_ADDR_VAR 0 5
39909: PUSH
39910: LD_INT 4
39912: PUSH
39913: LD_INT 5
39915: PUSH
39916: LD_INT 9
39918: PUSH
39919: LD_INT 10
39921: PUSH
39922: LD_INT 6
39924: PUSH
39925: LD_INT 7
39927: PUSH
39928: LD_INT 11
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 27
39942: PUSH
39943: LD_INT 28
39945: PUSH
39946: LD_INT 26
39948: PUSH
39949: LD_INT 30
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 43
39960: PUSH
39961: LD_INT 44
39963: PUSH
39964: LD_INT 46
39966: PUSH
39967: LD_INT 45
39969: PUSH
39970: LD_INT 47
39972: PUSH
39973: LD_INT 49
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: PUSH
39989: LD_VAR 0 12
39993: ARRAY
39994: ST_TO_ADDR
// list := list isect fac_list ;
39995: LD_ADDR_VAR 0 5
39999: PUSH
40000: LD_VAR 0 5
40004: PUSH
40005: LD_VAR 0 17
40009: ISECT
40010: ST_TO_ADDR
// if not list then
40011: LD_VAR 0 5
40015: NOT
40016: IFFALSE 40020
// exit ;
40018: GO 40824
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40020: LD_VAR 0 12
40024: PUSH
40025: LD_INT 3
40027: EQUAL
40028: PUSH
40029: LD_INT 49
40031: PUSH
40032: LD_VAR 0 5
40036: IN
40037: AND
40038: PUSH
40039: LD_INT 31
40041: PPUSH
40042: LD_VAR 0 16
40046: PPUSH
40047: CALL_OW 321
40051: PUSH
40052: LD_INT 2
40054: EQUAL
40055: AND
40056: IFFALSE 40116
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40058: LD_INT 22
40060: PUSH
40061: LD_VAR 0 16
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 35
40072: PUSH
40073: LD_INT 49
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 91
40082: PUSH
40083: LD_VAR 0 1
40087: PUSH
40088: LD_INT 10
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: LIST
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: PPUSH
40101: CALL_OW 69
40105: NOT
40106: IFFALSE 40116
// weapon := ru_time_lapser ;
40108: LD_ADDR_VAR 0 18
40112: PUSH
40113: LD_INT 49
40115: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40116: LD_VAR 0 12
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: IN
40131: PUSH
40132: LD_INT 11
40134: PUSH
40135: LD_VAR 0 5
40139: IN
40140: PUSH
40141: LD_INT 30
40143: PUSH
40144: LD_VAR 0 5
40148: IN
40149: OR
40150: AND
40151: PUSH
40152: LD_INT 6
40154: PPUSH
40155: LD_VAR 0 16
40159: PPUSH
40160: CALL_OW 321
40164: PUSH
40165: LD_INT 2
40167: EQUAL
40168: AND
40169: IFFALSE 40334
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40171: LD_INT 22
40173: PUSH
40174: LD_VAR 0 16
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 35
40188: PUSH
40189: LD_INT 11
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 35
40198: PUSH
40199: LD_INT 30
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 91
40213: PUSH
40214: LD_VAR 0 1
40218: PUSH
40219: LD_INT 18
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: PPUSH
40232: CALL_OW 69
40236: NOT
40237: PUSH
40238: LD_INT 22
40240: PUSH
40241: LD_VAR 0 16
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: LD_INT 30
40255: PUSH
40256: LD_INT 32
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 30
40265: PUSH
40266: LD_INT 33
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 91
40280: PUSH
40281: LD_VAR 0 1
40285: PUSH
40286: LD_INT 12
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: PUSH
40299: EMPTY
40300: LIST
40301: PPUSH
40302: CALL_OW 69
40306: PUSH
40307: LD_INT 2
40309: GREATER
40310: AND
40311: IFFALSE 40334
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40313: LD_ADDR_VAR 0 18
40317: PUSH
40318: LD_INT 11
40320: PUSH
40321: LD_INT 30
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_VAR 0 12
40332: ARRAY
40333: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40334: LD_VAR 0 18
40338: NOT
40339: PUSH
40340: LD_INT 40
40342: PPUSH
40343: LD_VAR 0 16
40347: PPUSH
40348: CALL_OW 321
40352: PUSH
40353: LD_INT 2
40355: EQUAL
40356: AND
40357: PUSH
40358: LD_INT 7
40360: PUSH
40361: LD_VAR 0 5
40365: IN
40366: PUSH
40367: LD_INT 28
40369: PUSH
40370: LD_VAR 0 5
40374: IN
40375: OR
40376: PUSH
40377: LD_INT 45
40379: PUSH
40380: LD_VAR 0 5
40384: IN
40385: OR
40386: AND
40387: IFFALSE 40641
// begin hex := GetHexInfo ( x , y ) ;
40389: LD_ADDR_VAR 0 4
40393: PUSH
40394: LD_VAR 0 10
40398: PPUSH
40399: LD_VAR 0 11
40403: PPUSH
40404: CALL_OW 546
40408: ST_TO_ADDR
// if hex [ 1 ] then
40409: LD_VAR 0 4
40413: PUSH
40414: LD_INT 1
40416: ARRAY
40417: IFFALSE 40421
// exit ;
40419: GO 40824
// height := hex [ 2 ] ;
40421: LD_ADDR_VAR 0 15
40425: PUSH
40426: LD_VAR 0 4
40430: PUSH
40431: LD_INT 2
40433: ARRAY
40434: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40435: LD_ADDR_VAR 0 14
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 5
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: ST_TO_ADDR
// for i in tmp do
40458: LD_ADDR_VAR 0 8
40462: PUSH
40463: LD_VAR 0 14
40467: PUSH
40468: FOR_IN
40469: IFFALSE 40639
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40471: LD_ADDR_VAR 0 9
40475: PUSH
40476: LD_VAR 0 10
40480: PPUSH
40481: LD_VAR 0 8
40485: PPUSH
40486: LD_INT 5
40488: PPUSH
40489: CALL_OW 272
40493: PUSH
40494: LD_VAR 0 11
40498: PPUSH
40499: LD_VAR 0 8
40503: PPUSH
40504: LD_INT 5
40506: PPUSH
40507: CALL_OW 273
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40516: LD_VAR 0 9
40520: PUSH
40521: LD_INT 1
40523: ARRAY
40524: PPUSH
40525: LD_VAR 0 9
40529: PUSH
40530: LD_INT 2
40532: ARRAY
40533: PPUSH
40534: CALL_OW 488
40538: IFFALSE 40637
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40540: LD_ADDR_VAR 0 4
40544: PUSH
40545: LD_VAR 0 9
40549: PUSH
40550: LD_INT 1
40552: ARRAY
40553: PPUSH
40554: LD_VAR 0 9
40558: PUSH
40559: LD_INT 2
40561: ARRAY
40562: PPUSH
40563: CALL_OW 546
40567: ST_TO_ADDR
// if hex [ 1 ] then
40568: LD_VAR 0 4
40572: PUSH
40573: LD_INT 1
40575: ARRAY
40576: IFFALSE 40580
// continue ;
40578: GO 40468
// h := hex [ 2 ] ;
40580: LD_ADDR_VAR 0 13
40584: PUSH
40585: LD_VAR 0 4
40589: PUSH
40590: LD_INT 2
40592: ARRAY
40593: ST_TO_ADDR
// if h + 7 < height then
40594: LD_VAR 0 13
40598: PUSH
40599: LD_INT 7
40601: PLUS
40602: PUSH
40603: LD_VAR 0 15
40607: LESS
40608: IFFALSE 40637
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40610: LD_ADDR_VAR 0 18
40614: PUSH
40615: LD_INT 7
40617: PUSH
40618: LD_INT 28
40620: PUSH
40621: LD_INT 45
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: PUSH
40629: LD_VAR 0 12
40633: ARRAY
40634: ST_TO_ADDR
// break ;
40635: GO 40639
// end ; end ; end ;
40637: GO 40468
40639: POP
40640: POP
// end ; if not weapon then
40641: LD_VAR 0 18
40645: NOT
40646: IFFALSE 40706
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40648: LD_ADDR_VAR 0 5
40652: PUSH
40653: LD_VAR 0 5
40657: PUSH
40658: LD_INT 11
40660: PUSH
40661: LD_INT 30
40663: PUSH
40664: LD_INT 49
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: DIFF
40672: ST_TO_ADDR
// if not list then
40673: LD_VAR 0 5
40677: NOT
40678: IFFALSE 40682
// exit ;
40680: GO 40824
// weapon := list [ rand ( 1 , list ) ] ;
40682: LD_ADDR_VAR 0 18
40686: PUSH
40687: LD_VAR 0 5
40691: PUSH
40692: LD_INT 1
40694: PPUSH
40695: LD_VAR 0 5
40699: PPUSH
40700: CALL_OW 12
40704: ARRAY
40705: ST_TO_ADDR
// end ; if weapon then
40706: LD_VAR 0 18
40710: IFFALSE 40824
// begin tmp := CostOfWeapon ( weapon ) ;
40712: LD_ADDR_VAR 0 14
40716: PUSH
40717: LD_VAR 0 18
40721: PPUSH
40722: CALL_OW 451
40726: ST_TO_ADDR
// j := GetBase ( tower ) ;
40727: LD_ADDR_VAR 0 9
40731: PUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: CALL_OW 274
40741: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40742: LD_VAR 0 9
40746: PPUSH
40747: LD_INT 1
40749: PPUSH
40750: CALL_OW 275
40754: PUSH
40755: LD_VAR 0 14
40759: PUSH
40760: LD_INT 1
40762: ARRAY
40763: GREATEREQUAL
40764: PUSH
40765: LD_VAR 0 9
40769: PPUSH
40770: LD_INT 2
40772: PPUSH
40773: CALL_OW 275
40777: PUSH
40778: LD_VAR 0 14
40782: PUSH
40783: LD_INT 2
40785: ARRAY
40786: GREATEREQUAL
40787: AND
40788: PUSH
40789: LD_VAR 0 9
40793: PPUSH
40794: LD_INT 3
40796: PPUSH
40797: CALL_OW 275
40801: PUSH
40802: LD_VAR 0 14
40806: PUSH
40807: LD_INT 3
40809: ARRAY
40810: GREATEREQUAL
40811: AND
40812: IFFALSE 40824
// result := weapon ;
40814: LD_ADDR_VAR 0 3
40818: PUSH
40819: LD_VAR 0 18
40823: ST_TO_ADDR
// end ; end ;
40824: LD_VAR 0 3
40828: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40829: LD_INT 0
40831: PPUSH
40832: PPUSH
// result := true ;
40833: LD_ADDR_VAR 0 3
40837: PUSH
40838: LD_INT 1
40840: ST_TO_ADDR
// if array1 = array2 then
40841: LD_VAR 0 1
40845: PUSH
40846: LD_VAR 0 2
40850: EQUAL
40851: IFFALSE 40911
// begin for i = 1 to array1 do
40853: LD_ADDR_VAR 0 4
40857: PUSH
40858: DOUBLE
40859: LD_INT 1
40861: DEC
40862: ST_TO_ADDR
40863: LD_VAR 0 1
40867: PUSH
40868: FOR_TO
40869: IFFALSE 40907
// if array1 [ i ] <> array2 [ i ] then
40871: LD_VAR 0 1
40875: PUSH
40876: LD_VAR 0 4
40880: ARRAY
40881: PUSH
40882: LD_VAR 0 2
40886: PUSH
40887: LD_VAR 0 4
40891: ARRAY
40892: NONEQUAL
40893: IFFALSE 40905
// begin result := false ;
40895: LD_ADDR_VAR 0 3
40899: PUSH
40900: LD_INT 0
40902: ST_TO_ADDR
// break ;
40903: GO 40907
// end ;
40905: GO 40868
40907: POP
40908: POP
// end else
40909: GO 40919
// result := false ;
40911: LD_ADDR_VAR 0 3
40915: PUSH
40916: LD_INT 0
40918: ST_TO_ADDR
// end ;
40919: LD_VAR 0 3
40923: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40924: LD_INT 0
40926: PPUSH
40927: PPUSH
// if not array1 or not array2 then
40928: LD_VAR 0 1
40932: NOT
40933: PUSH
40934: LD_VAR 0 2
40938: NOT
40939: OR
40940: IFFALSE 40944
// exit ;
40942: GO 41008
// result := true ;
40944: LD_ADDR_VAR 0 3
40948: PUSH
40949: LD_INT 1
40951: ST_TO_ADDR
// for i = 1 to array1 do
40952: LD_ADDR_VAR 0 4
40956: PUSH
40957: DOUBLE
40958: LD_INT 1
40960: DEC
40961: ST_TO_ADDR
40962: LD_VAR 0 1
40966: PUSH
40967: FOR_TO
40968: IFFALSE 41006
// if array1 [ i ] <> array2 [ i ] then
40970: LD_VAR 0 1
40974: PUSH
40975: LD_VAR 0 4
40979: ARRAY
40980: PUSH
40981: LD_VAR 0 2
40985: PUSH
40986: LD_VAR 0 4
40990: ARRAY
40991: NONEQUAL
40992: IFFALSE 41004
// begin result := false ;
40994: LD_ADDR_VAR 0 3
40998: PUSH
40999: LD_INT 0
41001: ST_TO_ADDR
// break ;
41002: GO 41006
// end ;
41004: GO 40967
41006: POP
41007: POP
// end ;
41008: LD_VAR 0 3
41012: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41013: LD_INT 0
41015: PPUSH
41016: PPUSH
41017: PPUSH
// pom := GetBase ( fac ) ;
41018: LD_ADDR_VAR 0 5
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 274
41032: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41033: LD_ADDR_VAR 0 4
41037: PUSH
41038: LD_VAR 0 2
41042: PUSH
41043: LD_INT 1
41045: ARRAY
41046: PPUSH
41047: LD_VAR 0 2
41051: PUSH
41052: LD_INT 2
41054: ARRAY
41055: PPUSH
41056: LD_VAR 0 2
41060: PUSH
41061: LD_INT 3
41063: ARRAY
41064: PPUSH
41065: LD_VAR 0 2
41069: PUSH
41070: LD_INT 4
41072: ARRAY
41073: PPUSH
41074: CALL_OW 449
41078: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_VAR 0 5
41088: PPUSH
41089: LD_INT 1
41091: PPUSH
41092: CALL_OW 275
41096: PUSH
41097: LD_VAR 0 4
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: GREATEREQUAL
41106: PUSH
41107: LD_VAR 0 5
41111: PPUSH
41112: LD_INT 2
41114: PPUSH
41115: CALL_OW 275
41119: PUSH
41120: LD_VAR 0 4
41124: PUSH
41125: LD_INT 2
41127: ARRAY
41128: GREATEREQUAL
41129: AND
41130: PUSH
41131: LD_VAR 0 5
41135: PPUSH
41136: LD_INT 3
41138: PPUSH
41139: CALL_OW 275
41143: PUSH
41144: LD_VAR 0 4
41148: PUSH
41149: LD_INT 3
41151: ARRAY
41152: GREATEREQUAL
41153: AND
41154: ST_TO_ADDR
// end ;
41155: LD_VAR 0 3
41159: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41160: LD_INT 0
41162: PPUSH
41163: PPUSH
41164: PPUSH
41165: PPUSH
// pom := GetBase ( building ) ;
41166: LD_ADDR_VAR 0 3
41170: PUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: CALL_OW 274
41180: ST_TO_ADDR
// if not pom then
41181: LD_VAR 0 3
41185: NOT
41186: IFFALSE 41190
// exit ;
41188: GO 41360
// btype := GetBType ( building ) ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: CALL_OW 266
41204: ST_TO_ADDR
// if btype = b_armoury then
41205: LD_VAR 0 5
41209: PUSH
41210: LD_INT 4
41212: EQUAL
41213: IFFALSE 41223
// btype := b_barracks ;
41215: LD_ADDR_VAR 0 5
41219: PUSH
41220: LD_INT 5
41222: ST_TO_ADDR
// if btype = b_depot then
41223: LD_VAR 0 5
41227: PUSH
41228: LD_INT 0
41230: EQUAL
41231: IFFALSE 41241
// btype := b_warehouse ;
41233: LD_ADDR_VAR 0 5
41237: PUSH
41238: LD_INT 1
41240: ST_TO_ADDR
// if btype = b_workshop then
41241: LD_VAR 0 5
41245: PUSH
41246: LD_INT 2
41248: EQUAL
41249: IFFALSE 41259
// btype := b_factory ;
41251: LD_ADDR_VAR 0 5
41255: PUSH
41256: LD_INT 3
41258: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41259: LD_ADDR_VAR 0 4
41263: PUSH
41264: LD_VAR 0 5
41268: PPUSH
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 248
41278: PPUSH
41279: CALL_OW 450
41283: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41284: LD_ADDR_VAR 0 2
41288: PUSH
41289: LD_VAR 0 3
41293: PPUSH
41294: LD_INT 1
41296: PPUSH
41297: CALL_OW 275
41301: PUSH
41302: LD_VAR 0 4
41306: PUSH
41307: LD_INT 1
41309: ARRAY
41310: GREATEREQUAL
41311: PUSH
41312: LD_VAR 0 3
41316: PPUSH
41317: LD_INT 2
41319: PPUSH
41320: CALL_OW 275
41324: PUSH
41325: LD_VAR 0 4
41329: PUSH
41330: LD_INT 2
41332: ARRAY
41333: GREATEREQUAL
41334: AND
41335: PUSH
41336: LD_VAR 0 3
41340: PPUSH
41341: LD_INT 3
41343: PPUSH
41344: CALL_OW 275
41348: PUSH
41349: LD_VAR 0 4
41353: PUSH
41354: LD_INT 3
41356: ARRAY
41357: GREATEREQUAL
41358: AND
41359: ST_TO_ADDR
// end ;
41360: LD_VAR 0 2
41364: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41365: LD_INT 0
41367: PPUSH
41368: PPUSH
41369: PPUSH
// pom := GetBase ( building ) ;
41370: LD_ADDR_VAR 0 4
41374: PUSH
41375: LD_VAR 0 1
41379: PPUSH
41380: CALL_OW 274
41384: ST_TO_ADDR
// if not pom then
41385: LD_VAR 0 4
41389: NOT
41390: IFFALSE 41394
// exit ;
41392: GO 41495
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41394: LD_ADDR_VAR 0 5
41398: PUSH
41399: LD_VAR 0 2
41403: PPUSH
41404: LD_VAR 0 1
41408: PPUSH
41409: CALL_OW 248
41413: PPUSH
41414: CALL_OW 450
41418: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41419: LD_ADDR_VAR 0 3
41423: PUSH
41424: LD_VAR 0 4
41428: PPUSH
41429: LD_INT 1
41431: PPUSH
41432: CALL_OW 275
41436: PUSH
41437: LD_VAR 0 5
41441: PUSH
41442: LD_INT 1
41444: ARRAY
41445: GREATEREQUAL
41446: PUSH
41447: LD_VAR 0 4
41451: PPUSH
41452: LD_INT 2
41454: PPUSH
41455: CALL_OW 275
41459: PUSH
41460: LD_VAR 0 5
41464: PUSH
41465: LD_INT 2
41467: ARRAY
41468: GREATEREQUAL
41469: AND
41470: PUSH
41471: LD_VAR 0 4
41475: PPUSH
41476: LD_INT 3
41478: PPUSH
41479: CALL_OW 275
41483: PUSH
41484: LD_VAR 0 5
41488: PUSH
41489: LD_INT 3
41491: ARRAY
41492: GREATEREQUAL
41493: AND
41494: ST_TO_ADDR
// end ;
41495: LD_VAR 0 3
41499: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41500: LD_INT 0
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
// result := false ;
41513: LD_ADDR_VAR 0 8
41517: PUSH
41518: LD_INT 0
41520: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41521: LD_VAR 0 5
41525: NOT
41526: PUSH
41527: LD_VAR 0 1
41531: NOT
41532: OR
41533: PUSH
41534: LD_VAR 0 2
41538: NOT
41539: OR
41540: PUSH
41541: LD_VAR 0 3
41545: NOT
41546: OR
41547: IFFALSE 41551
// exit ;
41549: GO 42365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41551: LD_ADDR_VAR 0 14
41555: PUSH
41556: LD_VAR 0 1
41560: PPUSH
41561: LD_VAR 0 2
41565: PPUSH
41566: LD_VAR 0 3
41570: PPUSH
41571: LD_VAR 0 4
41575: PPUSH
41576: LD_VAR 0 5
41580: PUSH
41581: LD_INT 1
41583: ARRAY
41584: PPUSH
41585: CALL_OW 248
41589: PPUSH
41590: LD_INT 0
41592: PPUSH
41593: CALL 43602 0 6
41597: ST_TO_ADDR
// if not hexes then
41598: LD_VAR 0 14
41602: NOT
41603: IFFALSE 41607
// exit ;
41605: GO 42365
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41607: LD_ADDR_VAR 0 17
41611: PUSH
41612: LD_VAR 0 5
41616: PPUSH
41617: LD_INT 22
41619: PUSH
41620: LD_VAR 0 13
41624: PPUSH
41625: CALL_OW 255
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: LD_INT 30
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 30
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PPUSH
41666: CALL_OW 72
41670: ST_TO_ADDR
// for i = 1 to hexes do
41671: LD_ADDR_VAR 0 9
41675: PUSH
41676: DOUBLE
41677: LD_INT 1
41679: DEC
41680: ST_TO_ADDR
41681: LD_VAR 0 14
41685: PUSH
41686: FOR_TO
41687: IFFALSE 42363
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41689: LD_ADDR_VAR 0 13
41693: PUSH
41694: LD_VAR 0 14
41698: PUSH
41699: LD_VAR 0 9
41703: ARRAY
41704: PUSH
41705: LD_INT 1
41707: ARRAY
41708: PPUSH
41709: LD_VAR 0 14
41713: PUSH
41714: LD_VAR 0 9
41718: ARRAY
41719: PUSH
41720: LD_INT 2
41722: ARRAY
41723: PPUSH
41724: CALL_OW 428
41728: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41729: LD_VAR 0 14
41733: PUSH
41734: LD_VAR 0 9
41738: ARRAY
41739: PUSH
41740: LD_INT 1
41742: ARRAY
41743: PPUSH
41744: LD_VAR 0 14
41748: PUSH
41749: LD_VAR 0 9
41753: ARRAY
41754: PUSH
41755: LD_INT 2
41757: ARRAY
41758: PPUSH
41759: CALL_OW 351
41763: PUSH
41764: LD_VAR 0 14
41768: PUSH
41769: LD_VAR 0 9
41773: ARRAY
41774: PUSH
41775: LD_INT 1
41777: ARRAY
41778: PPUSH
41779: LD_VAR 0 14
41783: PUSH
41784: LD_VAR 0 9
41788: ARRAY
41789: PUSH
41790: LD_INT 2
41792: ARRAY
41793: PPUSH
41794: CALL_OW 488
41798: NOT
41799: OR
41800: PUSH
41801: LD_VAR 0 13
41805: PPUSH
41806: CALL_OW 247
41810: PUSH
41811: LD_INT 3
41813: EQUAL
41814: OR
41815: IFFALSE 41821
// exit ;
41817: POP
41818: POP
41819: GO 42365
// if not tmp then
41821: LD_VAR 0 13
41825: NOT
41826: IFFALSE 41830
// continue ;
41828: GO 41686
// result := true ;
41830: LD_ADDR_VAR 0 8
41834: PUSH
41835: LD_INT 1
41837: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41838: LD_VAR 0 6
41842: PUSH
41843: LD_VAR 0 13
41847: PPUSH
41848: CALL_OW 247
41852: PUSH
41853: LD_INT 2
41855: EQUAL
41856: AND
41857: PUSH
41858: LD_VAR 0 13
41862: PPUSH
41863: CALL_OW 263
41867: PUSH
41868: LD_INT 1
41870: EQUAL
41871: AND
41872: IFFALSE 42036
// begin if IsDrivenBy ( tmp ) then
41874: LD_VAR 0 13
41878: PPUSH
41879: CALL_OW 311
41883: IFFALSE 41887
// continue ;
41885: GO 41686
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41887: LD_VAR 0 6
41891: PPUSH
41892: LD_INT 3
41894: PUSH
41895: LD_INT 60
41897: PUSH
41898: EMPTY
41899: LIST
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 3
41907: PUSH
41908: LD_INT 55
41910: PUSH
41911: EMPTY
41912: LIST
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PPUSH
41922: CALL_OW 72
41926: IFFALSE 42034
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41928: LD_ADDR_VAR 0 18
41932: PUSH
41933: LD_VAR 0 6
41937: PPUSH
41938: LD_INT 3
41940: PUSH
41941: LD_INT 60
41943: PUSH
41944: EMPTY
41945: LIST
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: LD_INT 55
41956: PUSH
41957: EMPTY
41958: LIST
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PPUSH
41968: CALL_OW 72
41972: PUSH
41973: LD_INT 1
41975: ARRAY
41976: ST_TO_ADDR
// if IsInUnit ( driver ) then
41977: LD_VAR 0 18
41981: PPUSH
41982: CALL_OW 310
41986: IFFALSE 41997
// ComExit ( driver ) ;
41988: LD_VAR 0 18
41992: PPUSH
41993: CALL 66786 0 1
// AddComEnterUnit ( driver , tmp ) ;
41997: LD_VAR 0 18
42001: PPUSH
42002: LD_VAR 0 13
42006: PPUSH
42007: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42011: LD_VAR 0 18
42015: PPUSH
42016: LD_VAR 0 7
42020: PPUSH
42021: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42025: LD_VAR 0 18
42029: PPUSH
42030: CALL_OW 181
// end ; continue ;
42034: GO 41686
// end ; if not cleaners or not tmp in cleaners then
42036: LD_VAR 0 6
42040: NOT
42041: PUSH
42042: LD_VAR 0 13
42046: PUSH
42047: LD_VAR 0 6
42051: IN
42052: NOT
42053: OR
42054: IFFALSE 42361
// begin if dep then
42056: LD_VAR 0 17
42060: IFFALSE 42196
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42062: LD_ADDR_VAR 0 16
42066: PUSH
42067: LD_VAR 0 17
42071: PUSH
42072: LD_INT 1
42074: ARRAY
42075: PPUSH
42076: CALL_OW 250
42080: PPUSH
42081: LD_VAR 0 17
42085: PUSH
42086: LD_INT 1
42088: ARRAY
42089: PPUSH
42090: CALL_OW 254
42094: PPUSH
42095: LD_INT 5
42097: PPUSH
42098: CALL_OW 272
42102: PUSH
42103: LD_VAR 0 17
42107: PUSH
42108: LD_INT 1
42110: ARRAY
42111: PPUSH
42112: CALL_OW 251
42116: PPUSH
42117: LD_VAR 0 17
42121: PUSH
42122: LD_INT 1
42124: ARRAY
42125: PPUSH
42126: CALL_OW 254
42130: PPUSH
42131: LD_INT 5
42133: PPUSH
42134: CALL_OW 273
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42143: LD_VAR 0 16
42147: PUSH
42148: LD_INT 1
42150: ARRAY
42151: PPUSH
42152: LD_VAR 0 16
42156: PUSH
42157: LD_INT 2
42159: ARRAY
42160: PPUSH
42161: CALL_OW 488
42165: IFFALSE 42196
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42167: LD_VAR 0 13
42171: PPUSH
42172: LD_VAR 0 16
42176: PUSH
42177: LD_INT 1
42179: ARRAY
42180: PPUSH
42181: LD_VAR 0 16
42185: PUSH
42186: LD_INT 2
42188: ARRAY
42189: PPUSH
42190: CALL_OW 111
// continue ;
42194: GO 41686
// end ; end ; r := GetDir ( tmp ) ;
42196: LD_ADDR_VAR 0 15
42200: PUSH
42201: LD_VAR 0 13
42205: PPUSH
42206: CALL_OW 254
42210: ST_TO_ADDR
// if r = 5 then
42211: LD_VAR 0 15
42215: PUSH
42216: LD_INT 5
42218: EQUAL
42219: IFFALSE 42229
// r := 0 ;
42221: LD_ADDR_VAR 0 15
42225: PUSH
42226: LD_INT 0
42228: ST_TO_ADDR
// for j = r to 5 do
42229: LD_ADDR_VAR 0 10
42233: PUSH
42234: DOUBLE
42235: LD_VAR 0 15
42239: DEC
42240: ST_TO_ADDR
42241: LD_INT 5
42243: PUSH
42244: FOR_TO
42245: IFFALSE 42359
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42247: LD_ADDR_VAR 0 11
42251: PUSH
42252: LD_VAR 0 13
42256: PPUSH
42257: CALL_OW 250
42261: PPUSH
42262: LD_VAR 0 10
42266: PPUSH
42267: LD_INT 2
42269: PPUSH
42270: CALL_OW 272
42274: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42275: LD_ADDR_VAR 0 12
42279: PUSH
42280: LD_VAR 0 13
42284: PPUSH
42285: CALL_OW 251
42289: PPUSH
42290: LD_VAR 0 10
42294: PPUSH
42295: LD_INT 2
42297: PPUSH
42298: CALL_OW 273
42302: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42303: LD_VAR 0 11
42307: PPUSH
42308: LD_VAR 0 12
42312: PPUSH
42313: CALL_OW 488
42317: PUSH
42318: LD_VAR 0 11
42322: PPUSH
42323: LD_VAR 0 12
42327: PPUSH
42328: CALL_OW 428
42332: NOT
42333: AND
42334: IFFALSE 42357
// begin ComMoveXY ( tmp , _x , _y ) ;
42336: LD_VAR 0 13
42340: PPUSH
42341: LD_VAR 0 11
42345: PPUSH
42346: LD_VAR 0 12
42350: PPUSH
42351: CALL_OW 111
// break ;
42355: GO 42359
// end ; end ;
42357: GO 42244
42359: POP
42360: POP
// end ; end ;
42361: GO 41686
42363: POP
42364: POP
// end ;
42365: LD_VAR 0 8
42369: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42370: LD_INT 0
42372: PPUSH
// result := true ;
42373: LD_ADDR_VAR 0 3
42377: PUSH
42378: LD_INT 1
42380: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42381: LD_VAR 0 2
42385: PUSH
42386: LD_INT 24
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42400
42392: LD_INT 33
42394: DOUBLE
42395: EQUAL
42396: IFTRUE 42400
42398: GO 42425
42400: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42401: LD_ADDR_VAR 0 3
42405: PUSH
42406: LD_INT 32
42408: PPUSH
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 321
42418: PUSH
42419: LD_INT 2
42421: EQUAL
42422: ST_TO_ADDR
42423: GO 42745
42425: LD_INT 20
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42433
42431: GO 42458
42433: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 6
42441: PPUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 321
42451: PUSH
42452: LD_INT 2
42454: EQUAL
42455: ST_TO_ADDR
42456: GO 42745
42458: LD_INT 22
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42472
42464: LD_INT 36
42466: DOUBLE
42467: EQUAL
42468: IFTRUE 42472
42470: GO 42497
42472: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42473: LD_ADDR_VAR 0 3
42477: PUSH
42478: LD_INT 15
42480: PPUSH
42481: LD_VAR 0 1
42485: PPUSH
42486: CALL_OW 321
42490: PUSH
42491: LD_INT 2
42493: EQUAL
42494: ST_TO_ADDR
42495: GO 42745
42497: LD_INT 30
42499: DOUBLE
42500: EQUAL
42501: IFTRUE 42505
42503: GO 42530
42505: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42506: LD_ADDR_VAR 0 3
42510: PUSH
42511: LD_INT 20
42513: PPUSH
42514: LD_VAR 0 1
42518: PPUSH
42519: CALL_OW 321
42523: PUSH
42524: LD_INT 2
42526: EQUAL
42527: ST_TO_ADDR
42528: GO 42745
42530: LD_INT 28
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42544
42536: LD_INT 21
42538: DOUBLE
42539: EQUAL
42540: IFTRUE 42544
42542: GO 42569
42544: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_INT 21
42552: PPUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 321
42562: PUSH
42563: LD_INT 2
42565: EQUAL
42566: ST_TO_ADDR
42567: GO 42745
42569: LD_INT 16
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42577
42575: GO 42604
42577: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_EXP 107
42587: PPUSH
42588: LD_VAR 0 1
42592: PPUSH
42593: CALL_OW 321
42597: PUSH
42598: LD_INT 2
42600: EQUAL
42601: ST_TO_ADDR
42602: GO 42745
42604: LD_INT 19
42606: DOUBLE
42607: EQUAL
42608: IFTRUE 42618
42610: LD_INT 23
42612: DOUBLE
42613: EQUAL
42614: IFTRUE 42618
42616: GO 42645
42618: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42619: LD_ADDR_VAR 0 3
42623: PUSH
42624: LD_EXP 106
42628: PPUSH
42629: LD_VAR 0 1
42633: PPUSH
42634: CALL_OW 321
42638: PUSH
42639: LD_INT 2
42641: EQUAL
42642: ST_TO_ADDR
42643: GO 42745
42645: LD_INT 17
42647: DOUBLE
42648: EQUAL
42649: IFTRUE 42653
42651: GO 42678
42653: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: LD_INT 39
42661: PPUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: CALL_OW 321
42671: PUSH
42672: LD_INT 2
42674: EQUAL
42675: ST_TO_ADDR
42676: GO 42745
42678: LD_INT 18
42680: DOUBLE
42681: EQUAL
42682: IFTRUE 42686
42684: GO 42711
42686: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: LD_INT 40
42694: PPUSH
42695: LD_VAR 0 1
42699: PPUSH
42700: CALL_OW 321
42704: PUSH
42705: LD_INT 2
42707: EQUAL
42708: ST_TO_ADDR
42709: GO 42745
42711: LD_INT 27
42713: DOUBLE
42714: EQUAL
42715: IFTRUE 42719
42717: GO 42744
42719: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42720: LD_ADDR_VAR 0 3
42724: PUSH
42725: LD_INT 35
42727: PPUSH
42728: LD_VAR 0 1
42732: PPUSH
42733: CALL_OW 321
42737: PUSH
42738: LD_INT 2
42740: EQUAL
42741: ST_TO_ADDR
42742: GO 42745
42744: POP
// end ;
42745: LD_VAR 0 3
42749: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42750: LD_INT 0
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
// result := false ;
42763: LD_ADDR_VAR 0 6
42767: PUSH
42768: LD_INT 0
42770: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42771: LD_VAR 0 1
42775: NOT
42776: PUSH
42777: LD_VAR 0 1
42781: PPUSH
42782: CALL_OW 266
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: IN
42797: NOT
42798: OR
42799: PUSH
42800: LD_VAR 0 2
42804: NOT
42805: OR
42806: PUSH
42807: LD_VAR 0 5
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: LD_INT 4
42826: PUSH
42827: LD_INT 5
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: IN
42838: NOT
42839: OR
42840: PUSH
42841: LD_VAR 0 3
42845: PPUSH
42846: LD_VAR 0 4
42850: PPUSH
42851: CALL_OW 488
42855: NOT
42856: OR
42857: IFFALSE 42861
// exit ;
42859: GO 43597
// side := GetSide ( depot ) ;
42861: LD_ADDR_VAR 0 9
42865: PUSH
42866: LD_VAR 0 1
42870: PPUSH
42871: CALL_OW 255
42875: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42876: LD_VAR 0 9
42880: PPUSH
42881: LD_VAR 0 2
42885: PPUSH
42886: CALL 42370 0 2
42890: NOT
42891: IFFALSE 42895
// exit ;
42893: GO 43597
// pom := GetBase ( depot ) ;
42895: LD_ADDR_VAR 0 10
42899: PUSH
42900: LD_VAR 0 1
42904: PPUSH
42905: CALL_OW 274
42909: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42910: LD_ADDR_VAR 0 11
42914: PUSH
42915: LD_VAR 0 2
42919: PPUSH
42920: LD_VAR 0 1
42924: PPUSH
42925: CALL_OW 248
42929: PPUSH
42930: CALL_OW 450
42934: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42935: LD_VAR 0 10
42939: PPUSH
42940: LD_INT 1
42942: PPUSH
42943: CALL_OW 275
42947: PUSH
42948: LD_VAR 0 11
42952: PUSH
42953: LD_INT 1
42955: ARRAY
42956: GREATEREQUAL
42957: PUSH
42958: LD_VAR 0 10
42962: PPUSH
42963: LD_INT 2
42965: PPUSH
42966: CALL_OW 275
42970: PUSH
42971: LD_VAR 0 11
42975: PUSH
42976: LD_INT 2
42978: ARRAY
42979: GREATEREQUAL
42980: AND
42981: PUSH
42982: LD_VAR 0 10
42986: PPUSH
42987: LD_INT 3
42989: PPUSH
42990: CALL_OW 275
42994: PUSH
42995: LD_VAR 0 11
42999: PUSH
43000: LD_INT 3
43002: ARRAY
43003: GREATEREQUAL
43004: AND
43005: NOT
43006: IFFALSE 43010
// exit ;
43008: GO 43597
// if GetBType ( depot ) = b_depot then
43010: LD_VAR 0 1
43014: PPUSH
43015: CALL_OW 266
43019: PUSH
43020: LD_INT 0
43022: EQUAL
43023: IFFALSE 43035
// dist := 28 else
43025: LD_ADDR_VAR 0 14
43029: PUSH
43030: LD_INT 28
43032: ST_TO_ADDR
43033: GO 43043
// dist := 36 ;
43035: LD_ADDR_VAR 0 14
43039: PUSH
43040: LD_INT 36
43042: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43043: LD_VAR 0 1
43047: PPUSH
43048: LD_VAR 0 3
43052: PPUSH
43053: LD_VAR 0 4
43057: PPUSH
43058: CALL_OW 297
43062: PUSH
43063: LD_VAR 0 14
43067: GREATER
43068: IFFALSE 43072
// exit ;
43070: GO 43597
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43072: LD_ADDR_VAR 0 12
43076: PUSH
43077: LD_VAR 0 2
43081: PPUSH
43082: LD_VAR 0 3
43086: PPUSH
43087: LD_VAR 0 4
43091: PPUSH
43092: LD_VAR 0 5
43096: PPUSH
43097: LD_VAR 0 1
43101: PPUSH
43102: CALL_OW 248
43106: PPUSH
43107: LD_INT 0
43109: PPUSH
43110: CALL 43602 0 6
43114: ST_TO_ADDR
// if not hexes then
43115: LD_VAR 0 12
43119: NOT
43120: IFFALSE 43124
// exit ;
43122: GO 43597
// hex := GetHexInfo ( x , y ) ;
43124: LD_ADDR_VAR 0 15
43128: PUSH
43129: LD_VAR 0 3
43133: PPUSH
43134: LD_VAR 0 4
43138: PPUSH
43139: CALL_OW 546
43143: ST_TO_ADDR
// if hex [ 1 ] then
43144: LD_VAR 0 15
43148: PUSH
43149: LD_INT 1
43151: ARRAY
43152: IFFALSE 43156
// exit ;
43154: GO 43597
// height := hex [ 2 ] ;
43156: LD_ADDR_VAR 0 13
43160: PUSH
43161: LD_VAR 0 15
43165: PUSH
43166: LD_INT 2
43168: ARRAY
43169: ST_TO_ADDR
// for i = 1 to hexes do
43170: LD_ADDR_VAR 0 7
43174: PUSH
43175: DOUBLE
43176: LD_INT 1
43178: DEC
43179: ST_TO_ADDR
43180: LD_VAR 0 12
43184: PUSH
43185: FOR_TO
43186: IFFALSE 43516
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43188: LD_VAR 0 12
43192: PUSH
43193: LD_VAR 0 7
43197: ARRAY
43198: PUSH
43199: LD_INT 1
43201: ARRAY
43202: PPUSH
43203: LD_VAR 0 12
43207: PUSH
43208: LD_VAR 0 7
43212: ARRAY
43213: PUSH
43214: LD_INT 2
43216: ARRAY
43217: PPUSH
43218: CALL_OW 488
43222: NOT
43223: PUSH
43224: LD_VAR 0 12
43228: PUSH
43229: LD_VAR 0 7
43233: ARRAY
43234: PUSH
43235: LD_INT 1
43237: ARRAY
43238: PPUSH
43239: LD_VAR 0 12
43243: PUSH
43244: LD_VAR 0 7
43248: ARRAY
43249: PUSH
43250: LD_INT 2
43252: ARRAY
43253: PPUSH
43254: CALL_OW 428
43258: PUSH
43259: LD_INT 0
43261: GREATER
43262: OR
43263: PUSH
43264: LD_VAR 0 12
43268: PUSH
43269: LD_VAR 0 7
43273: ARRAY
43274: PUSH
43275: LD_INT 1
43277: ARRAY
43278: PPUSH
43279: LD_VAR 0 12
43283: PUSH
43284: LD_VAR 0 7
43288: ARRAY
43289: PUSH
43290: LD_INT 2
43292: ARRAY
43293: PPUSH
43294: CALL_OW 351
43298: OR
43299: IFFALSE 43305
// exit ;
43301: POP
43302: POP
43303: GO 43597
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43305: LD_ADDR_VAR 0 8
43309: PUSH
43310: LD_VAR 0 12
43314: PUSH
43315: LD_VAR 0 7
43319: ARRAY
43320: PUSH
43321: LD_INT 1
43323: ARRAY
43324: PPUSH
43325: LD_VAR 0 12
43329: PUSH
43330: LD_VAR 0 7
43334: ARRAY
43335: PUSH
43336: LD_INT 2
43338: ARRAY
43339: PPUSH
43340: CALL_OW 546
43344: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43345: LD_VAR 0 8
43349: PUSH
43350: LD_INT 1
43352: ARRAY
43353: PUSH
43354: LD_VAR 0 8
43358: PUSH
43359: LD_INT 2
43361: ARRAY
43362: PUSH
43363: LD_VAR 0 13
43367: PUSH
43368: LD_INT 2
43370: PLUS
43371: GREATER
43372: OR
43373: PUSH
43374: LD_VAR 0 8
43378: PUSH
43379: LD_INT 2
43381: ARRAY
43382: PUSH
43383: LD_VAR 0 13
43387: PUSH
43388: LD_INT 2
43390: MINUS
43391: LESS
43392: OR
43393: PUSH
43394: LD_VAR 0 8
43398: PUSH
43399: LD_INT 3
43401: ARRAY
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 8
43408: PUSH
43409: LD_INT 9
43411: PUSH
43412: LD_INT 10
43414: PUSH
43415: LD_INT 11
43417: PUSH
43418: LD_INT 12
43420: PUSH
43421: LD_INT 13
43423: PUSH
43424: LD_INT 16
43426: PUSH
43427: LD_INT 17
43429: PUSH
43430: LD_INT 18
43432: PUSH
43433: LD_INT 19
43435: PUSH
43436: LD_INT 20
43438: PUSH
43439: LD_INT 21
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: IN
43457: NOT
43458: OR
43459: PUSH
43460: LD_VAR 0 8
43464: PUSH
43465: LD_INT 5
43467: ARRAY
43468: NOT
43469: OR
43470: PUSH
43471: LD_VAR 0 8
43475: PUSH
43476: LD_INT 6
43478: ARRAY
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: LD_INT 7
43488: PUSH
43489: LD_INT 9
43491: PUSH
43492: LD_INT 10
43494: PUSH
43495: LD_INT 11
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: IN
43506: NOT
43507: OR
43508: IFFALSE 43514
// exit ;
43510: POP
43511: POP
43512: GO 43597
// end ;
43514: GO 43185
43516: POP
43517: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43518: LD_VAR 0 9
43522: PPUSH
43523: LD_VAR 0 3
43527: PPUSH
43528: LD_VAR 0 4
43532: PPUSH
43533: LD_INT 20
43535: PPUSH
43536: CALL 35543 0 4
43540: PUSH
43541: LD_INT 4
43543: ARRAY
43544: IFFALSE 43548
// exit ;
43546: GO 43597
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43548: LD_VAR 0 2
43552: PUSH
43553: LD_INT 29
43555: PUSH
43556: LD_INT 30
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: IN
43563: PUSH
43564: LD_VAR 0 3
43568: PPUSH
43569: LD_VAR 0 4
43573: PPUSH
43574: LD_VAR 0 9
43578: PPUSH
43579: CALL_OW 440
43583: NOT
43584: AND
43585: IFFALSE 43589
// exit ;
43587: GO 43597
// result := true ;
43589: LD_ADDR_VAR 0 6
43593: PUSH
43594: LD_INT 1
43596: ST_TO_ADDR
// end ;
43597: LD_VAR 0 6
43601: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43602: LD_INT 0
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
// result = [ ] ;
43662: LD_ADDR_VAR 0 7
43666: PUSH
43667: EMPTY
43668: ST_TO_ADDR
// temp_list = [ ] ;
43669: LD_ADDR_VAR 0 9
43673: PUSH
43674: EMPTY
43675: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43676: LD_VAR 0 4
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: LD_INT 3
43692: PUSH
43693: LD_INT 4
43695: PUSH
43696: LD_INT 5
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: IN
43707: NOT
43708: PUSH
43709: LD_VAR 0 1
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: IN
43724: PUSH
43725: LD_VAR 0 5
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 3
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: IN
43744: NOT
43745: AND
43746: OR
43747: IFFALSE 43751
// exit ;
43749: GO 62142
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43751: LD_VAR 0 1
43755: PUSH
43756: LD_INT 6
43758: PUSH
43759: LD_INT 7
43761: PUSH
43762: LD_INT 8
43764: PUSH
43765: LD_INT 13
43767: PUSH
43768: LD_INT 12
43770: PUSH
43771: LD_INT 15
43773: PUSH
43774: LD_INT 11
43776: PUSH
43777: LD_INT 14
43779: PUSH
43780: LD_INT 10
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: IN
43794: IFFALSE 43804
// btype = b_lab ;
43796: LD_ADDR_VAR 0 1
43800: PUSH
43801: LD_INT 6
43803: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43804: LD_VAR 0 6
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: LIST
43822: IN
43823: NOT
43824: PUSH
43825: LD_VAR 0 1
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 6
43844: PUSH
43845: LD_INT 36
43847: PUSH
43848: LD_INT 4
43850: PUSH
43851: LD_INT 5
43853: PUSH
43854: LD_INT 31
43856: PUSH
43857: LD_INT 32
43859: PUSH
43860: LD_INT 33
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: IN
43876: NOT
43877: PUSH
43878: LD_VAR 0 6
43882: PUSH
43883: LD_INT 1
43885: EQUAL
43886: AND
43887: OR
43888: PUSH
43889: LD_VAR 0 1
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: IN
43904: NOT
43905: PUSH
43906: LD_VAR 0 6
43910: PUSH
43911: LD_INT 2
43913: EQUAL
43914: AND
43915: OR
43916: IFFALSE 43926
// mode = 0 ;
43918: LD_ADDR_VAR 0 6
43922: PUSH
43923: LD_INT 0
43925: ST_TO_ADDR
// case mode of 0 :
43926: LD_VAR 0 6
43930: PUSH
43931: LD_INT 0
43933: DOUBLE
43934: EQUAL
43935: IFTRUE 43939
43937: GO 55392
43939: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43940: LD_ADDR_VAR 0 11
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44133: LD_ADDR_VAR 0 12
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 3
44290: NEG
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 3
44301: NEG
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44329: LD_ADDR_VAR 0 13
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 3
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 3
44488: NEG
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 3
44500: NEG
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44528: LD_ADDR_VAR 0 14
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44724: LD_ADDR_VAR 0 15
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 2
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44917: LD_ADDR_VAR 0 16
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: LD_INT 3
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45110: LD_ADDR_VAR 0 17
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45340: LD_ADDR_VAR 0 18
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45570: LD_ADDR_VAR 0 19
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45800: LD_ADDR_VAR 0 20
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46030: LD_ADDR_VAR 0 21
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46260: LD_ADDR_VAR 0 22
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46490: LD_ADDR_VAR 0 23
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 3
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 3
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46770: LD_ADDR_VAR 0 24
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47046: LD_ADDR_VAR 0 25
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 3
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 3
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47320: LD_ADDR_VAR 0 26
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47596: LD_ADDR_VAR 0 27
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47876: LD_ADDR_VAR 0 28
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 3
48123: NEG
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48158: LD_ADDR_VAR 0 29
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 3
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 3
48402: NEG
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48437: LD_ADDR_VAR 0 30
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48715: LD_ADDR_VAR 0 31
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48993: LD_ADDR_VAR 0 32
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 3
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 2
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 3
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 3
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 3
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49271: LD_ADDR_VAR 0 33
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 3
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 3
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 3
49515: NEG
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49550: LD_ADDR_VAR 0 34
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 3
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49830: LD_ADDR_VAR 0 35
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49942: LD_ADDR_VAR 0 36
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50054: LD_ADDR_VAR 0 37
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50166: LD_ADDR_VAR 0 38
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50278: LD_ADDR_VAR 0 39
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50390: LD_ADDR_VAR 0 40
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50502: LD_ADDR_VAR 0 41
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 3
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: NEG
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: LD_INT 3
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50852: LD_ADDR_VAR 0 42
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 3
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 3
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51202: LD_ADDR_VAR 0 43
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 3
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 3
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 3
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 3
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 3
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51550: LD_ADDR_VAR 0 44
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: LD_INT 3
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 3
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51900: LD_ADDR_VAR 0 45
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 3
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 3
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 3
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 3
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 3
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: LD_INT 3
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52250: LD_ADDR_VAR 0 46
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52598: LD_ADDR_VAR 0 47
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52749: LD_ADDR_VAR 0 48
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52896: LD_ADDR_VAR 0 49
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53040: LD_ADDR_VAR 0 50
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53184: LD_ADDR_VAR 0 51
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53331: LD_ADDR_VAR 0 52
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53482: LD_ADDR_VAR 0 53
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53712: LD_ADDR_VAR 0 54
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53942: LD_ADDR_VAR 0 55
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54172: LD_ADDR_VAR 0 56
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54402: LD_ADDR_VAR 0 57
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54632: LD_ADDR_VAR 0 58
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54862: LD_ADDR_VAR 0 59
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54950: LD_ADDR_VAR 0 60
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55038: LD_ADDR_VAR 0 61
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55126: LD_ADDR_VAR 0 62
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55214: LD_ADDR_VAR 0 63
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55302: LD_ADDR_VAR 0 64
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// end ; 1 :
55390: GO 61287
55392: LD_INT 1
55394: DOUBLE
55395: EQUAL
55396: IFTRUE 55400
55398: GO 58023
55400: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55401: LD_ADDR_VAR 0 11
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55445: LD_ADDR_VAR 0 12
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55486: LD_ADDR_VAR 0 13
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: LD_INT 3
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55526: LD_ADDR_VAR 0 14
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 3
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 3
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55567: LD_ADDR_VAR 0 15
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55611: LD_ADDR_VAR 0 16
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 3
55642: NEG
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: LIST
55656: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55657: LD_ADDR_VAR 0 17
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 3
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55701: LD_ADDR_VAR 0 18
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 3
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55742: LD_ADDR_VAR 0 19
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55782: LD_ADDR_VAR 0 20
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55823: LD_ADDR_VAR 0 21
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: NEG
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55867: LD_ADDR_VAR 0 22
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: NEG
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55913: LD_ADDR_VAR 0 23
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 4
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55957: LD_ADDR_VAR 0 24
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 4
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55998: LD_ADDR_VAR 0 25
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 4
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: LD_INT 4
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56038: LD_ADDR_VAR 0 26
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 3
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 4
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56079: LD_ADDR_VAR 0 27
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 3
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56123: LD_ADDR_VAR 0 28
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: LD_INT 4
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56169: LD_ADDR_VAR 0 29
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 4
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 4
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 3
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 5
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 5
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 4
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 6
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 6
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 5
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56324: LD_ADDR_VAR 0 30
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 4
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 4
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 4
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 5
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 5
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 5
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 6
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 6
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56467: LD_ADDR_VAR 0 31
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 4
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 4
56514: PUSH
56515: LD_INT 4
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: LD_INT 4
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 5
56534: PUSH
56535: LD_INT 4
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: LD_INT 5
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 4
56554: PUSH
56555: LD_INT 5
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 6
56564: PUSH
56565: LD_INT 5
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 6
56574: PUSH
56575: LD_INT 6
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 5
56584: PUSH
56585: LD_INT 6
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56606: LD_ADDR_VAR 0 32
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 5
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 4
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 6
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 6
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 5
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56749: LD_ADDR_VAR 0 33
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 4
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 4
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 5
56835: NEG
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 5
56846: NEG
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 5
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 6
56869: NEG
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 6
56880: NEG
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56904: LD_ADDR_VAR 0 34
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: NEG
56936: PUSH
56937: LD_INT 3
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 3
56947: NEG
56948: PUSH
56949: LD_INT 4
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: NEG
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 4
56983: NEG
56984: PUSH
56985: LD_INT 5
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 5
56995: NEG
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 5
57007: NEG
57008: PUSH
57009: LD_INT 5
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 5
57019: NEG
57020: PUSH
57021: LD_INT 6
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 6
57031: NEG
57032: PUSH
57033: LD_INT 5
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 6
57043: NEG
57044: PUSH
57045: LD_INT 6
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57067: LD_ADDR_VAR 0 41
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57111: LD_ADDR_VAR 0 42
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 3
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57152: LD_ADDR_VAR 0 43
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: LD_INT 2
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: LD_INT 3
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57192: LD_ADDR_VAR 0 44
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57233: LD_ADDR_VAR 0 45
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: LIST
57276: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57277: LD_ADDR_VAR 0 46
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57323: LD_ADDR_VAR 0 47
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: LD_INT 3
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 3
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57356: LD_ADDR_VAR 0 48
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57387: LD_ADDR_VAR 0 49
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57416: LD_ADDR_VAR 0 50
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57445: LD_ADDR_VAR 0 51
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57476: LD_ADDR_VAR 0 52
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57509: LD_ADDR_VAR 0 53
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57553: LD_ADDR_VAR 0 54
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57594: LD_ADDR_VAR 0 55
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57634: LD_ADDR_VAR 0 56
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: LIST
57674: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57675: LD_ADDR_VAR 0 57
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57719: LD_ADDR_VAR 0 58
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: LD_INT 3
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57765: LD_ADDR_VAR 0 59
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57809: LD_ADDR_VAR 0 60
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: LIST
57849: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57850: LD_ADDR_VAR 0 61
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57890: LD_ADDR_VAR 0 62
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57931: LD_ADDR_VAR 0 63
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57975: LD_ADDR_VAR 0 64
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: ST_TO_ADDR
// end ; 2 :
58021: GO 61287
58023: LD_INT 2
58025: DOUBLE
58026: EQUAL
58027: IFTRUE 58031
58029: GO 61286
58031: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58032: LD_ADDR_VAR 0 29
58036: PUSH
58037: LD_INT 4
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 5
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 5
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 4
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 5
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 3
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 4
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 4
58162: PUSH
58163: LD_INT 4
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: LD_INT 4
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 4
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 4
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 4
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 3
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 4
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 5
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 5
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 3
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 5
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 4
58371: NEG
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 4
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 4
58417: NEG
58418: PUSH
58419: LD_INT 4
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: LD_INT 5
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: NEG
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 4
58465: NEG
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 5
58477: NEG
58478: PUSH
58479: LD_INT 4
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 5
58489: NEG
58490: PUSH
58491: LD_INT 5
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: LD_INT 5
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 5
58513: NEG
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58570: LD_ADDR_VAR 0 30
58574: PUSH
58575: LD_INT 4
58577: PUSH
58578: LD_INT 4
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 4
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 5
58597: PUSH
58598: LD_INT 4
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 5
58607: PUSH
58608: LD_INT 5
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 4
58617: PUSH
58618: LD_INT 5
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: LD_INT 4
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: LD_INT 3
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 5
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: LD_INT 5
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 4
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 4
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: LD_INT 4
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 4
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 4
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 4
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 5
58816: NEG
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 5
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 5
58839: NEG
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 4
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: NEG
58923: PUSH
58924: LD_INT 3
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: NEG
58935: PUSH
58936: LD_INT 4
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 4
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 4
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 5
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 4
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 3
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: LD_INT 4
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 5
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 5
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59117: LD_ADDR_VAR 0 31
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 4
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 5
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 5
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 4
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 3
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: LD_INT 5
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 4
59284: NEG
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: NEG
59320: PUSH
59321: LD_INT 4
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: NEG
59332: PUSH
59333: LD_INT 5
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 5
59379: NEG
59380: PUSH
59381: LD_INT 4
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 5
59391: NEG
59392: PUSH
59393: LD_INT 5
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 3
59403: NEG
59404: PUSH
59405: LD_INT 5
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 5
59415: NEG
59416: PUSH
59417: LD_INT 3
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 4
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: LD_INT 4
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 4
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 4
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 4
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 5
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 5
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 4
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: LD_INT 2
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 5
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59667: LD_ADDR_VAR 0 32
59671: PUSH
59672: LD_INT 4
59674: NEG
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 4
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 4
59719: NEG
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: NEG
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 5
59741: NEG
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 5
59753: NEG
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 3
59788: NEG
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 4
59836: NEG
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 4
59848: NEG
59849: PUSH
59850: LD_INT 4
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 4
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 4
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 5
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 4
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 3
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 4
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 5
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: LD_INT 5
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 3
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 4
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: LD_INT 4
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 4
60089: PUSH
60090: LD_INT 3
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 5
60099: PUSH
60100: LD_INT 4
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 5
60109: PUSH
60110: LD_INT 5
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 4
60119: PUSH
60120: LD_INT 5
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: LD_INT 4
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 3
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 5
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 3
60159: PUSH
60160: LD_INT 5
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60214: LD_ADDR_VAR 0 33
60218: PUSH
60219: LD_INT 4
60221: NEG
60222: PUSH
60223: LD_INT 4
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 4
60233: NEG
60234: PUSH
60235: LD_INT 5
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 3
60245: NEG
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 4
60269: NEG
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 5
60281: NEG
60282: PUSH
60283: LD_INT 4
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 5
60293: NEG
60294: PUSH
60295: LD_INT 5
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: LD_INT 5
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 5
60317: NEG
60318: PUSH
60319: LD_INT 3
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 3
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 4
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 2
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 4
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: LD_INT 4
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 4
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 5
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 5
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 3
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 5
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 4
60554: PUSH
60555: LD_INT 4
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: LD_INT 4
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 4
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 4
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: LD_INT 5
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 5
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: LD_INT 4
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 5
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 3
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60752: LD_ADDR_VAR 0 34
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 4
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: LD_INT 5
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: LD_INT 4
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 3
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 3
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 4
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 5
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: LD_INT 5
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 4
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 4
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 4
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 4
60954: PUSH
60955: LD_INT 4
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 4
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: LD_INT 4
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 5
60984: PUSH
60985: LD_INT 5
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 4
60994: PUSH
60995: LD_INT 5
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 5
61024: PUSH
61025: LD_INT 3
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: LD_INT 5
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 4
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 4
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: LD_INT 4
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 4
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 3
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 4
61182: NEG
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 5
61193: NEG
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 5
61204: NEG
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 5
61216: NEG
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: ST_TO_ADDR
// end ; end ;
61284: GO 61287
61286: POP
// case btype of b_depot , b_warehouse :
61287: LD_VAR 0 1
61291: PUSH
61292: LD_INT 0
61294: DOUBLE
61295: EQUAL
61296: IFTRUE 61306
61298: LD_INT 1
61300: DOUBLE
61301: EQUAL
61302: IFTRUE 61306
61304: GO 61507
61306: POP
// case nation of nation_american :
61307: LD_VAR 0 5
61311: PUSH
61312: LD_INT 1
61314: DOUBLE
61315: EQUAL
61316: IFTRUE 61320
61318: GO 61376
61320: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61321: LD_ADDR_VAR 0 9
61325: PUSH
61326: LD_VAR 0 11
61330: PUSH
61331: LD_VAR 0 12
61335: PUSH
61336: LD_VAR 0 13
61340: PUSH
61341: LD_VAR 0 14
61345: PUSH
61346: LD_VAR 0 15
61350: PUSH
61351: LD_VAR 0 16
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: PUSH
61364: LD_VAR 0 4
61368: PUSH
61369: LD_INT 1
61371: PLUS
61372: ARRAY
61373: ST_TO_ADDR
61374: GO 61505
61376: LD_INT 2
61378: DOUBLE
61379: EQUAL
61380: IFTRUE 61384
61382: GO 61440
61384: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61385: LD_ADDR_VAR 0 9
61389: PUSH
61390: LD_VAR 0 17
61394: PUSH
61395: LD_VAR 0 18
61399: PUSH
61400: LD_VAR 0 19
61404: PUSH
61405: LD_VAR 0 20
61409: PUSH
61410: LD_VAR 0 21
61414: PUSH
61415: LD_VAR 0 22
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: PUSH
61428: LD_VAR 0 4
61432: PUSH
61433: LD_INT 1
61435: PLUS
61436: ARRAY
61437: ST_TO_ADDR
61438: GO 61505
61440: LD_INT 3
61442: DOUBLE
61443: EQUAL
61444: IFTRUE 61448
61446: GO 61504
61448: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61449: LD_ADDR_VAR 0 9
61453: PUSH
61454: LD_VAR 0 23
61458: PUSH
61459: LD_VAR 0 24
61463: PUSH
61464: LD_VAR 0 25
61468: PUSH
61469: LD_VAR 0 26
61473: PUSH
61474: LD_VAR 0 27
61478: PUSH
61479: LD_VAR 0 28
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: PUSH
61492: LD_VAR 0 4
61496: PUSH
61497: LD_INT 1
61499: PLUS
61500: ARRAY
61501: ST_TO_ADDR
61502: GO 61505
61504: POP
61505: GO 62060
61507: LD_INT 2
61509: DOUBLE
61510: EQUAL
61511: IFTRUE 61521
61513: LD_INT 3
61515: DOUBLE
61516: EQUAL
61517: IFTRUE 61521
61519: GO 61577
61521: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61522: LD_ADDR_VAR 0 9
61526: PUSH
61527: LD_VAR 0 29
61531: PUSH
61532: LD_VAR 0 30
61536: PUSH
61537: LD_VAR 0 31
61541: PUSH
61542: LD_VAR 0 32
61546: PUSH
61547: LD_VAR 0 33
61551: PUSH
61552: LD_VAR 0 34
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: PUSH
61565: LD_VAR 0 4
61569: PUSH
61570: LD_INT 1
61572: PLUS
61573: ARRAY
61574: ST_TO_ADDR
61575: GO 62060
61577: LD_INT 16
61579: DOUBLE
61580: EQUAL
61581: IFTRUE 61639
61583: LD_INT 17
61585: DOUBLE
61586: EQUAL
61587: IFTRUE 61639
61589: LD_INT 18
61591: DOUBLE
61592: EQUAL
61593: IFTRUE 61639
61595: LD_INT 19
61597: DOUBLE
61598: EQUAL
61599: IFTRUE 61639
61601: LD_INT 22
61603: DOUBLE
61604: EQUAL
61605: IFTRUE 61639
61607: LD_INT 20
61609: DOUBLE
61610: EQUAL
61611: IFTRUE 61639
61613: LD_INT 21
61615: DOUBLE
61616: EQUAL
61617: IFTRUE 61639
61619: LD_INT 23
61621: DOUBLE
61622: EQUAL
61623: IFTRUE 61639
61625: LD_INT 24
61627: DOUBLE
61628: EQUAL
61629: IFTRUE 61639
61631: LD_INT 25
61633: DOUBLE
61634: EQUAL
61635: IFTRUE 61639
61637: GO 61695
61639: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61640: LD_ADDR_VAR 0 9
61644: PUSH
61645: LD_VAR 0 35
61649: PUSH
61650: LD_VAR 0 36
61654: PUSH
61655: LD_VAR 0 37
61659: PUSH
61660: LD_VAR 0 38
61664: PUSH
61665: LD_VAR 0 39
61669: PUSH
61670: LD_VAR 0 40
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: PUSH
61683: LD_VAR 0 4
61687: PUSH
61688: LD_INT 1
61690: PLUS
61691: ARRAY
61692: ST_TO_ADDR
61693: GO 62060
61695: LD_INT 6
61697: DOUBLE
61698: EQUAL
61699: IFTRUE 61751
61701: LD_INT 7
61703: DOUBLE
61704: EQUAL
61705: IFTRUE 61751
61707: LD_INT 8
61709: DOUBLE
61710: EQUAL
61711: IFTRUE 61751
61713: LD_INT 13
61715: DOUBLE
61716: EQUAL
61717: IFTRUE 61751
61719: LD_INT 12
61721: DOUBLE
61722: EQUAL
61723: IFTRUE 61751
61725: LD_INT 15
61727: DOUBLE
61728: EQUAL
61729: IFTRUE 61751
61731: LD_INT 11
61733: DOUBLE
61734: EQUAL
61735: IFTRUE 61751
61737: LD_INT 14
61739: DOUBLE
61740: EQUAL
61741: IFTRUE 61751
61743: LD_INT 10
61745: DOUBLE
61746: EQUAL
61747: IFTRUE 61751
61749: GO 61807
61751: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61752: LD_ADDR_VAR 0 9
61756: PUSH
61757: LD_VAR 0 41
61761: PUSH
61762: LD_VAR 0 42
61766: PUSH
61767: LD_VAR 0 43
61771: PUSH
61772: LD_VAR 0 44
61776: PUSH
61777: LD_VAR 0 45
61781: PUSH
61782: LD_VAR 0 46
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: PUSH
61795: LD_VAR 0 4
61799: PUSH
61800: LD_INT 1
61802: PLUS
61803: ARRAY
61804: ST_TO_ADDR
61805: GO 62060
61807: LD_INT 36
61809: DOUBLE
61810: EQUAL
61811: IFTRUE 61815
61813: GO 61871
61815: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61816: LD_ADDR_VAR 0 9
61820: PUSH
61821: LD_VAR 0 47
61825: PUSH
61826: LD_VAR 0 48
61830: PUSH
61831: LD_VAR 0 49
61835: PUSH
61836: LD_VAR 0 50
61840: PUSH
61841: LD_VAR 0 51
61845: PUSH
61846: LD_VAR 0 52
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: PUSH
61859: LD_VAR 0 4
61863: PUSH
61864: LD_INT 1
61866: PLUS
61867: ARRAY
61868: ST_TO_ADDR
61869: GO 62060
61871: LD_INT 4
61873: DOUBLE
61874: EQUAL
61875: IFTRUE 61897
61877: LD_INT 5
61879: DOUBLE
61880: EQUAL
61881: IFTRUE 61897
61883: LD_INT 34
61885: DOUBLE
61886: EQUAL
61887: IFTRUE 61897
61889: LD_INT 37
61891: DOUBLE
61892: EQUAL
61893: IFTRUE 61897
61895: GO 61953
61897: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61898: LD_ADDR_VAR 0 9
61902: PUSH
61903: LD_VAR 0 53
61907: PUSH
61908: LD_VAR 0 54
61912: PUSH
61913: LD_VAR 0 55
61917: PUSH
61918: LD_VAR 0 56
61922: PUSH
61923: LD_VAR 0 57
61927: PUSH
61928: LD_VAR 0 58
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: PUSH
61941: LD_VAR 0 4
61945: PUSH
61946: LD_INT 1
61948: PLUS
61949: ARRAY
61950: ST_TO_ADDR
61951: GO 62060
61953: LD_INT 31
61955: DOUBLE
61956: EQUAL
61957: IFTRUE 62003
61959: LD_INT 32
61961: DOUBLE
61962: EQUAL
61963: IFTRUE 62003
61965: LD_INT 33
61967: DOUBLE
61968: EQUAL
61969: IFTRUE 62003
61971: LD_INT 27
61973: DOUBLE
61974: EQUAL
61975: IFTRUE 62003
61977: LD_INT 26
61979: DOUBLE
61980: EQUAL
61981: IFTRUE 62003
61983: LD_INT 28
61985: DOUBLE
61986: EQUAL
61987: IFTRUE 62003
61989: LD_INT 29
61991: DOUBLE
61992: EQUAL
61993: IFTRUE 62003
61995: LD_INT 30
61997: DOUBLE
61998: EQUAL
61999: IFTRUE 62003
62001: GO 62059
62003: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62004: LD_ADDR_VAR 0 9
62008: PUSH
62009: LD_VAR 0 59
62013: PUSH
62014: LD_VAR 0 60
62018: PUSH
62019: LD_VAR 0 61
62023: PUSH
62024: LD_VAR 0 62
62028: PUSH
62029: LD_VAR 0 63
62033: PUSH
62034: LD_VAR 0 64
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: PUSH
62047: LD_VAR 0 4
62051: PUSH
62052: LD_INT 1
62054: PLUS
62055: ARRAY
62056: ST_TO_ADDR
62057: GO 62060
62059: POP
// temp_list2 = [ ] ;
62060: LD_ADDR_VAR 0 10
62064: PUSH
62065: EMPTY
62066: ST_TO_ADDR
// for i in temp_list do
62067: LD_ADDR_VAR 0 8
62071: PUSH
62072: LD_VAR 0 9
62076: PUSH
62077: FOR_IN
62078: IFFALSE 62130
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62080: LD_ADDR_VAR 0 10
62084: PUSH
62085: LD_VAR 0 10
62089: PUSH
62090: LD_VAR 0 8
62094: PUSH
62095: LD_INT 1
62097: ARRAY
62098: PUSH
62099: LD_VAR 0 2
62103: PLUS
62104: PUSH
62105: LD_VAR 0 8
62109: PUSH
62110: LD_INT 2
62112: ARRAY
62113: PUSH
62114: LD_VAR 0 3
62118: PLUS
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: ADD
62127: ST_TO_ADDR
62128: GO 62077
62130: POP
62131: POP
// result = temp_list2 ;
62132: LD_ADDR_VAR 0 7
62136: PUSH
62137: LD_VAR 0 10
62141: ST_TO_ADDR
// end ;
62142: LD_VAR 0 7
62146: RET
// export function EnemyInRange ( unit , dist ) ; begin
62147: LD_INT 0
62149: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62150: LD_ADDR_VAR 0 3
62154: PUSH
62155: LD_VAR 0 1
62159: PPUSH
62160: CALL_OW 255
62164: PPUSH
62165: LD_VAR 0 1
62169: PPUSH
62170: CALL_OW 250
62174: PPUSH
62175: LD_VAR 0 1
62179: PPUSH
62180: CALL_OW 251
62184: PPUSH
62185: LD_VAR 0 2
62189: PPUSH
62190: CALL 35543 0 4
62194: PUSH
62195: LD_INT 4
62197: ARRAY
62198: ST_TO_ADDR
// end ;
62199: LD_VAR 0 3
62203: RET
// export function PlayerSeeMe ( unit ) ; begin
62204: LD_INT 0
62206: PPUSH
// result := See ( your_side , unit ) ;
62207: LD_ADDR_VAR 0 2
62211: PUSH
62212: LD_OWVAR 2
62216: PPUSH
62217: LD_VAR 0 1
62221: PPUSH
62222: CALL_OW 292
62226: ST_TO_ADDR
// end ;
62227: LD_VAR 0 2
62231: RET
// export function ReverseDir ( unit ) ; begin
62232: LD_INT 0
62234: PPUSH
// if not unit then
62235: LD_VAR 0 1
62239: NOT
62240: IFFALSE 62244
// exit ;
62242: GO 62267
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62244: LD_ADDR_VAR 0 2
62248: PUSH
62249: LD_VAR 0 1
62253: PPUSH
62254: CALL_OW 254
62258: PUSH
62259: LD_INT 3
62261: PLUS
62262: PUSH
62263: LD_INT 6
62265: MOD
62266: ST_TO_ADDR
// end ;
62267: LD_VAR 0 2
62271: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62272: LD_INT 0
62274: PPUSH
62275: PPUSH
62276: PPUSH
62277: PPUSH
62278: PPUSH
// if not hexes then
62279: LD_VAR 0 2
62283: NOT
62284: IFFALSE 62288
// exit ;
62286: GO 62436
// dist := 9999 ;
62288: LD_ADDR_VAR 0 5
62292: PUSH
62293: LD_INT 9999
62295: ST_TO_ADDR
// for i = 1 to hexes do
62296: LD_ADDR_VAR 0 4
62300: PUSH
62301: DOUBLE
62302: LD_INT 1
62304: DEC
62305: ST_TO_ADDR
62306: LD_VAR 0 2
62310: PUSH
62311: FOR_TO
62312: IFFALSE 62424
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62314: LD_VAR 0 1
62318: PPUSH
62319: LD_VAR 0 2
62323: PUSH
62324: LD_VAR 0 4
62328: ARRAY
62329: PUSH
62330: LD_INT 1
62332: ARRAY
62333: PPUSH
62334: LD_VAR 0 2
62338: PUSH
62339: LD_VAR 0 4
62343: ARRAY
62344: PUSH
62345: LD_INT 2
62347: ARRAY
62348: PPUSH
62349: CALL_OW 297
62353: PUSH
62354: LD_VAR 0 5
62358: LESS
62359: IFFALSE 62422
// begin hex := hexes [ i ] ;
62361: LD_ADDR_VAR 0 7
62365: PUSH
62366: LD_VAR 0 2
62370: PUSH
62371: LD_VAR 0 4
62375: ARRAY
62376: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62377: LD_ADDR_VAR 0 5
62381: PUSH
62382: LD_VAR 0 1
62386: PPUSH
62387: LD_VAR 0 2
62391: PUSH
62392: LD_VAR 0 4
62396: ARRAY
62397: PUSH
62398: LD_INT 1
62400: ARRAY
62401: PPUSH
62402: LD_VAR 0 2
62406: PUSH
62407: LD_VAR 0 4
62411: ARRAY
62412: PUSH
62413: LD_INT 2
62415: ARRAY
62416: PPUSH
62417: CALL_OW 297
62421: ST_TO_ADDR
// end ; end ;
62422: GO 62311
62424: POP
62425: POP
// result := hex ;
62426: LD_ADDR_VAR 0 3
62430: PUSH
62431: LD_VAR 0 7
62435: ST_TO_ADDR
// end ;
62436: LD_VAR 0 3
62440: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62441: LD_INT 0
62443: PPUSH
62444: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62445: LD_VAR 0 1
62449: NOT
62450: PUSH
62451: LD_VAR 0 1
62455: PUSH
62456: LD_INT 21
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 23
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PPUSH
62480: CALL_OW 69
62484: IN
62485: NOT
62486: OR
62487: IFFALSE 62491
// exit ;
62489: GO 62538
// for i = 1 to 3 do
62491: LD_ADDR_VAR 0 3
62495: PUSH
62496: DOUBLE
62497: LD_INT 1
62499: DEC
62500: ST_TO_ADDR
62501: LD_INT 3
62503: PUSH
62504: FOR_TO
62505: IFFALSE 62536
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62507: LD_VAR 0 1
62511: PPUSH
62512: CALL_OW 250
62516: PPUSH
62517: LD_VAR 0 1
62521: PPUSH
62522: CALL_OW 251
62526: PPUSH
62527: LD_INT 1
62529: PPUSH
62530: CALL_OW 453
62534: GO 62504
62536: POP
62537: POP
// end ;
62538: LD_VAR 0 2
62542: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62543: LD_INT 0
62545: PPUSH
62546: PPUSH
62547: PPUSH
62548: PPUSH
62549: PPUSH
62550: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62551: LD_VAR 0 1
62555: NOT
62556: PUSH
62557: LD_VAR 0 2
62561: NOT
62562: OR
62563: PUSH
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL_OW 314
62573: OR
62574: IFFALSE 62578
// exit ;
62576: GO 63019
// x := GetX ( enemy_unit ) ;
62578: LD_ADDR_VAR 0 7
62582: PUSH
62583: LD_VAR 0 2
62587: PPUSH
62588: CALL_OW 250
62592: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62593: LD_ADDR_VAR 0 8
62597: PUSH
62598: LD_VAR 0 2
62602: PPUSH
62603: CALL_OW 251
62607: ST_TO_ADDR
// if not x or not y then
62608: LD_VAR 0 7
62612: NOT
62613: PUSH
62614: LD_VAR 0 8
62618: NOT
62619: OR
62620: IFFALSE 62624
// exit ;
62622: GO 63019
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62624: LD_ADDR_VAR 0 6
62628: PUSH
62629: LD_VAR 0 7
62633: PPUSH
62634: LD_INT 0
62636: PPUSH
62637: LD_INT 4
62639: PPUSH
62640: CALL_OW 272
62644: PUSH
62645: LD_VAR 0 8
62649: PPUSH
62650: LD_INT 0
62652: PPUSH
62653: LD_INT 4
62655: PPUSH
62656: CALL_OW 273
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_VAR 0 7
62669: PPUSH
62670: LD_INT 1
62672: PPUSH
62673: LD_INT 4
62675: PPUSH
62676: CALL_OW 272
62680: PUSH
62681: LD_VAR 0 8
62685: PPUSH
62686: LD_INT 1
62688: PPUSH
62689: LD_INT 4
62691: PPUSH
62692: CALL_OW 273
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_VAR 0 7
62705: PPUSH
62706: LD_INT 2
62708: PPUSH
62709: LD_INT 4
62711: PPUSH
62712: CALL_OW 272
62716: PUSH
62717: LD_VAR 0 8
62721: PPUSH
62722: LD_INT 2
62724: PPUSH
62725: LD_INT 4
62727: PPUSH
62728: CALL_OW 273
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_VAR 0 7
62741: PPUSH
62742: LD_INT 3
62744: PPUSH
62745: LD_INT 4
62747: PPUSH
62748: CALL_OW 272
62752: PUSH
62753: LD_VAR 0 8
62757: PPUSH
62758: LD_INT 3
62760: PPUSH
62761: LD_INT 4
62763: PPUSH
62764: CALL_OW 273
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_VAR 0 7
62777: PPUSH
62778: LD_INT 4
62780: PPUSH
62781: LD_INT 4
62783: PPUSH
62784: CALL_OW 272
62788: PUSH
62789: LD_VAR 0 8
62793: PPUSH
62794: LD_INT 4
62796: PPUSH
62797: LD_INT 4
62799: PPUSH
62800: CALL_OW 273
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_VAR 0 7
62813: PPUSH
62814: LD_INT 5
62816: PPUSH
62817: LD_INT 4
62819: PPUSH
62820: CALL_OW 272
62824: PUSH
62825: LD_VAR 0 8
62829: PPUSH
62830: LD_INT 5
62832: PPUSH
62833: LD_INT 4
62835: PPUSH
62836: CALL_OW 273
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: ST_TO_ADDR
// for i = tmp downto 1 do
62853: LD_ADDR_VAR 0 4
62857: PUSH
62858: DOUBLE
62859: LD_VAR 0 6
62863: INC
62864: ST_TO_ADDR
62865: LD_INT 1
62867: PUSH
62868: FOR_DOWNTO
62869: IFFALSE 62970
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62871: LD_VAR 0 6
62875: PUSH
62876: LD_VAR 0 4
62880: ARRAY
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PPUSH
62886: LD_VAR 0 6
62890: PUSH
62891: LD_VAR 0 4
62895: ARRAY
62896: PUSH
62897: LD_INT 2
62899: ARRAY
62900: PPUSH
62901: CALL_OW 488
62905: NOT
62906: PUSH
62907: LD_VAR 0 6
62911: PUSH
62912: LD_VAR 0 4
62916: ARRAY
62917: PUSH
62918: LD_INT 1
62920: ARRAY
62921: PPUSH
62922: LD_VAR 0 6
62926: PUSH
62927: LD_VAR 0 4
62931: ARRAY
62932: PUSH
62933: LD_INT 2
62935: ARRAY
62936: PPUSH
62937: CALL_OW 428
62941: PUSH
62942: LD_INT 0
62944: NONEQUAL
62945: OR
62946: IFFALSE 62968
// tmp := Delete ( tmp , i ) ;
62948: LD_ADDR_VAR 0 6
62952: PUSH
62953: LD_VAR 0 6
62957: PPUSH
62958: LD_VAR 0 4
62962: PPUSH
62963: CALL_OW 3
62967: ST_TO_ADDR
62968: GO 62868
62970: POP
62971: POP
// j := GetClosestHex ( unit , tmp ) ;
62972: LD_ADDR_VAR 0 5
62976: PUSH
62977: LD_VAR 0 1
62981: PPUSH
62982: LD_VAR 0 6
62986: PPUSH
62987: CALL 62272 0 2
62991: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62992: LD_VAR 0 1
62996: PPUSH
62997: LD_VAR 0 5
63001: PUSH
63002: LD_INT 1
63004: ARRAY
63005: PPUSH
63006: LD_VAR 0 5
63010: PUSH
63011: LD_INT 2
63013: ARRAY
63014: PPUSH
63015: CALL_OW 111
// end ;
63019: LD_VAR 0 3
63023: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63024: LD_INT 0
63026: PPUSH
63027: PPUSH
63028: PPUSH
// uc_side = 0 ;
63029: LD_ADDR_OWVAR 20
63033: PUSH
63034: LD_INT 0
63036: ST_TO_ADDR
// uc_nation = 0 ;
63037: LD_ADDR_OWVAR 21
63041: PUSH
63042: LD_INT 0
63044: ST_TO_ADDR
// InitHc_All ( ) ;
63045: CALL_OW 584
// InitVc ;
63049: CALL_OW 20
// if mastodonts then
63053: LD_VAR 0 6
63057: IFFALSE 63124
// for i = 1 to mastodonts do
63059: LD_ADDR_VAR 0 11
63063: PUSH
63064: DOUBLE
63065: LD_INT 1
63067: DEC
63068: ST_TO_ADDR
63069: LD_VAR 0 6
63073: PUSH
63074: FOR_TO
63075: IFFALSE 63122
// begin vc_chassis := 31 ;
63077: LD_ADDR_OWVAR 37
63081: PUSH
63082: LD_INT 31
63084: ST_TO_ADDR
// vc_control := control_rider ;
63085: LD_ADDR_OWVAR 38
63089: PUSH
63090: LD_INT 4
63092: ST_TO_ADDR
// animal := CreateVehicle ;
63093: LD_ADDR_VAR 0 12
63097: PUSH
63098: CALL_OW 45
63102: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63103: LD_VAR 0 12
63107: PPUSH
63108: LD_VAR 0 8
63112: PPUSH
63113: LD_INT 0
63115: PPUSH
63116: CALL 65312 0 3
// end ;
63120: GO 63074
63122: POP
63123: POP
// if horses then
63124: LD_VAR 0 5
63128: IFFALSE 63195
// for i = 1 to horses do
63130: LD_ADDR_VAR 0 11
63134: PUSH
63135: DOUBLE
63136: LD_INT 1
63138: DEC
63139: ST_TO_ADDR
63140: LD_VAR 0 5
63144: PUSH
63145: FOR_TO
63146: IFFALSE 63193
// begin hc_class := 21 ;
63148: LD_ADDR_OWVAR 28
63152: PUSH
63153: LD_INT 21
63155: ST_TO_ADDR
// hc_gallery :=  ;
63156: LD_ADDR_OWVAR 33
63160: PUSH
63161: LD_STRING 
63163: ST_TO_ADDR
// animal := CreateHuman ;
63164: LD_ADDR_VAR 0 12
63168: PUSH
63169: CALL_OW 44
63173: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63174: LD_VAR 0 12
63178: PPUSH
63179: LD_VAR 0 8
63183: PPUSH
63184: LD_INT 0
63186: PPUSH
63187: CALL 65312 0 3
// end ;
63191: GO 63145
63193: POP
63194: POP
// if birds then
63195: LD_VAR 0 1
63199: IFFALSE 63266
// for i = 1 to birds do
63201: LD_ADDR_VAR 0 11
63205: PUSH
63206: DOUBLE
63207: LD_INT 1
63209: DEC
63210: ST_TO_ADDR
63211: LD_VAR 0 1
63215: PUSH
63216: FOR_TO
63217: IFFALSE 63264
// begin hc_class = 18 ;
63219: LD_ADDR_OWVAR 28
63223: PUSH
63224: LD_INT 18
63226: ST_TO_ADDR
// hc_gallery =  ;
63227: LD_ADDR_OWVAR 33
63231: PUSH
63232: LD_STRING 
63234: ST_TO_ADDR
// animal := CreateHuman ;
63235: LD_ADDR_VAR 0 12
63239: PUSH
63240: CALL_OW 44
63244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63245: LD_VAR 0 12
63249: PPUSH
63250: LD_VAR 0 8
63254: PPUSH
63255: LD_INT 0
63257: PPUSH
63258: CALL 65312 0 3
// end ;
63262: GO 63216
63264: POP
63265: POP
// if tigers then
63266: LD_VAR 0 2
63270: IFFALSE 63354
// for i = 1 to tigers do
63272: LD_ADDR_VAR 0 11
63276: PUSH
63277: DOUBLE
63278: LD_INT 1
63280: DEC
63281: ST_TO_ADDR
63282: LD_VAR 0 2
63286: PUSH
63287: FOR_TO
63288: IFFALSE 63352
// begin hc_class = class_tiger ;
63290: LD_ADDR_OWVAR 28
63294: PUSH
63295: LD_INT 14
63297: ST_TO_ADDR
// hc_gallery =  ;
63298: LD_ADDR_OWVAR 33
63302: PUSH
63303: LD_STRING 
63305: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63306: LD_ADDR_OWVAR 35
63310: PUSH
63311: LD_INT 7
63313: NEG
63314: PPUSH
63315: LD_INT 7
63317: PPUSH
63318: CALL_OW 12
63322: ST_TO_ADDR
// animal := CreateHuman ;
63323: LD_ADDR_VAR 0 12
63327: PUSH
63328: CALL_OW 44
63332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63333: LD_VAR 0 12
63337: PPUSH
63338: LD_VAR 0 8
63342: PPUSH
63343: LD_INT 0
63345: PPUSH
63346: CALL 65312 0 3
// end ;
63350: GO 63287
63352: POP
63353: POP
// if apemans then
63354: LD_VAR 0 3
63358: IFFALSE 63481
// for i = 1 to apemans do
63360: LD_ADDR_VAR 0 11
63364: PUSH
63365: DOUBLE
63366: LD_INT 1
63368: DEC
63369: ST_TO_ADDR
63370: LD_VAR 0 3
63374: PUSH
63375: FOR_TO
63376: IFFALSE 63479
// begin hc_class = class_apeman ;
63378: LD_ADDR_OWVAR 28
63382: PUSH
63383: LD_INT 12
63385: ST_TO_ADDR
// hc_gallery =  ;
63386: LD_ADDR_OWVAR 33
63390: PUSH
63391: LD_STRING 
63393: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63394: LD_ADDR_OWVAR 35
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PPUSH
63403: LD_INT 2
63405: PPUSH
63406: CALL_OW 12
63410: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63411: LD_ADDR_OWVAR 31
63415: PUSH
63416: LD_INT 1
63418: PPUSH
63419: LD_INT 3
63421: PPUSH
63422: CALL_OW 12
63426: PUSH
63427: LD_INT 1
63429: PPUSH
63430: LD_INT 3
63432: PPUSH
63433: CALL_OW 12
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: ST_TO_ADDR
// animal := CreateHuman ;
63450: LD_ADDR_VAR 0 12
63454: PUSH
63455: CALL_OW 44
63459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63460: LD_VAR 0 12
63464: PPUSH
63465: LD_VAR 0 8
63469: PPUSH
63470: LD_INT 0
63472: PPUSH
63473: CALL 65312 0 3
// end ;
63477: GO 63375
63479: POP
63480: POP
// if enchidnas then
63481: LD_VAR 0 4
63485: IFFALSE 63552
// for i = 1 to enchidnas do
63487: LD_ADDR_VAR 0 11
63491: PUSH
63492: DOUBLE
63493: LD_INT 1
63495: DEC
63496: ST_TO_ADDR
63497: LD_VAR 0 4
63501: PUSH
63502: FOR_TO
63503: IFFALSE 63550
// begin hc_class = 13 ;
63505: LD_ADDR_OWVAR 28
63509: PUSH
63510: LD_INT 13
63512: ST_TO_ADDR
// hc_gallery =  ;
63513: LD_ADDR_OWVAR 33
63517: PUSH
63518: LD_STRING 
63520: ST_TO_ADDR
// animal := CreateHuman ;
63521: LD_ADDR_VAR 0 12
63525: PUSH
63526: CALL_OW 44
63530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63531: LD_VAR 0 12
63535: PPUSH
63536: LD_VAR 0 8
63540: PPUSH
63541: LD_INT 0
63543: PPUSH
63544: CALL 65312 0 3
// end ;
63548: GO 63502
63550: POP
63551: POP
// if fishes then
63552: LD_VAR 0 7
63556: IFFALSE 63623
// for i = 1 to fishes do
63558: LD_ADDR_VAR 0 11
63562: PUSH
63563: DOUBLE
63564: LD_INT 1
63566: DEC
63567: ST_TO_ADDR
63568: LD_VAR 0 7
63572: PUSH
63573: FOR_TO
63574: IFFALSE 63621
// begin hc_class = 20 ;
63576: LD_ADDR_OWVAR 28
63580: PUSH
63581: LD_INT 20
63583: ST_TO_ADDR
// hc_gallery =  ;
63584: LD_ADDR_OWVAR 33
63588: PUSH
63589: LD_STRING 
63591: ST_TO_ADDR
// animal := CreateHuman ;
63592: LD_ADDR_VAR 0 12
63596: PUSH
63597: CALL_OW 44
63601: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63602: LD_VAR 0 12
63606: PPUSH
63607: LD_VAR 0 9
63611: PPUSH
63612: LD_INT 0
63614: PPUSH
63615: CALL 65312 0 3
// end ;
63619: GO 63573
63621: POP
63622: POP
// end ;
63623: LD_VAR 0 10
63627: RET
// export function WantHeal ( sci , unit ) ; begin
63628: LD_INT 0
63630: PPUSH
// if GetTaskList ( sci ) > 0 then
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL_OW 437
63640: PUSH
63641: LD_INT 0
63643: GREATER
63644: IFFALSE 63714
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63646: LD_VAR 0 1
63650: PPUSH
63651: CALL_OW 437
63655: PUSH
63656: LD_INT 1
63658: ARRAY
63659: PUSH
63660: LD_INT 1
63662: ARRAY
63663: PUSH
63664: LD_STRING l
63666: EQUAL
63667: PUSH
63668: LD_VAR 0 1
63672: PPUSH
63673: CALL_OW 437
63677: PUSH
63678: LD_INT 1
63680: ARRAY
63681: PUSH
63682: LD_INT 4
63684: ARRAY
63685: PUSH
63686: LD_VAR 0 2
63690: EQUAL
63691: AND
63692: IFFALSE 63704
// result := true else
63694: LD_ADDR_VAR 0 3
63698: PUSH
63699: LD_INT 1
63701: ST_TO_ADDR
63702: GO 63712
// result := false ;
63704: LD_ADDR_VAR 0 3
63708: PUSH
63709: LD_INT 0
63711: ST_TO_ADDR
// end else
63712: GO 63722
// result := false ;
63714: LD_ADDR_VAR 0 3
63718: PUSH
63719: LD_INT 0
63721: ST_TO_ADDR
// end ;
63722: LD_VAR 0 3
63726: RET
// export function HealTarget ( sci ) ; begin
63727: LD_INT 0
63729: PPUSH
// if not sci then
63730: LD_VAR 0 1
63734: NOT
63735: IFFALSE 63739
// exit ;
63737: GO 63804
// result := 0 ;
63739: LD_ADDR_VAR 0 2
63743: PUSH
63744: LD_INT 0
63746: ST_TO_ADDR
// if GetTaskList ( sci ) then
63747: LD_VAR 0 1
63751: PPUSH
63752: CALL_OW 437
63756: IFFALSE 63804
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63758: LD_VAR 0 1
63762: PPUSH
63763: CALL_OW 437
63767: PUSH
63768: LD_INT 1
63770: ARRAY
63771: PUSH
63772: LD_INT 1
63774: ARRAY
63775: PUSH
63776: LD_STRING l
63778: EQUAL
63779: IFFALSE 63804
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63781: LD_ADDR_VAR 0 2
63785: PUSH
63786: LD_VAR 0 1
63790: PPUSH
63791: CALL_OW 437
63795: PUSH
63796: LD_INT 1
63798: ARRAY
63799: PUSH
63800: LD_INT 4
63802: ARRAY
63803: ST_TO_ADDR
// end ;
63804: LD_VAR 0 2
63808: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63809: LD_INT 0
63811: PPUSH
63812: PPUSH
63813: PPUSH
63814: PPUSH
// if not base_units then
63815: LD_VAR 0 1
63819: NOT
63820: IFFALSE 63824
// exit ;
63822: GO 63911
// result := false ;
63824: LD_ADDR_VAR 0 2
63828: PUSH
63829: LD_INT 0
63831: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63832: LD_ADDR_VAR 0 5
63836: PUSH
63837: LD_VAR 0 1
63841: PPUSH
63842: LD_INT 21
63844: PUSH
63845: LD_INT 3
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PPUSH
63852: CALL_OW 72
63856: ST_TO_ADDR
// if not tmp then
63857: LD_VAR 0 5
63861: NOT
63862: IFFALSE 63866
// exit ;
63864: GO 63911
// for i in tmp do
63866: LD_ADDR_VAR 0 3
63870: PUSH
63871: LD_VAR 0 5
63875: PUSH
63876: FOR_IN
63877: IFFALSE 63909
// begin result := EnemyInRange ( i , 22 ) ;
63879: LD_ADDR_VAR 0 2
63883: PUSH
63884: LD_VAR 0 3
63888: PPUSH
63889: LD_INT 22
63891: PPUSH
63892: CALL 62147 0 2
63896: ST_TO_ADDR
// if result then
63897: LD_VAR 0 2
63901: IFFALSE 63907
// exit ;
63903: POP
63904: POP
63905: GO 63911
// end ;
63907: GO 63876
63909: POP
63910: POP
// end ;
63911: LD_VAR 0 2
63915: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63916: LD_INT 0
63918: PPUSH
63919: PPUSH
// if not units then
63920: LD_VAR 0 1
63924: NOT
63925: IFFALSE 63929
// exit ;
63927: GO 63999
// result := [ ] ;
63929: LD_ADDR_VAR 0 3
63933: PUSH
63934: EMPTY
63935: ST_TO_ADDR
// for i in units do
63936: LD_ADDR_VAR 0 4
63940: PUSH
63941: LD_VAR 0 1
63945: PUSH
63946: FOR_IN
63947: IFFALSE 63997
// if GetTag ( i ) = tag then
63949: LD_VAR 0 4
63953: PPUSH
63954: CALL_OW 110
63958: PUSH
63959: LD_VAR 0 2
63963: EQUAL
63964: IFFALSE 63995
// result := Replace ( result , result + 1 , i ) ;
63966: LD_ADDR_VAR 0 3
63970: PUSH
63971: LD_VAR 0 3
63975: PPUSH
63976: LD_VAR 0 3
63980: PUSH
63981: LD_INT 1
63983: PLUS
63984: PPUSH
63985: LD_VAR 0 4
63989: PPUSH
63990: CALL_OW 1
63994: ST_TO_ADDR
63995: GO 63946
63997: POP
63998: POP
// end ;
63999: LD_VAR 0 3
64003: RET
// export function IsDriver ( un ) ; begin
64004: LD_INT 0
64006: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64007: LD_ADDR_VAR 0 2
64011: PUSH
64012: LD_VAR 0 1
64016: PUSH
64017: LD_INT 55
64019: PUSH
64020: EMPTY
64021: LIST
64022: PPUSH
64023: CALL_OW 69
64027: IN
64028: ST_TO_ADDR
// end ;
64029: LD_VAR 0 2
64033: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64034: LD_INT 0
64036: PPUSH
64037: PPUSH
// list := [ ] ;
64038: LD_ADDR_VAR 0 5
64042: PUSH
64043: EMPTY
64044: ST_TO_ADDR
// case d of 0 :
64045: LD_VAR 0 3
64049: PUSH
64050: LD_INT 0
64052: DOUBLE
64053: EQUAL
64054: IFTRUE 64058
64056: GO 64191
64058: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64059: LD_ADDR_VAR 0 5
64063: PUSH
64064: LD_VAR 0 1
64068: PUSH
64069: LD_INT 4
64071: MINUS
64072: PUSH
64073: LD_VAR 0 2
64077: PUSH
64078: LD_INT 4
64080: MINUS
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: PUSH
64090: LD_VAR 0 1
64094: PUSH
64095: LD_INT 3
64097: MINUS
64098: PUSH
64099: LD_VAR 0 2
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: PUSH
64112: LD_VAR 0 1
64116: PUSH
64117: LD_INT 4
64119: PLUS
64120: PUSH
64121: LD_VAR 0 2
64125: PUSH
64126: LD_INT 4
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: PUSH
64134: LD_VAR 0 1
64138: PUSH
64139: LD_INT 3
64141: PLUS
64142: PUSH
64143: LD_VAR 0 2
64147: PUSH
64148: LD_INT 3
64150: PLUS
64151: PUSH
64152: LD_INT 5
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: PUSH
64160: LD_VAR 0 1
64164: PUSH
64165: LD_VAR 0 2
64169: PUSH
64170: LD_INT 4
64172: PLUS
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: ST_TO_ADDR
// end ; 1 :
64189: GO 64889
64191: LD_INT 1
64193: DOUBLE
64194: EQUAL
64195: IFTRUE 64199
64197: GO 64332
64199: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64200: LD_ADDR_VAR 0 5
64204: PUSH
64205: LD_VAR 0 1
64209: PUSH
64210: LD_VAR 0 2
64214: PUSH
64215: LD_INT 4
64217: MINUS
64218: PUSH
64219: LD_INT 3
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: LIST
64226: PUSH
64227: LD_VAR 0 1
64231: PUSH
64232: LD_INT 3
64234: MINUS
64235: PUSH
64236: LD_VAR 0 2
64240: PUSH
64241: LD_INT 3
64243: MINUS
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: LIST
64252: PUSH
64253: LD_VAR 0 1
64257: PUSH
64258: LD_INT 4
64260: MINUS
64261: PUSH
64262: LD_VAR 0 2
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: LIST
64274: PUSH
64275: LD_VAR 0 1
64279: PUSH
64280: LD_VAR 0 2
64284: PUSH
64285: LD_INT 3
64287: PLUS
64288: PUSH
64289: LD_INT 0
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: PUSH
64297: LD_VAR 0 1
64301: PUSH
64302: LD_INT 4
64304: PLUS
64305: PUSH
64306: LD_VAR 0 2
64310: PUSH
64311: LD_INT 4
64313: PLUS
64314: PUSH
64315: LD_INT 5
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: ST_TO_ADDR
// end ; 2 :
64330: GO 64889
64332: LD_INT 2
64334: DOUBLE
64335: EQUAL
64336: IFTRUE 64340
64338: GO 64469
64340: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64341: LD_ADDR_VAR 0 5
64345: PUSH
64346: LD_VAR 0 1
64350: PUSH
64351: LD_VAR 0 2
64355: PUSH
64356: LD_INT 3
64358: MINUS
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: PUSH
64368: LD_VAR 0 1
64372: PUSH
64373: LD_INT 4
64375: PLUS
64376: PUSH
64377: LD_VAR 0 2
64381: PUSH
64382: LD_INT 4
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: PUSH
64390: LD_VAR 0 1
64394: PUSH
64395: LD_VAR 0 2
64399: PUSH
64400: LD_INT 4
64402: PLUS
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: LIST
64411: PUSH
64412: LD_VAR 0 1
64416: PUSH
64417: LD_INT 3
64419: MINUS
64420: PUSH
64421: LD_VAR 0 2
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: PUSH
64434: LD_VAR 0 1
64438: PUSH
64439: LD_INT 4
64441: MINUS
64442: PUSH
64443: LD_VAR 0 2
64447: PUSH
64448: LD_INT 4
64450: MINUS
64451: PUSH
64452: LD_INT 2
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: LIST
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// end ; 3 :
64467: GO 64889
64469: LD_INT 3
64471: DOUBLE
64472: EQUAL
64473: IFTRUE 64477
64475: GO 64610
64477: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64478: LD_ADDR_VAR 0 5
64482: PUSH
64483: LD_VAR 0 1
64487: PUSH
64488: LD_INT 3
64490: PLUS
64491: PUSH
64492: LD_VAR 0 2
64496: PUSH
64497: LD_INT 4
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: LD_INT 4
64512: PLUS
64513: PUSH
64514: LD_VAR 0 2
64518: PUSH
64519: LD_INT 4
64521: PLUS
64522: PUSH
64523: LD_INT 5
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: PUSH
64531: LD_VAR 0 1
64535: PUSH
64536: LD_INT 4
64538: MINUS
64539: PUSH
64540: LD_VAR 0 2
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: PUSH
64553: LD_VAR 0 1
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_INT 4
64565: MINUS
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: PUSH
64575: LD_VAR 0 1
64579: PUSH
64580: LD_INT 3
64582: MINUS
64583: PUSH
64584: LD_VAR 0 2
64588: PUSH
64589: LD_INT 3
64591: MINUS
64592: PUSH
64593: LD_INT 2
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: ST_TO_ADDR
// end ; 4 :
64608: GO 64889
64610: LD_INT 4
64612: DOUBLE
64613: EQUAL
64614: IFTRUE 64618
64616: GO 64751
64618: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64619: LD_ADDR_VAR 0 5
64623: PUSH
64624: LD_VAR 0 1
64628: PUSH
64629: LD_VAR 0 2
64633: PUSH
64634: LD_INT 4
64636: PLUS
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: LIST
64645: PUSH
64646: LD_VAR 0 1
64650: PUSH
64651: LD_INT 3
64653: PLUS
64654: PUSH
64655: LD_VAR 0 2
64659: PUSH
64660: LD_INT 3
64662: PLUS
64663: PUSH
64664: LD_INT 5
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: LIST
64671: PUSH
64672: LD_VAR 0 1
64676: PUSH
64677: LD_INT 4
64679: PLUS
64680: PUSH
64681: LD_VAR 0 2
64685: PUSH
64686: LD_INT 4
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: PUSH
64694: LD_VAR 0 1
64698: PUSH
64699: LD_VAR 0 2
64703: PUSH
64704: LD_INT 3
64706: MINUS
64707: PUSH
64708: LD_INT 3
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: PUSH
64716: LD_VAR 0 1
64720: PUSH
64721: LD_INT 4
64723: MINUS
64724: PUSH
64725: LD_VAR 0 2
64729: PUSH
64730: LD_INT 4
64732: MINUS
64733: PUSH
64734: LD_INT 2
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: ST_TO_ADDR
// end ; 5 :
64749: GO 64889
64751: LD_INT 5
64753: DOUBLE
64754: EQUAL
64755: IFTRUE 64759
64757: GO 64888
64759: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64760: LD_ADDR_VAR 0 5
64764: PUSH
64765: LD_VAR 0 1
64769: PUSH
64770: LD_INT 4
64772: MINUS
64773: PUSH
64774: LD_VAR 0 2
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: PUSH
64787: LD_VAR 0 1
64791: PUSH
64792: LD_VAR 0 2
64796: PUSH
64797: LD_INT 4
64799: MINUS
64800: PUSH
64801: LD_INT 3
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: LIST
64808: PUSH
64809: LD_VAR 0 1
64813: PUSH
64814: LD_INT 4
64816: PLUS
64817: PUSH
64818: LD_VAR 0 2
64822: PUSH
64823: LD_INT 4
64825: PLUS
64826: PUSH
64827: LD_INT 5
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: LIST
64834: PUSH
64835: LD_VAR 0 1
64839: PUSH
64840: LD_INT 3
64842: PLUS
64843: PUSH
64844: LD_VAR 0 2
64848: PUSH
64849: LD_INT 4
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: PUSH
64857: LD_VAR 0 1
64861: PUSH
64862: LD_VAR 0 2
64866: PUSH
64867: LD_INT 3
64869: PLUS
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: ST_TO_ADDR
// end ; end ;
64886: GO 64889
64888: POP
// result := list ;
64889: LD_ADDR_VAR 0 4
64893: PUSH
64894: LD_VAR 0 5
64898: ST_TO_ADDR
// end ;
64899: LD_VAR 0 4
64903: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64904: LD_INT 0
64906: PPUSH
64907: PPUSH
64908: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64909: LD_VAR 0 1
64913: NOT
64914: PUSH
64915: LD_VAR 0 2
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: LD_INT 3
64928: PUSH
64929: LD_INT 4
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: IN
64938: NOT
64939: OR
64940: IFFALSE 64944
// exit ;
64942: GO 65036
// tmp := [ ] ;
64944: LD_ADDR_VAR 0 5
64948: PUSH
64949: EMPTY
64950: ST_TO_ADDR
// for i in units do
64951: LD_ADDR_VAR 0 4
64955: PUSH
64956: LD_VAR 0 1
64960: PUSH
64961: FOR_IN
64962: IFFALSE 65005
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64964: LD_ADDR_VAR 0 5
64968: PUSH
64969: LD_VAR 0 5
64973: PPUSH
64974: LD_VAR 0 5
64978: PUSH
64979: LD_INT 1
64981: PLUS
64982: PPUSH
64983: LD_VAR 0 4
64987: PPUSH
64988: LD_VAR 0 2
64992: PPUSH
64993: CALL_OW 259
64997: PPUSH
64998: CALL_OW 2
65002: ST_TO_ADDR
65003: GO 64961
65005: POP
65006: POP
// if not tmp then
65007: LD_VAR 0 5
65011: NOT
65012: IFFALSE 65016
// exit ;
65014: GO 65036
// result := SortListByListDesc ( units , tmp ) ;
65016: LD_ADDR_VAR 0 3
65020: PUSH
65021: LD_VAR 0 1
65025: PPUSH
65026: LD_VAR 0 5
65030: PPUSH
65031: CALL_OW 77
65035: ST_TO_ADDR
// end ;
65036: LD_VAR 0 3
65040: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65041: LD_INT 0
65043: PPUSH
65044: PPUSH
65045: PPUSH
// result := false ;
65046: LD_ADDR_VAR 0 3
65050: PUSH
65051: LD_INT 0
65053: ST_TO_ADDR
// x := GetX ( building ) ;
65054: LD_ADDR_VAR 0 4
65058: PUSH
65059: LD_VAR 0 2
65063: PPUSH
65064: CALL_OW 250
65068: ST_TO_ADDR
// y := GetY ( building ) ;
65069: LD_ADDR_VAR 0 5
65073: PUSH
65074: LD_VAR 0 2
65078: PPUSH
65079: CALL_OW 251
65083: ST_TO_ADDR
// if not building or not x or not y then
65084: LD_VAR 0 2
65088: NOT
65089: PUSH
65090: LD_VAR 0 4
65094: NOT
65095: OR
65096: PUSH
65097: LD_VAR 0 5
65101: NOT
65102: OR
65103: IFFALSE 65107
// exit ;
65105: GO 65199
// if GetTaskList ( unit ) then
65107: LD_VAR 0 1
65111: PPUSH
65112: CALL_OW 437
65116: IFFALSE 65199
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65118: LD_STRING e
65120: PUSH
65121: LD_VAR 0 1
65125: PPUSH
65126: CALL_OW 437
65130: PUSH
65131: LD_INT 1
65133: ARRAY
65134: PUSH
65135: LD_INT 1
65137: ARRAY
65138: EQUAL
65139: PUSH
65140: LD_VAR 0 4
65144: PUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: CALL_OW 437
65154: PUSH
65155: LD_INT 1
65157: ARRAY
65158: PUSH
65159: LD_INT 2
65161: ARRAY
65162: EQUAL
65163: AND
65164: PUSH
65165: LD_VAR 0 5
65169: PUSH
65170: LD_VAR 0 1
65174: PPUSH
65175: CALL_OW 437
65179: PUSH
65180: LD_INT 1
65182: ARRAY
65183: PUSH
65184: LD_INT 3
65186: ARRAY
65187: EQUAL
65188: AND
65189: IFFALSE 65199
// result := true end ;
65191: LD_ADDR_VAR 0 3
65195: PUSH
65196: LD_INT 1
65198: ST_TO_ADDR
// end ;
65199: LD_VAR 0 3
65203: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65204: LD_INT 0
65206: PPUSH
// result := false ;
65207: LD_ADDR_VAR 0 4
65211: PUSH
65212: LD_INT 0
65214: ST_TO_ADDR
// if GetTaskList ( unit ) then
65215: LD_VAR 0 1
65219: PPUSH
65220: CALL_OW 437
65224: IFFALSE 65307
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65226: LD_STRING M
65228: PUSH
65229: LD_VAR 0 1
65233: PPUSH
65234: CALL_OW 437
65238: PUSH
65239: LD_INT 1
65241: ARRAY
65242: PUSH
65243: LD_INT 1
65245: ARRAY
65246: EQUAL
65247: PUSH
65248: LD_VAR 0 2
65252: PUSH
65253: LD_VAR 0 1
65257: PPUSH
65258: CALL_OW 437
65262: PUSH
65263: LD_INT 1
65265: ARRAY
65266: PUSH
65267: LD_INT 2
65269: ARRAY
65270: EQUAL
65271: AND
65272: PUSH
65273: LD_VAR 0 3
65277: PUSH
65278: LD_VAR 0 1
65282: PPUSH
65283: CALL_OW 437
65287: PUSH
65288: LD_INT 1
65290: ARRAY
65291: PUSH
65292: LD_INT 3
65294: ARRAY
65295: EQUAL
65296: AND
65297: IFFALSE 65307
// result := true ;
65299: LD_ADDR_VAR 0 4
65303: PUSH
65304: LD_INT 1
65306: ST_TO_ADDR
// end ; end ;
65307: LD_VAR 0 4
65311: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65312: LD_INT 0
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
// if not unit or not area then
65318: LD_VAR 0 1
65322: NOT
65323: PUSH
65324: LD_VAR 0 2
65328: NOT
65329: OR
65330: IFFALSE 65334
// exit ;
65332: GO 65498
// tmp := AreaToList ( area , i ) ;
65334: LD_ADDR_VAR 0 6
65338: PUSH
65339: LD_VAR 0 2
65343: PPUSH
65344: LD_VAR 0 5
65348: PPUSH
65349: CALL_OW 517
65353: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65354: LD_ADDR_VAR 0 5
65358: PUSH
65359: DOUBLE
65360: LD_INT 1
65362: DEC
65363: ST_TO_ADDR
65364: LD_VAR 0 6
65368: PUSH
65369: LD_INT 1
65371: ARRAY
65372: PUSH
65373: FOR_TO
65374: IFFALSE 65496
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65376: LD_ADDR_VAR 0 7
65380: PUSH
65381: LD_VAR 0 6
65385: PUSH
65386: LD_INT 1
65388: ARRAY
65389: PUSH
65390: LD_VAR 0 5
65394: ARRAY
65395: PUSH
65396: LD_VAR 0 6
65400: PUSH
65401: LD_INT 2
65403: ARRAY
65404: PUSH
65405: LD_VAR 0 5
65409: ARRAY
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65415: LD_VAR 0 7
65419: PUSH
65420: LD_INT 1
65422: ARRAY
65423: PPUSH
65424: LD_VAR 0 7
65428: PUSH
65429: LD_INT 2
65431: ARRAY
65432: PPUSH
65433: CALL_OW 428
65437: PUSH
65438: LD_INT 0
65440: EQUAL
65441: IFFALSE 65494
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65443: LD_VAR 0 1
65447: PPUSH
65448: LD_VAR 0 7
65452: PUSH
65453: LD_INT 1
65455: ARRAY
65456: PPUSH
65457: LD_VAR 0 7
65461: PUSH
65462: LD_INT 2
65464: ARRAY
65465: PPUSH
65466: LD_VAR 0 3
65470: PPUSH
65471: CALL_OW 48
// result := IsPlaced ( unit ) ;
65475: LD_ADDR_VAR 0 4
65479: PUSH
65480: LD_VAR 0 1
65484: PPUSH
65485: CALL_OW 305
65489: ST_TO_ADDR
// exit ;
65490: POP
65491: POP
65492: GO 65498
// end ; end ;
65494: GO 65373
65496: POP
65497: POP
// end ;
65498: LD_VAR 0 4
65502: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65503: LD_INT 0
65505: PPUSH
65506: PPUSH
65507: PPUSH
// if not side or side > 8 then
65508: LD_VAR 0 1
65512: NOT
65513: PUSH
65514: LD_VAR 0 1
65518: PUSH
65519: LD_INT 8
65521: GREATER
65522: OR
65523: IFFALSE 65527
// exit ;
65525: GO 65714
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65527: LD_ADDR_VAR 0 4
65531: PUSH
65532: LD_INT 22
65534: PUSH
65535: LD_VAR 0 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 21
65546: PUSH
65547: LD_INT 3
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PPUSH
65558: CALL_OW 69
65562: ST_TO_ADDR
// if not tmp then
65563: LD_VAR 0 4
65567: NOT
65568: IFFALSE 65572
// exit ;
65570: GO 65714
// enable_addtolog := true ;
65572: LD_ADDR_OWVAR 81
65576: PUSH
65577: LD_INT 1
65579: ST_TO_ADDR
// AddToLog ( [ ) ;
65580: LD_STRING [
65582: PPUSH
65583: CALL_OW 561
// for i in tmp do
65587: LD_ADDR_VAR 0 3
65591: PUSH
65592: LD_VAR 0 4
65596: PUSH
65597: FOR_IN
65598: IFFALSE 65705
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65600: LD_STRING [
65602: PUSH
65603: LD_VAR 0 3
65607: PPUSH
65608: CALL_OW 266
65612: STR
65613: PUSH
65614: LD_STRING , 
65616: STR
65617: PUSH
65618: LD_VAR 0 3
65622: PPUSH
65623: CALL_OW 250
65627: STR
65628: PUSH
65629: LD_STRING , 
65631: STR
65632: PUSH
65633: LD_VAR 0 3
65637: PPUSH
65638: CALL_OW 251
65642: STR
65643: PUSH
65644: LD_STRING , 
65646: STR
65647: PUSH
65648: LD_VAR 0 3
65652: PPUSH
65653: CALL_OW 254
65657: STR
65658: PUSH
65659: LD_STRING , 
65661: STR
65662: PUSH
65663: LD_VAR 0 3
65667: PPUSH
65668: LD_INT 1
65670: PPUSH
65671: CALL_OW 268
65675: STR
65676: PUSH
65677: LD_STRING , 
65679: STR
65680: PUSH
65681: LD_VAR 0 3
65685: PPUSH
65686: LD_INT 2
65688: PPUSH
65689: CALL_OW 268
65693: STR
65694: PUSH
65695: LD_STRING ],
65697: STR
65698: PPUSH
65699: CALL_OW 561
// end ;
65703: GO 65597
65705: POP
65706: POP
// AddToLog ( ]; ) ;
65707: LD_STRING ];
65709: PPUSH
65710: CALL_OW 561
// end ;
65714: LD_VAR 0 2
65718: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65719: LD_INT 0
65721: PPUSH
65722: PPUSH
65723: PPUSH
65724: PPUSH
65725: PPUSH
// if not area or not rate or not max then
65726: LD_VAR 0 1
65730: NOT
65731: PUSH
65732: LD_VAR 0 2
65736: NOT
65737: OR
65738: PUSH
65739: LD_VAR 0 4
65743: NOT
65744: OR
65745: IFFALSE 65749
// exit ;
65747: GO 65941
// while 1 do
65749: LD_INT 1
65751: IFFALSE 65941
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65753: LD_ADDR_VAR 0 9
65757: PUSH
65758: LD_VAR 0 1
65762: PPUSH
65763: LD_INT 1
65765: PPUSH
65766: CALL_OW 287
65770: PUSH
65771: LD_INT 10
65773: MUL
65774: ST_TO_ADDR
// r := rate / 10 ;
65775: LD_ADDR_VAR 0 7
65779: PUSH
65780: LD_VAR 0 2
65784: PUSH
65785: LD_INT 10
65787: DIVREAL
65788: ST_TO_ADDR
// time := 1 1$00 ;
65789: LD_ADDR_VAR 0 8
65793: PUSH
65794: LD_INT 2100
65796: ST_TO_ADDR
// if amount < min then
65797: LD_VAR 0 9
65801: PUSH
65802: LD_VAR 0 3
65806: LESS
65807: IFFALSE 65825
// r := r * 2 else
65809: LD_ADDR_VAR 0 7
65813: PUSH
65814: LD_VAR 0 7
65818: PUSH
65819: LD_INT 2
65821: MUL
65822: ST_TO_ADDR
65823: GO 65851
// if amount > max then
65825: LD_VAR 0 9
65829: PUSH
65830: LD_VAR 0 4
65834: GREATER
65835: IFFALSE 65851
// r := r / 2 ;
65837: LD_ADDR_VAR 0 7
65841: PUSH
65842: LD_VAR 0 7
65846: PUSH
65847: LD_INT 2
65849: DIVREAL
65850: ST_TO_ADDR
// time := time / r ;
65851: LD_ADDR_VAR 0 8
65855: PUSH
65856: LD_VAR 0 8
65860: PUSH
65861: LD_VAR 0 7
65865: DIVREAL
65866: ST_TO_ADDR
// if time < 0 then
65867: LD_VAR 0 8
65871: PUSH
65872: LD_INT 0
65874: LESS
65875: IFFALSE 65892
// time := time * - 1 ;
65877: LD_ADDR_VAR 0 8
65881: PUSH
65882: LD_VAR 0 8
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: MUL
65891: ST_TO_ADDR
// wait ( time ) ;
65892: LD_VAR 0 8
65896: PPUSH
65897: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65901: LD_INT 35
65903: PPUSH
65904: LD_INT 875
65906: PPUSH
65907: CALL_OW 12
65911: PPUSH
65912: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65916: LD_INT 1
65918: PPUSH
65919: LD_INT 5
65921: PPUSH
65922: CALL_OW 12
65926: PPUSH
65927: LD_VAR 0 1
65931: PPUSH
65932: LD_INT 1
65934: PPUSH
65935: CALL_OW 55
// end ;
65939: GO 65749
// end ;
65941: LD_VAR 0 5
65945: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65946: LD_INT 0
65948: PPUSH
65949: PPUSH
65950: PPUSH
65951: PPUSH
65952: PPUSH
65953: PPUSH
65954: PPUSH
65955: PPUSH
// if not turrets or not factories then
65956: LD_VAR 0 1
65960: NOT
65961: PUSH
65962: LD_VAR 0 2
65966: NOT
65967: OR
65968: IFFALSE 65972
// exit ;
65970: GO 66279
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65972: LD_ADDR_VAR 0 10
65976: PUSH
65977: LD_INT 5
65979: PUSH
65980: LD_INT 6
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 2
65989: PUSH
65990: LD_INT 4
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: LD_INT 5
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 24
66014: PUSH
66015: LD_INT 25
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 23
66024: PUSH
66025: LD_INT 27
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 42
66038: PUSH
66039: LD_INT 43
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 44
66048: PUSH
66049: LD_INT 46
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 45
66058: PUSH
66059: LD_INT 47
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: ST_TO_ADDR
// result := [ ] ;
66076: LD_ADDR_VAR 0 3
66080: PUSH
66081: EMPTY
66082: ST_TO_ADDR
// for i in turrets do
66083: LD_ADDR_VAR 0 4
66087: PUSH
66088: LD_VAR 0 1
66092: PUSH
66093: FOR_IN
66094: IFFALSE 66277
// begin nat := GetNation ( i ) ;
66096: LD_ADDR_VAR 0 7
66100: PUSH
66101: LD_VAR 0 4
66105: PPUSH
66106: CALL_OW 248
66110: ST_TO_ADDR
// weapon := 0 ;
66111: LD_ADDR_VAR 0 8
66115: PUSH
66116: LD_INT 0
66118: ST_TO_ADDR
// if not nat then
66119: LD_VAR 0 7
66123: NOT
66124: IFFALSE 66128
// continue ;
66126: GO 66093
// for j in list [ nat ] do
66128: LD_ADDR_VAR 0 5
66132: PUSH
66133: LD_VAR 0 10
66137: PUSH
66138: LD_VAR 0 7
66142: ARRAY
66143: PUSH
66144: FOR_IN
66145: IFFALSE 66186
// if GetBWeapon ( i ) = j [ 1 ] then
66147: LD_VAR 0 4
66151: PPUSH
66152: CALL_OW 269
66156: PUSH
66157: LD_VAR 0 5
66161: PUSH
66162: LD_INT 1
66164: ARRAY
66165: EQUAL
66166: IFFALSE 66184
// begin weapon := j [ 2 ] ;
66168: LD_ADDR_VAR 0 8
66172: PUSH
66173: LD_VAR 0 5
66177: PUSH
66178: LD_INT 2
66180: ARRAY
66181: ST_TO_ADDR
// break ;
66182: GO 66186
// end ;
66184: GO 66144
66186: POP
66187: POP
// if not weapon then
66188: LD_VAR 0 8
66192: NOT
66193: IFFALSE 66197
// continue ;
66195: GO 66093
// for k in factories do
66197: LD_ADDR_VAR 0 6
66201: PUSH
66202: LD_VAR 0 2
66206: PUSH
66207: FOR_IN
66208: IFFALSE 66273
// begin weapons := AvailableWeaponList ( k ) ;
66210: LD_ADDR_VAR 0 9
66214: PUSH
66215: LD_VAR 0 6
66219: PPUSH
66220: CALL_OW 478
66224: ST_TO_ADDR
// if not weapons then
66225: LD_VAR 0 9
66229: NOT
66230: IFFALSE 66234
// continue ;
66232: GO 66207
// if weapon in weapons then
66234: LD_VAR 0 8
66238: PUSH
66239: LD_VAR 0 9
66243: IN
66244: IFFALSE 66271
// begin result := [ i , weapon ] ;
66246: LD_ADDR_VAR 0 3
66250: PUSH
66251: LD_VAR 0 4
66255: PUSH
66256: LD_VAR 0 8
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// exit ;
66265: POP
66266: POP
66267: POP
66268: POP
66269: GO 66279
// end ; end ;
66271: GO 66207
66273: POP
66274: POP
// end ;
66275: GO 66093
66277: POP
66278: POP
// end ;
66279: LD_VAR 0 3
66283: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66284: LD_INT 0
66286: PPUSH
// if not side or side > 8 then
66287: LD_VAR 0 3
66291: NOT
66292: PUSH
66293: LD_VAR 0 3
66297: PUSH
66298: LD_INT 8
66300: GREATER
66301: OR
66302: IFFALSE 66306
// exit ;
66304: GO 66365
// if not range then
66306: LD_VAR 0 4
66310: NOT
66311: IFFALSE 66322
// range := - 12 ;
66313: LD_ADDR_VAR 0 4
66317: PUSH
66318: LD_INT 12
66320: NEG
66321: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66322: LD_VAR 0 1
66326: PPUSH
66327: LD_VAR 0 2
66331: PPUSH
66332: LD_VAR 0 3
66336: PPUSH
66337: LD_VAR 0 4
66341: PPUSH
66342: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66346: LD_VAR 0 1
66350: PPUSH
66351: LD_VAR 0 2
66355: PPUSH
66356: LD_VAR 0 3
66360: PPUSH
66361: CALL_OW 331
// end ;
66365: LD_VAR 0 5
66369: RET
// export function Video ( mode ) ; begin
66370: LD_INT 0
66372: PPUSH
// ingame_video = mode ;
66373: LD_ADDR_OWVAR 52
66377: PUSH
66378: LD_VAR 0 1
66382: ST_TO_ADDR
// interface_hidden = mode ;
66383: LD_ADDR_OWVAR 54
66387: PUSH
66388: LD_VAR 0 1
66392: ST_TO_ADDR
// end ;
66393: LD_VAR 0 2
66397: RET
// export function Join ( array , element ) ; begin
66398: LD_INT 0
66400: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66401: LD_ADDR_VAR 0 3
66405: PUSH
66406: LD_VAR 0 1
66410: PPUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_INT 1
66418: PLUS
66419: PPUSH
66420: LD_VAR 0 2
66424: PPUSH
66425: CALL_OW 1
66429: ST_TO_ADDR
// end ;
66430: LD_VAR 0 3
66434: RET
// export function JoinUnion ( array , element ) ; begin
66435: LD_INT 0
66437: PPUSH
// result := array union element ;
66438: LD_ADDR_VAR 0 3
66442: PUSH
66443: LD_VAR 0 1
66447: PUSH
66448: LD_VAR 0 2
66452: UNION
66453: ST_TO_ADDR
// end ;
66454: LD_VAR 0 3
66458: RET
// export function GetBehemoths ( side ) ; begin
66459: LD_INT 0
66461: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66462: LD_ADDR_VAR 0 2
66466: PUSH
66467: LD_INT 22
66469: PUSH
66470: LD_VAR 0 1
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 31
66481: PUSH
66482: LD_INT 25
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PPUSH
66493: CALL_OW 69
66497: ST_TO_ADDR
// end ;
66498: LD_VAR 0 2
66502: RET
// export function Shuffle ( array ) ; var i , index ; begin
66503: LD_INT 0
66505: PPUSH
66506: PPUSH
66507: PPUSH
// result := [ ] ;
66508: LD_ADDR_VAR 0 2
66512: PUSH
66513: EMPTY
66514: ST_TO_ADDR
// if not array then
66515: LD_VAR 0 1
66519: NOT
66520: IFFALSE 66524
// exit ;
66522: GO 66623
// Randomize ;
66524: CALL_OW 10
// for i = array downto 1 do
66528: LD_ADDR_VAR 0 3
66532: PUSH
66533: DOUBLE
66534: LD_VAR 0 1
66538: INC
66539: ST_TO_ADDR
66540: LD_INT 1
66542: PUSH
66543: FOR_DOWNTO
66544: IFFALSE 66621
// begin index := rand ( 1 , array ) ;
66546: LD_ADDR_VAR 0 4
66550: PUSH
66551: LD_INT 1
66553: PPUSH
66554: LD_VAR 0 1
66558: PPUSH
66559: CALL_OW 12
66563: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66564: LD_ADDR_VAR 0 2
66568: PUSH
66569: LD_VAR 0 2
66573: PPUSH
66574: LD_VAR 0 2
66578: PUSH
66579: LD_INT 1
66581: PLUS
66582: PPUSH
66583: LD_VAR 0 1
66587: PUSH
66588: LD_VAR 0 4
66592: ARRAY
66593: PPUSH
66594: CALL_OW 2
66598: ST_TO_ADDR
// array := Delete ( array , index ) ;
66599: LD_ADDR_VAR 0 1
66603: PUSH
66604: LD_VAR 0 1
66608: PPUSH
66609: LD_VAR 0 4
66613: PPUSH
66614: CALL_OW 3
66618: ST_TO_ADDR
// end ;
66619: GO 66543
66621: POP
66622: POP
// end ;
66623: LD_VAR 0 2
66627: RET
// export function GetBaseMaterials ( base ) ; begin
66628: LD_INT 0
66630: PPUSH
// result := [ 0 , 0 , 0 ] ;
66631: LD_ADDR_VAR 0 2
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: ST_TO_ADDR
// if not base then
66650: LD_VAR 0 1
66654: NOT
66655: IFFALSE 66659
// exit ;
66657: GO 66708
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66659: LD_ADDR_VAR 0 2
66663: PUSH
66664: LD_VAR 0 1
66668: PPUSH
66669: LD_INT 1
66671: PPUSH
66672: CALL_OW 275
66676: PUSH
66677: LD_VAR 0 1
66681: PPUSH
66682: LD_INT 2
66684: PPUSH
66685: CALL_OW 275
66689: PUSH
66690: LD_VAR 0 1
66694: PPUSH
66695: LD_INT 3
66697: PPUSH
66698: CALL_OW 275
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: LIST
66707: ST_TO_ADDR
// end ;
66708: LD_VAR 0 2
66712: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66713: LD_INT 0
66715: PPUSH
66716: PPUSH
// result := array ;
66717: LD_ADDR_VAR 0 3
66721: PUSH
66722: LD_VAR 0 1
66726: ST_TO_ADDR
// if size > 0 then
66727: LD_VAR 0 2
66731: PUSH
66732: LD_INT 0
66734: GREATER
66735: IFFALSE 66781
// for i := array downto size do
66737: LD_ADDR_VAR 0 4
66741: PUSH
66742: DOUBLE
66743: LD_VAR 0 1
66747: INC
66748: ST_TO_ADDR
66749: LD_VAR 0 2
66753: PUSH
66754: FOR_DOWNTO
66755: IFFALSE 66779
// result := Delete ( result , result ) ;
66757: LD_ADDR_VAR 0 3
66761: PUSH
66762: LD_VAR 0 3
66766: PPUSH
66767: LD_VAR 0 3
66771: PPUSH
66772: CALL_OW 3
66776: ST_TO_ADDR
66777: GO 66754
66779: POP
66780: POP
// end ;
66781: LD_VAR 0 3
66785: RET
// export function ComExit ( unit ) ; var tmp ; begin
66786: LD_INT 0
66788: PPUSH
66789: PPUSH
// if not IsInUnit ( unit ) then
66790: LD_VAR 0 1
66794: PPUSH
66795: CALL_OW 310
66799: NOT
66800: IFFALSE 66804
// exit ;
66802: GO 66864
// tmp := IsInUnit ( unit ) ;
66804: LD_ADDR_VAR 0 3
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: CALL_OW 310
66818: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66819: LD_VAR 0 3
66823: PPUSH
66824: CALL_OW 247
66828: PUSH
66829: LD_INT 2
66831: EQUAL
66832: IFFALSE 66845
// ComExitVehicle ( unit ) else
66834: LD_VAR 0 1
66838: PPUSH
66839: CALL_OW 121
66843: GO 66854
// ComExitBuilding ( unit ) ;
66845: LD_VAR 0 1
66849: PPUSH
66850: CALL_OW 122
// result := tmp ;
66854: LD_ADDR_VAR 0 2
66858: PUSH
66859: LD_VAR 0 3
66863: ST_TO_ADDR
// end ;
66864: LD_VAR 0 2
66868: RET
// export function ComExitAll ( units ) ; var i ; begin
66869: LD_INT 0
66871: PPUSH
66872: PPUSH
// if not units then
66873: LD_VAR 0 1
66877: NOT
66878: IFFALSE 66882
// exit ;
66880: GO 66908
// for i in units do
66882: LD_ADDR_VAR 0 3
66886: PUSH
66887: LD_VAR 0 1
66891: PUSH
66892: FOR_IN
66893: IFFALSE 66906
// ComExit ( i ) ;
66895: LD_VAR 0 3
66899: PPUSH
66900: CALL 66786 0 1
66904: GO 66892
66906: POP
66907: POP
// end ;
66908: LD_VAR 0 2
66912: RET
// export function ResetHc ; begin
66913: LD_INT 0
66915: PPUSH
// InitHc ;
66916: CALL_OW 19
// hc_importance := 0 ;
66920: LD_ADDR_OWVAR 32
66924: PUSH
66925: LD_INT 0
66927: ST_TO_ADDR
// end ;
66928: LD_VAR 0 1
66932: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66933: LD_INT 0
66935: PPUSH
66936: PPUSH
66937: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66938: LD_ADDR_VAR 0 6
66942: PUSH
66943: LD_VAR 0 1
66947: PUSH
66948: LD_VAR 0 3
66952: PLUS
66953: PUSH
66954: LD_INT 2
66956: DIV
66957: ST_TO_ADDR
// if _x < 0 then
66958: LD_VAR 0 6
66962: PUSH
66963: LD_INT 0
66965: LESS
66966: IFFALSE 66983
// _x := _x * - 1 ;
66968: LD_ADDR_VAR 0 6
66972: PUSH
66973: LD_VAR 0 6
66977: PUSH
66978: LD_INT 1
66980: NEG
66981: MUL
66982: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66983: LD_ADDR_VAR 0 7
66987: PUSH
66988: LD_VAR 0 2
66992: PUSH
66993: LD_VAR 0 4
66997: PLUS
66998: PUSH
66999: LD_INT 2
67001: DIV
67002: ST_TO_ADDR
// if _y < 0 then
67003: LD_VAR 0 7
67007: PUSH
67008: LD_INT 0
67010: LESS
67011: IFFALSE 67028
// _y := _y * - 1 ;
67013: LD_ADDR_VAR 0 7
67017: PUSH
67018: LD_VAR 0 7
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: MUL
67027: ST_TO_ADDR
// result := [ _x , _y ] ;
67028: LD_ADDR_VAR 0 5
67032: PUSH
67033: LD_VAR 0 6
67037: PUSH
67038: LD_VAR 0 7
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: ST_TO_ADDR
// end ;
67047: LD_VAR 0 5
67051: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67052: LD_INT 0
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
// task := GetTaskList ( unit ) ;
67058: LD_ADDR_VAR 0 7
67062: PUSH
67063: LD_VAR 0 1
67067: PPUSH
67068: CALL_OW 437
67072: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67073: LD_VAR 0 7
67077: NOT
67078: PUSH
67079: LD_VAR 0 1
67083: PPUSH
67084: LD_VAR 0 2
67088: PPUSH
67089: CALL_OW 308
67093: NOT
67094: AND
67095: IFFALSE 67099
// exit ;
67097: GO 67217
// if IsInArea ( unit , area ) then
67099: LD_VAR 0 1
67103: PPUSH
67104: LD_VAR 0 2
67108: PPUSH
67109: CALL_OW 308
67113: IFFALSE 67131
// begin ComMoveToArea ( unit , goAway ) ;
67115: LD_VAR 0 1
67119: PPUSH
67120: LD_VAR 0 3
67124: PPUSH
67125: CALL_OW 113
// exit ;
67129: GO 67217
// end ; if task [ 1 ] [ 1 ] <> M then
67131: LD_VAR 0 7
67135: PUSH
67136: LD_INT 1
67138: ARRAY
67139: PUSH
67140: LD_INT 1
67142: ARRAY
67143: PUSH
67144: LD_STRING M
67146: NONEQUAL
67147: IFFALSE 67151
// exit ;
67149: GO 67217
// x := task [ 1 ] [ 2 ] ;
67151: LD_ADDR_VAR 0 5
67155: PUSH
67156: LD_VAR 0 7
67160: PUSH
67161: LD_INT 1
67163: ARRAY
67164: PUSH
67165: LD_INT 2
67167: ARRAY
67168: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67169: LD_ADDR_VAR 0 6
67173: PUSH
67174: LD_VAR 0 7
67178: PUSH
67179: LD_INT 1
67181: ARRAY
67182: PUSH
67183: LD_INT 3
67185: ARRAY
67186: ST_TO_ADDR
// if InArea ( x , y , area ) then
67187: LD_VAR 0 5
67191: PPUSH
67192: LD_VAR 0 6
67196: PPUSH
67197: LD_VAR 0 2
67201: PPUSH
67202: CALL_OW 309
67206: IFFALSE 67217
// ComStop ( unit ) ;
67208: LD_VAR 0 1
67212: PPUSH
67213: CALL_OW 141
// end ;
67217: LD_VAR 0 4
67221: RET
// export function Abs ( value ) ; begin
67222: LD_INT 0
67224: PPUSH
// result := value ;
67225: LD_ADDR_VAR 0 2
67229: PUSH
67230: LD_VAR 0 1
67234: ST_TO_ADDR
// if value < 0 then
67235: LD_VAR 0 1
67239: PUSH
67240: LD_INT 0
67242: LESS
67243: IFFALSE 67260
// result := value * - 1 ;
67245: LD_ADDR_VAR 0 2
67249: PUSH
67250: LD_VAR 0 1
67254: PUSH
67255: LD_INT 1
67257: NEG
67258: MUL
67259: ST_TO_ADDR
// end ;
67260: LD_VAR 0 2
67264: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67265: LD_INT 0
67267: PPUSH
67268: PPUSH
67269: PPUSH
67270: PPUSH
67271: PPUSH
67272: PPUSH
67273: PPUSH
67274: PPUSH
// if not unit or not building then
67275: LD_VAR 0 1
67279: NOT
67280: PUSH
67281: LD_VAR 0 2
67285: NOT
67286: OR
67287: IFFALSE 67291
// exit ;
67289: GO 67517
// x := GetX ( building ) ;
67291: LD_ADDR_VAR 0 4
67295: PUSH
67296: LD_VAR 0 2
67300: PPUSH
67301: CALL_OW 250
67305: ST_TO_ADDR
// y := GetY ( building ) ;
67306: LD_ADDR_VAR 0 6
67310: PUSH
67311: LD_VAR 0 2
67315: PPUSH
67316: CALL_OW 251
67320: ST_TO_ADDR
// d := GetDir ( building ) ;
67321: LD_ADDR_VAR 0 8
67325: PUSH
67326: LD_VAR 0 2
67330: PPUSH
67331: CALL_OW 254
67335: ST_TO_ADDR
// r := 4 ;
67336: LD_ADDR_VAR 0 9
67340: PUSH
67341: LD_INT 4
67343: ST_TO_ADDR
// for i := 1 to 5 do
67344: LD_ADDR_VAR 0 10
67348: PUSH
67349: DOUBLE
67350: LD_INT 1
67352: DEC
67353: ST_TO_ADDR
67354: LD_INT 5
67356: PUSH
67357: FOR_TO
67358: IFFALSE 67515
// begin _x := ShiftX ( x , d , r + i ) ;
67360: LD_ADDR_VAR 0 5
67364: PUSH
67365: LD_VAR 0 4
67369: PPUSH
67370: LD_VAR 0 8
67374: PPUSH
67375: LD_VAR 0 9
67379: PUSH
67380: LD_VAR 0 10
67384: PLUS
67385: PPUSH
67386: CALL_OW 272
67390: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67391: LD_ADDR_VAR 0 7
67395: PUSH
67396: LD_VAR 0 6
67400: PPUSH
67401: LD_VAR 0 8
67405: PPUSH
67406: LD_VAR 0 9
67410: PUSH
67411: LD_VAR 0 10
67415: PLUS
67416: PPUSH
67417: CALL_OW 273
67421: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67422: LD_VAR 0 5
67426: PPUSH
67427: LD_VAR 0 7
67431: PPUSH
67432: CALL_OW 488
67436: PUSH
67437: LD_VAR 0 5
67441: PPUSH
67442: LD_VAR 0 7
67446: PPUSH
67447: CALL_OW 428
67451: PPUSH
67452: CALL_OW 247
67456: PUSH
67457: LD_INT 3
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: IN
67467: NOT
67468: AND
67469: IFFALSE 67513
// begin ComMoveXY ( unit , _x , _y ) ;
67471: LD_VAR 0 1
67475: PPUSH
67476: LD_VAR 0 5
67480: PPUSH
67481: LD_VAR 0 7
67485: PPUSH
67486: CALL_OW 111
// result := [ _x , _y ] ;
67490: LD_ADDR_VAR 0 3
67494: PUSH
67495: LD_VAR 0 5
67499: PUSH
67500: LD_VAR 0 7
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: ST_TO_ADDR
// exit ;
67509: POP
67510: POP
67511: GO 67517
// end ; end ;
67513: GO 67357
67515: POP
67516: POP
// end ;
67517: LD_VAR 0 3
67521: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67522: LD_INT 0
67524: PPUSH
67525: PPUSH
67526: PPUSH
// result := 0 ;
67527: LD_ADDR_VAR 0 3
67531: PUSH
67532: LD_INT 0
67534: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67535: LD_VAR 0 1
67539: PUSH
67540: LD_INT 0
67542: LESS
67543: PUSH
67544: LD_VAR 0 1
67548: PUSH
67549: LD_INT 8
67551: GREATER
67552: OR
67553: PUSH
67554: LD_VAR 0 2
67558: PUSH
67559: LD_INT 0
67561: LESS
67562: OR
67563: PUSH
67564: LD_VAR 0 2
67568: PUSH
67569: LD_INT 8
67571: GREATER
67572: OR
67573: IFFALSE 67577
// exit ;
67575: GO 67652
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67577: LD_ADDR_VAR 0 4
67581: PUSH
67582: LD_INT 22
67584: PUSH
67585: LD_VAR 0 2
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PPUSH
67594: CALL_OW 69
67598: PUSH
67599: FOR_IN
67600: IFFALSE 67650
// begin un := UnitShoot ( i ) ;
67602: LD_ADDR_VAR 0 5
67606: PUSH
67607: LD_VAR 0 4
67611: PPUSH
67612: CALL_OW 504
67616: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67617: LD_VAR 0 5
67621: PPUSH
67622: CALL_OW 255
67626: PUSH
67627: LD_VAR 0 1
67631: EQUAL
67632: IFFALSE 67648
// begin result := un ;
67634: LD_ADDR_VAR 0 3
67638: PUSH
67639: LD_VAR 0 5
67643: ST_TO_ADDR
// exit ;
67644: POP
67645: POP
67646: GO 67652
// end ; end ;
67648: GO 67599
67650: POP
67651: POP
// end ;
67652: LD_VAR 0 3
67656: RET
// export function GetCargoBay ( units ) ; begin
67657: LD_INT 0
67659: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67660: LD_ADDR_VAR 0 2
67664: PUSH
67665: LD_VAR 0 1
67669: PPUSH
67670: LD_INT 2
67672: PUSH
67673: LD_INT 34
67675: PUSH
67676: LD_INT 12
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 34
67685: PUSH
67686: LD_INT 51
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 34
67695: PUSH
67696: LD_INT 32
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 34
67705: PUSH
67706: LD_EXP 96
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: PPUSH
67722: CALL_OW 72
67726: ST_TO_ADDR
// end ;
67727: LD_VAR 0 2
67731: RET
// export function Negate ( value ) ; begin
67732: LD_INT 0
67734: PPUSH
// result := not value ;
67735: LD_ADDR_VAR 0 2
67739: PUSH
67740: LD_VAR 0 1
67744: NOT
67745: ST_TO_ADDR
// end ;
67746: LD_VAR 0 2
67750: RET
// export function Inc ( value ) ; begin
67751: LD_INT 0
67753: PPUSH
// result := value + 1 ;
67754: LD_ADDR_VAR 0 2
67758: PUSH
67759: LD_VAR 0 1
67763: PUSH
67764: LD_INT 1
67766: PLUS
67767: ST_TO_ADDR
// end ;
67768: LD_VAR 0 2
67772: RET
// export function Dec ( value ) ; begin
67773: LD_INT 0
67775: PPUSH
// result := value - 1 ;
67776: LD_ADDR_VAR 0 2
67780: PUSH
67781: LD_VAR 0 1
67785: PUSH
67786: LD_INT 1
67788: MINUS
67789: ST_TO_ADDR
// end ;
67790: LD_VAR 0 2
67794: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67795: LD_INT 0
67797: PPUSH
67798: PPUSH
67799: PPUSH
67800: PPUSH
67801: PPUSH
67802: PPUSH
67803: PPUSH
67804: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67805: LD_VAR 0 1
67809: PPUSH
67810: LD_VAR 0 2
67814: PPUSH
67815: CALL_OW 488
67819: NOT
67820: PUSH
67821: LD_VAR 0 3
67825: PPUSH
67826: LD_VAR 0 4
67830: PPUSH
67831: CALL_OW 488
67835: NOT
67836: OR
67837: IFFALSE 67850
// begin result := - 1 ;
67839: LD_ADDR_VAR 0 5
67843: PUSH
67844: LD_INT 1
67846: NEG
67847: ST_TO_ADDR
// exit ;
67848: GO 68085
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67850: LD_ADDR_VAR 0 12
67854: PUSH
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_VAR 0 2
67864: PPUSH
67865: LD_VAR 0 3
67869: PPUSH
67870: LD_VAR 0 4
67874: PPUSH
67875: CALL 66933 0 4
67879: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67880: LD_ADDR_VAR 0 11
67884: PUSH
67885: LD_VAR 0 1
67889: PPUSH
67890: LD_VAR 0 2
67894: PPUSH
67895: LD_VAR 0 12
67899: PUSH
67900: LD_INT 1
67902: ARRAY
67903: PPUSH
67904: LD_VAR 0 12
67908: PUSH
67909: LD_INT 2
67911: ARRAY
67912: PPUSH
67913: CALL_OW 298
67917: ST_TO_ADDR
// distance := 9999 ;
67918: LD_ADDR_VAR 0 10
67922: PUSH
67923: LD_INT 9999
67925: ST_TO_ADDR
// for i := 0 to 5 do
67926: LD_ADDR_VAR 0 6
67930: PUSH
67931: DOUBLE
67932: LD_INT 0
67934: DEC
67935: ST_TO_ADDR
67936: LD_INT 5
67938: PUSH
67939: FOR_TO
67940: IFFALSE 68083
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67942: LD_ADDR_VAR 0 7
67946: PUSH
67947: LD_VAR 0 1
67951: PPUSH
67952: LD_VAR 0 6
67956: PPUSH
67957: LD_VAR 0 11
67961: PPUSH
67962: CALL_OW 272
67966: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67967: LD_ADDR_VAR 0 8
67971: PUSH
67972: LD_VAR 0 2
67976: PPUSH
67977: LD_VAR 0 6
67981: PPUSH
67982: LD_VAR 0 11
67986: PPUSH
67987: CALL_OW 273
67991: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67992: LD_VAR 0 7
67996: PPUSH
67997: LD_VAR 0 8
68001: PPUSH
68002: CALL_OW 488
68006: NOT
68007: IFFALSE 68011
// continue ;
68009: GO 67939
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68011: LD_ADDR_VAR 0 9
68015: PUSH
68016: LD_VAR 0 12
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PPUSH
68025: LD_VAR 0 12
68029: PUSH
68030: LD_INT 2
68032: ARRAY
68033: PPUSH
68034: LD_VAR 0 7
68038: PPUSH
68039: LD_VAR 0 8
68043: PPUSH
68044: CALL_OW 298
68048: ST_TO_ADDR
// if tmp < distance then
68049: LD_VAR 0 9
68053: PUSH
68054: LD_VAR 0 10
68058: LESS
68059: IFFALSE 68081
// begin result := i ;
68061: LD_ADDR_VAR 0 5
68065: PUSH
68066: LD_VAR 0 6
68070: ST_TO_ADDR
// distance := tmp ;
68071: LD_ADDR_VAR 0 10
68075: PUSH
68076: LD_VAR 0 9
68080: ST_TO_ADDR
// end ; end ;
68081: GO 67939
68083: POP
68084: POP
// end ;
68085: LD_VAR 0 5
68089: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68090: LD_INT 0
68092: PPUSH
68093: PPUSH
// if not driver or not IsInUnit ( driver ) then
68094: LD_VAR 0 1
68098: NOT
68099: PUSH
68100: LD_VAR 0 1
68104: PPUSH
68105: CALL_OW 310
68109: NOT
68110: OR
68111: IFFALSE 68115
// exit ;
68113: GO 68205
// vehicle := IsInUnit ( driver ) ;
68115: LD_ADDR_VAR 0 3
68119: PUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: CALL_OW 310
68129: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68130: LD_VAR 0 1
68134: PPUSH
68135: LD_STRING \
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: PUSH
68165: LD_STRING E
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_VAR 0 3
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: LD_INT 0
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PPUSH
68201: CALL_OW 446
// end ;
68205: LD_VAR 0 2
68209: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68210: LD_INT 0
68212: PPUSH
68213: PPUSH
// if not driver or not IsInUnit ( driver ) then
68214: LD_VAR 0 1
68218: NOT
68219: PUSH
68220: LD_VAR 0 1
68224: PPUSH
68225: CALL_OW 310
68229: NOT
68230: OR
68231: IFFALSE 68235
// exit ;
68233: GO 68325
// vehicle := IsInUnit ( driver ) ;
68235: LD_ADDR_VAR 0 3
68239: PUSH
68240: LD_VAR 0 1
68244: PPUSH
68245: CALL_OW 310
68249: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68250: LD_VAR 0 1
68254: PPUSH
68255: LD_STRING \
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: PUSH
68285: LD_STRING E
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: LD_VAR 0 3
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 0
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PPUSH
68321: CALL_OW 447
// end ;
68325: LD_VAR 0 2
68329: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68330: LD_INT 0
68332: PPUSH
68333: PPUSH
68334: PPUSH
// tmp := [ ] ;
68335: LD_ADDR_VAR 0 5
68339: PUSH
68340: EMPTY
68341: ST_TO_ADDR
// for i in units do
68342: LD_ADDR_VAR 0 4
68346: PUSH
68347: LD_VAR 0 1
68351: PUSH
68352: FOR_IN
68353: IFFALSE 68391
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68355: LD_ADDR_VAR 0 5
68359: PUSH
68360: LD_VAR 0 5
68364: PPUSH
68365: LD_VAR 0 5
68369: PUSH
68370: LD_INT 1
68372: PLUS
68373: PPUSH
68374: LD_VAR 0 4
68378: PPUSH
68379: CALL_OW 256
68383: PPUSH
68384: CALL_OW 2
68388: ST_TO_ADDR
68389: GO 68352
68391: POP
68392: POP
// if not tmp then
68393: LD_VAR 0 5
68397: NOT
68398: IFFALSE 68402
// exit ;
68400: GO 68450
// if asc then
68402: LD_VAR 0 2
68406: IFFALSE 68430
// result := SortListByListAsc ( units , tmp ) else
68408: LD_ADDR_VAR 0 3
68412: PUSH
68413: LD_VAR 0 1
68417: PPUSH
68418: LD_VAR 0 5
68422: PPUSH
68423: CALL_OW 76
68427: ST_TO_ADDR
68428: GO 68450
// result := SortListByListDesc ( units , tmp ) ;
68430: LD_ADDR_VAR 0 3
68434: PUSH
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_VAR 0 5
68444: PPUSH
68445: CALL_OW 77
68449: ST_TO_ADDR
// end ;
68450: LD_VAR 0 3
68454: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68455: LD_INT 0
68457: PPUSH
68458: PPUSH
// task := GetTaskList ( mech ) ;
68459: LD_ADDR_VAR 0 4
68463: PUSH
68464: LD_VAR 0 1
68468: PPUSH
68469: CALL_OW 437
68473: ST_TO_ADDR
// if not task then
68474: LD_VAR 0 4
68478: NOT
68479: IFFALSE 68483
// exit ;
68481: GO 68525
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68483: LD_ADDR_VAR 0 3
68487: PUSH
68488: LD_VAR 0 4
68492: PUSH
68493: LD_INT 1
68495: ARRAY
68496: PUSH
68497: LD_INT 1
68499: ARRAY
68500: PUSH
68501: LD_STRING r
68503: EQUAL
68504: PUSH
68505: LD_VAR 0 4
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: PUSH
68514: LD_INT 4
68516: ARRAY
68517: PUSH
68518: LD_VAR 0 2
68522: EQUAL
68523: AND
68524: ST_TO_ADDR
// end ;
68525: LD_VAR 0 3
68529: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68530: LD_INT 0
68532: PPUSH
// SetDir ( unit , d ) ;
68533: LD_VAR 0 1
68537: PPUSH
68538: LD_VAR 0 4
68542: PPUSH
68543: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68547: LD_VAR 0 1
68551: PPUSH
68552: LD_VAR 0 2
68556: PPUSH
68557: LD_VAR 0 3
68561: PPUSH
68562: LD_VAR 0 5
68566: PPUSH
68567: CALL_OW 48
// end ;
68571: LD_VAR 0 6
68575: RET
// export function ToNaturalNumber ( number ) ; begin
68576: LD_INT 0
68578: PPUSH
// result := number div 1 ;
68579: LD_ADDR_VAR 0 2
68583: PUSH
68584: LD_VAR 0 1
68588: PUSH
68589: LD_INT 1
68591: DIV
68592: ST_TO_ADDR
// if number < 0 then
68593: LD_VAR 0 1
68597: PUSH
68598: LD_INT 0
68600: LESS
68601: IFFALSE 68611
// result := 0 ;
68603: LD_ADDR_VAR 0 2
68607: PUSH
68608: LD_INT 0
68610: ST_TO_ADDR
// end ;
68611: LD_VAR 0 2
68615: RET
// export function SortByClass ( units , class ) ; var un ; begin
68616: LD_INT 0
68618: PPUSH
68619: PPUSH
// if not units or not class then
68620: LD_VAR 0 1
68624: NOT
68625: PUSH
68626: LD_VAR 0 2
68630: NOT
68631: OR
68632: IFFALSE 68636
// exit ;
68634: GO 68731
// result := [ ] ;
68636: LD_ADDR_VAR 0 3
68640: PUSH
68641: EMPTY
68642: ST_TO_ADDR
// for un in units do
68643: LD_ADDR_VAR 0 4
68647: PUSH
68648: LD_VAR 0 1
68652: PUSH
68653: FOR_IN
68654: IFFALSE 68729
// if GetClass ( un ) = class then
68656: LD_VAR 0 4
68660: PPUSH
68661: CALL_OW 257
68665: PUSH
68666: LD_VAR 0 2
68670: EQUAL
68671: IFFALSE 68698
// result := Insert ( result , 1 , un ) else
68673: LD_ADDR_VAR 0 3
68677: PUSH
68678: LD_VAR 0 3
68682: PPUSH
68683: LD_INT 1
68685: PPUSH
68686: LD_VAR 0 4
68690: PPUSH
68691: CALL_OW 2
68695: ST_TO_ADDR
68696: GO 68727
// result := Replace ( result , result + 1 , un ) ;
68698: LD_ADDR_VAR 0 3
68702: PUSH
68703: LD_VAR 0 3
68707: PPUSH
68708: LD_VAR 0 3
68712: PUSH
68713: LD_INT 1
68715: PLUS
68716: PPUSH
68717: LD_VAR 0 4
68721: PPUSH
68722: CALL_OW 1
68726: ST_TO_ADDR
68727: GO 68653
68729: POP
68730: POP
// end ;
68731: LD_VAR 0 3
68735: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68736: LD_INT 0
68738: PPUSH
68739: PPUSH
68740: PPUSH
68741: PPUSH
68742: PPUSH
68743: PPUSH
68744: PPUSH
// result := [ ] ;
68745: LD_ADDR_VAR 0 4
68749: PUSH
68750: EMPTY
68751: ST_TO_ADDR
// if x - r < 0 then
68752: LD_VAR 0 1
68756: PUSH
68757: LD_VAR 0 3
68761: MINUS
68762: PUSH
68763: LD_INT 0
68765: LESS
68766: IFFALSE 68778
// min_x := 0 else
68768: LD_ADDR_VAR 0 8
68772: PUSH
68773: LD_INT 0
68775: ST_TO_ADDR
68776: GO 68794
// min_x := x - r ;
68778: LD_ADDR_VAR 0 8
68782: PUSH
68783: LD_VAR 0 1
68787: PUSH
68788: LD_VAR 0 3
68792: MINUS
68793: ST_TO_ADDR
// if y - r < 0 then
68794: LD_VAR 0 2
68798: PUSH
68799: LD_VAR 0 3
68803: MINUS
68804: PUSH
68805: LD_INT 0
68807: LESS
68808: IFFALSE 68820
// min_y := 0 else
68810: LD_ADDR_VAR 0 7
68814: PUSH
68815: LD_INT 0
68817: ST_TO_ADDR
68818: GO 68836
// min_y := y - r ;
68820: LD_ADDR_VAR 0 7
68824: PUSH
68825: LD_VAR 0 2
68829: PUSH
68830: LD_VAR 0 3
68834: MINUS
68835: ST_TO_ADDR
// max_x := x + r ;
68836: LD_ADDR_VAR 0 9
68840: PUSH
68841: LD_VAR 0 1
68845: PUSH
68846: LD_VAR 0 3
68850: PLUS
68851: ST_TO_ADDR
// max_y := y + r ;
68852: LD_ADDR_VAR 0 10
68856: PUSH
68857: LD_VAR 0 2
68861: PUSH
68862: LD_VAR 0 3
68866: PLUS
68867: ST_TO_ADDR
// for _x = min_x to max_x do
68868: LD_ADDR_VAR 0 5
68872: PUSH
68873: DOUBLE
68874: LD_VAR 0 8
68878: DEC
68879: ST_TO_ADDR
68880: LD_VAR 0 9
68884: PUSH
68885: FOR_TO
68886: IFFALSE 68987
// for _y = min_y to max_y do
68888: LD_ADDR_VAR 0 6
68892: PUSH
68893: DOUBLE
68894: LD_VAR 0 7
68898: DEC
68899: ST_TO_ADDR
68900: LD_VAR 0 10
68904: PUSH
68905: FOR_TO
68906: IFFALSE 68983
// begin if not ValidHex ( _x , _y ) then
68908: LD_VAR 0 5
68912: PPUSH
68913: LD_VAR 0 6
68917: PPUSH
68918: CALL_OW 488
68922: NOT
68923: IFFALSE 68927
// continue ;
68925: GO 68905
// if GetResourceTypeXY ( _x , _y ) then
68927: LD_VAR 0 5
68931: PPUSH
68932: LD_VAR 0 6
68936: PPUSH
68937: CALL_OW 283
68941: IFFALSE 68981
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68943: LD_ADDR_VAR 0 4
68947: PUSH
68948: LD_VAR 0 4
68952: PPUSH
68953: LD_VAR 0 4
68957: PUSH
68958: LD_INT 1
68960: PLUS
68961: PPUSH
68962: LD_VAR 0 5
68966: PUSH
68967: LD_VAR 0 6
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PPUSH
68976: CALL_OW 1
68980: ST_TO_ADDR
// end ;
68981: GO 68905
68983: POP
68984: POP
68985: GO 68885
68987: POP
68988: POP
// end ;
68989: LD_VAR 0 4
68993: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68994: LD_INT 0
68996: PPUSH
68997: PPUSH
68998: PPUSH
68999: PPUSH
69000: PPUSH
69001: PPUSH
69002: PPUSH
69003: PPUSH
// if not units then
69004: LD_VAR 0 1
69008: NOT
69009: IFFALSE 69013
// exit ;
69011: GO 69438
// result := UnitFilter ( units , [ f_ok ] ) ;
69013: LD_ADDR_VAR 0 3
69017: PUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: LD_INT 50
69025: PUSH
69026: EMPTY
69027: LIST
69028: PPUSH
69029: CALL_OW 72
69033: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69034: LD_ADDR_VAR 0 8
69038: PUSH
69039: LD_VAR 0 1
69043: PUSH
69044: LD_INT 1
69046: ARRAY
69047: PPUSH
69048: CALL_OW 255
69052: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69053: LD_ADDR_VAR 0 10
69057: PUSH
69058: LD_INT 29
69060: PUSH
69061: LD_EXP 99
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: ST_TO_ADDR
// if not result then
69070: LD_VAR 0 3
69074: NOT
69075: IFFALSE 69079
// exit ;
69077: GO 69438
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69079: LD_ADDR_VAR 0 5
69083: PUSH
69084: LD_INT 81
69086: PUSH
69087: LD_VAR 0 8
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PPUSH
69096: CALL_OW 69
69100: ST_TO_ADDR
// for i in result do
69101: LD_ADDR_VAR 0 4
69105: PUSH
69106: LD_VAR 0 3
69110: PUSH
69111: FOR_IN
69112: IFFALSE 69436
// begin tag := GetTag ( i ) + 1 ;
69114: LD_ADDR_VAR 0 9
69118: PUSH
69119: LD_VAR 0 4
69123: PPUSH
69124: CALL_OW 110
69128: PUSH
69129: LD_INT 1
69131: PLUS
69132: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69133: LD_ADDR_VAR 0 7
69137: PUSH
69138: LD_VAR 0 4
69142: PPUSH
69143: CALL_OW 250
69147: PPUSH
69148: LD_VAR 0 4
69152: PPUSH
69153: CALL_OW 251
69157: PPUSH
69158: LD_INT 6
69160: PPUSH
69161: CALL 68736 0 3
69165: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69166: LD_VAR 0 7
69170: PUSH
69171: LD_VAR 0 4
69175: PPUSH
69176: CALL_OW 264
69180: PUSH
69181: LD_VAR 0 10
69185: IN
69186: NOT
69187: AND
69188: IFFALSE 69227
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69190: LD_VAR 0 4
69194: PPUSH
69195: LD_VAR 0 7
69199: PUSH
69200: LD_INT 1
69202: ARRAY
69203: PUSH
69204: LD_INT 1
69206: ARRAY
69207: PPUSH
69208: LD_VAR 0 7
69212: PUSH
69213: LD_INT 1
69215: ARRAY
69216: PUSH
69217: LD_INT 2
69219: ARRAY
69220: PPUSH
69221: CALL_OW 116
69225: GO 69434
// if path > tag then
69227: LD_VAR 0 2
69231: PUSH
69232: LD_VAR 0 9
69236: GREATER
69237: IFFALSE 69404
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69239: LD_ADDR_VAR 0 6
69243: PUSH
69244: LD_VAR 0 5
69248: PPUSH
69249: LD_INT 91
69251: PUSH
69252: LD_VAR 0 4
69256: PUSH
69257: LD_INT 12
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: LIST
69264: PPUSH
69265: CALL_OW 72
69269: ST_TO_ADDR
// if nearEnemy then
69270: LD_VAR 0 6
69274: IFFALSE 69302
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69276: LD_VAR 0 4
69280: PPUSH
69281: LD_VAR 0 6
69285: PPUSH
69286: LD_VAR 0 4
69290: PPUSH
69291: CALL_OW 74
69295: PPUSH
69296: CALL_OW 115
69300: GO 69402
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69302: LD_VAR 0 4
69306: PPUSH
69307: LD_VAR 0 2
69311: PUSH
69312: LD_VAR 0 9
69316: ARRAY
69317: PUSH
69318: LD_INT 1
69320: ARRAY
69321: PPUSH
69322: LD_VAR 0 2
69326: PUSH
69327: LD_VAR 0 9
69331: ARRAY
69332: PUSH
69333: LD_INT 2
69335: ARRAY
69336: PPUSH
69337: CALL_OW 297
69341: PUSH
69342: LD_INT 6
69344: GREATER
69345: IFFALSE 69388
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69347: LD_VAR 0 4
69351: PPUSH
69352: LD_VAR 0 2
69356: PUSH
69357: LD_VAR 0 9
69361: ARRAY
69362: PUSH
69363: LD_INT 1
69365: ARRAY
69366: PPUSH
69367: LD_VAR 0 2
69371: PUSH
69372: LD_VAR 0 9
69376: ARRAY
69377: PUSH
69378: LD_INT 2
69380: ARRAY
69381: PPUSH
69382: CALL_OW 114
69386: GO 69402
// SetTag ( i , tag ) ;
69388: LD_VAR 0 4
69392: PPUSH
69393: LD_VAR 0 9
69397: PPUSH
69398: CALL_OW 109
// end else
69402: GO 69434
// if enemy then
69404: LD_VAR 0 5
69408: IFFALSE 69434
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69410: LD_VAR 0 4
69414: PPUSH
69415: LD_VAR 0 5
69419: PPUSH
69420: LD_VAR 0 4
69424: PPUSH
69425: CALL_OW 74
69429: PPUSH
69430: CALL_OW 115
// end ;
69434: GO 69111
69436: POP
69437: POP
// end ;
69438: LD_VAR 0 3
69442: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69443: LD_INT 0
69445: PPUSH
69446: PPUSH
69447: PPUSH
// if not unit or IsInUnit ( unit ) then
69448: LD_VAR 0 1
69452: NOT
69453: PUSH
69454: LD_VAR 0 1
69458: PPUSH
69459: CALL_OW 310
69463: OR
69464: IFFALSE 69468
// exit ;
69466: GO 69559
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69468: LD_ADDR_VAR 0 4
69472: PUSH
69473: LD_VAR 0 1
69477: PPUSH
69478: CALL_OW 250
69482: PPUSH
69483: LD_VAR 0 2
69487: PPUSH
69488: LD_INT 1
69490: PPUSH
69491: CALL_OW 272
69495: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69496: LD_ADDR_VAR 0 5
69500: PUSH
69501: LD_VAR 0 1
69505: PPUSH
69506: CALL_OW 251
69510: PPUSH
69511: LD_VAR 0 2
69515: PPUSH
69516: LD_INT 1
69518: PPUSH
69519: CALL_OW 273
69523: ST_TO_ADDR
// if ValidHex ( x , y ) then
69524: LD_VAR 0 4
69528: PPUSH
69529: LD_VAR 0 5
69533: PPUSH
69534: CALL_OW 488
69538: IFFALSE 69559
// ComTurnXY ( unit , x , y ) ;
69540: LD_VAR 0 1
69544: PPUSH
69545: LD_VAR 0 4
69549: PPUSH
69550: LD_VAR 0 5
69554: PPUSH
69555: CALL_OW 118
// end ;
69559: LD_VAR 0 3
69563: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69564: LD_INT 0
69566: PPUSH
69567: PPUSH
// result := false ;
69568: LD_ADDR_VAR 0 3
69572: PUSH
69573: LD_INT 0
69575: ST_TO_ADDR
// if not units then
69576: LD_VAR 0 2
69580: NOT
69581: IFFALSE 69585
// exit ;
69583: GO 69630
// for i in units do
69585: LD_ADDR_VAR 0 4
69589: PUSH
69590: LD_VAR 0 2
69594: PUSH
69595: FOR_IN
69596: IFFALSE 69628
// if See ( side , i ) then
69598: LD_VAR 0 1
69602: PPUSH
69603: LD_VAR 0 4
69607: PPUSH
69608: CALL_OW 292
69612: IFFALSE 69626
// begin result := true ;
69614: LD_ADDR_VAR 0 3
69618: PUSH
69619: LD_INT 1
69621: ST_TO_ADDR
// exit ;
69622: POP
69623: POP
69624: GO 69630
// end ;
69626: GO 69595
69628: POP
69629: POP
// end ;
69630: LD_VAR 0 3
69634: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69635: LD_INT 0
69637: PPUSH
69638: PPUSH
69639: PPUSH
69640: PPUSH
// if not unit or not points then
69641: LD_VAR 0 1
69645: NOT
69646: PUSH
69647: LD_VAR 0 2
69651: NOT
69652: OR
69653: IFFALSE 69657
// exit ;
69655: GO 69747
// dist := 99999 ;
69657: LD_ADDR_VAR 0 5
69661: PUSH
69662: LD_INT 99999
69664: ST_TO_ADDR
// for i in points do
69665: LD_ADDR_VAR 0 4
69669: PUSH
69670: LD_VAR 0 2
69674: PUSH
69675: FOR_IN
69676: IFFALSE 69745
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69678: LD_ADDR_VAR 0 6
69682: PUSH
69683: LD_VAR 0 1
69687: PPUSH
69688: LD_VAR 0 4
69692: PUSH
69693: LD_INT 1
69695: ARRAY
69696: PPUSH
69697: LD_VAR 0 4
69701: PUSH
69702: LD_INT 2
69704: ARRAY
69705: PPUSH
69706: CALL_OW 297
69710: ST_TO_ADDR
// if tmpDist < dist then
69711: LD_VAR 0 6
69715: PUSH
69716: LD_VAR 0 5
69720: LESS
69721: IFFALSE 69743
// begin result := i ;
69723: LD_ADDR_VAR 0 3
69727: PUSH
69728: LD_VAR 0 4
69732: ST_TO_ADDR
// dist := tmpDist ;
69733: LD_ADDR_VAR 0 5
69737: PUSH
69738: LD_VAR 0 6
69742: ST_TO_ADDR
// end ; end ;
69743: GO 69675
69745: POP
69746: POP
// end ; end_of_file
69747: LD_VAR 0 3
69751: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
69752: LD_INT 0
69754: PPUSH
// ar_miner := 81 ;
69755: LD_ADDR_EXP 102
69759: PUSH
69760: LD_INT 81
69762: ST_TO_ADDR
// ar_crane := 88 ;
69763: LD_ADDR_EXP 101
69767: PUSH
69768: LD_INT 88
69770: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
69771: LD_ADDR_EXP 96
69775: PUSH
69776: LD_INT 89
69778: ST_TO_ADDR
// us_hack := 99 ;
69779: LD_ADDR_EXP 97
69783: PUSH
69784: LD_INT 99
69786: ST_TO_ADDR
// us_artillery := 97 ;
69787: LD_ADDR_EXP 98
69791: PUSH
69792: LD_INT 97
69794: ST_TO_ADDR
// ar_bio_bomb := 91 ;
69795: LD_ADDR_EXP 99
69799: PUSH
69800: LD_INT 91
69802: ST_TO_ADDR
// ar_mortar := 92 ;
69803: LD_ADDR_EXP 100
69807: PUSH
69808: LD_INT 92
69810: ST_TO_ADDR
// ru_radar := 98 ;
69811: LD_ADDR_EXP 95
69815: PUSH
69816: LD_INT 98
69818: ST_TO_ADDR
// tech_Artillery := 80 ;
69819: LD_ADDR_EXP 103
69823: PUSH
69824: LD_INT 80
69826: ST_TO_ADDR
// tech_RadMat := 81 ;
69827: LD_ADDR_EXP 104
69831: PUSH
69832: LD_INT 81
69834: ST_TO_ADDR
// tech_BasicTools := 82 ;
69835: LD_ADDR_EXP 105
69839: PUSH
69840: LD_INT 82
69842: ST_TO_ADDR
// tech_Cargo := 83 ;
69843: LD_ADDR_EXP 106
69847: PUSH
69848: LD_INT 83
69850: ST_TO_ADDR
// tech_Track := 84 ;
69851: LD_ADDR_EXP 107
69855: PUSH
69856: LD_INT 84
69858: ST_TO_ADDR
// tech_Crane := 85 ;
69859: LD_ADDR_EXP 108
69863: PUSH
69864: LD_INT 85
69866: ST_TO_ADDR
// tech_Bulldozer := 86 ;
69867: LD_ADDR_EXP 109
69871: PUSH
69872: LD_INT 86
69874: ST_TO_ADDR
// tech_Hovercraft := 87 ;
69875: LD_ADDR_EXP 110
69879: PUSH
69880: LD_INT 87
69882: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
69883: LD_ADDR_EXP 111
69887: PUSH
69888: LD_INT 88
69890: ST_TO_ADDR
// class_mastodont := 31 ;
69891: LD_ADDR_EXP 112
69895: PUSH
69896: LD_INT 31
69898: ST_TO_ADDR
// class_horse := 21 ;
69899: LD_ADDR_EXP 113
69903: PUSH
69904: LD_INT 21
69906: ST_TO_ADDR
// end ;
69907: LD_VAR 0 1
69911: RET
// every 1 do
69912: GO 69914
69914: DISABLE
// InitGlobalVariables ; end_of_file
69915: CALL 69752 0 0
69919: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69920: LD_VAR 0 1
69924: PUSH
69925: LD_INT 200
69927: DOUBLE
69928: GREATEREQUAL
69929: IFFALSE 69937
69931: LD_INT 299
69933: DOUBLE
69934: LESSEQUAL
69935: IFTRUE 69939
69937: GO 69971
69939: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69940: LD_VAR 0 1
69944: PPUSH
69945: LD_VAR 0 2
69949: PPUSH
69950: LD_VAR 0 3
69954: PPUSH
69955: LD_VAR 0 4
69959: PPUSH
69960: LD_VAR 0 5
69964: PPUSH
69965: CALL 11070 0 5
69969: GO 70048
69971: LD_INT 300
69973: DOUBLE
69974: GREATEREQUAL
69975: IFFALSE 69983
69977: LD_INT 399
69979: DOUBLE
69980: LESSEQUAL
69981: IFTRUE 69985
69983: GO 70047
69985: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69986: LD_VAR 0 1
69990: PPUSH
69991: LD_VAR 0 2
69995: PPUSH
69996: LD_VAR 0 3
70000: PPUSH
70001: LD_VAR 0 4
70005: PPUSH
70006: LD_VAR 0 5
70010: PPUSH
70011: LD_VAR 0 6
70015: PPUSH
70016: LD_VAR 0 7
70020: PPUSH
70021: LD_VAR 0 8
70025: PPUSH
70026: LD_VAR 0 9
70030: PPUSH
70031: LD_VAR 0 10
70035: PPUSH
70036: LD_VAR 0 11
70040: PPUSH
70041: CALL 27681 0 11
70045: GO 70048
70047: POP
// end ;
70048: PPOPN 11
70050: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70051: LD_VAR 0 1
70055: PPUSH
70056: LD_VAR 0 2
70060: PPUSH
70061: LD_VAR 0 3
70065: PPUSH
70066: LD_VAR 0 4
70070: PPUSH
70071: LD_VAR 0 5
70075: PPUSH
70076: CALL 10806 0 5
// end ; end_of_file
70080: PPOPN 5
70082: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70083: LD_VAR 0 1
70087: PPUSH
70088: LD_VAR 0 2
70092: PPUSH
70093: LD_VAR 0 3
70097: PPUSH
70098: LD_VAR 0 4
70102: PPUSH
70103: LD_VAR 0 5
70107: PPUSH
70108: LD_VAR 0 6
70112: PPUSH
70113: CALL 15374 0 6
// end ;
70117: PPOPN 6
70119: END
