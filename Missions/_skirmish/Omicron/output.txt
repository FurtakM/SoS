// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 65620 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7093 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 31241 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 36081 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 36081 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 69468 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 31241 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 31241 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 31241 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 36081 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 31241 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 69468 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 36081 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 69468 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 72287 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 7
4706: PUSH
4707: LD_INT 12
4709: PUSH
4710: LD_INT 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: LESS
4724: IFFALSE 4798
// begin uc_side := 3 ;
4726: LD_ADDR_OWVAR 20
4730: PUSH
4731: LD_INT 3
4733: ST_TO_ADDR
// uc_nation := 3 ;
4734: LD_ADDR_OWVAR 21
4738: PUSH
4739: LD_INT 3
4741: ST_TO_ADDR
// ResetHc ;
4742: CALL 69468 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_INT 143
4793: PPUSH
4794: CALL_OW 52
// end ; if type = 1 then
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4829
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4808: LD_INT 143
4810: PPUSH
4811: LD_INT 21
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 51
4822: PPUSH
4823: CALL_OW 185
4827: GO 4908
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4829: LD_INT 143
4831: PPUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 23
4840: PUSH
4841: LD_INT 24
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_INT 44
4876: PUSH
4877: LD_INT 44
4879: PUSH
4880: LD_INT 43
4882: PUSH
4883: LD_INT 42
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: PPUSH
4904: CALL_OW 185
// end ;
4908: LD_VAR 0 2
4912: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4913: LD_EXP 8
4917: IFFALSE 5119
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4926: LD_EXP 25
4930: PPUSH
4931: LD_INT 79
4933: PPUSH
4934: LD_INT 155
4936: PPUSH
4937: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4941: LD_EXP 25
4945: PPUSH
4946: LD_INT 4
4948: PPUSH
4949: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_EXP 24
4962: PPUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PPUSH
4969: CALL_OW 72
4973: ST_TO_ADDR
// for i in tmp do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_VAR 0 2
4983: PUSH
4984: FOR_IN
4985: IFFALSE 5019
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_INT 123
4994: PPUSH
4995: LD_INT 60
4997: PPUSH
4998: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: LD_INT 153
5009: PPUSH
5010: LD_INT 103
5012: PPUSH
5013: CALL_OW 174
// end ;
5017: GO 4984
5019: POP
5020: POP
// repeat wait ( 0 0$1 ) ;
5021: LD_INT 35
5023: PPUSH
5024: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_EXP 24
5037: PPUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PPUSH
5044: CALL_OW 72
5048: ST_TO_ADDR
// for i in tmp do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 2
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5110
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 81
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 74
5103: PPUSH
5104: CALL_OW 115
5108: GO 5059
5110: POP
5111: POP
5112: LD_VAR 0 2
5116: NOT
5117: IFFALSE 5021
// end ;
5119: PPOPN 2
5121: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5122: LD_INT 5
5124: PPUSH
5125: LD_INT 81
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: IFFALSE 5152
5141: GO 5143
5143: DISABLE
// russianAlert := true ;
5144: LD_ADDR_EXP 5
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
5152: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5153: LD_INT 106
5155: PPUSH
5156: CALL_OW 302
5160: PUSH
5161: LD_INT 106
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: LD_INT 3
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_INT 106
5176: PPUSH
5177: CALL_OW 274
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 275
5189: PUSH
5190: LD_INT 100
5192: LESS
5193: AND
5194: IFFALSE 5218
5196: GO 5198
5198: DISABLE
// begin enable ;
5199: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 200
5213: PPUSH
5214: CALL_OW 276
// end ;
5218: END
// every 0 0$1 do var i , un , tmp ;
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
// begin uc_side := 3 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 3
5234: ST_TO_ADDR
// uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// tmp := [ ] ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to 2 do
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 2
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5341
// begin PrepareHuman ( false , 2 , 2 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: CALL_OW 380
// un := CreateHuman ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: CALL_OW 44
5288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 74
5325: PPUSH
5326: LD_INT 112
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 0
5334: PPUSH
5335: CALL_OW 50
// end ;
5339: GO 5263
5341: POP
5342: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5343: LD_INT 112
5345: PPUSH
5346: CALL_OW 274
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: LD_INT 100
5356: PPUSH
5357: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i in tmp do
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_IN
5379: IFFALSE 5461
// begin if IsDead ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 301
5390: IFFALSE 5408
// tmp := tmp diff i ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 3
5401: PUSH
5402: LD_VAR 0 1
5406: DIFF
5407: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 314
5417: NOT
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 281
5428: NOT
5429: AND
5430: IFFALSE 5459
// begin ComTransport ( i , kagan , mat_oil ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 112
5439: PPUSH
5440: LD_INT 2
5442: PPUSH
5443: CALL_OW 151
// AddComGive ( i , beria ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_INT 106
5454: PPUSH
5455: CALL_OW 221
// end ; end ;
5459: GO 5378
5461: POP
5462: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5463: LD_VAR 0 3
5467: NOT
5468: PUSH
5469: LD_INT 112
5471: PPUSH
5472: CALL_OW 301
5476: OR
5477: PUSH
5478: LD_INT 106
5480: PPUSH
5481: CALL_OW 301
5485: OR
5486: IFFALSE 5361
// end ;
5488: PPOPN 3
5490: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
// begin enable ;
5501: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 22
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 51
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: LD_INT 600
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5547: LD_ADDR_VAR 0 5
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 9
5606: PPUSH
5607: CALL_OW 435
5611: ST_TO_ADDR
// if not cargo or not skr or not dep then
5612: LD_VAR 0 4
5616: NOT
5617: PUSH
5618: LD_VAR 0 3
5622: NOT
5623: OR
5624: PUSH
5625: LD_VAR 0 5
5629: NOT
5630: OR
5631: IFFALSE 5635
// exit ;
5633: GO 5799
// for i in cargo do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 4
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5797
// begin if not skr then
5648: LD_VAR 0 3
5652: NOT
5653: IFFALSE 5659
// exit ;
5655: POP
5656: POP
5657: GO 5799
// if not HasTask ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 314
5668: NOT
5669: IFFALSE 5738
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: CALL_OW 117
// for j := 1 to 2 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 2
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5734
// skr := Delete ( skr , 1 ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
5732: GO 5711
5734: POP
5735: POP
// end else
5736: GO 5795
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 261
5747: PUSH
5748: LD_INT 3
5750: LESS
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 5
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 74
5771: PPUSH
5772: CALL_OW 296
5776: PUSH
5777: LD_INT 6
5779: LESS
5780: AND
5781: IFFALSE 5795
// SetFuel ( i , 100 ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_INT 100
5790: PPUSH
5791: CALL_OW 240
// end ;
5795: GO 5645
5797: POP
5798: POP
// end ;
5799: PPOPN 5
5801: END
// export function SendSupport ; var i , un ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// uc_nation := 3 ;
5807: LD_ADDR_OWVAR 21
5811: PUSH
5812: LD_INT 3
5814: ST_TO_ADDR
// uc_side := 3 ;
5815: LD_ADDR_OWVAR 20
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// ResetHc ;
5823: CALL 69468 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 3
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_OWVAR 67
5855: ARRAY
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5932
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_OWVAR 67
5870: PPUSH
5871: CALL_OW 380
// un := CreateHuman ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: CALL_OW 44
5884: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 107
5892: PPUSH
5893: LD_INT 95
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_INT 56
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: CALL_OW 114
// AddComHold ( un ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 200
// end ;
5930: GO 5857
5932: POP
5933: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 4
5939: PPUSH
5940: LD_OWVAR 67
5944: PPUSH
5945: CALL_OW 380
// un := CreateHuman ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: LD_INT 107
5966: PPUSH
5967: LD_INT 95
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5980: LD_VAR 0 3
5984: PPUSH
5985: LD_INT 59
5987: PPUSH
5988: LD_INT 25
5990: PPUSH
5991: CALL_OW 111
// if Difficulty > 1 then
5995: LD_OWVAR 67
5999: PUSH
6000: LD_INT 1
6002: GREATER
6003: IFFALSE 6112
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 2
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6110
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_OWVAR 67
6048: PPUSH
6049: CALL_OW 380
// un := CreateHuman ;
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: CALL_OW 44
6062: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 107
6070: PPUSH
6071: LD_INT 95
6073: PPUSH
6074: LD_INT 4
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 45
6091: PPUSH
6092: LD_INT 76
6094: PPUSH
6095: CALL_OW 114
// AddComHold ( un ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 200
// end ;
6108: GO 6035
6110: POP
6111: POP
// end ; end ;
6112: LD_VAR 0 1
6116: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6117: LD_OWVAR 1
6121: PUSH
6122: LD_INT 42000
6124: GREATEREQUAL
6125: PUSH
6126: LD_OWVAR 67
6130: PUSH
6131: LD_INT 1
6133: GREATER
6134: AND
6135: PUSH
6136: LD_EXP 24
6140: PUSH
6141: LD_INT 4
6143: GREATER
6144: AND
6145: PUSH
6146: LD_EXP 8
6150: NOT
6151: AND
6152: IFFALSE 6445
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
// begin enable ;
6163: ENABLE
// tmp := [ ] ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: LD_INT 91
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 47
6188: PUSH
6189: LD_INT 80
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 39
6198: PUSH
6199: LD_INT 67
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: LD_INT 60
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 52
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 1
6264: MINUS
6265: ARRAY
6266: PUSH
6267: FOR_TO
6268: IFFALSE 6419
// begin uc_side := 3 ;
6270: LD_ADDR_OWVAR 20
6274: PUSH
6275: LD_INT 3
6277: ST_TO_ADDR
// uc_nation := 3 ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_INT 3
6285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6286: LD_INT 22
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 42
6297: PUSH
6298: LD_INT 42
6300: PUSH
6301: LD_INT 44
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 3
6316: MOD
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ARRAY
6322: PPUSH
6323: LD_INT 100
6325: PPUSH
6326: CALL 36081 0 5
// un := CreateVehicle ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: CALL_OW 45
6339: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 57
6347: PPUSH
6348: LD_INT 103
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 5
6398: PPUSH
6399: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6403: CALL_OW 44
6407: PPUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: CALL_OW 52
// end ;
6417: GO 6267
6419: POP
6420: POP
// repeat wait ( 0 0$1 ) ;
6421: LD_INT 35
6423: PPUSH
6424: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_VAR 0 4
6437: PPUSH
6438: CALL 71547 0 2
6442: NOT
6443: IFFALSE 6421
// end ;
6445: PPOPN 4
6447: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6448: LD_INT 3
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: IFFALSE 6567
6485: GO 6487
6487: DISABLE
6488: LD_INT 0
6490: PPUSH
// begin enable ;
6491: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6565
// if GetFuel ( i ) < 3 then
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 261
6545: PUSH
6546: LD_INT 3
6548: LESS
6549: IFFALSE 6563
// SetFuel ( i , 3 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 240
6563: GO 6533
6565: POP
6566: POP
// end ; end_of_file
6567: PPOPN 1
6569: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// uc_side := 2 ;
6578: LD_ADDR_OWVAR 20
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// uc_nation := 2 ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_INT 2
6593: ST_TO_ADDR
// InitVc ;
6594: CALL_OW 20
// ResetHc ;
6598: CALL 69468 0 0
// for j := 1 to 2 do
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6840
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_INT 178
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 268
6635: PUSH
6636: LD_INT 121
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_VAR 0 3
6651: ARRAY
6652: ST_TO_ADDR
// for i := 1 to 8 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 8
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6836
// begin uc_side := 2 ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
// uc_nation := 2 ;
6677: LD_ADDR_OWVAR 21
6681: PUSH
6682: LD_INT 2
6684: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6685: LD_INT 14
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 26
6696: PUSH
6697: LD_INT 27
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 99
6718: PPUSH
6719: CALL 36081 0 5
// veh := CreateVehicle ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: CALL_OW 45
6732: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 3
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_VAR 0 6
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6775: LD_INT 0
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: LD_INT 6
6783: PPUSH
6784: CALL_OW 380
// un := CreateHuman ;
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: CALL_OW 44
6797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 186
6819: PPUSH
6820: LD_INT 17
6822: PPUSH
6823: CALL_OW 111
// wait ( 0 0$2 ) ;
6827: LD_INT 70
6829: PPUSH
6830: CALL_OW 67
// end ;
6834: GO 6666
6836: POP
6837: POP
// end ;
6838: GO 6615
6840: POP
6841: POP
// for i := 1 to 10 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 10
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6923
// begin PrepareHuman ( false , 1 , 5 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_INT 5
6866: PPUSH
6867: CALL_OW 380
// un := CreateHuman ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6881: LD_VAR 0 4
6885: PPUSH
6886: LD_INT 178
6888: PPUSH
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 186
6906: PPUSH
6907: LD_INT 17
6909: PPUSH
6910: CALL_OW 111
// wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// end ;
6921: GO 6855
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 1
6929: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 50
6942: PUSH
6943: EMPTY
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: IFFALSE 7090
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin enable ;
6963: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not enemy then
7002: LD_VAR 0 2
7006: NOT
7007: IFFALSE 7029
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 50
7046: PUSH
7047: EMPTY
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PUSH
7059: FOR_IN
7060: IFFALSE 7088
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 74
7081: PPUSH
7082: CALL_OW 115
7086: GO 7059
7088: POP
7089: POP
// end ; end_of_file
7090: PPOPN 2
7092: END
// export function Action ; begin
7093: LD_INT 0
7095: PPUSH
// InGameOn ;
7096: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7100: LD_INT 106
7102: PPUSH
7103: LD_INT 3
7105: PPUSH
7106: CALL_OW 86
// wait ( 0 0$2 ) ;
7110: LD_INT 70
7112: PPUSH
7113: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7117: LD_STRING target1
7119: PPUSH
7120: CALL_OW 337
// InGameOff ;
7124: CALL_OW 9
// SaveForQuickRestart ;
7128: CALL_OW 22
// end ;
7132: LD_VAR 0 1
7136: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7137: LD_INT 64
7139: PPUSH
7140: CALL_OW 301
7144: PUSH
7145: LD_EXP 8
7149: NOT
7150: AND
7151: IFFALSE 7171
7153: GO 7155
7155: DISABLE
// begin omicronFall := true ;
7156: LD_ADDR_EXP 7
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// YouLost ( omi ) ;
7164: LD_STRING omi
7166: PPUSH
7167: CALL_OW 104
// end ;
7171: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7172: LD_INT 4
7174: PPUSH
7175: LD_EXP 14
7179: PPUSH
7180: CALL_OW 292
7184: PUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_EXP 14
7192: PPUSH
7193: CALL_OW 310
7197: PPUSH
7198: CALL_OW 292
7202: OR
7203: PUSH
7204: LD_INT 64
7206: PPUSH
7207: CALL_OW 302
7211: AND
7212: IFFALSE 7765
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 4
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 72
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// for i in tmp do
7276: LD_ADDR_VAR 0 1
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7303
// SetSide ( i , 1 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 235
7301: GO 7286
7303: POP
7304: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7305: LD_EXP 14
7309: PPUSH
7310: LD_INT 37
7312: PPUSH
7313: LD_INT 40
7315: PPUSH
7316: CALL_OW 111
// wait ( 0 0$5 ) ;
7320: LD_INT 175
7322: PPUSH
7323: CALL_OW 67
// ComExit ( Sikorski ) ;
7327: LD_EXP 14
7331: PPUSH
7332: CALL 69341 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_INT 37
7343: PPUSH
7344: LD_INT 40
7346: PPUSH
7347: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7351: LD_EXP 14
7355: PPUSH
7356: CALL_OW 85
// wait ( 0 0$2 ) ;
7360: LD_INT 70
7362: PPUSH
7363: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL 69341 0 1
7381: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 14
7391: PPUSH
7392: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_EXP 14
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 5
7420: LESS
7421: PUSH
7422: LD_EXP 14
7426: PPUSH
7427: CALL_OW 310
7431: NOT
7432: AND
7433: IFFALSE 7396
// ComTurnUnit ( Sikorski , speaker ) ;
7435: LD_EXP 14
7439: PPUSH
7440: LD_VAR 0 3
7444: PPUSH
7445: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_EXP 14
7458: PPUSH
7459: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7463: LD_EXP 14
7467: PPUSH
7468: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7472: LD_EXP 14
7476: PPUSH
7477: LD_STRING DS-1
7479: PPUSH
7480: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_STRING DP-1
7491: PPUSH
7492: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DS-2
7503: PPUSH
7504: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_STRING DP-2
7515: PPUSH
7516: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7520: LD_EXP 14
7524: PPUSH
7525: LD_STRING DS-3
7527: PPUSH
7528: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_STRING DP-3
7539: PPUSH
7540: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7544: LD_EXP 14
7548: PPUSH
7549: LD_STRING DS-4
7551: PPUSH
7552: CALL_OW 88
// wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// if whereHeWas then
7563: LD_VAR 0 4
7567: IFFALSE 7583
// ComEnterUnit ( speaker , whereHeWas ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_VAR 0 4
7578: PPUSH
7579: CALL_OW 120
// ComHold ( Sikorski ) ;
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 140
// wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7599: LD_EXP 15
7603: PPUSH
7604: LD_STRING DR-1
7606: PPUSH
7607: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DS-5
7618: PPUSH
7619: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7623: LD_EXP 15
7627: PPUSH
7628: LD_STRING DR-2
7630: PPUSH
7631: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7635: LD_EXP 14
7639: PPUSH
7640: LD_STRING DS-6
7642: PPUSH
7643: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7647: LD_EXP 15
7651: PPUSH
7652: LD_STRING DR-3
7654: PPUSH
7655: CALL_OW 94
// InGameOff ;
7659: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7663: LD_STRING target2
7665: PPUSH
7666: CALL_OW 337
// sikorskiInOmicron := true ;
7670: LD_ADDR_EXP 9
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7678: LD_INT 70
7680: PPUSH
7681: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_STRING DS-7
7692: PPUSH
7693: CALL_OW 88
// wait ( 3 3$00 ) ;
7697: LD_INT 6300
7699: PPUSH
7700: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7704: LD_EXP 15
7708: PPUSH
7709: LD_STRING DRforce-5
7711: PPUSH
7712: CALL_OW 94
// wait ( 4 4$50 ) ;
7716: LD_INT 10150
7718: PPUSH
7719: CALL_OW 67
// FirstReinforcements ;
7723: CALL 7942 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7727: LD_INT 25200
7729: PPUSH
7730: LD_INT 31500
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7742: LD_EXP 15
7746: PPUSH
7747: LD_STRING DRforce-10
7749: PPUSH
7750: CALL_OW 94
// wait ( 9 9$50 ) ;
7754: LD_INT 20650
7756: PPUSH
7757: CALL_OW 67
// SecondReinforcements ;
7761: CALL 8785 0 0
// end ;
7765: PPOPN 4
7767: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7768: LD_EXP 14
7772: PPUSH
7773: CALL_OW 256
7777: PUSH
7778: LD_INT 1000
7780: LESS
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 101
7807: PUSH
7808: LD_INT 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: AND
7829: IFFALSE 7846
7831: GO 7833
7833: DISABLE
// Say ( Sikorski , DRus ) ;
7834: LD_EXP 14
7838: PPUSH
7839: LD_STRING DRus
7841: PPUSH
7842: CALL_OW 88
7846: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7847: LD_OWVAR 1
7851: PUSH
7852: LD_INT 23100
7854: PUSH
7855: LD_INT 22050
7857: PUSH
7858: LD_INT 20300
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: GREATEREQUAL
7872: IFFALSE 7941
7874: GO 7876
7876: DISABLE
// begin SendSupport ;
7877: CALL 5802 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7881: LD_EXP 24
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: PPUSH
7901: LD_INT 62
7903: PPUSH
7904: LD_INT 22
7906: PPUSH
7907: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7911: LD_EXP 25
7915: PPUSH
7916: LD_INT 69
7918: PPUSH
7919: LD_INT 27
7921: PPUSH
7922: CALL_OW 111
// wait ( 1 1$00 ) ;
7926: LD_INT 2100
7928: PPUSH
7929: CALL_OW 67
// startAttackOnOmicron := true ;
7933: LD_ADDR_EXP 6
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ;
7941: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// uc_side := 4 ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_INT 4
7957: ST_TO_ADDR
// uc_nation := 1 ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// tmp := [ ] ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// ResetHc ;
7973: CALL 69468 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 4
7988: PPUSH
7989: LD_INT 77
7991: PPUSH
7992: CALL 36081 0 5
// un := CreateVehicle ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: CALL_OW 45
8005: ST_TO_ADDR
// tmp := tmp union un ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 4
8015: PUSH
8016: LD_VAR 0 3
8020: UNION
8021: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 106
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8052: LD_INT 0
8054: PPUSH
8055: LD_INT 3
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 380
// un := CreateHuman ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: CALL_OW 44
8074: ST_TO_ADDR
// tmp := tmp union un ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 4
8084: PUSH
8085: LD_VAR 0 3
8089: UNION
8090: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: ARRAY
8110: PPUSH
8111: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 109
8122: PPUSH
8123: LD_INT 9
8125: PPUSH
8126: CALL_OW 111
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 2
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: PUSH
8167: FOR_TO
8168: IFFALSE 8232
// begin PrepareHuman ( false , 1 , 2 ) ;
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 2
8178: PPUSH
8179: CALL_OW 380
// un := CreateHuman ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: CALL_OW 44
8192: ST_TO_ADDR
// tmp := tmp union un ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: LD_VAR 0 3
8207: UNION
8208: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 105
8216: PPUSH
8217: LD_INT 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 50
// end ;
8230: GO 8167
8232: POP
8233: POP
// PrepareHuman ( false , 4 , 2 ) ;
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 380
// un := CreateHuman ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// tmp := tmp union un ;
8257: LD_ADDR_VAR 0 4
8261: PUSH
8262: LD_VAR 0 4
8266: PUSH
8267: LD_VAR 0 3
8271: UNION
8272: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 105
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8294: LD_VAR 0 4
8298: PPUSH
8299: LD_INT 26
8301: PPUSH
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 114
// spotted := false ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8332: LD_INT 35
8334: PPUSH
8335: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1000
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 5
8370: NOT
8371: AND
8372: IFFALSE 8498
// begin spotted := true ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_INT 3
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 1000
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: PUSH
8414: LD_INT 1
8416: ARRAY
8417: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 250
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: CALL_OW 251
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8447: LD_VAR 0 6
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 6
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 12
8470: NEG
8471: PPUSH
8472: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 6
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 84
// end ; for i in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8540
// if not HasTask ( i ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 314
8520: NOT
8521: IFFALSE 8538
// ComAgressiveMove ( i , 26 , 35 ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_INT 26
8530: PPUSH
8531: LD_INT 35
8533: PPUSH
8534: CALL_OW 114
8538: GO 8508
8540: POP
8541: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 50
8549: PUSH
8550: EMPTY
8551: LIST
8552: PPUSH
8553: CALL_OW 72
8557: NOT
8558: IFFALSE 8593
// begin if spotted then
8560: LD_VAR 0 5
8564: IFFALSE 8591
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8566: LD_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 6
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 331
// exit ;
8591: GO 8780
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 91
8600: PUSH
8601: LD_INT 64
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 4
8619: PPUSH
8620: LD_EXP 14
8624: PPUSH
8625: CALL_OW 292
8629: OR
8630: IFFALSE 8332
// omicronSquad := omicronSquad union tmp ;
8632: LD_ADDR_EXP 13
8636: PUSH
8637: LD_EXP 13
8641: PUSH
8642: LD_VAR 0 4
8646: UNION
8647: ST_TO_ADDR
// if spotted then
8648: LD_VAR 0 5
8652: IFFALSE 8679
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8654: LD_VAR 0 6
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 331
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8706
// SetSide ( i , 1 ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 235
8704: GO 8689
8706: POP
8707: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 50
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: IFFALSE 8780
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 26
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: EMPTY
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 72
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_STRING Dcargo
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: LD_VAR 0 1
8784: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// uc_side := 1 ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// uc_nation := 1 ;
8799: LD_ADDR_OWVAR 21
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// ResetHc ;
8807: CALL 69468 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: CALL_OW 380
// un := CreateHuman ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: CALL_OW 44
8833: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8834: LD_INT 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 5
8845: PPUSH
8846: LD_INT 90
8848: PPUSH
8849: CALL 36081 0 5
// veh := CreateVehicle ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 83
8882: PPUSH
8883: LD_INT 154
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_INT 4
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_OWVAR 67
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8989
// begin PrepareHuman ( false , 1 , 3 ) ;
8943: LD_INT 0
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 380
// un := CreateHuman ;
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: CALL_OW 44
8965: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 83
8973: PPUSH
8974: LD_INT 154
8976: PPUSH
8977: LD_INT 10
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 50
// end ;
8987: GO 8940
8989: POP
8990: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 83
9021: PPUSH
9022: LD_INT 154
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_STRING Dhelp
9042: PPUSH
9043: CALL_OW 94
// ResetHc ;
9047: CALL 69468 0 0
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9056: LD_EXP 5
9060: IFFALSE 9202
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_EXP 20
9079: PPUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 54
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// for i := 1 to tmp do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 2
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9200
// begin ComExitBuilding ( tmp [ i ] ) ;
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 3
9187: PUSH
9188: LD_VAR 0 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 180
// end ;
9198: GO 9154
9200: POP
9201: POP
// end ;
9202: PPOPN 3
9204: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9205: LD_EXP 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: AND
9239: IFFALSE 9385
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
9247: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9248: LD_EXP 16
9252: PPUSH
9253: LD_STRING D9a-Kur-1
9255: PPUSH
9256: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9260: LD_EXP 19
9264: PPUSH
9265: LD_STRING D9a-Bur-1
9267: PPUSH
9268: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D9a-Kur-2
9279: PPUSH
9280: CALL_OW 94
// retreatFromOmicron := true ;
9284: LD_ADDR_EXP 8
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_EXP 18
9301: PUSH
9302: LD_EXP 20
9306: PUSH
9307: LD_EXP 21
9311: UNION
9312: PPUSH
9313: LD_INT 3
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 72
9334: UNION
9335: ST_TO_ADDR
// for i in noncombat do
9336: LD_ADDR_VAR 0 1
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9383
// begin if IsInUnit ( i ) then
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 310
9358: IFFALSE 9369
// ComExitBuilding ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 173
// end ;
9381: GO 9346
9383: POP
9384: POP
// end ;
9385: PPOPN 2
9387: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9388: LD_OWVAR 1
9392: PUSH
9393: LD_INT 42000
9395: PPUSH
9396: LD_INT 63000
9398: PPUSH
9399: CALL_OW 12
9403: GREATER
9404: IFFALSE 9549
9406: GO 9408
9408: DISABLE
9409: LD_INT 0
9411: PPUSH
// begin uc_side := 4 ;
9412: LD_ADDR_OWVAR 20
9416: PUSH
9417: LD_INT 4
9419: ST_TO_ADDR
// uc_nation := 4 ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 4
9427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_INT 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 380
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 1
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 161
9466: PPUSH
9467: LD_INT 162
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 50
// ResetHc ;
9480: CALL 69468 0 0
// wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_STRING Dun1
9498: PPUSH
9499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9503: LD_INT 35
9505: PPUSH
9506: CALL_OW 67
// if IsDead ( un ) then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 301
9519: IFFALSE 9523
// exit ;
9521: GO 9549
// until See ( 1 , un ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 292
9535: IFFALSE 9503
// SetSide ( un , 1 ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 1
9551: END
// every 0 0$1 trigger tanksCounter >= 20 do
9552: LD_EXP 12
9556: PUSH
9557: LD_INT 20
9559: GREATEREQUAL
9560: IFFALSE 9572
9562: GO 9564
9564: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9565: LD_STRING ACH_PANZERKNACKER
9567: PPUSH
9568: CALL_OW 543
9572: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9573: LD_OWVAR 1
9577: PUSH
9578: LD_INT 94500
9580: PPUSH
9581: LD_INT 109200
9583: PPUSH
9584: CALL_OW 12
9588: GREATER
9589: IFFALSE 9852
9591: GO 9593
9593: DISABLE
9594: LD_INT 0
9596: PPUSH
// begin PrepareArabian ;
9597: CALL 6570 0 0
// uc_side := 4 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 4
9608: ST_TO_ADDR
// uc_nation := 1 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// ResetHc ;
9617: CALL 69468 0 0
// un := CreateHuman ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: CALL_OW 44
9630: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_STRING ar_come
9638: PPUSH
9639: CALL_OW 94
// wait ( 0 0$20 ) ;
9643: LD_INT 700
9645: PPUSH
9646: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DR-Back
9657: PPUSH
9658: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9662: LD_STRING target3
9664: PPUSH
9665: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9669: LD_INT 10
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9679: LD_INT 35
9681: PPUSH
9682: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9686: LD_EXP 14
9690: PPUSH
9691: LD_INT 10
9693: PPUSH
9694: CALL_OW 308
9698: PUSH
9699: LD_INT 10
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: OR
9717: IFFALSE 9679
// SayRadio ( Harrison , you_win ) ;
9719: LD_EXP 15
9723: PPUSH
9724: LD_STRING you_win
9726: PPUSH
9727: CALL_OW 94
// AddMedal ( med , 1 ) ;
9731: LD_STRING med
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9741: LD_EXP 11
9745: PUSH
9746: LD_INT 27
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_OWVAR 67
9764: ARRAY
9765: GREATER
9766: IFFALSE 9780
// AddMedal ( ru , 1 ) else
9768: LD_STRING ru
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 101
9778: GO 9791
// AddMedal ( ru , - 1 ) ;
9780: LD_STRING ru
9782: PPUSH
9783: LD_INT 1
9785: NEG
9786: PPUSH
9787: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9791: LD_EXP 10
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: LESS
9816: IFFALSE 9830
// AddMedal ( pep , 1 ) else
9818: LD_STRING pep
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 101
9828: GO 9841
// AddMedal ( pep , - 1 ) ;
9830: LD_STRING pep
9832: PPUSH
9833: LD_INT 1
9835: NEG
9836: PPUSH
9837: CALL_OW 101
// GiveMedals ( MAIN ) ;
9841: LD_STRING MAIN
9843: PPUSH
9844: CALL_OW 102
// YouWin ;
9848: CALL_OW 103
// end ; end_of_file
9852: PPOPN 1
9854: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL 10711 0 1
// if un = Sikorski then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 14
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( sik ) ;
9876: LD_STRING sik
9878: PPUSH
9879: CALL_OW 104
// if un in russianOmicronAttackers then
9883: LD_VAR 0 1
9887: PUSH
9888: LD_EXP 24
9892: IN
9893: IFFALSE 9911
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9895: LD_ADDR_EXP 24
9899: PUSH
9900: LD_EXP 24
9904: PUSH
9905: LD_VAR 0 1
9909: DIFF
9910: ST_TO_ADDR
// if un in russianCargo then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_EXP 25
9920: IN
9921: IFFALSE 9939
// russianCargo := russianCargo diff un ;
9923: LD_ADDR_EXP 25
9927: PUSH
9928: LD_EXP 25
9932: PUSH
9933: LD_VAR 0 1
9937: DIFF
9938: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 51
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: IN
9973: IFFALSE 9982
// ProduceNew ( 1 ) ;
9975: LD_INT 1
9977: PPUSH
9978: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: PUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 247
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: AND
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 248
10027: PUSH
10028: LD_INT 1
10030: EQUAL
10031: AND
10032: IFFALSE 10048
// usLoseCounter := usLoseCounter + 1 ;
10034: LD_ADDR_EXP 10
10038: PUSH
10039: LD_EXP 10
10043: PUSH
10044: LD_INT 1
10046: PLUS
10047: ST_TO_ADDR
// end ;
10048: PPOPN 1
10050: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 2
10060: PPUSH
10061: CALL 10831 0 2
// if GetSide ( factory ) <> 3 then
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 3
10077: NONEQUAL
10078: IFFALSE 10082
// exit ;
10080: GO 10144
// if GetWeapon ( veh ) = ru_cargo_bay then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 51
10094: EQUAL
10095: IFFALSE 10099
// exit ;
10097: GO 10144
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 310
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: UNION
10128: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 71
10136: PPUSH
10137: LD_INT 37
10139: PPUSH
10140: CALL_OW 174
// end ;
10144: PPOPN 2
10146: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10147: LD_VAR 0 2
10151: PUSH
10152: LD_EXP 24
10156: IN
10157: IFFALSE 10175
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10159: LD_ADDR_EXP 24
10163: PUSH
10164: LD_EXP 24
10168: PUSH
10169: LD_VAR 0 2
10173: DIFF
10174: ST_TO_ADDR
// if oldId in russianCargo then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_EXP 25
10184: IN
10185: IFFALSE 10203
// russianCargo := russianCargo diff oldId ;
10187: LD_ADDR_EXP 25
10191: PUSH
10192: LD_EXP 25
10196: PUSH
10197: LD_VAR 0 2
10201: DIFF
10202: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10203: LD_VAR 0 1
10207: PUSH
10208: LD_EXP 24
10212: IN
10213: IFFALSE 10231
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10215: LD_ADDR_EXP 24
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_VAR 0 1
10229: DIFF
10230: ST_TO_ADDR
// if newId in russianCargo then
10231: LD_VAR 0 1
10235: PUSH
10236: LD_EXP 25
10240: IN
10241: IFFALSE 10259
// russianCargo := russianCargo diff newId ;
10243: LD_ADDR_EXP 25
10247: PUSH
10248: LD_EXP 25
10252: PUSH
10253: LD_VAR 0 1
10257: DIFF
10258: ST_TO_ADDR
// end ;
10259: PPOPN 4
10261: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: CALL 10807 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10281: LD_VAR 0 2
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: AND
10318: IFFALSE 10334
// ruLoseCounter := ruLoseCounter + 1 ;
10320: LD_ADDR_EXP 11
10324: PUSH
10325: LD_EXP 11
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: IN
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 247
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// tanksCounter := tanksCounter + 1 ;
10388: LD_ADDR_EXP 12
10392: PUSH
10393: LD_EXP 12
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// end ;
10402: PPOPN 3
10404: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10574
// begin ComRepairVehicle ( driver , veh ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 301
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 301
10467: OR
10468: PUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 250
10481: GREATER
10482: OR
10483: IFFALSE 10441
// if GetLives ( veh ) > 250 then
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 250
10497: GREATER
10498: IFFALSE 10574
// begin ComEnterUnit ( driver , veh ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 71
10521: PPUSH
10522: LD_INT 29
10524: PPUSH
10525: CALL_OW 171
// SetTag ( veh , 1 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 109
// if not veh in russianOmicronAttackers then
10541: LD_VAR 0 2
10545: PUSH
10546: LD_EXP 24
10550: IN
10551: NOT
10552: IFFALSE 10574
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10554: LD_ADDR_EXP 24
10558: PUSH
10559: LD_EXP 24
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 68943 0 2
10573: ST_TO_ADDR
// end ; end ; end ;
10574: PPOPN 4
10576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL 10815 0 1
// end ; end_of_file
10586: PPOPN 1
10588: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10589: LD_EXP 9
10593: PUSH
10594: LD_INT 6
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 287
10604: PUSH
10605: LD_INT 18
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: LESS
10625: AND
10626: IFFALSE 10668
10628: GO 10630
10630: DISABLE
// begin enable ;
10631: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10632: LD_INT 350
10634: PPUSH
10635: LD_INT 1050
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10647: LD_INT 2
10649: PPUSH
10650: LD_INT 5
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: LD_INT 6
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 55
// end ;
10668: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10669: LD_INT 7
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 287
10679: PUSH
10680: LD_INT 5
10682: LESS
10683: IFFALSE 10710
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10689: LD_INT 2
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: CALL_OW 12
10699: PPUSH
10700: LD_INT 7
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 55
// end ; end_of_file end_of_file
10710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 264
10726: PUSH
10727: LD_INT 91
10729: EQUAL
10730: IFFALSE 10802
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10732: LD_INT 68
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: IFFALSE 10765
// eff := 70 else
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_INT 70
10762: ST_TO_ADDR
10763: GO 10773
// eff := 30 ;
10765: LD_ADDR_VAR 0 4
10769: PUSH
10770: LD_INT 30
10772: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 250
10782: PPUSH
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 251
10792: PPUSH
10793: LD_VAR 0 4
10797: PPUSH
10798: CALL_OW 495
// end ; end ;
10802: LD_VAR 0 2
10806: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10807: LD_INT 0
10809: PPUSH
// end ;
10810: LD_VAR 0 4
10814: RET
// export function SOS_Command ( cmd ) ; begin
10815: LD_INT 0
10817: PPUSH
// end ;
10818: LD_VAR 0 2
10822: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10823: LD_INT 0
10825: PPUSH
// end ;
10826: LD_VAR 0 6
10830: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// if not vehicle or not factory then
10835: LD_VAR 0 1
10839: NOT
10840: PUSH
10841: LD_VAR 0 2
10845: NOT
10846: OR
10847: IFFALSE 10851
// exit ;
10849: GO 11082
// if factoryWaypoints >= factory then
10851: LD_EXP 95
10855: PUSH
10856: LD_VAR 0 2
10860: GREATEREQUAL
10861: IFFALSE 11082
// if factoryWaypoints [ factory ] then
10863: LD_EXP 95
10867: PUSH
10868: LD_VAR 0 2
10872: ARRAY
10873: IFFALSE 11082
// begin if GetControl ( vehicle ) = control_manual then
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 263
10884: PUSH
10885: LD_INT 1
10887: EQUAL
10888: IFFALSE 10969
// begin driver := IsDrivenBy ( vehicle ) ;
10890: LD_ADDR_VAR 0 4
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 311
10904: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10905: LD_VAR 0 4
10909: PPUSH
10910: LD_EXP 95
10914: PUSH
10915: LD_VAR 0 2
10919: ARRAY
10920: PUSH
10921: LD_INT 3
10923: ARRAY
10924: PPUSH
10925: LD_EXP 95
10929: PUSH
10930: LD_VAR 0 2
10934: ARRAY
10935: PUSH
10936: LD_INT 4
10938: ARRAY
10939: PPUSH
10940: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10944: LD_VAR 0 4
10948: PPUSH
10949: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10953: LD_VAR 0 4
10957: PPUSH
10958: LD_VAR 0 2
10962: PPUSH
10963: CALL_OW 180
// end else
10967: GO 11082
// if GetControl ( vehicle ) = control_remote then
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: IFFALSE 11043
// begin wait ( 0 0$2 ) ;
10984: LD_INT 70
10986: PPUSH
10987: CALL_OW 67
// if Connect ( vehicle ) then
10991: LD_VAR 0 1
10995: PPUSH
10996: CALL 39549 0 1
11000: IFFALSE 11041
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_EXP 95
11011: PUSH
11012: LD_VAR 0 2
11016: ARRAY
11017: PUSH
11018: LD_INT 3
11020: ARRAY
11021: PPUSH
11022: LD_EXP 95
11026: PUSH
11027: LD_VAR 0 2
11031: ARRAY
11032: PUSH
11033: LD_INT 4
11035: ARRAY
11036: PPUSH
11037: CALL_OW 171
// end else
11041: GO 11082
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_EXP 95
11052: PUSH
11053: LD_VAR 0 2
11057: ARRAY
11058: PUSH
11059: LD_INT 3
11061: ARRAY
11062: PPUSH
11063: LD_EXP 95
11067: PUSH
11068: LD_VAR 0 2
11072: ARRAY
11073: PUSH
11074: LD_INT 4
11076: ARRAY
11077: PPUSH
11078: CALL_OW 171
// end ; end ;
11082: LD_VAR 0 3
11086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11087: LD_INT 0
11089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11090: LD_VAR 0 1
11094: PUSH
11095: LD_INT 250
11097: EQUAL
11098: PUSH
11099: LD_VAR 0 2
11103: PPUSH
11104: CALL_OW 264
11108: PUSH
11109: LD_INT 81
11111: EQUAL
11112: AND
11113: IFFALSE 11134
// MinerPlaceMine ( unit , x , y ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_VAR 0 5
11129: PPUSH
11130: CALL 13958 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11134: LD_VAR 0 1
11138: PUSH
11139: LD_INT 251
11141: EQUAL
11142: PUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 264
11152: PUSH
11153: LD_INT 81
11155: EQUAL
11156: AND
11157: IFFALSE 11178
// MinerDetonateMine ( unit , x , y ) ;
11159: LD_VAR 0 2
11163: PPUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: LD_VAR 0 5
11173: PPUSH
11174: CALL 14233 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11178: LD_VAR 0 1
11182: PUSH
11183: LD_INT 252
11185: EQUAL
11186: PUSH
11187: LD_VAR 0 2
11191: PPUSH
11192: CALL_OW 264
11196: PUSH
11197: LD_INT 81
11199: EQUAL
11200: AND
11201: IFFALSE 11222
// MinerCreateMinefield ( unit , x , y ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_VAR 0 4
11212: PPUSH
11213: LD_VAR 0 5
11217: PPUSH
11218: CALL 14650 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11222: LD_VAR 0 1
11226: PUSH
11227: LD_INT 253
11229: EQUAL
11230: PUSH
11231: LD_VAR 0 2
11235: PPUSH
11236: CALL_OW 257
11240: PUSH
11241: LD_INT 5
11243: EQUAL
11244: AND
11245: IFFALSE 11266
// ComBinocular ( unit , x , y ) ;
11247: LD_VAR 0 2
11251: PPUSH
11252: LD_VAR 0 4
11256: PPUSH
11257: LD_VAR 0 5
11261: PPUSH
11262: CALL 15019 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11266: LD_VAR 0 1
11270: PUSH
11271: LD_INT 254
11273: EQUAL
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 264
11284: PUSH
11285: LD_INT 99
11287: EQUAL
11288: AND
11289: PUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: CALL_OW 263
11299: PUSH
11300: LD_INT 3
11302: EQUAL
11303: AND
11304: IFFALSE 11320
// HackDestroyVehicle ( unit , selectedUnit ) ;
11306: LD_VAR 0 2
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: CALL 13322 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11320: LD_VAR 0 1
11324: PUSH
11325: LD_INT 255
11327: EQUAL
11328: PUSH
11329: LD_VAR 0 2
11333: PPUSH
11334: CALL_OW 264
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 53
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: IN
11349: AND
11350: PUSH
11351: LD_VAR 0 4
11355: PPUSH
11356: LD_VAR 0 5
11360: PPUSH
11361: CALL_OW 488
11365: AND
11366: IFFALSE 11390
// CutTreeXYR ( unit , x , y , 12 ) ;
11368: LD_VAR 0 2
11372: PPUSH
11373: LD_VAR 0 4
11377: PPUSH
11378: LD_VAR 0 5
11382: PPUSH
11383: LD_INT 12
11385: PPUSH
11386: CALL 11485 0 4
// if cmd = 256 then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 256
11397: EQUAL
11398: IFFALSE 11419
// SetFactoryWaypoint ( unit , x , y ) ;
11400: LD_VAR 0 2
11404: PPUSH
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 5
11414: PPUSH
11415: CALL 29930 0 3
// if cmd = 257 then
11419: LD_VAR 0 1
11423: PUSH
11424: LD_INT 257
11426: EQUAL
11427: IFFALSE 11448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11429: LD_VAR 0 2
11433: PPUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_VAR 0 5
11443: PPUSH
11444: CALL 30292 0 3
// if cmd = 258 then
11448: LD_VAR 0 1
11452: PUSH
11453: LD_INT 258
11455: EQUAL
11456: IFFALSE 11480
// BurnTreeXYR ( unit , x , y , 8 ) ;
11458: LD_VAR 0 2
11462: PPUSH
11463: LD_VAR 0 4
11467: PPUSH
11468: LD_VAR 0 5
11472: PPUSH
11473: LD_INT 8
11475: PPUSH
11476: CALL 11879 0 4
// end ;
11480: LD_VAR 0 6
11484: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11485: LD_INT 0
11487: PPUSH
11488: PPUSH
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
11496: LD_VAR 0 1
11500: PPUSH
11501: CALL_OW 302
11505: NOT
11506: PUSH
11507: LD_VAR 0 2
11511: PPUSH
11512: LD_VAR 0 3
11516: PPUSH
11517: CALL_OW 488
11521: NOT
11522: OR
11523: PUSH
11524: LD_VAR 0 4
11528: NOT
11529: OR
11530: IFFALSE 11534
// exit ;
11532: GO 11874
// list := [ ] ;
11534: LD_ADDR_VAR 0 13
11538: PUSH
11539: EMPTY
11540: ST_TO_ADDR
// if x - r < 0 then
11541: LD_VAR 0 2
11545: PUSH
11546: LD_VAR 0 4
11550: MINUS
11551: PUSH
11552: LD_INT 0
11554: LESS
11555: IFFALSE 11567
// min_x := 0 else
11557: LD_ADDR_VAR 0 7
11561: PUSH
11562: LD_INT 0
11564: ST_TO_ADDR
11565: GO 11583
// min_x := x - r ;
11567: LD_ADDR_VAR 0 7
11571: PUSH
11572: LD_VAR 0 2
11576: PUSH
11577: LD_VAR 0 4
11581: MINUS
11582: ST_TO_ADDR
// if y - r < 0 then
11583: LD_VAR 0 3
11587: PUSH
11588: LD_VAR 0 4
11592: MINUS
11593: PUSH
11594: LD_INT 0
11596: LESS
11597: IFFALSE 11609
// min_y := 0 else
11599: LD_ADDR_VAR 0 8
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
11607: GO 11625
// min_y := y - r ;
11609: LD_ADDR_VAR 0 8
11613: PUSH
11614: LD_VAR 0 3
11618: PUSH
11619: LD_VAR 0 4
11623: MINUS
11624: ST_TO_ADDR
// max_x := x + r ;
11625: LD_ADDR_VAR 0 9
11629: PUSH
11630: LD_VAR 0 2
11634: PUSH
11635: LD_VAR 0 4
11639: PLUS
11640: ST_TO_ADDR
// max_y := y + r ;
11641: LD_ADDR_VAR 0 10
11645: PUSH
11646: LD_VAR 0 3
11650: PUSH
11651: LD_VAR 0 4
11655: PLUS
11656: ST_TO_ADDR
// for _x = min_x to max_x do
11657: LD_ADDR_VAR 0 11
11661: PUSH
11662: DOUBLE
11663: LD_VAR 0 7
11667: DEC
11668: ST_TO_ADDR
11669: LD_VAR 0 9
11673: PUSH
11674: FOR_TO
11675: IFFALSE 11792
// for _y = min_y to max_y do
11677: LD_ADDR_VAR 0 12
11681: PUSH
11682: DOUBLE
11683: LD_VAR 0 8
11687: DEC
11688: ST_TO_ADDR
11689: LD_VAR 0 10
11693: PUSH
11694: FOR_TO
11695: IFFALSE 11788
// begin if not ValidHex ( _x , _y ) then
11697: LD_VAR 0 11
11701: PPUSH
11702: LD_VAR 0 12
11706: PPUSH
11707: CALL_OW 488
11711: NOT
11712: IFFALSE 11716
// continue ;
11714: GO 11694
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11716: LD_VAR 0 11
11720: PPUSH
11721: LD_VAR 0 12
11725: PPUSH
11726: CALL_OW 351
11730: PUSH
11731: LD_VAR 0 11
11735: PPUSH
11736: LD_VAR 0 12
11740: PPUSH
11741: CALL_OW 554
11745: AND
11746: IFFALSE 11786
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11748: LD_ADDR_VAR 0 13
11752: PUSH
11753: LD_VAR 0 13
11757: PPUSH
11758: LD_VAR 0 13
11762: PUSH
11763: LD_INT 1
11765: PLUS
11766: PPUSH
11767: LD_VAR 0 11
11771: PUSH
11772: LD_VAR 0 12
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PPUSH
11781: CALL_OW 2
11785: ST_TO_ADDR
// end ;
11786: GO 11694
11788: POP
11789: POP
11790: GO 11674
11792: POP
11793: POP
// if not list then
11794: LD_VAR 0 13
11798: NOT
11799: IFFALSE 11803
// exit ;
11801: GO 11874
// for i in list do
11803: LD_ADDR_VAR 0 6
11807: PUSH
11808: LD_VAR 0 13
11812: PUSH
11813: FOR_IN
11814: IFFALSE 11872
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11816: LD_VAR 0 1
11820: PPUSH
11821: LD_STRING M
11823: PUSH
11824: LD_VAR 0 6
11828: PUSH
11829: LD_INT 1
11831: ARRAY
11832: PUSH
11833: LD_VAR 0 6
11837: PUSH
11838: LD_INT 2
11840: ARRAY
11841: PUSH
11842: LD_INT 0
11844: PUSH
11845: LD_INT 0
11847: PUSH
11848: LD_INT 0
11850: PUSH
11851: LD_INT 0
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: PPUSH
11866: CALL_OW 447
11870: GO 11813
11872: POP
11873: POP
// end ;
11874: LD_VAR 0 5
11878: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11879: LD_INT 0
11881: PPUSH
11882: PPUSH
11883: PPUSH
11884: PPUSH
11885: PPUSH
11886: PPUSH
11887: PPUSH
11888: PPUSH
11889: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
11890: LD_VAR 0 1
11894: PPUSH
11895: CALL_OW 302
11899: NOT
11900: PUSH
11901: LD_VAR 0 2
11905: PPUSH
11906: LD_VAR 0 3
11910: PPUSH
11911: CALL_OW 488
11915: NOT
11916: OR
11917: PUSH
11918: LD_VAR 0 4
11922: NOT
11923: OR
11924: IFFALSE 11928
// exit ;
11926: GO 12276
// list := [ ] ;
11928: LD_ADDR_VAR 0 13
11932: PUSH
11933: EMPTY
11934: ST_TO_ADDR
// if x - r < 0 then
11935: LD_VAR 0 2
11939: PUSH
11940: LD_VAR 0 4
11944: MINUS
11945: PUSH
11946: LD_INT 0
11948: LESS
11949: IFFALSE 11961
// min_x := 0 else
11951: LD_ADDR_VAR 0 7
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
11959: GO 11977
// min_x := x - r ;
11961: LD_ADDR_VAR 0 7
11965: PUSH
11966: LD_VAR 0 2
11970: PUSH
11971: LD_VAR 0 4
11975: MINUS
11976: ST_TO_ADDR
// if y - r < 0 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_VAR 0 4
11986: MINUS
11987: PUSH
11988: LD_INT 0
11990: LESS
11991: IFFALSE 12003
// min_y := 0 else
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 0
12000: ST_TO_ADDR
12001: GO 12019
// min_y := y - r ;
12003: LD_ADDR_VAR 0 8
12007: PUSH
12008: LD_VAR 0 3
12012: PUSH
12013: LD_VAR 0 4
12017: MINUS
12018: ST_TO_ADDR
// max_x := x + r ;
12019: LD_ADDR_VAR 0 9
12023: PUSH
12024: LD_VAR 0 2
12028: PUSH
12029: LD_VAR 0 4
12033: PLUS
12034: ST_TO_ADDR
// max_y := y + r ;
12035: LD_ADDR_VAR 0 10
12039: PUSH
12040: LD_VAR 0 3
12044: PUSH
12045: LD_VAR 0 4
12049: PLUS
12050: ST_TO_ADDR
// for _x = min_x to max_x do
12051: LD_ADDR_VAR 0 11
12055: PUSH
12056: DOUBLE
12057: LD_VAR 0 7
12061: DEC
12062: ST_TO_ADDR
12063: LD_VAR 0 9
12067: PUSH
12068: FOR_TO
12069: IFFALSE 12186
// for _y = min_y to max_y do
12071: LD_ADDR_VAR 0 12
12075: PUSH
12076: DOUBLE
12077: LD_VAR 0 8
12081: DEC
12082: ST_TO_ADDR
12083: LD_VAR 0 10
12087: PUSH
12088: FOR_TO
12089: IFFALSE 12182
// begin if not ValidHex ( _x , _y ) then
12091: LD_VAR 0 11
12095: PPUSH
12096: LD_VAR 0 12
12100: PPUSH
12101: CALL_OW 488
12105: NOT
12106: IFFALSE 12110
// continue ;
12108: GO 12088
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12110: LD_VAR 0 11
12114: PPUSH
12115: LD_VAR 0 12
12119: PPUSH
12120: CALL_OW 351
12124: PUSH
12125: LD_VAR 0 11
12129: PPUSH
12130: LD_VAR 0 12
12134: PPUSH
12135: CALL_OW 554
12139: AND
12140: IFFALSE 12180
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12142: LD_ADDR_VAR 0 13
12146: PUSH
12147: LD_VAR 0 13
12151: PPUSH
12152: LD_VAR 0 13
12156: PUSH
12157: LD_INT 1
12159: PLUS
12160: PPUSH
12161: LD_VAR 0 11
12165: PUSH
12166: LD_VAR 0 12
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PPUSH
12175: CALL_OW 2
12179: ST_TO_ADDR
// end ;
12180: GO 12088
12182: POP
12183: POP
12184: GO 12068
12186: POP
12187: POP
// if not list then
12188: LD_VAR 0 13
12192: NOT
12193: IFFALSE 12197
// exit ;
12195: GO 12276
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
12197: LD_ADDR_VAR 0 13
12201: PUSH
12202: LD_VAR 0 1
12206: PPUSH
12207: LD_VAR 0 13
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: CALL 36691 0 4
12222: ST_TO_ADDR
// ComStop ( flame ) ;
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 141
// for i in list do
12232: LD_ADDR_VAR 0 6
12236: PUSH
12237: LD_VAR 0 13
12241: PUSH
12242: FOR_IN
12243: IFFALSE 12274
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
12245: LD_VAR 0 1
12249: PPUSH
12250: LD_VAR 0 6
12254: PUSH
12255: LD_INT 1
12257: ARRAY
12258: PPUSH
12259: LD_VAR 0 6
12263: PUSH
12264: LD_INT 2
12266: ARRAY
12267: PPUSH
12268: CALL_OW 176
12272: GO 12242
12274: POP
12275: POP
// end ;
12276: LD_VAR 0 5
12280: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12281: LD_EXP 26
12285: NOT
12286: IFFALSE 12336
12288: GO 12290
12290: DISABLE
// begin initHack := true ;
12291: LD_ADDR_EXP 26
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// hackTanks := [ ] ;
12299: LD_ADDR_EXP 27
12303: PUSH
12304: EMPTY
12305: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12306: LD_ADDR_EXP 28
12310: PUSH
12311: EMPTY
12312: ST_TO_ADDR
// hackLimit := 3 ;
12313: LD_ADDR_EXP 29
12317: PUSH
12318: LD_INT 3
12320: ST_TO_ADDR
// hackDist := 12 ;
12321: LD_ADDR_EXP 30
12325: PUSH
12326: LD_INT 12
12328: ST_TO_ADDR
// hackCounter := [ ] ;
12329: LD_ADDR_EXP 31
12333: PUSH
12334: EMPTY
12335: ST_TO_ADDR
// end ;
12336: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12337: LD_EXP 26
12341: PUSH
12342: LD_INT 34
12344: PUSH
12345: LD_INT 99
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: AND
12357: IFFALSE 12610
12359: GO 12361
12361: DISABLE
12362: LD_INT 0
12364: PPUSH
12365: PPUSH
// begin enable ;
12366: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12367: LD_ADDR_VAR 0 1
12371: PUSH
12372: LD_INT 34
12374: PUSH
12375: LD_INT 99
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PPUSH
12382: CALL_OW 69
12386: PUSH
12387: FOR_IN
12388: IFFALSE 12608
// begin if not i in hackTanks then
12390: LD_VAR 0 1
12394: PUSH
12395: LD_EXP 27
12399: IN
12400: NOT
12401: IFFALSE 12484
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12403: LD_ADDR_EXP 27
12407: PUSH
12408: LD_EXP 27
12412: PPUSH
12413: LD_EXP 27
12417: PUSH
12418: LD_INT 1
12420: PLUS
12421: PPUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: CALL_OW 1
12431: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12432: LD_ADDR_EXP 28
12436: PUSH
12437: LD_EXP 28
12441: PPUSH
12442: LD_EXP 28
12446: PUSH
12447: LD_INT 1
12449: PLUS
12450: PPUSH
12451: EMPTY
12452: PPUSH
12453: CALL_OW 1
12457: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12458: LD_ADDR_EXP 31
12462: PUSH
12463: LD_EXP 31
12467: PPUSH
12468: LD_EXP 31
12472: PUSH
12473: LD_INT 1
12475: PLUS
12476: PPUSH
12477: EMPTY
12478: PPUSH
12479: CALL_OW 1
12483: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12484: LD_VAR 0 1
12488: PPUSH
12489: CALL_OW 302
12493: NOT
12494: IFFALSE 12507
// begin HackUnlinkAll ( i ) ;
12496: LD_VAR 0 1
12500: PPUSH
12501: CALL 12613 0 1
// continue ;
12505: GO 12387
// end ; HackCheckCapturedStatus ( i ) ;
12507: LD_VAR 0 1
12511: PPUSH
12512: CALL 13056 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12516: LD_ADDR_VAR 0 2
12520: PUSH
12521: LD_INT 81
12523: PUSH
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 255
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 33
12540: PUSH
12541: LD_INT 3
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 91
12550: PUSH
12551: LD_VAR 0 1
12555: PUSH
12556: LD_EXP 30
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 50
12568: PUSH
12569: EMPTY
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: ST_TO_ADDR
// if not tmp then
12583: LD_VAR 0 2
12587: NOT
12588: IFFALSE 12592
// continue ;
12590: GO 12387
// HackLink ( i , tmp ) ;
12592: LD_VAR 0 1
12596: PPUSH
12597: LD_VAR 0 2
12601: PPUSH
12602: CALL 12749 0 2
// end ;
12606: GO 12387
12608: POP
12609: POP
// end ;
12610: PPOPN 2
12612: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12613: LD_INT 0
12615: PPUSH
12616: PPUSH
12617: PPUSH
// if not hack in hackTanks then
12618: LD_VAR 0 1
12622: PUSH
12623: LD_EXP 27
12627: IN
12628: NOT
12629: IFFALSE 12633
// exit ;
12631: GO 12744
// index := GetElementIndex ( hackTanks , hack ) ;
12633: LD_ADDR_VAR 0 4
12637: PUSH
12638: LD_EXP 27
12642: PPUSH
12643: LD_VAR 0 1
12647: PPUSH
12648: CALL 35988 0 2
12652: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12653: LD_EXP 28
12657: PUSH
12658: LD_VAR 0 4
12662: ARRAY
12663: IFFALSE 12744
// begin for i in hackTanksCaptured [ index ] do
12665: LD_ADDR_VAR 0 3
12669: PUSH
12670: LD_EXP 28
12674: PUSH
12675: LD_VAR 0 4
12679: ARRAY
12680: PUSH
12681: FOR_IN
12682: IFFALSE 12708
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12684: LD_VAR 0 3
12688: PUSH
12689: LD_INT 1
12691: ARRAY
12692: PPUSH
12693: LD_VAR 0 3
12697: PUSH
12698: LD_INT 2
12700: ARRAY
12701: PPUSH
12702: CALL_OW 235
12706: GO 12681
12708: POP
12709: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12710: LD_ADDR_EXP 28
12714: PUSH
12715: LD_EXP 28
12719: PPUSH
12720: LD_VAR 0 4
12724: PPUSH
12725: EMPTY
12726: PPUSH
12727: CALL_OW 1
12731: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12732: LD_VAR 0 1
12736: PPUSH
12737: LD_INT 0
12739: PPUSH
12740: CALL_OW 505
// end ; end ;
12744: LD_VAR 0 2
12748: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12749: LD_INT 0
12751: PPUSH
12752: PPUSH
12753: PPUSH
// if not hack in hackTanks or not vehicles then
12754: LD_VAR 0 1
12758: PUSH
12759: LD_EXP 27
12763: IN
12764: NOT
12765: PUSH
12766: LD_VAR 0 2
12770: NOT
12771: OR
12772: IFFALSE 12776
// exit ;
12774: GO 13051
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12776: LD_ADDR_VAR 0 2
12780: PUSH
12781: LD_VAR 0 1
12785: PPUSH
12786: LD_VAR 0 2
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL 36638 0 4
12801: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12802: LD_ADDR_VAR 0 5
12806: PUSH
12807: LD_EXP 27
12811: PPUSH
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL 35988 0 2
12821: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12822: LD_EXP 28
12826: PUSH
12827: LD_VAR 0 5
12831: ARRAY
12832: PUSH
12833: LD_EXP 29
12837: LESS
12838: IFFALSE 13027
// begin for i := 1 to vehicles do
12840: LD_ADDR_VAR 0 4
12844: PUSH
12845: DOUBLE
12846: LD_INT 1
12848: DEC
12849: ST_TO_ADDR
12850: LD_VAR 0 2
12854: PUSH
12855: FOR_TO
12856: IFFALSE 13025
// begin if hackTanksCaptured [ index ] = hackLimit then
12858: LD_EXP 28
12862: PUSH
12863: LD_VAR 0 5
12867: ARRAY
12868: PUSH
12869: LD_EXP 29
12873: EQUAL
12874: IFFALSE 12878
// break ;
12876: GO 13025
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12878: LD_ADDR_EXP 31
12882: PUSH
12883: LD_EXP 31
12887: PPUSH
12888: LD_VAR 0 5
12892: PPUSH
12893: LD_EXP 31
12897: PUSH
12898: LD_VAR 0 5
12902: ARRAY
12903: PUSH
12904: LD_INT 1
12906: PLUS
12907: PPUSH
12908: CALL_OW 1
12912: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12913: LD_ADDR_EXP 28
12917: PUSH
12918: LD_EXP 28
12922: PPUSH
12923: LD_VAR 0 5
12927: PUSH
12928: LD_EXP 28
12932: PUSH
12933: LD_VAR 0 5
12937: ARRAY
12938: PUSH
12939: LD_INT 1
12941: PLUS
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: LD_VAR 0 2
12951: PUSH
12952: LD_VAR 0 4
12956: ARRAY
12957: PUSH
12958: LD_VAR 0 2
12962: PUSH
12963: LD_VAR 0 4
12967: ARRAY
12968: PPUSH
12969: CALL_OW 255
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL 36203 0 3
12982: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12983: LD_VAR 0 2
12987: PUSH
12988: LD_VAR 0 4
12992: ARRAY
12993: PPUSH
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 255
13003: PPUSH
13004: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13008: LD_VAR 0 2
13012: PUSH
13013: LD_VAR 0 4
13017: ARRAY
13018: PPUSH
13019: CALL_OW 141
// end ;
13023: GO 12855
13025: POP
13026: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13027: LD_VAR 0 1
13031: PPUSH
13032: LD_EXP 28
13036: PUSH
13037: LD_VAR 0 5
13041: ARRAY
13042: PUSH
13043: LD_INT 0
13045: PLUS
13046: PPUSH
13047: CALL_OW 505
// end ;
13051: LD_VAR 0 3
13055: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13056: LD_INT 0
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
// if not hack in hackTanks then
13062: LD_VAR 0 1
13066: PUSH
13067: LD_EXP 27
13071: IN
13072: NOT
13073: IFFALSE 13077
// exit ;
13075: GO 13317
// index := GetElementIndex ( hackTanks , hack ) ;
13077: LD_ADDR_VAR 0 4
13081: PUSH
13082: LD_EXP 27
13086: PPUSH
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL 35988 0 2
13096: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13097: LD_ADDR_VAR 0 3
13101: PUSH
13102: DOUBLE
13103: LD_EXP 28
13107: PUSH
13108: LD_VAR 0 4
13112: ARRAY
13113: INC
13114: ST_TO_ADDR
13115: LD_INT 1
13117: PUSH
13118: FOR_DOWNTO
13119: IFFALSE 13291
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13121: LD_ADDR_VAR 0 5
13125: PUSH
13126: LD_EXP 28
13130: PUSH
13131: LD_VAR 0 4
13135: ARRAY
13136: PUSH
13137: LD_VAR 0 3
13141: ARRAY
13142: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13143: LD_VAR 0 5
13147: PUSH
13148: LD_INT 1
13150: ARRAY
13151: PPUSH
13152: CALL_OW 302
13156: NOT
13157: PUSH
13158: LD_VAR 0 5
13162: PUSH
13163: LD_INT 1
13165: ARRAY
13166: PPUSH
13167: CALL_OW 255
13171: PUSH
13172: LD_VAR 0 1
13176: PPUSH
13177: CALL_OW 255
13181: NONEQUAL
13182: OR
13183: IFFALSE 13289
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13185: LD_VAR 0 5
13189: PUSH
13190: LD_INT 1
13192: ARRAY
13193: PPUSH
13194: CALL_OW 305
13198: PUSH
13199: LD_VAR 0 5
13203: PUSH
13204: LD_INT 1
13206: ARRAY
13207: PPUSH
13208: CALL_OW 255
13212: PUSH
13213: LD_VAR 0 1
13217: PPUSH
13218: CALL_OW 255
13222: EQUAL
13223: AND
13224: IFFALSE 13248
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13226: LD_VAR 0 5
13230: PUSH
13231: LD_INT 1
13233: ARRAY
13234: PPUSH
13235: LD_VAR 0 5
13239: PUSH
13240: LD_INT 2
13242: ARRAY
13243: PPUSH
13244: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13248: LD_ADDR_EXP 28
13252: PUSH
13253: LD_EXP 28
13257: PPUSH
13258: LD_VAR 0 4
13262: PPUSH
13263: LD_EXP 28
13267: PUSH
13268: LD_VAR 0 4
13272: ARRAY
13273: PPUSH
13274: LD_VAR 0 3
13278: PPUSH
13279: CALL_OW 3
13283: PPUSH
13284: CALL_OW 1
13288: ST_TO_ADDR
// end ; end ;
13289: GO 13118
13291: POP
13292: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13293: LD_VAR 0 1
13297: PPUSH
13298: LD_EXP 28
13302: PUSH
13303: LD_VAR 0 4
13307: ARRAY
13308: PUSH
13309: LD_INT 0
13311: PLUS
13312: PPUSH
13313: CALL_OW 505
// end ;
13317: LD_VAR 0 2
13321: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13322: LD_INT 0
13324: PPUSH
13325: PPUSH
13326: PPUSH
13327: PPUSH
// if not hack in hackTanks then
13328: LD_VAR 0 1
13332: PUSH
13333: LD_EXP 27
13337: IN
13338: NOT
13339: IFFALSE 13343
// exit ;
13341: GO 13428
// index := GetElementIndex ( hackTanks , hack ) ;
13343: LD_ADDR_VAR 0 5
13347: PUSH
13348: LD_EXP 27
13352: PPUSH
13353: LD_VAR 0 1
13357: PPUSH
13358: CALL 35988 0 2
13362: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13363: LD_ADDR_VAR 0 4
13367: PUSH
13368: DOUBLE
13369: LD_INT 1
13371: DEC
13372: ST_TO_ADDR
13373: LD_EXP 28
13377: PUSH
13378: LD_VAR 0 5
13382: ARRAY
13383: PUSH
13384: FOR_TO
13385: IFFALSE 13426
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13387: LD_EXP 28
13391: PUSH
13392: LD_VAR 0 5
13396: ARRAY
13397: PUSH
13398: LD_VAR 0 4
13402: ARRAY
13403: PUSH
13404: LD_INT 1
13406: ARRAY
13407: PUSH
13408: LD_VAR 0 2
13412: EQUAL
13413: IFFALSE 13424
// KillUnit ( vehicle ) ;
13415: LD_VAR 0 2
13419: PPUSH
13420: CALL_OW 66
13424: GO 13384
13426: POP
13427: POP
// end ;
13428: LD_VAR 0 3
13432: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13433: LD_EXP 32
13437: NOT
13438: IFFALSE 13473
13440: GO 13442
13442: DISABLE
// begin initMiner := true ;
13443: LD_ADDR_EXP 32
13447: PUSH
13448: LD_INT 1
13450: ST_TO_ADDR
// minersList := [ ] ;
13451: LD_ADDR_EXP 33
13455: PUSH
13456: EMPTY
13457: ST_TO_ADDR
// minerMinesList := [ ] ;
13458: LD_ADDR_EXP 34
13462: PUSH
13463: EMPTY
13464: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13465: LD_ADDR_EXP 35
13469: PUSH
13470: LD_INT 5
13472: ST_TO_ADDR
// end ;
13473: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13474: LD_EXP 32
13478: PUSH
13479: LD_INT 34
13481: PUSH
13482: LD_INT 81
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: AND
13494: IFFALSE 13955
13496: GO 13498
13498: DISABLE
13499: LD_INT 0
13501: PPUSH
13502: PPUSH
13503: PPUSH
13504: PPUSH
// begin enable ;
13505: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13506: LD_ADDR_VAR 0 1
13510: PUSH
13511: LD_INT 34
13513: PUSH
13514: LD_INT 81
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13599
// begin if not i in minersList then
13529: LD_VAR 0 1
13533: PUSH
13534: LD_EXP 33
13538: IN
13539: NOT
13540: IFFALSE 13597
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13542: LD_ADDR_EXP 33
13546: PUSH
13547: LD_EXP 33
13551: PPUSH
13552: LD_EXP 33
13556: PUSH
13557: LD_INT 1
13559: PLUS
13560: PPUSH
13561: LD_VAR 0 1
13565: PPUSH
13566: CALL_OW 1
13570: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13571: LD_ADDR_EXP 34
13575: PUSH
13576: LD_EXP 34
13580: PPUSH
13581: LD_EXP 34
13585: PUSH
13586: LD_INT 1
13588: PLUS
13589: PPUSH
13590: EMPTY
13591: PPUSH
13592: CALL_OW 1
13596: ST_TO_ADDR
// end end ;
13597: GO 13526
13599: POP
13600: POP
// for i := minerMinesList downto 1 do
13601: LD_ADDR_VAR 0 1
13605: PUSH
13606: DOUBLE
13607: LD_EXP 34
13611: INC
13612: ST_TO_ADDR
13613: LD_INT 1
13615: PUSH
13616: FOR_DOWNTO
13617: IFFALSE 13953
// begin if IsLive ( minersList [ i ] ) then
13619: LD_EXP 33
13623: PUSH
13624: LD_VAR 0 1
13628: ARRAY
13629: PPUSH
13630: CALL_OW 300
13634: IFFALSE 13662
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13636: LD_EXP 33
13640: PUSH
13641: LD_VAR 0 1
13645: ARRAY
13646: PPUSH
13647: LD_EXP 34
13651: PUSH
13652: LD_VAR 0 1
13656: ARRAY
13657: PPUSH
13658: CALL_OW 505
// if not minerMinesList [ i ] then
13662: LD_EXP 34
13666: PUSH
13667: LD_VAR 0 1
13671: ARRAY
13672: NOT
13673: IFFALSE 13677
// continue ;
13675: GO 13616
// for j := minerMinesList [ i ] downto 1 do
13677: LD_ADDR_VAR 0 2
13681: PUSH
13682: DOUBLE
13683: LD_EXP 34
13687: PUSH
13688: LD_VAR 0 1
13692: ARRAY
13693: INC
13694: ST_TO_ADDR
13695: LD_INT 1
13697: PUSH
13698: FOR_DOWNTO
13699: IFFALSE 13949
// begin side := GetSide ( minersList [ i ] ) ;
13701: LD_ADDR_VAR 0 3
13705: PUSH
13706: LD_EXP 33
13710: PUSH
13711: LD_VAR 0 1
13715: ARRAY
13716: PPUSH
13717: CALL_OW 255
13721: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13722: LD_ADDR_VAR 0 4
13726: PUSH
13727: LD_EXP 34
13731: PUSH
13732: LD_VAR 0 1
13736: ARRAY
13737: PUSH
13738: LD_VAR 0 2
13742: ARRAY
13743: PUSH
13744: LD_INT 1
13746: ARRAY
13747: PPUSH
13748: LD_EXP 34
13752: PUSH
13753: LD_VAR 0 1
13757: ARRAY
13758: PUSH
13759: LD_VAR 0 2
13763: ARRAY
13764: PUSH
13765: LD_INT 2
13767: ARRAY
13768: PPUSH
13769: CALL_OW 428
13773: ST_TO_ADDR
// if not tmp then
13774: LD_VAR 0 4
13778: NOT
13779: IFFALSE 13783
// continue ;
13781: GO 13698
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13783: LD_VAR 0 4
13787: PUSH
13788: LD_INT 81
13790: PUSH
13791: LD_VAR 0 3
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: IN
13805: PUSH
13806: LD_EXP 34
13810: PUSH
13811: LD_VAR 0 1
13815: ARRAY
13816: PUSH
13817: LD_VAR 0 2
13821: ARRAY
13822: PUSH
13823: LD_INT 1
13825: ARRAY
13826: PPUSH
13827: LD_EXP 34
13831: PUSH
13832: LD_VAR 0 1
13836: ARRAY
13837: PUSH
13838: LD_VAR 0 2
13842: ARRAY
13843: PUSH
13844: LD_INT 2
13846: ARRAY
13847: PPUSH
13848: CALL_OW 458
13852: AND
13853: IFFALSE 13947
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13855: LD_EXP 34
13859: PUSH
13860: LD_VAR 0 1
13864: ARRAY
13865: PUSH
13866: LD_VAR 0 2
13870: ARRAY
13871: PUSH
13872: LD_INT 1
13874: ARRAY
13875: PPUSH
13876: LD_EXP 34
13880: PUSH
13881: LD_VAR 0 1
13885: ARRAY
13886: PUSH
13887: LD_VAR 0 2
13891: ARRAY
13892: PUSH
13893: LD_INT 2
13895: ARRAY
13896: PPUSH
13897: LD_VAR 0 3
13901: PPUSH
13902: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13906: LD_ADDR_EXP 34
13910: PUSH
13911: LD_EXP 34
13915: PPUSH
13916: LD_VAR 0 1
13920: PPUSH
13921: LD_EXP 34
13925: PUSH
13926: LD_VAR 0 1
13930: ARRAY
13931: PPUSH
13932: LD_VAR 0 2
13936: PPUSH
13937: CALL_OW 3
13941: PPUSH
13942: CALL_OW 1
13946: ST_TO_ADDR
// end ; end ;
13947: GO 13698
13949: POP
13950: POP
// end ;
13951: GO 13616
13953: POP
13954: POP
// end ;
13955: PPOPN 4
13957: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13958: LD_INT 0
13960: PPUSH
13961: PPUSH
// result := false ;
13962: LD_ADDR_VAR 0 4
13966: PUSH
13967: LD_INT 0
13969: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13970: LD_VAR 0 1
13974: PPUSH
13975: CALL_OW 264
13979: PUSH
13980: LD_INT 81
13982: EQUAL
13983: NOT
13984: IFFALSE 13988
// exit ;
13986: GO 14228
// index := GetElementIndex ( minersList , unit ) ;
13988: LD_ADDR_VAR 0 5
13992: PUSH
13993: LD_EXP 33
13997: PPUSH
13998: LD_VAR 0 1
14002: PPUSH
14003: CALL 35988 0 2
14007: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14008: LD_EXP 34
14012: PUSH
14013: LD_VAR 0 5
14017: ARRAY
14018: PUSH
14019: LD_EXP 35
14023: GREATEREQUAL
14024: IFFALSE 14028
// exit ;
14026: GO 14228
// ComMoveXY ( unit , x , y ) ;
14028: LD_VAR 0 1
14032: PPUSH
14033: LD_VAR 0 2
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14047: LD_INT 35
14049: PPUSH
14050: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14054: LD_VAR 0 1
14058: PPUSH
14059: LD_VAR 0 2
14063: PPUSH
14064: LD_VAR 0 3
14068: PPUSH
14069: CALL 67740 0 3
14073: NOT
14074: PUSH
14075: LD_VAR 0 1
14079: PPUSH
14080: CALL_OW 314
14084: AND
14085: IFFALSE 14089
// exit ;
14087: GO 14228
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14089: LD_VAR 0 2
14093: PPUSH
14094: LD_VAR 0 3
14098: PPUSH
14099: CALL_OW 428
14103: PUSH
14104: LD_VAR 0 1
14108: EQUAL
14109: PUSH
14110: LD_VAR 0 1
14114: PPUSH
14115: CALL_OW 314
14119: NOT
14120: AND
14121: IFFALSE 14047
// PlaySoundXY ( x , y , PlantMine ) ;
14123: LD_VAR 0 2
14127: PPUSH
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_STRING PlantMine
14135: PPUSH
14136: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14140: LD_VAR 0 2
14144: PPUSH
14145: LD_VAR 0 3
14149: PPUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 255
14159: PPUSH
14160: LD_INT 0
14162: PPUSH
14163: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14167: LD_ADDR_EXP 34
14171: PUSH
14172: LD_EXP 34
14176: PPUSH
14177: LD_VAR 0 5
14181: PUSH
14182: LD_EXP 34
14186: PUSH
14187: LD_VAR 0 5
14191: ARRAY
14192: PUSH
14193: LD_INT 1
14195: PLUS
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PPUSH
14201: LD_VAR 0 2
14205: PUSH
14206: LD_VAR 0 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL 36203 0 3
14219: ST_TO_ADDR
// result := true ;
14220: LD_ADDR_VAR 0 4
14224: PUSH
14225: LD_INT 1
14227: ST_TO_ADDR
// end ;
14228: LD_VAR 0 4
14232: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14233: LD_INT 0
14235: PPUSH
14236: PPUSH
14237: PPUSH
// if not unit in minersList then
14238: LD_VAR 0 1
14242: PUSH
14243: LD_EXP 33
14247: IN
14248: NOT
14249: IFFALSE 14253
// exit ;
14251: GO 14645
// index := GetElementIndex ( minersList , unit ) ;
14253: LD_ADDR_VAR 0 6
14257: PUSH
14258: LD_EXP 33
14262: PPUSH
14263: LD_VAR 0 1
14267: PPUSH
14268: CALL 35988 0 2
14272: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14273: LD_ADDR_VAR 0 5
14277: PUSH
14278: DOUBLE
14279: LD_EXP 34
14283: PUSH
14284: LD_VAR 0 6
14288: ARRAY
14289: INC
14290: ST_TO_ADDR
14291: LD_INT 1
14293: PUSH
14294: FOR_DOWNTO
14295: IFFALSE 14456
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14297: LD_EXP 34
14301: PUSH
14302: LD_VAR 0 6
14306: ARRAY
14307: PUSH
14308: LD_VAR 0 5
14312: ARRAY
14313: PUSH
14314: LD_INT 1
14316: ARRAY
14317: PUSH
14318: LD_VAR 0 2
14322: EQUAL
14323: PUSH
14324: LD_EXP 34
14328: PUSH
14329: LD_VAR 0 6
14333: ARRAY
14334: PUSH
14335: LD_VAR 0 5
14339: ARRAY
14340: PUSH
14341: LD_INT 2
14343: ARRAY
14344: PUSH
14345: LD_VAR 0 3
14349: EQUAL
14350: AND
14351: IFFALSE 14454
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14353: LD_EXP 34
14357: PUSH
14358: LD_VAR 0 6
14362: ARRAY
14363: PUSH
14364: LD_VAR 0 5
14368: ARRAY
14369: PUSH
14370: LD_INT 1
14372: ARRAY
14373: PPUSH
14374: LD_EXP 34
14378: PUSH
14379: LD_VAR 0 6
14383: ARRAY
14384: PUSH
14385: LD_VAR 0 5
14389: ARRAY
14390: PUSH
14391: LD_INT 2
14393: ARRAY
14394: PPUSH
14395: LD_VAR 0 1
14399: PPUSH
14400: CALL_OW 255
14404: PPUSH
14405: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14409: LD_ADDR_EXP 34
14413: PUSH
14414: LD_EXP 34
14418: PPUSH
14419: LD_VAR 0 6
14423: PPUSH
14424: LD_EXP 34
14428: PUSH
14429: LD_VAR 0 6
14433: ARRAY
14434: PPUSH
14435: LD_VAR 0 5
14439: PPUSH
14440: CALL_OW 3
14444: PPUSH
14445: CALL_OW 1
14449: ST_TO_ADDR
// exit ;
14450: POP
14451: POP
14452: GO 14645
// end ; end ;
14454: GO 14294
14456: POP
14457: POP
// for i := minerMinesList [ index ] downto 1 do
14458: LD_ADDR_VAR 0 5
14462: PUSH
14463: DOUBLE
14464: LD_EXP 34
14468: PUSH
14469: LD_VAR 0 6
14473: ARRAY
14474: INC
14475: ST_TO_ADDR
14476: LD_INT 1
14478: PUSH
14479: FOR_DOWNTO
14480: IFFALSE 14643
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14482: LD_EXP 34
14486: PUSH
14487: LD_VAR 0 6
14491: ARRAY
14492: PUSH
14493: LD_VAR 0 5
14497: ARRAY
14498: PUSH
14499: LD_INT 1
14501: ARRAY
14502: PPUSH
14503: LD_EXP 34
14507: PUSH
14508: LD_VAR 0 6
14512: ARRAY
14513: PUSH
14514: LD_VAR 0 5
14518: ARRAY
14519: PUSH
14520: LD_INT 2
14522: ARRAY
14523: PPUSH
14524: LD_VAR 0 2
14528: PPUSH
14529: LD_VAR 0 3
14533: PPUSH
14534: CALL_OW 298
14538: PUSH
14539: LD_INT 6
14541: LESS
14542: IFFALSE 14641
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14544: LD_EXP 34
14548: PUSH
14549: LD_VAR 0 6
14553: ARRAY
14554: PUSH
14555: LD_VAR 0 5
14559: ARRAY
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: LD_EXP 34
14569: PUSH
14570: LD_VAR 0 6
14574: ARRAY
14575: PUSH
14576: LD_VAR 0 5
14580: ARRAY
14581: PUSH
14582: LD_INT 2
14584: ARRAY
14585: PPUSH
14586: LD_VAR 0 1
14590: PPUSH
14591: CALL_OW 255
14595: PPUSH
14596: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14600: LD_ADDR_EXP 34
14604: PUSH
14605: LD_EXP 34
14609: PPUSH
14610: LD_VAR 0 6
14614: PPUSH
14615: LD_EXP 34
14619: PUSH
14620: LD_VAR 0 6
14624: ARRAY
14625: PPUSH
14626: LD_VAR 0 5
14630: PPUSH
14631: CALL_OW 3
14635: PPUSH
14636: CALL_OW 1
14640: ST_TO_ADDR
// end ; end ;
14641: GO 14479
14643: POP
14644: POP
// end ;
14645: LD_VAR 0 4
14649: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14650: LD_INT 0
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14661: LD_VAR 0 1
14665: PPUSH
14666: CALL_OW 264
14670: PUSH
14671: LD_INT 81
14673: EQUAL
14674: NOT
14675: PUSH
14676: LD_VAR 0 1
14680: PUSH
14681: LD_EXP 33
14685: IN
14686: NOT
14687: OR
14688: IFFALSE 14692
// exit ;
14690: GO 15014
// index := GetElementIndex ( minersList , unit ) ;
14692: LD_ADDR_VAR 0 6
14696: PUSH
14697: LD_EXP 33
14701: PPUSH
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL 35988 0 2
14711: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14712: LD_ADDR_VAR 0 8
14716: PUSH
14717: LD_EXP 35
14721: PUSH
14722: LD_EXP 34
14726: PUSH
14727: LD_VAR 0 6
14731: ARRAY
14732: MINUS
14733: ST_TO_ADDR
// if not minesFreeAmount then
14734: LD_VAR 0 8
14738: NOT
14739: IFFALSE 14743
// exit ;
14741: GO 15014
// tmp := [ ] ;
14743: LD_ADDR_VAR 0 7
14747: PUSH
14748: EMPTY
14749: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14750: LD_ADDR_VAR 0 5
14754: PUSH
14755: DOUBLE
14756: LD_INT 1
14758: DEC
14759: ST_TO_ADDR
14760: LD_VAR 0 8
14764: PUSH
14765: FOR_TO
14766: IFFALSE 14961
// begin _d := rand ( 0 , 5 ) ;
14768: LD_ADDR_VAR 0 11
14772: PUSH
14773: LD_INT 0
14775: PPUSH
14776: LD_INT 5
14778: PPUSH
14779: CALL_OW 12
14783: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14784: LD_ADDR_VAR 0 12
14788: PUSH
14789: LD_INT 2
14791: PPUSH
14792: LD_INT 6
14794: PPUSH
14795: CALL_OW 12
14799: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14800: LD_ADDR_VAR 0 9
14804: PUSH
14805: LD_VAR 0 2
14809: PPUSH
14810: LD_VAR 0 11
14814: PPUSH
14815: LD_VAR 0 12
14819: PPUSH
14820: CALL_OW 272
14824: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14825: LD_ADDR_VAR 0 10
14829: PUSH
14830: LD_VAR 0 3
14834: PPUSH
14835: LD_VAR 0 11
14839: PPUSH
14840: LD_VAR 0 12
14844: PPUSH
14845: CALL_OW 273
14849: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14850: LD_VAR 0 9
14854: PPUSH
14855: LD_VAR 0 10
14859: PPUSH
14860: CALL_OW 488
14864: PUSH
14865: LD_VAR 0 9
14869: PUSH
14870: LD_VAR 0 10
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_VAR 0 7
14883: IN
14884: NOT
14885: AND
14886: PUSH
14887: LD_VAR 0 9
14891: PPUSH
14892: LD_VAR 0 10
14896: PPUSH
14897: CALL_OW 458
14901: NOT
14902: AND
14903: IFFALSE 14945
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14905: LD_ADDR_VAR 0 7
14909: PUSH
14910: LD_VAR 0 7
14914: PPUSH
14915: LD_VAR 0 7
14919: PUSH
14920: LD_INT 1
14922: PLUS
14923: PPUSH
14924: LD_VAR 0 9
14928: PUSH
14929: LD_VAR 0 10
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PPUSH
14938: CALL_OW 1
14942: ST_TO_ADDR
14943: GO 14959
// i := i - 1 ;
14945: LD_ADDR_VAR 0 5
14949: PUSH
14950: LD_VAR 0 5
14954: PUSH
14955: LD_INT 1
14957: MINUS
14958: ST_TO_ADDR
// end ;
14959: GO 14765
14961: POP
14962: POP
// for i in tmp do
14963: LD_ADDR_VAR 0 5
14967: PUSH
14968: LD_VAR 0 7
14972: PUSH
14973: FOR_IN
14974: IFFALSE 15012
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14976: LD_VAR 0 1
14980: PPUSH
14981: LD_VAR 0 5
14985: PUSH
14986: LD_INT 1
14988: ARRAY
14989: PPUSH
14990: LD_VAR 0 5
14994: PUSH
14995: LD_INT 2
14997: ARRAY
14998: PPUSH
14999: CALL 13958 0 3
15003: NOT
15004: IFFALSE 15010
// exit ;
15006: POP
15007: POP
15008: GO 15014
15010: GO 14973
15012: POP
15013: POP
// end ;
15014: LD_VAR 0 4
15018: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
// if not GetClass ( unit ) = class_sniper then
15028: LD_VAR 0 1
15032: PPUSH
15033: CALL_OW 257
15037: PUSH
15038: LD_INT 5
15040: EQUAL
15041: NOT
15042: IFFALSE 15046
// exit ;
15044: GO 15434
// dist := 8 ;
15046: LD_ADDR_VAR 0 5
15050: PUSH
15051: LD_INT 8
15053: ST_TO_ADDR
// viewRange := 12 ;
15054: LD_ADDR_VAR 0 7
15058: PUSH
15059: LD_INT 12
15061: ST_TO_ADDR
// side := GetSide ( unit ) ;
15062: LD_ADDR_VAR 0 6
15066: PUSH
15067: LD_VAR 0 1
15071: PPUSH
15072: CALL_OW 255
15076: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15077: LD_INT 61
15079: PPUSH
15080: LD_VAR 0 6
15084: PPUSH
15085: CALL_OW 321
15089: PUSH
15090: LD_INT 2
15092: EQUAL
15093: IFFALSE 15103
// viewRange := 16 ;
15095: LD_ADDR_VAR 0 7
15099: PUSH
15100: LD_INT 16
15102: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15103: LD_VAR 0 1
15107: PPUSH
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: CALL_OW 297
15122: PUSH
15123: LD_VAR 0 5
15127: GREATER
15128: IFFALSE 15207
// begin ComMoveXY ( unit , x , y ) ;
15130: LD_VAR 0 1
15134: PPUSH
15135: LD_VAR 0 2
15139: PPUSH
15140: LD_VAR 0 3
15144: PPUSH
15145: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15149: LD_INT 35
15151: PPUSH
15152: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_VAR 0 2
15165: PPUSH
15166: LD_VAR 0 3
15170: PPUSH
15171: CALL 67740 0 3
15175: NOT
15176: IFFALSE 15180
// exit ;
15178: GO 15434
// until GetDistUnitXY ( unit , x , y ) < dist ;
15180: LD_VAR 0 1
15184: PPUSH
15185: LD_VAR 0 2
15189: PPUSH
15190: LD_VAR 0 3
15194: PPUSH
15195: CALL_OW 297
15199: PUSH
15200: LD_VAR 0 5
15204: LESS
15205: IFFALSE 15149
// end ; ComTurnXY ( unit , x , y ) ;
15207: LD_VAR 0 1
15211: PPUSH
15212: LD_VAR 0 2
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: CALL_OW 118
// wait ( 5 ) ;
15226: LD_INT 5
15228: PPUSH
15229: CALL_OW 67
// _d := GetDir ( unit ) ;
15233: LD_ADDR_VAR 0 10
15237: PUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 254
15247: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
15248: LD_ADDR_VAR 0 8
15252: PUSH
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 250
15262: PPUSH
15263: LD_VAR 0 10
15267: PPUSH
15268: LD_VAR 0 5
15272: PPUSH
15273: CALL_OW 272
15277: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
15278: LD_ADDR_VAR 0 9
15282: PUSH
15283: LD_VAR 0 1
15287: PPUSH
15288: CALL_OW 251
15292: PPUSH
15293: LD_VAR 0 10
15297: PPUSH
15298: LD_VAR 0 5
15302: PPUSH
15303: CALL_OW 273
15307: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15308: LD_VAR 0 8
15312: PPUSH
15313: LD_VAR 0 9
15317: PPUSH
15318: CALL_OW 488
15322: NOT
15323: IFFALSE 15327
// exit ;
15325: GO 15434
// ComAnimCustom ( unit , 1 ) ;
15327: LD_VAR 0 1
15331: PPUSH
15332: LD_INT 1
15334: PPUSH
15335: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15339: LD_VAR 0 8
15343: PPUSH
15344: LD_VAR 0 9
15348: PPUSH
15349: LD_VAR 0 6
15353: PPUSH
15354: LD_VAR 0 7
15358: PPUSH
15359: CALL_OW 330
// repeat wait ( 1 ) ;
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 316
15379: PUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: CALL_OW 314
15389: OR
15390: PUSH
15391: LD_VAR 0 1
15395: PPUSH
15396: CALL_OW 302
15400: NOT
15401: OR
15402: PUSH
15403: LD_VAR 0 1
15407: PPUSH
15408: CALL_OW 301
15412: OR
15413: IFFALSE 15363
// RemoveSeeing ( _x , _y , side ) ;
15415: LD_VAR 0 8
15419: PPUSH
15420: LD_VAR 0 9
15424: PPUSH
15425: LD_VAR 0 6
15429: PPUSH
15430: CALL_OW 331
// end ; end_of_file
15434: LD_VAR 0 4
15438: RET
// export globalGameSaveCounter ; every 0 0$1 do
15439: GO 15441
15441: DISABLE
// begin enable ;
15442: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15443: LD_STRING updateTimer(
15445: PUSH
15446: LD_OWVAR 1
15450: STR
15451: PUSH
15452: LD_STRING );
15454: STR
15455: PPUSH
15456: CALL_OW 559
// end ;
15460: END
// every 0 0$1 do
15461: GO 15463
15463: DISABLE
// begin globalGameSaveCounter := 0 ;
15464: LD_ADDR_EXP 36
15468: PUSH
15469: LD_INT 0
15471: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15472: LD_STRING setGameSaveCounter(0)
15474: PPUSH
15475: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15479: LD_STRING initStreamRollete();
15481: PPUSH
15482: CALL_OW 559
// InitStreamMode ;
15486: CALL 16812 0 0
// DefineStreamItems ( false ) ;
15490: LD_INT 0
15492: PPUSH
15493: CALL 17276 0 1
// end ;
15497: END
// export function SOS_MapStart ( ) ; begin
15498: LD_INT 0
15500: PPUSH
// if streamModeActive then
15501: LD_EXP 37
15505: IFFALSE 15514
// DefineStreamItems ( true ) ;
15507: LD_INT 1
15509: PPUSH
15510: CALL 17276 0 1
// UpdateLuaVariables ( ) ;
15514: CALL 15531 0 0
// UpdateFactoryWaypoints ( ) ;
15518: CALL 30145 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15522: CALL 30402 0 0
// end ;
15526: LD_VAR 0 1
15530: RET
// function UpdateLuaVariables ( ) ; begin
15531: LD_INT 0
15533: PPUSH
// if globalGameSaveCounter then
15534: LD_EXP 36
15538: IFFALSE 15572
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15540: LD_ADDR_EXP 36
15544: PUSH
15545: LD_EXP 36
15549: PPUSH
15550: CALL 70304 0 1
15554: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15555: LD_STRING setGameSaveCounter(
15557: PUSH
15558: LD_EXP 36
15562: STR
15563: PUSH
15564: LD_STRING )
15566: STR
15567: PPUSH
15568: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15572: LD_STRING setGameDifficulty(
15574: PUSH
15575: LD_OWVAR 67
15579: STR
15580: PUSH
15581: LD_STRING )
15583: STR
15584: PPUSH
15585: CALL_OW 559
// end ;
15589: LD_VAR 0 1
15593: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15594: LD_INT 0
15596: PPUSH
// if p2 = stream_mode then
15597: LD_VAR 0 2
15601: PUSH
15602: LD_INT 100
15604: EQUAL
15605: IFFALSE 16608
// begin if not StreamModeActive then
15607: LD_EXP 37
15611: NOT
15612: IFFALSE 15622
// StreamModeActive := true ;
15614: LD_ADDR_EXP 37
15618: PUSH
15619: LD_INT 1
15621: ST_TO_ADDR
// if p3 = 0 then
15622: LD_VAR 0 3
15626: PUSH
15627: LD_INT 0
15629: EQUAL
15630: IFFALSE 15636
// InitStreamMode ;
15632: CALL 16812 0 0
// if p3 = 1 then
15636: LD_VAR 0 3
15640: PUSH
15641: LD_INT 1
15643: EQUAL
15644: IFFALSE 15654
// sRocket := true ;
15646: LD_ADDR_EXP 42
15650: PUSH
15651: LD_INT 1
15653: ST_TO_ADDR
// if p3 = 2 then
15654: LD_VAR 0 3
15658: PUSH
15659: LD_INT 2
15661: EQUAL
15662: IFFALSE 15672
// sSpeed := true ;
15664: LD_ADDR_EXP 41
15668: PUSH
15669: LD_INT 1
15671: ST_TO_ADDR
// if p3 = 3 then
15672: LD_VAR 0 3
15676: PUSH
15677: LD_INT 3
15679: EQUAL
15680: IFFALSE 15690
// sEngine := true ;
15682: LD_ADDR_EXP 43
15686: PUSH
15687: LD_INT 1
15689: ST_TO_ADDR
// if p3 = 4 then
15690: LD_VAR 0 3
15694: PUSH
15695: LD_INT 4
15697: EQUAL
15698: IFFALSE 15708
// sSpec := true ;
15700: LD_ADDR_EXP 40
15704: PUSH
15705: LD_INT 1
15707: ST_TO_ADDR
// if p3 = 5 then
15708: LD_VAR 0 3
15712: PUSH
15713: LD_INT 5
15715: EQUAL
15716: IFFALSE 15726
// sLevel := true ;
15718: LD_ADDR_EXP 44
15722: PUSH
15723: LD_INT 1
15725: ST_TO_ADDR
// if p3 = 6 then
15726: LD_VAR 0 3
15730: PUSH
15731: LD_INT 6
15733: EQUAL
15734: IFFALSE 15744
// sArmoury := true ;
15736: LD_ADDR_EXP 45
15740: PUSH
15741: LD_INT 1
15743: ST_TO_ADDR
// if p3 = 7 then
15744: LD_VAR 0 3
15748: PUSH
15749: LD_INT 7
15751: EQUAL
15752: IFFALSE 15762
// sRadar := true ;
15754: LD_ADDR_EXP 46
15758: PUSH
15759: LD_INT 1
15761: ST_TO_ADDR
// if p3 = 8 then
15762: LD_VAR 0 3
15766: PUSH
15767: LD_INT 8
15769: EQUAL
15770: IFFALSE 15780
// sBunker := true ;
15772: LD_ADDR_EXP 47
15776: PUSH
15777: LD_INT 1
15779: ST_TO_ADDR
// if p3 = 9 then
15780: LD_VAR 0 3
15784: PUSH
15785: LD_INT 9
15787: EQUAL
15788: IFFALSE 15798
// sHack := true ;
15790: LD_ADDR_EXP 48
15794: PUSH
15795: LD_INT 1
15797: ST_TO_ADDR
// if p3 = 10 then
15798: LD_VAR 0 3
15802: PUSH
15803: LD_INT 10
15805: EQUAL
15806: IFFALSE 15816
// sFire := true ;
15808: LD_ADDR_EXP 49
15812: PUSH
15813: LD_INT 1
15815: ST_TO_ADDR
// if p3 = 11 then
15816: LD_VAR 0 3
15820: PUSH
15821: LD_INT 11
15823: EQUAL
15824: IFFALSE 15834
// sRefresh := true ;
15826: LD_ADDR_EXP 50
15830: PUSH
15831: LD_INT 1
15833: ST_TO_ADDR
// if p3 = 12 then
15834: LD_VAR 0 3
15838: PUSH
15839: LD_INT 12
15841: EQUAL
15842: IFFALSE 15852
// sExp := true ;
15844: LD_ADDR_EXP 51
15848: PUSH
15849: LD_INT 1
15851: ST_TO_ADDR
// if p3 = 13 then
15852: LD_VAR 0 3
15856: PUSH
15857: LD_INT 13
15859: EQUAL
15860: IFFALSE 15870
// sDepot := true ;
15862: LD_ADDR_EXP 52
15866: PUSH
15867: LD_INT 1
15869: ST_TO_ADDR
// if p3 = 14 then
15870: LD_VAR 0 3
15874: PUSH
15875: LD_INT 14
15877: EQUAL
15878: IFFALSE 15888
// sFlag := true ;
15880: LD_ADDR_EXP 53
15884: PUSH
15885: LD_INT 1
15887: ST_TO_ADDR
// if p3 = 15 then
15888: LD_VAR 0 3
15892: PUSH
15893: LD_INT 15
15895: EQUAL
15896: IFFALSE 15906
// sKamikadze := true ;
15898: LD_ADDR_EXP 61
15902: PUSH
15903: LD_INT 1
15905: ST_TO_ADDR
// if p3 = 16 then
15906: LD_VAR 0 3
15910: PUSH
15911: LD_INT 16
15913: EQUAL
15914: IFFALSE 15924
// sTroll := true ;
15916: LD_ADDR_EXP 62
15920: PUSH
15921: LD_INT 1
15923: ST_TO_ADDR
// if p3 = 17 then
15924: LD_VAR 0 3
15928: PUSH
15929: LD_INT 17
15931: EQUAL
15932: IFFALSE 15942
// sSlow := true ;
15934: LD_ADDR_EXP 63
15938: PUSH
15939: LD_INT 1
15941: ST_TO_ADDR
// if p3 = 18 then
15942: LD_VAR 0 3
15946: PUSH
15947: LD_INT 18
15949: EQUAL
15950: IFFALSE 15960
// sLack := true ;
15952: LD_ADDR_EXP 64
15956: PUSH
15957: LD_INT 1
15959: ST_TO_ADDR
// if p3 = 19 then
15960: LD_VAR 0 3
15964: PUSH
15965: LD_INT 19
15967: EQUAL
15968: IFFALSE 15978
// sTank := true ;
15970: LD_ADDR_EXP 66
15974: PUSH
15975: LD_INT 1
15977: ST_TO_ADDR
// if p3 = 20 then
15978: LD_VAR 0 3
15982: PUSH
15983: LD_INT 20
15985: EQUAL
15986: IFFALSE 15996
// sRemote := true ;
15988: LD_ADDR_EXP 67
15992: PUSH
15993: LD_INT 1
15995: ST_TO_ADDR
// if p3 = 21 then
15996: LD_VAR 0 3
16000: PUSH
16001: LD_INT 21
16003: EQUAL
16004: IFFALSE 16014
// sPowell := true ;
16006: LD_ADDR_EXP 68
16010: PUSH
16011: LD_INT 1
16013: ST_TO_ADDR
// if p3 = 22 then
16014: LD_VAR 0 3
16018: PUSH
16019: LD_INT 22
16021: EQUAL
16022: IFFALSE 16032
// sTeleport := true ;
16024: LD_ADDR_EXP 71
16028: PUSH
16029: LD_INT 1
16031: ST_TO_ADDR
// if p3 = 23 then
16032: LD_VAR 0 3
16036: PUSH
16037: LD_INT 23
16039: EQUAL
16040: IFFALSE 16050
// sOilTower := true ;
16042: LD_ADDR_EXP 73
16046: PUSH
16047: LD_INT 1
16049: ST_TO_ADDR
// if p3 = 24 then
16050: LD_VAR 0 3
16054: PUSH
16055: LD_INT 24
16057: EQUAL
16058: IFFALSE 16068
// sShovel := true ;
16060: LD_ADDR_EXP 74
16064: PUSH
16065: LD_INT 1
16067: ST_TO_ADDR
// if p3 = 25 then
16068: LD_VAR 0 3
16072: PUSH
16073: LD_INT 25
16075: EQUAL
16076: IFFALSE 16086
// sSheik := true ;
16078: LD_ADDR_EXP 75
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// if p3 = 26 then
16086: LD_VAR 0 3
16090: PUSH
16091: LD_INT 26
16093: EQUAL
16094: IFFALSE 16104
// sEarthquake := true ;
16096: LD_ADDR_EXP 77
16100: PUSH
16101: LD_INT 1
16103: ST_TO_ADDR
// if p3 = 27 then
16104: LD_VAR 0 3
16108: PUSH
16109: LD_INT 27
16111: EQUAL
16112: IFFALSE 16122
// sAI := true ;
16114: LD_ADDR_EXP 78
16118: PUSH
16119: LD_INT 1
16121: ST_TO_ADDR
// if p3 = 28 then
16122: LD_VAR 0 3
16126: PUSH
16127: LD_INT 28
16129: EQUAL
16130: IFFALSE 16140
// sCargo := true ;
16132: LD_ADDR_EXP 81
16136: PUSH
16137: LD_INT 1
16139: ST_TO_ADDR
// if p3 = 29 then
16140: LD_VAR 0 3
16144: PUSH
16145: LD_INT 29
16147: EQUAL
16148: IFFALSE 16158
// sDLaser := true ;
16150: LD_ADDR_EXP 82
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// if p3 = 30 then
16158: LD_VAR 0 3
16162: PUSH
16163: LD_INT 30
16165: EQUAL
16166: IFFALSE 16176
// sExchange := true ;
16168: LD_ADDR_EXP 83
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// if p3 = 31 then
16176: LD_VAR 0 3
16180: PUSH
16181: LD_INT 31
16183: EQUAL
16184: IFFALSE 16194
// sFac := true ;
16186: LD_ADDR_EXP 84
16190: PUSH
16191: LD_INT 1
16193: ST_TO_ADDR
// if p3 = 32 then
16194: LD_VAR 0 3
16198: PUSH
16199: LD_INT 32
16201: EQUAL
16202: IFFALSE 16212
// sPower := true ;
16204: LD_ADDR_EXP 85
16208: PUSH
16209: LD_INT 1
16211: ST_TO_ADDR
// if p3 = 33 then
16212: LD_VAR 0 3
16216: PUSH
16217: LD_INT 33
16219: EQUAL
16220: IFFALSE 16230
// sRandom := true ;
16222: LD_ADDR_EXP 86
16226: PUSH
16227: LD_INT 1
16229: ST_TO_ADDR
// if p3 = 34 then
16230: LD_VAR 0 3
16234: PUSH
16235: LD_INT 34
16237: EQUAL
16238: IFFALSE 16248
// sShield := true ;
16240: LD_ADDR_EXP 87
16244: PUSH
16245: LD_INT 1
16247: ST_TO_ADDR
// if p3 = 35 then
16248: LD_VAR 0 3
16252: PUSH
16253: LD_INT 35
16255: EQUAL
16256: IFFALSE 16266
// sTime := true ;
16258: LD_ADDR_EXP 88
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// if p3 = 36 then
16266: LD_VAR 0 3
16270: PUSH
16271: LD_INT 36
16273: EQUAL
16274: IFFALSE 16284
// sTools := true ;
16276: LD_ADDR_EXP 89
16280: PUSH
16281: LD_INT 1
16283: ST_TO_ADDR
// if p3 = 101 then
16284: LD_VAR 0 3
16288: PUSH
16289: LD_INT 101
16291: EQUAL
16292: IFFALSE 16302
// sSold := true ;
16294: LD_ADDR_EXP 54
16298: PUSH
16299: LD_INT 1
16301: ST_TO_ADDR
// if p3 = 102 then
16302: LD_VAR 0 3
16306: PUSH
16307: LD_INT 102
16309: EQUAL
16310: IFFALSE 16320
// sDiff := true ;
16312: LD_ADDR_EXP 55
16316: PUSH
16317: LD_INT 1
16319: ST_TO_ADDR
// if p3 = 103 then
16320: LD_VAR 0 3
16324: PUSH
16325: LD_INT 103
16327: EQUAL
16328: IFFALSE 16338
// sFog := true ;
16330: LD_ADDR_EXP 58
16334: PUSH
16335: LD_INT 1
16337: ST_TO_ADDR
// if p3 = 104 then
16338: LD_VAR 0 3
16342: PUSH
16343: LD_INT 104
16345: EQUAL
16346: IFFALSE 16356
// sReset := true ;
16348: LD_ADDR_EXP 59
16352: PUSH
16353: LD_INT 1
16355: ST_TO_ADDR
// if p3 = 105 then
16356: LD_VAR 0 3
16360: PUSH
16361: LD_INT 105
16363: EQUAL
16364: IFFALSE 16374
// sSun := true ;
16366: LD_ADDR_EXP 60
16370: PUSH
16371: LD_INT 1
16373: ST_TO_ADDR
// if p3 = 106 then
16374: LD_VAR 0 3
16378: PUSH
16379: LD_INT 106
16381: EQUAL
16382: IFFALSE 16392
// sTiger := true ;
16384: LD_ADDR_EXP 56
16388: PUSH
16389: LD_INT 1
16391: ST_TO_ADDR
// if p3 = 107 then
16392: LD_VAR 0 3
16396: PUSH
16397: LD_INT 107
16399: EQUAL
16400: IFFALSE 16410
// sBomb := true ;
16402: LD_ADDR_EXP 57
16406: PUSH
16407: LD_INT 1
16409: ST_TO_ADDR
// if p3 = 108 then
16410: LD_VAR 0 3
16414: PUSH
16415: LD_INT 108
16417: EQUAL
16418: IFFALSE 16428
// sWound := true ;
16420: LD_ADDR_EXP 65
16424: PUSH
16425: LD_INT 1
16427: ST_TO_ADDR
// if p3 = 109 then
16428: LD_VAR 0 3
16432: PUSH
16433: LD_INT 109
16435: EQUAL
16436: IFFALSE 16446
// sBetray := true ;
16438: LD_ADDR_EXP 69
16442: PUSH
16443: LD_INT 1
16445: ST_TO_ADDR
// if p3 = 110 then
16446: LD_VAR 0 3
16450: PUSH
16451: LD_INT 110
16453: EQUAL
16454: IFFALSE 16464
// sContamin := true ;
16456: LD_ADDR_EXP 70
16460: PUSH
16461: LD_INT 1
16463: ST_TO_ADDR
// if p3 = 111 then
16464: LD_VAR 0 3
16468: PUSH
16469: LD_INT 111
16471: EQUAL
16472: IFFALSE 16482
// sOil := true ;
16474: LD_ADDR_EXP 72
16478: PUSH
16479: LD_INT 1
16481: ST_TO_ADDR
// if p3 = 112 then
16482: LD_VAR 0 3
16486: PUSH
16487: LD_INT 112
16489: EQUAL
16490: IFFALSE 16500
// sStu := true ;
16492: LD_ADDR_EXP 76
16496: PUSH
16497: LD_INT 1
16499: ST_TO_ADDR
// if p3 = 113 then
16500: LD_VAR 0 3
16504: PUSH
16505: LD_INT 113
16507: EQUAL
16508: IFFALSE 16518
// sBazooka := true ;
16510: LD_ADDR_EXP 79
16514: PUSH
16515: LD_INT 1
16517: ST_TO_ADDR
// if p3 = 114 then
16518: LD_VAR 0 3
16522: PUSH
16523: LD_INT 114
16525: EQUAL
16526: IFFALSE 16536
// sMortar := true ;
16528: LD_ADDR_EXP 80
16532: PUSH
16533: LD_INT 1
16535: ST_TO_ADDR
// if p3 = 115 then
16536: LD_VAR 0 3
16540: PUSH
16541: LD_INT 115
16543: EQUAL
16544: IFFALSE 16554
// sRanger := true ;
16546: LD_ADDR_EXP 90
16550: PUSH
16551: LD_INT 1
16553: ST_TO_ADDR
// if p3 = 116 then
16554: LD_VAR 0 3
16558: PUSH
16559: LD_INT 116
16561: EQUAL
16562: IFFALSE 16572
// sComputer := true ;
16564: LD_ADDR_EXP 91
16568: PUSH
16569: LD_INT 1
16571: ST_TO_ADDR
// if p3 = 117 then
16572: LD_VAR 0 3
16576: PUSH
16577: LD_INT 117
16579: EQUAL
16580: IFFALSE 16590
// s30 := true ;
16582: LD_ADDR_EXP 92
16586: PUSH
16587: LD_INT 1
16589: ST_TO_ADDR
// if p3 = 118 then
16590: LD_VAR 0 3
16594: PUSH
16595: LD_INT 118
16597: EQUAL
16598: IFFALSE 16608
// s60 := true ;
16600: LD_ADDR_EXP 93
16604: PUSH
16605: LD_INT 1
16607: ST_TO_ADDR
// end ; if p2 = hack_mode then
16608: LD_VAR 0 2
16612: PUSH
16613: LD_INT 101
16615: EQUAL
16616: IFFALSE 16744
// begin case p3 of 1 :
16618: LD_VAR 0 3
16622: PUSH
16623: LD_INT 1
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 16638
16631: POP
// hHackUnlimitedResources ; 2 :
16632: CALL 28891 0 0
16636: GO 16744
16638: LD_INT 2
16640: DOUBLE
16641: EQUAL
16642: IFTRUE 16646
16644: GO 16653
16646: POP
// hHackSetLevel10 ; 3 :
16647: CALL 29024 0 0
16651: GO 16744
16653: LD_INT 3
16655: DOUBLE
16656: EQUAL
16657: IFTRUE 16661
16659: GO 16668
16661: POP
// hHackSetLevel10YourUnits ; 4 :
16662: CALL 29109 0 0
16666: GO 16744
16668: LD_INT 4
16670: DOUBLE
16671: EQUAL
16672: IFTRUE 16676
16674: GO 16683
16676: POP
// hHackInvincible ; 5 :
16677: CALL 29557 0 0
16681: GO 16744
16683: LD_INT 5
16685: DOUBLE
16686: EQUAL
16687: IFTRUE 16691
16689: GO 16698
16691: POP
// hHackInvisible ; 6 :
16692: CALL 29668 0 0
16696: GO 16744
16698: LD_INT 6
16700: DOUBLE
16701: EQUAL
16702: IFTRUE 16706
16704: GO 16713
16706: POP
// hHackChangeYourSide ; 7 :
16707: CALL 29725 0 0
16711: GO 16744
16713: LD_INT 7
16715: DOUBLE
16716: EQUAL
16717: IFTRUE 16721
16719: GO 16728
16721: POP
// hHackChangeUnitSide ; 8 :
16722: CALL 29767 0 0
16726: GO 16744
16728: LD_INT 8
16730: DOUBLE
16731: EQUAL
16732: IFTRUE 16736
16734: GO 16743
16736: POP
// hHackFog ; end ;
16737: CALL 29868 0 0
16741: GO 16744
16743: POP
// end ; if p2 = game_save_mode then
16744: LD_VAR 0 2
16748: PUSH
16749: LD_INT 102
16751: EQUAL
16752: IFFALSE 16807
// begin if p3 = 1 then
16754: LD_VAR 0 3
16758: PUSH
16759: LD_INT 1
16761: EQUAL
16762: IFFALSE 16774
// globalGameSaveCounter := p4 ;
16764: LD_ADDR_EXP 36
16768: PUSH
16769: LD_VAR 0 4
16773: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16774: LD_VAR 0 3
16778: PUSH
16779: LD_INT 2
16781: EQUAL
16782: PUSH
16783: LD_EXP 36
16787: AND
16788: IFFALSE 16807
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16790: LD_STRING setGameSaveCounter(
16792: PUSH
16793: LD_EXP 36
16797: STR
16798: PUSH
16799: LD_STRING )
16801: STR
16802: PPUSH
16803: CALL_OW 559
// end ; end ;
16807: LD_VAR 0 7
16811: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16812: LD_INT 0
16814: PPUSH
// streamModeActive := false ;
16815: LD_ADDR_EXP 37
16819: PUSH
16820: LD_INT 0
16822: ST_TO_ADDR
// normalCounter := 36 ;
16823: LD_ADDR_EXP 38
16827: PUSH
16828: LD_INT 36
16830: ST_TO_ADDR
// hardcoreCounter := 18 ;
16831: LD_ADDR_EXP 39
16835: PUSH
16836: LD_INT 18
16838: ST_TO_ADDR
// sRocket := false ;
16839: LD_ADDR_EXP 42
16843: PUSH
16844: LD_INT 0
16846: ST_TO_ADDR
// sSpeed := false ;
16847: LD_ADDR_EXP 41
16851: PUSH
16852: LD_INT 0
16854: ST_TO_ADDR
// sEngine := false ;
16855: LD_ADDR_EXP 43
16859: PUSH
16860: LD_INT 0
16862: ST_TO_ADDR
// sSpec := false ;
16863: LD_ADDR_EXP 40
16867: PUSH
16868: LD_INT 0
16870: ST_TO_ADDR
// sLevel := false ;
16871: LD_ADDR_EXP 44
16875: PUSH
16876: LD_INT 0
16878: ST_TO_ADDR
// sArmoury := false ;
16879: LD_ADDR_EXP 45
16883: PUSH
16884: LD_INT 0
16886: ST_TO_ADDR
// sRadar := false ;
16887: LD_ADDR_EXP 46
16891: PUSH
16892: LD_INT 0
16894: ST_TO_ADDR
// sBunker := false ;
16895: LD_ADDR_EXP 47
16899: PUSH
16900: LD_INT 0
16902: ST_TO_ADDR
// sHack := false ;
16903: LD_ADDR_EXP 48
16907: PUSH
16908: LD_INT 0
16910: ST_TO_ADDR
// sFire := false ;
16911: LD_ADDR_EXP 49
16915: PUSH
16916: LD_INT 0
16918: ST_TO_ADDR
// sRefresh := false ;
16919: LD_ADDR_EXP 50
16923: PUSH
16924: LD_INT 0
16926: ST_TO_ADDR
// sExp := false ;
16927: LD_ADDR_EXP 51
16931: PUSH
16932: LD_INT 0
16934: ST_TO_ADDR
// sDepot := false ;
16935: LD_ADDR_EXP 52
16939: PUSH
16940: LD_INT 0
16942: ST_TO_ADDR
// sFlag := false ;
16943: LD_ADDR_EXP 53
16947: PUSH
16948: LD_INT 0
16950: ST_TO_ADDR
// sKamikadze := false ;
16951: LD_ADDR_EXP 61
16955: PUSH
16956: LD_INT 0
16958: ST_TO_ADDR
// sTroll := false ;
16959: LD_ADDR_EXP 62
16963: PUSH
16964: LD_INT 0
16966: ST_TO_ADDR
// sSlow := false ;
16967: LD_ADDR_EXP 63
16971: PUSH
16972: LD_INT 0
16974: ST_TO_ADDR
// sLack := false ;
16975: LD_ADDR_EXP 64
16979: PUSH
16980: LD_INT 0
16982: ST_TO_ADDR
// sTank := false ;
16983: LD_ADDR_EXP 66
16987: PUSH
16988: LD_INT 0
16990: ST_TO_ADDR
// sRemote := false ;
16991: LD_ADDR_EXP 67
16995: PUSH
16996: LD_INT 0
16998: ST_TO_ADDR
// sPowell := false ;
16999: LD_ADDR_EXP 68
17003: PUSH
17004: LD_INT 0
17006: ST_TO_ADDR
// sTeleport := false ;
17007: LD_ADDR_EXP 71
17011: PUSH
17012: LD_INT 0
17014: ST_TO_ADDR
// sOilTower := false ;
17015: LD_ADDR_EXP 73
17019: PUSH
17020: LD_INT 0
17022: ST_TO_ADDR
// sShovel := false ;
17023: LD_ADDR_EXP 74
17027: PUSH
17028: LD_INT 0
17030: ST_TO_ADDR
// sSheik := false ;
17031: LD_ADDR_EXP 75
17035: PUSH
17036: LD_INT 0
17038: ST_TO_ADDR
// sEarthquake := false ;
17039: LD_ADDR_EXP 77
17043: PUSH
17044: LD_INT 0
17046: ST_TO_ADDR
// sAI := false ;
17047: LD_ADDR_EXP 78
17051: PUSH
17052: LD_INT 0
17054: ST_TO_ADDR
// sCargo := false ;
17055: LD_ADDR_EXP 81
17059: PUSH
17060: LD_INT 0
17062: ST_TO_ADDR
// sDLaser := false ;
17063: LD_ADDR_EXP 82
17067: PUSH
17068: LD_INT 0
17070: ST_TO_ADDR
// sExchange := false ;
17071: LD_ADDR_EXP 83
17075: PUSH
17076: LD_INT 0
17078: ST_TO_ADDR
// sFac := false ;
17079: LD_ADDR_EXP 84
17083: PUSH
17084: LD_INT 0
17086: ST_TO_ADDR
// sPower := false ;
17087: LD_ADDR_EXP 85
17091: PUSH
17092: LD_INT 0
17094: ST_TO_ADDR
// sRandom := false ;
17095: LD_ADDR_EXP 86
17099: PUSH
17100: LD_INT 0
17102: ST_TO_ADDR
// sShield := false ;
17103: LD_ADDR_EXP 87
17107: PUSH
17108: LD_INT 0
17110: ST_TO_ADDR
// sTime := false ;
17111: LD_ADDR_EXP 88
17115: PUSH
17116: LD_INT 0
17118: ST_TO_ADDR
// sTools := false ;
17119: LD_ADDR_EXP 89
17123: PUSH
17124: LD_INT 0
17126: ST_TO_ADDR
// sSold := false ;
17127: LD_ADDR_EXP 54
17131: PUSH
17132: LD_INT 0
17134: ST_TO_ADDR
// sDiff := false ;
17135: LD_ADDR_EXP 55
17139: PUSH
17140: LD_INT 0
17142: ST_TO_ADDR
// sFog := false ;
17143: LD_ADDR_EXP 58
17147: PUSH
17148: LD_INT 0
17150: ST_TO_ADDR
// sReset := false ;
17151: LD_ADDR_EXP 59
17155: PUSH
17156: LD_INT 0
17158: ST_TO_ADDR
// sSun := false ;
17159: LD_ADDR_EXP 60
17163: PUSH
17164: LD_INT 0
17166: ST_TO_ADDR
// sTiger := false ;
17167: LD_ADDR_EXP 56
17171: PUSH
17172: LD_INT 0
17174: ST_TO_ADDR
// sBomb := false ;
17175: LD_ADDR_EXP 57
17179: PUSH
17180: LD_INT 0
17182: ST_TO_ADDR
// sWound := false ;
17183: LD_ADDR_EXP 65
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// sBetray := false ;
17191: LD_ADDR_EXP 69
17195: PUSH
17196: LD_INT 0
17198: ST_TO_ADDR
// sContamin := false ;
17199: LD_ADDR_EXP 70
17203: PUSH
17204: LD_INT 0
17206: ST_TO_ADDR
// sOil := false ;
17207: LD_ADDR_EXP 72
17211: PUSH
17212: LD_INT 0
17214: ST_TO_ADDR
// sStu := false ;
17215: LD_ADDR_EXP 76
17219: PUSH
17220: LD_INT 0
17222: ST_TO_ADDR
// sBazooka := false ;
17223: LD_ADDR_EXP 79
17227: PUSH
17228: LD_INT 0
17230: ST_TO_ADDR
// sMortar := false ;
17231: LD_ADDR_EXP 80
17235: PUSH
17236: LD_INT 0
17238: ST_TO_ADDR
// sRanger := false ;
17239: LD_ADDR_EXP 90
17243: PUSH
17244: LD_INT 0
17246: ST_TO_ADDR
// sComputer := false ;
17247: LD_ADDR_EXP 91
17251: PUSH
17252: LD_INT 0
17254: ST_TO_ADDR
// s30 := false ;
17255: LD_ADDR_EXP 92
17259: PUSH
17260: LD_INT 0
17262: ST_TO_ADDR
// s60 := false ;
17263: LD_ADDR_EXP 93
17267: PUSH
17268: LD_INT 0
17270: ST_TO_ADDR
// end ;
17271: LD_VAR 0 1
17275: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17276: LD_INT 0
17278: PPUSH
17279: PPUSH
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
// result := [ ] ;
17285: LD_ADDR_VAR 0 2
17289: PUSH
17290: EMPTY
17291: ST_TO_ADDR
// if campaign_id = 1 then
17292: LD_OWVAR 69
17296: PUSH
17297: LD_INT 1
17299: EQUAL
17300: IFFALSE 20466
// begin case mission_number of 1 :
17302: LD_OWVAR 70
17306: PUSH
17307: LD_INT 1
17309: DOUBLE
17310: EQUAL
17311: IFTRUE 17315
17313: GO 17391
17315: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: LD_INT 4
17326: PUSH
17327: LD_INT 11
17329: PUSH
17330: LD_INT 12
17332: PUSH
17333: LD_INT 15
17335: PUSH
17336: LD_INT 16
17338: PUSH
17339: LD_INT 22
17341: PUSH
17342: LD_INT 23
17344: PUSH
17345: LD_INT 26
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 101
17361: PUSH
17362: LD_INT 102
17364: PUSH
17365: LD_INT 106
17367: PUSH
17368: LD_INT 116
17370: PUSH
17371: LD_INT 117
17373: PUSH
17374: LD_INT 118
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: ST_TO_ADDR
17389: GO 20464
17391: LD_INT 2
17393: DOUBLE
17394: EQUAL
17395: IFTRUE 17399
17397: GO 17483
17399: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17400: LD_ADDR_VAR 0 2
17404: PUSH
17405: LD_INT 2
17407: PUSH
17408: LD_INT 4
17410: PUSH
17411: LD_INT 11
17413: PUSH
17414: LD_INT 12
17416: PUSH
17417: LD_INT 15
17419: PUSH
17420: LD_INT 16
17422: PUSH
17423: LD_INT 22
17425: PUSH
17426: LD_INT 23
17428: PUSH
17429: LD_INT 26
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 101
17445: PUSH
17446: LD_INT 102
17448: PUSH
17449: LD_INT 105
17451: PUSH
17452: LD_INT 106
17454: PUSH
17455: LD_INT 108
17457: PUSH
17458: LD_INT 116
17460: PUSH
17461: LD_INT 117
17463: PUSH
17464: LD_INT 118
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: ST_TO_ADDR
17481: GO 20464
17483: LD_INT 3
17485: DOUBLE
17486: EQUAL
17487: IFTRUE 17491
17489: GO 17579
17491: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17492: LD_ADDR_VAR 0 2
17496: PUSH
17497: LD_INT 2
17499: PUSH
17500: LD_INT 4
17502: PUSH
17503: LD_INT 5
17505: PUSH
17506: LD_INT 11
17508: PUSH
17509: LD_INT 12
17511: PUSH
17512: LD_INT 15
17514: PUSH
17515: LD_INT 16
17517: PUSH
17518: LD_INT 22
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: LD_INT 36
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 101
17541: PUSH
17542: LD_INT 102
17544: PUSH
17545: LD_INT 105
17547: PUSH
17548: LD_INT 106
17550: PUSH
17551: LD_INT 108
17553: PUSH
17554: LD_INT 116
17556: PUSH
17557: LD_INT 117
17559: PUSH
17560: LD_INT 118
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: ST_TO_ADDR
17577: GO 20464
17579: LD_INT 4
17581: DOUBLE
17582: EQUAL
17583: IFTRUE 17587
17585: GO 17683
17587: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17588: LD_ADDR_VAR 0 2
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: LD_INT 4
17598: PUSH
17599: LD_INT 5
17601: PUSH
17602: LD_INT 8
17604: PUSH
17605: LD_INT 11
17607: PUSH
17608: LD_INT 12
17610: PUSH
17611: LD_INT 15
17613: PUSH
17614: LD_INT 16
17616: PUSH
17617: LD_INT 22
17619: PUSH
17620: LD_INT 23
17622: PUSH
17623: LD_INT 26
17625: PUSH
17626: LD_INT 36
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 101
17645: PUSH
17646: LD_INT 102
17648: PUSH
17649: LD_INT 105
17651: PUSH
17652: LD_INT 106
17654: PUSH
17655: LD_INT 108
17657: PUSH
17658: LD_INT 116
17660: PUSH
17661: LD_INT 117
17663: PUSH
17664: LD_INT 118
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: ST_TO_ADDR
17681: GO 20464
17683: LD_INT 5
17685: DOUBLE
17686: EQUAL
17687: IFTRUE 17691
17689: GO 17803
17691: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17692: LD_ADDR_VAR 0 2
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: LD_INT 4
17702: PUSH
17703: LD_INT 5
17705: PUSH
17706: LD_INT 6
17708: PUSH
17709: LD_INT 8
17711: PUSH
17712: LD_INT 11
17714: PUSH
17715: LD_INT 12
17717: PUSH
17718: LD_INT 15
17720: PUSH
17721: LD_INT 16
17723: PUSH
17724: LD_INT 22
17726: PUSH
17727: LD_INT 23
17729: PUSH
17730: LD_INT 25
17732: PUSH
17733: LD_INT 26
17735: PUSH
17736: LD_INT 36
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 101
17757: PUSH
17758: LD_INT 102
17760: PUSH
17761: LD_INT 105
17763: PUSH
17764: LD_INT 106
17766: PUSH
17767: LD_INT 108
17769: PUSH
17770: LD_INT 109
17772: PUSH
17773: LD_INT 112
17775: PUSH
17776: LD_INT 116
17778: PUSH
17779: LD_INT 117
17781: PUSH
17782: LD_INT 118
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: ST_TO_ADDR
17801: GO 20464
17803: LD_INT 6
17805: DOUBLE
17806: EQUAL
17807: IFTRUE 17811
17809: GO 17943
17811: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17812: LD_ADDR_VAR 0 2
17816: PUSH
17817: LD_INT 2
17819: PUSH
17820: LD_INT 4
17822: PUSH
17823: LD_INT 5
17825: PUSH
17826: LD_INT 6
17828: PUSH
17829: LD_INT 8
17831: PUSH
17832: LD_INT 11
17834: PUSH
17835: LD_INT 12
17837: PUSH
17838: LD_INT 15
17840: PUSH
17841: LD_INT 16
17843: PUSH
17844: LD_INT 20
17846: PUSH
17847: LD_INT 21
17849: PUSH
17850: LD_INT 22
17852: PUSH
17853: LD_INT 23
17855: PUSH
17856: LD_INT 25
17858: PUSH
17859: LD_INT 26
17861: PUSH
17862: LD_INT 30
17864: PUSH
17865: LD_INT 31
17867: PUSH
17868: LD_INT 32
17870: PUSH
17871: LD_INT 36
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 101
17897: PUSH
17898: LD_INT 102
17900: PUSH
17901: LD_INT 105
17903: PUSH
17904: LD_INT 106
17906: PUSH
17907: LD_INT 108
17909: PUSH
17910: LD_INT 109
17912: PUSH
17913: LD_INT 112
17915: PUSH
17916: LD_INT 116
17918: PUSH
17919: LD_INT 117
17921: PUSH
17922: LD_INT 118
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: ST_TO_ADDR
17941: GO 20464
17943: LD_INT 7
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 18063
17951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17952: LD_ADDR_VAR 0 2
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 4
17962: PUSH
17963: LD_INT 5
17965: PUSH
17966: LD_INT 7
17968: PUSH
17969: LD_INT 11
17971: PUSH
17972: LD_INT 12
17974: PUSH
17975: LD_INT 15
17977: PUSH
17978: LD_INT 16
17980: PUSH
17981: LD_INT 20
17983: PUSH
17984: LD_INT 21
17986: PUSH
17987: LD_INT 22
17989: PUSH
17990: LD_INT 23
17992: PUSH
17993: LD_INT 25
17995: PUSH
17996: LD_INT 26
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 101
18017: PUSH
18018: LD_INT 102
18020: PUSH
18021: LD_INT 103
18023: PUSH
18024: LD_INT 105
18026: PUSH
18027: LD_INT 106
18029: PUSH
18030: LD_INT 108
18032: PUSH
18033: LD_INT 112
18035: PUSH
18036: LD_INT 116
18038: PUSH
18039: LD_INT 117
18041: PUSH
18042: LD_INT 118
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: ST_TO_ADDR
18061: GO 20464
18063: LD_INT 8
18065: DOUBLE
18066: EQUAL
18067: IFTRUE 18071
18069: GO 18211
18071: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18072: LD_ADDR_VAR 0 2
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: LD_INT 4
18082: PUSH
18083: LD_INT 5
18085: PUSH
18086: LD_INT 6
18088: PUSH
18089: LD_INT 7
18091: PUSH
18092: LD_INT 8
18094: PUSH
18095: LD_INT 11
18097: PUSH
18098: LD_INT 12
18100: PUSH
18101: LD_INT 15
18103: PUSH
18104: LD_INT 16
18106: PUSH
18107: LD_INT 20
18109: PUSH
18110: LD_INT 21
18112: PUSH
18113: LD_INT 22
18115: PUSH
18116: LD_INT 23
18118: PUSH
18119: LD_INT 25
18121: PUSH
18122: LD_INT 26
18124: PUSH
18125: LD_INT 30
18127: PUSH
18128: LD_INT 31
18130: PUSH
18131: LD_INT 32
18133: PUSH
18134: LD_INT 36
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 101
18161: PUSH
18162: LD_INT 102
18164: PUSH
18165: LD_INT 103
18167: PUSH
18168: LD_INT 105
18170: PUSH
18171: LD_INT 106
18173: PUSH
18174: LD_INT 108
18176: PUSH
18177: LD_INT 109
18179: PUSH
18180: LD_INT 112
18182: PUSH
18183: LD_INT 116
18185: PUSH
18186: LD_INT 117
18188: PUSH
18189: LD_INT 118
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: ST_TO_ADDR
18209: GO 20464
18211: LD_INT 9
18213: DOUBLE
18214: EQUAL
18215: IFTRUE 18219
18217: GO 18367
18219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: LD_INT 5
18233: PUSH
18234: LD_INT 6
18236: PUSH
18237: LD_INT 7
18239: PUSH
18240: LD_INT 8
18242: PUSH
18243: LD_INT 11
18245: PUSH
18246: LD_INT 12
18248: PUSH
18249: LD_INT 15
18251: PUSH
18252: LD_INT 16
18254: PUSH
18255: LD_INT 20
18257: PUSH
18258: LD_INT 21
18260: PUSH
18261: LD_INT 22
18263: PUSH
18264: LD_INT 23
18266: PUSH
18267: LD_INT 25
18269: PUSH
18270: LD_INT 26
18272: PUSH
18273: LD_INT 28
18275: PUSH
18276: LD_INT 30
18278: PUSH
18279: LD_INT 31
18281: PUSH
18282: LD_INT 32
18284: PUSH
18285: LD_INT 36
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 101
18313: PUSH
18314: LD_INT 102
18316: PUSH
18317: LD_INT 103
18319: PUSH
18320: LD_INT 105
18322: PUSH
18323: LD_INT 106
18325: PUSH
18326: LD_INT 108
18328: PUSH
18329: LD_INT 109
18331: PUSH
18332: LD_INT 112
18334: PUSH
18335: LD_INT 114
18337: PUSH
18338: LD_INT 116
18340: PUSH
18341: LD_INT 117
18343: PUSH
18344: LD_INT 118
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: ST_TO_ADDR
18365: GO 20464
18367: LD_INT 10
18369: DOUBLE
18370: EQUAL
18371: IFTRUE 18375
18373: GO 18571
18375: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18376: LD_ADDR_VAR 0 2
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: LD_INT 4
18386: PUSH
18387: LD_INT 5
18389: PUSH
18390: LD_INT 6
18392: PUSH
18393: LD_INT 7
18395: PUSH
18396: LD_INT 8
18398: PUSH
18399: LD_INT 9
18401: PUSH
18402: LD_INT 10
18404: PUSH
18405: LD_INT 11
18407: PUSH
18408: LD_INT 12
18410: PUSH
18411: LD_INT 13
18413: PUSH
18414: LD_INT 14
18416: PUSH
18417: LD_INT 15
18419: PUSH
18420: LD_INT 16
18422: PUSH
18423: LD_INT 17
18425: PUSH
18426: LD_INT 18
18428: PUSH
18429: LD_INT 19
18431: PUSH
18432: LD_INT 20
18434: PUSH
18435: LD_INT 21
18437: PUSH
18438: LD_INT 22
18440: PUSH
18441: LD_INT 23
18443: PUSH
18444: LD_INT 24
18446: PUSH
18447: LD_INT 25
18449: PUSH
18450: LD_INT 26
18452: PUSH
18453: LD_INT 28
18455: PUSH
18456: LD_INT 30
18458: PUSH
18459: LD_INT 31
18461: PUSH
18462: LD_INT 32
18464: PUSH
18465: LD_INT 36
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 101
18501: PUSH
18502: LD_INT 102
18504: PUSH
18505: LD_INT 103
18507: PUSH
18508: LD_INT 104
18510: PUSH
18511: LD_INT 105
18513: PUSH
18514: LD_INT 106
18516: PUSH
18517: LD_INT 107
18519: PUSH
18520: LD_INT 108
18522: PUSH
18523: LD_INT 109
18525: PUSH
18526: LD_INT 110
18528: PUSH
18529: LD_INT 111
18531: PUSH
18532: LD_INT 112
18534: PUSH
18535: LD_INT 114
18537: PUSH
18538: LD_INT 116
18540: PUSH
18541: LD_INT 117
18543: PUSH
18544: LD_INT 118
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: ST_TO_ADDR
18569: GO 20464
18571: LD_INT 11
18573: DOUBLE
18574: EQUAL
18575: IFTRUE 18579
18577: GO 18783
18579: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18580: LD_ADDR_VAR 0 2
18584: PUSH
18585: LD_INT 2
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 4
18593: PUSH
18594: LD_INT 5
18596: PUSH
18597: LD_INT 6
18599: PUSH
18600: LD_INT 7
18602: PUSH
18603: LD_INT 8
18605: PUSH
18606: LD_INT 9
18608: PUSH
18609: LD_INT 10
18611: PUSH
18612: LD_INT 11
18614: PUSH
18615: LD_INT 12
18617: PUSH
18618: LD_INT 13
18620: PUSH
18621: LD_INT 14
18623: PUSH
18624: LD_INT 15
18626: PUSH
18627: LD_INT 16
18629: PUSH
18630: LD_INT 17
18632: PUSH
18633: LD_INT 18
18635: PUSH
18636: LD_INT 19
18638: PUSH
18639: LD_INT 20
18641: PUSH
18642: LD_INT 21
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_INT 23
18650: PUSH
18651: LD_INT 24
18653: PUSH
18654: LD_INT 25
18656: PUSH
18657: LD_INT 26
18659: PUSH
18660: LD_INT 28
18662: PUSH
18663: LD_INT 30
18665: PUSH
18666: LD_INT 31
18668: PUSH
18669: LD_INT 32
18671: PUSH
18672: LD_INT 34
18674: PUSH
18675: LD_INT 36
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 101
18713: PUSH
18714: LD_INT 102
18716: PUSH
18717: LD_INT 103
18719: PUSH
18720: LD_INT 104
18722: PUSH
18723: LD_INT 105
18725: PUSH
18726: LD_INT 106
18728: PUSH
18729: LD_INT 107
18731: PUSH
18732: LD_INT 108
18734: PUSH
18735: LD_INT 109
18737: PUSH
18738: LD_INT 110
18740: PUSH
18741: LD_INT 111
18743: PUSH
18744: LD_INT 112
18746: PUSH
18747: LD_INT 114
18749: PUSH
18750: LD_INT 116
18752: PUSH
18753: LD_INT 117
18755: PUSH
18756: LD_INT 118
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: ST_TO_ADDR
18781: GO 20464
18783: LD_INT 12
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 19011
18791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18792: LD_ADDR_VAR 0 2
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: LD_INT 2
18802: PUSH
18803: LD_INT 3
18805: PUSH
18806: LD_INT 4
18808: PUSH
18809: LD_INT 5
18811: PUSH
18812: LD_INT 6
18814: PUSH
18815: LD_INT 7
18817: PUSH
18818: LD_INT 8
18820: PUSH
18821: LD_INT 9
18823: PUSH
18824: LD_INT 10
18826: PUSH
18827: LD_INT 11
18829: PUSH
18830: LD_INT 12
18832: PUSH
18833: LD_INT 13
18835: PUSH
18836: LD_INT 14
18838: PUSH
18839: LD_INT 15
18841: PUSH
18842: LD_INT 16
18844: PUSH
18845: LD_INT 17
18847: PUSH
18848: LD_INT 18
18850: PUSH
18851: LD_INT 19
18853: PUSH
18854: LD_INT 20
18856: PUSH
18857: LD_INT 21
18859: PUSH
18860: LD_INT 22
18862: PUSH
18863: LD_INT 23
18865: PUSH
18866: LD_INT 24
18868: PUSH
18869: LD_INT 25
18871: PUSH
18872: LD_INT 26
18874: PUSH
18875: LD_INT 27
18877: PUSH
18878: LD_INT 28
18880: PUSH
18881: LD_INT 30
18883: PUSH
18884: LD_INT 31
18886: PUSH
18887: LD_INT 32
18889: PUSH
18890: LD_INT 33
18892: PUSH
18893: LD_INT 34
18895: PUSH
18896: LD_INT 36
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 101
18937: PUSH
18938: LD_INT 102
18940: PUSH
18941: LD_INT 103
18943: PUSH
18944: LD_INT 104
18946: PUSH
18947: LD_INT 105
18949: PUSH
18950: LD_INT 106
18952: PUSH
18953: LD_INT 107
18955: PUSH
18956: LD_INT 108
18958: PUSH
18959: LD_INT 109
18961: PUSH
18962: LD_INT 110
18964: PUSH
18965: LD_INT 111
18967: PUSH
18968: LD_INT 112
18970: PUSH
18971: LD_INT 113
18973: PUSH
18974: LD_INT 114
18976: PUSH
18977: LD_INT 116
18979: PUSH
18980: LD_INT 117
18982: PUSH
18983: LD_INT 118
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: ST_TO_ADDR
19009: GO 20464
19011: LD_INT 13
19013: DOUBLE
19014: EQUAL
19015: IFTRUE 19019
19017: GO 19227
19019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19020: LD_ADDR_VAR 0 2
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: LD_INT 3
19033: PUSH
19034: LD_INT 4
19036: PUSH
19037: LD_INT 5
19039: PUSH
19040: LD_INT 8
19042: PUSH
19043: LD_INT 9
19045: PUSH
19046: LD_INT 10
19048: PUSH
19049: LD_INT 11
19051: PUSH
19052: LD_INT 12
19054: PUSH
19055: LD_INT 14
19057: PUSH
19058: LD_INT 15
19060: PUSH
19061: LD_INT 16
19063: PUSH
19064: LD_INT 17
19066: PUSH
19067: LD_INT 18
19069: PUSH
19070: LD_INT 19
19072: PUSH
19073: LD_INT 20
19075: PUSH
19076: LD_INT 21
19078: PUSH
19079: LD_INT 22
19081: PUSH
19082: LD_INT 23
19084: PUSH
19085: LD_INT 24
19087: PUSH
19088: LD_INT 25
19090: PUSH
19091: LD_INT 26
19093: PUSH
19094: LD_INT 27
19096: PUSH
19097: LD_INT 28
19099: PUSH
19100: LD_INT 30
19102: PUSH
19103: LD_INT 31
19105: PUSH
19106: LD_INT 32
19108: PUSH
19109: LD_INT 33
19111: PUSH
19112: LD_INT 34
19114: PUSH
19115: LD_INT 36
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 101
19153: PUSH
19154: LD_INT 102
19156: PUSH
19157: LD_INT 103
19159: PUSH
19160: LD_INT 104
19162: PUSH
19163: LD_INT 105
19165: PUSH
19166: LD_INT 106
19168: PUSH
19169: LD_INT 107
19171: PUSH
19172: LD_INT 108
19174: PUSH
19175: LD_INT 109
19177: PUSH
19178: LD_INT 110
19180: PUSH
19181: LD_INT 111
19183: PUSH
19184: LD_INT 112
19186: PUSH
19187: LD_INT 113
19189: PUSH
19190: LD_INT 114
19192: PUSH
19193: LD_INT 116
19195: PUSH
19196: LD_INT 117
19198: PUSH
19199: LD_INT 118
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: ST_TO_ADDR
19225: GO 20464
19227: LD_INT 14
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19459
19235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19236: LD_ADDR_VAR 0 2
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: LD_INT 3
19249: PUSH
19250: LD_INT 4
19252: PUSH
19253: LD_INT 5
19255: PUSH
19256: LD_INT 6
19258: PUSH
19259: LD_INT 7
19261: PUSH
19262: LD_INT 8
19264: PUSH
19265: LD_INT 9
19267: PUSH
19268: LD_INT 10
19270: PUSH
19271: LD_INT 11
19273: PUSH
19274: LD_INT 12
19276: PUSH
19277: LD_INT 13
19279: PUSH
19280: LD_INT 14
19282: PUSH
19283: LD_INT 15
19285: PUSH
19286: LD_INT 16
19288: PUSH
19289: LD_INT 17
19291: PUSH
19292: LD_INT 18
19294: PUSH
19295: LD_INT 19
19297: PUSH
19298: LD_INT 20
19300: PUSH
19301: LD_INT 21
19303: PUSH
19304: LD_INT 22
19306: PUSH
19307: LD_INT 23
19309: PUSH
19310: LD_INT 24
19312: PUSH
19313: LD_INT 25
19315: PUSH
19316: LD_INT 26
19318: PUSH
19319: LD_INT 27
19321: PUSH
19322: LD_INT 28
19324: PUSH
19325: LD_INT 29
19327: PUSH
19328: LD_INT 30
19330: PUSH
19331: LD_INT 31
19333: PUSH
19334: LD_INT 32
19336: PUSH
19337: LD_INT 33
19339: PUSH
19340: LD_INT 34
19342: PUSH
19343: LD_INT 36
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 101
19385: PUSH
19386: LD_INT 102
19388: PUSH
19389: LD_INT 103
19391: PUSH
19392: LD_INT 104
19394: PUSH
19395: LD_INT 105
19397: PUSH
19398: LD_INT 106
19400: PUSH
19401: LD_INT 107
19403: PUSH
19404: LD_INT 108
19406: PUSH
19407: LD_INT 109
19409: PUSH
19410: LD_INT 110
19412: PUSH
19413: LD_INT 111
19415: PUSH
19416: LD_INT 112
19418: PUSH
19419: LD_INT 113
19421: PUSH
19422: LD_INT 114
19424: PUSH
19425: LD_INT 116
19427: PUSH
19428: LD_INT 117
19430: PUSH
19431: LD_INT 118
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: ST_TO_ADDR
19457: GO 20464
19459: LD_INT 15
19461: DOUBLE
19462: EQUAL
19463: IFTRUE 19467
19465: GO 19691
19467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19468: LD_ADDR_VAR 0 2
19472: PUSH
19473: LD_INT 1
19475: PUSH
19476: LD_INT 2
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: LD_INT 4
19484: PUSH
19485: LD_INT 5
19487: PUSH
19488: LD_INT 6
19490: PUSH
19491: LD_INT 7
19493: PUSH
19494: LD_INT 8
19496: PUSH
19497: LD_INT 9
19499: PUSH
19500: LD_INT 10
19502: PUSH
19503: LD_INT 11
19505: PUSH
19506: LD_INT 12
19508: PUSH
19509: LD_INT 13
19511: PUSH
19512: LD_INT 14
19514: PUSH
19515: LD_INT 15
19517: PUSH
19518: LD_INT 16
19520: PUSH
19521: LD_INT 17
19523: PUSH
19524: LD_INT 18
19526: PUSH
19527: LD_INT 19
19529: PUSH
19530: LD_INT 20
19532: PUSH
19533: LD_INT 21
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_INT 23
19541: PUSH
19542: LD_INT 24
19544: PUSH
19545: LD_INT 25
19547: PUSH
19548: LD_INT 26
19550: PUSH
19551: LD_INT 27
19553: PUSH
19554: LD_INT 28
19556: PUSH
19557: LD_INT 29
19559: PUSH
19560: LD_INT 30
19562: PUSH
19563: LD_INT 31
19565: PUSH
19566: LD_INT 32
19568: PUSH
19569: LD_INT 33
19571: PUSH
19572: LD_INT 34
19574: PUSH
19575: LD_INT 36
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 101
19617: PUSH
19618: LD_INT 102
19620: PUSH
19621: LD_INT 103
19623: PUSH
19624: LD_INT 104
19626: PUSH
19627: LD_INT 105
19629: PUSH
19630: LD_INT 106
19632: PUSH
19633: LD_INT 107
19635: PUSH
19636: LD_INT 108
19638: PUSH
19639: LD_INT 109
19641: PUSH
19642: LD_INT 110
19644: PUSH
19645: LD_INT 111
19647: PUSH
19648: LD_INT 112
19650: PUSH
19651: LD_INT 113
19653: PUSH
19654: LD_INT 114
19656: PUSH
19657: LD_INT 116
19659: PUSH
19660: LD_INT 117
19662: PUSH
19663: LD_INT 118
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: ST_TO_ADDR
19689: GO 20464
19691: LD_INT 16
19693: DOUBLE
19694: EQUAL
19695: IFTRUE 19699
19697: GO 19835
19699: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19700: LD_ADDR_VAR 0 2
19704: PUSH
19705: LD_INT 2
19707: PUSH
19708: LD_INT 4
19710: PUSH
19711: LD_INT 5
19713: PUSH
19714: LD_INT 7
19716: PUSH
19717: LD_INT 11
19719: PUSH
19720: LD_INT 12
19722: PUSH
19723: LD_INT 15
19725: PUSH
19726: LD_INT 16
19728: PUSH
19729: LD_INT 20
19731: PUSH
19732: LD_INT 21
19734: PUSH
19735: LD_INT 22
19737: PUSH
19738: LD_INT 23
19740: PUSH
19741: LD_INT 25
19743: PUSH
19744: LD_INT 26
19746: PUSH
19747: LD_INT 30
19749: PUSH
19750: LD_INT 31
19752: PUSH
19753: LD_INT 32
19755: PUSH
19756: LD_INT 33
19758: PUSH
19759: LD_INT 34
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 101
19785: PUSH
19786: LD_INT 102
19788: PUSH
19789: LD_INT 103
19791: PUSH
19792: LD_INT 106
19794: PUSH
19795: LD_INT 108
19797: PUSH
19798: LD_INT 112
19800: PUSH
19801: LD_INT 113
19803: PUSH
19804: LD_INT 114
19806: PUSH
19807: LD_INT 116
19809: PUSH
19810: LD_INT 117
19812: PUSH
19813: LD_INT 118
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: ST_TO_ADDR
19833: GO 20464
19835: LD_INT 17
19837: DOUBLE
19838: EQUAL
19839: IFTRUE 19843
19841: GO 20067
19843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19844: LD_ADDR_VAR 0 2
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: LD_INT 3
19857: PUSH
19858: LD_INT 4
19860: PUSH
19861: LD_INT 5
19863: PUSH
19864: LD_INT 6
19866: PUSH
19867: LD_INT 7
19869: PUSH
19870: LD_INT 8
19872: PUSH
19873: LD_INT 9
19875: PUSH
19876: LD_INT 10
19878: PUSH
19879: LD_INT 11
19881: PUSH
19882: LD_INT 12
19884: PUSH
19885: LD_INT 13
19887: PUSH
19888: LD_INT 14
19890: PUSH
19891: LD_INT 15
19893: PUSH
19894: LD_INT 16
19896: PUSH
19897: LD_INT 17
19899: PUSH
19900: LD_INT 18
19902: PUSH
19903: LD_INT 19
19905: PUSH
19906: LD_INT 20
19908: PUSH
19909: LD_INT 21
19911: PUSH
19912: LD_INT 22
19914: PUSH
19915: LD_INT 23
19917: PUSH
19918: LD_INT 24
19920: PUSH
19921: LD_INT 25
19923: PUSH
19924: LD_INT 26
19926: PUSH
19927: LD_INT 27
19929: PUSH
19930: LD_INT 28
19932: PUSH
19933: LD_INT 29
19935: PUSH
19936: LD_INT 30
19938: PUSH
19939: LD_INT 31
19941: PUSH
19942: LD_INT 32
19944: PUSH
19945: LD_INT 33
19947: PUSH
19948: LD_INT 34
19950: PUSH
19951: LD_INT 36
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 101
19993: PUSH
19994: LD_INT 102
19996: PUSH
19997: LD_INT 103
19999: PUSH
20000: LD_INT 104
20002: PUSH
20003: LD_INT 105
20005: PUSH
20006: LD_INT 106
20008: PUSH
20009: LD_INT 107
20011: PUSH
20012: LD_INT 108
20014: PUSH
20015: LD_INT 109
20017: PUSH
20018: LD_INT 110
20020: PUSH
20021: LD_INT 111
20023: PUSH
20024: LD_INT 112
20026: PUSH
20027: LD_INT 113
20029: PUSH
20030: LD_INT 114
20032: PUSH
20033: LD_INT 116
20035: PUSH
20036: LD_INT 117
20038: PUSH
20039: LD_INT 118
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: ST_TO_ADDR
20065: GO 20464
20067: LD_INT 18
20069: DOUBLE
20070: EQUAL
20071: IFTRUE 20075
20073: GO 20223
20075: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20076: LD_ADDR_VAR 0 2
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: LD_INT 4
20086: PUSH
20087: LD_INT 5
20089: PUSH
20090: LD_INT 7
20092: PUSH
20093: LD_INT 11
20095: PUSH
20096: LD_INT 12
20098: PUSH
20099: LD_INT 15
20101: PUSH
20102: LD_INT 16
20104: PUSH
20105: LD_INT 20
20107: PUSH
20108: LD_INT 21
20110: PUSH
20111: LD_INT 22
20113: PUSH
20114: LD_INT 23
20116: PUSH
20117: LD_INT 25
20119: PUSH
20120: LD_INT 26
20122: PUSH
20123: LD_INT 30
20125: PUSH
20126: LD_INT 31
20128: PUSH
20129: LD_INT 32
20131: PUSH
20132: LD_INT 33
20134: PUSH
20135: LD_INT 34
20137: PUSH
20138: LD_INT 35
20140: PUSH
20141: LD_INT 36
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 101
20169: PUSH
20170: LD_INT 102
20172: PUSH
20173: LD_INT 103
20175: PUSH
20176: LD_INT 106
20178: PUSH
20179: LD_INT 108
20181: PUSH
20182: LD_INT 112
20184: PUSH
20185: LD_INT 113
20187: PUSH
20188: LD_INT 114
20190: PUSH
20191: LD_INT 115
20193: PUSH
20194: LD_INT 116
20196: PUSH
20197: LD_INT 117
20199: PUSH
20200: LD_INT 118
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: ST_TO_ADDR
20221: GO 20464
20223: LD_INT 19
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20463
20231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20232: LD_ADDR_VAR 0 2
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 3
20245: PUSH
20246: LD_INT 4
20248: PUSH
20249: LD_INT 5
20251: PUSH
20252: LD_INT 6
20254: PUSH
20255: LD_INT 7
20257: PUSH
20258: LD_INT 8
20260: PUSH
20261: LD_INT 9
20263: PUSH
20264: LD_INT 10
20266: PUSH
20267: LD_INT 11
20269: PUSH
20270: LD_INT 12
20272: PUSH
20273: LD_INT 13
20275: PUSH
20276: LD_INT 14
20278: PUSH
20279: LD_INT 15
20281: PUSH
20282: LD_INT 16
20284: PUSH
20285: LD_INT 17
20287: PUSH
20288: LD_INT 18
20290: PUSH
20291: LD_INT 19
20293: PUSH
20294: LD_INT 20
20296: PUSH
20297: LD_INT 21
20299: PUSH
20300: LD_INT 22
20302: PUSH
20303: LD_INT 23
20305: PUSH
20306: LD_INT 24
20308: PUSH
20309: LD_INT 25
20311: PUSH
20312: LD_INT 26
20314: PUSH
20315: LD_INT 27
20317: PUSH
20318: LD_INT 28
20320: PUSH
20321: LD_INT 29
20323: PUSH
20324: LD_INT 30
20326: PUSH
20327: LD_INT 31
20329: PUSH
20330: LD_INT 32
20332: PUSH
20333: LD_INT 33
20335: PUSH
20336: LD_INT 34
20338: PUSH
20339: LD_INT 35
20341: PUSH
20342: LD_INT 36
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 101
20385: PUSH
20386: LD_INT 102
20388: PUSH
20389: LD_INT 103
20391: PUSH
20392: LD_INT 104
20394: PUSH
20395: LD_INT 105
20397: PUSH
20398: LD_INT 106
20400: PUSH
20401: LD_INT 107
20403: PUSH
20404: LD_INT 108
20406: PUSH
20407: LD_INT 109
20409: PUSH
20410: LD_INT 110
20412: PUSH
20413: LD_INT 111
20415: PUSH
20416: LD_INT 112
20418: PUSH
20419: LD_INT 113
20421: PUSH
20422: LD_INT 114
20424: PUSH
20425: LD_INT 115
20427: PUSH
20428: LD_INT 116
20430: PUSH
20431: LD_INT 117
20433: PUSH
20434: LD_INT 118
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: ST_TO_ADDR
20461: GO 20464
20463: POP
// end else
20464: GO 20695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20466: LD_ADDR_VAR 0 2
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: LD_INT 3
20479: PUSH
20480: LD_INT 4
20482: PUSH
20483: LD_INT 5
20485: PUSH
20486: LD_INT 6
20488: PUSH
20489: LD_INT 7
20491: PUSH
20492: LD_INT 8
20494: PUSH
20495: LD_INT 9
20497: PUSH
20498: LD_INT 10
20500: PUSH
20501: LD_INT 11
20503: PUSH
20504: LD_INT 12
20506: PUSH
20507: LD_INT 13
20509: PUSH
20510: LD_INT 14
20512: PUSH
20513: LD_INT 15
20515: PUSH
20516: LD_INT 16
20518: PUSH
20519: LD_INT 17
20521: PUSH
20522: LD_INT 18
20524: PUSH
20525: LD_INT 19
20527: PUSH
20528: LD_INT 20
20530: PUSH
20531: LD_INT 21
20533: PUSH
20534: LD_INT 22
20536: PUSH
20537: LD_INT 23
20539: PUSH
20540: LD_INT 24
20542: PUSH
20543: LD_INT 25
20545: PUSH
20546: LD_INT 26
20548: PUSH
20549: LD_INT 27
20551: PUSH
20552: LD_INT 28
20554: PUSH
20555: LD_INT 29
20557: PUSH
20558: LD_INT 30
20560: PUSH
20561: LD_INT 31
20563: PUSH
20564: LD_INT 32
20566: PUSH
20567: LD_INT 33
20569: PUSH
20570: LD_INT 34
20572: PUSH
20573: LD_INT 35
20575: PUSH
20576: LD_INT 36
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 101
20619: PUSH
20620: LD_INT 102
20622: PUSH
20623: LD_INT 103
20625: PUSH
20626: LD_INT 104
20628: PUSH
20629: LD_INT 105
20631: PUSH
20632: LD_INT 106
20634: PUSH
20635: LD_INT 107
20637: PUSH
20638: LD_INT 108
20640: PUSH
20641: LD_INT 109
20643: PUSH
20644: LD_INT 110
20646: PUSH
20647: LD_INT 111
20649: PUSH
20650: LD_INT 112
20652: PUSH
20653: LD_INT 113
20655: PUSH
20656: LD_INT 114
20658: PUSH
20659: LD_INT 115
20661: PUSH
20662: LD_INT 116
20664: PUSH
20665: LD_INT 117
20667: PUSH
20668: LD_INT 118
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: ST_TO_ADDR
// if result then
20695: LD_VAR 0 2
20699: IFFALSE 21485
// begin normal :=  ;
20701: LD_ADDR_VAR 0 5
20705: PUSH
20706: LD_STRING 
20708: ST_TO_ADDR
// hardcore :=  ;
20709: LD_ADDR_VAR 0 6
20713: PUSH
20714: LD_STRING 
20716: ST_TO_ADDR
// active :=  ;
20717: LD_ADDR_VAR 0 7
20721: PUSH
20722: LD_STRING 
20724: ST_TO_ADDR
// for i = 1 to normalCounter do
20725: LD_ADDR_VAR 0 8
20729: PUSH
20730: DOUBLE
20731: LD_INT 1
20733: DEC
20734: ST_TO_ADDR
20735: LD_EXP 38
20739: PUSH
20740: FOR_TO
20741: IFFALSE 20842
// begin tmp := 0 ;
20743: LD_ADDR_VAR 0 3
20747: PUSH
20748: LD_STRING 0
20750: ST_TO_ADDR
// if result [ 1 ] then
20751: LD_VAR 0 2
20755: PUSH
20756: LD_INT 1
20758: ARRAY
20759: IFFALSE 20824
// if result [ 1 ] [ 1 ] = i then
20761: LD_VAR 0 2
20765: PUSH
20766: LD_INT 1
20768: ARRAY
20769: PUSH
20770: LD_INT 1
20772: ARRAY
20773: PUSH
20774: LD_VAR 0 8
20778: EQUAL
20779: IFFALSE 20824
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20781: LD_ADDR_VAR 0 2
20785: PUSH
20786: LD_VAR 0 2
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: LD_VAR 0 2
20798: PUSH
20799: LD_INT 1
20801: ARRAY
20802: PPUSH
20803: LD_INT 1
20805: PPUSH
20806: CALL_OW 3
20810: PPUSH
20811: CALL_OW 1
20815: ST_TO_ADDR
// tmp := 1 ;
20816: LD_ADDR_VAR 0 3
20820: PUSH
20821: LD_STRING 1
20823: ST_TO_ADDR
// end ; normal := normal & tmp ;
20824: LD_ADDR_VAR 0 5
20828: PUSH
20829: LD_VAR 0 5
20833: PUSH
20834: LD_VAR 0 3
20838: STR
20839: ST_TO_ADDR
// end ;
20840: GO 20740
20842: POP
20843: POP
// for i = 1 to hardcoreCounter do
20844: LD_ADDR_VAR 0 8
20848: PUSH
20849: DOUBLE
20850: LD_INT 1
20852: DEC
20853: ST_TO_ADDR
20854: LD_EXP 39
20858: PUSH
20859: FOR_TO
20860: IFFALSE 20965
// begin tmp := 0 ;
20862: LD_ADDR_VAR 0 3
20866: PUSH
20867: LD_STRING 0
20869: ST_TO_ADDR
// if result [ 2 ] then
20870: LD_VAR 0 2
20874: PUSH
20875: LD_INT 2
20877: ARRAY
20878: IFFALSE 20947
// if result [ 2 ] [ 1 ] = 100 + i then
20880: LD_VAR 0 2
20884: PUSH
20885: LD_INT 2
20887: ARRAY
20888: PUSH
20889: LD_INT 1
20891: ARRAY
20892: PUSH
20893: LD_INT 100
20895: PUSH
20896: LD_VAR 0 8
20900: PLUS
20901: EQUAL
20902: IFFALSE 20947
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20904: LD_ADDR_VAR 0 2
20908: PUSH
20909: LD_VAR 0 2
20913: PPUSH
20914: LD_INT 2
20916: PPUSH
20917: LD_VAR 0 2
20921: PUSH
20922: LD_INT 2
20924: ARRAY
20925: PPUSH
20926: LD_INT 1
20928: PPUSH
20929: CALL_OW 3
20933: PPUSH
20934: CALL_OW 1
20938: ST_TO_ADDR
// tmp := 1 ;
20939: LD_ADDR_VAR 0 3
20943: PUSH
20944: LD_STRING 1
20946: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20947: LD_ADDR_VAR 0 6
20951: PUSH
20952: LD_VAR 0 6
20956: PUSH
20957: LD_VAR 0 3
20961: STR
20962: ST_TO_ADDR
// end ;
20963: GO 20859
20965: POP
20966: POP
// if isGameLoad then
20967: LD_VAR 0 1
20971: IFFALSE 21446
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20973: LD_ADDR_VAR 0 4
20977: PUSH
20978: LD_EXP 42
20982: PUSH
20983: LD_EXP 41
20987: PUSH
20988: LD_EXP 43
20992: PUSH
20993: LD_EXP 40
20997: PUSH
20998: LD_EXP 44
21002: PUSH
21003: LD_EXP 45
21007: PUSH
21008: LD_EXP 46
21012: PUSH
21013: LD_EXP 47
21017: PUSH
21018: LD_EXP 48
21022: PUSH
21023: LD_EXP 49
21027: PUSH
21028: LD_EXP 50
21032: PUSH
21033: LD_EXP 51
21037: PUSH
21038: LD_EXP 52
21042: PUSH
21043: LD_EXP 53
21047: PUSH
21048: LD_EXP 61
21052: PUSH
21053: LD_EXP 62
21057: PUSH
21058: LD_EXP 63
21062: PUSH
21063: LD_EXP 64
21067: PUSH
21068: LD_EXP 66
21072: PUSH
21073: LD_EXP 67
21077: PUSH
21078: LD_EXP 68
21082: PUSH
21083: LD_EXP 71
21087: PUSH
21088: LD_EXP 73
21092: PUSH
21093: LD_EXP 74
21097: PUSH
21098: LD_EXP 75
21102: PUSH
21103: LD_EXP 77
21107: PUSH
21108: LD_EXP 78
21112: PUSH
21113: LD_EXP 81
21117: PUSH
21118: LD_EXP 82
21122: PUSH
21123: LD_EXP 83
21127: PUSH
21128: LD_EXP 84
21132: PUSH
21133: LD_EXP 85
21137: PUSH
21138: LD_EXP 86
21142: PUSH
21143: LD_EXP 87
21147: PUSH
21148: LD_EXP 88
21152: PUSH
21153: LD_EXP 89
21157: PUSH
21158: LD_EXP 54
21162: PUSH
21163: LD_EXP 55
21167: PUSH
21168: LD_EXP 58
21172: PUSH
21173: LD_EXP 59
21177: PUSH
21178: LD_EXP 60
21182: PUSH
21183: LD_EXP 56
21187: PUSH
21188: LD_EXP 57
21192: PUSH
21193: LD_EXP 65
21197: PUSH
21198: LD_EXP 69
21202: PUSH
21203: LD_EXP 70
21207: PUSH
21208: LD_EXP 72
21212: PUSH
21213: LD_EXP 76
21217: PUSH
21218: LD_EXP 79
21222: PUSH
21223: LD_EXP 80
21227: PUSH
21228: LD_EXP 90
21232: PUSH
21233: LD_EXP 91
21237: PUSH
21238: LD_EXP 92
21242: PUSH
21243: LD_EXP 93
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: ST_TO_ADDR
// tmp :=  ;
21304: LD_ADDR_VAR 0 3
21308: PUSH
21309: LD_STRING 
21311: ST_TO_ADDR
// for i = 1 to normalCounter do
21312: LD_ADDR_VAR 0 8
21316: PUSH
21317: DOUBLE
21318: LD_INT 1
21320: DEC
21321: ST_TO_ADDR
21322: LD_EXP 38
21326: PUSH
21327: FOR_TO
21328: IFFALSE 21364
// begin if flags [ i ] then
21330: LD_VAR 0 4
21334: PUSH
21335: LD_VAR 0 8
21339: ARRAY
21340: IFFALSE 21362
// tmp := tmp & i & ; ;
21342: LD_ADDR_VAR 0 3
21346: PUSH
21347: LD_VAR 0 3
21351: PUSH
21352: LD_VAR 0 8
21356: STR
21357: PUSH
21358: LD_STRING ;
21360: STR
21361: ST_TO_ADDR
// end ;
21362: GO 21327
21364: POP
21365: POP
// for i = 1 to hardcoreCounter do
21366: LD_ADDR_VAR 0 8
21370: PUSH
21371: DOUBLE
21372: LD_INT 1
21374: DEC
21375: ST_TO_ADDR
21376: LD_EXP 39
21380: PUSH
21381: FOR_TO
21382: IFFALSE 21428
// begin if flags [ normalCounter + i ] then
21384: LD_VAR 0 4
21388: PUSH
21389: LD_EXP 38
21393: PUSH
21394: LD_VAR 0 8
21398: PLUS
21399: ARRAY
21400: IFFALSE 21426
// tmp := tmp & ( 100 + i ) & ; ;
21402: LD_ADDR_VAR 0 3
21406: PUSH
21407: LD_VAR 0 3
21411: PUSH
21412: LD_INT 100
21414: PUSH
21415: LD_VAR 0 8
21419: PLUS
21420: STR
21421: PUSH
21422: LD_STRING ;
21424: STR
21425: ST_TO_ADDR
// end ;
21426: GO 21381
21428: POP
21429: POP
// if tmp then
21430: LD_VAR 0 3
21434: IFFALSE 21446
// active := tmp ;
21436: LD_ADDR_VAR 0 7
21440: PUSH
21441: LD_VAR 0 3
21445: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21446: LD_STRING getStreamItemsFromMission("
21448: PUSH
21449: LD_VAR 0 5
21453: STR
21454: PUSH
21455: LD_STRING ","
21457: STR
21458: PUSH
21459: LD_VAR 0 6
21463: STR
21464: PUSH
21465: LD_STRING ","
21467: STR
21468: PUSH
21469: LD_VAR 0 7
21473: STR
21474: PUSH
21475: LD_STRING ")
21477: STR
21478: PPUSH
21479: CALL_OW 559
// end else
21483: GO 21492
// ToLua ( getStreamItemsFromMission("","","") ) ;
21485: LD_STRING getStreamItemsFromMission("","","")
21487: PPUSH
21488: CALL_OW 559
// end ;
21492: LD_VAR 0 2
21496: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21497: LD_EXP 37
21501: PUSH
21502: LD_EXP 42
21506: AND
21507: IFFALSE 21631
21509: GO 21511
21511: DISABLE
21512: LD_INT 0
21514: PPUSH
21515: PPUSH
// begin enable ;
21516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21517: LD_ADDR_VAR 0 2
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_OWVAR 2
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 2
21536: PUSH
21537: LD_INT 34
21539: PUSH
21540: LD_INT 7
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 34
21549: PUSH
21550: LD_INT 45
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 34
21559: PUSH
21560: LD_INT 28
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 34
21569: PUSH
21570: LD_INT 47
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PPUSH
21588: CALL_OW 69
21592: ST_TO_ADDR
// if not tmp then
21593: LD_VAR 0 2
21597: NOT
21598: IFFALSE 21602
// exit ;
21600: GO 21631
// for i in tmp do
21602: LD_ADDR_VAR 0 1
21606: PUSH
21607: LD_VAR 0 2
21611: PUSH
21612: FOR_IN
21613: IFFALSE 21629
// begin SetLives ( i , 0 ) ;
21615: LD_VAR 0 1
21619: PPUSH
21620: LD_INT 0
21622: PPUSH
21623: CALL_OW 234
// end ;
21627: GO 21612
21629: POP
21630: POP
// end ;
21631: PPOPN 2
21633: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21634: LD_EXP 37
21638: PUSH
21639: LD_EXP 43
21643: AND
21644: IFFALSE 21728
21646: GO 21648
21648: DISABLE
21649: LD_INT 0
21651: PPUSH
21652: PPUSH
// begin enable ;
21653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21654: LD_ADDR_VAR 0 2
21658: PUSH
21659: LD_INT 22
21661: PUSH
21662: LD_OWVAR 2
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 32
21673: PUSH
21674: LD_INT 3
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PPUSH
21685: CALL_OW 69
21689: ST_TO_ADDR
// if not tmp then
21690: LD_VAR 0 2
21694: NOT
21695: IFFALSE 21699
// exit ;
21697: GO 21728
// for i in tmp do
21699: LD_ADDR_VAR 0 1
21703: PUSH
21704: LD_VAR 0 2
21708: PUSH
21709: FOR_IN
21710: IFFALSE 21726
// begin SetLives ( i , 0 ) ;
21712: LD_VAR 0 1
21716: PPUSH
21717: LD_INT 0
21719: PPUSH
21720: CALL_OW 234
// end ;
21724: GO 21709
21726: POP
21727: POP
// end ;
21728: PPOPN 2
21730: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21731: LD_EXP 37
21735: PUSH
21736: LD_EXP 40
21740: AND
21741: IFFALSE 21834
21743: GO 21745
21745: DISABLE
21746: LD_INT 0
21748: PPUSH
// begin enable ;
21749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21750: LD_ADDR_VAR 0 1
21754: PUSH
21755: LD_INT 22
21757: PUSH
21758: LD_OWVAR 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 25
21772: PUSH
21773: LD_INT 5
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 25
21782: PUSH
21783: LD_INT 9
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 25
21792: PUSH
21793: LD_INT 8
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 69
21814: PUSH
21815: FOR_IN
21816: IFFALSE 21832
// begin SetClass ( i , 1 ) ;
21818: LD_VAR 0 1
21822: PPUSH
21823: LD_INT 1
21825: PPUSH
21826: CALL_OW 336
// end ;
21830: GO 21815
21832: POP
21833: POP
// end ;
21834: PPOPN 1
21836: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21837: LD_EXP 37
21841: PUSH
21842: LD_EXP 41
21846: AND
21847: PUSH
21848: LD_OWVAR 65
21852: PUSH
21853: LD_INT 7
21855: LESS
21856: AND
21857: IFFALSE 21871
21859: GO 21861
21861: DISABLE
// begin enable ;
21862: ENABLE
// game_speed := 7 ;
21863: LD_ADDR_OWVAR 65
21867: PUSH
21868: LD_INT 7
21870: ST_TO_ADDR
// end ;
21871: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21872: LD_EXP 37
21876: PUSH
21877: LD_EXP 44
21881: AND
21882: IFFALSE 22084
21884: GO 21886
21886: DISABLE
21887: LD_INT 0
21889: PPUSH
21890: PPUSH
21891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21892: LD_ADDR_VAR 0 3
21896: PUSH
21897: LD_INT 81
21899: PUSH
21900: LD_OWVAR 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 21
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PPUSH
21923: CALL_OW 69
21927: ST_TO_ADDR
// if not tmp then
21928: LD_VAR 0 3
21932: NOT
21933: IFFALSE 21937
// exit ;
21935: GO 22084
// if tmp > 5 then
21937: LD_VAR 0 3
21941: PUSH
21942: LD_INT 5
21944: GREATER
21945: IFFALSE 21957
// k := 5 else
21947: LD_ADDR_VAR 0 2
21951: PUSH
21952: LD_INT 5
21954: ST_TO_ADDR
21955: GO 21967
// k := tmp ;
21957: LD_ADDR_VAR 0 2
21961: PUSH
21962: LD_VAR 0 3
21966: ST_TO_ADDR
// for i := 1 to k do
21967: LD_ADDR_VAR 0 1
21971: PUSH
21972: DOUBLE
21973: LD_INT 1
21975: DEC
21976: ST_TO_ADDR
21977: LD_VAR 0 2
21981: PUSH
21982: FOR_TO
21983: IFFALSE 22082
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21985: LD_VAR 0 3
21989: PUSH
21990: LD_VAR 0 1
21994: ARRAY
21995: PPUSH
21996: LD_VAR 0 1
22000: PUSH
22001: LD_INT 4
22003: MOD
22004: PUSH
22005: LD_INT 1
22007: PLUS
22008: PPUSH
22009: CALL_OW 259
22013: PUSH
22014: LD_INT 10
22016: LESS
22017: IFFALSE 22080
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22019: LD_VAR 0 3
22023: PUSH
22024: LD_VAR 0 1
22028: ARRAY
22029: PPUSH
22030: LD_VAR 0 1
22034: PUSH
22035: LD_INT 4
22037: MOD
22038: PUSH
22039: LD_INT 1
22041: PLUS
22042: PPUSH
22043: LD_VAR 0 3
22047: PUSH
22048: LD_VAR 0 1
22052: ARRAY
22053: PPUSH
22054: LD_VAR 0 1
22058: PUSH
22059: LD_INT 4
22061: MOD
22062: PUSH
22063: LD_INT 1
22065: PLUS
22066: PPUSH
22067: CALL_OW 259
22071: PUSH
22072: LD_INT 1
22074: PLUS
22075: PPUSH
22076: CALL_OW 237
22080: GO 21982
22082: POP
22083: POP
// end ;
22084: PPOPN 3
22086: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22087: LD_EXP 37
22091: PUSH
22092: LD_EXP 45
22096: AND
22097: IFFALSE 22117
22099: GO 22101
22101: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22102: LD_INT 4
22104: PPUSH
22105: LD_OWVAR 2
22109: PPUSH
22110: LD_INT 0
22112: PPUSH
22113: CALL_OW 324
22117: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22118: LD_EXP 37
22122: PUSH
22123: LD_EXP 74
22127: AND
22128: IFFALSE 22148
22130: GO 22132
22132: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22133: LD_INT 19
22135: PPUSH
22136: LD_OWVAR 2
22140: PPUSH
22141: LD_INT 0
22143: PPUSH
22144: CALL_OW 324
22148: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22149: LD_EXP 37
22153: PUSH
22154: LD_EXP 46
22158: AND
22159: IFFALSE 22261
22161: GO 22163
22163: DISABLE
22164: LD_INT 0
22166: PPUSH
22167: PPUSH
// begin enable ;
22168: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22169: LD_ADDR_VAR 0 2
22173: PUSH
22174: LD_INT 22
22176: PUSH
22177: LD_OWVAR 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: LD_INT 34
22191: PUSH
22192: LD_INT 11
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 30
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: LIST
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PPUSH
22218: CALL_OW 69
22222: ST_TO_ADDR
// if not tmp then
22223: LD_VAR 0 2
22227: NOT
22228: IFFALSE 22232
// exit ;
22230: GO 22261
// for i in tmp do
22232: LD_ADDR_VAR 0 1
22236: PUSH
22237: LD_VAR 0 2
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22259
// begin SetLives ( i , 0 ) ;
22245: LD_VAR 0 1
22249: PPUSH
22250: LD_INT 0
22252: PPUSH
22253: CALL_OW 234
// end ;
22257: GO 22242
22259: POP
22260: POP
// end ;
22261: PPOPN 2
22263: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22264: LD_EXP 37
22268: PUSH
22269: LD_EXP 47
22273: AND
22274: IFFALSE 22294
22276: GO 22278
22278: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22279: LD_INT 32
22281: PPUSH
22282: LD_OWVAR 2
22286: PPUSH
22287: LD_INT 0
22289: PPUSH
22290: CALL_OW 324
22294: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22295: LD_EXP 37
22299: PUSH
22300: LD_EXP 48
22304: AND
22305: IFFALSE 22486
22307: GO 22309
22309: DISABLE
22310: LD_INT 0
22312: PPUSH
22313: PPUSH
22314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22315: LD_ADDR_VAR 0 2
22319: PUSH
22320: LD_INT 22
22322: PUSH
22323: LD_OWVAR 2
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 33
22334: PUSH
22335: LD_INT 3
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PPUSH
22346: CALL_OW 69
22350: ST_TO_ADDR
// if not tmp then
22351: LD_VAR 0 2
22355: NOT
22356: IFFALSE 22360
// exit ;
22358: GO 22486
// side := 0 ;
22360: LD_ADDR_VAR 0 3
22364: PUSH
22365: LD_INT 0
22367: ST_TO_ADDR
// for i := 1 to 8 do
22368: LD_ADDR_VAR 0 1
22372: PUSH
22373: DOUBLE
22374: LD_INT 1
22376: DEC
22377: ST_TO_ADDR
22378: LD_INT 8
22380: PUSH
22381: FOR_TO
22382: IFFALSE 22430
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22384: LD_OWVAR 2
22388: PUSH
22389: LD_VAR 0 1
22393: NONEQUAL
22394: PUSH
22395: LD_OWVAR 2
22399: PPUSH
22400: LD_VAR 0 1
22404: PPUSH
22405: CALL_OW 81
22409: PUSH
22410: LD_INT 2
22412: EQUAL
22413: AND
22414: IFFALSE 22428
// begin side := i ;
22416: LD_ADDR_VAR 0 3
22420: PUSH
22421: LD_VAR 0 1
22425: ST_TO_ADDR
// break ;
22426: GO 22430
// end ;
22428: GO 22381
22430: POP
22431: POP
// if not side then
22432: LD_VAR 0 3
22436: NOT
22437: IFFALSE 22441
// exit ;
22439: GO 22486
// for i := 1 to tmp do
22441: LD_ADDR_VAR 0 1
22445: PUSH
22446: DOUBLE
22447: LD_INT 1
22449: DEC
22450: ST_TO_ADDR
22451: LD_VAR 0 2
22455: PUSH
22456: FOR_TO
22457: IFFALSE 22484
// if Prob ( 60 ) then
22459: LD_INT 60
22461: PPUSH
22462: CALL_OW 13
22466: IFFALSE 22482
// SetSide ( i , side ) ;
22468: LD_VAR 0 1
22472: PPUSH
22473: LD_VAR 0 3
22477: PPUSH
22478: CALL_OW 235
22482: GO 22456
22484: POP
22485: POP
// end ;
22486: PPOPN 3
22488: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22489: LD_EXP 37
22493: PUSH
22494: LD_EXP 50
22498: AND
22499: IFFALSE 22618
22501: GO 22503
22503: DISABLE
22504: LD_INT 0
22506: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22507: LD_ADDR_VAR 0 1
22511: PUSH
22512: LD_INT 22
22514: PUSH
22515: LD_OWVAR 2
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 21
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 3
22536: PUSH
22537: LD_INT 23
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: PPUSH
22556: CALL_OW 69
22560: PUSH
22561: FOR_IN
22562: IFFALSE 22616
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22564: LD_VAR 0 1
22568: PPUSH
22569: CALL_OW 257
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 2
22579: PUSH
22580: LD_INT 3
22582: PUSH
22583: LD_INT 4
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: IN
22592: IFFALSE 22614
// SetClass ( un , rand ( 1 , 4 ) ) ;
22594: LD_VAR 0 1
22598: PPUSH
22599: LD_INT 1
22601: PPUSH
22602: LD_INT 4
22604: PPUSH
22605: CALL_OW 12
22609: PPUSH
22610: CALL_OW 336
22614: GO 22561
22616: POP
22617: POP
// end ;
22618: PPOPN 1
22620: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22621: LD_EXP 37
22625: PUSH
22626: LD_EXP 49
22630: AND
22631: IFFALSE 22710
22633: GO 22635
22635: DISABLE
22636: LD_INT 0
22638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22639: LD_ADDR_VAR 0 1
22643: PUSH
22644: LD_INT 22
22646: PUSH
22647: LD_OWVAR 2
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 21
22658: PUSH
22659: LD_INT 3
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PPUSH
22670: CALL_OW 69
22674: ST_TO_ADDR
// if not tmp then
22675: LD_VAR 0 1
22679: NOT
22680: IFFALSE 22684
// exit ;
22682: GO 22710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22684: LD_VAR 0 1
22688: PUSH
22689: LD_INT 1
22691: PPUSH
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 12
22701: ARRAY
22702: PPUSH
22703: LD_INT 100
22705: PPUSH
22706: CALL_OW 234
// end ;
22710: PPOPN 1
22712: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22713: LD_EXP 37
22717: PUSH
22718: LD_EXP 51
22722: AND
22723: IFFALSE 22821
22725: GO 22727
22727: DISABLE
22728: LD_INT 0
22730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22731: LD_ADDR_VAR 0 1
22735: PUSH
22736: LD_INT 22
22738: PUSH
22739: LD_OWVAR 2
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 21
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PPUSH
22762: CALL_OW 69
22766: ST_TO_ADDR
// if not tmp then
22767: LD_VAR 0 1
22771: NOT
22772: IFFALSE 22776
// exit ;
22774: GO 22821
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22776: LD_VAR 0 1
22780: PUSH
22781: LD_INT 1
22783: PPUSH
22784: LD_VAR 0 1
22788: PPUSH
22789: CALL_OW 12
22793: ARRAY
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: LD_INT 4
22800: PPUSH
22801: CALL_OW 12
22805: PPUSH
22806: LD_INT 3000
22808: PPUSH
22809: LD_INT 9000
22811: PPUSH
22812: CALL_OW 12
22816: PPUSH
22817: CALL_OW 492
// end ;
22821: PPOPN 1
22823: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22824: LD_EXP 37
22828: PUSH
22829: LD_EXP 52
22833: AND
22834: IFFALSE 22854
22836: GO 22838
22838: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22839: LD_INT 1
22841: PPUSH
22842: LD_OWVAR 2
22846: PPUSH
22847: LD_INT 0
22849: PPUSH
22850: CALL_OW 324
22854: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22855: LD_EXP 37
22859: PUSH
22860: LD_EXP 53
22864: AND
22865: IFFALSE 22948
22867: GO 22869
22869: DISABLE
22870: LD_INT 0
22872: PPUSH
22873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22874: LD_ADDR_VAR 0 2
22878: PUSH
22879: LD_INT 22
22881: PUSH
22882: LD_OWVAR 2
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 21
22893: PUSH
22894: LD_INT 3
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PPUSH
22905: CALL_OW 69
22909: ST_TO_ADDR
// if not tmp then
22910: LD_VAR 0 2
22914: NOT
22915: IFFALSE 22919
// exit ;
22917: GO 22948
// for i in tmp do
22919: LD_ADDR_VAR 0 1
22923: PUSH
22924: LD_VAR 0 2
22928: PUSH
22929: FOR_IN
22930: IFFALSE 22946
// SetBLevel ( i , 10 ) ;
22932: LD_VAR 0 1
22936: PPUSH
22937: LD_INT 10
22939: PPUSH
22940: CALL_OW 241
22944: GO 22929
22946: POP
22947: POP
// end ;
22948: PPOPN 2
22950: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22951: LD_EXP 37
22955: PUSH
22956: LD_EXP 54
22960: AND
22961: IFFALSE 23072
22963: GO 22965
22965: DISABLE
22966: LD_INT 0
22968: PPUSH
22969: PPUSH
22970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22971: LD_ADDR_VAR 0 3
22975: PUSH
22976: LD_INT 22
22978: PUSH
22979: LD_OWVAR 2
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 25
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PPUSH
23002: CALL_OW 69
23006: ST_TO_ADDR
// if not tmp then
23007: LD_VAR 0 3
23011: NOT
23012: IFFALSE 23016
// exit ;
23014: GO 23072
// un := tmp [ rand ( 1 , tmp ) ] ;
23016: LD_ADDR_VAR 0 2
23020: PUSH
23021: LD_VAR 0 3
23025: PUSH
23026: LD_INT 1
23028: PPUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: CALL_OW 12
23038: ARRAY
23039: ST_TO_ADDR
// if Crawls ( un ) then
23040: LD_VAR 0 2
23044: PPUSH
23045: CALL_OW 318
23049: IFFALSE 23060
// ComWalk ( un ) ;
23051: LD_VAR 0 2
23055: PPUSH
23056: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23060: LD_VAR 0 2
23064: PPUSH
23065: LD_INT 5
23067: PPUSH
23068: CALL_OW 336
// end ;
23072: PPOPN 3
23074: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23075: LD_EXP 37
23079: PUSH
23080: LD_EXP 55
23084: AND
23085: PUSH
23086: LD_OWVAR 67
23090: PUSH
23091: LD_INT 4
23093: LESS
23094: AND
23095: IFFALSE 23114
23097: GO 23099
23099: DISABLE
// begin Difficulty := Difficulty + 1 ;
23100: LD_ADDR_OWVAR 67
23104: PUSH
23105: LD_OWVAR 67
23109: PUSH
23110: LD_INT 1
23112: PLUS
23113: ST_TO_ADDR
// end ;
23114: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23115: LD_EXP 37
23119: PUSH
23120: LD_EXP 56
23124: AND
23125: IFFALSE 23228
23127: GO 23129
23129: DISABLE
23130: LD_INT 0
23132: PPUSH
// begin for i := 1 to 5 do
23133: LD_ADDR_VAR 0 1
23137: PUSH
23138: DOUBLE
23139: LD_INT 1
23141: DEC
23142: ST_TO_ADDR
23143: LD_INT 5
23145: PUSH
23146: FOR_TO
23147: IFFALSE 23226
// begin uc_nation := nation_nature ;
23149: LD_ADDR_OWVAR 21
23153: PUSH
23154: LD_INT 0
23156: ST_TO_ADDR
// uc_side := 0 ;
23157: LD_ADDR_OWVAR 20
23161: PUSH
23162: LD_INT 0
23164: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23165: LD_ADDR_OWVAR 29
23169: PUSH
23170: LD_INT 12
23172: PUSH
23173: LD_INT 12
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: ST_TO_ADDR
// hc_agressivity := 20 ;
23180: LD_ADDR_OWVAR 35
23184: PUSH
23185: LD_INT 20
23187: ST_TO_ADDR
// hc_class := class_tiger ;
23188: LD_ADDR_OWVAR 28
23192: PUSH
23193: LD_INT 14
23195: ST_TO_ADDR
// hc_gallery :=  ;
23196: LD_ADDR_OWVAR 33
23200: PUSH
23201: LD_STRING 
23203: ST_TO_ADDR
// hc_name :=  ;
23204: LD_ADDR_OWVAR 26
23208: PUSH
23209: LD_STRING 
23211: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23212: CALL_OW 44
23216: PPUSH
23217: LD_INT 0
23219: PPUSH
23220: CALL_OW 51
// end ;
23224: GO 23146
23226: POP
23227: POP
// end ;
23228: PPOPN 1
23230: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23231: LD_EXP 37
23235: PUSH
23236: LD_EXP 57
23240: AND
23241: IFFALSE 23250
23243: GO 23245
23245: DISABLE
// StreamSibBomb ;
23246: CALL 23251 0 0
23250: END
// export function StreamSibBomb ; var i , x , y ; begin
23251: LD_INT 0
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
// result := false ;
23257: LD_ADDR_VAR 0 1
23261: PUSH
23262: LD_INT 0
23264: ST_TO_ADDR
// for i := 1 to 16 do
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: DOUBLE
23271: LD_INT 1
23273: DEC
23274: ST_TO_ADDR
23275: LD_INT 16
23277: PUSH
23278: FOR_TO
23279: IFFALSE 23478
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23281: LD_ADDR_VAR 0 3
23285: PUSH
23286: LD_INT 10
23288: PUSH
23289: LD_INT 20
23291: PUSH
23292: LD_INT 30
23294: PUSH
23295: LD_INT 40
23297: PUSH
23298: LD_INT 50
23300: PUSH
23301: LD_INT 60
23303: PUSH
23304: LD_INT 70
23306: PUSH
23307: LD_INT 80
23309: PUSH
23310: LD_INT 90
23312: PUSH
23313: LD_INT 100
23315: PUSH
23316: LD_INT 110
23318: PUSH
23319: LD_INT 120
23321: PUSH
23322: LD_INT 130
23324: PUSH
23325: LD_INT 140
23327: PUSH
23328: LD_INT 150
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PPUSH
23351: LD_INT 15
23353: PPUSH
23354: CALL_OW 12
23358: ARRAY
23359: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23360: LD_ADDR_VAR 0 4
23364: PUSH
23365: LD_INT 10
23367: PUSH
23368: LD_INT 20
23370: PUSH
23371: LD_INT 30
23373: PUSH
23374: LD_INT 40
23376: PUSH
23377: LD_INT 50
23379: PUSH
23380: LD_INT 60
23382: PUSH
23383: LD_INT 70
23385: PUSH
23386: LD_INT 80
23388: PUSH
23389: LD_INT 90
23391: PUSH
23392: LD_INT 100
23394: PUSH
23395: LD_INT 110
23397: PUSH
23398: LD_INT 120
23400: PUSH
23401: LD_INT 130
23403: PUSH
23404: LD_INT 140
23406: PUSH
23407: LD_INT 150
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: PPUSH
23430: LD_INT 15
23432: PPUSH
23433: CALL_OW 12
23437: ARRAY
23438: ST_TO_ADDR
// if ValidHex ( x , y ) then
23439: LD_VAR 0 3
23443: PPUSH
23444: LD_VAR 0 4
23448: PPUSH
23449: CALL_OW 488
23453: IFFALSE 23476
// begin result := [ x , y ] ;
23455: LD_ADDR_VAR 0 1
23459: PUSH
23460: LD_VAR 0 3
23464: PUSH
23465: LD_VAR 0 4
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: ST_TO_ADDR
// break ;
23474: GO 23478
// end ; end ;
23476: GO 23278
23478: POP
23479: POP
// if result then
23480: LD_VAR 0 1
23484: IFFALSE 23544
// begin ToLua ( playSibBomb() ) ;
23486: LD_STRING playSibBomb()
23488: PPUSH
23489: CALL_OW 559
// wait ( 0 0$14 ) ;
23493: LD_INT 490
23495: PPUSH
23496: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23500: LD_VAR 0 1
23504: PUSH
23505: LD_INT 1
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 1
23513: PUSH
23514: LD_INT 2
23516: ARRAY
23517: PPUSH
23518: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23522: LD_VAR 0 1
23526: PUSH
23527: LD_INT 1
23529: ARRAY
23530: PPUSH
23531: LD_VAR 0 1
23535: PUSH
23536: LD_INT 2
23538: ARRAY
23539: PPUSH
23540: CALL_OW 429
// end ; end ;
23544: LD_VAR 0 1
23548: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23549: LD_EXP 37
23553: PUSH
23554: LD_EXP 59
23558: AND
23559: IFFALSE 23571
23561: GO 23563
23563: DISABLE
// YouLost (  ) ;
23564: LD_STRING 
23566: PPUSH
23567: CALL_OW 104
23571: END
// every 0 0$1 trigger StreamModeActive and sFog do
23572: LD_EXP 37
23576: PUSH
23577: LD_EXP 58
23581: AND
23582: IFFALSE 23596
23584: GO 23586
23586: DISABLE
// FogOff ( your_side ) ;
23587: LD_OWVAR 2
23591: PPUSH
23592: CALL_OW 344
23596: END
// every 0 0$1 trigger StreamModeActive and sSun do
23597: LD_EXP 37
23601: PUSH
23602: LD_EXP 60
23606: AND
23607: IFFALSE 23635
23609: GO 23611
23611: DISABLE
// begin solar_recharge_percent := 0 ;
23612: LD_ADDR_OWVAR 79
23616: PUSH
23617: LD_INT 0
23619: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23620: LD_INT 10500
23622: PPUSH
23623: CALL_OW 67
// solar_recharge_percent := 100 ;
23627: LD_ADDR_OWVAR 79
23631: PUSH
23632: LD_INT 100
23634: ST_TO_ADDR
// end ;
23635: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23636: LD_EXP 37
23640: PUSH
23641: LD_EXP 61
23645: AND
23646: IFFALSE 23885
23648: GO 23650
23650: DISABLE
23651: LD_INT 0
23653: PPUSH
23654: PPUSH
23655: PPUSH
// begin tmp := [ ] ;
23656: LD_ADDR_VAR 0 3
23660: PUSH
23661: EMPTY
23662: ST_TO_ADDR
// for i := 1 to 6 do
23663: LD_ADDR_VAR 0 1
23667: PUSH
23668: DOUBLE
23669: LD_INT 1
23671: DEC
23672: ST_TO_ADDR
23673: LD_INT 6
23675: PUSH
23676: FOR_TO
23677: IFFALSE 23782
// begin uc_nation := nation_nature ;
23679: LD_ADDR_OWVAR 21
23683: PUSH
23684: LD_INT 0
23686: ST_TO_ADDR
// uc_side := 0 ;
23687: LD_ADDR_OWVAR 20
23691: PUSH
23692: LD_INT 0
23694: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23695: LD_ADDR_OWVAR 29
23699: PUSH
23700: LD_INT 12
23702: PUSH
23703: LD_INT 12
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: ST_TO_ADDR
// hc_agressivity := 20 ;
23710: LD_ADDR_OWVAR 35
23714: PUSH
23715: LD_INT 20
23717: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23718: LD_ADDR_OWVAR 28
23722: PUSH
23723: LD_INT 17
23725: ST_TO_ADDR
// hc_gallery :=  ;
23726: LD_ADDR_OWVAR 33
23730: PUSH
23731: LD_STRING 
23733: ST_TO_ADDR
// hc_name :=  ;
23734: LD_ADDR_OWVAR 26
23738: PUSH
23739: LD_STRING 
23741: ST_TO_ADDR
// un := CreateHuman ;
23742: LD_ADDR_VAR 0 2
23746: PUSH
23747: CALL_OW 44
23751: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23752: LD_VAR 0 2
23756: PPUSH
23757: LD_INT 1
23759: PPUSH
23760: CALL_OW 51
// tmp := tmp ^ un ;
23764: LD_ADDR_VAR 0 3
23768: PUSH
23769: LD_VAR 0 3
23773: PUSH
23774: LD_VAR 0 2
23778: ADD
23779: ST_TO_ADDR
// end ;
23780: GO 23676
23782: POP
23783: POP
// repeat wait ( 0 0$1 ) ;
23784: LD_INT 35
23786: PPUSH
23787: CALL_OW 67
// for un in tmp do
23791: LD_ADDR_VAR 0 2
23795: PUSH
23796: LD_VAR 0 3
23800: PUSH
23801: FOR_IN
23802: IFFALSE 23876
// begin if IsDead ( un ) then
23804: LD_VAR 0 2
23808: PPUSH
23809: CALL_OW 301
23813: IFFALSE 23833
// begin tmp := tmp diff un ;
23815: LD_ADDR_VAR 0 3
23819: PUSH
23820: LD_VAR 0 3
23824: PUSH
23825: LD_VAR 0 2
23829: DIFF
23830: ST_TO_ADDR
// continue ;
23831: GO 23801
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23833: LD_VAR 0 2
23837: PPUSH
23838: LD_INT 3
23840: PUSH
23841: LD_INT 22
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 69
23859: PPUSH
23860: LD_VAR 0 2
23864: PPUSH
23865: CALL_OW 74
23869: PPUSH
23870: CALL_OW 115
// end ;
23874: GO 23801
23876: POP
23877: POP
// until not tmp ;
23878: LD_VAR 0 3
23882: NOT
23883: IFFALSE 23784
// end ;
23885: PPOPN 3
23887: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23888: LD_EXP 37
23892: PUSH
23893: LD_EXP 62
23897: AND
23898: IFFALSE 23952
23900: GO 23902
23902: DISABLE
// begin ToLua ( displayTroll(); ) ;
23903: LD_STRING displayTroll();
23905: PPUSH
23906: CALL_OW 559
// wait ( 3 3$00 ) ;
23910: LD_INT 6300
23912: PPUSH
23913: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23917: LD_STRING hideTroll();
23919: PPUSH
23920: CALL_OW 559
// wait ( 1 1$00 ) ;
23924: LD_INT 2100
23926: PPUSH
23927: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23931: LD_STRING displayTroll();
23933: PPUSH
23934: CALL_OW 559
// wait ( 1 1$00 ) ;
23938: LD_INT 2100
23940: PPUSH
23941: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23945: LD_STRING hideTroll();
23947: PPUSH
23948: CALL_OW 559
// end ;
23952: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23953: LD_EXP 37
23957: PUSH
23958: LD_EXP 63
23962: AND
23963: IFFALSE 24026
23965: GO 23967
23967: DISABLE
23968: LD_INT 0
23970: PPUSH
// begin p := 0 ;
23971: LD_ADDR_VAR 0 1
23975: PUSH
23976: LD_INT 0
23978: ST_TO_ADDR
// repeat game_speed := 1 ;
23979: LD_ADDR_OWVAR 65
23983: PUSH
23984: LD_INT 1
23986: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23987: LD_INT 35
23989: PPUSH
23990: CALL_OW 67
// p := p + 1 ;
23994: LD_ADDR_VAR 0 1
23998: PUSH
23999: LD_VAR 0 1
24003: PUSH
24004: LD_INT 1
24006: PLUS
24007: ST_TO_ADDR
// until p >= 60 ;
24008: LD_VAR 0 1
24012: PUSH
24013: LD_INT 60
24015: GREATEREQUAL
24016: IFFALSE 23979
// game_speed := 4 ;
24018: LD_ADDR_OWVAR 65
24022: PUSH
24023: LD_INT 4
24025: ST_TO_ADDR
// end ;
24026: PPOPN 1
24028: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24029: LD_EXP 37
24033: PUSH
24034: LD_EXP 64
24038: AND
24039: IFFALSE 24185
24041: GO 24043
24043: DISABLE
24044: LD_INT 0
24046: PPUSH
24047: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24048: LD_ADDR_VAR 0 1
24052: PUSH
24053: LD_INT 22
24055: PUSH
24056: LD_OWVAR 2
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: LD_INT 30
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 30
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PPUSH
24097: CALL_OW 69
24101: ST_TO_ADDR
// if not depot then
24102: LD_VAR 0 1
24106: NOT
24107: IFFALSE 24111
// exit ;
24109: GO 24185
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24111: LD_ADDR_VAR 0 2
24115: PUSH
24116: LD_VAR 0 1
24120: PUSH
24121: LD_INT 1
24123: PPUSH
24124: LD_VAR 0 1
24128: PPUSH
24129: CALL_OW 12
24133: ARRAY
24134: PPUSH
24135: CALL_OW 274
24139: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24140: LD_VAR 0 2
24144: PPUSH
24145: LD_INT 1
24147: PPUSH
24148: LD_INT 0
24150: PPUSH
24151: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24155: LD_VAR 0 2
24159: PPUSH
24160: LD_INT 2
24162: PPUSH
24163: LD_INT 0
24165: PPUSH
24166: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24170: LD_VAR 0 2
24174: PPUSH
24175: LD_INT 3
24177: PPUSH
24178: LD_INT 0
24180: PPUSH
24181: CALL_OW 277
// end ;
24185: PPOPN 2
24187: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24188: LD_EXP 37
24192: PUSH
24193: LD_EXP 65
24197: AND
24198: IFFALSE 24295
24200: GO 24202
24202: DISABLE
24203: LD_INT 0
24205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24206: LD_ADDR_VAR 0 1
24210: PUSH
24211: LD_INT 22
24213: PUSH
24214: LD_OWVAR 2
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 21
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 3
24235: PUSH
24236: LD_INT 23
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: PPUSH
24255: CALL_OW 69
24259: ST_TO_ADDR
// if not tmp then
24260: LD_VAR 0 1
24264: NOT
24265: IFFALSE 24269
// exit ;
24267: GO 24295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24269: LD_VAR 0 1
24273: PUSH
24274: LD_INT 1
24276: PPUSH
24277: LD_VAR 0 1
24281: PPUSH
24282: CALL_OW 12
24286: ARRAY
24287: PPUSH
24288: LD_INT 200
24290: PPUSH
24291: CALL_OW 234
// end ;
24295: PPOPN 1
24297: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24298: LD_EXP 37
24302: PUSH
24303: LD_EXP 66
24307: AND
24308: IFFALSE 24387
24310: GO 24312
24312: DISABLE
24313: LD_INT 0
24315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_OWVAR 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 21
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PPUSH
24347: CALL_OW 69
24351: ST_TO_ADDR
// if not tmp then
24352: LD_VAR 0 1
24356: NOT
24357: IFFALSE 24361
// exit ;
24359: GO 24387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24361: LD_VAR 0 1
24365: PUSH
24366: LD_INT 1
24368: PPUSH
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 12
24378: ARRAY
24379: PPUSH
24380: LD_INT 60
24382: PPUSH
24383: CALL_OW 234
// end ;
24387: PPOPN 1
24389: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24390: LD_EXP 37
24394: PUSH
24395: LD_EXP 67
24399: AND
24400: IFFALSE 24499
24402: GO 24404
24404: DISABLE
24405: LD_INT 0
24407: PPUSH
24408: PPUSH
// begin enable ;
24409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24410: LD_ADDR_VAR 0 1
24414: PUSH
24415: LD_INT 22
24417: PUSH
24418: LD_OWVAR 2
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 61
24429: PUSH
24430: EMPTY
24431: LIST
24432: PUSH
24433: LD_INT 33
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: PPUSH
24448: CALL_OW 69
24452: ST_TO_ADDR
// if not tmp then
24453: LD_VAR 0 1
24457: NOT
24458: IFFALSE 24462
// exit ;
24460: GO 24499
// for i in tmp do
24462: LD_ADDR_VAR 0 2
24466: PUSH
24467: LD_VAR 0 1
24471: PUSH
24472: FOR_IN
24473: IFFALSE 24497
// if IsControledBy ( i ) then
24475: LD_VAR 0 2
24479: PPUSH
24480: CALL_OW 312
24484: IFFALSE 24495
// ComUnlink ( i ) ;
24486: LD_VAR 0 2
24490: PPUSH
24491: CALL_OW 136
24495: GO 24472
24497: POP
24498: POP
// end ;
24499: PPOPN 2
24501: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24502: LD_EXP 37
24506: PUSH
24507: LD_EXP 68
24511: AND
24512: IFFALSE 24652
24514: GO 24516
24516: DISABLE
24517: LD_INT 0
24519: PPUSH
24520: PPUSH
// begin ToLua ( displayPowell(); ) ;
24521: LD_STRING displayPowell();
24523: PPUSH
24524: CALL_OW 559
// uc_side := 0 ;
24528: LD_ADDR_OWVAR 20
24532: PUSH
24533: LD_INT 0
24535: ST_TO_ADDR
// uc_nation := 2 ;
24536: LD_ADDR_OWVAR 21
24540: PUSH
24541: LD_INT 2
24543: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24544: LD_ADDR_OWVAR 37
24548: PUSH
24549: LD_INT 14
24551: ST_TO_ADDR
// vc_engine := engine_siberite ;
24552: LD_ADDR_OWVAR 39
24556: PUSH
24557: LD_INT 3
24559: ST_TO_ADDR
// vc_control := control_apeman ;
24560: LD_ADDR_OWVAR 38
24564: PUSH
24565: LD_INT 5
24567: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24568: LD_ADDR_OWVAR 40
24572: PUSH
24573: LD_INT 29
24575: ST_TO_ADDR
// un := CreateVehicle ;
24576: LD_ADDR_VAR 0 2
24580: PUSH
24581: CALL_OW 45
24585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24586: LD_VAR 0 2
24590: PPUSH
24591: LD_INT 1
24593: PPUSH
24594: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24598: LD_INT 35
24600: PPUSH
24601: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24605: LD_VAR 0 2
24609: PPUSH
24610: LD_INT 22
24612: PUSH
24613: LD_OWVAR 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PPUSH
24622: CALL_OW 69
24626: PPUSH
24627: LD_VAR 0 2
24631: PPUSH
24632: CALL_OW 74
24636: PPUSH
24637: CALL_OW 115
// until IsDead ( un ) ;
24641: LD_VAR 0 2
24645: PPUSH
24646: CALL_OW 301
24650: IFFALSE 24598
// end ;
24652: PPOPN 2
24654: END
// every 0 0$1 trigger StreamModeActive and sStu do
24655: LD_EXP 37
24659: PUSH
24660: LD_EXP 76
24664: AND
24665: IFFALSE 24681
24667: GO 24669
24669: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24670: LD_STRING displayStucuk();
24672: PPUSH
24673: CALL_OW 559
// ResetFog ;
24677: CALL_OW 335
// end ;
24681: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24682: LD_EXP 37
24686: PUSH
24687: LD_EXP 69
24691: AND
24692: IFFALSE 24833
24694: GO 24696
24696: DISABLE
24697: LD_INT 0
24699: PPUSH
24700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24701: LD_ADDR_VAR 0 2
24705: PUSH
24706: LD_INT 22
24708: PUSH
24709: LD_OWVAR 2
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 21
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PPUSH
24732: CALL_OW 69
24736: ST_TO_ADDR
// if not tmp then
24737: LD_VAR 0 2
24741: NOT
24742: IFFALSE 24746
// exit ;
24744: GO 24833
// un := tmp [ rand ( 1 , tmp ) ] ;
24746: LD_ADDR_VAR 0 1
24750: PUSH
24751: LD_VAR 0 2
24755: PUSH
24756: LD_INT 1
24758: PPUSH
24759: LD_VAR 0 2
24763: PPUSH
24764: CALL_OW 12
24768: ARRAY
24769: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24770: LD_VAR 0 1
24774: PPUSH
24775: LD_INT 0
24777: PPUSH
24778: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24782: LD_VAR 0 1
24786: PPUSH
24787: LD_OWVAR 3
24791: PUSH
24792: LD_VAR 0 1
24796: DIFF
24797: PPUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 74
24807: PPUSH
24808: CALL_OW 115
// wait ( 0 0$20 ) ;
24812: LD_INT 700
24814: PPUSH
24815: CALL_OW 67
// SetSide ( un , your_side ) ;
24819: LD_VAR 0 1
24823: PPUSH
24824: LD_OWVAR 2
24828: PPUSH
24829: CALL_OW 235
// end ;
24833: PPOPN 2
24835: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24836: LD_EXP 37
24840: PUSH
24841: LD_EXP 70
24845: AND
24846: IFFALSE 24952
24848: GO 24850
24850: DISABLE
24851: LD_INT 0
24853: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: LD_INT 22
24861: PUSH
24862: LD_OWVAR 2
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 30
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: ST_TO_ADDR
// if not depot then
24908: LD_VAR 0 1
24912: NOT
24913: IFFALSE 24917
// exit ;
24915: GO 24952
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24917: LD_VAR 0 1
24921: PUSH
24922: LD_INT 1
24924: ARRAY
24925: PPUSH
24926: CALL_OW 250
24930: PPUSH
24931: LD_VAR 0 1
24935: PUSH
24936: LD_INT 1
24938: ARRAY
24939: PPUSH
24940: CALL_OW 251
24944: PPUSH
24945: LD_INT 70
24947: PPUSH
24948: CALL_OW 495
// end ;
24952: PPOPN 1
24954: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24955: LD_EXP 37
24959: PUSH
24960: LD_EXP 71
24964: AND
24965: IFFALSE 25176
24967: GO 24969
24969: DISABLE
24970: LD_INT 0
24972: PPUSH
24973: PPUSH
24974: PPUSH
24975: PPUSH
24976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24977: LD_ADDR_VAR 0 5
24981: PUSH
24982: LD_INT 22
24984: PUSH
24985: LD_OWVAR 2
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 21
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PPUSH
25008: CALL_OW 69
25012: ST_TO_ADDR
// if not tmp then
25013: LD_VAR 0 5
25017: NOT
25018: IFFALSE 25022
// exit ;
25020: GO 25176
// for i in tmp do
25022: LD_ADDR_VAR 0 1
25026: PUSH
25027: LD_VAR 0 5
25031: PUSH
25032: FOR_IN
25033: IFFALSE 25174
// begin d := rand ( 0 , 5 ) ;
25035: LD_ADDR_VAR 0 4
25039: PUSH
25040: LD_INT 0
25042: PPUSH
25043: LD_INT 5
25045: PPUSH
25046: CALL_OW 12
25050: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25051: LD_ADDR_VAR 0 2
25055: PUSH
25056: LD_VAR 0 1
25060: PPUSH
25061: CALL_OW 250
25065: PPUSH
25066: LD_VAR 0 4
25070: PPUSH
25071: LD_INT 3
25073: PPUSH
25074: LD_INT 12
25076: PPUSH
25077: CALL_OW 12
25081: PPUSH
25082: CALL_OW 272
25086: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25087: LD_ADDR_VAR 0 3
25091: PUSH
25092: LD_VAR 0 1
25096: PPUSH
25097: CALL_OW 251
25101: PPUSH
25102: LD_VAR 0 4
25106: PPUSH
25107: LD_INT 3
25109: PPUSH
25110: LD_INT 12
25112: PPUSH
25113: CALL_OW 12
25117: PPUSH
25118: CALL_OW 273
25122: ST_TO_ADDR
// if ValidHex ( x , y ) then
25123: LD_VAR 0 2
25127: PPUSH
25128: LD_VAR 0 3
25132: PPUSH
25133: CALL_OW 488
25137: IFFALSE 25172
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25139: LD_VAR 0 1
25143: PPUSH
25144: LD_VAR 0 2
25148: PPUSH
25149: LD_VAR 0 3
25153: PPUSH
25154: LD_INT 3
25156: PPUSH
25157: LD_INT 6
25159: PPUSH
25160: CALL_OW 12
25164: PPUSH
25165: LD_INT 1
25167: PPUSH
25168: CALL_OW 483
// end ;
25172: GO 25032
25174: POP
25175: POP
// end ;
25176: PPOPN 5
25178: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25179: LD_EXP 37
25183: PUSH
25184: LD_EXP 72
25188: AND
25189: IFFALSE 25283
25191: GO 25193
25193: DISABLE
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25198: LD_ADDR_VAR 0 2
25202: PUSH
25203: LD_INT 22
25205: PUSH
25206: LD_OWVAR 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 32
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 21
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: PPUSH
25240: CALL_OW 69
25244: ST_TO_ADDR
// if not tmp then
25245: LD_VAR 0 2
25249: NOT
25250: IFFALSE 25254
// exit ;
25252: GO 25283
// for i in tmp do
25254: LD_ADDR_VAR 0 1
25258: PUSH
25259: LD_VAR 0 2
25263: PUSH
25264: FOR_IN
25265: IFFALSE 25281
// SetFuel ( i , 0 ) ;
25267: LD_VAR 0 1
25271: PPUSH
25272: LD_INT 0
25274: PPUSH
25275: CALL_OW 240
25279: GO 25264
25281: POP
25282: POP
// end ;
25283: PPOPN 2
25285: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25286: LD_EXP 37
25290: PUSH
25291: LD_EXP 73
25295: AND
25296: IFFALSE 25362
25298: GO 25300
25300: DISABLE
25301: LD_INT 0
25303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25304: LD_ADDR_VAR 0 1
25308: PUSH
25309: LD_INT 22
25311: PUSH
25312: LD_OWVAR 2
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 30
25323: PUSH
25324: LD_INT 29
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PPUSH
25335: CALL_OW 69
25339: ST_TO_ADDR
// if not tmp then
25340: LD_VAR 0 1
25344: NOT
25345: IFFALSE 25349
// exit ;
25347: GO 25362
// DestroyUnit ( tmp [ 1 ] ) ;
25349: LD_VAR 0 1
25353: PUSH
25354: LD_INT 1
25356: ARRAY
25357: PPUSH
25358: CALL_OW 65
// end ;
25362: PPOPN 1
25364: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25365: LD_EXP 37
25369: PUSH
25370: LD_EXP 75
25374: AND
25375: IFFALSE 25504
25377: GO 25379
25379: DISABLE
25380: LD_INT 0
25382: PPUSH
// begin uc_side := 0 ;
25383: LD_ADDR_OWVAR 20
25387: PUSH
25388: LD_INT 0
25390: ST_TO_ADDR
// uc_nation := nation_arabian ;
25391: LD_ADDR_OWVAR 21
25395: PUSH
25396: LD_INT 2
25398: ST_TO_ADDR
// hc_gallery :=  ;
25399: LD_ADDR_OWVAR 33
25403: PUSH
25404: LD_STRING 
25406: ST_TO_ADDR
// hc_name :=  ;
25407: LD_ADDR_OWVAR 26
25411: PUSH
25412: LD_STRING 
25414: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25415: LD_INT 1
25417: PPUSH
25418: LD_INT 11
25420: PPUSH
25421: LD_INT 10
25423: PPUSH
25424: CALL_OW 380
// un := CreateHuman ;
25428: LD_ADDR_VAR 0 1
25432: PUSH
25433: CALL_OW 44
25437: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25438: LD_VAR 0 1
25442: PPUSH
25443: LD_INT 1
25445: PPUSH
25446: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25450: LD_INT 35
25452: PPUSH
25453: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25457: LD_VAR 0 1
25461: PPUSH
25462: LD_INT 22
25464: PUSH
25465: LD_OWVAR 2
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PPUSH
25474: CALL_OW 69
25478: PPUSH
25479: LD_VAR 0 1
25483: PPUSH
25484: CALL_OW 74
25488: PPUSH
25489: CALL_OW 115
// until IsDead ( un ) ;
25493: LD_VAR 0 1
25497: PPUSH
25498: CALL_OW 301
25502: IFFALSE 25450
// end ;
25504: PPOPN 1
25506: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25507: LD_EXP 37
25511: PUSH
25512: LD_EXP 77
25516: AND
25517: IFFALSE 25529
25519: GO 25521
25521: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25522: LD_STRING earthquake(getX(game), 0, 32)
25524: PPUSH
25525: CALL_OW 559
25529: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25530: LD_EXP 37
25534: PUSH
25535: LD_EXP 78
25539: AND
25540: IFFALSE 25631
25542: GO 25544
25544: DISABLE
25545: LD_INT 0
25547: PPUSH
// begin enable ;
25548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25549: LD_ADDR_VAR 0 1
25553: PUSH
25554: LD_INT 22
25556: PUSH
25557: LD_OWVAR 2
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 21
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 33
25578: PUSH
25579: LD_INT 3
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: PPUSH
25591: CALL_OW 69
25595: ST_TO_ADDR
// if not tmp then
25596: LD_VAR 0 1
25600: NOT
25601: IFFALSE 25605
// exit ;
25603: GO 25631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25605: LD_VAR 0 1
25609: PUSH
25610: LD_INT 1
25612: PPUSH
25613: LD_VAR 0 1
25617: PPUSH
25618: CALL_OW 12
25622: ARRAY
25623: PPUSH
25624: LD_INT 1
25626: PPUSH
25627: CALL_OW 234
// end ;
25631: PPOPN 1
25633: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25634: LD_EXP 37
25638: PUSH
25639: LD_EXP 79
25643: AND
25644: IFFALSE 25785
25646: GO 25648
25648: DISABLE
25649: LD_INT 0
25651: PPUSH
25652: PPUSH
25653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25654: LD_ADDR_VAR 0 3
25658: PUSH
25659: LD_INT 22
25661: PUSH
25662: LD_OWVAR 2
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 25
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 69
25689: ST_TO_ADDR
// if not tmp then
25690: LD_VAR 0 3
25694: NOT
25695: IFFALSE 25699
// exit ;
25697: GO 25785
// un := tmp [ rand ( 1 , tmp ) ] ;
25699: LD_ADDR_VAR 0 2
25703: PUSH
25704: LD_VAR 0 3
25708: PUSH
25709: LD_INT 1
25711: PPUSH
25712: LD_VAR 0 3
25716: PPUSH
25717: CALL_OW 12
25721: ARRAY
25722: ST_TO_ADDR
// if Crawls ( un ) then
25723: LD_VAR 0 2
25727: PPUSH
25728: CALL_OW 318
25732: IFFALSE 25743
// ComWalk ( un ) ;
25734: LD_VAR 0 2
25738: PPUSH
25739: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25743: LD_VAR 0 2
25747: PPUSH
25748: LD_INT 9
25750: PPUSH
25751: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25755: LD_INT 28
25757: PPUSH
25758: LD_OWVAR 2
25762: PPUSH
25763: LD_INT 2
25765: PPUSH
25766: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25770: LD_INT 29
25772: PPUSH
25773: LD_OWVAR 2
25777: PPUSH
25778: LD_INT 2
25780: PPUSH
25781: CALL_OW 322
// end ;
25785: PPOPN 3
25787: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25788: LD_EXP 37
25792: PUSH
25793: LD_EXP 80
25797: AND
25798: IFFALSE 25909
25800: GO 25802
25802: DISABLE
25803: LD_INT 0
25805: PPUSH
25806: PPUSH
25807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_INT 22
25815: PUSH
25816: LD_OWVAR 2
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 25
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PPUSH
25839: CALL_OW 69
25843: ST_TO_ADDR
// if not tmp then
25844: LD_VAR 0 3
25848: NOT
25849: IFFALSE 25853
// exit ;
25851: GO 25909
// un := tmp [ rand ( 1 , tmp ) ] ;
25853: LD_ADDR_VAR 0 2
25857: PUSH
25858: LD_VAR 0 3
25862: PUSH
25863: LD_INT 1
25865: PPUSH
25866: LD_VAR 0 3
25870: PPUSH
25871: CALL_OW 12
25875: ARRAY
25876: ST_TO_ADDR
// if Crawls ( un ) then
25877: LD_VAR 0 2
25881: PPUSH
25882: CALL_OW 318
25886: IFFALSE 25897
// ComWalk ( un ) ;
25888: LD_VAR 0 2
25892: PPUSH
25893: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25897: LD_VAR 0 2
25901: PPUSH
25902: LD_INT 8
25904: PPUSH
25905: CALL_OW 336
// end ;
25909: PPOPN 3
25911: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25912: LD_EXP 37
25916: PUSH
25917: LD_EXP 81
25921: AND
25922: IFFALSE 26066
25924: GO 25926
25926: DISABLE
25927: LD_INT 0
25929: PPUSH
25930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25931: LD_ADDR_VAR 0 2
25935: PUSH
25936: LD_INT 22
25938: PUSH
25939: LD_OWVAR 2
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 21
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 34
25963: PUSH
25964: LD_INT 12
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 34
25973: PUSH
25974: LD_INT 51
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 34
25983: PUSH
25984: LD_INT 32
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: PPUSH
26002: CALL_OW 69
26006: ST_TO_ADDR
// if not tmp then
26007: LD_VAR 0 2
26011: NOT
26012: IFFALSE 26016
// exit ;
26014: GO 26066
// for i in tmp do
26016: LD_ADDR_VAR 0 1
26020: PUSH
26021: LD_VAR 0 2
26025: PUSH
26026: FOR_IN
26027: IFFALSE 26064
// if GetCargo ( i , mat_artifact ) = 0 then
26029: LD_VAR 0 1
26033: PPUSH
26034: LD_INT 4
26036: PPUSH
26037: CALL_OW 289
26041: PUSH
26042: LD_INT 0
26044: EQUAL
26045: IFFALSE 26062
// SetCargo ( i , mat_siberit , 100 ) ;
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_INT 3
26054: PPUSH
26055: LD_INT 100
26057: PPUSH
26058: CALL_OW 290
26062: GO 26026
26064: POP
26065: POP
// end ;
26066: PPOPN 2
26068: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26069: LD_EXP 37
26073: PUSH
26074: LD_EXP 82
26078: AND
26079: IFFALSE 26262
26081: GO 26083
26083: DISABLE
26084: LD_INT 0
26086: PPUSH
26087: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26088: LD_ADDR_VAR 0 2
26092: PUSH
26093: LD_INT 22
26095: PUSH
26096: LD_OWVAR 2
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 69
26109: ST_TO_ADDR
// if not tmp then
26110: LD_VAR 0 2
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26262
// for i := 1 to 2 do
26119: LD_ADDR_VAR 0 1
26123: PUSH
26124: DOUBLE
26125: LD_INT 1
26127: DEC
26128: ST_TO_ADDR
26129: LD_INT 2
26131: PUSH
26132: FOR_TO
26133: IFFALSE 26260
// begin uc_side := your_side ;
26135: LD_ADDR_OWVAR 20
26139: PUSH
26140: LD_OWVAR 2
26144: ST_TO_ADDR
// uc_nation := nation_american ;
26145: LD_ADDR_OWVAR 21
26149: PUSH
26150: LD_INT 1
26152: ST_TO_ADDR
// vc_chassis := us_morphling ;
26153: LD_ADDR_OWVAR 37
26157: PUSH
26158: LD_INT 5
26160: ST_TO_ADDR
// vc_engine := engine_siberite ;
26161: LD_ADDR_OWVAR 39
26165: PUSH
26166: LD_INT 3
26168: ST_TO_ADDR
// vc_control := control_computer ;
26169: LD_ADDR_OWVAR 38
26173: PUSH
26174: LD_INT 3
26176: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26177: LD_ADDR_OWVAR 40
26181: PUSH
26182: LD_INT 10
26184: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26185: LD_VAR 0 2
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: PPUSH
26194: CALL_OW 310
26198: NOT
26199: IFFALSE 26246
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26201: CALL_OW 45
26205: PPUSH
26206: LD_VAR 0 2
26210: PUSH
26211: LD_INT 1
26213: ARRAY
26214: PPUSH
26215: CALL_OW 250
26219: PPUSH
26220: LD_VAR 0 2
26224: PUSH
26225: LD_INT 1
26227: ARRAY
26228: PPUSH
26229: CALL_OW 251
26233: PPUSH
26234: LD_INT 12
26236: PPUSH
26237: LD_INT 1
26239: PPUSH
26240: CALL_OW 50
26244: GO 26258
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26246: CALL_OW 45
26250: PPUSH
26251: LD_INT 1
26253: PPUSH
26254: CALL_OW 51
// end ;
26258: GO 26132
26260: POP
26261: POP
// end ;
26262: PPOPN 2
26264: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26265: LD_EXP 37
26269: PUSH
26270: LD_EXP 83
26274: AND
26275: IFFALSE 26497
26277: GO 26279
26279: DISABLE
26280: LD_INT 0
26282: PPUSH
26283: PPUSH
26284: PPUSH
26285: PPUSH
26286: PPUSH
26287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26288: LD_ADDR_VAR 0 6
26292: PUSH
26293: LD_INT 22
26295: PUSH
26296: LD_OWVAR 2
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 21
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 3
26317: PUSH
26318: LD_INT 23
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: ST_TO_ADDR
// if not tmp then
26342: LD_VAR 0 6
26346: NOT
26347: IFFALSE 26351
// exit ;
26349: GO 26497
// s1 := rand ( 1 , 4 ) ;
26351: LD_ADDR_VAR 0 2
26355: PUSH
26356: LD_INT 1
26358: PPUSH
26359: LD_INT 4
26361: PPUSH
26362: CALL_OW 12
26366: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26367: LD_ADDR_VAR 0 4
26371: PUSH
26372: LD_VAR 0 6
26376: PUSH
26377: LD_INT 1
26379: ARRAY
26380: PPUSH
26381: LD_VAR 0 2
26385: PPUSH
26386: CALL_OW 259
26390: ST_TO_ADDR
// if s1 = 1 then
26391: LD_VAR 0 2
26395: PUSH
26396: LD_INT 1
26398: EQUAL
26399: IFFALSE 26419
// s2 := rand ( 2 , 4 ) else
26401: LD_ADDR_VAR 0 3
26405: PUSH
26406: LD_INT 2
26408: PPUSH
26409: LD_INT 4
26411: PPUSH
26412: CALL_OW 12
26416: ST_TO_ADDR
26417: GO 26427
// s2 := 1 ;
26419: LD_ADDR_VAR 0 3
26423: PUSH
26424: LD_INT 1
26426: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26427: LD_ADDR_VAR 0 5
26431: PUSH
26432: LD_VAR 0 6
26436: PUSH
26437: LD_INT 1
26439: ARRAY
26440: PPUSH
26441: LD_VAR 0 3
26445: PPUSH
26446: CALL_OW 259
26450: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26451: LD_VAR 0 6
26455: PUSH
26456: LD_INT 1
26458: ARRAY
26459: PPUSH
26460: LD_VAR 0 2
26464: PPUSH
26465: LD_VAR 0 5
26469: PPUSH
26470: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26474: LD_VAR 0 6
26478: PUSH
26479: LD_INT 1
26481: ARRAY
26482: PPUSH
26483: LD_VAR 0 3
26487: PPUSH
26488: LD_VAR 0 4
26492: PPUSH
26493: CALL_OW 237
// end ;
26497: PPOPN 6
26499: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26500: LD_EXP 37
26504: PUSH
26505: LD_EXP 84
26509: AND
26510: IFFALSE 26589
26512: GO 26514
26514: DISABLE
26515: LD_INT 0
26517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26518: LD_ADDR_VAR 0 1
26522: PUSH
26523: LD_INT 22
26525: PUSH
26526: LD_OWVAR 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 30
26537: PUSH
26538: LD_INT 3
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PPUSH
26549: CALL_OW 69
26553: ST_TO_ADDR
// if not tmp then
26554: LD_VAR 0 1
26558: NOT
26559: IFFALSE 26563
// exit ;
26561: GO 26589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26563: LD_VAR 0 1
26567: PUSH
26568: LD_INT 1
26570: PPUSH
26571: LD_VAR 0 1
26575: PPUSH
26576: CALL_OW 12
26580: ARRAY
26581: PPUSH
26582: LD_INT 1
26584: PPUSH
26585: CALL_OW 234
// end ;
26589: PPOPN 1
26591: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26592: LD_EXP 37
26596: PUSH
26597: LD_EXP 85
26601: AND
26602: IFFALSE 26714
26604: GO 26606
26606: DISABLE
26607: LD_INT 0
26609: PPUSH
26610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26611: LD_ADDR_VAR 0 2
26615: PUSH
26616: LD_INT 22
26618: PUSH
26619: LD_OWVAR 2
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: LD_INT 30
26633: PUSH
26634: LD_INT 27
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 30
26643: PUSH
26644: LD_INT 26
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 30
26653: PUSH
26654: LD_INT 28
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PPUSH
26671: CALL_OW 69
26675: ST_TO_ADDR
// if not tmp then
26676: LD_VAR 0 2
26680: NOT
26681: IFFALSE 26685
// exit ;
26683: GO 26714
// for i in tmp do
26685: LD_ADDR_VAR 0 1
26689: PUSH
26690: LD_VAR 0 2
26694: PUSH
26695: FOR_IN
26696: IFFALSE 26712
// SetLives ( i , 1 ) ;
26698: LD_VAR 0 1
26702: PPUSH
26703: LD_INT 1
26705: PPUSH
26706: CALL_OW 234
26710: GO 26695
26712: POP
26713: POP
// end ;
26714: PPOPN 2
26716: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26717: LD_EXP 37
26721: PUSH
26722: LD_EXP 86
26726: AND
26727: IFFALSE 27014
26729: GO 26731
26731: DISABLE
26732: LD_INT 0
26734: PPUSH
26735: PPUSH
26736: PPUSH
// begin i := rand ( 1 , 7 ) ;
26737: LD_ADDR_VAR 0 1
26741: PUSH
26742: LD_INT 1
26744: PPUSH
26745: LD_INT 7
26747: PPUSH
26748: CALL_OW 12
26752: ST_TO_ADDR
// case i of 1 :
26753: LD_VAR 0 1
26757: PUSH
26758: LD_INT 1
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 26776
26766: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26767: LD_STRING earthquake(getX(game), 0, 32)
26769: PPUSH
26770: CALL_OW 559
26774: GO 27014
26776: LD_INT 2
26778: DOUBLE
26779: EQUAL
26780: IFTRUE 26784
26782: GO 26798
26784: POP
// begin ToLua ( displayStucuk(); ) ;
26785: LD_STRING displayStucuk();
26787: PPUSH
26788: CALL_OW 559
// ResetFog ;
26792: CALL_OW 335
// end ; 3 :
26796: GO 27014
26798: LD_INT 3
26800: DOUBLE
26801: EQUAL
26802: IFTRUE 26806
26804: GO 26910
26806: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26807: LD_ADDR_VAR 0 2
26811: PUSH
26812: LD_INT 22
26814: PUSH
26815: LD_OWVAR 2
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 25
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PPUSH
26838: CALL_OW 69
26842: ST_TO_ADDR
// if not tmp then
26843: LD_VAR 0 2
26847: NOT
26848: IFFALSE 26852
// exit ;
26850: GO 27014
// un := tmp [ rand ( 1 , tmp ) ] ;
26852: LD_ADDR_VAR 0 3
26856: PUSH
26857: LD_VAR 0 2
26861: PUSH
26862: LD_INT 1
26864: PPUSH
26865: LD_VAR 0 2
26869: PPUSH
26870: CALL_OW 12
26874: ARRAY
26875: ST_TO_ADDR
// if Crawls ( un ) then
26876: LD_VAR 0 3
26880: PPUSH
26881: CALL_OW 318
26885: IFFALSE 26896
// ComWalk ( un ) ;
26887: LD_VAR 0 3
26891: PPUSH
26892: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26896: LD_VAR 0 3
26900: PPUSH
26901: LD_INT 8
26903: PPUSH
26904: CALL_OW 336
// end ; 4 :
26908: GO 27014
26910: LD_INT 4
26912: DOUBLE
26913: EQUAL
26914: IFTRUE 26918
26916: GO 26992
26918: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26919: LD_ADDR_VAR 0 2
26923: PUSH
26924: LD_INT 22
26926: PUSH
26927: LD_OWVAR 2
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 30
26938: PUSH
26939: LD_INT 29
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PPUSH
26950: CALL_OW 69
26954: ST_TO_ADDR
// if not tmp then
26955: LD_VAR 0 2
26959: NOT
26960: IFFALSE 26964
// exit ;
26962: GO 27014
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26964: LD_VAR 0 2
26968: PUSH
26969: LD_INT 1
26971: ARRAY
26972: PPUSH
26973: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26977: LD_VAR 0 2
26981: PUSH
26982: LD_INT 1
26984: ARRAY
26985: PPUSH
26986: CALL_OW 65
// end ; 5 .. 7 :
26990: GO 27014
26992: LD_INT 5
26994: DOUBLE
26995: GREATEREQUAL
26996: IFFALSE 27004
26998: LD_INT 7
27000: DOUBLE
27001: LESSEQUAL
27002: IFTRUE 27006
27004: GO 27013
27006: POP
// StreamSibBomb ; end ;
27007: CALL 23251 0 0
27011: GO 27014
27013: POP
// end ;
27014: PPOPN 3
27016: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27017: LD_EXP 37
27021: PUSH
27022: LD_EXP 87
27026: AND
27027: IFFALSE 27183
27029: GO 27031
27031: DISABLE
27032: LD_INT 0
27034: PPUSH
27035: PPUSH
27036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27037: LD_ADDR_VAR 0 2
27041: PUSH
27042: LD_INT 81
27044: PUSH
27045: LD_OWVAR 2
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 2
27056: PUSH
27057: LD_INT 21
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 21
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PPUSH
27086: CALL_OW 69
27090: ST_TO_ADDR
// if not tmp then
27091: LD_VAR 0 2
27095: NOT
27096: IFFALSE 27100
// exit ;
27098: GO 27183
// p := 0 ;
27100: LD_ADDR_VAR 0 3
27104: PUSH
27105: LD_INT 0
27107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27108: LD_INT 35
27110: PPUSH
27111: CALL_OW 67
// p := p + 1 ;
27115: LD_ADDR_VAR 0 3
27119: PUSH
27120: LD_VAR 0 3
27124: PUSH
27125: LD_INT 1
27127: PLUS
27128: ST_TO_ADDR
// for i in tmp do
27129: LD_ADDR_VAR 0 1
27133: PUSH
27134: LD_VAR 0 2
27138: PUSH
27139: FOR_IN
27140: IFFALSE 27171
// if GetLives ( i ) < 1000 then
27142: LD_VAR 0 1
27146: PPUSH
27147: CALL_OW 256
27151: PUSH
27152: LD_INT 1000
27154: LESS
27155: IFFALSE 27169
// SetLives ( i , 1000 ) ;
27157: LD_VAR 0 1
27161: PPUSH
27162: LD_INT 1000
27164: PPUSH
27165: CALL_OW 234
27169: GO 27139
27171: POP
27172: POP
// until p > 20 ;
27173: LD_VAR 0 3
27177: PUSH
27178: LD_INT 20
27180: GREATER
27181: IFFALSE 27108
// end ;
27183: PPOPN 3
27185: END
// every 0 0$1 trigger StreamModeActive and sTime do
27186: LD_EXP 37
27190: PUSH
27191: LD_EXP 88
27195: AND
27196: IFFALSE 27231
27198: GO 27200
27200: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27201: LD_INT 28
27203: PPUSH
27204: LD_OWVAR 2
27208: PPUSH
27209: LD_INT 2
27211: PPUSH
27212: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27216: LD_INT 30
27218: PPUSH
27219: LD_OWVAR 2
27223: PPUSH
27224: LD_INT 2
27226: PPUSH
27227: CALL_OW 322
// end ;
27231: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27232: LD_EXP 37
27236: PUSH
27237: LD_EXP 89
27241: AND
27242: IFFALSE 27363
27244: GO 27246
27246: DISABLE
27247: LD_INT 0
27249: PPUSH
27250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27251: LD_ADDR_VAR 0 2
27255: PUSH
27256: LD_INT 22
27258: PUSH
27259: LD_OWVAR 2
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 21
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: LD_INT 23
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: PPUSH
27300: CALL_OW 69
27304: ST_TO_ADDR
// if not tmp then
27305: LD_VAR 0 2
27309: NOT
27310: IFFALSE 27314
// exit ;
27312: GO 27363
// for i in tmp do
27314: LD_ADDR_VAR 0 1
27318: PUSH
27319: LD_VAR 0 2
27323: PUSH
27324: FOR_IN
27325: IFFALSE 27361
// begin if Crawls ( i ) then
27327: LD_VAR 0 1
27331: PPUSH
27332: CALL_OW 318
27336: IFFALSE 27347
// ComWalk ( i ) ;
27338: LD_VAR 0 1
27342: PPUSH
27343: CALL_OW 138
// SetClass ( i , 2 ) ;
27347: LD_VAR 0 1
27351: PPUSH
27352: LD_INT 2
27354: PPUSH
27355: CALL_OW 336
// end ;
27359: GO 27324
27361: POP
27362: POP
// end ;
27363: PPOPN 2
27365: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27366: LD_EXP 37
27370: PUSH
27371: LD_EXP 90
27375: AND
27376: IFFALSE 27664
27378: GO 27380
27380: DISABLE
27381: LD_INT 0
27383: PPUSH
27384: PPUSH
27385: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27386: LD_OWVAR 2
27390: PPUSH
27391: LD_INT 9
27393: PPUSH
27394: LD_INT 1
27396: PPUSH
27397: LD_INT 1
27399: PPUSH
27400: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27404: LD_INT 9
27406: PPUSH
27407: LD_OWVAR 2
27411: PPUSH
27412: CALL_OW 343
// uc_side := 9 ;
27416: LD_ADDR_OWVAR 20
27420: PUSH
27421: LD_INT 9
27423: ST_TO_ADDR
// uc_nation := 2 ;
27424: LD_ADDR_OWVAR 21
27428: PUSH
27429: LD_INT 2
27431: ST_TO_ADDR
// hc_name := Dark Warrior ;
27432: LD_ADDR_OWVAR 26
27436: PUSH
27437: LD_STRING Dark Warrior
27439: ST_TO_ADDR
// hc_gallery :=  ;
27440: LD_ADDR_OWVAR 33
27444: PUSH
27445: LD_STRING 
27447: ST_TO_ADDR
// hc_noskilllimit := true ;
27448: LD_ADDR_OWVAR 76
27452: PUSH
27453: LD_INT 1
27455: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27456: LD_ADDR_OWVAR 31
27460: PUSH
27461: LD_INT 30
27463: PUSH
27464: LD_INT 30
27466: PUSH
27467: LD_INT 30
27469: PUSH
27470: LD_INT 30
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
// un := CreateHuman ;
27479: LD_ADDR_VAR 0 3
27483: PUSH
27484: CALL_OW 44
27488: ST_TO_ADDR
// hc_noskilllimit := false ;
27489: LD_ADDR_OWVAR 76
27493: PUSH
27494: LD_INT 0
27496: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27497: LD_VAR 0 3
27501: PPUSH
27502: LD_INT 1
27504: PPUSH
27505: CALL_OW 51
// ToLua ( playRanger() ) ;
27509: LD_STRING playRanger()
27511: PPUSH
27512: CALL_OW 559
// p := 0 ;
27516: LD_ADDR_VAR 0 2
27520: PUSH
27521: LD_INT 0
27523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27524: LD_INT 35
27526: PPUSH
27527: CALL_OW 67
// p := p + 1 ;
27531: LD_ADDR_VAR 0 2
27535: PUSH
27536: LD_VAR 0 2
27540: PUSH
27541: LD_INT 1
27543: PLUS
27544: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27545: LD_VAR 0 3
27549: PPUSH
27550: CALL_OW 256
27554: PUSH
27555: LD_INT 1000
27557: LESS
27558: IFFALSE 27572
// SetLives ( un , 1000 ) ;
27560: LD_VAR 0 3
27564: PPUSH
27565: LD_INT 1000
27567: PPUSH
27568: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27572: LD_VAR 0 3
27576: PPUSH
27577: LD_INT 81
27579: PUSH
27580: LD_OWVAR 2
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 91
27591: PUSH
27592: LD_VAR 0 3
27596: PUSH
27597: LD_INT 30
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PPUSH
27609: CALL_OW 69
27613: PPUSH
27614: LD_VAR 0 3
27618: PPUSH
27619: CALL_OW 74
27623: PPUSH
27624: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27628: LD_VAR 0 2
27632: PUSH
27633: LD_INT 80
27635: GREATER
27636: PUSH
27637: LD_VAR 0 3
27641: PPUSH
27642: CALL_OW 301
27646: OR
27647: IFFALSE 27524
// if un then
27649: LD_VAR 0 3
27653: IFFALSE 27664
// RemoveUnit ( un ) ;
27655: LD_VAR 0 3
27659: PPUSH
27660: CALL_OW 64
// end ;
27664: PPOPN 3
27666: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27667: LD_EXP 91
27671: IFFALSE 27787
27673: GO 27675
27675: DISABLE
27676: LD_INT 0
27678: PPUSH
27679: PPUSH
27680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27681: LD_ADDR_VAR 0 2
27685: PUSH
27686: LD_INT 81
27688: PUSH
27689: LD_OWVAR 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 21
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PPUSH
27712: CALL_OW 69
27716: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27717: LD_STRING playComputer()
27719: PPUSH
27720: CALL_OW 559
// if not tmp then
27724: LD_VAR 0 2
27728: NOT
27729: IFFALSE 27733
// exit ;
27731: GO 27787
// for i in tmp do
27733: LD_ADDR_VAR 0 1
27737: PUSH
27738: LD_VAR 0 2
27742: PUSH
27743: FOR_IN
27744: IFFALSE 27785
// for j := 1 to 4 do
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: DOUBLE
27752: LD_INT 1
27754: DEC
27755: ST_TO_ADDR
27756: LD_INT 4
27758: PUSH
27759: FOR_TO
27760: IFFALSE 27781
// SetSkill ( i , j , 10 ) ;
27762: LD_VAR 0 1
27766: PPUSH
27767: LD_VAR 0 3
27771: PPUSH
27772: LD_INT 10
27774: PPUSH
27775: CALL_OW 237
27779: GO 27759
27781: POP
27782: POP
27783: GO 27743
27785: POP
27786: POP
// end ;
27787: PPOPN 3
27789: END
// every 0 0$1 trigger s30 do var i , tmp ;
27790: LD_EXP 92
27794: IFFALSE 27863
27796: GO 27798
27798: DISABLE
27799: LD_INT 0
27801: PPUSH
27802: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27803: LD_ADDR_VAR 0 2
27807: PUSH
27808: LD_INT 22
27810: PUSH
27811: LD_OWVAR 2
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PPUSH
27820: CALL_OW 69
27824: ST_TO_ADDR
// if not tmp then
27825: LD_VAR 0 2
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 27863
// for i in tmp do
27834: LD_ADDR_VAR 0 1
27838: PUSH
27839: LD_VAR 0 2
27843: PUSH
27844: FOR_IN
27845: IFFALSE 27861
// SetLives ( i , 300 ) ;
27847: LD_VAR 0 1
27851: PPUSH
27852: LD_INT 300
27854: PPUSH
27855: CALL_OW 234
27859: GO 27844
27861: POP
27862: POP
// end ;
27863: PPOPN 2
27865: END
// every 0 0$1 trigger s60 do var i , tmp ;
27866: LD_EXP 93
27870: IFFALSE 27939
27872: GO 27874
27874: DISABLE
27875: LD_INT 0
27877: PPUSH
27878: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27879: LD_ADDR_VAR 0 2
27883: PUSH
27884: LD_INT 22
27886: PUSH
27887: LD_OWVAR 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PPUSH
27896: CALL_OW 69
27900: ST_TO_ADDR
// if not tmp then
27901: LD_VAR 0 2
27905: NOT
27906: IFFALSE 27910
// exit ;
27908: GO 27939
// for i in tmp do
27910: LD_ADDR_VAR 0 1
27914: PUSH
27915: LD_VAR 0 2
27919: PUSH
27920: FOR_IN
27921: IFFALSE 27937
// SetLives ( i , 600 ) ;
27923: LD_VAR 0 1
27927: PPUSH
27928: LD_INT 600
27930: PPUSH
27931: CALL_OW 234
27935: GO 27920
27937: POP
27938: POP
// end ;
27939: PPOPN 2
27941: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27942: LD_INT 0
27944: PPUSH
// case cmd of 301 :
27945: LD_VAR 0 1
27949: PUSH
27950: LD_INT 301
27952: DOUBLE
27953: EQUAL
27954: IFTRUE 27958
27956: GO 27990
27958: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27959: LD_VAR 0 6
27963: PPUSH
27964: LD_VAR 0 7
27968: PPUSH
27969: LD_VAR 0 8
27973: PPUSH
27974: LD_VAR 0 4
27978: PPUSH
27979: LD_VAR 0 5
27983: PPUSH
27984: CALL 29199 0 5
27988: GO 28111
27990: LD_INT 302
27992: DOUBLE
27993: EQUAL
27994: IFTRUE 27998
27996: GO 28035
27998: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27999: LD_VAR 0 6
28003: PPUSH
28004: LD_VAR 0 7
28008: PPUSH
28009: LD_VAR 0 8
28013: PPUSH
28014: LD_VAR 0 9
28018: PPUSH
28019: LD_VAR 0 4
28023: PPUSH
28024: LD_VAR 0 5
28028: PPUSH
28029: CALL 29290 0 6
28033: GO 28111
28035: LD_INT 303
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28043
28041: GO 28080
28043: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28044: LD_VAR 0 6
28048: PPUSH
28049: LD_VAR 0 7
28053: PPUSH
28054: LD_VAR 0 8
28058: PPUSH
28059: LD_VAR 0 9
28063: PPUSH
28064: LD_VAR 0 4
28068: PPUSH
28069: LD_VAR 0 5
28073: PPUSH
28074: CALL 28116 0 6
28078: GO 28111
28080: LD_INT 304
28082: DOUBLE
28083: EQUAL
28084: IFTRUE 28088
28086: GO 28110
28088: POP
// hHackTeleport ( unit , x , y ) ; end ;
28089: LD_VAR 0 2
28093: PPUSH
28094: LD_VAR 0 4
28098: PPUSH
28099: LD_VAR 0 5
28103: PPUSH
28104: CALL 29883 0 3
28108: GO 28111
28110: POP
// end ;
28111: LD_VAR 0 12
28115: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28116: LD_INT 0
28118: PPUSH
28119: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 1
28127: LESS
28128: PUSH
28129: LD_VAR 0 1
28133: PUSH
28134: LD_INT 3
28136: GREATER
28137: OR
28138: PUSH
28139: LD_VAR 0 5
28143: PPUSH
28144: LD_VAR 0 6
28148: PPUSH
28149: CALL_OW 428
28153: OR
28154: IFFALSE 28158
// exit ;
28156: GO 28886
// uc_side := your_side ;
28158: LD_ADDR_OWVAR 20
28162: PUSH
28163: LD_OWVAR 2
28167: ST_TO_ADDR
// uc_nation := nation ;
28168: LD_ADDR_OWVAR 21
28172: PUSH
28173: LD_VAR 0 1
28177: ST_TO_ADDR
// bc_level = 1 ;
28178: LD_ADDR_OWVAR 43
28182: PUSH
28183: LD_INT 1
28185: ST_TO_ADDR
// case btype of 1 :
28186: LD_VAR 0 2
28190: PUSH
28191: LD_INT 1
28193: DOUBLE
28194: EQUAL
28195: IFTRUE 28199
28197: GO 28210
28199: POP
// bc_type := b_depot ; 2 :
28200: LD_ADDR_OWVAR 42
28204: PUSH
28205: LD_INT 0
28207: ST_TO_ADDR
28208: GO 28830
28210: LD_INT 2
28212: DOUBLE
28213: EQUAL
28214: IFTRUE 28218
28216: GO 28229
28218: POP
// bc_type := b_warehouse ; 3 :
28219: LD_ADDR_OWVAR 42
28223: PUSH
28224: LD_INT 1
28226: ST_TO_ADDR
28227: GO 28830
28229: LD_INT 3
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 28248
28237: POP
// bc_type := b_lab ; 4 .. 9 :
28238: LD_ADDR_OWVAR 42
28242: PUSH
28243: LD_INT 6
28245: ST_TO_ADDR
28246: GO 28830
28248: LD_INT 4
28250: DOUBLE
28251: GREATEREQUAL
28252: IFFALSE 28260
28254: LD_INT 9
28256: DOUBLE
28257: LESSEQUAL
28258: IFTRUE 28262
28260: GO 28322
28262: POP
// begin bc_type := b_lab_half ;
28263: LD_ADDR_OWVAR 42
28267: PUSH
28268: LD_INT 7
28270: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28271: LD_ADDR_OWVAR 44
28275: PUSH
28276: LD_INT 10
28278: PUSH
28279: LD_INT 11
28281: PUSH
28282: LD_INT 12
28284: PUSH
28285: LD_INT 15
28287: PUSH
28288: LD_INT 14
28290: PUSH
28291: LD_INT 13
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: PUSH
28302: LD_VAR 0 2
28306: PUSH
28307: LD_INT 3
28309: MINUS
28310: ARRAY
28311: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28312: LD_ADDR_OWVAR 45
28316: PUSH
28317: LD_INT 9
28319: ST_TO_ADDR
// end ; 10 .. 13 :
28320: GO 28830
28322: LD_INT 10
28324: DOUBLE
28325: GREATEREQUAL
28326: IFFALSE 28334
28328: LD_INT 13
28330: DOUBLE
28331: LESSEQUAL
28332: IFTRUE 28336
28334: GO 28413
28336: POP
// begin bc_type := b_lab_full ;
28337: LD_ADDR_OWVAR 42
28341: PUSH
28342: LD_INT 8
28344: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28345: LD_ADDR_OWVAR 44
28349: PUSH
28350: LD_INT 10
28352: PUSH
28353: LD_INT 12
28355: PUSH
28356: LD_INT 14
28358: PUSH
28359: LD_INT 13
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: PUSH
28368: LD_VAR 0 2
28372: PUSH
28373: LD_INT 9
28375: MINUS
28376: ARRAY
28377: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28378: LD_ADDR_OWVAR 45
28382: PUSH
28383: LD_INT 11
28385: PUSH
28386: LD_INT 15
28388: PUSH
28389: LD_INT 12
28391: PUSH
28392: LD_INT 15
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: PUSH
28401: LD_VAR 0 2
28405: PUSH
28406: LD_INT 9
28408: MINUS
28409: ARRAY
28410: ST_TO_ADDR
// end ; 14 :
28411: GO 28830
28413: LD_INT 14
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28432
28421: POP
// bc_type := b_workshop ; 15 :
28422: LD_ADDR_OWVAR 42
28426: PUSH
28427: LD_INT 2
28429: ST_TO_ADDR
28430: GO 28830
28432: LD_INT 15
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28451
28440: POP
// bc_type := b_factory ; 16 :
28441: LD_ADDR_OWVAR 42
28445: PUSH
28446: LD_INT 3
28448: ST_TO_ADDR
28449: GO 28830
28451: LD_INT 16
28453: DOUBLE
28454: EQUAL
28455: IFTRUE 28459
28457: GO 28470
28459: POP
// bc_type := b_ext_gun ; 17 :
28460: LD_ADDR_OWVAR 42
28464: PUSH
28465: LD_INT 17
28467: ST_TO_ADDR
28468: GO 28830
28470: LD_INT 17
28472: DOUBLE
28473: EQUAL
28474: IFTRUE 28478
28476: GO 28506
28478: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28479: LD_ADDR_OWVAR 42
28483: PUSH
28484: LD_INT 19
28486: PUSH
28487: LD_INT 23
28489: PUSH
28490: LD_INT 19
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: PUSH
28498: LD_VAR 0 1
28502: ARRAY
28503: ST_TO_ADDR
28504: GO 28830
28506: LD_INT 18
28508: DOUBLE
28509: EQUAL
28510: IFTRUE 28514
28512: GO 28525
28514: POP
// bc_type := b_ext_radar ; 19 :
28515: LD_ADDR_OWVAR 42
28519: PUSH
28520: LD_INT 20
28522: ST_TO_ADDR
28523: GO 28830
28525: LD_INT 19
28527: DOUBLE
28528: EQUAL
28529: IFTRUE 28533
28531: GO 28544
28533: POP
// bc_type := b_ext_radio ; 20 :
28534: LD_ADDR_OWVAR 42
28538: PUSH
28539: LD_INT 22
28541: ST_TO_ADDR
28542: GO 28830
28544: LD_INT 20
28546: DOUBLE
28547: EQUAL
28548: IFTRUE 28552
28550: GO 28563
28552: POP
// bc_type := b_ext_siberium ; 21 :
28553: LD_ADDR_OWVAR 42
28557: PUSH
28558: LD_INT 21
28560: ST_TO_ADDR
28561: GO 28830
28563: LD_INT 21
28565: DOUBLE
28566: EQUAL
28567: IFTRUE 28571
28569: GO 28582
28571: POP
// bc_type := b_ext_computer ; 22 :
28572: LD_ADDR_OWVAR 42
28576: PUSH
28577: LD_INT 24
28579: ST_TO_ADDR
28580: GO 28830
28582: LD_INT 22
28584: DOUBLE
28585: EQUAL
28586: IFTRUE 28590
28588: GO 28601
28590: POP
// bc_type := b_ext_track ; 23 :
28591: LD_ADDR_OWVAR 42
28595: PUSH
28596: LD_INT 16
28598: ST_TO_ADDR
28599: GO 28830
28601: LD_INT 23
28603: DOUBLE
28604: EQUAL
28605: IFTRUE 28609
28607: GO 28620
28609: POP
// bc_type := b_ext_laser ; 24 :
28610: LD_ADDR_OWVAR 42
28614: PUSH
28615: LD_INT 25
28617: ST_TO_ADDR
28618: GO 28830
28620: LD_INT 24
28622: DOUBLE
28623: EQUAL
28624: IFTRUE 28628
28626: GO 28639
28628: POP
// bc_type := b_control_tower ; 25 :
28629: LD_ADDR_OWVAR 42
28633: PUSH
28634: LD_INT 36
28636: ST_TO_ADDR
28637: GO 28830
28639: LD_INT 25
28641: DOUBLE
28642: EQUAL
28643: IFTRUE 28647
28645: GO 28658
28647: POP
// bc_type := b_breastwork ; 26 :
28648: LD_ADDR_OWVAR 42
28652: PUSH
28653: LD_INT 31
28655: ST_TO_ADDR
28656: GO 28830
28658: LD_INT 26
28660: DOUBLE
28661: EQUAL
28662: IFTRUE 28666
28664: GO 28677
28666: POP
// bc_type := b_bunker ; 27 :
28667: LD_ADDR_OWVAR 42
28671: PUSH
28672: LD_INT 32
28674: ST_TO_ADDR
28675: GO 28830
28677: LD_INT 27
28679: DOUBLE
28680: EQUAL
28681: IFTRUE 28685
28683: GO 28696
28685: POP
// bc_type := b_turret ; 28 :
28686: LD_ADDR_OWVAR 42
28690: PUSH
28691: LD_INT 33
28693: ST_TO_ADDR
28694: GO 28830
28696: LD_INT 28
28698: DOUBLE
28699: EQUAL
28700: IFTRUE 28704
28702: GO 28715
28704: POP
// bc_type := b_armoury ; 29 :
28705: LD_ADDR_OWVAR 42
28709: PUSH
28710: LD_INT 4
28712: ST_TO_ADDR
28713: GO 28830
28715: LD_INT 29
28717: DOUBLE
28718: EQUAL
28719: IFTRUE 28723
28721: GO 28734
28723: POP
// bc_type := b_barracks ; 30 :
28724: LD_ADDR_OWVAR 42
28728: PUSH
28729: LD_INT 5
28731: ST_TO_ADDR
28732: GO 28830
28734: LD_INT 30
28736: DOUBLE
28737: EQUAL
28738: IFTRUE 28742
28740: GO 28753
28742: POP
// bc_type := b_solar_power ; 31 :
28743: LD_ADDR_OWVAR 42
28747: PUSH
28748: LD_INT 27
28750: ST_TO_ADDR
28751: GO 28830
28753: LD_INT 31
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28772
28761: POP
// bc_type := b_oil_power ; 32 :
28762: LD_ADDR_OWVAR 42
28766: PUSH
28767: LD_INT 26
28769: ST_TO_ADDR
28770: GO 28830
28772: LD_INT 32
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28791
28780: POP
// bc_type := b_siberite_power ; 33 :
28781: LD_ADDR_OWVAR 42
28785: PUSH
28786: LD_INT 28
28788: ST_TO_ADDR
28789: GO 28830
28791: LD_INT 33
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28810
28799: POP
// bc_type := b_oil_mine ; 34 :
28800: LD_ADDR_OWVAR 42
28804: PUSH
28805: LD_INT 29
28807: ST_TO_ADDR
28808: GO 28830
28810: LD_INT 34
28812: DOUBLE
28813: EQUAL
28814: IFTRUE 28818
28816: GO 28829
28818: POP
// bc_type := b_siberite_mine ; end ;
28819: LD_ADDR_OWVAR 42
28823: PUSH
28824: LD_INT 30
28826: ST_TO_ADDR
28827: GO 28830
28829: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28830: LD_ADDR_VAR 0 8
28834: PUSH
28835: LD_VAR 0 5
28839: PPUSH
28840: LD_VAR 0 6
28844: PPUSH
28845: LD_VAR 0 3
28849: PPUSH
28850: CALL_OW 47
28854: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28855: LD_OWVAR 42
28859: PUSH
28860: LD_INT 32
28862: PUSH
28863: LD_INT 33
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: IN
28870: IFFALSE 28886
// PlaceWeaponTurret ( b , weapon ) ;
28872: LD_VAR 0 8
28876: PPUSH
28877: LD_VAR 0 4
28881: PPUSH
28882: CALL_OW 431
// end ;
28886: LD_VAR 0 7
28890: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28891: LD_INT 0
28893: PPUSH
28894: PPUSH
28895: PPUSH
28896: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28897: LD_ADDR_VAR 0 4
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_OWVAR 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 2
28916: PUSH
28917: LD_INT 30
28919: PUSH
28920: LD_INT 0
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 30
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PPUSH
28946: CALL_OW 69
28950: ST_TO_ADDR
// if not tmp then
28951: LD_VAR 0 4
28955: NOT
28956: IFFALSE 28960
// exit ;
28958: GO 29019
// for i in tmp do
28960: LD_ADDR_VAR 0 2
28964: PUSH
28965: LD_VAR 0 4
28969: PUSH
28970: FOR_IN
28971: IFFALSE 29017
// for j = 1 to 3 do
28973: LD_ADDR_VAR 0 3
28977: PUSH
28978: DOUBLE
28979: LD_INT 1
28981: DEC
28982: ST_TO_ADDR
28983: LD_INT 3
28985: PUSH
28986: FOR_TO
28987: IFFALSE 29013
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28989: LD_VAR 0 2
28993: PPUSH
28994: CALL_OW 274
28998: PPUSH
28999: LD_VAR 0 3
29003: PPUSH
29004: LD_INT 99999
29006: PPUSH
29007: CALL_OW 277
29011: GO 28986
29013: POP
29014: POP
29015: GO 28970
29017: POP
29018: POP
// end ;
29019: LD_VAR 0 1
29023: RET
// export function hHackSetLevel10 ; var i , j ; begin
29024: LD_INT 0
29026: PPUSH
29027: PPUSH
29028: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29029: LD_ADDR_VAR 0 2
29033: PUSH
29034: LD_INT 21
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PPUSH
29044: CALL_OW 69
29048: PUSH
29049: FOR_IN
29050: IFFALSE 29102
// if IsSelected ( i ) then
29052: LD_VAR 0 2
29056: PPUSH
29057: CALL_OW 306
29061: IFFALSE 29100
// begin for j := 1 to 4 do
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: DOUBLE
29069: LD_INT 1
29071: DEC
29072: ST_TO_ADDR
29073: LD_INT 4
29075: PUSH
29076: FOR_TO
29077: IFFALSE 29098
// SetSkill ( i , j , 10 ) ;
29079: LD_VAR 0 2
29083: PPUSH
29084: LD_VAR 0 3
29088: PPUSH
29089: LD_INT 10
29091: PPUSH
29092: CALL_OW 237
29096: GO 29076
29098: POP
29099: POP
// end ;
29100: GO 29049
29102: POP
29103: POP
// end ;
29104: LD_VAR 0 1
29108: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29109: LD_INT 0
29111: PPUSH
29112: PPUSH
29113: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29114: LD_ADDR_VAR 0 2
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 21
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: PUSH
29150: FOR_IN
29151: IFFALSE 29192
// begin for j := 1 to 4 do
29153: LD_ADDR_VAR 0 3
29157: PUSH
29158: DOUBLE
29159: LD_INT 1
29161: DEC
29162: ST_TO_ADDR
29163: LD_INT 4
29165: PUSH
29166: FOR_TO
29167: IFFALSE 29188
// SetSkill ( i , j , 10 ) ;
29169: LD_VAR 0 2
29173: PPUSH
29174: LD_VAR 0 3
29178: PPUSH
29179: LD_INT 10
29181: PPUSH
29182: CALL_OW 237
29186: GO 29166
29188: POP
29189: POP
// end ;
29190: GO 29150
29192: POP
29193: POP
// end ;
29194: LD_VAR 0 1
29198: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29199: LD_INT 0
29201: PPUSH
// uc_side := your_side ;
29202: LD_ADDR_OWVAR 20
29206: PUSH
29207: LD_OWVAR 2
29211: ST_TO_ADDR
// uc_nation := nation ;
29212: LD_ADDR_OWVAR 21
29216: PUSH
29217: LD_VAR 0 1
29221: ST_TO_ADDR
// InitHc ;
29222: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29226: LD_INT 0
29228: PPUSH
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_VAR 0 3
29238: PPUSH
29239: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29243: LD_VAR 0 4
29247: PPUSH
29248: LD_VAR 0 5
29252: PPUSH
29253: CALL_OW 428
29257: PUSH
29258: LD_INT 0
29260: EQUAL
29261: IFFALSE 29285
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29263: CALL_OW 44
29267: PPUSH
29268: LD_VAR 0 4
29272: PPUSH
29273: LD_VAR 0 5
29277: PPUSH
29278: LD_INT 1
29280: PPUSH
29281: CALL_OW 48
// end ;
29285: LD_VAR 0 6
29289: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29290: LD_INT 0
29292: PPUSH
29293: PPUSH
// uc_side := your_side ;
29294: LD_ADDR_OWVAR 20
29298: PUSH
29299: LD_OWVAR 2
29303: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29304: LD_VAR 0 1
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: LD_INT 3
29317: PUSH
29318: LD_INT 4
29320: PUSH
29321: LD_INT 5
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: IN
29331: IFFALSE 29343
// uc_nation := nation_american else
29333: LD_ADDR_OWVAR 21
29337: PUSH
29338: LD_INT 1
29340: ST_TO_ADDR
29341: GO 29386
// if chassis in [ 11 , 12 , 13 , 14 ] then
29343: LD_VAR 0 1
29347: PUSH
29348: LD_INT 11
29350: PUSH
29351: LD_INT 12
29353: PUSH
29354: LD_INT 13
29356: PUSH
29357: LD_INT 14
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: IN
29366: IFFALSE 29378
// uc_nation := nation_arabian else
29368: LD_ADDR_OWVAR 21
29372: PUSH
29373: LD_INT 2
29375: ST_TO_ADDR
29376: GO 29386
// uc_nation := nation_russian ;
29378: LD_ADDR_OWVAR 21
29382: PUSH
29383: LD_INT 3
29385: ST_TO_ADDR
// vc_chassis := chassis ;
29386: LD_ADDR_OWVAR 37
29390: PUSH
29391: LD_VAR 0 1
29395: ST_TO_ADDR
// vc_engine := engine ;
29396: LD_ADDR_OWVAR 39
29400: PUSH
29401: LD_VAR 0 2
29405: ST_TO_ADDR
// vc_control := control ;
29406: LD_ADDR_OWVAR 38
29410: PUSH
29411: LD_VAR 0 3
29415: ST_TO_ADDR
// vc_weapon := weapon ;
29416: LD_ADDR_OWVAR 40
29420: PUSH
29421: LD_VAR 0 4
29425: ST_TO_ADDR
// un := CreateVehicle ;
29426: LD_ADDR_VAR 0 8
29430: PUSH
29431: CALL_OW 45
29435: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29436: LD_VAR 0 8
29440: PPUSH
29441: LD_INT 0
29443: PPUSH
29444: LD_INT 5
29446: PPUSH
29447: CALL_OW 12
29451: PPUSH
29452: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29456: LD_VAR 0 8
29460: PPUSH
29461: LD_VAR 0 5
29465: PPUSH
29466: LD_VAR 0 6
29470: PPUSH
29471: LD_INT 1
29473: PPUSH
29474: CALL_OW 48
// end ;
29478: LD_VAR 0 7
29482: RET
// export hInvincible ; every 1 do
29483: GO 29485
29485: DISABLE
// hInvincible := [ ] ;
29486: LD_ADDR_EXP 94
29490: PUSH
29491: EMPTY
29492: ST_TO_ADDR
29493: END
// every 10 do var i ;
29494: GO 29496
29496: DISABLE
29497: LD_INT 0
29499: PPUSH
// begin enable ;
29500: ENABLE
// if not hInvincible then
29501: LD_EXP 94
29505: NOT
29506: IFFALSE 29510
// exit ;
29508: GO 29554
// for i in hInvincible do
29510: LD_ADDR_VAR 0 1
29514: PUSH
29515: LD_EXP 94
29519: PUSH
29520: FOR_IN
29521: IFFALSE 29552
// if GetLives ( i ) < 1000 then
29523: LD_VAR 0 1
29527: PPUSH
29528: CALL_OW 256
29532: PUSH
29533: LD_INT 1000
29535: LESS
29536: IFFALSE 29550
// SetLives ( i , 1000 ) ;
29538: LD_VAR 0 1
29542: PPUSH
29543: LD_INT 1000
29545: PPUSH
29546: CALL_OW 234
29550: GO 29520
29552: POP
29553: POP
// end ;
29554: PPOPN 1
29556: END
// export function hHackInvincible ; var i ; begin
29557: LD_INT 0
29559: PPUSH
29560: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29561: LD_ADDR_VAR 0 2
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: LD_INT 21
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 21
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: LIST
29593: PPUSH
29594: CALL_OW 69
29598: PUSH
29599: FOR_IN
29600: IFFALSE 29661
// if IsSelected ( i ) then
29602: LD_VAR 0 2
29606: PPUSH
29607: CALL_OW 306
29611: IFFALSE 29659
// begin if i in hInvincible then
29613: LD_VAR 0 2
29617: PUSH
29618: LD_EXP 94
29622: IN
29623: IFFALSE 29643
// hInvincible := hInvincible diff i else
29625: LD_ADDR_EXP 94
29629: PUSH
29630: LD_EXP 94
29634: PUSH
29635: LD_VAR 0 2
29639: DIFF
29640: ST_TO_ADDR
29641: GO 29659
// hInvincible := hInvincible union i ;
29643: LD_ADDR_EXP 94
29647: PUSH
29648: LD_EXP 94
29652: PUSH
29653: LD_VAR 0 2
29657: UNION
29658: ST_TO_ADDR
// end ;
29659: GO 29599
29661: POP
29662: POP
// end ;
29663: LD_VAR 0 1
29667: RET
// export function hHackInvisible ; var i , j ; begin
29668: LD_INT 0
29670: PPUSH
29671: PPUSH
29672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29673: LD_ADDR_VAR 0 2
29677: PUSH
29678: LD_INT 21
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PPUSH
29688: CALL_OW 69
29692: PUSH
29693: FOR_IN
29694: IFFALSE 29718
// if IsSelected ( i ) then
29696: LD_VAR 0 2
29700: PPUSH
29701: CALL_OW 306
29705: IFFALSE 29716
// ComForceInvisible ( i ) ;
29707: LD_VAR 0 2
29711: PPUSH
29712: CALL_OW 496
29716: GO 29693
29718: POP
29719: POP
// end ;
29720: LD_VAR 0 1
29724: RET
// export function hHackChangeYourSide ; begin
29725: LD_INT 0
29727: PPUSH
// if your_side = 8 then
29728: LD_OWVAR 2
29732: PUSH
29733: LD_INT 8
29735: EQUAL
29736: IFFALSE 29748
// your_side := 0 else
29738: LD_ADDR_OWVAR 2
29742: PUSH
29743: LD_INT 0
29745: ST_TO_ADDR
29746: GO 29762
// your_side := your_side + 1 ;
29748: LD_ADDR_OWVAR 2
29752: PUSH
29753: LD_OWVAR 2
29757: PUSH
29758: LD_INT 1
29760: PLUS
29761: ST_TO_ADDR
// end ;
29762: LD_VAR 0 1
29766: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29767: LD_INT 0
29769: PPUSH
29770: PPUSH
29771: PPUSH
// for i in all_units do
29772: LD_ADDR_VAR 0 2
29776: PUSH
29777: LD_OWVAR 3
29781: PUSH
29782: FOR_IN
29783: IFFALSE 29861
// if IsSelected ( i ) then
29785: LD_VAR 0 2
29789: PPUSH
29790: CALL_OW 306
29794: IFFALSE 29859
// begin j := GetSide ( i ) ;
29796: LD_ADDR_VAR 0 3
29800: PUSH
29801: LD_VAR 0 2
29805: PPUSH
29806: CALL_OW 255
29810: ST_TO_ADDR
// if j = 8 then
29811: LD_VAR 0 3
29815: PUSH
29816: LD_INT 8
29818: EQUAL
29819: IFFALSE 29831
// j := 0 else
29821: LD_ADDR_VAR 0 3
29825: PUSH
29826: LD_INT 0
29828: ST_TO_ADDR
29829: GO 29845
// j := j + 1 ;
29831: LD_ADDR_VAR 0 3
29835: PUSH
29836: LD_VAR 0 3
29840: PUSH
29841: LD_INT 1
29843: PLUS
29844: ST_TO_ADDR
// SetSide ( i , j ) ;
29845: LD_VAR 0 2
29849: PPUSH
29850: LD_VAR 0 3
29854: PPUSH
29855: CALL_OW 235
// end ;
29859: GO 29782
29861: POP
29862: POP
// end ;
29863: LD_VAR 0 1
29867: RET
// export function hHackFog ; begin
29868: LD_INT 0
29870: PPUSH
// FogOff ( true ) ;
29871: LD_INT 1
29873: PPUSH
29874: CALL_OW 344
// end ;
29878: LD_VAR 0 1
29882: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29883: LD_INT 0
29885: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29886: LD_VAR 0 1
29890: PPUSH
29891: LD_VAR 0 2
29895: PPUSH
29896: LD_VAR 0 3
29900: PPUSH
29901: LD_INT 1
29903: PPUSH
29904: LD_INT 1
29906: PPUSH
29907: CALL_OW 483
// CenterOnXY ( x , y ) ;
29911: LD_VAR 0 2
29915: PPUSH
29916: LD_VAR 0 3
29920: PPUSH
29921: CALL_OW 84
// end ;
29925: LD_VAR 0 4
29929: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29930: LD_INT 0
29932: PPUSH
29933: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29934: LD_VAR 0 1
29938: NOT
29939: PUSH
29940: LD_VAR 0 2
29944: PPUSH
29945: LD_VAR 0 3
29949: PPUSH
29950: CALL_OW 488
29954: NOT
29955: OR
29956: PUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 266
29966: PUSH
29967: LD_INT 3
29969: NONEQUAL
29970: PUSH
29971: LD_VAR 0 1
29975: PPUSH
29976: CALL_OW 247
29980: PUSH
29981: LD_INT 1
29983: EQUAL
29984: NOT
29985: AND
29986: OR
29987: IFFALSE 29991
// exit ;
29989: GO 30140
// if GetType ( factory ) = unit_human then
29991: LD_VAR 0 1
29995: PPUSH
29996: CALL_OW 247
30000: PUSH
30001: LD_INT 1
30003: EQUAL
30004: IFFALSE 30021
// factory := IsInUnit ( factory ) ;
30006: LD_ADDR_VAR 0 1
30010: PUSH
30011: LD_VAR 0 1
30015: PPUSH
30016: CALL_OW 310
30020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30021: LD_VAR 0 1
30025: PPUSH
30026: CALL_OW 266
30030: PUSH
30031: LD_INT 3
30033: NONEQUAL
30034: IFFALSE 30038
// exit ;
30036: GO 30140
// if HexInfo ( x , y ) = factory then
30038: LD_VAR 0 2
30042: PPUSH
30043: LD_VAR 0 3
30047: PPUSH
30048: CALL_OW 428
30052: PUSH
30053: LD_VAR 0 1
30057: EQUAL
30058: IFFALSE 30085
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30060: LD_ADDR_EXP 95
30064: PUSH
30065: LD_EXP 95
30069: PPUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: LD_INT 0
30077: PPUSH
30078: CALL_OW 1
30082: ST_TO_ADDR
30083: GO 30136
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30085: LD_ADDR_EXP 95
30089: PUSH
30090: LD_EXP 95
30094: PPUSH
30095: LD_VAR 0 1
30099: PPUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 255
30109: PUSH
30110: LD_VAR 0 1
30114: PUSH
30115: LD_VAR 0 2
30119: PUSH
30120: LD_VAR 0 3
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: PPUSH
30131: CALL_OW 1
30135: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30136: CALL 30145 0 0
// end ;
30140: LD_VAR 0 4
30144: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30145: LD_INT 0
30147: PPUSH
30148: PPUSH
30149: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30150: LD_STRING resetFactoryWaypoint();
30152: PPUSH
30153: CALL_OW 559
// if factoryWaypoints then
30157: LD_EXP 95
30161: IFFALSE 30287
// begin list := PrepareArray ( factoryWaypoints ) ;
30163: LD_ADDR_VAR 0 3
30167: PUSH
30168: LD_EXP 95
30172: PPUSH
30173: CALL 72701 0 1
30177: ST_TO_ADDR
// for i := 1 to list do
30178: LD_ADDR_VAR 0 2
30182: PUSH
30183: DOUBLE
30184: LD_INT 1
30186: DEC
30187: ST_TO_ADDR
30188: LD_VAR 0 3
30192: PUSH
30193: FOR_TO
30194: IFFALSE 30285
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30196: LD_STRING setFactoryWaypointXY(
30198: PUSH
30199: LD_VAR 0 3
30203: PUSH
30204: LD_VAR 0 2
30208: ARRAY
30209: PUSH
30210: LD_INT 1
30212: ARRAY
30213: STR
30214: PUSH
30215: LD_STRING ,
30217: STR
30218: PUSH
30219: LD_VAR 0 3
30223: PUSH
30224: LD_VAR 0 2
30228: ARRAY
30229: PUSH
30230: LD_INT 2
30232: ARRAY
30233: STR
30234: PUSH
30235: LD_STRING ,
30237: STR
30238: PUSH
30239: LD_VAR 0 3
30243: PUSH
30244: LD_VAR 0 2
30248: ARRAY
30249: PUSH
30250: LD_INT 3
30252: ARRAY
30253: STR
30254: PUSH
30255: LD_STRING ,
30257: STR
30258: PUSH
30259: LD_VAR 0 3
30263: PUSH
30264: LD_VAR 0 2
30268: ARRAY
30269: PUSH
30270: LD_INT 4
30272: ARRAY
30273: STR
30274: PUSH
30275: LD_STRING )
30277: STR
30278: PPUSH
30279: CALL_OW 559
30283: GO 30193
30285: POP
30286: POP
// end ; end ;
30287: LD_VAR 0 1
30291: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30292: LD_INT 0
30294: PPUSH
// if HexInfo ( x , y ) = warehouse then
30295: LD_VAR 0 2
30299: PPUSH
30300: LD_VAR 0 3
30304: PPUSH
30305: CALL_OW 428
30309: PUSH
30310: LD_VAR 0 1
30314: EQUAL
30315: IFFALSE 30342
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30317: LD_ADDR_EXP 96
30321: PUSH
30322: LD_EXP 96
30326: PPUSH
30327: LD_VAR 0 1
30331: PPUSH
30332: LD_INT 0
30334: PPUSH
30335: CALL_OW 1
30339: ST_TO_ADDR
30340: GO 30393
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30342: LD_ADDR_EXP 96
30346: PUSH
30347: LD_EXP 96
30351: PPUSH
30352: LD_VAR 0 1
30356: PPUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: CALL_OW 255
30366: PUSH
30367: LD_VAR 0 1
30371: PUSH
30372: LD_VAR 0 2
30376: PUSH
30377: LD_VAR 0 3
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: PPUSH
30388: CALL_OW 1
30392: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30393: CALL 30402 0 0
// end ;
30397: LD_VAR 0 4
30401: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30402: LD_INT 0
30404: PPUSH
30405: PPUSH
30406: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30407: LD_STRING resetWarehouseGatheringPoints();
30409: PPUSH
30410: CALL_OW 559
// if warehouseGatheringPoints then
30414: LD_EXP 96
30418: IFFALSE 30544
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30420: LD_ADDR_VAR 0 3
30424: PUSH
30425: LD_EXP 96
30429: PPUSH
30430: CALL 72701 0 1
30434: ST_TO_ADDR
// for i := 1 to list do
30435: LD_ADDR_VAR 0 2
30439: PUSH
30440: DOUBLE
30441: LD_INT 1
30443: DEC
30444: ST_TO_ADDR
30445: LD_VAR 0 3
30449: PUSH
30450: FOR_TO
30451: IFFALSE 30542
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30453: LD_STRING setWarehouseGatheringPointXY(
30455: PUSH
30456: LD_VAR 0 3
30460: PUSH
30461: LD_VAR 0 2
30465: ARRAY
30466: PUSH
30467: LD_INT 1
30469: ARRAY
30470: STR
30471: PUSH
30472: LD_STRING ,
30474: STR
30475: PUSH
30476: LD_VAR 0 3
30480: PUSH
30481: LD_VAR 0 2
30485: ARRAY
30486: PUSH
30487: LD_INT 2
30489: ARRAY
30490: STR
30491: PUSH
30492: LD_STRING ,
30494: STR
30495: PUSH
30496: LD_VAR 0 3
30500: PUSH
30501: LD_VAR 0 2
30505: ARRAY
30506: PUSH
30507: LD_INT 3
30509: ARRAY
30510: STR
30511: PUSH
30512: LD_STRING ,
30514: STR
30515: PUSH
30516: LD_VAR 0 3
30520: PUSH
30521: LD_VAR 0 2
30525: ARRAY
30526: PUSH
30527: LD_INT 4
30529: ARRAY
30530: STR
30531: PUSH
30532: LD_STRING )
30534: STR
30535: PPUSH
30536: CALL_OW 559
30540: GO 30450
30542: POP
30543: POP
// end ; end ;
30544: LD_VAR 0 1
30548: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30549: LD_EXP 96
30553: IFFALSE 31238
30555: GO 30557
30557: DISABLE
30558: LD_INT 0
30560: PPUSH
30561: PPUSH
30562: PPUSH
30563: PPUSH
30564: PPUSH
30565: PPUSH
30566: PPUSH
30567: PPUSH
30568: PPUSH
// begin enable ;
30569: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30570: LD_ADDR_VAR 0 3
30574: PUSH
30575: LD_EXP 96
30579: PPUSH
30580: CALL 72701 0 1
30584: ST_TO_ADDR
// if not list then
30585: LD_VAR 0 3
30589: NOT
30590: IFFALSE 30594
// exit ;
30592: GO 31238
// for i := 1 to list do
30594: LD_ADDR_VAR 0 1
30598: PUSH
30599: DOUBLE
30600: LD_INT 1
30602: DEC
30603: ST_TO_ADDR
30604: LD_VAR 0 3
30608: PUSH
30609: FOR_TO
30610: IFFALSE 31236
// begin depot := list [ i ] [ 2 ] ;
30612: LD_ADDR_VAR 0 8
30616: PUSH
30617: LD_VAR 0 3
30621: PUSH
30622: LD_VAR 0 1
30626: ARRAY
30627: PUSH
30628: LD_INT 2
30630: ARRAY
30631: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30632: LD_ADDR_VAR 0 5
30636: PUSH
30637: LD_VAR 0 3
30641: PUSH
30642: LD_VAR 0 1
30646: ARRAY
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30652: LD_VAR 0 8
30656: PPUSH
30657: CALL_OW 301
30661: PUSH
30662: LD_VAR 0 5
30666: PUSH
30667: LD_VAR 0 8
30671: PPUSH
30672: CALL_OW 255
30676: NONEQUAL
30677: OR
30678: IFFALSE 30707
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30680: LD_ADDR_EXP 96
30684: PUSH
30685: LD_EXP 96
30689: PPUSH
30690: LD_VAR 0 8
30694: PPUSH
30695: LD_INT 0
30697: PPUSH
30698: CALL_OW 1
30702: ST_TO_ADDR
// exit ;
30703: POP
30704: POP
30705: GO 31238
// end ; x := list [ i ] [ 3 ] ;
30707: LD_ADDR_VAR 0 6
30711: PUSH
30712: LD_VAR 0 3
30716: PUSH
30717: LD_VAR 0 1
30721: ARRAY
30722: PUSH
30723: LD_INT 3
30725: ARRAY
30726: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30727: LD_ADDR_VAR 0 7
30731: PUSH
30732: LD_VAR 0 3
30736: PUSH
30737: LD_VAR 0 1
30741: ARRAY
30742: PUSH
30743: LD_INT 4
30745: ARRAY
30746: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30747: LD_ADDR_VAR 0 9
30751: PUSH
30752: LD_VAR 0 6
30756: PPUSH
30757: LD_VAR 0 7
30761: PPUSH
30762: LD_INT 16
30764: PPUSH
30765: CALL 71289 0 3
30769: ST_TO_ADDR
// if not cratesNearbyPoint then
30770: LD_VAR 0 9
30774: NOT
30775: IFFALSE 30781
// exit ;
30777: POP
30778: POP
30779: GO 31238
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30781: LD_ADDR_VAR 0 4
30785: PUSH
30786: LD_INT 22
30788: PUSH
30789: LD_VAR 0 5
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: LD_INT 60
30803: PUSH
30804: EMPTY
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 91
30813: PUSH
30814: LD_VAR 0 8
30818: PUSH
30819: LD_INT 6
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: LD_INT 25
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 25
30842: PUSH
30843: LD_INT 16
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: PPUSH
30861: CALL_OW 69
30865: PUSH
30866: LD_VAR 0 8
30870: PPUSH
30871: CALL_OW 313
30875: PPUSH
30876: LD_INT 3
30878: PUSH
30879: LD_INT 60
30881: PUSH
30882: EMPTY
30883: LIST
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 25
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 25
30904: PUSH
30905: LD_INT 16
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PPUSH
30921: CALL_OW 72
30925: UNION
30926: ST_TO_ADDR
// if tmp then
30927: LD_VAR 0 4
30931: IFFALSE 31011
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30933: LD_ADDR_VAR 0 4
30937: PUSH
30938: LD_VAR 0 4
30942: PPUSH
30943: LD_INT 3
30945: PPUSH
30946: CALL 69258 0 2
30950: ST_TO_ADDR
// for j in tmp do
30951: LD_ADDR_VAR 0 2
30955: PUSH
30956: LD_VAR 0 4
30960: PUSH
30961: FOR_IN
30962: IFFALSE 31005
// begin if IsInUnit ( j ) then
30964: LD_VAR 0 2
30968: PPUSH
30969: CALL_OW 310
30973: IFFALSE 30984
// ComExit ( j ) ;
30975: LD_VAR 0 2
30979: PPUSH
30980: CALL 69341 0 1
// AddComCollect ( j , x , y ) ;
30984: LD_VAR 0 2
30988: PPUSH
30989: LD_VAR 0 6
30993: PPUSH
30994: LD_VAR 0 7
30998: PPUSH
30999: CALL_OW 177
// end ;
31003: GO 30961
31005: POP
31006: POP
// exit ;
31007: POP
31008: POP
31009: GO 31238
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31011: LD_ADDR_VAR 0 4
31015: PUSH
31016: LD_INT 22
31018: PUSH
31019: LD_VAR 0 5
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 91
31030: PUSH
31031: LD_VAR 0 8
31035: PUSH
31036: LD_INT 8
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: LD_INT 34
31049: PUSH
31050: LD_INT 12
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 34
31059: PUSH
31060: LD_INT 51
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 34
31069: PUSH
31070: LD_INT 32
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 34
31079: PUSH
31080: LD_INT 89
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: PPUSH
31099: CALL_OW 69
31103: ST_TO_ADDR
// if tmp then
31104: LD_VAR 0 4
31108: IFFALSE 31234
// begin for j in tmp do
31110: LD_ADDR_VAR 0 2
31114: PUSH
31115: LD_VAR 0 4
31119: PUSH
31120: FOR_IN
31121: IFFALSE 31232
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31123: LD_VAR 0 2
31127: PPUSH
31128: CALL_OW 262
31132: PUSH
31133: LD_INT 3
31135: EQUAL
31136: PUSH
31137: LD_VAR 0 2
31141: PPUSH
31142: CALL_OW 261
31146: PUSH
31147: LD_INT 20
31149: GREATER
31150: OR
31151: PUSH
31152: LD_VAR 0 2
31156: PPUSH
31157: CALL_OW 314
31161: NOT
31162: AND
31163: PUSH
31164: LD_VAR 0 2
31168: PPUSH
31169: CALL_OW 263
31173: PUSH
31174: LD_INT 1
31176: NONEQUAL
31177: PUSH
31178: LD_VAR 0 2
31182: PPUSH
31183: CALL_OW 311
31187: OR
31188: AND
31189: IFFALSE 31230
// begin ComCollect ( j , x , y ) ;
31191: LD_VAR 0 2
31195: PPUSH
31196: LD_VAR 0 6
31200: PPUSH
31201: LD_VAR 0 7
31205: PPUSH
31206: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31210: LD_VAR 0 2
31214: PPUSH
31215: LD_VAR 0 8
31219: PPUSH
31220: CALL_OW 172
// exit ;
31224: POP
31225: POP
31226: POP
31227: POP
31228: GO 31238
// end ;
31230: GO 31120
31232: POP
31233: POP
// end ; end ;
31234: GO 30609
31236: POP
31237: POP
// end ; end_of_file end_of_file
31238: PPOPN 9
31240: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31241: LD_INT 0
31243: PPUSH
31244: PPUSH
// if exist_mode then
31245: LD_VAR 0 2
31249: IFFALSE 31274
// unit := CreateCharacter ( prefix & ident ) else
31251: LD_ADDR_VAR 0 5
31255: PUSH
31256: LD_VAR 0 3
31260: PUSH
31261: LD_VAR 0 1
31265: STR
31266: PPUSH
31267: CALL_OW 34
31271: ST_TO_ADDR
31272: GO 31289
// unit := NewCharacter ( ident ) ;
31274: LD_ADDR_VAR 0 5
31278: PUSH
31279: LD_VAR 0 1
31283: PPUSH
31284: CALL_OW 25
31288: ST_TO_ADDR
// result := unit ;
31289: LD_ADDR_VAR 0 4
31293: PUSH
31294: LD_VAR 0 5
31298: ST_TO_ADDR
// end ;
31299: LD_VAR 0 4
31303: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31304: LD_INT 0
31306: PPUSH
31307: PPUSH
// if not side or not nation then
31308: LD_VAR 0 1
31312: NOT
31313: PUSH
31314: LD_VAR 0 2
31318: NOT
31319: OR
31320: IFFALSE 31324
// exit ;
31322: GO 32092
// case nation of nation_american :
31324: LD_VAR 0 2
31328: PUSH
31329: LD_INT 1
31331: DOUBLE
31332: EQUAL
31333: IFTRUE 31337
31335: GO 31551
31337: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31338: LD_ADDR_VAR 0 4
31342: PUSH
31343: LD_INT 35
31345: PUSH
31346: LD_INT 45
31348: PUSH
31349: LD_INT 46
31351: PUSH
31352: LD_INT 47
31354: PUSH
31355: LD_INT 82
31357: PUSH
31358: LD_INT 83
31360: PUSH
31361: LD_INT 84
31363: PUSH
31364: LD_INT 85
31366: PUSH
31367: LD_INT 86
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 2
31375: PUSH
31376: LD_INT 6
31378: PUSH
31379: LD_INT 15
31381: PUSH
31382: LD_INT 16
31384: PUSH
31385: LD_INT 7
31387: PUSH
31388: LD_INT 12
31390: PUSH
31391: LD_INT 13
31393: PUSH
31394: LD_INT 10
31396: PUSH
31397: LD_INT 14
31399: PUSH
31400: LD_INT 20
31402: PUSH
31403: LD_INT 21
31405: PUSH
31406: LD_INT 22
31408: PUSH
31409: LD_INT 25
31411: PUSH
31412: LD_INT 32
31414: PUSH
31415: LD_INT 27
31417: PUSH
31418: LD_INT 36
31420: PUSH
31421: LD_INT 69
31423: PUSH
31424: LD_INT 39
31426: PUSH
31427: LD_INT 34
31429: PUSH
31430: LD_INT 40
31432: PUSH
31433: LD_INT 48
31435: PUSH
31436: LD_INT 49
31438: PUSH
31439: LD_INT 50
31441: PUSH
31442: LD_INT 51
31444: PUSH
31445: LD_INT 52
31447: PUSH
31448: LD_INT 53
31450: PUSH
31451: LD_INT 54
31453: PUSH
31454: LD_INT 55
31456: PUSH
31457: LD_INT 56
31459: PUSH
31460: LD_INT 57
31462: PUSH
31463: LD_INT 58
31465: PUSH
31466: LD_INT 59
31468: PUSH
31469: LD_INT 60
31471: PUSH
31472: LD_INT 61
31474: PUSH
31475: LD_INT 62
31477: PUSH
31478: LD_INT 80
31480: PUSH
31481: LD_INT 82
31483: PUSH
31484: LD_INT 83
31486: PUSH
31487: LD_INT 84
31489: PUSH
31490: LD_INT 85
31492: PUSH
31493: LD_INT 86
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
31549: GO 32016
31551: LD_INT 2
31553: DOUBLE
31554: EQUAL
31555: IFTRUE 31559
31557: GO 31785
31559: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31560: LD_ADDR_VAR 0 4
31564: PUSH
31565: LD_INT 35
31567: PUSH
31568: LD_INT 45
31570: PUSH
31571: LD_INT 46
31573: PUSH
31574: LD_INT 47
31576: PUSH
31577: LD_INT 82
31579: PUSH
31580: LD_INT 83
31582: PUSH
31583: LD_INT 84
31585: PUSH
31586: LD_INT 85
31588: PUSH
31589: LD_INT 87
31591: PUSH
31592: LD_INT 70
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: LD_INT 11
31600: PUSH
31601: LD_INT 3
31603: PUSH
31604: LD_INT 4
31606: PUSH
31607: LD_INT 5
31609: PUSH
31610: LD_INT 6
31612: PUSH
31613: LD_INT 15
31615: PUSH
31616: LD_INT 18
31618: PUSH
31619: LD_INT 7
31621: PUSH
31622: LD_INT 17
31624: PUSH
31625: LD_INT 8
31627: PUSH
31628: LD_INT 20
31630: PUSH
31631: LD_INT 21
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_INT 72
31639: PUSH
31640: LD_INT 26
31642: PUSH
31643: LD_INT 69
31645: PUSH
31646: LD_INT 39
31648: PUSH
31649: LD_INT 40
31651: PUSH
31652: LD_INT 41
31654: PUSH
31655: LD_INT 42
31657: PUSH
31658: LD_INT 43
31660: PUSH
31661: LD_INT 48
31663: PUSH
31664: LD_INT 49
31666: PUSH
31667: LD_INT 50
31669: PUSH
31670: LD_INT 51
31672: PUSH
31673: LD_INT 52
31675: PUSH
31676: LD_INT 53
31678: PUSH
31679: LD_INT 54
31681: PUSH
31682: LD_INT 55
31684: PUSH
31685: LD_INT 56
31687: PUSH
31688: LD_INT 60
31690: PUSH
31691: LD_INT 61
31693: PUSH
31694: LD_INT 62
31696: PUSH
31697: LD_INT 66
31699: PUSH
31700: LD_INT 67
31702: PUSH
31703: LD_INT 68
31705: PUSH
31706: LD_INT 81
31708: PUSH
31709: LD_INT 82
31711: PUSH
31712: LD_INT 83
31714: PUSH
31715: LD_INT 84
31717: PUSH
31718: LD_INT 85
31720: PUSH
31721: LD_INT 87
31723: PUSH
31724: LD_INT 88
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: ST_TO_ADDR
31783: GO 32016
31785: LD_INT 3
31787: DOUBLE
31788: EQUAL
31789: IFTRUE 31793
31791: GO 32015
31793: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31794: LD_ADDR_VAR 0 4
31798: PUSH
31799: LD_INT 46
31801: PUSH
31802: LD_INT 47
31804: PUSH
31805: LD_INT 1
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: LD_INT 82
31813: PUSH
31814: LD_INT 83
31816: PUSH
31817: LD_INT 84
31819: PUSH
31820: LD_INT 85
31822: PUSH
31823: LD_INT 86
31825: PUSH
31826: LD_INT 11
31828: PUSH
31829: LD_INT 9
31831: PUSH
31832: LD_INT 20
31834: PUSH
31835: LD_INT 19
31837: PUSH
31838: LD_INT 21
31840: PUSH
31841: LD_INT 24
31843: PUSH
31844: LD_INT 22
31846: PUSH
31847: LD_INT 25
31849: PUSH
31850: LD_INT 28
31852: PUSH
31853: LD_INT 29
31855: PUSH
31856: LD_INT 30
31858: PUSH
31859: LD_INT 31
31861: PUSH
31862: LD_INT 37
31864: PUSH
31865: LD_INT 38
31867: PUSH
31868: LD_INT 32
31870: PUSH
31871: LD_INT 27
31873: PUSH
31874: LD_INT 33
31876: PUSH
31877: LD_INT 69
31879: PUSH
31880: LD_INT 39
31882: PUSH
31883: LD_INT 34
31885: PUSH
31886: LD_INT 40
31888: PUSH
31889: LD_INT 71
31891: PUSH
31892: LD_INT 23
31894: PUSH
31895: LD_INT 44
31897: PUSH
31898: LD_INT 48
31900: PUSH
31901: LD_INT 49
31903: PUSH
31904: LD_INT 50
31906: PUSH
31907: LD_INT 51
31909: PUSH
31910: LD_INT 52
31912: PUSH
31913: LD_INT 53
31915: PUSH
31916: LD_INT 54
31918: PUSH
31919: LD_INT 55
31921: PUSH
31922: LD_INT 56
31924: PUSH
31925: LD_INT 57
31927: PUSH
31928: LD_INT 58
31930: PUSH
31931: LD_INT 59
31933: PUSH
31934: LD_INT 63
31936: PUSH
31937: LD_INT 64
31939: PUSH
31940: LD_INT 65
31942: PUSH
31943: LD_INT 82
31945: PUSH
31946: LD_INT 83
31948: PUSH
31949: LD_INT 84
31951: PUSH
31952: LD_INT 85
31954: PUSH
31955: LD_INT 86
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
32013: GO 32016
32015: POP
// if state > - 1 and state < 3 then
32016: LD_VAR 0 3
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: GREATER
32025: PUSH
32026: LD_VAR 0 3
32030: PUSH
32031: LD_INT 3
32033: LESS
32034: AND
32035: IFFALSE 32092
// for i in result do
32037: LD_ADDR_VAR 0 5
32041: PUSH
32042: LD_VAR 0 4
32046: PUSH
32047: FOR_IN
32048: IFFALSE 32090
// if GetTech ( i , side ) <> state then
32050: LD_VAR 0 5
32054: PPUSH
32055: LD_VAR 0 1
32059: PPUSH
32060: CALL_OW 321
32064: PUSH
32065: LD_VAR 0 3
32069: NONEQUAL
32070: IFFALSE 32088
// result := result diff i ;
32072: LD_ADDR_VAR 0 4
32076: PUSH
32077: LD_VAR 0 4
32081: PUSH
32082: LD_VAR 0 5
32086: DIFF
32087: ST_TO_ADDR
32088: GO 32047
32090: POP
32091: POP
// end ;
32092: LD_VAR 0 4
32096: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32097: LD_INT 0
32099: PPUSH
32100: PPUSH
32101: PPUSH
// result := true ;
32102: LD_ADDR_VAR 0 3
32106: PUSH
32107: LD_INT 1
32109: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32110: LD_ADDR_VAR 0 5
32114: PUSH
32115: LD_VAR 0 2
32119: PPUSH
32120: CALL_OW 480
32124: ST_TO_ADDR
// if not tmp then
32125: LD_VAR 0 5
32129: NOT
32130: IFFALSE 32134
// exit ;
32132: GO 32183
// for i in tmp do
32134: LD_ADDR_VAR 0 4
32138: PUSH
32139: LD_VAR 0 5
32143: PUSH
32144: FOR_IN
32145: IFFALSE 32181
// if GetTech ( i , side ) <> state_researched then
32147: LD_VAR 0 4
32151: PPUSH
32152: LD_VAR 0 1
32156: PPUSH
32157: CALL_OW 321
32161: PUSH
32162: LD_INT 2
32164: NONEQUAL
32165: IFFALSE 32179
// begin result := false ;
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: LD_INT 0
32174: ST_TO_ADDR
// exit ;
32175: POP
32176: POP
32177: GO 32183
// end ;
32179: GO 32144
32181: POP
32182: POP
// end ;
32183: LD_VAR 0 3
32187: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32188: LD_INT 0
32190: PPUSH
32191: PPUSH
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
32196: PPUSH
32197: PPUSH
32198: PPUSH
32199: PPUSH
32200: PPUSH
32201: PPUSH
32202: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32203: LD_VAR 0 1
32207: NOT
32208: PUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL_OW 257
32218: PUSH
32219: LD_INT 9
32221: NONEQUAL
32222: OR
32223: IFFALSE 32227
// exit ;
32225: GO 32800
// side := GetSide ( unit ) ;
32227: LD_ADDR_VAR 0 9
32231: PUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: CALL_OW 255
32241: ST_TO_ADDR
// tech_space := tech_spacanom ;
32242: LD_ADDR_VAR 0 12
32246: PUSH
32247: LD_INT 29
32249: ST_TO_ADDR
// tech_time := tech_taurad ;
32250: LD_ADDR_VAR 0 13
32254: PUSH
32255: LD_INT 28
32257: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32258: LD_ADDR_VAR 0 11
32262: PUSH
32263: LD_VAR 0 1
32267: PPUSH
32268: CALL_OW 310
32272: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32273: LD_VAR 0 11
32277: PPUSH
32278: CALL_OW 247
32282: PUSH
32283: LD_INT 2
32285: EQUAL
32286: IFFALSE 32290
// exit ;
32288: GO 32800
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32290: LD_ADDR_VAR 0 8
32294: PUSH
32295: LD_INT 81
32297: PUSH
32298: LD_VAR 0 9
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: LD_INT 21
32312: PUSH
32313: LD_INT 3
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PPUSH
32328: CALL_OW 69
32332: ST_TO_ADDR
// if not tmp then
32333: LD_VAR 0 8
32337: NOT
32338: IFFALSE 32342
// exit ;
32340: GO 32800
// if in_unit then
32342: LD_VAR 0 11
32346: IFFALSE 32370
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32348: LD_ADDR_VAR 0 10
32352: PUSH
32353: LD_VAR 0 8
32357: PPUSH
32358: LD_VAR 0 11
32362: PPUSH
32363: CALL_OW 74
32367: ST_TO_ADDR
32368: GO 32390
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32370: LD_ADDR_VAR 0 10
32374: PUSH
32375: LD_VAR 0 8
32379: PPUSH
32380: LD_VAR 0 1
32384: PPUSH
32385: CALL_OW 74
32389: ST_TO_ADDR
// if not enemy then
32390: LD_VAR 0 10
32394: NOT
32395: IFFALSE 32399
// exit ;
32397: GO 32800
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32399: LD_VAR 0 11
32403: PUSH
32404: LD_VAR 0 11
32408: PPUSH
32409: LD_VAR 0 10
32413: PPUSH
32414: CALL_OW 296
32418: PUSH
32419: LD_INT 13
32421: GREATER
32422: AND
32423: PUSH
32424: LD_VAR 0 1
32428: PPUSH
32429: LD_VAR 0 10
32433: PPUSH
32434: CALL_OW 296
32438: PUSH
32439: LD_INT 12
32441: GREATER
32442: OR
32443: IFFALSE 32447
// exit ;
32445: GO 32800
// missile := [ 1 ] ;
32447: LD_ADDR_VAR 0 14
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: EMPTY
32456: LIST
32457: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32458: LD_VAR 0 9
32462: PPUSH
32463: LD_VAR 0 12
32467: PPUSH
32468: CALL_OW 325
32472: IFFALSE 32501
// missile := Replace ( missile , missile + 1 , 2 ) ;
32474: LD_ADDR_VAR 0 14
32478: PUSH
32479: LD_VAR 0 14
32483: PPUSH
32484: LD_VAR 0 14
32488: PUSH
32489: LD_INT 1
32491: PLUS
32492: PPUSH
32493: LD_INT 2
32495: PPUSH
32496: CALL_OW 1
32500: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32501: LD_VAR 0 9
32505: PPUSH
32506: LD_VAR 0 13
32510: PPUSH
32511: CALL_OW 325
32515: PUSH
32516: LD_VAR 0 10
32520: PPUSH
32521: CALL_OW 255
32525: PPUSH
32526: LD_VAR 0 13
32530: PPUSH
32531: CALL_OW 325
32535: NOT
32536: AND
32537: IFFALSE 32566
// missile := Replace ( missile , missile + 1 , 3 ) ;
32539: LD_ADDR_VAR 0 14
32543: PUSH
32544: LD_VAR 0 14
32548: PPUSH
32549: LD_VAR 0 14
32553: PUSH
32554: LD_INT 1
32556: PLUS
32557: PPUSH
32558: LD_INT 3
32560: PPUSH
32561: CALL_OW 1
32565: ST_TO_ADDR
// if missile < 2 then
32566: LD_VAR 0 14
32570: PUSH
32571: LD_INT 2
32573: LESS
32574: IFFALSE 32578
// exit ;
32576: GO 32800
// x := GetX ( enemy ) ;
32578: LD_ADDR_VAR 0 4
32582: PUSH
32583: LD_VAR 0 10
32587: PPUSH
32588: CALL_OW 250
32592: ST_TO_ADDR
// y := GetY ( enemy ) ;
32593: LD_ADDR_VAR 0 5
32597: PUSH
32598: LD_VAR 0 10
32602: PPUSH
32603: CALL_OW 251
32607: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32608: LD_ADDR_VAR 0 6
32612: PUSH
32613: LD_VAR 0 4
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PPUSH
32622: LD_INT 1
32624: PPUSH
32625: CALL_OW 12
32629: PLUS
32630: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32631: LD_ADDR_VAR 0 7
32635: PUSH
32636: LD_VAR 0 5
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PPUSH
32645: LD_INT 1
32647: PPUSH
32648: CALL_OW 12
32652: PLUS
32653: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32654: LD_VAR 0 6
32658: PPUSH
32659: LD_VAR 0 7
32663: PPUSH
32664: CALL_OW 488
32668: NOT
32669: IFFALSE 32691
// begin _x := x ;
32671: LD_ADDR_VAR 0 6
32675: PUSH
32676: LD_VAR 0 4
32680: ST_TO_ADDR
// _y := y ;
32681: LD_ADDR_VAR 0 7
32685: PUSH
32686: LD_VAR 0 5
32690: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_INT 1
32698: PPUSH
32699: LD_VAR 0 14
32703: PPUSH
32704: CALL_OW 12
32708: ST_TO_ADDR
// case i of 1 :
32709: LD_VAR 0 3
32713: PUSH
32714: LD_INT 1
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32722
32720: GO 32739
32722: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32723: LD_VAR 0 1
32727: PPUSH
32728: LD_VAR 0 10
32732: PPUSH
32733: CALL_OW 115
32737: GO 32800
32739: LD_INT 2
32741: DOUBLE
32742: EQUAL
32743: IFTRUE 32747
32745: GO 32769
32747: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32748: LD_VAR 0 1
32752: PPUSH
32753: LD_VAR 0 6
32757: PPUSH
32758: LD_VAR 0 7
32762: PPUSH
32763: CALL_OW 153
32767: GO 32800
32769: LD_INT 3
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32777
32775: GO 32799
32777: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32778: LD_VAR 0 1
32782: PPUSH
32783: LD_VAR 0 6
32787: PPUSH
32788: LD_VAR 0 7
32792: PPUSH
32793: CALL_OW 154
32797: GO 32800
32799: POP
// end ;
32800: LD_VAR 0 2
32804: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32805: LD_INT 0
32807: PPUSH
32808: PPUSH
32809: PPUSH
32810: PPUSH
32811: PPUSH
32812: PPUSH
// if not unit or not building then
32813: LD_VAR 0 1
32817: NOT
32818: PUSH
32819: LD_VAR 0 2
32823: NOT
32824: OR
32825: IFFALSE 32829
// exit ;
32827: GO 32987
// x := GetX ( building ) ;
32829: LD_ADDR_VAR 0 5
32833: PUSH
32834: LD_VAR 0 2
32838: PPUSH
32839: CALL_OW 250
32843: ST_TO_ADDR
// y := GetY ( building ) ;
32844: LD_ADDR_VAR 0 6
32848: PUSH
32849: LD_VAR 0 2
32853: PPUSH
32854: CALL_OW 251
32858: ST_TO_ADDR
// for i = 0 to 5 do
32859: LD_ADDR_VAR 0 4
32863: PUSH
32864: DOUBLE
32865: LD_INT 0
32867: DEC
32868: ST_TO_ADDR
32869: LD_INT 5
32871: PUSH
32872: FOR_TO
32873: IFFALSE 32985
// begin _x := ShiftX ( x , i , 3 ) ;
32875: LD_ADDR_VAR 0 7
32879: PUSH
32880: LD_VAR 0 5
32884: PPUSH
32885: LD_VAR 0 4
32889: PPUSH
32890: LD_INT 3
32892: PPUSH
32893: CALL_OW 272
32897: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32898: LD_ADDR_VAR 0 8
32902: PUSH
32903: LD_VAR 0 6
32907: PPUSH
32908: LD_VAR 0 4
32912: PPUSH
32913: LD_INT 3
32915: PPUSH
32916: CALL_OW 273
32920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32921: LD_VAR 0 7
32925: PPUSH
32926: LD_VAR 0 8
32930: PPUSH
32931: CALL_OW 488
32935: NOT
32936: IFFALSE 32940
// continue ;
32938: GO 32872
// if HexInfo ( _x , _y ) = 0 then
32940: LD_VAR 0 7
32944: PPUSH
32945: LD_VAR 0 8
32949: PPUSH
32950: CALL_OW 428
32954: PUSH
32955: LD_INT 0
32957: EQUAL
32958: IFFALSE 32983
// begin ComMoveXY ( unit , _x , _y ) ;
32960: LD_VAR 0 1
32964: PPUSH
32965: LD_VAR 0 7
32969: PPUSH
32970: LD_VAR 0 8
32974: PPUSH
32975: CALL_OW 111
// exit ;
32979: POP
32980: POP
32981: GO 32987
// end ; end ;
32983: GO 32872
32985: POP
32986: POP
// end ;
32987: LD_VAR 0 3
32991: RET
// export function ScanBase ( side , base_area ) ; begin
32992: LD_INT 0
32994: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_VAR 0 2
33004: PPUSH
33005: LD_INT 81
33007: PUSH
33008: LD_VAR 0 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PPUSH
33017: CALL_OW 70
33021: ST_TO_ADDR
// end ;
33022: LD_VAR 0 3
33026: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33027: LD_INT 0
33029: PPUSH
33030: PPUSH
33031: PPUSH
33032: PPUSH
// result := false ;
33033: LD_ADDR_VAR 0 2
33037: PUSH
33038: LD_INT 0
33040: ST_TO_ADDR
// side := GetSide ( unit ) ;
33041: LD_ADDR_VAR 0 3
33045: PUSH
33046: LD_VAR 0 1
33050: PPUSH
33051: CALL_OW 255
33055: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33056: LD_ADDR_VAR 0 4
33060: PUSH
33061: LD_VAR 0 1
33065: PPUSH
33066: CALL_OW 248
33070: ST_TO_ADDR
// case nat of 1 :
33071: LD_VAR 0 4
33075: PUSH
33076: LD_INT 1
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 33095
33084: POP
// tech := tech_lassight ; 2 :
33085: LD_ADDR_VAR 0 5
33089: PUSH
33090: LD_INT 12
33092: ST_TO_ADDR
33093: GO 33134
33095: LD_INT 2
33097: DOUBLE
33098: EQUAL
33099: IFTRUE 33103
33101: GO 33114
33103: POP
// tech := tech_mortar ; 3 :
33104: LD_ADDR_VAR 0 5
33108: PUSH
33109: LD_INT 41
33111: ST_TO_ADDR
33112: GO 33134
33114: LD_INT 3
33116: DOUBLE
33117: EQUAL
33118: IFTRUE 33122
33120: GO 33133
33122: POP
// tech := tech_bazooka ; end ;
33123: LD_ADDR_VAR 0 5
33127: PUSH
33128: LD_INT 44
33130: ST_TO_ADDR
33131: GO 33134
33133: POP
// if Researched ( side , tech ) then
33134: LD_VAR 0 3
33138: PPUSH
33139: LD_VAR 0 5
33143: PPUSH
33144: CALL_OW 325
33148: IFFALSE 33175
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33150: LD_ADDR_VAR 0 2
33154: PUSH
33155: LD_INT 5
33157: PUSH
33158: LD_INT 8
33160: PUSH
33161: LD_INT 9
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: PUSH
33169: LD_VAR 0 4
33173: ARRAY
33174: ST_TO_ADDR
// end ;
33175: LD_VAR 0 2
33179: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33180: LD_INT 0
33182: PPUSH
33183: PPUSH
33184: PPUSH
// if not mines then
33185: LD_VAR 0 2
33189: NOT
33190: IFFALSE 33194
// exit ;
33192: GO 33338
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33194: LD_ADDR_VAR 0 5
33198: PUSH
33199: LD_INT 81
33201: PUSH
33202: LD_VAR 0 1
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 3
33213: PUSH
33214: LD_INT 21
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PPUSH
33232: CALL_OW 69
33236: ST_TO_ADDR
// for i in mines do
33237: LD_ADDR_VAR 0 4
33241: PUSH
33242: LD_VAR 0 2
33246: PUSH
33247: FOR_IN
33248: IFFALSE 33336
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33250: LD_VAR 0 4
33254: PUSH
33255: LD_INT 1
33257: ARRAY
33258: PPUSH
33259: LD_VAR 0 4
33263: PUSH
33264: LD_INT 2
33266: ARRAY
33267: PPUSH
33268: CALL_OW 458
33272: NOT
33273: IFFALSE 33277
// continue ;
33275: GO 33247
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33277: LD_VAR 0 4
33281: PUSH
33282: LD_INT 1
33284: ARRAY
33285: PPUSH
33286: LD_VAR 0 4
33290: PUSH
33291: LD_INT 2
33293: ARRAY
33294: PPUSH
33295: CALL_OW 428
33299: PUSH
33300: LD_VAR 0 5
33304: IN
33305: IFFALSE 33334
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33307: LD_VAR 0 4
33311: PUSH
33312: LD_INT 1
33314: ARRAY
33315: PPUSH
33316: LD_VAR 0 4
33320: PUSH
33321: LD_INT 2
33323: ARRAY
33324: PPUSH
33325: LD_VAR 0 1
33329: PPUSH
33330: CALL_OW 456
// end ;
33334: GO 33247
33336: POP
33337: POP
// end ;
33338: LD_VAR 0 3
33342: RET
// export function Count ( array ) ; begin
33343: LD_INT 0
33345: PPUSH
// result := array + 0 ;
33346: LD_ADDR_VAR 0 2
33350: PUSH
33351: LD_VAR 0 1
33355: PUSH
33356: LD_INT 0
33358: PLUS
33359: ST_TO_ADDR
// end ;
33360: LD_VAR 0 2
33364: RET
// export function IsEmpty ( building ) ; begin
33365: LD_INT 0
33367: PPUSH
// if not building then
33368: LD_VAR 0 1
33372: NOT
33373: IFFALSE 33377
// exit ;
33375: GO 33420
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33377: LD_ADDR_VAR 0 2
33381: PUSH
33382: LD_VAR 0 1
33386: PUSH
33387: LD_INT 22
33389: PUSH
33390: LD_VAR 0 1
33394: PPUSH
33395: CALL_OW 255
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 58
33406: PUSH
33407: EMPTY
33408: LIST
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PPUSH
33414: CALL_OW 69
33418: IN
33419: ST_TO_ADDR
// end ;
33420: LD_VAR 0 2
33424: RET
// export function IsNotFull ( building ) ; var places ; begin
33425: LD_INT 0
33427: PPUSH
33428: PPUSH
// if not building then
33429: LD_VAR 0 1
33433: NOT
33434: IFFALSE 33438
// exit ;
33436: GO 33466
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33438: LD_ADDR_VAR 0 2
33442: PUSH
33443: LD_VAR 0 1
33447: PPUSH
33448: LD_INT 3
33450: PUSH
33451: LD_INT 62
33453: PUSH
33454: EMPTY
33455: LIST
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PPUSH
33461: CALL_OW 72
33465: ST_TO_ADDR
// end ;
33466: LD_VAR 0 2
33470: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33471: LD_INT 0
33473: PPUSH
33474: PPUSH
33475: PPUSH
33476: PPUSH
// tmp := [ ] ;
33477: LD_ADDR_VAR 0 3
33481: PUSH
33482: EMPTY
33483: ST_TO_ADDR
// list := [ ] ;
33484: LD_ADDR_VAR 0 5
33488: PUSH
33489: EMPTY
33490: ST_TO_ADDR
// for i = 16 to 25 do
33491: LD_ADDR_VAR 0 4
33495: PUSH
33496: DOUBLE
33497: LD_INT 16
33499: DEC
33500: ST_TO_ADDR
33501: LD_INT 25
33503: PUSH
33504: FOR_TO
33505: IFFALSE 33578
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_VAR 0 3
33516: PUSH
33517: LD_INT 22
33519: PUSH
33520: LD_VAR 0 1
33524: PPUSH
33525: CALL_OW 255
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 91
33536: PUSH
33537: LD_VAR 0 1
33541: PUSH
33542: LD_INT 6
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 30
33552: PUSH
33553: LD_VAR 0 4
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: PPUSH
33570: CALL_OW 69
33574: ADD
33575: ST_TO_ADDR
33576: GO 33504
33578: POP
33579: POP
// for i = 1 to tmp do
33580: LD_ADDR_VAR 0 4
33584: PUSH
33585: DOUBLE
33586: LD_INT 1
33588: DEC
33589: ST_TO_ADDR
33590: LD_VAR 0 3
33594: PUSH
33595: FOR_TO
33596: IFFALSE 33684
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33598: LD_ADDR_VAR 0 5
33602: PUSH
33603: LD_VAR 0 5
33607: PUSH
33608: LD_VAR 0 3
33612: PUSH
33613: LD_VAR 0 4
33617: ARRAY
33618: PPUSH
33619: CALL_OW 266
33623: PUSH
33624: LD_VAR 0 3
33628: PUSH
33629: LD_VAR 0 4
33633: ARRAY
33634: PPUSH
33635: CALL_OW 250
33639: PUSH
33640: LD_VAR 0 3
33644: PUSH
33645: LD_VAR 0 4
33649: ARRAY
33650: PPUSH
33651: CALL_OW 251
33655: PUSH
33656: LD_VAR 0 3
33660: PUSH
33661: LD_VAR 0 4
33665: ARRAY
33666: PPUSH
33667: CALL_OW 254
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: PUSH
33678: EMPTY
33679: LIST
33680: ADD
33681: ST_TO_ADDR
33682: GO 33595
33684: POP
33685: POP
// result := list ;
33686: LD_ADDR_VAR 0 2
33690: PUSH
33691: LD_VAR 0 5
33695: ST_TO_ADDR
// end ;
33696: LD_VAR 0 2
33700: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33701: LD_INT 0
33703: PPUSH
33704: PPUSH
33705: PPUSH
33706: PPUSH
33707: PPUSH
33708: PPUSH
33709: PPUSH
// if not factory then
33710: LD_VAR 0 1
33714: NOT
33715: IFFALSE 33719
// exit ;
33717: GO 34312
// if control = control_apeman then
33719: LD_VAR 0 4
33723: PUSH
33724: LD_INT 5
33726: EQUAL
33727: IFFALSE 33836
// begin tmp := UnitsInside ( factory ) ;
33729: LD_ADDR_VAR 0 8
33733: PUSH
33734: LD_VAR 0 1
33738: PPUSH
33739: CALL_OW 313
33743: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33744: LD_VAR 0 8
33748: PPUSH
33749: LD_INT 25
33751: PUSH
33752: LD_INT 12
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PPUSH
33759: CALL_OW 72
33763: NOT
33764: IFFALSE 33774
// control := control_manual ;
33766: LD_ADDR_VAR 0 4
33770: PUSH
33771: LD_INT 1
33773: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33774: LD_ADDR_VAR 0 8
33778: PUSH
33779: LD_VAR 0 1
33783: PPUSH
33784: CALL 33471 0 1
33788: ST_TO_ADDR
// if tmp then
33789: LD_VAR 0 8
33793: IFFALSE 33836
// begin for i in tmp do
33795: LD_ADDR_VAR 0 7
33799: PUSH
33800: LD_VAR 0 8
33804: PUSH
33805: FOR_IN
33806: IFFALSE 33834
// if i [ 1 ] = b_ext_radio then
33808: LD_VAR 0 7
33812: PUSH
33813: LD_INT 1
33815: ARRAY
33816: PUSH
33817: LD_INT 22
33819: EQUAL
33820: IFFALSE 33832
// begin control := control_remote ;
33822: LD_ADDR_VAR 0 4
33826: PUSH
33827: LD_INT 2
33829: ST_TO_ADDR
// break ;
33830: GO 33834
// end ;
33832: GO 33805
33834: POP
33835: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33836: LD_VAR 0 1
33840: PPUSH
33841: LD_VAR 0 2
33845: PPUSH
33846: LD_VAR 0 3
33850: PPUSH
33851: LD_VAR 0 4
33855: PPUSH
33856: LD_VAR 0 5
33860: PPUSH
33861: CALL_OW 448
33865: IFFALSE 33900
// begin result := [ chassis , engine , control , weapon ] ;
33867: LD_ADDR_VAR 0 6
33871: PUSH
33872: LD_VAR 0 2
33876: PUSH
33877: LD_VAR 0 3
33881: PUSH
33882: LD_VAR 0 4
33886: PUSH
33887: LD_VAR 0 5
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: ST_TO_ADDR
// exit ;
33898: GO 34312
// end ; _chassis := AvailableChassisList ( factory ) ;
33900: LD_ADDR_VAR 0 9
33904: PUSH
33905: LD_VAR 0 1
33909: PPUSH
33910: CALL_OW 475
33914: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33915: LD_ADDR_VAR 0 11
33919: PUSH
33920: LD_VAR 0 1
33924: PPUSH
33925: CALL_OW 476
33929: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33930: LD_ADDR_VAR 0 12
33934: PUSH
33935: LD_VAR 0 1
33939: PPUSH
33940: CALL_OW 477
33944: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33945: LD_ADDR_VAR 0 10
33949: PUSH
33950: LD_VAR 0 1
33954: PPUSH
33955: CALL_OW 478
33959: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33960: LD_VAR 0 9
33964: NOT
33965: PUSH
33966: LD_VAR 0 11
33970: NOT
33971: OR
33972: PUSH
33973: LD_VAR 0 12
33977: NOT
33978: OR
33979: PUSH
33980: LD_VAR 0 10
33984: NOT
33985: OR
33986: IFFALSE 34021
// begin result := [ chassis , engine , control , weapon ] ;
33988: LD_ADDR_VAR 0 6
33992: PUSH
33993: LD_VAR 0 2
33997: PUSH
33998: LD_VAR 0 3
34002: PUSH
34003: LD_VAR 0 4
34007: PUSH
34008: LD_VAR 0 5
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: ST_TO_ADDR
// exit ;
34019: GO 34312
// end ; if not chassis in _chassis then
34021: LD_VAR 0 2
34025: PUSH
34026: LD_VAR 0 9
34030: IN
34031: NOT
34032: IFFALSE 34058
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34034: LD_ADDR_VAR 0 2
34038: PUSH
34039: LD_VAR 0 9
34043: PUSH
34044: LD_INT 1
34046: PPUSH
34047: LD_VAR 0 9
34051: PPUSH
34052: CALL_OW 12
34056: ARRAY
34057: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34058: LD_VAR 0 2
34062: PPUSH
34063: LD_VAR 0 3
34067: PPUSH
34068: CALL 34317 0 2
34072: NOT
34073: IFFALSE 34132
// repeat engine := _engine [ 1 ] ;
34075: LD_ADDR_VAR 0 3
34079: PUSH
34080: LD_VAR 0 11
34084: PUSH
34085: LD_INT 1
34087: ARRAY
34088: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34089: LD_ADDR_VAR 0 11
34093: PUSH
34094: LD_VAR 0 11
34098: PPUSH
34099: LD_INT 1
34101: PPUSH
34102: CALL_OW 3
34106: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34107: LD_VAR 0 2
34111: PPUSH
34112: LD_VAR 0 3
34116: PPUSH
34117: CALL 34317 0 2
34121: PUSH
34122: LD_VAR 0 11
34126: PUSH
34127: EMPTY
34128: EQUAL
34129: OR
34130: IFFALSE 34075
// if not control in _control then
34132: LD_VAR 0 4
34136: PUSH
34137: LD_VAR 0 12
34141: IN
34142: NOT
34143: IFFALSE 34169
// control := _control [ rand ( 1 , _control ) ] ;
34145: LD_ADDR_VAR 0 4
34149: PUSH
34150: LD_VAR 0 12
34154: PUSH
34155: LD_INT 1
34157: PPUSH
34158: LD_VAR 0 12
34162: PPUSH
34163: CALL_OW 12
34167: ARRAY
34168: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34169: LD_VAR 0 2
34173: PPUSH
34174: LD_VAR 0 5
34178: PPUSH
34179: CALL 34537 0 2
34183: NOT
34184: IFFALSE 34243
// repeat weapon := _weapon [ 1 ] ;
34186: LD_ADDR_VAR 0 5
34190: PUSH
34191: LD_VAR 0 10
34195: PUSH
34196: LD_INT 1
34198: ARRAY
34199: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34200: LD_ADDR_VAR 0 10
34204: PUSH
34205: LD_VAR 0 10
34209: PPUSH
34210: LD_INT 1
34212: PPUSH
34213: CALL_OW 3
34217: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34218: LD_VAR 0 2
34222: PPUSH
34223: LD_VAR 0 5
34227: PPUSH
34228: CALL 34537 0 2
34232: PUSH
34233: LD_VAR 0 10
34237: PUSH
34238: EMPTY
34239: EQUAL
34240: OR
34241: IFFALSE 34186
// result := [ ] ;
34243: LD_ADDR_VAR 0 6
34247: PUSH
34248: EMPTY
34249: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34250: LD_VAR 0 1
34254: PPUSH
34255: LD_VAR 0 2
34259: PPUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: LD_VAR 0 5
34274: PPUSH
34275: CALL_OW 448
34279: IFFALSE 34312
// result := [ chassis , engine , control , weapon ] ;
34281: LD_ADDR_VAR 0 6
34285: PUSH
34286: LD_VAR 0 2
34290: PUSH
34291: LD_VAR 0 3
34295: PUSH
34296: LD_VAR 0 4
34300: PUSH
34301: LD_VAR 0 5
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
// end ;
34312: LD_VAR 0 6
34316: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34317: LD_INT 0
34319: PPUSH
// if not chassis or not engine then
34320: LD_VAR 0 1
34324: NOT
34325: PUSH
34326: LD_VAR 0 2
34330: NOT
34331: OR
34332: IFFALSE 34336
// exit ;
34334: GO 34532
// case engine of engine_solar :
34336: LD_VAR 0 2
34340: PUSH
34341: LD_INT 2
34343: DOUBLE
34344: EQUAL
34345: IFTRUE 34349
34347: GO 34387
34349: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34350: LD_ADDR_VAR 0 3
34354: PUSH
34355: LD_INT 11
34357: PUSH
34358: LD_INT 12
34360: PUSH
34361: LD_INT 13
34363: PUSH
34364: LD_INT 14
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: LD_INT 3
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
34385: GO 34516
34387: LD_INT 1
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34395
34393: GO 34457
34395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34396: LD_ADDR_VAR 0 3
34400: PUSH
34401: LD_INT 11
34403: PUSH
34404: LD_INT 12
34406: PUSH
34407: LD_INT 13
34409: PUSH
34410: LD_INT 14
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: LD_INT 4
34424: PUSH
34425: LD_INT 5
34427: PUSH
34428: LD_INT 21
34430: PUSH
34431: LD_INT 23
34433: PUSH
34434: LD_INT 22
34436: PUSH
34437: LD_INT 24
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: ST_TO_ADDR
34455: GO 34516
34457: LD_INT 3
34459: DOUBLE
34460: EQUAL
34461: IFTRUE 34465
34463: GO 34515
34465: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34466: LD_ADDR_VAR 0 3
34470: PUSH
34471: LD_INT 13
34473: PUSH
34474: LD_INT 14
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: LD_INT 3
34482: PUSH
34483: LD_INT 4
34485: PUSH
34486: LD_INT 5
34488: PUSH
34489: LD_INT 21
34491: PUSH
34492: LD_INT 22
34494: PUSH
34495: LD_INT 23
34497: PUSH
34498: LD_INT 24
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: ST_TO_ADDR
34513: GO 34516
34515: POP
// result := ( chassis in result ) ;
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_VAR 0 1
34525: PUSH
34526: LD_VAR 0 3
34530: IN
34531: ST_TO_ADDR
// end ;
34532: LD_VAR 0 3
34536: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34537: LD_INT 0
34539: PPUSH
// if not chassis or not weapon then
34540: LD_VAR 0 1
34544: NOT
34545: PUSH
34546: LD_VAR 0 2
34550: NOT
34551: OR
34552: IFFALSE 34556
// exit ;
34554: GO 35616
// case weapon of us_machine_gun :
34556: LD_VAR 0 2
34560: PUSH
34561: LD_INT 2
34563: DOUBLE
34564: EQUAL
34565: IFTRUE 34569
34567: GO 34599
34569: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34570: LD_ADDR_VAR 0 3
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: LD_INT 3
34583: PUSH
34584: LD_INT 4
34586: PUSH
34587: LD_INT 5
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: ST_TO_ADDR
34597: GO 35600
34599: LD_INT 3
34601: DOUBLE
34602: EQUAL
34603: IFTRUE 34607
34605: GO 34637
34607: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34608: LD_ADDR_VAR 0 3
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: LD_INT 3
34621: PUSH
34622: LD_INT 4
34624: PUSH
34625: LD_INT 5
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: ST_TO_ADDR
34635: GO 35600
34637: LD_INT 11
34639: DOUBLE
34640: EQUAL
34641: IFTRUE 34645
34643: GO 34675
34645: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34646: LD_ADDR_VAR 0 3
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: LD_INT 4
34662: PUSH
34663: LD_INT 5
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: ST_TO_ADDR
34673: GO 35600
34675: LD_INT 4
34677: DOUBLE
34678: EQUAL
34679: IFTRUE 34683
34681: GO 34709
34683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34684: LD_ADDR_VAR 0 3
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 3
34694: PUSH
34695: LD_INT 4
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: ST_TO_ADDR
34707: GO 35600
34709: LD_INT 5
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34717
34715: GO 34743
34717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 3
34728: PUSH
34729: LD_INT 4
34731: PUSH
34732: LD_INT 5
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: ST_TO_ADDR
34741: GO 35600
34743: LD_INT 9
34745: DOUBLE
34746: EQUAL
34747: IFTRUE 34751
34749: GO 34777
34751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34752: LD_ADDR_VAR 0 3
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: LD_INT 4
34765: PUSH
34766: LD_INT 5
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: ST_TO_ADDR
34775: GO 35600
34777: LD_INT 7
34779: DOUBLE
34780: EQUAL
34781: IFTRUE 34785
34783: GO 34811
34785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34786: LD_ADDR_VAR 0 3
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: LD_INT 3
34796: PUSH
34797: LD_INT 4
34799: PUSH
34800: LD_INT 5
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: ST_TO_ADDR
34809: GO 35600
34811: LD_INT 12
34813: DOUBLE
34814: EQUAL
34815: IFTRUE 34819
34817: GO 34845
34819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34820: LD_ADDR_VAR 0 3
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: LD_INT 4
34833: PUSH
34834: LD_INT 5
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: ST_TO_ADDR
34843: GO 35600
34845: LD_INT 13
34847: DOUBLE
34848: EQUAL
34849: IFTRUE 34853
34851: GO 34879
34853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34854: LD_ADDR_VAR 0 3
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 3
34864: PUSH
34865: LD_INT 4
34867: PUSH
34868: LD_INT 5
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: ST_TO_ADDR
34877: GO 35600
34879: LD_INT 14
34881: DOUBLE
34882: EQUAL
34883: IFTRUE 34887
34885: GO 34905
34887: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34888: LD_ADDR_VAR 0 3
34892: PUSH
34893: LD_INT 4
34895: PUSH
34896: LD_INT 5
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: ST_TO_ADDR
34903: GO 35600
34905: LD_INT 6
34907: DOUBLE
34908: EQUAL
34909: IFTRUE 34913
34911: GO 34931
34913: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34914: LD_ADDR_VAR 0 3
34918: PUSH
34919: LD_INT 4
34921: PUSH
34922: LD_INT 5
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: ST_TO_ADDR
34929: GO 35600
34931: LD_INT 10
34933: DOUBLE
34934: EQUAL
34935: IFTRUE 34939
34937: GO 34957
34939: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34940: LD_ADDR_VAR 0 3
34944: PUSH
34945: LD_INT 4
34947: PUSH
34948: LD_INT 5
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: ST_TO_ADDR
34955: GO 35600
34957: LD_INT 22
34959: DOUBLE
34960: EQUAL
34961: IFTRUE 34965
34963: GO 34991
34965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_INT 11
34973: PUSH
34974: LD_INT 12
34976: PUSH
34977: LD_INT 13
34979: PUSH
34980: LD_INT 14
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: ST_TO_ADDR
34989: GO 35600
34991: LD_INT 23
34993: DOUBLE
34994: EQUAL
34995: IFTRUE 34999
34997: GO 35025
34999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35000: LD_ADDR_VAR 0 3
35004: PUSH
35005: LD_INT 11
35007: PUSH
35008: LD_INT 12
35010: PUSH
35011: LD_INT 13
35013: PUSH
35014: LD_INT 14
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: ST_TO_ADDR
35023: GO 35600
35025: LD_INT 24
35027: DOUBLE
35028: EQUAL
35029: IFTRUE 35033
35031: GO 35059
35033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35034: LD_ADDR_VAR 0 3
35038: PUSH
35039: LD_INT 11
35041: PUSH
35042: LD_INT 12
35044: PUSH
35045: LD_INT 13
35047: PUSH
35048: LD_INT 14
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: ST_TO_ADDR
35057: GO 35600
35059: LD_INT 30
35061: DOUBLE
35062: EQUAL
35063: IFTRUE 35067
35065: GO 35093
35067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35068: LD_ADDR_VAR 0 3
35072: PUSH
35073: LD_INT 11
35075: PUSH
35076: LD_INT 12
35078: PUSH
35079: LD_INT 13
35081: PUSH
35082: LD_INT 14
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: ST_TO_ADDR
35091: GO 35600
35093: LD_INT 25
35095: DOUBLE
35096: EQUAL
35097: IFTRUE 35101
35099: GO 35119
35101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35102: LD_ADDR_VAR 0 3
35106: PUSH
35107: LD_INT 13
35109: PUSH
35110: LD_INT 14
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: ST_TO_ADDR
35117: GO 35600
35119: LD_INT 27
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35127
35125: GO 35145
35127: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35128: LD_ADDR_VAR 0 3
35132: PUSH
35133: LD_INT 13
35135: PUSH
35136: LD_INT 14
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: ST_TO_ADDR
35143: GO 35600
35145: LD_INT 92
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35153
35151: GO 35179
35153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35154: LD_ADDR_VAR 0 3
35158: PUSH
35159: LD_INT 11
35161: PUSH
35162: LD_INT 12
35164: PUSH
35165: LD_INT 13
35167: PUSH
35168: LD_INT 14
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: ST_TO_ADDR
35177: GO 35600
35179: LD_INT 28
35181: DOUBLE
35182: EQUAL
35183: IFTRUE 35187
35185: GO 35205
35187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35188: LD_ADDR_VAR 0 3
35192: PUSH
35193: LD_INT 13
35195: PUSH
35196: LD_INT 14
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: ST_TO_ADDR
35203: GO 35600
35205: LD_INT 29
35207: DOUBLE
35208: EQUAL
35209: IFTRUE 35213
35211: GO 35231
35213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35214: LD_ADDR_VAR 0 3
35218: PUSH
35219: LD_INT 13
35221: PUSH
35222: LD_INT 14
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: ST_TO_ADDR
35229: GO 35600
35231: LD_INT 31
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35239
35237: GO 35257
35239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35240: LD_ADDR_VAR 0 3
35244: PUSH
35245: LD_INT 13
35247: PUSH
35248: LD_INT 14
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: ST_TO_ADDR
35255: GO 35600
35257: LD_INT 26
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35283
35265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_INT 13
35273: PUSH
35274: LD_INT 14
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: ST_TO_ADDR
35281: GO 35600
35283: LD_INT 42
35285: DOUBLE
35286: EQUAL
35287: IFTRUE 35291
35289: GO 35317
35291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35292: LD_ADDR_VAR 0 3
35296: PUSH
35297: LD_INT 21
35299: PUSH
35300: LD_INT 22
35302: PUSH
35303: LD_INT 23
35305: PUSH
35306: LD_INT 24
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: ST_TO_ADDR
35315: GO 35600
35317: LD_INT 43
35319: DOUBLE
35320: EQUAL
35321: IFTRUE 35325
35323: GO 35351
35325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35326: LD_ADDR_VAR 0 3
35330: PUSH
35331: LD_INT 21
35333: PUSH
35334: LD_INT 22
35336: PUSH
35337: LD_INT 23
35339: PUSH
35340: LD_INT 24
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: ST_TO_ADDR
35349: GO 35600
35351: LD_INT 44
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35359
35357: GO 35385
35359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_INT 21
35367: PUSH
35368: LD_INT 22
35370: PUSH
35371: LD_INT 23
35373: PUSH
35374: LD_INT 24
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
35383: GO 35600
35385: LD_INT 45
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35393
35391: GO 35419
35393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35394: LD_ADDR_VAR 0 3
35398: PUSH
35399: LD_INT 21
35401: PUSH
35402: LD_INT 22
35404: PUSH
35405: LD_INT 23
35407: PUSH
35408: LD_INT 24
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: ST_TO_ADDR
35417: GO 35600
35419: LD_INT 49
35421: DOUBLE
35422: EQUAL
35423: IFTRUE 35427
35425: GO 35453
35427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35428: LD_ADDR_VAR 0 3
35432: PUSH
35433: LD_INT 21
35435: PUSH
35436: LD_INT 22
35438: PUSH
35439: LD_INT 23
35441: PUSH
35442: LD_INT 24
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: ST_TO_ADDR
35451: GO 35600
35453: LD_INT 51
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35487
35461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35462: LD_ADDR_VAR 0 3
35466: PUSH
35467: LD_INT 21
35469: PUSH
35470: LD_INT 22
35472: PUSH
35473: LD_INT 23
35475: PUSH
35476: LD_INT 24
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: ST_TO_ADDR
35485: GO 35600
35487: LD_INT 52
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35495
35493: GO 35521
35495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35496: LD_ADDR_VAR 0 3
35500: PUSH
35501: LD_INT 21
35503: PUSH
35504: LD_INT 22
35506: PUSH
35507: LD_INT 23
35509: PUSH
35510: LD_INT 24
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: ST_TO_ADDR
35519: GO 35600
35521: LD_INT 53
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35547
35529: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_INT 23
35537: PUSH
35538: LD_INT 24
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: ST_TO_ADDR
35545: GO 35600
35547: LD_INT 46
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35555
35553: GO 35573
35555: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35556: LD_ADDR_VAR 0 3
35560: PUSH
35561: LD_INT 23
35563: PUSH
35564: LD_INT 24
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: ST_TO_ADDR
35571: GO 35600
35573: LD_INT 47
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35599
35581: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 23
35589: PUSH
35590: LD_INT 24
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: ST_TO_ADDR
35597: GO 35600
35599: POP
// result := ( chassis in result ) ;
35600: LD_ADDR_VAR 0 3
35604: PUSH
35605: LD_VAR 0 1
35609: PUSH
35610: LD_VAR 0 3
35614: IN
35615: ST_TO_ADDR
// end ;
35616: LD_VAR 0 3
35620: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35621: LD_INT 0
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
// result := array ;
35630: LD_ADDR_VAR 0 5
35634: PUSH
35635: LD_VAR 0 1
35639: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35640: LD_VAR 0 1
35644: NOT
35645: PUSH
35646: LD_VAR 0 2
35650: NOT
35651: OR
35652: PUSH
35653: LD_VAR 0 3
35657: NOT
35658: OR
35659: PUSH
35660: LD_VAR 0 2
35664: PUSH
35665: LD_VAR 0 1
35669: GREATER
35670: OR
35671: PUSH
35672: LD_VAR 0 3
35676: PUSH
35677: LD_VAR 0 1
35681: GREATER
35682: OR
35683: IFFALSE 35687
// exit ;
35685: GO 35983
// if direction then
35687: LD_VAR 0 4
35691: IFFALSE 35755
// begin d := 1 ;
35693: LD_ADDR_VAR 0 9
35697: PUSH
35698: LD_INT 1
35700: ST_TO_ADDR
// if i_from > i_to then
35701: LD_VAR 0 2
35705: PUSH
35706: LD_VAR 0 3
35710: GREATER
35711: IFFALSE 35737
// length := ( array - i_from ) + i_to else
35713: LD_ADDR_VAR 0 11
35717: PUSH
35718: LD_VAR 0 1
35722: PUSH
35723: LD_VAR 0 2
35727: MINUS
35728: PUSH
35729: LD_VAR 0 3
35733: PLUS
35734: ST_TO_ADDR
35735: GO 35753
// length := i_to - i_from ;
35737: LD_ADDR_VAR 0 11
35741: PUSH
35742: LD_VAR 0 3
35746: PUSH
35747: LD_VAR 0 2
35751: MINUS
35752: ST_TO_ADDR
// end else
35753: GO 35816
// begin d := - 1 ;
35755: LD_ADDR_VAR 0 9
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: ST_TO_ADDR
// if i_from > i_to then
35764: LD_VAR 0 2
35768: PUSH
35769: LD_VAR 0 3
35773: GREATER
35774: IFFALSE 35794
// length := i_from - i_to else
35776: LD_ADDR_VAR 0 11
35780: PUSH
35781: LD_VAR 0 2
35785: PUSH
35786: LD_VAR 0 3
35790: MINUS
35791: ST_TO_ADDR
35792: GO 35816
// length := ( array - i_to ) + i_from ;
35794: LD_ADDR_VAR 0 11
35798: PUSH
35799: LD_VAR 0 1
35803: PUSH
35804: LD_VAR 0 3
35808: MINUS
35809: PUSH
35810: LD_VAR 0 2
35814: PLUS
35815: ST_TO_ADDR
// end ; if not length then
35816: LD_VAR 0 11
35820: NOT
35821: IFFALSE 35825
// exit ;
35823: GO 35983
// tmp := array ;
35825: LD_ADDR_VAR 0 10
35829: PUSH
35830: LD_VAR 0 1
35834: ST_TO_ADDR
// for i = 1 to length do
35835: LD_ADDR_VAR 0 6
35839: PUSH
35840: DOUBLE
35841: LD_INT 1
35843: DEC
35844: ST_TO_ADDR
35845: LD_VAR 0 11
35849: PUSH
35850: FOR_TO
35851: IFFALSE 35971
// begin for j = 1 to array do
35853: LD_ADDR_VAR 0 7
35857: PUSH
35858: DOUBLE
35859: LD_INT 1
35861: DEC
35862: ST_TO_ADDR
35863: LD_VAR 0 1
35867: PUSH
35868: FOR_TO
35869: IFFALSE 35957
// begin k := j + d ;
35871: LD_ADDR_VAR 0 8
35875: PUSH
35876: LD_VAR 0 7
35880: PUSH
35881: LD_VAR 0 9
35885: PLUS
35886: ST_TO_ADDR
// if k > array then
35887: LD_VAR 0 8
35891: PUSH
35892: LD_VAR 0 1
35896: GREATER
35897: IFFALSE 35907
// k := 1 ;
35899: LD_ADDR_VAR 0 8
35903: PUSH
35904: LD_INT 1
35906: ST_TO_ADDR
// if not k then
35907: LD_VAR 0 8
35911: NOT
35912: IFFALSE 35924
// k := array ;
35914: LD_ADDR_VAR 0 8
35918: PUSH
35919: LD_VAR 0 1
35923: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35924: LD_ADDR_VAR 0 10
35928: PUSH
35929: LD_VAR 0 10
35933: PPUSH
35934: LD_VAR 0 8
35938: PPUSH
35939: LD_VAR 0 1
35943: PUSH
35944: LD_VAR 0 7
35948: ARRAY
35949: PPUSH
35950: CALL_OW 1
35954: ST_TO_ADDR
// end ;
35955: GO 35868
35957: POP
35958: POP
// array := tmp ;
35959: LD_ADDR_VAR 0 1
35963: PUSH
35964: LD_VAR 0 10
35968: ST_TO_ADDR
// end ;
35969: GO 35850
35971: POP
35972: POP
// result := array ;
35973: LD_ADDR_VAR 0 5
35977: PUSH
35978: LD_VAR 0 1
35982: ST_TO_ADDR
// end ;
35983: LD_VAR 0 5
35987: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35988: LD_INT 0
35990: PPUSH
35991: PPUSH
// result := 0 ;
35992: LD_ADDR_VAR 0 3
35996: PUSH
35997: LD_INT 0
35999: ST_TO_ADDR
// if not array or not value in array then
36000: LD_VAR 0 1
36004: NOT
36005: PUSH
36006: LD_VAR 0 2
36010: PUSH
36011: LD_VAR 0 1
36015: IN
36016: NOT
36017: OR
36018: IFFALSE 36022
// exit ;
36020: GO 36076
// for i = 1 to array do
36022: LD_ADDR_VAR 0 4
36026: PUSH
36027: DOUBLE
36028: LD_INT 1
36030: DEC
36031: ST_TO_ADDR
36032: LD_VAR 0 1
36036: PUSH
36037: FOR_TO
36038: IFFALSE 36074
// if value = array [ i ] then
36040: LD_VAR 0 2
36044: PUSH
36045: LD_VAR 0 1
36049: PUSH
36050: LD_VAR 0 4
36054: ARRAY
36055: EQUAL
36056: IFFALSE 36072
// begin result := i ;
36058: LD_ADDR_VAR 0 3
36062: PUSH
36063: LD_VAR 0 4
36067: ST_TO_ADDR
// exit ;
36068: POP
36069: POP
36070: GO 36076
// end ;
36072: GO 36037
36074: POP
36075: POP
// end ;
36076: LD_VAR 0 3
36080: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36081: LD_INT 0
36083: PPUSH
// vc_chassis := chassis ;
36084: LD_ADDR_OWVAR 37
36088: PUSH
36089: LD_VAR 0 1
36093: ST_TO_ADDR
// vc_engine := engine ;
36094: LD_ADDR_OWVAR 39
36098: PUSH
36099: LD_VAR 0 2
36103: ST_TO_ADDR
// vc_control := control ;
36104: LD_ADDR_OWVAR 38
36108: PUSH
36109: LD_VAR 0 3
36113: ST_TO_ADDR
// vc_weapon := weapon ;
36114: LD_ADDR_OWVAR 40
36118: PUSH
36119: LD_VAR 0 4
36123: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36124: LD_ADDR_OWVAR 41
36128: PUSH
36129: LD_VAR 0 5
36133: ST_TO_ADDR
// end ;
36134: LD_VAR 0 6
36138: RET
// export function WantPlant ( unit ) ; var task ; begin
36139: LD_INT 0
36141: PPUSH
36142: PPUSH
// result := false ;
36143: LD_ADDR_VAR 0 2
36147: PUSH
36148: LD_INT 0
36150: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36151: LD_ADDR_VAR 0 3
36155: PUSH
36156: LD_VAR 0 1
36160: PPUSH
36161: CALL_OW 437
36165: ST_TO_ADDR
// if task then
36166: LD_VAR 0 3
36170: IFFALSE 36198
// if task [ 1 ] [ 1 ] = p then
36172: LD_VAR 0 3
36176: PUSH
36177: LD_INT 1
36179: ARRAY
36180: PUSH
36181: LD_INT 1
36183: ARRAY
36184: PUSH
36185: LD_STRING p
36187: EQUAL
36188: IFFALSE 36198
// result := true ;
36190: LD_ADDR_VAR 0 2
36194: PUSH
36195: LD_INT 1
36197: ST_TO_ADDR
// end ;
36198: LD_VAR 0 2
36202: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36203: LD_INT 0
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
// if pos < 1 then
36209: LD_VAR 0 2
36213: PUSH
36214: LD_INT 1
36216: LESS
36217: IFFALSE 36221
// exit ;
36219: GO 36524
// if pos = 1 then
36221: LD_VAR 0 2
36225: PUSH
36226: LD_INT 1
36228: EQUAL
36229: IFFALSE 36262
// result := Replace ( arr , pos [ 1 ] , value ) else
36231: LD_ADDR_VAR 0 4
36235: PUSH
36236: LD_VAR 0 1
36240: PPUSH
36241: LD_VAR 0 2
36245: PUSH
36246: LD_INT 1
36248: ARRAY
36249: PPUSH
36250: LD_VAR 0 3
36254: PPUSH
36255: CALL_OW 1
36259: ST_TO_ADDR
36260: GO 36524
// begin tmp := arr ;
36262: LD_ADDR_VAR 0 6
36266: PUSH
36267: LD_VAR 0 1
36271: ST_TO_ADDR
// s_arr := [ tmp ] ;
36272: LD_ADDR_VAR 0 7
36276: PUSH
36277: LD_VAR 0 6
36281: PUSH
36282: EMPTY
36283: LIST
36284: ST_TO_ADDR
// for i = 1 to pos - 1 do
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: DOUBLE
36291: LD_INT 1
36293: DEC
36294: ST_TO_ADDR
36295: LD_VAR 0 2
36299: PUSH
36300: LD_INT 1
36302: MINUS
36303: PUSH
36304: FOR_TO
36305: IFFALSE 36350
// begin tmp := tmp [ pos [ i ] ] ;
36307: LD_ADDR_VAR 0 6
36311: PUSH
36312: LD_VAR 0 6
36316: PUSH
36317: LD_VAR 0 2
36321: PUSH
36322: LD_VAR 0 5
36326: ARRAY
36327: ARRAY
36328: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36329: LD_ADDR_VAR 0 7
36333: PUSH
36334: LD_VAR 0 7
36338: PUSH
36339: LD_VAR 0 6
36343: PUSH
36344: EMPTY
36345: LIST
36346: ADD
36347: ST_TO_ADDR
// end ;
36348: GO 36304
36350: POP
36351: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36352: LD_ADDR_VAR 0 6
36356: PUSH
36357: LD_VAR 0 6
36361: PPUSH
36362: LD_VAR 0 2
36366: PUSH
36367: LD_VAR 0 2
36371: ARRAY
36372: PPUSH
36373: LD_VAR 0 3
36377: PPUSH
36378: CALL_OW 1
36382: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36383: LD_ADDR_VAR 0 7
36387: PUSH
36388: LD_VAR 0 7
36392: PPUSH
36393: LD_VAR 0 7
36397: PPUSH
36398: LD_VAR 0 6
36402: PPUSH
36403: CALL_OW 1
36407: ST_TO_ADDR
// for i = s_arr downto 2 do
36408: LD_ADDR_VAR 0 5
36412: PUSH
36413: DOUBLE
36414: LD_VAR 0 7
36418: INC
36419: ST_TO_ADDR
36420: LD_INT 2
36422: PUSH
36423: FOR_DOWNTO
36424: IFFALSE 36508
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36426: LD_ADDR_VAR 0 6
36430: PUSH
36431: LD_VAR 0 7
36435: PUSH
36436: LD_VAR 0 5
36440: PUSH
36441: LD_INT 1
36443: MINUS
36444: ARRAY
36445: PPUSH
36446: LD_VAR 0 2
36450: PUSH
36451: LD_VAR 0 5
36455: PUSH
36456: LD_INT 1
36458: MINUS
36459: ARRAY
36460: PPUSH
36461: LD_VAR 0 7
36465: PUSH
36466: LD_VAR 0 5
36470: ARRAY
36471: PPUSH
36472: CALL_OW 1
36476: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36477: LD_ADDR_VAR 0 7
36481: PUSH
36482: LD_VAR 0 7
36486: PPUSH
36487: LD_VAR 0 5
36491: PUSH
36492: LD_INT 1
36494: MINUS
36495: PPUSH
36496: LD_VAR 0 6
36500: PPUSH
36501: CALL_OW 1
36505: ST_TO_ADDR
// end ;
36506: GO 36423
36508: POP
36509: POP
// result := s_arr [ 1 ] ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_VAR 0 7
36519: PUSH
36520: LD_INT 1
36522: ARRAY
36523: ST_TO_ADDR
// end ; end ;
36524: LD_VAR 0 4
36528: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36529: LD_INT 0
36531: PPUSH
36532: PPUSH
// if not list then
36533: LD_VAR 0 1
36537: NOT
36538: IFFALSE 36542
// exit ;
36540: GO 36633
// i := list [ pos1 ] ;
36542: LD_ADDR_VAR 0 5
36546: PUSH
36547: LD_VAR 0 1
36551: PUSH
36552: LD_VAR 0 2
36556: ARRAY
36557: ST_TO_ADDR
// if not i then
36558: LD_VAR 0 5
36562: NOT
36563: IFFALSE 36567
// exit ;
36565: GO 36633
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36567: LD_ADDR_VAR 0 1
36571: PUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: LD_VAR 0 2
36581: PPUSH
36582: LD_VAR 0 1
36586: PUSH
36587: LD_VAR 0 3
36591: ARRAY
36592: PPUSH
36593: CALL_OW 1
36597: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36598: LD_ADDR_VAR 0 1
36602: PUSH
36603: LD_VAR 0 1
36607: PPUSH
36608: LD_VAR 0 3
36612: PPUSH
36613: LD_VAR 0 5
36617: PPUSH
36618: CALL_OW 1
36622: ST_TO_ADDR
// result := list ;
36623: LD_ADDR_VAR 0 4
36627: PUSH
36628: LD_VAR 0 1
36632: ST_TO_ADDR
// end ;
36633: LD_VAR 0 4
36637: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36638: LD_INT 0
36640: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36641: LD_ADDR_VAR 0 5
36645: PUSH
36646: LD_VAR 0 1
36650: PPUSH
36651: CALL_OW 250
36655: PPUSH
36656: LD_VAR 0 1
36660: PPUSH
36661: CALL_OW 251
36665: PPUSH
36666: LD_VAR 0 2
36670: PPUSH
36671: LD_VAR 0 3
36675: PPUSH
36676: LD_VAR 0 4
36680: PPUSH
36681: CALL 37059 0 5
36685: ST_TO_ADDR
// end ;
36686: LD_VAR 0 5
36690: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36691: LD_INT 0
36693: PPUSH
36694: PPUSH
36695: PPUSH
36696: PPUSH
// if not list or not unit then
36697: LD_VAR 0 2
36701: NOT
36702: PUSH
36703: LD_VAR 0 1
36707: NOT
36708: OR
36709: IFFALSE 36713
// exit ;
36711: GO 37054
// result := [ ] ;
36713: LD_ADDR_VAR 0 5
36717: PUSH
36718: EMPTY
36719: ST_TO_ADDR
// for i in list do
36720: LD_ADDR_VAR 0 6
36724: PUSH
36725: LD_VAR 0 2
36729: PUSH
36730: FOR_IN
36731: IFFALSE 36949
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36733: LD_ADDR_VAR 0 8
36737: PUSH
36738: LD_VAR 0 1
36742: PPUSH
36743: LD_VAR 0 6
36747: PUSH
36748: LD_INT 1
36750: ARRAY
36751: PPUSH
36752: LD_VAR 0 6
36756: PUSH
36757: LD_INT 2
36759: ARRAY
36760: PPUSH
36761: CALL_OW 297
36765: ST_TO_ADDR
// if not Count ( result ) then
36766: LD_VAR 0 5
36770: PPUSH
36771: CALL 33343 0 1
36775: NOT
36776: IFFALSE 36809
// begin result := Join ( result , [ i , tmp ] ) ;
36778: LD_ADDR_VAR 0 5
36782: PUSH
36783: LD_VAR 0 5
36787: PPUSH
36788: LD_VAR 0 6
36792: PUSH
36793: LD_VAR 0 8
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PPUSH
36802: CALL 68943 0 2
36806: ST_TO_ADDR
// continue ;
36807: GO 36730
// end ; if result [ result ] [ 2 ] <= tmp then
36809: LD_VAR 0 5
36813: PUSH
36814: LD_VAR 0 5
36818: ARRAY
36819: PUSH
36820: LD_INT 2
36822: ARRAY
36823: PUSH
36824: LD_VAR 0 8
36828: LESSEQUAL
36829: IFFALSE 36862
// result := Join ( result , [ i , tmp ] ) else
36831: LD_ADDR_VAR 0 5
36835: PUSH
36836: LD_VAR 0 5
36840: PPUSH
36841: LD_VAR 0 6
36845: PUSH
36846: LD_VAR 0 8
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PPUSH
36855: CALL 68943 0 2
36859: ST_TO_ADDR
36860: GO 36947
// begin for j := 1 to Count ( result ) do
36862: LD_ADDR_VAR 0 7
36866: PUSH
36867: DOUBLE
36868: LD_INT 1
36870: DEC
36871: ST_TO_ADDR
36872: LD_VAR 0 5
36876: PPUSH
36877: CALL 33343 0 1
36881: PUSH
36882: FOR_TO
36883: IFFALSE 36945
// begin if tmp < result [ j ] [ 2 ] then
36885: LD_VAR 0 8
36889: PUSH
36890: LD_VAR 0 5
36894: PUSH
36895: LD_VAR 0 7
36899: ARRAY
36900: PUSH
36901: LD_INT 2
36903: ARRAY
36904: LESS
36905: IFFALSE 36943
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36907: LD_ADDR_VAR 0 5
36911: PUSH
36912: LD_VAR 0 5
36916: PPUSH
36917: LD_VAR 0 7
36921: PPUSH
36922: LD_VAR 0 6
36926: PUSH
36927: LD_VAR 0 8
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PPUSH
36936: CALL_OW 2
36940: ST_TO_ADDR
// break ;
36941: GO 36945
// end ; end ;
36943: GO 36882
36945: POP
36946: POP
// end ; end ;
36947: GO 36730
36949: POP
36950: POP
// if result and not asc then
36951: LD_VAR 0 5
36955: PUSH
36956: LD_VAR 0 3
36960: NOT
36961: AND
36962: IFFALSE 36979
// result := ReverseArray ( result ) ;
36964: LD_ADDR_VAR 0 5
36968: PUSH
36969: LD_VAR 0 5
36973: PPUSH
36974: CALL 64219 0 1
36978: ST_TO_ADDR
// tmp := [ ] ;
36979: LD_ADDR_VAR 0 8
36983: PUSH
36984: EMPTY
36985: ST_TO_ADDR
// if mode then
36986: LD_VAR 0 4
36990: IFFALSE 37054
// begin for i := 1 to result do
36992: LD_ADDR_VAR 0 6
36996: PUSH
36997: DOUBLE
36998: LD_INT 1
37000: DEC
37001: ST_TO_ADDR
37002: LD_VAR 0 5
37006: PUSH
37007: FOR_TO
37008: IFFALSE 37042
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37010: LD_ADDR_VAR 0 8
37014: PUSH
37015: LD_VAR 0 8
37019: PPUSH
37020: LD_VAR 0 5
37024: PUSH
37025: LD_VAR 0 6
37029: ARRAY
37030: PUSH
37031: LD_INT 1
37033: ARRAY
37034: PPUSH
37035: CALL 68943 0 2
37039: ST_TO_ADDR
37040: GO 37007
37042: POP
37043: POP
// result := tmp ;
37044: LD_ADDR_VAR 0 5
37048: PUSH
37049: LD_VAR 0 8
37053: ST_TO_ADDR
// end ; end ;
37054: LD_VAR 0 5
37058: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37059: LD_INT 0
37061: PPUSH
37062: PPUSH
37063: PPUSH
37064: PPUSH
// if not list then
37065: LD_VAR 0 3
37069: NOT
37070: IFFALSE 37074
// exit ;
37072: GO 37462
// result := [ ] ;
37074: LD_ADDR_VAR 0 6
37078: PUSH
37079: EMPTY
37080: ST_TO_ADDR
// for i in list do
37081: LD_ADDR_VAR 0 7
37085: PUSH
37086: LD_VAR 0 3
37090: PUSH
37091: FOR_IN
37092: IFFALSE 37294
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37094: LD_ADDR_VAR 0 9
37098: PUSH
37099: LD_VAR 0 7
37103: PPUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: LD_VAR 0 2
37113: PPUSH
37114: CALL_OW 297
37118: ST_TO_ADDR
// if not result then
37119: LD_VAR 0 6
37123: NOT
37124: IFFALSE 37150
// result := [ [ i , tmp ] ] else
37126: LD_ADDR_VAR 0 6
37130: PUSH
37131: LD_VAR 0 7
37135: PUSH
37136: LD_VAR 0 9
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: EMPTY
37146: LIST
37147: ST_TO_ADDR
37148: GO 37292
// begin if result [ result ] [ 2 ] < tmp then
37150: LD_VAR 0 6
37154: PUSH
37155: LD_VAR 0 6
37159: ARRAY
37160: PUSH
37161: LD_INT 2
37163: ARRAY
37164: PUSH
37165: LD_VAR 0 9
37169: LESS
37170: IFFALSE 37212
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37172: LD_ADDR_VAR 0 6
37176: PUSH
37177: LD_VAR 0 6
37181: PPUSH
37182: LD_VAR 0 6
37186: PUSH
37187: LD_INT 1
37189: PLUS
37190: PPUSH
37191: LD_VAR 0 7
37195: PUSH
37196: LD_VAR 0 9
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PPUSH
37205: CALL_OW 2
37209: ST_TO_ADDR
37210: GO 37292
// for j = 1 to result do
37212: LD_ADDR_VAR 0 8
37216: PUSH
37217: DOUBLE
37218: LD_INT 1
37220: DEC
37221: ST_TO_ADDR
37222: LD_VAR 0 6
37226: PUSH
37227: FOR_TO
37228: IFFALSE 37290
// begin if tmp < result [ j ] [ 2 ] then
37230: LD_VAR 0 9
37234: PUSH
37235: LD_VAR 0 6
37239: PUSH
37240: LD_VAR 0 8
37244: ARRAY
37245: PUSH
37246: LD_INT 2
37248: ARRAY
37249: LESS
37250: IFFALSE 37288
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37252: LD_ADDR_VAR 0 6
37256: PUSH
37257: LD_VAR 0 6
37261: PPUSH
37262: LD_VAR 0 8
37266: PPUSH
37267: LD_VAR 0 7
37271: PUSH
37272: LD_VAR 0 9
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PPUSH
37281: CALL_OW 2
37285: ST_TO_ADDR
// break ;
37286: GO 37290
// end ; end ;
37288: GO 37227
37290: POP
37291: POP
// end ; end ;
37292: GO 37091
37294: POP
37295: POP
// if result and not asc then
37296: LD_VAR 0 6
37300: PUSH
37301: LD_VAR 0 4
37305: NOT
37306: AND
37307: IFFALSE 37382
// begin tmp := result ;
37309: LD_ADDR_VAR 0 9
37313: PUSH
37314: LD_VAR 0 6
37318: ST_TO_ADDR
// for i = tmp downto 1 do
37319: LD_ADDR_VAR 0 7
37323: PUSH
37324: DOUBLE
37325: LD_VAR 0 9
37329: INC
37330: ST_TO_ADDR
37331: LD_INT 1
37333: PUSH
37334: FOR_DOWNTO
37335: IFFALSE 37380
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37337: LD_ADDR_VAR 0 6
37341: PUSH
37342: LD_VAR 0 6
37346: PPUSH
37347: LD_VAR 0 9
37351: PUSH
37352: LD_VAR 0 7
37356: MINUS
37357: PUSH
37358: LD_INT 1
37360: PLUS
37361: PPUSH
37362: LD_VAR 0 9
37366: PUSH
37367: LD_VAR 0 7
37371: ARRAY
37372: PPUSH
37373: CALL_OW 1
37377: ST_TO_ADDR
37378: GO 37334
37380: POP
37381: POP
// end ; tmp := [ ] ;
37382: LD_ADDR_VAR 0 9
37386: PUSH
37387: EMPTY
37388: ST_TO_ADDR
// if mode then
37389: LD_VAR 0 5
37393: IFFALSE 37462
// begin for i = 1 to result do
37395: LD_ADDR_VAR 0 7
37399: PUSH
37400: DOUBLE
37401: LD_INT 1
37403: DEC
37404: ST_TO_ADDR
37405: LD_VAR 0 6
37409: PUSH
37410: FOR_TO
37411: IFFALSE 37450
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37413: LD_ADDR_VAR 0 9
37417: PUSH
37418: LD_VAR 0 9
37422: PPUSH
37423: LD_VAR 0 7
37427: PPUSH
37428: LD_VAR 0 6
37432: PUSH
37433: LD_VAR 0 7
37437: ARRAY
37438: PUSH
37439: LD_INT 1
37441: ARRAY
37442: PPUSH
37443: CALL_OW 1
37447: ST_TO_ADDR
37448: GO 37410
37450: POP
37451: POP
// result := tmp ;
37452: LD_ADDR_VAR 0 6
37456: PUSH
37457: LD_VAR 0 9
37461: ST_TO_ADDR
// end ; end ;
37462: LD_VAR 0 6
37466: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37467: LD_INT 0
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37475: LD_ADDR_VAR 0 5
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// if not x or not y then
37497: LD_VAR 0 2
37501: NOT
37502: PUSH
37503: LD_VAR 0 3
37507: NOT
37508: OR
37509: IFFALSE 37513
// exit ;
37511: GO 39163
// if not range then
37513: LD_VAR 0 4
37517: NOT
37518: IFFALSE 37528
// range := 10 ;
37520: LD_ADDR_VAR 0 4
37524: PUSH
37525: LD_INT 10
37527: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37528: LD_ADDR_VAR 0 8
37532: PUSH
37533: LD_INT 81
37535: PUSH
37536: LD_VAR 0 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 92
37547: PUSH
37548: LD_VAR 0 2
37552: PUSH
37553: LD_VAR 0 3
37557: PUSH
37558: LD_VAR 0 4
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 3
37571: PUSH
37572: LD_INT 21
37574: PUSH
37575: LD_INT 3
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: PPUSH
37591: CALL_OW 69
37595: ST_TO_ADDR
// if not tmp then
37596: LD_VAR 0 8
37600: NOT
37601: IFFALSE 37605
// exit ;
37603: GO 39163
// for i in tmp do
37605: LD_ADDR_VAR 0 6
37609: PUSH
37610: LD_VAR 0 8
37614: PUSH
37615: FOR_IN
37616: IFFALSE 39138
// begin points := [ 0 , 0 , 0 ] ;
37618: LD_ADDR_VAR 0 9
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
// bpoints := 1 ;
37637: LD_ADDR_VAR 0 10
37641: PUSH
37642: LD_INT 1
37644: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37645: LD_VAR 0 6
37649: PPUSH
37650: CALL_OW 247
37654: PUSH
37655: LD_INT 1
37657: DOUBLE
37658: EQUAL
37659: IFTRUE 37663
37661: GO 38241
37663: POP
// begin if GetClass ( i ) = 1 then
37664: LD_VAR 0 6
37668: PPUSH
37669: CALL_OW 257
37673: PUSH
37674: LD_INT 1
37676: EQUAL
37677: IFFALSE 37698
// points := [ 10 , 5 , 3 ] ;
37679: LD_ADDR_VAR 0 9
37683: PUSH
37684: LD_INT 10
37686: PUSH
37687: LD_INT 5
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37698: LD_VAR 0 6
37702: PPUSH
37703: CALL_OW 257
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 3
37713: PUSH
37714: LD_INT 4
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: IN
37722: IFFALSE 37743
// points := [ 3 , 2 , 1 ] ;
37724: LD_ADDR_VAR 0 9
37728: PUSH
37729: LD_INT 3
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: LIST
37742: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37743: LD_VAR 0 6
37747: PPUSH
37748: CALL_OW 257
37752: PUSH
37753: LD_INT 5
37755: EQUAL
37756: IFFALSE 37777
// points := [ 130 , 5 , 2 ] ;
37758: LD_ADDR_VAR 0 9
37762: PUSH
37763: LD_INT 130
37765: PUSH
37766: LD_INT 5
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37777: LD_VAR 0 6
37781: PPUSH
37782: CALL_OW 257
37786: PUSH
37787: LD_INT 8
37789: EQUAL
37790: IFFALSE 37811
// points := [ 35 , 35 , 30 ] ;
37792: LD_ADDR_VAR 0 9
37796: PUSH
37797: LD_INT 35
37799: PUSH
37800: LD_INT 35
37802: PUSH
37803: LD_INT 30
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37811: LD_VAR 0 6
37815: PPUSH
37816: CALL_OW 257
37820: PUSH
37821: LD_INT 9
37823: EQUAL
37824: IFFALSE 37845
// points := [ 20 , 55 , 40 ] ;
37826: LD_ADDR_VAR 0 9
37830: PUSH
37831: LD_INT 20
37833: PUSH
37834: LD_INT 55
37836: PUSH
37837: LD_INT 40
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37845: LD_VAR 0 6
37849: PPUSH
37850: CALL_OW 257
37854: PUSH
37855: LD_INT 12
37857: PUSH
37858: LD_INT 16
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: IN
37865: IFFALSE 37886
// points := [ 5 , 3 , 2 ] ;
37867: LD_ADDR_VAR 0 9
37871: PUSH
37872: LD_INT 5
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37886: LD_VAR 0 6
37890: PPUSH
37891: CALL_OW 257
37895: PUSH
37896: LD_INT 17
37898: EQUAL
37899: IFFALSE 37920
// points := [ 100 , 50 , 75 ] ;
37901: LD_ADDR_VAR 0 9
37905: PUSH
37906: LD_INT 100
37908: PUSH
37909: LD_INT 50
37911: PUSH
37912: LD_INT 75
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: LIST
37919: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37920: LD_VAR 0 6
37924: PPUSH
37925: CALL_OW 257
37929: PUSH
37930: LD_INT 15
37932: EQUAL
37933: IFFALSE 37954
// points := [ 10 , 5 , 3 ] ;
37935: LD_ADDR_VAR 0 9
37939: PUSH
37940: LD_INT 10
37942: PUSH
37943: LD_INT 5
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37954: LD_VAR 0 6
37958: PPUSH
37959: CALL_OW 257
37963: PUSH
37964: LD_INT 14
37966: EQUAL
37967: IFFALSE 37988
// points := [ 10 , 0 , 0 ] ;
37969: LD_ADDR_VAR 0 9
37973: PUSH
37974: LD_INT 10
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37988: LD_VAR 0 6
37992: PPUSH
37993: CALL_OW 257
37997: PUSH
37998: LD_INT 11
38000: EQUAL
38001: IFFALSE 38022
// points := [ 30 , 10 , 5 ] ;
38003: LD_ADDR_VAR 0 9
38007: PUSH
38008: LD_INT 30
38010: PUSH
38011: LD_INT 10
38013: PUSH
38014: LD_INT 5
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38022: LD_VAR 0 1
38026: PPUSH
38027: LD_INT 5
38029: PPUSH
38030: CALL_OW 321
38034: PUSH
38035: LD_INT 2
38037: EQUAL
38038: IFFALSE 38055
// bpoints := bpoints * 1.8 ;
38040: LD_ADDR_VAR 0 10
38044: PUSH
38045: LD_VAR 0 10
38049: PUSH
38050: LD_REAL  1.80000000000000E+0000
38053: MUL
38054: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38055: LD_VAR 0 6
38059: PPUSH
38060: CALL_OW 257
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 2
38070: PUSH
38071: LD_INT 3
38073: PUSH
38074: LD_INT 4
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: IN
38083: PUSH
38084: LD_VAR 0 1
38088: PPUSH
38089: LD_INT 51
38091: PPUSH
38092: CALL_OW 321
38096: PUSH
38097: LD_INT 2
38099: EQUAL
38100: AND
38101: IFFALSE 38118
// bpoints := bpoints * 1.2 ;
38103: LD_ADDR_VAR 0 10
38107: PUSH
38108: LD_VAR 0 10
38112: PUSH
38113: LD_REAL  1.20000000000000E+0000
38116: MUL
38117: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38118: LD_VAR 0 6
38122: PPUSH
38123: CALL_OW 257
38127: PUSH
38128: LD_INT 5
38130: PUSH
38131: LD_INT 7
38133: PUSH
38134: LD_INT 9
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: LIST
38141: IN
38142: PUSH
38143: LD_VAR 0 1
38147: PPUSH
38148: LD_INT 52
38150: PPUSH
38151: CALL_OW 321
38155: PUSH
38156: LD_INT 2
38158: EQUAL
38159: AND
38160: IFFALSE 38177
// bpoints := bpoints * 1.5 ;
38162: LD_ADDR_VAR 0 10
38166: PUSH
38167: LD_VAR 0 10
38171: PUSH
38172: LD_REAL  1.50000000000000E+0000
38175: MUL
38176: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38177: LD_VAR 0 1
38181: PPUSH
38182: LD_INT 66
38184: PPUSH
38185: CALL_OW 321
38189: PUSH
38190: LD_INT 2
38192: EQUAL
38193: IFFALSE 38210
// bpoints := bpoints * 1.1 ;
38195: LD_ADDR_VAR 0 10
38199: PUSH
38200: LD_VAR 0 10
38204: PUSH
38205: LD_REAL  1.10000000000000E+0000
38208: MUL
38209: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38210: LD_ADDR_VAR 0 10
38214: PUSH
38215: LD_VAR 0 10
38219: PUSH
38220: LD_VAR 0 6
38224: PPUSH
38225: LD_INT 1
38227: PPUSH
38228: CALL_OW 259
38232: PUSH
38233: LD_REAL  1.15000000000000E+0000
38236: MUL
38237: MUL
38238: ST_TO_ADDR
// end ; unit_vehicle :
38239: GO 39067
38241: LD_INT 2
38243: DOUBLE
38244: EQUAL
38245: IFTRUE 38249
38247: GO 39055
38249: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38250: LD_VAR 0 6
38254: PPUSH
38255: CALL_OW 264
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: LD_INT 42
38265: PUSH
38266: LD_INT 24
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: IN
38274: IFFALSE 38295
// points := [ 25 , 5 , 3 ] ;
38276: LD_ADDR_VAR 0 9
38280: PUSH
38281: LD_INT 25
38283: PUSH
38284: LD_INT 5
38286: PUSH
38287: LD_INT 3
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38295: LD_VAR 0 6
38299: PPUSH
38300: CALL_OW 264
38304: PUSH
38305: LD_INT 4
38307: PUSH
38308: LD_INT 43
38310: PUSH
38311: LD_INT 25
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: IN
38319: IFFALSE 38340
// points := [ 40 , 15 , 5 ] ;
38321: LD_ADDR_VAR 0 9
38325: PUSH
38326: LD_INT 40
38328: PUSH
38329: LD_INT 15
38331: PUSH
38332: LD_INT 5
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38340: LD_VAR 0 6
38344: PPUSH
38345: CALL_OW 264
38349: PUSH
38350: LD_INT 3
38352: PUSH
38353: LD_INT 23
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: IN
38360: IFFALSE 38381
// points := [ 7 , 25 , 8 ] ;
38362: LD_ADDR_VAR 0 9
38366: PUSH
38367: LD_INT 7
38369: PUSH
38370: LD_INT 25
38372: PUSH
38373: LD_INT 8
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38381: LD_VAR 0 6
38385: PPUSH
38386: CALL_OW 264
38390: PUSH
38391: LD_INT 5
38393: PUSH
38394: LD_INT 27
38396: PUSH
38397: LD_INT 44
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: IN
38405: IFFALSE 38426
// points := [ 14 , 50 , 16 ] ;
38407: LD_ADDR_VAR 0 9
38411: PUSH
38412: LD_INT 14
38414: PUSH
38415: LD_INT 50
38417: PUSH
38418: LD_INT 16
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38426: LD_VAR 0 6
38430: PPUSH
38431: CALL_OW 264
38435: PUSH
38436: LD_INT 6
38438: PUSH
38439: LD_INT 46
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: IN
38446: IFFALSE 38467
// points := [ 32 , 120 , 70 ] ;
38448: LD_ADDR_VAR 0 9
38452: PUSH
38453: LD_INT 32
38455: PUSH
38456: LD_INT 120
38458: PUSH
38459: LD_INT 70
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38467: LD_VAR 0 6
38471: PPUSH
38472: CALL_OW 264
38476: PUSH
38477: LD_INT 7
38479: PUSH
38480: LD_INT 28
38482: PUSH
38483: LD_INT 45
38485: PUSH
38486: LD_INT 92
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: IN
38495: IFFALSE 38516
// points := [ 35 , 20 , 45 ] ;
38497: LD_ADDR_VAR 0 9
38501: PUSH
38502: LD_INT 35
38504: PUSH
38505: LD_INT 20
38507: PUSH
38508: LD_INT 45
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38516: LD_VAR 0 6
38520: PPUSH
38521: CALL_OW 264
38525: PUSH
38526: LD_INT 47
38528: PUSH
38529: EMPTY
38530: LIST
38531: IN
38532: IFFALSE 38553
// points := [ 67 , 45 , 75 ] ;
38534: LD_ADDR_VAR 0 9
38538: PUSH
38539: LD_INT 67
38541: PUSH
38542: LD_INT 45
38544: PUSH
38545: LD_INT 75
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38553: LD_VAR 0 6
38557: PPUSH
38558: CALL_OW 264
38562: PUSH
38563: LD_INT 26
38565: PUSH
38566: EMPTY
38567: LIST
38568: IN
38569: IFFALSE 38590
// points := [ 120 , 30 , 80 ] ;
38571: LD_ADDR_VAR 0 9
38575: PUSH
38576: LD_INT 120
38578: PUSH
38579: LD_INT 30
38581: PUSH
38582: LD_INT 80
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38590: LD_VAR 0 6
38594: PPUSH
38595: CALL_OW 264
38599: PUSH
38600: LD_INT 22
38602: PUSH
38603: EMPTY
38604: LIST
38605: IN
38606: IFFALSE 38627
// points := [ 40 , 1 , 1 ] ;
38608: LD_ADDR_VAR 0 9
38612: PUSH
38613: LD_INT 40
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38627: LD_VAR 0 6
38631: PPUSH
38632: CALL_OW 264
38636: PUSH
38637: LD_INT 29
38639: PUSH
38640: EMPTY
38641: LIST
38642: IN
38643: IFFALSE 38664
// points := [ 70 , 200 , 400 ] ;
38645: LD_ADDR_VAR 0 9
38649: PUSH
38650: LD_INT 70
38652: PUSH
38653: LD_INT 200
38655: PUSH
38656: LD_INT 400
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38664: LD_VAR 0 6
38668: PPUSH
38669: CALL_OW 264
38673: PUSH
38674: LD_INT 14
38676: PUSH
38677: LD_INT 53
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: IN
38684: IFFALSE 38705
// points := [ 40 , 10 , 20 ] ;
38686: LD_ADDR_VAR 0 9
38690: PUSH
38691: LD_INT 40
38693: PUSH
38694: LD_INT 10
38696: PUSH
38697: LD_INT 20
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38705: LD_VAR 0 6
38709: PPUSH
38710: CALL_OW 264
38714: PUSH
38715: LD_INT 9
38717: PUSH
38718: EMPTY
38719: LIST
38720: IN
38721: IFFALSE 38742
// points := [ 5 , 70 , 20 ] ;
38723: LD_ADDR_VAR 0 9
38727: PUSH
38728: LD_INT 5
38730: PUSH
38731: LD_INT 70
38733: PUSH
38734: LD_INT 20
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38742: LD_VAR 0 6
38746: PPUSH
38747: CALL_OW 264
38751: PUSH
38752: LD_INT 10
38754: PUSH
38755: EMPTY
38756: LIST
38757: IN
38758: IFFALSE 38779
// points := [ 35 , 110 , 70 ] ;
38760: LD_ADDR_VAR 0 9
38764: PUSH
38765: LD_INT 35
38767: PUSH
38768: LD_INT 110
38770: PUSH
38771: LD_INT 70
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38779: LD_VAR 0 6
38783: PPUSH
38784: CALL_OW 265
38788: PUSH
38789: LD_INT 25
38791: EQUAL
38792: IFFALSE 38813
// points := [ 80 , 65 , 100 ] ;
38794: LD_ADDR_VAR 0 9
38798: PUSH
38799: LD_INT 80
38801: PUSH
38802: LD_INT 65
38804: PUSH
38805: LD_INT 100
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38813: LD_VAR 0 6
38817: PPUSH
38818: CALL_OW 263
38822: PUSH
38823: LD_INT 1
38825: EQUAL
38826: IFFALSE 38861
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38828: LD_ADDR_VAR 0 10
38832: PUSH
38833: LD_VAR 0 10
38837: PUSH
38838: LD_VAR 0 6
38842: PPUSH
38843: CALL_OW 311
38847: PPUSH
38848: LD_INT 3
38850: PPUSH
38851: CALL_OW 259
38855: PUSH
38856: LD_INT 4
38858: MUL
38859: MUL
38860: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38861: LD_VAR 0 6
38865: PPUSH
38866: CALL_OW 263
38870: PUSH
38871: LD_INT 2
38873: EQUAL
38874: IFFALSE 38925
// begin j := IsControledBy ( i ) ;
38876: LD_ADDR_VAR 0 7
38880: PUSH
38881: LD_VAR 0 6
38885: PPUSH
38886: CALL_OW 312
38890: ST_TO_ADDR
// if j then
38891: LD_VAR 0 7
38895: IFFALSE 38925
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38897: LD_ADDR_VAR 0 10
38901: PUSH
38902: LD_VAR 0 10
38906: PUSH
38907: LD_VAR 0 7
38911: PPUSH
38912: LD_INT 3
38914: PPUSH
38915: CALL_OW 259
38919: PUSH
38920: LD_INT 3
38922: MUL
38923: MUL
38924: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38925: LD_VAR 0 6
38929: PPUSH
38930: CALL_OW 264
38934: PUSH
38935: LD_INT 5
38937: PUSH
38938: LD_INT 6
38940: PUSH
38941: LD_INT 46
38943: PUSH
38944: LD_INT 44
38946: PUSH
38947: LD_INT 47
38949: PUSH
38950: LD_INT 45
38952: PUSH
38953: LD_INT 28
38955: PUSH
38956: LD_INT 7
38958: PUSH
38959: LD_INT 27
38961: PUSH
38962: LD_INT 29
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: IN
38977: PUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: LD_INT 52
38985: PPUSH
38986: CALL_OW 321
38990: PUSH
38991: LD_INT 2
38993: EQUAL
38994: AND
38995: IFFALSE 39012
// bpoints := bpoints * 1.2 ;
38997: LD_ADDR_VAR 0 10
39001: PUSH
39002: LD_VAR 0 10
39006: PUSH
39007: LD_REAL  1.20000000000000E+0000
39010: MUL
39011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39012: LD_VAR 0 6
39016: PPUSH
39017: CALL_OW 264
39021: PUSH
39022: LD_INT 6
39024: PUSH
39025: LD_INT 46
39027: PUSH
39028: LD_INT 47
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: IN
39036: IFFALSE 39053
// bpoints := bpoints * 1.2 ;
39038: LD_ADDR_VAR 0 10
39042: PUSH
39043: LD_VAR 0 10
39047: PUSH
39048: LD_REAL  1.20000000000000E+0000
39051: MUL
39052: ST_TO_ADDR
// end ; unit_building :
39053: GO 39067
39055: LD_INT 3
39057: DOUBLE
39058: EQUAL
39059: IFTRUE 39063
39061: GO 39066
39063: POP
// ; end ;
39064: GO 39067
39066: POP
// for j = 1 to 3 do
39067: LD_ADDR_VAR 0 7
39071: PUSH
39072: DOUBLE
39073: LD_INT 1
39075: DEC
39076: ST_TO_ADDR
39077: LD_INT 3
39079: PUSH
39080: FOR_TO
39081: IFFALSE 39134
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39083: LD_ADDR_VAR 0 5
39087: PUSH
39088: LD_VAR 0 5
39092: PPUSH
39093: LD_VAR 0 7
39097: PPUSH
39098: LD_VAR 0 5
39102: PUSH
39103: LD_VAR 0 7
39107: ARRAY
39108: PUSH
39109: LD_VAR 0 9
39113: PUSH
39114: LD_VAR 0 7
39118: ARRAY
39119: PUSH
39120: LD_VAR 0 10
39124: MUL
39125: PLUS
39126: PPUSH
39127: CALL_OW 1
39131: ST_TO_ADDR
39132: GO 39080
39134: POP
39135: POP
// end ;
39136: GO 37615
39138: POP
39139: POP
// result := Replace ( result , 4 , tmp ) ;
39140: LD_ADDR_VAR 0 5
39144: PUSH
39145: LD_VAR 0 5
39149: PPUSH
39150: LD_INT 4
39152: PPUSH
39153: LD_VAR 0 8
39157: PPUSH
39158: CALL_OW 1
39162: ST_TO_ADDR
// end ;
39163: LD_VAR 0 5
39167: RET
// export function DangerAtRange ( unit , range ) ; begin
39168: LD_INT 0
39170: PPUSH
// if not unit then
39171: LD_VAR 0 1
39175: NOT
39176: IFFALSE 39180
// exit ;
39178: GO 39225
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39180: LD_ADDR_VAR 0 3
39184: PUSH
39185: LD_VAR 0 1
39189: PPUSH
39190: CALL_OW 255
39194: PPUSH
39195: LD_VAR 0 1
39199: PPUSH
39200: CALL_OW 250
39204: PPUSH
39205: LD_VAR 0 1
39209: PPUSH
39210: CALL_OW 251
39214: PPUSH
39215: LD_VAR 0 2
39219: PPUSH
39220: CALL 37467 0 4
39224: ST_TO_ADDR
// end ;
39225: LD_VAR 0 3
39229: RET
// export function DangerInArea ( side , area ) ; begin
39230: LD_INT 0
39232: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39233: LD_ADDR_VAR 0 3
39237: PUSH
39238: LD_VAR 0 2
39242: PPUSH
39243: LD_INT 81
39245: PUSH
39246: LD_VAR 0 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PPUSH
39255: CALL_OW 70
39259: ST_TO_ADDR
// end ;
39260: LD_VAR 0 3
39264: RET
// export function IsExtension ( b ) ; begin
39265: LD_INT 0
39267: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39268: LD_ADDR_VAR 0 2
39272: PUSH
39273: LD_VAR 0 1
39277: PUSH
39278: LD_INT 23
39280: PUSH
39281: LD_INT 20
39283: PUSH
39284: LD_INT 22
39286: PUSH
39287: LD_INT 17
39289: PUSH
39290: LD_INT 24
39292: PUSH
39293: LD_INT 21
39295: PUSH
39296: LD_INT 19
39298: PUSH
39299: LD_INT 16
39301: PUSH
39302: LD_INT 25
39304: PUSH
39305: LD_INT 18
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: IN
39320: ST_TO_ADDR
// end ;
39321: LD_VAR 0 2
39325: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39326: LD_INT 0
39328: PPUSH
39329: PPUSH
39330: PPUSH
// result := [ ] ;
39331: LD_ADDR_VAR 0 4
39335: PUSH
39336: EMPTY
39337: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39338: LD_ADDR_VAR 0 5
39342: PUSH
39343: LD_VAR 0 2
39347: PPUSH
39348: LD_INT 21
39350: PUSH
39351: LD_INT 3
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PPUSH
39358: CALL_OW 70
39362: ST_TO_ADDR
// if not tmp then
39363: LD_VAR 0 5
39367: NOT
39368: IFFALSE 39372
// exit ;
39370: GO 39436
// if checkLink then
39372: LD_VAR 0 3
39376: IFFALSE 39426
// begin for i in tmp do
39378: LD_ADDR_VAR 0 6
39382: PUSH
39383: LD_VAR 0 5
39387: PUSH
39388: FOR_IN
39389: IFFALSE 39424
// if GetBase ( i ) <> base then
39391: LD_VAR 0 6
39395: PPUSH
39396: CALL_OW 274
39400: PUSH
39401: LD_VAR 0 1
39405: NONEQUAL
39406: IFFALSE 39422
// ComLinkToBase ( base , i ) ;
39408: LD_VAR 0 1
39412: PPUSH
39413: LD_VAR 0 6
39417: PPUSH
39418: CALL_OW 169
39422: GO 39388
39424: POP
39425: POP
// end ; result := tmp ;
39426: LD_ADDR_VAR 0 4
39430: PUSH
39431: LD_VAR 0 5
39435: ST_TO_ADDR
// end ;
39436: LD_VAR 0 4
39440: RET
// export function ComComplete ( units , b ) ; var i ; begin
39441: LD_INT 0
39443: PPUSH
39444: PPUSH
// if not units then
39445: LD_VAR 0 1
39449: NOT
39450: IFFALSE 39454
// exit ;
39452: GO 39544
// for i in units do
39454: LD_ADDR_VAR 0 4
39458: PUSH
39459: LD_VAR 0 1
39463: PUSH
39464: FOR_IN
39465: IFFALSE 39542
// if BuildingStatus ( b ) = bs_build then
39467: LD_VAR 0 2
39471: PPUSH
39472: CALL_OW 461
39476: PUSH
39477: LD_INT 1
39479: EQUAL
39480: IFFALSE 39540
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39482: LD_VAR 0 4
39486: PPUSH
39487: LD_STRING h
39489: PUSH
39490: LD_VAR 0 2
39494: PPUSH
39495: CALL_OW 250
39499: PUSH
39500: LD_VAR 0 2
39504: PPUSH
39505: CALL_OW 251
39509: PUSH
39510: LD_VAR 0 2
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: PUSH
39533: EMPTY
39534: LIST
39535: PPUSH
39536: CALL_OW 446
39540: GO 39464
39542: POP
39543: POP
// end ;
39544: LD_VAR 0 3
39548: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39549: LD_INT 0
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39557: LD_VAR 0 1
39561: NOT
39562: PUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 263
39572: PUSH
39573: LD_INT 2
39575: NONEQUAL
39576: OR
39577: IFFALSE 39581
// exit ;
39579: GO 39897
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39581: LD_ADDR_VAR 0 6
39585: PUSH
39586: LD_INT 22
39588: PUSH
39589: LD_VAR 0 1
39593: PPUSH
39594: CALL_OW 255
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 30
39608: PUSH
39609: LD_INT 36
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 34
39618: PUSH
39619: LD_INT 31
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: LIST
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PPUSH
39635: CALL_OW 69
39639: ST_TO_ADDR
// if not tmp then
39640: LD_VAR 0 6
39644: NOT
39645: IFFALSE 39649
// exit ;
39647: GO 39897
// result := [ ] ;
39649: LD_ADDR_VAR 0 2
39653: PUSH
39654: EMPTY
39655: ST_TO_ADDR
// for i in tmp do
39656: LD_ADDR_VAR 0 3
39660: PUSH
39661: LD_VAR 0 6
39665: PUSH
39666: FOR_IN
39667: IFFALSE 39738
// begin t := UnitsInside ( i ) ;
39669: LD_ADDR_VAR 0 4
39673: PUSH
39674: LD_VAR 0 3
39678: PPUSH
39679: CALL_OW 313
39683: ST_TO_ADDR
// if t then
39684: LD_VAR 0 4
39688: IFFALSE 39736
// for j in t do
39690: LD_ADDR_VAR 0 7
39694: PUSH
39695: LD_VAR 0 4
39699: PUSH
39700: FOR_IN
39701: IFFALSE 39734
// result := Replace ( result , result + 1 , j ) ;
39703: LD_ADDR_VAR 0 2
39707: PUSH
39708: LD_VAR 0 2
39712: PPUSH
39713: LD_VAR 0 2
39717: PUSH
39718: LD_INT 1
39720: PLUS
39721: PPUSH
39722: LD_VAR 0 7
39726: PPUSH
39727: CALL_OW 1
39731: ST_TO_ADDR
39732: GO 39700
39734: POP
39735: POP
// end ;
39736: GO 39666
39738: POP
39739: POP
// if not result then
39740: LD_VAR 0 2
39744: NOT
39745: IFFALSE 39749
// exit ;
39747: GO 39897
// mech := result [ 1 ] ;
39749: LD_ADDR_VAR 0 5
39753: PUSH
39754: LD_VAR 0 2
39758: PUSH
39759: LD_INT 1
39761: ARRAY
39762: ST_TO_ADDR
// if result > 1 then
39763: LD_VAR 0 2
39767: PUSH
39768: LD_INT 1
39770: GREATER
39771: IFFALSE 39883
// begin for i = 2 to result do
39773: LD_ADDR_VAR 0 3
39777: PUSH
39778: DOUBLE
39779: LD_INT 2
39781: DEC
39782: ST_TO_ADDR
39783: LD_VAR 0 2
39787: PUSH
39788: FOR_TO
39789: IFFALSE 39881
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39791: LD_ADDR_VAR 0 4
39795: PUSH
39796: LD_VAR 0 2
39800: PUSH
39801: LD_VAR 0 3
39805: ARRAY
39806: PPUSH
39807: LD_INT 3
39809: PPUSH
39810: CALL_OW 259
39814: PUSH
39815: LD_VAR 0 2
39819: PUSH
39820: LD_VAR 0 3
39824: ARRAY
39825: PPUSH
39826: CALL_OW 432
39830: MINUS
39831: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39832: LD_VAR 0 4
39836: PUSH
39837: LD_VAR 0 5
39841: PPUSH
39842: LD_INT 3
39844: PPUSH
39845: CALL_OW 259
39849: PUSH
39850: LD_VAR 0 5
39854: PPUSH
39855: CALL_OW 432
39859: MINUS
39860: GREATEREQUAL
39861: IFFALSE 39879
// mech := result [ i ] ;
39863: LD_ADDR_VAR 0 5
39867: PUSH
39868: LD_VAR 0 2
39872: PUSH
39873: LD_VAR 0 3
39877: ARRAY
39878: ST_TO_ADDR
// end ;
39879: GO 39788
39881: POP
39882: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39883: LD_VAR 0 1
39887: PPUSH
39888: LD_VAR 0 5
39892: PPUSH
39893: CALL_OW 135
// end ;
39897: LD_VAR 0 2
39901: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39902: LD_INT 0
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
// result := [ ] ;
39917: LD_ADDR_VAR 0 7
39921: PUSH
39922: EMPTY
39923: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 266
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: IN
39944: NOT
39945: IFFALSE 39949
// exit ;
39947: GO 41583
// if name then
39949: LD_VAR 0 3
39953: IFFALSE 39969
// SetBName ( base_dep , name ) ;
39955: LD_VAR 0 1
39959: PPUSH
39960: LD_VAR 0 3
39964: PPUSH
39965: CALL_OW 500
// base := GetBase ( base_dep ) ;
39969: LD_ADDR_VAR 0 15
39973: PUSH
39974: LD_VAR 0 1
39978: PPUSH
39979: CALL_OW 274
39983: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39984: LD_ADDR_VAR 0 16
39988: PUSH
39989: LD_VAR 0 1
39993: PPUSH
39994: CALL_OW 255
39998: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39999: LD_ADDR_VAR 0 17
40003: PUSH
40004: LD_VAR 0 1
40008: PPUSH
40009: CALL_OW 248
40013: ST_TO_ADDR
// if sources then
40014: LD_VAR 0 5
40018: IFFALSE 40065
// for i = 1 to 3 do
40020: LD_ADDR_VAR 0 8
40024: PUSH
40025: DOUBLE
40026: LD_INT 1
40028: DEC
40029: ST_TO_ADDR
40030: LD_INT 3
40032: PUSH
40033: FOR_TO
40034: IFFALSE 40063
// AddResourceType ( base , i , sources [ i ] ) ;
40036: LD_VAR 0 15
40040: PPUSH
40041: LD_VAR 0 8
40045: PPUSH
40046: LD_VAR 0 5
40050: PUSH
40051: LD_VAR 0 8
40055: ARRAY
40056: PPUSH
40057: CALL_OW 276
40061: GO 40033
40063: POP
40064: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40065: LD_ADDR_VAR 0 18
40069: PUSH
40070: LD_VAR 0 15
40074: PPUSH
40075: LD_VAR 0 2
40079: PPUSH
40080: LD_INT 1
40082: PPUSH
40083: CALL 39326 0 3
40087: ST_TO_ADDR
// InitHc ;
40088: CALL_OW 19
// InitUc ;
40092: CALL_OW 18
// uc_side := side ;
40096: LD_ADDR_OWVAR 20
40100: PUSH
40101: LD_VAR 0 16
40105: ST_TO_ADDR
// uc_nation := nation ;
40106: LD_ADDR_OWVAR 21
40110: PUSH
40111: LD_VAR 0 17
40115: ST_TO_ADDR
// if buildings then
40116: LD_VAR 0 18
40120: IFFALSE 41442
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40122: LD_ADDR_VAR 0 19
40126: PUSH
40127: LD_VAR 0 18
40131: PPUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 30
40137: PUSH
40138: LD_INT 29
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 30
40147: PUSH
40148: LD_INT 30
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: PPUSH
40160: CALL_OW 72
40164: ST_TO_ADDR
// if tmp then
40165: LD_VAR 0 19
40169: IFFALSE 40217
// for i in tmp do
40171: LD_ADDR_VAR 0 8
40175: PUSH
40176: LD_VAR 0 19
40180: PUSH
40181: FOR_IN
40182: IFFALSE 40215
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40184: LD_VAR 0 8
40188: PPUSH
40189: CALL_OW 250
40193: PPUSH
40194: LD_VAR 0 8
40198: PPUSH
40199: CALL_OW 251
40203: PPUSH
40204: LD_VAR 0 16
40208: PPUSH
40209: CALL_OW 441
40213: GO 40181
40215: POP
40216: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40217: LD_VAR 0 18
40221: PPUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 30
40227: PUSH
40228: LD_INT 32
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 30
40237: PUSH
40238: LD_INT 33
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: PPUSH
40250: CALL_OW 72
40254: IFFALSE 40342
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40256: LD_ADDR_VAR 0 8
40260: PUSH
40261: LD_VAR 0 18
40265: PPUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 30
40271: PUSH
40272: LD_INT 32
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 30
40281: PUSH
40282: LD_INT 33
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: PPUSH
40294: CALL_OW 72
40298: PUSH
40299: FOR_IN
40300: IFFALSE 40340
// begin if not GetBWeapon ( i ) then
40302: LD_VAR 0 8
40306: PPUSH
40307: CALL_OW 269
40311: NOT
40312: IFFALSE 40338
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40314: LD_VAR 0 8
40318: PPUSH
40319: LD_VAR 0 8
40323: PPUSH
40324: LD_VAR 0 2
40328: PPUSH
40329: CALL 41588 0 2
40333: PPUSH
40334: CALL_OW 431
// end ;
40338: GO 40299
40340: POP
40341: POP
// end ; for i = 1 to personel do
40342: LD_ADDR_VAR 0 8
40346: PUSH
40347: DOUBLE
40348: LD_INT 1
40350: DEC
40351: ST_TO_ADDR
40352: LD_VAR 0 6
40356: PUSH
40357: FOR_TO
40358: IFFALSE 41422
// begin if i > 4 then
40360: LD_VAR 0 8
40364: PUSH
40365: LD_INT 4
40367: GREATER
40368: IFFALSE 40372
// break ;
40370: GO 41422
// case i of 1 :
40372: LD_VAR 0 8
40376: PUSH
40377: LD_INT 1
40379: DOUBLE
40380: EQUAL
40381: IFTRUE 40385
40383: GO 40465
40385: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40386: LD_ADDR_VAR 0 12
40390: PUSH
40391: LD_VAR 0 18
40395: PPUSH
40396: LD_INT 22
40398: PUSH
40399: LD_VAR 0 16
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 58
40410: PUSH
40411: EMPTY
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 30
40419: PUSH
40420: LD_INT 32
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 30
40429: PUSH
40430: LD_INT 4
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 30
40439: PUSH
40440: LD_INT 5
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: PPUSH
40458: CALL_OW 72
40462: ST_TO_ADDR
40463: GO 40687
40465: LD_INT 2
40467: DOUBLE
40468: EQUAL
40469: IFTRUE 40473
40471: GO 40535
40473: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40474: LD_ADDR_VAR 0 12
40478: PUSH
40479: LD_VAR 0 18
40483: PPUSH
40484: LD_INT 22
40486: PUSH
40487: LD_VAR 0 16
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 30
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 30
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PPUSH
40528: CALL_OW 72
40532: ST_TO_ADDR
40533: GO 40687
40535: LD_INT 3
40537: DOUBLE
40538: EQUAL
40539: IFTRUE 40543
40541: GO 40605
40543: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40544: LD_ADDR_VAR 0 12
40548: PUSH
40549: LD_VAR 0 18
40553: PPUSH
40554: LD_INT 22
40556: PUSH
40557: LD_VAR 0 16
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: LD_INT 30
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 30
40581: PUSH
40582: LD_INT 3
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PPUSH
40598: CALL_OW 72
40602: ST_TO_ADDR
40603: GO 40687
40605: LD_INT 4
40607: DOUBLE
40608: EQUAL
40609: IFTRUE 40613
40611: GO 40686
40613: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40614: LD_ADDR_VAR 0 12
40618: PUSH
40619: LD_VAR 0 18
40623: PPUSH
40624: LD_INT 22
40626: PUSH
40627: LD_VAR 0 16
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: PUSH
40639: LD_INT 30
40641: PUSH
40642: LD_INT 6
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 30
40651: PUSH
40652: LD_INT 7
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 30
40661: PUSH
40662: LD_INT 8
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PPUSH
40679: CALL_OW 72
40683: ST_TO_ADDR
40684: GO 40687
40686: POP
// if i = 1 then
40687: LD_VAR 0 8
40691: PUSH
40692: LD_INT 1
40694: EQUAL
40695: IFFALSE 40806
// begin tmp := [ ] ;
40697: LD_ADDR_VAR 0 19
40701: PUSH
40702: EMPTY
40703: ST_TO_ADDR
// for j in f do
40704: LD_ADDR_VAR 0 9
40708: PUSH
40709: LD_VAR 0 12
40713: PUSH
40714: FOR_IN
40715: IFFALSE 40788
// if GetBType ( j ) = b_bunker then
40717: LD_VAR 0 9
40721: PPUSH
40722: CALL_OW 266
40726: PUSH
40727: LD_INT 32
40729: EQUAL
40730: IFFALSE 40757
// tmp := Insert ( tmp , 1 , j ) else
40732: LD_ADDR_VAR 0 19
40736: PUSH
40737: LD_VAR 0 19
40741: PPUSH
40742: LD_INT 1
40744: PPUSH
40745: LD_VAR 0 9
40749: PPUSH
40750: CALL_OW 2
40754: ST_TO_ADDR
40755: GO 40786
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40757: LD_ADDR_VAR 0 19
40761: PUSH
40762: LD_VAR 0 19
40766: PPUSH
40767: LD_VAR 0 19
40771: PUSH
40772: LD_INT 1
40774: PLUS
40775: PPUSH
40776: LD_VAR 0 9
40780: PPUSH
40781: CALL_OW 2
40785: ST_TO_ADDR
40786: GO 40714
40788: POP
40789: POP
// if tmp then
40790: LD_VAR 0 19
40794: IFFALSE 40806
// f := tmp ;
40796: LD_ADDR_VAR 0 12
40800: PUSH
40801: LD_VAR 0 19
40805: ST_TO_ADDR
// end ; x := personel [ i ] ;
40806: LD_ADDR_VAR 0 13
40810: PUSH
40811: LD_VAR 0 6
40815: PUSH
40816: LD_VAR 0 8
40820: ARRAY
40821: ST_TO_ADDR
// if x = - 1 then
40822: LD_VAR 0 13
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: EQUAL
40831: IFFALSE 41040
// begin for j in f do
40833: LD_ADDR_VAR 0 9
40837: PUSH
40838: LD_VAR 0 12
40842: PUSH
40843: FOR_IN
40844: IFFALSE 41036
// repeat InitHc ;
40846: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40850: LD_VAR 0 9
40854: PPUSH
40855: CALL_OW 266
40859: PUSH
40860: LD_INT 5
40862: EQUAL
40863: IFFALSE 40933
// begin if UnitsInside ( j ) < 3 then
40865: LD_VAR 0 9
40869: PPUSH
40870: CALL_OW 313
40874: PUSH
40875: LD_INT 3
40877: LESS
40878: IFFALSE 40914
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40880: LD_INT 0
40882: PPUSH
40883: LD_INT 5
40885: PUSH
40886: LD_INT 8
40888: PUSH
40889: LD_INT 9
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: PUSH
40897: LD_VAR 0 17
40901: ARRAY
40902: PPUSH
40903: LD_VAR 0 4
40907: PPUSH
40908: CALL_OW 380
40912: GO 40931
// PrepareHuman ( false , i , skill ) ;
40914: LD_INT 0
40916: PPUSH
40917: LD_VAR 0 8
40921: PPUSH
40922: LD_VAR 0 4
40926: PPUSH
40927: CALL_OW 380
// end else
40931: GO 40950
// PrepareHuman ( false , i , skill ) ;
40933: LD_INT 0
40935: PPUSH
40936: LD_VAR 0 8
40940: PPUSH
40941: LD_VAR 0 4
40945: PPUSH
40946: CALL_OW 380
// un := CreateHuman ;
40950: LD_ADDR_VAR 0 14
40954: PUSH
40955: CALL_OW 44
40959: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40960: LD_ADDR_VAR 0 7
40964: PUSH
40965: LD_VAR 0 7
40969: PPUSH
40970: LD_INT 1
40972: PPUSH
40973: LD_VAR 0 14
40977: PPUSH
40978: CALL_OW 2
40982: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40983: LD_VAR 0 14
40987: PPUSH
40988: LD_VAR 0 9
40992: PPUSH
40993: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40997: LD_VAR 0 9
41001: PPUSH
41002: CALL_OW 313
41006: PUSH
41007: LD_INT 6
41009: EQUAL
41010: PUSH
41011: LD_VAR 0 9
41015: PPUSH
41016: CALL_OW 266
41020: PUSH
41021: LD_INT 32
41023: PUSH
41024: LD_INT 31
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: IN
41031: OR
41032: IFFALSE 40846
41034: GO 40843
41036: POP
41037: POP
// end else
41038: GO 41420
// for j = 1 to x do
41040: LD_ADDR_VAR 0 9
41044: PUSH
41045: DOUBLE
41046: LD_INT 1
41048: DEC
41049: ST_TO_ADDR
41050: LD_VAR 0 13
41054: PUSH
41055: FOR_TO
41056: IFFALSE 41418
// begin InitHc ;
41058: CALL_OW 19
// if not f then
41062: LD_VAR 0 12
41066: NOT
41067: IFFALSE 41156
// begin PrepareHuman ( false , i , skill ) ;
41069: LD_INT 0
41071: PPUSH
41072: LD_VAR 0 8
41076: PPUSH
41077: LD_VAR 0 4
41081: PPUSH
41082: CALL_OW 380
// un := CreateHuman ;
41086: LD_ADDR_VAR 0 14
41090: PUSH
41091: CALL_OW 44
41095: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41096: LD_ADDR_VAR 0 7
41100: PUSH
41101: LD_VAR 0 7
41105: PPUSH
41106: LD_INT 1
41108: PPUSH
41109: LD_VAR 0 14
41113: PPUSH
41114: CALL_OW 2
41118: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41119: LD_VAR 0 14
41123: PPUSH
41124: LD_VAR 0 1
41128: PPUSH
41129: CALL_OW 250
41133: PPUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 251
41143: PPUSH
41144: LD_INT 10
41146: PPUSH
41147: LD_INT 0
41149: PPUSH
41150: CALL_OW 50
// continue ;
41154: GO 41055
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41156: LD_VAR 0 12
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PPUSH
41165: CALL_OW 313
41169: PUSH
41170: LD_VAR 0 12
41174: PUSH
41175: LD_INT 1
41177: ARRAY
41178: PPUSH
41179: CALL_OW 266
41183: PUSH
41184: LD_INT 32
41186: PUSH
41187: LD_INT 31
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: IN
41194: AND
41195: PUSH
41196: LD_VAR 0 12
41200: PUSH
41201: LD_INT 1
41203: ARRAY
41204: PPUSH
41205: CALL_OW 313
41209: PUSH
41210: LD_INT 6
41212: EQUAL
41213: OR
41214: IFFALSE 41234
// f := Delete ( f , 1 ) ;
41216: LD_ADDR_VAR 0 12
41220: PUSH
41221: LD_VAR 0 12
41225: PPUSH
41226: LD_INT 1
41228: PPUSH
41229: CALL_OW 3
41233: ST_TO_ADDR
// if not f then
41234: LD_VAR 0 12
41238: NOT
41239: IFFALSE 41257
// begin x := x + 2 ;
41241: LD_ADDR_VAR 0 13
41245: PUSH
41246: LD_VAR 0 13
41250: PUSH
41251: LD_INT 2
41253: PLUS
41254: ST_TO_ADDR
// continue ;
41255: GO 41055
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41257: LD_VAR 0 12
41261: PUSH
41262: LD_INT 1
41264: ARRAY
41265: PPUSH
41266: CALL_OW 266
41270: PUSH
41271: LD_INT 5
41273: EQUAL
41274: IFFALSE 41348
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41276: LD_VAR 0 12
41280: PUSH
41281: LD_INT 1
41283: ARRAY
41284: PPUSH
41285: CALL_OW 313
41289: PUSH
41290: LD_INT 3
41292: LESS
41293: IFFALSE 41329
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41295: LD_INT 0
41297: PPUSH
41298: LD_INT 5
41300: PUSH
41301: LD_INT 8
41303: PUSH
41304: LD_INT 9
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: PUSH
41312: LD_VAR 0 17
41316: ARRAY
41317: PPUSH
41318: LD_VAR 0 4
41322: PPUSH
41323: CALL_OW 380
41327: GO 41346
// PrepareHuman ( false , i , skill ) ;
41329: LD_INT 0
41331: PPUSH
41332: LD_VAR 0 8
41336: PPUSH
41337: LD_VAR 0 4
41341: PPUSH
41342: CALL_OW 380
// end else
41346: GO 41365
// PrepareHuman ( false , i , skill ) ;
41348: LD_INT 0
41350: PPUSH
41351: LD_VAR 0 8
41355: PPUSH
41356: LD_VAR 0 4
41360: PPUSH
41361: CALL_OW 380
// un := CreateHuman ;
41365: LD_ADDR_VAR 0 14
41369: PUSH
41370: CALL_OW 44
41374: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41375: LD_ADDR_VAR 0 7
41379: PUSH
41380: LD_VAR 0 7
41384: PPUSH
41385: LD_INT 1
41387: PPUSH
41388: LD_VAR 0 14
41392: PPUSH
41393: CALL_OW 2
41397: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41398: LD_VAR 0 14
41402: PPUSH
41403: LD_VAR 0 12
41407: PUSH
41408: LD_INT 1
41410: ARRAY
41411: PPUSH
41412: CALL_OW 52
// end ;
41416: GO 41055
41418: POP
41419: POP
// end ;
41420: GO 40357
41422: POP
41423: POP
// result := result ^ buildings ;
41424: LD_ADDR_VAR 0 7
41428: PUSH
41429: LD_VAR 0 7
41433: PUSH
41434: LD_VAR 0 18
41438: ADD
41439: ST_TO_ADDR
// end else
41440: GO 41583
// begin for i = 1 to personel do
41442: LD_ADDR_VAR 0 8
41446: PUSH
41447: DOUBLE
41448: LD_INT 1
41450: DEC
41451: ST_TO_ADDR
41452: LD_VAR 0 6
41456: PUSH
41457: FOR_TO
41458: IFFALSE 41581
// begin if i > 4 then
41460: LD_VAR 0 8
41464: PUSH
41465: LD_INT 4
41467: GREATER
41468: IFFALSE 41472
// break ;
41470: GO 41581
// x := personel [ i ] ;
41472: LD_ADDR_VAR 0 13
41476: PUSH
41477: LD_VAR 0 6
41481: PUSH
41482: LD_VAR 0 8
41486: ARRAY
41487: ST_TO_ADDR
// if x = - 1 then
41488: LD_VAR 0 13
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: EQUAL
41497: IFFALSE 41501
// continue ;
41499: GO 41457
// PrepareHuman ( false , i , skill ) ;
41501: LD_INT 0
41503: PPUSH
41504: LD_VAR 0 8
41508: PPUSH
41509: LD_VAR 0 4
41513: PPUSH
41514: CALL_OW 380
// un := CreateHuman ;
41518: LD_ADDR_VAR 0 14
41522: PUSH
41523: CALL_OW 44
41527: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41528: LD_VAR 0 14
41532: PPUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 250
41542: PPUSH
41543: LD_VAR 0 1
41547: PPUSH
41548: CALL_OW 251
41552: PPUSH
41553: LD_INT 10
41555: PPUSH
41556: LD_INT 0
41558: PPUSH
41559: CALL_OW 50
// result := result ^ un ;
41563: LD_ADDR_VAR 0 7
41567: PUSH
41568: LD_VAR 0 7
41572: PUSH
41573: LD_VAR 0 14
41577: ADD
41578: ST_TO_ADDR
// end ;
41579: GO 41457
41581: POP
41582: POP
// end ; end ;
41583: LD_VAR 0 7
41587: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41588: LD_INT 0
41590: PPUSH
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
41596: PPUSH
41597: PPUSH
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
41605: PPUSH
// result := false ;
41606: LD_ADDR_VAR 0 3
41610: PUSH
41611: LD_INT 0
41613: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41614: LD_VAR 0 1
41618: NOT
41619: PUSH
41620: LD_VAR 0 1
41624: PPUSH
41625: CALL_OW 266
41629: PUSH
41630: LD_INT 32
41632: PUSH
41633: LD_INT 33
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: IN
41640: NOT
41641: OR
41642: IFFALSE 41646
// exit ;
41644: GO 42755
// nat := GetNation ( tower ) ;
41646: LD_ADDR_VAR 0 12
41650: PUSH
41651: LD_VAR 0 1
41655: PPUSH
41656: CALL_OW 248
41660: ST_TO_ADDR
// side := GetSide ( tower ) ;
41661: LD_ADDR_VAR 0 16
41665: PUSH
41666: LD_VAR 0 1
41670: PPUSH
41671: CALL_OW 255
41675: ST_TO_ADDR
// x := GetX ( tower ) ;
41676: LD_ADDR_VAR 0 10
41680: PUSH
41681: LD_VAR 0 1
41685: PPUSH
41686: CALL_OW 250
41690: ST_TO_ADDR
// y := GetY ( tower ) ;
41691: LD_ADDR_VAR 0 11
41695: PUSH
41696: LD_VAR 0 1
41700: PPUSH
41701: CALL_OW 251
41705: ST_TO_ADDR
// if not x or not y then
41706: LD_VAR 0 10
41710: NOT
41711: PUSH
41712: LD_VAR 0 11
41716: NOT
41717: OR
41718: IFFALSE 41722
// exit ;
41720: GO 42755
// weapon := 0 ;
41722: LD_ADDR_VAR 0 18
41726: PUSH
41727: LD_INT 0
41729: ST_TO_ADDR
// fac_list := [ ] ;
41730: LD_ADDR_VAR 0 17
41734: PUSH
41735: EMPTY
41736: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41737: LD_ADDR_VAR 0 6
41741: PUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 274
41751: PPUSH
41752: LD_VAR 0 2
41756: PPUSH
41757: LD_INT 0
41759: PPUSH
41760: CALL 39326 0 3
41764: PPUSH
41765: LD_INT 30
41767: PUSH
41768: LD_INT 3
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PPUSH
41775: CALL_OW 72
41779: ST_TO_ADDR
// if not factories then
41780: LD_VAR 0 6
41784: NOT
41785: IFFALSE 41789
// exit ;
41787: GO 42755
// for i in factories do
41789: LD_ADDR_VAR 0 8
41793: PUSH
41794: LD_VAR 0 6
41798: PUSH
41799: FOR_IN
41800: IFFALSE 41825
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41802: LD_ADDR_VAR 0 17
41806: PUSH
41807: LD_VAR 0 17
41811: PUSH
41812: LD_VAR 0 8
41816: PPUSH
41817: CALL_OW 478
41821: UNION
41822: ST_TO_ADDR
41823: GO 41799
41825: POP
41826: POP
// if not fac_list then
41827: LD_VAR 0 17
41831: NOT
41832: IFFALSE 41836
// exit ;
41834: GO 42755
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41836: LD_ADDR_VAR 0 5
41840: PUSH
41841: LD_INT 4
41843: PUSH
41844: LD_INT 5
41846: PUSH
41847: LD_INT 9
41849: PUSH
41850: LD_INT 10
41852: PUSH
41853: LD_INT 6
41855: PUSH
41856: LD_INT 7
41858: PUSH
41859: LD_INT 11
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 27
41873: PUSH
41874: LD_INT 28
41876: PUSH
41877: LD_INT 26
41879: PUSH
41880: LD_INT 30
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 43
41891: PUSH
41892: LD_INT 44
41894: PUSH
41895: LD_INT 46
41897: PUSH
41898: LD_INT 45
41900: PUSH
41901: LD_INT 47
41903: PUSH
41904: LD_INT 49
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: LIST
41919: PUSH
41920: LD_VAR 0 12
41924: ARRAY
41925: ST_TO_ADDR
// list := list isect fac_list ;
41926: LD_ADDR_VAR 0 5
41930: PUSH
41931: LD_VAR 0 5
41935: PUSH
41936: LD_VAR 0 17
41940: ISECT
41941: ST_TO_ADDR
// if not list then
41942: LD_VAR 0 5
41946: NOT
41947: IFFALSE 41951
// exit ;
41949: GO 42755
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41951: LD_VAR 0 12
41955: PUSH
41956: LD_INT 3
41958: EQUAL
41959: PUSH
41960: LD_INT 49
41962: PUSH
41963: LD_VAR 0 5
41967: IN
41968: AND
41969: PUSH
41970: LD_INT 31
41972: PPUSH
41973: LD_VAR 0 16
41977: PPUSH
41978: CALL_OW 321
41982: PUSH
41983: LD_INT 2
41985: EQUAL
41986: AND
41987: IFFALSE 42047
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41989: LD_INT 22
41991: PUSH
41992: LD_VAR 0 16
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 35
42003: PUSH
42004: LD_INT 49
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 91
42013: PUSH
42014: LD_VAR 0 1
42018: PUSH
42019: LD_INT 10
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: PPUSH
42032: CALL_OW 69
42036: NOT
42037: IFFALSE 42047
// weapon := ru_time_lapser ;
42039: LD_ADDR_VAR 0 18
42043: PUSH
42044: LD_INT 49
42046: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42047: LD_VAR 0 12
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: IN
42062: PUSH
42063: LD_INT 11
42065: PUSH
42066: LD_VAR 0 5
42070: IN
42071: PUSH
42072: LD_INT 30
42074: PUSH
42075: LD_VAR 0 5
42079: IN
42080: OR
42081: AND
42082: PUSH
42083: LD_INT 6
42085: PPUSH
42086: LD_VAR 0 16
42090: PPUSH
42091: CALL_OW 321
42095: PUSH
42096: LD_INT 2
42098: EQUAL
42099: AND
42100: IFFALSE 42265
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42102: LD_INT 22
42104: PUSH
42105: LD_VAR 0 16
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 35
42119: PUSH
42120: LD_INT 11
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 35
42129: PUSH
42130: LD_INT 30
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 91
42144: PUSH
42145: LD_VAR 0 1
42149: PUSH
42150: LD_INT 18
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: PPUSH
42163: CALL_OW 69
42167: NOT
42168: PUSH
42169: LD_INT 22
42171: PUSH
42172: LD_VAR 0 16
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: LD_INT 30
42186: PUSH
42187: LD_INT 32
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 30
42196: PUSH
42197: LD_INT 33
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 91
42211: PUSH
42212: LD_VAR 0 1
42216: PUSH
42217: LD_INT 12
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: LIST
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: PPUSH
42233: CALL_OW 69
42237: PUSH
42238: LD_INT 2
42240: GREATER
42241: AND
42242: IFFALSE 42265
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42244: LD_ADDR_VAR 0 18
42248: PUSH
42249: LD_INT 11
42251: PUSH
42252: LD_INT 30
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_VAR 0 12
42263: ARRAY
42264: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42265: LD_VAR 0 18
42269: NOT
42270: PUSH
42271: LD_INT 40
42273: PPUSH
42274: LD_VAR 0 16
42278: PPUSH
42279: CALL_OW 321
42283: PUSH
42284: LD_INT 2
42286: EQUAL
42287: AND
42288: PUSH
42289: LD_INT 7
42291: PUSH
42292: LD_VAR 0 5
42296: IN
42297: PUSH
42298: LD_INT 28
42300: PUSH
42301: LD_VAR 0 5
42305: IN
42306: OR
42307: PUSH
42308: LD_INT 45
42310: PUSH
42311: LD_VAR 0 5
42315: IN
42316: OR
42317: AND
42318: IFFALSE 42572
// begin hex := GetHexInfo ( x , y ) ;
42320: LD_ADDR_VAR 0 4
42324: PUSH
42325: LD_VAR 0 10
42329: PPUSH
42330: LD_VAR 0 11
42334: PPUSH
42335: CALL_OW 546
42339: ST_TO_ADDR
// if hex [ 1 ] then
42340: LD_VAR 0 4
42344: PUSH
42345: LD_INT 1
42347: ARRAY
42348: IFFALSE 42352
// exit ;
42350: GO 42755
// height := hex [ 2 ] ;
42352: LD_ADDR_VAR 0 15
42356: PUSH
42357: LD_VAR 0 4
42361: PUSH
42362: LD_INT 2
42364: ARRAY
42365: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42366: LD_ADDR_VAR 0 14
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 3
42379: PUSH
42380: LD_INT 5
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// for i in tmp do
42389: LD_ADDR_VAR 0 8
42393: PUSH
42394: LD_VAR 0 14
42398: PUSH
42399: FOR_IN
42400: IFFALSE 42570
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42402: LD_ADDR_VAR 0 9
42406: PUSH
42407: LD_VAR 0 10
42411: PPUSH
42412: LD_VAR 0 8
42416: PPUSH
42417: LD_INT 5
42419: PPUSH
42420: CALL_OW 272
42424: PUSH
42425: LD_VAR 0 11
42429: PPUSH
42430: LD_VAR 0 8
42434: PPUSH
42435: LD_INT 5
42437: PPUSH
42438: CALL_OW 273
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42447: LD_VAR 0 9
42451: PUSH
42452: LD_INT 1
42454: ARRAY
42455: PPUSH
42456: LD_VAR 0 9
42460: PUSH
42461: LD_INT 2
42463: ARRAY
42464: PPUSH
42465: CALL_OW 488
42469: IFFALSE 42568
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42471: LD_ADDR_VAR 0 4
42475: PUSH
42476: LD_VAR 0 9
42480: PUSH
42481: LD_INT 1
42483: ARRAY
42484: PPUSH
42485: LD_VAR 0 9
42489: PUSH
42490: LD_INT 2
42492: ARRAY
42493: PPUSH
42494: CALL_OW 546
42498: ST_TO_ADDR
// if hex [ 1 ] then
42499: LD_VAR 0 4
42503: PUSH
42504: LD_INT 1
42506: ARRAY
42507: IFFALSE 42511
// continue ;
42509: GO 42399
// h := hex [ 2 ] ;
42511: LD_ADDR_VAR 0 13
42515: PUSH
42516: LD_VAR 0 4
42520: PUSH
42521: LD_INT 2
42523: ARRAY
42524: ST_TO_ADDR
// if h + 7 < height then
42525: LD_VAR 0 13
42529: PUSH
42530: LD_INT 7
42532: PLUS
42533: PUSH
42534: LD_VAR 0 15
42538: LESS
42539: IFFALSE 42568
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42541: LD_ADDR_VAR 0 18
42545: PUSH
42546: LD_INT 7
42548: PUSH
42549: LD_INT 28
42551: PUSH
42552: LD_INT 45
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: PUSH
42560: LD_VAR 0 12
42564: ARRAY
42565: ST_TO_ADDR
// break ;
42566: GO 42570
// end ; end ; end ;
42568: GO 42399
42570: POP
42571: POP
// end ; if not weapon then
42572: LD_VAR 0 18
42576: NOT
42577: IFFALSE 42637
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42579: LD_ADDR_VAR 0 5
42583: PUSH
42584: LD_VAR 0 5
42588: PUSH
42589: LD_INT 11
42591: PUSH
42592: LD_INT 30
42594: PUSH
42595: LD_INT 49
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: LIST
42602: DIFF
42603: ST_TO_ADDR
// if not list then
42604: LD_VAR 0 5
42608: NOT
42609: IFFALSE 42613
// exit ;
42611: GO 42755
// weapon := list [ rand ( 1 , list ) ] ;
42613: LD_ADDR_VAR 0 18
42617: PUSH
42618: LD_VAR 0 5
42622: PUSH
42623: LD_INT 1
42625: PPUSH
42626: LD_VAR 0 5
42630: PPUSH
42631: CALL_OW 12
42635: ARRAY
42636: ST_TO_ADDR
// end ; if weapon then
42637: LD_VAR 0 18
42641: IFFALSE 42755
// begin tmp := CostOfWeapon ( weapon ) ;
42643: LD_ADDR_VAR 0 14
42647: PUSH
42648: LD_VAR 0 18
42652: PPUSH
42653: CALL_OW 451
42657: ST_TO_ADDR
// j := GetBase ( tower ) ;
42658: LD_ADDR_VAR 0 9
42662: PUSH
42663: LD_VAR 0 1
42667: PPUSH
42668: CALL_OW 274
42672: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42673: LD_VAR 0 9
42677: PPUSH
42678: LD_INT 1
42680: PPUSH
42681: CALL_OW 275
42685: PUSH
42686: LD_VAR 0 14
42690: PUSH
42691: LD_INT 1
42693: ARRAY
42694: GREATEREQUAL
42695: PUSH
42696: LD_VAR 0 9
42700: PPUSH
42701: LD_INT 2
42703: PPUSH
42704: CALL_OW 275
42708: PUSH
42709: LD_VAR 0 14
42713: PUSH
42714: LD_INT 2
42716: ARRAY
42717: GREATEREQUAL
42718: AND
42719: PUSH
42720: LD_VAR 0 9
42724: PPUSH
42725: LD_INT 3
42727: PPUSH
42728: CALL_OW 275
42732: PUSH
42733: LD_VAR 0 14
42737: PUSH
42738: LD_INT 3
42740: ARRAY
42741: GREATEREQUAL
42742: AND
42743: IFFALSE 42755
// result := weapon ;
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: LD_VAR 0 18
42754: ST_TO_ADDR
// end ; end ;
42755: LD_VAR 0 3
42759: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42760: LD_INT 0
42762: PPUSH
42763: PPUSH
// result := true ;
42764: LD_ADDR_VAR 0 3
42768: PUSH
42769: LD_INT 1
42771: ST_TO_ADDR
// if array1 = array2 then
42772: LD_VAR 0 1
42776: PUSH
42777: LD_VAR 0 2
42781: EQUAL
42782: IFFALSE 42842
// begin for i = 1 to array1 do
42784: LD_ADDR_VAR 0 4
42788: PUSH
42789: DOUBLE
42790: LD_INT 1
42792: DEC
42793: ST_TO_ADDR
42794: LD_VAR 0 1
42798: PUSH
42799: FOR_TO
42800: IFFALSE 42838
// if array1 [ i ] <> array2 [ i ] then
42802: LD_VAR 0 1
42806: PUSH
42807: LD_VAR 0 4
42811: ARRAY
42812: PUSH
42813: LD_VAR 0 2
42817: PUSH
42818: LD_VAR 0 4
42822: ARRAY
42823: NONEQUAL
42824: IFFALSE 42836
// begin result := false ;
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: LD_INT 0
42833: ST_TO_ADDR
// break ;
42834: GO 42838
// end ;
42836: GO 42799
42838: POP
42839: POP
// end else
42840: GO 42850
// result := false ;
42842: LD_ADDR_VAR 0 3
42846: PUSH
42847: LD_INT 0
42849: ST_TO_ADDR
// end ;
42850: LD_VAR 0 3
42854: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42855: LD_INT 0
42857: PPUSH
42858: PPUSH
// if not array1 or not array2 then
42859: LD_VAR 0 1
42863: NOT
42864: PUSH
42865: LD_VAR 0 2
42869: NOT
42870: OR
42871: IFFALSE 42875
// exit ;
42873: GO 42939
// result := true ;
42875: LD_ADDR_VAR 0 3
42879: PUSH
42880: LD_INT 1
42882: ST_TO_ADDR
// for i = 1 to array1 do
42883: LD_ADDR_VAR 0 4
42887: PUSH
42888: DOUBLE
42889: LD_INT 1
42891: DEC
42892: ST_TO_ADDR
42893: LD_VAR 0 1
42897: PUSH
42898: FOR_TO
42899: IFFALSE 42937
// if array1 [ i ] <> array2 [ i ] then
42901: LD_VAR 0 1
42905: PUSH
42906: LD_VAR 0 4
42910: ARRAY
42911: PUSH
42912: LD_VAR 0 2
42916: PUSH
42917: LD_VAR 0 4
42921: ARRAY
42922: NONEQUAL
42923: IFFALSE 42935
// begin result := false ;
42925: LD_ADDR_VAR 0 3
42929: PUSH
42930: LD_INT 0
42932: ST_TO_ADDR
// break ;
42933: GO 42937
// end ;
42935: GO 42898
42937: POP
42938: POP
// end ;
42939: LD_VAR 0 3
42943: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42944: LD_INT 0
42946: PPUSH
42947: PPUSH
42948: PPUSH
// pom := GetBase ( fac ) ;
42949: LD_ADDR_VAR 0 5
42953: PUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 274
42963: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42964: LD_ADDR_VAR 0 4
42968: PUSH
42969: LD_VAR 0 2
42973: PUSH
42974: LD_INT 1
42976: ARRAY
42977: PPUSH
42978: LD_VAR 0 2
42982: PUSH
42983: LD_INT 2
42985: ARRAY
42986: PPUSH
42987: LD_VAR 0 2
42991: PUSH
42992: LD_INT 3
42994: ARRAY
42995: PPUSH
42996: LD_VAR 0 2
43000: PUSH
43001: LD_INT 4
43003: ARRAY
43004: PPUSH
43005: CALL_OW 449
43009: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43010: LD_ADDR_VAR 0 3
43014: PUSH
43015: LD_VAR 0 5
43019: PPUSH
43020: LD_INT 1
43022: PPUSH
43023: CALL_OW 275
43027: PUSH
43028: LD_VAR 0 4
43032: PUSH
43033: LD_INT 1
43035: ARRAY
43036: GREATEREQUAL
43037: PUSH
43038: LD_VAR 0 5
43042: PPUSH
43043: LD_INT 2
43045: PPUSH
43046: CALL_OW 275
43050: PUSH
43051: LD_VAR 0 4
43055: PUSH
43056: LD_INT 2
43058: ARRAY
43059: GREATEREQUAL
43060: AND
43061: PUSH
43062: LD_VAR 0 5
43066: PPUSH
43067: LD_INT 3
43069: PPUSH
43070: CALL_OW 275
43074: PUSH
43075: LD_VAR 0 4
43079: PUSH
43080: LD_INT 3
43082: ARRAY
43083: GREATEREQUAL
43084: AND
43085: ST_TO_ADDR
// end ;
43086: LD_VAR 0 3
43090: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43091: LD_INT 0
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
// pom := GetBase ( building ) ;
43097: LD_ADDR_VAR 0 3
43101: PUSH
43102: LD_VAR 0 1
43106: PPUSH
43107: CALL_OW 274
43111: ST_TO_ADDR
// if not pom then
43112: LD_VAR 0 3
43116: NOT
43117: IFFALSE 43121
// exit ;
43119: GO 43291
// btype := GetBType ( building ) ;
43121: LD_ADDR_VAR 0 5
43125: PUSH
43126: LD_VAR 0 1
43130: PPUSH
43131: CALL_OW 266
43135: ST_TO_ADDR
// if btype = b_armoury then
43136: LD_VAR 0 5
43140: PUSH
43141: LD_INT 4
43143: EQUAL
43144: IFFALSE 43154
// btype := b_barracks ;
43146: LD_ADDR_VAR 0 5
43150: PUSH
43151: LD_INT 5
43153: ST_TO_ADDR
// if btype = b_depot then
43154: LD_VAR 0 5
43158: PUSH
43159: LD_INT 0
43161: EQUAL
43162: IFFALSE 43172
// btype := b_warehouse ;
43164: LD_ADDR_VAR 0 5
43168: PUSH
43169: LD_INT 1
43171: ST_TO_ADDR
// if btype = b_workshop then
43172: LD_VAR 0 5
43176: PUSH
43177: LD_INT 2
43179: EQUAL
43180: IFFALSE 43190
// btype := b_factory ;
43182: LD_ADDR_VAR 0 5
43186: PUSH
43187: LD_INT 3
43189: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43190: LD_ADDR_VAR 0 4
43194: PUSH
43195: LD_VAR 0 5
43199: PPUSH
43200: LD_VAR 0 1
43204: PPUSH
43205: CALL_OW 248
43209: PPUSH
43210: CALL_OW 450
43214: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43215: LD_ADDR_VAR 0 2
43219: PUSH
43220: LD_VAR 0 3
43224: PPUSH
43225: LD_INT 1
43227: PPUSH
43228: CALL_OW 275
43232: PUSH
43233: LD_VAR 0 4
43237: PUSH
43238: LD_INT 1
43240: ARRAY
43241: GREATEREQUAL
43242: PUSH
43243: LD_VAR 0 3
43247: PPUSH
43248: LD_INT 2
43250: PPUSH
43251: CALL_OW 275
43255: PUSH
43256: LD_VAR 0 4
43260: PUSH
43261: LD_INT 2
43263: ARRAY
43264: GREATEREQUAL
43265: AND
43266: PUSH
43267: LD_VAR 0 3
43271: PPUSH
43272: LD_INT 3
43274: PPUSH
43275: CALL_OW 275
43279: PUSH
43280: LD_VAR 0 4
43284: PUSH
43285: LD_INT 3
43287: ARRAY
43288: GREATEREQUAL
43289: AND
43290: ST_TO_ADDR
// end ;
43291: LD_VAR 0 2
43295: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43296: LD_INT 0
43298: PPUSH
43299: PPUSH
43300: PPUSH
// pom := GetBase ( building ) ;
43301: LD_ADDR_VAR 0 4
43305: PUSH
43306: LD_VAR 0 1
43310: PPUSH
43311: CALL_OW 274
43315: ST_TO_ADDR
// if not pom then
43316: LD_VAR 0 4
43320: NOT
43321: IFFALSE 43325
// exit ;
43323: GO 43426
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43325: LD_ADDR_VAR 0 5
43329: PUSH
43330: LD_VAR 0 2
43334: PPUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: CALL_OW 248
43344: PPUSH
43345: CALL_OW 450
43349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_VAR 0 4
43359: PPUSH
43360: LD_INT 1
43362: PPUSH
43363: CALL_OW 275
43367: PUSH
43368: LD_VAR 0 5
43372: PUSH
43373: LD_INT 1
43375: ARRAY
43376: GREATEREQUAL
43377: PUSH
43378: LD_VAR 0 4
43382: PPUSH
43383: LD_INT 2
43385: PPUSH
43386: CALL_OW 275
43390: PUSH
43391: LD_VAR 0 5
43395: PUSH
43396: LD_INT 2
43398: ARRAY
43399: GREATEREQUAL
43400: AND
43401: PUSH
43402: LD_VAR 0 4
43406: PPUSH
43407: LD_INT 3
43409: PPUSH
43410: CALL_OW 275
43414: PUSH
43415: LD_VAR 0 5
43419: PUSH
43420: LD_INT 3
43422: ARRAY
43423: GREATEREQUAL
43424: AND
43425: ST_TO_ADDR
// end ;
43426: LD_VAR 0 3
43430: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43431: LD_INT 0
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
43437: PPUSH
43438: PPUSH
43439: PPUSH
43440: PPUSH
43441: PPUSH
43442: PPUSH
43443: PPUSH
// result := false ;
43444: LD_ADDR_VAR 0 8
43448: PUSH
43449: LD_INT 0
43451: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43452: LD_VAR 0 5
43456: NOT
43457: PUSH
43458: LD_VAR 0 1
43462: NOT
43463: OR
43464: PUSH
43465: LD_VAR 0 2
43469: NOT
43470: OR
43471: PUSH
43472: LD_VAR 0 3
43476: NOT
43477: OR
43478: IFFALSE 43482
// exit ;
43480: GO 44296
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43482: LD_ADDR_VAR 0 14
43486: PUSH
43487: LD_VAR 0 1
43491: PPUSH
43492: LD_VAR 0 2
43496: PPUSH
43497: LD_VAR 0 3
43501: PPUSH
43502: LD_VAR 0 4
43506: PPUSH
43507: LD_VAR 0 5
43511: PUSH
43512: LD_INT 1
43514: ARRAY
43515: PPUSH
43516: CALL_OW 248
43520: PPUSH
43521: LD_INT 0
43523: PPUSH
43524: CALL 45549 0 6
43528: ST_TO_ADDR
// if not hexes then
43529: LD_VAR 0 14
43533: NOT
43534: IFFALSE 43538
// exit ;
43536: GO 44296
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43538: LD_ADDR_VAR 0 17
43542: PUSH
43543: LD_VAR 0 5
43547: PPUSH
43548: LD_INT 22
43550: PUSH
43551: LD_VAR 0 13
43555: PPUSH
43556: CALL_OW 255
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 30
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 30
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PPUSH
43597: CALL_OW 72
43601: ST_TO_ADDR
// for i = 1 to hexes do
43602: LD_ADDR_VAR 0 9
43606: PUSH
43607: DOUBLE
43608: LD_INT 1
43610: DEC
43611: ST_TO_ADDR
43612: LD_VAR 0 14
43616: PUSH
43617: FOR_TO
43618: IFFALSE 44294
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43620: LD_ADDR_VAR 0 13
43624: PUSH
43625: LD_VAR 0 14
43629: PUSH
43630: LD_VAR 0 9
43634: ARRAY
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PPUSH
43640: LD_VAR 0 14
43644: PUSH
43645: LD_VAR 0 9
43649: ARRAY
43650: PUSH
43651: LD_INT 2
43653: ARRAY
43654: PPUSH
43655: CALL_OW 428
43659: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43660: LD_VAR 0 14
43664: PUSH
43665: LD_VAR 0 9
43669: ARRAY
43670: PUSH
43671: LD_INT 1
43673: ARRAY
43674: PPUSH
43675: LD_VAR 0 14
43679: PUSH
43680: LD_VAR 0 9
43684: ARRAY
43685: PUSH
43686: LD_INT 2
43688: ARRAY
43689: PPUSH
43690: CALL_OW 351
43694: PUSH
43695: LD_VAR 0 14
43699: PUSH
43700: LD_VAR 0 9
43704: ARRAY
43705: PUSH
43706: LD_INT 1
43708: ARRAY
43709: PPUSH
43710: LD_VAR 0 14
43714: PUSH
43715: LD_VAR 0 9
43719: ARRAY
43720: PUSH
43721: LD_INT 2
43723: ARRAY
43724: PPUSH
43725: CALL_OW 488
43729: NOT
43730: OR
43731: PUSH
43732: LD_VAR 0 13
43736: PPUSH
43737: CALL_OW 247
43741: PUSH
43742: LD_INT 3
43744: EQUAL
43745: OR
43746: IFFALSE 43752
// exit ;
43748: POP
43749: POP
43750: GO 44296
// if not tmp then
43752: LD_VAR 0 13
43756: NOT
43757: IFFALSE 43761
// continue ;
43759: GO 43617
// result := true ;
43761: LD_ADDR_VAR 0 8
43765: PUSH
43766: LD_INT 1
43768: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43769: LD_VAR 0 6
43773: PUSH
43774: LD_VAR 0 13
43778: PPUSH
43779: CALL_OW 247
43783: PUSH
43784: LD_INT 2
43786: EQUAL
43787: AND
43788: PUSH
43789: LD_VAR 0 13
43793: PPUSH
43794: CALL_OW 263
43798: PUSH
43799: LD_INT 1
43801: EQUAL
43802: AND
43803: IFFALSE 43967
// begin if IsDrivenBy ( tmp ) then
43805: LD_VAR 0 13
43809: PPUSH
43810: CALL_OW 311
43814: IFFALSE 43818
// continue ;
43816: GO 43617
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43818: LD_VAR 0 6
43822: PPUSH
43823: LD_INT 3
43825: PUSH
43826: LD_INT 60
43828: PUSH
43829: EMPTY
43830: LIST
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 3
43838: PUSH
43839: LD_INT 55
43841: PUSH
43842: EMPTY
43843: LIST
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PPUSH
43853: CALL_OW 72
43857: IFFALSE 43965
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43859: LD_ADDR_VAR 0 18
43863: PUSH
43864: LD_VAR 0 6
43868: PPUSH
43869: LD_INT 3
43871: PUSH
43872: LD_INT 60
43874: PUSH
43875: EMPTY
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: LD_INT 55
43887: PUSH
43888: EMPTY
43889: LIST
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PPUSH
43899: CALL_OW 72
43903: PUSH
43904: LD_INT 1
43906: ARRAY
43907: ST_TO_ADDR
// if IsInUnit ( driver ) then
43908: LD_VAR 0 18
43912: PPUSH
43913: CALL_OW 310
43917: IFFALSE 43928
// ComExit ( driver ) ;
43919: LD_VAR 0 18
43923: PPUSH
43924: CALL 69341 0 1
// AddComEnterUnit ( driver , tmp ) ;
43928: LD_VAR 0 18
43932: PPUSH
43933: LD_VAR 0 13
43937: PPUSH
43938: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43942: LD_VAR 0 18
43946: PPUSH
43947: LD_VAR 0 7
43951: PPUSH
43952: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43956: LD_VAR 0 18
43960: PPUSH
43961: CALL_OW 181
// end ; continue ;
43965: GO 43617
// end ; if not cleaners or not tmp in cleaners then
43967: LD_VAR 0 6
43971: NOT
43972: PUSH
43973: LD_VAR 0 13
43977: PUSH
43978: LD_VAR 0 6
43982: IN
43983: NOT
43984: OR
43985: IFFALSE 44292
// begin if dep then
43987: LD_VAR 0 17
43991: IFFALSE 44127
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43993: LD_ADDR_VAR 0 16
43997: PUSH
43998: LD_VAR 0 17
44002: PUSH
44003: LD_INT 1
44005: ARRAY
44006: PPUSH
44007: CALL_OW 250
44011: PPUSH
44012: LD_VAR 0 17
44016: PUSH
44017: LD_INT 1
44019: ARRAY
44020: PPUSH
44021: CALL_OW 254
44025: PPUSH
44026: LD_INT 5
44028: PPUSH
44029: CALL_OW 272
44033: PUSH
44034: LD_VAR 0 17
44038: PUSH
44039: LD_INT 1
44041: ARRAY
44042: PPUSH
44043: CALL_OW 251
44047: PPUSH
44048: LD_VAR 0 17
44052: PUSH
44053: LD_INT 1
44055: ARRAY
44056: PPUSH
44057: CALL_OW 254
44061: PPUSH
44062: LD_INT 5
44064: PPUSH
44065: CALL_OW 273
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44074: LD_VAR 0 16
44078: PUSH
44079: LD_INT 1
44081: ARRAY
44082: PPUSH
44083: LD_VAR 0 16
44087: PUSH
44088: LD_INT 2
44090: ARRAY
44091: PPUSH
44092: CALL_OW 488
44096: IFFALSE 44127
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44098: LD_VAR 0 13
44102: PPUSH
44103: LD_VAR 0 16
44107: PUSH
44108: LD_INT 1
44110: ARRAY
44111: PPUSH
44112: LD_VAR 0 16
44116: PUSH
44117: LD_INT 2
44119: ARRAY
44120: PPUSH
44121: CALL_OW 111
// continue ;
44125: GO 43617
// end ; end ; r := GetDir ( tmp ) ;
44127: LD_ADDR_VAR 0 15
44131: PUSH
44132: LD_VAR 0 13
44136: PPUSH
44137: CALL_OW 254
44141: ST_TO_ADDR
// if r = 5 then
44142: LD_VAR 0 15
44146: PUSH
44147: LD_INT 5
44149: EQUAL
44150: IFFALSE 44160
// r := 0 ;
44152: LD_ADDR_VAR 0 15
44156: PUSH
44157: LD_INT 0
44159: ST_TO_ADDR
// for j = r to 5 do
44160: LD_ADDR_VAR 0 10
44164: PUSH
44165: DOUBLE
44166: LD_VAR 0 15
44170: DEC
44171: ST_TO_ADDR
44172: LD_INT 5
44174: PUSH
44175: FOR_TO
44176: IFFALSE 44290
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44178: LD_ADDR_VAR 0 11
44182: PUSH
44183: LD_VAR 0 13
44187: PPUSH
44188: CALL_OW 250
44192: PPUSH
44193: LD_VAR 0 10
44197: PPUSH
44198: LD_INT 2
44200: PPUSH
44201: CALL_OW 272
44205: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44206: LD_ADDR_VAR 0 12
44210: PUSH
44211: LD_VAR 0 13
44215: PPUSH
44216: CALL_OW 251
44220: PPUSH
44221: LD_VAR 0 10
44225: PPUSH
44226: LD_INT 2
44228: PPUSH
44229: CALL_OW 273
44233: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44234: LD_VAR 0 11
44238: PPUSH
44239: LD_VAR 0 12
44243: PPUSH
44244: CALL_OW 488
44248: PUSH
44249: LD_VAR 0 11
44253: PPUSH
44254: LD_VAR 0 12
44258: PPUSH
44259: CALL_OW 428
44263: NOT
44264: AND
44265: IFFALSE 44288
// begin ComMoveXY ( tmp , _x , _y ) ;
44267: LD_VAR 0 13
44271: PPUSH
44272: LD_VAR 0 11
44276: PPUSH
44277: LD_VAR 0 12
44281: PPUSH
44282: CALL_OW 111
// break ;
44286: GO 44290
// end ; end ;
44288: GO 44175
44290: POP
44291: POP
// end ; end ;
44292: GO 43617
44294: POP
44295: POP
// end ;
44296: LD_VAR 0 8
44300: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44301: LD_INT 0
44303: PPUSH
// result := true ;
44304: LD_ADDR_VAR 0 3
44308: PUSH
44309: LD_INT 1
44311: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44312: LD_VAR 0 2
44316: PUSH
44317: LD_INT 24
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44331
44323: LD_INT 33
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44331
44329: GO 44356
44331: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44332: LD_ADDR_VAR 0 3
44336: PUSH
44337: LD_INT 32
44339: PPUSH
44340: LD_VAR 0 1
44344: PPUSH
44345: CALL_OW 321
44349: PUSH
44350: LD_INT 2
44352: EQUAL
44353: ST_TO_ADDR
44354: GO 44672
44356: LD_INT 20
44358: DOUBLE
44359: EQUAL
44360: IFTRUE 44364
44362: GO 44389
44364: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44365: LD_ADDR_VAR 0 3
44369: PUSH
44370: LD_INT 6
44372: PPUSH
44373: LD_VAR 0 1
44377: PPUSH
44378: CALL_OW 321
44382: PUSH
44383: LD_INT 2
44385: EQUAL
44386: ST_TO_ADDR
44387: GO 44672
44389: LD_INT 22
44391: DOUBLE
44392: EQUAL
44393: IFTRUE 44403
44395: LD_INT 36
44397: DOUBLE
44398: EQUAL
44399: IFTRUE 44403
44401: GO 44428
44403: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44404: LD_ADDR_VAR 0 3
44408: PUSH
44409: LD_INT 15
44411: PPUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 321
44421: PUSH
44422: LD_INT 2
44424: EQUAL
44425: ST_TO_ADDR
44426: GO 44672
44428: LD_INT 30
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44436
44434: GO 44461
44436: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44437: LD_ADDR_VAR 0 3
44441: PUSH
44442: LD_INT 20
44444: PPUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: CALL_OW 321
44454: PUSH
44455: LD_INT 2
44457: EQUAL
44458: ST_TO_ADDR
44459: GO 44672
44461: LD_INT 28
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44475
44467: LD_INT 21
44469: DOUBLE
44470: EQUAL
44471: IFTRUE 44475
44473: GO 44500
44475: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44476: LD_ADDR_VAR 0 3
44480: PUSH
44481: LD_INT 21
44483: PPUSH
44484: LD_VAR 0 1
44488: PPUSH
44489: CALL_OW 321
44493: PUSH
44494: LD_INT 2
44496: EQUAL
44497: ST_TO_ADDR
44498: GO 44672
44500: LD_INT 16
44502: DOUBLE
44503: EQUAL
44504: IFTRUE 44508
44506: GO 44533
44508: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44509: LD_ADDR_VAR 0 3
44513: PUSH
44514: LD_INT 84
44516: PPUSH
44517: LD_VAR 0 1
44521: PPUSH
44522: CALL_OW 321
44526: PUSH
44527: LD_INT 2
44529: EQUAL
44530: ST_TO_ADDR
44531: GO 44672
44533: LD_INT 19
44535: DOUBLE
44536: EQUAL
44537: IFTRUE 44547
44539: LD_INT 23
44541: DOUBLE
44542: EQUAL
44543: IFTRUE 44547
44545: GO 44572
44547: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44548: LD_ADDR_VAR 0 3
44552: PUSH
44553: LD_INT 83
44555: PPUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 321
44565: PUSH
44566: LD_INT 2
44568: EQUAL
44569: ST_TO_ADDR
44570: GO 44672
44572: LD_INT 17
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44580
44578: GO 44605
44580: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_INT 39
44588: PPUSH
44589: LD_VAR 0 1
44593: PPUSH
44594: CALL_OW 321
44598: PUSH
44599: LD_INT 2
44601: EQUAL
44602: ST_TO_ADDR
44603: GO 44672
44605: LD_INT 18
44607: DOUBLE
44608: EQUAL
44609: IFTRUE 44613
44611: GO 44638
44613: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44614: LD_ADDR_VAR 0 3
44618: PUSH
44619: LD_INT 40
44621: PPUSH
44622: LD_VAR 0 1
44626: PPUSH
44627: CALL_OW 321
44631: PUSH
44632: LD_INT 2
44634: EQUAL
44635: ST_TO_ADDR
44636: GO 44672
44638: LD_INT 27
44640: DOUBLE
44641: EQUAL
44642: IFTRUE 44646
44644: GO 44671
44646: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44647: LD_ADDR_VAR 0 3
44651: PUSH
44652: LD_INT 35
44654: PPUSH
44655: LD_VAR 0 1
44659: PPUSH
44660: CALL_OW 321
44664: PUSH
44665: LD_INT 2
44667: EQUAL
44668: ST_TO_ADDR
44669: GO 44672
44671: POP
// end ;
44672: LD_VAR 0 3
44676: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44677: LD_INT 0
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
// result := false ;
44690: LD_ADDR_VAR 0 6
44694: PUSH
44695: LD_INT 0
44697: ST_TO_ADDR
// if btype = b_depot then
44698: LD_VAR 0 2
44702: PUSH
44703: LD_INT 0
44705: EQUAL
44706: IFFALSE 44718
// begin result := true ;
44708: LD_ADDR_VAR 0 6
44712: PUSH
44713: LD_INT 1
44715: ST_TO_ADDR
// exit ;
44716: GO 45544
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44718: LD_VAR 0 1
44722: NOT
44723: PUSH
44724: LD_VAR 0 1
44728: PPUSH
44729: CALL_OW 266
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: IN
44744: NOT
44745: OR
44746: PUSH
44747: LD_VAR 0 2
44751: NOT
44752: OR
44753: PUSH
44754: LD_VAR 0 5
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 3
44770: PUSH
44771: LD_INT 4
44773: PUSH
44774: LD_INT 5
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: IN
44785: NOT
44786: OR
44787: PUSH
44788: LD_VAR 0 3
44792: PPUSH
44793: LD_VAR 0 4
44797: PPUSH
44798: CALL_OW 488
44802: NOT
44803: OR
44804: IFFALSE 44808
// exit ;
44806: GO 45544
// side := GetSide ( depot ) ;
44808: LD_ADDR_VAR 0 9
44812: PUSH
44813: LD_VAR 0 1
44817: PPUSH
44818: CALL_OW 255
44822: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44823: LD_VAR 0 9
44827: PPUSH
44828: LD_VAR 0 2
44832: PPUSH
44833: CALL 44301 0 2
44837: NOT
44838: IFFALSE 44842
// exit ;
44840: GO 45544
// pom := GetBase ( depot ) ;
44842: LD_ADDR_VAR 0 10
44846: PUSH
44847: LD_VAR 0 1
44851: PPUSH
44852: CALL_OW 274
44856: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44857: LD_ADDR_VAR 0 11
44861: PUSH
44862: LD_VAR 0 2
44866: PPUSH
44867: LD_VAR 0 1
44871: PPUSH
44872: CALL_OW 248
44876: PPUSH
44877: CALL_OW 450
44881: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44882: LD_VAR 0 10
44886: PPUSH
44887: LD_INT 1
44889: PPUSH
44890: CALL_OW 275
44894: PUSH
44895: LD_VAR 0 11
44899: PUSH
44900: LD_INT 1
44902: ARRAY
44903: GREATEREQUAL
44904: PUSH
44905: LD_VAR 0 10
44909: PPUSH
44910: LD_INT 2
44912: PPUSH
44913: CALL_OW 275
44917: PUSH
44918: LD_VAR 0 11
44922: PUSH
44923: LD_INT 2
44925: ARRAY
44926: GREATEREQUAL
44927: AND
44928: PUSH
44929: LD_VAR 0 10
44933: PPUSH
44934: LD_INT 3
44936: PPUSH
44937: CALL_OW 275
44941: PUSH
44942: LD_VAR 0 11
44946: PUSH
44947: LD_INT 3
44949: ARRAY
44950: GREATEREQUAL
44951: AND
44952: NOT
44953: IFFALSE 44957
// exit ;
44955: GO 45544
// if GetBType ( depot ) = b_depot then
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL_OW 266
44966: PUSH
44967: LD_INT 0
44969: EQUAL
44970: IFFALSE 44982
// dist := 28 else
44972: LD_ADDR_VAR 0 14
44976: PUSH
44977: LD_INT 28
44979: ST_TO_ADDR
44980: GO 44990
// dist := 36 ;
44982: LD_ADDR_VAR 0 14
44986: PUSH
44987: LD_INT 36
44989: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44990: LD_VAR 0 1
44994: PPUSH
44995: LD_VAR 0 3
44999: PPUSH
45000: LD_VAR 0 4
45004: PPUSH
45005: CALL_OW 297
45009: PUSH
45010: LD_VAR 0 14
45014: GREATER
45015: IFFALSE 45019
// exit ;
45017: GO 45544
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45019: LD_ADDR_VAR 0 12
45023: PUSH
45024: LD_VAR 0 2
45028: PPUSH
45029: LD_VAR 0 3
45033: PPUSH
45034: LD_VAR 0 4
45038: PPUSH
45039: LD_VAR 0 5
45043: PPUSH
45044: LD_VAR 0 1
45048: PPUSH
45049: CALL_OW 248
45053: PPUSH
45054: LD_INT 0
45056: PPUSH
45057: CALL 45549 0 6
45061: ST_TO_ADDR
// if not hexes then
45062: LD_VAR 0 12
45066: NOT
45067: IFFALSE 45071
// exit ;
45069: GO 45544
// hex := GetHexInfo ( x , y ) ;
45071: LD_ADDR_VAR 0 15
45075: PUSH
45076: LD_VAR 0 3
45080: PPUSH
45081: LD_VAR 0 4
45085: PPUSH
45086: CALL_OW 546
45090: ST_TO_ADDR
// if hex [ 1 ] then
45091: LD_VAR 0 15
45095: PUSH
45096: LD_INT 1
45098: ARRAY
45099: IFFALSE 45103
// exit ;
45101: GO 45544
// height := hex [ 2 ] ;
45103: LD_ADDR_VAR 0 13
45107: PUSH
45108: LD_VAR 0 15
45112: PUSH
45113: LD_INT 2
45115: ARRAY
45116: ST_TO_ADDR
// for i = 1 to hexes do
45117: LD_ADDR_VAR 0 7
45121: PUSH
45122: DOUBLE
45123: LD_INT 1
45125: DEC
45126: ST_TO_ADDR
45127: LD_VAR 0 12
45131: PUSH
45132: FOR_TO
45133: IFFALSE 45463
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45135: LD_VAR 0 12
45139: PUSH
45140: LD_VAR 0 7
45144: ARRAY
45145: PUSH
45146: LD_INT 1
45148: ARRAY
45149: PPUSH
45150: LD_VAR 0 12
45154: PUSH
45155: LD_VAR 0 7
45159: ARRAY
45160: PUSH
45161: LD_INT 2
45163: ARRAY
45164: PPUSH
45165: CALL_OW 488
45169: NOT
45170: PUSH
45171: LD_VAR 0 12
45175: PUSH
45176: LD_VAR 0 7
45180: ARRAY
45181: PUSH
45182: LD_INT 1
45184: ARRAY
45185: PPUSH
45186: LD_VAR 0 12
45190: PUSH
45191: LD_VAR 0 7
45195: ARRAY
45196: PUSH
45197: LD_INT 2
45199: ARRAY
45200: PPUSH
45201: CALL_OW 428
45205: PUSH
45206: LD_INT 0
45208: GREATER
45209: OR
45210: PUSH
45211: LD_VAR 0 12
45215: PUSH
45216: LD_VAR 0 7
45220: ARRAY
45221: PUSH
45222: LD_INT 1
45224: ARRAY
45225: PPUSH
45226: LD_VAR 0 12
45230: PUSH
45231: LD_VAR 0 7
45235: ARRAY
45236: PUSH
45237: LD_INT 2
45239: ARRAY
45240: PPUSH
45241: CALL_OW 351
45245: OR
45246: IFFALSE 45252
// exit ;
45248: POP
45249: POP
45250: GO 45544
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45252: LD_ADDR_VAR 0 8
45256: PUSH
45257: LD_VAR 0 12
45261: PUSH
45262: LD_VAR 0 7
45266: ARRAY
45267: PUSH
45268: LD_INT 1
45270: ARRAY
45271: PPUSH
45272: LD_VAR 0 12
45276: PUSH
45277: LD_VAR 0 7
45281: ARRAY
45282: PUSH
45283: LD_INT 2
45285: ARRAY
45286: PPUSH
45287: CALL_OW 546
45291: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45292: LD_VAR 0 8
45296: PUSH
45297: LD_INT 1
45299: ARRAY
45300: PUSH
45301: LD_VAR 0 8
45305: PUSH
45306: LD_INT 2
45308: ARRAY
45309: PUSH
45310: LD_VAR 0 13
45314: PUSH
45315: LD_INT 2
45317: PLUS
45318: GREATER
45319: OR
45320: PUSH
45321: LD_VAR 0 8
45325: PUSH
45326: LD_INT 2
45328: ARRAY
45329: PUSH
45330: LD_VAR 0 13
45334: PUSH
45335: LD_INT 2
45337: MINUS
45338: LESS
45339: OR
45340: PUSH
45341: LD_VAR 0 8
45345: PUSH
45346: LD_INT 3
45348: ARRAY
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 8
45355: PUSH
45356: LD_INT 9
45358: PUSH
45359: LD_INT 10
45361: PUSH
45362: LD_INT 11
45364: PUSH
45365: LD_INT 12
45367: PUSH
45368: LD_INT 13
45370: PUSH
45371: LD_INT 16
45373: PUSH
45374: LD_INT 17
45376: PUSH
45377: LD_INT 18
45379: PUSH
45380: LD_INT 19
45382: PUSH
45383: LD_INT 20
45385: PUSH
45386: LD_INT 21
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: IN
45404: NOT
45405: OR
45406: PUSH
45407: LD_VAR 0 8
45411: PUSH
45412: LD_INT 5
45414: ARRAY
45415: NOT
45416: OR
45417: PUSH
45418: LD_VAR 0 8
45422: PUSH
45423: LD_INT 6
45425: ARRAY
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 7
45435: PUSH
45436: LD_INT 9
45438: PUSH
45439: LD_INT 10
45441: PUSH
45442: LD_INT 11
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: IN
45453: NOT
45454: OR
45455: IFFALSE 45461
// exit ;
45457: POP
45458: POP
45459: GO 45544
// end ;
45461: GO 45132
45463: POP
45464: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45465: LD_VAR 0 9
45469: PPUSH
45470: LD_VAR 0 3
45474: PPUSH
45475: LD_VAR 0 4
45479: PPUSH
45480: LD_INT 20
45482: PPUSH
45483: CALL 37467 0 4
45487: PUSH
45488: LD_INT 4
45490: ARRAY
45491: IFFALSE 45495
// exit ;
45493: GO 45544
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45495: LD_VAR 0 2
45499: PUSH
45500: LD_INT 29
45502: PUSH
45503: LD_INT 30
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: IN
45510: PUSH
45511: LD_VAR 0 3
45515: PPUSH
45516: LD_VAR 0 4
45520: PPUSH
45521: LD_VAR 0 9
45525: PPUSH
45526: CALL_OW 440
45530: NOT
45531: AND
45532: IFFALSE 45536
// exit ;
45534: GO 45544
// result := true ;
45536: LD_ADDR_VAR 0 6
45540: PUSH
45541: LD_INT 1
45543: ST_TO_ADDR
// end ;
45544: LD_VAR 0 6
45548: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45549: LD_INT 0
45551: PPUSH
45552: PPUSH
45553: PPUSH
45554: PPUSH
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
45559: PPUSH
45560: PPUSH
45561: PPUSH
45562: PPUSH
45563: PPUSH
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
45578: PPUSH
45579: PPUSH
45580: PPUSH
45581: PPUSH
45582: PPUSH
45583: PPUSH
45584: PPUSH
45585: PPUSH
45586: PPUSH
45587: PPUSH
45588: PPUSH
45589: PPUSH
45590: PPUSH
45591: PPUSH
45592: PPUSH
45593: PPUSH
45594: PPUSH
45595: PPUSH
45596: PPUSH
45597: PPUSH
45598: PPUSH
45599: PPUSH
45600: PPUSH
45601: PPUSH
45602: PPUSH
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
45608: PPUSH
// result = [ ] ;
45609: LD_ADDR_VAR 0 7
45613: PUSH
45614: EMPTY
45615: ST_TO_ADDR
// temp_list = [ ] ;
45616: LD_ADDR_VAR 0 9
45620: PUSH
45621: EMPTY
45622: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45623: LD_VAR 0 4
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: LD_INT 3
45639: PUSH
45640: LD_INT 4
45642: PUSH
45643: LD_INT 5
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: IN
45654: NOT
45655: PUSH
45656: LD_VAR 0 1
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: IN
45671: PUSH
45672: LD_VAR 0 5
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 3
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: IN
45691: NOT
45692: AND
45693: OR
45694: IFFALSE 45698
// exit ;
45696: GO 64089
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45698: LD_VAR 0 1
45702: PUSH
45703: LD_INT 6
45705: PUSH
45706: LD_INT 7
45708: PUSH
45709: LD_INT 8
45711: PUSH
45712: LD_INT 13
45714: PUSH
45715: LD_INT 12
45717: PUSH
45718: LD_INT 15
45720: PUSH
45721: LD_INT 11
45723: PUSH
45724: LD_INT 14
45726: PUSH
45727: LD_INT 10
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: IN
45741: IFFALSE 45751
// btype = b_lab ;
45743: LD_ADDR_VAR 0 1
45747: PUSH
45748: LD_INT 6
45750: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45751: LD_VAR 0 6
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: IN
45770: NOT
45771: PUSH
45772: LD_VAR 0 1
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: LD_INT 3
45788: PUSH
45789: LD_INT 6
45791: PUSH
45792: LD_INT 36
45794: PUSH
45795: LD_INT 4
45797: PUSH
45798: LD_INT 5
45800: PUSH
45801: LD_INT 31
45803: PUSH
45804: LD_INT 32
45806: PUSH
45807: LD_INT 33
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: IN
45823: NOT
45824: PUSH
45825: LD_VAR 0 6
45829: PUSH
45830: LD_INT 1
45832: EQUAL
45833: AND
45834: OR
45835: PUSH
45836: LD_VAR 0 1
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: LD_INT 3
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: IN
45851: NOT
45852: PUSH
45853: LD_VAR 0 6
45857: PUSH
45858: LD_INT 2
45860: EQUAL
45861: AND
45862: OR
45863: IFFALSE 45873
// mode = 0 ;
45865: LD_ADDR_VAR 0 6
45869: PUSH
45870: LD_INT 0
45872: ST_TO_ADDR
// case mode of 0 :
45873: LD_VAR 0 6
45877: PUSH
45878: LD_INT 0
45880: DOUBLE
45881: EQUAL
45882: IFTRUE 45886
45884: GO 57339
45886: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45887: LD_ADDR_VAR 0 11
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 3
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46080: LD_ADDR_VAR 0 12
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 3
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46276: LD_ADDR_VAR 0 13
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: NEG
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46475: LD_ADDR_VAR 0 14
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 3
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46671: LD_ADDR_VAR 0 15
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46864: LD_ADDR_VAR 0 16
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 3
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47057: LD_ADDR_VAR 0 17
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47287: LD_ADDR_VAR 0 18
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47517: LD_ADDR_VAR 0 19
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47747: LD_ADDR_VAR 0 20
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47977: LD_ADDR_VAR 0 21
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48207: LD_ADDR_VAR 0 22
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48437: LD_ADDR_VAR 0 23
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48717: LD_ADDR_VAR 0 24
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 3
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48993: LD_ADDR_VAR 0 25
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 3
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 3
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49267: LD_ADDR_VAR 0 26
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: LD_INT 3
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49543: LD_ADDR_VAR 0 27
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 3
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49823: LD_ADDR_VAR 0 28
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 3
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 3
50070: NEG
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50105: LD_ADDR_VAR 0 29
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 3
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 3
50349: NEG
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50384: LD_ADDR_VAR 0 30
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 3
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 3
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50662: LD_ADDR_VAR 0 31
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 3
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50940: LD_ADDR_VAR 0 32
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 3
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51218: LD_ADDR_VAR 0 33
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 3
51462: NEG
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51497: LD_ADDR_VAR 0 34
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51777: LD_ADDR_VAR 0 35
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51889: LD_ADDR_VAR 0 36
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52001: LD_ADDR_VAR 0 37
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52113: LD_ADDR_VAR 0 38
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52225: LD_ADDR_VAR 0 39
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52337: LD_ADDR_VAR 0 40
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52449: LD_ADDR_VAR 0 41
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: NEG
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52799: LD_ADDR_VAR 0 42
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 2
52989: NEG
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: LD_INT 3
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53149: LD_ADDR_VAR 0 43
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 3
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 3
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 3
53456: NEG
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53497: LD_ADDR_VAR 0 44
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: LD_INT 3
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: LD_INT 3
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 3
53806: NEG
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53847: LD_ADDR_VAR 0 45
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 3
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 3
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 3
54144: NEG
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 3
54156: NEG
54157: PUSH
54158: LD_INT 3
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54197: LD_ADDR_VAR 0 46
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54545: LD_ADDR_VAR 0 47
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54696: LD_ADDR_VAR 0 48
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54843: LD_ADDR_VAR 0 49
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54987: LD_ADDR_VAR 0 50
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55131: LD_ADDR_VAR 0 51
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55278: LD_ADDR_VAR 0 52
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55429: LD_ADDR_VAR 0 53
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55659: LD_ADDR_VAR 0 54
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55889: LD_ADDR_VAR 0 55
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56119: LD_ADDR_VAR 0 56
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56349: LD_ADDR_VAR 0 57
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56579: LD_ADDR_VAR 0 58
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 2
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 2
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56809: LD_ADDR_VAR 0 59
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56897: LD_ADDR_VAR 0 60
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56985: LD_ADDR_VAR 0 61
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57073: LD_ADDR_VAR 0 62
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57161: LD_ADDR_VAR 0 63
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57249: LD_ADDR_VAR 0 64
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// end ; 1 :
57337: GO 63234
57339: LD_INT 1
57341: DOUBLE
57342: EQUAL
57343: IFTRUE 57347
57345: GO 59970
57347: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57348: LD_ADDR_VAR 0 11
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 3
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57392: LD_ADDR_VAR 0 12
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: LIST
57432: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57433: LD_ADDR_VAR 0 13
57437: PUSH
57438: LD_INT 3
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57473: LD_ADDR_VAR 0 14
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 3
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 3
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57514: LD_ADDR_VAR 0 15
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57558: LD_ADDR_VAR 0 16
57562: PUSH
57563: LD_INT 2
57565: NEG
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57604: LD_ADDR_VAR 0 17
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 3
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57648: LD_ADDR_VAR 0 18
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 3
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57689: LD_ADDR_VAR 0 19
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57729: LD_ADDR_VAR 0 20
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: LIST
57769: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57770: LD_ADDR_VAR 0 21
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 3
57788: NEG
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57814: LD_ADDR_VAR 0 22
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: LD_INT 3
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57860: LD_ADDR_VAR 0 23
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 4
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: LIST
57903: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57904: LD_ADDR_VAR 0 24
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: LIST
57944: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57945: LD_ADDR_VAR 0 25
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 4
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: LD_INT 4
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57985: LD_ADDR_VAR 0 26
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 4
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58026: LD_ADDR_VAR 0 27
58030: PUSH
58031: LD_INT 3
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58070: LD_ADDR_VAR 0 28
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: LD_INT 4
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 4
58101: NEG
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58116: LD_ADDR_VAR 0 29
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: LD_INT 4
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 4
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 5
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 5
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 4
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 6
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 6
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 5
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58271: LD_ADDR_VAR 0 30
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 3
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 4
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 4
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 5
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 5
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 5
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 6
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 6
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58414: LD_ADDR_VAR 0 31
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 5
58481: PUSH
58482: LD_INT 4
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 5
58491: PUSH
58492: LD_INT 5
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: PUSH
58502: LD_INT 5
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 6
58511: PUSH
58512: LD_INT 5
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 6
58521: PUSH
58522: LD_INT 6
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 5
58531: PUSH
58532: LD_INT 6
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58553: LD_ADDR_VAR 0 32
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 4
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 5
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 5
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 4
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 6
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 6
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 5
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58696: LD_ADDR_VAR 0 33
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: NEG
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 4
58759: NEG
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 4
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 5
58782: NEG
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: NEG
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 5
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 6
58816: NEG
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 6
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58851: LD_ADDR_VAR 0 34
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 3
58894: NEG
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 4
58906: NEG
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 4
58918: NEG
58919: PUSH
58920: LD_INT 4
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 4
58930: NEG
58931: PUSH
58932: LD_INT 5
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 5
58942: NEG
58943: PUSH
58944: LD_INT 4
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 5
58954: NEG
58955: PUSH
58956: LD_INT 5
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 5
58966: NEG
58967: PUSH
58968: LD_INT 6
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 6
58978: NEG
58979: PUSH
58980: LD_INT 5
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 6
58990: NEG
58991: PUSH
58992: LD_INT 6
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59014: LD_ADDR_VAR 0 41
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: LIST
59057: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59058: LD_ADDR_VAR 0 42
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59099: LD_ADDR_VAR 0 43
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59139: LD_ADDR_VAR 0 44
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59180: LD_ADDR_VAR 0 45
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59224: LD_ADDR_VAR 0 46
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: LD_INT 3
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: LIST
59269: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59270: LD_ADDR_VAR 0 47
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59303: LD_ADDR_VAR 0 48
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 2
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59334: LD_ADDR_VAR 0 49
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59363: LD_ADDR_VAR 0 50
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59392: LD_ADDR_VAR 0 51
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59423: LD_ADDR_VAR 0 52
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: NEG
59443: PUSH
59444: LD_INT 2
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59456: LD_ADDR_VAR 0 53
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 3
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 3
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59500: LD_ADDR_VAR 0 54
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59541: LD_ADDR_VAR 0 55
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: LD_INT 3
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59581: LD_ADDR_VAR 0 56
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59622: LD_ADDR_VAR 0 57
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 3
59640: NEG
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59666: LD_ADDR_VAR 0 58
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 3
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59712: LD_ADDR_VAR 0 59
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59756: LD_ADDR_VAR 0 60
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59797: LD_ADDR_VAR 0 61
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59837: LD_ADDR_VAR 0 62
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59878: LD_ADDR_VAR 0 63
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59922: LD_ADDR_VAR 0 64
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: ST_TO_ADDR
// end ; 2 :
59968: GO 63234
59970: LD_INT 2
59972: DOUBLE
59973: EQUAL
59974: IFTRUE 59978
59976: GO 63233
59978: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59979: LD_ADDR_VAR 0 29
59983: PUSH
59984: LD_INT 4
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 4
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 5
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 5
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 3
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 5
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 3
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 4
60099: PUSH
60100: LD_INT 3
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 4
60109: PUSH
60110: LD_INT 4
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: LD_INT 4
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 3
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 4
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 4
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 4
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: LD_INT 4
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 5
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 5
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 4
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: LD_INT 5
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: NEG
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 4
60329: NEG
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 4
60341: NEG
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 4
60364: NEG
60365: PUSH
60366: LD_INT 4
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 4
60376: NEG
60377: PUSH
60378: LD_INT 5
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: LD_INT 4
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 4
60412: NEG
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 5
60424: NEG
60425: PUSH
60426: LD_INT 4
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 5
60436: NEG
60437: PUSH
60438: LD_INT 5
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 5
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 5
60460: NEG
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60517: LD_ADDR_VAR 0 30
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: LD_INT 4
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 5
60544: PUSH
60545: LD_INT 4
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 5
60554: PUSH
60555: LD_INT 5
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: LD_INT 5
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 5
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: LD_INT 5
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: LD_INT 4
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 4
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 4
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 4
60707: NEG
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 4
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 4
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 5
60763: NEG
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 5
60774: NEG
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 5
60786: NEG
60787: PUSH
60788: LD_INT 2
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: NEG
60810: PUSH
60811: LD_INT 3
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: NEG
60822: PUSH
60823: LD_INT 4
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: LD_INT 3
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: LD_INT 2
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: LD_INT 3
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 4
60881: NEG
60882: PUSH
60883: LD_INT 4
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: LD_INT 4
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 4
60905: NEG
60906: PUSH
60907: LD_INT 2
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 4
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 5
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: LD_INT 4
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: LD_INT 5
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: NEG
61008: PUSH
61009: LD_INT 5
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61064: LD_ADDR_VAR 0 31
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 4
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 3
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 4
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: LD_INT 5
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 5
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 4
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 5
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 4
61243: NEG
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 4
61266: NEG
61267: PUSH
61268: LD_INT 4
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 4
61278: NEG
61279: PUSH
61280: LD_INT 5
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: NEG
61291: PUSH
61292: LD_INT 4
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 5
61326: NEG
61327: PUSH
61328: LD_INT 4
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 5
61338: NEG
61339: PUSH
61340: LD_INT 5
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: LD_INT 5
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 5
61362: NEG
61363: PUSH
61364: LD_INT 3
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 4
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: LD_INT 3
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: LD_INT 2
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: LD_INT 3
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 4
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: LD_INT 2
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: LD_INT 4
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 4
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 5
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 5
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 4
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 3
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 3
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: LD_INT 2
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 5
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61614: LD_ADDR_VAR 0 32
61618: PUSH
61619: LD_INT 4
61621: NEG
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 4
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 3
61644: NEG
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 3
61655: NEG
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 4
61666: NEG
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 5
61677: NEG
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 5
61688: NEG
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 5
61700: NEG
61701: PUSH
61702: LD_INT 2
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: NEG
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 3
61723: NEG
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: LD_INT 4
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: LD_INT 3
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 2
61759: NEG
61760: PUSH
61761: LD_INT 2
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 3
61771: NEG
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 4
61783: NEG
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 4
61795: NEG
61796: PUSH
61797: LD_INT 4
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: LD_INT 4
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 4
61819: NEG
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 4
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 5
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 4
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 3
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 4
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 5
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: LD_INT 5
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 4
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 4
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 4
62026: PUSH
62027: LD_INT 4
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 4
62036: PUSH
62037: LD_INT 3
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 5
62046: PUSH
62047: LD_INT 4
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 5
62056: PUSH
62057: LD_INT 5
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 4
62066: PUSH
62067: LD_INT 5
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 3
62076: PUSH
62077: LD_INT 4
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 3
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 5
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: LD_INT 5
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62161: LD_ADDR_VAR 0 33
62165: PUSH
62166: LD_INT 4
62168: NEG
62169: PUSH
62170: LD_INT 4
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 4
62180: NEG
62181: PUSH
62182: LD_INT 5
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 3
62192: NEG
62193: PUSH
62194: LD_INT 4
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 3
62204: NEG
62205: PUSH
62206: LD_INT 3
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: LD_INT 3
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 5
62228: NEG
62229: PUSH
62230: LD_INT 4
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 5
62240: NEG
62241: PUSH
62242: LD_INT 5
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 3
62252: NEG
62253: PUSH
62254: LD_INT 5
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 5
62264: NEG
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 3
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 4
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 3
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 3
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: LD_INT 4
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 2
62355: PUSH
62356: LD_INT 2
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: LD_INT 4
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 4
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 4
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 5
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 5
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 4
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 5
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: LD_INT 3
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 4
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: LD_INT 4
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: LD_INT 4
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: LD_INT 4
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 5
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 5
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: LD_INT 4
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: LD_INT 5
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: LD_INT 3
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62699: LD_ADDR_VAR 0 34
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 4
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 5
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 4
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 4
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 5
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: LD_INT 5
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 4
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 4
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 2
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 4
62891: PUSH
62892: LD_INT 2
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 4
62901: PUSH
62902: LD_INT 4
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 4
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 5
62921: PUSH
62922: LD_INT 4
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 5
62931: PUSH
62932: LD_INT 5
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 4
62941: PUSH
62942: LD_INT 5
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: LD_INT 4
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 3
62961: PUSH
62962: LD_INT 3
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 5
62971: PUSH
62972: LD_INT 3
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 3
62981: PUSH
62982: LD_INT 5
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 4
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 4
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: LD_INT 3
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: LD_INT 4
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 4
63084: NEG
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 4
63095: NEG
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 3
63107: NEG
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 3
63118: NEG
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 4
63129: NEG
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 5
63140: NEG
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 5
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 5
63163: NEG
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: NEG
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: ST_TO_ADDR
// end ; end ;
63231: GO 63234
63233: POP
// case btype of b_depot , b_warehouse :
63234: LD_VAR 0 1
63238: PUSH
63239: LD_INT 0
63241: DOUBLE
63242: EQUAL
63243: IFTRUE 63253
63245: LD_INT 1
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63253
63251: GO 63454
63253: POP
// case nation of nation_american :
63254: LD_VAR 0 5
63258: PUSH
63259: LD_INT 1
63261: DOUBLE
63262: EQUAL
63263: IFTRUE 63267
63265: GO 63323
63267: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63268: LD_ADDR_VAR 0 9
63272: PUSH
63273: LD_VAR 0 11
63277: PUSH
63278: LD_VAR 0 12
63282: PUSH
63283: LD_VAR 0 13
63287: PUSH
63288: LD_VAR 0 14
63292: PUSH
63293: LD_VAR 0 15
63297: PUSH
63298: LD_VAR 0 16
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: PUSH
63311: LD_VAR 0 4
63315: PUSH
63316: LD_INT 1
63318: PLUS
63319: ARRAY
63320: ST_TO_ADDR
63321: GO 63452
63323: LD_INT 2
63325: DOUBLE
63326: EQUAL
63327: IFTRUE 63331
63329: GO 63387
63331: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63332: LD_ADDR_VAR 0 9
63336: PUSH
63337: LD_VAR 0 17
63341: PUSH
63342: LD_VAR 0 18
63346: PUSH
63347: LD_VAR 0 19
63351: PUSH
63352: LD_VAR 0 20
63356: PUSH
63357: LD_VAR 0 21
63361: PUSH
63362: LD_VAR 0 22
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: PUSH
63375: LD_VAR 0 4
63379: PUSH
63380: LD_INT 1
63382: PLUS
63383: ARRAY
63384: ST_TO_ADDR
63385: GO 63452
63387: LD_INT 3
63389: DOUBLE
63390: EQUAL
63391: IFTRUE 63395
63393: GO 63451
63395: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63396: LD_ADDR_VAR 0 9
63400: PUSH
63401: LD_VAR 0 23
63405: PUSH
63406: LD_VAR 0 24
63410: PUSH
63411: LD_VAR 0 25
63415: PUSH
63416: LD_VAR 0 26
63420: PUSH
63421: LD_VAR 0 27
63425: PUSH
63426: LD_VAR 0 28
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: PUSH
63439: LD_VAR 0 4
63443: PUSH
63444: LD_INT 1
63446: PLUS
63447: ARRAY
63448: ST_TO_ADDR
63449: GO 63452
63451: POP
63452: GO 64007
63454: LD_INT 2
63456: DOUBLE
63457: EQUAL
63458: IFTRUE 63468
63460: LD_INT 3
63462: DOUBLE
63463: EQUAL
63464: IFTRUE 63468
63466: GO 63524
63468: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63469: LD_ADDR_VAR 0 9
63473: PUSH
63474: LD_VAR 0 29
63478: PUSH
63479: LD_VAR 0 30
63483: PUSH
63484: LD_VAR 0 31
63488: PUSH
63489: LD_VAR 0 32
63493: PUSH
63494: LD_VAR 0 33
63498: PUSH
63499: LD_VAR 0 34
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: PUSH
63512: LD_VAR 0 4
63516: PUSH
63517: LD_INT 1
63519: PLUS
63520: ARRAY
63521: ST_TO_ADDR
63522: GO 64007
63524: LD_INT 16
63526: DOUBLE
63527: EQUAL
63528: IFTRUE 63586
63530: LD_INT 17
63532: DOUBLE
63533: EQUAL
63534: IFTRUE 63586
63536: LD_INT 18
63538: DOUBLE
63539: EQUAL
63540: IFTRUE 63586
63542: LD_INT 19
63544: DOUBLE
63545: EQUAL
63546: IFTRUE 63586
63548: LD_INT 22
63550: DOUBLE
63551: EQUAL
63552: IFTRUE 63586
63554: LD_INT 20
63556: DOUBLE
63557: EQUAL
63558: IFTRUE 63586
63560: LD_INT 21
63562: DOUBLE
63563: EQUAL
63564: IFTRUE 63586
63566: LD_INT 23
63568: DOUBLE
63569: EQUAL
63570: IFTRUE 63586
63572: LD_INT 24
63574: DOUBLE
63575: EQUAL
63576: IFTRUE 63586
63578: LD_INT 25
63580: DOUBLE
63581: EQUAL
63582: IFTRUE 63586
63584: GO 63642
63586: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63587: LD_ADDR_VAR 0 9
63591: PUSH
63592: LD_VAR 0 35
63596: PUSH
63597: LD_VAR 0 36
63601: PUSH
63602: LD_VAR 0 37
63606: PUSH
63607: LD_VAR 0 38
63611: PUSH
63612: LD_VAR 0 39
63616: PUSH
63617: LD_VAR 0 40
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: PUSH
63630: LD_VAR 0 4
63634: PUSH
63635: LD_INT 1
63637: PLUS
63638: ARRAY
63639: ST_TO_ADDR
63640: GO 64007
63642: LD_INT 6
63644: DOUBLE
63645: EQUAL
63646: IFTRUE 63698
63648: LD_INT 7
63650: DOUBLE
63651: EQUAL
63652: IFTRUE 63698
63654: LD_INT 8
63656: DOUBLE
63657: EQUAL
63658: IFTRUE 63698
63660: LD_INT 13
63662: DOUBLE
63663: EQUAL
63664: IFTRUE 63698
63666: LD_INT 12
63668: DOUBLE
63669: EQUAL
63670: IFTRUE 63698
63672: LD_INT 15
63674: DOUBLE
63675: EQUAL
63676: IFTRUE 63698
63678: LD_INT 11
63680: DOUBLE
63681: EQUAL
63682: IFTRUE 63698
63684: LD_INT 14
63686: DOUBLE
63687: EQUAL
63688: IFTRUE 63698
63690: LD_INT 10
63692: DOUBLE
63693: EQUAL
63694: IFTRUE 63698
63696: GO 63754
63698: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63699: LD_ADDR_VAR 0 9
63703: PUSH
63704: LD_VAR 0 41
63708: PUSH
63709: LD_VAR 0 42
63713: PUSH
63714: LD_VAR 0 43
63718: PUSH
63719: LD_VAR 0 44
63723: PUSH
63724: LD_VAR 0 45
63728: PUSH
63729: LD_VAR 0 46
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: PUSH
63742: LD_VAR 0 4
63746: PUSH
63747: LD_INT 1
63749: PLUS
63750: ARRAY
63751: ST_TO_ADDR
63752: GO 64007
63754: LD_INT 36
63756: DOUBLE
63757: EQUAL
63758: IFTRUE 63762
63760: GO 63818
63762: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63763: LD_ADDR_VAR 0 9
63767: PUSH
63768: LD_VAR 0 47
63772: PUSH
63773: LD_VAR 0 48
63777: PUSH
63778: LD_VAR 0 49
63782: PUSH
63783: LD_VAR 0 50
63787: PUSH
63788: LD_VAR 0 51
63792: PUSH
63793: LD_VAR 0 52
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: PUSH
63806: LD_VAR 0 4
63810: PUSH
63811: LD_INT 1
63813: PLUS
63814: ARRAY
63815: ST_TO_ADDR
63816: GO 64007
63818: LD_INT 4
63820: DOUBLE
63821: EQUAL
63822: IFTRUE 63844
63824: LD_INT 5
63826: DOUBLE
63827: EQUAL
63828: IFTRUE 63844
63830: LD_INT 34
63832: DOUBLE
63833: EQUAL
63834: IFTRUE 63844
63836: LD_INT 37
63838: DOUBLE
63839: EQUAL
63840: IFTRUE 63844
63842: GO 63900
63844: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63845: LD_ADDR_VAR 0 9
63849: PUSH
63850: LD_VAR 0 53
63854: PUSH
63855: LD_VAR 0 54
63859: PUSH
63860: LD_VAR 0 55
63864: PUSH
63865: LD_VAR 0 56
63869: PUSH
63870: LD_VAR 0 57
63874: PUSH
63875: LD_VAR 0 58
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: PUSH
63888: LD_VAR 0 4
63892: PUSH
63893: LD_INT 1
63895: PLUS
63896: ARRAY
63897: ST_TO_ADDR
63898: GO 64007
63900: LD_INT 31
63902: DOUBLE
63903: EQUAL
63904: IFTRUE 63950
63906: LD_INT 32
63908: DOUBLE
63909: EQUAL
63910: IFTRUE 63950
63912: LD_INT 33
63914: DOUBLE
63915: EQUAL
63916: IFTRUE 63950
63918: LD_INT 27
63920: DOUBLE
63921: EQUAL
63922: IFTRUE 63950
63924: LD_INT 26
63926: DOUBLE
63927: EQUAL
63928: IFTRUE 63950
63930: LD_INT 28
63932: DOUBLE
63933: EQUAL
63934: IFTRUE 63950
63936: LD_INT 29
63938: DOUBLE
63939: EQUAL
63940: IFTRUE 63950
63942: LD_INT 30
63944: DOUBLE
63945: EQUAL
63946: IFTRUE 63950
63948: GO 64006
63950: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63951: LD_ADDR_VAR 0 9
63955: PUSH
63956: LD_VAR 0 59
63960: PUSH
63961: LD_VAR 0 60
63965: PUSH
63966: LD_VAR 0 61
63970: PUSH
63971: LD_VAR 0 62
63975: PUSH
63976: LD_VAR 0 63
63980: PUSH
63981: LD_VAR 0 64
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: PUSH
63994: LD_VAR 0 4
63998: PUSH
63999: LD_INT 1
64001: PLUS
64002: ARRAY
64003: ST_TO_ADDR
64004: GO 64007
64006: POP
// temp_list2 = [ ] ;
64007: LD_ADDR_VAR 0 10
64011: PUSH
64012: EMPTY
64013: ST_TO_ADDR
// for i in temp_list do
64014: LD_ADDR_VAR 0 8
64018: PUSH
64019: LD_VAR 0 9
64023: PUSH
64024: FOR_IN
64025: IFFALSE 64077
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64027: LD_ADDR_VAR 0 10
64031: PUSH
64032: LD_VAR 0 10
64036: PUSH
64037: LD_VAR 0 8
64041: PUSH
64042: LD_INT 1
64044: ARRAY
64045: PUSH
64046: LD_VAR 0 2
64050: PLUS
64051: PUSH
64052: LD_VAR 0 8
64056: PUSH
64057: LD_INT 2
64059: ARRAY
64060: PUSH
64061: LD_VAR 0 3
64065: PLUS
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: EMPTY
64072: LIST
64073: ADD
64074: ST_TO_ADDR
64075: GO 64024
64077: POP
64078: POP
// result = temp_list2 ;
64079: LD_ADDR_VAR 0 7
64083: PUSH
64084: LD_VAR 0 10
64088: ST_TO_ADDR
// end ;
64089: LD_VAR 0 7
64093: RET
// export function EnemyInRange ( unit , dist ) ; begin
64094: LD_INT 0
64096: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64097: LD_ADDR_VAR 0 3
64101: PUSH
64102: LD_VAR 0 1
64106: PPUSH
64107: CALL_OW 255
64111: PPUSH
64112: LD_VAR 0 1
64116: PPUSH
64117: CALL_OW 250
64121: PPUSH
64122: LD_VAR 0 1
64126: PPUSH
64127: CALL_OW 251
64131: PPUSH
64132: LD_VAR 0 2
64136: PPUSH
64137: CALL 37467 0 4
64141: PUSH
64142: LD_INT 4
64144: ARRAY
64145: ST_TO_ADDR
// end ;
64146: LD_VAR 0 3
64150: RET
// export function PlayerSeeMe ( unit ) ; begin
64151: LD_INT 0
64153: PPUSH
// result := See ( your_side , unit ) ;
64154: LD_ADDR_VAR 0 2
64158: PUSH
64159: LD_OWVAR 2
64163: PPUSH
64164: LD_VAR 0 1
64168: PPUSH
64169: CALL_OW 292
64173: ST_TO_ADDR
// end ;
64174: LD_VAR 0 2
64178: RET
// export function ReverseDir ( unit ) ; begin
64179: LD_INT 0
64181: PPUSH
// if not unit then
64182: LD_VAR 0 1
64186: NOT
64187: IFFALSE 64191
// exit ;
64189: GO 64214
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64191: LD_ADDR_VAR 0 2
64195: PUSH
64196: LD_VAR 0 1
64200: PPUSH
64201: CALL_OW 254
64205: PUSH
64206: LD_INT 3
64208: PLUS
64209: PUSH
64210: LD_INT 6
64212: MOD
64213: ST_TO_ADDR
// end ;
64214: LD_VAR 0 2
64218: RET
// export function ReverseArray ( array ) ; var i ; begin
64219: LD_INT 0
64221: PPUSH
64222: PPUSH
// if not array then
64223: LD_VAR 0 1
64227: NOT
64228: IFFALSE 64232
// exit ;
64230: GO 64287
// result := [ ] ;
64232: LD_ADDR_VAR 0 2
64236: PUSH
64237: EMPTY
64238: ST_TO_ADDR
// for i := array downto 1 do
64239: LD_ADDR_VAR 0 3
64243: PUSH
64244: DOUBLE
64245: LD_VAR 0 1
64249: INC
64250: ST_TO_ADDR
64251: LD_INT 1
64253: PUSH
64254: FOR_DOWNTO
64255: IFFALSE 64285
// result := Join ( result , array [ i ] ) ;
64257: LD_ADDR_VAR 0 2
64261: PUSH
64262: LD_VAR 0 2
64266: PPUSH
64267: LD_VAR 0 1
64271: PUSH
64272: LD_VAR 0 3
64276: ARRAY
64277: PPUSH
64278: CALL 68943 0 2
64282: ST_TO_ADDR
64283: GO 64254
64285: POP
64286: POP
// end ;
64287: LD_VAR 0 2
64291: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64292: LD_INT 0
64294: PPUSH
64295: PPUSH
64296: PPUSH
64297: PPUSH
64298: PPUSH
64299: PPUSH
// if not unit or not hexes then
64300: LD_VAR 0 1
64304: NOT
64305: PUSH
64306: LD_VAR 0 2
64310: NOT
64311: OR
64312: IFFALSE 64316
// exit ;
64314: GO 64439
// dist := 9999 ;
64316: LD_ADDR_VAR 0 5
64320: PUSH
64321: LD_INT 9999
64323: ST_TO_ADDR
// for i = 1 to hexes do
64324: LD_ADDR_VAR 0 4
64328: PUSH
64329: DOUBLE
64330: LD_INT 1
64332: DEC
64333: ST_TO_ADDR
64334: LD_VAR 0 2
64338: PUSH
64339: FOR_TO
64340: IFFALSE 64427
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64342: LD_ADDR_VAR 0 6
64346: PUSH
64347: LD_VAR 0 1
64351: PPUSH
64352: LD_VAR 0 2
64356: PUSH
64357: LD_VAR 0 4
64361: ARRAY
64362: PUSH
64363: LD_INT 1
64365: ARRAY
64366: PPUSH
64367: LD_VAR 0 2
64371: PUSH
64372: LD_VAR 0 4
64376: ARRAY
64377: PUSH
64378: LD_INT 2
64380: ARRAY
64381: PPUSH
64382: CALL_OW 297
64386: ST_TO_ADDR
// if tdist < dist then
64387: LD_VAR 0 6
64391: PUSH
64392: LD_VAR 0 5
64396: LESS
64397: IFFALSE 64425
// begin hex := hexes [ i ] ;
64399: LD_ADDR_VAR 0 8
64403: PUSH
64404: LD_VAR 0 2
64408: PUSH
64409: LD_VAR 0 4
64413: ARRAY
64414: ST_TO_ADDR
// dist := tdist ;
64415: LD_ADDR_VAR 0 5
64419: PUSH
64420: LD_VAR 0 6
64424: ST_TO_ADDR
// end ; end ;
64425: GO 64339
64427: POP
64428: POP
// result := hex ;
64429: LD_ADDR_VAR 0 3
64433: PUSH
64434: LD_VAR 0 8
64438: ST_TO_ADDR
// end ;
64439: LD_VAR 0 3
64443: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64444: LD_INT 0
64446: PPUSH
64447: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64448: LD_VAR 0 1
64452: NOT
64453: PUSH
64454: LD_VAR 0 1
64458: PUSH
64459: LD_INT 21
64461: PUSH
64462: LD_INT 2
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 23
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PPUSH
64483: CALL_OW 69
64487: IN
64488: NOT
64489: OR
64490: IFFALSE 64494
// exit ;
64492: GO 64541
// for i = 1 to 3 do
64494: LD_ADDR_VAR 0 3
64498: PUSH
64499: DOUBLE
64500: LD_INT 1
64502: DEC
64503: ST_TO_ADDR
64504: LD_INT 3
64506: PUSH
64507: FOR_TO
64508: IFFALSE 64539
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64510: LD_VAR 0 1
64514: PPUSH
64515: CALL_OW 250
64519: PPUSH
64520: LD_VAR 0 1
64524: PPUSH
64525: CALL_OW 251
64529: PPUSH
64530: LD_INT 1
64532: PPUSH
64533: CALL_OW 453
64537: GO 64507
64539: POP
64540: POP
// end ;
64541: LD_VAR 0 2
64545: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64546: LD_INT 0
64548: PPUSH
64549: PPUSH
64550: PPUSH
64551: PPUSH
64552: PPUSH
64553: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64554: LD_VAR 0 1
64558: NOT
64559: PUSH
64560: LD_VAR 0 2
64564: NOT
64565: OR
64566: PUSH
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 314
64576: OR
64577: IFFALSE 64581
// exit ;
64579: GO 65048
// if GetLives ( i ) < 250 then
64581: LD_VAR 0 4
64585: PPUSH
64586: CALL_OW 256
64590: PUSH
64591: LD_INT 250
64593: LESS
64594: IFFALSE 64607
// begin ComAutodestruct ( i ) ;
64596: LD_VAR 0 4
64600: PPUSH
64601: CALL 64444 0 1
// exit ;
64605: GO 65048
// end ; x := GetX ( enemy_unit ) ;
64607: LD_ADDR_VAR 0 7
64611: PUSH
64612: LD_VAR 0 2
64616: PPUSH
64617: CALL_OW 250
64621: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64622: LD_ADDR_VAR 0 8
64626: PUSH
64627: LD_VAR 0 2
64631: PPUSH
64632: CALL_OW 251
64636: ST_TO_ADDR
// if not x or not y then
64637: LD_VAR 0 7
64641: NOT
64642: PUSH
64643: LD_VAR 0 8
64647: NOT
64648: OR
64649: IFFALSE 64653
// exit ;
64651: GO 65048
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64653: LD_ADDR_VAR 0 6
64657: PUSH
64658: LD_VAR 0 7
64662: PPUSH
64663: LD_INT 0
64665: PPUSH
64666: LD_INT 4
64668: PPUSH
64669: CALL_OW 272
64673: PUSH
64674: LD_VAR 0 8
64678: PPUSH
64679: LD_INT 0
64681: PPUSH
64682: LD_INT 4
64684: PPUSH
64685: CALL_OW 273
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_VAR 0 7
64698: PPUSH
64699: LD_INT 1
64701: PPUSH
64702: LD_INT 4
64704: PPUSH
64705: CALL_OW 272
64709: PUSH
64710: LD_VAR 0 8
64714: PPUSH
64715: LD_INT 1
64717: PPUSH
64718: LD_INT 4
64720: PPUSH
64721: CALL_OW 273
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_VAR 0 7
64734: PPUSH
64735: LD_INT 2
64737: PPUSH
64738: LD_INT 4
64740: PPUSH
64741: CALL_OW 272
64745: PUSH
64746: LD_VAR 0 8
64750: PPUSH
64751: LD_INT 2
64753: PPUSH
64754: LD_INT 4
64756: PPUSH
64757: CALL_OW 273
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_VAR 0 7
64770: PPUSH
64771: LD_INT 3
64773: PPUSH
64774: LD_INT 4
64776: PPUSH
64777: CALL_OW 272
64781: PUSH
64782: LD_VAR 0 8
64786: PPUSH
64787: LD_INT 3
64789: PPUSH
64790: LD_INT 4
64792: PPUSH
64793: CALL_OW 273
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_VAR 0 7
64806: PPUSH
64807: LD_INT 4
64809: PPUSH
64810: LD_INT 4
64812: PPUSH
64813: CALL_OW 272
64817: PUSH
64818: LD_VAR 0 8
64822: PPUSH
64823: LD_INT 4
64825: PPUSH
64826: LD_INT 4
64828: PPUSH
64829: CALL_OW 273
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_VAR 0 7
64842: PPUSH
64843: LD_INT 5
64845: PPUSH
64846: LD_INT 4
64848: PPUSH
64849: CALL_OW 272
64853: PUSH
64854: LD_VAR 0 8
64858: PPUSH
64859: LD_INT 5
64861: PPUSH
64862: LD_INT 4
64864: PPUSH
64865: CALL_OW 273
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: ST_TO_ADDR
// for i = tmp downto 1 do
64882: LD_ADDR_VAR 0 4
64886: PUSH
64887: DOUBLE
64888: LD_VAR 0 6
64892: INC
64893: ST_TO_ADDR
64894: LD_INT 1
64896: PUSH
64897: FOR_DOWNTO
64898: IFFALSE 64999
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64900: LD_VAR 0 6
64904: PUSH
64905: LD_VAR 0 4
64909: ARRAY
64910: PUSH
64911: LD_INT 1
64913: ARRAY
64914: PPUSH
64915: LD_VAR 0 6
64919: PUSH
64920: LD_VAR 0 4
64924: ARRAY
64925: PUSH
64926: LD_INT 2
64928: ARRAY
64929: PPUSH
64930: CALL_OW 488
64934: NOT
64935: PUSH
64936: LD_VAR 0 6
64940: PUSH
64941: LD_VAR 0 4
64945: ARRAY
64946: PUSH
64947: LD_INT 1
64949: ARRAY
64950: PPUSH
64951: LD_VAR 0 6
64955: PUSH
64956: LD_VAR 0 4
64960: ARRAY
64961: PUSH
64962: LD_INT 2
64964: ARRAY
64965: PPUSH
64966: CALL_OW 428
64970: PUSH
64971: LD_INT 0
64973: NONEQUAL
64974: OR
64975: IFFALSE 64997
// tmp := Delete ( tmp , i ) ;
64977: LD_ADDR_VAR 0 6
64981: PUSH
64982: LD_VAR 0 6
64986: PPUSH
64987: LD_VAR 0 4
64991: PPUSH
64992: CALL_OW 3
64996: ST_TO_ADDR
64997: GO 64897
64999: POP
65000: POP
// j := GetClosestHex ( unit , tmp ) ;
65001: LD_ADDR_VAR 0 5
65005: PUSH
65006: LD_VAR 0 1
65010: PPUSH
65011: LD_VAR 0 6
65015: PPUSH
65016: CALL 64292 0 2
65020: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65021: LD_VAR 0 1
65025: PPUSH
65026: LD_VAR 0 5
65030: PUSH
65031: LD_INT 1
65033: ARRAY
65034: PPUSH
65035: LD_VAR 0 5
65039: PUSH
65040: LD_INT 2
65042: ARRAY
65043: PPUSH
65044: CALL_OW 111
// end ;
65048: LD_VAR 0 3
65052: RET
// export function PrepareApemanSoldier ( ) ; begin
65053: LD_INT 0
65055: PPUSH
// uc_nation := 0 ;
65056: LD_ADDR_OWVAR 21
65060: PUSH
65061: LD_INT 0
65063: ST_TO_ADDR
// hc_sex := sex_male ;
65064: LD_ADDR_OWVAR 27
65068: PUSH
65069: LD_INT 1
65071: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65072: LD_ADDR_OWVAR 28
65076: PUSH
65077: LD_INT 15
65079: ST_TO_ADDR
// hc_gallery :=  ;
65080: LD_ADDR_OWVAR 33
65084: PUSH
65085: LD_STRING 
65087: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65088: LD_ADDR_OWVAR 31
65092: PUSH
65093: LD_INT 0
65095: PPUSH
65096: LD_INT 3
65098: PPUSH
65099: CALL_OW 12
65103: PUSH
65104: LD_INT 0
65106: PPUSH
65107: LD_INT 3
65109: PPUSH
65110: CALL_OW 12
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: ST_TO_ADDR
// end ;
65127: LD_VAR 0 1
65131: RET
// export function PrepareApemanEngineer ( ) ; begin
65132: LD_INT 0
65134: PPUSH
// uc_nation := 0 ;
65135: LD_ADDR_OWVAR 21
65139: PUSH
65140: LD_INT 0
65142: ST_TO_ADDR
// hc_sex := sex_male ;
65143: LD_ADDR_OWVAR 27
65147: PUSH
65148: LD_INT 1
65150: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65151: LD_ADDR_OWVAR 28
65155: PUSH
65156: LD_INT 16
65158: ST_TO_ADDR
// hc_gallery :=  ;
65159: LD_ADDR_OWVAR 33
65163: PUSH
65164: LD_STRING 
65166: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65167: LD_ADDR_OWVAR 31
65171: PUSH
65172: LD_INT 0
65174: PPUSH
65175: LD_INT 3
65177: PPUSH
65178: CALL_OW 12
65182: PUSH
65183: LD_INT 0
65185: PPUSH
65186: LD_INT 3
65188: PPUSH
65189: CALL_OW 12
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: ST_TO_ADDR
// end ;
65206: LD_VAR 0 1
65210: RET
// export function PrepareApeman ( agressivity ) ; begin
65211: LD_INT 0
65213: PPUSH
// uc_side := 0 ;
65214: LD_ADDR_OWVAR 20
65218: PUSH
65219: LD_INT 0
65221: ST_TO_ADDR
// uc_nation := 0 ;
65222: LD_ADDR_OWVAR 21
65226: PUSH
65227: LD_INT 0
65229: ST_TO_ADDR
// hc_sex := sex_male ;
65230: LD_ADDR_OWVAR 27
65234: PUSH
65235: LD_INT 1
65237: ST_TO_ADDR
// hc_class := class_apeman ;
65238: LD_ADDR_OWVAR 28
65242: PUSH
65243: LD_INT 12
65245: ST_TO_ADDR
// hc_gallery :=  ;
65246: LD_ADDR_OWVAR 33
65250: PUSH
65251: LD_STRING 
65253: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65254: LD_ADDR_OWVAR 35
65258: PUSH
65259: LD_VAR 0 1
65263: NEG
65264: PPUSH
65265: LD_VAR 0 1
65269: PPUSH
65270: CALL_OW 12
65274: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65275: LD_ADDR_OWVAR 31
65279: PUSH
65280: LD_INT 0
65282: PPUSH
65283: LD_INT 3
65285: PPUSH
65286: CALL_OW 12
65290: PUSH
65291: LD_INT 0
65293: PPUSH
65294: LD_INT 3
65296: PPUSH
65297: CALL_OW 12
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: ST_TO_ADDR
// end ;
65314: LD_VAR 0 2
65318: RET
// export function PrepareTiger ( agressivity ) ; begin
65319: LD_INT 0
65321: PPUSH
// uc_side := 0 ;
65322: LD_ADDR_OWVAR 20
65326: PUSH
65327: LD_INT 0
65329: ST_TO_ADDR
// uc_nation := 0 ;
65330: LD_ADDR_OWVAR 21
65334: PUSH
65335: LD_INT 0
65337: ST_TO_ADDR
// hc_class := class_tiger ;
65338: LD_ADDR_OWVAR 28
65342: PUSH
65343: LD_INT 14
65345: ST_TO_ADDR
// hc_gallery :=  ;
65346: LD_ADDR_OWVAR 33
65350: PUSH
65351: LD_STRING 
65353: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65354: LD_ADDR_OWVAR 35
65358: PUSH
65359: LD_VAR 0 1
65363: NEG
65364: PPUSH
65365: LD_VAR 0 1
65369: PPUSH
65370: CALL_OW 12
65374: ST_TO_ADDR
// end ;
65375: LD_VAR 0 2
65379: RET
// export function PrepareEnchidna ( ) ; begin
65380: LD_INT 0
65382: PPUSH
// uc_side := 0 ;
65383: LD_ADDR_OWVAR 20
65387: PUSH
65388: LD_INT 0
65390: ST_TO_ADDR
// uc_nation := 0 ;
65391: LD_ADDR_OWVAR 21
65395: PUSH
65396: LD_INT 0
65398: ST_TO_ADDR
// hc_class := class_baggie ;
65399: LD_ADDR_OWVAR 28
65403: PUSH
65404: LD_INT 13
65406: ST_TO_ADDR
// hc_gallery :=  ;
65407: LD_ADDR_OWVAR 33
65411: PUSH
65412: LD_STRING 
65414: ST_TO_ADDR
// end ;
65415: LD_VAR 0 1
65419: RET
// export function PrepareFrog ( ) ; begin
65420: LD_INT 0
65422: PPUSH
// uc_side := 0 ;
65423: LD_ADDR_OWVAR 20
65427: PUSH
65428: LD_INT 0
65430: ST_TO_ADDR
// uc_nation := 0 ;
65431: LD_ADDR_OWVAR 21
65435: PUSH
65436: LD_INT 0
65438: ST_TO_ADDR
// hc_class := class_frog ;
65439: LD_ADDR_OWVAR 28
65443: PUSH
65444: LD_INT 19
65446: ST_TO_ADDR
// hc_gallery :=  ;
65447: LD_ADDR_OWVAR 33
65451: PUSH
65452: LD_STRING 
65454: ST_TO_ADDR
// end ;
65455: LD_VAR 0 1
65459: RET
// export function PrepareFish ( ) ; begin
65460: LD_INT 0
65462: PPUSH
// uc_side := 0 ;
65463: LD_ADDR_OWVAR 20
65467: PUSH
65468: LD_INT 0
65470: ST_TO_ADDR
// uc_nation := 0 ;
65471: LD_ADDR_OWVAR 21
65475: PUSH
65476: LD_INT 0
65478: ST_TO_ADDR
// hc_class := class_fish ;
65479: LD_ADDR_OWVAR 28
65483: PUSH
65484: LD_INT 20
65486: ST_TO_ADDR
// hc_gallery :=  ;
65487: LD_ADDR_OWVAR 33
65491: PUSH
65492: LD_STRING 
65494: ST_TO_ADDR
// end ;
65495: LD_VAR 0 1
65499: RET
// export function PrepareBird ( ) ; begin
65500: LD_INT 0
65502: PPUSH
// uc_side := 0 ;
65503: LD_ADDR_OWVAR 20
65507: PUSH
65508: LD_INT 0
65510: ST_TO_ADDR
// uc_nation := 0 ;
65511: LD_ADDR_OWVAR 21
65515: PUSH
65516: LD_INT 0
65518: ST_TO_ADDR
// hc_class := class_phororhacos ;
65519: LD_ADDR_OWVAR 28
65523: PUSH
65524: LD_INT 18
65526: ST_TO_ADDR
// hc_gallery :=  ;
65527: LD_ADDR_OWVAR 33
65531: PUSH
65532: LD_STRING 
65534: ST_TO_ADDR
// end ;
65535: LD_VAR 0 1
65539: RET
// export function PrepareHorse ( ) ; begin
65540: LD_INT 0
65542: PPUSH
// uc_side := 0 ;
65543: LD_ADDR_OWVAR 20
65547: PUSH
65548: LD_INT 0
65550: ST_TO_ADDR
// uc_nation := 0 ;
65551: LD_ADDR_OWVAR 21
65555: PUSH
65556: LD_INT 0
65558: ST_TO_ADDR
// hc_class := class_horse ;
65559: LD_ADDR_OWVAR 28
65563: PUSH
65564: LD_INT 21
65566: ST_TO_ADDR
// hc_gallery :=  ;
65567: LD_ADDR_OWVAR 33
65571: PUSH
65572: LD_STRING 
65574: ST_TO_ADDR
// end ;
65575: LD_VAR 0 1
65579: RET
// export function PrepareMastodont ( ) ; begin
65580: LD_INT 0
65582: PPUSH
// uc_side := 0 ;
65583: LD_ADDR_OWVAR 20
65587: PUSH
65588: LD_INT 0
65590: ST_TO_ADDR
// uc_nation := 0 ;
65591: LD_ADDR_OWVAR 21
65595: PUSH
65596: LD_INT 0
65598: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65599: LD_ADDR_OWVAR 37
65603: PUSH
65604: LD_INT 31
65606: ST_TO_ADDR
// vc_control := control_rider ;
65607: LD_ADDR_OWVAR 38
65611: PUSH
65612: LD_INT 4
65614: ST_TO_ADDR
// end ;
65615: LD_VAR 0 1
65619: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65620: LD_INT 0
65622: PPUSH
65623: PPUSH
65624: PPUSH
// uc_side = 0 ;
65625: LD_ADDR_OWVAR 20
65629: PUSH
65630: LD_INT 0
65632: ST_TO_ADDR
// uc_nation = 0 ;
65633: LD_ADDR_OWVAR 21
65637: PUSH
65638: LD_INT 0
65640: ST_TO_ADDR
// InitHc_All ( ) ;
65641: CALL_OW 584
// InitVc ;
65645: CALL_OW 20
// if mastodonts then
65649: LD_VAR 0 6
65653: IFFALSE 65720
// for i = 1 to mastodonts do
65655: LD_ADDR_VAR 0 11
65659: PUSH
65660: DOUBLE
65661: LD_INT 1
65663: DEC
65664: ST_TO_ADDR
65665: LD_VAR 0 6
65669: PUSH
65670: FOR_TO
65671: IFFALSE 65718
// begin vc_chassis := 31 ;
65673: LD_ADDR_OWVAR 37
65677: PUSH
65678: LD_INT 31
65680: ST_TO_ADDR
// vc_control := control_rider ;
65681: LD_ADDR_OWVAR 38
65685: PUSH
65686: LD_INT 4
65688: ST_TO_ADDR
// animal := CreateVehicle ;
65689: LD_ADDR_VAR 0 12
65693: PUSH
65694: CALL_OW 45
65698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65699: LD_VAR 0 12
65703: PPUSH
65704: LD_VAR 0 8
65708: PPUSH
65709: LD_INT 0
65711: PPUSH
65712: CALL 67848 0 3
// end ;
65716: GO 65670
65718: POP
65719: POP
// if horses then
65720: LD_VAR 0 5
65724: IFFALSE 65791
// for i = 1 to horses do
65726: LD_ADDR_VAR 0 11
65730: PUSH
65731: DOUBLE
65732: LD_INT 1
65734: DEC
65735: ST_TO_ADDR
65736: LD_VAR 0 5
65740: PUSH
65741: FOR_TO
65742: IFFALSE 65789
// begin hc_class := 21 ;
65744: LD_ADDR_OWVAR 28
65748: PUSH
65749: LD_INT 21
65751: ST_TO_ADDR
// hc_gallery :=  ;
65752: LD_ADDR_OWVAR 33
65756: PUSH
65757: LD_STRING 
65759: ST_TO_ADDR
// animal := CreateHuman ;
65760: LD_ADDR_VAR 0 12
65764: PUSH
65765: CALL_OW 44
65769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65770: LD_VAR 0 12
65774: PPUSH
65775: LD_VAR 0 8
65779: PPUSH
65780: LD_INT 0
65782: PPUSH
65783: CALL 67848 0 3
// end ;
65787: GO 65741
65789: POP
65790: POP
// if birds then
65791: LD_VAR 0 1
65795: IFFALSE 65862
// for i = 1 to birds do
65797: LD_ADDR_VAR 0 11
65801: PUSH
65802: DOUBLE
65803: LD_INT 1
65805: DEC
65806: ST_TO_ADDR
65807: LD_VAR 0 1
65811: PUSH
65812: FOR_TO
65813: IFFALSE 65860
// begin hc_class := 18 ;
65815: LD_ADDR_OWVAR 28
65819: PUSH
65820: LD_INT 18
65822: ST_TO_ADDR
// hc_gallery =  ;
65823: LD_ADDR_OWVAR 33
65827: PUSH
65828: LD_STRING 
65830: ST_TO_ADDR
// animal := CreateHuman ;
65831: LD_ADDR_VAR 0 12
65835: PUSH
65836: CALL_OW 44
65840: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65841: LD_VAR 0 12
65845: PPUSH
65846: LD_VAR 0 8
65850: PPUSH
65851: LD_INT 0
65853: PPUSH
65854: CALL 67848 0 3
// end ;
65858: GO 65812
65860: POP
65861: POP
// if tigers then
65862: LD_VAR 0 2
65866: IFFALSE 65950
// for i = 1 to tigers do
65868: LD_ADDR_VAR 0 11
65872: PUSH
65873: DOUBLE
65874: LD_INT 1
65876: DEC
65877: ST_TO_ADDR
65878: LD_VAR 0 2
65882: PUSH
65883: FOR_TO
65884: IFFALSE 65948
// begin hc_class = class_tiger ;
65886: LD_ADDR_OWVAR 28
65890: PUSH
65891: LD_INT 14
65893: ST_TO_ADDR
// hc_gallery =  ;
65894: LD_ADDR_OWVAR 33
65898: PUSH
65899: LD_STRING 
65901: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65902: LD_ADDR_OWVAR 35
65906: PUSH
65907: LD_INT 7
65909: NEG
65910: PPUSH
65911: LD_INT 7
65913: PPUSH
65914: CALL_OW 12
65918: ST_TO_ADDR
// animal := CreateHuman ;
65919: LD_ADDR_VAR 0 12
65923: PUSH
65924: CALL_OW 44
65928: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65929: LD_VAR 0 12
65933: PPUSH
65934: LD_VAR 0 8
65938: PPUSH
65939: LD_INT 0
65941: PPUSH
65942: CALL 67848 0 3
// end ;
65946: GO 65883
65948: POP
65949: POP
// if apemans then
65950: LD_VAR 0 3
65954: IFFALSE 66077
// for i = 1 to apemans do
65956: LD_ADDR_VAR 0 11
65960: PUSH
65961: DOUBLE
65962: LD_INT 1
65964: DEC
65965: ST_TO_ADDR
65966: LD_VAR 0 3
65970: PUSH
65971: FOR_TO
65972: IFFALSE 66075
// begin hc_class = class_apeman ;
65974: LD_ADDR_OWVAR 28
65978: PUSH
65979: LD_INT 12
65981: ST_TO_ADDR
// hc_gallery =  ;
65982: LD_ADDR_OWVAR 33
65986: PUSH
65987: LD_STRING 
65989: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65990: LD_ADDR_OWVAR 35
65994: PUSH
65995: LD_INT 2
65997: NEG
65998: PPUSH
65999: LD_INT 2
66001: PPUSH
66002: CALL_OW 12
66006: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66007: LD_ADDR_OWVAR 31
66011: PUSH
66012: LD_INT 1
66014: PPUSH
66015: LD_INT 3
66017: PPUSH
66018: CALL_OW 12
66022: PUSH
66023: LD_INT 1
66025: PPUSH
66026: LD_INT 3
66028: PPUSH
66029: CALL_OW 12
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: ST_TO_ADDR
// animal := CreateHuman ;
66046: LD_ADDR_VAR 0 12
66050: PUSH
66051: CALL_OW 44
66055: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66056: LD_VAR 0 12
66060: PPUSH
66061: LD_VAR 0 8
66065: PPUSH
66066: LD_INT 0
66068: PPUSH
66069: CALL 67848 0 3
// end ;
66073: GO 65971
66075: POP
66076: POP
// if enchidnas then
66077: LD_VAR 0 4
66081: IFFALSE 66148
// for i = 1 to enchidnas do
66083: LD_ADDR_VAR 0 11
66087: PUSH
66088: DOUBLE
66089: LD_INT 1
66091: DEC
66092: ST_TO_ADDR
66093: LD_VAR 0 4
66097: PUSH
66098: FOR_TO
66099: IFFALSE 66146
// begin hc_class = 13 ;
66101: LD_ADDR_OWVAR 28
66105: PUSH
66106: LD_INT 13
66108: ST_TO_ADDR
// hc_gallery =  ;
66109: LD_ADDR_OWVAR 33
66113: PUSH
66114: LD_STRING 
66116: ST_TO_ADDR
// animal := CreateHuman ;
66117: LD_ADDR_VAR 0 12
66121: PUSH
66122: CALL_OW 44
66126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66127: LD_VAR 0 12
66131: PPUSH
66132: LD_VAR 0 8
66136: PPUSH
66137: LD_INT 0
66139: PPUSH
66140: CALL 67848 0 3
// end ;
66144: GO 66098
66146: POP
66147: POP
// if fishes then
66148: LD_VAR 0 7
66152: IFFALSE 66219
// for i = 1 to fishes do
66154: LD_ADDR_VAR 0 11
66158: PUSH
66159: DOUBLE
66160: LD_INT 1
66162: DEC
66163: ST_TO_ADDR
66164: LD_VAR 0 7
66168: PUSH
66169: FOR_TO
66170: IFFALSE 66217
// begin hc_class = 20 ;
66172: LD_ADDR_OWVAR 28
66176: PUSH
66177: LD_INT 20
66179: ST_TO_ADDR
// hc_gallery =  ;
66180: LD_ADDR_OWVAR 33
66184: PUSH
66185: LD_STRING 
66187: ST_TO_ADDR
// animal := CreateHuman ;
66188: LD_ADDR_VAR 0 12
66192: PUSH
66193: CALL_OW 44
66197: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66198: LD_VAR 0 12
66202: PPUSH
66203: LD_VAR 0 9
66207: PPUSH
66208: LD_INT 0
66210: PPUSH
66211: CALL 67848 0 3
// end ;
66215: GO 66169
66217: POP
66218: POP
// end ;
66219: LD_VAR 0 10
66223: RET
// export function WantHeal ( sci , unit ) ; begin
66224: LD_INT 0
66226: PPUSH
// if GetTaskList ( sci ) > 0 then
66227: LD_VAR 0 1
66231: PPUSH
66232: CALL_OW 437
66236: PUSH
66237: LD_INT 0
66239: GREATER
66240: IFFALSE 66310
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66242: LD_VAR 0 1
66246: PPUSH
66247: CALL_OW 437
66251: PUSH
66252: LD_INT 1
66254: ARRAY
66255: PUSH
66256: LD_INT 1
66258: ARRAY
66259: PUSH
66260: LD_STRING l
66262: EQUAL
66263: PUSH
66264: LD_VAR 0 1
66268: PPUSH
66269: CALL_OW 437
66273: PUSH
66274: LD_INT 1
66276: ARRAY
66277: PUSH
66278: LD_INT 4
66280: ARRAY
66281: PUSH
66282: LD_VAR 0 2
66286: EQUAL
66287: AND
66288: IFFALSE 66300
// result := true else
66290: LD_ADDR_VAR 0 3
66294: PUSH
66295: LD_INT 1
66297: ST_TO_ADDR
66298: GO 66308
// result := false ;
66300: LD_ADDR_VAR 0 3
66304: PUSH
66305: LD_INT 0
66307: ST_TO_ADDR
// end else
66308: GO 66318
// result := false ;
66310: LD_ADDR_VAR 0 3
66314: PUSH
66315: LD_INT 0
66317: ST_TO_ADDR
// end ;
66318: LD_VAR 0 3
66322: RET
// export function HealTarget ( sci ) ; begin
66323: LD_INT 0
66325: PPUSH
// if not sci then
66326: LD_VAR 0 1
66330: NOT
66331: IFFALSE 66335
// exit ;
66333: GO 66400
// result := 0 ;
66335: LD_ADDR_VAR 0 2
66339: PUSH
66340: LD_INT 0
66342: ST_TO_ADDR
// if GetTaskList ( sci ) then
66343: LD_VAR 0 1
66347: PPUSH
66348: CALL_OW 437
66352: IFFALSE 66400
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66354: LD_VAR 0 1
66358: PPUSH
66359: CALL_OW 437
66363: PUSH
66364: LD_INT 1
66366: ARRAY
66367: PUSH
66368: LD_INT 1
66370: ARRAY
66371: PUSH
66372: LD_STRING l
66374: EQUAL
66375: IFFALSE 66400
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66377: LD_ADDR_VAR 0 2
66381: PUSH
66382: LD_VAR 0 1
66386: PPUSH
66387: CALL_OW 437
66391: PUSH
66392: LD_INT 1
66394: ARRAY
66395: PUSH
66396: LD_INT 4
66398: ARRAY
66399: ST_TO_ADDR
// end ;
66400: LD_VAR 0 2
66404: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66405: LD_INT 0
66407: PPUSH
66408: PPUSH
66409: PPUSH
66410: PPUSH
// if not base_units then
66411: LD_VAR 0 1
66415: NOT
66416: IFFALSE 66420
// exit ;
66418: GO 66507
// result := false ;
66420: LD_ADDR_VAR 0 2
66424: PUSH
66425: LD_INT 0
66427: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66428: LD_ADDR_VAR 0 5
66432: PUSH
66433: LD_VAR 0 1
66437: PPUSH
66438: LD_INT 21
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PPUSH
66448: CALL_OW 72
66452: ST_TO_ADDR
// if not tmp then
66453: LD_VAR 0 5
66457: NOT
66458: IFFALSE 66462
// exit ;
66460: GO 66507
// for i in tmp do
66462: LD_ADDR_VAR 0 3
66466: PUSH
66467: LD_VAR 0 5
66471: PUSH
66472: FOR_IN
66473: IFFALSE 66505
// begin result := EnemyInRange ( i , 22 ) ;
66475: LD_ADDR_VAR 0 2
66479: PUSH
66480: LD_VAR 0 3
66484: PPUSH
66485: LD_INT 22
66487: PPUSH
66488: CALL 64094 0 2
66492: ST_TO_ADDR
// if result then
66493: LD_VAR 0 2
66497: IFFALSE 66503
// exit ;
66499: POP
66500: POP
66501: GO 66507
// end ;
66503: GO 66472
66505: POP
66506: POP
// end ;
66507: LD_VAR 0 2
66511: RET
// export function FilterByTag ( units , tag ) ; begin
66512: LD_INT 0
66514: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66515: LD_ADDR_VAR 0 3
66519: PUSH
66520: LD_VAR 0 1
66524: PPUSH
66525: LD_INT 120
66527: PUSH
66528: LD_VAR 0 2
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PPUSH
66537: CALL_OW 72
66541: ST_TO_ADDR
// end ;
66542: LD_VAR 0 3
66546: RET
// export function IsDriver ( un ) ; begin
66547: LD_INT 0
66549: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66550: LD_ADDR_VAR 0 2
66554: PUSH
66555: LD_VAR 0 1
66559: PUSH
66560: LD_INT 55
66562: PUSH
66563: EMPTY
66564: LIST
66565: PPUSH
66566: CALL_OW 69
66570: IN
66571: ST_TO_ADDR
// end ;
66572: LD_VAR 0 2
66576: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66577: LD_INT 0
66579: PPUSH
66580: PPUSH
// list := [ ] ;
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: EMPTY
66587: ST_TO_ADDR
// case d of 0 :
66588: LD_VAR 0 3
66592: PUSH
66593: LD_INT 0
66595: DOUBLE
66596: EQUAL
66597: IFTRUE 66601
66599: GO 66734
66601: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66602: LD_ADDR_VAR 0 5
66606: PUSH
66607: LD_VAR 0 1
66611: PUSH
66612: LD_INT 4
66614: MINUS
66615: PUSH
66616: LD_VAR 0 2
66620: PUSH
66621: LD_INT 4
66623: MINUS
66624: PUSH
66625: LD_INT 2
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: PUSH
66633: LD_VAR 0 1
66637: PUSH
66638: LD_INT 3
66640: MINUS
66641: PUSH
66642: LD_VAR 0 2
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: PUSH
66655: LD_VAR 0 1
66659: PUSH
66660: LD_INT 4
66662: PLUS
66663: PUSH
66664: LD_VAR 0 2
66668: PUSH
66669: LD_INT 4
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: PUSH
66677: LD_VAR 0 1
66681: PUSH
66682: LD_INT 3
66684: PLUS
66685: PUSH
66686: LD_VAR 0 2
66690: PUSH
66691: LD_INT 3
66693: PLUS
66694: PUSH
66695: LD_INT 5
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: PUSH
66703: LD_VAR 0 1
66707: PUSH
66708: LD_VAR 0 2
66712: PUSH
66713: LD_INT 4
66715: PLUS
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: LIST
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: ST_TO_ADDR
// end ; 1 :
66732: GO 67432
66734: LD_INT 1
66736: DOUBLE
66737: EQUAL
66738: IFTRUE 66742
66740: GO 66875
66742: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66743: LD_ADDR_VAR 0 5
66747: PUSH
66748: LD_VAR 0 1
66752: PUSH
66753: LD_VAR 0 2
66757: PUSH
66758: LD_INT 4
66760: MINUS
66761: PUSH
66762: LD_INT 3
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: PUSH
66770: LD_VAR 0 1
66774: PUSH
66775: LD_INT 3
66777: MINUS
66778: PUSH
66779: LD_VAR 0 2
66783: PUSH
66784: LD_INT 3
66786: MINUS
66787: PUSH
66788: LD_INT 2
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: PUSH
66796: LD_VAR 0 1
66800: PUSH
66801: LD_INT 4
66803: MINUS
66804: PUSH
66805: LD_VAR 0 2
66809: PUSH
66810: LD_INT 1
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: LIST
66817: PUSH
66818: LD_VAR 0 1
66822: PUSH
66823: LD_VAR 0 2
66827: PUSH
66828: LD_INT 3
66830: PLUS
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: LIST
66839: PUSH
66840: LD_VAR 0 1
66844: PUSH
66845: LD_INT 4
66847: PLUS
66848: PUSH
66849: LD_VAR 0 2
66853: PUSH
66854: LD_INT 4
66856: PLUS
66857: PUSH
66858: LD_INT 5
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: LIST
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: ST_TO_ADDR
// end ; 2 :
66873: GO 67432
66875: LD_INT 2
66877: DOUBLE
66878: EQUAL
66879: IFTRUE 66883
66881: GO 67012
66883: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66884: LD_ADDR_VAR 0 5
66888: PUSH
66889: LD_VAR 0 1
66893: PUSH
66894: LD_VAR 0 2
66898: PUSH
66899: LD_INT 3
66901: MINUS
66902: PUSH
66903: LD_INT 3
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: PUSH
66911: LD_VAR 0 1
66915: PUSH
66916: LD_INT 4
66918: PLUS
66919: PUSH
66920: LD_VAR 0 2
66924: PUSH
66925: LD_INT 4
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: PUSH
66933: LD_VAR 0 1
66937: PUSH
66938: LD_VAR 0 2
66942: PUSH
66943: LD_INT 4
66945: PLUS
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: LIST
66954: PUSH
66955: LD_VAR 0 1
66959: PUSH
66960: LD_INT 3
66962: MINUS
66963: PUSH
66964: LD_VAR 0 2
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: PUSH
66977: LD_VAR 0 1
66981: PUSH
66982: LD_INT 4
66984: MINUS
66985: PUSH
66986: LD_VAR 0 2
66990: PUSH
66991: LD_INT 4
66993: MINUS
66994: PUSH
66995: LD_INT 2
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: LIST
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// end ; 3 :
67010: GO 67432
67012: LD_INT 3
67014: DOUBLE
67015: EQUAL
67016: IFTRUE 67020
67018: GO 67153
67020: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67021: LD_ADDR_VAR 0 5
67025: PUSH
67026: LD_VAR 0 1
67030: PUSH
67031: LD_INT 3
67033: PLUS
67034: PUSH
67035: LD_VAR 0 2
67039: PUSH
67040: LD_INT 4
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: PUSH
67048: LD_VAR 0 1
67052: PUSH
67053: LD_INT 4
67055: PLUS
67056: PUSH
67057: LD_VAR 0 2
67061: PUSH
67062: LD_INT 4
67064: PLUS
67065: PUSH
67066: LD_INT 5
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: PUSH
67074: LD_VAR 0 1
67078: PUSH
67079: LD_INT 4
67081: MINUS
67082: PUSH
67083: LD_VAR 0 2
67087: PUSH
67088: LD_INT 1
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: LIST
67095: PUSH
67096: LD_VAR 0 1
67100: PUSH
67101: LD_VAR 0 2
67105: PUSH
67106: LD_INT 4
67108: MINUS
67109: PUSH
67110: LD_INT 3
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: LIST
67117: PUSH
67118: LD_VAR 0 1
67122: PUSH
67123: LD_INT 3
67125: MINUS
67126: PUSH
67127: LD_VAR 0 2
67131: PUSH
67132: LD_INT 3
67134: MINUS
67135: PUSH
67136: LD_INT 2
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: ST_TO_ADDR
// end ; 4 :
67151: GO 67432
67153: LD_INT 4
67155: DOUBLE
67156: EQUAL
67157: IFTRUE 67161
67159: GO 67294
67161: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67162: LD_ADDR_VAR 0 5
67166: PUSH
67167: LD_VAR 0 1
67171: PUSH
67172: LD_VAR 0 2
67176: PUSH
67177: LD_INT 4
67179: PLUS
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: LIST
67188: PUSH
67189: LD_VAR 0 1
67193: PUSH
67194: LD_INT 3
67196: PLUS
67197: PUSH
67198: LD_VAR 0 2
67202: PUSH
67203: LD_INT 3
67205: PLUS
67206: PUSH
67207: LD_INT 5
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: LIST
67214: PUSH
67215: LD_VAR 0 1
67219: PUSH
67220: LD_INT 4
67222: PLUS
67223: PUSH
67224: LD_VAR 0 2
67228: PUSH
67229: LD_INT 4
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: LIST
67236: PUSH
67237: LD_VAR 0 1
67241: PUSH
67242: LD_VAR 0 2
67246: PUSH
67247: LD_INT 3
67249: MINUS
67250: PUSH
67251: LD_INT 3
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: LIST
67258: PUSH
67259: LD_VAR 0 1
67263: PUSH
67264: LD_INT 4
67266: MINUS
67267: PUSH
67268: LD_VAR 0 2
67272: PUSH
67273: LD_INT 4
67275: MINUS
67276: PUSH
67277: LD_INT 2
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: LIST
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: ST_TO_ADDR
// end ; 5 :
67292: GO 67432
67294: LD_INT 5
67296: DOUBLE
67297: EQUAL
67298: IFTRUE 67302
67300: GO 67431
67302: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67303: LD_ADDR_VAR 0 5
67307: PUSH
67308: LD_VAR 0 1
67312: PUSH
67313: LD_INT 4
67315: MINUS
67316: PUSH
67317: LD_VAR 0 2
67321: PUSH
67322: LD_INT 1
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: LIST
67329: PUSH
67330: LD_VAR 0 1
67334: PUSH
67335: LD_VAR 0 2
67339: PUSH
67340: LD_INT 4
67342: MINUS
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: PUSH
67352: LD_VAR 0 1
67356: PUSH
67357: LD_INT 4
67359: PLUS
67360: PUSH
67361: LD_VAR 0 2
67365: PUSH
67366: LD_INT 4
67368: PLUS
67369: PUSH
67370: LD_INT 5
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: LIST
67377: PUSH
67378: LD_VAR 0 1
67382: PUSH
67383: LD_INT 3
67385: PLUS
67386: PUSH
67387: LD_VAR 0 2
67391: PUSH
67392: LD_INT 4
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: LIST
67399: PUSH
67400: LD_VAR 0 1
67404: PUSH
67405: LD_VAR 0 2
67409: PUSH
67410: LD_INT 3
67412: PLUS
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: ST_TO_ADDR
// end ; end ;
67429: GO 67432
67431: POP
// result := list ;
67432: LD_ADDR_VAR 0 4
67436: PUSH
67437: LD_VAR 0 5
67441: ST_TO_ADDR
// end ;
67442: LD_VAR 0 4
67446: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67447: LD_INT 0
67449: PPUSH
67450: PPUSH
67451: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67452: LD_VAR 0 1
67456: NOT
67457: PUSH
67458: LD_VAR 0 2
67462: PUSH
67463: LD_INT 1
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: LD_INT 3
67471: PUSH
67472: LD_INT 4
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: IN
67481: NOT
67482: OR
67483: IFFALSE 67487
// exit ;
67485: GO 67570
// tmp := [ ] ;
67487: LD_ADDR_VAR 0 5
67491: PUSH
67492: EMPTY
67493: ST_TO_ADDR
// for i in units do
67494: LD_ADDR_VAR 0 4
67498: PUSH
67499: LD_VAR 0 1
67503: PUSH
67504: FOR_IN
67505: IFFALSE 67539
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67507: LD_ADDR_VAR 0 5
67511: PUSH
67512: LD_VAR 0 5
67516: PPUSH
67517: LD_VAR 0 4
67521: PPUSH
67522: LD_VAR 0 2
67526: PPUSH
67527: CALL_OW 259
67531: PPUSH
67532: CALL 68943 0 2
67536: ST_TO_ADDR
67537: GO 67504
67539: POP
67540: POP
// if not tmp then
67541: LD_VAR 0 5
67545: NOT
67546: IFFALSE 67550
// exit ;
67548: GO 67570
// result := SortListByListDesc ( units , tmp ) ;
67550: LD_ADDR_VAR 0 3
67554: PUSH
67555: LD_VAR 0 1
67559: PPUSH
67560: LD_VAR 0 5
67564: PPUSH
67565: CALL_OW 77
67569: ST_TO_ADDR
// end ;
67570: LD_VAR 0 3
67574: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67575: LD_INT 0
67577: PPUSH
67578: PPUSH
67579: PPUSH
// result := false ;
67580: LD_ADDR_VAR 0 3
67584: PUSH
67585: LD_INT 0
67587: ST_TO_ADDR
// if not building then
67588: LD_VAR 0 2
67592: NOT
67593: IFFALSE 67597
// exit ;
67595: GO 67735
// x := GetX ( building ) ;
67597: LD_ADDR_VAR 0 4
67601: PUSH
67602: LD_VAR 0 2
67606: PPUSH
67607: CALL_OW 250
67611: ST_TO_ADDR
// y := GetY ( building ) ;
67612: LD_ADDR_VAR 0 5
67616: PUSH
67617: LD_VAR 0 2
67621: PPUSH
67622: CALL_OW 251
67626: ST_TO_ADDR
// if not x or not y then
67627: LD_VAR 0 4
67631: NOT
67632: PUSH
67633: LD_VAR 0 5
67637: NOT
67638: OR
67639: IFFALSE 67643
// exit ;
67641: GO 67735
// if GetTaskList ( unit ) then
67643: LD_VAR 0 1
67647: PPUSH
67648: CALL_OW 437
67652: IFFALSE 67735
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67654: LD_STRING e
67656: PUSH
67657: LD_VAR 0 1
67661: PPUSH
67662: CALL_OW 437
67666: PUSH
67667: LD_INT 1
67669: ARRAY
67670: PUSH
67671: LD_INT 1
67673: ARRAY
67674: EQUAL
67675: PUSH
67676: LD_VAR 0 4
67680: PUSH
67681: LD_VAR 0 1
67685: PPUSH
67686: CALL_OW 437
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PUSH
67695: LD_INT 2
67697: ARRAY
67698: EQUAL
67699: AND
67700: PUSH
67701: LD_VAR 0 5
67705: PUSH
67706: LD_VAR 0 1
67710: PPUSH
67711: CALL_OW 437
67715: PUSH
67716: LD_INT 1
67718: ARRAY
67719: PUSH
67720: LD_INT 3
67722: ARRAY
67723: EQUAL
67724: AND
67725: IFFALSE 67735
// result := true end ;
67727: LD_ADDR_VAR 0 3
67731: PUSH
67732: LD_INT 1
67734: ST_TO_ADDR
// end ;
67735: LD_VAR 0 3
67739: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67740: LD_INT 0
67742: PPUSH
// result := false ;
67743: LD_ADDR_VAR 0 4
67747: PUSH
67748: LD_INT 0
67750: ST_TO_ADDR
// if GetTaskList ( unit ) then
67751: LD_VAR 0 1
67755: PPUSH
67756: CALL_OW 437
67760: IFFALSE 67843
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67762: LD_STRING M
67764: PUSH
67765: LD_VAR 0 1
67769: PPUSH
67770: CALL_OW 437
67774: PUSH
67775: LD_INT 1
67777: ARRAY
67778: PUSH
67779: LD_INT 1
67781: ARRAY
67782: EQUAL
67783: PUSH
67784: LD_VAR 0 2
67788: PUSH
67789: LD_VAR 0 1
67793: PPUSH
67794: CALL_OW 437
67798: PUSH
67799: LD_INT 1
67801: ARRAY
67802: PUSH
67803: LD_INT 2
67805: ARRAY
67806: EQUAL
67807: AND
67808: PUSH
67809: LD_VAR 0 3
67813: PUSH
67814: LD_VAR 0 1
67818: PPUSH
67819: CALL_OW 437
67823: PUSH
67824: LD_INT 1
67826: ARRAY
67827: PUSH
67828: LD_INT 3
67830: ARRAY
67831: EQUAL
67832: AND
67833: IFFALSE 67843
// result := true ;
67835: LD_ADDR_VAR 0 4
67839: PUSH
67840: LD_INT 1
67842: ST_TO_ADDR
// end ; end ;
67843: LD_VAR 0 4
67847: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67848: LD_INT 0
67850: PPUSH
67851: PPUSH
67852: PPUSH
67853: PPUSH
// if not unit or not area then
67854: LD_VAR 0 1
67858: NOT
67859: PUSH
67860: LD_VAR 0 2
67864: NOT
67865: OR
67866: IFFALSE 67870
// exit ;
67868: GO 68046
// tmp := AreaToList ( area , i ) ;
67870: LD_ADDR_VAR 0 6
67874: PUSH
67875: LD_VAR 0 2
67879: PPUSH
67880: LD_VAR 0 5
67884: PPUSH
67885: CALL_OW 517
67889: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67890: LD_ADDR_VAR 0 5
67894: PUSH
67895: DOUBLE
67896: LD_INT 1
67898: DEC
67899: ST_TO_ADDR
67900: LD_VAR 0 6
67904: PUSH
67905: LD_INT 1
67907: ARRAY
67908: PUSH
67909: FOR_TO
67910: IFFALSE 68044
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67912: LD_ADDR_VAR 0 7
67916: PUSH
67917: LD_VAR 0 6
67921: PUSH
67922: LD_INT 1
67924: ARRAY
67925: PUSH
67926: LD_VAR 0 5
67930: ARRAY
67931: PUSH
67932: LD_VAR 0 6
67936: PUSH
67937: LD_INT 2
67939: ARRAY
67940: PUSH
67941: LD_VAR 0 5
67945: ARRAY
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67951: LD_INT 92
67953: PUSH
67954: LD_VAR 0 7
67958: PUSH
67959: LD_INT 1
67961: ARRAY
67962: PUSH
67963: LD_VAR 0 7
67967: PUSH
67968: LD_INT 2
67970: ARRAY
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: PPUSH
67981: CALL_OW 69
67985: PUSH
67986: LD_INT 0
67988: EQUAL
67989: IFFALSE 68042
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67991: LD_VAR 0 1
67995: PPUSH
67996: LD_VAR 0 7
68000: PUSH
68001: LD_INT 1
68003: ARRAY
68004: PPUSH
68005: LD_VAR 0 7
68009: PUSH
68010: LD_INT 2
68012: ARRAY
68013: PPUSH
68014: LD_VAR 0 3
68018: PPUSH
68019: CALL_OW 48
// result := IsPlaced ( unit ) ;
68023: LD_ADDR_VAR 0 4
68027: PUSH
68028: LD_VAR 0 1
68032: PPUSH
68033: CALL_OW 305
68037: ST_TO_ADDR
// exit ;
68038: POP
68039: POP
68040: GO 68046
// end ; end ;
68042: GO 67909
68044: POP
68045: POP
// end ;
68046: LD_VAR 0 4
68050: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68051: LD_INT 0
68053: PPUSH
68054: PPUSH
68055: PPUSH
// if not side or side > 8 then
68056: LD_VAR 0 1
68060: NOT
68061: PUSH
68062: LD_VAR 0 1
68066: PUSH
68067: LD_INT 8
68069: GREATER
68070: OR
68071: IFFALSE 68075
// exit ;
68073: GO 68262
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68075: LD_ADDR_VAR 0 4
68079: PUSH
68080: LD_INT 22
68082: PUSH
68083: LD_VAR 0 1
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 21
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PPUSH
68106: CALL_OW 69
68110: ST_TO_ADDR
// if not tmp then
68111: LD_VAR 0 4
68115: NOT
68116: IFFALSE 68120
// exit ;
68118: GO 68262
// enable_addtolog := true ;
68120: LD_ADDR_OWVAR 81
68124: PUSH
68125: LD_INT 1
68127: ST_TO_ADDR
// AddToLog ( [ ) ;
68128: LD_STRING [
68130: PPUSH
68131: CALL_OW 561
// for i in tmp do
68135: LD_ADDR_VAR 0 3
68139: PUSH
68140: LD_VAR 0 4
68144: PUSH
68145: FOR_IN
68146: IFFALSE 68253
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68148: LD_STRING [
68150: PUSH
68151: LD_VAR 0 3
68155: PPUSH
68156: CALL_OW 266
68160: STR
68161: PUSH
68162: LD_STRING , 
68164: STR
68165: PUSH
68166: LD_VAR 0 3
68170: PPUSH
68171: CALL_OW 250
68175: STR
68176: PUSH
68177: LD_STRING , 
68179: STR
68180: PUSH
68181: LD_VAR 0 3
68185: PPUSH
68186: CALL_OW 251
68190: STR
68191: PUSH
68192: LD_STRING , 
68194: STR
68195: PUSH
68196: LD_VAR 0 3
68200: PPUSH
68201: CALL_OW 254
68205: STR
68206: PUSH
68207: LD_STRING , 
68209: STR
68210: PUSH
68211: LD_VAR 0 3
68215: PPUSH
68216: LD_INT 1
68218: PPUSH
68219: CALL_OW 268
68223: STR
68224: PUSH
68225: LD_STRING , 
68227: STR
68228: PUSH
68229: LD_VAR 0 3
68233: PPUSH
68234: LD_INT 2
68236: PPUSH
68237: CALL_OW 268
68241: STR
68242: PUSH
68243: LD_STRING ],
68245: STR
68246: PPUSH
68247: CALL_OW 561
// end ;
68251: GO 68145
68253: POP
68254: POP
// AddToLog ( ]; ) ;
68255: LD_STRING ];
68257: PPUSH
68258: CALL_OW 561
// end ;
68262: LD_VAR 0 2
68266: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68267: LD_INT 0
68269: PPUSH
68270: PPUSH
68271: PPUSH
68272: PPUSH
68273: PPUSH
// if not area or not rate or not max then
68274: LD_VAR 0 1
68278: NOT
68279: PUSH
68280: LD_VAR 0 2
68284: NOT
68285: OR
68286: PUSH
68287: LD_VAR 0 4
68291: NOT
68292: OR
68293: IFFALSE 68297
// exit ;
68295: GO 68486
// while 1 do
68297: LD_INT 1
68299: IFFALSE 68486
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68301: LD_ADDR_VAR 0 9
68305: PUSH
68306: LD_VAR 0 1
68310: PPUSH
68311: LD_INT 1
68313: PPUSH
68314: CALL_OW 287
68318: PUSH
68319: LD_INT 10
68321: MUL
68322: ST_TO_ADDR
// r := rate / 10 ;
68323: LD_ADDR_VAR 0 7
68327: PUSH
68328: LD_VAR 0 2
68332: PUSH
68333: LD_INT 10
68335: DIVREAL
68336: ST_TO_ADDR
// time := 1 1$00 ;
68337: LD_ADDR_VAR 0 8
68341: PUSH
68342: LD_INT 2100
68344: ST_TO_ADDR
// if amount < min then
68345: LD_VAR 0 9
68349: PUSH
68350: LD_VAR 0 3
68354: LESS
68355: IFFALSE 68373
// r := r * 2 else
68357: LD_ADDR_VAR 0 7
68361: PUSH
68362: LD_VAR 0 7
68366: PUSH
68367: LD_INT 2
68369: MUL
68370: ST_TO_ADDR
68371: GO 68399
// if amount > max then
68373: LD_VAR 0 9
68377: PUSH
68378: LD_VAR 0 4
68382: GREATER
68383: IFFALSE 68399
// r := r / 2 ;
68385: LD_ADDR_VAR 0 7
68389: PUSH
68390: LD_VAR 0 7
68394: PUSH
68395: LD_INT 2
68397: DIVREAL
68398: ST_TO_ADDR
// time := time / r ;
68399: LD_ADDR_VAR 0 8
68403: PUSH
68404: LD_VAR 0 8
68408: PUSH
68409: LD_VAR 0 7
68413: DIVREAL
68414: ST_TO_ADDR
// if time < 0 then
68415: LD_VAR 0 8
68419: PUSH
68420: LD_INT 0
68422: LESS
68423: IFFALSE 68440
// time := time * - 1 ;
68425: LD_ADDR_VAR 0 8
68429: PUSH
68430: LD_VAR 0 8
68434: PUSH
68435: LD_INT 1
68437: NEG
68438: MUL
68439: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68440: LD_VAR 0 8
68444: PUSH
68445: LD_INT 35
68447: PPUSH
68448: LD_INT 875
68450: PPUSH
68451: CALL_OW 12
68455: PLUS
68456: PPUSH
68457: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68461: LD_INT 1
68463: PPUSH
68464: LD_INT 5
68466: PPUSH
68467: CALL_OW 12
68471: PPUSH
68472: LD_VAR 0 1
68476: PPUSH
68477: LD_INT 1
68479: PPUSH
68480: CALL_OW 55
// end ;
68484: GO 68297
// end ;
68486: LD_VAR 0 5
68490: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68491: LD_INT 0
68493: PPUSH
68494: PPUSH
68495: PPUSH
68496: PPUSH
68497: PPUSH
68498: PPUSH
68499: PPUSH
68500: PPUSH
// if not turrets or not factories then
68501: LD_VAR 0 1
68505: NOT
68506: PUSH
68507: LD_VAR 0 2
68511: NOT
68512: OR
68513: IFFALSE 68517
// exit ;
68515: GO 68824
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68517: LD_ADDR_VAR 0 10
68521: PUSH
68522: LD_INT 5
68524: PUSH
68525: LD_INT 6
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 2
68534: PUSH
68535: LD_INT 4
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 3
68544: PUSH
68545: LD_INT 5
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 24
68559: PUSH
68560: LD_INT 25
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 23
68569: PUSH
68570: LD_INT 27
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 42
68583: PUSH
68584: LD_INT 43
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 44
68593: PUSH
68594: LD_INT 46
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 45
68603: PUSH
68604: LD_INT 47
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: LIST
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: LIST
68620: ST_TO_ADDR
// result := [ ] ;
68621: LD_ADDR_VAR 0 3
68625: PUSH
68626: EMPTY
68627: ST_TO_ADDR
// for i in turrets do
68628: LD_ADDR_VAR 0 4
68632: PUSH
68633: LD_VAR 0 1
68637: PUSH
68638: FOR_IN
68639: IFFALSE 68822
// begin nat := GetNation ( i ) ;
68641: LD_ADDR_VAR 0 7
68645: PUSH
68646: LD_VAR 0 4
68650: PPUSH
68651: CALL_OW 248
68655: ST_TO_ADDR
// weapon := 0 ;
68656: LD_ADDR_VAR 0 8
68660: PUSH
68661: LD_INT 0
68663: ST_TO_ADDR
// if not nat then
68664: LD_VAR 0 7
68668: NOT
68669: IFFALSE 68673
// continue ;
68671: GO 68638
// for j in list [ nat ] do
68673: LD_ADDR_VAR 0 5
68677: PUSH
68678: LD_VAR 0 10
68682: PUSH
68683: LD_VAR 0 7
68687: ARRAY
68688: PUSH
68689: FOR_IN
68690: IFFALSE 68731
// if GetBWeapon ( i ) = j [ 1 ] then
68692: LD_VAR 0 4
68696: PPUSH
68697: CALL_OW 269
68701: PUSH
68702: LD_VAR 0 5
68706: PUSH
68707: LD_INT 1
68709: ARRAY
68710: EQUAL
68711: IFFALSE 68729
// begin weapon := j [ 2 ] ;
68713: LD_ADDR_VAR 0 8
68717: PUSH
68718: LD_VAR 0 5
68722: PUSH
68723: LD_INT 2
68725: ARRAY
68726: ST_TO_ADDR
// break ;
68727: GO 68731
// end ;
68729: GO 68689
68731: POP
68732: POP
// if not weapon then
68733: LD_VAR 0 8
68737: NOT
68738: IFFALSE 68742
// continue ;
68740: GO 68638
// for k in factories do
68742: LD_ADDR_VAR 0 6
68746: PUSH
68747: LD_VAR 0 2
68751: PUSH
68752: FOR_IN
68753: IFFALSE 68818
// begin weapons := AvailableWeaponList ( k ) ;
68755: LD_ADDR_VAR 0 9
68759: PUSH
68760: LD_VAR 0 6
68764: PPUSH
68765: CALL_OW 478
68769: ST_TO_ADDR
// if not weapons then
68770: LD_VAR 0 9
68774: NOT
68775: IFFALSE 68779
// continue ;
68777: GO 68752
// if weapon in weapons then
68779: LD_VAR 0 8
68783: PUSH
68784: LD_VAR 0 9
68788: IN
68789: IFFALSE 68816
// begin result := [ i , weapon ] ;
68791: LD_ADDR_VAR 0 3
68795: PUSH
68796: LD_VAR 0 4
68800: PUSH
68801: LD_VAR 0 8
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: ST_TO_ADDR
// exit ;
68810: POP
68811: POP
68812: POP
68813: POP
68814: GO 68824
// end ; end ;
68816: GO 68752
68818: POP
68819: POP
// end ;
68820: GO 68638
68822: POP
68823: POP
// end ;
68824: LD_VAR 0 3
68828: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68829: LD_INT 0
68831: PPUSH
// if not side or side > 8 then
68832: LD_VAR 0 3
68836: NOT
68837: PUSH
68838: LD_VAR 0 3
68842: PUSH
68843: LD_INT 8
68845: GREATER
68846: OR
68847: IFFALSE 68851
// exit ;
68849: GO 68910
// if not range then
68851: LD_VAR 0 4
68855: NOT
68856: IFFALSE 68867
// range := - 12 ;
68858: LD_ADDR_VAR 0 4
68862: PUSH
68863: LD_INT 12
68865: NEG
68866: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68867: LD_VAR 0 1
68871: PPUSH
68872: LD_VAR 0 2
68876: PPUSH
68877: LD_VAR 0 3
68881: PPUSH
68882: LD_VAR 0 4
68886: PPUSH
68887: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68891: LD_VAR 0 1
68895: PPUSH
68896: LD_VAR 0 2
68900: PPUSH
68901: LD_VAR 0 3
68905: PPUSH
68906: CALL_OW 331
// end ;
68910: LD_VAR 0 5
68914: RET
// export function Video ( mode ) ; begin
68915: LD_INT 0
68917: PPUSH
// ingame_video = mode ;
68918: LD_ADDR_OWVAR 52
68922: PUSH
68923: LD_VAR 0 1
68927: ST_TO_ADDR
// interface_hidden = mode ;
68928: LD_ADDR_OWVAR 54
68932: PUSH
68933: LD_VAR 0 1
68937: ST_TO_ADDR
// end ;
68938: LD_VAR 0 2
68942: RET
// export function Join ( array , element ) ; begin
68943: LD_INT 0
68945: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68946: LD_ADDR_VAR 0 3
68950: PUSH
68951: LD_VAR 0 1
68955: PPUSH
68956: LD_VAR 0 1
68960: PUSH
68961: LD_INT 1
68963: PLUS
68964: PPUSH
68965: LD_VAR 0 2
68969: PPUSH
68970: CALL_OW 1
68974: ST_TO_ADDR
// end ;
68975: LD_VAR 0 3
68979: RET
// export function JoinUnion ( array , element ) ; begin
68980: LD_INT 0
68982: PPUSH
// result := array union element ;
68983: LD_ADDR_VAR 0 3
68987: PUSH
68988: LD_VAR 0 1
68992: PUSH
68993: LD_VAR 0 2
68997: UNION
68998: ST_TO_ADDR
// end ;
68999: LD_VAR 0 3
69003: RET
// export function GetBehemoths ( side ) ; begin
69004: LD_INT 0
69006: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69007: LD_ADDR_VAR 0 2
69011: PUSH
69012: LD_INT 22
69014: PUSH
69015: LD_VAR 0 1
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 31
69026: PUSH
69027: LD_INT 25
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PPUSH
69038: CALL_OW 69
69042: ST_TO_ADDR
// end ;
69043: LD_VAR 0 2
69047: RET
// export function Shuffle ( array ) ; var i , index ; begin
69048: LD_INT 0
69050: PPUSH
69051: PPUSH
69052: PPUSH
// result := [ ] ;
69053: LD_ADDR_VAR 0 2
69057: PUSH
69058: EMPTY
69059: ST_TO_ADDR
// if not array then
69060: LD_VAR 0 1
69064: NOT
69065: IFFALSE 69069
// exit ;
69067: GO 69168
// Randomize ;
69069: CALL_OW 10
// for i = array downto 1 do
69073: LD_ADDR_VAR 0 3
69077: PUSH
69078: DOUBLE
69079: LD_VAR 0 1
69083: INC
69084: ST_TO_ADDR
69085: LD_INT 1
69087: PUSH
69088: FOR_DOWNTO
69089: IFFALSE 69166
// begin index := rand ( 1 , array ) ;
69091: LD_ADDR_VAR 0 4
69095: PUSH
69096: LD_INT 1
69098: PPUSH
69099: LD_VAR 0 1
69103: PPUSH
69104: CALL_OW 12
69108: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69109: LD_ADDR_VAR 0 2
69113: PUSH
69114: LD_VAR 0 2
69118: PPUSH
69119: LD_VAR 0 2
69123: PUSH
69124: LD_INT 1
69126: PLUS
69127: PPUSH
69128: LD_VAR 0 1
69132: PUSH
69133: LD_VAR 0 4
69137: ARRAY
69138: PPUSH
69139: CALL_OW 2
69143: ST_TO_ADDR
// array := Delete ( array , index ) ;
69144: LD_ADDR_VAR 0 1
69148: PUSH
69149: LD_VAR 0 1
69153: PPUSH
69154: LD_VAR 0 4
69158: PPUSH
69159: CALL_OW 3
69163: ST_TO_ADDR
// end ;
69164: GO 69088
69166: POP
69167: POP
// end ;
69168: LD_VAR 0 2
69172: RET
// export function GetBaseMaterials ( base ) ; begin
69173: LD_INT 0
69175: PPUSH
// result := [ 0 , 0 , 0 ] ;
69176: LD_ADDR_VAR 0 2
69180: PUSH
69181: LD_INT 0
69183: PUSH
69184: LD_INT 0
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: LIST
69194: ST_TO_ADDR
// if not base then
69195: LD_VAR 0 1
69199: NOT
69200: IFFALSE 69204
// exit ;
69202: GO 69253
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69204: LD_ADDR_VAR 0 2
69208: PUSH
69209: LD_VAR 0 1
69213: PPUSH
69214: LD_INT 1
69216: PPUSH
69217: CALL_OW 275
69221: PUSH
69222: LD_VAR 0 1
69226: PPUSH
69227: LD_INT 2
69229: PPUSH
69230: CALL_OW 275
69234: PUSH
69235: LD_VAR 0 1
69239: PPUSH
69240: LD_INT 3
69242: PPUSH
69243: CALL_OW 275
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: LIST
69252: ST_TO_ADDR
// end ;
69253: LD_VAR 0 2
69257: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69258: LD_INT 0
69260: PPUSH
69261: PPUSH
// result := array ;
69262: LD_ADDR_VAR 0 3
69266: PUSH
69267: LD_VAR 0 1
69271: ST_TO_ADDR
// if size >= result then
69272: LD_VAR 0 2
69276: PUSH
69277: LD_VAR 0 3
69281: GREATEREQUAL
69282: IFFALSE 69286
// exit ;
69284: GO 69336
// if size then
69286: LD_VAR 0 2
69290: IFFALSE 69336
// for i := array downto size do
69292: LD_ADDR_VAR 0 4
69296: PUSH
69297: DOUBLE
69298: LD_VAR 0 1
69302: INC
69303: ST_TO_ADDR
69304: LD_VAR 0 2
69308: PUSH
69309: FOR_DOWNTO
69310: IFFALSE 69334
// result := Delete ( result , result ) ;
69312: LD_ADDR_VAR 0 3
69316: PUSH
69317: LD_VAR 0 3
69321: PPUSH
69322: LD_VAR 0 3
69326: PPUSH
69327: CALL_OW 3
69331: ST_TO_ADDR
69332: GO 69309
69334: POP
69335: POP
// end ;
69336: LD_VAR 0 3
69340: RET
// export function ComExit ( unit ) ; var tmp ; begin
69341: LD_INT 0
69343: PPUSH
69344: PPUSH
// if not IsInUnit ( unit ) then
69345: LD_VAR 0 1
69349: PPUSH
69350: CALL_OW 310
69354: NOT
69355: IFFALSE 69359
// exit ;
69357: GO 69419
// tmp := IsInUnit ( unit ) ;
69359: LD_ADDR_VAR 0 3
69363: PUSH
69364: LD_VAR 0 1
69368: PPUSH
69369: CALL_OW 310
69373: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69374: LD_VAR 0 3
69378: PPUSH
69379: CALL_OW 247
69383: PUSH
69384: LD_INT 2
69386: EQUAL
69387: IFFALSE 69400
// ComExitVehicle ( unit ) else
69389: LD_VAR 0 1
69393: PPUSH
69394: CALL_OW 121
69398: GO 69409
// ComExitBuilding ( unit ) ;
69400: LD_VAR 0 1
69404: PPUSH
69405: CALL_OW 122
// result := tmp ;
69409: LD_ADDR_VAR 0 2
69413: PUSH
69414: LD_VAR 0 3
69418: ST_TO_ADDR
// end ;
69419: LD_VAR 0 2
69423: RET
// export function ComExitAll ( units ) ; var i ; begin
69424: LD_INT 0
69426: PPUSH
69427: PPUSH
// if not units then
69428: LD_VAR 0 1
69432: NOT
69433: IFFALSE 69437
// exit ;
69435: GO 69463
// for i in units do
69437: LD_ADDR_VAR 0 3
69441: PUSH
69442: LD_VAR 0 1
69446: PUSH
69447: FOR_IN
69448: IFFALSE 69461
// ComExit ( i ) ;
69450: LD_VAR 0 3
69454: PPUSH
69455: CALL 69341 0 1
69459: GO 69447
69461: POP
69462: POP
// end ;
69463: LD_VAR 0 2
69467: RET
// export function ResetHc ; begin
69468: LD_INT 0
69470: PPUSH
// InitHc ;
69471: CALL_OW 19
// hc_importance := 0 ;
69475: LD_ADDR_OWVAR 32
69479: PUSH
69480: LD_INT 0
69482: ST_TO_ADDR
// end ;
69483: LD_VAR 0 1
69487: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69488: LD_INT 0
69490: PPUSH
69491: PPUSH
69492: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69493: LD_ADDR_VAR 0 6
69497: PUSH
69498: LD_VAR 0 1
69502: PUSH
69503: LD_VAR 0 3
69507: PLUS
69508: PUSH
69509: LD_INT 2
69511: DIV
69512: ST_TO_ADDR
// if _x < 0 then
69513: LD_VAR 0 6
69517: PUSH
69518: LD_INT 0
69520: LESS
69521: IFFALSE 69538
// _x := _x * - 1 ;
69523: LD_ADDR_VAR 0 6
69527: PUSH
69528: LD_VAR 0 6
69532: PUSH
69533: LD_INT 1
69535: NEG
69536: MUL
69537: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69538: LD_ADDR_VAR 0 7
69542: PUSH
69543: LD_VAR 0 2
69547: PUSH
69548: LD_VAR 0 4
69552: PLUS
69553: PUSH
69554: LD_INT 2
69556: DIV
69557: ST_TO_ADDR
// if _y < 0 then
69558: LD_VAR 0 7
69562: PUSH
69563: LD_INT 0
69565: LESS
69566: IFFALSE 69583
// _y := _y * - 1 ;
69568: LD_ADDR_VAR 0 7
69572: PUSH
69573: LD_VAR 0 7
69577: PUSH
69578: LD_INT 1
69580: NEG
69581: MUL
69582: ST_TO_ADDR
// result := [ _x , _y ] ;
69583: LD_ADDR_VAR 0 5
69587: PUSH
69588: LD_VAR 0 6
69592: PUSH
69593: LD_VAR 0 7
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: ST_TO_ADDR
// end ;
69602: LD_VAR 0 5
69606: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69607: LD_INT 0
69609: PPUSH
69610: PPUSH
69611: PPUSH
69612: PPUSH
// task := GetTaskList ( unit ) ;
69613: LD_ADDR_VAR 0 7
69617: PUSH
69618: LD_VAR 0 1
69622: PPUSH
69623: CALL_OW 437
69627: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69628: LD_VAR 0 7
69632: NOT
69633: PUSH
69634: LD_VAR 0 1
69638: PPUSH
69639: LD_VAR 0 2
69643: PPUSH
69644: CALL_OW 308
69648: NOT
69649: AND
69650: IFFALSE 69654
// exit ;
69652: GO 69772
// if IsInArea ( unit , area ) then
69654: LD_VAR 0 1
69658: PPUSH
69659: LD_VAR 0 2
69663: PPUSH
69664: CALL_OW 308
69668: IFFALSE 69686
// begin ComMoveToArea ( unit , goAway ) ;
69670: LD_VAR 0 1
69674: PPUSH
69675: LD_VAR 0 3
69679: PPUSH
69680: CALL_OW 113
// exit ;
69684: GO 69772
// end ; if task [ 1 ] [ 1 ] <> M then
69686: LD_VAR 0 7
69690: PUSH
69691: LD_INT 1
69693: ARRAY
69694: PUSH
69695: LD_INT 1
69697: ARRAY
69698: PUSH
69699: LD_STRING M
69701: NONEQUAL
69702: IFFALSE 69706
// exit ;
69704: GO 69772
// x := task [ 1 ] [ 2 ] ;
69706: LD_ADDR_VAR 0 5
69710: PUSH
69711: LD_VAR 0 7
69715: PUSH
69716: LD_INT 1
69718: ARRAY
69719: PUSH
69720: LD_INT 2
69722: ARRAY
69723: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69724: LD_ADDR_VAR 0 6
69728: PUSH
69729: LD_VAR 0 7
69733: PUSH
69734: LD_INT 1
69736: ARRAY
69737: PUSH
69738: LD_INT 3
69740: ARRAY
69741: ST_TO_ADDR
// if InArea ( x , y , area ) then
69742: LD_VAR 0 5
69746: PPUSH
69747: LD_VAR 0 6
69751: PPUSH
69752: LD_VAR 0 2
69756: PPUSH
69757: CALL_OW 309
69761: IFFALSE 69772
// ComStop ( unit ) ;
69763: LD_VAR 0 1
69767: PPUSH
69768: CALL_OW 141
// end ;
69772: LD_VAR 0 4
69776: RET
// export function Abs ( value ) ; begin
69777: LD_INT 0
69779: PPUSH
// result := value ;
69780: LD_ADDR_VAR 0 2
69784: PUSH
69785: LD_VAR 0 1
69789: ST_TO_ADDR
// if value < 0 then
69790: LD_VAR 0 1
69794: PUSH
69795: LD_INT 0
69797: LESS
69798: IFFALSE 69815
// result := value * - 1 ;
69800: LD_ADDR_VAR 0 2
69804: PUSH
69805: LD_VAR 0 1
69809: PUSH
69810: LD_INT 1
69812: NEG
69813: MUL
69814: ST_TO_ADDR
// end ;
69815: LD_VAR 0 2
69819: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69820: LD_INT 0
69822: PPUSH
69823: PPUSH
69824: PPUSH
69825: PPUSH
69826: PPUSH
69827: PPUSH
69828: PPUSH
69829: PPUSH
// if not unit or not building then
69830: LD_VAR 0 1
69834: NOT
69835: PUSH
69836: LD_VAR 0 2
69840: NOT
69841: OR
69842: IFFALSE 69846
// exit ;
69844: GO 70072
// x := GetX ( building ) ;
69846: LD_ADDR_VAR 0 4
69850: PUSH
69851: LD_VAR 0 2
69855: PPUSH
69856: CALL_OW 250
69860: ST_TO_ADDR
// y := GetY ( building ) ;
69861: LD_ADDR_VAR 0 6
69865: PUSH
69866: LD_VAR 0 2
69870: PPUSH
69871: CALL_OW 251
69875: ST_TO_ADDR
// d := GetDir ( building ) ;
69876: LD_ADDR_VAR 0 8
69880: PUSH
69881: LD_VAR 0 2
69885: PPUSH
69886: CALL_OW 254
69890: ST_TO_ADDR
// r := 4 ;
69891: LD_ADDR_VAR 0 9
69895: PUSH
69896: LD_INT 4
69898: ST_TO_ADDR
// for i := 1 to 5 do
69899: LD_ADDR_VAR 0 10
69903: PUSH
69904: DOUBLE
69905: LD_INT 1
69907: DEC
69908: ST_TO_ADDR
69909: LD_INT 5
69911: PUSH
69912: FOR_TO
69913: IFFALSE 70070
// begin _x := ShiftX ( x , d , r + i ) ;
69915: LD_ADDR_VAR 0 5
69919: PUSH
69920: LD_VAR 0 4
69924: PPUSH
69925: LD_VAR 0 8
69929: PPUSH
69930: LD_VAR 0 9
69934: PUSH
69935: LD_VAR 0 10
69939: PLUS
69940: PPUSH
69941: CALL_OW 272
69945: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69946: LD_ADDR_VAR 0 7
69950: PUSH
69951: LD_VAR 0 6
69955: PPUSH
69956: LD_VAR 0 8
69960: PPUSH
69961: LD_VAR 0 9
69965: PUSH
69966: LD_VAR 0 10
69970: PLUS
69971: PPUSH
69972: CALL_OW 273
69976: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69977: LD_VAR 0 5
69981: PPUSH
69982: LD_VAR 0 7
69986: PPUSH
69987: CALL_OW 488
69991: PUSH
69992: LD_VAR 0 5
69996: PPUSH
69997: LD_VAR 0 7
70001: PPUSH
70002: CALL_OW 428
70006: PPUSH
70007: CALL_OW 247
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: LD_INT 2
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: IN
70022: NOT
70023: AND
70024: IFFALSE 70068
// begin ComMoveXY ( unit , _x , _y ) ;
70026: LD_VAR 0 1
70030: PPUSH
70031: LD_VAR 0 5
70035: PPUSH
70036: LD_VAR 0 7
70040: PPUSH
70041: CALL_OW 111
// result := [ _x , _y ] ;
70045: LD_ADDR_VAR 0 3
70049: PUSH
70050: LD_VAR 0 5
70054: PUSH
70055: LD_VAR 0 7
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: ST_TO_ADDR
// exit ;
70064: POP
70065: POP
70066: GO 70072
// end ; end ;
70068: GO 69912
70070: POP
70071: POP
// end ;
70072: LD_VAR 0 3
70076: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70077: LD_INT 0
70079: PPUSH
70080: PPUSH
70081: PPUSH
// result := 0 ;
70082: LD_ADDR_VAR 0 3
70086: PUSH
70087: LD_INT 0
70089: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70090: LD_VAR 0 1
70094: PUSH
70095: LD_INT 0
70097: LESS
70098: PUSH
70099: LD_VAR 0 1
70103: PUSH
70104: LD_INT 8
70106: GREATER
70107: OR
70108: PUSH
70109: LD_VAR 0 2
70113: PUSH
70114: LD_INT 0
70116: LESS
70117: OR
70118: PUSH
70119: LD_VAR 0 2
70123: PUSH
70124: LD_INT 8
70126: GREATER
70127: OR
70128: IFFALSE 70132
// exit ;
70130: GO 70207
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70132: LD_ADDR_VAR 0 4
70136: PUSH
70137: LD_INT 22
70139: PUSH
70140: LD_VAR 0 2
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PPUSH
70149: CALL_OW 69
70153: PUSH
70154: FOR_IN
70155: IFFALSE 70205
// begin un := UnitShoot ( i ) ;
70157: LD_ADDR_VAR 0 5
70161: PUSH
70162: LD_VAR 0 4
70166: PPUSH
70167: CALL_OW 504
70171: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70172: LD_VAR 0 5
70176: PPUSH
70177: CALL_OW 255
70181: PUSH
70182: LD_VAR 0 1
70186: EQUAL
70187: IFFALSE 70203
// begin result := un ;
70189: LD_ADDR_VAR 0 3
70193: PUSH
70194: LD_VAR 0 5
70198: ST_TO_ADDR
// exit ;
70199: POP
70200: POP
70201: GO 70207
// end ; end ;
70203: GO 70154
70205: POP
70206: POP
// end ;
70207: LD_VAR 0 3
70211: RET
// export function GetCargoBay ( units ) ; begin
70212: LD_INT 0
70214: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70215: LD_ADDR_VAR 0 2
70219: PUSH
70220: LD_VAR 0 1
70224: PPUSH
70225: LD_INT 2
70227: PUSH
70228: LD_INT 34
70230: PUSH
70231: LD_INT 12
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 34
70240: PUSH
70241: LD_INT 51
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 34
70250: PUSH
70251: LD_INT 32
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 34
70260: PUSH
70261: LD_INT 89
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: PPUSH
70275: CALL_OW 72
70279: ST_TO_ADDR
// end ;
70280: LD_VAR 0 2
70284: RET
// export function Negate ( value ) ; begin
70285: LD_INT 0
70287: PPUSH
// result := not value ;
70288: LD_ADDR_VAR 0 2
70292: PUSH
70293: LD_VAR 0 1
70297: NOT
70298: ST_TO_ADDR
// end ;
70299: LD_VAR 0 2
70303: RET
// export function Inc ( value ) ; begin
70304: LD_INT 0
70306: PPUSH
// result := value + 1 ;
70307: LD_ADDR_VAR 0 2
70311: PUSH
70312: LD_VAR 0 1
70316: PUSH
70317: LD_INT 1
70319: PLUS
70320: ST_TO_ADDR
// end ;
70321: LD_VAR 0 2
70325: RET
// export function Dec ( value ) ; begin
70326: LD_INT 0
70328: PPUSH
// result := value - 1 ;
70329: LD_ADDR_VAR 0 2
70333: PUSH
70334: LD_VAR 0 1
70338: PUSH
70339: LD_INT 1
70341: MINUS
70342: ST_TO_ADDR
// end ;
70343: LD_VAR 0 2
70347: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70348: LD_INT 0
70350: PPUSH
70351: PPUSH
70352: PPUSH
70353: PPUSH
70354: PPUSH
70355: PPUSH
70356: PPUSH
70357: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70358: LD_VAR 0 1
70362: PPUSH
70363: LD_VAR 0 2
70367: PPUSH
70368: CALL_OW 488
70372: NOT
70373: PUSH
70374: LD_VAR 0 3
70378: PPUSH
70379: LD_VAR 0 4
70383: PPUSH
70384: CALL_OW 488
70388: NOT
70389: OR
70390: IFFALSE 70403
// begin result := - 1 ;
70392: LD_ADDR_VAR 0 5
70396: PUSH
70397: LD_INT 1
70399: NEG
70400: ST_TO_ADDR
// exit ;
70401: GO 70638
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70403: LD_ADDR_VAR 0 12
70407: PUSH
70408: LD_VAR 0 1
70412: PPUSH
70413: LD_VAR 0 2
70417: PPUSH
70418: LD_VAR 0 3
70422: PPUSH
70423: LD_VAR 0 4
70427: PPUSH
70428: CALL 69488 0 4
70432: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70433: LD_ADDR_VAR 0 11
70437: PUSH
70438: LD_VAR 0 1
70442: PPUSH
70443: LD_VAR 0 2
70447: PPUSH
70448: LD_VAR 0 12
70452: PUSH
70453: LD_INT 1
70455: ARRAY
70456: PPUSH
70457: LD_VAR 0 12
70461: PUSH
70462: LD_INT 2
70464: ARRAY
70465: PPUSH
70466: CALL_OW 298
70470: ST_TO_ADDR
// distance := 9999 ;
70471: LD_ADDR_VAR 0 10
70475: PUSH
70476: LD_INT 9999
70478: ST_TO_ADDR
// for i := 0 to 5 do
70479: LD_ADDR_VAR 0 6
70483: PUSH
70484: DOUBLE
70485: LD_INT 0
70487: DEC
70488: ST_TO_ADDR
70489: LD_INT 5
70491: PUSH
70492: FOR_TO
70493: IFFALSE 70636
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70495: LD_ADDR_VAR 0 7
70499: PUSH
70500: LD_VAR 0 1
70504: PPUSH
70505: LD_VAR 0 6
70509: PPUSH
70510: LD_VAR 0 11
70514: PPUSH
70515: CALL_OW 272
70519: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70520: LD_ADDR_VAR 0 8
70524: PUSH
70525: LD_VAR 0 2
70529: PPUSH
70530: LD_VAR 0 6
70534: PPUSH
70535: LD_VAR 0 11
70539: PPUSH
70540: CALL_OW 273
70544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70545: LD_VAR 0 7
70549: PPUSH
70550: LD_VAR 0 8
70554: PPUSH
70555: CALL_OW 488
70559: NOT
70560: IFFALSE 70564
// continue ;
70562: GO 70492
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70564: LD_ADDR_VAR 0 9
70568: PUSH
70569: LD_VAR 0 12
70573: PUSH
70574: LD_INT 1
70576: ARRAY
70577: PPUSH
70578: LD_VAR 0 12
70582: PUSH
70583: LD_INT 2
70585: ARRAY
70586: PPUSH
70587: LD_VAR 0 7
70591: PPUSH
70592: LD_VAR 0 8
70596: PPUSH
70597: CALL_OW 298
70601: ST_TO_ADDR
// if tmp < distance then
70602: LD_VAR 0 9
70606: PUSH
70607: LD_VAR 0 10
70611: LESS
70612: IFFALSE 70634
// begin result := i ;
70614: LD_ADDR_VAR 0 5
70618: PUSH
70619: LD_VAR 0 6
70623: ST_TO_ADDR
// distance := tmp ;
70624: LD_ADDR_VAR 0 10
70628: PUSH
70629: LD_VAR 0 9
70633: ST_TO_ADDR
// end ; end ;
70634: GO 70492
70636: POP
70637: POP
// end ;
70638: LD_VAR 0 5
70642: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70643: LD_INT 0
70645: PPUSH
70646: PPUSH
// if not driver or not IsInUnit ( driver ) then
70647: LD_VAR 0 1
70651: NOT
70652: PUSH
70653: LD_VAR 0 1
70657: PPUSH
70658: CALL_OW 310
70662: NOT
70663: OR
70664: IFFALSE 70668
// exit ;
70666: GO 70758
// vehicle := IsInUnit ( driver ) ;
70668: LD_ADDR_VAR 0 3
70672: PUSH
70673: LD_VAR 0 1
70677: PPUSH
70678: CALL_OW 310
70682: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70683: LD_VAR 0 1
70687: PPUSH
70688: LD_STRING \
70690: PUSH
70691: LD_INT 0
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: LD_INT 0
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: PUSH
70718: LD_STRING E
70720: PUSH
70721: LD_INT 0
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: LD_VAR 0 3
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: LD_INT 0
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PPUSH
70754: CALL_OW 446
// end ;
70758: LD_VAR 0 2
70762: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70763: LD_INT 0
70765: PPUSH
70766: PPUSH
// if not driver or not IsInUnit ( driver ) then
70767: LD_VAR 0 1
70771: NOT
70772: PUSH
70773: LD_VAR 0 1
70777: PPUSH
70778: CALL_OW 310
70782: NOT
70783: OR
70784: IFFALSE 70788
// exit ;
70786: GO 70878
// vehicle := IsInUnit ( driver ) ;
70788: LD_ADDR_VAR 0 3
70792: PUSH
70793: LD_VAR 0 1
70797: PPUSH
70798: CALL_OW 310
70802: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70803: LD_VAR 0 1
70807: PPUSH
70808: LD_STRING \
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: LD_INT 0
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: PUSH
70838: LD_STRING E
70840: PUSH
70841: LD_INT 0
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: LD_VAR 0 3
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PPUSH
70874: CALL_OW 447
// end ;
70878: LD_VAR 0 2
70882: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70883: LD_INT 0
70885: PPUSH
70886: PPUSH
70887: PPUSH
// tmp := [ ] ;
70888: LD_ADDR_VAR 0 5
70892: PUSH
70893: EMPTY
70894: ST_TO_ADDR
// for i in units do
70895: LD_ADDR_VAR 0 4
70899: PUSH
70900: LD_VAR 0 1
70904: PUSH
70905: FOR_IN
70906: IFFALSE 70944
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70908: LD_ADDR_VAR 0 5
70912: PUSH
70913: LD_VAR 0 5
70917: PPUSH
70918: LD_VAR 0 5
70922: PUSH
70923: LD_INT 1
70925: PLUS
70926: PPUSH
70927: LD_VAR 0 4
70931: PPUSH
70932: CALL_OW 256
70936: PPUSH
70937: CALL_OW 2
70941: ST_TO_ADDR
70942: GO 70905
70944: POP
70945: POP
// if not tmp then
70946: LD_VAR 0 5
70950: NOT
70951: IFFALSE 70955
// exit ;
70953: GO 71003
// if asc then
70955: LD_VAR 0 2
70959: IFFALSE 70983
// result := SortListByListAsc ( units , tmp ) else
70961: LD_ADDR_VAR 0 3
70965: PUSH
70966: LD_VAR 0 1
70970: PPUSH
70971: LD_VAR 0 5
70975: PPUSH
70976: CALL_OW 76
70980: ST_TO_ADDR
70981: GO 71003
// result := SortListByListDesc ( units , tmp ) ;
70983: LD_ADDR_VAR 0 3
70987: PUSH
70988: LD_VAR 0 1
70992: PPUSH
70993: LD_VAR 0 5
70997: PPUSH
70998: CALL_OW 77
71002: ST_TO_ADDR
// end ;
71003: LD_VAR 0 3
71007: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71008: LD_INT 0
71010: PPUSH
71011: PPUSH
// task := GetTaskList ( mech ) ;
71012: LD_ADDR_VAR 0 4
71016: PUSH
71017: LD_VAR 0 1
71021: PPUSH
71022: CALL_OW 437
71026: ST_TO_ADDR
// if not task then
71027: LD_VAR 0 4
71031: NOT
71032: IFFALSE 71036
// exit ;
71034: GO 71078
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71036: LD_ADDR_VAR 0 3
71040: PUSH
71041: LD_VAR 0 4
71045: PUSH
71046: LD_INT 1
71048: ARRAY
71049: PUSH
71050: LD_INT 1
71052: ARRAY
71053: PUSH
71054: LD_STRING r
71056: EQUAL
71057: PUSH
71058: LD_VAR 0 4
71062: PUSH
71063: LD_INT 1
71065: ARRAY
71066: PUSH
71067: LD_INT 4
71069: ARRAY
71070: PUSH
71071: LD_VAR 0 2
71075: EQUAL
71076: AND
71077: ST_TO_ADDR
// end ;
71078: LD_VAR 0 3
71082: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71083: LD_INT 0
71085: PPUSH
// SetDir ( unit , d ) ;
71086: LD_VAR 0 1
71090: PPUSH
71091: LD_VAR 0 4
71095: PPUSH
71096: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71100: LD_VAR 0 1
71104: PPUSH
71105: LD_VAR 0 2
71109: PPUSH
71110: LD_VAR 0 3
71114: PPUSH
71115: LD_VAR 0 5
71119: PPUSH
71120: CALL_OW 48
// end ;
71124: LD_VAR 0 6
71128: RET
// export function ToNaturalNumber ( number ) ; begin
71129: LD_INT 0
71131: PPUSH
// result := number div 1 ;
71132: LD_ADDR_VAR 0 2
71136: PUSH
71137: LD_VAR 0 1
71141: PUSH
71142: LD_INT 1
71144: DIV
71145: ST_TO_ADDR
// if number < 0 then
71146: LD_VAR 0 1
71150: PUSH
71151: LD_INT 0
71153: LESS
71154: IFFALSE 71164
// result := 0 ;
71156: LD_ADDR_VAR 0 2
71160: PUSH
71161: LD_INT 0
71163: ST_TO_ADDR
// end ;
71164: LD_VAR 0 2
71168: RET
// export function SortByClass ( units , class ) ; var un ; begin
71169: LD_INT 0
71171: PPUSH
71172: PPUSH
// if not units or not class then
71173: LD_VAR 0 1
71177: NOT
71178: PUSH
71179: LD_VAR 0 2
71183: NOT
71184: OR
71185: IFFALSE 71189
// exit ;
71187: GO 71284
// result := [ ] ;
71189: LD_ADDR_VAR 0 3
71193: PUSH
71194: EMPTY
71195: ST_TO_ADDR
// for un in units do
71196: LD_ADDR_VAR 0 4
71200: PUSH
71201: LD_VAR 0 1
71205: PUSH
71206: FOR_IN
71207: IFFALSE 71282
// if GetClass ( un ) = class then
71209: LD_VAR 0 4
71213: PPUSH
71214: CALL_OW 257
71218: PUSH
71219: LD_VAR 0 2
71223: EQUAL
71224: IFFALSE 71251
// result := Insert ( result , 1 , un ) else
71226: LD_ADDR_VAR 0 3
71230: PUSH
71231: LD_VAR 0 3
71235: PPUSH
71236: LD_INT 1
71238: PPUSH
71239: LD_VAR 0 4
71243: PPUSH
71244: CALL_OW 2
71248: ST_TO_ADDR
71249: GO 71280
// result := Replace ( result , result + 1 , un ) ;
71251: LD_ADDR_VAR 0 3
71255: PUSH
71256: LD_VAR 0 3
71260: PPUSH
71261: LD_VAR 0 3
71265: PUSH
71266: LD_INT 1
71268: PLUS
71269: PPUSH
71270: LD_VAR 0 4
71274: PPUSH
71275: CALL_OW 1
71279: ST_TO_ADDR
71280: GO 71206
71282: POP
71283: POP
// end ;
71284: LD_VAR 0 3
71288: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71289: LD_INT 0
71291: PPUSH
71292: PPUSH
71293: PPUSH
71294: PPUSH
71295: PPUSH
71296: PPUSH
71297: PPUSH
// result := [ ] ;
71298: LD_ADDR_VAR 0 4
71302: PUSH
71303: EMPTY
71304: ST_TO_ADDR
// if x - r < 0 then
71305: LD_VAR 0 1
71309: PUSH
71310: LD_VAR 0 3
71314: MINUS
71315: PUSH
71316: LD_INT 0
71318: LESS
71319: IFFALSE 71331
// min_x := 0 else
71321: LD_ADDR_VAR 0 8
71325: PUSH
71326: LD_INT 0
71328: ST_TO_ADDR
71329: GO 71347
// min_x := x - r ;
71331: LD_ADDR_VAR 0 8
71335: PUSH
71336: LD_VAR 0 1
71340: PUSH
71341: LD_VAR 0 3
71345: MINUS
71346: ST_TO_ADDR
// if y - r < 0 then
71347: LD_VAR 0 2
71351: PUSH
71352: LD_VAR 0 3
71356: MINUS
71357: PUSH
71358: LD_INT 0
71360: LESS
71361: IFFALSE 71373
// min_y := 0 else
71363: LD_ADDR_VAR 0 7
71367: PUSH
71368: LD_INT 0
71370: ST_TO_ADDR
71371: GO 71389
// min_y := y - r ;
71373: LD_ADDR_VAR 0 7
71377: PUSH
71378: LD_VAR 0 2
71382: PUSH
71383: LD_VAR 0 3
71387: MINUS
71388: ST_TO_ADDR
// max_x := x + r ;
71389: LD_ADDR_VAR 0 9
71393: PUSH
71394: LD_VAR 0 1
71398: PUSH
71399: LD_VAR 0 3
71403: PLUS
71404: ST_TO_ADDR
// max_y := y + r ;
71405: LD_ADDR_VAR 0 10
71409: PUSH
71410: LD_VAR 0 2
71414: PUSH
71415: LD_VAR 0 3
71419: PLUS
71420: ST_TO_ADDR
// for _x = min_x to max_x do
71421: LD_ADDR_VAR 0 5
71425: PUSH
71426: DOUBLE
71427: LD_VAR 0 8
71431: DEC
71432: ST_TO_ADDR
71433: LD_VAR 0 9
71437: PUSH
71438: FOR_TO
71439: IFFALSE 71540
// for _y = min_y to max_y do
71441: LD_ADDR_VAR 0 6
71445: PUSH
71446: DOUBLE
71447: LD_VAR 0 7
71451: DEC
71452: ST_TO_ADDR
71453: LD_VAR 0 10
71457: PUSH
71458: FOR_TO
71459: IFFALSE 71536
// begin if not ValidHex ( _x , _y ) then
71461: LD_VAR 0 5
71465: PPUSH
71466: LD_VAR 0 6
71470: PPUSH
71471: CALL_OW 488
71475: NOT
71476: IFFALSE 71480
// continue ;
71478: GO 71458
// if GetResourceTypeXY ( _x , _y ) then
71480: LD_VAR 0 5
71484: PPUSH
71485: LD_VAR 0 6
71489: PPUSH
71490: CALL_OW 283
71494: IFFALSE 71534
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71496: LD_ADDR_VAR 0 4
71500: PUSH
71501: LD_VAR 0 4
71505: PPUSH
71506: LD_VAR 0 4
71510: PUSH
71511: LD_INT 1
71513: PLUS
71514: PPUSH
71515: LD_VAR 0 5
71519: PUSH
71520: LD_VAR 0 6
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PPUSH
71529: CALL_OW 1
71533: ST_TO_ADDR
// end ;
71534: GO 71458
71536: POP
71537: POP
71538: GO 71438
71540: POP
71541: POP
// end ;
71542: LD_VAR 0 4
71546: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71547: LD_INT 0
71549: PPUSH
71550: PPUSH
71551: PPUSH
71552: PPUSH
71553: PPUSH
71554: PPUSH
71555: PPUSH
71556: PPUSH
// if not units then
71557: LD_VAR 0 1
71561: NOT
71562: IFFALSE 71566
// exit ;
71564: GO 72090
// result := UnitFilter ( units , [ f_ok ] ) ;
71566: LD_ADDR_VAR 0 3
71570: PUSH
71571: LD_VAR 0 1
71575: PPUSH
71576: LD_INT 50
71578: PUSH
71579: EMPTY
71580: LIST
71581: PPUSH
71582: CALL_OW 72
71586: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71587: LD_ADDR_VAR 0 8
71591: PUSH
71592: LD_VAR 0 1
71596: PUSH
71597: LD_INT 1
71599: ARRAY
71600: PPUSH
71601: CALL_OW 255
71605: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71606: LD_ADDR_VAR 0 10
71610: PUSH
71611: LD_INT 29
71613: PUSH
71614: LD_INT 91
71616: PUSH
71617: LD_INT 49
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: LIST
71624: ST_TO_ADDR
// if not result then
71625: LD_VAR 0 3
71629: NOT
71630: IFFALSE 71634
// exit ;
71632: GO 72090
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71634: LD_ADDR_VAR 0 5
71638: PUSH
71639: LD_INT 81
71641: PUSH
71642: LD_VAR 0 8
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PPUSH
71651: CALL_OW 69
71655: ST_TO_ADDR
// for i in result do
71656: LD_ADDR_VAR 0 4
71660: PUSH
71661: LD_VAR 0 3
71665: PUSH
71666: FOR_IN
71667: IFFALSE 72088
// begin tag := GetTag ( i ) + 1 ;
71669: LD_ADDR_VAR 0 9
71673: PUSH
71674: LD_VAR 0 4
71678: PPUSH
71679: CALL_OW 110
71683: PUSH
71684: LD_INT 1
71686: PLUS
71687: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71688: LD_ADDR_VAR 0 7
71692: PUSH
71693: LD_VAR 0 4
71697: PPUSH
71698: CALL_OW 250
71702: PPUSH
71703: LD_VAR 0 4
71707: PPUSH
71708: CALL_OW 251
71712: PPUSH
71713: LD_INT 6
71715: PPUSH
71716: CALL 71289 0 3
71720: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71721: LD_VAR 0 4
71725: PPUSH
71726: CALL_OW 247
71730: PUSH
71731: LD_INT 2
71733: EQUAL
71734: PUSH
71735: LD_VAR 0 7
71739: AND
71740: PUSH
71741: LD_VAR 0 4
71745: PPUSH
71746: CALL_OW 264
71750: PUSH
71751: LD_VAR 0 10
71755: IN
71756: NOT
71757: AND
71758: IFFALSE 71797
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71760: LD_VAR 0 4
71764: PPUSH
71765: LD_VAR 0 7
71769: PUSH
71770: LD_INT 1
71772: ARRAY
71773: PUSH
71774: LD_INT 1
71776: ARRAY
71777: PPUSH
71778: LD_VAR 0 7
71782: PUSH
71783: LD_INT 1
71785: ARRAY
71786: PUSH
71787: LD_INT 2
71789: ARRAY
71790: PPUSH
71791: CALL_OW 116
71795: GO 72086
// if path > tag then
71797: LD_VAR 0 2
71801: PUSH
71802: LD_VAR 0 9
71806: GREATER
71807: IFFALSE 72015
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71809: LD_ADDR_VAR 0 6
71813: PUSH
71814: LD_VAR 0 5
71818: PPUSH
71819: LD_INT 91
71821: PUSH
71822: LD_VAR 0 4
71826: PUSH
71827: LD_INT 8
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: PPUSH
71835: CALL_OW 72
71839: ST_TO_ADDR
// if nearEnemy then
71840: LD_VAR 0 6
71844: IFFALSE 71913
// begin if GetWeapon ( i ) = ru_time_lapser then
71846: LD_VAR 0 4
71850: PPUSH
71851: CALL_OW 264
71855: PUSH
71856: LD_INT 49
71858: EQUAL
71859: IFFALSE 71887
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71861: LD_VAR 0 4
71865: PPUSH
71866: LD_VAR 0 6
71870: PPUSH
71871: LD_VAR 0 4
71875: PPUSH
71876: CALL_OW 74
71880: PPUSH
71881: CALL_OW 112
71885: GO 71911
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71887: LD_VAR 0 4
71891: PPUSH
71892: LD_VAR 0 6
71896: PPUSH
71897: LD_VAR 0 4
71901: PPUSH
71902: CALL_OW 74
71906: PPUSH
71907: CALL 73015 0 2
// end else
71911: GO 72013
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71913: LD_VAR 0 4
71917: PPUSH
71918: LD_VAR 0 2
71922: PUSH
71923: LD_VAR 0 9
71927: ARRAY
71928: PUSH
71929: LD_INT 1
71931: ARRAY
71932: PPUSH
71933: LD_VAR 0 2
71937: PUSH
71938: LD_VAR 0 9
71942: ARRAY
71943: PUSH
71944: LD_INT 2
71946: ARRAY
71947: PPUSH
71948: CALL_OW 297
71952: PUSH
71953: LD_INT 6
71955: GREATER
71956: IFFALSE 71999
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71958: LD_VAR 0 4
71962: PPUSH
71963: LD_VAR 0 2
71967: PUSH
71968: LD_VAR 0 9
71972: ARRAY
71973: PUSH
71974: LD_INT 1
71976: ARRAY
71977: PPUSH
71978: LD_VAR 0 2
71982: PUSH
71983: LD_VAR 0 9
71987: ARRAY
71988: PUSH
71989: LD_INT 2
71991: ARRAY
71992: PPUSH
71993: CALL_OW 114
71997: GO 72013
// SetTag ( i , tag ) ;
71999: LD_VAR 0 4
72003: PPUSH
72004: LD_VAR 0 9
72008: PPUSH
72009: CALL_OW 109
// end else
72013: GO 72086
// if enemy then
72015: LD_VAR 0 5
72019: IFFALSE 72086
// begin if GetWeapon ( i ) = ru_time_lapser then
72021: LD_VAR 0 4
72025: PPUSH
72026: CALL_OW 264
72030: PUSH
72031: LD_INT 49
72033: EQUAL
72034: IFFALSE 72062
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72036: LD_VAR 0 4
72040: PPUSH
72041: LD_VAR 0 5
72045: PPUSH
72046: LD_VAR 0 4
72050: PPUSH
72051: CALL_OW 74
72055: PPUSH
72056: CALL_OW 112
72060: GO 72086
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72062: LD_VAR 0 4
72066: PPUSH
72067: LD_VAR 0 5
72071: PPUSH
72072: LD_VAR 0 4
72076: PPUSH
72077: CALL_OW 74
72081: PPUSH
72082: CALL 73015 0 2
// end ; end ;
72086: GO 71666
72088: POP
72089: POP
// end ;
72090: LD_VAR 0 3
72094: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72095: LD_INT 0
72097: PPUSH
72098: PPUSH
72099: PPUSH
// if not unit or IsInUnit ( unit ) then
72100: LD_VAR 0 1
72104: NOT
72105: PUSH
72106: LD_VAR 0 1
72110: PPUSH
72111: CALL_OW 310
72115: OR
72116: IFFALSE 72120
// exit ;
72118: GO 72211
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72120: LD_ADDR_VAR 0 4
72124: PUSH
72125: LD_VAR 0 1
72129: PPUSH
72130: CALL_OW 250
72134: PPUSH
72135: LD_VAR 0 2
72139: PPUSH
72140: LD_INT 1
72142: PPUSH
72143: CALL_OW 272
72147: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72148: LD_ADDR_VAR 0 5
72152: PUSH
72153: LD_VAR 0 1
72157: PPUSH
72158: CALL_OW 251
72162: PPUSH
72163: LD_VAR 0 2
72167: PPUSH
72168: LD_INT 1
72170: PPUSH
72171: CALL_OW 273
72175: ST_TO_ADDR
// if ValidHex ( x , y ) then
72176: LD_VAR 0 4
72180: PPUSH
72181: LD_VAR 0 5
72185: PPUSH
72186: CALL_OW 488
72190: IFFALSE 72211
// ComTurnXY ( unit , x , y ) ;
72192: LD_VAR 0 1
72196: PPUSH
72197: LD_VAR 0 4
72201: PPUSH
72202: LD_VAR 0 5
72206: PPUSH
72207: CALL_OW 118
// end ;
72211: LD_VAR 0 3
72215: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72216: LD_INT 0
72218: PPUSH
72219: PPUSH
// result := false ;
72220: LD_ADDR_VAR 0 3
72224: PUSH
72225: LD_INT 0
72227: ST_TO_ADDR
// if not units then
72228: LD_VAR 0 2
72232: NOT
72233: IFFALSE 72237
// exit ;
72235: GO 72282
// for i in units do
72237: LD_ADDR_VAR 0 4
72241: PUSH
72242: LD_VAR 0 2
72246: PUSH
72247: FOR_IN
72248: IFFALSE 72280
// if See ( side , i ) then
72250: LD_VAR 0 1
72254: PPUSH
72255: LD_VAR 0 4
72259: PPUSH
72260: CALL_OW 292
72264: IFFALSE 72278
// begin result := true ;
72266: LD_ADDR_VAR 0 3
72270: PUSH
72271: LD_INT 1
72273: ST_TO_ADDR
// exit ;
72274: POP
72275: POP
72276: GO 72282
// end ;
72278: GO 72247
72280: POP
72281: POP
// end ;
72282: LD_VAR 0 3
72286: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72287: LD_INT 0
72289: PPUSH
72290: PPUSH
72291: PPUSH
72292: PPUSH
// if not unit or not points then
72293: LD_VAR 0 1
72297: NOT
72298: PUSH
72299: LD_VAR 0 2
72303: NOT
72304: OR
72305: IFFALSE 72309
// exit ;
72307: GO 72399
// dist := 99999 ;
72309: LD_ADDR_VAR 0 5
72313: PUSH
72314: LD_INT 99999
72316: ST_TO_ADDR
// for i in points do
72317: LD_ADDR_VAR 0 4
72321: PUSH
72322: LD_VAR 0 2
72326: PUSH
72327: FOR_IN
72328: IFFALSE 72397
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72330: LD_ADDR_VAR 0 6
72334: PUSH
72335: LD_VAR 0 1
72339: PPUSH
72340: LD_VAR 0 4
72344: PUSH
72345: LD_INT 1
72347: ARRAY
72348: PPUSH
72349: LD_VAR 0 4
72353: PUSH
72354: LD_INT 2
72356: ARRAY
72357: PPUSH
72358: CALL_OW 297
72362: ST_TO_ADDR
// if tmpDist < dist then
72363: LD_VAR 0 6
72367: PUSH
72368: LD_VAR 0 5
72372: LESS
72373: IFFALSE 72395
// begin result := i ;
72375: LD_ADDR_VAR 0 3
72379: PUSH
72380: LD_VAR 0 4
72384: ST_TO_ADDR
// dist := tmpDist ;
72385: LD_ADDR_VAR 0 5
72389: PUSH
72390: LD_VAR 0 6
72394: ST_TO_ADDR
// end ; end ;
72395: GO 72327
72397: POP
72398: POP
// end ;
72399: LD_VAR 0 3
72403: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72404: LD_INT 0
72406: PPUSH
// uc_side := side ;
72407: LD_ADDR_OWVAR 20
72411: PUSH
72412: LD_VAR 0 1
72416: ST_TO_ADDR
// uc_nation := 3 ;
72417: LD_ADDR_OWVAR 21
72421: PUSH
72422: LD_INT 3
72424: ST_TO_ADDR
// vc_chassis := 25 ;
72425: LD_ADDR_OWVAR 37
72429: PUSH
72430: LD_INT 25
72432: ST_TO_ADDR
// vc_engine := engine_siberite ;
72433: LD_ADDR_OWVAR 39
72437: PUSH
72438: LD_INT 3
72440: ST_TO_ADDR
// vc_control := control_computer ;
72441: LD_ADDR_OWVAR 38
72445: PUSH
72446: LD_INT 3
72448: ST_TO_ADDR
// vc_weapon := 59 ;
72449: LD_ADDR_OWVAR 40
72453: PUSH
72454: LD_INT 59
72456: ST_TO_ADDR
// result := CreateVehicle ;
72457: LD_ADDR_VAR 0 5
72461: PUSH
72462: CALL_OW 45
72466: ST_TO_ADDR
// SetDir ( result , d ) ;
72467: LD_VAR 0 5
72471: PPUSH
72472: LD_VAR 0 4
72476: PPUSH
72477: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72481: LD_VAR 0 5
72485: PPUSH
72486: LD_VAR 0 2
72490: PPUSH
72491: LD_VAR 0 3
72495: PPUSH
72496: LD_INT 0
72498: PPUSH
72499: CALL_OW 48
// end ;
72503: LD_VAR 0 5
72507: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72508: LD_INT 0
72510: PPUSH
72511: PPUSH
72512: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72513: LD_ADDR_VAR 0 2
72517: PUSH
72518: LD_INT 0
72520: PUSH
72521: LD_INT 0
72523: PUSH
72524: LD_INT 0
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72536: LD_VAR 0 1
72540: NOT
72541: PUSH
72542: LD_VAR 0 1
72546: PPUSH
72547: CALL_OW 264
72551: PUSH
72552: LD_INT 12
72554: PUSH
72555: LD_INT 51
72557: PUSH
72558: LD_INT 32
72560: PUSH
72561: LD_INT 89
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: IN
72570: NOT
72571: OR
72572: IFFALSE 72576
// exit ;
72574: GO 72674
// for i := 1 to 3 do
72576: LD_ADDR_VAR 0 3
72580: PUSH
72581: DOUBLE
72582: LD_INT 1
72584: DEC
72585: ST_TO_ADDR
72586: LD_INT 3
72588: PUSH
72589: FOR_TO
72590: IFFALSE 72672
// begin tmp := GetCargo ( cargo , i ) ;
72592: LD_ADDR_VAR 0 4
72596: PUSH
72597: LD_VAR 0 1
72601: PPUSH
72602: LD_VAR 0 3
72606: PPUSH
72607: CALL_OW 289
72611: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72612: LD_ADDR_VAR 0 2
72616: PUSH
72617: LD_VAR 0 2
72621: PPUSH
72622: LD_VAR 0 3
72626: PPUSH
72627: LD_VAR 0 4
72631: PPUSH
72632: CALL_OW 1
72636: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72637: LD_ADDR_VAR 0 2
72641: PUSH
72642: LD_VAR 0 2
72646: PPUSH
72647: LD_INT 4
72649: PPUSH
72650: LD_VAR 0 2
72654: PUSH
72655: LD_INT 4
72657: ARRAY
72658: PUSH
72659: LD_VAR 0 4
72663: PLUS
72664: PPUSH
72665: CALL_OW 1
72669: ST_TO_ADDR
// end ;
72670: GO 72589
72672: POP
72673: POP
// end ;
72674: LD_VAR 0 2
72678: RET
// export function Length ( array ) ; begin
72679: LD_INT 0
72681: PPUSH
// result := array + 0 ;
72682: LD_ADDR_VAR 0 2
72686: PUSH
72687: LD_VAR 0 1
72691: PUSH
72692: LD_INT 0
72694: PLUS
72695: ST_TO_ADDR
// end ;
72696: LD_VAR 0 2
72700: RET
// export function PrepareArray ( array ) ; begin
72701: LD_INT 0
72703: PPUSH
// result := array diff 0 ;
72704: LD_ADDR_VAR 0 2
72708: PUSH
72709: LD_VAR 0 1
72713: PUSH
72714: LD_INT 0
72716: DIFF
72717: ST_TO_ADDR
// if not result [ 1 ] then
72718: LD_VAR 0 2
72722: PUSH
72723: LD_INT 1
72725: ARRAY
72726: NOT
72727: IFFALSE 72747
// result := Delete ( result , 1 ) ;
72729: LD_ADDR_VAR 0 2
72733: PUSH
72734: LD_VAR 0 2
72738: PPUSH
72739: LD_INT 1
72741: PPUSH
72742: CALL_OW 3
72746: ST_TO_ADDR
// end ;
72747: LD_VAR 0 2
72751: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72752: LD_INT 0
72754: PPUSH
72755: PPUSH
72756: PPUSH
72757: PPUSH
// sibRocketRange := 25 ;
72758: LD_ADDR_VAR 0 6
72762: PUSH
72763: LD_INT 25
72765: ST_TO_ADDR
// result := false ;
72766: LD_ADDR_VAR 0 4
72770: PUSH
72771: LD_INT 0
72773: ST_TO_ADDR
// for i := 0 to 5 do
72774: LD_ADDR_VAR 0 5
72778: PUSH
72779: DOUBLE
72780: LD_INT 0
72782: DEC
72783: ST_TO_ADDR
72784: LD_INT 5
72786: PUSH
72787: FOR_TO
72788: IFFALSE 72855
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72790: LD_VAR 0 1
72794: PPUSH
72795: LD_VAR 0 5
72799: PPUSH
72800: LD_VAR 0 6
72804: PPUSH
72805: CALL_OW 272
72809: PPUSH
72810: LD_VAR 0 2
72814: PPUSH
72815: LD_VAR 0 5
72819: PPUSH
72820: LD_VAR 0 6
72824: PPUSH
72825: CALL_OW 273
72829: PPUSH
72830: LD_VAR 0 3
72834: PPUSH
72835: CALL_OW 309
72839: IFFALSE 72853
// begin result := true ;
72841: LD_ADDR_VAR 0 4
72845: PUSH
72846: LD_INT 1
72848: ST_TO_ADDR
// exit ;
72849: POP
72850: POP
72851: GO 72857
// end ;
72853: GO 72787
72855: POP
72856: POP
// end ;
72857: LD_VAR 0 4
72861: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72862: LD_INT 0
72864: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72865: LD_VAR 0 1
72869: PPUSH
72870: LD_VAR 0 2
72874: PPUSH
72875: LD_INT 0
72877: PPUSH
72878: LD_INT 0
72880: PPUSH
72881: LD_INT 1
72883: PPUSH
72884: LD_INT 0
72886: PPUSH
72887: CALL_OW 587
// end ;
72891: LD_VAR 0 3
72895: RET
// export function CenterOnNow ( unit ) ; begin
72896: LD_INT 0
72898: PPUSH
// result := IsInUnit ( unit ) ;
72899: LD_ADDR_VAR 0 2
72903: PUSH
72904: LD_VAR 0 1
72908: PPUSH
72909: CALL_OW 310
72913: ST_TO_ADDR
// if not result then
72914: LD_VAR 0 2
72918: NOT
72919: IFFALSE 72931
// result := unit ;
72921: LD_ADDR_VAR 0 2
72925: PUSH
72926: LD_VAR 0 1
72930: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72931: LD_VAR 0 1
72935: PPUSH
72936: CALL_OW 87
// end ;
72940: LD_VAR 0 2
72944: RET
// export function ComMoveHex ( unit , hex ) ; begin
72945: LD_INT 0
72947: PPUSH
// if not hex then
72948: LD_VAR 0 2
72952: NOT
72953: IFFALSE 72957
// exit ;
72955: GO 73010
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72957: LD_VAR 0 2
72961: PUSH
72962: LD_INT 1
72964: ARRAY
72965: PPUSH
72966: LD_VAR 0 2
72970: PUSH
72971: LD_INT 2
72973: ARRAY
72974: PPUSH
72975: CALL_OW 428
72979: IFFALSE 72983
// exit ;
72981: GO 73010
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72983: LD_VAR 0 1
72987: PPUSH
72988: LD_VAR 0 2
72992: PUSH
72993: LD_INT 1
72995: ARRAY
72996: PPUSH
72997: LD_VAR 0 2
73001: PUSH
73002: LD_INT 2
73004: ARRAY
73005: PPUSH
73006: CALL_OW 111
// end ;
73010: LD_VAR 0 3
73014: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73015: LD_INT 0
73017: PPUSH
73018: PPUSH
73019: PPUSH
// if not unit or not enemy then
73020: LD_VAR 0 1
73024: NOT
73025: PUSH
73026: LD_VAR 0 2
73030: NOT
73031: OR
73032: IFFALSE 73036
// exit ;
73034: GO 73160
// x := GetX ( enemy ) ;
73036: LD_ADDR_VAR 0 4
73040: PUSH
73041: LD_VAR 0 2
73045: PPUSH
73046: CALL_OW 250
73050: ST_TO_ADDR
// y := GetY ( enemy ) ;
73051: LD_ADDR_VAR 0 5
73055: PUSH
73056: LD_VAR 0 2
73060: PPUSH
73061: CALL_OW 251
73065: ST_TO_ADDR
// if ValidHex ( x , y ) then
73066: LD_VAR 0 4
73070: PPUSH
73071: LD_VAR 0 5
73075: PPUSH
73076: CALL_OW 488
73080: IFFALSE 73160
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
73082: LD_VAR 0 2
73086: PPUSH
73087: CALL_OW 247
73091: PUSH
73092: LD_INT 3
73094: PUSH
73095: LD_INT 2
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: IN
73102: PUSH
73103: LD_VAR 0 1
73107: PPUSH
73108: CALL_OW 255
73112: PPUSH
73113: LD_VAR 0 2
73117: PPUSH
73118: CALL_OW 292
73122: AND
73123: IFFALSE 73141
// ComAttackUnit ( unit , enemy ) else
73125: LD_VAR 0 1
73129: PPUSH
73130: LD_VAR 0 2
73134: PPUSH
73135: CALL_OW 115
73139: GO 73160
// ComAgressiveMove ( unit , x , y ) ;
73141: LD_VAR 0 1
73145: PPUSH
73146: LD_VAR 0 4
73150: PPUSH
73151: LD_VAR 0 5
73155: PPUSH
73156: CALL_OW 114
// end ; end_of_file
73160: LD_VAR 0 3
73164: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73165: LD_VAR 0 1
73169: PUSH
73170: LD_INT 200
73172: DOUBLE
73173: GREATEREQUAL
73174: IFFALSE 73182
73176: LD_INT 299
73178: DOUBLE
73179: LESSEQUAL
73180: IFTRUE 73184
73182: GO 73216
73184: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73185: LD_VAR 0 1
73189: PPUSH
73190: LD_VAR 0 2
73194: PPUSH
73195: LD_VAR 0 3
73199: PPUSH
73200: LD_VAR 0 4
73204: PPUSH
73205: LD_VAR 0 5
73209: PPUSH
73210: CALL 11087 0 5
73214: GO 73293
73216: LD_INT 300
73218: DOUBLE
73219: GREATEREQUAL
73220: IFFALSE 73228
73222: LD_INT 399
73224: DOUBLE
73225: LESSEQUAL
73226: IFTRUE 73230
73228: GO 73292
73230: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73231: LD_VAR 0 1
73235: PPUSH
73236: LD_VAR 0 2
73240: PPUSH
73241: LD_VAR 0 3
73245: PPUSH
73246: LD_VAR 0 4
73250: PPUSH
73251: LD_VAR 0 5
73255: PPUSH
73256: LD_VAR 0 6
73260: PPUSH
73261: LD_VAR 0 7
73265: PPUSH
73266: LD_VAR 0 8
73270: PPUSH
73271: LD_VAR 0 9
73275: PPUSH
73276: LD_VAR 0 10
73280: PPUSH
73281: LD_VAR 0 11
73285: PPUSH
73286: CALL 27942 0 11
73290: GO 73293
73292: POP
// end ;
73293: PPOPN 11
73295: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73296: LD_VAR 0 1
73300: PPUSH
73301: LD_VAR 0 2
73305: PPUSH
73306: LD_VAR 0 3
73310: PPUSH
73311: LD_VAR 0 4
73315: PPUSH
73316: LD_VAR 0 5
73320: PPUSH
73321: CALL 10823 0 5
// end ; end_of_file
73325: PPOPN 5
73327: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73328: LD_VAR 0 1
73332: PPUSH
73333: LD_VAR 0 2
73337: PPUSH
73338: LD_VAR 0 3
73342: PPUSH
73343: LD_VAR 0 4
73347: PPUSH
73348: LD_VAR 0 5
73352: PPUSH
73353: LD_VAR 0 6
73357: PPUSH
73358: CALL 15594 0 6
// end ;
73362: PPOPN 6
73364: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73365: LD_INT 0
73367: PPUSH
// begin if not units then
73368: LD_VAR 0 1
73372: NOT
73373: IFFALSE 73377
// exit ;
73375: GO 73377
// end ;
73377: PPOPN 7
73379: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73380: CALL 15498 0 0
// end ;
73384: PPOPN 1
73386: END
