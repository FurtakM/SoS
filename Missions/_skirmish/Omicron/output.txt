// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 61845 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7066 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := false ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 28482 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 33346 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 33346 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 65734 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 28482 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 28482 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 28482 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 33346 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 28482 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 65734 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 33346 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 65734 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 68456 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// uc_side := 3 ;
4699: LD_ADDR_OWVAR 20
4703: PUSH
4704: LD_INT 3
4706: ST_TO_ADDR
// uc_nation := 3 ;
4707: LD_ADDR_OWVAR 21
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// ResetHc ;
4715: CALL 65734 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4719: LD_INT 0
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_INT 3
4727: PUSH
4728: LD_INT 4
4730: PUSH
4731: LD_INT 5
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 380
// un := CreateHuman ;
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: CALL_OW 44
4758: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4759: LD_VAR 0 3
4763: PPUSH
4764: LD_INT 143
4766: PPUSH
4767: CALL_OW 52
// if type = 1 then
4771: LD_VAR 0 1
4775: PUSH
4776: LD_INT 1
4778: EQUAL
4779: IFFALSE 4802
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4781: LD_INT 143
4783: PPUSH
4784: LD_INT 21
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: LD_INT 51
4795: PPUSH
4796: CALL_OW 185
4800: GO 4881
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4802: LD_INT 143
4804: PPUSH
4805: LD_INT 21
4807: PUSH
4808: LD_INT 22
4810: PUSH
4811: LD_INT 23
4813: PUSH
4814: LD_INT 24
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 1
4833: PLUS
4834: PPUSH
4835: CALL_OW 12
4839: ARRAY
4840: PPUSH
4841: LD_INT 1
4843: PPUSH
4844: LD_INT 1
4846: PPUSH
4847: LD_INT 44
4849: PUSH
4850: LD_INT 44
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: LD_INT 42
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 1
4867: PPUSH
4868: LD_INT 4
4870: PPUSH
4871: CALL_OW 12
4875: ARRAY
4876: PPUSH
4877: CALL_OW 185
// end ;
4881: LD_VAR 0 2
4885: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4886: LD_EXP 8
4890: IFFALSE 5092
4892: GO 4894
4894: DISABLE
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4899: LD_EXP 25
4903: PPUSH
4904: LD_INT 79
4906: PPUSH
4907: LD_INT 155
4909: PPUSH
4910: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4914: LD_EXP 25
4918: PPUSH
4919: LD_INT 4
4921: PPUSH
4922: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4926: LD_ADDR_VAR 0 2
4930: PUSH
4931: LD_EXP 24
4935: PPUSH
4936: LD_INT 50
4938: PUSH
4939: EMPTY
4940: LIST
4941: PPUSH
4942: CALL_OW 72
4946: ST_TO_ADDR
// for i in tmp do
4947: LD_ADDR_VAR 0 1
4951: PUSH
4952: LD_VAR 0 2
4956: PUSH
4957: FOR_IN
4958: IFFALSE 4992
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4960: LD_VAR 0 1
4964: PPUSH
4965: LD_INT 123
4967: PPUSH
4968: LD_INT 60
4970: PPUSH
4971: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
4975: LD_VAR 0 1
4979: PPUSH
4980: LD_INT 153
4982: PPUSH
4983: LD_INT 103
4985: PPUSH
4986: CALL_OW 174
// end ;
4990: GO 4957
4992: POP
4993: POP
// repeat wait ( 0 0$1 ) ;
4994: LD_INT 35
4996: PPUSH
4997: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_EXP 24
5010: PPUSH
5011: LD_INT 50
5013: PUSH
5014: EMPTY
5015: LIST
5016: PPUSH
5017: CALL_OW 72
5021: ST_TO_ADDR
// for i in tmp do
5022: LD_ADDR_VAR 0 1
5026: PUSH
5027: LD_VAR 0 2
5031: PUSH
5032: FOR_IN
5033: IFFALSE 5083
// if not HasTask ( i ) then
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 314
5044: NOT
5045: IFFALSE 5081
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5047: LD_VAR 0 1
5051: PPUSH
5052: LD_INT 81
5054: PUSH
5055: LD_INT 3
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 69
5066: PPUSH
5067: LD_VAR 0 1
5071: PPUSH
5072: CALL_OW 74
5076: PPUSH
5077: CALL_OW 115
5081: GO 5032
5083: POP
5084: POP
5085: LD_VAR 0 2
5089: NOT
5090: IFFALSE 4994
// end ;
5092: PPOPN 2
5094: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5095: LD_INT 5
5097: PPUSH
5098: LD_INT 81
5100: PUSH
5101: LD_INT 6
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5125
5114: GO 5116
5116: DISABLE
// russianAlert := true ;
5117: LD_ADDR_EXP 5
5121: PUSH
5122: LD_INT 1
5124: ST_TO_ADDR
5125: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5126: LD_INT 106
5128: PPUSH
5129: CALL_OW 302
5133: PUSH
5134: LD_INT 106
5136: PPUSH
5137: CALL_OW 255
5141: PUSH
5142: LD_INT 3
5144: EQUAL
5145: AND
5146: PUSH
5147: LD_INT 106
5149: PPUSH
5150: CALL_OW 274
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 275
5162: PUSH
5163: LD_INT 100
5165: LESS
5166: AND
5167: IFFALSE 5191
5169: GO 5171
5171: DISABLE
// begin enable ;
5172: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5173: LD_INT 106
5175: PPUSH
5176: CALL_OW 274
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: LD_INT 200
5186: PPUSH
5187: CALL_OW 276
// end ;
5191: END
// every 0 0$1 do var i , un , tmp ;
5192: GO 5194
5194: DISABLE
5195: LD_INT 0
5197: PPUSH
5198: PPUSH
5199: PPUSH
// begin uc_side := 3 ;
5200: LD_ADDR_OWVAR 20
5204: PUSH
5205: LD_INT 3
5207: ST_TO_ADDR
// uc_nation := 3 ;
5208: LD_ADDR_OWVAR 21
5212: PUSH
5213: LD_INT 3
5215: ST_TO_ADDR
// tmp := [ ] ;
5216: LD_ADDR_VAR 0 3
5220: PUSH
5221: EMPTY
5222: ST_TO_ADDR
// for i := 1 to 2 do
5223: LD_ADDR_VAR 0 1
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 2
5235: PUSH
5236: FOR_TO
5237: IFFALSE 5314
// begin PrepareHuman ( false , 2 , 2 ) ;
5239: LD_INT 0
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: LD_INT 2
5247: PPUSH
5248: CALL_OW 380
// un := CreateHuman ;
5252: LD_ADDR_VAR 0 2
5256: PUSH
5257: CALL_OW 44
5261: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5262: LD_ADDR_VAR 0 3
5266: PUSH
5267: LD_VAR 0 3
5271: PPUSH
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 1
5279: PLUS
5280: PPUSH
5281: LD_VAR 0 2
5285: PPUSH
5286: CALL_OW 1
5290: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5291: LD_VAR 0 2
5295: PPUSH
5296: LD_INT 74
5298: PPUSH
5299: LD_INT 112
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 50
// end ;
5312: GO 5236
5314: POP
5315: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5316: LD_INT 112
5318: PPUSH
5319: CALL_OW 274
5323: PPUSH
5324: LD_INT 2
5326: PPUSH
5327: LD_INT 100
5329: PPUSH
5330: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// for i in tmp do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_VAR 0 3
5350: PUSH
5351: FOR_IN
5352: IFFALSE 5434
// begin if IsDead ( i ) then
5354: LD_VAR 0 1
5358: PPUSH
5359: CALL_OW 301
5363: IFFALSE 5381
// tmp := tmp diff i ;
5365: LD_ADDR_VAR 0 3
5369: PUSH
5370: LD_VAR 0 3
5374: PUSH
5375: LD_VAR 0 1
5379: DIFF
5380: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 314
5390: NOT
5391: PUSH
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 281
5401: NOT
5402: AND
5403: IFFALSE 5432
// begin ComTransport ( i , kagan , mat_oil ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_INT 112
5412: PPUSH
5413: LD_INT 2
5415: PPUSH
5416: CALL_OW 151
// AddComGive ( i , beria ) ;
5420: LD_VAR 0 1
5424: PPUSH
5425: LD_INT 106
5427: PPUSH
5428: CALL_OW 221
// end ; end ;
5432: GO 5351
5434: POP
5435: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5436: LD_VAR 0 3
5440: NOT
5441: PUSH
5442: LD_INT 112
5444: PPUSH
5445: CALL_OW 301
5449: OR
5450: PUSH
5451: LD_INT 106
5453: PPUSH
5454: CALL_OW 301
5458: OR
5459: IFFALSE 5334
// end ;
5461: PPOPN 3
5463: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5464: GO 5466
5466: DISABLE
5467: LD_INT 0
5469: PPUSH
5470: PPUSH
5471: PPUSH
5472: PPUSH
5473: PPUSH
// begin enable ;
5474: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5475: LD_ADDR_VAR 0 4
5479: PUSH
5480: LD_INT 22
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PUSH
5490: LD_INT 34
5492: PUSH
5493: LD_INT 51
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PUSH
5500: LD_INT 24
5502: PUSH
5503: LD_INT 600
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: PPUSH
5515: CALL_OW 69
5519: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5520: LD_ADDR_VAR 0 5
5524: PUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 3
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 2
5537: PUSH
5538: LD_INT 30
5540: PUSH
5541: LD_INT 0
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 30
5550: PUSH
5551: LD_INT 1
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 69
5571: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5572: LD_ADDR_VAR 0 3
5576: PUSH
5577: LD_INT 9
5579: PPUSH
5580: CALL_OW 435
5584: ST_TO_ADDR
// if not cargo or not skr or not dep then
5585: LD_VAR 0 4
5589: NOT
5590: PUSH
5591: LD_VAR 0 3
5595: NOT
5596: OR
5597: PUSH
5598: LD_VAR 0 5
5602: NOT
5603: OR
5604: IFFALSE 5608
// exit ;
5606: GO 5772
// for i in cargo do
5608: LD_ADDR_VAR 0 1
5612: PUSH
5613: LD_VAR 0 4
5617: PUSH
5618: FOR_IN
5619: IFFALSE 5770
// begin if not skr then
5621: LD_VAR 0 3
5625: NOT
5626: IFFALSE 5632
// exit ;
5628: POP
5629: POP
5630: GO 5772
// if not HasTask ( i ) then
5632: LD_VAR 0 1
5636: PPUSH
5637: CALL_OW 314
5641: NOT
5642: IFFALSE 5711
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5644: LD_VAR 0 1
5648: PPUSH
5649: LD_VAR 0 3
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 3
5662: PUSH
5663: LD_INT 2
5665: ARRAY
5666: PPUSH
5667: CALL_OW 117
// for j := 1 to 2 do
5671: LD_ADDR_VAR 0 2
5675: PUSH
5676: DOUBLE
5677: LD_INT 1
5679: DEC
5680: ST_TO_ADDR
5681: LD_INT 2
5683: PUSH
5684: FOR_TO
5685: IFFALSE 5707
// skr := Delete ( skr , 1 ) ;
5687: LD_ADDR_VAR 0 3
5691: PUSH
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: CALL_OW 3
5704: ST_TO_ADDR
5705: GO 5684
5707: POP
5708: POP
// end else
5709: GO 5768
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5711: LD_VAR 0 1
5715: PPUSH
5716: CALL_OW 261
5720: PUSH
5721: LD_INT 3
5723: LESS
5724: PUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_VAR 0 1
5739: PPUSH
5740: CALL_OW 74
5744: PPUSH
5745: CALL_OW 296
5749: PUSH
5750: LD_INT 6
5752: LESS
5753: AND
5754: IFFALSE 5768
// SetFuel ( i , 100 ) ;
5756: LD_VAR 0 1
5760: PPUSH
5761: LD_INT 100
5763: PPUSH
5764: CALL_OW 240
// end ;
5768: GO 5618
5770: POP
5771: POP
// end ;
5772: PPOPN 5
5774: END
// export function SendSupport ; var i , un ; begin
5775: LD_INT 0
5777: PPUSH
5778: PPUSH
5779: PPUSH
// uc_nation := 3 ;
5780: LD_ADDR_OWVAR 21
5784: PUSH
5785: LD_INT 3
5787: ST_TO_ADDR
// uc_side := 3 ;
5788: LD_ADDR_OWVAR 20
5792: PUSH
5793: LD_INT 3
5795: ST_TO_ADDR
// ResetHc ;
5796: CALL 65734 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: DOUBLE
5806: LD_INT 1
5808: DEC
5809: ST_TO_ADDR
5810: LD_INT 3
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: LD_INT 4
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_OWVAR 67
5828: ARRAY
5829: PUSH
5830: FOR_TO
5831: IFFALSE 5905
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5833: LD_INT 0
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_OWVAR 67
5843: PPUSH
5844: CALL_OW 380
// un := CreateHuman ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: CALL_OW 44
5857: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 107
5865: PPUSH
5866: LD_INT 95
5868: PPUSH
5869: LD_INT 4
5871: PPUSH
5872: LD_INT 0
5874: PPUSH
5875: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5879: LD_VAR 0 3
5883: PPUSH
5884: LD_INT 56
5886: PPUSH
5887: LD_INT 27
5889: PPUSH
5890: CALL_OW 114
// AddComHold ( un ) ;
5894: LD_VAR 0 3
5898: PPUSH
5899: CALL_OW 200
// end ;
5903: GO 5830
5905: POP
5906: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5907: LD_INT 0
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: LD_OWVAR 67
5917: PPUSH
5918: CALL_OW 380
// un := CreateHuman ;
5922: LD_ADDR_VAR 0 3
5926: PUSH
5927: CALL_OW 44
5931: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5932: LD_VAR 0 3
5936: PPUSH
5937: LD_INT 107
5939: PPUSH
5940: LD_INT 95
5942: PPUSH
5943: LD_INT 4
5945: PPUSH
5946: LD_INT 0
5948: PPUSH
5949: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_INT 59
5960: PPUSH
5961: LD_INT 25
5963: PPUSH
5964: CALL_OW 111
// if Difficulty > 1 then
5968: LD_OWVAR 67
5972: PUSH
5973: LD_INT 1
5975: GREATER
5976: IFFALSE 6085
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
5978: LD_ADDR_VAR 0 2
5982: PUSH
5983: DOUBLE
5984: LD_INT 1
5986: DEC
5987: ST_TO_ADDR
5988: LD_INT 2
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 3
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: PUSH
6002: LD_OWVAR 67
6006: ARRAY
6007: PUSH
6008: FOR_TO
6009: IFFALSE 6083
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6011: LD_INT 0
6013: PPUSH
6014: LD_INT 1
6016: PPUSH
6017: LD_OWVAR 67
6021: PPUSH
6022: CALL_OW 380
// un := CreateHuman ;
6026: LD_ADDR_VAR 0 3
6030: PUSH
6031: CALL_OW 44
6035: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 107
6043: PPUSH
6044: LD_INT 95
6046: PPUSH
6047: LD_INT 4
6049: PPUSH
6050: LD_INT 0
6052: PPUSH
6053: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 45
6064: PPUSH
6065: LD_INT 76
6067: PPUSH
6068: CALL_OW 114
// AddComHold ( un ) ;
6072: LD_VAR 0 3
6076: PPUSH
6077: CALL_OW 200
// end ;
6081: GO 6008
6083: POP
6084: POP
// end ; end ;
6085: LD_VAR 0 1
6089: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6090: LD_OWVAR 1
6094: PUSH
6095: LD_INT 42000
6097: GREATEREQUAL
6098: PUSH
6099: LD_OWVAR 67
6103: PUSH
6104: LD_INT 1
6106: GREATER
6107: AND
6108: PUSH
6109: LD_EXP 24
6113: PUSH
6114: LD_INT 4
6116: GREATER
6117: AND
6118: PUSH
6119: LD_EXP 8
6123: NOT
6124: AND
6125: IFFALSE 6418
6127: GO 6129
6129: DISABLE
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
6134: PPUSH
6135: PPUSH
// begin enable ;
6136: ENABLE
// tmp := [ ] ;
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: EMPTY
6143: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6144: LD_ADDR_VAR 0 4
6148: PUSH
6149: LD_INT 55
6151: PUSH
6152: LD_INT 91
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 47
6161: PUSH
6162: LD_INT 80
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 39
6171: PUSH
6172: LD_INT 67
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 36
6181: PUSH
6182: LD_INT 60
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 33
6191: PUSH
6192: LD_INT 52
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6206: LD_ADDR_VAR 0 1
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 2
6218: PUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_OWVAR 67
6234: PUSH
6235: LD_INT 1
6237: MINUS
6238: ARRAY
6239: PUSH
6240: FOR_TO
6241: IFFALSE 6392
// begin uc_side := 3 ;
6243: LD_ADDR_OWVAR 20
6247: PUSH
6248: LD_INT 3
6250: ST_TO_ADDR
// uc_nation := 3 ;
6251: LD_ADDR_OWVAR 21
6255: PUSH
6256: LD_INT 3
6258: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6259: LD_INT 22
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 1
6267: PPUSH
6268: LD_INT 42
6270: PUSH
6271: LD_INT 42
6273: PUSH
6274: LD_INT 44
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: PUSH
6282: LD_VAR 0 1
6286: PUSH
6287: LD_INT 3
6289: MOD
6290: PUSH
6291: LD_INT 1
6293: PLUS
6294: ARRAY
6295: PPUSH
6296: LD_INT 100
6298: PPUSH
6299: CALL 33346 0 5
// un := CreateVehicle ;
6303: LD_ADDR_VAR 0 2
6307: PUSH
6308: CALL_OW 45
6312: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_INT 57
6320: PPUSH
6321: LD_INT 103
6323: PPUSH
6324: LD_INT 4
6326: PPUSH
6327: LD_INT 0
6329: PPUSH
6330: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6334: LD_ADDR_VAR 0 3
6338: PUSH
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_VAR 0 3
6348: PUSH
6349: LD_INT 1
6351: PLUS
6352: PPUSH
6353: LD_VAR 0 2
6357: PPUSH
6358: CALL_OW 1
6362: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6363: LD_INT 0
6365: PPUSH
6366: LD_INT 3
6368: PPUSH
6369: LD_INT 5
6371: PPUSH
6372: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6376: CALL_OW 44
6380: PPUSH
6381: LD_VAR 0 2
6385: PPUSH
6386: CALL_OW 52
// end ;
6390: GO 6240
6392: POP
6393: POP
// repeat wait ( 0 0$1 ) ;
6394: LD_INT 35
6396: PPUSH
6397: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6401: LD_VAR 0 3
6405: PPUSH
6406: LD_VAR 0 4
6410: PPUSH
6411: CALL 67815 0 2
6415: NOT
6416: IFFALSE 6394
// end ;
6418: PPOPN 4
6420: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6421: LD_INT 3
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 32
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PPUSH
6452: CALL_OW 69
6456: IFFALSE 6540
6458: GO 6460
6460: DISABLE
6461: LD_INT 0
6463: PPUSH
// begin enable ;
6464: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6465: LD_ADDR_VAR 0 1
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: LD_INT 22
6475: PUSH
6476: LD_INT 1
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 32
6489: PUSH
6490: LD_INT 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PPUSH
6501: CALL_OW 69
6505: PUSH
6506: FOR_IN
6507: IFFALSE 6538
// if GetFuel ( i ) < 3 then
6509: LD_VAR 0 1
6513: PPUSH
6514: CALL_OW 261
6518: PUSH
6519: LD_INT 3
6521: LESS
6522: IFFALSE 6536
// SetFuel ( i , 3 ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 240
6536: GO 6506
6538: POP
6539: POP
// end ; end_of_file
6540: PPOPN 1
6542: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6543: LD_INT 0
6545: PPUSH
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
6550: PPUSH
// uc_side := 2 ;
6551: LD_ADDR_OWVAR 20
6555: PUSH
6556: LD_INT 2
6558: ST_TO_ADDR
// uc_nation := 2 ;
6559: LD_ADDR_OWVAR 21
6563: PUSH
6564: LD_INT 2
6566: ST_TO_ADDR
// InitVc ;
6567: CALL_OW 20
// ResetHc ;
6571: CALL 65734 0 0
// for j := 1 to 2 do
6575: LD_ADDR_VAR 0 3
6579: PUSH
6580: DOUBLE
6581: LD_INT 1
6583: DEC
6584: ST_TO_ADDR
6585: LD_INT 2
6587: PUSH
6588: FOR_TO
6589: IFFALSE 6813
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6591: LD_ADDR_VAR 0 6
6595: PUSH
6596: LD_INT 178
6598: PUSH
6599: LD_INT 3
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 268
6608: PUSH
6609: LD_INT 121
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ARRAY
6625: ST_TO_ADDR
// for i := 1 to 8 do
6626: LD_ADDR_VAR 0 2
6630: PUSH
6631: DOUBLE
6632: LD_INT 1
6634: DEC
6635: ST_TO_ADDR
6636: LD_INT 8
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6809
// begin uc_side := 2 ;
6642: LD_ADDR_OWVAR 20
6646: PUSH
6647: LD_INT 2
6649: ST_TO_ADDR
// uc_nation := 2 ;
6650: LD_ADDR_OWVAR 21
6654: PUSH
6655: LD_INT 2
6657: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6658: LD_INT 14
6660: PPUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: LD_INT 26
6669: PUSH
6670: LD_INT 27
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 1
6679: PPUSH
6680: LD_INT 2
6682: PPUSH
6683: CALL_OW 12
6687: ARRAY
6688: PPUSH
6689: LD_INT 99
6691: PPUSH
6692: CALL 33346 0 5
// veh := CreateVehicle ;
6696: LD_ADDR_VAR 0 5
6700: PUSH
6701: CALL_OW 45
6705: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6706: LD_VAR 0 5
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6718: LD_VAR 0 5
6722: PPUSH
6723: LD_VAR 0 6
6727: PUSH
6728: LD_INT 1
6730: ARRAY
6731: PPUSH
6732: LD_VAR 0 6
6736: PUSH
6737: LD_INT 2
6739: ARRAY
6740: PPUSH
6741: LD_INT 0
6743: PPUSH
6744: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6748: LD_INT 0
6750: PPUSH
6751: LD_INT 3
6753: PPUSH
6754: LD_INT 6
6756: PPUSH
6757: CALL_OW 380
// un := CreateHuman ;
6761: LD_ADDR_VAR 0 4
6765: PUSH
6766: CALL_OW 44
6770: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6771: LD_VAR 0 4
6775: PPUSH
6776: LD_VAR 0 5
6780: PPUSH
6781: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6785: LD_VAR 0 4
6789: PPUSH
6790: LD_INT 186
6792: PPUSH
6793: LD_INT 17
6795: PPUSH
6796: CALL_OW 111
// wait ( 0 0$2 ) ;
6800: LD_INT 70
6802: PPUSH
6803: CALL_OW 67
// end ;
6807: GO 6639
6809: POP
6810: POP
// end ;
6811: GO 6588
6813: POP
6814: POP
// for i := 1 to 10 do
6815: LD_ADDR_VAR 0 2
6819: PUSH
6820: DOUBLE
6821: LD_INT 1
6823: DEC
6824: ST_TO_ADDR
6825: LD_INT 10
6827: PUSH
6828: FOR_TO
6829: IFFALSE 6896
// begin PrepareHuman ( false , 1 , 5 ) ;
6831: LD_INT 0
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 5
6839: PPUSH
6840: CALL_OW 380
// un := CreateHuman ;
6844: LD_ADDR_VAR 0 4
6848: PUSH
6849: CALL_OW 44
6853: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6854: LD_VAR 0 4
6858: PPUSH
6859: LD_INT 178
6861: PPUSH
6862: LD_INT 3
6864: PPUSH
6865: LD_INT 0
6867: PPUSH
6868: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6872: LD_VAR 0 4
6876: PPUSH
6877: LD_INT 186
6879: PPUSH
6880: LD_INT 17
6882: PPUSH
6883: CALL_OW 111
// wait ( 0 0$2 ) ;
6887: LD_INT 70
6889: PPUSH
6890: CALL_OW 67
// end ;
6894: GO 6828
6896: POP
6897: POP
// end ;
6898: LD_VAR 0 1
6902: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6903: LD_INT 22
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 50
6915: PUSH
6916: EMPTY
6917: LIST
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PPUSH
6923: CALL_OW 69
6927: IFFALSE 7063
6929: GO 6931
6931: DISABLE
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
// begin enable ;
6936: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6937: LD_ADDR_VAR 0 2
6941: PUSH
6942: LD_INT 2
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 6
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 69
6974: ST_TO_ADDR
// if not enemy then
6975: LD_VAR 0 2
6979: NOT
6980: IFFALSE 7002
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7002: LD_ADDR_VAR 0 1
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 50
7019: PUSH
7020: EMPTY
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: PUSH
7032: FOR_IN
7033: IFFALSE 7061
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7035: LD_VAR 0 1
7039: PPUSH
7040: LD_VAR 0 2
7044: PPUSH
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 74
7054: PPUSH
7055: CALL_OW 115
7059: GO 7032
7061: POP
7062: POP
// end ; end_of_file
7063: PPOPN 2
7065: END
// export function Action ; begin
7066: LD_INT 0
7068: PPUSH
// InGameOn ;
7069: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7073: LD_INT 106
7075: PPUSH
7076: LD_INT 3
7078: PPUSH
7079: CALL_OW 86
// wait ( 0 0$2 ) ;
7083: LD_INT 70
7085: PPUSH
7086: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7090: LD_STRING target1
7092: PPUSH
7093: CALL_OW 337
// InGameOff ;
7097: CALL_OW 9
// SaveForQuickRestart ;
7101: CALL_OW 22
// end ;
7105: LD_VAR 0 1
7109: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7110: LD_INT 64
7112: PPUSH
7113: CALL_OW 301
7117: PUSH
7118: LD_EXP 8
7122: NOT
7123: AND
7124: IFFALSE 7144
7126: GO 7128
7128: DISABLE
// begin omicronFall := true ;
7129: LD_ADDR_EXP 7
7133: PUSH
7134: LD_INT 1
7136: ST_TO_ADDR
// YouLost ( omi ) ;
7137: LD_STRING omi
7139: PPUSH
7140: CALL_OW 104
// end ;
7144: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7145: LD_INT 4
7147: PPUSH
7148: LD_EXP 14
7152: PPUSH
7153: CALL_OW 292
7157: PUSH
7158: LD_INT 4
7160: PPUSH
7161: LD_EXP 14
7165: PPUSH
7166: CALL_OW 310
7170: PPUSH
7171: CALL_OW 292
7175: OR
7176: PUSH
7177: LD_INT 64
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7738
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// begin InGameOn ;
7196: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7200: LD_ADDR_VAR 0 2
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 4
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_VAR 0 2
7229: PPUSH
7230: LD_INT 26
7232: PUSH
7233: LD_INT 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 72
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: ST_TO_ADDR
// for i in tmp do
7249: LD_ADDR_VAR 0 1
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: FOR_IN
7260: IFFALSE 7276
// SetSide ( i , 1 ) ;
7262: LD_VAR 0 1
7266: PPUSH
7267: LD_INT 1
7269: PPUSH
7270: CALL_OW 235
7274: GO 7259
7276: POP
7277: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7278: LD_EXP 14
7282: PPUSH
7283: LD_INT 37
7285: PPUSH
7286: LD_INT 40
7288: PPUSH
7289: CALL_OW 111
// wait ( 0 0$5 ) ;
7293: LD_INT 175
7295: PPUSH
7296: CALL_OW 67
// ComExit ( Sikorski ) ;
7300: LD_EXP 14
7304: PPUSH
7305: CALL 65607 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7309: LD_EXP 14
7313: PPUSH
7314: LD_INT 37
7316: PPUSH
7317: LD_INT 40
7319: PPUSH
7320: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7324: LD_EXP 14
7328: PPUSH
7329: CALL_OW 85
// wait ( 0 0$2 ) ;
7333: LD_INT 70
7335: PPUSH
7336: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7340: LD_ADDR_VAR 0 4
7344: PUSH
7345: LD_VAR 0 3
7349: PPUSH
7350: CALL 65607 0 1
7354: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7355: LD_VAR 0 3
7359: PPUSH
7360: LD_EXP 14
7364: PPUSH
7365: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7376: LD_VAR 0 3
7380: PPUSH
7381: LD_EXP 14
7385: PPUSH
7386: CALL_OW 296
7390: PUSH
7391: LD_INT 5
7393: LESS
7394: PUSH
7395: LD_EXP 14
7399: PPUSH
7400: CALL_OW 310
7404: NOT
7405: AND
7406: IFFALSE 7369
// ComTurnUnit ( Sikorski , speaker ) ;
7408: LD_EXP 14
7412: PPUSH
7413: LD_VAR 0 3
7417: PPUSH
7418: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7422: LD_VAR 0 3
7426: PPUSH
7427: LD_EXP 14
7431: PPUSH
7432: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7436: LD_EXP 14
7440: PPUSH
7441: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7445: LD_EXP 14
7449: PPUSH
7450: LD_STRING DS-1
7452: PPUSH
7453: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7457: LD_VAR 0 3
7461: PPUSH
7462: LD_STRING DP-1
7464: PPUSH
7465: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7469: LD_EXP 14
7473: PPUSH
7474: LD_STRING DS-2
7476: PPUSH
7477: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7481: LD_VAR 0 3
7485: PPUSH
7486: LD_STRING DP-2
7488: PPUSH
7489: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7493: LD_EXP 14
7497: PPUSH
7498: LD_STRING DS-3
7500: PPUSH
7501: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7505: LD_VAR 0 3
7509: PPUSH
7510: LD_STRING DP-3
7512: PPUSH
7513: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7517: LD_EXP 14
7521: PPUSH
7522: LD_STRING DS-4
7524: PPUSH
7525: CALL_OW 88
// wait ( 0 0$1 ) ;
7529: LD_INT 35
7531: PPUSH
7532: CALL_OW 67
// if whereHeWas then
7536: LD_VAR 0 4
7540: IFFALSE 7556
// ComEnterUnit ( speaker , whereHeWas ) ;
7542: LD_VAR 0 3
7546: PPUSH
7547: LD_VAR 0 4
7551: PPUSH
7552: CALL_OW 120
// ComHold ( Sikorski ) ;
7556: LD_EXP 14
7560: PPUSH
7561: CALL_OW 140
// wait ( 0 0$1 ) ;
7565: LD_INT 35
7567: PPUSH
7568: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7572: LD_EXP 15
7576: PPUSH
7577: LD_STRING DR-1
7579: PPUSH
7580: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7584: LD_EXP 14
7588: PPUSH
7589: LD_STRING DS-5
7591: PPUSH
7592: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7596: LD_EXP 15
7600: PPUSH
7601: LD_STRING DR-2
7603: PPUSH
7604: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7608: LD_EXP 14
7612: PPUSH
7613: LD_STRING DS-6
7615: PPUSH
7616: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7620: LD_EXP 15
7624: PPUSH
7625: LD_STRING DR-3
7627: PPUSH
7628: CALL_OW 94
// InGameOff ;
7632: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7636: LD_STRING target2
7638: PPUSH
7639: CALL_OW 337
// sikorskiInOmicron := true ;
7643: LD_ADDR_EXP 9
7647: PUSH
7648: LD_INT 1
7650: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7651: LD_INT 70
7653: PPUSH
7654: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7658: LD_EXP 14
7662: PPUSH
7663: LD_STRING DS-7
7665: PPUSH
7666: CALL_OW 88
// wait ( 3 3$00 ) ;
7670: LD_INT 6300
7672: PPUSH
7673: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7677: LD_EXP 15
7681: PPUSH
7682: LD_STRING DRforce-5
7684: PPUSH
7685: CALL_OW 94
// wait ( 4 4$50 ) ;
7689: LD_INT 10150
7691: PPUSH
7692: CALL_OW 67
// FirstReinforcements ;
7696: CALL 7915 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7700: LD_INT 25200
7702: PPUSH
7703: LD_INT 31500
7705: PPUSH
7706: CALL_OW 12
7710: PPUSH
7711: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7715: LD_EXP 15
7719: PPUSH
7720: LD_STRING DRforce-10
7722: PPUSH
7723: CALL_OW 94
// wait ( 9 9$50 ) ;
7727: LD_INT 20650
7729: PPUSH
7730: CALL_OW 67
// SecondReinforcements ;
7734: CALL 8758 0 0
// end ;
7738: PPOPN 4
7740: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7741: LD_EXP 14
7745: PPUSH
7746: CALL_OW 256
7750: PUSH
7751: LD_INT 1000
7753: LESS
7754: PUSH
7755: LD_INT 22
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: LD_INT 101
7770: PUSH
7771: LD_INT 3
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 101
7780: PUSH
7781: LD_INT 6
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PPUSH
7797: CALL_OW 69
7801: AND
7802: IFFALSE 7819
7804: GO 7806
7806: DISABLE
// Say ( Sikorski , DRus ) ;
7807: LD_EXP 14
7811: PPUSH
7812: LD_STRING DRus
7814: PPUSH
7815: CALL_OW 88
7819: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7820: LD_OWVAR 1
7824: PUSH
7825: LD_INT 23100
7827: PUSH
7828: LD_INT 22050
7830: PUSH
7831: LD_INT 20300
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: LD_OWVAR 67
7843: ARRAY
7844: GREATEREQUAL
7845: IFFALSE 7914
7847: GO 7849
7849: DISABLE
// begin SendSupport ;
7850: CALL 5775 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7854: LD_EXP 24
7858: PPUSH
7859: LD_INT 21
7861: PUSH
7862: LD_INT 2
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 72
7873: PPUSH
7874: LD_INT 62
7876: PPUSH
7877: LD_INT 22
7879: PPUSH
7880: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7884: LD_EXP 25
7888: PPUSH
7889: LD_INT 69
7891: PPUSH
7892: LD_INT 27
7894: PPUSH
7895: CALL_OW 111
// wait ( 1 1$00 ) ;
7899: LD_INT 2100
7901: PPUSH
7902: CALL_OW 67
// startAttackOnOmicron := true ;
7906: LD_ADDR_EXP 6
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// end ;
7914: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7915: LD_INT 0
7917: PPUSH
7918: PPUSH
7919: PPUSH
7920: PPUSH
7921: PPUSH
7922: PPUSH
// uc_side := 4 ;
7923: LD_ADDR_OWVAR 20
7927: PUSH
7928: LD_INT 4
7930: ST_TO_ADDR
// uc_nation := 1 ;
7931: LD_ADDR_OWVAR 21
7935: PUSH
7936: LD_INT 1
7938: ST_TO_ADDR
// tmp := [ ] ;
7939: LD_ADDR_VAR 0 4
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// ResetHc ;
7946: CALL 65734 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7950: LD_INT 2
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: LD_INT 4
7961: PPUSH
7962: LD_INT 77
7964: PPUSH
7965: CALL 33346 0 5
// un := CreateVehicle ;
7969: LD_ADDR_VAR 0 3
7973: PUSH
7974: CALL_OW 45
7978: ST_TO_ADDR
// tmp := tmp union un ;
7979: LD_ADDR_VAR 0 4
7983: PUSH
7984: LD_VAR 0 4
7988: PUSH
7989: LD_VAR 0 3
7993: UNION
7994: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7995: LD_VAR 0 3
7999: PPUSH
8000: LD_INT 2
8002: PPUSH
8003: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8007: LD_VAR 0 3
8011: PPUSH
8012: LD_INT 106
8014: PPUSH
8015: LD_INT 3
8017: PPUSH
8018: LD_INT 0
8020: PPUSH
8021: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8025: LD_INT 0
8027: PPUSH
8028: LD_INT 3
8030: PPUSH
8031: LD_INT 2
8033: PPUSH
8034: CALL_OW 380
// un := CreateHuman ;
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: CALL_OW 44
8047: ST_TO_ADDR
// tmp := tmp union un ;
8048: LD_ADDR_VAR 0 4
8052: PUSH
8053: LD_VAR 0 4
8057: PUSH
8058: LD_VAR 0 3
8062: UNION
8063: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8064: LD_VAR 0 3
8068: PPUSH
8069: LD_VAR 0 4
8073: PUSH
8074: LD_VAR 0 4
8078: PUSH
8079: LD_INT 1
8081: MINUS
8082: ARRAY
8083: PPUSH
8084: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_INT 109
8095: PPUSH
8096: LD_INT 9
8098: PPUSH
8099: CALL_OW 111
// wait ( 0 0$1 ) ;
8103: LD_INT 35
8105: PPUSH
8106: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8110: LD_ADDR_VAR 0 2
8114: PUSH
8115: DOUBLE
8116: LD_INT 1
8118: DEC
8119: ST_TO_ADDR
8120: LD_INT 2
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: PUSH
8134: LD_OWVAR 67
8138: ARRAY
8139: PUSH
8140: FOR_TO
8141: IFFALSE 8205
// begin PrepareHuman ( false , 1 , 2 ) ;
8143: LD_INT 0
8145: PPUSH
8146: LD_INT 1
8148: PPUSH
8149: LD_INT 2
8151: PPUSH
8152: CALL_OW 380
// un := CreateHuman ;
8156: LD_ADDR_VAR 0 3
8160: PUSH
8161: CALL_OW 44
8165: ST_TO_ADDR
// tmp := tmp union un ;
8166: LD_ADDR_VAR 0 4
8170: PUSH
8171: LD_VAR 0 4
8175: PUSH
8176: LD_VAR 0 3
8180: UNION
8181: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8182: LD_VAR 0 3
8186: PPUSH
8187: LD_INT 105
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: LD_INT 0
8198: PPUSH
8199: CALL_OW 50
// end ;
8203: GO 8140
8205: POP
8206: POP
// PrepareHuman ( false , 4 , 2 ) ;
8207: LD_INT 0
8209: PPUSH
8210: LD_INT 4
8212: PPUSH
8213: LD_INT 2
8215: PPUSH
8216: CALL_OW 380
// un := CreateHuman ;
8220: LD_ADDR_VAR 0 3
8224: PUSH
8225: CALL_OW 44
8229: ST_TO_ADDR
// tmp := tmp union un ;
8230: LD_ADDR_VAR 0 4
8234: PUSH
8235: LD_VAR 0 4
8239: PUSH
8240: LD_VAR 0 3
8244: UNION
8245: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8246: LD_VAR 0 3
8250: PPUSH
8251: LD_INT 105
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: LD_INT 2
8259: PPUSH
8260: LD_INT 0
8262: PPUSH
8263: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8267: LD_VAR 0 4
8271: PPUSH
8272: LD_INT 26
8274: PPUSH
8275: LD_INT 35
8277: PPUSH
8278: CALL_OW 114
// spotted := false ;
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8290: LD_ADDR_VAR 0 6
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: LD_INT 0
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8305: LD_INT 35
8307: PPUSH
8308: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8312: LD_VAR 0 4
8316: PPUSH
8317: LD_INT 3
8319: PUSH
8320: LD_INT 24
8322: PUSH
8323: LD_INT 1000
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PPUSH
8334: CALL_OW 72
8338: PUSH
8339: LD_VAR 0 5
8343: NOT
8344: AND
8345: IFFALSE 8471
// begin spotted := true ;
8347: LD_ADDR_VAR 0 5
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_VAR 0 4
8364: PPUSH
8365: LD_INT 3
8367: PUSH
8368: LD_INT 24
8370: PUSH
8371: LD_INT 1000
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 72
8386: PUSH
8387: LD_INT 1
8389: ARRAY
8390: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8391: LD_ADDR_VAR 0 6
8395: PUSH
8396: LD_VAR 0 3
8400: PPUSH
8401: CALL_OW 250
8405: PUSH
8406: LD_VAR 0 3
8410: PPUSH
8411: CALL_OW 251
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8420: LD_VAR 0 6
8424: PUSH
8425: LD_INT 1
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 6
8433: PUSH
8434: LD_INT 2
8436: ARRAY
8437: PPUSH
8438: LD_INT 1
8440: PPUSH
8441: LD_INT 12
8443: NEG
8444: PPUSH
8445: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 1
8456: ARRAY
8457: PPUSH
8458: LD_VAR 0 6
8462: PUSH
8463: LD_INT 2
8465: ARRAY
8466: PPUSH
8467: CALL_OW 84
// end ; for i in tmp do
8471: LD_ADDR_VAR 0 2
8475: PUSH
8476: LD_VAR 0 4
8480: PUSH
8481: FOR_IN
8482: IFFALSE 8513
// if not HasTask ( i ) then
8484: LD_VAR 0 2
8488: PPUSH
8489: CALL_OW 314
8493: NOT
8494: IFFALSE 8511
// ComAgressiveMove ( i , 26 , 35 ) ;
8496: LD_VAR 0 2
8500: PPUSH
8501: LD_INT 26
8503: PPUSH
8504: LD_INT 35
8506: PPUSH
8507: CALL_OW 114
8511: GO 8481
8513: POP
8514: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8515: LD_VAR 0 4
8519: PPUSH
8520: LD_INT 50
8522: PUSH
8523: EMPTY
8524: LIST
8525: PPUSH
8526: CALL_OW 72
8530: NOT
8531: IFFALSE 8566
// begin if spotted then
8533: LD_VAR 0 5
8537: IFFALSE 8564
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8539: LD_VAR 0 6
8543: PUSH
8544: LD_INT 1
8546: ARRAY
8547: PPUSH
8548: LD_VAR 0 6
8552: PUSH
8553: LD_INT 2
8555: ARRAY
8556: PPUSH
8557: LD_INT 1
8559: PPUSH
8560: CALL_OW 331
// exit ;
8564: GO 8753
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8566: LD_VAR 0 4
8570: PPUSH
8571: LD_INT 91
8573: PUSH
8574: LD_INT 64
8576: PUSH
8577: LD_INT 12
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: PPUSH
8585: CALL_OW 72
8589: PUSH
8590: LD_INT 4
8592: PPUSH
8593: LD_EXP 14
8597: PPUSH
8598: CALL_OW 292
8602: OR
8603: IFFALSE 8305
// omicronSquad := omicronSquad union tmp ;
8605: LD_ADDR_EXP 13
8609: PUSH
8610: LD_EXP 13
8614: PUSH
8615: LD_VAR 0 4
8619: UNION
8620: ST_TO_ADDR
// if spotted then
8621: LD_VAR 0 5
8625: IFFALSE 8652
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8627: LD_VAR 0 6
8631: PUSH
8632: LD_INT 1
8634: ARRAY
8635: PPUSH
8636: LD_VAR 0 6
8640: PUSH
8641: LD_INT 2
8643: ARRAY
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 331
// for i in tmp do
8652: LD_ADDR_VAR 0 2
8656: PUSH
8657: LD_VAR 0 4
8661: PUSH
8662: FOR_IN
8663: IFFALSE 8679
// SetSide ( i , 1 ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 1
8672: PPUSH
8673: CALL_OW 235
8677: GO 8662
8679: POP
8680: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8681: LD_VAR 0 4
8685: PPUSH
8686: LD_INT 26
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 50
8698: PUSH
8699: EMPTY
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 72
8710: IFFALSE 8753
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8712: LD_VAR 0 4
8716: PPUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 50
8729: PUSH
8730: EMPTY
8731: LIST
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL_OW 72
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: LD_STRING Dcargo
8748: PPUSH
8749: CALL_OW 88
// end ;
8753: LD_VAR 0 1
8757: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8758: LD_INT 0
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
// uc_side := 1 ;
8764: LD_ADDR_OWVAR 20
8768: PUSH
8769: LD_INT 1
8771: ST_TO_ADDR
// uc_nation := 1 ;
8772: LD_ADDR_OWVAR 21
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// ResetHc ;
8780: CALL 65734 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8784: LD_INT 0
8786: PPUSH
8787: LD_INT 3
8789: PPUSH
8790: LD_INT 3
8792: PPUSH
8793: CALL_OW 380
// un := CreateHuman ;
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: CALL_OW 44
8806: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8807: LD_INT 3
8809: PPUSH
8810: LD_INT 1
8812: PPUSH
8813: LD_INT 1
8815: PPUSH
8816: LD_INT 5
8818: PPUSH
8819: LD_INT 90
8821: PPUSH
8822: CALL 33346 0 5
// veh := CreateVehicle ;
8826: LD_ADDR_VAR 0 3
8830: PUSH
8831: CALL_OW 45
8835: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8836: LD_VAR 0 3
8840: PPUSH
8841: LD_INT 2
8843: PPUSH
8844: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8848: LD_VAR 0 3
8852: PPUSH
8853: LD_INT 83
8855: PPUSH
8856: LD_INT 154
8858: PPUSH
8859: LD_INT 10
8861: PPUSH
8862: LD_INT 0
8864: PPUSH
8865: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_VAR 0 3
8878: PPUSH
8879: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8883: LD_ADDR_VAR 0 4
8887: PUSH
8888: DOUBLE
8889: LD_INT 1
8891: DEC
8892: ST_TO_ADDR
8893: LD_INT 4
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_OWVAR 67
8911: ARRAY
8912: PUSH
8913: FOR_TO
8914: IFFALSE 8962
// begin PrepareHuman ( false , 1 , 3 ) ;
8916: LD_INT 0
8918: PPUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: CALL_OW 380
// un := CreateHuman ;
8929: LD_ADDR_VAR 0 2
8933: PUSH
8934: CALL_OW 44
8938: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8939: LD_VAR 0 2
8943: PPUSH
8944: LD_INT 83
8946: PPUSH
8947: LD_INT 154
8949: PPUSH
8950: LD_INT 10
8952: PPUSH
8953: LD_INT 0
8955: PPUSH
8956: CALL_OW 50
// end ;
8960: GO 8913
8962: POP
8963: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8964: LD_INT 1
8966: PPUSH
8967: LD_INT 1
8969: PPUSH
8970: LD_INT 3
8972: PPUSH
8973: CALL_OW 380
// un := CreateHuman ;
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: CALL_OW 44
8986: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_INT 83
8994: PPUSH
8995: LD_INT 154
8997: PPUSH
8998: LD_INT 10
9000: PPUSH
9001: LD_INT 0
9003: PPUSH
9004: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9008: LD_VAR 0 2
9012: PPUSH
9013: LD_STRING Dhelp
9015: PPUSH
9016: CALL_OW 94
// ResetHc ;
9020: CALL 65734 0 0
// end ;
9024: LD_VAR 0 1
9028: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9029: LD_EXP 5
9033: IFFALSE 9175
9035: GO 9037
9037: DISABLE
9038: LD_INT 0
9040: PPUSH
9041: PPUSH
9042: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9043: LD_ADDR_VAR 0 2
9047: PUSH
9048: LD_EXP 20
9052: PPUSH
9053: LD_INT 25
9055: PUSH
9056: LD_INT 1
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 54
9065: PUSH
9066: EMPTY
9067: LIST
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PPUSH
9073: CALL_OW 72
9077: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9078: LD_ADDR_VAR 0 3
9082: PUSH
9083: LD_INT 22
9085: PUSH
9086: LD_INT 6
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 32
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PPUSH
9107: CALL_OW 69
9111: ST_TO_ADDR
// for i := 1 to tmp do
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_VAR 0 2
9126: PUSH
9127: FOR_TO
9128: IFFALSE 9173
// begin ComExitBuilding ( tmp [ i ] ) ;
9130: LD_VAR 0 2
9134: PUSH
9135: LD_VAR 0 1
9139: ARRAY
9140: PPUSH
9141: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9145: LD_VAR 0 2
9149: PUSH
9150: LD_VAR 0 1
9154: ARRAY
9155: PPUSH
9156: LD_VAR 0 3
9160: PUSH
9161: LD_VAR 0 1
9165: ARRAY
9166: PPUSH
9167: CALL_OW 180
// end ;
9171: GO 9127
9173: POP
9174: POP
// end ;
9175: PPOPN 3
9177: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9178: LD_EXP 5
9182: PUSH
9183: LD_INT 22
9185: PUSH
9186: LD_INT 2
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 101
9195: PUSH
9196: LD_INT 6
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PPUSH
9207: CALL_OW 69
9211: AND
9212: IFFALSE 9358
9214: GO 9216
9216: DISABLE
9217: LD_INT 0
9219: PPUSH
9220: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9221: LD_EXP 16
9225: PPUSH
9226: LD_STRING D9a-Kur-1
9228: PPUSH
9229: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9233: LD_EXP 19
9237: PPUSH
9238: LD_STRING D9a-Bur-1
9240: PPUSH
9241: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9245: LD_EXP 16
9249: PPUSH
9250: LD_STRING D9a-Kur-2
9252: PPUSH
9253: CALL_OW 94
// retreatFromOmicron := true ;
9257: LD_ADDR_EXP 8
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9265: LD_ADDR_VAR 0 2
9269: PUSH
9270: LD_EXP 18
9274: PUSH
9275: LD_EXP 20
9279: PUSH
9280: LD_EXP 21
9284: UNION
9285: PPUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 72
9307: UNION
9308: ST_TO_ADDR
// for i in noncombat do
9309: LD_ADDR_VAR 0 1
9313: PUSH
9314: LD_VAR 0 2
9318: PUSH
9319: FOR_IN
9320: IFFALSE 9356
// begin if IsInUnit ( i ) then
9322: LD_VAR 0 1
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( i ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9342: LD_VAR 0 1
9346: PPUSH
9347: LD_INT 4
9349: PPUSH
9350: CALL_OW 173
// end ;
9354: GO 9319
9356: POP
9357: POP
// end ;
9358: PPOPN 2
9360: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9361: LD_OWVAR 1
9365: PUSH
9366: LD_INT 42000
9368: PPUSH
9369: LD_INT 63000
9371: PPUSH
9372: CALL_OW 12
9376: GREATER
9377: IFFALSE 9522
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
// begin uc_side := 4 ;
9385: LD_ADDR_OWVAR 20
9389: PUSH
9390: LD_INT 4
9392: ST_TO_ADDR
// uc_nation := 4 ;
9393: LD_ADDR_OWVAR 21
9397: PUSH
9398: LD_INT 4
9400: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9401: LD_INT 1
9403: PPUSH
9404: LD_INT 4
9406: PPUSH
9407: LD_INT 3
9409: PPUSH
9410: CALL_OW 380
// hc_name :=  ;
9414: LD_ADDR_OWVAR 26
9418: PUSH
9419: LD_STRING 
9421: ST_TO_ADDR
// un := CreateHuman ;
9422: LD_ADDR_VAR 0 1
9426: PUSH
9427: CALL_OW 44
9431: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9432: LD_VAR 0 1
9436: PPUSH
9437: LD_INT 161
9439: PPUSH
9440: LD_INT 162
9442: PPUSH
9443: LD_INT 3
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: CALL_OW 50
// ResetHc ;
9453: CALL 65734 0 0
// wait ( 0 0$3 ) ;
9457: LD_INT 105
9459: PPUSH
9460: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_STRING Dun1
9471: PPUSH
9472: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9476: LD_INT 35
9478: PPUSH
9479: CALL_OW 67
// if IsDead ( un ) then
9483: LD_VAR 0 1
9487: PPUSH
9488: CALL_OW 301
9492: IFFALSE 9496
// exit ;
9494: GO 9522
// until See ( 1 , un ) ;
9496: LD_INT 1
9498: PPUSH
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 292
9508: IFFALSE 9476
// SetSide ( un , 1 ) ;
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 235
// end ;
9522: PPOPN 1
9524: END
// every 0 0$1 trigger tanksCounter >= 20 do
9525: LD_EXP 12
9529: PUSH
9530: LD_INT 20
9532: GREATEREQUAL
9533: IFFALSE 9545
9535: GO 9537
9537: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9538: LD_STRING ACH_PANZERKNACKER
9540: PPUSH
9541: CALL_OW 543
9545: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9546: LD_OWVAR 1
9550: PUSH
9551: LD_INT 94500
9553: PPUSH
9554: LD_INT 109200
9556: PPUSH
9557: CALL_OW 12
9561: GREATER
9562: IFFALSE 9825
9564: GO 9566
9566: DISABLE
9567: LD_INT 0
9569: PPUSH
// begin PrepareArabian ;
9570: CALL 6543 0 0
// uc_side := 4 ;
9574: LD_ADDR_OWVAR 20
9578: PUSH
9579: LD_INT 4
9581: ST_TO_ADDR
// uc_nation := 1 ;
9582: LD_ADDR_OWVAR 21
9586: PUSH
9587: LD_INT 1
9589: ST_TO_ADDR
// ResetHc ;
9590: CALL 65734 0 0
// un := CreateHuman ;
9594: LD_ADDR_VAR 0 1
9598: PUSH
9599: CALL_OW 44
9603: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9604: LD_VAR 0 1
9608: PPUSH
9609: LD_STRING ar_come
9611: PPUSH
9612: CALL_OW 94
// wait ( 0 0$20 ) ;
9616: LD_INT 700
9618: PPUSH
9619: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9623: LD_EXP 15
9627: PPUSH
9628: LD_STRING DR-Back
9630: PPUSH
9631: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9635: LD_STRING target3
9637: PPUSH
9638: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9642: LD_INT 10
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9652: LD_INT 35
9654: PPUSH
9655: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9659: LD_EXP 14
9663: PPUSH
9664: LD_INT 10
9666: PPUSH
9667: CALL_OW 308
9671: PUSH
9672: LD_INT 10
9674: PPUSH
9675: LD_INT 22
9677: PUSH
9678: LD_INT 1
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PPUSH
9685: CALL_OW 70
9689: OR
9690: IFFALSE 9652
// SayRadio ( Harrison , you_win ) ;
9692: LD_EXP 15
9696: PPUSH
9697: LD_STRING you_win
9699: PPUSH
9700: CALL_OW 94
// AddMedal ( med , 1 ) ;
9704: LD_STRING med
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9714: LD_EXP 11
9718: PUSH
9719: LD_INT 27
9721: PUSH
9722: LD_INT 32
9724: PUSH
9725: LD_INT 36
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: LD_OWVAR 67
9737: ARRAY
9738: GREATER
9739: IFFALSE 9753
// AddMedal ( ru , 1 ) else
9741: LD_STRING ru
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 101
9751: GO 9764
// AddMedal ( ru , - 1 ) ;
9753: LD_STRING ru
9755: PPUSH
9756: LD_INT 1
9758: NEG
9759: PPUSH
9760: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9764: LD_EXP 10
9768: PUSH
9769: LD_INT 4
9771: PUSH
9772: LD_INT 3
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: PUSH
9783: LD_OWVAR 67
9787: ARRAY
9788: LESS
9789: IFFALSE 9803
// AddMedal ( pep , 1 ) else
9791: LD_STRING pep
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 101
9801: GO 9814
// AddMedal ( pep , - 1 ) ;
9803: LD_STRING pep
9805: PPUSH
9806: LD_INT 1
9808: NEG
9809: PPUSH
9810: CALL_OW 101
// GiveMedals ( MAIN ) ;
9814: LD_STRING MAIN
9816: PPUSH
9817: CALL_OW 102
// YouWin ;
9821: CALL_OW 103
// end ; end_of_file
9825: PPOPN 1
9827: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9828: LD_VAR 0 1
9832: PPUSH
9833: CALL 10692 0 1
// if un = Sikorski then
9837: LD_VAR 0 1
9841: PUSH
9842: LD_EXP 14
9846: EQUAL
9847: IFFALSE 9856
// YouLost ( sik ) ;
9849: LD_STRING sik
9851: PPUSH
9852: CALL_OW 104
// if un in russianOmicronAttackers then
9856: LD_VAR 0 1
9860: PUSH
9861: LD_EXP 24
9865: IN
9866: IFFALSE 9884
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9868: LD_ADDR_EXP 24
9872: PUSH
9873: LD_EXP 24
9877: PUSH
9878: LD_VAR 0 1
9882: DIFF
9883: ST_TO_ADDR
// if un in russianCargo then
9884: LD_VAR 0 1
9888: PUSH
9889: LD_EXP 25
9893: IN
9894: IFFALSE 9912
// russianCargo := russianCargo diff un ;
9896: LD_ADDR_EXP 25
9900: PUSH
9901: LD_EXP 25
9905: PUSH
9906: LD_VAR 0 1
9910: DIFF
9911: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9912: LD_VAR 0 1
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 3
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 34
9929: PUSH
9930: LD_INT 51
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: IN
9946: IFFALSE 9955
// ProduceNew ( 1 ) ;
9948: LD_INT 1
9950: PPUSH
9951: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9955: LD_VAR 0 1
9959: PPUSH
9960: CALL_OW 255
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: IN
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 247
9985: PUSH
9986: LD_INT 1
9988: EQUAL
9989: AND
9990: PUSH
9991: LD_VAR 0 1
9995: PPUSH
9996: CALL_OW 248
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: AND
10005: IFFALSE 10021
// usLoseCounter := usLoseCounter + 1 ;
10007: LD_ADDR_EXP 10
10011: PUSH
10012: LD_EXP 10
10016: PUSH
10017: LD_INT 1
10019: PLUS
10020: ST_TO_ADDR
// end ;
10021: PPOPN 1
10023: END
// on VehicleConstructed ( veh , factory ) do begin if GetSide ( factory ) <> 3 then
10024: LD_VAR 0 2
10028: PPUSH
10029: CALL_OW 255
10033: PUSH
10034: LD_INT 3
10036: NONEQUAL
10037: IFFALSE 10041
// exit ;
10039: GO 10103
// if GetWeapon ( veh ) = ru_cargo_bay then
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 264
10050: PUSH
10051: LD_INT 51
10053: EQUAL
10054: IFFALSE 10058
// exit ;
10056: GO 10103
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10058: LD_ADDR_EXP 24
10062: PUSH
10063: LD_EXP 24
10067: PUSH
10068: LD_VAR 0 1
10072: PUSH
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 310
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: UNION
10087: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10088: LD_VAR 0 1
10092: PPUSH
10093: LD_INT 71
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// end ;
10103: PPOPN 2
10105: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10106: LD_VAR 0 2
10110: PUSH
10111: LD_EXP 24
10115: IN
10116: IFFALSE 10134
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10118: LD_ADDR_EXP 24
10122: PUSH
10123: LD_EXP 24
10127: PUSH
10128: LD_VAR 0 2
10132: DIFF
10133: ST_TO_ADDR
// if oldId in russianCargo then
10134: LD_VAR 0 2
10138: PUSH
10139: LD_EXP 25
10143: IN
10144: IFFALSE 10162
// russianCargo := russianCargo diff oldId ;
10146: LD_ADDR_EXP 25
10150: PUSH
10151: LD_EXP 25
10155: PUSH
10156: LD_VAR 0 2
10160: DIFF
10161: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10162: LD_VAR 0 1
10166: PUSH
10167: LD_EXP 24
10171: IN
10172: IFFALSE 10190
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10174: LD_ADDR_EXP 24
10178: PUSH
10179: LD_EXP 24
10183: PUSH
10184: LD_VAR 0 1
10188: DIFF
10189: ST_TO_ADDR
// if newId in russianCargo then
10190: LD_VAR 0 1
10194: PUSH
10195: LD_EXP 25
10199: IN
10200: IFFALSE 10218
// russianCargo := russianCargo diff newId ;
10202: LD_ADDR_EXP 25
10206: PUSH
10207: LD_EXP 25
10211: PUSH
10212: LD_VAR 0 1
10216: DIFF
10217: ST_TO_ADDR
// end ;
10218: PPOPN 4
10220: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_VAR 0 2
10230: PPUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: CALL 10790 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10240: LD_VAR 0 2
10244: PUSH
10245: LD_INT 1
10247: PUSH
10248: LD_INT 4
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: IN
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 255
10265: PUSH
10266: LD_INT 3
10268: PUSH
10269: LD_INT 6
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: IN
10276: AND
10277: IFFALSE 10293
// ruLoseCounter := ruLoseCounter + 1 ;
10279: LD_ADDR_EXP 11
10283: PUSH
10284: LD_EXP 11
10288: PUSH
10289: LD_INT 1
10291: PLUS
10292: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10293: LD_VAR 0 2
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: LD_INT 4
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: IN
10308: PUSH
10309: LD_VAR 0 1
10313: PPUSH
10314: CALL_OW 247
10318: PUSH
10319: LD_INT 2
10321: EQUAL
10322: AND
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 3
10336: PUSH
10337: LD_INT 6
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: IN
10344: AND
10345: IFFALSE 10361
// tanksCounter := tanksCounter + 1 ;
10347: LD_ADDR_EXP 12
10351: PUSH
10352: LD_EXP 12
10356: PUSH
10357: LD_INT 1
10359: PLUS
10360: ST_TO_ADDR
// end ;
10361: PPOPN 3
10363: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10364: LD_VAR 0 1
10368: PPUSH
10369: CALL_OW 255
10373: PUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 6
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: IN
10384: IFFALSE 10533
// begin ComRepairVehicle ( driver , veh ) ;
10386: LD_VAR 0 1
10390: PPUSH
10391: LD_VAR 0 2
10395: PPUSH
10396: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10400: LD_INT 35
10402: PPUSH
10403: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10407: LD_VAR 0 2
10411: PPUSH
10412: CALL_OW 301
10416: PUSH
10417: LD_VAR 0 1
10421: PPUSH
10422: CALL_OW 301
10426: OR
10427: PUSH
10428: LD_VAR 0 2
10432: PPUSH
10433: CALL_OW 256
10437: PUSH
10438: LD_INT 250
10440: GREATER
10441: OR
10442: IFFALSE 10400
// if GetLives ( veh ) > 250 then
10444: LD_VAR 0 2
10448: PPUSH
10449: CALL_OW 256
10453: PUSH
10454: LD_INT 250
10456: GREATER
10457: IFFALSE 10533
// begin ComEnterUnit ( driver , veh ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_VAR 0 2
10468: PPUSH
10469: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10473: LD_VAR 0 1
10477: PPUSH
10478: LD_INT 71
10480: PPUSH
10481: LD_INT 29
10483: PPUSH
10484: CALL_OW 171
// SetTag ( veh , 1 ) ;
10488: LD_VAR 0 2
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 109
// if not veh in russianOmicronAttackers then
10500: LD_VAR 0 2
10504: PUSH
10505: LD_EXP 24
10509: IN
10510: NOT
10511: IFFALSE 10533
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10513: LD_ADDR_EXP 24
10517: PUSH
10518: LD_EXP 24
10522: PPUSH
10523: LD_VAR 0 2
10527: PPUSH
10528: CALL 65219 0 2
10532: ST_TO_ADDR
// end ; end ; end ;
10533: PPOPN 4
10535: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10536: LD_VAR 0 1
10540: PPUSH
10541: CALL 10798 0 1
// end ; end_of_file
10545: PPOPN 1
10547: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10548: LD_EXP 9
10552: PUSH
10553: LD_INT 6
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 287
10563: PUSH
10564: LD_INT 18
10566: PUSH
10567: LD_INT 15
10569: PUSH
10570: LD_INT 12
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: PUSH
10578: LD_OWVAR 67
10582: ARRAY
10583: LESS
10584: AND
10585: IFFALSE 10627
10587: GO 10589
10589: DISABLE
// begin enable ;
10590: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10591: LD_INT 350
10593: PPUSH
10594: LD_INT 1050
10596: PPUSH
10597: CALL_OW 12
10601: PPUSH
10602: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10606: LD_INT 2
10608: PPUSH
10609: LD_INT 5
10611: PPUSH
10612: CALL_OW 12
10616: PPUSH
10617: LD_INT 6
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 55
// end ;
10627: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10628: LD_INT 7
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: CALL_OW 287
10638: PUSH
10639: LD_INT 5
10641: LESS
10642: IFFALSE 10669
10644: GO 10646
10646: DISABLE
// begin enable ;
10647: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10648: LD_INT 2
10650: PPUSH
10651: LD_INT 5
10653: PPUSH
10654: CALL_OW 12
10658: PPUSH
10659: LD_INT 7
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 55
// end ; end_of_file
10669: END
// every 0 0$01 do
10670: GO 10672
10672: DISABLE
// begin enable ;
10673: ENABLE
// display_strings := [ #tick , tick ] ;
10674: LD_ADDR_OWVAR 47
10678: PUSH
10679: LD_STRING #tick
10681: PUSH
10682: LD_OWVAR 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: ST_TO_ADDR
// end ; end_of_file
10691: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10692: LD_INT 0
10694: PPUSH
10695: PPUSH
10696: PPUSH
10697: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL_OW 264
10707: PUSH
10708: LD_EXP 100
10712: EQUAL
10713: IFFALSE 10785
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10715: LD_INT 68
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 255
10727: PPUSH
10728: CALL_OW 321
10732: PUSH
10733: LD_INT 2
10735: EQUAL
10736: IFFALSE 10748
// eff := 70 else
10738: LD_ADDR_VAR 0 4
10742: PUSH
10743: LD_INT 70
10745: ST_TO_ADDR
10746: GO 10756
// eff := 30 ;
10748: LD_ADDR_VAR 0 4
10752: PUSH
10753: LD_INT 30
10755: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10756: LD_VAR 0 1
10760: PPUSH
10761: CALL_OW 250
10765: PPUSH
10766: LD_VAR 0 1
10770: PPUSH
10771: CALL_OW 251
10775: PPUSH
10776: LD_VAR 0 4
10780: PPUSH
10781: CALL_OW 495
// end ; end ;
10785: LD_VAR 0 2
10789: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10790: LD_INT 0
10792: PPUSH
// end ;
10793: LD_VAR 0 4
10797: RET
// export function SOS_Command ( cmd ) ; begin
10798: LD_INT 0
10800: PPUSH
// end ;
10801: LD_VAR 0 2
10805: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10806: LD_INT 0
10808: PPUSH
// end ;
10809: LD_VAR 0 6
10813: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10814: LD_INT 0
10816: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10817: LD_VAR 0 1
10821: PUSH
10822: LD_INT 250
10824: EQUAL
10825: PUSH
10826: LD_VAR 0 2
10830: PPUSH
10831: CALL_OW 264
10835: PUSH
10836: LD_EXP 103
10840: EQUAL
10841: AND
10842: IFFALSE 10863
// MinerPlaceMine ( unit , x , y ) ;
10844: LD_VAR 0 2
10848: PPUSH
10849: LD_VAR 0 4
10853: PPUSH
10854: LD_VAR 0 5
10858: PPUSH
10859: CALL 13212 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10863: LD_VAR 0 1
10867: PUSH
10868: LD_INT 251
10870: EQUAL
10871: PUSH
10872: LD_VAR 0 2
10876: PPUSH
10877: CALL_OW 264
10881: PUSH
10882: LD_EXP 103
10886: EQUAL
10887: AND
10888: IFFALSE 10909
// MinerDetonateMine ( unit , x , y ) ;
10890: LD_VAR 0 2
10894: PPUSH
10895: LD_VAR 0 4
10899: PPUSH
10900: LD_VAR 0 5
10904: PPUSH
10905: CALL 13489 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10909: LD_VAR 0 1
10913: PUSH
10914: LD_INT 252
10916: EQUAL
10917: PUSH
10918: LD_VAR 0 2
10922: PPUSH
10923: CALL_OW 264
10927: PUSH
10928: LD_EXP 103
10932: EQUAL
10933: AND
10934: IFFALSE 10955
// MinerCreateMinefield ( unit , x , y ) ;
10936: LD_VAR 0 2
10940: PPUSH
10941: LD_VAR 0 4
10945: PPUSH
10946: LD_VAR 0 5
10950: PPUSH
10951: CALL 13906 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10955: LD_VAR 0 1
10959: PUSH
10960: LD_INT 253
10962: EQUAL
10963: PUSH
10964: LD_VAR 0 2
10968: PPUSH
10969: CALL_OW 257
10973: PUSH
10974: LD_INT 5
10976: EQUAL
10977: AND
10978: IFFALSE 10999
// ComBinocular ( unit , x , y ) ;
10980: LD_VAR 0 2
10984: PPUSH
10985: LD_VAR 0 4
10989: PPUSH
10990: LD_VAR 0 5
10994: PPUSH
10995: CALL 14277 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10999: LD_VAR 0 1
11003: PUSH
11004: LD_INT 254
11006: EQUAL
11007: PUSH
11008: LD_VAR 0 2
11012: PPUSH
11013: CALL_OW 264
11017: PUSH
11018: LD_EXP 98
11022: EQUAL
11023: AND
11024: PUSH
11025: LD_VAR 0 3
11029: PPUSH
11030: CALL_OW 263
11034: PUSH
11035: LD_INT 3
11037: EQUAL
11038: AND
11039: IFFALSE 11055
// HackDestroyVehicle ( unit , selectedUnit ) ;
11041: LD_VAR 0 2
11045: PPUSH
11046: LD_VAR 0 3
11050: PPUSH
11051: CALL 12572 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11055: LD_VAR 0 1
11059: PUSH
11060: LD_INT 255
11062: EQUAL
11063: PUSH
11064: LD_VAR 0 2
11068: PPUSH
11069: CALL_OW 264
11073: PUSH
11074: LD_INT 14
11076: PUSH
11077: LD_INT 53
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: IN
11084: AND
11085: PUSH
11086: LD_VAR 0 4
11090: PPUSH
11091: LD_VAR 0 5
11095: PPUSH
11096: CALL_OW 488
11100: AND
11101: IFFALSE 11125
// CutTreeXYR ( unit , x , y , 12 ) ;
11103: LD_VAR 0 2
11107: PPUSH
11108: LD_VAR 0 4
11112: PPUSH
11113: LD_VAR 0 5
11117: PPUSH
11118: LD_INT 12
11120: PPUSH
11121: CALL 11138 0 4
// end ;
11125: LD_VAR 0 6
11129: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
11130: LD_INT 0
11132: PPUSH
// end ;
11133: LD_VAR 0 4
11137: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11138: LD_INT 0
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
11145: PPUSH
11146: PPUSH
11147: PPUSH
11148: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11149: LD_VAR 0 1
11153: NOT
11154: PUSH
11155: LD_VAR 0 2
11159: PPUSH
11160: LD_VAR 0 3
11164: PPUSH
11165: CALL_OW 488
11169: NOT
11170: OR
11171: PUSH
11172: LD_VAR 0 4
11176: NOT
11177: OR
11178: IFFALSE 11182
// exit ;
11180: GO 11522
// list := [ ] ;
11182: LD_ADDR_VAR 0 13
11186: PUSH
11187: EMPTY
11188: ST_TO_ADDR
// if x - r < 0 then
11189: LD_VAR 0 2
11193: PUSH
11194: LD_VAR 0 4
11198: MINUS
11199: PUSH
11200: LD_INT 0
11202: LESS
11203: IFFALSE 11215
// min_x := 0 else
11205: LD_ADDR_VAR 0 7
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
11213: GO 11231
// min_x := x - r ;
11215: LD_ADDR_VAR 0 7
11219: PUSH
11220: LD_VAR 0 2
11224: PUSH
11225: LD_VAR 0 4
11229: MINUS
11230: ST_TO_ADDR
// if y - r < 0 then
11231: LD_VAR 0 3
11235: PUSH
11236: LD_VAR 0 4
11240: MINUS
11241: PUSH
11242: LD_INT 0
11244: LESS
11245: IFFALSE 11257
// min_y := 0 else
11247: LD_ADDR_VAR 0 8
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
11255: GO 11273
// min_y := y - r ;
11257: LD_ADDR_VAR 0 8
11261: PUSH
11262: LD_VAR 0 3
11266: PUSH
11267: LD_VAR 0 4
11271: MINUS
11272: ST_TO_ADDR
// max_x := x + r ;
11273: LD_ADDR_VAR 0 9
11277: PUSH
11278: LD_VAR 0 2
11282: PUSH
11283: LD_VAR 0 4
11287: PLUS
11288: ST_TO_ADDR
// max_y := y + r ;
11289: LD_ADDR_VAR 0 10
11293: PUSH
11294: LD_VAR 0 3
11298: PUSH
11299: LD_VAR 0 4
11303: PLUS
11304: ST_TO_ADDR
// for _x = min_x to max_x do
11305: LD_ADDR_VAR 0 11
11309: PUSH
11310: DOUBLE
11311: LD_VAR 0 7
11315: DEC
11316: ST_TO_ADDR
11317: LD_VAR 0 9
11321: PUSH
11322: FOR_TO
11323: IFFALSE 11440
// for _y = min_y to max_y do
11325: LD_ADDR_VAR 0 12
11329: PUSH
11330: DOUBLE
11331: LD_VAR 0 8
11335: DEC
11336: ST_TO_ADDR
11337: LD_VAR 0 10
11341: PUSH
11342: FOR_TO
11343: IFFALSE 11436
// begin if not ValidHex ( _x , _y ) then
11345: LD_VAR 0 11
11349: PPUSH
11350: LD_VAR 0 12
11354: PPUSH
11355: CALL_OW 488
11359: NOT
11360: IFFALSE 11364
// continue ;
11362: GO 11342
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11364: LD_VAR 0 11
11368: PPUSH
11369: LD_VAR 0 12
11373: PPUSH
11374: CALL_OW 351
11378: PUSH
11379: LD_VAR 0 11
11383: PPUSH
11384: LD_VAR 0 12
11388: PPUSH
11389: CALL_OW 554
11393: AND
11394: IFFALSE 11434
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11396: LD_ADDR_VAR 0 13
11400: PUSH
11401: LD_VAR 0 13
11405: PPUSH
11406: LD_VAR 0 13
11410: PUSH
11411: LD_INT 1
11413: PLUS
11414: PPUSH
11415: LD_VAR 0 11
11419: PUSH
11420: LD_VAR 0 12
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PPUSH
11429: CALL_OW 2
11433: ST_TO_ADDR
// end ;
11434: GO 11342
11436: POP
11437: POP
11438: GO 11322
11440: POP
11441: POP
// if not list then
11442: LD_VAR 0 13
11446: NOT
11447: IFFALSE 11451
// exit ;
11449: GO 11522
// for i in list do
11451: LD_ADDR_VAR 0 6
11455: PUSH
11456: LD_VAR 0 13
11460: PUSH
11461: FOR_IN
11462: IFFALSE 11520
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11464: LD_VAR 0 1
11468: PPUSH
11469: LD_STRING M
11471: PUSH
11472: LD_VAR 0 6
11476: PUSH
11477: LD_INT 1
11479: ARRAY
11480: PUSH
11481: LD_VAR 0 6
11485: PUSH
11486: LD_INT 2
11488: ARRAY
11489: PUSH
11490: LD_INT 0
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 0
11498: PUSH
11499: LD_INT 0
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: PPUSH
11514: CALL_OW 447
11518: GO 11461
11520: POP
11521: POP
// end ;
11522: LD_VAR 0 5
11526: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11527: LD_EXP 28
11531: NOT
11532: IFFALSE 11582
11534: GO 11536
11536: DISABLE
// begin initHack := true ;
11537: LD_ADDR_EXP 28
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// hackTanks := [ ] ;
11545: LD_ADDR_EXP 29
11549: PUSH
11550: EMPTY
11551: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11552: LD_ADDR_EXP 30
11556: PUSH
11557: EMPTY
11558: ST_TO_ADDR
// hackLimit := 3 ;
11559: LD_ADDR_EXP 31
11563: PUSH
11564: LD_INT 3
11566: ST_TO_ADDR
// hackDist := 12 ;
11567: LD_ADDR_EXP 32
11571: PUSH
11572: LD_INT 12
11574: ST_TO_ADDR
// hackCounter := [ ] ;
11575: LD_ADDR_EXP 33
11579: PUSH
11580: EMPTY
11581: ST_TO_ADDR
// end ;
11582: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11583: LD_EXP 28
11587: PUSH
11588: LD_INT 34
11590: PUSH
11591: LD_EXP 98
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PPUSH
11600: CALL_OW 69
11604: AND
11605: IFFALSE 11860
11607: GO 11609
11609: DISABLE
11610: LD_INT 0
11612: PPUSH
11613: PPUSH
// begin enable ;
11614: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11615: LD_ADDR_VAR 0 1
11619: PUSH
11620: LD_INT 34
11622: PUSH
11623: LD_EXP 98
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PPUSH
11632: CALL_OW 69
11636: PUSH
11637: FOR_IN
11638: IFFALSE 11858
// begin if not i in hackTanks then
11640: LD_VAR 0 1
11644: PUSH
11645: LD_EXP 29
11649: IN
11650: NOT
11651: IFFALSE 11734
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11653: LD_ADDR_EXP 29
11657: PUSH
11658: LD_EXP 29
11662: PPUSH
11663: LD_EXP 29
11667: PUSH
11668: LD_INT 1
11670: PLUS
11671: PPUSH
11672: LD_VAR 0 1
11676: PPUSH
11677: CALL_OW 1
11681: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11682: LD_ADDR_EXP 30
11686: PUSH
11687: LD_EXP 30
11691: PPUSH
11692: LD_EXP 30
11696: PUSH
11697: LD_INT 1
11699: PLUS
11700: PPUSH
11701: EMPTY
11702: PPUSH
11703: CALL_OW 1
11707: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11708: LD_ADDR_EXP 33
11712: PUSH
11713: LD_EXP 33
11717: PPUSH
11718: LD_EXP 33
11722: PUSH
11723: LD_INT 1
11725: PLUS
11726: PPUSH
11727: EMPTY
11728: PPUSH
11729: CALL_OW 1
11733: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11734: LD_VAR 0 1
11738: PPUSH
11739: CALL_OW 302
11743: NOT
11744: IFFALSE 11757
// begin HackUnlinkAll ( i ) ;
11746: LD_VAR 0 1
11750: PPUSH
11751: CALL 11863 0 1
// continue ;
11755: GO 11637
// end ; HackCheckCapturedStatus ( i ) ;
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL 12306 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11766: LD_ADDR_VAR 0 2
11770: PUSH
11771: LD_INT 81
11773: PUSH
11774: LD_VAR 0 1
11778: PPUSH
11779: CALL_OW 255
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 33
11790: PUSH
11791: LD_INT 3
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 91
11800: PUSH
11801: LD_VAR 0 1
11805: PUSH
11806: LD_EXP 32
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 50
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 69
11832: ST_TO_ADDR
// if not tmp then
11833: LD_VAR 0 2
11837: NOT
11838: IFFALSE 11842
// continue ;
11840: GO 11637
// HackLink ( i , tmp ) ;
11842: LD_VAR 0 1
11846: PPUSH
11847: LD_VAR 0 2
11851: PPUSH
11852: CALL 11999 0 2
// end ;
11856: GO 11637
11858: POP
11859: POP
// end ;
11860: PPOPN 2
11862: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11863: LD_INT 0
11865: PPUSH
11866: PPUSH
11867: PPUSH
// if not hack in hackTanks then
11868: LD_VAR 0 1
11872: PUSH
11873: LD_EXP 29
11877: IN
11878: NOT
11879: IFFALSE 11883
// exit ;
11881: GO 11994
// index := GetElementIndex ( hackTanks , hack ) ;
11883: LD_ADDR_VAR 0 4
11887: PUSH
11888: LD_EXP 29
11892: PPUSH
11893: LD_VAR 0 1
11897: PPUSH
11898: CALL 33253 0 2
11902: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11903: LD_EXP 30
11907: PUSH
11908: LD_VAR 0 4
11912: ARRAY
11913: IFFALSE 11994
// begin for i in hackTanksCaptured [ index ] do
11915: LD_ADDR_VAR 0 3
11919: PUSH
11920: LD_EXP 30
11924: PUSH
11925: LD_VAR 0 4
11929: ARRAY
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11958
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11934: LD_VAR 0 3
11938: PUSH
11939: LD_INT 1
11941: ARRAY
11942: PPUSH
11943: LD_VAR 0 3
11947: PUSH
11948: LD_INT 2
11950: ARRAY
11951: PPUSH
11952: CALL_OW 235
11956: GO 11931
11958: POP
11959: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11960: LD_ADDR_EXP 30
11964: PUSH
11965: LD_EXP 30
11969: PPUSH
11970: LD_VAR 0 4
11974: PPUSH
11975: EMPTY
11976: PPUSH
11977: CALL_OW 1
11981: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11982: LD_VAR 0 1
11986: PPUSH
11987: LD_INT 0
11989: PPUSH
11990: CALL_OW 505
// end ; end ;
11994: LD_VAR 0 2
11998: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11999: LD_INT 0
12001: PPUSH
12002: PPUSH
12003: PPUSH
// if not hack in hackTanks or not vehicles then
12004: LD_VAR 0 1
12008: PUSH
12009: LD_EXP 29
12013: IN
12014: NOT
12015: PUSH
12016: LD_VAR 0 2
12020: NOT
12021: OR
12022: IFFALSE 12026
// exit ;
12024: GO 12301
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12026: LD_ADDR_VAR 0 2
12030: PUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: LD_VAR 0 2
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL 33903 0 4
12051: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12052: LD_ADDR_VAR 0 5
12056: PUSH
12057: LD_EXP 29
12061: PPUSH
12062: LD_VAR 0 1
12066: PPUSH
12067: CALL 33253 0 2
12071: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12072: LD_EXP 30
12076: PUSH
12077: LD_VAR 0 5
12081: ARRAY
12082: PUSH
12083: LD_EXP 31
12087: LESS
12088: IFFALSE 12277
// begin for i := 1 to vehicles do
12090: LD_ADDR_VAR 0 4
12094: PUSH
12095: DOUBLE
12096: LD_INT 1
12098: DEC
12099: ST_TO_ADDR
12100: LD_VAR 0 2
12104: PUSH
12105: FOR_TO
12106: IFFALSE 12275
// begin if hackTanksCaptured [ index ] = hackLimit then
12108: LD_EXP 30
12112: PUSH
12113: LD_VAR 0 5
12117: ARRAY
12118: PUSH
12119: LD_EXP 31
12123: EQUAL
12124: IFFALSE 12128
// break ;
12126: GO 12275
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12128: LD_ADDR_EXP 33
12132: PUSH
12133: LD_EXP 33
12137: PPUSH
12138: LD_VAR 0 5
12142: PPUSH
12143: LD_EXP 33
12147: PUSH
12148: LD_VAR 0 5
12152: ARRAY
12153: PUSH
12154: LD_INT 1
12156: PLUS
12157: PPUSH
12158: CALL_OW 1
12162: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12163: LD_ADDR_EXP 30
12167: PUSH
12168: LD_EXP 30
12172: PPUSH
12173: LD_VAR 0 5
12177: PUSH
12178: LD_EXP 30
12182: PUSH
12183: LD_VAR 0 5
12187: ARRAY
12188: PUSH
12189: LD_INT 1
12191: PLUS
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PPUSH
12197: LD_VAR 0 2
12201: PUSH
12202: LD_VAR 0 4
12206: ARRAY
12207: PUSH
12208: LD_VAR 0 2
12212: PUSH
12213: LD_VAR 0 4
12217: ARRAY
12218: PPUSH
12219: CALL_OW 255
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL 33468 0 3
12232: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12233: LD_VAR 0 2
12237: PUSH
12238: LD_VAR 0 4
12242: ARRAY
12243: PPUSH
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 255
12253: PPUSH
12254: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12258: LD_VAR 0 2
12262: PUSH
12263: LD_VAR 0 4
12267: ARRAY
12268: PPUSH
12269: CALL_OW 141
// end ;
12273: GO 12105
12275: POP
12276: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12277: LD_VAR 0 1
12281: PPUSH
12282: LD_EXP 30
12286: PUSH
12287: LD_VAR 0 5
12291: ARRAY
12292: PUSH
12293: LD_INT 0
12295: PLUS
12296: PPUSH
12297: CALL_OW 505
// end ;
12301: LD_VAR 0 3
12305: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12306: LD_INT 0
12308: PPUSH
12309: PPUSH
12310: PPUSH
12311: PPUSH
// if not hack in hackTanks then
12312: LD_VAR 0 1
12316: PUSH
12317: LD_EXP 29
12321: IN
12322: NOT
12323: IFFALSE 12327
// exit ;
12325: GO 12567
// index := GetElementIndex ( hackTanks , hack ) ;
12327: LD_ADDR_VAR 0 4
12331: PUSH
12332: LD_EXP 29
12336: PPUSH
12337: LD_VAR 0 1
12341: PPUSH
12342: CALL 33253 0 2
12346: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12347: LD_ADDR_VAR 0 3
12351: PUSH
12352: DOUBLE
12353: LD_EXP 30
12357: PUSH
12358: LD_VAR 0 4
12362: ARRAY
12363: INC
12364: ST_TO_ADDR
12365: LD_INT 1
12367: PUSH
12368: FOR_DOWNTO
12369: IFFALSE 12541
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12371: LD_ADDR_VAR 0 5
12375: PUSH
12376: LD_EXP 30
12380: PUSH
12381: LD_VAR 0 4
12385: ARRAY
12386: PUSH
12387: LD_VAR 0 3
12391: ARRAY
12392: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12393: LD_VAR 0 5
12397: PUSH
12398: LD_INT 1
12400: ARRAY
12401: PPUSH
12402: CALL_OW 302
12406: NOT
12407: PUSH
12408: LD_VAR 0 5
12412: PUSH
12413: LD_INT 1
12415: ARRAY
12416: PPUSH
12417: CALL_OW 255
12421: PUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: CALL_OW 255
12431: NONEQUAL
12432: OR
12433: IFFALSE 12539
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12435: LD_VAR 0 5
12439: PUSH
12440: LD_INT 1
12442: ARRAY
12443: PPUSH
12444: CALL_OW 305
12448: PUSH
12449: LD_VAR 0 5
12453: PUSH
12454: LD_INT 1
12456: ARRAY
12457: PPUSH
12458: CALL_OW 255
12462: PUSH
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL_OW 255
12472: EQUAL
12473: AND
12474: IFFALSE 12498
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12476: LD_VAR 0 5
12480: PUSH
12481: LD_INT 1
12483: ARRAY
12484: PPUSH
12485: LD_VAR 0 5
12489: PUSH
12490: LD_INT 2
12492: ARRAY
12493: PPUSH
12494: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12498: LD_ADDR_EXP 30
12502: PUSH
12503: LD_EXP 30
12507: PPUSH
12508: LD_VAR 0 4
12512: PPUSH
12513: LD_EXP 30
12517: PUSH
12518: LD_VAR 0 4
12522: ARRAY
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: CALL_OW 3
12533: PPUSH
12534: CALL_OW 1
12538: ST_TO_ADDR
// end ; end ;
12539: GO 12368
12541: POP
12542: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12543: LD_VAR 0 1
12547: PPUSH
12548: LD_EXP 30
12552: PUSH
12553: LD_VAR 0 4
12557: ARRAY
12558: PUSH
12559: LD_INT 0
12561: PLUS
12562: PPUSH
12563: CALL_OW 505
// end ;
12567: LD_VAR 0 2
12571: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12572: LD_INT 0
12574: PPUSH
12575: PPUSH
12576: PPUSH
12577: PPUSH
// if not hack in hackTanks then
12578: LD_VAR 0 1
12582: PUSH
12583: LD_EXP 29
12587: IN
12588: NOT
12589: IFFALSE 12593
// exit ;
12591: GO 12678
// index := GetElementIndex ( hackTanks , hack ) ;
12593: LD_ADDR_VAR 0 5
12597: PUSH
12598: LD_EXP 29
12602: PPUSH
12603: LD_VAR 0 1
12607: PPUSH
12608: CALL 33253 0 2
12612: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12613: LD_ADDR_VAR 0 4
12617: PUSH
12618: DOUBLE
12619: LD_INT 1
12621: DEC
12622: ST_TO_ADDR
12623: LD_EXP 30
12627: PUSH
12628: LD_VAR 0 5
12632: ARRAY
12633: PUSH
12634: FOR_TO
12635: IFFALSE 12676
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12637: LD_EXP 30
12641: PUSH
12642: LD_VAR 0 5
12646: ARRAY
12647: PUSH
12648: LD_VAR 0 4
12652: ARRAY
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PUSH
12658: LD_VAR 0 2
12662: EQUAL
12663: IFFALSE 12674
// KillUnit ( vehicle ) ;
12665: LD_VAR 0 2
12669: PPUSH
12670: CALL_OW 66
12674: GO 12634
12676: POP
12677: POP
// end ;
12678: LD_VAR 0 3
12682: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12683: LD_EXP 34
12687: NOT
12688: IFFALSE 12723
12690: GO 12692
12692: DISABLE
// begin initMiner := true ;
12693: LD_ADDR_EXP 34
12697: PUSH
12698: LD_INT 1
12700: ST_TO_ADDR
// minersList := [ ] ;
12701: LD_ADDR_EXP 35
12705: PUSH
12706: EMPTY
12707: ST_TO_ADDR
// minerMinesList := [ ] ;
12708: LD_ADDR_EXP 36
12712: PUSH
12713: EMPTY
12714: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12715: LD_ADDR_EXP 37
12719: PUSH
12720: LD_INT 5
12722: ST_TO_ADDR
// end ;
12723: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12724: LD_EXP 34
12728: PUSH
12729: LD_INT 34
12731: PUSH
12732: LD_EXP 103
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 69
12745: AND
12746: IFFALSE 13209
12748: GO 12750
12750: DISABLE
12751: LD_INT 0
12753: PPUSH
12754: PPUSH
12755: PPUSH
12756: PPUSH
// begin enable ;
12757: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12758: LD_ADDR_VAR 0 1
12762: PUSH
12763: LD_INT 34
12765: PUSH
12766: LD_EXP 103
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: PUSH
12780: FOR_IN
12781: IFFALSE 12853
// begin if not i in minersList then
12783: LD_VAR 0 1
12787: PUSH
12788: LD_EXP 35
12792: IN
12793: NOT
12794: IFFALSE 12851
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12796: LD_ADDR_EXP 35
12800: PUSH
12801: LD_EXP 35
12805: PPUSH
12806: LD_EXP 35
12810: PUSH
12811: LD_INT 1
12813: PLUS
12814: PPUSH
12815: LD_VAR 0 1
12819: PPUSH
12820: CALL_OW 1
12824: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12825: LD_ADDR_EXP 36
12829: PUSH
12830: LD_EXP 36
12834: PPUSH
12835: LD_EXP 36
12839: PUSH
12840: LD_INT 1
12842: PLUS
12843: PPUSH
12844: EMPTY
12845: PPUSH
12846: CALL_OW 1
12850: ST_TO_ADDR
// end end ;
12851: GO 12780
12853: POP
12854: POP
// for i := minerMinesList downto 1 do
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: DOUBLE
12861: LD_EXP 36
12865: INC
12866: ST_TO_ADDR
12867: LD_INT 1
12869: PUSH
12870: FOR_DOWNTO
12871: IFFALSE 13207
// begin if IsLive ( minersList [ i ] ) then
12873: LD_EXP 35
12877: PUSH
12878: LD_VAR 0 1
12882: ARRAY
12883: PPUSH
12884: CALL_OW 300
12888: IFFALSE 12916
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12890: LD_EXP 35
12894: PUSH
12895: LD_VAR 0 1
12899: ARRAY
12900: PPUSH
12901: LD_EXP 36
12905: PUSH
12906: LD_VAR 0 1
12910: ARRAY
12911: PPUSH
12912: CALL_OW 505
// if not minerMinesList [ i ] then
12916: LD_EXP 36
12920: PUSH
12921: LD_VAR 0 1
12925: ARRAY
12926: NOT
12927: IFFALSE 12931
// continue ;
12929: GO 12870
// for j := minerMinesList [ i ] downto 1 do
12931: LD_ADDR_VAR 0 2
12935: PUSH
12936: DOUBLE
12937: LD_EXP 36
12941: PUSH
12942: LD_VAR 0 1
12946: ARRAY
12947: INC
12948: ST_TO_ADDR
12949: LD_INT 1
12951: PUSH
12952: FOR_DOWNTO
12953: IFFALSE 13203
// begin side := GetSide ( minersList [ i ] ) ;
12955: LD_ADDR_VAR 0 3
12959: PUSH
12960: LD_EXP 35
12964: PUSH
12965: LD_VAR 0 1
12969: ARRAY
12970: PPUSH
12971: CALL_OW 255
12975: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12976: LD_ADDR_VAR 0 4
12980: PUSH
12981: LD_EXP 36
12985: PUSH
12986: LD_VAR 0 1
12990: ARRAY
12991: PUSH
12992: LD_VAR 0 2
12996: ARRAY
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: PPUSH
13002: LD_EXP 36
13006: PUSH
13007: LD_VAR 0 1
13011: ARRAY
13012: PUSH
13013: LD_VAR 0 2
13017: ARRAY
13018: PUSH
13019: LD_INT 2
13021: ARRAY
13022: PPUSH
13023: CALL_OW 428
13027: ST_TO_ADDR
// if not tmp then
13028: LD_VAR 0 4
13032: NOT
13033: IFFALSE 13037
// continue ;
13035: GO 12952
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13037: LD_VAR 0 4
13041: PUSH
13042: LD_INT 81
13044: PUSH
13045: LD_VAR 0 3
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PPUSH
13054: CALL_OW 69
13058: IN
13059: PUSH
13060: LD_EXP 36
13064: PUSH
13065: LD_VAR 0 1
13069: ARRAY
13070: PUSH
13071: LD_VAR 0 2
13075: ARRAY
13076: PUSH
13077: LD_INT 1
13079: ARRAY
13080: PPUSH
13081: LD_EXP 36
13085: PUSH
13086: LD_VAR 0 1
13090: ARRAY
13091: PUSH
13092: LD_VAR 0 2
13096: ARRAY
13097: PUSH
13098: LD_INT 2
13100: ARRAY
13101: PPUSH
13102: CALL_OW 458
13106: AND
13107: IFFALSE 13201
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13109: LD_EXP 36
13113: PUSH
13114: LD_VAR 0 1
13118: ARRAY
13119: PUSH
13120: LD_VAR 0 2
13124: ARRAY
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: LD_EXP 36
13134: PUSH
13135: LD_VAR 0 1
13139: ARRAY
13140: PUSH
13141: LD_VAR 0 2
13145: ARRAY
13146: PUSH
13147: LD_INT 2
13149: ARRAY
13150: PPUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13160: LD_ADDR_EXP 36
13164: PUSH
13165: LD_EXP 36
13169: PPUSH
13170: LD_VAR 0 1
13174: PPUSH
13175: LD_EXP 36
13179: PUSH
13180: LD_VAR 0 1
13184: ARRAY
13185: PPUSH
13186: LD_VAR 0 2
13190: PPUSH
13191: CALL_OW 3
13195: PPUSH
13196: CALL_OW 1
13200: ST_TO_ADDR
// end ; end ;
13201: GO 12952
13203: POP
13204: POP
// end ;
13205: GO 12870
13207: POP
13208: POP
// end ;
13209: PPOPN 4
13211: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13212: LD_INT 0
13214: PPUSH
13215: PPUSH
// result := false ;
13216: LD_ADDR_VAR 0 4
13220: PUSH
13221: LD_INT 0
13223: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 264
13233: PUSH
13234: LD_EXP 103
13238: EQUAL
13239: NOT
13240: IFFALSE 13244
// exit ;
13242: GO 13484
// index := GetElementIndex ( minersList , unit ) ;
13244: LD_ADDR_VAR 0 5
13248: PUSH
13249: LD_EXP 35
13253: PPUSH
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL 33253 0 2
13263: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13264: LD_EXP 36
13268: PUSH
13269: LD_VAR 0 5
13273: ARRAY
13274: PUSH
13275: LD_EXP 37
13279: GREATEREQUAL
13280: IFFALSE 13284
// exit ;
13282: GO 13484
// ComMoveXY ( unit , x , y ) ;
13284: LD_VAR 0 1
13288: PPUSH
13289: LD_VAR 0 2
13293: PPUSH
13294: LD_VAR 0 3
13298: PPUSH
13299: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13303: LD_INT 35
13305: PPUSH
13306: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13310: LD_VAR 0 1
13314: PPUSH
13315: LD_VAR 0 2
13319: PPUSH
13320: LD_VAR 0 3
13324: PPUSH
13325: CALL 64025 0 3
13329: NOT
13330: PUSH
13331: LD_VAR 0 1
13335: PPUSH
13336: CALL_OW 314
13340: AND
13341: IFFALSE 13345
// exit ;
13343: GO 13484
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_VAR 0 3
13354: PPUSH
13355: CALL_OW 428
13359: PUSH
13360: LD_VAR 0 1
13364: EQUAL
13365: PUSH
13366: LD_VAR 0 1
13370: PPUSH
13371: CALL_OW 314
13375: NOT
13376: AND
13377: IFFALSE 13303
// PlaySoundXY ( x , y , PlantMine ) ;
13379: LD_VAR 0 2
13383: PPUSH
13384: LD_VAR 0 3
13388: PPUSH
13389: LD_STRING PlantMine
13391: PPUSH
13392: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13396: LD_VAR 0 2
13400: PPUSH
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_VAR 0 1
13410: PPUSH
13411: CALL_OW 255
13415: PPUSH
13416: LD_INT 0
13418: PPUSH
13419: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13423: LD_ADDR_EXP 36
13427: PUSH
13428: LD_EXP 36
13432: PPUSH
13433: LD_VAR 0 5
13437: PUSH
13438: LD_EXP 36
13442: PUSH
13443: LD_VAR 0 5
13447: ARRAY
13448: PUSH
13449: LD_INT 1
13451: PLUS
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: LD_VAR 0 2
13461: PUSH
13462: LD_VAR 0 3
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL 33468 0 3
13475: ST_TO_ADDR
// result := true ;
13476: LD_ADDR_VAR 0 4
13480: PUSH
13481: LD_INT 1
13483: ST_TO_ADDR
// end ;
13484: LD_VAR 0 4
13488: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13489: LD_INT 0
13491: PPUSH
13492: PPUSH
13493: PPUSH
// if not unit in minersList then
13494: LD_VAR 0 1
13498: PUSH
13499: LD_EXP 35
13503: IN
13504: NOT
13505: IFFALSE 13509
// exit ;
13507: GO 13901
// index := GetElementIndex ( minersList , unit ) ;
13509: LD_ADDR_VAR 0 6
13513: PUSH
13514: LD_EXP 35
13518: PPUSH
13519: LD_VAR 0 1
13523: PPUSH
13524: CALL 33253 0 2
13528: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13529: LD_ADDR_VAR 0 5
13533: PUSH
13534: DOUBLE
13535: LD_EXP 36
13539: PUSH
13540: LD_VAR 0 6
13544: ARRAY
13545: INC
13546: ST_TO_ADDR
13547: LD_INT 1
13549: PUSH
13550: FOR_DOWNTO
13551: IFFALSE 13712
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13553: LD_EXP 36
13557: PUSH
13558: LD_VAR 0 6
13562: ARRAY
13563: PUSH
13564: LD_VAR 0 5
13568: ARRAY
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PUSH
13574: LD_VAR 0 2
13578: EQUAL
13579: PUSH
13580: LD_EXP 36
13584: PUSH
13585: LD_VAR 0 6
13589: ARRAY
13590: PUSH
13591: LD_VAR 0 5
13595: ARRAY
13596: PUSH
13597: LD_INT 2
13599: ARRAY
13600: PUSH
13601: LD_VAR 0 3
13605: EQUAL
13606: AND
13607: IFFALSE 13710
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13609: LD_EXP 36
13613: PUSH
13614: LD_VAR 0 6
13618: ARRAY
13619: PUSH
13620: LD_VAR 0 5
13624: ARRAY
13625: PUSH
13626: LD_INT 1
13628: ARRAY
13629: PPUSH
13630: LD_EXP 36
13634: PUSH
13635: LD_VAR 0 6
13639: ARRAY
13640: PUSH
13641: LD_VAR 0 5
13645: ARRAY
13646: PUSH
13647: LD_INT 2
13649: ARRAY
13650: PPUSH
13651: LD_VAR 0 1
13655: PPUSH
13656: CALL_OW 255
13660: PPUSH
13661: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13665: LD_ADDR_EXP 36
13669: PUSH
13670: LD_EXP 36
13674: PPUSH
13675: LD_VAR 0 6
13679: PPUSH
13680: LD_EXP 36
13684: PUSH
13685: LD_VAR 0 6
13689: ARRAY
13690: PPUSH
13691: LD_VAR 0 5
13695: PPUSH
13696: CALL_OW 3
13700: PPUSH
13701: CALL_OW 1
13705: ST_TO_ADDR
// exit ;
13706: POP
13707: POP
13708: GO 13901
// end ; end ;
13710: GO 13550
13712: POP
13713: POP
// for i := minerMinesList [ index ] downto 1 do
13714: LD_ADDR_VAR 0 5
13718: PUSH
13719: DOUBLE
13720: LD_EXP 36
13724: PUSH
13725: LD_VAR 0 6
13729: ARRAY
13730: INC
13731: ST_TO_ADDR
13732: LD_INT 1
13734: PUSH
13735: FOR_DOWNTO
13736: IFFALSE 13899
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13738: LD_EXP 36
13742: PUSH
13743: LD_VAR 0 6
13747: ARRAY
13748: PUSH
13749: LD_VAR 0 5
13753: ARRAY
13754: PUSH
13755: LD_INT 1
13757: ARRAY
13758: PPUSH
13759: LD_EXP 36
13763: PUSH
13764: LD_VAR 0 6
13768: ARRAY
13769: PUSH
13770: LD_VAR 0 5
13774: ARRAY
13775: PUSH
13776: LD_INT 2
13778: ARRAY
13779: PPUSH
13780: LD_VAR 0 2
13784: PPUSH
13785: LD_VAR 0 3
13789: PPUSH
13790: CALL_OW 298
13794: PUSH
13795: LD_INT 6
13797: LESS
13798: IFFALSE 13897
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13800: LD_EXP 36
13804: PUSH
13805: LD_VAR 0 6
13809: ARRAY
13810: PUSH
13811: LD_VAR 0 5
13815: ARRAY
13816: PUSH
13817: LD_INT 1
13819: ARRAY
13820: PPUSH
13821: LD_EXP 36
13825: PUSH
13826: LD_VAR 0 6
13830: ARRAY
13831: PUSH
13832: LD_VAR 0 5
13836: ARRAY
13837: PUSH
13838: LD_INT 2
13840: ARRAY
13841: PPUSH
13842: LD_VAR 0 1
13846: PPUSH
13847: CALL_OW 255
13851: PPUSH
13852: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13856: LD_ADDR_EXP 36
13860: PUSH
13861: LD_EXP 36
13865: PPUSH
13866: LD_VAR 0 6
13870: PPUSH
13871: LD_EXP 36
13875: PUSH
13876: LD_VAR 0 6
13880: ARRAY
13881: PPUSH
13882: LD_VAR 0 5
13886: PPUSH
13887: CALL_OW 3
13891: PPUSH
13892: CALL_OW 1
13896: ST_TO_ADDR
// end ; end ;
13897: GO 13735
13899: POP
13900: POP
// end ;
13901: LD_VAR 0 4
13905: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13906: LD_INT 0
13908: PPUSH
13909: PPUSH
13910: PPUSH
13911: PPUSH
13912: PPUSH
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13917: LD_VAR 0 1
13921: PPUSH
13922: CALL_OW 264
13926: PUSH
13927: LD_EXP 103
13931: EQUAL
13932: NOT
13933: PUSH
13934: LD_VAR 0 1
13938: PUSH
13939: LD_EXP 35
13943: IN
13944: NOT
13945: OR
13946: IFFALSE 13950
// exit ;
13948: GO 14272
// index := GetElementIndex ( minersList , unit ) ;
13950: LD_ADDR_VAR 0 6
13954: PUSH
13955: LD_EXP 35
13959: PPUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: CALL 33253 0 2
13969: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13970: LD_ADDR_VAR 0 8
13974: PUSH
13975: LD_EXP 37
13979: PUSH
13980: LD_EXP 36
13984: PUSH
13985: LD_VAR 0 6
13989: ARRAY
13990: MINUS
13991: ST_TO_ADDR
// if not minesFreeAmount then
13992: LD_VAR 0 8
13996: NOT
13997: IFFALSE 14001
// exit ;
13999: GO 14272
// tmp := [ ] ;
14001: LD_ADDR_VAR 0 7
14005: PUSH
14006: EMPTY
14007: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14008: LD_ADDR_VAR 0 5
14012: PUSH
14013: DOUBLE
14014: LD_INT 1
14016: DEC
14017: ST_TO_ADDR
14018: LD_VAR 0 8
14022: PUSH
14023: FOR_TO
14024: IFFALSE 14219
// begin _d := rand ( 0 , 5 ) ;
14026: LD_ADDR_VAR 0 11
14030: PUSH
14031: LD_INT 0
14033: PPUSH
14034: LD_INT 5
14036: PPUSH
14037: CALL_OW 12
14041: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14042: LD_ADDR_VAR 0 12
14046: PUSH
14047: LD_INT 2
14049: PPUSH
14050: LD_INT 6
14052: PPUSH
14053: CALL_OW 12
14057: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14058: LD_ADDR_VAR 0 9
14062: PUSH
14063: LD_VAR 0 2
14067: PPUSH
14068: LD_VAR 0 11
14072: PPUSH
14073: LD_VAR 0 12
14077: PPUSH
14078: CALL_OW 272
14082: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14083: LD_ADDR_VAR 0 10
14087: PUSH
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_VAR 0 11
14097: PPUSH
14098: LD_VAR 0 12
14102: PPUSH
14103: CALL_OW 273
14107: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14108: LD_VAR 0 9
14112: PPUSH
14113: LD_VAR 0 10
14117: PPUSH
14118: CALL_OW 488
14122: PUSH
14123: LD_VAR 0 9
14127: PUSH
14128: LD_VAR 0 10
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_VAR 0 7
14141: IN
14142: NOT
14143: AND
14144: PUSH
14145: LD_VAR 0 9
14149: PPUSH
14150: LD_VAR 0 10
14154: PPUSH
14155: CALL_OW 458
14159: NOT
14160: AND
14161: IFFALSE 14203
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14163: LD_ADDR_VAR 0 7
14167: PUSH
14168: LD_VAR 0 7
14172: PPUSH
14173: LD_VAR 0 7
14177: PUSH
14178: LD_INT 1
14180: PLUS
14181: PPUSH
14182: LD_VAR 0 9
14186: PUSH
14187: LD_VAR 0 10
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 1
14200: ST_TO_ADDR
14201: GO 14217
// i := i - 1 ;
14203: LD_ADDR_VAR 0 5
14207: PUSH
14208: LD_VAR 0 5
14212: PUSH
14213: LD_INT 1
14215: MINUS
14216: ST_TO_ADDR
// end ;
14217: GO 14023
14219: POP
14220: POP
// for i in tmp do
14221: LD_ADDR_VAR 0 5
14225: PUSH
14226: LD_VAR 0 7
14230: PUSH
14231: FOR_IN
14232: IFFALSE 14270
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14234: LD_VAR 0 1
14238: PPUSH
14239: LD_VAR 0 5
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: LD_VAR 0 5
14252: PUSH
14253: LD_INT 2
14255: ARRAY
14256: PPUSH
14257: CALL 13212 0 3
14261: NOT
14262: IFFALSE 14268
// exit ;
14264: POP
14265: POP
14266: GO 14272
14268: GO 14231
14270: POP
14271: POP
// end ;
14272: LD_VAR 0 4
14276: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14277: LD_INT 0
14279: PPUSH
14280: PPUSH
14281: PPUSH
14282: PPUSH
14283: PPUSH
14284: PPUSH
14285: PPUSH
// if not GetClass ( unit ) = class_sniper then
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 257
14295: PUSH
14296: LD_INT 5
14298: EQUAL
14299: NOT
14300: IFFALSE 14304
// exit ;
14302: GO 14692
// dist := 8 ;
14304: LD_ADDR_VAR 0 5
14308: PUSH
14309: LD_INT 8
14311: ST_TO_ADDR
// viewRange := 12 ;
14312: LD_ADDR_VAR 0 7
14316: PUSH
14317: LD_INT 12
14319: ST_TO_ADDR
// side := GetSide ( unit ) ;
14320: LD_ADDR_VAR 0 6
14324: PUSH
14325: LD_VAR 0 1
14329: PPUSH
14330: CALL_OW 255
14334: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14335: LD_INT 61
14337: PPUSH
14338: LD_VAR 0 6
14342: PPUSH
14343: CALL_OW 321
14347: PUSH
14348: LD_INT 2
14350: EQUAL
14351: IFFALSE 14361
// viewRange := 16 ;
14353: LD_ADDR_VAR 0 7
14357: PUSH
14358: LD_INT 16
14360: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14361: LD_VAR 0 1
14365: PPUSH
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: CALL_OW 297
14380: PUSH
14381: LD_VAR 0 5
14385: GREATER
14386: IFFALSE 14465
// begin ComMoveXY ( unit , x , y ) ;
14388: LD_VAR 0 1
14392: PPUSH
14393: LD_VAR 0 2
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14407: LD_INT 35
14409: PPUSH
14410: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14414: LD_VAR 0 1
14418: PPUSH
14419: LD_VAR 0 2
14423: PPUSH
14424: LD_VAR 0 3
14428: PPUSH
14429: CALL 64025 0 3
14433: NOT
14434: IFFALSE 14438
// exit ;
14436: GO 14692
// until GetDistUnitXY ( unit , x , y ) < dist ;
14438: LD_VAR 0 1
14442: PPUSH
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_VAR 0 3
14452: PPUSH
14453: CALL_OW 297
14457: PUSH
14458: LD_VAR 0 5
14462: LESS
14463: IFFALSE 14407
// end ; ComTurnXY ( unit , x , y ) ;
14465: LD_VAR 0 1
14469: PPUSH
14470: LD_VAR 0 2
14474: PPUSH
14475: LD_VAR 0 3
14479: PPUSH
14480: CALL_OW 118
// wait ( 5 ) ;
14484: LD_INT 5
14486: PPUSH
14487: CALL_OW 67
// _d := GetDir ( unit ) ;
14491: LD_ADDR_VAR 0 10
14495: PUSH
14496: LD_VAR 0 1
14500: PPUSH
14501: CALL_OW 254
14505: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14506: LD_ADDR_VAR 0 8
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 250
14520: PPUSH
14521: LD_VAR 0 10
14525: PPUSH
14526: LD_VAR 0 5
14530: PPUSH
14531: CALL_OW 272
14535: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14536: LD_ADDR_VAR 0 9
14540: PUSH
14541: LD_VAR 0 1
14545: PPUSH
14546: CALL_OW 251
14550: PPUSH
14551: LD_VAR 0 10
14555: PPUSH
14556: LD_VAR 0 5
14560: PPUSH
14561: CALL_OW 273
14565: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14566: LD_VAR 0 8
14570: PPUSH
14571: LD_VAR 0 9
14575: PPUSH
14576: CALL_OW 488
14580: NOT
14581: IFFALSE 14585
// exit ;
14583: GO 14692
// ComAnimCustom ( unit , 1 ) ;
14585: LD_VAR 0 1
14589: PPUSH
14590: LD_INT 1
14592: PPUSH
14593: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14597: LD_VAR 0 8
14601: PPUSH
14602: LD_VAR 0 9
14606: PPUSH
14607: LD_VAR 0 6
14611: PPUSH
14612: LD_VAR 0 7
14616: PPUSH
14617: CALL_OW 330
// repeat wait ( 1 ) ;
14621: LD_INT 1
14623: PPUSH
14624: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 316
14637: PUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 314
14647: OR
14648: PUSH
14649: LD_VAR 0 1
14653: PPUSH
14654: CALL_OW 302
14658: NOT
14659: OR
14660: PUSH
14661: LD_VAR 0 1
14665: PPUSH
14666: CALL_OW 301
14670: OR
14671: IFFALSE 14621
// RemoveSeeing ( _x , _y , side ) ;
14673: LD_VAR 0 8
14677: PPUSH
14678: LD_VAR 0 9
14682: PPUSH
14683: LD_VAR 0 6
14687: PPUSH
14688: CALL_OW 331
// end ; end_of_file
14692: LD_VAR 0 4
14696: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14697: LD_INT 0
14699: PPUSH
// if p2 = 100 then
14700: LD_VAR 0 2
14704: PUSH
14705: LD_INT 100
14707: EQUAL
14708: IFFALSE 15711
// begin if not StreamModeActive then
14710: LD_EXP 38
14714: NOT
14715: IFFALSE 14725
// StreamModeActive := true ;
14717: LD_ADDR_EXP 38
14721: PUSH
14722: LD_INT 1
14724: ST_TO_ADDR
// if p3 = 0 then
14725: LD_VAR 0 3
14729: PUSH
14730: LD_INT 0
14732: EQUAL
14733: IFFALSE 14739
// InitStreamMode ;
14735: CALL 15871 0 0
// if p3 = 1 then
14739: LD_VAR 0 3
14743: PUSH
14744: LD_INT 1
14746: EQUAL
14747: IFFALSE 14757
// sRocket := true ;
14749: LD_ADDR_EXP 43
14753: PUSH
14754: LD_INT 1
14756: ST_TO_ADDR
// if p3 = 2 then
14757: LD_VAR 0 3
14761: PUSH
14762: LD_INT 2
14764: EQUAL
14765: IFFALSE 14775
// sSpeed := true ;
14767: LD_ADDR_EXP 42
14771: PUSH
14772: LD_INT 1
14774: ST_TO_ADDR
// if p3 = 3 then
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 3
14782: EQUAL
14783: IFFALSE 14793
// sEngine := true ;
14785: LD_ADDR_EXP 44
14789: PUSH
14790: LD_INT 1
14792: ST_TO_ADDR
// if p3 = 4 then
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 4
14800: EQUAL
14801: IFFALSE 14811
// sSpec := true ;
14803: LD_ADDR_EXP 41
14807: PUSH
14808: LD_INT 1
14810: ST_TO_ADDR
// if p3 = 5 then
14811: LD_VAR 0 3
14815: PUSH
14816: LD_INT 5
14818: EQUAL
14819: IFFALSE 14829
// sLevel := true ;
14821: LD_ADDR_EXP 45
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// if p3 = 6 then
14829: LD_VAR 0 3
14833: PUSH
14834: LD_INT 6
14836: EQUAL
14837: IFFALSE 14847
// sArmoury := true ;
14839: LD_ADDR_EXP 46
14843: PUSH
14844: LD_INT 1
14846: ST_TO_ADDR
// if p3 = 7 then
14847: LD_VAR 0 3
14851: PUSH
14852: LD_INT 7
14854: EQUAL
14855: IFFALSE 14865
// sRadar := true ;
14857: LD_ADDR_EXP 47
14861: PUSH
14862: LD_INT 1
14864: ST_TO_ADDR
// if p3 = 8 then
14865: LD_VAR 0 3
14869: PUSH
14870: LD_INT 8
14872: EQUAL
14873: IFFALSE 14883
// sBunker := true ;
14875: LD_ADDR_EXP 48
14879: PUSH
14880: LD_INT 1
14882: ST_TO_ADDR
// if p3 = 9 then
14883: LD_VAR 0 3
14887: PUSH
14888: LD_INT 9
14890: EQUAL
14891: IFFALSE 14901
// sHack := true ;
14893: LD_ADDR_EXP 49
14897: PUSH
14898: LD_INT 1
14900: ST_TO_ADDR
// if p3 = 10 then
14901: LD_VAR 0 3
14905: PUSH
14906: LD_INT 10
14908: EQUAL
14909: IFFALSE 14919
// sFire := true ;
14911: LD_ADDR_EXP 50
14915: PUSH
14916: LD_INT 1
14918: ST_TO_ADDR
// if p3 = 11 then
14919: LD_VAR 0 3
14923: PUSH
14924: LD_INT 11
14926: EQUAL
14927: IFFALSE 14937
// sRefresh := true ;
14929: LD_ADDR_EXP 51
14933: PUSH
14934: LD_INT 1
14936: ST_TO_ADDR
// if p3 = 12 then
14937: LD_VAR 0 3
14941: PUSH
14942: LD_INT 12
14944: EQUAL
14945: IFFALSE 14955
// sExp := true ;
14947: LD_ADDR_EXP 52
14951: PUSH
14952: LD_INT 1
14954: ST_TO_ADDR
// if p3 = 13 then
14955: LD_VAR 0 3
14959: PUSH
14960: LD_INT 13
14962: EQUAL
14963: IFFALSE 14973
// sDepot := true ;
14965: LD_ADDR_EXP 53
14969: PUSH
14970: LD_INT 1
14972: ST_TO_ADDR
// if p3 = 14 then
14973: LD_VAR 0 3
14977: PUSH
14978: LD_INT 14
14980: EQUAL
14981: IFFALSE 14991
// sFlag := true ;
14983: LD_ADDR_EXP 54
14987: PUSH
14988: LD_INT 1
14990: ST_TO_ADDR
// if p3 = 15 then
14991: LD_VAR 0 3
14995: PUSH
14996: LD_INT 15
14998: EQUAL
14999: IFFALSE 15009
// sKamikadze := true ;
15001: LD_ADDR_EXP 62
15005: PUSH
15006: LD_INT 1
15008: ST_TO_ADDR
// if p3 = 16 then
15009: LD_VAR 0 3
15013: PUSH
15014: LD_INT 16
15016: EQUAL
15017: IFFALSE 15027
// sTroll := true ;
15019: LD_ADDR_EXP 63
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// if p3 = 17 then
15027: LD_VAR 0 3
15031: PUSH
15032: LD_INT 17
15034: EQUAL
15035: IFFALSE 15045
// sSlow := true ;
15037: LD_ADDR_EXP 64
15041: PUSH
15042: LD_INT 1
15044: ST_TO_ADDR
// if p3 = 18 then
15045: LD_VAR 0 3
15049: PUSH
15050: LD_INT 18
15052: EQUAL
15053: IFFALSE 15063
// sLack := true ;
15055: LD_ADDR_EXP 65
15059: PUSH
15060: LD_INT 1
15062: ST_TO_ADDR
// if p3 = 19 then
15063: LD_VAR 0 3
15067: PUSH
15068: LD_INT 19
15070: EQUAL
15071: IFFALSE 15081
// sTank := true ;
15073: LD_ADDR_EXP 67
15077: PUSH
15078: LD_INT 1
15080: ST_TO_ADDR
// if p3 = 20 then
15081: LD_VAR 0 3
15085: PUSH
15086: LD_INT 20
15088: EQUAL
15089: IFFALSE 15099
// sRemote := true ;
15091: LD_ADDR_EXP 68
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// if p3 = 21 then
15099: LD_VAR 0 3
15103: PUSH
15104: LD_INT 21
15106: EQUAL
15107: IFFALSE 15117
// sPowell := true ;
15109: LD_ADDR_EXP 69
15113: PUSH
15114: LD_INT 1
15116: ST_TO_ADDR
// if p3 = 22 then
15117: LD_VAR 0 3
15121: PUSH
15122: LD_INT 22
15124: EQUAL
15125: IFFALSE 15135
// sTeleport := true ;
15127: LD_ADDR_EXP 72
15131: PUSH
15132: LD_INT 1
15134: ST_TO_ADDR
// if p3 = 23 then
15135: LD_VAR 0 3
15139: PUSH
15140: LD_INT 23
15142: EQUAL
15143: IFFALSE 15153
// sOilTower := true ;
15145: LD_ADDR_EXP 74
15149: PUSH
15150: LD_INT 1
15152: ST_TO_ADDR
// if p3 = 24 then
15153: LD_VAR 0 3
15157: PUSH
15158: LD_INT 24
15160: EQUAL
15161: IFFALSE 15171
// sShovel := true ;
15163: LD_ADDR_EXP 75
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// if p3 = 25 then
15171: LD_VAR 0 3
15175: PUSH
15176: LD_INT 25
15178: EQUAL
15179: IFFALSE 15189
// sSheik := true ;
15181: LD_ADDR_EXP 76
15185: PUSH
15186: LD_INT 1
15188: ST_TO_ADDR
// if p3 = 26 then
15189: LD_VAR 0 3
15193: PUSH
15194: LD_INT 26
15196: EQUAL
15197: IFFALSE 15207
// sEarthquake := true ;
15199: LD_ADDR_EXP 78
15203: PUSH
15204: LD_INT 1
15206: ST_TO_ADDR
// if p3 = 27 then
15207: LD_VAR 0 3
15211: PUSH
15212: LD_INT 27
15214: EQUAL
15215: IFFALSE 15225
// sAI := true ;
15217: LD_ADDR_EXP 79
15221: PUSH
15222: LD_INT 1
15224: ST_TO_ADDR
// if p3 = 28 then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 28
15232: EQUAL
15233: IFFALSE 15243
// sCargo := true ;
15235: LD_ADDR_EXP 82
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// if p3 = 29 then
15243: LD_VAR 0 3
15247: PUSH
15248: LD_INT 29
15250: EQUAL
15251: IFFALSE 15261
// sDLaser := true ;
15253: LD_ADDR_EXP 83
15257: PUSH
15258: LD_INT 1
15260: ST_TO_ADDR
// if p3 = 30 then
15261: LD_VAR 0 3
15265: PUSH
15266: LD_INT 30
15268: EQUAL
15269: IFFALSE 15279
// sExchange := true ;
15271: LD_ADDR_EXP 84
15275: PUSH
15276: LD_INT 1
15278: ST_TO_ADDR
// if p3 = 31 then
15279: LD_VAR 0 3
15283: PUSH
15284: LD_INT 31
15286: EQUAL
15287: IFFALSE 15297
// sFac := true ;
15289: LD_ADDR_EXP 85
15293: PUSH
15294: LD_INT 1
15296: ST_TO_ADDR
// if p3 = 32 then
15297: LD_VAR 0 3
15301: PUSH
15302: LD_INT 32
15304: EQUAL
15305: IFFALSE 15315
// sPower := true ;
15307: LD_ADDR_EXP 86
15311: PUSH
15312: LD_INT 1
15314: ST_TO_ADDR
// if p3 = 33 then
15315: LD_VAR 0 3
15319: PUSH
15320: LD_INT 33
15322: EQUAL
15323: IFFALSE 15333
// sRandom := true ;
15325: LD_ADDR_EXP 87
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// if p3 = 34 then
15333: LD_VAR 0 3
15337: PUSH
15338: LD_INT 34
15340: EQUAL
15341: IFFALSE 15351
// sShield := true ;
15343: LD_ADDR_EXP 88
15347: PUSH
15348: LD_INT 1
15350: ST_TO_ADDR
// if p3 = 35 then
15351: LD_VAR 0 3
15355: PUSH
15356: LD_INT 35
15358: EQUAL
15359: IFFALSE 15369
// sTime := true ;
15361: LD_ADDR_EXP 89
15365: PUSH
15366: LD_INT 1
15368: ST_TO_ADDR
// if p3 = 36 then
15369: LD_VAR 0 3
15373: PUSH
15374: LD_INT 36
15376: EQUAL
15377: IFFALSE 15387
// sTools := true ;
15379: LD_ADDR_EXP 90
15383: PUSH
15384: LD_INT 1
15386: ST_TO_ADDR
// if p3 = 101 then
15387: LD_VAR 0 3
15391: PUSH
15392: LD_INT 101
15394: EQUAL
15395: IFFALSE 15405
// sSold := true ;
15397: LD_ADDR_EXP 55
15401: PUSH
15402: LD_INT 1
15404: ST_TO_ADDR
// if p3 = 102 then
15405: LD_VAR 0 3
15409: PUSH
15410: LD_INT 102
15412: EQUAL
15413: IFFALSE 15423
// sDiff := true ;
15415: LD_ADDR_EXP 56
15419: PUSH
15420: LD_INT 1
15422: ST_TO_ADDR
// if p3 = 103 then
15423: LD_VAR 0 3
15427: PUSH
15428: LD_INT 103
15430: EQUAL
15431: IFFALSE 15441
// sFog := true ;
15433: LD_ADDR_EXP 59
15437: PUSH
15438: LD_INT 1
15440: ST_TO_ADDR
// if p3 = 104 then
15441: LD_VAR 0 3
15445: PUSH
15446: LD_INT 104
15448: EQUAL
15449: IFFALSE 15459
// sReset := true ;
15451: LD_ADDR_EXP 60
15455: PUSH
15456: LD_INT 1
15458: ST_TO_ADDR
// if p3 = 105 then
15459: LD_VAR 0 3
15463: PUSH
15464: LD_INT 105
15466: EQUAL
15467: IFFALSE 15477
// sSun := true ;
15469: LD_ADDR_EXP 61
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// if p3 = 106 then
15477: LD_VAR 0 3
15481: PUSH
15482: LD_INT 106
15484: EQUAL
15485: IFFALSE 15495
// sTiger := true ;
15487: LD_ADDR_EXP 57
15491: PUSH
15492: LD_INT 1
15494: ST_TO_ADDR
// if p3 = 107 then
15495: LD_VAR 0 3
15499: PUSH
15500: LD_INT 107
15502: EQUAL
15503: IFFALSE 15513
// sBomb := true ;
15505: LD_ADDR_EXP 58
15509: PUSH
15510: LD_INT 1
15512: ST_TO_ADDR
// if p3 = 108 then
15513: LD_VAR 0 3
15517: PUSH
15518: LD_INT 108
15520: EQUAL
15521: IFFALSE 15531
// sWound := true ;
15523: LD_ADDR_EXP 66
15527: PUSH
15528: LD_INT 1
15530: ST_TO_ADDR
// if p3 = 109 then
15531: LD_VAR 0 3
15535: PUSH
15536: LD_INT 109
15538: EQUAL
15539: IFFALSE 15549
// sBetray := true ;
15541: LD_ADDR_EXP 70
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// if p3 = 110 then
15549: LD_VAR 0 3
15553: PUSH
15554: LD_INT 110
15556: EQUAL
15557: IFFALSE 15567
// sContamin := true ;
15559: LD_ADDR_EXP 71
15563: PUSH
15564: LD_INT 1
15566: ST_TO_ADDR
// if p3 = 111 then
15567: LD_VAR 0 3
15571: PUSH
15572: LD_INT 111
15574: EQUAL
15575: IFFALSE 15585
// sOil := true ;
15577: LD_ADDR_EXP 73
15581: PUSH
15582: LD_INT 1
15584: ST_TO_ADDR
// if p3 = 112 then
15585: LD_VAR 0 3
15589: PUSH
15590: LD_INT 112
15592: EQUAL
15593: IFFALSE 15603
// sStu := true ;
15595: LD_ADDR_EXP 77
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// if p3 = 113 then
15603: LD_VAR 0 3
15607: PUSH
15608: LD_INT 113
15610: EQUAL
15611: IFFALSE 15621
// sBazooka := true ;
15613: LD_ADDR_EXP 80
15617: PUSH
15618: LD_INT 1
15620: ST_TO_ADDR
// if p3 = 114 then
15621: LD_VAR 0 3
15625: PUSH
15626: LD_INT 114
15628: EQUAL
15629: IFFALSE 15639
// sMortar := true ;
15631: LD_ADDR_EXP 81
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// if p3 = 115 then
15639: LD_VAR 0 3
15643: PUSH
15644: LD_INT 115
15646: EQUAL
15647: IFFALSE 15657
// sRanger := true ;
15649: LD_ADDR_EXP 91
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// if p3 = 116 then
15657: LD_VAR 0 3
15661: PUSH
15662: LD_INT 116
15664: EQUAL
15665: IFFALSE 15675
// sComputer := true ;
15667: LD_ADDR_EXP 92
15671: PUSH
15672: LD_INT 1
15674: ST_TO_ADDR
// if p3 = 117 then
15675: LD_VAR 0 3
15679: PUSH
15680: LD_INT 117
15682: EQUAL
15683: IFFALSE 15693
// s30 := true ;
15685: LD_ADDR_EXP 93
15689: PUSH
15690: LD_INT 1
15692: ST_TO_ADDR
// if p3 = 118 then
15693: LD_VAR 0 3
15697: PUSH
15698: LD_INT 118
15700: EQUAL
15701: IFFALSE 15711
// s60 := true ;
15703: LD_ADDR_EXP 94
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// end ; if p2 = 101 then
15711: LD_VAR 0 2
15715: PUSH
15716: LD_INT 101
15718: EQUAL
15719: IFFALSE 15847
// begin case p3 of 1 :
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 1
15728: DOUBLE
15729: EQUAL
15730: IFTRUE 15734
15732: GO 15741
15734: POP
// hHackUnlimitedResources ; 2 :
15735: CALL 27443 0 0
15739: GO 15847
15741: LD_INT 2
15743: DOUBLE
15744: EQUAL
15745: IFTRUE 15749
15747: GO 15756
15749: POP
// hHackSetLevel10 ; 3 :
15750: CALL 27576 0 0
15754: GO 15847
15756: LD_INT 3
15758: DOUBLE
15759: EQUAL
15760: IFTRUE 15764
15762: GO 15771
15764: POP
// hHackSetLevel10YourUnits ; 4 :
15765: CALL 27661 0 0
15769: GO 15847
15771: LD_INT 4
15773: DOUBLE
15774: EQUAL
15775: IFTRUE 15779
15777: GO 15786
15779: POP
// hHackInvincible ; 5 :
15780: CALL 28109 0 0
15784: GO 15847
15786: LD_INT 5
15788: DOUBLE
15789: EQUAL
15790: IFTRUE 15794
15792: GO 15801
15794: POP
// hHackInvisible ; 6 :
15795: CALL 28220 0 0
15799: GO 15847
15801: LD_INT 6
15803: DOUBLE
15804: EQUAL
15805: IFTRUE 15809
15807: GO 15816
15809: POP
// hHackChangeYourSide ; 7 :
15810: CALL 28277 0 0
15814: GO 15847
15816: LD_INT 7
15818: DOUBLE
15819: EQUAL
15820: IFTRUE 15824
15822: GO 15831
15824: POP
// hHackChangeUnitSide ; 8 :
15825: CALL 28319 0 0
15829: GO 15847
15831: LD_INT 8
15833: DOUBLE
15834: EQUAL
15835: IFTRUE 15839
15837: GO 15846
15839: POP
// hHackFog ; end ;
15840: CALL 28420 0 0
15844: GO 15847
15846: POP
// end ; end ;
15847: LD_VAR 0 7
15851: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15852: GO 15854
15854: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15855: LD_STRING initStreamRollete();
15857: PPUSH
15858: CALL_OW 559
// InitStreamMode ;
15862: CALL 15871 0 0
// DefineStreamItems ( ) ;
15866: CALL 16335 0 0
// end ;
15870: END
// function InitStreamMode ; begin
15871: LD_INT 0
15873: PPUSH
// streamModeActive := false ;
15874: LD_ADDR_EXP 38
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// normalCounter := 36 ;
15882: LD_ADDR_EXP 39
15886: PUSH
15887: LD_INT 36
15889: ST_TO_ADDR
// hardcoreCounter := 16 ;
15890: LD_ADDR_EXP 40
15894: PUSH
15895: LD_INT 16
15897: ST_TO_ADDR
// sRocket := false ;
15898: LD_ADDR_EXP 43
15902: PUSH
15903: LD_INT 0
15905: ST_TO_ADDR
// sSpeed := false ;
15906: LD_ADDR_EXP 42
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// sEngine := false ;
15914: LD_ADDR_EXP 44
15918: PUSH
15919: LD_INT 0
15921: ST_TO_ADDR
// sSpec := false ;
15922: LD_ADDR_EXP 41
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// sLevel := false ;
15930: LD_ADDR_EXP 45
15934: PUSH
15935: LD_INT 0
15937: ST_TO_ADDR
// sArmoury := false ;
15938: LD_ADDR_EXP 46
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// sRadar := false ;
15946: LD_ADDR_EXP 47
15950: PUSH
15951: LD_INT 0
15953: ST_TO_ADDR
// sBunker := false ;
15954: LD_ADDR_EXP 48
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// sHack := false ;
15962: LD_ADDR_EXP 49
15966: PUSH
15967: LD_INT 0
15969: ST_TO_ADDR
// sFire := false ;
15970: LD_ADDR_EXP 50
15974: PUSH
15975: LD_INT 0
15977: ST_TO_ADDR
// sRefresh := false ;
15978: LD_ADDR_EXP 51
15982: PUSH
15983: LD_INT 0
15985: ST_TO_ADDR
// sExp := false ;
15986: LD_ADDR_EXP 52
15990: PUSH
15991: LD_INT 0
15993: ST_TO_ADDR
// sDepot := false ;
15994: LD_ADDR_EXP 53
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// sFlag := false ;
16002: LD_ADDR_EXP 54
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// sKamikadze := false ;
16010: LD_ADDR_EXP 62
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// sTroll := false ;
16018: LD_ADDR_EXP 63
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// sSlow := false ;
16026: LD_ADDR_EXP 64
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// sLack := false ;
16034: LD_ADDR_EXP 65
16038: PUSH
16039: LD_INT 0
16041: ST_TO_ADDR
// sTank := false ;
16042: LD_ADDR_EXP 67
16046: PUSH
16047: LD_INT 0
16049: ST_TO_ADDR
// sRemote := false ;
16050: LD_ADDR_EXP 68
16054: PUSH
16055: LD_INT 0
16057: ST_TO_ADDR
// sPowell := false ;
16058: LD_ADDR_EXP 69
16062: PUSH
16063: LD_INT 0
16065: ST_TO_ADDR
// sTeleport := false ;
16066: LD_ADDR_EXP 72
16070: PUSH
16071: LD_INT 0
16073: ST_TO_ADDR
// sOilTower := false ;
16074: LD_ADDR_EXP 74
16078: PUSH
16079: LD_INT 0
16081: ST_TO_ADDR
// sShovel := false ;
16082: LD_ADDR_EXP 75
16086: PUSH
16087: LD_INT 0
16089: ST_TO_ADDR
// sSheik := false ;
16090: LD_ADDR_EXP 76
16094: PUSH
16095: LD_INT 0
16097: ST_TO_ADDR
// sEarthquake := false ;
16098: LD_ADDR_EXP 78
16102: PUSH
16103: LD_INT 0
16105: ST_TO_ADDR
// sAI := false ;
16106: LD_ADDR_EXP 79
16110: PUSH
16111: LD_INT 0
16113: ST_TO_ADDR
// sCargo := false ;
16114: LD_ADDR_EXP 82
16118: PUSH
16119: LD_INT 0
16121: ST_TO_ADDR
// sDLaser := false ;
16122: LD_ADDR_EXP 83
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
// sExchange := false ;
16130: LD_ADDR_EXP 84
16134: PUSH
16135: LD_INT 0
16137: ST_TO_ADDR
// sFac := false ;
16138: LD_ADDR_EXP 85
16142: PUSH
16143: LD_INT 0
16145: ST_TO_ADDR
// sPower := false ;
16146: LD_ADDR_EXP 86
16150: PUSH
16151: LD_INT 0
16153: ST_TO_ADDR
// sRandom := false ;
16154: LD_ADDR_EXP 87
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
// sShield := false ;
16162: LD_ADDR_EXP 88
16166: PUSH
16167: LD_INT 0
16169: ST_TO_ADDR
// sTime := false ;
16170: LD_ADDR_EXP 89
16174: PUSH
16175: LD_INT 0
16177: ST_TO_ADDR
// sTools := false ;
16178: LD_ADDR_EXP 90
16182: PUSH
16183: LD_INT 0
16185: ST_TO_ADDR
// sSold := false ;
16186: LD_ADDR_EXP 55
16190: PUSH
16191: LD_INT 0
16193: ST_TO_ADDR
// sDiff := false ;
16194: LD_ADDR_EXP 56
16198: PUSH
16199: LD_INT 0
16201: ST_TO_ADDR
// sFog := false ;
16202: LD_ADDR_EXP 59
16206: PUSH
16207: LD_INT 0
16209: ST_TO_ADDR
// sReset := false ;
16210: LD_ADDR_EXP 60
16214: PUSH
16215: LD_INT 0
16217: ST_TO_ADDR
// sSun := false ;
16218: LD_ADDR_EXP 61
16222: PUSH
16223: LD_INT 0
16225: ST_TO_ADDR
// sTiger := false ;
16226: LD_ADDR_EXP 57
16230: PUSH
16231: LD_INT 0
16233: ST_TO_ADDR
// sBomb := false ;
16234: LD_ADDR_EXP 58
16238: PUSH
16239: LD_INT 0
16241: ST_TO_ADDR
// sWound := false ;
16242: LD_ADDR_EXP 66
16246: PUSH
16247: LD_INT 0
16249: ST_TO_ADDR
// sBetray := false ;
16250: LD_ADDR_EXP 70
16254: PUSH
16255: LD_INT 0
16257: ST_TO_ADDR
// sContamin := false ;
16258: LD_ADDR_EXP 71
16262: PUSH
16263: LD_INT 0
16265: ST_TO_ADDR
// sOil := false ;
16266: LD_ADDR_EXP 73
16270: PUSH
16271: LD_INT 0
16273: ST_TO_ADDR
// sStu := false ;
16274: LD_ADDR_EXP 77
16278: PUSH
16279: LD_INT 0
16281: ST_TO_ADDR
// sBazooka := false ;
16282: LD_ADDR_EXP 80
16286: PUSH
16287: LD_INT 0
16289: ST_TO_ADDR
// sMortar := false ;
16290: LD_ADDR_EXP 81
16294: PUSH
16295: LD_INT 0
16297: ST_TO_ADDR
// sRanger := false ;
16298: LD_ADDR_EXP 91
16302: PUSH
16303: LD_INT 0
16305: ST_TO_ADDR
// sComputer := false ;
16306: LD_ADDR_EXP 92
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// s30 := false ;
16314: LD_ADDR_EXP 93
16318: PUSH
16319: LD_INT 0
16321: ST_TO_ADDR
// s60 := false ;
16322: LD_ADDR_EXP 94
16326: PUSH
16327: LD_INT 0
16329: ST_TO_ADDR
// end ;
16330: LD_VAR 0 1
16334: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16335: LD_INT 0
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
// result := [ ] ;
16342: LD_ADDR_VAR 0 1
16346: PUSH
16347: EMPTY
16348: ST_TO_ADDR
// if campaign_id = 1 then
16349: LD_OWVAR 69
16353: PUSH
16354: LD_INT 1
16356: EQUAL
16357: IFFALSE 19523
// begin case mission_number of 1 :
16359: LD_OWVAR 70
16363: PUSH
16364: LD_INT 1
16366: DOUBLE
16367: EQUAL
16368: IFTRUE 16372
16370: GO 16448
16372: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16373: LD_ADDR_VAR 0 1
16377: PUSH
16378: LD_INT 2
16380: PUSH
16381: LD_INT 4
16383: PUSH
16384: LD_INT 11
16386: PUSH
16387: LD_INT 12
16389: PUSH
16390: LD_INT 15
16392: PUSH
16393: LD_INT 16
16395: PUSH
16396: LD_INT 22
16398: PUSH
16399: LD_INT 23
16401: PUSH
16402: LD_INT 26
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 101
16418: PUSH
16419: LD_INT 102
16421: PUSH
16422: LD_INT 106
16424: PUSH
16425: LD_INT 116
16427: PUSH
16428: LD_INT 117
16430: PUSH
16431: LD_INT 118
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: ST_TO_ADDR
16446: GO 19521
16448: LD_INT 2
16450: DOUBLE
16451: EQUAL
16452: IFTRUE 16456
16454: GO 16540
16456: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16457: LD_ADDR_VAR 0 1
16461: PUSH
16462: LD_INT 2
16464: PUSH
16465: LD_INT 4
16467: PUSH
16468: LD_INT 11
16470: PUSH
16471: LD_INT 12
16473: PUSH
16474: LD_INT 15
16476: PUSH
16477: LD_INT 16
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: LD_INT 23
16485: PUSH
16486: LD_INT 26
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 101
16502: PUSH
16503: LD_INT 102
16505: PUSH
16506: LD_INT 105
16508: PUSH
16509: LD_INT 106
16511: PUSH
16512: LD_INT 108
16514: PUSH
16515: LD_INT 116
16517: PUSH
16518: LD_INT 117
16520: PUSH
16521: LD_INT 118
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: ST_TO_ADDR
16538: GO 19521
16540: LD_INT 3
16542: DOUBLE
16543: EQUAL
16544: IFTRUE 16548
16546: GO 16636
16548: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16549: LD_ADDR_VAR 0 1
16553: PUSH
16554: LD_INT 2
16556: PUSH
16557: LD_INT 4
16559: PUSH
16560: LD_INT 5
16562: PUSH
16563: LD_INT 11
16565: PUSH
16566: LD_INT 12
16568: PUSH
16569: LD_INT 15
16571: PUSH
16572: LD_INT 16
16574: PUSH
16575: LD_INT 22
16577: PUSH
16578: LD_INT 26
16580: PUSH
16581: LD_INT 36
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 101
16598: PUSH
16599: LD_INT 102
16601: PUSH
16602: LD_INT 105
16604: PUSH
16605: LD_INT 106
16607: PUSH
16608: LD_INT 108
16610: PUSH
16611: LD_INT 116
16613: PUSH
16614: LD_INT 117
16616: PUSH
16617: LD_INT 118
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: ST_TO_ADDR
16634: GO 19521
16636: LD_INT 4
16638: DOUBLE
16639: EQUAL
16640: IFTRUE 16644
16642: GO 16740
16644: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16645: LD_ADDR_VAR 0 1
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: LD_INT 4
16655: PUSH
16656: LD_INT 5
16658: PUSH
16659: LD_INT 8
16661: PUSH
16662: LD_INT 11
16664: PUSH
16665: LD_INT 12
16667: PUSH
16668: LD_INT 15
16670: PUSH
16671: LD_INT 16
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_INT 23
16679: PUSH
16680: LD_INT 26
16682: PUSH
16683: LD_INT 36
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 101
16702: PUSH
16703: LD_INT 102
16705: PUSH
16706: LD_INT 105
16708: PUSH
16709: LD_INT 106
16711: PUSH
16712: LD_INT 108
16714: PUSH
16715: LD_INT 116
16717: PUSH
16718: LD_INT 117
16720: PUSH
16721: LD_INT 118
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: ST_TO_ADDR
16738: GO 19521
16740: LD_INT 5
16742: DOUBLE
16743: EQUAL
16744: IFTRUE 16748
16746: GO 16860
16748: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16749: LD_ADDR_VAR 0 1
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 4
16759: PUSH
16760: LD_INT 5
16762: PUSH
16763: LD_INT 6
16765: PUSH
16766: LD_INT 8
16768: PUSH
16769: LD_INT 11
16771: PUSH
16772: LD_INT 12
16774: PUSH
16775: LD_INT 15
16777: PUSH
16778: LD_INT 16
16780: PUSH
16781: LD_INT 22
16783: PUSH
16784: LD_INT 23
16786: PUSH
16787: LD_INT 25
16789: PUSH
16790: LD_INT 26
16792: PUSH
16793: LD_INT 36
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 101
16814: PUSH
16815: LD_INT 102
16817: PUSH
16818: LD_INT 105
16820: PUSH
16821: LD_INT 106
16823: PUSH
16824: LD_INT 108
16826: PUSH
16827: LD_INT 109
16829: PUSH
16830: LD_INT 112
16832: PUSH
16833: LD_INT 116
16835: PUSH
16836: LD_INT 117
16838: PUSH
16839: LD_INT 118
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: ST_TO_ADDR
16858: GO 19521
16860: LD_INT 6
16862: DOUBLE
16863: EQUAL
16864: IFTRUE 16868
16866: GO 17000
16868: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16869: LD_ADDR_VAR 0 1
16873: PUSH
16874: LD_INT 2
16876: PUSH
16877: LD_INT 4
16879: PUSH
16880: LD_INT 5
16882: PUSH
16883: LD_INT 6
16885: PUSH
16886: LD_INT 8
16888: PUSH
16889: LD_INT 11
16891: PUSH
16892: LD_INT 12
16894: PUSH
16895: LD_INT 15
16897: PUSH
16898: LD_INT 16
16900: PUSH
16901: LD_INT 20
16903: PUSH
16904: LD_INT 21
16906: PUSH
16907: LD_INT 22
16909: PUSH
16910: LD_INT 23
16912: PUSH
16913: LD_INT 25
16915: PUSH
16916: LD_INT 26
16918: PUSH
16919: LD_INT 30
16921: PUSH
16922: LD_INT 31
16924: PUSH
16925: LD_INT 32
16927: PUSH
16928: LD_INT 36
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 101
16954: PUSH
16955: LD_INT 102
16957: PUSH
16958: LD_INT 105
16960: PUSH
16961: LD_INT 106
16963: PUSH
16964: LD_INT 108
16966: PUSH
16967: LD_INT 109
16969: PUSH
16970: LD_INT 112
16972: PUSH
16973: LD_INT 116
16975: PUSH
16976: LD_INT 117
16978: PUSH
16979: LD_INT 118
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: ST_TO_ADDR
16998: GO 19521
17000: LD_INT 7
17002: DOUBLE
17003: EQUAL
17004: IFTRUE 17008
17006: GO 17120
17008: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17009: LD_ADDR_VAR 0 1
17013: PUSH
17014: LD_INT 2
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: LD_INT 5
17022: PUSH
17023: LD_INT 7
17025: PUSH
17026: LD_INT 11
17028: PUSH
17029: LD_INT 12
17031: PUSH
17032: LD_INT 15
17034: PUSH
17035: LD_INT 16
17037: PUSH
17038: LD_INT 20
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_INT 23
17049: PUSH
17050: LD_INT 25
17052: PUSH
17053: LD_INT 26
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 101
17074: PUSH
17075: LD_INT 102
17077: PUSH
17078: LD_INT 103
17080: PUSH
17081: LD_INT 105
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 108
17089: PUSH
17090: LD_INT 112
17092: PUSH
17093: LD_INT 116
17095: PUSH
17096: LD_INT 117
17098: PUSH
17099: LD_INT 118
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: ST_TO_ADDR
17118: GO 19521
17120: LD_INT 8
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17268
17128: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17129: LD_ADDR_VAR 0 1
17133: PUSH
17134: LD_INT 2
17136: PUSH
17137: LD_INT 4
17139: PUSH
17140: LD_INT 5
17142: PUSH
17143: LD_INT 6
17145: PUSH
17146: LD_INT 7
17148: PUSH
17149: LD_INT 8
17151: PUSH
17152: LD_INT 11
17154: PUSH
17155: LD_INT 12
17157: PUSH
17158: LD_INT 15
17160: PUSH
17161: LD_INT 16
17163: PUSH
17164: LD_INT 20
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_INT 23
17175: PUSH
17176: LD_INT 25
17178: PUSH
17179: LD_INT 26
17181: PUSH
17182: LD_INT 30
17184: PUSH
17185: LD_INT 31
17187: PUSH
17188: LD_INT 32
17190: PUSH
17191: LD_INT 36
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 101
17218: PUSH
17219: LD_INT 102
17221: PUSH
17222: LD_INT 103
17224: PUSH
17225: LD_INT 105
17227: PUSH
17228: LD_INT 106
17230: PUSH
17231: LD_INT 108
17233: PUSH
17234: LD_INT 109
17236: PUSH
17237: LD_INT 112
17239: PUSH
17240: LD_INT 116
17242: PUSH
17243: LD_INT 117
17245: PUSH
17246: LD_INT 118
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: ST_TO_ADDR
17266: GO 19521
17268: LD_INT 9
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17424
17276: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17277: LD_ADDR_VAR 0 1
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 4
17287: PUSH
17288: LD_INT 5
17290: PUSH
17291: LD_INT 6
17293: PUSH
17294: LD_INT 7
17296: PUSH
17297: LD_INT 8
17299: PUSH
17300: LD_INT 11
17302: PUSH
17303: LD_INT 12
17305: PUSH
17306: LD_INT 15
17308: PUSH
17309: LD_INT 16
17311: PUSH
17312: LD_INT 20
17314: PUSH
17315: LD_INT 21
17317: PUSH
17318: LD_INT 22
17320: PUSH
17321: LD_INT 23
17323: PUSH
17324: LD_INT 25
17326: PUSH
17327: LD_INT 26
17329: PUSH
17330: LD_INT 28
17332: PUSH
17333: LD_INT 30
17335: PUSH
17336: LD_INT 31
17338: PUSH
17339: LD_INT 32
17341: PUSH
17342: LD_INT 36
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 101
17370: PUSH
17371: LD_INT 102
17373: PUSH
17374: LD_INT 103
17376: PUSH
17377: LD_INT 105
17379: PUSH
17380: LD_INT 106
17382: PUSH
17383: LD_INT 108
17385: PUSH
17386: LD_INT 109
17388: PUSH
17389: LD_INT 112
17391: PUSH
17392: LD_INT 114
17394: PUSH
17395: LD_INT 116
17397: PUSH
17398: LD_INT 117
17400: PUSH
17401: LD_INT 118
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: ST_TO_ADDR
17422: GO 19521
17424: LD_INT 10
17426: DOUBLE
17427: EQUAL
17428: IFTRUE 17432
17430: GO 17628
17432: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17433: LD_ADDR_VAR 0 1
17437: PUSH
17438: LD_INT 2
17440: PUSH
17441: LD_INT 4
17443: PUSH
17444: LD_INT 5
17446: PUSH
17447: LD_INT 6
17449: PUSH
17450: LD_INT 7
17452: PUSH
17453: LD_INT 8
17455: PUSH
17456: LD_INT 9
17458: PUSH
17459: LD_INT 10
17461: PUSH
17462: LD_INT 11
17464: PUSH
17465: LD_INT 12
17467: PUSH
17468: LD_INT 13
17470: PUSH
17471: LD_INT 14
17473: PUSH
17474: LD_INT 15
17476: PUSH
17477: LD_INT 16
17479: PUSH
17480: LD_INT 17
17482: PUSH
17483: LD_INT 18
17485: PUSH
17486: LD_INT 19
17488: PUSH
17489: LD_INT 20
17491: PUSH
17492: LD_INT 21
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_INT 23
17500: PUSH
17501: LD_INT 24
17503: PUSH
17504: LD_INT 25
17506: PUSH
17507: LD_INT 26
17509: PUSH
17510: LD_INT 28
17512: PUSH
17513: LD_INT 30
17515: PUSH
17516: LD_INT 31
17518: PUSH
17519: LD_INT 32
17521: PUSH
17522: LD_INT 36
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 101
17558: PUSH
17559: LD_INT 102
17561: PUSH
17562: LD_INT 103
17564: PUSH
17565: LD_INT 104
17567: PUSH
17568: LD_INT 105
17570: PUSH
17571: LD_INT 106
17573: PUSH
17574: LD_INT 107
17576: PUSH
17577: LD_INT 108
17579: PUSH
17580: LD_INT 109
17582: PUSH
17583: LD_INT 110
17585: PUSH
17586: LD_INT 111
17588: PUSH
17589: LD_INT 112
17591: PUSH
17592: LD_INT 114
17594: PUSH
17595: LD_INT 116
17597: PUSH
17598: LD_INT 117
17600: PUSH
17601: LD_INT 118
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: ST_TO_ADDR
17626: GO 19521
17628: LD_INT 11
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17840
17636: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_INT 2
17644: PUSH
17645: LD_INT 3
17647: PUSH
17648: LD_INT 4
17650: PUSH
17651: LD_INT 5
17653: PUSH
17654: LD_INT 6
17656: PUSH
17657: LD_INT 7
17659: PUSH
17660: LD_INT 8
17662: PUSH
17663: LD_INT 9
17665: PUSH
17666: LD_INT 10
17668: PUSH
17669: LD_INT 11
17671: PUSH
17672: LD_INT 12
17674: PUSH
17675: LD_INT 13
17677: PUSH
17678: LD_INT 14
17680: PUSH
17681: LD_INT 15
17683: PUSH
17684: LD_INT 16
17686: PUSH
17687: LD_INT 17
17689: PUSH
17690: LD_INT 18
17692: PUSH
17693: LD_INT 19
17695: PUSH
17696: LD_INT 20
17698: PUSH
17699: LD_INT 21
17701: PUSH
17702: LD_INT 22
17704: PUSH
17705: LD_INT 23
17707: PUSH
17708: LD_INT 24
17710: PUSH
17711: LD_INT 25
17713: PUSH
17714: LD_INT 26
17716: PUSH
17717: LD_INT 28
17719: PUSH
17720: LD_INT 30
17722: PUSH
17723: LD_INT 31
17725: PUSH
17726: LD_INT 32
17728: PUSH
17729: LD_INT 34
17731: PUSH
17732: LD_INT 36
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 101
17770: PUSH
17771: LD_INT 102
17773: PUSH
17774: LD_INT 103
17776: PUSH
17777: LD_INT 104
17779: PUSH
17780: LD_INT 105
17782: PUSH
17783: LD_INT 106
17785: PUSH
17786: LD_INT 107
17788: PUSH
17789: LD_INT 108
17791: PUSH
17792: LD_INT 109
17794: PUSH
17795: LD_INT 110
17797: PUSH
17798: LD_INT 111
17800: PUSH
17801: LD_INT 112
17803: PUSH
17804: LD_INT 114
17806: PUSH
17807: LD_INT 116
17809: PUSH
17810: LD_INT 117
17812: PUSH
17813: LD_INT 118
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: ST_TO_ADDR
17838: GO 19521
17840: LD_INT 12
17842: DOUBLE
17843: EQUAL
17844: IFTRUE 17848
17846: GO 18068
17848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17849: LD_ADDR_VAR 0 1
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 2
17859: PUSH
17860: LD_INT 3
17862: PUSH
17863: LD_INT 4
17865: PUSH
17866: LD_INT 5
17868: PUSH
17869: LD_INT 6
17871: PUSH
17872: LD_INT 7
17874: PUSH
17875: LD_INT 8
17877: PUSH
17878: LD_INT 9
17880: PUSH
17881: LD_INT 10
17883: PUSH
17884: LD_INT 11
17886: PUSH
17887: LD_INT 12
17889: PUSH
17890: LD_INT 13
17892: PUSH
17893: LD_INT 14
17895: PUSH
17896: LD_INT 15
17898: PUSH
17899: LD_INT 16
17901: PUSH
17902: LD_INT 17
17904: PUSH
17905: LD_INT 18
17907: PUSH
17908: LD_INT 19
17910: PUSH
17911: LD_INT 20
17913: PUSH
17914: LD_INT 21
17916: PUSH
17917: LD_INT 22
17919: PUSH
17920: LD_INT 23
17922: PUSH
17923: LD_INT 24
17925: PUSH
17926: LD_INT 25
17928: PUSH
17929: LD_INT 26
17931: PUSH
17932: LD_INT 27
17934: PUSH
17935: LD_INT 28
17937: PUSH
17938: LD_INT 30
17940: PUSH
17941: LD_INT 31
17943: PUSH
17944: LD_INT 32
17946: PUSH
17947: LD_INT 33
17949: PUSH
17950: LD_INT 34
17952: PUSH
17953: LD_INT 36
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 101
17994: PUSH
17995: LD_INT 102
17997: PUSH
17998: LD_INT 103
18000: PUSH
18001: LD_INT 104
18003: PUSH
18004: LD_INT 105
18006: PUSH
18007: LD_INT 106
18009: PUSH
18010: LD_INT 107
18012: PUSH
18013: LD_INT 108
18015: PUSH
18016: LD_INT 109
18018: PUSH
18019: LD_INT 110
18021: PUSH
18022: LD_INT 111
18024: PUSH
18025: LD_INT 112
18027: PUSH
18028: LD_INT 113
18030: PUSH
18031: LD_INT 114
18033: PUSH
18034: LD_INT 116
18036: PUSH
18037: LD_INT 117
18039: PUSH
18040: LD_INT 118
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: ST_TO_ADDR
18066: GO 19521
18068: LD_INT 13
18070: DOUBLE
18071: EQUAL
18072: IFTRUE 18076
18074: GO 18284
18076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18077: LD_ADDR_VAR 0 1
18081: PUSH
18082: LD_INT 1
18084: PUSH
18085: LD_INT 2
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: LD_INT 5
18096: PUSH
18097: LD_INT 8
18099: PUSH
18100: LD_INT 9
18102: PUSH
18103: LD_INT 10
18105: PUSH
18106: LD_INT 11
18108: PUSH
18109: LD_INT 12
18111: PUSH
18112: LD_INT 14
18114: PUSH
18115: LD_INT 15
18117: PUSH
18118: LD_INT 16
18120: PUSH
18121: LD_INT 17
18123: PUSH
18124: LD_INT 18
18126: PUSH
18127: LD_INT 19
18129: PUSH
18130: LD_INT 20
18132: PUSH
18133: LD_INT 21
18135: PUSH
18136: LD_INT 22
18138: PUSH
18139: LD_INT 23
18141: PUSH
18142: LD_INT 24
18144: PUSH
18145: LD_INT 25
18147: PUSH
18148: LD_INT 26
18150: PUSH
18151: LD_INT 27
18153: PUSH
18154: LD_INT 28
18156: PUSH
18157: LD_INT 30
18159: PUSH
18160: LD_INT 31
18162: PUSH
18163: LD_INT 32
18165: PUSH
18166: LD_INT 33
18168: PUSH
18169: LD_INT 34
18171: PUSH
18172: LD_INT 36
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 101
18210: PUSH
18211: LD_INT 102
18213: PUSH
18214: LD_INT 103
18216: PUSH
18217: LD_INT 104
18219: PUSH
18220: LD_INT 105
18222: PUSH
18223: LD_INT 106
18225: PUSH
18226: LD_INT 107
18228: PUSH
18229: LD_INT 108
18231: PUSH
18232: LD_INT 109
18234: PUSH
18235: LD_INT 110
18237: PUSH
18238: LD_INT 111
18240: PUSH
18241: LD_INT 112
18243: PUSH
18244: LD_INT 113
18246: PUSH
18247: LD_INT 114
18249: PUSH
18250: LD_INT 116
18252: PUSH
18253: LD_INT 117
18255: PUSH
18256: LD_INT 118
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: ST_TO_ADDR
18282: GO 19521
18284: LD_INT 14
18286: DOUBLE
18287: EQUAL
18288: IFTRUE 18292
18290: GO 18516
18292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18293: LD_ADDR_VAR 0 1
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: LD_INT 3
18306: PUSH
18307: LD_INT 4
18309: PUSH
18310: LD_INT 5
18312: PUSH
18313: LD_INT 6
18315: PUSH
18316: LD_INT 7
18318: PUSH
18319: LD_INT 8
18321: PUSH
18322: LD_INT 9
18324: PUSH
18325: LD_INT 10
18327: PUSH
18328: LD_INT 11
18330: PUSH
18331: LD_INT 12
18333: PUSH
18334: LD_INT 13
18336: PUSH
18337: LD_INT 14
18339: PUSH
18340: LD_INT 15
18342: PUSH
18343: LD_INT 16
18345: PUSH
18346: LD_INT 17
18348: PUSH
18349: LD_INT 18
18351: PUSH
18352: LD_INT 19
18354: PUSH
18355: LD_INT 20
18357: PUSH
18358: LD_INT 21
18360: PUSH
18361: LD_INT 22
18363: PUSH
18364: LD_INT 23
18366: PUSH
18367: LD_INT 24
18369: PUSH
18370: LD_INT 25
18372: PUSH
18373: LD_INT 26
18375: PUSH
18376: LD_INT 27
18378: PUSH
18379: LD_INT 28
18381: PUSH
18382: LD_INT 29
18384: PUSH
18385: LD_INT 30
18387: PUSH
18388: LD_INT 31
18390: PUSH
18391: LD_INT 32
18393: PUSH
18394: LD_INT 33
18396: PUSH
18397: LD_INT 34
18399: PUSH
18400: LD_INT 36
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 101
18442: PUSH
18443: LD_INT 102
18445: PUSH
18446: LD_INT 103
18448: PUSH
18449: LD_INT 104
18451: PUSH
18452: LD_INT 105
18454: PUSH
18455: LD_INT 106
18457: PUSH
18458: LD_INT 107
18460: PUSH
18461: LD_INT 108
18463: PUSH
18464: LD_INT 109
18466: PUSH
18467: LD_INT 110
18469: PUSH
18470: LD_INT 111
18472: PUSH
18473: LD_INT 112
18475: PUSH
18476: LD_INT 113
18478: PUSH
18479: LD_INT 114
18481: PUSH
18482: LD_INT 116
18484: PUSH
18485: LD_INT 117
18487: PUSH
18488: LD_INT 118
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: ST_TO_ADDR
18514: GO 19521
18516: LD_INT 15
18518: DOUBLE
18519: EQUAL
18520: IFTRUE 18524
18522: GO 18748
18524: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18525: LD_ADDR_VAR 0 1
18529: PUSH
18530: LD_INT 1
18532: PUSH
18533: LD_INT 2
18535: PUSH
18536: LD_INT 3
18538: PUSH
18539: LD_INT 4
18541: PUSH
18542: LD_INT 5
18544: PUSH
18545: LD_INT 6
18547: PUSH
18548: LD_INT 7
18550: PUSH
18551: LD_INT 8
18553: PUSH
18554: LD_INT 9
18556: PUSH
18557: LD_INT 10
18559: PUSH
18560: LD_INT 11
18562: PUSH
18563: LD_INT 12
18565: PUSH
18566: LD_INT 13
18568: PUSH
18569: LD_INT 14
18571: PUSH
18572: LD_INT 15
18574: PUSH
18575: LD_INT 16
18577: PUSH
18578: LD_INT 17
18580: PUSH
18581: LD_INT 18
18583: PUSH
18584: LD_INT 19
18586: PUSH
18587: LD_INT 20
18589: PUSH
18590: LD_INT 21
18592: PUSH
18593: LD_INT 22
18595: PUSH
18596: LD_INT 23
18598: PUSH
18599: LD_INT 24
18601: PUSH
18602: LD_INT 25
18604: PUSH
18605: LD_INT 26
18607: PUSH
18608: LD_INT 27
18610: PUSH
18611: LD_INT 28
18613: PUSH
18614: LD_INT 29
18616: PUSH
18617: LD_INT 30
18619: PUSH
18620: LD_INT 31
18622: PUSH
18623: LD_INT 32
18625: PUSH
18626: LD_INT 33
18628: PUSH
18629: LD_INT 34
18631: PUSH
18632: LD_INT 36
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 101
18674: PUSH
18675: LD_INT 102
18677: PUSH
18678: LD_INT 103
18680: PUSH
18681: LD_INT 104
18683: PUSH
18684: LD_INT 105
18686: PUSH
18687: LD_INT 106
18689: PUSH
18690: LD_INT 107
18692: PUSH
18693: LD_INT 108
18695: PUSH
18696: LD_INT 109
18698: PUSH
18699: LD_INT 110
18701: PUSH
18702: LD_INT 111
18704: PUSH
18705: LD_INT 112
18707: PUSH
18708: LD_INT 113
18710: PUSH
18711: LD_INT 114
18713: PUSH
18714: LD_INT 116
18716: PUSH
18717: LD_INT 117
18719: PUSH
18720: LD_INT 118
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: ST_TO_ADDR
18746: GO 19521
18748: LD_INT 16
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18892
18756: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18757: LD_ADDR_VAR 0 1
18761: PUSH
18762: LD_INT 2
18764: PUSH
18765: LD_INT 4
18767: PUSH
18768: LD_INT 5
18770: PUSH
18771: LD_INT 7
18773: PUSH
18774: LD_INT 11
18776: PUSH
18777: LD_INT 12
18779: PUSH
18780: LD_INT 15
18782: PUSH
18783: LD_INT 16
18785: PUSH
18786: LD_INT 20
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 22
18794: PUSH
18795: LD_INT 23
18797: PUSH
18798: LD_INT 25
18800: PUSH
18801: LD_INT 26
18803: PUSH
18804: LD_INT 30
18806: PUSH
18807: LD_INT 31
18809: PUSH
18810: LD_INT 32
18812: PUSH
18813: LD_INT 33
18815: PUSH
18816: LD_INT 34
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 101
18842: PUSH
18843: LD_INT 102
18845: PUSH
18846: LD_INT 103
18848: PUSH
18849: LD_INT 106
18851: PUSH
18852: LD_INT 108
18854: PUSH
18855: LD_INT 112
18857: PUSH
18858: LD_INT 113
18860: PUSH
18861: LD_INT 114
18863: PUSH
18864: LD_INT 116
18866: PUSH
18867: LD_INT 117
18869: PUSH
18870: LD_INT 118
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: ST_TO_ADDR
18890: GO 19521
18892: LD_INT 17
18894: DOUBLE
18895: EQUAL
18896: IFTRUE 18900
18898: GO 19124
18900: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18901: LD_ADDR_VAR 0 1
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: LD_INT 2
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: LD_INT 4
18917: PUSH
18918: LD_INT 5
18920: PUSH
18921: LD_INT 6
18923: PUSH
18924: LD_INT 7
18926: PUSH
18927: LD_INT 8
18929: PUSH
18930: LD_INT 9
18932: PUSH
18933: LD_INT 10
18935: PUSH
18936: LD_INT 11
18938: PUSH
18939: LD_INT 12
18941: PUSH
18942: LD_INT 13
18944: PUSH
18945: LD_INT 14
18947: PUSH
18948: LD_INT 15
18950: PUSH
18951: LD_INT 16
18953: PUSH
18954: LD_INT 17
18956: PUSH
18957: LD_INT 18
18959: PUSH
18960: LD_INT 19
18962: PUSH
18963: LD_INT 20
18965: PUSH
18966: LD_INT 21
18968: PUSH
18969: LD_INT 22
18971: PUSH
18972: LD_INT 23
18974: PUSH
18975: LD_INT 24
18977: PUSH
18978: LD_INT 25
18980: PUSH
18981: LD_INT 26
18983: PUSH
18984: LD_INT 27
18986: PUSH
18987: LD_INT 28
18989: PUSH
18990: LD_INT 29
18992: PUSH
18993: LD_INT 30
18995: PUSH
18996: LD_INT 31
18998: PUSH
18999: LD_INT 32
19001: PUSH
19002: LD_INT 33
19004: PUSH
19005: LD_INT 34
19007: PUSH
19008: LD_INT 36
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 101
19050: PUSH
19051: LD_INT 102
19053: PUSH
19054: LD_INT 103
19056: PUSH
19057: LD_INT 104
19059: PUSH
19060: LD_INT 105
19062: PUSH
19063: LD_INT 106
19065: PUSH
19066: LD_INT 107
19068: PUSH
19069: LD_INT 108
19071: PUSH
19072: LD_INT 109
19074: PUSH
19075: LD_INT 110
19077: PUSH
19078: LD_INT 111
19080: PUSH
19081: LD_INT 112
19083: PUSH
19084: LD_INT 113
19086: PUSH
19087: LD_INT 114
19089: PUSH
19090: LD_INT 116
19092: PUSH
19093: LD_INT 117
19095: PUSH
19096: LD_INT 118
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: ST_TO_ADDR
19122: GO 19521
19124: LD_INT 18
19126: DOUBLE
19127: EQUAL
19128: IFTRUE 19132
19130: GO 19280
19132: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19133: LD_ADDR_VAR 0 1
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: LD_INT 4
19143: PUSH
19144: LD_INT 5
19146: PUSH
19147: LD_INT 7
19149: PUSH
19150: LD_INT 11
19152: PUSH
19153: LD_INT 12
19155: PUSH
19156: LD_INT 15
19158: PUSH
19159: LD_INT 16
19161: PUSH
19162: LD_INT 20
19164: PUSH
19165: LD_INT 21
19167: PUSH
19168: LD_INT 22
19170: PUSH
19171: LD_INT 23
19173: PUSH
19174: LD_INT 25
19176: PUSH
19177: LD_INT 26
19179: PUSH
19180: LD_INT 30
19182: PUSH
19183: LD_INT 31
19185: PUSH
19186: LD_INT 32
19188: PUSH
19189: LD_INT 33
19191: PUSH
19192: LD_INT 34
19194: PUSH
19195: LD_INT 35
19197: PUSH
19198: LD_INT 36
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 101
19226: PUSH
19227: LD_INT 102
19229: PUSH
19230: LD_INT 103
19232: PUSH
19233: LD_INT 106
19235: PUSH
19236: LD_INT 108
19238: PUSH
19239: LD_INT 112
19241: PUSH
19242: LD_INT 113
19244: PUSH
19245: LD_INT 114
19247: PUSH
19248: LD_INT 115
19250: PUSH
19251: LD_INT 116
19253: PUSH
19254: LD_INT 117
19256: PUSH
19257: LD_INT 118
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: ST_TO_ADDR
19278: GO 19521
19280: LD_INT 19
19282: DOUBLE
19283: EQUAL
19284: IFTRUE 19288
19286: GO 19520
19288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19289: LD_ADDR_VAR 0 1
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 3
19302: PUSH
19303: LD_INT 4
19305: PUSH
19306: LD_INT 5
19308: PUSH
19309: LD_INT 6
19311: PUSH
19312: LD_INT 7
19314: PUSH
19315: LD_INT 8
19317: PUSH
19318: LD_INT 9
19320: PUSH
19321: LD_INT 10
19323: PUSH
19324: LD_INT 11
19326: PUSH
19327: LD_INT 12
19329: PUSH
19330: LD_INT 13
19332: PUSH
19333: LD_INT 14
19335: PUSH
19336: LD_INT 15
19338: PUSH
19339: LD_INT 16
19341: PUSH
19342: LD_INT 17
19344: PUSH
19345: LD_INT 18
19347: PUSH
19348: LD_INT 19
19350: PUSH
19351: LD_INT 20
19353: PUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 22
19359: PUSH
19360: LD_INT 23
19362: PUSH
19363: LD_INT 24
19365: PUSH
19366: LD_INT 25
19368: PUSH
19369: LD_INT 26
19371: PUSH
19372: LD_INT 27
19374: PUSH
19375: LD_INT 28
19377: PUSH
19378: LD_INT 29
19380: PUSH
19381: LD_INT 30
19383: PUSH
19384: LD_INT 31
19386: PUSH
19387: LD_INT 32
19389: PUSH
19390: LD_INT 33
19392: PUSH
19393: LD_INT 34
19395: PUSH
19396: LD_INT 35
19398: PUSH
19399: LD_INT 36
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 101
19442: PUSH
19443: LD_INT 102
19445: PUSH
19446: LD_INT 103
19448: PUSH
19449: LD_INT 104
19451: PUSH
19452: LD_INT 105
19454: PUSH
19455: LD_INT 106
19457: PUSH
19458: LD_INT 107
19460: PUSH
19461: LD_INT 108
19463: PUSH
19464: LD_INT 109
19466: PUSH
19467: LD_INT 110
19469: PUSH
19470: LD_INT 111
19472: PUSH
19473: LD_INT 112
19475: PUSH
19476: LD_INT 113
19478: PUSH
19479: LD_INT 114
19481: PUSH
19482: LD_INT 115
19484: PUSH
19485: LD_INT 116
19487: PUSH
19488: LD_INT 117
19490: PUSH
19491: LD_INT 118
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: ST_TO_ADDR
19518: GO 19521
19520: POP
// end else
19521: GO 19752
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19523: LD_ADDR_VAR 0 1
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: LD_INT 3
19536: PUSH
19537: LD_INT 4
19539: PUSH
19540: LD_INT 5
19542: PUSH
19543: LD_INT 6
19545: PUSH
19546: LD_INT 7
19548: PUSH
19549: LD_INT 8
19551: PUSH
19552: LD_INT 9
19554: PUSH
19555: LD_INT 10
19557: PUSH
19558: LD_INT 11
19560: PUSH
19561: LD_INT 12
19563: PUSH
19564: LD_INT 13
19566: PUSH
19567: LD_INT 14
19569: PUSH
19570: LD_INT 15
19572: PUSH
19573: LD_INT 16
19575: PUSH
19576: LD_INT 17
19578: PUSH
19579: LD_INT 18
19581: PUSH
19582: LD_INT 19
19584: PUSH
19585: LD_INT 20
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 22
19593: PUSH
19594: LD_INT 23
19596: PUSH
19597: LD_INT 24
19599: PUSH
19600: LD_INT 25
19602: PUSH
19603: LD_INT 26
19605: PUSH
19606: LD_INT 27
19608: PUSH
19609: LD_INT 28
19611: PUSH
19612: LD_INT 29
19614: PUSH
19615: LD_INT 30
19617: PUSH
19618: LD_INT 31
19620: PUSH
19621: LD_INT 32
19623: PUSH
19624: LD_INT 33
19626: PUSH
19627: LD_INT 34
19629: PUSH
19630: LD_INT 35
19632: PUSH
19633: LD_INT 36
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 101
19676: PUSH
19677: LD_INT 102
19679: PUSH
19680: LD_INT 103
19682: PUSH
19683: LD_INT 104
19685: PUSH
19686: LD_INT 105
19688: PUSH
19689: LD_INT 106
19691: PUSH
19692: LD_INT 107
19694: PUSH
19695: LD_INT 108
19697: PUSH
19698: LD_INT 109
19700: PUSH
19701: LD_INT 110
19703: PUSH
19704: LD_INT 111
19706: PUSH
19707: LD_INT 112
19709: PUSH
19710: LD_INT 113
19712: PUSH
19713: LD_INT 114
19715: PUSH
19716: LD_INT 115
19718: PUSH
19719: LD_INT 116
19721: PUSH
19722: LD_INT 117
19724: PUSH
19725: LD_INT 118
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: ST_TO_ADDR
// if result then
19752: LD_VAR 0 1
19756: IFFALSE 20045
// begin normal :=  ;
19758: LD_ADDR_VAR 0 3
19762: PUSH
19763: LD_STRING 
19765: ST_TO_ADDR
// hardcore :=  ;
19766: LD_ADDR_VAR 0 4
19770: PUSH
19771: LD_STRING 
19773: ST_TO_ADDR
// for i = 1 to normalCounter do
19774: LD_ADDR_VAR 0 5
19778: PUSH
19779: DOUBLE
19780: LD_INT 1
19782: DEC
19783: ST_TO_ADDR
19784: LD_EXP 39
19788: PUSH
19789: FOR_TO
19790: IFFALSE 19891
// begin tmp := 0 ;
19792: LD_ADDR_VAR 0 2
19796: PUSH
19797: LD_STRING 0
19799: ST_TO_ADDR
// if result [ 1 ] then
19800: LD_VAR 0 1
19804: PUSH
19805: LD_INT 1
19807: ARRAY
19808: IFFALSE 19873
// if result [ 1 ] [ 1 ] = i then
19810: LD_VAR 0 1
19814: PUSH
19815: LD_INT 1
19817: ARRAY
19818: PUSH
19819: LD_INT 1
19821: ARRAY
19822: PUSH
19823: LD_VAR 0 5
19827: EQUAL
19828: IFFALSE 19873
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19830: LD_ADDR_VAR 0 1
19834: PUSH
19835: LD_VAR 0 1
19839: PPUSH
19840: LD_INT 1
19842: PPUSH
19843: LD_VAR 0 1
19847: PUSH
19848: LD_INT 1
19850: ARRAY
19851: PPUSH
19852: LD_INT 1
19854: PPUSH
19855: CALL_OW 3
19859: PPUSH
19860: CALL_OW 1
19864: ST_TO_ADDR
// tmp := 1 ;
19865: LD_ADDR_VAR 0 2
19869: PUSH
19870: LD_STRING 1
19872: ST_TO_ADDR
// end ; normal := normal & tmp ;
19873: LD_ADDR_VAR 0 3
19877: PUSH
19878: LD_VAR 0 3
19882: PUSH
19883: LD_VAR 0 2
19887: STR
19888: ST_TO_ADDR
// end ;
19889: GO 19789
19891: POP
19892: POP
// for i = 1 to hardcoreCounter do
19893: LD_ADDR_VAR 0 5
19897: PUSH
19898: DOUBLE
19899: LD_INT 1
19901: DEC
19902: ST_TO_ADDR
19903: LD_EXP 40
19907: PUSH
19908: FOR_TO
19909: IFFALSE 20014
// begin tmp := 0 ;
19911: LD_ADDR_VAR 0 2
19915: PUSH
19916: LD_STRING 0
19918: ST_TO_ADDR
// if result [ 2 ] then
19919: LD_VAR 0 1
19923: PUSH
19924: LD_INT 2
19926: ARRAY
19927: IFFALSE 19996
// if result [ 2 ] [ 1 ] = 100 + i then
19929: LD_VAR 0 1
19933: PUSH
19934: LD_INT 2
19936: ARRAY
19937: PUSH
19938: LD_INT 1
19940: ARRAY
19941: PUSH
19942: LD_INT 100
19944: PUSH
19945: LD_VAR 0 5
19949: PLUS
19950: EQUAL
19951: IFFALSE 19996
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19953: LD_ADDR_VAR 0 1
19957: PUSH
19958: LD_VAR 0 1
19962: PPUSH
19963: LD_INT 2
19965: PPUSH
19966: LD_VAR 0 1
19970: PUSH
19971: LD_INT 2
19973: ARRAY
19974: PPUSH
19975: LD_INT 1
19977: PPUSH
19978: CALL_OW 3
19982: PPUSH
19983: CALL_OW 1
19987: ST_TO_ADDR
// tmp := 1 ;
19988: LD_ADDR_VAR 0 2
19992: PUSH
19993: LD_STRING 1
19995: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19996: LD_ADDR_VAR 0 4
20000: PUSH
20001: LD_VAR 0 4
20005: PUSH
20006: LD_VAR 0 2
20010: STR
20011: ST_TO_ADDR
// end ;
20012: GO 19908
20014: POP
20015: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20016: LD_STRING getStreamItemsFromMission("
20018: PUSH
20019: LD_VAR 0 3
20023: STR
20024: PUSH
20025: LD_STRING ","
20027: STR
20028: PUSH
20029: LD_VAR 0 4
20033: STR
20034: PUSH
20035: LD_STRING ")
20037: STR
20038: PPUSH
20039: CALL_OW 559
// end else
20043: GO 20052
// ToLua ( getStreamItemsFromMission("","") ) ;
20045: LD_STRING getStreamItemsFromMission("","")
20047: PPUSH
20048: CALL_OW 559
// end ;
20052: LD_VAR 0 1
20056: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20057: LD_EXP 38
20061: PUSH
20062: LD_EXP 43
20066: AND
20067: IFFALSE 20191
20069: GO 20071
20071: DISABLE
20072: LD_INT 0
20074: PPUSH
20075: PPUSH
// begin enable ;
20076: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20077: LD_ADDR_VAR 0 2
20081: PUSH
20082: LD_INT 22
20084: PUSH
20085: LD_OWVAR 2
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: LD_INT 34
20099: PUSH
20100: LD_INT 7
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 34
20109: PUSH
20110: LD_INT 45
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 34
20119: PUSH
20120: LD_INT 28
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 34
20129: PUSH
20130: LD_INT 47
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 69
20152: ST_TO_ADDR
// if not tmp then
20153: LD_VAR 0 2
20157: NOT
20158: IFFALSE 20162
// exit ;
20160: GO 20191
// for i in tmp do
20162: LD_ADDR_VAR 0 1
20166: PUSH
20167: LD_VAR 0 2
20171: PUSH
20172: FOR_IN
20173: IFFALSE 20189
// begin SetLives ( i , 0 ) ;
20175: LD_VAR 0 1
20179: PPUSH
20180: LD_INT 0
20182: PPUSH
20183: CALL_OW 234
// end ;
20187: GO 20172
20189: POP
20190: POP
// end ;
20191: PPOPN 2
20193: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20194: LD_EXP 38
20198: PUSH
20199: LD_EXP 44
20203: AND
20204: IFFALSE 20288
20206: GO 20208
20208: DISABLE
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
// begin enable ;
20213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20214: LD_ADDR_VAR 0 2
20218: PUSH
20219: LD_INT 22
20221: PUSH
20222: LD_OWVAR 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 32
20233: PUSH
20234: LD_INT 3
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PPUSH
20245: CALL_OW 69
20249: ST_TO_ADDR
// if not tmp then
20250: LD_VAR 0 2
20254: NOT
20255: IFFALSE 20259
// exit ;
20257: GO 20288
// for i in tmp do
20259: LD_ADDR_VAR 0 1
20263: PUSH
20264: LD_VAR 0 2
20268: PUSH
20269: FOR_IN
20270: IFFALSE 20286
// begin SetLives ( i , 0 ) ;
20272: LD_VAR 0 1
20276: PPUSH
20277: LD_INT 0
20279: PPUSH
20280: CALL_OW 234
// end ;
20284: GO 20269
20286: POP
20287: POP
// end ;
20288: PPOPN 2
20290: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20291: LD_EXP 38
20295: PUSH
20296: LD_EXP 41
20300: AND
20301: IFFALSE 20394
20303: GO 20305
20305: DISABLE
20306: LD_INT 0
20308: PPUSH
// begin enable ;
20309: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20310: LD_ADDR_VAR 0 1
20314: PUSH
20315: LD_INT 22
20317: PUSH
20318: LD_OWVAR 2
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 2
20329: PUSH
20330: LD_INT 25
20332: PUSH
20333: LD_INT 5
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 25
20342: PUSH
20343: LD_INT 9
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 25
20352: PUSH
20353: LD_INT 8
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: PUSH
20375: FOR_IN
20376: IFFALSE 20392
// begin SetClass ( i , 1 ) ;
20378: LD_VAR 0 1
20382: PPUSH
20383: LD_INT 1
20385: PPUSH
20386: CALL_OW 336
// end ;
20390: GO 20375
20392: POP
20393: POP
// end ;
20394: PPOPN 1
20396: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20397: LD_EXP 38
20401: PUSH
20402: LD_EXP 42
20406: AND
20407: PUSH
20408: LD_OWVAR 65
20412: PUSH
20413: LD_INT 7
20415: LESS
20416: AND
20417: IFFALSE 20431
20419: GO 20421
20421: DISABLE
// begin enable ;
20422: ENABLE
// game_speed := 7 ;
20423: LD_ADDR_OWVAR 65
20427: PUSH
20428: LD_INT 7
20430: ST_TO_ADDR
// end ;
20431: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20432: LD_EXP 38
20436: PUSH
20437: LD_EXP 45
20441: AND
20442: IFFALSE 20644
20444: GO 20446
20446: DISABLE
20447: LD_INT 0
20449: PPUSH
20450: PPUSH
20451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: LD_INT 81
20459: PUSH
20460: LD_OWVAR 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 21
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: ST_TO_ADDR
// if not tmp then
20488: LD_VAR 0 3
20492: NOT
20493: IFFALSE 20497
// exit ;
20495: GO 20644
// if tmp > 5 then
20497: LD_VAR 0 3
20501: PUSH
20502: LD_INT 5
20504: GREATER
20505: IFFALSE 20517
// k := 5 else
20507: LD_ADDR_VAR 0 2
20511: PUSH
20512: LD_INT 5
20514: ST_TO_ADDR
20515: GO 20527
// k := tmp ;
20517: LD_ADDR_VAR 0 2
20521: PUSH
20522: LD_VAR 0 3
20526: ST_TO_ADDR
// for i := 1 to k do
20527: LD_ADDR_VAR 0 1
20531: PUSH
20532: DOUBLE
20533: LD_INT 1
20535: DEC
20536: ST_TO_ADDR
20537: LD_VAR 0 2
20541: PUSH
20542: FOR_TO
20543: IFFALSE 20642
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20545: LD_VAR 0 3
20549: PUSH
20550: LD_VAR 0 1
20554: ARRAY
20555: PPUSH
20556: LD_VAR 0 1
20560: PUSH
20561: LD_INT 4
20563: MOD
20564: PUSH
20565: LD_INT 1
20567: PLUS
20568: PPUSH
20569: CALL_OW 259
20573: PUSH
20574: LD_INT 10
20576: LESS
20577: IFFALSE 20640
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20579: LD_VAR 0 3
20583: PUSH
20584: LD_VAR 0 1
20588: ARRAY
20589: PPUSH
20590: LD_VAR 0 1
20594: PUSH
20595: LD_INT 4
20597: MOD
20598: PUSH
20599: LD_INT 1
20601: PLUS
20602: PPUSH
20603: LD_VAR 0 3
20607: PUSH
20608: LD_VAR 0 1
20612: ARRAY
20613: PPUSH
20614: LD_VAR 0 1
20618: PUSH
20619: LD_INT 4
20621: MOD
20622: PUSH
20623: LD_INT 1
20625: PLUS
20626: PPUSH
20627: CALL_OW 259
20631: PUSH
20632: LD_INT 1
20634: PLUS
20635: PPUSH
20636: CALL_OW 237
20640: GO 20542
20642: POP
20643: POP
// end ;
20644: PPOPN 3
20646: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20647: LD_EXP 38
20651: PUSH
20652: LD_EXP 46
20656: AND
20657: IFFALSE 20677
20659: GO 20661
20661: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20662: LD_INT 4
20664: PPUSH
20665: LD_OWVAR 2
20669: PPUSH
20670: LD_INT 0
20672: PPUSH
20673: CALL_OW 324
20677: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20678: LD_EXP 38
20682: PUSH
20683: LD_EXP 75
20687: AND
20688: IFFALSE 20708
20690: GO 20692
20692: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20693: LD_INT 19
20695: PPUSH
20696: LD_OWVAR 2
20700: PPUSH
20701: LD_INT 0
20703: PPUSH
20704: CALL_OW 324
20708: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20709: LD_EXP 38
20713: PUSH
20714: LD_EXP 47
20718: AND
20719: IFFALSE 20821
20721: GO 20723
20723: DISABLE
20724: LD_INT 0
20726: PPUSH
20727: PPUSH
// begin enable ;
20728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20729: LD_ADDR_VAR 0 2
20733: PUSH
20734: LD_INT 22
20736: PUSH
20737: LD_OWVAR 2
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: LD_INT 34
20751: PUSH
20752: LD_INT 11
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 34
20761: PUSH
20762: LD_INT 30
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PPUSH
20778: CALL_OW 69
20782: ST_TO_ADDR
// if not tmp then
20783: LD_VAR 0 2
20787: NOT
20788: IFFALSE 20792
// exit ;
20790: GO 20821
// for i in tmp do
20792: LD_ADDR_VAR 0 1
20796: PUSH
20797: LD_VAR 0 2
20801: PUSH
20802: FOR_IN
20803: IFFALSE 20819
// begin SetLives ( i , 0 ) ;
20805: LD_VAR 0 1
20809: PPUSH
20810: LD_INT 0
20812: PPUSH
20813: CALL_OW 234
// end ;
20817: GO 20802
20819: POP
20820: POP
// end ;
20821: PPOPN 2
20823: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20824: LD_EXP 38
20828: PUSH
20829: LD_EXP 48
20833: AND
20834: IFFALSE 20854
20836: GO 20838
20838: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20839: LD_INT 32
20841: PPUSH
20842: LD_OWVAR 2
20846: PPUSH
20847: LD_INT 0
20849: PPUSH
20850: CALL_OW 324
20854: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20855: LD_EXP 38
20859: PUSH
20860: LD_EXP 49
20864: AND
20865: IFFALSE 21046
20867: GO 20869
20869: DISABLE
20870: LD_INT 0
20872: PPUSH
20873: PPUSH
20874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20875: LD_ADDR_VAR 0 2
20879: PUSH
20880: LD_INT 22
20882: PUSH
20883: LD_OWVAR 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 33
20894: PUSH
20895: LD_INT 3
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL_OW 69
20910: ST_TO_ADDR
// if not tmp then
20911: LD_VAR 0 2
20915: NOT
20916: IFFALSE 20920
// exit ;
20918: GO 21046
// side := 0 ;
20920: LD_ADDR_VAR 0 3
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// for i := 1 to 8 do
20928: LD_ADDR_VAR 0 1
20932: PUSH
20933: DOUBLE
20934: LD_INT 1
20936: DEC
20937: ST_TO_ADDR
20938: LD_INT 8
20940: PUSH
20941: FOR_TO
20942: IFFALSE 20990
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20944: LD_OWVAR 2
20948: PUSH
20949: LD_VAR 0 1
20953: NONEQUAL
20954: PUSH
20955: LD_OWVAR 2
20959: PPUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 81
20969: PUSH
20970: LD_INT 2
20972: EQUAL
20973: AND
20974: IFFALSE 20988
// begin side := i ;
20976: LD_ADDR_VAR 0 3
20980: PUSH
20981: LD_VAR 0 1
20985: ST_TO_ADDR
// break ;
20986: GO 20990
// end ;
20988: GO 20941
20990: POP
20991: POP
// if not side then
20992: LD_VAR 0 3
20996: NOT
20997: IFFALSE 21001
// exit ;
20999: GO 21046
// for i := 1 to tmp do
21001: LD_ADDR_VAR 0 1
21005: PUSH
21006: DOUBLE
21007: LD_INT 1
21009: DEC
21010: ST_TO_ADDR
21011: LD_VAR 0 2
21015: PUSH
21016: FOR_TO
21017: IFFALSE 21044
// if Prob ( 60 ) then
21019: LD_INT 60
21021: PPUSH
21022: CALL_OW 13
21026: IFFALSE 21042
// SetSide ( i , side ) ;
21028: LD_VAR 0 1
21032: PPUSH
21033: LD_VAR 0 3
21037: PPUSH
21038: CALL_OW 235
21042: GO 21016
21044: POP
21045: POP
// end ;
21046: PPOPN 3
21048: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21049: LD_EXP 38
21053: PUSH
21054: LD_EXP 51
21058: AND
21059: IFFALSE 21178
21061: GO 21063
21063: DISABLE
21064: LD_INT 0
21066: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21067: LD_ADDR_VAR 0 1
21071: PUSH
21072: LD_INT 22
21074: PUSH
21075: LD_OWVAR 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 21
21086: PUSH
21087: LD_INT 1
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 3
21096: PUSH
21097: LD_INT 23
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 69
21120: PUSH
21121: FOR_IN
21122: IFFALSE 21176
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 257
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: LD_INT 4
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: IN
21152: IFFALSE 21174
// SetClass ( un , rand ( 1 , 4 ) ) ;
21154: LD_VAR 0 1
21158: PPUSH
21159: LD_INT 1
21161: PPUSH
21162: LD_INT 4
21164: PPUSH
21165: CALL_OW 12
21169: PPUSH
21170: CALL_OW 336
21174: GO 21121
21176: POP
21177: POP
// end ;
21178: PPOPN 1
21180: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21181: LD_EXP 38
21185: PUSH
21186: LD_EXP 50
21190: AND
21191: IFFALSE 21270
21193: GO 21195
21195: DISABLE
21196: LD_INT 0
21198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21199: LD_ADDR_VAR 0 1
21203: PUSH
21204: LD_INT 22
21206: PUSH
21207: LD_OWVAR 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 21
21218: PUSH
21219: LD_INT 3
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: ST_TO_ADDR
// if not tmp then
21235: LD_VAR 0 1
21239: NOT
21240: IFFALSE 21244
// exit ;
21242: GO 21270
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21244: LD_VAR 0 1
21248: PUSH
21249: LD_INT 1
21251: PPUSH
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 12
21261: ARRAY
21262: PPUSH
21263: LD_INT 100
21265: PPUSH
21266: CALL_OW 234
// end ;
21270: PPOPN 1
21272: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21273: LD_EXP 38
21277: PUSH
21278: LD_EXP 52
21282: AND
21283: IFFALSE 21381
21285: GO 21287
21287: DISABLE
21288: LD_INT 0
21290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21291: LD_ADDR_VAR 0 1
21295: PUSH
21296: LD_INT 22
21298: PUSH
21299: LD_OWVAR 2
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 21
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PPUSH
21322: CALL_OW 69
21326: ST_TO_ADDR
// if not tmp then
21327: LD_VAR 0 1
21331: NOT
21332: IFFALSE 21336
// exit ;
21334: GO 21381
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21336: LD_VAR 0 1
21340: PUSH
21341: LD_INT 1
21343: PPUSH
21344: LD_VAR 0 1
21348: PPUSH
21349: CALL_OW 12
21353: ARRAY
21354: PPUSH
21355: LD_INT 1
21357: PPUSH
21358: LD_INT 4
21360: PPUSH
21361: CALL_OW 12
21365: PPUSH
21366: LD_INT 3000
21368: PPUSH
21369: LD_INT 9000
21371: PPUSH
21372: CALL_OW 12
21376: PPUSH
21377: CALL_OW 492
// end ;
21381: PPOPN 1
21383: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21384: LD_EXP 38
21388: PUSH
21389: LD_EXP 53
21393: AND
21394: IFFALSE 21414
21396: GO 21398
21398: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21399: LD_INT 1
21401: PPUSH
21402: LD_OWVAR 2
21406: PPUSH
21407: LD_INT 0
21409: PPUSH
21410: CALL_OW 324
21414: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21415: LD_EXP 38
21419: PUSH
21420: LD_EXP 54
21424: AND
21425: IFFALSE 21508
21427: GO 21429
21429: DISABLE
21430: LD_INT 0
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 21
21453: PUSH
21454: LD_INT 3
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PPUSH
21465: CALL_OW 69
21469: ST_TO_ADDR
// if not tmp then
21470: LD_VAR 0 2
21474: NOT
21475: IFFALSE 21479
// exit ;
21477: GO 21508
// for i in tmp do
21479: LD_ADDR_VAR 0 1
21483: PUSH
21484: LD_VAR 0 2
21488: PUSH
21489: FOR_IN
21490: IFFALSE 21506
// SetBLevel ( i , 10 ) ;
21492: LD_VAR 0 1
21496: PPUSH
21497: LD_INT 10
21499: PPUSH
21500: CALL_OW 241
21504: GO 21489
21506: POP
21507: POP
// end ;
21508: PPOPN 2
21510: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21511: LD_EXP 38
21515: PUSH
21516: LD_EXP 55
21520: AND
21521: IFFALSE 21632
21523: GO 21525
21525: DISABLE
21526: LD_INT 0
21528: PPUSH
21529: PPUSH
21530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21531: LD_ADDR_VAR 0 3
21535: PUSH
21536: LD_INT 22
21538: PUSH
21539: LD_OWVAR 2
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 25
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PPUSH
21562: CALL_OW 69
21566: ST_TO_ADDR
// if not tmp then
21567: LD_VAR 0 3
21571: NOT
21572: IFFALSE 21576
// exit ;
21574: GO 21632
// un := tmp [ rand ( 1 , tmp ) ] ;
21576: LD_ADDR_VAR 0 2
21580: PUSH
21581: LD_VAR 0 3
21585: PUSH
21586: LD_INT 1
21588: PPUSH
21589: LD_VAR 0 3
21593: PPUSH
21594: CALL_OW 12
21598: ARRAY
21599: ST_TO_ADDR
// if Crawls ( un ) then
21600: LD_VAR 0 2
21604: PPUSH
21605: CALL_OW 318
21609: IFFALSE 21620
// ComWalk ( un ) ;
21611: LD_VAR 0 2
21615: PPUSH
21616: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21620: LD_VAR 0 2
21624: PPUSH
21625: LD_INT 5
21627: PPUSH
21628: CALL_OW 336
// end ;
21632: PPOPN 3
21634: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21635: LD_EXP 38
21639: PUSH
21640: LD_EXP 56
21644: AND
21645: PUSH
21646: LD_OWVAR 67
21650: PUSH
21651: LD_INT 4
21653: LESS
21654: AND
21655: IFFALSE 21674
21657: GO 21659
21659: DISABLE
// begin Difficulty := Difficulty + 1 ;
21660: LD_ADDR_OWVAR 67
21664: PUSH
21665: LD_OWVAR 67
21669: PUSH
21670: LD_INT 1
21672: PLUS
21673: ST_TO_ADDR
// end ;
21674: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21675: LD_EXP 38
21679: PUSH
21680: LD_EXP 57
21684: AND
21685: IFFALSE 21788
21687: GO 21689
21689: DISABLE
21690: LD_INT 0
21692: PPUSH
// begin for i := 1 to 5 do
21693: LD_ADDR_VAR 0 1
21697: PUSH
21698: DOUBLE
21699: LD_INT 1
21701: DEC
21702: ST_TO_ADDR
21703: LD_INT 5
21705: PUSH
21706: FOR_TO
21707: IFFALSE 21786
// begin uc_nation := nation_nature ;
21709: LD_ADDR_OWVAR 21
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// uc_side := 0 ;
21717: LD_ADDR_OWVAR 20
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21725: LD_ADDR_OWVAR 29
21729: PUSH
21730: LD_INT 12
21732: PUSH
21733: LD_INT 12
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: ST_TO_ADDR
// hc_agressivity := 20 ;
21740: LD_ADDR_OWVAR 35
21744: PUSH
21745: LD_INT 20
21747: ST_TO_ADDR
// hc_class := class_tiger ;
21748: LD_ADDR_OWVAR 28
21752: PUSH
21753: LD_INT 14
21755: ST_TO_ADDR
// hc_gallery :=  ;
21756: LD_ADDR_OWVAR 33
21760: PUSH
21761: LD_STRING 
21763: ST_TO_ADDR
// hc_name :=  ;
21764: LD_ADDR_OWVAR 26
21768: PUSH
21769: LD_STRING 
21771: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21772: CALL_OW 44
21776: PPUSH
21777: LD_INT 0
21779: PPUSH
21780: CALL_OW 51
// end ;
21784: GO 21706
21786: POP
21787: POP
// end ;
21788: PPOPN 1
21790: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21791: LD_EXP 38
21795: PUSH
21796: LD_EXP 58
21800: AND
21801: IFFALSE 21810
21803: GO 21805
21805: DISABLE
// StreamSibBomb ;
21806: CALL 21811 0 0
21810: END
// export function StreamSibBomb ; var i , x , y ; begin
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
21815: PPUSH
21816: PPUSH
// result := false ;
21817: LD_ADDR_VAR 0 1
21821: PUSH
21822: LD_INT 0
21824: ST_TO_ADDR
// for i := 1 to 16 do
21825: LD_ADDR_VAR 0 2
21829: PUSH
21830: DOUBLE
21831: LD_INT 1
21833: DEC
21834: ST_TO_ADDR
21835: LD_INT 16
21837: PUSH
21838: FOR_TO
21839: IFFALSE 22038
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21841: LD_ADDR_VAR 0 3
21845: PUSH
21846: LD_INT 10
21848: PUSH
21849: LD_INT 20
21851: PUSH
21852: LD_INT 30
21854: PUSH
21855: LD_INT 40
21857: PUSH
21858: LD_INT 50
21860: PUSH
21861: LD_INT 60
21863: PUSH
21864: LD_INT 70
21866: PUSH
21867: LD_INT 80
21869: PUSH
21870: LD_INT 90
21872: PUSH
21873: LD_INT 100
21875: PUSH
21876: LD_INT 110
21878: PUSH
21879: LD_INT 120
21881: PUSH
21882: LD_INT 130
21884: PUSH
21885: LD_INT 140
21887: PUSH
21888: LD_INT 150
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: PPUSH
21911: LD_INT 15
21913: PPUSH
21914: CALL_OW 12
21918: ARRAY
21919: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21920: LD_ADDR_VAR 0 4
21924: PUSH
21925: LD_INT 10
21927: PUSH
21928: LD_INT 20
21930: PUSH
21931: LD_INT 30
21933: PUSH
21934: LD_INT 40
21936: PUSH
21937: LD_INT 50
21939: PUSH
21940: LD_INT 60
21942: PUSH
21943: LD_INT 70
21945: PUSH
21946: LD_INT 80
21948: PUSH
21949: LD_INT 90
21951: PUSH
21952: LD_INT 100
21954: PUSH
21955: LD_INT 110
21957: PUSH
21958: LD_INT 120
21960: PUSH
21961: LD_INT 130
21963: PUSH
21964: LD_INT 140
21966: PUSH
21967: LD_INT 150
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: PPUSH
21990: LD_INT 15
21992: PPUSH
21993: CALL_OW 12
21997: ARRAY
21998: ST_TO_ADDR
// if ValidHex ( x , y ) then
21999: LD_VAR 0 3
22003: PPUSH
22004: LD_VAR 0 4
22008: PPUSH
22009: CALL_OW 488
22013: IFFALSE 22036
// begin result := [ x , y ] ;
22015: LD_ADDR_VAR 0 1
22019: PUSH
22020: LD_VAR 0 3
22024: PUSH
22025: LD_VAR 0 4
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: ST_TO_ADDR
// break ;
22034: GO 22038
// end ; end ;
22036: GO 21838
22038: POP
22039: POP
// if result then
22040: LD_VAR 0 1
22044: IFFALSE 22104
// begin ToLua ( playSibBomb() ) ;
22046: LD_STRING playSibBomb()
22048: PPUSH
22049: CALL_OW 559
// wait ( 0 0$14 ) ;
22053: LD_INT 490
22055: PPUSH
22056: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22060: LD_VAR 0 1
22064: PUSH
22065: LD_INT 1
22067: ARRAY
22068: PPUSH
22069: LD_VAR 0 1
22073: PUSH
22074: LD_INT 2
22076: ARRAY
22077: PPUSH
22078: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22082: LD_VAR 0 1
22086: PUSH
22087: LD_INT 1
22089: ARRAY
22090: PPUSH
22091: LD_VAR 0 1
22095: PUSH
22096: LD_INT 2
22098: ARRAY
22099: PPUSH
22100: CALL_OW 429
// end ; end ;
22104: LD_VAR 0 1
22108: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22109: LD_EXP 38
22113: PUSH
22114: LD_EXP 60
22118: AND
22119: IFFALSE 22131
22121: GO 22123
22123: DISABLE
// YouLost (  ) ;
22124: LD_STRING 
22126: PPUSH
22127: CALL_OW 104
22131: END
// every 0 0$1 trigger StreamModeActive and sFog do
22132: LD_EXP 38
22136: PUSH
22137: LD_EXP 59
22141: AND
22142: IFFALSE 22156
22144: GO 22146
22146: DISABLE
// FogOff ( your_side ) ;
22147: LD_OWVAR 2
22151: PPUSH
22152: CALL_OW 344
22156: END
// every 0 0$1 trigger StreamModeActive and sSun do
22157: LD_EXP 38
22161: PUSH
22162: LD_EXP 61
22166: AND
22167: IFFALSE 22195
22169: GO 22171
22171: DISABLE
// begin solar_recharge_percent := 0 ;
22172: LD_ADDR_OWVAR 79
22176: PUSH
22177: LD_INT 0
22179: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22180: LD_INT 10500
22182: PPUSH
22183: CALL_OW 67
// solar_recharge_percent := 100 ;
22187: LD_ADDR_OWVAR 79
22191: PUSH
22192: LD_INT 100
22194: ST_TO_ADDR
// end ;
22195: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22196: LD_EXP 38
22200: PUSH
22201: LD_EXP 62
22205: AND
22206: IFFALSE 22445
22208: GO 22210
22210: DISABLE
22211: LD_INT 0
22213: PPUSH
22214: PPUSH
22215: PPUSH
// begin tmp := [ ] ;
22216: LD_ADDR_VAR 0 3
22220: PUSH
22221: EMPTY
22222: ST_TO_ADDR
// for i := 1 to 6 do
22223: LD_ADDR_VAR 0 1
22227: PUSH
22228: DOUBLE
22229: LD_INT 1
22231: DEC
22232: ST_TO_ADDR
22233: LD_INT 6
22235: PUSH
22236: FOR_TO
22237: IFFALSE 22342
// begin uc_nation := nation_nature ;
22239: LD_ADDR_OWVAR 21
22243: PUSH
22244: LD_INT 0
22246: ST_TO_ADDR
// uc_side := 0 ;
22247: LD_ADDR_OWVAR 20
22251: PUSH
22252: LD_INT 0
22254: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22255: LD_ADDR_OWVAR 29
22259: PUSH
22260: LD_INT 12
22262: PUSH
22263: LD_INT 12
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: ST_TO_ADDR
// hc_agressivity := 20 ;
22270: LD_ADDR_OWVAR 35
22274: PUSH
22275: LD_INT 20
22277: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22278: LD_ADDR_OWVAR 28
22282: PUSH
22283: LD_INT 17
22285: ST_TO_ADDR
// hc_gallery :=  ;
22286: LD_ADDR_OWVAR 33
22290: PUSH
22291: LD_STRING 
22293: ST_TO_ADDR
// hc_name :=  ;
22294: LD_ADDR_OWVAR 26
22298: PUSH
22299: LD_STRING 
22301: ST_TO_ADDR
// un := CreateHuman ;
22302: LD_ADDR_VAR 0 2
22306: PUSH
22307: CALL_OW 44
22311: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22312: LD_VAR 0 2
22316: PPUSH
22317: LD_INT 1
22319: PPUSH
22320: CALL_OW 51
// tmp := tmp ^ un ;
22324: LD_ADDR_VAR 0 3
22328: PUSH
22329: LD_VAR 0 3
22333: PUSH
22334: LD_VAR 0 2
22338: ADD
22339: ST_TO_ADDR
// end ;
22340: GO 22236
22342: POP
22343: POP
// repeat wait ( 0 0$1 ) ;
22344: LD_INT 35
22346: PPUSH
22347: CALL_OW 67
// for un in tmp do
22351: LD_ADDR_VAR 0 2
22355: PUSH
22356: LD_VAR 0 3
22360: PUSH
22361: FOR_IN
22362: IFFALSE 22436
// begin if IsDead ( un ) then
22364: LD_VAR 0 2
22368: PPUSH
22369: CALL_OW 301
22373: IFFALSE 22393
// begin tmp := tmp diff un ;
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: LD_VAR 0 3
22384: PUSH
22385: LD_VAR 0 2
22389: DIFF
22390: ST_TO_ADDR
// continue ;
22391: GO 22361
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22393: LD_VAR 0 2
22397: PPUSH
22398: LD_INT 3
22400: PUSH
22401: LD_INT 22
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PPUSH
22415: CALL_OW 69
22419: PPUSH
22420: LD_VAR 0 2
22424: PPUSH
22425: CALL_OW 74
22429: PPUSH
22430: CALL_OW 115
// end ;
22434: GO 22361
22436: POP
22437: POP
// until not tmp ;
22438: LD_VAR 0 3
22442: NOT
22443: IFFALSE 22344
// end ;
22445: PPOPN 3
22447: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22448: LD_EXP 38
22452: PUSH
22453: LD_EXP 63
22457: AND
22458: IFFALSE 22512
22460: GO 22462
22462: DISABLE
// begin ToLua ( displayTroll(); ) ;
22463: LD_STRING displayTroll();
22465: PPUSH
22466: CALL_OW 559
// wait ( 3 3$00 ) ;
22470: LD_INT 6300
22472: PPUSH
22473: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22477: LD_STRING hideTroll();
22479: PPUSH
22480: CALL_OW 559
// wait ( 1 1$00 ) ;
22484: LD_INT 2100
22486: PPUSH
22487: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22491: LD_STRING displayTroll();
22493: PPUSH
22494: CALL_OW 559
// wait ( 1 1$00 ) ;
22498: LD_INT 2100
22500: PPUSH
22501: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22505: LD_STRING hideTroll();
22507: PPUSH
22508: CALL_OW 559
// end ;
22512: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22513: LD_EXP 38
22517: PUSH
22518: LD_EXP 64
22522: AND
22523: IFFALSE 22586
22525: GO 22527
22527: DISABLE
22528: LD_INT 0
22530: PPUSH
// begin p := 0 ;
22531: LD_ADDR_VAR 0 1
22535: PUSH
22536: LD_INT 0
22538: ST_TO_ADDR
// repeat game_speed := 1 ;
22539: LD_ADDR_OWVAR 65
22543: PUSH
22544: LD_INT 1
22546: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22547: LD_INT 35
22549: PPUSH
22550: CALL_OW 67
// p := p + 1 ;
22554: LD_ADDR_VAR 0 1
22558: PUSH
22559: LD_VAR 0 1
22563: PUSH
22564: LD_INT 1
22566: PLUS
22567: ST_TO_ADDR
// until p >= 60 ;
22568: LD_VAR 0 1
22572: PUSH
22573: LD_INT 60
22575: GREATEREQUAL
22576: IFFALSE 22539
// game_speed := 4 ;
22578: LD_ADDR_OWVAR 65
22582: PUSH
22583: LD_INT 4
22585: ST_TO_ADDR
// end ;
22586: PPOPN 1
22588: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22589: LD_EXP 38
22593: PUSH
22594: LD_EXP 65
22598: AND
22599: IFFALSE 22745
22601: GO 22603
22603: DISABLE
22604: LD_INT 0
22606: PPUSH
22607: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22608: LD_ADDR_VAR 0 1
22612: PUSH
22613: LD_INT 22
22615: PUSH
22616: LD_OWVAR 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 30
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 30
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PPUSH
22657: CALL_OW 69
22661: ST_TO_ADDR
// if not depot then
22662: LD_VAR 0 1
22666: NOT
22667: IFFALSE 22671
// exit ;
22669: GO 22745
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_VAR 0 1
22680: PUSH
22681: LD_INT 1
22683: PPUSH
22684: LD_VAR 0 1
22688: PPUSH
22689: CALL_OW 12
22693: ARRAY
22694: PPUSH
22695: CALL_OW 274
22699: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22700: LD_VAR 0 2
22704: PPUSH
22705: LD_INT 1
22707: PPUSH
22708: LD_INT 0
22710: PPUSH
22711: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22715: LD_VAR 0 2
22719: PPUSH
22720: LD_INT 2
22722: PPUSH
22723: LD_INT 0
22725: PPUSH
22726: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22730: LD_VAR 0 2
22734: PPUSH
22735: LD_INT 3
22737: PPUSH
22738: LD_INT 0
22740: PPUSH
22741: CALL_OW 277
// end ;
22745: PPOPN 2
22747: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22748: LD_EXP 38
22752: PUSH
22753: LD_EXP 66
22757: AND
22758: IFFALSE 22855
22760: GO 22762
22762: DISABLE
22763: LD_INT 0
22765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22766: LD_ADDR_VAR 0 1
22770: PUSH
22771: LD_INT 22
22773: PUSH
22774: LD_OWVAR 2
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 21
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 3
22795: PUSH
22796: LD_INT 23
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: LIST
22814: PPUSH
22815: CALL_OW 69
22819: ST_TO_ADDR
// if not tmp then
22820: LD_VAR 0 1
22824: NOT
22825: IFFALSE 22829
// exit ;
22827: GO 22855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22829: LD_VAR 0 1
22833: PUSH
22834: LD_INT 1
22836: PPUSH
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 12
22846: ARRAY
22847: PPUSH
22848: LD_INT 200
22850: PPUSH
22851: CALL_OW 234
// end ;
22855: PPOPN 1
22857: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22858: LD_EXP 38
22862: PUSH
22863: LD_EXP 67
22867: AND
22868: IFFALSE 22947
22870: GO 22872
22872: DISABLE
22873: LD_INT 0
22875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22876: LD_ADDR_VAR 0 1
22880: PUSH
22881: LD_INT 22
22883: PUSH
22884: LD_OWVAR 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 21
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 69
22911: ST_TO_ADDR
// if not tmp then
22912: LD_VAR 0 1
22916: NOT
22917: IFFALSE 22921
// exit ;
22919: GO 22947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22921: LD_VAR 0 1
22925: PUSH
22926: LD_INT 1
22928: PPUSH
22929: LD_VAR 0 1
22933: PPUSH
22934: CALL_OW 12
22938: ARRAY
22939: PPUSH
22940: LD_INT 60
22942: PPUSH
22943: CALL_OW 234
// end ;
22947: PPOPN 1
22949: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22950: LD_EXP 38
22954: PUSH
22955: LD_EXP 68
22959: AND
22960: IFFALSE 23059
22962: GO 22964
22964: DISABLE
22965: LD_INT 0
22967: PPUSH
22968: PPUSH
// begin enable ;
22969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22970: LD_ADDR_VAR 0 1
22974: PUSH
22975: LD_INT 22
22977: PUSH
22978: LD_OWVAR 2
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 61
22989: PUSH
22990: EMPTY
22991: LIST
22992: PUSH
22993: LD_INT 33
22995: PUSH
22996: LD_INT 2
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: PPUSH
23008: CALL_OW 69
23012: ST_TO_ADDR
// if not tmp then
23013: LD_VAR 0 1
23017: NOT
23018: IFFALSE 23022
// exit ;
23020: GO 23059
// for i in tmp do
23022: LD_ADDR_VAR 0 2
23026: PUSH
23027: LD_VAR 0 1
23031: PUSH
23032: FOR_IN
23033: IFFALSE 23057
// if IsControledBy ( i ) then
23035: LD_VAR 0 2
23039: PPUSH
23040: CALL_OW 312
23044: IFFALSE 23055
// ComUnlink ( i ) ;
23046: LD_VAR 0 2
23050: PPUSH
23051: CALL_OW 136
23055: GO 23032
23057: POP
23058: POP
// end ;
23059: PPOPN 2
23061: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23062: LD_EXP 38
23066: PUSH
23067: LD_EXP 69
23071: AND
23072: IFFALSE 23212
23074: GO 23076
23076: DISABLE
23077: LD_INT 0
23079: PPUSH
23080: PPUSH
// begin ToLua ( displayPowell(); ) ;
23081: LD_STRING displayPowell();
23083: PPUSH
23084: CALL_OW 559
// uc_side := 0 ;
23088: LD_ADDR_OWVAR 20
23092: PUSH
23093: LD_INT 0
23095: ST_TO_ADDR
// uc_nation := 2 ;
23096: LD_ADDR_OWVAR 21
23100: PUSH
23101: LD_INT 2
23103: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23104: LD_ADDR_OWVAR 37
23108: PUSH
23109: LD_INT 14
23111: ST_TO_ADDR
// vc_engine := engine_siberite ;
23112: LD_ADDR_OWVAR 39
23116: PUSH
23117: LD_INT 3
23119: ST_TO_ADDR
// vc_control := control_apeman ;
23120: LD_ADDR_OWVAR 38
23124: PUSH
23125: LD_INT 5
23127: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23128: LD_ADDR_OWVAR 40
23132: PUSH
23133: LD_INT 29
23135: ST_TO_ADDR
// un := CreateVehicle ;
23136: LD_ADDR_VAR 0 2
23140: PUSH
23141: CALL_OW 45
23145: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23146: LD_VAR 0 2
23150: PPUSH
23151: LD_INT 1
23153: PPUSH
23154: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23158: LD_INT 35
23160: PPUSH
23161: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23165: LD_VAR 0 2
23169: PPUSH
23170: LD_INT 22
23172: PUSH
23173: LD_OWVAR 2
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PPUSH
23182: CALL_OW 69
23186: PPUSH
23187: LD_VAR 0 2
23191: PPUSH
23192: CALL_OW 74
23196: PPUSH
23197: CALL_OW 115
// until IsDead ( un ) ;
23201: LD_VAR 0 2
23205: PPUSH
23206: CALL_OW 301
23210: IFFALSE 23158
// end ;
23212: PPOPN 2
23214: END
// every 0 0$1 trigger StreamModeActive and sStu do
23215: LD_EXP 38
23219: PUSH
23220: LD_EXP 77
23224: AND
23225: IFFALSE 23241
23227: GO 23229
23229: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23230: LD_STRING displayStucuk();
23232: PPUSH
23233: CALL_OW 559
// ResetFog ;
23237: CALL_OW 335
// end ;
23241: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23242: LD_EXP 38
23246: PUSH
23247: LD_EXP 70
23251: AND
23252: IFFALSE 23393
23254: GO 23256
23256: DISABLE
23257: LD_INT 0
23259: PPUSH
23260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23261: LD_ADDR_VAR 0 2
23265: PUSH
23266: LD_INT 22
23268: PUSH
23269: LD_OWVAR 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 21
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PPUSH
23292: CALL_OW 69
23296: ST_TO_ADDR
// if not tmp then
23297: LD_VAR 0 2
23301: NOT
23302: IFFALSE 23306
// exit ;
23304: GO 23393
// un := tmp [ rand ( 1 , tmp ) ] ;
23306: LD_ADDR_VAR 0 1
23310: PUSH
23311: LD_VAR 0 2
23315: PUSH
23316: LD_INT 1
23318: PPUSH
23319: LD_VAR 0 2
23323: PPUSH
23324: CALL_OW 12
23328: ARRAY
23329: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23330: LD_VAR 0 1
23334: PPUSH
23335: LD_INT 0
23337: PPUSH
23338: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23342: LD_VAR 0 1
23346: PPUSH
23347: LD_OWVAR 3
23351: PUSH
23352: LD_VAR 0 1
23356: DIFF
23357: PPUSH
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 74
23367: PPUSH
23368: CALL_OW 115
// wait ( 0 0$20 ) ;
23372: LD_INT 700
23374: PPUSH
23375: CALL_OW 67
// SetSide ( un , your_side ) ;
23379: LD_VAR 0 1
23383: PPUSH
23384: LD_OWVAR 2
23388: PPUSH
23389: CALL_OW 235
// end ;
23393: PPOPN 2
23395: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23396: LD_EXP 38
23400: PUSH
23401: LD_EXP 71
23405: AND
23406: IFFALSE 23512
23408: GO 23410
23410: DISABLE
23411: LD_INT 0
23413: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23414: LD_ADDR_VAR 0 1
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PPUSH
23463: CALL_OW 69
23467: ST_TO_ADDR
// if not depot then
23468: LD_VAR 0 1
23472: NOT
23473: IFFALSE 23477
// exit ;
23475: GO 23512
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23477: LD_VAR 0 1
23481: PUSH
23482: LD_INT 1
23484: ARRAY
23485: PPUSH
23486: CALL_OW 250
23490: PPUSH
23491: LD_VAR 0 1
23495: PUSH
23496: LD_INT 1
23498: ARRAY
23499: PPUSH
23500: CALL_OW 251
23504: PPUSH
23505: LD_INT 70
23507: PPUSH
23508: CALL_OW 495
// end ;
23512: PPOPN 1
23514: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23515: LD_EXP 38
23519: PUSH
23520: LD_EXP 72
23524: AND
23525: IFFALSE 23736
23527: GO 23529
23529: DISABLE
23530: LD_INT 0
23532: PPUSH
23533: PPUSH
23534: PPUSH
23535: PPUSH
23536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23537: LD_ADDR_VAR 0 5
23541: PUSH
23542: LD_INT 22
23544: PUSH
23545: LD_OWVAR 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 21
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PPUSH
23568: CALL_OW 69
23572: ST_TO_ADDR
// if not tmp then
23573: LD_VAR 0 5
23577: NOT
23578: IFFALSE 23582
// exit ;
23580: GO 23736
// for i in tmp do
23582: LD_ADDR_VAR 0 1
23586: PUSH
23587: LD_VAR 0 5
23591: PUSH
23592: FOR_IN
23593: IFFALSE 23734
// begin d := rand ( 0 , 5 ) ;
23595: LD_ADDR_VAR 0 4
23599: PUSH
23600: LD_INT 0
23602: PPUSH
23603: LD_INT 5
23605: PPUSH
23606: CALL_OW 12
23610: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23611: LD_ADDR_VAR 0 2
23615: PUSH
23616: LD_VAR 0 1
23620: PPUSH
23621: CALL_OW 250
23625: PPUSH
23626: LD_VAR 0 4
23630: PPUSH
23631: LD_INT 3
23633: PPUSH
23634: LD_INT 12
23636: PPUSH
23637: CALL_OW 12
23641: PPUSH
23642: CALL_OW 272
23646: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 251
23661: PPUSH
23662: LD_VAR 0 4
23666: PPUSH
23667: LD_INT 3
23669: PPUSH
23670: LD_INT 12
23672: PPUSH
23673: CALL_OW 12
23677: PPUSH
23678: CALL_OW 273
23682: ST_TO_ADDR
// if ValidHex ( x , y ) then
23683: LD_VAR 0 2
23687: PPUSH
23688: LD_VAR 0 3
23692: PPUSH
23693: CALL_OW 488
23697: IFFALSE 23732
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23699: LD_VAR 0 1
23703: PPUSH
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_VAR 0 3
23713: PPUSH
23714: LD_INT 3
23716: PPUSH
23717: LD_INT 6
23719: PPUSH
23720: CALL_OW 12
23724: PPUSH
23725: LD_INT 1
23727: PPUSH
23728: CALL_OW 483
// end ;
23732: GO 23592
23734: POP
23735: POP
// end ;
23736: PPOPN 5
23738: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23739: LD_EXP 38
23743: PUSH
23744: LD_EXP 73
23748: AND
23749: IFFALSE 23843
23751: GO 23753
23753: DISABLE
23754: LD_INT 0
23756: PPUSH
23757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23758: LD_ADDR_VAR 0 2
23762: PUSH
23763: LD_INT 22
23765: PUSH
23766: LD_OWVAR 2
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 32
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 21
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: ST_TO_ADDR
// if not tmp then
23805: LD_VAR 0 2
23809: NOT
23810: IFFALSE 23814
// exit ;
23812: GO 23843
// for i in tmp do
23814: LD_ADDR_VAR 0 1
23818: PUSH
23819: LD_VAR 0 2
23823: PUSH
23824: FOR_IN
23825: IFFALSE 23841
// SetFuel ( i , 0 ) ;
23827: LD_VAR 0 1
23831: PPUSH
23832: LD_INT 0
23834: PPUSH
23835: CALL_OW 240
23839: GO 23824
23841: POP
23842: POP
// end ;
23843: PPOPN 2
23845: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23846: LD_EXP 38
23850: PUSH
23851: LD_EXP 74
23855: AND
23856: IFFALSE 23922
23858: GO 23860
23860: DISABLE
23861: LD_INT 0
23863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23864: LD_ADDR_VAR 0 1
23868: PUSH
23869: LD_INT 22
23871: PUSH
23872: LD_OWVAR 2
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 30
23883: PUSH
23884: LD_INT 29
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PPUSH
23895: CALL_OW 69
23899: ST_TO_ADDR
// if not tmp then
23900: LD_VAR 0 1
23904: NOT
23905: IFFALSE 23909
// exit ;
23907: GO 23922
// DestroyUnit ( tmp [ 1 ] ) ;
23909: LD_VAR 0 1
23913: PUSH
23914: LD_INT 1
23916: ARRAY
23917: PPUSH
23918: CALL_OW 65
// end ;
23922: PPOPN 1
23924: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23925: LD_EXP 38
23929: PUSH
23930: LD_EXP 76
23934: AND
23935: IFFALSE 24064
23937: GO 23939
23939: DISABLE
23940: LD_INT 0
23942: PPUSH
// begin uc_side := 0 ;
23943: LD_ADDR_OWVAR 20
23947: PUSH
23948: LD_INT 0
23950: ST_TO_ADDR
// uc_nation := nation_arabian ;
23951: LD_ADDR_OWVAR 21
23955: PUSH
23956: LD_INT 2
23958: ST_TO_ADDR
// hc_gallery :=  ;
23959: LD_ADDR_OWVAR 33
23963: PUSH
23964: LD_STRING 
23966: ST_TO_ADDR
// hc_name :=  ;
23967: LD_ADDR_OWVAR 26
23971: PUSH
23972: LD_STRING 
23974: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23975: LD_INT 1
23977: PPUSH
23978: LD_INT 11
23980: PPUSH
23981: LD_INT 10
23983: PPUSH
23984: CALL_OW 380
// un := CreateHuman ;
23988: LD_ADDR_VAR 0 1
23992: PUSH
23993: CALL_OW 44
23997: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23998: LD_VAR 0 1
24002: PPUSH
24003: LD_INT 1
24005: PPUSH
24006: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24010: LD_INT 35
24012: PPUSH
24013: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24017: LD_VAR 0 1
24021: PPUSH
24022: LD_INT 22
24024: PUSH
24025: LD_OWVAR 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PPUSH
24034: CALL_OW 69
24038: PPUSH
24039: LD_VAR 0 1
24043: PPUSH
24044: CALL_OW 74
24048: PPUSH
24049: CALL_OW 115
// until IsDead ( un ) ;
24053: LD_VAR 0 1
24057: PPUSH
24058: CALL_OW 301
24062: IFFALSE 24010
// end ;
24064: PPOPN 1
24066: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24067: LD_EXP 38
24071: PUSH
24072: LD_EXP 78
24076: AND
24077: IFFALSE 24089
24079: GO 24081
24081: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24082: LD_STRING earthquake(getX(game), 0, 32)
24084: PPUSH
24085: CALL_OW 559
24089: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24090: LD_EXP 38
24094: PUSH
24095: LD_EXP 79
24099: AND
24100: IFFALSE 24191
24102: GO 24104
24104: DISABLE
24105: LD_INT 0
24107: PPUSH
// begin enable ;
24108: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24109: LD_ADDR_VAR 0 1
24113: PUSH
24114: LD_INT 22
24116: PUSH
24117: LD_OWVAR 2
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 21
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 33
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: PPUSH
24151: CALL_OW 69
24155: ST_TO_ADDR
// if not tmp then
24156: LD_VAR 0 1
24160: NOT
24161: IFFALSE 24165
// exit ;
24163: GO 24191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24165: LD_VAR 0 1
24169: PUSH
24170: LD_INT 1
24172: PPUSH
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL_OW 12
24182: ARRAY
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: CALL_OW 234
// end ;
24191: PPOPN 1
24193: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24194: LD_EXP 38
24198: PUSH
24199: LD_EXP 80
24203: AND
24204: IFFALSE 24345
24206: GO 24208
24208: DISABLE
24209: LD_INT 0
24211: PPUSH
24212: PPUSH
24213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24214: LD_ADDR_VAR 0 3
24218: PUSH
24219: LD_INT 22
24221: PUSH
24222: LD_OWVAR 2
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 25
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PPUSH
24245: CALL_OW 69
24249: ST_TO_ADDR
// if not tmp then
24250: LD_VAR 0 3
24254: NOT
24255: IFFALSE 24259
// exit ;
24257: GO 24345
// un := tmp [ rand ( 1 , tmp ) ] ;
24259: LD_ADDR_VAR 0 2
24263: PUSH
24264: LD_VAR 0 3
24268: PUSH
24269: LD_INT 1
24271: PPUSH
24272: LD_VAR 0 3
24276: PPUSH
24277: CALL_OW 12
24281: ARRAY
24282: ST_TO_ADDR
// if Crawls ( un ) then
24283: LD_VAR 0 2
24287: PPUSH
24288: CALL_OW 318
24292: IFFALSE 24303
// ComWalk ( un ) ;
24294: LD_VAR 0 2
24298: PPUSH
24299: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24303: LD_VAR 0 2
24307: PPUSH
24308: LD_INT 9
24310: PPUSH
24311: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24315: LD_INT 28
24317: PPUSH
24318: LD_OWVAR 2
24322: PPUSH
24323: LD_INT 2
24325: PPUSH
24326: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24330: LD_INT 29
24332: PPUSH
24333: LD_OWVAR 2
24337: PPUSH
24338: LD_INT 2
24340: PPUSH
24341: CALL_OW 322
// end ;
24345: PPOPN 3
24347: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24348: LD_EXP 38
24352: PUSH
24353: LD_EXP 81
24357: AND
24358: IFFALSE 24469
24360: GO 24362
24362: DISABLE
24363: LD_INT 0
24365: PPUSH
24366: PPUSH
24367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24368: LD_ADDR_VAR 0 3
24372: PUSH
24373: LD_INT 22
24375: PUSH
24376: LD_OWVAR 2
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 25
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 69
24403: ST_TO_ADDR
// if not tmp then
24404: LD_VAR 0 3
24408: NOT
24409: IFFALSE 24413
// exit ;
24411: GO 24469
// un := tmp [ rand ( 1 , tmp ) ] ;
24413: LD_ADDR_VAR 0 2
24417: PUSH
24418: LD_VAR 0 3
24422: PUSH
24423: LD_INT 1
24425: PPUSH
24426: LD_VAR 0 3
24430: PPUSH
24431: CALL_OW 12
24435: ARRAY
24436: ST_TO_ADDR
// if Crawls ( un ) then
24437: LD_VAR 0 2
24441: PPUSH
24442: CALL_OW 318
24446: IFFALSE 24457
// ComWalk ( un ) ;
24448: LD_VAR 0 2
24452: PPUSH
24453: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24457: LD_VAR 0 2
24461: PPUSH
24462: LD_INT 8
24464: PPUSH
24465: CALL_OW 336
// end ;
24469: PPOPN 3
24471: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24472: LD_EXP 38
24476: PUSH
24477: LD_EXP 82
24481: AND
24482: IFFALSE 24626
24484: GO 24486
24486: DISABLE
24487: LD_INT 0
24489: PPUSH
24490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24491: LD_ADDR_VAR 0 2
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_OWVAR 2
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 21
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 2
24520: PUSH
24521: LD_INT 34
24523: PUSH
24524: LD_INT 12
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 34
24533: PUSH
24534: LD_INT 51
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 34
24543: PUSH
24544: LD_INT 32
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: LIST
24561: PPUSH
24562: CALL_OW 69
24566: ST_TO_ADDR
// if not tmp then
24567: LD_VAR 0 2
24571: NOT
24572: IFFALSE 24576
// exit ;
24574: GO 24626
// for i in tmp do
24576: LD_ADDR_VAR 0 1
24580: PUSH
24581: LD_VAR 0 2
24585: PUSH
24586: FOR_IN
24587: IFFALSE 24624
// if GetCargo ( i , mat_artifact ) = 0 then
24589: LD_VAR 0 1
24593: PPUSH
24594: LD_INT 4
24596: PPUSH
24597: CALL_OW 289
24601: PUSH
24602: LD_INT 0
24604: EQUAL
24605: IFFALSE 24622
// SetCargo ( i , mat_siberit , 100 ) ;
24607: LD_VAR 0 1
24611: PPUSH
24612: LD_INT 3
24614: PPUSH
24615: LD_INT 100
24617: PPUSH
24618: CALL_OW 290
24622: GO 24586
24624: POP
24625: POP
// end ;
24626: PPOPN 2
24628: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24629: LD_EXP 38
24633: PUSH
24634: LD_EXP 83
24638: AND
24639: IFFALSE 24822
24641: GO 24643
24643: DISABLE
24644: LD_INT 0
24646: PPUSH
24647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_INT 22
24655: PUSH
24656: LD_OWVAR 2
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PPUSH
24665: CALL_OW 69
24669: ST_TO_ADDR
// if not tmp then
24670: LD_VAR 0 2
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24822
// for i := 1 to 2 do
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: DOUBLE
24685: LD_INT 1
24687: DEC
24688: ST_TO_ADDR
24689: LD_INT 2
24691: PUSH
24692: FOR_TO
24693: IFFALSE 24820
// begin uc_side := your_side ;
24695: LD_ADDR_OWVAR 20
24699: PUSH
24700: LD_OWVAR 2
24704: ST_TO_ADDR
// uc_nation := nation_american ;
24705: LD_ADDR_OWVAR 21
24709: PUSH
24710: LD_INT 1
24712: ST_TO_ADDR
// vc_chassis := us_morphling ;
24713: LD_ADDR_OWVAR 37
24717: PUSH
24718: LD_INT 5
24720: ST_TO_ADDR
// vc_engine := engine_siberite ;
24721: LD_ADDR_OWVAR 39
24725: PUSH
24726: LD_INT 3
24728: ST_TO_ADDR
// vc_control := control_computer ;
24729: LD_ADDR_OWVAR 38
24733: PUSH
24734: LD_INT 3
24736: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24737: LD_ADDR_OWVAR 40
24741: PUSH
24742: LD_INT 10
24744: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24745: LD_VAR 0 2
24749: PUSH
24750: LD_INT 1
24752: ARRAY
24753: PPUSH
24754: CALL_OW 310
24758: NOT
24759: IFFALSE 24806
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24761: CALL_OW 45
24765: PPUSH
24766: LD_VAR 0 2
24770: PUSH
24771: LD_INT 1
24773: ARRAY
24774: PPUSH
24775: CALL_OW 250
24779: PPUSH
24780: LD_VAR 0 2
24784: PUSH
24785: LD_INT 1
24787: ARRAY
24788: PPUSH
24789: CALL_OW 251
24793: PPUSH
24794: LD_INT 12
24796: PPUSH
24797: LD_INT 1
24799: PPUSH
24800: CALL_OW 50
24804: GO 24818
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24806: CALL_OW 45
24810: PPUSH
24811: LD_INT 1
24813: PPUSH
24814: CALL_OW 51
// end ;
24818: GO 24692
24820: POP
24821: POP
// end ;
24822: PPOPN 2
24824: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24825: LD_EXP 38
24829: PUSH
24830: LD_EXP 84
24834: AND
24835: IFFALSE 25057
24837: GO 24839
24839: DISABLE
24840: LD_INT 0
24842: PPUSH
24843: PPUSH
24844: PPUSH
24845: PPUSH
24846: PPUSH
24847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24848: LD_ADDR_VAR 0 6
24852: PUSH
24853: LD_INT 22
24855: PUSH
24856: LD_OWVAR 2
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 21
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 3
24877: PUSH
24878: LD_INT 23
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: PPUSH
24897: CALL_OW 69
24901: ST_TO_ADDR
// if not tmp then
24902: LD_VAR 0 6
24906: NOT
24907: IFFALSE 24911
// exit ;
24909: GO 25057
// s1 := rand ( 1 , 4 ) ;
24911: LD_ADDR_VAR 0 2
24915: PUSH
24916: LD_INT 1
24918: PPUSH
24919: LD_INT 4
24921: PPUSH
24922: CALL_OW 12
24926: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24927: LD_ADDR_VAR 0 4
24931: PUSH
24932: LD_VAR 0 6
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: PPUSH
24941: LD_VAR 0 2
24945: PPUSH
24946: CALL_OW 259
24950: ST_TO_ADDR
// if s1 = 1 then
24951: LD_VAR 0 2
24955: PUSH
24956: LD_INT 1
24958: EQUAL
24959: IFFALSE 24979
// s2 := rand ( 2 , 4 ) else
24961: LD_ADDR_VAR 0 3
24965: PUSH
24966: LD_INT 2
24968: PPUSH
24969: LD_INT 4
24971: PPUSH
24972: CALL_OW 12
24976: ST_TO_ADDR
24977: GO 24987
// s2 := 1 ;
24979: LD_ADDR_VAR 0 3
24983: PUSH
24984: LD_INT 1
24986: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24987: LD_ADDR_VAR 0 5
24991: PUSH
24992: LD_VAR 0 6
24996: PUSH
24997: LD_INT 1
24999: ARRAY
25000: PPUSH
25001: LD_VAR 0 3
25005: PPUSH
25006: CALL_OW 259
25010: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25011: LD_VAR 0 6
25015: PUSH
25016: LD_INT 1
25018: ARRAY
25019: PPUSH
25020: LD_VAR 0 2
25024: PPUSH
25025: LD_VAR 0 5
25029: PPUSH
25030: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25034: LD_VAR 0 6
25038: PUSH
25039: LD_INT 1
25041: ARRAY
25042: PPUSH
25043: LD_VAR 0 3
25047: PPUSH
25048: LD_VAR 0 4
25052: PPUSH
25053: CALL_OW 237
// end ;
25057: PPOPN 6
25059: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25060: LD_EXP 38
25064: PUSH
25065: LD_EXP 85
25069: AND
25070: IFFALSE 25149
25072: GO 25074
25074: DISABLE
25075: LD_INT 0
25077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25078: LD_ADDR_VAR 0 1
25082: PUSH
25083: LD_INT 22
25085: PUSH
25086: LD_OWVAR 2
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 30
25097: PUSH
25098: LD_INT 3
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PPUSH
25109: CALL_OW 69
25113: ST_TO_ADDR
// if not tmp then
25114: LD_VAR 0 1
25118: NOT
25119: IFFALSE 25123
// exit ;
25121: GO 25149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25123: LD_VAR 0 1
25127: PUSH
25128: LD_INT 1
25130: PPUSH
25131: LD_VAR 0 1
25135: PPUSH
25136: CALL_OW 12
25140: ARRAY
25141: PPUSH
25142: LD_INT 1
25144: PPUSH
25145: CALL_OW 234
// end ;
25149: PPOPN 1
25151: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25152: LD_EXP 38
25156: PUSH
25157: LD_EXP 86
25161: AND
25162: IFFALSE 25274
25164: GO 25166
25166: DISABLE
25167: LD_INT 0
25169: PPUSH
25170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25171: LD_ADDR_VAR 0 2
25175: PUSH
25176: LD_INT 22
25178: PUSH
25179: LD_OWVAR 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 2
25190: PUSH
25191: LD_INT 30
25193: PUSH
25194: LD_INT 27
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 30
25203: PUSH
25204: LD_INT 26
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 30
25213: PUSH
25214: LD_INT 28
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: ST_TO_ADDR
// if not tmp then
25236: LD_VAR 0 2
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 25274
// for i in tmp do
25245: LD_ADDR_VAR 0 1
25249: PUSH
25250: LD_VAR 0 2
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25272
// SetLives ( i , 1 ) ;
25258: LD_VAR 0 1
25262: PPUSH
25263: LD_INT 1
25265: PPUSH
25266: CALL_OW 234
25270: GO 25255
25272: POP
25273: POP
// end ;
25274: PPOPN 2
25276: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25277: LD_EXP 38
25281: PUSH
25282: LD_EXP 87
25286: AND
25287: IFFALSE 25574
25289: GO 25291
25291: DISABLE
25292: LD_INT 0
25294: PPUSH
25295: PPUSH
25296: PPUSH
// begin i := rand ( 1 , 7 ) ;
25297: LD_ADDR_VAR 0 1
25301: PUSH
25302: LD_INT 1
25304: PPUSH
25305: LD_INT 7
25307: PPUSH
25308: CALL_OW 12
25312: ST_TO_ADDR
// case i of 1 :
25313: LD_VAR 0 1
25317: PUSH
25318: LD_INT 1
25320: DOUBLE
25321: EQUAL
25322: IFTRUE 25326
25324: GO 25336
25326: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25327: LD_STRING earthquake(getX(game), 0, 32)
25329: PPUSH
25330: CALL_OW 559
25334: GO 25574
25336: LD_INT 2
25338: DOUBLE
25339: EQUAL
25340: IFTRUE 25344
25342: GO 25358
25344: POP
// begin ToLua ( displayStucuk(); ) ;
25345: LD_STRING displayStucuk();
25347: PPUSH
25348: CALL_OW 559
// ResetFog ;
25352: CALL_OW 335
// end ; 3 :
25356: GO 25574
25358: LD_INT 3
25360: DOUBLE
25361: EQUAL
25362: IFTRUE 25366
25364: GO 25470
25366: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25367: LD_ADDR_VAR 0 2
25371: PUSH
25372: LD_INT 22
25374: PUSH
25375: LD_OWVAR 2
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 25
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PPUSH
25398: CALL_OW 69
25402: ST_TO_ADDR
// if not tmp then
25403: LD_VAR 0 2
25407: NOT
25408: IFFALSE 25412
// exit ;
25410: GO 25574
// un := tmp [ rand ( 1 , tmp ) ] ;
25412: LD_ADDR_VAR 0 3
25416: PUSH
25417: LD_VAR 0 2
25421: PUSH
25422: LD_INT 1
25424: PPUSH
25425: LD_VAR 0 2
25429: PPUSH
25430: CALL_OW 12
25434: ARRAY
25435: ST_TO_ADDR
// if Crawls ( un ) then
25436: LD_VAR 0 3
25440: PPUSH
25441: CALL_OW 318
25445: IFFALSE 25456
// ComWalk ( un ) ;
25447: LD_VAR 0 3
25451: PPUSH
25452: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25456: LD_VAR 0 3
25460: PPUSH
25461: LD_INT 8
25463: PPUSH
25464: CALL_OW 336
// end ; 4 :
25468: GO 25574
25470: LD_INT 4
25472: DOUBLE
25473: EQUAL
25474: IFTRUE 25478
25476: GO 25552
25478: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25479: LD_ADDR_VAR 0 2
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_OWVAR 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 30
25498: PUSH
25499: LD_INT 29
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: ST_TO_ADDR
// if not tmp then
25515: LD_VAR 0 2
25519: NOT
25520: IFFALSE 25524
// exit ;
25522: GO 25574
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25524: LD_VAR 0 2
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PPUSH
25533: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25537: LD_VAR 0 2
25541: PUSH
25542: LD_INT 1
25544: ARRAY
25545: PPUSH
25546: CALL_OW 65
// end ; 5 .. 7 :
25550: GO 25574
25552: LD_INT 5
25554: DOUBLE
25555: GREATEREQUAL
25556: IFFALSE 25564
25558: LD_INT 7
25560: DOUBLE
25561: LESSEQUAL
25562: IFTRUE 25566
25564: GO 25573
25566: POP
// StreamSibBomb ; end ;
25567: CALL 21811 0 0
25571: GO 25574
25573: POP
// end ;
25574: PPOPN 3
25576: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25577: LD_EXP 38
25581: PUSH
25582: LD_EXP 88
25586: AND
25587: IFFALSE 25743
25589: GO 25591
25591: DISABLE
25592: LD_INT 0
25594: PPUSH
25595: PPUSH
25596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25597: LD_ADDR_VAR 0 2
25601: PUSH
25602: LD_INT 81
25604: PUSH
25605: LD_OWVAR 2
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: LD_INT 21
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 21
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PPUSH
25646: CALL_OW 69
25650: ST_TO_ADDR
// if not tmp then
25651: LD_VAR 0 2
25655: NOT
25656: IFFALSE 25660
// exit ;
25658: GO 25743
// p := 0 ;
25660: LD_ADDR_VAR 0 3
25664: PUSH
25665: LD_INT 0
25667: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25668: LD_INT 35
25670: PPUSH
25671: CALL_OW 67
// p := p + 1 ;
25675: LD_ADDR_VAR 0 3
25679: PUSH
25680: LD_VAR 0 3
25684: PUSH
25685: LD_INT 1
25687: PLUS
25688: ST_TO_ADDR
// for i in tmp do
25689: LD_ADDR_VAR 0 1
25693: PUSH
25694: LD_VAR 0 2
25698: PUSH
25699: FOR_IN
25700: IFFALSE 25731
// if GetLives ( i ) < 1000 then
25702: LD_VAR 0 1
25706: PPUSH
25707: CALL_OW 256
25711: PUSH
25712: LD_INT 1000
25714: LESS
25715: IFFALSE 25729
// SetLives ( i , 1000 ) ;
25717: LD_VAR 0 1
25721: PPUSH
25722: LD_INT 1000
25724: PPUSH
25725: CALL_OW 234
25729: GO 25699
25731: POP
25732: POP
// until p > 20 ;
25733: LD_VAR 0 3
25737: PUSH
25738: LD_INT 20
25740: GREATER
25741: IFFALSE 25668
// end ;
25743: PPOPN 3
25745: END
// every 0 0$1 trigger StreamModeActive and sTime do
25746: LD_EXP 38
25750: PUSH
25751: LD_EXP 89
25755: AND
25756: IFFALSE 25791
25758: GO 25760
25760: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25761: LD_INT 28
25763: PPUSH
25764: LD_OWVAR 2
25768: PPUSH
25769: LD_INT 2
25771: PPUSH
25772: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25776: LD_INT 30
25778: PPUSH
25779: LD_OWVAR 2
25783: PPUSH
25784: LD_INT 2
25786: PPUSH
25787: CALL_OW 322
// end ;
25791: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25792: LD_EXP 38
25796: PUSH
25797: LD_EXP 90
25801: AND
25802: IFFALSE 25923
25804: GO 25806
25806: DISABLE
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25811: LD_ADDR_VAR 0 2
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_OWVAR 2
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 21
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: LD_INT 23
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: LIST
25859: PPUSH
25860: CALL_OW 69
25864: ST_TO_ADDR
// if not tmp then
25865: LD_VAR 0 2
25869: NOT
25870: IFFALSE 25874
// exit ;
25872: GO 25923
// for i in tmp do
25874: LD_ADDR_VAR 0 1
25878: PUSH
25879: LD_VAR 0 2
25883: PUSH
25884: FOR_IN
25885: IFFALSE 25921
// begin if Crawls ( i ) then
25887: LD_VAR 0 1
25891: PPUSH
25892: CALL_OW 318
25896: IFFALSE 25907
// ComWalk ( i ) ;
25898: LD_VAR 0 1
25902: PPUSH
25903: CALL_OW 138
// SetClass ( i , 2 ) ;
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_INT 2
25914: PPUSH
25915: CALL_OW 336
// end ;
25919: GO 25884
25921: POP
25922: POP
// end ;
25923: PPOPN 2
25925: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25926: LD_EXP 38
25930: PUSH
25931: LD_EXP 91
25935: AND
25936: IFFALSE 26224
25938: GO 25940
25940: DISABLE
25941: LD_INT 0
25943: PPUSH
25944: PPUSH
25945: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25946: LD_OWVAR 2
25950: PPUSH
25951: LD_INT 9
25953: PPUSH
25954: LD_INT 1
25956: PPUSH
25957: LD_INT 1
25959: PPUSH
25960: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25964: LD_INT 9
25966: PPUSH
25967: LD_OWVAR 2
25971: PPUSH
25972: CALL_OW 343
// uc_side := 9 ;
25976: LD_ADDR_OWVAR 20
25980: PUSH
25981: LD_INT 9
25983: ST_TO_ADDR
// uc_nation := 2 ;
25984: LD_ADDR_OWVAR 21
25988: PUSH
25989: LD_INT 2
25991: ST_TO_ADDR
// hc_name := Dark Warrior ;
25992: LD_ADDR_OWVAR 26
25996: PUSH
25997: LD_STRING Dark Warrior
25999: ST_TO_ADDR
// hc_gallery :=  ;
26000: LD_ADDR_OWVAR 33
26004: PUSH
26005: LD_STRING 
26007: ST_TO_ADDR
// hc_noskilllimit := true ;
26008: LD_ADDR_OWVAR 76
26012: PUSH
26013: LD_INT 1
26015: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26016: LD_ADDR_OWVAR 31
26020: PUSH
26021: LD_INT 30
26023: PUSH
26024: LD_INT 30
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: LD_INT 30
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: ST_TO_ADDR
// un := CreateHuman ;
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: CALL_OW 44
26048: ST_TO_ADDR
// hc_noskilllimit := false ;
26049: LD_ADDR_OWVAR 76
26053: PUSH
26054: LD_INT 0
26056: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26057: LD_VAR 0 3
26061: PPUSH
26062: LD_INT 1
26064: PPUSH
26065: CALL_OW 51
// ToLua ( playRanger() ) ;
26069: LD_STRING playRanger()
26071: PPUSH
26072: CALL_OW 559
// p := 0 ;
26076: LD_ADDR_VAR 0 2
26080: PUSH
26081: LD_INT 0
26083: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26084: LD_INT 35
26086: PPUSH
26087: CALL_OW 67
// p := p + 1 ;
26091: LD_ADDR_VAR 0 2
26095: PUSH
26096: LD_VAR 0 2
26100: PUSH
26101: LD_INT 1
26103: PLUS
26104: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26105: LD_VAR 0 3
26109: PPUSH
26110: CALL_OW 256
26114: PUSH
26115: LD_INT 1000
26117: LESS
26118: IFFALSE 26132
// SetLives ( un , 1000 ) ;
26120: LD_VAR 0 3
26124: PPUSH
26125: LD_INT 1000
26127: PPUSH
26128: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26132: LD_VAR 0 3
26136: PPUSH
26137: LD_INT 81
26139: PUSH
26140: LD_OWVAR 2
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 91
26151: PUSH
26152: LD_VAR 0 3
26156: PUSH
26157: LD_INT 30
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: PPUSH
26174: LD_VAR 0 3
26178: PPUSH
26179: CALL_OW 74
26183: PPUSH
26184: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26188: LD_VAR 0 2
26192: PUSH
26193: LD_INT 80
26195: GREATER
26196: PUSH
26197: LD_VAR 0 3
26201: PPUSH
26202: CALL_OW 301
26206: OR
26207: IFFALSE 26084
// if un then
26209: LD_VAR 0 3
26213: IFFALSE 26224
// RemoveUnit ( un ) ;
26215: LD_VAR 0 3
26219: PPUSH
26220: CALL_OW 64
// end ;
26224: PPOPN 3
26226: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26227: LD_EXP 92
26231: IFFALSE 26347
26233: GO 26235
26235: DISABLE
26236: LD_INT 0
26238: PPUSH
26239: PPUSH
26240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26241: LD_ADDR_VAR 0 2
26245: PUSH
26246: LD_INT 81
26248: PUSH
26249: LD_OWVAR 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 21
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PPUSH
26272: CALL_OW 69
26276: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26277: LD_STRING playComputer()
26279: PPUSH
26280: CALL_OW 559
// if not tmp then
26284: LD_VAR 0 2
26288: NOT
26289: IFFALSE 26293
// exit ;
26291: GO 26347
// for i in tmp do
26293: LD_ADDR_VAR 0 1
26297: PUSH
26298: LD_VAR 0 2
26302: PUSH
26303: FOR_IN
26304: IFFALSE 26345
// for j := 1 to 4 do
26306: LD_ADDR_VAR 0 3
26310: PUSH
26311: DOUBLE
26312: LD_INT 1
26314: DEC
26315: ST_TO_ADDR
26316: LD_INT 4
26318: PUSH
26319: FOR_TO
26320: IFFALSE 26341
// SetSkill ( i , j , 10 ) ;
26322: LD_VAR 0 1
26326: PPUSH
26327: LD_VAR 0 3
26331: PPUSH
26332: LD_INT 10
26334: PPUSH
26335: CALL_OW 237
26339: GO 26319
26341: POP
26342: POP
26343: GO 26303
26345: POP
26346: POP
// end ;
26347: PPOPN 3
26349: END
// every 0 0$1 trigger s30 do var i , tmp ;
26350: LD_EXP 93
26354: IFFALSE 26423
26356: GO 26358
26358: DISABLE
26359: LD_INT 0
26361: PPUSH
26362: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26363: LD_ADDR_VAR 0 2
26367: PUSH
26368: LD_INT 22
26370: PUSH
26371: LD_OWVAR 2
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: ST_TO_ADDR
// if not tmp then
26385: LD_VAR 0 2
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26423
// for i in tmp do
26394: LD_ADDR_VAR 0 1
26398: PUSH
26399: LD_VAR 0 2
26403: PUSH
26404: FOR_IN
26405: IFFALSE 26421
// SetLives ( i , 300 ) ;
26407: LD_VAR 0 1
26411: PPUSH
26412: LD_INT 300
26414: PPUSH
26415: CALL_OW 234
26419: GO 26404
26421: POP
26422: POP
// end ;
26423: PPOPN 2
26425: END
// every 0 0$1 trigger s60 do var i , tmp ;
26426: LD_EXP 94
26430: IFFALSE 26499
26432: GO 26434
26434: DISABLE
26435: LD_INT 0
26437: PPUSH
26438: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26439: LD_ADDR_VAR 0 2
26443: PUSH
26444: LD_INT 22
26446: PUSH
26447: LD_OWVAR 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PPUSH
26456: CALL_OW 69
26460: ST_TO_ADDR
// if not tmp then
26461: LD_VAR 0 2
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 26499
// for i in tmp do
26470: LD_ADDR_VAR 0 1
26474: PUSH
26475: LD_VAR 0 2
26479: PUSH
26480: FOR_IN
26481: IFFALSE 26497
// SetLives ( i , 600 ) ;
26483: LD_VAR 0 1
26487: PPUSH
26488: LD_INT 600
26490: PPUSH
26491: CALL_OW 234
26495: GO 26480
26497: POP
26498: POP
// end ;
26499: PPOPN 2
26501: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26502: LD_INT 0
26504: PPUSH
// case cmd of 301 :
26505: LD_VAR 0 1
26509: PUSH
26510: LD_INT 301
26512: DOUBLE
26513: EQUAL
26514: IFTRUE 26518
26516: GO 26550
26518: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26519: LD_VAR 0 6
26523: PPUSH
26524: LD_VAR 0 7
26528: PPUSH
26529: LD_VAR 0 8
26533: PPUSH
26534: LD_VAR 0 4
26538: PPUSH
26539: LD_VAR 0 5
26543: PPUSH
26544: CALL 27751 0 5
26548: GO 26671
26550: LD_INT 302
26552: DOUBLE
26553: EQUAL
26554: IFTRUE 26558
26556: GO 26595
26558: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26559: LD_VAR 0 6
26563: PPUSH
26564: LD_VAR 0 7
26568: PPUSH
26569: LD_VAR 0 8
26573: PPUSH
26574: LD_VAR 0 9
26578: PPUSH
26579: LD_VAR 0 4
26583: PPUSH
26584: LD_VAR 0 5
26588: PPUSH
26589: CALL 27842 0 6
26593: GO 26671
26595: LD_INT 303
26597: DOUBLE
26598: EQUAL
26599: IFTRUE 26603
26601: GO 26640
26603: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26604: LD_VAR 0 6
26608: PPUSH
26609: LD_VAR 0 7
26613: PPUSH
26614: LD_VAR 0 8
26618: PPUSH
26619: LD_VAR 0 9
26623: PPUSH
26624: LD_VAR 0 4
26628: PPUSH
26629: LD_VAR 0 5
26633: PPUSH
26634: CALL 26676 0 6
26638: GO 26671
26640: LD_INT 304
26642: DOUBLE
26643: EQUAL
26644: IFTRUE 26648
26646: GO 26670
26648: POP
// hHackTeleport ( unit , x , y ) ; end ;
26649: LD_VAR 0 2
26653: PPUSH
26654: LD_VAR 0 4
26658: PPUSH
26659: LD_VAR 0 5
26663: PPUSH
26664: CALL 28435 0 3
26668: GO 26671
26670: POP
// end ;
26671: LD_VAR 0 12
26675: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26676: LD_INT 0
26678: PPUSH
26679: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26680: LD_VAR 0 1
26684: PUSH
26685: LD_INT 1
26687: LESS
26688: PUSH
26689: LD_VAR 0 1
26693: PUSH
26694: LD_INT 3
26696: GREATER
26697: OR
26698: PUSH
26699: LD_VAR 0 5
26703: PPUSH
26704: LD_VAR 0 6
26708: PPUSH
26709: CALL_OW 428
26713: OR
26714: IFFALSE 26718
// exit ;
26716: GO 27438
// uc_side := your_side ;
26718: LD_ADDR_OWVAR 20
26722: PUSH
26723: LD_OWVAR 2
26727: ST_TO_ADDR
// uc_nation := nation ;
26728: LD_ADDR_OWVAR 21
26732: PUSH
26733: LD_VAR 0 1
26737: ST_TO_ADDR
// bc_level = 1 ;
26738: LD_ADDR_OWVAR 43
26742: PUSH
26743: LD_INT 1
26745: ST_TO_ADDR
// case btype of 1 :
26746: LD_VAR 0 2
26750: PUSH
26751: LD_INT 1
26753: DOUBLE
26754: EQUAL
26755: IFTRUE 26759
26757: GO 26770
26759: POP
// bc_type := b_depot ; 2 :
26760: LD_ADDR_OWVAR 42
26764: PUSH
26765: LD_INT 0
26767: ST_TO_ADDR
26768: GO 27382
26770: LD_INT 2
26772: DOUBLE
26773: EQUAL
26774: IFTRUE 26778
26776: GO 26789
26778: POP
// bc_type := b_warehouse ; 3 :
26779: LD_ADDR_OWVAR 42
26783: PUSH
26784: LD_INT 1
26786: ST_TO_ADDR
26787: GO 27382
26789: LD_INT 3
26791: DOUBLE
26792: EQUAL
26793: IFTRUE 26797
26795: GO 26808
26797: POP
// bc_type := b_lab ; 4 .. 9 :
26798: LD_ADDR_OWVAR 42
26802: PUSH
26803: LD_INT 6
26805: ST_TO_ADDR
26806: GO 27382
26808: LD_INT 4
26810: DOUBLE
26811: GREATEREQUAL
26812: IFFALSE 26820
26814: LD_INT 9
26816: DOUBLE
26817: LESSEQUAL
26818: IFTRUE 26822
26820: GO 26874
26822: POP
// begin bc_type := b_lab_half ;
26823: LD_ADDR_OWVAR 42
26827: PUSH
26828: LD_INT 7
26830: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26831: LD_ADDR_OWVAR 44
26835: PUSH
26836: LD_INT 10
26838: PUSH
26839: LD_INT 11
26841: PUSH
26842: LD_INT 12
26844: PUSH
26845: LD_INT 15
26847: PUSH
26848: LD_INT 14
26850: PUSH
26851: LD_INT 13
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: PUSH
26862: LD_VAR 0 2
26866: PUSH
26867: LD_INT 3
26869: MINUS
26870: ARRAY
26871: ST_TO_ADDR
// end ; 10 .. 13 :
26872: GO 27382
26874: LD_INT 10
26876: DOUBLE
26877: GREATEREQUAL
26878: IFFALSE 26886
26880: LD_INT 13
26882: DOUBLE
26883: LESSEQUAL
26884: IFTRUE 26888
26886: GO 26965
26888: POP
// begin bc_type := b_lab_full ;
26889: LD_ADDR_OWVAR 42
26893: PUSH
26894: LD_INT 8
26896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26897: LD_ADDR_OWVAR 44
26901: PUSH
26902: LD_INT 10
26904: PUSH
26905: LD_INT 12
26907: PUSH
26908: LD_INT 14
26910: PUSH
26911: LD_INT 13
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: PUSH
26920: LD_VAR 0 2
26924: PUSH
26925: LD_INT 9
26927: MINUS
26928: ARRAY
26929: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26930: LD_ADDR_OWVAR 45
26934: PUSH
26935: LD_INT 11
26937: PUSH
26938: LD_INT 15
26940: PUSH
26941: LD_INT 12
26943: PUSH
26944: LD_INT 15
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: PUSH
26953: LD_VAR 0 2
26957: PUSH
26958: LD_INT 9
26960: MINUS
26961: ARRAY
26962: ST_TO_ADDR
// end ; 14 :
26963: GO 27382
26965: LD_INT 14
26967: DOUBLE
26968: EQUAL
26969: IFTRUE 26973
26971: GO 26984
26973: POP
// bc_type := b_workshop ; 15 :
26974: LD_ADDR_OWVAR 42
26978: PUSH
26979: LD_INT 2
26981: ST_TO_ADDR
26982: GO 27382
26984: LD_INT 15
26986: DOUBLE
26987: EQUAL
26988: IFTRUE 26992
26990: GO 27003
26992: POP
// bc_type := b_factory ; 16 :
26993: LD_ADDR_OWVAR 42
26997: PUSH
26998: LD_INT 3
27000: ST_TO_ADDR
27001: GO 27382
27003: LD_INT 16
27005: DOUBLE
27006: EQUAL
27007: IFTRUE 27011
27009: GO 27022
27011: POP
// bc_type := b_ext_gun ; 17 :
27012: LD_ADDR_OWVAR 42
27016: PUSH
27017: LD_INT 17
27019: ST_TO_ADDR
27020: GO 27382
27022: LD_INT 17
27024: DOUBLE
27025: EQUAL
27026: IFTRUE 27030
27028: GO 27058
27030: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27031: LD_ADDR_OWVAR 42
27035: PUSH
27036: LD_INT 19
27038: PUSH
27039: LD_INT 23
27041: PUSH
27042: LD_INT 19
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: PUSH
27050: LD_VAR 0 1
27054: ARRAY
27055: ST_TO_ADDR
27056: GO 27382
27058: LD_INT 18
27060: DOUBLE
27061: EQUAL
27062: IFTRUE 27066
27064: GO 27077
27066: POP
// bc_type := b_ext_radar ; 19 :
27067: LD_ADDR_OWVAR 42
27071: PUSH
27072: LD_INT 20
27074: ST_TO_ADDR
27075: GO 27382
27077: LD_INT 19
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27096
27085: POP
// bc_type := b_ext_radio ; 20 :
27086: LD_ADDR_OWVAR 42
27090: PUSH
27091: LD_INT 22
27093: ST_TO_ADDR
27094: GO 27382
27096: LD_INT 20
27098: DOUBLE
27099: EQUAL
27100: IFTRUE 27104
27102: GO 27115
27104: POP
// bc_type := b_ext_siberium ; 21 :
27105: LD_ADDR_OWVAR 42
27109: PUSH
27110: LD_INT 21
27112: ST_TO_ADDR
27113: GO 27382
27115: LD_INT 21
27117: DOUBLE
27118: EQUAL
27119: IFTRUE 27123
27121: GO 27134
27123: POP
// bc_type := b_ext_computer ; 22 :
27124: LD_ADDR_OWVAR 42
27128: PUSH
27129: LD_INT 24
27131: ST_TO_ADDR
27132: GO 27382
27134: LD_INT 22
27136: DOUBLE
27137: EQUAL
27138: IFTRUE 27142
27140: GO 27153
27142: POP
// bc_type := b_ext_track ; 23 :
27143: LD_ADDR_OWVAR 42
27147: PUSH
27148: LD_INT 16
27150: ST_TO_ADDR
27151: GO 27382
27153: LD_INT 23
27155: DOUBLE
27156: EQUAL
27157: IFTRUE 27161
27159: GO 27172
27161: POP
// bc_type := b_ext_laser ; 24 :
27162: LD_ADDR_OWVAR 42
27166: PUSH
27167: LD_INT 25
27169: ST_TO_ADDR
27170: GO 27382
27172: LD_INT 24
27174: DOUBLE
27175: EQUAL
27176: IFTRUE 27180
27178: GO 27191
27180: POP
// bc_type := b_control_tower ; 25 :
27181: LD_ADDR_OWVAR 42
27185: PUSH
27186: LD_INT 36
27188: ST_TO_ADDR
27189: GO 27382
27191: LD_INT 25
27193: DOUBLE
27194: EQUAL
27195: IFTRUE 27199
27197: GO 27210
27199: POP
// bc_type := b_breastwork ; 26 :
27200: LD_ADDR_OWVAR 42
27204: PUSH
27205: LD_INT 31
27207: ST_TO_ADDR
27208: GO 27382
27210: LD_INT 26
27212: DOUBLE
27213: EQUAL
27214: IFTRUE 27218
27216: GO 27229
27218: POP
// bc_type := b_bunker ; 27 :
27219: LD_ADDR_OWVAR 42
27223: PUSH
27224: LD_INT 32
27226: ST_TO_ADDR
27227: GO 27382
27229: LD_INT 27
27231: DOUBLE
27232: EQUAL
27233: IFTRUE 27237
27235: GO 27248
27237: POP
// bc_type := b_turret ; 28 :
27238: LD_ADDR_OWVAR 42
27242: PUSH
27243: LD_INT 33
27245: ST_TO_ADDR
27246: GO 27382
27248: LD_INT 28
27250: DOUBLE
27251: EQUAL
27252: IFTRUE 27256
27254: GO 27267
27256: POP
// bc_type := b_armoury ; 29 :
27257: LD_ADDR_OWVAR 42
27261: PUSH
27262: LD_INT 4
27264: ST_TO_ADDR
27265: GO 27382
27267: LD_INT 29
27269: DOUBLE
27270: EQUAL
27271: IFTRUE 27275
27273: GO 27286
27275: POP
// bc_type := b_barracks ; 30 :
27276: LD_ADDR_OWVAR 42
27280: PUSH
27281: LD_INT 5
27283: ST_TO_ADDR
27284: GO 27382
27286: LD_INT 30
27288: DOUBLE
27289: EQUAL
27290: IFTRUE 27294
27292: GO 27305
27294: POP
// bc_type := b_solar_power ; 31 :
27295: LD_ADDR_OWVAR 42
27299: PUSH
27300: LD_INT 27
27302: ST_TO_ADDR
27303: GO 27382
27305: LD_INT 31
27307: DOUBLE
27308: EQUAL
27309: IFTRUE 27313
27311: GO 27324
27313: POP
// bc_type := b_oil_power ; 32 :
27314: LD_ADDR_OWVAR 42
27318: PUSH
27319: LD_INT 26
27321: ST_TO_ADDR
27322: GO 27382
27324: LD_INT 32
27326: DOUBLE
27327: EQUAL
27328: IFTRUE 27332
27330: GO 27343
27332: POP
// bc_type := b_siberite_power ; 33 :
27333: LD_ADDR_OWVAR 42
27337: PUSH
27338: LD_INT 28
27340: ST_TO_ADDR
27341: GO 27382
27343: LD_INT 33
27345: DOUBLE
27346: EQUAL
27347: IFTRUE 27351
27349: GO 27362
27351: POP
// bc_type := b_oil_mine ; 34 :
27352: LD_ADDR_OWVAR 42
27356: PUSH
27357: LD_INT 29
27359: ST_TO_ADDR
27360: GO 27382
27362: LD_INT 34
27364: DOUBLE
27365: EQUAL
27366: IFTRUE 27370
27368: GO 27381
27370: POP
// bc_type := b_siberite_mine ; end ;
27371: LD_ADDR_OWVAR 42
27375: PUSH
27376: LD_INT 30
27378: ST_TO_ADDR
27379: GO 27382
27381: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27382: LD_ADDR_VAR 0 8
27386: PUSH
27387: LD_VAR 0 5
27391: PPUSH
27392: LD_VAR 0 6
27396: PPUSH
27397: LD_VAR 0 3
27401: PPUSH
27402: CALL_OW 47
27406: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27407: LD_OWVAR 42
27411: PUSH
27412: LD_INT 32
27414: PUSH
27415: LD_INT 33
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: IN
27422: IFFALSE 27438
// PlaceWeaponTurret ( b , weapon ) ;
27424: LD_VAR 0 8
27428: PPUSH
27429: LD_VAR 0 4
27433: PPUSH
27434: CALL_OW 431
// end ;
27438: LD_VAR 0 7
27442: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27443: LD_INT 0
27445: PPUSH
27446: PPUSH
27447: PPUSH
27448: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27449: LD_ADDR_VAR 0 4
27453: PUSH
27454: LD_INT 22
27456: PUSH
27457: LD_OWVAR 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 2
27468: PUSH
27469: LD_INT 30
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 30
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PPUSH
27498: CALL_OW 69
27502: ST_TO_ADDR
// if not tmp then
27503: LD_VAR 0 4
27507: NOT
27508: IFFALSE 27512
// exit ;
27510: GO 27571
// for i in tmp do
27512: LD_ADDR_VAR 0 2
27516: PUSH
27517: LD_VAR 0 4
27521: PUSH
27522: FOR_IN
27523: IFFALSE 27569
// for j = 1 to 3 do
27525: LD_ADDR_VAR 0 3
27529: PUSH
27530: DOUBLE
27531: LD_INT 1
27533: DEC
27534: ST_TO_ADDR
27535: LD_INT 3
27537: PUSH
27538: FOR_TO
27539: IFFALSE 27565
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27541: LD_VAR 0 2
27545: PPUSH
27546: CALL_OW 274
27550: PPUSH
27551: LD_VAR 0 3
27555: PPUSH
27556: LD_INT 99999
27558: PPUSH
27559: CALL_OW 277
27563: GO 27538
27565: POP
27566: POP
27567: GO 27522
27569: POP
27570: POP
// end ;
27571: LD_VAR 0 1
27575: RET
// export function hHackSetLevel10 ; var i , j ; begin
27576: LD_INT 0
27578: PPUSH
27579: PPUSH
27580: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27581: LD_ADDR_VAR 0 2
27585: PUSH
27586: LD_INT 21
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PPUSH
27596: CALL_OW 69
27600: PUSH
27601: FOR_IN
27602: IFFALSE 27654
// if IsSelected ( i ) then
27604: LD_VAR 0 2
27608: PPUSH
27609: CALL_OW 306
27613: IFFALSE 27652
// begin for j := 1 to 4 do
27615: LD_ADDR_VAR 0 3
27619: PUSH
27620: DOUBLE
27621: LD_INT 1
27623: DEC
27624: ST_TO_ADDR
27625: LD_INT 4
27627: PUSH
27628: FOR_TO
27629: IFFALSE 27650
// SetSkill ( i , j , 10 ) ;
27631: LD_VAR 0 2
27635: PPUSH
27636: LD_VAR 0 3
27640: PPUSH
27641: LD_INT 10
27643: PPUSH
27644: CALL_OW 237
27648: GO 27628
27650: POP
27651: POP
// end ;
27652: GO 27601
27654: POP
27655: POP
// end ;
27656: LD_VAR 0 1
27660: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27661: LD_INT 0
27663: PPUSH
27664: PPUSH
27665: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27666: LD_ADDR_VAR 0 2
27670: PUSH
27671: LD_INT 22
27673: PUSH
27674: LD_OWVAR 2
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 21
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PPUSH
27697: CALL_OW 69
27701: PUSH
27702: FOR_IN
27703: IFFALSE 27744
// begin for j := 1 to 4 do
27705: LD_ADDR_VAR 0 3
27709: PUSH
27710: DOUBLE
27711: LD_INT 1
27713: DEC
27714: ST_TO_ADDR
27715: LD_INT 4
27717: PUSH
27718: FOR_TO
27719: IFFALSE 27740
// SetSkill ( i , j , 10 ) ;
27721: LD_VAR 0 2
27725: PPUSH
27726: LD_VAR 0 3
27730: PPUSH
27731: LD_INT 10
27733: PPUSH
27734: CALL_OW 237
27738: GO 27718
27740: POP
27741: POP
// end ;
27742: GO 27702
27744: POP
27745: POP
// end ;
27746: LD_VAR 0 1
27750: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27751: LD_INT 0
27753: PPUSH
// uc_side := your_side ;
27754: LD_ADDR_OWVAR 20
27758: PUSH
27759: LD_OWVAR 2
27763: ST_TO_ADDR
// uc_nation := nation ;
27764: LD_ADDR_OWVAR 21
27768: PUSH
27769: LD_VAR 0 1
27773: ST_TO_ADDR
// InitHc ;
27774: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27778: LD_INT 0
27780: PPUSH
27781: LD_VAR 0 2
27785: PPUSH
27786: LD_VAR 0 3
27790: PPUSH
27791: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27795: LD_VAR 0 4
27799: PPUSH
27800: LD_VAR 0 5
27804: PPUSH
27805: CALL_OW 428
27809: PUSH
27810: LD_INT 0
27812: EQUAL
27813: IFFALSE 27837
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27815: CALL_OW 44
27819: PPUSH
27820: LD_VAR 0 4
27824: PPUSH
27825: LD_VAR 0 5
27829: PPUSH
27830: LD_INT 1
27832: PPUSH
27833: CALL_OW 48
// end ;
27837: LD_VAR 0 6
27841: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27842: LD_INT 0
27844: PPUSH
27845: PPUSH
// uc_side := your_side ;
27846: LD_ADDR_OWVAR 20
27850: PUSH
27851: LD_OWVAR 2
27855: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27856: LD_VAR 0 1
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: LD_INT 4
27872: PUSH
27873: LD_INT 5
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: IN
27883: IFFALSE 27895
// uc_nation := nation_american else
27885: LD_ADDR_OWVAR 21
27889: PUSH
27890: LD_INT 1
27892: ST_TO_ADDR
27893: GO 27938
// if chassis in [ 11 , 12 , 13 , 14 ] then
27895: LD_VAR 0 1
27899: PUSH
27900: LD_INT 11
27902: PUSH
27903: LD_INT 12
27905: PUSH
27906: LD_INT 13
27908: PUSH
27909: LD_INT 14
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: IN
27918: IFFALSE 27930
// uc_nation := nation_arabian else
27920: LD_ADDR_OWVAR 21
27924: PUSH
27925: LD_INT 2
27927: ST_TO_ADDR
27928: GO 27938
// uc_nation := nation_russian ;
27930: LD_ADDR_OWVAR 21
27934: PUSH
27935: LD_INT 3
27937: ST_TO_ADDR
// vc_chassis := chassis ;
27938: LD_ADDR_OWVAR 37
27942: PUSH
27943: LD_VAR 0 1
27947: ST_TO_ADDR
// vc_engine := engine ;
27948: LD_ADDR_OWVAR 39
27952: PUSH
27953: LD_VAR 0 2
27957: ST_TO_ADDR
// vc_control := control ;
27958: LD_ADDR_OWVAR 38
27962: PUSH
27963: LD_VAR 0 3
27967: ST_TO_ADDR
// vc_weapon := weapon ;
27968: LD_ADDR_OWVAR 40
27972: PUSH
27973: LD_VAR 0 4
27977: ST_TO_ADDR
// un := CreateVehicle ;
27978: LD_ADDR_VAR 0 8
27982: PUSH
27983: CALL_OW 45
27987: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27988: LD_VAR 0 8
27992: PPUSH
27993: LD_INT 0
27995: PPUSH
27996: LD_INT 5
27998: PPUSH
27999: CALL_OW 12
28003: PPUSH
28004: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28008: LD_VAR 0 8
28012: PPUSH
28013: LD_VAR 0 5
28017: PPUSH
28018: LD_VAR 0 6
28022: PPUSH
28023: LD_INT 1
28025: PPUSH
28026: CALL_OW 48
// end ;
28030: LD_VAR 0 7
28034: RET
// export hInvincible ; every 1 do
28035: GO 28037
28037: DISABLE
// hInvincible := [ ] ;
28038: LD_ADDR_EXP 95
28042: PUSH
28043: EMPTY
28044: ST_TO_ADDR
28045: END
// every 10 do var i ;
28046: GO 28048
28048: DISABLE
28049: LD_INT 0
28051: PPUSH
// begin enable ;
28052: ENABLE
// if not hInvincible then
28053: LD_EXP 95
28057: NOT
28058: IFFALSE 28062
// exit ;
28060: GO 28106
// for i in hInvincible do
28062: LD_ADDR_VAR 0 1
28066: PUSH
28067: LD_EXP 95
28071: PUSH
28072: FOR_IN
28073: IFFALSE 28104
// if GetLives ( i ) < 1000 then
28075: LD_VAR 0 1
28079: PPUSH
28080: CALL_OW 256
28084: PUSH
28085: LD_INT 1000
28087: LESS
28088: IFFALSE 28102
// SetLives ( i , 1000 ) ;
28090: LD_VAR 0 1
28094: PPUSH
28095: LD_INT 1000
28097: PPUSH
28098: CALL_OW 234
28102: GO 28072
28104: POP
28105: POP
// end ;
28106: PPOPN 1
28108: END
// export function hHackInvincible ; var i ; begin
28109: LD_INT 0
28111: PPUSH
28112: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28113: LD_ADDR_VAR 0 2
28117: PUSH
28118: LD_INT 2
28120: PUSH
28121: LD_INT 21
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 21
28133: PUSH
28134: LD_INT 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: LIST
28145: PPUSH
28146: CALL_OW 69
28150: PUSH
28151: FOR_IN
28152: IFFALSE 28213
// if IsSelected ( i ) then
28154: LD_VAR 0 2
28158: PPUSH
28159: CALL_OW 306
28163: IFFALSE 28211
// begin if i in hInvincible then
28165: LD_VAR 0 2
28169: PUSH
28170: LD_EXP 95
28174: IN
28175: IFFALSE 28195
// hInvincible := hInvincible diff i else
28177: LD_ADDR_EXP 95
28181: PUSH
28182: LD_EXP 95
28186: PUSH
28187: LD_VAR 0 2
28191: DIFF
28192: ST_TO_ADDR
28193: GO 28211
// hInvincible := hInvincible union i ;
28195: LD_ADDR_EXP 95
28199: PUSH
28200: LD_EXP 95
28204: PUSH
28205: LD_VAR 0 2
28209: UNION
28210: ST_TO_ADDR
// end ;
28211: GO 28151
28213: POP
28214: POP
// end ;
28215: LD_VAR 0 1
28219: RET
// export function hHackInvisible ; var i , j ; begin
28220: LD_INT 0
28222: PPUSH
28223: PPUSH
28224: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28225: LD_ADDR_VAR 0 2
28229: PUSH
28230: LD_INT 21
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PPUSH
28240: CALL_OW 69
28244: PUSH
28245: FOR_IN
28246: IFFALSE 28270
// if IsSelected ( i ) then
28248: LD_VAR 0 2
28252: PPUSH
28253: CALL_OW 306
28257: IFFALSE 28268
// ComForceInvisible ( i ) ;
28259: LD_VAR 0 2
28263: PPUSH
28264: CALL_OW 496
28268: GO 28245
28270: POP
28271: POP
// end ;
28272: LD_VAR 0 1
28276: RET
// export function hHackChangeYourSide ; begin
28277: LD_INT 0
28279: PPUSH
// if your_side = 8 then
28280: LD_OWVAR 2
28284: PUSH
28285: LD_INT 8
28287: EQUAL
28288: IFFALSE 28300
// your_side := 0 else
28290: LD_ADDR_OWVAR 2
28294: PUSH
28295: LD_INT 0
28297: ST_TO_ADDR
28298: GO 28314
// your_side := your_side + 1 ;
28300: LD_ADDR_OWVAR 2
28304: PUSH
28305: LD_OWVAR 2
28309: PUSH
28310: LD_INT 1
28312: PLUS
28313: ST_TO_ADDR
// end ;
28314: LD_VAR 0 1
28318: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28319: LD_INT 0
28321: PPUSH
28322: PPUSH
28323: PPUSH
// for i in all_units do
28324: LD_ADDR_VAR 0 2
28328: PUSH
28329: LD_OWVAR 3
28333: PUSH
28334: FOR_IN
28335: IFFALSE 28413
// if IsSelected ( i ) then
28337: LD_VAR 0 2
28341: PPUSH
28342: CALL_OW 306
28346: IFFALSE 28411
// begin j := GetSide ( i ) ;
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_VAR 0 2
28357: PPUSH
28358: CALL_OW 255
28362: ST_TO_ADDR
// if j = 8 then
28363: LD_VAR 0 3
28367: PUSH
28368: LD_INT 8
28370: EQUAL
28371: IFFALSE 28383
// j := 0 else
28373: LD_ADDR_VAR 0 3
28377: PUSH
28378: LD_INT 0
28380: ST_TO_ADDR
28381: GO 28397
// j := j + 1 ;
28383: LD_ADDR_VAR 0 3
28387: PUSH
28388: LD_VAR 0 3
28392: PUSH
28393: LD_INT 1
28395: PLUS
28396: ST_TO_ADDR
// SetSide ( i , j ) ;
28397: LD_VAR 0 2
28401: PPUSH
28402: LD_VAR 0 3
28406: PPUSH
28407: CALL_OW 235
// end ;
28411: GO 28334
28413: POP
28414: POP
// end ;
28415: LD_VAR 0 1
28419: RET
// export function hHackFog ; begin
28420: LD_INT 0
28422: PPUSH
// FogOff ( true ) ;
28423: LD_INT 1
28425: PPUSH
28426: CALL_OW 344
// end ;
28430: LD_VAR 0 1
28434: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28435: LD_INT 0
28437: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28438: LD_VAR 0 1
28442: PPUSH
28443: LD_VAR 0 2
28447: PPUSH
28448: LD_VAR 0 3
28452: PPUSH
28453: LD_INT 1
28455: PPUSH
28456: LD_INT 1
28458: PPUSH
28459: CALL_OW 483
// CenterOnXY ( x , y ) ;
28463: LD_VAR 0 2
28467: PPUSH
28468: LD_VAR 0 3
28472: PPUSH
28473: CALL_OW 84
// end ; end_of_file end_of_file
28477: LD_VAR 0 4
28481: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28482: LD_INT 0
28484: PPUSH
28485: PPUSH
// if exist_mode then
28486: LD_VAR 0 2
28490: IFFALSE 28515
// unit := CreateCharacter ( prefix & ident ) else
28492: LD_ADDR_VAR 0 5
28496: PUSH
28497: LD_VAR 0 3
28501: PUSH
28502: LD_VAR 0 1
28506: STR
28507: PPUSH
28508: CALL_OW 34
28512: ST_TO_ADDR
28513: GO 28530
// unit := NewCharacter ( ident ) ;
28515: LD_ADDR_VAR 0 5
28519: PUSH
28520: LD_VAR 0 1
28524: PPUSH
28525: CALL_OW 25
28529: ST_TO_ADDR
// result := unit ;
28530: LD_ADDR_VAR 0 4
28534: PUSH
28535: LD_VAR 0 5
28539: ST_TO_ADDR
// end ;
28540: LD_VAR 0 4
28544: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28545: LD_INT 0
28547: PPUSH
28548: PPUSH
// if not side or not nation then
28549: LD_VAR 0 1
28553: NOT
28554: PUSH
28555: LD_VAR 0 2
28559: NOT
28560: OR
28561: IFFALSE 28565
// exit ;
28563: GO 29333
// case nation of nation_american :
28565: LD_VAR 0 2
28569: PUSH
28570: LD_INT 1
28572: DOUBLE
28573: EQUAL
28574: IFTRUE 28578
28576: GO 28792
28578: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28579: LD_ADDR_VAR 0 4
28583: PUSH
28584: LD_INT 35
28586: PUSH
28587: LD_INT 45
28589: PUSH
28590: LD_INT 46
28592: PUSH
28593: LD_INT 47
28595: PUSH
28596: LD_INT 82
28598: PUSH
28599: LD_INT 83
28601: PUSH
28602: LD_INT 84
28604: PUSH
28605: LD_INT 85
28607: PUSH
28608: LD_INT 86
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: LD_INT 6
28619: PUSH
28620: LD_INT 15
28622: PUSH
28623: LD_INT 16
28625: PUSH
28626: LD_INT 7
28628: PUSH
28629: LD_INT 12
28631: PUSH
28632: LD_INT 13
28634: PUSH
28635: LD_INT 10
28637: PUSH
28638: LD_INT 14
28640: PUSH
28641: LD_INT 20
28643: PUSH
28644: LD_INT 21
28646: PUSH
28647: LD_INT 22
28649: PUSH
28650: LD_INT 25
28652: PUSH
28653: LD_INT 32
28655: PUSH
28656: LD_INT 27
28658: PUSH
28659: LD_INT 36
28661: PUSH
28662: LD_INT 69
28664: PUSH
28665: LD_INT 39
28667: PUSH
28668: LD_INT 34
28670: PUSH
28671: LD_INT 40
28673: PUSH
28674: LD_INT 48
28676: PUSH
28677: LD_INT 49
28679: PUSH
28680: LD_INT 50
28682: PUSH
28683: LD_INT 51
28685: PUSH
28686: LD_INT 52
28688: PUSH
28689: LD_INT 53
28691: PUSH
28692: LD_INT 54
28694: PUSH
28695: LD_INT 55
28697: PUSH
28698: LD_INT 56
28700: PUSH
28701: LD_INT 57
28703: PUSH
28704: LD_INT 58
28706: PUSH
28707: LD_INT 59
28709: PUSH
28710: LD_INT 60
28712: PUSH
28713: LD_INT 61
28715: PUSH
28716: LD_INT 62
28718: PUSH
28719: LD_INT 80
28721: PUSH
28722: LD_INT 82
28724: PUSH
28725: LD_INT 83
28727: PUSH
28728: LD_INT 84
28730: PUSH
28731: LD_INT 85
28733: PUSH
28734: LD_INT 86
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: ST_TO_ADDR
28790: GO 29257
28792: LD_INT 2
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28800
28798: GO 29026
28800: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28801: LD_ADDR_VAR 0 4
28805: PUSH
28806: LD_INT 35
28808: PUSH
28809: LD_INT 45
28811: PUSH
28812: LD_INT 46
28814: PUSH
28815: LD_INT 47
28817: PUSH
28818: LD_INT 82
28820: PUSH
28821: LD_INT 83
28823: PUSH
28824: LD_INT 84
28826: PUSH
28827: LD_INT 85
28829: PUSH
28830: LD_INT 87
28832: PUSH
28833: LD_INT 70
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 11
28841: PUSH
28842: LD_INT 3
28844: PUSH
28845: LD_INT 4
28847: PUSH
28848: LD_INT 5
28850: PUSH
28851: LD_INT 6
28853: PUSH
28854: LD_INT 15
28856: PUSH
28857: LD_INT 18
28859: PUSH
28860: LD_INT 7
28862: PUSH
28863: LD_INT 17
28865: PUSH
28866: LD_INT 8
28868: PUSH
28869: LD_INT 20
28871: PUSH
28872: LD_INT 21
28874: PUSH
28875: LD_INT 22
28877: PUSH
28878: LD_INT 72
28880: PUSH
28881: LD_INT 26
28883: PUSH
28884: LD_INT 69
28886: PUSH
28887: LD_INT 39
28889: PUSH
28890: LD_INT 40
28892: PUSH
28893: LD_INT 41
28895: PUSH
28896: LD_INT 42
28898: PUSH
28899: LD_INT 43
28901: PUSH
28902: LD_INT 48
28904: PUSH
28905: LD_INT 49
28907: PUSH
28908: LD_INT 50
28910: PUSH
28911: LD_INT 51
28913: PUSH
28914: LD_INT 52
28916: PUSH
28917: LD_INT 53
28919: PUSH
28920: LD_INT 54
28922: PUSH
28923: LD_INT 55
28925: PUSH
28926: LD_INT 56
28928: PUSH
28929: LD_INT 60
28931: PUSH
28932: LD_INT 61
28934: PUSH
28935: LD_INT 62
28937: PUSH
28938: LD_INT 66
28940: PUSH
28941: LD_INT 67
28943: PUSH
28944: LD_INT 68
28946: PUSH
28947: LD_INT 81
28949: PUSH
28950: LD_INT 82
28952: PUSH
28953: LD_INT 83
28955: PUSH
28956: LD_INT 84
28958: PUSH
28959: LD_INT 85
28961: PUSH
28962: LD_INT 87
28964: PUSH
28965: LD_INT 88
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: ST_TO_ADDR
29024: GO 29257
29026: LD_INT 3
29028: DOUBLE
29029: EQUAL
29030: IFTRUE 29034
29032: GO 29256
29034: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29035: LD_ADDR_VAR 0 4
29039: PUSH
29040: LD_INT 46
29042: PUSH
29043: LD_INT 47
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 82
29054: PUSH
29055: LD_INT 83
29057: PUSH
29058: LD_INT 84
29060: PUSH
29061: LD_INT 85
29063: PUSH
29064: LD_INT 86
29066: PUSH
29067: LD_INT 11
29069: PUSH
29070: LD_INT 9
29072: PUSH
29073: LD_INT 20
29075: PUSH
29076: LD_INT 19
29078: PUSH
29079: LD_INT 21
29081: PUSH
29082: LD_INT 24
29084: PUSH
29085: LD_INT 22
29087: PUSH
29088: LD_INT 25
29090: PUSH
29091: LD_INT 28
29093: PUSH
29094: LD_INT 29
29096: PUSH
29097: LD_INT 30
29099: PUSH
29100: LD_INT 31
29102: PUSH
29103: LD_INT 37
29105: PUSH
29106: LD_INT 38
29108: PUSH
29109: LD_INT 32
29111: PUSH
29112: LD_INT 27
29114: PUSH
29115: LD_INT 33
29117: PUSH
29118: LD_INT 69
29120: PUSH
29121: LD_INT 39
29123: PUSH
29124: LD_INT 34
29126: PUSH
29127: LD_INT 40
29129: PUSH
29130: LD_INT 71
29132: PUSH
29133: LD_INT 23
29135: PUSH
29136: LD_INT 44
29138: PUSH
29139: LD_INT 48
29141: PUSH
29142: LD_INT 49
29144: PUSH
29145: LD_INT 50
29147: PUSH
29148: LD_INT 51
29150: PUSH
29151: LD_INT 52
29153: PUSH
29154: LD_INT 53
29156: PUSH
29157: LD_INT 54
29159: PUSH
29160: LD_INT 55
29162: PUSH
29163: LD_INT 56
29165: PUSH
29166: LD_INT 57
29168: PUSH
29169: LD_INT 58
29171: PUSH
29172: LD_INT 59
29174: PUSH
29175: LD_INT 63
29177: PUSH
29178: LD_INT 64
29180: PUSH
29181: LD_INT 65
29183: PUSH
29184: LD_INT 82
29186: PUSH
29187: LD_INT 83
29189: PUSH
29190: LD_INT 84
29192: PUSH
29193: LD_INT 85
29195: PUSH
29196: LD_INT 86
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: ST_TO_ADDR
29254: GO 29257
29256: POP
// if state > - 1 and state < 3 then
29257: LD_VAR 0 3
29261: PUSH
29262: LD_INT 1
29264: NEG
29265: GREATER
29266: PUSH
29267: LD_VAR 0 3
29271: PUSH
29272: LD_INT 3
29274: LESS
29275: AND
29276: IFFALSE 29333
// for i in result do
29278: LD_ADDR_VAR 0 5
29282: PUSH
29283: LD_VAR 0 4
29287: PUSH
29288: FOR_IN
29289: IFFALSE 29331
// if GetTech ( i , side ) <> state then
29291: LD_VAR 0 5
29295: PPUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 321
29305: PUSH
29306: LD_VAR 0 3
29310: NONEQUAL
29311: IFFALSE 29329
// result := result diff i ;
29313: LD_ADDR_VAR 0 4
29317: PUSH
29318: LD_VAR 0 4
29322: PUSH
29323: LD_VAR 0 5
29327: DIFF
29328: ST_TO_ADDR
29329: GO 29288
29331: POP
29332: POP
// end ;
29333: LD_VAR 0 4
29337: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29338: LD_INT 0
29340: PPUSH
29341: PPUSH
29342: PPUSH
// result := true ;
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: LD_INT 1
29350: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29351: LD_ADDR_VAR 0 5
29355: PUSH
29356: LD_VAR 0 2
29360: PPUSH
29361: CALL_OW 480
29365: ST_TO_ADDR
// if not tmp then
29366: LD_VAR 0 5
29370: NOT
29371: IFFALSE 29375
// exit ;
29373: GO 29424
// for i in tmp do
29375: LD_ADDR_VAR 0 4
29379: PUSH
29380: LD_VAR 0 5
29384: PUSH
29385: FOR_IN
29386: IFFALSE 29422
// if GetTech ( i , side ) <> state_researched then
29388: LD_VAR 0 4
29392: PPUSH
29393: LD_VAR 0 1
29397: PPUSH
29398: CALL_OW 321
29402: PUSH
29403: LD_INT 2
29405: NONEQUAL
29406: IFFALSE 29420
// begin result := false ;
29408: LD_ADDR_VAR 0 3
29412: PUSH
29413: LD_INT 0
29415: ST_TO_ADDR
// exit ;
29416: POP
29417: POP
29418: GO 29424
// end ;
29420: GO 29385
29422: POP
29423: POP
// end ;
29424: LD_VAR 0 3
29428: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29429: LD_INT 0
29431: PPUSH
29432: PPUSH
29433: PPUSH
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29444: LD_VAR 0 1
29448: NOT
29449: PUSH
29450: LD_VAR 0 1
29454: PPUSH
29455: CALL_OW 257
29459: PUSH
29460: LD_INT 9
29462: NONEQUAL
29463: OR
29464: IFFALSE 29468
// exit ;
29466: GO 30041
// side := GetSide ( unit ) ;
29468: LD_ADDR_VAR 0 9
29472: PUSH
29473: LD_VAR 0 1
29477: PPUSH
29478: CALL_OW 255
29482: ST_TO_ADDR
// tech_space := tech_spacanom ;
29483: LD_ADDR_VAR 0 12
29487: PUSH
29488: LD_INT 29
29490: ST_TO_ADDR
// tech_time := tech_taurad ;
29491: LD_ADDR_VAR 0 13
29495: PUSH
29496: LD_INT 28
29498: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29499: LD_ADDR_VAR 0 11
29503: PUSH
29504: LD_VAR 0 1
29508: PPUSH
29509: CALL_OW 310
29513: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29514: LD_VAR 0 11
29518: PPUSH
29519: CALL_OW 247
29523: PUSH
29524: LD_INT 2
29526: EQUAL
29527: IFFALSE 29531
// exit ;
29529: GO 30041
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29531: LD_ADDR_VAR 0 8
29535: PUSH
29536: LD_INT 81
29538: PUSH
29539: LD_VAR 0 9
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: LD_INT 21
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PPUSH
29569: CALL_OW 69
29573: ST_TO_ADDR
// if not tmp then
29574: LD_VAR 0 8
29578: NOT
29579: IFFALSE 29583
// exit ;
29581: GO 30041
// if in_unit then
29583: LD_VAR 0 11
29587: IFFALSE 29611
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29589: LD_ADDR_VAR 0 10
29593: PUSH
29594: LD_VAR 0 8
29598: PPUSH
29599: LD_VAR 0 11
29603: PPUSH
29604: CALL_OW 74
29608: ST_TO_ADDR
29609: GO 29631
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29611: LD_ADDR_VAR 0 10
29615: PUSH
29616: LD_VAR 0 8
29620: PPUSH
29621: LD_VAR 0 1
29625: PPUSH
29626: CALL_OW 74
29630: ST_TO_ADDR
// if not enemy then
29631: LD_VAR 0 10
29635: NOT
29636: IFFALSE 29640
// exit ;
29638: GO 30041
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29640: LD_VAR 0 11
29644: PUSH
29645: LD_VAR 0 11
29649: PPUSH
29650: LD_VAR 0 10
29654: PPUSH
29655: CALL_OW 296
29659: PUSH
29660: LD_INT 13
29662: GREATER
29663: AND
29664: PUSH
29665: LD_VAR 0 1
29669: PPUSH
29670: LD_VAR 0 10
29674: PPUSH
29675: CALL_OW 296
29679: PUSH
29680: LD_INT 12
29682: GREATER
29683: OR
29684: IFFALSE 29688
// exit ;
29686: GO 30041
// missile := [ 1 ] ;
29688: LD_ADDR_VAR 0 14
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29699: LD_VAR 0 9
29703: PPUSH
29704: LD_VAR 0 12
29708: PPUSH
29709: CALL_OW 325
29713: IFFALSE 29742
// missile := Insert ( missile , missile + 1 , 2 ) ;
29715: LD_ADDR_VAR 0 14
29719: PUSH
29720: LD_VAR 0 14
29724: PPUSH
29725: LD_VAR 0 14
29729: PUSH
29730: LD_INT 1
29732: PLUS
29733: PPUSH
29734: LD_INT 2
29736: PPUSH
29737: CALL_OW 2
29741: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29742: LD_VAR 0 9
29746: PPUSH
29747: LD_VAR 0 13
29751: PPUSH
29752: CALL_OW 325
29756: PUSH
29757: LD_VAR 0 10
29761: PPUSH
29762: CALL_OW 255
29766: PPUSH
29767: LD_VAR 0 13
29771: PPUSH
29772: CALL_OW 325
29776: NOT
29777: AND
29778: IFFALSE 29807
// missile := Insert ( missile , missile + 1 , 3 ) ;
29780: LD_ADDR_VAR 0 14
29784: PUSH
29785: LD_VAR 0 14
29789: PPUSH
29790: LD_VAR 0 14
29794: PUSH
29795: LD_INT 1
29797: PLUS
29798: PPUSH
29799: LD_INT 3
29801: PPUSH
29802: CALL_OW 2
29806: ST_TO_ADDR
// if missile < 2 then
29807: LD_VAR 0 14
29811: PUSH
29812: LD_INT 2
29814: LESS
29815: IFFALSE 29819
// exit ;
29817: GO 30041
// x := GetX ( enemy ) ;
29819: LD_ADDR_VAR 0 4
29823: PUSH
29824: LD_VAR 0 10
29828: PPUSH
29829: CALL_OW 250
29833: ST_TO_ADDR
// y := GetY ( enemy ) ;
29834: LD_ADDR_VAR 0 5
29838: PUSH
29839: LD_VAR 0 10
29843: PPUSH
29844: CALL_OW 251
29848: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29849: LD_ADDR_VAR 0 6
29853: PUSH
29854: LD_VAR 0 4
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PPUSH
29863: LD_INT 1
29865: PPUSH
29866: CALL_OW 12
29870: PLUS
29871: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29872: LD_ADDR_VAR 0 7
29876: PUSH
29877: LD_VAR 0 5
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PPUSH
29886: LD_INT 1
29888: PPUSH
29889: CALL_OW 12
29893: PLUS
29894: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29895: LD_VAR 0 6
29899: PPUSH
29900: LD_VAR 0 7
29904: PPUSH
29905: CALL_OW 488
29909: NOT
29910: IFFALSE 29932
// begin _x := x ;
29912: LD_ADDR_VAR 0 6
29916: PUSH
29917: LD_VAR 0 4
29921: ST_TO_ADDR
// _y := y ;
29922: LD_ADDR_VAR 0 7
29926: PUSH
29927: LD_VAR 0 5
29931: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29932: LD_ADDR_VAR 0 3
29936: PUSH
29937: LD_INT 1
29939: PPUSH
29940: LD_VAR 0 14
29944: PPUSH
29945: CALL_OW 12
29949: ST_TO_ADDR
// case i of 1 :
29950: LD_VAR 0 3
29954: PUSH
29955: LD_INT 1
29957: DOUBLE
29958: EQUAL
29959: IFTRUE 29963
29961: GO 29980
29963: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29964: LD_VAR 0 1
29968: PPUSH
29969: LD_VAR 0 10
29973: PPUSH
29974: CALL_OW 115
29978: GO 30041
29980: LD_INT 2
29982: DOUBLE
29983: EQUAL
29984: IFTRUE 29988
29986: GO 30010
29988: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29989: LD_VAR 0 1
29993: PPUSH
29994: LD_VAR 0 6
29998: PPUSH
29999: LD_VAR 0 7
30003: PPUSH
30004: CALL_OW 153
30008: GO 30041
30010: LD_INT 3
30012: DOUBLE
30013: EQUAL
30014: IFTRUE 30018
30016: GO 30040
30018: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30019: LD_VAR 0 1
30023: PPUSH
30024: LD_VAR 0 6
30028: PPUSH
30029: LD_VAR 0 7
30033: PPUSH
30034: CALL_OW 154
30038: GO 30041
30040: POP
// end ;
30041: LD_VAR 0 2
30045: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30046: LD_INT 0
30048: PPUSH
30049: PPUSH
30050: PPUSH
30051: PPUSH
30052: PPUSH
30053: PPUSH
// if not unit or not building then
30054: LD_VAR 0 1
30058: NOT
30059: PUSH
30060: LD_VAR 0 2
30064: NOT
30065: OR
30066: IFFALSE 30070
// exit ;
30068: GO 30228
// x := GetX ( building ) ;
30070: LD_ADDR_VAR 0 5
30074: PUSH
30075: LD_VAR 0 2
30079: PPUSH
30080: CALL_OW 250
30084: ST_TO_ADDR
// y := GetY ( building ) ;
30085: LD_ADDR_VAR 0 6
30089: PUSH
30090: LD_VAR 0 2
30094: PPUSH
30095: CALL_OW 251
30099: ST_TO_ADDR
// for i = 0 to 5 do
30100: LD_ADDR_VAR 0 4
30104: PUSH
30105: DOUBLE
30106: LD_INT 0
30108: DEC
30109: ST_TO_ADDR
30110: LD_INT 5
30112: PUSH
30113: FOR_TO
30114: IFFALSE 30226
// begin _x := ShiftX ( x , i , 3 ) ;
30116: LD_ADDR_VAR 0 7
30120: PUSH
30121: LD_VAR 0 5
30125: PPUSH
30126: LD_VAR 0 4
30130: PPUSH
30131: LD_INT 3
30133: PPUSH
30134: CALL_OW 272
30138: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30139: LD_ADDR_VAR 0 8
30143: PUSH
30144: LD_VAR 0 6
30148: PPUSH
30149: LD_VAR 0 4
30153: PPUSH
30154: LD_INT 3
30156: PPUSH
30157: CALL_OW 273
30161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30162: LD_VAR 0 7
30166: PPUSH
30167: LD_VAR 0 8
30171: PPUSH
30172: CALL_OW 488
30176: NOT
30177: IFFALSE 30181
// continue ;
30179: GO 30113
// if HexInfo ( _x , _y ) = 0 then
30181: LD_VAR 0 7
30185: PPUSH
30186: LD_VAR 0 8
30190: PPUSH
30191: CALL_OW 428
30195: PUSH
30196: LD_INT 0
30198: EQUAL
30199: IFFALSE 30224
// begin ComMoveXY ( unit , _x , _y ) ;
30201: LD_VAR 0 1
30205: PPUSH
30206: LD_VAR 0 7
30210: PPUSH
30211: LD_VAR 0 8
30215: PPUSH
30216: CALL_OW 111
// exit ;
30220: POP
30221: POP
30222: GO 30228
// end ; end ;
30224: GO 30113
30226: POP
30227: POP
// end ;
30228: LD_VAR 0 3
30232: RET
// export function ScanBase ( side , base_area ) ; begin
30233: LD_INT 0
30235: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30236: LD_ADDR_VAR 0 3
30240: PUSH
30241: LD_VAR 0 2
30245: PPUSH
30246: LD_INT 81
30248: PUSH
30249: LD_VAR 0 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PPUSH
30258: CALL_OW 70
30262: ST_TO_ADDR
// end ;
30263: LD_VAR 0 3
30267: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30268: LD_INT 0
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
// result := false ;
30274: LD_ADDR_VAR 0 2
30278: PUSH
30279: LD_INT 0
30281: ST_TO_ADDR
// side := GetSide ( unit ) ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: LD_VAR 0 1
30291: PPUSH
30292: CALL_OW 255
30296: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30297: LD_ADDR_VAR 0 4
30301: PUSH
30302: LD_VAR 0 1
30306: PPUSH
30307: CALL_OW 248
30311: ST_TO_ADDR
// case nat of 1 :
30312: LD_VAR 0 4
30316: PUSH
30317: LD_INT 1
30319: DOUBLE
30320: EQUAL
30321: IFTRUE 30325
30323: GO 30336
30325: POP
// tech := tech_lassight ; 2 :
30326: LD_ADDR_VAR 0 5
30330: PUSH
30331: LD_INT 12
30333: ST_TO_ADDR
30334: GO 30375
30336: LD_INT 2
30338: DOUBLE
30339: EQUAL
30340: IFTRUE 30344
30342: GO 30355
30344: POP
// tech := tech_mortar ; 3 :
30345: LD_ADDR_VAR 0 5
30349: PUSH
30350: LD_INT 41
30352: ST_TO_ADDR
30353: GO 30375
30355: LD_INT 3
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 30374
30363: POP
// tech := tech_bazooka ; end ;
30364: LD_ADDR_VAR 0 5
30368: PUSH
30369: LD_INT 44
30371: ST_TO_ADDR
30372: GO 30375
30374: POP
// if Researched ( side , tech ) then
30375: LD_VAR 0 3
30379: PPUSH
30380: LD_VAR 0 5
30384: PPUSH
30385: CALL_OW 325
30389: IFFALSE 30416
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30391: LD_ADDR_VAR 0 2
30395: PUSH
30396: LD_INT 5
30398: PUSH
30399: LD_INT 8
30401: PUSH
30402: LD_INT 9
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: PUSH
30410: LD_VAR 0 4
30414: ARRAY
30415: ST_TO_ADDR
// end ;
30416: LD_VAR 0 2
30420: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30421: LD_INT 0
30423: PPUSH
30424: PPUSH
30425: PPUSH
// if not mines then
30426: LD_VAR 0 2
30430: NOT
30431: IFFALSE 30435
// exit ;
30433: GO 30579
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30435: LD_ADDR_VAR 0 5
30439: PUSH
30440: LD_INT 81
30442: PUSH
30443: LD_VAR 0 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 21
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL_OW 69
30477: ST_TO_ADDR
// for i in mines do
30478: LD_ADDR_VAR 0 4
30482: PUSH
30483: LD_VAR 0 2
30487: PUSH
30488: FOR_IN
30489: IFFALSE 30577
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30491: LD_VAR 0 4
30495: PUSH
30496: LD_INT 1
30498: ARRAY
30499: PPUSH
30500: LD_VAR 0 4
30504: PUSH
30505: LD_INT 2
30507: ARRAY
30508: PPUSH
30509: CALL_OW 458
30513: NOT
30514: IFFALSE 30518
// continue ;
30516: GO 30488
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30518: LD_VAR 0 4
30522: PUSH
30523: LD_INT 1
30525: ARRAY
30526: PPUSH
30527: LD_VAR 0 4
30531: PUSH
30532: LD_INT 2
30534: ARRAY
30535: PPUSH
30536: CALL_OW 428
30540: PUSH
30541: LD_VAR 0 5
30545: IN
30546: IFFALSE 30575
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30548: LD_VAR 0 4
30552: PUSH
30553: LD_INT 1
30555: ARRAY
30556: PPUSH
30557: LD_VAR 0 4
30561: PUSH
30562: LD_INT 2
30564: ARRAY
30565: PPUSH
30566: LD_VAR 0 1
30570: PPUSH
30571: CALL_OW 456
// end ;
30575: GO 30488
30577: POP
30578: POP
// end ;
30579: LD_VAR 0 3
30583: RET
// export function Count ( array ) ; var i ; begin
30584: LD_INT 0
30586: PPUSH
30587: PPUSH
// result := 0 ;
30588: LD_ADDR_VAR 0 2
30592: PUSH
30593: LD_INT 0
30595: ST_TO_ADDR
// for i in array do
30596: LD_ADDR_VAR 0 3
30600: PUSH
30601: LD_VAR 0 1
30605: PUSH
30606: FOR_IN
30607: IFFALSE 30631
// if i then
30609: LD_VAR 0 3
30613: IFFALSE 30629
// result := result + 1 ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_VAR 0 2
30624: PUSH
30625: LD_INT 1
30627: PLUS
30628: ST_TO_ADDR
30629: GO 30606
30631: POP
30632: POP
// end ;
30633: LD_VAR 0 2
30637: RET
// export function IsEmpty ( building ) ; begin
30638: LD_INT 0
30640: PPUSH
// if not building then
30641: LD_VAR 0 1
30645: NOT
30646: IFFALSE 30650
// exit ;
30648: GO 30693
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30650: LD_ADDR_VAR 0 2
30654: PUSH
30655: LD_VAR 0 1
30659: PUSH
30660: LD_INT 22
30662: PUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 255
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 58
30679: PUSH
30680: EMPTY
30681: LIST
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 69
30691: IN
30692: ST_TO_ADDR
// end ;
30693: LD_VAR 0 2
30697: RET
// export function IsNotFull ( building ) ; begin
30698: LD_INT 0
30700: PPUSH
// if not building then
30701: LD_VAR 0 1
30705: NOT
30706: IFFALSE 30710
// exit ;
30708: GO 30729
// result := UnitsInside ( building ) < 6 ;
30710: LD_ADDR_VAR 0 2
30714: PUSH
30715: LD_VAR 0 1
30719: PPUSH
30720: CALL_OW 313
30724: PUSH
30725: LD_INT 6
30727: LESS
30728: ST_TO_ADDR
// end ;
30729: LD_VAR 0 2
30733: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30734: LD_INT 0
30736: PPUSH
30737: PPUSH
30738: PPUSH
30739: PPUSH
// tmp := [ ] ;
30740: LD_ADDR_VAR 0 3
30744: PUSH
30745: EMPTY
30746: ST_TO_ADDR
// list := [ ] ;
30747: LD_ADDR_VAR 0 5
30751: PUSH
30752: EMPTY
30753: ST_TO_ADDR
// for i = 16 to 25 do
30754: LD_ADDR_VAR 0 4
30758: PUSH
30759: DOUBLE
30760: LD_INT 16
30762: DEC
30763: ST_TO_ADDR
30764: LD_INT 25
30766: PUSH
30767: FOR_TO
30768: IFFALSE 30841
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30770: LD_ADDR_VAR 0 3
30774: PUSH
30775: LD_VAR 0 3
30779: PUSH
30780: LD_INT 22
30782: PUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 255
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 91
30799: PUSH
30800: LD_VAR 0 1
30804: PUSH
30805: LD_INT 6
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 30
30815: PUSH
30816: LD_VAR 0 4
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: PUSH
30830: EMPTY
30831: LIST
30832: PPUSH
30833: CALL_OW 69
30837: ADD
30838: ST_TO_ADDR
30839: GO 30767
30841: POP
30842: POP
// for i = 1 to tmp do
30843: LD_ADDR_VAR 0 4
30847: PUSH
30848: DOUBLE
30849: LD_INT 1
30851: DEC
30852: ST_TO_ADDR
30853: LD_VAR 0 3
30857: PUSH
30858: FOR_TO
30859: IFFALSE 30947
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30861: LD_ADDR_VAR 0 5
30865: PUSH
30866: LD_VAR 0 5
30870: PUSH
30871: LD_VAR 0 3
30875: PUSH
30876: LD_VAR 0 4
30880: ARRAY
30881: PPUSH
30882: CALL_OW 266
30886: PUSH
30887: LD_VAR 0 3
30891: PUSH
30892: LD_VAR 0 4
30896: ARRAY
30897: PPUSH
30898: CALL_OW 250
30902: PUSH
30903: LD_VAR 0 3
30907: PUSH
30908: LD_VAR 0 4
30912: ARRAY
30913: PPUSH
30914: CALL_OW 251
30918: PUSH
30919: LD_VAR 0 3
30923: PUSH
30924: LD_VAR 0 4
30928: ARRAY
30929: PPUSH
30930: CALL_OW 254
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: ADD
30944: ST_TO_ADDR
30945: GO 30858
30947: POP
30948: POP
// result := list ;
30949: LD_ADDR_VAR 0 2
30953: PUSH
30954: LD_VAR 0 5
30958: ST_TO_ADDR
// end ;
30959: LD_VAR 0 2
30963: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30964: LD_INT 0
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
30972: PPUSH
// if not factory then
30973: LD_VAR 0 1
30977: NOT
30978: IFFALSE 30982
// exit ;
30980: GO 31575
// if control = control_apeman then
30982: LD_VAR 0 4
30986: PUSH
30987: LD_INT 5
30989: EQUAL
30990: IFFALSE 31099
// begin tmp := UnitsInside ( factory ) ;
30992: LD_ADDR_VAR 0 8
30996: PUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 313
31006: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31007: LD_VAR 0 8
31011: PPUSH
31012: LD_INT 25
31014: PUSH
31015: LD_INT 12
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PPUSH
31022: CALL_OW 72
31026: NOT
31027: IFFALSE 31037
// control := control_manual ;
31029: LD_ADDR_VAR 0 4
31033: PUSH
31034: LD_INT 1
31036: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31037: LD_ADDR_VAR 0 8
31041: PUSH
31042: LD_VAR 0 1
31046: PPUSH
31047: CALL 30734 0 1
31051: ST_TO_ADDR
// if tmp then
31052: LD_VAR 0 8
31056: IFFALSE 31099
// begin for i in tmp do
31058: LD_ADDR_VAR 0 7
31062: PUSH
31063: LD_VAR 0 8
31067: PUSH
31068: FOR_IN
31069: IFFALSE 31097
// if i [ 1 ] = b_ext_radio then
31071: LD_VAR 0 7
31075: PUSH
31076: LD_INT 1
31078: ARRAY
31079: PUSH
31080: LD_INT 22
31082: EQUAL
31083: IFFALSE 31095
// begin control := control_remote ;
31085: LD_ADDR_VAR 0 4
31089: PUSH
31090: LD_INT 2
31092: ST_TO_ADDR
// break ;
31093: GO 31097
// end ;
31095: GO 31068
31097: POP
31098: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31099: LD_VAR 0 1
31103: PPUSH
31104: LD_VAR 0 2
31108: PPUSH
31109: LD_VAR 0 3
31113: PPUSH
31114: LD_VAR 0 4
31118: PPUSH
31119: LD_VAR 0 5
31123: PPUSH
31124: CALL_OW 448
31128: IFFALSE 31163
// begin result := [ chassis , engine , control , weapon ] ;
31130: LD_ADDR_VAR 0 6
31134: PUSH
31135: LD_VAR 0 2
31139: PUSH
31140: LD_VAR 0 3
31144: PUSH
31145: LD_VAR 0 4
31149: PUSH
31150: LD_VAR 0 5
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: ST_TO_ADDR
// exit ;
31161: GO 31575
// end ; _chassis := AvailableChassisList ( factory ) ;
31163: LD_ADDR_VAR 0 9
31167: PUSH
31168: LD_VAR 0 1
31172: PPUSH
31173: CALL_OW 475
31177: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31178: LD_ADDR_VAR 0 11
31182: PUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 476
31192: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31193: LD_ADDR_VAR 0 12
31197: PUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 477
31207: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31208: LD_ADDR_VAR 0 10
31212: PUSH
31213: LD_VAR 0 1
31217: PPUSH
31218: CALL_OW 478
31222: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31223: LD_VAR 0 9
31227: NOT
31228: PUSH
31229: LD_VAR 0 11
31233: NOT
31234: OR
31235: PUSH
31236: LD_VAR 0 12
31240: NOT
31241: OR
31242: PUSH
31243: LD_VAR 0 10
31247: NOT
31248: OR
31249: IFFALSE 31284
// begin result := [ chassis , engine , control , weapon ] ;
31251: LD_ADDR_VAR 0 6
31255: PUSH
31256: LD_VAR 0 2
31260: PUSH
31261: LD_VAR 0 3
31265: PUSH
31266: LD_VAR 0 4
31270: PUSH
31271: LD_VAR 0 5
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// exit ;
31282: GO 31575
// end ; if not chassis in _chassis then
31284: LD_VAR 0 2
31288: PUSH
31289: LD_VAR 0 9
31293: IN
31294: NOT
31295: IFFALSE 31321
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31297: LD_ADDR_VAR 0 2
31301: PUSH
31302: LD_VAR 0 9
31306: PUSH
31307: LD_INT 1
31309: PPUSH
31310: LD_VAR 0 9
31314: PPUSH
31315: CALL_OW 12
31319: ARRAY
31320: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31321: LD_VAR 0 2
31325: PPUSH
31326: LD_VAR 0 3
31330: PPUSH
31331: CALL 31580 0 2
31335: NOT
31336: IFFALSE 31395
// repeat engine := _engine [ 1 ] ;
31338: LD_ADDR_VAR 0 3
31342: PUSH
31343: LD_VAR 0 11
31347: PUSH
31348: LD_INT 1
31350: ARRAY
31351: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31352: LD_ADDR_VAR 0 11
31356: PUSH
31357: LD_VAR 0 11
31361: PPUSH
31362: LD_INT 1
31364: PPUSH
31365: CALL_OW 3
31369: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31370: LD_VAR 0 2
31374: PPUSH
31375: LD_VAR 0 3
31379: PPUSH
31380: CALL 31580 0 2
31384: PUSH
31385: LD_VAR 0 11
31389: PUSH
31390: EMPTY
31391: EQUAL
31392: OR
31393: IFFALSE 31338
// if not control in _control then
31395: LD_VAR 0 4
31399: PUSH
31400: LD_VAR 0 12
31404: IN
31405: NOT
31406: IFFALSE 31432
// control := _control [ rand ( 1 , _control ) ] ;
31408: LD_ADDR_VAR 0 4
31412: PUSH
31413: LD_VAR 0 12
31417: PUSH
31418: LD_INT 1
31420: PPUSH
31421: LD_VAR 0 12
31425: PPUSH
31426: CALL_OW 12
31430: ARRAY
31431: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31432: LD_VAR 0 2
31436: PPUSH
31437: LD_VAR 0 5
31441: PPUSH
31442: CALL 31800 0 2
31446: NOT
31447: IFFALSE 31506
// repeat weapon := _weapon [ 1 ] ;
31449: LD_ADDR_VAR 0 5
31453: PUSH
31454: LD_VAR 0 10
31458: PUSH
31459: LD_INT 1
31461: ARRAY
31462: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31463: LD_ADDR_VAR 0 10
31467: PUSH
31468: LD_VAR 0 10
31472: PPUSH
31473: LD_INT 1
31475: PPUSH
31476: CALL_OW 3
31480: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31481: LD_VAR 0 2
31485: PPUSH
31486: LD_VAR 0 5
31490: PPUSH
31491: CALL 31800 0 2
31495: PUSH
31496: LD_VAR 0 10
31500: PUSH
31501: EMPTY
31502: EQUAL
31503: OR
31504: IFFALSE 31449
// result := [ ] ;
31506: LD_ADDR_VAR 0 6
31510: PUSH
31511: EMPTY
31512: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31513: LD_VAR 0 1
31517: PPUSH
31518: LD_VAR 0 2
31522: PPUSH
31523: LD_VAR 0 3
31527: PPUSH
31528: LD_VAR 0 4
31532: PPUSH
31533: LD_VAR 0 5
31537: PPUSH
31538: CALL_OW 448
31542: IFFALSE 31575
// result := [ chassis , engine , control , weapon ] ;
31544: LD_ADDR_VAR 0 6
31548: PUSH
31549: LD_VAR 0 2
31553: PUSH
31554: LD_VAR 0 3
31558: PUSH
31559: LD_VAR 0 4
31563: PUSH
31564: LD_VAR 0 5
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: ST_TO_ADDR
// end ;
31575: LD_VAR 0 6
31579: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31580: LD_INT 0
31582: PPUSH
// if not chassis or not engine then
31583: LD_VAR 0 1
31587: NOT
31588: PUSH
31589: LD_VAR 0 2
31593: NOT
31594: OR
31595: IFFALSE 31599
// exit ;
31597: GO 31795
// case engine of engine_solar :
31599: LD_VAR 0 2
31603: PUSH
31604: LD_INT 2
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31650
31612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31613: LD_ADDR_VAR 0 3
31617: PUSH
31618: LD_INT 11
31620: PUSH
31621: LD_INT 12
31623: PUSH
31624: LD_INT 13
31626: PUSH
31627: LD_INT 14
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: LD_INT 3
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: ST_TO_ADDR
31648: GO 31779
31650: LD_INT 1
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31720
31658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31659: LD_ADDR_VAR 0 3
31663: PUSH
31664: LD_INT 11
31666: PUSH
31667: LD_INT 12
31669: PUSH
31670: LD_INT 13
31672: PUSH
31673: LD_INT 14
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 3
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: LD_INT 5
31690: PUSH
31691: LD_INT 21
31693: PUSH
31694: LD_INT 23
31696: PUSH
31697: LD_INT 22
31699: PUSH
31700: LD_INT 24
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: ST_TO_ADDR
31718: GO 31779
31720: LD_INT 3
31722: DOUBLE
31723: EQUAL
31724: IFTRUE 31728
31726: GO 31778
31728: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31729: LD_ADDR_VAR 0 3
31733: PUSH
31734: LD_INT 13
31736: PUSH
31737: LD_INT 14
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 4
31748: PUSH
31749: LD_INT 5
31751: PUSH
31752: LD_INT 21
31754: PUSH
31755: LD_INT 22
31757: PUSH
31758: LD_INT 23
31760: PUSH
31761: LD_INT 24
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: ST_TO_ADDR
31776: GO 31779
31778: POP
// result := ( chassis in result ) ;
31779: LD_ADDR_VAR 0 3
31783: PUSH
31784: LD_VAR 0 1
31788: PUSH
31789: LD_VAR 0 3
31793: IN
31794: ST_TO_ADDR
// end ;
31795: LD_VAR 0 3
31799: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31800: LD_INT 0
31802: PPUSH
// if not chassis or not weapon then
31803: LD_VAR 0 1
31807: NOT
31808: PUSH
31809: LD_VAR 0 2
31813: NOT
31814: OR
31815: IFFALSE 31819
// exit ;
31817: GO 32881
// case weapon of us_machine_gun :
31819: LD_VAR 0 2
31823: PUSH
31824: LD_INT 2
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31832
31830: GO 31862
31832: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31833: LD_ADDR_VAR 0 3
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 3
31846: PUSH
31847: LD_INT 4
31849: PUSH
31850: LD_INT 5
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: ST_TO_ADDR
31860: GO 32865
31862: LD_INT 3
31864: DOUBLE
31865: EQUAL
31866: IFTRUE 31870
31868: GO 31900
31870: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31871: LD_ADDR_VAR 0 3
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: LD_INT 4
31887: PUSH
31888: LD_INT 5
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: ST_TO_ADDR
31898: GO 32865
31900: LD_INT 11
31902: DOUBLE
31903: EQUAL
31904: IFTRUE 31908
31906: GO 31938
31908: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: LD_INT 4
31925: PUSH
31926: LD_INT 5
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: ST_TO_ADDR
31936: GO 32865
31938: LD_INT 4
31940: DOUBLE
31941: EQUAL
31942: IFTRUE 31946
31944: GO 31972
31946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31947: LD_ADDR_VAR 0 3
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: LD_INT 3
31957: PUSH
31958: LD_INT 4
31960: PUSH
31961: LD_INT 5
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
31970: GO 32865
31972: LD_INT 5
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 32006
31980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31981: LD_ADDR_VAR 0 3
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: ST_TO_ADDR
32004: GO 32865
32006: LD_INT 9
32008: DOUBLE
32009: EQUAL
32010: IFTRUE 32014
32012: GO 32040
32014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32015: LD_ADDR_VAR 0 3
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: LD_INT 4
32028: PUSH
32029: LD_INT 5
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
32038: GO 32865
32040: LD_INT 7
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32074
32048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32049: LD_ADDR_VAR 0 3
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 3
32059: PUSH
32060: LD_INT 4
32062: PUSH
32063: LD_INT 5
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: ST_TO_ADDR
32072: GO 32865
32074: LD_INT 12
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32108
32082: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32083: LD_ADDR_VAR 0 3
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: LD_INT 5
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
32106: GO 32865
32108: LD_INT 13
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32142
32116: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: LD_INT 4
32130: PUSH
32131: LD_INT 5
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: ST_TO_ADDR
32140: GO 32865
32142: LD_INT 14
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32168
32150: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32151: LD_ADDR_VAR 0 3
32155: PUSH
32156: LD_INT 4
32158: PUSH
32159: LD_INT 5
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: ST_TO_ADDR
32166: GO 32865
32168: LD_INT 6
32170: DOUBLE
32171: EQUAL
32172: IFTRUE 32176
32174: GO 32194
32176: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32177: LD_ADDR_VAR 0 3
32181: PUSH
32182: LD_INT 4
32184: PUSH
32185: LD_INT 5
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: ST_TO_ADDR
32192: GO 32865
32194: LD_INT 10
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32220
32202: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32203: LD_ADDR_VAR 0 3
32207: PUSH
32208: LD_INT 4
32210: PUSH
32211: LD_INT 5
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: ST_TO_ADDR
32218: GO 32865
32220: LD_INT 22
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32254
32228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32229: LD_ADDR_VAR 0 3
32233: PUSH
32234: LD_INT 11
32236: PUSH
32237: LD_INT 12
32239: PUSH
32240: LD_INT 13
32242: PUSH
32243: LD_INT 14
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: ST_TO_ADDR
32252: GO 32865
32254: LD_INT 23
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32288
32262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32263: LD_ADDR_VAR 0 3
32267: PUSH
32268: LD_INT 11
32270: PUSH
32271: LD_INT 12
32273: PUSH
32274: LD_INT 13
32276: PUSH
32277: LD_INT 14
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: ST_TO_ADDR
32286: GO 32865
32288: LD_INT 24
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32322
32296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32297: LD_ADDR_VAR 0 3
32301: PUSH
32302: LD_INT 11
32304: PUSH
32305: LD_INT 12
32307: PUSH
32308: LD_INT 13
32310: PUSH
32311: LD_INT 14
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: ST_TO_ADDR
32320: GO 32865
32322: LD_INT 30
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32356
32330: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32331: LD_ADDR_VAR 0 3
32335: PUSH
32336: LD_INT 11
32338: PUSH
32339: LD_INT 12
32341: PUSH
32342: LD_INT 13
32344: PUSH
32345: LD_INT 14
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
32354: GO 32865
32356: LD_INT 25
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32382
32364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32365: LD_ADDR_VAR 0 3
32369: PUSH
32370: LD_INT 13
32372: PUSH
32373: LD_INT 14
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: ST_TO_ADDR
32380: GO 32865
32382: LD_INT 27
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32408
32390: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32391: LD_ADDR_VAR 0 3
32395: PUSH
32396: LD_INT 13
32398: PUSH
32399: LD_INT 14
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: ST_TO_ADDR
32406: GO 32865
32408: LD_EXP 101
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32444
32418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32419: LD_ADDR_VAR 0 3
32423: PUSH
32424: LD_INT 11
32426: PUSH
32427: LD_INT 12
32429: PUSH
32430: LD_INT 13
32432: PUSH
32433: LD_INT 14
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: ST_TO_ADDR
32442: GO 32865
32444: LD_INT 28
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32470
32452: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32453: LD_ADDR_VAR 0 3
32457: PUSH
32458: LD_INT 13
32460: PUSH
32461: LD_INT 14
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: ST_TO_ADDR
32468: GO 32865
32470: LD_INT 29
32472: DOUBLE
32473: EQUAL
32474: IFTRUE 32478
32476: GO 32496
32478: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_INT 13
32486: PUSH
32487: LD_INT 14
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: ST_TO_ADDR
32494: GO 32865
32496: LD_INT 31
32498: DOUBLE
32499: EQUAL
32500: IFTRUE 32504
32502: GO 32522
32504: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32505: LD_ADDR_VAR 0 3
32509: PUSH
32510: LD_INT 13
32512: PUSH
32513: LD_INT 14
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: ST_TO_ADDR
32520: GO 32865
32522: LD_INT 26
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32530
32528: GO 32548
32530: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32531: LD_ADDR_VAR 0 3
32535: PUSH
32536: LD_INT 13
32538: PUSH
32539: LD_INT 14
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: ST_TO_ADDR
32546: GO 32865
32548: LD_INT 42
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32582
32556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_INT 21
32564: PUSH
32565: LD_INT 22
32567: PUSH
32568: LD_INT 23
32570: PUSH
32571: LD_INT 24
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
32580: GO 32865
32582: LD_INT 43
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32590
32588: GO 32616
32590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32591: LD_ADDR_VAR 0 3
32595: PUSH
32596: LD_INT 21
32598: PUSH
32599: LD_INT 22
32601: PUSH
32602: LD_INT 23
32604: PUSH
32605: LD_INT 24
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
32614: GO 32865
32616: LD_INT 44
32618: DOUBLE
32619: EQUAL
32620: IFTRUE 32624
32622: GO 32650
32624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32625: LD_ADDR_VAR 0 3
32629: PUSH
32630: LD_INT 21
32632: PUSH
32633: LD_INT 22
32635: PUSH
32636: LD_INT 23
32638: PUSH
32639: LD_INT 24
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
32648: GO 32865
32650: LD_INT 45
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32658
32656: GO 32684
32658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_INT 21
32666: PUSH
32667: LD_INT 22
32669: PUSH
32670: LD_INT 23
32672: PUSH
32673: LD_INT 24
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: ST_TO_ADDR
32682: GO 32865
32684: LD_INT 49
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32692
32690: GO 32718
32692: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32693: LD_ADDR_VAR 0 3
32697: PUSH
32698: LD_INT 21
32700: PUSH
32701: LD_INT 22
32703: PUSH
32704: LD_INT 23
32706: PUSH
32707: LD_INT 24
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: ST_TO_ADDR
32716: GO 32865
32718: LD_INT 51
32720: DOUBLE
32721: EQUAL
32722: IFTRUE 32726
32724: GO 32752
32726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32727: LD_ADDR_VAR 0 3
32731: PUSH
32732: LD_INT 21
32734: PUSH
32735: LD_INT 22
32737: PUSH
32738: LD_INT 23
32740: PUSH
32741: LD_INT 24
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: ST_TO_ADDR
32750: GO 32865
32752: LD_INT 52
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32786
32760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32761: LD_ADDR_VAR 0 3
32765: PUSH
32766: LD_INT 21
32768: PUSH
32769: LD_INT 22
32771: PUSH
32772: LD_INT 23
32774: PUSH
32775: LD_INT 24
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: ST_TO_ADDR
32784: GO 32865
32786: LD_INT 53
32788: DOUBLE
32789: EQUAL
32790: IFTRUE 32794
32792: GO 32812
32794: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32795: LD_ADDR_VAR 0 3
32799: PUSH
32800: LD_INT 23
32802: PUSH
32803: LD_INT 24
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: ST_TO_ADDR
32810: GO 32865
32812: LD_INT 46
32814: DOUBLE
32815: EQUAL
32816: IFTRUE 32820
32818: GO 32838
32820: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32821: LD_ADDR_VAR 0 3
32825: PUSH
32826: LD_INT 23
32828: PUSH
32829: LD_INT 24
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: ST_TO_ADDR
32836: GO 32865
32838: LD_INT 47
32840: DOUBLE
32841: EQUAL
32842: IFTRUE 32846
32844: GO 32864
32846: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32847: LD_ADDR_VAR 0 3
32851: PUSH
32852: LD_INT 23
32854: PUSH
32855: LD_INT 24
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: ST_TO_ADDR
32862: GO 32865
32864: POP
// result := ( chassis in result ) ;
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_VAR 0 1
32874: PUSH
32875: LD_VAR 0 3
32879: IN
32880: ST_TO_ADDR
// end ;
32881: LD_VAR 0 3
32885: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32886: LD_INT 0
32888: PPUSH
32889: PPUSH
32890: PPUSH
32891: PPUSH
32892: PPUSH
32893: PPUSH
32894: PPUSH
// result := array ;
32895: LD_ADDR_VAR 0 5
32899: PUSH
32900: LD_VAR 0 1
32904: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32905: LD_VAR 0 1
32909: NOT
32910: PUSH
32911: LD_VAR 0 2
32915: NOT
32916: OR
32917: PUSH
32918: LD_VAR 0 3
32922: NOT
32923: OR
32924: PUSH
32925: LD_VAR 0 2
32929: PUSH
32930: LD_VAR 0 1
32934: GREATER
32935: OR
32936: PUSH
32937: LD_VAR 0 3
32941: PUSH
32942: LD_VAR 0 1
32946: GREATER
32947: OR
32948: IFFALSE 32952
// exit ;
32950: GO 33248
// if direction then
32952: LD_VAR 0 4
32956: IFFALSE 33020
// begin d := 1 ;
32958: LD_ADDR_VAR 0 9
32962: PUSH
32963: LD_INT 1
32965: ST_TO_ADDR
// if i_from > i_to then
32966: LD_VAR 0 2
32970: PUSH
32971: LD_VAR 0 3
32975: GREATER
32976: IFFALSE 33002
// length := ( array - i_from ) + i_to else
32978: LD_ADDR_VAR 0 11
32982: PUSH
32983: LD_VAR 0 1
32987: PUSH
32988: LD_VAR 0 2
32992: MINUS
32993: PUSH
32994: LD_VAR 0 3
32998: PLUS
32999: ST_TO_ADDR
33000: GO 33018
// length := i_to - i_from ;
33002: LD_ADDR_VAR 0 11
33006: PUSH
33007: LD_VAR 0 3
33011: PUSH
33012: LD_VAR 0 2
33016: MINUS
33017: ST_TO_ADDR
// end else
33018: GO 33081
// begin d := - 1 ;
33020: LD_ADDR_VAR 0 9
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: ST_TO_ADDR
// if i_from > i_to then
33029: LD_VAR 0 2
33033: PUSH
33034: LD_VAR 0 3
33038: GREATER
33039: IFFALSE 33059
// length := i_from - i_to else
33041: LD_ADDR_VAR 0 11
33045: PUSH
33046: LD_VAR 0 2
33050: PUSH
33051: LD_VAR 0 3
33055: MINUS
33056: ST_TO_ADDR
33057: GO 33081
// length := ( array - i_to ) + i_from ;
33059: LD_ADDR_VAR 0 11
33063: PUSH
33064: LD_VAR 0 1
33068: PUSH
33069: LD_VAR 0 3
33073: MINUS
33074: PUSH
33075: LD_VAR 0 2
33079: PLUS
33080: ST_TO_ADDR
// end ; if not length then
33081: LD_VAR 0 11
33085: NOT
33086: IFFALSE 33090
// exit ;
33088: GO 33248
// tmp := array ;
33090: LD_ADDR_VAR 0 10
33094: PUSH
33095: LD_VAR 0 1
33099: ST_TO_ADDR
// for i = 1 to length do
33100: LD_ADDR_VAR 0 6
33104: PUSH
33105: DOUBLE
33106: LD_INT 1
33108: DEC
33109: ST_TO_ADDR
33110: LD_VAR 0 11
33114: PUSH
33115: FOR_TO
33116: IFFALSE 33236
// begin for j = 1 to array do
33118: LD_ADDR_VAR 0 7
33122: PUSH
33123: DOUBLE
33124: LD_INT 1
33126: DEC
33127: ST_TO_ADDR
33128: LD_VAR 0 1
33132: PUSH
33133: FOR_TO
33134: IFFALSE 33222
// begin k := j + d ;
33136: LD_ADDR_VAR 0 8
33140: PUSH
33141: LD_VAR 0 7
33145: PUSH
33146: LD_VAR 0 9
33150: PLUS
33151: ST_TO_ADDR
// if k > array then
33152: LD_VAR 0 8
33156: PUSH
33157: LD_VAR 0 1
33161: GREATER
33162: IFFALSE 33172
// k := 1 ;
33164: LD_ADDR_VAR 0 8
33168: PUSH
33169: LD_INT 1
33171: ST_TO_ADDR
// if not k then
33172: LD_VAR 0 8
33176: NOT
33177: IFFALSE 33189
// k := array ;
33179: LD_ADDR_VAR 0 8
33183: PUSH
33184: LD_VAR 0 1
33188: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33189: LD_ADDR_VAR 0 10
33193: PUSH
33194: LD_VAR 0 10
33198: PPUSH
33199: LD_VAR 0 8
33203: PPUSH
33204: LD_VAR 0 1
33208: PUSH
33209: LD_VAR 0 7
33213: ARRAY
33214: PPUSH
33215: CALL_OW 1
33219: ST_TO_ADDR
// end ;
33220: GO 33133
33222: POP
33223: POP
// array := tmp ;
33224: LD_ADDR_VAR 0 1
33228: PUSH
33229: LD_VAR 0 10
33233: ST_TO_ADDR
// end ;
33234: GO 33115
33236: POP
33237: POP
// result := array ;
33238: LD_ADDR_VAR 0 5
33242: PUSH
33243: LD_VAR 0 1
33247: ST_TO_ADDR
// end ;
33248: LD_VAR 0 5
33252: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33253: LD_INT 0
33255: PPUSH
33256: PPUSH
// result := 0 ;
33257: LD_ADDR_VAR 0 3
33261: PUSH
33262: LD_INT 0
33264: ST_TO_ADDR
// if not array or not value in array then
33265: LD_VAR 0 1
33269: NOT
33270: PUSH
33271: LD_VAR 0 2
33275: PUSH
33276: LD_VAR 0 1
33280: IN
33281: NOT
33282: OR
33283: IFFALSE 33287
// exit ;
33285: GO 33341
// for i = 1 to array do
33287: LD_ADDR_VAR 0 4
33291: PUSH
33292: DOUBLE
33293: LD_INT 1
33295: DEC
33296: ST_TO_ADDR
33297: LD_VAR 0 1
33301: PUSH
33302: FOR_TO
33303: IFFALSE 33339
// if value = array [ i ] then
33305: LD_VAR 0 2
33309: PUSH
33310: LD_VAR 0 1
33314: PUSH
33315: LD_VAR 0 4
33319: ARRAY
33320: EQUAL
33321: IFFALSE 33337
// begin result := i ;
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_VAR 0 4
33332: ST_TO_ADDR
// exit ;
33333: POP
33334: POP
33335: GO 33341
// end ;
33337: GO 33302
33339: POP
33340: POP
// end ;
33341: LD_VAR 0 3
33345: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33346: LD_INT 0
33348: PPUSH
// vc_chassis := chassis ;
33349: LD_ADDR_OWVAR 37
33353: PUSH
33354: LD_VAR 0 1
33358: ST_TO_ADDR
// vc_engine := engine ;
33359: LD_ADDR_OWVAR 39
33363: PUSH
33364: LD_VAR 0 2
33368: ST_TO_ADDR
// vc_control := control ;
33369: LD_ADDR_OWVAR 38
33373: PUSH
33374: LD_VAR 0 3
33378: ST_TO_ADDR
// vc_weapon := weapon ;
33379: LD_ADDR_OWVAR 40
33383: PUSH
33384: LD_VAR 0 4
33388: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33389: LD_ADDR_OWVAR 41
33393: PUSH
33394: LD_VAR 0 5
33398: ST_TO_ADDR
// end ;
33399: LD_VAR 0 6
33403: RET
// export function WantPlant ( unit ) ; var task ; begin
33404: LD_INT 0
33406: PPUSH
33407: PPUSH
// result := false ;
33408: LD_ADDR_VAR 0 2
33412: PUSH
33413: LD_INT 0
33415: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33416: LD_ADDR_VAR 0 3
33420: PUSH
33421: LD_VAR 0 1
33425: PPUSH
33426: CALL_OW 437
33430: ST_TO_ADDR
// if task then
33431: LD_VAR 0 3
33435: IFFALSE 33463
// if task [ 1 ] [ 1 ] = p then
33437: LD_VAR 0 3
33441: PUSH
33442: LD_INT 1
33444: ARRAY
33445: PUSH
33446: LD_INT 1
33448: ARRAY
33449: PUSH
33450: LD_STRING p
33452: EQUAL
33453: IFFALSE 33463
// result := true ;
33455: LD_ADDR_VAR 0 2
33459: PUSH
33460: LD_INT 1
33462: ST_TO_ADDR
// end ;
33463: LD_VAR 0 2
33467: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33468: LD_INT 0
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
// if pos < 1 then
33474: LD_VAR 0 2
33478: PUSH
33479: LD_INT 1
33481: LESS
33482: IFFALSE 33486
// exit ;
33484: GO 33789
// if pos = 1 then
33486: LD_VAR 0 2
33490: PUSH
33491: LD_INT 1
33493: EQUAL
33494: IFFALSE 33527
// result := Replace ( arr , pos [ 1 ] , value ) else
33496: LD_ADDR_VAR 0 4
33500: PUSH
33501: LD_VAR 0 1
33505: PPUSH
33506: LD_VAR 0 2
33510: PUSH
33511: LD_INT 1
33513: ARRAY
33514: PPUSH
33515: LD_VAR 0 3
33519: PPUSH
33520: CALL_OW 1
33524: ST_TO_ADDR
33525: GO 33789
// begin tmp := arr ;
33527: LD_ADDR_VAR 0 6
33531: PUSH
33532: LD_VAR 0 1
33536: ST_TO_ADDR
// s_arr := [ tmp ] ;
33537: LD_ADDR_VAR 0 7
33541: PUSH
33542: LD_VAR 0 6
33546: PUSH
33547: EMPTY
33548: LIST
33549: ST_TO_ADDR
// for i = 1 to pos - 1 do
33550: LD_ADDR_VAR 0 5
33554: PUSH
33555: DOUBLE
33556: LD_INT 1
33558: DEC
33559: ST_TO_ADDR
33560: LD_VAR 0 2
33564: PUSH
33565: LD_INT 1
33567: MINUS
33568: PUSH
33569: FOR_TO
33570: IFFALSE 33615
// begin tmp := tmp [ pos [ i ] ] ;
33572: LD_ADDR_VAR 0 6
33576: PUSH
33577: LD_VAR 0 6
33581: PUSH
33582: LD_VAR 0 2
33586: PUSH
33587: LD_VAR 0 5
33591: ARRAY
33592: ARRAY
33593: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33594: LD_ADDR_VAR 0 7
33598: PUSH
33599: LD_VAR 0 7
33603: PUSH
33604: LD_VAR 0 6
33608: PUSH
33609: EMPTY
33610: LIST
33611: ADD
33612: ST_TO_ADDR
// end ;
33613: GO 33569
33615: POP
33616: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33617: LD_ADDR_VAR 0 6
33621: PUSH
33622: LD_VAR 0 6
33626: PPUSH
33627: LD_VAR 0 2
33631: PUSH
33632: LD_VAR 0 2
33636: ARRAY
33637: PPUSH
33638: LD_VAR 0 3
33642: PPUSH
33643: CALL_OW 1
33647: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33648: LD_ADDR_VAR 0 7
33652: PUSH
33653: LD_VAR 0 7
33657: PPUSH
33658: LD_VAR 0 7
33662: PPUSH
33663: LD_VAR 0 6
33667: PPUSH
33668: CALL_OW 1
33672: ST_TO_ADDR
// for i = s_arr downto 2 do
33673: LD_ADDR_VAR 0 5
33677: PUSH
33678: DOUBLE
33679: LD_VAR 0 7
33683: INC
33684: ST_TO_ADDR
33685: LD_INT 2
33687: PUSH
33688: FOR_DOWNTO
33689: IFFALSE 33773
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33691: LD_ADDR_VAR 0 6
33695: PUSH
33696: LD_VAR 0 7
33700: PUSH
33701: LD_VAR 0 5
33705: PUSH
33706: LD_INT 1
33708: MINUS
33709: ARRAY
33710: PPUSH
33711: LD_VAR 0 2
33715: PUSH
33716: LD_VAR 0 5
33720: PUSH
33721: LD_INT 1
33723: MINUS
33724: ARRAY
33725: PPUSH
33726: LD_VAR 0 7
33730: PUSH
33731: LD_VAR 0 5
33735: ARRAY
33736: PPUSH
33737: CALL_OW 1
33741: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33742: LD_ADDR_VAR 0 7
33746: PUSH
33747: LD_VAR 0 7
33751: PPUSH
33752: LD_VAR 0 5
33756: PUSH
33757: LD_INT 1
33759: MINUS
33760: PPUSH
33761: LD_VAR 0 6
33765: PPUSH
33766: CALL_OW 1
33770: ST_TO_ADDR
// end ;
33771: GO 33688
33773: POP
33774: POP
// result := s_arr [ 1 ] ;
33775: LD_ADDR_VAR 0 4
33779: PUSH
33780: LD_VAR 0 7
33784: PUSH
33785: LD_INT 1
33787: ARRAY
33788: ST_TO_ADDR
// end ; end ;
33789: LD_VAR 0 4
33793: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33794: LD_INT 0
33796: PPUSH
33797: PPUSH
// if not list then
33798: LD_VAR 0 1
33802: NOT
33803: IFFALSE 33807
// exit ;
33805: GO 33898
// i := list [ pos1 ] ;
33807: LD_ADDR_VAR 0 5
33811: PUSH
33812: LD_VAR 0 1
33816: PUSH
33817: LD_VAR 0 2
33821: ARRAY
33822: ST_TO_ADDR
// if not i then
33823: LD_VAR 0 5
33827: NOT
33828: IFFALSE 33832
// exit ;
33830: GO 33898
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33832: LD_ADDR_VAR 0 1
33836: PUSH
33837: LD_VAR 0 1
33841: PPUSH
33842: LD_VAR 0 2
33846: PPUSH
33847: LD_VAR 0 1
33851: PUSH
33852: LD_VAR 0 3
33856: ARRAY
33857: PPUSH
33858: CALL_OW 1
33862: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33863: LD_ADDR_VAR 0 1
33867: PUSH
33868: LD_VAR 0 1
33872: PPUSH
33873: LD_VAR 0 3
33877: PPUSH
33878: LD_VAR 0 5
33882: PPUSH
33883: CALL_OW 1
33887: ST_TO_ADDR
// result := list ;
33888: LD_ADDR_VAR 0 4
33892: PUSH
33893: LD_VAR 0 1
33897: ST_TO_ADDR
// end ;
33898: LD_VAR 0 4
33902: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33903: LD_INT 0
33905: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33906: LD_ADDR_VAR 0 5
33910: PUSH
33911: LD_VAR 0 1
33915: PPUSH
33916: CALL_OW 250
33920: PPUSH
33921: LD_VAR 0 1
33925: PPUSH
33926: CALL_OW 251
33930: PPUSH
33931: LD_VAR 0 2
33935: PPUSH
33936: LD_VAR 0 3
33940: PPUSH
33941: LD_VAR 0 4
33945: PPUSH
33946: CALL 33956 0 5
33950: ST_TO_ADDR
// end ;
33951: LD_VAR 0 5
33955: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33956: LD_INT 0
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
// if not list then
33962: LD_VAR 0 3
33966: NOT
33967: IFFALSE 33971
// exit ;
33969: GO 34359
// result := [ ] ;
33971: LD_ADDR_VAR 0 6
33975: PUSH
33976: EMPTY
33977: ST_TO_ADDR
// for i in list do
33978: LD_ADDR_VAR 0 7
33982: PUSH
33983: LD_VAR 0 3
33987: PUSH
33988: FOR_IN
33989: IFFALSE 34191
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33991: LD_ADDR_VAR 0 9
33995: PUSH
33996: LD_VAR 0 7
34000: PPUSH
34001: LD_VAR 0 1
34005: PPUSH
34006: LD_VAR 0 2
34010: PPUSH
34011: CALL_OW 297
34015: ST_TO_ADDR
// if not result then
34016: LD_VAR 0 6
34020: NOT
34021: IFFALSE 34047
// result := [ [ i , tmp ] ] else
34023: LD_ADDR_VAR 0 6
34027: PUSH
34028: LD_VAR 0 7
34032: PUSH
34033: LD_VAR 0 9
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: EMPTY
34043: LIST
34044: ST_TO_ADDR
34045: GO 34189
// begin if result [ result ] [ 2 ] < tmp then
34047: LD_VAR 0 6
34051: PUSH
34052: LD_VAR 0 6
34056: ARRAY
34057: PUSH
34058: LD_INT 2
34060: ARRAY
34061: PUSH
34062: LD_VAR 0 9
34066: LESS
34067: IFFALSE 34109
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34069: LD_ADDR_VAR 0 6
34073: PUSH
34074: LD_VAR 0 6
34078: PPUSH
34079: LD_VAR 0 6
34083: PUSH
34084: LD_INT 1
34086: PLUS
34087: PPUSH
34088: LD_VAR 0 7
34092: PUSH
34093: LD_VAR 0 9
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PPUSH
34102: CALL_OW 2
34106: ST_TO_ADDR
34107: GO 34189
// for j = 1 to result do
34109: LD_ADDR_VAR 0 8
34113: PUSH
34114: DOUBLE
34115: LD_INT 1
34117: DEC
34118: ST_TO_ADDR
34119: LD_VAR 0 6
34123: PUSH
34124: FOR_TO
34125: IFFALSE 34187
// begin if tmp < result [ j ] [ 2 ] then
34127: LD_VAR 0 9
34131: PUSH
34132: LD_VAR 0 6
34136: PUSH
34137: LD_VAR 0 8
34141: ARRAY
34142: PUSH
34143: LD_INT 2
34145: ARRAY
34146: LESS
34147: IFFALSE 34185
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34149: LD_ADDR_VAR 0 6
34153: PUSH
34154: LD_VAR 0 6
34158: PPUSH
34159: LD_VAR 0 8
34163: PPUSH
34164: LD_VAR 0 7
34168: PUSH
34169: LD_VAR 0 9
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PPUSH
34178: CALL_OW 2
34182: ST_TO_ADDR
// break ;
34183: GO 34187
// end ; end ;
34185: GO 34124
34187: POP
34188: POP
// end ; end ;
34189: GO 33988
34191: POP
34192: POP
// if result and not asc then
34193: LD_VAR 0 6
34197: PUSH
34198: LD_VAR 0 4
34202: NOT
34203: AND
34204: IFFALSE 34279
// begin tmp := result ;
34206: LD_ADDR_VAR 0 9
34210: PUSH
34211: LD_VAR 0 6
34215: ST_TO_ADDR
// for i = tmp downto 1 do
34216: LD_ADDR_VAR 0 7
34220: PUSH
34221: DOUBLE
34222: LD_VAR 0 9
34226: INC
34227: ST_TO_ADDR
34228: LD_INT 1
34230: PUSH
34231: FOR_DOWNTO
34232: IFFALSE 34277
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34234: LD_ADDR_VAR 0 6
34238: PUSH
34239: LD_VAR 0 6
34243: PPUSH
34244: LD_VAR 0 9
34248: PUSH
34249: LD_VAR 0 7
34253: MINUS
34254: PUSH
34255: LD_INT 1
34257: PLUS
34258: PPUSH
34259: LD_VAR 0 9
34263: PUSH
34264: LD_VAR 0 7
34268: ARRAY
34269: PPUSH
34270: CALL_OW 1
34274: ST_TO_ADDR
34275: GO 34231
34277: POP
34278: POP
// end ; tmp := [ ] ;
34279: LD_ADDR_VAR 0 9
34283: PUSH
34284: EMPTY
34285: ST_TO_ADDR
// if mode then
34286: LD_VAR 0 5
34290: IFFALSE 34359
// begin for i = 1 to result do
34292: LD_ADDR_VAR 0 7
34296: PUSH
34297: DOUBLE
34298: LD_INT 1
34300: DEC
34301: ST_TO_ADDR
34302: LD_VAR 0 6
34306: PUSH
34307: FOR_TO
34308: IFFALSE 34347
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34310: LD_ADDR_VAR 0 9
34314: PUSH
34315: LD_VAR 0 9
34319: PPUSH
34320: LD_VAR 0 7
34324: PPUSH
34325: LD_VAR 0 6
34329: PUSH
34330: LD_VAR 0 7
34334: ARRAY
34335: PUSH
34336: LD_INT 1
34338: ARRAY
34339: PPUSH
34340: CALL_OW 1
34344: ST_TO_ADDR
34345: GO 34307
34347: POP
34348: POP
// result := tmp ;
34349: LD_ADDR_VAR 0 6
34353: PUSH
34354: LD_VAR 0 9
34358: ST_TO_ADDR
// end ; end ;
34359: LD_VAR 0 6
34363: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34364: LD_INT 0
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34372: LD_ADDR_VAR 0 5
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: ST_TO_ADDR
// if not x or not y then
34394: LD_VAR 0 2
34398: NOT
34399: PUSH
34400: LD_VAR 0 3
34404: NOT
34405: OR
34406: IFFALSE 34410
// exit ;
34408: GO 36062
// if not range then
34410: LD_VAR 0 4
34414: NOT
34415: IFFALSE 34425
// range := 10 ;
34417: LD_ADDR_VAR 0 4
34421: PUSH
34422: LD_INT 10
34424: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34425: LD_ADDR_VAR 0 8
34429: PUSH
34430: LD_INT 81
34432: PUSH
34433: LD_VAR 0 1
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 92
34444: PUSH
34445: LD_VAR 0 2
34449: PUSH
34450: LD_VAR 0 3
34454: PUSH
34455: LD_VAR 0 4
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 3
34468: PUSH
34469: LD_INT 21
34471: PUSH
34472: LD_INT 3
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: PPUSH
34488: CALL_OW 69
34492: ST_TO_ADDR
// if not tmp then
34493: LD_VAR 0 8
34497: NOT
34498: IFFALSE 34502
// exit ;
34500: GO 36062
// for i in tmp do
34502: LD_ADDR_VAR 0 6
34506: PUSH
34507: LD_VAR 0 8
34511: PUSH
34512: FOR_IN
34513: IFFALSE 36037
// begin points := [ 0 , 0 , 0 ] ;
34515: LD_ADDR_VAR 0 9
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// bpoints := 1 ;
34534: LD_ADDR_VAR 0 10
34538: PUSH
34539: LD_INT 1
34541: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34542: LD_VAR 0 6
34546: PPUSH
34547: CALL_OW 247
34551: PUSH
34552: LD_INT 1
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34560
34558: GO 35138
34560: POP
// begin if GetClass ( i ) = 1 then
34561: LD_VAR 0 6
34565: PPUSH
34566: CALL_OW 257
34570: PUSH
34571: LD_INT 1
34573: EQUAL
34574: IFFALSE 34595
// points := [ 10 , 5 , 3 ] ;
34576: LD_ADDR_VAR 0 9
34580: PUSH
34581: LD_INT 10
34583: PUSH
34584: LD_INT 5
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34595: LD_VAR 0 6
34599: PPUSH
34600: CALL_OW 257
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 3
34610: PUSH
34611: LD_INT 4
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: IN
34619: IFFALSE 34640
// points := [ 3 , 2 , 1 ] ;
34621: LD_ADDR_VAR 0 9
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34640: LD_VAR 0 6
34644: PPUSH
34645: CALL_OW 257
34649: PUSH
34650: LD_INT 5
34652: EQUAL
34653: IFFALSE 34674
// points := [ 130 , 5 , 2 ] ;
34655: LD_ADDR_VAR 0 9
34659: PUSH
34660: LD_INT 130
34662: PUSH
34663: LD_INT 5
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34674: LD_VAR 0 6
34678: PPUSH
34679: CALL_OW 257
34683: PUSH
34684: LD_INT 8
34686: EQUAL
34687: IFFALSE 34708
// points := [ 35 , 35 , 30 ] ;
34689: LD_ADDR_VAR 0 9
34693: PUSH
34694: LD_INT 35
34696: PUSH
34697: LD_INT 35
34699: PUSH
34700: LD_INT 30
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: LIST
34707: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34708: LD_VAR 0 6
34712: PPUSH
34713: CALL_OW 257
34717: PUSH
34718: LD_INT 9
34720: EQUAL
34721: IFFALSE 34742
// points := [ 20 , 55 , 40 ] ;
34723: LD_ADDR_VAR 0 9
34727: PUSH
34728: LD_INT 20
34730: PUSH
34731: LD_INT 55
34733: PUSH
34734: LD_INT 40
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34742: LD_VAR 0 6
34746: PPUSH
34747: CALL_OW 257
34751: PUSH
34752: LD_INT 12
34754: PUSH
34755: LD_INT 16
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: IN
34762: IFFALSE 34783
// points := [ 5 , 3 , 2 ] ;
34764: LD_ADDR_VAR 0 9
34768: PUSH
34769: LD_INT 5
34771: PUSH
34772: LD_INT 3
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34783: LD_VAR 0 6
34787: PPUSH
34788: CALL_OW 257
34792: PUSH
34793: LD_INT 17
34795: EQUAL
34796: IFFALSE 34817
// points := [ 100 , 50 , 75 ] ;
34798: LD_ADDR_VAR 0 9
34802: PUSH
34803: LD_INT 100
34805: PUSH
34806: LD_INT 50
34808: PUSH
34809: LD_INT 75
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34817: LD_VAR 0 6
34821: PPUSH
34822: CALL_OW 257
34826: PUSH
34827: LD_INT 15
34829: EQUAL
34830: IFFALSE 34851
// points := [ 10 , 5 , 3 ] ;
34832: LD_ADDR_VAR 0 9
34836: PUSH
34837: LD_INT 10
34839: PUSH
34840: LD_INT 5
34842: PUSH
34843: LD_INT 3
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34851: LD_VAR 0 6
34855: PPUSH
34856: CALL_OW 257
34860: PUSH
34861: LD_INT 14
34863: EQUAL
34864: IFFALSE 34885
// points := [ 10 , 0 , 0 ] ;
34866: LD_ADDR_VAR 0 9
34870: PUSH
34871: LD_INT 10
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34885: LD_VAR 0 6
34889: PPUSH
34890: CALL_OW 257
34894: PUSH
34895: LD_INT 11
34897: EQUAL
34898: IFFALSE 34919
// points := [ 30 , 10 , 5 ] ;
34900: LD_ADDR_VAR 0 9
34904: PUSH
34905: LD_INT 30
34907: PUSH
34908: LD_INT 10
34910: PUSH
34911: LD_INT 5
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34919: LD_VAR 0 1
34923: PPUSH
34924: LD_INT 5
34926: PPUSH
34927: CALL_OW 321
34931: PUSH
34932: LD_INT 2
34934: EQUAL
34935: IFFALSE 34952
// bpoints := bpoints * 1.8 ;
34937: LD_ADDR_VAR 0 10
34941: PUSH
34942: LD_VAR 0 10
34946: PUSH
34947: LD_REAL  1.80000000000000E+0000
34950: MUL
34951: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34952: LD_VAR 0 6
34956: PPUSH
34957: CALL_OW 257
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: IN
34980: PUSH
34981: LD_VAR 0 1
34985: PPUSH
34986: LD_INT 51
34988: PPUSH
34989: CALL_OW 321
34993: PUSH
34994: LD_INT 2
34996: EQUAL
34997: AND
34998: IFFALSE 35015
// bpoints := bpoints * 1.2 ;
35000: LD_ADDR_VAR 0 10
35004: PUSH
35005: LD_VAR 0 10
35009: PUSH
35010: LD_REAL  1.20000000000000E+0000
35013: MUL
35014: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35015: LD_VAR 0 6
35019: PPUSH
35020: CALL_OW 257
35024: PUSH
35025: LD_INT 5
35027: PUSH
35028: LD_INT 7
35030: PUSH
35031: LD_INT 9
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: IN
35039: PUSH
35040: LD_VAR 0 1
35044: PPUSH
35045: LD_INT 52
35047: PPUSH
35048: CALL_OW 321
35052: PUSH
35053: LD_INT 2
35055: EQUAL
35056: AND
35057: IFFALSE 35074
// bpoints := bpoints * 1.5 ;
35059: LD_ADDR_VAR 0 10
35063: PUSH
35064: LD_VAR 0 10
35068: PUSH
35069: LD_REAL  1.50000000000000E+0000
35072: MUL
35073: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35074: LD_VAR 0 1
35078: PPUSH
35079: LD_INT 66
35081: PPUSH
35082: CALL_OW 321
35086: PUSH
35087: LD_INT 2
35089: EQUAL
35090: IFFALSE 35107
// bpoints := bpoints * 1.1 ;
35092: LD_ADDR_VAR 0 10
35096: PUSH
35097: LD_VAR 0 10
35101: PUSH
35102: LD_REAL  1.10000000000000E+0000
35105: MUL
35106: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35107: LD_ADDR_VAR 0 10
35111: PUSH
35112: LD_VAR 0 10
35116: PUSH
35117: LD_VAR 0 6
35121: PPUSH
35122: LD_INT 1
35124: PPUSH
35125: CALL_OW 259
35129: PUSH
35130: LD_REAL  1.15000000000000E+0000
35133: MUL
35134: MUL
35135: ST_TO_ADDR
// end ; unit_vehicle :
35136: GO 35966
35138: LD_INT 2
35140: DOUBLE
35141: EQUAL
35142: IFTRUE 35146
35144: GO 35954
35146: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35147: LD_VAR 0 6
35151: PPUSH
35152: CALL_OW 264
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: LD_INT 42
35162: PUSH
35163: LD_INT 24
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: IN
35171: IFFALSE 35192
// points := [ 25 , 5 , 3 ] ;
35173: LD_ADDR_VAR 0 9
35177: PUSH
35178: LD_INT 25
35180: PUSH
35181: LD_INT 5
35183: PUSH
35184: LD_INT 3
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35192: LD_VAR 0 6
35196: PPUSH
35197: CALL_OW 264
35201: PUSH
35202: LD_INT 4
35204: PUSH
35205: LD_INT 43
35207: PUSH
35208: LD_INT 25
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: LIST
35215: IN
35216: IFFALSE 35237
// points := [ 40 , 15 , 5 ] ;
35218: LD_ADDR_VAR 0 9
35222: PUSH
35223: LD_INT 40
35225: PUSH
35226: LD_INT 15
35228: PUSH
35229: LD_INT 5
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35237: LD_VAR 0 6
35241: PPUSH
35242: CALL_OW 264
35246: PUSH
35247: LD_INT 3
35249: PUSH
35250: LD_INT 23
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: IN
35257: IFFALSE 35278
// points := [ 7 , 25 , 8 ] ;
35259: LD_ADDR_VAR 0 9
35263: PUSH
35264: LD_INT 7
35266: PUSH
35267: LD_INT 25
35269: PUSH
35270: LD_INT 8
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35278: LD_VAR 0 6
35282: PPUSH
35283: CALL_OW 264
35287: PUSH
35288: LD_INT 5
35290: PUSH
35291: LD_INT 27
35293: PUSH
35294: LD_INT 44
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: IN
35302: IFFALSE 35323
// points := [ 14 , 50 , 16 ] ;
35304: LD_ADDR_VAR 0 9
35308: PUSH
35309: LD_INT 14
35311: PUSH
35312: LD_INT 50
35314: PUSH
35315: LD_INT 16
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35323: LD_VAR 0 6
35327: PPUSH
35328: CALL_OW 264
35332: PUSH
35333: LD_INT 6
35335: PUSH
35336: LD_INT 46
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: IN
35343: IFFALSE 35364
// points := [ 32 , 120 , 70 ] ;
35345: LD_ADDR_VAR 0 9
35349: PUSH
35350: LD_INT 32
35352: PUSH
35353: LD_INT 120
35355: PUSH
35356: LD_INT 70
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35364: LD_VAR 0 6
35368: PPUSH
35369: CALL_OW 264
35373: PUSH
35374: LD_INT 7
35376: PUSH
35377: LD_INT 28
35379: PUSH
35380: LD_INT 45
35382: PUSH
35383: LD_EXP 101
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: IN
35394: IFFALSE 35415
// points := [ 35 , 20 , 45 ] ;
35396: LD_ADDR_VAR 0 9
35400: PUSH
35401: LD_INT 35
35403: PUSH
35404: LD_INT 20
35406: PUSH
35407: LD_INT 45
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35415: LD_VAR 0 6
35419: PPUSH
35420: CALL_OW 264
35424: PUSH
35425: LD_INT 47
35427: PUSH
35428: EMPTY
35429: LIST
35430: IN
35431: IFFALSE 35452
// points := [ 67 , 45 , 75 ] ;
35433: LD_ADDR_VAR 0 9
35437: PUSH
35438: LD_INT 67
35440: PUSH
35441: LD_INT 45
35443: PUSH
35444: LD_INT 75
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35452: LD_VAR 0 6
35456: PPUSH
35457: CALL_OW 264
35461: PUSH
35462: LD_INT 26
35464: PUSH
35465: EMPTY
35466: LIST
35467: IN
35468: IFFALSE 35489
// points := [ 120 , 30 , 80 ] ;
35470: LD_ADDR_VAR 0 9
35474: PUSH
35475: LD_INT 120
35477: PUSH
35478: LD_INT 30
35480: PUSH
35481: LD_INT 80
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35489: LD_VAR 0 6
35493: PPUSH
35494: CALL_OW 264
35498: PUSH
35499: LD_INT 22
35501: PUSH
35502: EMPTY
35503: LIST
35504: IN
35505: IFFALSE 35526
// points := [ 40 , 1 , 1 ] ;
35507: LD_ADDR_VAR 0 9
35511: PUSH
35512: LD_INT 40
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35526: LD_VAR 0 6
35530: PPUSH
35531: CALL_OW 264
35535: PUSH
35536: LD_INT 29
35538: PUSH
35539: EMPTY
35540: LIST
35541: IN
35542: IFFALSE 35563
// points := [ 70 , 200 , 400 ] ;
35544: LD_ADDR_VAR 0 9
35548: PUSH
35549: LD_INT 70
35551: PUSH
35552: LD_INT 200
35554: PUSH
35555: LD_INT 400
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35563: LD_VAR 0 6
35567: PPUSH
35568: CALL_OW 264
35572: PUSH
35573: LD_INT 14
35575: PUSH
35576: LD_INT 53
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: IN
35583: IFFALSE 35604
// points := [ 40 , 10 , 20 ] ;
35585: LD_ADDR_VAR 0 9
35589: PUSH
35590: LD_INT 40
35592: PUSH
35593: LD_INT 10
35595: PUSH
35596: LD_INT 20
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35604: LD_VAR 0 6
35608: PPUSH
35609: CALL_OW 264
35613: PUSH
35614: LD_INT 9
35616: PUSH
35617: EMPTY
35618: LIST
35619: IN
35620: IFFALSE 35641
// points := [ 5 , 70 , 20 ] ;
35622: LD_ADDR_VAR 0 9
35626: PUSH
35627: LD_INT 5
35629: PUSH
35630: LD_INT 70
35632: PUSH
35633: LD_INT 20
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35641: LD_VAR 0 6
35645: PPUSH
35646: CALL_OW 264
35650: PUSH
35651: LD_INT 10
35653: PUSH
35654: EMPTY
35655: LIST
35656: IN
35657: IFFALSE 35678
// points := [ 35 , 110 , 70 ] ;
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: LD_INT 35
35666: PUSH
35667: LD_INT 110
35669: PUSH
35670: LD_INT 70
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35678: LD_VAR 0 6
35682: PPUSH
35683: CALL_OW 265
35687: PUSH
35688: LD_INT 25
35690: EQUAL
35691: IFFALSE 35712
// points := [ 80 , 65 , 100 ] ;
35693: LD_ADDR_VAR 0 9
35697: PUSH
35698: LD_INT 80
35700: PUSH
35701: LD_INT 65
35703: PUSH
35704: LD_INT 100
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35712: LD_VAR 0 6
35716: PPUSH
35717: CALL_OW 263
35721: PUSH
35722: LD_INT 1
35724: EQUAL
35725: IFFALSE 35760
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35727: LD_ADDR_VAR 0 10
35731: PUSH
35732: LD_VAR 0 10
35736: PUSH
35737: LD_VAR 0 6
35741: PPUSH
35742: CALL_OW 311
35746: PPUSH
35747: LD_INT 3
35749: PPUSH
35750: CALL_OW 259
35754: PUSH
35755: LD_INT 4
35757: MUL
35758: MUL
35759: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35760: LD_VAR 0 6
35764: PPUSH
35765: CALL_OW 263
35769: PUSH
35770: LD_INT 2
35772: EQUAL
35773: IFFALSE 35824
// begin j := IsControledBy ( i ) ;
35775: LD_ADDR_VAR 0 7
35779: PUSH
35780: LD_VAR 0 6
35784: PPUSH
35785: CALL_OW 312
35789: ST_TO_ADDR
// if j then
35790: LD_VAR 0 7
35794: IFFALSE 35824
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35796: LD_ADDR_VAR 0 10
35800: PUSH
35801: LD_VAR 0 10
35805: PUSH
35806: LD_VAR 0 7
35810: PPUSH
35811: LD_INT 3
35813: PPUSH
35814: CALL_OW 259
35818: PUSH
35819: LD_INT 3
35821: MUL
35822: MUL
35823: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35824: LD_VAR 0 6
35828: PPUSH
35829: CALL_OW 264
35833: PUSH
35834: LD_INT 5
35836: PUSH
35837: LD_INT 6
35839: PUSH
35840: LD_INT 46
35842: PUSH
35843: LD_INT 44
35845: PUSH
35846: LD_INT 47
35848: PUSH
35849: LD_INT 45
35851: PUSH
35852: LD_INT 28
35854: PUSH
35855: LD_INT 7
35857: PUSH
35858: LD_INT 27
35860: PUSH
35861: LD_INT 29
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: IN
35876: PUSH
35877: LD_VAR 0 1
35881: PPUSH
35882: LD_INT 52
35884: PPUSH
35885: CALL_OW 321
35889: PUSH
35890: LD_INT 2
35892: EQUAL
35893: AND
35894: IFFALSE 35911
// bpoints := bpoints * 1.2 ;
35896: LD_ADDR_VAR 0 10
35900: PUSH
35901: LD_VAR 0 10
35905: PUSH
35906: LD_REAL  1.20000000000000E+0000
35909: MUL
35910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL_OW 264
35920: PUSH
35921: LD_INT 6
35923: PUSH
35924: LD_INT 46
35926: PUSH
35927: LD_INT 47
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: IN
35935: IFFALSE 35952
// bpoints := bpoints * 1.2 ;
35937: LD_ADDR_VAR 0 10
35941: PUSH
35942: LD_VAR 0 10
35946: PUSH
35947: LD_REAL  1.20000000000000E+0000
35950: MUL
35951: ST_TO_ADDR
// end ; unit_building :
35952: GO 35966
35954: LD_INT 3
35956: DOUBLE
35957: EQUAL
35958: IFTRUE 35962
35960: GO 35965
35962: POP
// ; end ;
35963: GO 35966
35965: POP
// for j = 1 to 3 do
35966: LD_ADDR_VAR 0 7
35970: PUSH
35971: DOUBLE
35972: LD_INT 1
35974: DEC
35975: ST_TO_ADDR
35976: LD_INT 3
35978: PUSH
35979: FOR_TO
35980: IFFALSE 36033
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35982: LD_ADDR_VAR 0 5
35986: PUSH
35987: LD_VAR 0 5
35991: PPUSH
35992: LD_VAR 0 7
35996: PPUSH
35997: LD_VAR 0 5
36001: PUSH
36002: LD_VAR 0 7
36006: ARRAY
36007: PUSH
36008: LD_VAR 0 9
36012: PUSH
36013: LD_VAR 0 7
36017: ARRAY
36018: PUSH
36019: LD_VAR 0 10
36023: MUL
36024: PLUS
36025: PPUSH
36026: CALL_OW 1
36030: ST_TO_ADDR
36031: GO 35979
36033: POP
36034: POP
// end ;
36035: GO 34512
36037: POP
36038: POP
// result := Replace ( result , 4 , tmp ) ;
36039: LD_ADDR_VAR 0 5
36043: PUSH
36044: LD_VAR 0 5
36048: PPUSH
36049: LD_INT 4
36051: PPUSH
36052: LD_VAR 0 8
36056: PPUSH
36057: CALL_OW 1
36061: ST_TO_ADDR
// end ;
36062: LD_VAR 0 5
36066: RET
// export function DangerAtRange ( unit , range ) ; begin
36067: LD_INT 0
36069: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36070: LD_ADDR_VAR 0 3
36074: PUSH
36075: LD_VAR 0 1
36079: PPUSH
36080: CALL_OW 255
36084: PPUSH
36085: LD_VAR 0 1
36089: PPUSH
36090: CALL_OW 250
36094: PPUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: CALL_OW 251
36104: PPUSH
36105: LD_VAR 0 2
36109: PPUSH
36110: CALL 34364 0 4
36114: ST_TO_ADDR
// end ;
36115: LD_VAR 0 3
36119: RET
// export function DangerInArea ( side , area ) ; begin
36120: LD_INT 0
36122: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36123: LD_ADDR_VAR 0 3
36127: PUSH
36128: LD_VAR 0 2
36132: PPUSH
36133: LD_INT 81
36135: PUSH
36136: LD_VAR 0 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PPUSH
36145: CALL_OW 70
36149: ST_TO_ADDR
// end ;
36150: LD_VAR 0 3
36154: RET
// export function IsExtension ( b ) ; begin
36155: LD_INT 0
36157: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36158: LD_ADDR_VAR 0 2
36162: PUSH
36163: LD_VAR 0 1
36167: PUSH
36168: LD_INT 23
36170: PUSH
36171: LD_INT 20
36173: PUSH
36174: LD_INT 22
36176: PUSH
36177: LD_INT 17
36179: PUSH
36180: LD_INT 24
36182: PUSH
36183: LD_INT 21
36185: PUSH
36186: LD_INT 19
36188: PUSH
36189: LD_INT 16
36191: PUSH
36192: LD_INT 25
36194: PUSH
36195: LD_INT 18
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: IN
36210: ST_TO_ADDR
// end ;
36211: LD_VAR 0 2
36215: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36216: LD_INT 0
36218: PPUSH
36219: PPUSH
36220: PPUSH
// result := [ ] ;
36221: LD_ADDR_VAR 0 4
36225: PUSH
36226: EMPTY
36227: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36228: LD_ADDR_VAR 0 5
36232: PUSH
36233: LD_VAR 0 2
36237: PPUSH
36238: LD_INT 21
36240: PUSH
36241: LD_INT 3
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PPUSH
36248: CALL_OW 70
36252: ST_TO_ADDR
// if not tmp then
36253: LD_VAR 0 5
36257: NOT
36258: IFFALSE 36262
// exit ;
36260: GO 36326
// if checkLink then
36262: LD_VAR 0 3
36266: IFFALSE 36316
// begin for i in tmp do
36268: LD_ADDR_VAR 0 6
36272: PUSH
36273: LD_VAR 0 5
36277: PUSH
36278: FOR_IN
36279: IFFALSE 36314
// if GetBase ( i ) <> base then
36281: LD_VAR 0 6
36285: PPUSH
36286: CALL_OW 274
36290: PUSH
36291: LD_VAR 0 1
36295: NONEQUAL
36296: IFFALSE 36312
// ComLinkToBase ( base , i ) ;
36298: LD_VAR 0 1
36302: PPUSH
36303: LD_VAR 0 6
36307: PPUSH
36308: CALL_OW 169
36312: GO 36278
36314: POP
36315: POP
// end ; result := tmp ;
36316: LD_ADDR_VAR 0 4
36320: PUSH
36321: LD_VAR 0 5
36325: ST_TO_ADDR
// end ;
36326: LD_VAR 0 4
36330: RET
// export function ComComplete ( units , b ) ; var i ; begin
36331: LD_INT 0
36333: PPUSH
36334: PPUSH
// if not units then
36335: LD_VAR 0 1
36339: NOT
36340: IFFALSE 36344
// exit ;
36342: GO 36434
// for i in units do
36344: LD_ADDR_VAR 0 4
36348: PUSH
36349: LD_VAR 0 1
36353: PUSH
36354: FOR_IN
36355: IFFALSE 36432
// if BuildingStatus ( b ) = bs_build then
36357: LD_VAR 0 2
36361: PPUSH
36362: CALL_OW 461
36366: PUSH
36367: LD_INT 1
36369: EQUAL
36370: IFFALSE 36430
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36372: LD_VAR 0 4
36376: PPUSH
36377: LD_STRING h
36379: PUSH
36380: LD_VAR 0 2
36384: PPUSH
36385: CALL_OW 250
36389: PUSH
36390: LD_VAR 0 2
36394: PPUSH
36395: CALL_OW 251
36399: PUSH
36400: LD_VAR 0 2
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: PUSH
36423: EMPTY
36424: LIST
36425: PPUSH
36426: CALL_OW 446
36430: GO 36354
36432: POP
36433: POP
// end ;
36434: LD_VAR 0 3
36438: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36439: LD_INT 0
36441: PPUSH
36442: PPUSH
36443: PPUSH
36444: PPUSH
36445: PPUSH
36446: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36447: LD_VAR 0 1
36451: NOT
36452: PUSH
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 263
36462: PUSH
36463: LD_INT 2
36465: NONEQUAL
36466: OR
36467: IFFALSE 36471
// exit ;
36469: GO 36787
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36471: LD_ADDR_VAR 0 6
36475: PUSH
36476: LD_INT 22
36478: PUSH
36479: LD_VAR 0 1
36483: PPUSH
36484: CALL_OW 255
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 30
36498: PUSH
36499: LD_INT 36
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 34
36508: PUSH
36509: LD_INT 31
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PPUSH
36525: CALL_OW 69
36529: ST_TO_ADDR
// if not tmp then
36530: LD_VAR 0 6
36534: NOT
36535: IFFALSE 36539
// exit ;
36537: GO 36787
// result := [ ] ;
36539: LD_ADDR_VAR 0 2
36543: PUSH
36544: EMPTY
36545: ST_TO_ADDR
// for i in tmp do
36546: LD_ADDR_VAR 0 3
36550: PUSH
36551: LD_VAR 0 6
36555: PUSH
36556: FOR_IN
36557: IFFALSE 36628
// begin t := UnitsInside ( i ) ;
36559: LD_ADDR_VAR 0 4
36563: PUSH
36564: LD_VAR 0 3
36568: PPUSH
36569: CALL_OW 313
36573: ST_TO_ADDR
// if t then
36574: LD_VAR 0 4
36578: IFFALSE 36626
// for j in t do
36580: LD_ADDR_VAR 0 7
36584: PUSH
36585: LD_VAR 0 4
36589: PUSH
36590: FOR_IN
36591: IFFALSE 36624
// result := Replace ( result , result + 1 , j ) ;
36593: LD_ADDR_VAR 0 2
36597: PUSH
36598: LD_VAR 0 2
36602: PPUSH
36603: LD_VAR 0 2
36607: PUSH
36608: LD_INT 1
36610: PLUS
36611: PPUSH
36612: LD_VAR 0 7
36616: PPUSH
36617: CALL_OW 1
36621: ST_TO_ADDR
36622: GO 36590
36624: POP
36625: POP
// end ;
36626: GO 36556
36628: POP
36629: POP
// if not result then
36630: LD_VAR 0 2
36634: NOT
36635: IFFALSE 36639
// exit ;
36637: GO 36787
// mech := result [ 1 ] ;
36639: LD_ADDR_VAR 0 5
36643: PUSH
36644: LD_VAR 0 2
36648: PUSH
36649: LD_INT 1
36651: ARRAY
36652: ST_TO_ADDR
// if result > 1 then
36653: LD_VAR 0 2
36657: PUSH
36658: LD_INT 1
36660: GREATER
36661: IFFALSE 36773
// begin for i = 2 to result do
36663: LD_ADDR_VAR 0 3
36667: PUSH
36668: DOUBLE
36669: LD_INT 2
36671: DEC
36672: ST_TO_ADDR
36673: LD_VAR 0 2
36677: PUSH
36678: FOR_TO
36679: IFFALSE 36771
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36681: LD_ADDR_VAR 0 4
36685: PUSH
36686: LD_VAR 0 2
36690: PUSH
36691: LD_VAR 0 3
36695: ARRAY
36696: PPUSH
36697: LD_INT 3
36699: PPUSH
36700: CALL_OW 259
36704: PUSH
36705: LD_VAR 0 2
36709: PUSH
36710: LD_VAR 0 3
36714: ARRAY
36715: PPUSH
36716: CALL_OW 432
36720: MINUS
36721: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36722: LD_VAR 0 4
36726: PUSH
36727: LD_VAR 0 5
36731: PPUSH
36732: LD_INT 3
36734: PPUSH
36735: CALL_OW 259
36739: PUSH
36740: LD_VAR 0 5
36744: PPUSH
36745: CALL_OW 432
36749: MINUS
36750: GREATEREQUAL
36751: IFFALSE 36769
// mech := result [ i ] ;
36753: LD_ADDR_VAR 0 5
36757: PUSH
36758: LD_VAR 0 2
36762: PUSH
36763: LD_VAR 0 3
36767: ARRAY
36768: ST_TO_ADDR
// end ;
36769: GO 36678
36771: POP
36772: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36773: LD_VAR 0 1
36777: PPUSH
36778: LD_VAR 0 5
36782: PPUSH
36783: CALL_OW 135
// end ;
36787: LD_VAR 0 2
36791: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36792: LD_INT 0
36794: PPUSH
36795: PPUSH
36796: PPUSH
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
36802: PPUSH
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
// result := [ ] ;
36807: LD_ADDR_VAR 0 7
36811: PUSH
36812: EMPTY
36813: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36814: LD_VAR 0 1
36818: PPUSH
36819: CALL_OW 266
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: IN
36834: NOT
36835: IFFALSE 36839
// exit ;
36837: GO 38473
// if name then
36839: LD_VAR 0 3
36843: IFFALSE 36859
// SetBName ( base_dep , name ) ;
36845: LD_VAR 0 1
36849: PPUSH
36850: LD_VAR 0 3
36854: PPUSH
36855: CALL_OW 500
// base := GetBase ( base_dep ) ;
36859: LD_ADDR_VAR 0 15
36863: PUSH
36864: LD_VAR 0 1
36868: PPUSH
36869: CALL_OW 274
36873: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36874: LD_ADDR_VAR 0 16
36878: PUSH
36879: LD_VAR 0 1
36883: PPUSH
36884: CALL_OW 255
36888: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36889: LD_ADDR_VAR 0 17
36893: PUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 248
36903: ST_TO_ADDR
// if sources then
36904: LD_VAR 0 5
36908: IFFALSE 36955
// for i = 1 to 3 do
36910: LD_ADDR_VAR 0 8
36914: PUSH
36915: DOUBLE
36916: LD_INT 1
36918: DEC
36919: ST_TO_ADDR
36920: LD_INT 3
36922: PUSH
36923: FOR_TO
36924: IFFALSE 36953
// AddResourceType ( base , i , sources [ i ] ) ;
36926: LD_VAR 0 15
36930: PPUSH
36931: LD_VAR 0 8
36935: PPUSH
36936: LD_VAR 0 5
36940: PUSH
36941: LD_VAR 0 8
36945: ARRAY
36946: PPUSH
36947: CALL_OW 276
36951: GO 36923
36953: POP
36954: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36955: LD_ADDR_VAR 0 18
36959: PUSH
36960: LD_VAR 0 15
36964: PPUSH
36965: LD_VAR 0 2
36969: PPUSH
36970: LD_INT 1
36972: PPUSH
36973: CALL 36216 0 3
36977: ST_TO_ADDR
// InitHc ;
36978: CALL_OW 19
// InitUc ;
36982: CALL_OW 18
// uc_side := side ;
36986: LD_ADDR_OWVAR 20
36990: PUSH
36991: LD_VAR 0 16
36995: ST_TO_ADDR
// uc_nation := nation ;
36996: LD_ADDR_OWVAR 21
37000: PUSH
37001: LD_VAR 0 17
37005: ST_TO_ADDR
// if buildings then
37006: LD_VAR 0 18
37010: IFFALSE 38332
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37012: LD_ADDR_VAR 0 19
37016: PUSH
37017: LD_VAR 0 18
37021: PPUSH
37022: LD_INT 2
37024: PUSH
37025: LD_INT 30
37027: PUSH
37028: LD_INT 29
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 30
37037: PUSH
37038: LD_INT 30
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: PPUSH
37050: CALL_OW 72
37054: ST_TO_ADDR
// if tmp then
37055: LD_VAR 0 19
37059: IFFALSE 37107
// for i in tmp do
37061: LD_ADDR_VAR 0 8
37065: PUSH
37066: LD_VAR 0 19
37070: PUSH
37071: FOR_IN
37072: IFFALSE 37105
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37074: LD_VAR 0 8
37078: PPUSH
37079: CALL_OW 250
37083: PPUSH
37084: LD_VAR 0 8
37088: PPUSH
37089: CALL_OW 251
37093: PPUSH
37094: LD_VAR 0 16
37098: PPUSH
37099: CALL_OW 441
37103: GO 37071
37105: POP
37106: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37107: LD_VAR 0 18
37111: PPUSH
37112: LD_INT 2
37114: PUSH
37115: LD_INT 30
37117: PUSH
37118: LD_INT 32
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 30
37127: PUSH
37128: LD_INT 33
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: LIST
37139: PPUSH
37140: CALL_OW 72
37144: IFFALSE 37232
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37146: LD_ADDR_VAR 0 8
37150: PUSH
37151: LD_VAR 0 18
37155: PPUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 30
37161: PUSH
37162: LD_INT 32
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 30
37171: PUSH
37172: LD_INT 33
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: PPUSH
37184: CALL_OW 72
37188: PUSH
37189: FOR_IN
37190: IFFALSE 37230
// begin if not GetBWeapon ( i ) then
37192: LD_VAR 0 8
37196: PPUSH
37197: CALL_OW 269
37201: NOT
37202: IFFALSE 37228
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37204: LD_VAR 0 8
37208: PPUSH
37209: LD_VAR 0 8
37213: PPUSH
37214: LD_VAR 0 2
37218: PPUSH
37219: CALL 38478 0 2
37223: PPUSH
37224: CALL_OW 431
// end ;
37228: GO 37189
37230: POP
37231: POP
// end ; for i = 1 to personel do
37232: LD_ADDR_VAR 0 8
37236: PUSH
37237: DOUBLE
37238: LD_INT 1
37240: DEC
37241: ST_TO_ADDR
37242: LD_VAR 0 6
37246: PUSH
37247: FOR_TO
37248: IFFALSE 38312
// begin if i > 4 then
37250: LD_VAR 0 8
37254: PUSH
37255: LD_INT 4
37257: GREATER
37258: IFFALSE 37262
// break ;
37260: GO 38312
// case i of 1 :
37262: LD_VAR 0 8
37266: PUSH
37267: LD_INT 1
37269: DOUBLE
37270: EQUAL
37271: IFTRUE 37275
37273: GO 37355
37275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37276: LD_ADDR_VAR 0 12
37280: PUSH
37281: LD_VAR 0 18
37285: PPUSH
37286: LD_INT 22
37288: PUSH
37289: LD_VAR 0 16
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 58
37300: PUSH
37301: EMPTY
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: LD_INT 30
37309: PUSH
37310: LD_INT 32
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 30
37319: PUSH
37320: LD_INT 4
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 30
37329: PUSH
37330: LD_INT 5
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: PPUSH
37348: CALL_OW 72
37352: ST_TO_ADDR
37353: GO 37577
37355: LD_INT 2
37357: DOUBLE
37358: EQUAL
37359: IFTRUE 37363
37361: GO 37425
37363: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37364: LD_ADDR_VAR 0 12
37368: PUSH
37369: LD_VAR 0 18
37373: PPUSH
37374: LD_INT 22
37376: PUSH
37377: LD_VAR 0 16
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 2
37388: PUSH
37389: LD_INT 30
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 30
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PPUSH
37418: CALL_OW 72
37422: ST_TO_ADDR
37423: GO 37577
37425: LD_INT 3
37427: DOUBLE
37428: EQUAL
37429: IFTRUE 37433
37431: GO 37495
37433: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37434: LD_ADDR_VAR 0 12
37438: PUSH
37439: LD_VAR 0 18
37443: PPUSH
37444: LD_INT 22
37446: PUSH
37447: LD_VAR 0 16
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: LD_INT 30
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 30
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PPUSH
37488: CALL_OW 72
37492: ST_TO_ADDR
37493: GO 37577
37495: LD_INT 4
37497: DOUBLE
37498: EQUAL
37499: IFTRUE 37503
37501: GO 37576
37503: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37504: LD_ADDR_VAR 0 12
37508: PUSH
37509: LD_VAR 0 18
37513: PPUSH
37514: LD_INT 22
37516: PUSH
37517: LD_VAR 0 16
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: LD_INT 30
37531: PUSH
37532: LD_INT 6
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 30
37541: PUSH
37542: LD_INT 7
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 30
37551: PUSH
37552: LD_INT 8
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PPUSH
37569: CALL_OW 72
37573: ST_TO_ADDR
37574: GO 37577
37576: POP
// if i = 1 then
37577: LD_VAR 0 8
37581: PUSH
37582: LD_INT 1
37584: EQUAL
37585: IFFALSE 37696
// begin tmp := [ ] ;
37587: LD_ADDR_VAR 0 19
37591: PUSH
37592: EMPTY
37593: ST_TO_ADDR
// for j in f do
37594: LD_ADDR_VAR 0 9
37598: PUSH
37599: LD_VAR 0 12
37603: PUSH
37604: FOR_IN
37605: IFFALSE 37678
// if GetBType ( j ) = b_bunker then
37607: LD_VAR 0 9
37611: PPUSH
37612: CALL_OW 266
37616: PUSH
37617: LD_INT 32
37619: EQUAL
37620: IFFALSE 37647
// tmp := Insert ( tmp , 1 , j ) else
37622: LD_ADDR_VAR 0 19
37626: PUSH
37627: LD_VAR 0 19
37631: PPUSH
37632: LD_INT 1
37634: PPUSH
37635: LD_VAR 0 9
37639: PPUSH
37640: CALL_OW 2
37644: ST_TO_ADDR
37645: GO 37676
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37647: LD_ADDR_VAR 0 19
37651: PUSH
37652: LD_VAR 0 19
37656: PPUSH
37657: LD_VAR 0 19
37661: PUSH
37662: LD_INT 1
37664: PLUS
37665: PPUSH
37666: LD_VAR 0 9
37670: PPUSH
37671: CALL_OW 2
37675: ST_TO_ADDR
37676: GO 37604
37678: POP
37679: POP
// if tmp then
37680: LD_VAR 0 19
37684: IFFALSE 37696
// f := tmp ;
37686: LD_ADDR_VAR 0 12
37690: PUSH
37691: LD_VAR 0 19
37695: ST_TO_ADDR
// end ; x := personel [ i ] ;
37696: LD_ADDR_VAR 0 13
37700: PUSH
37701: LD_VAR 0 6
37705: PUSH
37706: LD_VAR 0 8
37710: ARRAY
37711: ST_TO_ADDR
// if x = - 1 then
37712: LD_VAR 0 13
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: EQUAL
37721: IFFALSE 37930
// begin for j in f do
37723: LD_ADDR_VAR 0 9
37727: PUSH
37728: LD_VAR 0 12
37732: PUSH
37733: FOR_IN
37734: IFFALSE 37926
// repeat InitHc ;
37736: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37740: LD_VAR 0 9
37744: PPUSH
37745: CALL_OW 266
37749: PUSH
37750: LD_INT 5
37752: EQUAL
37753: IFFALSE 37823
// begin if UnitsInside ( j ) < 3 then
37755: LD_VAR 0 9
37759: PPUSH
37760: CALL_OW 313
37764: PUSH
37765: LD_INT 3
37767: LESS
37768: IFFALSE 37804
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37770: LD_INT 0
37772: PPUSH
37773: LD_INT 5
37775: PUSH
37776: LD_INT 8
37778: PUSH
37779: LD_INT 9
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: PUSH
37787: LD_VAR 0 17
37791: ARRAY
37792: PPUSH
37793: LD_VAR 0 4
37797: PPUSH
37798: CALL_OW 380
37802: GO 37821
// PrepareHuman ( false , i , skill ) ;
37804: LD_INT 0
37806: PPUSH
37807: LD_VAR 0 8
37811: PPUSH
37812: LD_VAR 0 4
37816: PPUSH
37817: CALL_OW 380
// end else
37821: GO 37840
// PrepareHuman ( false , i , skill ) ;
37823: LD_INT 0
37825: PPUSH
37826: LD_VAR 0 8
37830: PPUSH
37831: LD_VAR 0 4
37835: PPUSH
37836: CALL_OW 380
// un := CreateHuman ;
37840: LD_ADDR_VAR 0 14
37844: PUSH
37845: CALL_OW 44
37849: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37850: LD_ADDR_VAR 0 7
37854: PUSH
37855: LD_VAR 0 7
37859: PPUSH
37860: LD_INT 1
37862: PPUSH
37863: LD_VAR 0 14
37867: PPUSH
37868: CALL_OW 2
37872: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37873: LD_VAR 0 14
37877: PPUSH
37878: LD_VAR 0 9
37882: PPUSH
37883: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37887: LD_VAR 0 9
37891: PPUSH
37892: CALL_OW 313
37896: PUSH
37897: LD_INT 6
37899: EQUAL
37900: PUSH
37901: LD_VAR 0 9
37905: PPUSH
37906: CALL_OW 266
37910: PUSH
37911: LD_INT 32
37913: PUSH
37914: LD_INT 31
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: IN
37921: OR
37922: IFFALSE 37736
37924: GO 37733
37926: POP
37927: POP
// end else
37928: GO 38310
// for j = 1 to x do
37930: LD_ADDR_VAR 0 9
37934: PUSH
37935: DOUBLE
37936: LD_INT 1
37938: DEC
37939: ST_TO_ADDR
37940: LD_VAR 0 13
37944: PUSH
37945: FOR_TO
37946: IFFALSE 38308
// begin InitHc ;
37948: CALL_OW 19
// if not f then
37952: LD_VAR 0 12
37956: NOT
37957: IFFALSE 38046
// begin PrepareHuman ( false , i , skill ) ;
37959: LD_INT 0
37961: PPUSH
37962: LD_VAR 0 8
37966: PPUSH
37967: LD_VAR 0 4
37971: PPUSH
37972: CALL_OW 380
// un := CreateHuman ;
37976: LD_ADDR_VAR 0 14
37980: PUSH
37981: CALL_OW 44
37985: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37986: LD_ADDR_VAR 0 7
37990: PUSH
37991: LD_VAR 0 7
37995: PPUSH
37996: LD_INT 1
37998: PPUSH
37999: LD_VAR 0 14
38003: PPUSH
38004: CALL_OW 2
38008: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38009: LD_VAR 0 14
38013: PPUSH
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL_OW 250
38023: PPUSH
38024: LD_VAR 0 1
38028: PPUSH
38029: CALL_OW 251
38033: PPUSH
38034: LD_INT 10
38036: PPUSH
38037: LD_INT 0
38039: PPUSH
38040: CALL_OW 50
// continue ;
38044: GO 37945
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38046: LD_VAR 0 12
38050: PUSH
38051: LD_INT 1
38053: ARRAY
38054: PPUSH
38055: CALL_OW 313
38059: PUSH
38060: LD_VAR 0 12
38064: PUSH
38065: LD_INT 1
38067: ARRAY
38068: PPUSH
38069: CALL_OW 266
38073: PUSH
38074: LD_INT 32
38076: PUSH
38077: LD_INT 31
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: IN
38084: AND
38085: PUSH
38086: LD_VAR 0 12
38090: PUSH
38091: LD_INT 1
38093: ARRAY
38094: PPUSH
38095: CALL_OW 313
38099: PUSH
38100: LD_INT 6
38102: EQUAL
38103: OR
38104: IFFALSE 38124
// f := Delete ( f , 1 ) ;
38106: LD_ADDR_VAR 0 12
38110: PUSH
38111: LD_VAR 0 12
38115: PPUSH
38116: LD_INT 1
38118: PPUSH
38119: CALL_OW 3
38123: ST_TO_ADDR
// if not f then
38124: LD_VAR 0 12
38128: NOT
38129: IFFALSE 38147
// begin x := x + 2 ;
38131: LD_ADDR_VAR 0 13
38135: PUSH
38136: LD_VAR 0 13
38140: PUSH
38141: LD_INT 2
38143: PLUS
38144: ST_TO_ADDR
// continue ;
38145: GO 37945
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38147: LD_VAR 0 12
38151: PUSH
38152: LD_INT 1
38154: ARRAY
38155: PPUSH
38156: CALL_OW 266
38160: PUSH
38161: LD_INT 5
38163: EQUAL
38164: IFFALSE 38238
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38166: LD_VAR 0 12
38170: PUSH
38171: LD_INT 1
38173: ARRAY
38174: PPUSH
38175: CALL_OW 313
38179: PUSH
38180: LD_INT 3
38182: LESS
38183: IFFALSE 38219
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38185: LD_INT 0
38187: PPUSH
38188: LD_INT 5
38190: PUSH
38191: LD_INT 8
38193: PUSH
38194: LD_INT 9
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: PUSH
38202: LD_VAR 0 17
38206: ARRAY
38207: PPUSH
38208: LD_VAR 0 4
38212: PPUSH
38213: CALL_OW 380
38217: GO 38236
// PrepareHuman ( false , i , skill ) ;
38219: LD_INT 0
38221: PPUSH
38222: LD_VAR 0 8
38226: PPUSH
38227: LD_VAR 0 4
38231: PPUSH
38232: CALL_OW 380
// end else
38236: GO 38255
// PrepareHuman ( false , i , skill ) ;
38238: LD_INT 0
38240: PPUSH
38241: LD_VAR 0 8
38245: PPUSH
38246: LD_VAR 0 4
38250: PPUSH
38251: CALL_OW 380
// un := CreateHuman ;
38255: LD_ADDR_VAR 0 14
38259: PUSH
38260: CALL_OW 44
38264: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38265: LD_ADDR_VAR 0 7
38269: PUSH
38270: LD_VAR 0 7
38274: PPUSH
38275: LD_INT 1
38277: PPUSH
38278: LD_VAR 0 14
38282: PPUSH
38283: CALL_OW 2
38287: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38288: LD_VAR 0 14
38292: PPUSH
38293: LD_VAR 0 12
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: CALL_OW 52
// end ;
38306: GO 37945
38308: POP
38309: POP
// end ;
38310: GO 37247
38312: POP
38313: POP
// result := result ^ buildings ;
38314: LD_ADDR_VAR 0 7
38318: PUSH
38319: LD_VAR 0 7
38323: PUSH
38324: LD_VAR 0 18
38328: ADD
38329: ST_TO_ADDR
// end else
38330: GO 38473
// begin for i = 1 to personel do
38332: LD_ADDR_VAR 0 8
38336: PUSH
38337: DOUBLE
38338: LD_INT 1
38340: DEC
38341: ST_TO_ADDR
38342: LD_VAR 0 6
38346: PUSH
38347: FOR_TO
38348: IFFALSE 38471
// begin if i > 4 then
38350: LD_VAR 0 8
38354: PUSH
38355: LD_INT 4
38357: GREATER
38358: IFFALSE 38362
// break ;
38360: GO 38471
// x := personel [ i ] ;
38362: LD_ADDR_VAR 0 13
38366: PUSH
38367: LD_VAR 0 6
38371: PUSH
38372: LD_VAR 0 8
38376: ARRAY
38377: ST_TO_ADDR
// if x = - 1 then
38378: LD_VAR 0 13
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: EQUAL
38387: IFFALSE 38391
// continue ;
38389: GO 38347
// PrepareHuman ( false , i , skill ) ;
38391: LD_INT 0
38393: PPUSH
38394: LD_VAR 0 8
38398: PPUSH
38399: LD_VAR 0 4
38403: PPUSH
38404: CALL_OW 380
// un := CreateHuman ;
38408: LD_ADDR_VAR 0 14
38412: PUSH
38413: CALL_OW 44
38417: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38418: LD_VAR 0 14
38422: PPUSH
38423: LD_VAR 0 1
38427: PPUSH
38428: CALL_OW 250
38432: PPUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 251
38442: PPUSH
38443: LD_INT 10
38445: PPUSH
38446: LD_INT 0
38448: PPUSH
38449: CALL_OW 50
// result := result ^ un ;
38453: LD_ADDR_VAR 0 7
38457: PUSH
38458: LD_VAR 0 7
38462: PUSH
38463: LD_VAR 0 14
38467: ADD
38468: ST_TO_ADDR
// end ;
38469: GO 38347
38471: POP
38472: POP
// end ; end ;
38473: LD_VAR 0 7
38477: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38478: LD_INT 0
38480: PPUSH
38481: PPUSH
38482: PPUSH
38483: PPUSH
38484: PPUSH
38485: PPUSH
38486: PPUSH
38487: PPUSH
38488: PPUSH
38489: PPUSH
38490: PPUSH
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
// result := false ;
38496: LD_ADDR_VAR 0 3
38500: PUSH
38501: LD_INT 0
38503: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38504: LD_VAR 0 1
38508: NOT
38509: PUSH
38510: LD_VAR 0 1
38514: PPUSH
38515: CALL_OW 266
38519: PUSH
38520: LD_INT 32
38522: PUSH
38523: LD_INT 33
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: IN
38530: NOT
38531: OR
38532: IFFALSE 38536
// exit ;
38534: GO 39645
// nat := GetNation ( tower ) ;
38536: LD_ADDR_VAR 0 12
38540: PUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: CALL_OW 248
38550: ST_TO_ADDR
// side := GetSide ( tower ) ;
38551: LD_ADDR_VAR 0 16
38555: PUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: CALL_OW 255
38565: ST_TO_ADDR
// x := GetX ( tower ) ;
38566: LD_ADDR_VAR 0 10
38570: PUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL_OW 250
38580: ST_TO_ADDR
// y := GetY ( tower ) ;
38581: LD_ADDR_VAR 0 11
38585: PUSH
38586: LD_VAR 0 1
38590: PPUSH
38591: CALL_OW 251
38595: ST_TO_ADDR
// if not x or not y then
38596: LD_VAR 0 10
38600: NOT
38601: PUSH
38602: LD_VAR 0 11
38606: NOT
38607: OR
38608: IFFALSE 38612
// exit ;
38610: GO 39645
// weapon := 0 ;
38612: LD_ADDR_VAR 0 18
38616: PUSH
38617: LD_INT 0
38619: ST_TO_ADDR
// fac_list := [ ] ;
38620: LD_ADDR_VAR 0 17
38624: PUSH
38625: EMPTY
38626: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38627: LD_ADDR_VAR 0 6
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 274
38641: PPUSH
38642: LD_VAR 0 2
38646: PPUSH
38647: LD_INT 0
38649: PPUSH
38650: CALL 36216 0 3
38654: PPUSH
38655: LD_INT 30
38657: PUSH
38658: LD_INT 3
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PPUSH
38665: CALL_OW 72
38669: ST_TO_ADDR
// if not factories then
38670: LD_VAR 0 6
38674: NOT
38675: IFFALSE 38679
// exit ;
38677: GO 39645
// for i in factories do
38679: LD_ADDR_VAR 0 8
38683: PUSH
38684: LD_VAR 0 6
38688: PUSH
38689: FOR_IN
38690: IFFALSE 38715
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38692: LD_ADDR_VAR 0 17
38696: PUSH
38697: LD_VAR 0 17
38701: PUSH
38702: LD_VAR 0 8
38706: PPUSH
38707: CALL_OW 478
38711: UNION
38712: ST_TO_ADDR
38713: GO 38689
38715: POP
38716: POP
// if not fac_list then
38717: LD_VAR 0 17
38721: NOT
38722: IFFALSE 38726
// exit ;
38724: GO 39645
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38726: LD_ADDR_VAR 0 5
38730: PUSH
38731: LD_INT 4
38733: PUSH
38734: LD_INT 5
38736: PUSH
38737: LD_INT 9
38739: PUSH
38740: LD_INT 10
38742: PUSH
38743: LD_INT 6
38745: PUSH
38746: LD_INT 7
38748: PUSH
38749: LD_INT 11
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 27
38763: PUSH
38764: LD_INT 28
38766: PUSH
38767: LD_INT 26
38769: PUSH
38770: LD_INT 30
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 43
38781: PUSH
38782: LD_INT 44
38784: PUSH
38785: LD_INT 46
38787: PUSH
38788: LD_INT 45
38790: PUSH
38791: LD_INT 47
38793: PUSH
38794: LD_INT 49
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: PUSH
38810: LD_VAR 0 12
38814: ARRAY
38815: ST_TO_ADDR
// list := list isect fac_list ;
38816: LD_ADDR_VAR 0 5
38820: PUSH
38821: LD_VAR 0 5
38825: PUSH
38826: LD_VAR 0 17
38830: ISECT
38831: ST_TO_ADDR
// if not list then
38832: LD_VAR 0 5
38836: NOT
38837: IFFALSE 38841
// exit ;
38839: GO 39645
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38841: LD_VAR 0 12
38845: PUSH
38846: LD_INT 3
38848: EQUAL
38849: PUSH
38850: LD_INT 49
38852: PUSH
38853: LD_VAR 0 5
38857: IN
38858: AND
38859: PUSH
38860: LD_INT 31
38862: PPUSH
38863: LD_VAR 0 16
38867: PPUSH
38868: CALL_OW 321
38872: PUSH
38873: LD_INT 2
38875: EQUAL
38876: AND
38877: IFFALSE 38937
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38879: LD_INT 22
38881: PUSH
38882: LD_VAR 0 16
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 35
38893: PUSH
38894: LD_INT 49
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 91
38903: PUSH
38904: LD_VAR 0 1
38908: PUSH
38909: LD_INT 10
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: PPUSH
38922: CALL_OW 69
38926: NOT
38927: IFFALSE 38937
// weapon := ru_time_lapser ;
38929: LD_ADDR_VAR 0 18
38933: PUSH
38934: LD_INT 49
38936: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38937: LD_VAR 0 12
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: IN
38952: PUSH
38953: LD_INT 11
38955: PUSH
38956: LD_VAR 0 5
38960: IN
38961: PUSH
38962: LD_INT 30
38964: PUSH
38965: LD_VAR 0 5
38969: IN
38970: OR
38971: AND
38972: PUSH
38973: LD_INT 6
38975: PPUSH
38976: LD_VAR 0 16
38980: PPUSH
38981: CALL_OW 321
38985: PUSH
38986: LD_INT 2
38988: EQUAL
38989: AND
38990: IFFALSE 39155
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38992: LD_INT 22
38994: PUSH
38995: LD_VAR 0 16
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: LD_INT 35
39009: PUSH
39010: LD_INT 11
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 35
39019: PUSH
39020: LD_INT 30
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 91
39034: PUSH
39035: LD_VAR 0 1
39039: PUSH
39040: LD_INT 18
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: PPUSH
39053: CALL_OW 69
39057: NOT
39058: PUSH
39059: LD_INT 22
39061: PUSH
39062: LD_VAR 0 16
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 30
39076: PUSH
39077: LD_INT 32
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 30
39086: PUSH
39087: LD_INT 33
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 91
39101: PUSH
39102: LD_VAR 0 1
39106: PUSH
39107: LD_INT 12
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: PPUSH
39123: CALL_OW 69
39127: PUSH
39128: LD_INT 2
39130: GREATER
39131: AND
39132: IFFALSE 39155
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39134: LD_ADDR_VAR 0 18
39138: PUSH
39139: LD_INT 11
39141: PUSH
39142: LD_INT 30
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_VAR 0 12
39153: ARRAY
39154: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39155: LD_VAR 0 18
39159: NOT
39160: PUSH
39161: LD_INT 40
39163: PPUSH
39164: LD_VAR 0 16
39168: PPUSH
39169: CALL_OW 321
39173: PUSH
39174: LD_INT 2
39176: EQUAL
39177: AND
39178: PUSH
39179: LD_INT 7
39181: PUSH
39182: LD_VAR 0 5
39186: IN
39187: PUSH
39188: LD_INT 28
39190: PUSH
39191: LD_VAR 0 5
39195: IN
39196: OR
39197: PUSH
39198: LD_INT 45
39200: PUSH
39201: LD_VAR 0 5
39205: IN
39206: OR
39207: AND
39208: IFFALSE 39462
// begin hex := GetHexInfo ( x , y ) ;
39210: LD_ADDR_VAR 0 4
39214: PUSH
39215: LD_VAR 0 10
39219: PPUSH
39220: LD_VAR 0 11
39224: PPUSH
39225: CALL_OW 546
39229: ST_TO_ADDR
// if hex [ 1 ] then
39230: LD_VAR 0 4
39234: PUSH
39235: LD_INT 1
39237: ARRAY
39238: IFFALSE 39242
// exit ;
39240: GO 39645
// height := hex [ 2 ] ;
39242: LD_ADDR_VAR 0 15
39246: PUSH
39247: LD_VAR 0 4
39251: PUSH
39252: LD_INT 2
39254: ARRAY
39255: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39256: LD_ADDR_VAR 0 14
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: LD_INT 5
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: ST_TO_ADDR
// for i in tmp do
39279: LD_ADDR_VAR 0 8
39283: PUSH
39284: LD_VAR 0 14
39288: PUSH
39289: FOR_IN
39290: IFFALSE 39460
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39292: LD_ADDR_VAR 0 9
39296: PUSH
39297: LD_VAR 0 10
39301: PPUSH
39302: LD_VAR 0 8
39306: PPUSH
39307: LD_INT 5
39309: PPUSH
39310: CALL_OW 272
39314: PUSH
39315: LD_VAR 0 11
39319: PPUSH
39320: LD_VAR 0 8
39324: PPUSH
39325: LD_INT 5
39327: PPUSH
39328: CALL_OW 273
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39337: LD_VAR 0 9
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: PPUSH
39346: LD_VAR 0 9
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PPUSH
39355: CALL_OW 488
39359: IFFALSE 39458
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39361: LD_ADDR_VAR 0 4
39365: PUSH
39366: LD_VAR 0 9
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PPUSH
39375: LD_VAR 0 9
39379: PUSH
39380: LD_INT 2
39382: ARRAY
39383: PPUSH
39384: CALL_OW 546
39388: ST_TO_ADDR
// if hex [ 1 ] then
39389: LD_VAR 0 4
39393: PUSH
39394: LD_INT 1
39396: ARRAY
39397: IFFALSE 39401
// continue ;
39399: GO 39289
// h := hex [ 2 ] ;
39401: LD_ADDR_VAR 0 13
39405: PUSH
39406: LD_VAR 0 4
39410: PUSH
39411: LD_INT 2
39413: ARRAY
39414: ST_TO_ADDR
// if h + 7 < height then
39415: LD_VAR 0 13
39419: PUSH
39420: LD_INT 7
39422: PLUS
39423: PUSH
39424: LD_VAR 0 15
39428: LESS
39429: IFFALSE 39458
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39431: LD_ADDR_VAR 0 18
39435: PUSH
39436: LD_INT 7
39438: PUSH
39439: LD_INT 28
39441: PUSH
39442: LD_INT 45
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: PUSH
39450: LD_VAR 0 12
39454: ARRAY
39455: ST_TO_ADDR
// break ;
39456: GO 39460
// end ; end ; end ;
39458: GO 39289
39460: POP
39461: POP
// end ; if not weapon then
39462: LD_VAR 0 18
39466: NOT
39467: IFFALSE 39527
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39469: LD_ADDR_VAR 0 5
39473: PUSH
39474: LD_VAR 0 5
39478: PUSH
39479: LD_INT 11
39481: PUSH
39482: LD_INT 30
39484: PUSH
39485: LD_INT 49
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: DIFF
39493: ST_TO_ADDR
// if not list then
39494: LD_VAR 0 5
39498: NOT
39499: IFFALSE 39503
// exit ;
39501: GO 39645
// weapon := list [ rand ( 1 , list ) ] ;
39503: LD_ADDR_VAR 0 18
39507: PUSH
39508: LD_VAR 0 5
39512: PUSH
39513: LD_INT 1
39515: PPUSH
39516: LD_VAR 0 5
39520: PPUSH
39521: CALL_OW 12
39525: ARRAY
39526: ST_TO_ADDR
// end ; if weapon then
39527: LD_VAR 0 18
39531: IFFALSE 39645
// begin tmp := CostOfWeapon ( weapon ) ;
39533: LD_ADDR_VAR 0 14
39537: PUSH
39538: LD_VAR 0 18
39542: PPUSH
39543: CALL_OW 451
39547: ST_TO_ADDR
// j := GetBase ( tower ) ;
39548: LD_ADDR_VAR 0 9
39552: PUSH
39553: LD_VAR 0 1
39557: PPUSH
39558: CALL_OW 274
39562: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39563: LD_VAR 0 9
39567: PPUSH
39568: LD_INT 1
39570: PPUSH
39571: CALL_OW 275
39575: PUSH
39576: LD_VAR 0 14
39580: PUSH
39581: LD_INT 1
39583: ARRAY
39584: GREATEREQUAL
39585: PUSH
39586: LD_VAR 0 9
39590: PPUSH
39591: LD_INT 2
39593: PPUSH
39594: CALL_OW 275
39598: PUSH
39599: LD_VAR 0 14
39603: PUSH
39604: LD_INT 2
39606: ARRAY
39607: GREATEREQUAL
39608: AND
39609: PUSH
39610: LD_VAR 0 9
39614: PPUSH
39615: LD_INT 3
39617: PPUSH
39618: CALL_OW 275
39622: PUSH
39623: LD_VAR 0 14
39627: PUSH
39628: LD_INT 3
39630: ARRAY
39631: GREATEREQUAL
39632: AND
39633: IFFALSE 39645
// result := weapon ;
39635: LD_ADDR_VAR 0 3
39639: PUSH
39640: LD_VAR 0 18
39644: ST_TO_ADDR
// end ; end ;
39645: LD_VAR 0 3
39649: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39650: LD_INT 0
39652: PPUSH
39653: PPUSH
// result := true ;
39654: LD_ADDR_VAR 0 3
39658: PUSH
39659: LD_INT 1
39661: ST_TO_ADDR
// if array1 = array2 then
39662: LD_VAR 0 1
39666: PUSH
39667: LD_VAR 0 2
39671: EQUAL
39672: IFFALSE 39732
// begin for i = 1 to array1 do
39674: LD_ADDR_VAR 0 4
39678: PUSH
39679: DOUBLE
39680: LD_INT 1
39682: DEC
39683: ST_TO_ADDR
39684: LD_VAR 0 1
39688: PUSH
39689: FOR_TO
39690: IFFALSE 39728
// if array1 [ i ] <> array2 [ i ] then
39692: LD_VAR 0 1
39696: PUSH
39697: LD_VAR 0 4
39701: ARRAY
39702: PUSH
39703: LD_VAR 0 2
39707: PUSH
39708: LD_VAR 0 4
39712: ARRAY
39713: NONEQUAL
39714: IFFALSE 39726
// begin result := false ;
39716: LD_ADDR_VAR 0 3
39720: PUSH
39721: LD_INT 0
39723: ST_TO_ADDR
// break ;
39724: GO 39728
// end ;
39726: GO 39689
39728: POP
39729: POP
// end else
39730: GO 39740
// result := false ;
39732: LD_ADDR_VAR 0 3
39736: PUSH
39737: LD_INT 0
39739: ST_TO_ADDR
// end ;
39740: LD_VAR 0 3
39744: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39745: LD_INT 0
39747: PPUSH
39748: PPUSH
// if not array1 or not array2 then
39749: LD_VAR 0 1
39753: NOT
39754: PUSH
39755: LD_VAR 0 2
39759: NOT
39760: OR
39761: IFFALSE 39765
// exit ;
39763: GO 39829
// result := true ;
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_INT 1
39772: ST_TO_ADDR
// for i = 1 to array1 do
39773: LD_ADDR_VAR 0 4
39777: PUSH
39778: DOUBLE
39779: LD_INT 1
39781: DEC
39782: ST_TO_ADDR
39783: LD_VAR 0 1
39787: PUSH
39788: FOR_TO
39789: IFFALSE 39827
// if array1 [ i ] <> array2 [ i ] then
39791: LD_VAR 0 1
39795: PUSH
39796: LD_VAR 0 4
39800: ARRAY
39801: PUSH
39802: LD_VAR 0 2
39806: PUSH
39807: LD_VAR 0 4
39811: ARRAY
39812: NONEQUAL
39813: IFFALSE 39825
// begin result := false ;
39815: LD_ADDR_VAR 0 3
39819: PUSH
39820: LD_INT 0
39822: ST_TO_ADDR
// break ;
39823: GO 39827
// end ;
39825: GO 39788
39827: POP
39828: POP
// end ;
39829: LD_VAR 0 3
39833: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39834: LD_INT 0
39836: PPUSH
39837: PPUSH
39838: PPUSH
// pom := GetBase ( fac ) ;
39839: LD_ADDR_VAR 0 5
39843: PUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: CALL_OW 274
39853: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39854: LD_ADDR_VAR 0 4
39858: PUSH
39859: LD_VAR 0 2
39863: PUSH
39864: LD_INT 1
39866: ARRAY
39867: PPUSH
39868: LD_VAR 0 2
39872: PUSH
39873: LD_INT 2
39875: ARRAY
39876: PPUSH
39877: LD_VAR 0 2
39881: PUSH
39882: LD_INT 3
39884: ARRAY
39885: PPUSH
39886: LD_VAR 0 2
39890: PUSH
39891: LD_INT 4
39893: ARRAY
39894: PPUSH
39895: CALL_OW 449
39899: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_VAR 0 5
39909: PPUSH
39910: LD_INT 1
39912: PPUSH
39913: CALL_OW 275
39917: PUSH
39918: LD_VAR 0 4
39922: PUSH
39923: LD_INT 1
39925: ARRAY
39926: GREATEREQUAL
39927: PUSH
39928: LD_VAR 0 5
39932: PPUSH
39933: LD_INT 2
39935: PPUSH
39936: CALL_OW 275
39940: PUSH
39941: LD_VAR 0 4
39945: PUSH
39946: LD_INT 2
39948: ARRAY
39949: GREATEREQUAL
39950: AND
39951: PUSH
39952: LD_VAR 0 5
39956: PPUSH
39957: LD_INT 3
39959: PPUSH
39960: CALL_OW 275
39964: PUSH
39965: LD_VAR 0 4
39969: PUSH
39970: LD_INT 3
39972: ARRAY
39973: GREATEREQUAL
39974: AND
39975: ST_TO_ADDR
// end ;
39976: LD_VAR 0 3
39980: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39981: LD_INT 0
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
// pom := GetBase ( building ) ;
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_VAR 0 1
39996: PPUSH
39997: CALL_OW 274
40001: ST_TO_ADDR
// if not pom then
40002: LD_VAR 0 3
40006: NOT
40007: IFFALSE 40011
// exit ;
40009: GO 40181
// btype := GetBType ( building ) ;
40011: LD_ADDR_VAR 0 5
40015: PUSH
40016: LD_VAR 0 1
40020: PPUSH
40021: CALL_OW 266
40025: ST_TO_ADDR
// if btype = b_armoury then
40026: LD_VAR 0 5
40030: PUSH
40031: LD_INT 4
40033: EQUAL
40034: IFFALSE 40044
// btype := b_barracks ;
40036: LD_ADDR_VAR 0 5
40040: PUSH
40041: LD_INT 5
40043: ST_TO_ADDR
// if btype = b_depot then
40044: LD_VAR 0 5
40048: PUSH
40049: LD_INT 0
40051: EQUAL
40052: IFFALSE 40062
// btype := b_warehouse ;
40054: LD_ADDR_VAR 0 5
40058: PUSH
40059: LD_INT 1
40061: ST_TO_ADDR
// if btype = b_workshop then
40062: LD_VAR 0 5
40066: PUSH
40067: LD_INT 2
40069: EQUAL
40070: IFFALSE 40080
// btype := b_factory ;
40072: LD_ADDR_VAR 0 5
40076: PUSH
40077: LD_INT 3
40079: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40080: LD_ADDR_VAR 0 4
40084: PUSH
40085: LD_VAR 0 5
40089: PPUSH
40090: LD_VAR 0 1
40094: PPUSH
40095: CALL_OW 248
40099: PPUSH
40100: CALL_OW 450
40104: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40105: LD_ADDR_VAR 0 2
40109: PUSH
40110: LD_VAR 0 3
40114: PPUSH
40115: LD_INT 1
40117: PPUSH
40118: CALL_OW 275
40122: PUSH
40123: LD_VAR 0 4
40127: PUSH
40128: LD_INT 1
40130: ARRAY
40131: GREATEREQUAL
40132: PUSH
40133: LD_VAR 0 3
40137: PPUSH
40138: LD_INT 2
40140: PPUSH
40141: CALL_OW 275
40145: PUSH
40146: LD_VAR 0 4
40150: PUSH
40151: LD_INT 2
40153: ARRAY
40154: GREATEREQUAL
40155: AND
40156: PUSH
40157: LD_VAR 0 3
40161: PPUSH
40162: LD_INT 3
40164: PPUSH
40165: CALL_OW 275
40169: PUSH
40170: LD_VAR 0 4
40174: PUSH
40175: LD_INT 3
40177: ARRAY
40178: GREATEREQUAL
40179: AND
40180: ST_TO_ADDR
// end ;
40181: LD_VAR 0 2
40185: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40186: LD_INT 0
40188: PPUSH
40189: PPUSH
40190: PPUSH
// pom := GetBase ( building ) ;
40191: LD_ADDR_VAR 0 4
40195: PUSH
40196: LD_VAR 0 1
40200: PPUSH
40201: CALL_OW 274
40205: ST_TO_ADDR
// if not pom then
40206: LD_VAR 0 4
40210: NOT
40211: IFFALSE 40215
// exit ;
40213: GO 40316
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40215: LD_ADDR_VAR 0 5
40219: PUSH
40220: LD_VAR 0 2
40224: PPUSH
40225: LD_VAR 0 1
40229: PPUSH
40230: CALL_OW 248
40234: PPUSH
40235: CALL_OW 450
40239: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40240: LD_ADDR_VAR 0 3
40244: PUSH
40245: LD_VAR 0 4
40249: PPUSH
40250: LD_INT 1
40252: PPUSH
40253: CALL_OW 275
40257: PUSH
40258: LD_VAR 0 5
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: GREATEREQUAL
40267: PUSH
40268: LD_VAR 0 4
40272: PPUSH
40273: LD_INT 2
40275: PPUSH
40276: CALL_OW 275
40280: PUSH
40281: LD_VAR 0 5
40285: PUSH
40286: LD_INT 2
40288: ARRAY
40289: GREATEREQUAL
40290: AND
40291: PUSH
40292: LD_VAR 0 4
40296: PPUSH
40297: LD_INT 3
40299: PPUSH
40300: CALL_OW 275
40304: PUSH
40305: LD_VAR 0 5
40309: PUSH
40310: LD_INT 3
40312: ARRAY
40313: GREATEREQUAL
40314: AND
40315: ST_TO_ADDR
// end ;
40316: LD_VAR 0 3
40320: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40321: LD_INT 0
40323: PPUSH
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
// result := false ;
40334: LD_ADDR_VAR 0 8
40338: PUSH
40339: LD_INT 0
40341: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40342: LD_VAR 0 5
40346: NOT
40347: PUSH
40348: LD_VAR 0 1
40352: NOT
40353: OR
40354: PUSH
40355: LD_VAR 0 2
40359: NOT
40360: OR
40361: PUSH
40362: LD_VAR 0 3
40366: NOT
40367: OR
40368: IFFALSE 40372
// exit ;
40370: GO 41186
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40372: LD_ADDR_VAR 0 14
40376: PUSH
40377: LD_VAR 0 1
40381: PPUSH
40382: LD_VAR 0 2
40386: PPUSH
40387: LD_VAR 0 3
40391: PPUSH
40392: LD_VAR 0 4
40396: PPUSH
40397: LD_VAR 0 5
40401: PUSH
40402: LD_INT 1
40404: ARRAY
40405: PPUSH
40406: CALL_OW 248
40410: PPUSH
40411: LD_INT 0
40413: PPUSH
40414: CALL 42423 0 6
40418: ST_TO_ADDR
// if not hexes then
40419: LD_VAR 0 14
40423: NOT
40424: IFFALSE 40428
// exit ;
40426: GO 41186
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40428: LD_ADDR_VAR 0 17
40432: PUSH
40433: LD_VAR 0 5
40437: PPUSH
40438: LD_INT 22
40440: PUSH
40441: LD_VAR 0 13
40445: PPUSH
40446: CALL_OW 255
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: LD_INT 30
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 30
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PPUSH
40487: CALL_OW 72
40491: ST_TO_ADDR
// for i = 1 to hexes do
40492: LD_ADDR_VAR 0 9
40496: PUSH
40497: DOUBLE
40498: LD_INT 1
40500: DEC
40501: ST_TO_ADDR
40502: LD_VAR 0 14
40506: PUSH
40507: FOR_TO
40508: IFFALSE 41184
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40510: LD_ADDR_VAR 0 13
40514: PUSH
40515: LD_VAR 0 14
40519: PUSH
40520: LD_VAR 0 9
40524: ARRAY
40525: PUSH
40526: LD_INT 1
40528: ARRAY
40529: PPUSH
40530: LD_VAR 0 14
40534: PUSH
40535: LD_VAR 0 9
40539: ARRAY
40540: PUSH
40541: LD_INT 2
40543: ARRAY
40544: PPUSH
40545: CALL_OW 428
40549: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40550: LD_VAR 0 14
40554: PUSH
40555: LD_VAR 0 9
40559: ARRAY
40560: PUSH
40561: LD_INT 1
40563: ARRAY
40564: PPUSH
40565: LD_VAR 0 14
40569: PUSH
40570: LD_VAR 0 9
40574: ARRAY
40575: PUSH
40576: LD_INT 2
40578: ARRAY
40579: PPUSH
40580: CALL_OW 351
40584: PUSH
40585: LD_VAR 0 14
40589: PUSH
40590: LD_VAR 0 9
40594: ARRAY
40595: PUSH
40596: LD_INT 1
40598: ARRAY
40599: PPUSH
40600: LD_VAR 0 14
40604: PUSH
40605: LD_VAR 0 9
40609: ARRAY
40610: PUSH
40611: LD_INT 2
40613: ARRAY
40614: PPUSH
40615: CALL_OW 488
40619: NOT
40620: OR
40621: PUSH
40622: LD_VAR 0 13
40626: PPUSH
40627: CALL_OW 247
40631: PUSH
40632: LD_INT 3
40634: EQUAL
40635: OR
40636: IFFALSE 40642
// exit ;
40638: POP
40639: POP
40640: GO 41186
// if not tmp then
40642: LD_VAR 0 13
40646: NOT
40647: IFFALSE 40651
// continue ;
40649: GO 40507
// result := true ;
40651: LD_ADDR_VAR 0 8
40655: PUSH
40656: LD_INT 1
40658: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40659: LD_VAR 0 6
40663: PUSH
40664: LD_VAR 0 13
40668: PPUSH
40669: CALL_OW 247
40673: PUSH
40674: LD_INT 2
40676: EQUAL
40677: AND
40678: PUSH
40679: LD_VAR 0 13
40683: PPUSH
40684: CALL_OW 263
40688: PUSH
40689: LD_INT 1
40691: EQUAL
40692: AND
40693: IFFALSE 40857
// begin if IsDrivenBy ( tmp ) then
40695: LD_VAR 0 13
40699: PPUSH
40700: CALL_OW 311
40704: IFFALSE 40708
// continue ;
40706: GO 40507
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40708: LD_VAR 0 6
40712: PPUSH
40713: LD_INT 3
40715: PUSH
40716: LD_INT 60
40718: PUSH
40719: EMPTY
40720: LIST
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 3
40728: PUSH
40729: LD_INT 55
40731: PUSH
40732: EMPTY
40733: LIST
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PPUSH
40743: CALL_OW 72
40747: IFFALSE 40855
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40749: LD_ADDR_VAR 0 18
40753: PUSH
40754: LD_VAR 0 6
40758: PPUSH
40759: LD_INT 3
40761: PUSH
40762: LD_INT 60
40764: PUSH
40765: EMPTY
40766: LIST
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: PUSH
40775: LD_INT 55
40777: PUSH
40778: EMPTY
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PPUSH
40789: CALL_OW 72
40793: PUSH
40794: LD_INT 1
40796: ARRAY
40797: ST_TO_ADDR
// if IsInUnit ( driver ) then
40798: LD_VAR 0 18
40802: PPUSH
40803: CALL_OW 310
40807: IFFALSE 40818
// ComExit ( driver ) ;
40809: LD_VAR 0 18
40813: PPUSH
40814: CALL 65607 0 1
// AddComEnterUnit ( driver , tmp ) ;
40818: LD_VAR 0 18
40822: PPUSH
40823: LD_VAR 0 13
40827: PPUSH
40828: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40832: LD_VAR 0 18
40836: PPUSH
40837: LD_VAR 0 7
40841: PPUSH
40842: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40846: LD_VAR 0 18
40850: PPUSH
40851: CALL_OW 181
// end ; continue ;
40855: GO 40507
// end ; if not cleaners or not tmp in cleaners then
40857: LD_VAR 0 6
40861: NOT
40862: PUSH
40863: LD_VAR 0 13
40867: PUSH
40868: LD_VAR 0 6
40872: IN
40873: NOT
40874: OR
40875: IFFALSE 41182
// begin if dep then
40877: LD_VAR 0 17
40881: IFFALSE 41017
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40883: LD_ADDR_VAR 0 16
40887: PUSH
40888: LD_VAR 0 17
40892: PUSH
40893: LD_INT 1
40895: ARRAY
40896: PPUSH
40897: CALL_OW 250
40901: PPUSH
40902: LD_VAR 0 17
40906: PUSH
40907: LD_INT 1
40909: ARRAY
40910: PPUSH
40911: CALL_OW 254
40915: PPUSH
40916: LD_INT 5
40918: PPUSH
40919: CALL_OW 272
40923: PUSH
40924: LD_VAR 0 17
40928: PUSH
40929: LD_INT 1
40931: ARRAY
40932: PPUSH
40933: CALL_OW 251
40937: PPUSH
40938: LD_VAR 0 17
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: PPUSH
40947: CALL_OW 254
40951: PPUSH
40952: LD_INT 5
40954: PPUSH
40955: CALL_OW 273
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40964: LD_VAR 0 16
40968: PUSH
40969: LD_INT 1
40971: ARRAY
40972: PPUSH
40973: LD_VAR 0 16
40977: PUSH
40978: LD_INT 2
40980: ARRAY
40981: PPUSH
40982: CALL_OW 488
40986: IFFALSE 41017
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40988: LD_VAR 0 13
40992: PPUSH
40993: LD_VAR 0 16
40997: PUSH
40998: LD_INT 1
41000: ARRAY
41001: PPUSH
41002: LD_VAR 0 16
41006: PUSH
41007: LD_INT 2
41009: ARRAY
41010: PPUSH
41011: CALL_OW 111
// continue ;
41015: GO 40507
// end ; end ; r := GetDir ( tmp ) ;
41017: LD_ADDR_VAR 0 15
41021: PUSH
41022: LD_VAR 0 13
41026: PPUSH
41027: CALL_OW 254
41031: ST_TO_ADDR
// if r = 5 then
41032: LD_VAR 0 15
41036: PUSH
41037: LD_INT 5
41039: EQUAL
41040: IFFALSE 41050
// r := 0 ;
41042: LD_ADDR_VAR 0 15
41046: PUSH
41047: LD_INT 0
41049: ST_TO_ADDR
// for j = r to 5 do
41050: LD_ADDR_VAR 0 10
41054: PUSH
41055: DOUBLE
41056: LD_VAR 0 15
41060: DEC
41061: ST_TO_ADDR
41062: LD_INT 5
41064: PUSH
41065: FOR_TO
41066: IFFALSE 41180
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41068: LD_ADDR_VAR 0 11
41072: PUSH
41073: LD_VAR 0 13
41077: PPUSH
41078: CALL_OW 250
41082: PPUSH
41083: LD_VAR 0 10
41087: PPUSH
41088: LD_INT 2
41090: PPUSH
41091: CALL_OW 272
41095: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41096: LD_ADDR_VAR 0 12
41100: PUSH
41101: LD_VAR 0 13
41105: PPUSH
41106: CALL_OW 251
41110: PPUSH
41111: LD_VAR 0 10
41115: PPUSH
41116: LD_INT 2
41118: PPUSH
41119: CALL_OW 273
41123: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41124: LD_VAR 0 11
41128: PPUSH
41129: LD_VAR 0 12
41133: PPUSH
41134: CALL_OW 488
41138: PUSH
41139: LD_VAR 0 11
41143: PPUSH
41144: LD_VAR 0 12
41148: PPUSH
41149: CALL_OW 428
41153: NOT
41154: AND
41155: IFFALSE 41178
// begin ComMoveXY ( tmp , _x , _y ) ;
41157: LD_VAR 0 13
41161: PPUSH
41162: LD_VAR 0 11
41166: PPUSH
41167: LD_VAR 0 12
41171: PPUSH
41172: CALL_OW 111
// break ;
41176: GO 41180
// end ; end ;
41178: GO 41065
41180: POP
41181: POP
// end ; end ;
41182: GO 40507
41184: POP
41185: POP
// end ;
41186: LD_VAR 0 8
41190: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41191: LD_INT 0
41193: PPUSH
// result := true ;
41194: LD_ADDR_VAR 0 3
41198: PUSH
41199: LD_INT 1
41201: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41202: LD_VAR 0 2
41206: PUSH
41207: LD_INT 24
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41221
41213: LD_INT 33
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41221
41219: GO 41246
41221: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 32
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 321
41239: PUSH
41240: LD_INT 2
41242: EQUAL
41243: ST_TO_ADDR
41244: GO 41566
41246: LD_INT 20
41248: DOUBLE
41249: EQUAL
41250: IFTRUE 41254
41252: GO 41279
41254: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41255: LD_ADDR_VAR 0 3
41259: PUSH
41260: LD_INT 6
41262: PPUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: CALL_OW 321
41272: PUSH
41273: LD_INT 2
41275: EQUAL
41276: ST_TO_ADDR
41277: GO 41566
41279: LD_INT 22
41281: DOUBLE
41282: EQUAL
41283: IFTRUE 41293
41285: LD_INT 36
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41293
41291: GO 41318
41293: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41294: LD_ADDR_VAR 0 3
41298: PUSH
41299: LD_INT 15
41301: PPUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 321
41311: PUSH
41312: LD_INT 2
41314: EQUAL
41315: ST_TO_ADDR
41316: GO 41566
41318: LD_INT 30
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41326
41324: GO 41351
41326: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41327: LD_ADDR_VAR 0 3
41331: PUSH
41332: LD_INT 20
41334: PPUSH
41335: LD_VAR 0 1
41339: PPUSH
41340: CALL_OW 321
41344: PUSH
41345: LD_INT 2
41347: EQUAL
41348: ST_TO_ADDR
41349: GO 41566
41351: LD_INT 28
41353: DOUBLE
41354: EQUAL
41355: IFTRUE 41365
41357: LD_INT 21
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41390
41365: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41366: LD_ADDR_VAR 0 3
41370: PUSH
41371: LD_INT 21
41373: PPUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 321
41383: PUSH
41384: LD_INT 2
41386: EQUAL
41387: ST_TO_ADDR
41388: GO 41566
41390: LD_INT 16
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41398
41396: GO 41425
41398: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41399: LD_ADDR_VAR 0 3
41403: PUSH
41404: LD_EXP 108
41408: PPUSH
41409: LD_VAR 0 1
41413: PPUSH
41414: CALL_OW 321
41418: PUSH
41419: LD_INT 2
41421: EQUAL
41422: ST_TO_ADDR
41423: GO 41566
41425: LD_INT 19
41427: DOUBLE
41428: EQUAL
41429: IFTRUE 41439
41431: LD_INT 23
41433: DOUBLE
41434: EQUAL
41435: IFTRUE 41439
41437: GO 41466
41439: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41440: LD_ADDR_VAR 0 3
41444: PUSH
41445: LD_EXP 107
41449: PPUSH
41450: LD_VAR 0 1
41454: PPUSH
41455: CALL_OW 321
41459: PUSH
41460: LD_INT 2
41462: EQUAL
41463: ST_TO_ADDR
41464: GO 41566
41466: LD_INT 17
41468: DOUBLE
41469: EQUAL
41470: IFTRUE 41474
41472: GO 41499
41474: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41475: LD_ADDR_VAR 0 3
41479: PUSH
41480: LD_INT 39
41482: PPUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: CALL_OW 321
41492: PUSH
41493: LD_INT 2
41495: EQUAL
41496: ST_TO_ADDR
41497: GO 41566
41499: LD_INT 18
41501: DOUBLE
41502: EQUAL
41503: IFTRUE 41507
41505: GO 41532
41507: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41508: LD_ADDR_VAR 0 3
41512: PUSH
41513: LD_INT 40
41515: PPUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL_OW 321
41525: PUSH
41526: LD_INT 2
41528: EQUAL
41529: ST_TO_ADDR
41530: GO 41566
41532: LD_INT 27
41534: DOUBLE
41535: EQUAL
41536: IFTRUE 41540
41538: GO 41565
41540: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41541: LD_ADDR_VAR 0 3
41545: PUSH
41546: LD_INT 35
41548: PPUSH
41549: LD_VAR 0 1
41553: PPUSH
41554: CALL_OW 321
41558: PUSH
41559: LD_INT 2
41561: EQUAL
41562: ST_TO_ADDR
41563: GO 41566
41565: POP
// end ;
41566: LD_VAR 0 3
41570: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41571: LD_INT 0
41573: PPUSH
41574: PPUSH
41575: PPUSH
41576: PPUSH
41577: PPUSH
41578: PPUSH
41579: PPUSH
41580: PPUSH
41581: PPUSH
41582: PPUSH
41583: PPUSH
// result := false ;
41584: LD_ADDR_VAR 0 6
41588: PUSH
41589: LD_INT 0
41591: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41592: LD_VAR 0 1
41596: NOT
41597: PUSH
41598: LD_VAR 0 1
41602: PPUSH
41603: CALL_OW 266
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: IN
41618: NOT
41619: OR
41620: PUSH
41621: LD_VAR 0 2
41625: NOT
41626: OR
41627: PUSH
41628: LD_VAR 0 5
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 3
41644: PUSH
41645: LD_INT 4
41647: PUSH
41648: LD_INT 5
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: IN
41659: NOT
41660: OR
41661: PUSH
41662: LD_VAR 0 3
41666: PPUSH
41667: LD_VAR 0 4
41671: PPUSH
41672: CALL_OW 488
41676: NOT
41677: OR
41678: IFFALSE 41682
// exit ;
41680: GO 42418
// side := GetSide ( depot ) ;
41682: LD_ADDR_VAR 0 9
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 255
41696: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41697: LD_VAR 0 9
41701: PPUSH
41702: LD_VAR 0 2
41706: PPUSH
41707: CALL 41191 0 2
41711: NOT
41712: IFFALSE 41716
// exit ;
41714: GO 42418
// pom := GetBase ( depot ) ;
41716: LD_ADDR_VAR 0 10
41720: PUSH
41721: LD_VAR 0 1
41725: PPUSH
41726: CALL_OW 274
41730: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41731: LD_ADDR_VAR 0 11
41735: PUSH
41736: LD_VAR 0 2
41740: PPUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 248
41750: PPUSH
41751: CALL_OW 450
41755: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41756: LD_VAR 0 10
41760: PPUSH
41761: LD_INT 1
41763: PPUSH
41764: CALL_OW 275
41768: PUSH
41769: LD_VAR 0 11
41773: PUSH
41774: LD_INT 1
41776: ARRAY
41777: GREATEREQUAL
41778: PUSH
41779: LD_VAR 0 10
41783: PPUSH
41784: LD_INT 2
41786: PPUSH
41787: CALL_OW 275
41791: PUSH
41792: LD_VAR 0 11
41796: PUSH
41797: LD_INT 2
41799: ARRAY
41800: GREATEREQUAL
41801: AND
41802: PUSH
41803: LD_VAR 0 10
41807: PPUSH
41808: LD_INT 3
41810: PPUSH
41811: CALL_OW 275
41815: PUSH
41816: LD_VAR 0 11
41820: PUSH
41821: LD_INT 3
41823: ARRAY
41824: GREATEREQUAL
41825: AND
41826: NOT
41827: IFFALSE 41831
// exit ;
41829: GO 42418
// if GetBType ( depot ) = b_depot then
41831: LD_VAR 0 1
41835: PPUSH
41836: CALL_OW 266
41840: PUSH
41841: LD_INT 0
41843: EQUAL
41844: IFFALSE 41856
// dist := 28 else
41846: LD_ADDR_VAR 0 14
41850: PUSH
41851: LD_INT 28
41853: ST_TO_ADDR
41854: GO 41864
// dist := 36 ;
41856: LD_ADDR_VAR 0 14
41860: PUSH
41861: LD_INT 36
41863: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41864: LD_VAR 0 1
41868: PPUSH
41869: LD_VAR 0 3
41873: PPUSH
41874: LD_VAR 0 4
41878: PPUSH
41879: CALL_OW 297
41883: PUSH
41884: LD_VAR 0 14
41888: GREATER
41889: IFFALSE 41893
// exit ;
41891: GO 42418
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41893: LD_ADDR_VAR 0 12
41897: PUSH
41898: LD_VAR 0 2
41902: PPUSH
41903: LD_VAR 0 3
41907: PPUSH
41908: LD_VAR 0 4
41912: PPUSH
41913: LD_VAR 0 5
41917: PPUSH
41918: LD_VAR 0 1
41922: PPUSH
41923: CALL_OW 248
41927: PPUSH
41928: LD_INT 0
41930: PPUSH
41931: CALL 42423 0 6
41935: ST_TO_ADDR
// if not hexes then
41936: LD_VAR 0 12
41940: NOT
41941: IFFALSE 41945
// exit ;
41943: GO 42418
// hex := GetHexInfo ( x , y ) ;
41945: LD_ADDR_VAR 0 15
41949: PUSH
41950: LD_VAR 0 3
41954: PPUSH
41955: LD_VAR 0 4
41959: PPUSH
41960: CALL_OW 546
41964: ST_TO_ADDR
// if hex [ 1 ] then
41965: LD_VAR 0 15
41969: PUSH
41970: LD_INT 1
41972: ARRAY
41973: IFFALSE 41977
// exit ;
41975: GO 42418
// height := hex [ 2 ] ;
41977: LD_ADDR_VAR 0 13
41981: PUSH
41982: LD_VAR 0 15
41986: PUSH
41987: LD_INT 2
41989: ARRAY
41990: ST_TO_ADDR
// for i = 1 to hexes do
41991: LD_ADDR_VAR 0 7
41995: PUSH
41996: DOUBLE
41997: LD_INT 1
41999: DEC
42000: ST_TO_ADDR
42001: LD_VAR 0 12
42005: PUSH
42006: FOR_TO
42007: IFFALSE 42337
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42009: LD_VAR 0 12
42013: PUSH
42014: LD_VAR 0 7
42018: ARRAY
42019: PUSH
42020: LD_INT 1
42022: ARRAY
42023: PPUSH
42024: LD_VAR 0 12
42028: PUSH
42029: LD_VAR 0 7
42033: ARRAY
42034: PUSH
42035: LD_INT 2
42037: ARRAY
42038: PPUSH
42039: CALL_OW 488
42043: NOT
42044: PUSH
42045: LD_VAR 0 12
42049: PUSH
42050: LD_VAR 0 7
42054: ARRAY
42055: PUSH
42056: LD_INT 1
42058: ARRAY
42059: PPUSH
42060: LD_VAR 0 12
42064: PUSH
42065: LD_VAR 0 7
42069: ARRAY
42070: PUSH
42071: LD_INT 2
42073: ARRAY
42074: PPUSH
42075: CALL_OW 428
42079: PUSH
42080: LD_INT 0
42082: GREATER
42083: OR
42084: PUSH
42085: LD_VAR 0 12
42089: PUSH
42090: LD_VAR 0 7
42094: ARRAY
42095: PUSH
42096: LD_INT 1
42098: ARRAY
42099: PPUSH
42100: LD_VAR 0 12
42104: PUSH
42105: LD_VAR 0 7
42109: ARRAY
42110: PUSH
42111: LD_INT 2
42113: ARRAY
42114: PPUSH
42115: CALL_OW 351
42119: OR
42120: IFFALSE 42126
// exit ;
42122: POP
42123: POP
42124: GO 42418
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42126: LD_ADDR_VAR 0 8
42130: PUSH
42131: LD_VAR 0 12
42135: PUSH
42136: LD_VAR 0 7
42140: ARRAY
42141: PUSH
42142: LD_INT 1
42144: ARRAY
42145: PPUSH
42146: LD_VAR 0 12
42150: PUSH
42151: LD_VAR 0 7
42155: ARRAY
42156: PUSH
42157: LD_INT 2
42159: ARRAY
42160: PPUSH
42161: CALL_OW 546
42165: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42166: LD_VAR 0 8
42170: PUSH
42171: LD_INT 1
42173: ARRAY
42174: PUSH
42175: LD_VAR 0 8
42179: PUSH
42180: LD_INT 2
42182: ARRAY
42183: PUSH
42184: LD_VAR 0 13
42188: PUSH
42189: LD_INT 2
42191: PLUS
42192: GREATER
42193: OR
42194: PUSH
42195: LD_VAR 0 8
42199: PUSH
42200: LD_INT 2
42202: ARRAY
42203: PUSH
42204: LD_VAR 0 13
42208: PUSH
42209: LD_INT 2
42211: MINUS
42212: LESS
42213: OR
42214: PUSH
42215: LD_VAR 0 8
42219: PUSH
42220: LD_INT 3
42222: ARRAY
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 8
42229: PUSH
42230: LD_INT 9
42232: PUSH
42233: LD_INT 10
42235: PUSH
42236: LD_INT 11
42238: PUSH
42239: LD_INT 12
42241: PUSH
42242: LD_INT 13
42244: PUSH
42245: LD_INT 16
42247: PUSH
42248: LD_INT 17
42250: PUSH
42251: LD_INT 18
42253: PUSH
42254: LD_INT 19
42256: PUSH
42257: LD_INT 20
42259: PUSH
42260: LD_INT 21
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: IN
42278: NOT
42279: OR
42280: PUSH
42281: LD_VAR 0 8
42285: PUSH
42286: LD_INT 5
42288: ARRAY
42289: NOT
42290: OR
42291: PUSH
42292: LD_VAR 0 8
42296: PUSH
42297: LD_INT 6
42299: ARRAY
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 7
42309: PUSH
42310: LD_INT 9
42312: PUSH
42313: LD_INT 10
42315: PUSH
42316: LD_INT 11
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: IN
42327: NOT
42328: OR
42329: IFFALSE 42335
// exit ;
42331: POP
42332: POP
42333: GO 42418
// end ;
42335: GO 42006
42337: POP
42338: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42339: LD_VAR 0 9
42343: PPUSH
42344: LD_VAR 0 3
42348: PPUSH
42349: LD_VAR 0 4
42353: PPUSH
42354: LD_INT 20
42356: PPUSH
42357: CALL 34364 0 4
42361: PUSH
42362: LD_INT 4
42364: ARRAY
42365: IFFALSE 42369
// exit ;
42367: GO 42418
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42369: LD_VAR 0 2
42373: PUSH
42374: LD_INT 29
42376: PUSH
42377: LD_INT 30
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: IN
42384: PUSH
42385: LD_VAR 0 3
42389: PPUSH
42390: LD_VAR 0 4
42394: PPUSH
42395: LD_VAR 0 9
42399: PPUSH
42400: CALL_OW 440
42404: NOT
42405: AND
42406: IFFALSE 42410
// exit ;
42408: GO 42418
// result := true ;
42410: LD_ADDR_VAR 0 6
42414: PUSH
42415: LD_INT 1
42417: ST_TO_ADDR
// end ;
42418: LD_VAR 0 6
42422: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42423: LD_INT 0
42425: PPUSH
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
// result = [ ] ;
42483: LD_ADDR_VAR 0 7
42487: PUSH
42488: EMPTY
42489: ST_TO_ADDR
// temp_list = [ ] ;
42490: LD_ADDR_VAR 0 9
42494: PUSH
42495: EMPTY
42496: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42497: LD_VAR 0 4
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: LD_INT 3
42513: PUSH
42514: LD_INT 4
42516: PUSH
42517: LD_INT 5
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: IN
42528: NOT
42529: PUSH
42530: LD_VAR 0 1
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: IN
42545: PUSH
42546: LD_VAR 0 5
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: IN
42565: NOT
42566: AND
42567: OR
42568: IFFALSE 42572
// exit ;
42570: GO 60963
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42572: LD_VAR 0 1
42576: PUSH
42577: LD_INT 6
42579: PUSH
42580: LD_INT 7
42582: PUSH
42583: LD_INT 8
42585: PUSH
42586: LD_INT 13
42588: PUSH
42589: LD_INT 12
42591: PUSH
42592: LD_INT 15
42594: PUSH
42595: LD_INT 11
42597: PUSH
42598: LD_INT 14
42600: PUSH
42601: LD_INT 10
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: IN
42615: IFFALSE 42625
// btype = b_lab ;
42617: LD_ADDR_VAR 0 1
42621: PUSH
42622: LD_INT 6
42624: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42625: LD_VAR 0 6
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: IN
42644: NOT
42645: PUSH
42646: LD_VAR 0 1
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 3
42662: PUSH
42663: LD_INT 6
42665: PUSH
42666: LD_INT 36
42668: PUSH
42669: LD_INT 4
42671: PUSH
42672: LD_INT 5
42674: PUSH
42675: LD_INT 31
42677: PUSH
42678: LD_INT 32
42680: PUSH
42681: LD_INT 33
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: IN
42697: NOT
42698: PUSH
42699: LD_VAR 0 6
42703: PUSH
42704: LD_INT 1
42706: EQUAL
42707: AND
42708: OR
42709: PUSH
42710: LD_VAR 0 1
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: LD_INT 3
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: IN
42725: NOT
42726: PUSH
42727: LD_VAR 0 6
42731: PUSH
42732: LD_INT 2
42734: EQUAL
42735: AND
42736: OR
42737: IFFALSE 42747
// mode = 0 ;
42739: LD_ADDR_VAR 0 6
42743: PUSH
42744: LD_INT 0
42746: ST_TO_ADDR
// case mode of 0 :
42747: LD_VAR 0 6
42751: PUSH
42752: LD_INT 0
42754: DOUBLE
42755: EQUAL
42756: IFTRUE 42760
42758: GO 54213
42760: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42761: LD_ADDR_VAR 0 11
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42954: LD_ADDR_VAR 0 12
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: NEG
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43150: LD_ADDR_VAR 0 13
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 2
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 3
43309: NEG
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: LD_INT 3
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43349: LD_ADDR_VAR 0 14
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 3
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43545: LD_ADDR_VAR 0 15
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 3
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43738: LD_ADDR_VAR 0 16
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: LD_INT 3
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43931: LD_ADDR_VAR 0 17
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 2
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44161: LD_ADDR_VAR 0 18
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44391: LD_ADDR_VAR 0 19
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44621: LD_ADDR_VAR 0 20
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44851: LD_ADDR_VAR 0 21
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45081: LD_ADDR_VAR 0 22
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45311: LD_ADDR_VAR 0 23
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: LD_INT 3
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 3
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45591: LD_ADDR_VAR 0 24
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 3
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45867: LD_ADDR_VAR 0 25
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 3
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 3
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46141: LD_ADDR_VAR 0 26
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 2
46340: NEG
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46417: LD_ADDR_VAR 0 27
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: NEG
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46697: LD_ADDR_VAR 0 28
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: LD_INT 3
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 3
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46979: LD_ADDR_VAR 0 29
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 3
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47258: LD_ADDR_VAR 0 30
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 3
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 3
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 3
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47536: LD_ADDR_VAR 0 31
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 3
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47814: LD_ADDR_VAR 0 32
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 3
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48092: LD_ADDR_VAR 0 33
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 3
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48371: LD_ADDR_VAR 0 34
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 3
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48651: LD_ADDR_VAR 0 35
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48763: LD_ADDR_VAR 0 36
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48875: LD_ADDR_VAR 0 37
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48987: LD_ADDR_VAR 0 38
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49099: LD_ADDR_VAR 0 39
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49211: LD_ADDR_VAR 0 40
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49323: LD_ADDR_VAR 0 41
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 3
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 3
49597: NEG
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49673: LD_ADDR_VAR 0 42
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 3
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 3
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 3
49982: NEG
49983: PUSH
49984: LD_INT 3
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50023: LD_ADDR_VAR 0 43
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 3
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50371: LD_ADDR_VAR 0 44
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50721: LD_ADDR_VAR 0 45
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: NEG
51031: PUSH
51032: LD_INT 3
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51071: LD_ADDR_VAR 0 46
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51419: LD_ADDR_VAR 0 47
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51570: LD_ADDR_VAR 0 48
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51717: LD_ADDR_VAR 0 49
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51861: LD_ADDR_VAR 0 50
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52005: LD_ADDR_VAR 0 51
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52152: LD_ADDR_VAR 0 52
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52303: LD_ADDR_VAR 0 53
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52533: LD_ADDR_VAR 0 54
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52763: LD_ADDR_VAR 0 55
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52993: LD_ADDR_VAR 0 56
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53223: LD_ADDR_VAR 0 57
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53453: LD_ADDR_VAR 0 58
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53683: LD_ADDR_VAR 0 59
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53771: LD_ADDR_VAR 0 60
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53859: LD_ADDR_VAR 0 61
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53947: LD_ADDR_VAR 0 62
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54035: LD_ADDR_VAR 0 63
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54123: LD_ADDR_VAR 0 64
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: ST_TO_ADDR
// end ; 1 :
54211: GO 60108
54213: LD_INT 1
54215: DOUBLE
54216: EQUAL
54217: IFTRUE 54221
54219: GO 56844
54221: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54222: LD_ADDR_VAR 0 11
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: LIST
54265: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54266: LD_ADDR_VAR 0 12
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54307: LD_ADDR_VAR 0 13
54311: PUSH
54312: LD_INT 3
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 3
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54347: LD_ADDR_VAR 0 14
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54388: LD_ADDR_VAR 0 15
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54432: LD_ADDR_VAR 0 16
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 3
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 3
54463: NEG
54464: PUSH
54465: LD_INT 3
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: LIST
54477: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54478: LD_ADDR_VAR 0 17
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 3
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54522: LD_ADDR_VAR 0 18
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54563: LD_ADDR_VAR 0 19
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54603: LD_ADDR_VAR 0 20
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54644: LD_ADDR_VAR 0 21
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54688: LD_ADDR_VAR 0 22
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 3
54719: NEG
54720: PUSH
54721: LD_INT 3
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54734: LD_ADDR_VAR 0 23
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 4
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54778: LD_ADDR_VAR 0 24
54782: PUSH
54783: LD_INT 3
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 4
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54819: LD_ADDR_VAR 0 25
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 4
54836: PUSH
54837: LD_INT 3
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: LD_INT 4
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: LIST
54858: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54859: LD_ADDR_VAR 0 26
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 3
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 4
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54900: LD_ADDR_VAR 0 27
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 4
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54944: LD_ADDR_VAR 0 28
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: LD_INT 3
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: LD_INT 4
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 4
54975: NEG
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54990: LD_ADDR_VAR 0 29
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 4
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 4
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 5
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 5
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 4
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 6
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 6
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 5
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55145: LD_ADDR_VAR 0 30
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 3
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 4
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 4
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 5
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 5
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 5
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 6
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 6
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55288: LD_ADDR_VAR 0 31
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 3
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: LD_INT 3
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 4
55335: PUSH
55336: LD_INT 4
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: LD_INT 4
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 5
55355: PUSH
55356: LD_INT 4
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 5
55365: PUSH
55366: LD_INT 5
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 4
55375: PUSH
55376: LD_INT 5
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 6
55385: PUSH
55386: LD_INT 5
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 6
55395: PUSH
55396: LD_INT 6
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 5
55405: PUSH
55406: LD_INT 6
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55427: LD_ADDR_VAR 0 32
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 3
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 4
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 4
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 3
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 5
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 5
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 4
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 6
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 6
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 5
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55570: LD_ADDR_VAR 0 33
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: NEG
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 4
55622: NEG
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 4
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 4
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 5
55656: NEG
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 5
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 5
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 6
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 6
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55725: LD_ADDR_VAR 0 34
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: NEG
55757: PUSH
55758: LD_INT 3
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: NEG
55769: PUSH
55770: LD_INT 4
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 4
55780: NEG
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 4
55792: NEG
55793: PUSH
55794: LD_INT 4
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 4
55804: NEG
55805: PUSH
55806: LD_INT 5
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 5
55816: NEG
55817: PUSH
55818: LD_INT 4
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 5
55828: NEG
55829: PUSH
55830: LD_INT 5
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 5
55840: NEG
55841: PUSH
55842: LD_INT 6
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 6
55852: NEG
55853: PUSH
55854: LD_INT 5
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 6
55864: NEG
55865: PUSH
55866: LD_INT 6
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55888: LD_ADDR_VAR 0 41
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55932: LD_ADDR_VAR 0 42
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55973: LD_ADDR_VAR 0 43
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: LIST
56012: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56013: LD_ADDR_VAR 0 44
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56054: LD_ADDR_VAR 0 45
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56098: LD_ADDR_VAR 0 46
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56144: LD_ADDR_VAR 0 47
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56177: LD_ADDR_VAR 0 48
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56208: LD_ADDR_VAR 0 49
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56237: LD_ADDR_VAR 0 50
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56266: LD_ADDR_VAR 0 51
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56297: LD_ADDR_VAR 0 52
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 3
56316: NEG
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56330: LD_ADDR_VAR 0 53
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56374: LD_ADDR_VAR 0 54
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: LIST
56414: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56415: LD_ADDR_VAR 0 55
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56455: LD_ADDR_VAR 0 56
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56496: LD_ADDR_VAR 0 57
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56540: LD_ADDR_VAR 0 58
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56586: LD_ADDR_VAR 0 59
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56630: LD_ADDR_VAR 0 60
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: LIST
56670: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56671: LD_ADDR_VAR 0 61
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56711: LD_ADDR_VAR 0 62
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56752: LD_ADDR_VAR 0 63
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56796: LD_ADDR_VAR 0 64
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: ST_TO_ADDR
// end ; 2 :
56842: GO 60108
56844: LD_INT 2
56846: DOUBLE
56847: EQUAL
56848: IFTRUE 56852
56850: GO 60107
56852: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56853: LD_ADDR_VAR 0 29
56857: PUSH
56858: LD_INT 4
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 5
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 5
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 4
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 5
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 4
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 4
56983: PUSH
56984: LD_INT 4
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: LD_INT 4
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 4
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 4
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 4
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 3
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 4
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 5
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 4
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: LD_INT 5
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: NEG
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 4
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 4
57215: NEG
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 4
57238: NEG
57239: PUSH
57240: LD_INT 4
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 4
57250: NEG
57251: PUSH
57252: LD_INT 5
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: LD_INT 4
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 4
57286: NEG
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 5
57298: NEG
57299: PUSH
57300: LD_INT 4
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 5
57310: NEG
57311: PUSH
57312: LD_INT 5
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: LD_INT 5
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 5
57334: NEG
57335: PUSH
57336: LD_INT 3
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57391: LD_ADDR_VAR 0 30
57395: PUSH
57396: LD_INT 4
57398: PUSH
57399: LD_INT 4
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 5
57418: PUSH
57419: LD_INT 4
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 5
57428: PUSH
57429: LD_INT 5
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: LD_INT 5
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: LD_INT 4
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 5
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: LD_INT 5
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 4
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 4
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 4
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 3
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 4
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 5
57637: NEG
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 5
57660: NEG
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: LD_INT 4
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 4
57743: NEG
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 4
57755: NEG
57756: PUSH
57757: LD_INT 4
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 4
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 4
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 5
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 4
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 5
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: LD_INT 3
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 5
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57938: LD_ADDR_VAR 0 31
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 4
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 4
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 5
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 5
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: LD_INT 4
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 5
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 3
58038: NEG
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 4
58094: NEG
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 4
58117: NEG
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 4
58140: NEG
58141: PUSH
58142: LD_INT 4
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 4
58152: NEG
58153: PUSH
58154: LD_INT 5
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: LD_INT 4
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 4
58188: NEG
58189: PUSH
58190: LD_INT 3
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 5
58200: NEG
58201: PUSH
58202: LD_INT 4
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 5
58212: NEG
58213: PUSH
58214: LD_INT 5
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: LD_INT 5
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 5
58236: NEG
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: LD_INT 3
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: LD_INT 4
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: LD_INT 4
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 4
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 5
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 5
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 4
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 5
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58488: LD_ADDR_VAR 0 32
58492: PUSH
58493: LD_INT 4
58495: NEG
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 4
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: NEG
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 4
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 5
58551: NEG
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 5
58562: NEG
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 5
58574: NEG
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: LD_INT 3
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: LD_INT 4
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 4
58657: NEG
58658: PUSH
58659: LD_INT 3
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: LD_INT 4
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 4
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 4
58693: NEG
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 4
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 5
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 4
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 4
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 5
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: LD_INT 5
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 4
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 4
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 4
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 4
58900: PUSH
58901: LD_INT 4
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 4
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 5
58920: PUSH
58921: LD_INT 4
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: LD_INT 5
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 4
58940: PUSH
58941: LD_INT 5
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 4
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 5
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: LD_INT 5
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59035: LD_ADDR_VAR 0 33
59039: PUSH
59040: LD_INT 4
59042: NEG
59043: PUSH
59044: LD_INT 4
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 4
59054: NEG
59055: PUSH
59056: LD_INT 5
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: LD_INT 4
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 3
59078: NEG
59079: PUSH
59080: LD_INT 3
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 4
59090: NEG
59091: PUSH
59092: LD_INT 3
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 5
59102: NEG
59103: PUSH
59104: LD_INT 4
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 5
59114: NEG
59115: PUSH
59116: LD_INT 5
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: LD_INT 5
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 5
59138: NEG
59139: PUSH
59140: LD_INT 3
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 4
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: LD_INT 4
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 4
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 4
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 4
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 5
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 5
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 3
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 5
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 4
59365: PUSH
59366: LD_INT 3
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 4
59375: PUSH
59376: LD_INT 4
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: LD_INT 4
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: LD_INT 3
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 4
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 4
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 3
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 4
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 5
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 5
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 4
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 3
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 5
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59573: LD_ADDR_VAR 0 34
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: LD_INT 5
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: LD_INT 4
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 5
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: LD_INT 5
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 4
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 4
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 4
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 4
59775: PUSH
59776: LD_INT 4
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 4
59785: PUSH
59786: LD_INT 3
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 5
59795: PUSH
59796: LD_INT 4
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 5
59805: PUSH
59806: LD_INT 5
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 4
59815: PUSH
59816: LD_INT 5
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 3
59825: PUSH
59826: LD_INT 4
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 5
59845: PUSH
59846: LD_INT 3
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 5
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: LD_INT 4
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: LD_INT 4
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 4
59958: NEG
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: NEG
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 4
60003: NEG
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 5
60014: NEG
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 5
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 5
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: ST_TO_ADDR
// end ; end ;
60105: GO 60108
60107: POP
// case btype of b_depot , b_warehouse :
60108: LD_VAR 0 1
60112: PUSH
60113: LD_INT 0
60115: DOUBLE
60116: EQUAL
60117: IFTRUE 60127
60119: LD_INT 1
60121: DOUBLE
60122: EQUAL
60123: IFTRUE 60127
60125: GO 60328
60127: POP
// case nation of nation_american :
60128: LD_VAR 0 5
60132: PUSH
60133: LD_INT 1
60135: DOUBLE
60136: EQUAL
60137: IFTRUE 60141
60139: GO 60197
60141: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60142: LD_ADDR_VAR 0 9
60146: PUSH
60147: LD_VAR 0 11
60151: PUSH
60152: LD_VAR 0 12
60156: PUSH
60157: LD_VAR 0 13
60161: PUSH
60162: LD_VAR 0 14
60166: PUSH
60167: LD_VAR 0 15
60171: PUSH
60172: LD_VAR 0 16
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: PUSH
60185: LD_VAR 0 4
60189: PUSH
60190: LD_INT 1
60192: PLUS
60193: ARRAY
60194: ST_TO_ADDR
60195: GO 60326
60197: LD_INT 2
60199: DOUBLE
60200: EQUAL
60201: IFTRUE 60205
60203: GO 60261
60205: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60206: LD_ADDR_VAR 0 9
60210: PUSH
60211: LD_VAR 0 17
60215: PUSH
60216: LD_VAR 0 18
60220: PUSH
60221: LD_VAR 0 19
60225: PUSH
60226: LD_VAR 0 20
60230: PUSH
60231: LD_VAR 0 21
60235: PUSH
60236: LD_VAR 0 22
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: PUSH
60249: LD_VAR 0 4
60253: PUSH
60254: LD_INT 1
60256: PLUS
60257: ARRAY
60258: ST_TO_ADDR
60259: GO 60326
60261: LD_INT 3
60263: DOUBLE
60264: EQUAL
60265: IFTRUE 60269
60267: GO 60325
60269: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60270: LD_ADDR_VAR 0 9
60274: PUSH
60275: LD_VAR 0 23
60279: PUSH
60280: LD_VAR 0 24
60284: PUSH
60285: LD_VAR 0 25
60289: PUSH
60290: LD_VAR 0 26
60294: PUSH
60295: LD_VAR 0 27
60299: PUSH
60300: LD_VAR 0 28
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: PUSH
60313: LD_VAR 0 4
60317: PUSH
60318: LD_INT 1
60320: PLUS
60321: ARRAY
60322: ST_TO_ADDR
60323: GO 60326
60325: POP
60326: GO 60881
60328: LD_INT 2
60330: DOUBLE
60331: EQUAL
60332: IFTRUE 60342
60334: LD_INT 3
60336: DOUBLE
60337: EQUAL
60338: IFTRUE 60342
60340: GO 60398
60342: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60343: LD_ADDR_VAR 0 9
60347: PUSH
60348: LD_VAR 0 29
60352: PUSH
60353: LD_VAR 0 30
60357: PUSH
60358: LD_VAR 0 31
60362: PUSH
60363: LD_VAR 0 32
60367: PUSH
60368: LD_VAR 0 33
60372: PUSH
60373: LD_VAR 0 34
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: PUSH
60386: LD_VAR 0 4
60390: PUSH
60391: LD_INT 1
60393: PLUS
60394: ARRAY
60395: ST_TO_ADDR
60396: GO 60881
60398: LD_INT 16
60400: DOUBLE
60401: EQUAL
60402: IFTRUE 60460
60404: LD_INT 17
60406: DOUBLE
60407: EQUAL
60408: IFTRUE 60460
60410: LD_INT 18
60412: DOUBLE
60413: EQUAL
60414: IFTRUE 60460
60416: LD_INT 19
60418: DOUBLE
60419: EQUAL
60420: IFTRUE 60460
60422: LD_INT 22
60424: DOUBLE
60425: EQUAL
60426: IFTRUE 60460
60428: LD_INT 20
60430: DOUBLE
60431: EQUAL
60432: IFTRUE 60460
60434: LD_INT 21
60436: DOUBLE
60437: EQUAL
60438: IFTRUE 60460
60440: LD_INT 23
60442: DOUBLE
60443: EQUAL
60444: IFTRUE 60460
60446: LD_INT 24
60448: DOUBLE
60449: EQUAL
60450: IFTRUE 60460
60452: LD_INT 25
60454: DOUBLE
60455: EQUAL
60456: IFTRUE 60460
60458: GO 60516
60460: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60461: LD_ADDR_VAR 0 9
60465: PUSH
60466: LD_VAR 0 35
60470: PUSH
60471: LD_VAR 0 36
60475: PUSH
60476: LD_VAR 0 37
60480: PUSH
60481: LD_VAR 0 38
60485: PUSH
60486: LD_VAR 0 39
60490: PUSH
60491: LD_VAR 0 40
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: PUSH
60504: LD_VAR 0 4
60508: PUSH
60509: LD_INT 1
60511: PLUS
60512: ARRAY
60513: ST_TO_ADDR
60514: GO 60881
60516: LD_INT 6
60518: DOUBLE
60519: EQUAL
60520: IFTRUE 60572
60522: LD_INT 7
60524: DOUBLE
60525: EQUAL
60526: IFTRUE 60572
60528: LD_INT 8
60530: DOUBLE
60531: EQUAL
60532: IFTRUE 60572
60534: LD_INT 13
60536: DOUBLE
60537: EQUAL
60538: IFTRUE 60572
60540: LD_INT 12
60542: DOUBLE
60543: EQUAL
60544: IFTRUE 60572
60546: LD_INT 15
60548: DOUBLE
60549: EQUAL
60550: IFTRUE 60572
60552: LD_INT 11
60554: DOUBLE
60555: EQUAL
60556: IFTRUE 60572
60558: LD_INT 14
60560: DOUBLE
60561: EQUAL
60562: IFTRUE 60572
60564: LD_INT 10
60566: DOUBLE
60567: EQUAL
60568: IFTRUE 60572
60570: GO 60628
60572: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60573: LD_ADDR_VAR 0 9
60577: PUSH
60578: LD_VAR 0 41
60582: PUSH
60583: LD_VAR 0 42
60587: PUSH
60588: LD_VAR 0 43
60592: PUSH
60593: LD_VAR 0 44
60597: PUSH
60598: LD_VAR 0 45
60602: PUSH
60603: LD_VAR 0 46
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: PUSH
60616: LD_VAR 0 4
60620: PUSH
60621: LD_INT 1
60623: PLUS
60624: ARRAY
60625: ST_TO_ADDR
60626: GO 60881
60628: LD_INT 36
60630: DOUBLE
60631: EQUAL
60632: IFTRUE 60636
60634: GO 60692
60636: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60637: LD_ADDR_VAR 0 9
60641: PUSH
60642: LD_VAR 0 47
60646: PUSH
60647: LD_VAR 0 48
60651: PUSH
60652: LD_VAR 0 49
60656: PUSH
60657: LD_VAR 0 50
60661: PUSH
60662: LD_VAR 0 51
60666: PUSH
60667: LD_VAR 0 52
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: PUSH
60680: LD_VAR 0 4
60684: PUSH
60685: LD_INT 1
60687: PLUS
60688: ARRAY
60689: ST_TO_ADDR
60690: GO 60881
60692: LD_INT 4
60694: DOUBLE
60695: EQUAL
60696: IFTRUE 60718
60698: LD_INT 5
60700: DOUBLE
60701: EQUAL
60702: IFTRUE 60718
60704: LD_INT 34
60706: DOUBLE
60707: EQUAL
60708: IFTRUE 60718
60710: LD_INT 37
60712: DOUBLE
60713: EQUAL
60714: IFTRUE 60718
60716: GO 60774
60718: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60719: LD_ADDR_VAR 0 9
60723: PUSH
60724: LD_VAR 0 53
60728: PUSH
60729: LD_VAR 0 54
60733: PUSH
60734: LD_VAR 0 55
60738: PUSH
60739: LD_VAR 0 56
60743: PUSH
60744: LD_VAR 0 57
60748: PUSH
60749: LD_VAR 0 58
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: PUSH
60762: LD_VAR 0 4
60766: PUSH
60767: LD_INT 1
60769: PLUS
60770: ARRAY
60771: ST_TO_ADDR
60772: GO 60881
60774: LD_INT 31
60776: DOUBLE
60777: EQUAL
60778: IFTRUE 60824
60780: LD_INT 32
60782: DOUBLE
60783: EQUAL
60784: IFTRUE 60824
60786: LD_INT 33
60788: DOUBLE
60789: EQUAL
60790: IFTRUE 60824
60792: LD_INT 27
60794: DOUBLE
60795: EQUAL
60796: IFTRUE 60824
60798: LD_INT 26
60800: DOUBLE
60801: EQUAL
60802: IFTRUE 60824
60804: LD_INT 28
60806: DOUBLE
60807: EQUAL
60808: IFTRUE 60824
60810: LD_INT 29
60812: DOUBLE
60813: EQUAL
60814: IFTRUE 60824
60816: LD_INT 30
60818: DOUBLE
60819: EQUAL
60820: IFTRUE 60824
60822: GO 60880
60824: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60825: LD_ADDR_VAR 0 9
60829: PUSH
60830: LD_VAR 0 59
60834: PUSH
60835: LD_VAR 0 60
60839: PUSH
60840: LD_VAR 0 61
60844: PUSH
60845: LD_VAR 0 62
60849: PUSH
60850: LD_VAR 0 63
60854: PUSH
60855: LD_VAR 0 64
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: PUSH
60868: LD_VAR 0 4
60872: PUSH
60873: LD_INT 1
60875: PLUS
60876: ARRAY
60877: ST_TO_ADDR
60878: GO 60881
60880: POP
// temp_list2 = [ ] ;
60881: LD_ADDR_VAR 0 10
60885: PUSH
60886: EMPTY
60887: ST_TO_ADDR
// for i in temp_list do
60888: LD_ADDR_VAR 0 8
60892: PUSH
60893: LD_VAR 0 9
60897: PUSH
60898: FOR_IN
60899: IFFALSE 60951
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60901: LD_ADDR_VAR 0 10
60905: PUSH
60906: LD_VAR 0 10
60910: PUSH
60911: LD_VAR 0 8
60915: PUSH
60916: LD_INT 1
60918: ARRAY
60919: PUSH
60920: LD_VAR 0 2
60924: PLUS
60925: PUSH
60926: LD_VAR 0 8
60930: PUSH
60931: LD_INT 2
60933: ARRAY
60934: PUSH
60935: LD_VAR 0 3
60939: PLUS
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: EMPTY
60946: LIST
60947: ADD
60948: ST_TO_ADDR
60949: GO 60898
60951: POP
60952: POP
// result = temp_list2 ;
60953: LD_ADDR_VAR 0 7
60957: PUSH
60958: LD_VAR 0 10
60962: ST_TO_ADDR
// end ;
60963: LD_VAR 0 7
60967: RET
// export function EnemyInRange ( unit , dist ) ; begin
60968: LD_INT 0
60970: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60971: LD_ADDR_VAR 0 3
60975: PUSH
60976: LD_VAR 0 1
60980: PPUSH
60981: CALL_OW 255
60985: PPUSH
60986: LD_VAR 0 1
60990: PPUSH
60991: CALL_OW 250
60995: PPUSH
60996: LD_VAR 0 1
61000: PPUSH
61001: CALL_OW 251
61005: PPUSH
61006: LD_VAR 0 2
61010: PPUSH
61011: CALL 34364 0 4
61015: PUSH
61016: LD_INT 4
61018: ARRAY
61019: ST_TO_ADDR
// end ;
61020: LD_VAR 0 3
61024: RET
// export function PlayerSeeMe ( unit ) ; begin
61025: LD_INT 0
61027: PPUSH
// result := See ( your_side , unit ) ;
61028: LD_ADDR_VAR 0 2
61032: PUSH
61033: LD_OWVAR 2
61037: PPUSH
61038: LD_VAR 0 1
61042: PPUSH
61043: CALL_OW 292
61047: ST_TO_ADDR
// end ;
61048: LD_VAR 0 2
61052: RET
// export function ReverseDir ( unit ) ; begin
61053: LD_INT 0
61055: PPUSH
// if not unit then
61056: LD_VAR 0 1
61060: NOT
61061: IFFALSE 61065
// exit ;
61063: GO 61088
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61065: LD_ADDR_VAR 0 2
61069: PUSH
61070: LD_VAR 0 1
61074: PPUSH
61075: CALL_OW 254
61079: PUSH
61080: LD_INT 3
61082: PLUS
61083: PUSH
61084: LD_INT 6
61086: MOD
61087: ST_TO_ADDR
// end ;
61088: LD_VAR 0 2
61092: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61093: LD_INT 0
61095: PPUSH
61096: PPUSH
61097: PPUSH
61098: PPUSH
61099: PPUSH
// if not hexes then
61100: LD_VAR 0 2
61104: NOT
61105: IFFALSE 61109
// exit ;
61107: GO 61257
// dist := 9999 ;
61109: LD_ADDR_VAR 0 5
61113: PUSH
61114: LD_INT 9999
61116: ST_TO_ADDR
// for i = 1 to hexes do
61117: LD_ADDR_VAR 0 4
61121: PUSH
61122: DOUBLE
61123: LD_INT 1
61125: DEC
61126: ST_TO_ADDR
61127: LD_VAR 0 2
61131: PUSH
61132: FOR_TO
61133: IFFALSE 61245
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61135: LD_VAR 0 1
61139: PPUSH
61140: LD_VAR 0 2
61144: PUSH
61145: LD_VAR 0 4
61149: ARRAY
61150: PUSH
61151: LD_INT 1
61153: ARRAY
61154: PPUSH
61155: LD_VAR 0 2
61159: PUSH
61160: LD_VAR 0 4
61164: ARRAY
61165: PUSH
61166: LD_INT 2
61168: ARRAY
61169: PPUSH
61170: CALL_OW 297
61174: PUSH
61175: LD_VAR 0 5
61179: LESS
61180: IFFALSE 61243
// begin hex := hexes [ i ] ;
61182: LD_ADDR_VAR 0 7
61186: PUSH
61187: LD_VAR 0 2
61191: PUSH
61192: LD_VAR 0 4
61196: ARRAY
61197: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61198: LD_ADDR_VAR 0 5
61202: PUSH
61203: LD_VAR 0 1
61207: PPUSH
61208: LD_VAR 0 2
61212: PUSH
61213: LD_VAR 0 4
61217: ARRAY
61218: PUSH
61219: LD_INT 1
61221: ARRAY
61222: PPUSH
61223: LD_VAR 0 2
61227: PUSH
61228: LD_VAR 0 4
61232: ARRAY
61233: PUSH
61234: LD_INT 2
61236: ARRAY
61237: PPUSH
61238: CALL_OW 297
61242: ST_TO_ADDR
// end ; end ;
61243: GO 61132
61245: POP
61246: POP
// result := hex ;
61247: LD_ADDR_VAR 0 3
61251: PUSH
61252: LD_VAR 0 7
61256: ST_TO_ADDR
// end ;
61257: LD_VAR 0 3
61261: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61262: LD_INT 0
61264: PPUSH
61265: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61266: LD_VAR 0 1
61270: NOT
61271: PUSH
61272: LD_VAR 0 1
61276: PUSH
61277: LD_INT 21
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 23
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PPUSH
61301: CALL_OW 69
61305: IN
61306: NOT
61307: OR
61308: IFFALSE 61312
// exit ;
61310: GO 61359
// for i = 1 to 3 do
61312: LD_ADDR_VAR 0 3
61316: PUSH
61317: DOUBLE
61318: LD_INT 1
61320: DEC
61321: ST_TO_ADDR
61322: LD_INT 3
61324: PUSH
61325: FOR_TO
61326: IFFALSE 61357
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61328: LD_VAR 0 1
61332: PPUSH
61333: CALL_OW 250
61337: PPUSH
61338: LD_VAR 0 1
61342: PPUSH
61343: CALL_OW 251
61347: PPUSH
61348: LD_INT 1
61350: PPUSH
61351: CALL_OW 453
61355: GO 61325
61357: POP
61358: POP
// end ;
61359: LD_VAR 0 2
61363: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61364: LD_INT 0
61366: PPUSH
61367: PPUSH
61368: PPUSH
61369: PPUSH
61370: PPUSH
61371: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61372: LD_VAR 0 1
61376: NOT
61377: PUSH
61378: LD_VAR 0 2
61382: NOT
61383: OR
61384: PUSH
61385: LD_VAR 0 1
61389: PPUSH
61390: CALL_OW 314
61394: OR
61395: IFFALSE 61399
// exit ;
61397: GO 61840
// x := GetX ( enemy_unit ) ;
61399: LD_ADDR_VAR 0 7
61403: PUSH
61404: LD_VAR 0 2
61408: PPUSH
61409: CALL_OW 250
61413: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61414: LD_ADDR_VAR 0 8
61418: PUSH
61419: LD_VAR 0 2
61423: PPUSH
61424: CALL_OW 251
61428: ST_TO_ADDR
// if not x or not y then
61429: LD_VAR 0 7
61433: NOT
61434: PUSH
61435: LD_VAR 0 8
61439: NOT
61440: OR
61441: IFFALSE 61445
// exit ;
61443: GO 61840
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61445: LD_ADDR_VAR 0 6
61449: PUSH
61450: LD_VAR 0 7
61454: PPUSH
61455: LD_INT 0
61457: PPUSH
61458: LD_INT 4
61460: PPUSH
61461: CALL_OW 272
61465: PUSH
61466: LD_VAR 0 8
61470: PPUSH
61471: LD_INT 0
61473: PPUSH
61474: LD_INT 4
61476: PPUSH
61477: CALL_OW 273
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_VAR 0 7
61490: PPUSH
61491: LD_INT 1
61493: PPUSH
61494: LD_INT 4
61496: PPUSH
61497: CALL_OW 272
61501: PUSH
61502: LD_VAR 0 8
61506: PPUSH
61507: LD_INT 1
61509: PPUSH
61510: LD_INT 4
61512: PPUSH
61513: CALL_OW 273
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_VAR 0 7
61526: PPUSH
61527: LD_INT 2
61529: PPUSH
61530: LD_INT 4
61532: PPUSH
61533: CALL_OW 272
61537: PUSH
61538: LD_VAR 0 8
61542: PPUSH
61543: LD_INT 2
61545: PPUSH
61546: LD_INT 4
61548: PPUSH
61549: CALL_OW 273
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_VAR 0 7
61562: PPUSH
61563: LD_INT 3
61565: PPUSH
61566: LD_INT 4
61568: PPUSH
61569: CALL_OW 272
61573: PUSH
61574: LD_VAR 0 8
61578: PPUSH
61579: LD_INT 3
61581: PPUSH
61582: LD_INT 4
61584: PPUSH
61585: CALL_OW 273
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_VAR 0 7
61598: PPUSH
61599: LD_INT 4
61601: PPUSH
61602: LD_INT 4
61604: PPUSH
61605: CALL_OW 272
61609: PUSH
61610: LD_VAR 0 8
61614: PPUSH
61615: LD_INT 4
61617: PPUSH
61618: LD_INT 4
61620: PPUSH
61621: CALL_OW 273
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_VAR 0 7
61634: PPUSH
61635: LD_INT 5
61637: PPUSH
61638: LD_INT 4
61640: PPUSH
61641: CALL_OW 272
61645: PUSH
61646: LD_VAR 0 8
61650: PPUSH
61651: LD_INT 5
61653: PPUSH
61654: LD_INT 4
61656: PPUSH
61657: CALL_OW 273
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: ST_TO_ADDR
// for i = tmp downto 1 do
61674: LD_ADDR_VAR 0 4
61678: PUSH
61679: DOUBLE
61680: LD_VAR 0 6
61684: INC
61685: ST_TO_ADDR
61686: LD_INT 1
61688: PUSH
61689: FOR_DOWNTO
61690: IFFALSE 61791
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61692: LD_VAR 0 6
61696: PUSH
61697: LD_VAR 0 4
61701: ARRAY
61702: PUSH
61703: LD_INT 1
61705: ARRAY
61706: PPUSH
61707: LD_VAR 0 6
61711: PUSH
61712: LD_VAR 0 4
61716: ARRAY
61717: PUSH
61718: LD_INT 2
61720: ARRAY
61721: PPUSH
61722: CALL_OW 488
61726: NOT
61727: PUSH
61728: LD_VAR 0 6
61732: PUSH
61733: LD_VAR 0 4
61737: ARRAY
61738: PUSH
61739: LD_INT 1
61741: ARRAY
61742: PPUSH
61743: LD_VAR 0 6
61747: PUSH
61748: LD_VAR 0 4
61752: ARRAY
61753: PUSH
61754: LD_INT 2
61756: ARRAY
61757: PPUSH
61758: CALL_OW 428
61762: PUSH
61763: LD_INT 0
61765: NONEQUAL
61766: OR
61767: IFFALSE 61789
// tmp := Delete ( tmp , i ) ;
61769: LD_ADDR_VAR 0 6
61773: PUSH
61774: LD_VAR 0 6
61778: PPUSH
61779: LD_VAR 0 4
61783: PPUSH
61784: CALL_OW 3
61788: ST_TO_ADDR
61789: GO 61689
61791: POP
61792: POP
// j := GetClosestHex ( unit , tmp ) ;
61793: LD_ADDR_VAR 0 5
61797: PUSH
61798: LD_VAR 0 1
61802: PPUSH
61803: LD_VAR 0 6
61807: PPUSH
61808: CALL 61093 0 2
61812: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61813: LD_VAR 0 1
61817: PPUSH
61818: LD_VAR 0 5
61822: PUSH
61823: LD_INT 1
61825: ARRAY
61826: PPUSH
61827: LD_VAR 0 5
61831: PUSH
61832: LD_INT 2
61834: ARRAY
61835: PPUSH
61836: CALL_OW 111
// end ;
61840: LD_VAR 0 3
61844: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61845: LD_INT 0
61847: PPUSH
61848: PPUSH
61849: PPUSH
// uc_side = 0 ;
61850: LD_ADDR_OWVAR 20
61854: PUSH
61855: LD_INT 0
61857: ST_TO_ADDR
// uc_nation = 0 ;
61858: LD_ADDR_OWVAR 21
61862: PUSH
61863: LD_INT 0
61865: ST_TO_ADDR
// InitHc_All ( ) ;
61866: CALL_OW 584
// InitVc ;
61870: CALL_OW 20
// if mastodonts then
61874: LD_VAR 0 6
61878: IFFALSE 61945
// for i = 1 to mastodonts do
61880: LD_ADDR_VAR 0 11
61884: PUSH
61885: DOUBLE
61886: LD_INT 1
61888: DEC
61889: ST_TO_ADDR
61890: LD_VAR 0 6
61894: PUSH
61895: FOR_TO
61896: IFFALSE 61943
// begin vc_chassis := 31 ;
61898: LD_ADDR_OWVAR 37
61902: PUSH
61903: LD_INT 31
61905: ST_TO_ADDR
// vc_control := control_rider ;
61906: LD_ADDR_OWVAR 38
61910: PUSH
61911: LD_INT 4
61913: ST_TO_ADDR
// animal := CreateVehicle ;
61914: LD_ADDR_VAR 0 12
61918: PUSH
61919: CALL_OW 45
61923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61924: LD_VAR 0 12
61928: PPUSH
61929: LD_VAR 0 8
61933: PPUSH
61934: LD_INT 0
61936: PPUSH
61937: CALL 64133 0 3
// end ;
61941: GO 61895
61943: POP
61944: POP
// if horses then
61945: LD_VAR 0 5
61949: IFFALSE 62016
// for i = 1 to horses do
61951: LD_ADDR_VAR 0 11
61955: PUSH
61956: DOUBLE
61957: LD_INT 1
61959: DEC
61960: ST_TO_ADDR
61961: LD_VAR 0 5
61965: PUSH
61966: FOR_TO
61967: IFFALSE 62014
// begin hc_class := 21 ;
61969: LD_ADDR_OWVAR 28
61973: PUSH
61974: LD_INT 21
61976: ST_TO_ADDR
// hc_gallery :=  ;
61977: LD_ADDR_OWVAR 33
61981: PUSH
61982: LD_STRING 
61984: ST_TO_ADDR
// animal := CreateHuman ;
61985: LD_ADDR_VAR 0 12
61989: PUSH
61990: CALL_OW 44
61994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61995: LD_VAR 0 12
61999: PPUSH
62000: LD_VAR 0 8
62004: PPUSH
62005: LD_INT 0
62007: PPUSH
62008: CALL 64133 0 3
// end ;
62012: GO 61966
62014: POP
62015: POP
// if birds then
62016: LD_VAR 0 1
62020: IFFALSE 62087
// for i = 1 to birds do
62022: LD_ADDR_VAR 0 11
62026: PUSH
62027: DOUBLE
62028: LD_INT 1
62030: DEC
62031: ST_TO_ADDR
62032: LD_VAR 0 1
62036: PUSH
62037: FOR_TO
62038: IFFALSE 62085
// begin hc_class = 18 ;
62040: LD_ADDR_OWVAR 28
62044: PUSH
62045: LD_INT 18
62047: ST_TO_ADDR
// hc_gallery =  ;
62048: LD_ADDR_OWVAR 33
62052: PUSH
62053: LD_STRING 
62055: ST_TO_ADDR
// animal := CreateHuman ;
62056: LD_ADDR_VAR 0 12
62060: PUSH
62061: CALL_OW 44
62065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62066: LD_VAR 0 12
62070: PPUSH
62071: LD_VAR 0 8
62075: PPUSH
62076: LD_INT 0
62078: PPUSH
62079: CALL 64133 0 3
// end ;
62083: GO 62037
62085: POP
62086: POP
// if tigers then
62087: LD_VAR 0 2
62091: IFFALSE 62175
// for i = 1 to tigers do
62093: LD_ADDR_VAR 0 11
62097: PUSH
62098: DOUBLE
62099: LD_INT 1
62101: DEC
62102: ST_TO_ADDR
62103: LD_VAR 0 2
62107: PUSH
62108: FOR_TO
62109: IFFALSE 62173
// begin hc_class = class_tiger ;
62111: LD_ADDR_OWVAR 28
62115: PUSH
62116: LD_INT 14
62118: ST_TO_ADDR
// hc_gallery =  ;
62119: LD_ADDR_OWVAR 33
62123: PUSH
62124: LD_STRING 
62126: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62127: LD_ADDR_OWVAR 35
62131: PUSH
62132: LD_INT 7
62134: NEG
62135: PPUSH
62136: LD_INT 7
62138: PPUSH
62139: CALL_OW 12
62143: ST_TO_ADDR
// animal := CreateHuman ;
62144: LD_ADDR_VAR 0 12
62148: PUSH
62149: CALL_OW 44
62153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62154: LD_VAR 0 12
62158: PPUSH
62159: LD_VAR 0 8
62163: PPUSH
62164: LD_INT 0
62166: PPUSH
62167: CALL 64133 0 3
// end ;
62171: GO 62108
62173: POP
62174: POP
// if apemans then
62175: LD_VAR 0 3
62179: IFFALSE 62302
// for i = 1 to apemans do
62181: LD_ADDR_VAR 0 11
62185: PUSH
62186: DOUBLE
62187: LD_INT 1
62189: DEC
62190: ST_TO_ADDR
62191: LD_VAR 0 3
62195: PUSH
62196: FOR_TO
62197: IFFALSE 62300
// begin hc_class = class_apeman ;
62199: LD_ADDR_OWVAR 28
62203: PUSH
62204: LD_INT 12
62206: ST_TO_ADDR
// hc_gallery =  ;
62207: LD_ADDR_OWVAR 33
62211: PUSH
62212: LD_STRING 
62214: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62215: LD_ADDR_OWVAR 35
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PPUSH
62224: LD_INT 2
62226: PPUSH
62227: CALL_OW 12
62231: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62232: LD_ADDR_OWVAR 31
62236: PUSH
62237: LD_INT 1
62239: PPUSH
62240: LD_INT 3
62242: PPUSH
62243: CALL_OW 12
62247: PUSH
62248: LD_INT 1
62250: PPUSH
62251: LD_INT 3
62253: PPUSH
62254: CALL_OW 12
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: ST_TO_ADDR
// animal := CreateHuman ;
62271: LD_ADDR_VAR 0 12
62275: PUSH
62276: CALL_OW 44
62280: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62281: LD_VAR 0 12
62285: PPUSH
62286: LD_VAR 0 8
62290: PPUSH
62291: LD_INT 0
62293: PPUSH
62294: CALL 64133 0 3
// end ;
62298: GO 62196
62300: POP
62301: POP
// if enchidnas then
62302: LD_VAR 0 4
62306: IFFALSE 62373
// for i = 1 to enchidnas do
62308: LD_ADDR_VAR 0 11
62312: PUSH
62313: DOUBLE
62314: LD_INT 1
62316: DEC
62317: ST_TO_ADDR
62318: LD_VAR 0 4
62322: PUSH
62323: FOR_TO
62324: IFFALSE 62371
// begin hc_class = 13 ;
62326: LD_ADDR_OWVAR 28
62330: PUSH
62331: LD_INT 13
62333: ST_TO_ADDR
// hc_gallery =  ;
62334: LD_ADDR_OWVAR 33
62338: PUSH
62339: LD_STRING 
62341: ST_TO_ADDR
// animal := CreateHuman ;
62342: LD_ADDR_VAR 0 12
62346: PUSH
62347: CALL_OW 44
62351: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62352: LD_VAR 0 12
62356: PPUSH
62357: LD_VAR 0 8
62361: PPUSH
62362: LD_INT 0
62364: PPUSH
62365: CALL 64133 0 3
// end ;
62369: GO 62323
62371: POP
62372: POP
// if fishes then
62373: LD_VAR 0 7
62377: IFFALSE 62444
// for i = 1 to fishes do
62379: LD_ADDR_VAR 0 11
62383: PUSH
62384: DOUBLE
62385: LD_INT 1
62387: DEC
62388: ST_TO_ADDR
62389: LD_VAR 0 7
62393: PUSH
62394: FOR_TO
62395: IFFALSE 62442
// begin hc_class = 20 ;
62397: LD_ADDR_OWVAR 28
62401: PUSH
62402: LD_INT 20
62404: ST_TO_ADDR
// hc_gallery =  ;
62405: LD_ADDR_OWVAR 33
62409: PUSH
62410: LD_STRING 
62412: ST_TO_ADDR
// animal := CreateHuman ;
62413: LD_ADDR_VAR 0 12
62417: PUSH
62418: CALL_OW 44
62422: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62423: LD_VAR 0 12
62427: PPUSH
62428: LD_VAR 0 9
62432: PPUSH
62433: LD_INT 0
62435: PPUSH
62436: CALL 64133 0 3
// end ;
62440: GO 62394
62442: POP
62443: POP
// end ;
62444: LD_VAR 0 10
62448: RET
// export function WantHeal ( sci , unit ) ; begin
62449: LD_INT 0
62451: PPUSH
// if GetTaskList ( sci ) > 0 then
62452: LD_VAR 0 1
62456: PPUSH
62457: CALL_OW 437
62461: PUSH
62462: LD_INT 0
62464: GREATER
62465: IFFALSE 62535
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62467: LD_VAR 0 1
62471: PPUSH
62472: CALL_OW 437
62476: PUSH
62477: LD_INT 1
62479: ARRAY
62480: PUSH
62481: LD_INT 1
62483: ARRAY
62484: PUSH
62485: LD_STRING l
62487: EQUAL
62488: PUSH
62489: LD_VAR 0 1
62493: PPUSH
62494: CALL_OW 437
62498: PUSH
62499: LD_INT 1
62501: ARRAY
62502: PUSH
62503: LD_INT 4
62505: ARRAY
62506: PUSH
62507: LD_VAR 0 2
62511: EQUAL
62512: AND
62513: IFFALSE 62525
// result := true else
62515: LD_ADDR_VAR 0 3
62519: PUSH
62520: LD_INT 1
62522: ST_TO_ADDR
62523: GO 62533
// result := false ;
62525: LD_ADDR_VAR 0 3
62529: PUSH
62530: LD_INT 0
62532: ST_TO_ADDR
// end else
62533: GO 62543
// result := false ;
62535: LD_ADDR_VAR 0 3
62539: PUSH
62540: LD_INT 0
62542: ST_TO_ADDR
// end ;
62543: LD_VAR 0 3
62547: RET
// export function HealTarget ( sci ) ; begin
62548: LD_INT 0
62550: PPUSH
// if not sci then
62551: LD_VAR 0 1
62555: NOT
62556: IFFALSE 62560
// exit ;
62558: GO 62625
// result := 0 ;
62560: LD_ADDR_VAR 0 2
62564: PUSH
62565: LD_INT 0
62567: ST_TO_ADDR
// if GetTaskList ( sci ) then
62568: LD_VAR 0 1
62572: PPUSH
62573: CALL_OW 437
62577: IFFALSE 62625
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62579: LD_VAR 0 1
62583: PPUSH
62584: CALL_OW 437
62588: PUSH
62589: LD_INT 1
62591: ARRAY
62592: PUSH
62593: LD_INT 1
62595: ARRAY
62596: PUSH
62597: LD_STRING l
62599: EQUAL
62600: IFFALSE 62625
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62602: LD_ADDR_VAR 0 2
62606: PUSH
62607: LD_VAR 0 1
62611: PPUSH
62612: CALL_OW 437
62616: PUSH
62617: LD_INT 1
62619: ARRAY
62620: PUSH
62621: LD_INT 4
62623: ARRAY
62624: ST_TO_ADDR
// end ;
62625: LD_VAR 0 2
62629: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62630: LD_INT 0
62632: PPUSH
62633: PPUSH
62634: PPUSH
62635: PPUSH
// if not base_units then
62636: LD_VAR 0 1
62640: NOT
62641: IFFALSE 62645
// exit ;
62643: GO 62732
// result := false ;
62645: LD_ADDR_VAR 0 2
62649: PUSH
62650: LD_INT 0
62652: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62653: LD_ADDR_VAR 0 5
62657: PUSH
62658: LD_VAR 0 1
62662: PPUSH
62663: LD_INT 21
62665: PUSH
62666: LD_INT 3
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PPUSH
62673: CALL_OW 72
62677: ST_TO_ADDR
// if not tmp then
62678: LD_VAR 0 5
62682: NOT
62683: IFFALSE 62687
// exit ;
62685: GO 62732
// for i in tmp do
62687: LD_ADDR_VAR 0 3
62691: PUSH
62692: LD_VAR 0 5
62696: PUSH
62697: FOR_IN
62698: IFFALSE 62730
// begin result := EnemyInRange ( i , 22 ) ;
62700: LD_ADDR_VAR 0 2
62704: PUSH
62705: LD_VAR 0 3
62709: PPUSH
62710: LD_INT 22
62712: PPUSH
62713: CALL 60968 0 2
62717: ST_TO_ADDR
// if result then
62718: LD_VAR 0 2
62722: IFFALSE 62728
// exit ;
62724: POP
62725: POP
62726: GO 62732
// end ;
62728: GO 62697
62730: POP
62731: POP
// end ;
62732: LD_VAR 0 2
62736: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62737: LD_INT 0
62739: PPUSH
62740: PPUSH
// if not units then
62741: LD_VAR 0 1
62745: NOT
62746: IFFALSE 62750
// exit ;
62748: GO 62820
// result := [ ] ;
62750: LD_ADDR_VAR 0 3
62754: PUSH
62755: EMPTY
62756: ST_TO_ADDR
// for i in units do
62757: LD_ADDR_VAR 0 4
62761: PUSH
62762: LD_VAR 0 1
62766: PUSH
62767: FOR_IN
62768: IFFALSE 62818
// if GetTag ( i ) = tag then
62770: LD_VAR 0 4
62774: PPUSH
62775: CALL_OW 110
62779: PUSH
62780: LD_VAR 0 2
62784: EQUAL
62785: IFFALSE 62816
// result := Replace ( result , result + 1 , i ) ;
62787: LD_ADDR_VAR 0 3
62791: PUSH
62792: LD_VAR 0 3
62796: PPUSH
62797: LD_VAR 0 3
62801: PUSH
62802: LD_INT 1
62804: PLUS
62805: PPUSH
62806: LD_VAR 0 4
62810: PPUSH
62811: CALL_OW 1
62815: ST_TO_ADDR
62816: GO 62767
62818: POP
62819: POP
// end ;
62820: LD_VAR 0 3
62824: RET
// export function IsDriver ( un ) ; begin
62825: LD_INT 0
62827: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62828: LD_ADDR_VAR 0 2
62832: PUSH
62833: LD_VAR 0 1
62837: PUSH
62838: LD_INT 55
62840: PUSH
62841: EMPTY
62842: LIST
62843: PPUSH
62844: CALL_OW 69
62848: IN
62849: ST_TO_ADDR
// end ;
62850: LD_VAR 0 2
62854: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62855: LD_INT 0
62857: PPUSH
62858: PPUSH
// list := [ ] ;
62859: LD_ADDR_VAR 0 5
62863: PUSH
62864: EMPTY
62865: ST_TO_ADDR
// case d of 0 :
62866: LD_VAR 0 3
62870: PUSH
62871: LD_INT 0
62873: DOUBLE
62874: EQUAL
62875: IFTRUE 62879
62877: GO 63012
62879: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62880: LD_ADDR_VAR 0 5
62884: PUSH
62885: LD_VAR 0 1
62889: PUSH
62890: LD_INT 4
62892: MINUS
62893: PUSH
62894: LD_VAR 0 2
62898: PUSH
62899: LD_INT 4
62901: MINUS
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: PUSH
62911: LD_VAR 0 1
62915: PUSH
62916: LD_INT 3
62918: MINUS
62919: PUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: LIST
62932: PUSH
62933: LD_VAR 0 1
62937: PUSH
62938: LD_INT 4
62940: PLUS
62941: PUSH
62942: LD_VAR 0 2
62946: PUSH
62947: LD_INT 4
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: PUSH
62955: LD_VAR 0 1
62959: PUSH
62960: LD_INT 3
62962: PLUS
62963: PUSH
62964: LD_VAR 0 2
62968: PUSH
62969: LD_INT 3
62971: PLUS
62972: PUSH
62973: LD_INT 5
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: LIST
62980: PUSH
62981: LD_VAR 0 1
62985: PUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_INT 4
62993: PLUS
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: ST_TO_ADDR
// end ; 1 :
63010: GO 63710
63012: LD_INT 1
63014: DOUBLE
63015: EQUAL
63016: IFTRUE 63020
63018: GO 63153
63020: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63021: LD_ADDR_VAR 0 5
63025: PUSH
63026: LD_VAR 0 1
63030: PUSH
63031: LD_VAR 0 2
63035: PUSH
63036: LD_INT 4
63038: MINUS
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: PUSH
63048: LD_VAR 0 1
63052: PUSH
63053: LD_INT 3
63055: MINUS
63056: PUSH
63057: LD_VAR 0 2
63061: PUSH
63062: LD_INT 3
63064: MINUS
63065: PUSH
63066: LD_INT 2
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: PUSH
63074: LD_VAR 0 1
63078: PUSH
63079: LD_INT 4
63081: MINUS
63082: PUSH
63083: LD_VAR 0 2
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: LIST
63095: PUSH
63096: LD_VAR 0 1
63100: PUSH
63101: LD_VAR 0 2
63105: PUSH
63106: LD_INT 3
63108: PLUS
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: PUSH
63118: LD_VAR 0 1
63122: PUSH
63123: LD_INT 4
63125: PLUS
63126: PUSH
63127: LD_VAR 0 2
63131: PUSH
63132: LD_INT 4
63134: PLUS
63135: PUSH
63136: LD_INT 5
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: ST_TO_ADDR
// end ; 2 :
63151: GO 63710
63153: LD_INT 2
63155: DOUBLE
63156: EQUAL
63157: IFTRUE 63161
63159: GO 63290
63161: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63162: LD_ADDR_VAR 0 5
63166: PUSH
63167: LD_VAR 0 1
63171: PUSH
63172: LD_VAR 0 2
63176: PUSH
63177: LD_INT 3
63179: MINUS
63180: PUSH
63181: LD_INT 3
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: PUSH
63189: LD_VAR 0 1
63193: PUSH
63194: LD_INT 4
63196: PLUS
63197: PUSH
63198: LD_VAR 0 2
63202: PUSH
63203: LD_INT 4
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: LIST
63210: PUSH
63211: LD_VAR 0 1
63215: PUSH
63216: LD_VAR 0 2
63220: PUSH
63221: LD_INT 4
63223: PLUS
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: LIST
63232: PUSH
63233: LD_VAR 0 1
63237: PUSH
63238: LD_INT 3
63240: MINUS
63241: PUSH
63242: LD_VAR 0 2
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: LIST
63254: PUSH
63255: LD_VAR 0 1
63259: PUSH
63260: LD_INT 4
63262: MINUS
63263: PUSH
63264: LD_VAR 0 2
63268: PUSH
63269: LD_INT 4
63271: MINUS
63272: PUSH
63273: LD_INT 2
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: ST_TO_ADDR
// end ; 3 :
63288: GO 63710
63290: LD_INT 3
63292: DOUBLE
63293: EQUAL
63294: IFTRUE 63298
63296: GO 63431
63298: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63299: LD_ADDR_VAR 0 5
63303: PUSH
63304: LD_VAR 0 1
63308: PUSH
63309: LD_INT 3
63311: PLUS
63312: PUSH
63313: LD_VAR 0 2
63317: PUSH
63318: LD_INT 4
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: LIST
63325: PUSH
63326: LD_VAR 0 1
63330: PUSH
63331: LD_INT 4
63333: PLUS
63334: PUSH
63335: LD_VAR 0 2
63339: PUSH
63340: LD_INT 4
63342: PLUS
63343: PUSH
63344: LD_INT 5
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: PUSH
63352: LD_VAR 0 1
63356: PUSH
63357: LD_INT 4
63359: MINUS
63360: PUSH
63361: LD_VAR 0 2
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: LIST
63373: PUSH
63374: LD_VAR 0 1
63378: PUSH
63379: LD_VAR 0 2
63383: PUSH
63384: LD_INT 4
63386: MINUS
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: LIST
63395: PUSH
63396: LD_VAR 0 1
63400: PUSH
63401: LD_INT 3
63403: MINUS
63404: PUSH
63405: LD_VAR 0 2
63409: PUSH
63410: LD_INT 3
63412: MINUS
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: ST_TO_ADDR
// end ; 4 :
63429: GO 63710
63431: LD_INT 4
63433: DOUBLE
63434: EQUAL
63435: IFTRUE 63439
63437: GO 63572
63439: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63440: LD_ADDR_VAR 0 5
63444: PUSH
63445: LD_VAR 0 1
63449: PUSH
63450: LD_VAR 0 2
63454: PUSH
63455: LD_INT 4
63457: PLUS
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: LIST
63466: PUSH
63467: LD_VAR 0 1
63471: PUSH
63472: LD_INT 3
63474: PLUS
63475: PUSH
63476: LD_VAR 0 2
63480: PUSH
63481: LD_INT 3
63483: PLUS
63484: PUSH
63485: LD_INT 5
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: PUSH
63493: LD_VAR 0 1
63497: PUSH
63498: LD_INT 4
63500: PLUS
63501: PUSH
63502: LD_VAR 0 2
63506: PUSH
63507: LD_INT 4
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: LIST
63514: PUSH
63515: LD_VAR 0 1
63519: PUSH
63520: LD_VAR 0 2
63524: PUSH
63525: LD_INT 3
63527: MINUS
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: PUSH
63537: LD_VAR 0 1
63541: PUSH
63542: LD_INT 4
63544: MINUS
63545: PUSH
63546: LD_VAR 0 2
63550: PUSH
63551: LD_INT 4
63553: MINUS
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: LIST
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: ST_TO_ADDR
// end ; 5 :
63570: GO 63710
63572: LD_INT 5
63574: DOUBLE
63575: EQUAL
63576: IFTRUE 63580
63578: GO 63709
63580: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63581: LD_ADDR_VAR 0 5
63585: PUSH
63586: LD_VAR 0 1
63590: PUSH
63591: LD_INT 4
63593: MINUS
63594: PUSH
63595: LD_VAR 0 2
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: PUSH
63608: LD_VAR 0 1
63612: PUSH
63613: LD_VAR 0 2
63617: PUSH
63618: LD_INT 4
63620: MINUS
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: LIST
63629: PUSH
63630: LD_VAR 0 1
63634: PUSH
63635: LD_INT 4
63637: PLUS
63638: PUSH
63639: LD_VAR 0 2
63643: PUSH
63644: LD_INT 4
63646: PLUS
63647: PUSH
63648: LD_INT 5
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: PUSH
63656: LD_VAR 0 1
63660: PUSH
63661: LD_INT 3
63663: PLUS
63664: PUSH
63665: LD_VAR 0 2
63669: PUSH
63670: LD_INT 4
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: PUSH
63678: LD_VAR 0 1
63682: PUSH
63683: LD_VAR 0 2
63687: PUSH
63688: LD_INT 3
63690: PLUS
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: ST_TO_ADDR
// end ; end ;
63707: GO 63710
63709: POP
// result := list ;
63710: LD_ADDR_VAR 0 4
63714: PUSH
63715: LD_VAR 0 5
63719: ST_TO_ADDR
// end ;
63720: LD_VAR 0 4
63724: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63725: LD_INT 0
63727: PPUSH
63728: PPUSH
63729: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63730: LD_VAR 0 1
63734: NOT
63735: PUSH
63736: LD_VAR 0 2
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: LD_INT 3
63749: PUSH
63750: LD_INT 4
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: IN
63759: NOT
63760: OR
63761: IFFALSE 63765
// exit ;
63763: GO 63857
// tmp := [ ] ;
63765: LD_ADDR_VAR 0 5
63769: PUSH
63770: EMPTY
63771: ST_TO_ADDR
// for i in units do
63772: LD_ADDR_VAR 0 4
63776: PUSH
63777: LD_VAR 0 1
63781: PUSH
63782: FOR_IN
63783: IFFALSE 63826
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63785: LD_ADDR_VAR 0 5
63789: PUSH
63790: LD_VAR 0 5
63794: PPUSH
63795: LD_VAR 0 5
63799: PUSH
63800: LD_INT 1
63802: PLUS
63803: PPUSH
63804: LD_VAR 0 4
63808: PPUSH
63809: LD_VAR 0 2
63813: PPUSH
63814: CALL_OW 259
63818: PPUSH
63819: CALL_OW 2
63823: ST_TO_ADDR
63824: GO 63782
63826: POP
63827: POP
// if not tmp then
63828: LD_VAR 0 5
63832: NOT
63833: IFFALSE 63837
// exit ;
63835: GO 63857
// result := SortListByListDesc ( units , tmp ) ;
63837: LD_ADDR_VAR 0 3
63841: PUSH
63842: LD_VAR 0 1
63846: PPUSH
63847: LD_VAR 0 5
63851: PPUSH
63852: CALL_OW 77
63856: ST_TO_ADDR
// end ;
63857: LD_VAR 0 3
63861: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63862: LD_INT 0
63864: PPUSH
63865: PPUSH
63866: PPUSH
// result := false ;
63867: LD_ADDR_VAR 0 3
63871: PUSH
63872: LD_INT 0
63874: ST_TO_ADDR
// x := GetX ( building ) ;
63875: LD_ADDR_VAR 0 4
63879: PUSH
63880: LD_VAR 0 2
63884: PPUSH
63885: CALL_OW 250
63889: ST_TO_ADDR
// y := GetY ( building ) ;
63890: LD_ADDR_VAR 0 5
63894: PUSH
63895: LD_VAR 0 2
63899: PPUSH
63900: CALL_OW 251
63904: ST_TO_ADDR
// if not building or not x or not y then
63905: LD_VAR 0 2
63909: NOT
63910: PUSH
63911: LD_VAR 0 4
63915: NOT
63916: OR
63917: PUSH
63918: LD_VAR 0 5
63922: NOT
63923: OR
63924: IFFALSE 63928
// exit ;
63926: GO 64020
// if GetTaskList ( unit ) then
63928: LD_VAR 0 1
63932: PPUSH
63933: CALL_OW 437
63937: IFFALSE 64020
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63939: LD_STRING e
63941: PUSH
63942: LD_VAR 0 1
63946: PPUSH
63947: CALL_OW 437
63951: PUSH
63952: LD_INT 1
63954: ARRAY
63955: PUSH
63956: LD_INT 1
63958: ARRAY
63959: EQUAL
63960: PUSH
63961: LD_VAR 0 4
63965: PUSH
63966: LD_VAR 0 1
63970: PPUSH
63971: CALL_OW 437
63975: PUSH
63976: LD_INT 1
63978: ARRAY
63979: PUSH
63980: LD_INT 2
63982: ARRAY
63983: EQUAL
63984: AND
63985: PUSH
63986: LD_VAR 0 5
63990: PUSH
63991: LD_VAR 0 1
63995: PPUSH
63996: CALL_OW 437
64000: PUSH
64001: LD_INT 1
64003: ARRAY
64004: PUSH
64005: LD_INT 3
64007: ARRAY
64008: EQUAL
64009: AND
64010: IFFALSE 64020
// result := true end ;
64012: LD_ADDR_VAR 0 3
64016: PUSH
64017: LD_INT 1
64019: ST_TO_ADDR
// end ;
64020: LD_VAR 0 3
64024: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64025: LD_INT 0
64027: PPUSH
// result := false ;
64028: LD_ADDR_VAR 0 4
64032: PUSH
64033: LD_INT 0
64035: ST_TO_ADDR
// if GetTaskList ( unit ) then
64036: LD_VAR 0 1
64040: PPUSH
64041: CALL_OW 437
64045: IFFALSE 64128
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64047: LD_STRING M
64049: PUSH
64050: LD_VAR 0 1
64054: PPUSH
64055: CALL_OW 437
64059: PUSH
64060: LD_INT 1
64062: ARRAY
64063: PUSH
64064: LD_INT 1
64066: ARRAY
64067: EQUAL
64068: PUSH
64069: LD_VAR 0 2
64073: PUSH
64074: LD_VAR 0 1
64078: PPUSH
64079: CALL_OW 437
64083: PUSH
64084: LD_INT 1
64086: ARRAY
64087: PUSH
64088: LD_INT 2
64090: ARRAY
64091: EQUAL
64092: AND
64093: PUSH
64094: LD_VAR 0 3
64098: PUSH
64099: LD_VAR 0 1
64103: PPUSH
64104: CALL_OW 437
64108: PUSH
64109: LD_INT 1
64111: ARRAY
64112: PUSH
64113: LD_INT 3
64115: ARRAY
64116: EQUAL
64117: AND
64118: IFFALSE 64128
// result := true ;
64120: LD_ADDR_VAR 0 4
64124: PUSH
64125: LD_INT 1
64127: ST_TO_ADDR
// end ; end ;
64128: LD_VAR 0 4
64132: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64133: LD_INT 0
64135: PPUSH
64136: PPUSH
64137: PPUSH
64138: PPUSH
// if not unit or not area then
64139: LD_VAR 0 1
64143: NOT
64144: PUSH
64145: LD_VAR 0 2
64149: NOT
64150: OR
64151: IFFALSE 64155
// exit ;
64153: GO 64319
// tmp := AreaToList ( area , i ) ;
64155: LD_ADDR_VAR 0 6
64159: PUSH
64160: LD_VAR 0 2
64164: PPUSH
64165: LD_VAR 0 5
64169: PPUSH
64170: CALL_OW 517
64174: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64175: LD_ADDR_VAR 0 5
64179: PUSH
64180: DOUBLE
64181: LD_INT 1
64183: DEC
64184: ST_TO_ADDR
64185: LD_VAR 0 6
64189: PUSH
64190: LD_INT 1
64192: ARRAY
64193: PUSH
64194: FOR_TO
64195: IFFALSE 64317
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64197: LD_ADDR_VAR 0 7
64201: PUSH
64202: LD_VAR 0 6
64206: PUSH
64207: LD_INT 1
64209: ARRAY
64210: PUSH
64211: LD_VAR 0 5
64215: ARRAY
64216: PUSH
64217: LD_VAR 0 6
64221: PUSH
64222: LD_INT 2
64224: ARRAY
64225: PUSH
64226: LD_VAR 0 5
64230: ARRAY
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64236: LD_VAR 0 7
64240: PUSH
64241: LD_INT 1
64243: ARRAY
64244: PPUSH
64245: LD_VAR 0 7
64249: PUSH
64250: LD_INT 2
64252: ARRAY
64253: PPUSH
64254: CALL_OW 428
64258: PUSH
64259: LD_INT 0
64261: EQUAL
64262: IFFALSE 64315
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64264: LD_VAR 0 1
64268: PPUSH
64269: LD_VAR 0 7
64273: PUSH
64274: LD_INT 1
64276: ARRAY
64277: PPUSH
64278: LD_VAR 0 7
64282: PUSH
64283: LD_INT 2
64285: ARRAY
64286: PPUSH
64287: LD_VAR 0 3
64291: PPUSH
64292: CALL_OW 48
// result := IsPlaced ( unit ) ;
64296: LD_ADDR_VAR 0 4
64300: PUSH
64301: LD_VAR 0 1
64305: PPUSH
64306: CALL_OW 305
64310: ST_TO_ADDR
// exit ;
64311: POP
64312: POP
64313: GO 64319
// end ; end ;
64315: GO 64194
64317: POP
64318: POP
// end ;
64319: LD_VAR 0 4
64323: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64324: LD_INT 0
64326: PPUSH
64327: PPUSH
64328: PPUSH
// if not side or side > 8 then
64329: LD_VAR 0 1
64333: NOT
64334: PUSH
64335: LD_VAR 0 1
64339: PUSH
64340: LD_INT 8
64342: GREATER
64343: OR
64344: IFFALSE 64348
// exit ;
64346: GO 64535
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64348: LD_ADDR_VAR 0 4
64352: PUSH
64353: LD_INT 22
64355: PUSH
64356: LD_VAR 0 1
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 21
64367: PUSH
64368: LD_INT 3
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PPUSH
64379: CALL_OW 69
64383: ST_TO_ADDR
// if not tmp then
64384: LD_VAR 0 4
64388: NOT
64389: IFFALSE 64393
// exit ;
64391: GO 64535
// enable_addtolog := true ;
64393: LD_ADDR_OWVAR 81
64397: PUSH
64398: LD_INT 1
64400: ST_TO_ADDR
// AddToLog ( [ ) ;
64401: LD_STRING [
64403: PPUSH
64404: CALL_OW 561
// for i in tmp do
64408: LD_ADDR_VAR 0 3
64412: PUSH
64413: LD_VAR 0 4
64417: PUSH
64418: FOR_IN
64419: IFFALSE 64526
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64421: LD_STRING [
64423: PUSH
64424: LD_VAR 0 3
64428: PPUSH
64429: CALL_OW 266
64433: STR
64434: PUSH
64435: LD_STRING , 
64437: STR
64438: PUSH
64439: LD_VAR 0 3
64443: PPUSH
64444: CALL_OW 250
64448: STR
64449: PUSH
64450: LD_STRING , 
64452: STR
64453: PUSH
64454: LD_VAR 0 3
64458: PPUSH
64459: CALL_OW 251
64463: STR
64464: PUSH
64465: LD_STRING , 
64467: STR
64468: PUSH
64469: LD_VAR 0 3
64473: PPUSH
64474: CALL_OW 254
64478: STR
64479: PUSH
64480: LD_STRING , 
64482: STR
64483: PUSH
64484: LD_VAR 0 3
64488: PPUSH
64489: LD_INT 1
64491: PPUSH
64492: CALL_OW 268
64496: STR
64497: PUSH
64498: LD_STRING , 
64500: STR
64501: PUSH
64502: LD_VAR 0 3
64506: PPUSH
64507: LD_INT 2
64509: PPUSH
64510: CALL_OW 268
64514: STR
64515: PUSH
64516: LD_STRING ],
64518: STR
64519: PPUSH
64520: CALL_OW 561
// end ;
64524: GO 64418
64526: POP
64527: POP
// AddToLog ( ]; ) ;
64528: LD_STRING ];
64530: PPUSH
64531: CALL_OW 561
// end ;
64535: LD_VAR 0 2
64539: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64540: LD_INT 0
64542: PPUSH
64543: PPUSH
64544: PPUSH
64545: PPUSH
64546: PPUSH
// if not area or not rate or not max then
64547: LD_VAR 0 1
64551: NOT
64552: PUSH
64553: LD_VAR 0 2
64557: NOT
64558: OR
64559: PUSH
64560: LD_VAR 0 4
64564: NOT
64565: OR
64566: IFFALSE 64570
// exit ;
64568: GO 64762
// while 1 do
64570: LD_INT 1
64572: IFFALSE 64762
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64574: LD_ADDR_VAR 0 9
64578: PUSH
64579: LD_VAR 0 1
64583: PPUSH
64584: LD_INT 1
64586: PPUSH
64587: CALL_OW 287
64591: PUSH
64592: LD_INT 10
64594: MUL
64595: ST_TO_ADDR
// r := rate / 10 ;
64596: LD_ADDR_VAR 0 7
64600: PUSH
64601: LD_VAR 0 2
64605: PUSH
64606: LD_INT 10
64608: DIVREAL
64609: ST_TO_ADDR
// time := 1 1$00 ;
64610: LD_ADDR_VAR 0 8
64614: PUSH
64615: LD_INT 2100
64617: ST_TO_ADDR
// if amount < min then
64618: LD_VAR 0 9
64622: PUSH
64623: LD_VAR 0 3
64627: LESS
64628: IFFALSE 64646
// r := r * 2 else
64630: LD_ADDR_VAR 0 7
64634: PUSH
64635: LD_VAR 0 7
64639: PUSH
64640: LD_INT 2
64642: MUL
64643: ST_TO_ADDR
64644: GO 64672
// if amount > max then
64646: LD_VAR 0 9
64650: PUSH
64651: LD_VAR 0 4
64655: GREATER
64656: IFFALSE 64672
// r := r / 2 ;
64658: LD_ADDR_VAR 0 7
64662: PUSH
64663: LD_VAR 0 7
64667: PUSH
64668: LD_INT 2
64670: DIVREAL
64671: ST_TO_ADDR
// time := time / r ;
64672: LD_ADDR_VAR 0 8
64676: PUSH
64677: LD_VAR 0 8
64681: PUSH
64682: LD_VAR 0 7
64686: DIVREAL
64687: ST_TO_ADDR
// if time < 0 then
64688: LD_VAR 0 8
64692: PUSH
64693: LD_INT 0
64695: LESS
64696: IFFALSE 64713
// time := time * - 1 ;
64698: LD_ADDR_VAR 0 8
64702: PUSH
64703: LD_VAR 0 8
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: MUL
64712: ST_TO_ADDR
// wait ( time ) ;
64713: LD_VAR 0 8
64717: PPUSH
64718: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64722: LD_INT 35
64724: PPUSH
64725: LD_INT 875
64727: PPUSH
64728: CALL_OW 12
64732: PPUSH
64733: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64737: LD_INT 1
64739: PPUSH
64740: LD_INT 5
64742: PPUSH
64743: CALL_OW 12
64747: PPUSH
64748: LD_VAR 0 1
64752: PPUSH
64753: LD_INT 1
64755: PPUSH
64756: CALL_OW 55
// end ;
64760: GO 64570
// end ;
64762: LD_VAR 0 5
64766: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64767: LD_INT 0
64769: PPUSH
64770: PPUSH
64771: PPUSH
64772: PPUSH
64773: PPUSH
64774: PPUSH
64775: PPUSH
64776: PPUSH
// if not turrets or not factories then
64777: LD_VAR 0 1
64781: NOT
64782: PUSH
64783: LD_VAR 0 2
64787: NOT
64788: OR
64789: IFFALSE 64793
// exit ;
64791: GO 65100
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64793: LD_ADDR_VAR 0 10
64797: PUSH
64798: LD_INT 5
64800: PUSH
64801: LD_INT 6
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: PUSH
64811: LD_INT 4
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: LD_INT 5
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 24
64835: PUSH
64836: LD_INT 25
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 23
64845: PUSH
64846: LD_INT 27
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 42
64859: PUSH
64860: LD_INT 43
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 44
64869: PUSH
64870: LD_INT 46
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 45
64879: PUSH
64880: LD_INT 47
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// result := [ ] ;
64897: LD_ADDR_VAR 0 3
64901: PUSH
64902: EMPTY
64903: ST_TO_ADDR
// for i in turrets do
64904: LD_ADDR_VAR 0 4
64908: PUSH
64909: LD_VAR 0 1
64913: PUSH
64914: FOR_IN
64915: IFFALSE 65098
// begin nat := GetNation ( i ) ;
64917: LD_ADDR_VAR 0 7
64921: PUSH
64922: LD_VAR 0 4
64926: PPUSH
64927: CALL_OW 248
64931: ST_TO_ADDR
// weapon := 0 ;
64932: LD_ADDR_VAR 0 8
64936: PUSH
64937: LD_INT 0
64939: ST_TO_ADDR
// if not nat then
64940: LD_VAR 0 7
64944: NOT
64945: IFFALSE 64949
// continue ;
64947: GO 64914
// for j in list [ nat ] do
64949: LD_ADDR_VAR 0 5
64953: PUSH
64954: LD_VAR 0 10
64958: PUSH
64959: LD_VAR 0 7
64963: ARRAY
64964: PUSH
64965: FOR_IN
64966: IFFALSE 65007
// if GetBWeapon ( i ) = j [ 1 ] then
64968: LD_VAR 0 4
64972: PPUSH
64973: CALL_OW 269
64977: PUSH
64978: LD_VAR 0 5
64982: PUSH
64983: LD_INT 1
64985: ARRAY
64986: EQUAL
64987: IFFALSE 65005
// begin weapon := j [ 2 ] ;
64989: LD_ADDR_VAR 0 8
64993: PUSH
64994: LD_VAR 0 5
64998: PUSH
64999: LD_INT 2
65001: ARRAY
65002: ST_TO_ADDR
// break ;
65003: GO 65007
// end ;
65005: GO 64965
65007: POP
65008: POP
// if not weapon then
65009: LD_VAR 0 8
65013: NOT
65014: IFFALSE 65018
// continue ;
65016: GO 64914
// for k in factories do
65018: LD_ADDR_VAR 0 6
65022: PUSH
65023: LD_VAR 0 2
65027: PUSH
65028: FOR_IN
65029: IFFALSE 65094
// begin weapons := AvailableWeaponList ( k ) ;
65031: LD_ADDR_VAR 0 9
65035: PUSH
65036: LD_VAR 0 6
65040: PPUSH
65041: CALL_OW 478
65045: ST_TO_ADDR
// if not weapons then
65046: LD_VAR 0 9
65050: NOT
65051: IFFALSE 65055
// continue ;
65053: GO 65028
// if weapon in weapons then
65055: LD_VAR 0 8
65059: PUSH
65060: LD_VAR 0 9
65064: IN
65065: IFFALSE 65092
// begin result := [ i , weapon ] ;
65067: LD_ADDR_VAR 0 3
65071: PUSH
65072: LD_VAR 0 4
65076: PUSH
65077: LD_VAR 0 8
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// exit ;
65086: POP
65087: POP
65088: POP
65089: POP
65090: GO 65100
// end ; end ;
65092: GO 65028
65094: POP
65095: POP
// end ;
65096: GO 64914
65098: POP
65099: POP
// end ;
65100: LD_VAR 0 3
65104: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65105: LD_INT 0
65107: PPUSH
// if not side or side > 8 then
65108: LD_VAR 0 3
65112: NOT
65113: PUSH
65114: LD_VAR 0 3
65118: PUSH
65119: LD_INT 8
65121: GREATER
65122: OR
65123: IFFALSE 65127
// exit ;
65125: GO 65186
// if not range then
65127: LD_VAR 0 4
65131: NOT
65132: IFFALSE 65143
// range := - 12 ;
65134: LD_ADDR_VAR 0 4
65138: PUSH
65139: LD_INT 12
65141: NEG
65142: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65143: LD_VAR 0 1
65147: PPUSH
65148: LD_VAR 0 2
65152: PPUSH
65153: LD_VAR 0 3
65157: PPUSH
65158: LD_VAR 0 4
65162: PPUSH
65163: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65167: LD_VAR 0 1
65171: PPUSH
65172: LD_VAR 0 2
65176: PPUSH
65177: LD_VAR 0 3
65181: PPUSH
65182: CALL_OW 331
// end ;
65186: LD_VAR 0 5
65190: RET
// export function Video ( mode ) ; begin
65191: LD_INT 0
65193: PPUSH
// ingame_video = mode ;
65194: LD_ADDR_OWVAR 52
65198: PUSH
65199: LD_VAR 0 1
65203: ST_TO_ADDR
// interface_hidden = mode ;
65204: LD_ADDR_OWVAR 54
65208: PUSH
65209: LD_VAR 0 1
65213: ST_TO_ADDR
// end ;
65214: LD_VAR 0 2
65218: RET
// export function Join ( array , element ) ; begin
65219: LD_INT 0
65221: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65222: LD_ADDR_VAR 0 3
65226: PUSH
65227: LD_VAR 0 1
65231: PPUSH
65232: LD_VAR 0 1
65236: PUSH
65237: LD_INT 1
65239: PLUS
65240: PPUSH
65241: LD_VAR 0 2
65245: PPUSH
65246: CALL_OW 1
65250: ST_TO_ADDR
// end ;
65251: LD_VAR 0 3
65255: RET
// export function JoinUnion ( array , element ) ; begin
65256: LD_INT 0
65258: PPUSH
// result := array union element ;
65259: LD_ADDR_VAR 0 3
65263: PUSH
65264: LD_VAR 0 1
65268: PUSH
65269: LD_VAR 0 2
65273: UNION
65274: ST_TO_ADDR
// end ;
65275: LD_VAR 0 3
65279: RET
// export function GetBehemoths ( side ) ; begin
65280: LD_INT 0
65282: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65283: LD_ADDR_VAR 0 2
65287: PUSH
65288: LD_INT 22
65290: PUSH
65291: LD_VAR 0 1
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 31
65302: PUSH
65303: LD_INT 25
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PPUSH
65314: CALL_OW 69
65318: ST_TO_ADDR
// end ;
65319: LD_VAR 0 2
65323: RET
// export function Shuffle ( array ) ; var i , index ; begin
65324: LD_INT 0
65326: PPUSH
65327: PPUSH
65328: PPUSH
// result := [ ] ;
65329: LD_ADDR_VAR 0 2
65333: PUSH
65334: EMPTY
65335: ST_TO_ADDR
// if not array then
65336: LD_VAR 0 1
65340: NOT
65341: IFFALSE 65345
// exit ;
65343: GO 65444
// Randomize ;
65345: CALL_OW 10
// for i = array downto 1 do
65349: LD_ADDR_VAR 0 3
65353: PUSH
65354: DOUBLE
65355: LD_VAR 0 1
65359: INC
65360: ST_TO_ADDR
65361: LD_INT 1
65363: PUSH
65364: FOR_DOWNTO
65365: IFFALSE 65442
// begin index := rand ( 1 , array ) ;
65367: LD_ADDR_VAR 0 4
65371: PUSH
65372: LD_INT 1
65374: PPUSH
65375: LD_VAR 0 1
65379: PPUSH
65380: CALL_OW 12
65384: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65385: LD_ADDR_VAR 0 2
65389: PUSH
65390: LD_VAR 0 2
65394: PPUSH
65395: LD_VAR 0 2
65399: PUSH
65400: LD_INT 1
65402: PLUS
65403: PPUSH
65404: LD_VAR 0 1
65408: PUSH
65409: LD_VAR 0 4
65413: ARRAY
65414: PPUSH
65415: CALL_OW 2
65419: ST_TO_ADDR
// array := Delete ( array , index ) ;
65420: LD_ADDR_VAR 0 1
65424: PUSH
65425: LD_VAR 0 1
65429: PPUSH
65430: LD_VAR 0 4
65434: PPUSH
65435: CALL_OW 3
65439: ST_TO_ADDR
// end ;
65440: GO 65364
65442: POP
65443: POP
// end ;
65444: LD_VAR 0 2
65448: RET
// export function GetBaseMaterials ( base ) ; begin
65449: LD_INT 0
65451: PPUSH
// result := [ 0 , 0 , 0 ] ;
65452: LD_ADDR_VAR 0 2
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: ST_TO_ADDR
// if not base then
65471: LD_VAR 0 1
65475: NOT
65476: IFFALSE 65480
// exit ;
65478: GO 65529
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65480: LD_ADDR_VAR 0 2
65484: PUSH
65485: LD_VAR 0 1
65489: PPUSH
65490: LD_INT 1
65492: PPUSH
65493: CALL_OW 275
65497: PUSH
65498: LD_VAR 0 1
65502: PPUSH
65503: LD_INT 2
65505: PPUSH
65506: CALL_OW 275
65510: PUSH
65511: LD_VAR 0 1
65515: PPUSH
65516: LD_INT 3
65518: PPUSH
65519: CALL_OW 275
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: LIST
65528: ST_TO_ADDR
// end ;
65529: LD_VAR 0 2
65533: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65534: LD_INT 0
65536: PPUSH
65537: PPUSH
// result := array ;
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: LD_VAR 0 1
65547: ST_TO_ADDR
// if size > 0 then
65548: LD_VAR 0 2
65552: PUSH
65553: LD_INT 0
65555: GREATER
65556: IFFALSE 65602
// for i := array downto size do
65558: LD_ADDR_VAR 0 4
65562: PUSH
65563: DOUBLE
65564: LD_VAR 0 1
65568: INC
65569: ST_TO_ADDR
65570: LD_VAR 0 2
65574: PUSH
65575: FOR_DOWNTO
65576: IFFALSE 65600
// result := Delete ( result , result ) ;
65578: LD_ADDR_VAR 0 3
65582: PUSH
65583: LD_VAR 0 3
65587: PPUSH
65588: LD_VAR 0 3
65592: PPUSH
65593: CALL_OW 3
65597: ST_TO_ADDR
65598: GO 65575
65600: POP
65601: POP
// end ;
65602: LD_VAR 0 3
65606: RET
// export function ComExit ( unit ) ; var tmp ; begin
65607: LD_INT 0
65609: PPUSH
65610: PPUSH
// if not IsInUnit ( unit ) then
65611: LD_VAR 0 1
65615: PPUSH
65616: CALL_OW 310
65620: NOT
65621: IFFALSE 65625
// exit ;
65623: GO 65685
// tmp := IsInUnit ( unit ) ;
65625: LD_ADDR_VAR 0 3
65629: PUSH
65630: LD_VAR 0 1
65634: PPUSH
65635: CALL_OW 310
65639: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65640: LD_VAR 0 3
65644: PPUSH
65645: CALL_OW 247
65649: PUSH
65650: LD_INT 2
65652: EQUAL
65653: IFFALSE 65666
// ComExitVehicle ( unit ) else
65655: LD_VAR 0 1
65659: PPUSH
65660: CALL_OW 121
65664: GO 65675
// ComExitBuilding ( unit ) ;
65666: LD_VAR 0 1
65670: PPUSH
65671: CALL_OW 122
// result := tmp ;
65675: LD_ADDR_VAR 0 2
65679: PUSH
65680: LD_VAR 0 3
65684: ST_TO_ADDR
// end ;
65685: LD_VAR 0 2
65689: RET
// export function ComExitAll ( units ) ; var i ; begin
65690: LD_INT 0
65692: PPUSH
65693: PPUSH
// if not units then
65694: LD_VAR 0 1
65698: NOT
65699: IFFALSE 65703
// exit ;
65701: GO 65729
// for i in units do
65703: LD_ADDR_VAR 0 3
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: FOR_IN
65714: IFFALSE 65727
// ComExit ( i ) ;
65716: LD_VAR 0 3
65720: PPUSH
65721: CALL 65607 0 1
65725: GO 65713
65727: POP
65728: POP
// end ;
65729: LD_VAR 0 2
65733: RET
// export function ResetHc ; begin
65734: LD_INT 0
65736: PPUSH
// InitHc ;
65737: CALL_OW 19
// hc_importance := 0 ;
65741: LD_ADDR_OWVAR 32
65745: PUSH
65746: LD_INT 0
65748: ST_TO_ADDR
// end ;
65749: LD_VAR 0 1
65753: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65754: LD_INT 0
65756: PPUSH
65757: PPUSH
65758: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65759: LD_ADDR_VAR 0 6
65763: PUSH
65764: LD_VAR 0 1
65768: PUSH
65769: LD_VAR 0 3
65773: PLUS
65774: PUSH
65775: LD_INT 2
65777: DIV
65778: ST_TO_ADDR
// if _x < 0 then
65779: LD_VAR 0 6
65783: PUSH
65784: LD_INT 0
65786: LESS
65787: IFFALSE 65804
// _x := _x * - 1 ;
65789: LD_ADDR_VAR 0 6
65793: PUSH
65794: LD_VAR 0 6
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: MUL
65803: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65804: LD_ADDR_VAR 0 7
65808: PUSH
65809: LD_VAR 0 2
65813: PUSH
65814: LD_VAR 0 4
65818: PLUS
65819: PUSH
65820: LD_INT 2
65822: DIV
65823: ST_TO_ADDR
// if _y < 0 then
65824: LD_VAR 0 7
65828: PUSH
65829: LD_INT 0
65831: LESS
65832: IFFALSE 65849
// _y := _y * - 1 ;
65834: LD_ADDR_VAR 0 7
65838: PUSH
65839: LD_VAR 0 7
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: MUL
65848: ST_TO_ADDR
// result := [ _x , _y ] ;
65849: LD_ADDR_VAR 0 5
65853: PUSH
65854: LD_VAR 0 6
65858: PUSH
65859: LD_VAR 0 7
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: ST_TO_ADDR
// end ;
65868: LD_VAR 0 5
65872: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65873: LD_INT 0
65875: PPUSH
65876: PPUSH
65877: PPUSH
65878: PPUSH
// task := GetTaskList ( unit ) ;
65879: LD_ADDR_VAR 0 7
65883: PUSH
65884: LD_VAR 0 1
65888: PPUSH
65889: CALL_OW 437
65893: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65894: LD_VAR 0 7
65898: NOT
65899: PUSH
65900: LD_VAR 0 1
65904: PPUSH
65905: LD_VAR 0 2
65909: PPUSH
65910: CALL_OW 308
65914: NOT
65915: AND
65916: IFFALSE 65920
// exit ;
65918: GO 66038
// if IsInArea ( unit , area ) then
65920: LD_VAR 0 1
65924: PPUSH
65925: LD_VAR 0 2
65929: PPUSH
65930: CALL_OW 308
65934: IFFALSE 65952
// begin ComMoveToArea ( unit , goAway ) ;
65936: LD_VAR 0 1
65940: PPUSH
65941: LD_VAR 0 3
65945: PPUSH
65946: CALL_OW 113
// exit ;
65950: GO 66038
// end ; if task [ 1 ] [ 1 ] <> M then
65952: LD_VAR 0 7
65956: PUSH
65957: LD_INT 1
65959: ARRAY
65960: PUSH
65961: LD_INT 1
65963: ARRAY
65964: PUSH
65965: LD_STRING M
65967: NONEQUAL
65968: IFFALSE 65972
// exit ;
65970: GO 66038
// x := task [ 1 ] [ 2 ] ;
65972: LD_ADDR_VAR 0 5
65976: PUSH
65977: LD_VAR 0 7
65981: PUSH
65982: LD_INT 1
65984: ARRAY
65985: PUSH
65986: LD_INT 2
65988: ARRAY
65989: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65990: LD_ADDR_VAR 0 6
65994: PUSH
65995: LD_VAR 0 7
65999: PUSH
66000: LD_INT 1
66002: ARRAY
66003: PUSH
66004: LD_INT 3
66006: ARRAY
66007: ST_TO_ADDR
// if InArea ( x , y , area ) then
66008: LD_VAR 0 5
66012: PPUSH
66013: LD_VAR 0 6
66017: PPUSH
66018: LD_VAR 0 2
66022: PPUSH
66023: CALL_OW 309
66027: IFFALSE 66038
// ComStop ( unit ) ;
66029: LD_VAR 0 1
66033: PPUSH
66034: CALL_OW 141
// end ;
66038: LD_VAR 0 4
66042: RET
// export function Abs ( value ) ; begin
66043: LD_INT 0
66045: PPUSH
// result := value ;
66046: LD_ADDR_VAR 0 2
66050: PUSH
66051: LD_VAR 0 1
66055: ST_TO_ADDR
// if value < 0 then
66056: LD_VAR 0 1
66060: PUSH
66061: LD_INT 0
66063: LESS
66064: IFFALSE 66081
// result := value * - 1 ;
66066: LD_ADDR_VAR 0 2
66070: PUSH
66071: LD_VAR 0 1
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: MUL
66080: ST_TO_ADDR
// end ;
66081: LD_VAR 0 2
66085: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66086: LD_INT 0
66088: PPUSH
66089: PPUSH
66090: PPUSH
66091: PPUSH
66092: PPUSH
66093: PPUSH
66094: PPUSH
66095: PPUSH
// if not unit or not building then
66096: LD_VAR 0 1
66100: NOT
66101: PUSH
66102: LD_VAR 0 2
66106: NOT
66107: OR
66108: IFFALSE 66112
// exit ;
66110: GO 66338
// x := GetX ( building ) ;
66112: LD_ADDR_VAR 0 4
66116: PUSH
66117: LD_VAR 0 2
66121: PPUSH
66122: CALL_OW 250
66126: ST_TO_ADDR
// y := GetY ( building ) ;
66127: LD_ADDR_VAR 0 6
66131: PUSH
66132: LD_VAR 0 2
66136: PPUSH
66137: CALL_OW 251
66141: ST_TO_ADDR
// d := GetDir ( building ) ;
66142: LD_ADDR_VAR 0 8
66146: PUSH
66147: LD_VAR 0 2
66151: PPUSH
66152: CALL_OW 254
66156: ST_TO_ADDR
// r := 4 ;
66157: LD_ADDR_VAR 0 9
66161: PUSH
66162: LD_INT 4
66164: ST_TO_ADDR
// for i := 1 to 5 do
66165: LD_ADDR_VAR 0 10
66169: PUSH
66170: DOUBLE
66171: LD_INT 1
66173: DEC
66174: ST_TO_ADDR
66175: LD_INT 5
66177: PUSH
66178: FOR_TO
66179: IFFALSE 66336
// begin _x := ShiftX ( x , d , r + i ) ;
66181: LD_ADDR_VAR 0 5
66185: PUSH
66186: LD_VAR 0 4
66190: PPUSH
66191: LD_VAR 0 8
66195: PPUSH
66196: LD_VAR 0 9
66200: PUSH
66201: LD_VAR 0 10
66205: PLUS
66206: PPUSH
66207: CALL_OW 272
66211: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66212: LD_ADDR_VAR 0 7
66216: PUSH
66217: LD_VAR 0 6
66221: PPUSH
66222: LD_VAR 0 8
66226: PPUSH
66227: LD_VAR 0 9
66231: PUSH
66232: LD_VAR 0 10
66236: PLUS
66237: PPUSH
66238: CALL_OW 273
66242: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66243: LD_VAR 0 5
66247: PPUSH
66248: LD_VAR 0 7
66252: PPUSH
66253: CALL_OW 488
66257: PUSH
66258: LD_VAR 0 5
66262: PPUSH
66263: LD_VAR 0 7
66267: PPUSH
66268: CALL_OW 428
66272: PPUSH
66273: CALL_OW 247
66277: PUSH
66278: LD_INT 3
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: IN
66288: NOT
66289: AND
66290: IFFALSE 66334
// begin ComMoveXY ( unit , _x , _y ) ;
66292: LD_VAR 0 1
66296: PPUSH
66297: LD_VAR 0 5
66301: PPUSH
66302: LD_VAR 0 7
66306: PPUSH
66307: CALL_OW 111
// result := [ _x , _y ] ;
66311: LD_ADDR_VAR 0 3
66315: PUSH
66316: LD_VAR 0 5
66320: PUSH
66321: LD_VAR 0 7
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: ST_TO_ADDR
// exit ;
66330: POP
66331: POP
66332: GO 66338
// end ; end ;
66334: GO 66178
66336: POP
66337: POP
// end ;
66338: LD_VAR 0 3
66342: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66343: LD_INT 0
66345: PPUSH
66346: PPUSH
66347: PPUSH
// result := 0 ;
66348: LD_ADDR_VAR 0 3
66352: PUSH
66353: LD_INT 0
66355: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66356: LD_VAR 0 1
66360: PUSH
66361: LD_INT 0
66363: LESS
66364: PUSH
66365: LD_VAR 0 1
66369: PUSH
66370: LD_INT 8
66372: GREATER
66373: OR
66374: PUSH
66375: LD_VAR 0 2
66379: PUSH
66380: LD_INT 0
66382: LESS
66383: OR
66384: PUSH
66385: LD_VAR 0 2
66389: PUSH
66390: LD_INT 8
66392: GREATER
66393: OR
66394: IFFALSE 66398
// exit ;
66396: GO 66473
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66398: LD_ADDR_VAR 0 4
66402: PUSH
66403: LD_INT 22
66405: PUSH
66406: LD_VAR 0 2
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PPUSH
66415: CALL_OW 69
66419: PUSH
66420: FOR_IN
66421: IFFALSE 66471
// begin un := UnitShoot ( i ) ;
66423: LD_ADDR_VAR 0 5
66427: PUSH
66428: LD_VAR 0 4
66432: PPUSH
66433: CALL_OW 504
66437: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66438: LD_VAR 0 5
66442: PPUSH
66443: CALL_OW 255
66447: PUSH
66448: LD_VAR 0 1
66452: EQUAL
66453: IFFALSE 66469
// begin result := un ;
66455: LD_ADDR_VAR 0 3
66459: PUSH
66460: LD_VAR 0 5
66464: ST_TO_ADDR
// exit ;
66465: POP
66466: POP
66467: GO 66473
// end ; end ;
66469: GO 66420
66471: POP
66472: POP
// end ;
66473: LD_VAR 0 3
66477: RET
// export function GetCargoBay ( units ) ; begin
66478: LD_INT 0
66480: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66481: LD_ADDR_VAR 0 2
66485: PUSH
66486: LD_VAR 0 1
66490: PPUSH
66491: LD_INT 2
66493: PUSH
66494: LD_INT 34
66496: PUSH
66497: LD_INT 12
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 34
66506: PUSH
66507: LD_INT 51
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 34
66516: PUSH
66517: LD_INT 32
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 34
66526: PUSH
66527: LD_EXP 97
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: PPUSH
66543: CALL_OW 72
66547: ST_TO_ADDR
// end ;
66548: LD_VAR 0 2
66552: RET
// export function Negate ( value ) ; begin
66553: LD_INT 0
66555: PPUSH
// result := not value ;
66556: LD_ADDR_VAR 0 2
66560: PUSH
66561: LD_VAR 0 1
66565: NOT
66566: ST_TO_ADDR
// end ;
66567: LD_VAR 0 2
66571: RET
// export function Inc ( value ) ; begin
66572: LD_INT 0
66574: PPUSH
// result := value + 1 ;
66575: LD_ADDR_VAR 0 2
66579: PUSH
66580: LD_VAR 0 1
66584: PUSH
66585: LD_INT 1
66587: PLUS
66588: ST_TO_ADDR
// end ;
66589: LD_VAR 0 2
66593: RET
// export function Dec ( value ) ; begin
66594: LD_INT 0
66596: PPUSH
// result := value - 1 ;
66597: LD_ADDR_VAR 0 2
66601: PUSH
66602: LD_VAR 0 1
66606: PUSH
66607: LD_INT 1
66609: MINUS
66610: ST_TO_ADDR
// end ;
66611: LD_VAR 0 2
66615: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66616: LD_INT 0
66618: PPUSH
66619: PPUSH
66620: PPUSH
66621: PPUSH
66622: PPUSH
66623: PPUSH
66624: PPUSH
66625: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66626: LD_VAR 0 1
66630: PPUSH
66631: LD_VAR 0 2
66635: PPUSH
66636: CALL_OW 488
66640: NOT
66641: PUSH
66642: LD_VAR 0 3
66646: PPUSH
66647: LD_VAR 0 4
66651: PPUSH
66652: CALL_OW 488
66656: NOT
66657: OR
66658: IFFALSE 66671
// begin result := - 1 ;
66660: LD_ADDR_VAR 0 5
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: ST_TO_ADDR
// exit ;
66669: GO 66906
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66671: LD_ADDR_VAR 0 12
66675: PUSH
66676: LD_VAR 0 1
66680: PPUSH
66681: LD_VAR 0 2
66685: PPUSH
66686: LD_VAR 0 3
66690: PPUSH
66691: LD_VAR 0 4
66695: PPUSH
66696: CALL 65754 0 4
66700: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66701: LD_ADDR_VAR 0 11
66705: PUSH
66706: LD_VAR 0 1
66710: PPUSH
66711: LD_VAR 0 2
66715: PPUSH
66716: LD_VAR 0 12
66720: PUSH
66721: LD_INT 1
66723: ARRAY
66724: PPUSH
66725: LD_VAR 0 12
66729: PUSH
66730: LD_INT 2
66732: ARRAY
66733: PPUSH
66734: CALL_OW 298
66738: ST_TO_ADDR
// distance := 9999 ;
66739: LD_ADDR_VAR 0 10
66743: PUSH
66744: LD_INT 9999
66746: ST_TO_ADDR
// for i := 0 to 5 do
66747: LD_ADDR_VAR 0 6
66751: PUSH
66752: DOUBLE
66753: LD_INT 0
66755: DEC
66756: ST_TO_ADDR
66757: LD_INT 5
66759: PUSH
66760: FOR_TO
66761: IFFALSE 66904
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66763: LD_ADDR_VAR 0 7
66767: PUSH
66768: LD_VAR 0 1
66772: PPUSH
66773: LD_VAR 0 6
66777: PPUSH
66778: LD_VAR 0 11
66782: PPUSH
66783: CALL_OW 272
66787: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66788: LD_ADDR_VAR 0 8
66792: PUSH
66793: LD_VAR 0 2
66797: PPUSH
66798: LD_VAR 0 6
66802: PPUSH
66803: LD_VAR 0 11
66807: PPUSH
66808: CALL_OW 273
66812: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66813: LD_VAR 0 7
66817: PPUSH
66818: LD_VAR 0 8
66822: PPUSH
66823: CALL_OW 488
66827: NOT
66828: IFFALSE 66832
// continue ;
66830: GO 66760
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66832: LD_ADDR_VAR 0 9
66836: PUSH
66837: LD_VAR 0 12
66841: PUSH
66842: LD_INT 1
66844: ARRAY
66845: PPUSH
66846: LD_VAR 0 12
66850: PUSH
66851: LD_INT 2
66853: ARRAY
66854: PPUSH
66855: LD_VAR 0 7
66859: PPUSH
66860: LD_VAR 0 8
66864: PPUSH
66865: CALL_OW 298
66869: ST_TO_ADDR
// if tmp < distance then
66870: LD_VAR 0 9
66874: PUSH
66875: LD_VAR 0 10
66879: LESS
66880: IFFALSE 66902
// begin result := i ;
66882: LD_ADDR_VAR 0 5
66886: PUSH
66887: LD_VAR 0 6
66891: ST_TO_ADDR
// distance := tmp ;
66892: LD_ADDR_VAR 0 10
66896: PUSH
66897: LD_VAR 0 9
66901: ST_TO_ADDR
// end ; end ;
66902: GO 66760
66904: POP
66905: POP
// end ;
66906: LD_VAR 0 5
66910: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66911: LD_INT 0
66913: PPUSH
66914: PPUSH
// if not driver or not IsInUnit ( driver ) then
66915: LD_VAR 0 1
66919: NOT
66920: PUSH
66921: LD_VAR 0 1
66925: PPUSH
66926: CALL_OW 310
66930: NOT
66931: OR
66932: IFFALSE 66936
// exit ;
66934: GO 67026
// vehicle := IsInUnit ( driver ) ;
66936: LD_ADDR_VAR 0 3
66940: PUSH
66941: LD_VAR 0 1
66945: PPUSH
66946: CALL_OW 310
66950: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66951: LD_VAR 0 1
66955: PPUSH
66956: LD_STRING \
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: LD_INT 0
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: PUSH
66986: LD_STRING E
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: LD_VAR 0 3
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PPUSH
67022: CALL_OW 446
// end ;
67026: LD_VAR 0 2
67030: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67031: LD_INT 0
67033: PPUSH
67034: PPUSH
// if not driver or not IsInUnit ( driver ) then
67035: LD_VAR 0 1
67039: NOT
67040: PUSH
67041: LD_VAR 0 1
67045: PPUSH
67046: CALL_OW 310
67050: NOT
67051: OR
67052: IFFALSE 67056
// exit ;
67054: GO 67146
// vehicle := IsInUnit ( driver ) ;
67056: LD_ADDR_VAR 0 3
67060: PUSH
67061: LD_VAR 0 1
67065: PPUSH
67066: CALL_OW 310
67070: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67071: LD_VAR 0 1
67075: PPUSH
67076: LD_STRING \
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: PUSH
67106: LD_STRING E
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: LD_VAR 0 3
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PPUSH
67142: CALL_OW 447
// end ;
67146: LD_VAR 0 2
67150: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67151: LD_INT 0
67153: PPUSH
67154: PPUSH
67155: PPUSH
// tmp := [ ] ;
67156: LD_ADDR_VAR 0 5
67160: PUSH
67161: EMPTY
67162: ST_TO_ADDR
// for i in units do
67163: LD_ADDR_VAR 0 4
67167: PUSH
67168: LD_VAR 0 1
67172: PUSH
67173: FOR_IN
67174: IFFALSE 67212
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67176: LD_ADDR_VAR 0 5
67180: PUSH
67181: LD_VAR 0 5
67185: PPUSH
67186: LD_VAR 0 5
67190: PUSH
67191: LD_INT 1
67193: PLUS
67194: PPUSH
67195: LD_VAR 0 4
67199: PPUSH
67200: CALL_OW 256
67204: PPUSH
67205: CALL_OW 2
67209: ST_TO_ADDR
67210: GO 67173
67212: POP
67213: POP
// if not tmp then
67214: LD_VAR 0 5
67218: NOT
67219: IFFALSE 67223
// exit ;
67221: GO 67271
// if asc then
67223: LD_VAR 0 2
67227: IFFALSE 67251
// result := SortListByListAsc ( units , tmp ) else
67229: LD_ADDR_VAR 0 3
67233: PUSH
67234: LD_VAR 0 1
67238: PPUSH
67239: LD_VAR 0 5
67243: PPUSH
67244: CALL_OW 76
67248: ST_TO_ADDR
67249: GO 67271
// result := SortListByListDesc ( units , tmp ) ;
67251: LD_ADDR_VAR 0 3
67255: PUSH
67256: LD_VAR 0 1
67260: PPUSH
67261: LD_VAR 0 5
67265: PPUSH
67266: CALL_OW 77
67270: ST_TO_ADDR
// end ;
67271: LD_VAR 0 3
67275: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67276: LD_INT 0
67278: PPUSH
67279: PPUSH
// task := GetTaskList ( mech ) ;
67280: LD_ADDR_VAR 0 4
67284: PUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: CALL_OW 437
67294: ST_TO_ADDR
// if not task then
67295: LD_VAR 0 4
67299: NOT
67300: IFFALSE 67304
// exit ;
67302: GO 67346
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67304: LD_ADDR_VAR 0 3
67308: PUSH
67309: LD_VAR 0 4
67313: PUSH
67314: LD_INT 1
67316: ARRAY
67317: PUSH
67318: LD_INT 1
67320: ARRAY
67321: PUSH
67322: LD_STRING r
67324: EQUAL
67325: PUSH
67326: LD_VAR 0 4
67330: PUSH
67331: LD_INT 1
67333: ARRAY
67334: PUSH
67335: LD_INT 4
67337: ARRAY
67338: PUSH
67339: LD_VAR 0 2
67343: EQUAL
67344: AND
67345: ST_TO_ADDR
// end ;
67346: LD_VAR 0 3
67350: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67351: LD_INT 0
67353: PPUSH
// SetDir ( unit , d ) ;
67354: LD_VAR 0 1
67358: PPUSH
67359: LD_VAR 0 4
67363: PPUSH
67364: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67368: LD_VAR 0 1
67372: PPUSH
67373: LD_VAR 0 2
67377: PPUSH
67378: LD_VAR 0 3
67382: PPUSH
67383: LD_VAR 0 5
67387: PPUSH
67388: CALL_OW 48
// end ;
67392: LD_VAR 0 6
67396: RET
// export function ToNaturalNumber ( number ) ; begin
67397: LD_INT 0
67399: PPUSH
// result := number div 1 ;
67400: LD_ADDR_VAR 0 2
67404: PUSH
67405: LD_VAR 0 1
67409: PUSH
67410: LD_INT 1
67412: DIV
67413: ST_TO_ADDR
// if number < 0 then
67414: LD_VAR 0 1
67418: PUSH
67419: LD_INT 0
67421: LESS
67422: IFFALSE 67432
// result := 0 ;
67424: LD_ADDR_VAR 0 2
67428: PUSH
67429: LD_INT 0
67431: ST_TO_ADDR
// end ;
67432: LD_VAR 0 2
67436: RET
// export function SortByClass ( units , class ) ; var un ; begin
67437: LD_INT 0
67439: PPUSH
67440: PPUSH
// if not units or not class then
67441: LD_VAR 0 1
67445: NOT
67446: PUSH
67447: LD_VAR 0 2
67451: NOT
67452: OR
67453: IFFALSE 67457
// exit ;
67455: GO 67552
// result := [ ] ;
67457: LD_ADDR_VAR 0 3
67461: PUSH
67462: EMPTY
67463: ST_TO_ADDR
// for un in units do
67464: LD_ADDR_VAR 0 4
67468: PUSH
67469: LD_VAR 0 1
67473: PUSH
67474: FOR_IN
67475: IFFALSE 67550
// if GetClass ( un ) = class then
67477: LD_VAR 0 4
67481: PPUSH
67482: CALL_OW 257
67486: PUSH
67487: LD_VAR 0 2
67491: EQUAL
67492: IFFALSE 67519
// result := Insert ( result , 1 , un ) else
67494: LD_ADDR_VAR 0 3
67498: PUSH
67499: LD_VAR 0 3
67503: PPUSH
67504: LD_INT 1
67506: PPUSH
67507: LD_VAR 0 4
67511: PPUSH
67512: CALL_OW 2
67516: ST_TO_ADDR
67517: GO 67548
// result := Replace ( result , result + 1 , un ) ;
67519: LD_ADDR_VAR 0 3
67523: PUSH
67524: LD_VAR 0 3
67528: PPUSH
67529: LD_VAR 0 3
67533: PUSH
67534: LD_INT 1
67536: PLUS
67537: PPUSH
67538: LD_VAR 0 4
67542: PPUSH
67543: CALL_OW 1
67547: ST_TO_ADDR
67548: GO 67474
67550: POP
67551: POP
// end ;
67552: LD_VAR 0 3
67556: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67557: LD_INT 0
67559: PPUSH
67560: PPUSH
67561: PPUSH
67562: PPUSH
67563: PPUSH
67564: PPUSH
67565: PPUSH
// result := [ ] ;
67566: LD_ADDR_VAR 0 4
67570: PUSH
67571: EMPTY
67572: ST_TO_ADDR
// if x - r < 0 then
67573: LD_VAR 0 1
67577: PUSH
67578: LD_VAR 0 3
67582: MINUS
67583: PUSH
67584: LD_INT 0
67586: LESS
67587: IFFALSE 67599
// min_x := 0 else
67589: LD_ADDR_VAR 0 8
67593: PUSH
67594: LD_INT 0
67596: ST_TO_ADDR
67597: GO 67615
// min_x := x - r ;
67599: LD_ADDR_VAR 0 8
67603: PUSH
67604: LD_VAR 0 1
67608: PUSH
67609: LD_VAR 0 3
67613: MINUS
67614: ST_TO_ADDR
// if y - r < 0 then
67615: LD_VAR 0 2
67619: PUSH
67620: LD_VAR 0 3
67624: MINUS
67625: PUSH
67626: LD_INT 0
67628: LESS
67629: IFFALSE 67641
// min_y := 0 else
67631: LD_ADDR_VAR 0 7
67635: PUSH
67636: LD_INT 0
67638: ST_TO_ADDR
67639: GO 67657
// min_y := y - r ;
67641: LD_ADDR_VAR 0 7
67645: PUSH
67646: LD_VAR 0 2
67650: PUSH
67651: LD_VAR 0 3
67655: MINUS
67656: ST_TO_ADDR
// max_x := x + r ;
67657: LD_ADDR_VAR 0 9
67661: PUSH
67662: LD_VAR 0 1
67666: PUSH
67667: LD_VAR 0 3
67671: PLUS
67672: ST_TO_ADDR
// max_y := y + r ;
67673: LD_ADDR_VAR 0 10
67677: PUSH
67678: LD_VAR 0 2
67682: PUSH
67683: LD_VAR 0 3
67687: PLUS
67688: ST_TO_ADDR
// for _x = min_x to max_x do
67689: LD_ADDR_VAR 0 5
67693: PUSH
67694: DOUBLE
67695: LD_VAR 0 8
67699: DEC
67700: ST_TO_ADDR
67701: LD_VAR 0 9
67705: PUSH
67706: FOR_TO
67707: IFFALSE 67808
// for _y = min_y to max_y do
67709: LD_ADDR_VAR 0 6
67713: PUSH
67714: DOUBLE
67715: LD_VAR 0 7
67719: DEC
67720: ST_TO_ADDR
67721: LD_VAR 0 10
67725: PUSH
67726: FOR_TO
67727: IFFALSE 67804
// begin if not ValidHex ( _x , _y ) then
67729: LD_VAR 0 5
67733: PPUSH
67734: LD_VAR 0 6
67738: PPUSH
67739: CALL_OW 488
67743: NOT
67744: IFFALSE 67748
// continue ;
67746: GO 67726
// if GetResourceTypeXY ( _x , _y ) then
67748: LD_VAR 0 5
67752: PPUSH
67753: LD_VAR 0 6
67757: PPUSH
67758: CALL_OW 283
67762: IFFALSE 67802
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67764: LD_ADDR_VAR 0 4
67768: PUSH
67769: LD_VAR 0 4
67773: PPUSH
67774: LD_VAR 0 4
67778: PUSH
67779: LD_INT 1
67781: PLUS
67782: PPUSH
67783: LD_VAR 0 5
67787: PUSH
67788: LD_VAR 0 6
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PPUSH
67797: CALL_OW 1
67801: ST_TO_ADDR
// end ;
67802: GO 67726
67804: POP
67805: POP
67806: GO 67706
67808: POP
67809: POP
// end ;
67810: LD_VAR 0 4
67814: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67815: LD_INT 0
67817: PPUSH
67818: PPUSH
67819: PPUSH
67820: PPUSH
67821: PPUSH
67822: PPUSH
67823: PPUSH
67824: PPUSH
// if not units then
67825: LD_VAR 0 1
67829: NOT
67830: IFFALSE 67834
// exit ;
67832: GO 68259
// result := UnitFilter ( units , [ f_ok ] ) ;
67834: LD_ADDR_VAR 0 3
67838: PUSH
67839: LD_VAR 0 1
67843: PPUSH
67844: LD_INT 50
67846: PUSH
67847: EMPTY
67848: LIST
67849: PPUSH
67850: CALL_OW 72
67854: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67855: LD_ADDR_VAR 0 8
67859: PUSH
67860: LD_VAR 0 1
67864: PUSH
67865: LD_INT 1
67867: ARRAY
67868: PPUSH
67869: CALL_OW 255
67873: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
67874: LD_ADDR_VAR 0 10
67878: PUSH
67879: LD_INT 29
67881: PUSH
67882: LD_EXP 100
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: ST_TO_ADDR
// if not result then
67891: LD_VAR 0 3
67895: NOT
67896: IFFALSE 67900
// exit ;
67898: GO 68259
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67900: LD_ADDR_VAR 0 5
67904: PUSH
67905: LD_INT 81
67907: PUSH
67908: LD_VAR 0 8
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PPUSH
67917: CALL_OW 69
67921: ST_TO_ADDR
// for i in result do
67922: LD_ADDR_VAR 0 4
67926: PUSH
67927: LD_VAR 0 3
67931: PUSH
67932: FOR_IN
67933: IFFALSE 68257
// begin tag := GetTag ( i ) + 1 ;
67935: LD_ADDR_VAR 0 9
67939: PUSH
67940: LD_VAR 0 4
67944: PPUSH
67945: CALL_OW 110
67949: PUSH
67950: LD_INT 1
67952: PLUS
67953: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67954: LD_ADDR_VAR 0 7
67958: PUSH
67959: LD_VAR 0 4
67963: PPUSH
67964: CALL_OW 250
67968: PPUSH
67969: LD_VAR 0 4
67973: PPUSH
67974: CALL_OW 251
67978: PPUSH
67979: LD_INT 6
67981: PPUSH
67982: CALL 67557 0 3
67986: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67987: LD_VAR 0 7
67991: PUSH
67992: LD_VAR 0 4
67996: PPUSH
67997: CALL_OW 264
68001: PUSH
68002: LD_VAR 0 10
68006: IN
68007: NOT
68008: AND
68009: IFFALSE 68048
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68011: LD_VAR 0 4
68015: PPUSH
68016: LD_VAR 0 7
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PUSH
68025: LD_INT 1
68027: ARRAY
68028: PPUSH
68029: LD_VAR 0 7
68033: PUSH
68034: LD_INT 1
68036: ARRAY
68037: PUSH
68038: LD_INT 2
68040: ARRAY
68041: PPUSH
68042: CALL_OW 116
68046: GO 68255
// if path > tag then
68048: LD_VAR 0 2
68052: PUSH
68053: LD_VAR 0 9
68057: GREATER
68058: IFFALSE 68225
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68060: LD_ADDR_VAR 0 6
68064: PUSH
68065: LD_VAR 0 5
68069: PPUSH
68070: LD_INT 91
68072: PUSH
68073: LD_VAR 0 4
68077: PUSH
68078: LD_INT 12
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: PPUSH
68086: CALL_OW 72
68090: ST_TO_ADDR
// if nearEnemy then
68091: LD_VAR 0 6
68095: IFFALSE 68123
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68097: LD_VAR 0 4
68101: PPUSH
68102: LD_VAR 0 6
68106: PPUSH
68107: LD_VAR 0 4
68111: PPUSH
68112: CALL_OW 74
68116: PPUSH
68117: CALL_OW 115
68121: GO 68223
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68123: LD_VAR 0 4
68127: PPUSH
68128: LD_VAR 0 2
68132: PUSH
68133: LD_VAR 0 9
68137: ARRAY
68138: PUSH
68139: LD_INT 1
68141: ARRAY
68142: PPUSH
68143: LD_VAR 0 2
68147: PUSH
68148: LD_VAR 0 9
68152: ARRAY
68153: PUSH
68154: LD_INT 2
68156: ARRAY
68157: PPUSH
68158: CALL_OW 297
68162: PUSH
68163: LD_INT 6
68165: GREATER
68166: IFFALSE 68209
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68168: LD_VAR 0 4
68172: PPUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_VAR 0 9
68182: ARRAY
68183: PUSH
68184: LD_INT 1
68186: ARRAY
68187: PPUSH
68188: LD_VAR 0 2
68192: PUSH
68193: LD_VAR 0 9
68197: ARRAY
68198: PUSH
68199: LD_INT 2
68201: ARRAY
68202: PPUSH
68203: CALL_OW 114
68207: GO 68223
// SetTag ( i , tag ) ;
68209: LD_VAR 0 4
68213: PPUSH
68214: LD_VAR 0 9
68218: PPUSH
68219: CALL_OW 109
// end else
68223: GO 68255
// if enemy then
68225: LD_VAR 0 5
68229: IFFALSE 68255
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68231: LD_VAR 0 4
68235: PPUSH
68236: LD_VAR 0 5
68240: PPUSH
68241: LD_VAR 0 4
68245: PPUSH
68246: CALL_OW 74
68250: PPUSH
68251: CALL_OW 115
// end ;
68255: GO 67932
68257: POP
68258: POP
// end ;
68259: LD_VAR 0 3
68263: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68264: LD_INT 0
68266: PPUSH
68267: PPUSH
68268: PPUSH
// if not unit or IsInUnit ( unit ) then
68269: LD_VAR 0 1
68273: NOT
68274: PUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: CALL_OW 310
68284: OR
68285: IFFALSE 68289
// exit ;
68287: GO 68380
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68289: LD_ADDR_VAR 0 4
68293: PUSH
68294: LD_VAR 0 1
68298: PPUSH
68299: CALL_OW 250
68303: PPUSH
68304: LD_VAR 0 2
68308: PPUSH
68309: LD_INT 1
68311: PPUSH
68312: CALL_OW 272
68316: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68317: LD_ADDR_VAR 0 5
68321: PUSH
68322: LD_VAR 0 1
68326: PPUSH
68327: CALL_OW 251
68331: PPUSH
68332: LD_VAR 0 2
68336: PPUSH
68337: LD_INT 1
68339: PPUSH
68340: CALL_OW 273
68344: ST_TO_ADDR
// if ValidHex ( x , y ) then
68345: LD_VAR 0 4
68349: PPUSH
68350: LD_VAR 0 5
68354: PPUSH
68355: CALL_OW 488
68359: IFFALSE 68380
// ComTurnXY ( unit , x , y ) ;
68361: LD_VAR 0 1
68365: PPUSH
68366: LD_VAR 0 4
68370: PPUSH
68371: LD_VAR 0 5
68375: PPUSH
68376: CALL_OW 118
// end ;
68380: LD_VAR 0 3
68384: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68385: LD_INT 0
68387: PPUSH
68388: PPUSH
// result := false ;
68389: LD_ADDR_VAR 0 3
68393: PUSH
68394: LD_INT 0
68396: ST_TO_ADDR
// if not units then
68397: LD_VAR 0 2
68401: NOT
68402: IFFALSE 68406
// exit ;
68404: GO 68451
// for i in units do
68406: LD_ADDR_VAR 0 4
68410: PUSH
68411: LD_VAR 0 2
68415: PUSH
68416: FOR_IN
68417: IFFALSE 68449
// if See ( side , i ) then
68419: LD_VAR 0 1
68423: PPUSH
68424: LD_VAR 0 4
68428: PPUSH
68429: CALL_OW 292
68433: IFFALSE 68447
// begin result := true ;
68435: LD_ADDR_VAR 0 3
68439: PUSH
68440: LD_INT 1
68442: ST_TO_ADDR
// exit ;
68443: POP
68444: POP
68445: GO 68451
// end ;
68447: GO 68416
68449: POP
68450: POP
// end ;
68451: LD_VAR 0 3
68455: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68456: LD_INT 0
68458: PPUSH
68459: PPUSH
68460: PPUSH
68461: PPUSH
// if not unit or not points then
68462: LD_VAR 0 1
68466: NOT
68467: PUSH
68468: LD_VAR 0 2
68472: NOT
68473: OR
68474: IFFALSE 68478
// exit ;
68476: GO 68568
// dist := 99999 ;
68478: LD_ADDR_VAR 0 5
68482: PUSH
68483: LD_INT 99999
68485: ST_TO_ADDR
// for i in points do
68486: LD_ADDR_VAR 0 4
68490: PUSH
68491: LD_VAR 0 2
68495: PUSH
68496: FOR_IN
68497: IFFALSE 68566
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68499: LD_ADDR_VAR 0 6
68503: PUSH
68504: LD_VAR 0 1
68508: PPUSH
68509: LD_VAR 0 4
68513: PUSH
68514: LD_INT 1
68516: ARRAY
68517: PPUSH
68518: LD_VAR 0 4
68522: PUSH
68523: LD_INT 2
68525: ARRAY
68526: PPUSH
68527: CALL_OW 297
68531: ST_TO_ADDR
// if tmpDist < dist then
68532: LD_VAR 0 6
68536: PUSH
68537: LD_VAR 0 5
68541: LESS
68542: IFFALSE 68564
// begin result := i ;
68544: LD_ADDR_VAR 0 3
68548: PUSH
68549: LD_VAR 0 4
68553: ST_TO_ADDR
// dist := tmpDist ;
68554: LD_ADDR_VAR 0 5
68558: PUSH
68559: LD_VAR 0 6
68563: ST_TO_ADDR
// end ; end ;
68564: GO 68496
68566: POP
68567: POP
// end ; end_of_file
68568: LD_VAR 0 3
68572: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
68573: LD_INT 0
68575: PPUSH
// ar_miner := 81 ;
68576: LD_ADDR_EXP 103
68580: PUSH
68581: LD_INT 81
68583: ST_TO_ADDR
// ar_crane := 88 ;
68584: LD_ADDR_EXP 102
68588: PUSH
68589: LD_INT 88
68591: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
68592: LD_ADDR_EXP 97
68596: PUSH
68597: LD_INT 89
68599: ST_TO_ADDR
// us_hack := 99 ;
68600: LD_ADDR_EXP 98
68604: PUSH
68605: LD_INT 99
68607: ST_TO_ADDR
// us_artillery := 97 ;
68608: LD_ADDR_EXP 99
68612: PUSH
68613: LD_INT 97
68615: ST_TO_ADDR
// ar_bio_bomb := 91 ;
68616: LD_ADDR_EXP 100
68620: PUSH
68621: LD_INT 91
68623: ST_TO_ADDR
// ar_mortar := 92 ;
68624: LD_ADDR_EXP 101
68628: PUSH
68629: LD_INT 92
68631: ST_TO_ADDR
// ru_radar := 98 ;
68632: LD_ADDR_EXP 96
68636: PUSH
68637: LD_INT 98
68639: ST_TO_ADDR
// tech_Artillery := 80 ;
68640: LD_ADDR_EXP 104
68644: PUSH
68645: LD_INT 80
68647: ST_TO_ADDR
// tech_RadMat := 81 ;
68648: LD_ADDR_EXP 105
68652: PUSH
68653: LD_INT 81
68655: ST_TO_ADDR
// tech_BasicTools := 82 ;
68656: LD_ADDR_EXP 106
68660: PUSH
68661: LD_INT 82
68663: ST_TO_ADDR
// tech_Cargo := 83 ;
68664: LD_ADDR_EXP 107
68668: PUSH
68669: LD_INT 83
68671: ST_TO_ADDR
// tech_Track := 84 ;
68672: LD_ADDR_EXP 108
68676: PUSH
68677: LD_INT 84
68679: ST_TO_ADDR
// tech_Crane := 85 ;
68680: LD_ADDR_EXP 109
68684: PUSH
68685: LD_INT 85
68687: ST_TO_ADDR
// tech_Bulldozer := 86 ;
68688: LD_ADDR_EXP 110
68692: PUSH
68693: LD_INT 86
68695: ST_TO_ADDR
// tech_Hovercraft := 87 ;
68696: LD_ADDR_EXP 111
68700: PUSH
68701: LD_INT 87
68703: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
68704: LD_ADDR_EXP 112
68708: PUSH
68709: LD_INT 88
68711: ST_TO_ADDR
// class_mastodont := 31 ;
68712: LD_ADDR_EXP 113
68716: PUSH
68717: LD_INT 31
68719: ST_TO_ADDR
// class_horse := 21 ;
68720: LD_ADDR_EXP 114
68724: PUSH
68725: LD_INT 21
68727: ST_TO_ADDR
// end ;
68728: LD_VAR 0 1
68732: RET
// every 1 do
68733: GO 68735
68735: DISABLE
// InitGlobalVariables ; end_of_file
68736: CALL 68573 0 0
68740: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68741: LD_VAR 0 1
68745: PUSH
68746: LD_INT 200
68748: DOUBLE
68749: GREATEREQUAL
68750: IFFALSE 68758
68752: LD_INT 299
68754: DOUBLE
68755: LESSEQUAL
68756: IFTRUE 68760
68758: GO 68792
68760: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68761: LD_VAR 0 1
68765: PPUSH
68766: LD_VAR 0 2
68770: PPUSH
68771: LD_VAR 0 3
68775: PPUSH
68776: LD_VAR 0 4
68780: PPUSH
68781: LD_VAR 0 5
68785: PPUSH
68786: CALL 10814 0 5
68790: GO 68869
68792: LD_INT 300
68794: DOUBLE
68795: GREATEREQUAL
68796: IFFALSE 68804
68798: LD_INT 399
68800: DOUBLE
68801: LESSEQUAL
68802: IFTRUE 68806
68804: GO 68868
68806: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68807: LD_VAR 0 1
68811: PPUSH
68812: LD_VAR 0 2
68816: PPUSH
68817: LD_VAR 0 3
68821: PPUSH
68822: LD_VAR 0 4
68826: PPUSH
68827: LD_VAR 0 5
68831: PPUSH
68832: LD_VAR 0 6
68836: PPUSH
68837: LD_VAR 0 7
68841: PPUSH
68842: LD_VAR 0 8
68846: PPUSH
68847: LD_VAR 0 9
68851: PPUSH
68852: LD_VAR 0 10
68856: PPUSH
68857: LD_VAR 0 11
68861: PPUSH
68862: CALL 26502 0 11
68866: GO 68869
68868: POP
// end ;
68869: PPOPN 11
68871: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68872: LD_VAR 0 1
68876: PPUSH
68877: LD_VAR 0 2
68881: PPUSH
68882: LD_VAR 0 3
68886: PPUSH
68887: LD_VAR 0 4
68891: PPUSH
68892: LD_VAR 0 5
68896: PPUSH
68897: CALL 10806 0 5
// end ; end_of_file
68901: PPOPN 5
68903: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68904: LD_VAR 0 1
68908: PPUSH
68909: LD_VAR 0 2
68913: PPUSH
68914: LD_VAR 0 3
68918: PPUSH
68919: LD_VAR 0 4
68923: PPUSH
68924: LD_VAR 0 5
68928: PPUSH
68929: LD_VAR 0 6
68933: PPUSH
68934: CALL 14697 0 6
// end ;
68938: PPOPN 6
68940: END
