// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 64956 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7093 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 30799 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 35814 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 35814 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 68792 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 30799 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 30799 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 30799 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 35814 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 30799 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 68792 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 35814 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 68792 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 71611 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 7
4706: PUSH
4707: LD_INT 12
4709: PUSH
4710: LD_INT 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: LESS
4724: IFFALSE 4798
// begin uc_side := 3 ;
4726: LD_ADDR_OWVAR 20
4730: PUSH
4731: LD_INT 3
4733: ST_TO_ADDR
// uc_nation := 3 ;
4734: LD_ADDR_OWVAR 21
4738: PUSH
4739: LD_INT 3
4741: ST_TO_ADDR
// ResetHc ;
4742: CALL 68792 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_INT 143
4793: PPUSH
4794: CALL_OW 52
// end ; if type = 1 then
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4829
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4808: LD_INT 143
4810: PPUSH
4811: LD_INT 21
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 51
4822: PPUSH
4823: CALL_OW 185
4827: GO 4908
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4829: LD_INT 143
4831: PPUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 23
4840: PUSH
4841: LD_INT 24
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_INT 44
4876: PUSH
4877: LD_INT 44
4879: PUSH
4880: LD_INT 43
4882: PUSH
4883: LD_INT 42
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: PPUSH
4904: CALL_OW 185
// end ;
4908: LD_VAR 0 2
4912: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4913: LD_EXP 8
4917: IFFALSE 5119
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4926: LD_EXP 25
4930: PPUSH
4931: LD_INT 79
4933: PPUSH
4934: LD_INT 155
4936: PPUSH
4937: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4941: LD_EXP 25
4945: PPUSH
4946: LD_INT 4
4948: PPUSH
4949: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_EXP 24
4962: PPUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PPUSH
4969: CALL_OW 72
4973: ST_TO_ADDR
// for i in tmp do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_VAR 0 2
4983: PUSH
4984: FOR_IN
4985: IFFALSE 5019
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_INT 123
4994: PPUSH
4995: LD_INT 60
4997: PPUSH
4998: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: LD_INT 153
5009: PPUSH
5010: LD_INT 103
5012: PPUSH
5013: CALL_OW 174
// end ;
5017: GO 4984
5019: POP
5020: POP
// repeat wait ( 0 0$1 ) ;
5021: LD_INT 35
5023: PPUSH
5024: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_EXP 24
5037: PPUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PPUSH
5044: CALL_OW 72
5048: ST_TO_ADDR
// for i in tmp do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 2
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5110
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 81
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 74
5103: PPUSH
5104: CALL_OW 115
5108: GO 5059
5110: POP
5111: POP
5112: LD_VAR 0 2
5116: NOT
5117: IFFALSE 5021
// end ;
5119: PPOPN 2
5121: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5122: LD_INT 5
5124: PPUSH
5125: LD_INT 81
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: IFFALSE 5152
5141: GO 5143
5143: DISABLE
// russianAlert := true ;
5144: LD_ADDR_EXP 5
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
5152: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5153: LD_INT 106
5155: PPUSH
5156: CALL_OW 302
5160: PUSH
5161: LD_INT 106
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: LD_INT 3
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_INT 106
5176: PPUSH
5177: CALL_OW 274
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 275
5189: PUSH
5190: LD_INT 100
5192: LESS
5193: AND
5194: IFFALSE 5218
5196: GO 5198
5198: DISABLE
// begin enable ;
5199: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 200
5213: PPUSH
5214: CALL_OW 276
// end ;
5218: END
// every 0 0$1 do var i , un , tmp ;
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
// begin uc_side := 3 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 3
5234: ST_TO_ADDR
// uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// tmp := [ ] ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to 2 do
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 2
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5341
// begin PrepareHuman ( false , 2 , 2 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: CALL_OW 380
// un := CreateHuman ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: CALL_OW 44
5288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 74
5325: PPUSH
5326: LD_INT 112
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 0
5334: PPUSH
5335: CALL_OW 50
// end ;
5339: GO 5263
5341: POP
5342: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5343: LD_INT 112
5345: PPUSH
5346: CALL_OW 274
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: LD_INT 100
5356: PPUSH
5357: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i in tmp do
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_IN
5379: IFFALSE 5461
// begin if IsDead ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 301
5390: IFFALSE 5408
// tmp := tmp diff i ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 3
5401: PUSH
5402: LD_VAR 0 1
5406: DIFF
5407: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 314
5417: NOT
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 281
5428: NOT
5429: AND
5430: IFFALSE 5459
// begin ComTransport ( i , kagan , mat_oil ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 112
5439: PPUSH
5440: LD_INT 2
5442: PPUSH
5443: CALL_OW 151
// AddComGive ( i , beria ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_INT 106
5454: PPUSH
5455: CALL_OW 221
// end ; end ;
5459: GO 5378
5461: POP
5462: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5463: LD_VAR 0 3
5467: NOT
5468: PUSH
5469: LD_INT 112
5471: PPUSH
5472: CALL_OW 301
5476: OR
5477: PUSH
5478: LD_INT 106
5480: PPUSH
5481: CALL_OW 301
5485: OR
5486: IFFALSE 5361
// end ;
5488: PPOPN 3
5490: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
// begin enable ;
5501: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 22
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 51
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: LD_INT 600
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5547: LD_ADDR_VAR 0 5
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 9
5606: PPUSH
5607: CALL_OW 435
5611: ST_TO_ADDR
// if not cargo or not skr or not dep then
5612: LD_VAR 0 4
5616: NOT
5617: PUSH
5618: LD_VAR 0 3
5622: NOT
5623: OR
5624: PUSH
5625: LD_VAR 0 5
5629: NOT
5630: OR
5631: IFFALSE 5635
// exit ;
5633: GO 5799
// for i in cargo do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 4
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5797
// begin if not skr then
5648: LD_VAR 0 3
5652: NOT
5653: IFFALSE 5659
// exit ;
5655: POP
5656: POP
5657: GO 5799
// if not HasTask ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 314
5668: NOT
5669: IFFALSE 5738
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: CALL_OW 117
// for j := 1 to 2 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 2
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5734
// skr := Delete ( skr , 1 ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
5732: GO 5711
5734: POP
5735: POP
// end else
5736: GO 5795
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 261
5747: PUSH
5748: LD_INT 3
5750: LESS
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 5
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 74
5771: PPUSH
5772: CALL_OW 296
5776: PUSH
5777: LD_INT 6
5779: LESS
5780: AND
5781: IFFALSE 5795
// SetFuel ( i , 100 ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_INT 100
5790: PPUSH
5791: CALL_OW 240
// end ;
5795: GO 5645
5797: POP
5798: POP
// end ;
5799: PPOPN 5
5801: END
// export function SendSupport ; var i , un ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// uc_nation := 3 ;
5807: LD_ADDR_OWVAR 21
5811: PUSH
5812: LD_INT 3
5814: ST_TO_ADDR
// uc_side := 3 ;
5815: LD_ADDR_OWVAR 20
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// ResetHc ;
5823: CALL 68792 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 3
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_OWVAR 67
5855: ARRAY
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5932
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_OWVAR 67
5870: PPUSH
5871: CALL_OW 380
// un := CreateHuman ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: CALL_OW 44
5884: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 107
5892: PPUSH
5893: LD_INT 95
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_INT 56
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: CALL_OW 114
// AddComHold ( un ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 200
// end ;
5930: GO 5857
5932: POP
5933: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 4
5939: PPUSH
5940: LD_OWVAR 67
5944: PPUSH
5945: CALL_OW 380
// un := CreateHuman ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: LD_INT 107
5966: PPUSH
5967: LD_INT 95
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5980: LD_VAR 0 3
5984: PPUSH
5985: LD_INT 59
5987: PPUSH
5988: LD_INT 25
5990: PPUSH
5991: CALL_OW 111
// if Difficulty > 1 then
5995: LD_OWVAR 67
5999: PUSH
6000: LD_INT 1
6002: GREATER
6003: IFFALSE 6112
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 2
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6110
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_OWVAR 67
6048: PPUSH
6049: CALL_OW 380
// un := CreateHuman ;
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: CALL_OW 44
6062: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 107
6070: PPUSH
6071: LD_INT 95
6073: PPUSH
6074: LD_INT 4
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 45
6091: PPUSH
6092: LD_INT 76
6094: PPUSH
6095: CALL_OW 114
// AddComHold ( un ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 200
// end ;
6108: GO 6035
6110: POP
6111: POP
// end ; end ;
6112: LD_VAR 0 1
6116: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6117: LD_OWVAR 1
6121: PUSH
6122: LD_INT 42000
6124: GREATEREQUAL
6125: PUSH
6126: LD_OWVAR 67
6130: PUSH
6131: LD_INT 1
6133: GREATER
6134: AND
6135: PUSH
6136: LD_EXP 24
6140: PUSH
6141: LD_INT 4
6143: GREATER
6144: AND
6145: PUSH
6146: LD_EXP 8
6150: NOT
6151: AND
6152: IFFALSE 6445
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
// begin enable ;
6163: ENABLE
// tmp := [ ] ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: LD_INT 91
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 47
6188: PUSH
6189: LD_INT 80
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 39
6198: PUSH
6199: LD_INT 67
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: LD_INT 60
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 52
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 1
6264: MINUS
6265: ARRAY
6266: PUSH
6267: FOR_TO
6268: IFFALSE 6419
// begin uc_side := 3 ;
6270: LD_ADDR_OWVAR 20
6274: PUSH
6275: LD_INT 3
6277: ST_TO_ADDR
// uc_nation := 3 ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_INT 3
6285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6286: LD_INT 22
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 42
6297: PUSH
6298: LD_INT 42
6300: PUSH
6301: LD_INT 44
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 3
6316: MOD
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ARRAY
6322: PPUSH
6323: LD_INT 100
6325: PPUSH
6326: CALL 35814 0 5
// un := CreateVehicle ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: CALL_OW 45
6339: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 57
6347: PPUSH
6348: LD_INT 103
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 5
6398: PPUSH
6399: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6403: CALL_OW 44
6407: PPUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: CALL_OW 52
// end ;
6417: GO 6267
6419: POP
6420: POP
// repeat wait ( 0 0$1 ) ;
6421: LD_INT 35
6423: PPUSH
6424: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_VAR 0 4
6437: PPUSH
6438: CALL 70871 0 2
6442: NOT
6443: IFFALSE 6421
// end ;
6445: PPOPN 4
6447: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6448: LD_INT 3
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: IFFALSE 6567
6485: GO 6487
6487: DISABLE
6488: LD_INT 0
6490: PPUSH
// begin enable ;
6491: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6565
// if GetFuel ( i ) < 3 then
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 261
6545: PUSH
6546: LD_INT 3
6548: LESS
6549: IFFALSE 6563
// SetFuel ( i , 3 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 240
6563: GO 6533
6565: POP
6566: POP
// end ; end_of_file
6567: PPOPN 1
6569: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// uc_side := 2 ;
6578: LD_ADDR_OWVAR 20
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// uc_nation := 2 ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_INT 2
6593: ST_TO_ADDR
// InitVc ;
6594: CALL_OW 20
// ResetHc ;
6598: CALL 68792 0 0
// for j := 1 to 2 do
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6840
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_INT 178
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 268
6635: PUSH
6636: LD_INT 121
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_VAR 0 3
6651: ARRAY
6652: ST_TO_ADDR
// for i := 1 to 8 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 8
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6836
// begin uc_side := 2 ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
// uc_nation := 2 ;
6677: LD_ADDR_OWVAR 21
6681: PUSH
6682: LD_INT 2
6684: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6685: LD_INT 14
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 26
6696: PUSH
6697: LD_INT 27
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 99
6718: PPUSH
6719: CALL 35814 0 5
// veh := CreateVehicle ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: CALL_OW 45
6732: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 3
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_VAR 0 6
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6775: LD_INT 0
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: LD_INT 6
6783: PPUSH
6784: CALL_OW 380
// un := CreateHuman ;
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: CALL_OW 44
6797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 186
6819: PPUSH
6820: LD_INT 17
6822: PPUSH
6823: CALL_OW 111
// wait ( 0 0$2 ) ;
6827: LD_INT 70
6829: PPUSH
6830: CALL_OW 67
// end ;
6834: GO 6666
6836: POP
6837: POP
// end ;
6838: GO 6615
6840: POP
6841: POP
// for i := 1 to 10 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 10
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6923
// begin PrepareHuman ( false , 1 , 5 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_INT 5
6866: PPUSH
6867: CALL_OW 380
// un := CreateHuman ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6881: LD_VAR 0 4
6885: PPUSH
6886: LD_INT 178
6888: PPUSH
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 186
6906: PPUSH
6907: LD_INT 17
6909: PPUSH
6910: CALL_OW 111
// wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// end ;
6921: GO 6855
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 1
6929: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 50
6942: PUSH
6943: EMPTY
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: IFFALSE 7090
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin enable ;
6963: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not enemy then
7002: LD_VAR 0 2
7006: NOT
7007: IFFALSE 7029
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 50
7046: PUSH
7047: EMPTY
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PUSH
7059: FOR_IN
7060: IFFALSE 7088
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 74
7081: PPUSH
7082: CALL_OW 115
7086: GO 7059
7088: POP
7089: POP
// end ; end_of_file
7090: PPOPN 2
7092: END
// export function Action ; begin
7093: LD_INT 0
7095: PPUSH
// InGameOn ;
7096: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7100: LD_INT 106
7102: PPUSH
7103: LD_INT 3
7105: PPUSH
7106: CALL_OW 86
// wait ( 0 0$2 ) ;
7110: LD_INT 70
7112: PPUSH
7113: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7117: LD_STRING target1
7119: PPUSH
7120: CALL_OW 337
// InGameOff ;
7124: CALL_OW 9
// SaveForQuickRestart ;
7128: CALL_OW 22
// end ;
7132: LD_VAR 0 1
7136: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7137: LD_INT 64
7139: PPUSH
7140: CALL_OW 301
7144: PUSH
7145: LD_EXP 8
7149: NOT
7150: AND
7151: IFFALSE 7171
7153: GO 7155
7155: DISABLE
// begin omicronFall := true ;
7156: LD_ADDR_EXP 7
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// YouLost ( omi ) ;
7164: LD_STRING omi
7166: PPUSH
7167: CALL_OW 104
// end ;
7171: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7172: LD_INT 4
7174: PPUSH
7175: LD_EXP 14
7179: PPUSH
7180: CALL_OW 292
7184: PUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_EXP 14
7192: PPUSH
7193: CALL_OW 310
7197: PPUSH
7198: CALL_OW 292
7202: OR
7203: PUSH
7204: LD_INT 64
7206: PPUSH
7207: CALL_OW 302
7211: AND
7212: IFFALSE 7765
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 4
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 72
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// for i in tmp do
7276: LD_ADDR_VAR 0 1
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7303
// SetSide ( i , 1 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 235
7301: GO 7286
7303: POP
7304: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7305: LD_EXP 14
7309: PPUSH
7310: LD_INT 37
7312: PPUSH
7313: LD_INT 40
7315: PPUSH
7316: CALL_OW 111
// wait ( 0 0$5 ) ;
7320: LD_INT 175
7322: PPUSH
7323: CALL_OW 67
// ComExit ( Sikorski ) ;
7327: LD_EXP 14
7331: PPUSH
7332: CALL 68665 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_INT 37
7343: PPUSH
7344: LD_INT 40
7346: PPUSH
7347: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7351: LD_EXP 14
7355: PPUSH
7356: CALL_OW 85
// wait ( 0 0$2 ) ;
7360: LD_INT 70
7362: PPUSH
7363: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL 68665 0 1
7381: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 14
7391: PPUSH
7392: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_EXP 14
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 5
7420: LESS
7421: PUSH
7422: LD_EXP 14
7426: PPUSH
7427: CALL_OW 310
7431: NOT
7432: AND
7433: IFFALSE 7396
// ComTurnUnit ( Sikorski , speaker ) ;
7435: LD_EXP 14
7439: PPUSH
7440: LD_VAR 0 3
7444: PPUSH
7445: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_EXP 14
7458: PPUSH
7459: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7463: LD_EXP 14
7467: PPUSH
7468: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7472: LD_EXP 14
7476: PPUSH
7477: LD_STRING DS-1
7479: PPUSH
7480: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_STRING DP-1
7491: PPUSH
7492: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DS-2
7503: PPUSH
7504: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_STRING DP-2
7515: PPUSH
7516: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7520: LD_EXP 14
7524: PPUSH
7525: LD_STRING DS-3
7527: PPUSH
7528: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_STRING DP-3
7539: PPUSH
7540: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7544: LD_EXP 14
7548: PPUSH
7549: LD_STRING DS-4
7551: PPUSH
7552: CALL_OW 88
// wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// if whereHeWas then
7563: LD_VAR 0 4
7567: IFFALSE 7583
// ComEnterUnit ( speaker , whereHeWas ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_VAR 0 4
7578: PPUSH
7579: CALL_OW 120
// ComHold ( Sikorski ) ;
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 140
// wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7599: LD_EXP 15
7603: PPUSH
7604: LD_STRING DR-1
7606: PPUSH
7607: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DS-5
7618: PPUSH
7619: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7623: LD_EXP 15
7627: PPUSH
7628: LD_STRING DR-2
7630: PPUSH
7631: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7635: LD_EXP 14
7639: PPUSH
7640: LD_STRING DS-6
7642: PPUSH
7643: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7647: LD_EXP 15
7651: PPUSH
7652: LD_STRING DR-3
7654: PPUSH
7655: CALL_OW 94
// InGameOff ;
7659: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7663: LD_STRING target2
7665: PPUSH
7666: CALL_OW 337
// sikorskiInOmicron := true ;
7670: LD_ADDR_EXP 9
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7678: LD_INT 70
7680: PPUSH
7681: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_STRING DS-7
7692: PPUSH
7693: CALL_OW 88
// wait ( 3 3$00 ) ;
7697: LD_INT 6300
7699: PPUSH
7700: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7704: LD_EXP 15
7708: PPUSH
7709: LD_STRING DRforce-5
7711: PPUSH
7712: CALL_OW 94
// wait ( 4 4$50 ) ;
7716: LD_INT 10150
7718: PPUSH
7719: CALL_OW 67
// FirstReinforcements ;
7723: CALL 7942 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7727: LD_INT 25200
7729: PPUSH
7730: LD_INT 31500
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7742: LD_EXP 15
7746: PPUSH
7747: LD_STRING DRforce-10
7749: PPUSH
7750: CALL_OW 94
// wait ( 9 9$50 ) ;
7754: LD_INT 20650
7756: PPUSH
7757: CALL_OW 67
// SecondReinforcements ;
7761: CALL 8785 0 0
// end ;
7765: PPOPN 4
7767: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7768: LD_EXP 14
7772: PPUSH
7773: CALL_OW 256
7777: PUSH
7778: LD_INT 1000
7780: LESS
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 101
7807: PUSH
7808: LD_INT 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: AND
7829: IFFALSE 7846
7831: GO 7833
7833: DISABLE
// Say ( Sikorski , DRus ) ;
7834: LD_EXP 14
7838: PPUSH
7839: LD_STRING DRus
7841: PPUSH
7842: CALL_OW 88
7846: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7847: LD_OWVAR 1
7851: PUSH
7852: LD_INT 23100
7854: PUSH
7855: LD_INT 22050
7857: PUSH
7858: LD_INT 20300
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: GREATEREQUAL
7872: IFFALSE 7941
7874: GO 7876
7876: DISABLE
// begin SendSupport ;
7877: CALL 5802 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7881: LD_EXP 24
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: PPUSH
7901: LD_INT 62
7903: PPUSH
7904: LD_INT 22
7906: PPUSH
7907: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7911: LD_EXP 25
7915: PPUSH
7916: LD_INT 69
7918: PPUSH
7919: LD_INT 27
7921: PPUSH
7922: CALL_OW 111
// wait ( 1 1$00 ) ;
7926: LD_INT 2100
7928: PPUSH
7929: CALL_OW 67
// startAttackOnOmicron := true ;
7933: LD_ADDR_EXP 6
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ;
7941: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// uc_side := 4 ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_INT 4
7957: ST_TO_ADDR
// uc_nation := 1 ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// tmp := [ ] ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// ResetHc ;
7973: CALL 68792 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 4
7988: PPUSH
7989: LD_INT 77
7991: PPUSH
7992: CALL 35814 0 5
// un := CreateVehicle ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: CALL_OW 45
8005: ST_TO_ADDR
// tmp := tmp union un ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 4
8015: PUSH
8016: LD_VAR 0 3
8020: UNION
8021: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 106
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8052: LD_INT 0
8054: PPUSH
8055: LD_INT 3
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 380
// un := CreateHuman ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: CALL_OW 44
8074: ST_TO_ADDR
// tmp := tmp union un ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 4
8084: PUSH
8085: LD_VAR 0 3
8089: UNION
8090: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: ARRAY
8110: PPUSH
8111: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 109
8122: PPUSH
8123: LD_INT 9
8125: PPUSH
8126: CALL_OW 111
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 2
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: PUSH
8167: FOR_TO
8168: IFFALSE 8232
// begin PrepareHuman ( false , 1 , 2 ) ;
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 2
8178: PPUSH
8179: CALL_OW 380
// un := CreateHuman ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: CALL_OW 44
8192: ST_TO_ADDR
// tmp := tmp union un ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: LD_VAR 0 3
8207: UNION
8208: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 105
8216: PPUSH
8217: LD_INT 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 50
// end ;
8230: GO 8167
8232: POP
8233: POP
// PrepareHuman ( false , 4 , 2 ) ;
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 380
// un := CreateHuman ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// tmp := tmp union un ;
8257: LD_ADDR_VAR 0 4
8261: PUSH
8262: LD_VAR 0 4
8266: PUSH
8267: LD_VAR 0 3
8271: UNION
8272: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 105
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8294: LD_VAR 0 4
8298: PPUSH
8299: LD_INT 26
8301: PPUSH
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 114
// spotted := false ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8332: LD_INT 35
8334: PPUSH
8335: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1000
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 5
8370: NOT
8371: AND
8372: IFFALSE 8498
// begin spotted := true ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_INT 3
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 1000
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: PUSH
8414: LD_INT 1
8416: ARRAY
8417: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 250
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: CALL_OW 251
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8447: LD_VAR 0 6
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 6
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 12
8470: NEG
8471: PPUSH
8472: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 6
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 84
// end ; for i in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8540
// if not HasTask ( i ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 314
8520: NOT
8521: IFFALSE 8538
// ComAgressiveMove ( i , 26 , 35 ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_INT 26
8530: PPUSH
8531: LD_INT 35
8533: PPUSH
8534: CALL_OW 114
8538: GO 8508
8540: POP
8541: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 50
8549: PUSH
8550: EMPTY
8551: LIST
8552: PPUSH
8553: CALL_OW 72
8557: NOT
8558: IFFALSE 8593
// begin if spotted then
8560: LD_VAR 0 5
8564: IFFALSE 8591
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8566: LD_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 6
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 331
// exit ;
8591: GO 8780
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 91
8600: PUSH
8601: LD_INT 64
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 4
8619: PPUSH
8620: LD_EXP 14
8624: PPUSH
8625: CALL_OW 292
8629: OR
8630: IFFALSE 8332
// omicronSquad := omicronSquad union tmp ;
8632: LD_ADDR_EXP 13
8636: PUSH
8637: LD_EXP 13
8641: PUSH
8642: LD_VAR 0 4
8646: UNION
8647: ST_TO_ADDR
// if spotted then
8648: LD_VAR 0 5
8652: IFFALSE 8679
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8654: LD_VAR 0 6
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 331
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8706
// SetSide ( i , 1 ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 235
8704: GO 8689
8706: POP
8707: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 50
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: IFFALSE 8780
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 26
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: EMPTY
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 72
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_STRING Dcargo
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: LD_VAR 0 1
8784: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// uc_side := 1 ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// uc_nation := 1 ;
8799: LD_ADDR_OWVAR 21
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// ResetHc ;
8807: CALL 68792 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: CALL_OW 380
// un := CreateHuman ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: CALL_OW 44
8833: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8834: LD_INT 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 5
8845: PPUSH
8846: LD_INT 90
8848: PPUSH
8849: CALL 35814 0 5
// veh := CreateVehicle ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 83
8882: PPUSH
8883: LD_INT 154
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_INT 4
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_OWVAR 67
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8989
// begin PrepareHuman ( false , 1 , 3 ) ;
8943: LD_INT 0
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 380
// un := CreateHuman ;
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: CALL_OW 44
8965: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 83
8973: PPUSH
8974: LD_INT 154
8976: PPUSH
8977: LD_INT 10
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 50
// end ;
8987: GO 8940
8989: POP
8990: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 83
9021: PPUSH
9022: LD_INT 154
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_STRING Dhelp
9042: PPUSH
9043: CALL_OW 94
// ResetHc ;
9047: CALL 68792 0 0
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9056: LD_EXP 5
9060: IFFALSE 9202
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_EXP 20
9079: PPUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 54
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// for i := 1 to tmp do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 2
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9200
// begin ComExitBuilding ( tmp [ i ] ) ;
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 3
9187: PUSH
9188: LD_VAR 0 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 180
// end ;
9198: GO 9154
9200: POP
9201: POP
// end ;
9202: PPOPN 3
9204: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9205: LD_EXP 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: AND
9239: IFFALSE 9385
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
9247: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9248: LD_EXP 16
9252: PPUSH
9253: LD_STRING D9a-Kur-1
9255: PPUSH
9256: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9260: LD_EXP 19
9264: PPUSH
9265: LD_STRING D9a-Bur-1
9267: PPUSH
9268: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D9a-Kur-2
9279: PPUSH
9280: CALL_OW 94
// retreatFromOmicron := true ;
9284: LD_ADDR_EXP 8
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_EXP 18
9301: PUSH
9302: LD_EXP 20
9306: PUSH
9307: LD_EXP 21
9311: UNION
9312: PPUSH
9313: LD_INT 3
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 72
9334: UNION
9335: ST_TO_ADDR
// for i in noncombat do
9336: LD_ADDR_VAR 0 1
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9383
// begin if IsInUnit ( i ) then
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 310
9358: IFFALSE 9369
// ComExitBuilding ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 173
// end ;
9381: GO 9346
9383: POP
9384: POP
// end ;
9385: PPOPN 2
9387: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9388: LD_OWVAR 1
9392: PUSH
9393: LD_INT 42000
9395: PPUSH
9396: LD_INT 63000
9398: PPUSH
9399: CALL_OW 12
9403: GREATER
9404: IFFALSE 9549
9406: GO 9408
9408: DISABLE
9409: LD_INT 0
9411: PPUSH
// begin uc_side := 4 ;
9412: LD_ADDR_OWVAR 20
9416: PUSH
9417: LD_INT 4
9419: ST_TO_ADDR
// uc_nation := 4 ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 4
9427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_INT 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 380
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 1
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 161
9466: PPUSH
9467: LD_INT 162
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 50
// ResetHc ;
9480: CALL 68792 0 0
// wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_STRING Dun1
9498: PPUSH
9499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9503: LD_INT 35
9505: PPUSH
9506: CALL_OW 67
// if IsDead ( un ) then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 301
9519: IFFALSE 9523
// exit ;
9521: GO 9549
// until See ( 1 , un ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 292
9535: IFFALSE 9503
// SetSide ( un , 1 ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 1
9551: END
// every 0 0$1 trigger tanksCounter >= 20 do
9552: LD_EXP 12
9556: PUSH
9557: LD_INT 20
9559: GREATEREQUAL
9560: IFFALSE 9572
9562: GO 9564
9564: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9565: LD_STRING ACH_PANZERKNACKER
9567: PPUSH
9568: CALL_OW 543
9572: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9573: LD_OWVAR 1
9577: PUSH
9578: LD_INT 94500
9580: PPUSH
9581: LD_INT 109200
9583: PPUSH
9584: CALL_OW 12
9588: GREATER
9589: IFFALSE 9852
9591: GO 9593
9593: DISABLE
9594: LD_INT 0
9596: PPUSH
// begin PrepareArabian ;
9597: CALL 6570 0 0
// uc_side := 4 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 4
9608: ST_TO_ADDR
// uc_nation := 1 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// ResetHc ;
9617: CALL 68792 0 0
// un := CreateHuman ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: CALL_OW 44
9630: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_STRING ar_come
9638: PPUSH
9639: CALL_OW 94
// wait ( 0 0$20 ) ;
9643: LD_INT 700
9645: PPUSH
9646: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DR-Back
9657: PPUSH
9658: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9662: LD_STRING target3
9664: PPUSH
9665: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9669: LD_INT 10
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9679: LD_INT 35
9681: PPUSH
9682: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9686: LD_EXP 14
9690: PPUSH
9691: LD_INT 10
9693: PPUSH
9694: CALL_OW 308
9698: PUSH
9699: LD_INT 10
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: OR
9717: IFFALSE 9679
// SayRadio ( Harrison , you_win ) ;
9719: LD_EXP 15
9723: PPUSH
9724: LD_STRING you_win
9726: PPUSH
9727: CALL_OW 94
// AddMedal ( med , 1 ) ;
9731: LD_STRING med
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9741: LD_EXP 11
9745: PUSH
9746: LD_INT 27
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_OWVAR 67
9764: ARRAY
9765: GREATER
9766: IFFALSE 9780
// AddMedal ( ru , 1 ) else
9768: LD_STRING ru
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 101
9778: GO 9791
// AddMedal ( ru , - 1 ) ;
9780: LD_STRING ru
9782: PPUSH
9783: LD_INT 1
9785: NEG
9786: PPUSH
9787: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9791: LD_EXP 10
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: LESS
9816: IFFALSE 9830
// AddMedal ( pep , 1 ) else
9818: LD_STRING pep
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 101
9828: GO 9841
// AddMedal ( pep , - 1 ) ;
9830: LD_STRING pep
9832: PPUSH
9833: LD_INT 1
9835: NEG
9836: PPUSH
9837: CALL_OW 101
// GiveMedals ( MAIN ) ;
9841: LD_STRING MAIN
9843: PPUSH
9844: CALL_OW 102
// YouWin ;
9848: CALL_OW 103
// end ; end_of_file
9852: PPOPN 1
9854: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL 10711 0 1
// if un = Sikorski then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 14
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( sik ) ;
9876: LD_STRING sik
9878: PPUSH
9879: CALL_OW 104
// if un in russianOmicronAttackers then
9883: LD_VAR 0 1
9887: PUSH
9888: LD_EXP 24
9892: IN
9893: IFFALSE 9911
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9895: LD_ADDR_EXP 24
9899: PUSH
9900: LD_EXP 24
9904: PUSH
9905: LD_VAR 0 1
9909: DIFF
9910: ST_TO_ADDR
// if un in russianCargo then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_EXP 25
9920: IN
9921: IFFALSE 9939
// russianCargo := russianCargo diff un ;
9923: LD_ADDR_EXP 25
9927: PUSH
9928: LD_EXP 25
9932: PUSH
9933: LD_VAR 0 1
9937: DIFF
9938: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 51
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: IN
9973: IFFALSE 9982
// ProduceNew ( 1 ) ;
9975: LD_INT 1
9977: PPUSH
9978: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: PUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 247
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: AND
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 248
10027: PUSH
10028: LD_INT 1
10030: EQUAL
10031: AND
10032: IFFALSE 10048
// usLoseCounter := usLoseCounter + 1 ;
10034: LD_ADDR_EXP 10
10038: PUSH
10039: LD_EXP 10
10043: PUSH
10044: LD_INT 1
10046: PLUS
10047: ST_TO_ADDR
// end ;
10048: PPOPN 1
10050: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 2
10060: PPUSH
10061: CALL 10831 0 2
// if GetSide ( factory ) <> 3 then
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 3
10077: NONEQUAL
10078: IFFALSE 10082
// exit ;
10080: GO 10144
// if GetWeapon ( veh ) = ru_cargo_bay then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 51
10094: EQUAL
10095: IFFALSE 10099
// exit ;
10097: GO 10144
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 310
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: UNION
10128: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 71
10136: PPUSH
10137: LD_INT 37
10139: PPUSH
10140: CALL_OW 174
// end ;
10144: PPOPN 2
10146: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10147: LD_VAR 0 2
10151: PUSH
10152: LD_EXP 24
10156: IN
10157: IFFALSE 10175
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10159: LD_ADDR_EXP 24
10163: PUSH
10164: LD_EXP 24
10168: PUSH
10169: LD_VAR 0 2
10173: DIFF
10174: ST_TO_ADDR
// if oldId in russianCargo then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_EXP 25
10184: IN
10185: IFFALSE 10203
// russianCargo := russianCargo diff oldId ;
10187: LD_ADDR_EXP 25
10191: PUSH
10192: LD_EXP 25
10196: PUSH
10197: LD_VAR 0 2
10201: DIFF
10202: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10203: LD_VAR 0 1
10207: PUSH
10208: LD_EXP 24
10212: IN
10213: IFFALSE 10231
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10215: LD_ADDR_EXP 24
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_VAR 0 1
10229: DIFF
10230: ST_TO_ADDR
// if newId in russianCargo then
10231: LD_VAR 0 1
10235: PUSH
10236: LD_EXP 25
10240: IN
10241: IFFALSE 10259
// russianCargo := russianCargo diff newId ;
10243: LD_ADDR_EXP 25
10247: PUSH
10248: LD_EXP 25
10252: PUSH
10253: LD_VAR 0 1
10257: DIFF
10258: ST_TO_ADDR
// end ;
10259: PPOPN 4
10261: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: CALL 10807 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10281: LD_VAR 0 2
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: AND
10318: IFFALSE 10334
// ruLoseCounter := ruLoseCounter + 1 ;
10320: LD_ADDR_EXP 11
10324: PUSH
10325: LD_EXP 11
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: IN
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 247
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// tanksCounter := tanksCounter + 1 ;
10388: LD_ADDR_EXP 12
10392: PUSH
10393: LD_EXP 12
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// end ;
10402: PPOPN 3
10404: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10574
// begin ComRepairVehicle ( driver , veh ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 301
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 301
10467: OR
10468: PUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 250
10481: GREATER
10482: OR
10483: IFFALSE 10441
// if GetLives ( veh ) > 250 then
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 250
10497: GREATER
10498: IFFALSE 10574
// begin ComEnterUnit ( driver , veh ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 71
10521: PPUSH
10522: LD_INT 29
10524: PPUSH
10525: CALL_OW 171
// SetTag ( veh , 1 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 109
// if not veh in russianOmicronAttackers then
10541: LD_VAR 0 2
10545: PUSH
10546: LD_EXP 24
10550: IN
10551: NOT
10552: IFFALSE 10574
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10554: LD_ADDR_EXP 24
10558: PUSH
10559: LD_EXP 24
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 68267 0 2
10573: ST_TO_ADDR
// end ; end ; end ;
10574: PPOPN 4
10576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL 10815 0 1
// end ; end_of_file
10586: PPOPN 1
10588: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10589: LD_EXP 9
10593: PUSH
10594: LD_INT 6
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 287
10604: PUSH
10605: LD_INT 18
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: LESS
10625: AND
10626: IFFALSE 10668
10628: GO 10630
10630: DISABLE
// begin enable ;
10631: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10632: LD_INT 350
10634: PPUSH
10635: LD_INT 1050
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10647: LD_INT 2
10649: PPUSH
10650: LD_INT 5
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: LD_INT 6
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 55
// end ;
10668: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10669: LD_INT 7
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 287
10679: PUSH
10680: LD_INT 5
10682: LESS
10683: IFFALSE 10710
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10689: LD_INT 2
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: CALL_OW 12
10699: PPUSH
10700: LD_INT 7
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 55
// end ; end_of_file end_of_file
10710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 264
10726: PUSH
10727: LD_INT 91
10729: EQUAL
10730: IFFALSE 10802
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10732: LD_INT 68
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: IFFALSE 10765
// eff := 70 else
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_INT 70
10762: ST_TO_ADDR
10763: GO 10773
// eff := 30 ;
10765: LD_ADDR_VAR 0 4
10769: PUSH
10770: LD_INT 30
10772: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 250
10782: PPUSH
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 251
10792: PPUSH
10793: LD_VAR 0 4
10797: PPUSH
10798: CALL_OW 495
// end ; end ;
10802: LD_VAR 0 2
10806: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10807: LD_INT 0
10809: PPUSH
// end ;
10810: LD_VAR 0 4
10814: RET
// export function SOS_Command ( cmd ) ; begin
10815: LD_INT 0
10817: PPUSH
// end ;
10818: LD_VAR 0 2
10822: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10823: LD_INT 0
10825: PPUSH
// end ;
10826: LD_VAR 0 6
10830: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// if not vehicle or not factory then
10835: LD_VAR 0 1
10839: NOT
10840: PUSH
10841: LD_VAR 0 2
10845: NOT
10846: OR
10847: IFFALSE 10851
// exit ;
10849: GO 11082
// if factoryWaypoints >= factory then
10851: LD_EXP 95
10855: PUSH
10856: LD_VAR 0 2
10860: GREATEREQUAL
10861: IFFALSE 11082
// if factoryWaypoints [ factory ] then
10863: LD_EXP 95
10867: PUSH
10868: LD_VAR 0 2
10872: ARRAY
10873: IFFALSE 11082
// begin if GetControl ( vehicle ) = control_manual then
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 263
10884: PUSH
10885: LD_INT 1
10887: EQUAL
10888: IFFALSE 10969
// begin driver := IsDrivenBy ( vehicle ) ;
10890: LD_ADDR_VAR 0 4
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 311
10904: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10905: LD_VAR 0 4
10909: PPUSH
10910: LD_EXP 95
10914: PUSH
10915: LD_VAR 0 2
10919: ARRAY
10920: PUSH
10921: LD_INT 3
10923: ARRAY
10924: PPUSH
10925: LD_EXP 95
10929: PUSH
10930: LD_VAR 0 2
10934: ARRAY
10935: PUSH
10936: LD_INT 4
10938: ARRAY
10939: PPUSH
10940: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10944: LD_VAR 0 4
10948: PPUSH
10949: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10953: LD_VAR 0 4
10957: PPUSH
10958: LD_VAR 0 2
10962: PPUSH
10963: CALL_OW 180
// end else
10967: GO 11082
// if GetControl ( vehicle ) = control_remote then
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: IFFALSE 11043
// begin wait ( 0 0$2 ) ;
10984: LD_INT 70
10986: PPUSH
10987: CALL_OW 67
// if Connect ( vehicle ) then
10991: LD_VAR 0 1
10995: PPUSH
10996: CALL 38905 0 1
11000: IFFALSE 11041
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_EXP 95
11011: PUSH
11012: LD_VAR 0 2
11016: ARRAY
11017: PUSH
11018: LD_INT 3
11020: ARRAY
11021: PPUSH
11022: LD_EXP 95
11026: PUSH
11027: LD_VAR 0 2
11031: ARRAY
11032: PUSH
11033: LD_INT 4
11035: ARRAY
11036: PPUSH
11037: CALL_OW 171
// end else
11041: GO 11082
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_EXP 95
11052: PUSH
11053: LD_VAR 0 2
11057: ARRAY
11058: PUSH
11059: LD_INT 3
11061: ARRAY
11062: PPUSH
11063: LD_EXP 95
11067: PUSH
11068: LD_VAR 0 2
11072: ARRAY
11073: PUSH
11074: LD_INT 4
11076: ARRAY
11077: PPUSH
11078: CALL_OW 171
// end ; end ;
11082: LD_VAR 0 3
11086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11087: LD_INT 0
11089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11090: LD_VAR 0 1
11094: PUSH
11095: LD_INT 250
11097: EQUAL
11098: PUSH
11099: LD_VAR 0 2
11103: PPUSH
11104: CALL_OW 264
11108: PUSH
11109: LD_INT 81
11111: EQUAL
11112: AND
11113: IFFALSE 11134
// MinerPlaceMine ( unit , x , y ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_VAR 0 5
11129: PPUSH
11130: CALL 13519 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11134: LD_VAR 0 1
11138: PUSH
11139: LD_INT 251
11141: EQUAL
11142: PUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 264
11152: PUSH
11153: LD_INT 81
11155: EQUAL
11156: AND
11157: IFFALSE 11178
// MinerDetonateMine ( unit , x , y ) ;
11159: LD_VAR 0 2
11163: PPUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: LD_VAR 0 5
11173: PPUSH
11174: CALL 13794 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11178: LD_VAR 0 1
11182: PUSH
11183: LD_INT 252
11185: EQUAL
11186: PUSH
11187: LD_VAR 0 2
11191: PPUSH
11192: CALL_OW 264
11196: PUSH
11197: LD_INT 81
11199: EQUAL
11200: AND
11201: IFFALSE 11222
// MinerCreateMinefield ( unit , x , y ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_VAR 0 4
11212: PPUSH
11213: LD_VAR 0 5
11217: PPUSH
11218: CALL 14211 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11222: LD_VAR 0 1
11226: PUSH
11227: LD_INT 253
11229: EQUAL
11230: PUSH
11231: LD_VAR 0 2
11235: PPUSH
11236: CALL_OW 257
11240: PUSH
11241: LD_INT 5
11243: EQUAL
11244: AND
11245: IFFALSE 11266
// ComBinocular ( unit , x , y ) ;
11247: LD_VAR 0 2
11251: PPUSH
11252: LD_VAR 0 4
11256: PPUSH
11257: LD_VAR 0 5
11261: PPUSH
11262: CALL 14580 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11266: LD_VAR 0 1
11270: PUSH
11271: LD_INT 254
11273: EQUAL
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 264
11284: PUSH
11285: LD_INT 99
11287: EQUAL
11288: AND
11289: PUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: CALL_OW 263
11299: PUSH
11300: LD_INT 3
11302: EQUAL
11303: AND
11304: IFFALSE 11320
// HackDestroyVehicle ( unit , selectedUnit ) ;
11306: LD_VAR 0 2
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: CALL 12883 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11320: LD_VAR 0 1
11324: PUSH
11325: LD_INT 255
11327: EQUAL
11328: PUSH
11329: LD_VAR 0 2
11333: PPUSH
11334: CALL_OW 264
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 53
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: IN
11349: AND
11350: PUSH
11351: LD_VAR 0 4
11355: PPUSH
11356: LD_VAR 0 5
11360: PPUSH
11361: CALL_OW 488
11365: AND
11366: IFFALSE 11390
// CutTreeXYR ( unit , x , y , 12 ) ;
11368: LD_VAR 0 2
11372: PPUSH
11373: LD_VAR 0 4
11377: PPUSH
11378: LD_VAR 0 5
11382: PPUSH
11383: LD_INT 12
11385: PPUSH
11386: CALL 11453 0 4
// if cmd = 256 then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 256
11397: EQUAL
11398: IFFALSE 11419
// SetFactoryWaypoint ( unit , x , y ) ;
11400: LD_VAR 0 2
11404: PPUSH
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 5
11414: PPUSH
11415: CALL 29488 0 3
// if cmd = 257 then
11419: LD_VAR 0 1
11423: PUSH
11424: LD_INT 257
11426: EQUAL
11427: IFFALSE 11448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11429: LD_VAR 0 2
11433: PPUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_VAR 0 5
11443: PPUSH
11444: CALL 29850 0 3
// end ;
11448: LD_VAR 0 6
11452: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11453: LD_INT 0
11455: PPUSH
11456: PPUSH
11457: PPUSH
11458: PPUSH
11459: PPUSH
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11464: LD_VAR 0 1
11468: NOT
11469: PUSH
11470: LD_VAR 0 2
11474: PPUSH
11475: LD_VAR 0 3
11479: PPUSH
11480: CALL_OW 488
11484: NOT
11485: OR
11486: PUSH
11487: LD_VAR 0 4
11491: NOT
11492: OR
11493: IFFALSE 11497
// exit ;
11495: GO 11837
// list := [ ] ;
11497: LD_ADDR_VAR 0 13
11501: PUSH
11502: EMPTY
11503: ST_TO_ADDR
// if x - r < 0 then
11504: LD_VAR 0 2
11508: PUSH
11509: LD_VAR 0 4
11513: MINUS
11514: PUSH
11515: LD_INT 0
11517: LESS
11518: IFFALSE 11530
// min_x := 0 else
11520: LD_ADDR_VAR 0 7
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
11528: GO 11546
// min_x := x - r ;
11530: LD_ADDR_VAR 0 7
11534: PUSH
11535: LD_VAR 0 2
11539: PUSH
11540: LD_VAR 0 4
11544: MINUS
11545: ST_TO_ADDR
// if y - r < 0 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_VAR 0 4
11555: MINUS
11556: PUSH
11557: LD_INT 0
11559: LESS
11560: IFFALSE 11572
// min_y := 0 else
11562: LD_ADDR_VAR 0 8
11566: PUSH
11567: LD_INT 0
11569: ST_TO_ADDR
11570: GO 11588
// min_y := y - r ;
11572: LD_ADDR_VAR 0 8
11576: PUSH
11577: LD_VAR 0 3
11581: PUSH
11582: LD_VAR 0 4
11586: MINUS
11587: ST_TO_ADDR
// max_x := x + r ;
11588: LD_ADDR_VAR 0 9
11592: PUSH
11593: LD_VAR 0 2
11597: PUSH
11598: LD_VAR 0 4
11602: PLUS
11603: ST_TO_ADDR
// max_y := y + r ;
11604: LD_ADDR_VAR 0 10
11608: PUSH
11609: LD_VAR 0 3
11613: PUSH
11614: LD_VAR 0 4
11618: PLUS
11619: ST_TO_ADDR
// for _x = min_x to max_x do
11620: LD_ADDR_VAR 0 11
11624: PUSH
11625: DOUBLE
11626: LD_VAR 0 7
11630: DEC
11631: ST_TO_ADDR
11632: LD_VAR 0 9
11636: PUSH
11637: FOR_TO
11638: IFFALSE 11755
// for _y = min_y to max_y do
11640: LD_ADDR_VAR 0 12
11644: PUSH
11645: DOUBLE
11646: LD_VAR 0 8
11650: DEC
11651: ST_TO_ADDR
11652: LD_VAR 0 10
11656: PUSH
11657: FOR_TO
11658: IFFALSE 11751
// begin if not ValidHex ( _x , _y ) then
11660: LD_VAR 0 11
11664: PPUSH
11665: LD_VAR 0 12
11669: PPUSH
11670: CALL_OW 488
11674: NOT
11675: IFFALSE 11679
// continue ;
11677: GO 11657
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11679: LD_VAR 0 11
11683: PPUSH
11684: LD_VAR 0 12
11688: PPUSH
11689: CALL_OW 351
11693: PUSH
11694: LD_VAR 0 11
11698: PPUSH
11699: LD_VAR 0 12
11703: PPUSH
11704: CALL_OW 554
11708: AND
11709: IFFALSE 11749
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11711: LD_ADDR_VAR 0 13
11715: PUSH
11716: LD_VAR 0 13
11720: PPUSH
11721: LD_VAR 0 13
11725: PUSH
11726: LD_INT 1
11728: PLUS
11729: PPUSH
11730: LD_VAR 0 11
11734: PUSH
11735: LD_VAR 0 12
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 2
11748: ST_TO_ADDR
// end ;
11749: GO 11657
11751: POP
11752: POP
11753: GO 11637
11755: POP
11756: POP
// if not list then
11757: LD_VAR 0 13
11761: NOT
11762: IFFALSE 11766
// exit ;
11764: GO 11837
// for i in list do
11766: LD_ADDR_VAR 0 6
11770: PUSH
11771: LD_VAR 0 13
11775: PUSH
11776: FOR_IN
11777: IFFALSE 11835
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_STRING M
11786: PUSH
11787: LD_VAR 0 6
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: PUSH
11796: LD_VAR 0 6
11800: PUSH
11801: LD_INT 2
11803: ARRAY
11804: PUSH
11805: LD_INT 0
11807: PUSH
11808: LD_INT 0
11810: PUSH
11811: LD_INT 0
11813: PUSH
11814: LD_INT 0
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: PPUSH
11829: CALL_OW 447
11833: GO 11776
11835: POP
11836: POP
// end ;
11837: LD_VAR 0 5
11841: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11842: LD_EXP 26
11846: NOT
11847: IFFALSE 11897
11849: GO 11851
11851: DISABLE
// begin initHack := true ;
11852: LD_ADDR_EXP 26
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// hackTanks := [ ] ;
11860: LD_ADDR_EXP 27
11864: PUSH
11865: EMPTY
11866: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11867: LD_ADDR_EXP 28
11871: PUSH
11872: EMPTY
11873: ST_TO_ADDR
// hackLimit := 3 ;
11874: LD_ADDR_EXP 29
11878: PUSH
11879: LD_INT 3
11881: ST_TO_ADDR
// hackDist := 12 ;
11882: LD_ADDR_EXP 30
11886: PUSH
11887: LD_INT 12
11889: ST_TO_ADDR
// hackCounter := [ ] ;
11890: LD_ADDR_EXP 31
11894: PUSH
11895: EMPTY
11896: ST_TO_ADDR
// end ;
11897: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11898: LD_EXP 26
11902: PUSH
11903: LD_INT 34
11905: PUSH
11906: LD_INT 99
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: AND
11918: IFFALSE 12171
11920: GO 11922
11922: DISABLE
11923: LD_INT 0
11925: PPUSH
11926: PPUSH
// begin enable ;
11927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11928: LD_ADDR_VAR 0 1
11932: PUSH
11933: LD_INT 34
11935: PUSH
11936: LD_INT 99
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: PUSH
11948: FOR_IN
11949: IFFALSE 12169
// begin if not i in hackTanks then
11951: LD_VAR 0 1
11955: PUSH
11956: LD_EXP 27
11960: IN
11961: NOT
11962: IFFALSE 12045
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11964: LD_ADDR_EXP 27
11968: PUSH
11969: LD_EXP 27
11973: PPUSH
11974: LD_EXP 27
11978: PUSH
11979: LD_INT 1
11981: PLUS
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 1
11992: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11993: LD_ADDR_EXP 28
11997: PUSH
11998: LD_EXP 28
12002: PPUSH
12003: LD_EXP 28
12007: PUSH
12008: LD_INT 1
12010: PLUS
12011: PPUSH
12012: EMPTY
12013: PPUSH
12014: CALL_OW 1
12018: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12019: LD_ADDR_EXP 31
12023: PUSH
12024: LD_EXP 31
12028: PPUSH
12029: LD_EXP 31
12033: PUSH
12034: LD_INT 1
12036: PLUS
12037: PPUSH
12038: EMPTY
12039: PPUSH
12040: CALL_OW 1
12044: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 302
12054: NOT
12055: IFFALSE 12068
// begin HackUnlinkAll ( i ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL 12174 0 1
// continue ;
12066: GO 11948
// end ; HackCheckCapturedStatus ( i ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: CALL 12617 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12077: LD_ADDR_VAR 0 2
12081: PUSH
12082: LD_INT 81
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 255
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 33
12101: PUSH
12102: LD_INT 3
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 91
12111: PUSH
12112: LD_VAR 0 1
12116: PUSH
12117: LD_EXP 30
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 50
12129: PUSH
12130: EMPTY
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: ST_TO_ADDR
// if not tmp then
12144: LD_VAR 0 2
12148: NOT
12149: IFFALSE 12153
// continue ;
12151: GO 11948
// HackLink ( i , tmp ) ;
12153: LD_VAR 0 1
12157: PPUSH
12158: LD_VAR 0 2
12162: PPUSH
12163: CALL 12310 0 2
// end ;
12167: GO 11948
12169: POP
12170: POP
// end ;
12171: PPOPN 2
12173: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12174: LD_INT 0
12176: PPUSH
12177: PPUSH
12178: PPUSH
// if not hack in hackTanks then
12179: LD_VAR 0 1
12183: PUSH
12184: LD_EXP 27
12188: IN
12189: NOT
12190: IFFALSE 12194
// exit ;
12192: GO 12305
// index := GetElementIndex ( hackTanks , hack ) ;
12194: LD_ADDR_VAR 0 4
12198: PUSH
12199: LD_EXP 27
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL 35721 0 2
12213: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12214: LD_EXP 28
12218: PUSH
12219: LD_VAR 0 4
12223: ARRAY
12224: IFFALSE 12305
// begin for i in hackTanksCaptured [ index ] do
12226: LD_ADDR_VAR 0 3
12230: PUSH
12231: LD_EXP 28
12235: PUSH
12236: LD_VAR 0 4
12240: ARRAY
12241: PUSH
12242: FOR_IN
12243: IFFALSE 12269
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 1
12252: ARRAY
12253: PPUSH
12254: LD_VAR 0 3
12258: PUSH
12259: LD_INT 2
12261: ARRAY
12262: PPUSH
12263: CALL_OW 235
12267: GO 12242
12269: POP
12270: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12271: LD_ADDR_EXP 28
12275: PUSH
12276: LD_EXP 28
12280: PPUSH
12281: LD_VAR 0 4
12285: PPUSH
12286: EMPTY
12287: PPUSH
12288: CALL_OW 1
12292: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 505
// end ; end ;
12305: LD_VAR 0 2
12309: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12310: LD_INT 0
12312: PPUSH
12313: PPUSH
12314: PPUSH
// if not hack in hackTanks or not vehicles then
12315: LD_VAR 0 1
12319: PUSH
12320: LD_EXP 27
12324: IN
12325: NOT
12326: PUSH
12327: LD_VAR 0 2
12331: NOT
12332: OR
12333: IFFALSE 12337
// exit ;
12335: GO 12612
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: LD_INT 1
12357: PPUSH
12358: CALL 36371 0 4
12362: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: LD_EXP 27
12372: PPUSH
12373: LD_VAR 0 1
12377: PPUSH
12378: CALL 35721 0 2
12382: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12383: LD_EXP 28
12387: PUSH
12388: LD_VAR 0 5
12392: ARRAY
12393: PUSH
12394: LD_EXP 29
12398: LESS
12399: IFFALSE 12588
// begin for i := 1 to vehicles do
12401: LD_ADDR_VAR 0 4
12405: PUSH
12406: DOUBLE
12407: LD_INT 1
12409: DEC
12410: ST_TO_ADDR
12411: LD_VAR 0 2
12415: PUSH
12416: FOR_TO
12417: IFFALSE 12586
// begin if hackTanksCaptured [ index ] = hackLimit then
12419: LD_EXP 28
12423: PUSH
12424: LD_VAR 0 5
12428: ARRAY
12429: PUSH
12430: LD_EXP 29
12434: EQUAL
12435: IFFALSE 12439
// break ;
12437: GO 12586
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12439: LD_ADDR_EXP 31
12443: PUSH
12444: LD_EXP 31
12448: PPUSH
12449: LD_VAR 0 5
12453: PPUSH
12454: LD_EXP 31
12458: PUSH
12459: LD_VAR 0 5
12463: ARRAY
12464: PUSH
12465: LD_INT 1
12467: PLUS
12468: PPUSH
12469: CALL_OW 1
12473: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12474: LD_ADDR_EXP 28
12478: PUSH
12479: LD_EXP 28
12483: PPUSH
12484: LD_VAR 0 5
12488: PUSH
12489: LD_EXP 28
12493: PUSH
12494: LD_VAR 0 5
12498: ARRAY
12499: PUSH
12500: LD_INT 1
12502: PLUS
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: LD_VAR 0 2
12512: PUSH
12513: LD_VAR 0 4
12517: ARRAY
12518: PUSH
12519: LD_VAR 0 2
12523: PUSH
12524: LD_VAR 0 4
12528: ARRAY
12529: PPUSH
12530: CALL_OW 255
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL 35936 0 3
12543: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12544: LD_VAR 0 2
12548: PUSH
12549: LD_VAR 0 4
12553: ARRAY
12554: PPUSH
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 255
12564: PPUSH
12565: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12569: LD_VAR 0 2
12573: PUSH
12574: LD_VAR 0 4
12578: ARRAY
12579: PPUSH
12580: CALL_OW 141
// end ;
12584: GO 12416
12586: POP
12587: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12588: LD_VAR 0 1
12592: PPUSH
12593: LD_EXP 28
12597: PUSH
12598: LD_VAR 0 5
12602: ARRAY
12603: PUSH
12604: LD_INT 0
12606: PLUS
12607: PPUSH
12608: CALL_OW 505
// end ;
12612: LD_VAR 0 3
12616: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12617: LD_INT 0
12619: PPUSH
12620: PPUSH
12621: PPUSH
12622: PPUSH
// if not hack in hackTanks then
12623: LD_VAR 0 1
12627: PUSH
12628: LD_EXP 27
12632: IN
12633: NOT
12634: IFFALSE 12638
// exit ;
12636: GO 12878
// index := GetElementIndex ( hackTanks , hack ) ;
12638: LD_ADDR_VAR 0 4
12642: PUSH
12643: LD_EXP 27
12647: PPUSH
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL 35721 0 2
12657: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12658: LD_ADDR_VAR 0 3
12662: PUSH
12663: DOUBLE
12664: LD_EXP 28
12668: PUSH
12669: LD_VAR 0 4
12673: ARRAY
12674: INC
12675: ST_TO_ADDR
12676: LD_INT 1
12678: PUSH
12679: FOR_DOWNTO
12680: IFFALSE 12852
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_EXP 28
12691: PUSH
12692: LD_VAR 0 4
12696: ARRAY
12697: PUSH
12698: LD_VAR 0 3
12702: ARRAY
12703: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12704: LD_VAR 0 5
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PPUSH
12713: CALL_OW 302
12717: NOT
12718: PUSH
12719: LD_VAR 0 5
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PPUSH
12728: CALL_OW 255
12732: PUSH
12733: LD_VAR 0 1
12737: PPUSH
12738: CALL_OW 255
12742: NONEQUAL
12743: OR
12744: IFFALSE 12850
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12746: LD_VAR 0 5
12750: PUSH
12751: LD_INT 1
12753: ARRAY
12754: PPUSH
12755: CALL_OW 305
12759: PUSH
12760: LD_VAR 0 5
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 255
12773: PUSH
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 255
12783: EQUAL
12784: AND
12785: IFFALSE 12809
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12787: LD_VAR 0 5
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: LD_VAR 0 5
12800: PUSH
12801: LD_INT 2
12803: ARRAY
12804: PPUSH
12805: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12809: LD_ADDR_EXP 28
12813: PUSH
12814: LD_EXP 28
12818: PPUSH
12819: LD_VAR 0 4
12823: PPUSH
12824: LD_EXP 28
12828: PUSH
12829: LD_VAR 0 4
12833: ARRAY
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: CALL_OW 3
12844: PPUSH
12845: CALL_OW 1
12849: ST_TO_ADDR
// end ; end ;
12850: GO 12679
12852: POP
12853: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12854: LD_VAR 0 1
12858: PPUSH
12859: LD_EXP 28
12863: PUSH
12864: LD_VAR 0 4
12868: ARRAY
12869: PUSH
12870: LD_INT 0
12872: PLUS
12873: PPUSH
12874: CALL_OW 505
// end ;
12878: LD_VAR 0 2
12882: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12883: LD_INT 0
12885: PPUSH
12886: PPUSH
12887: PPUSH
12888: PPUSH
// if not hack in hackTanks then
12889: LD_VAR 0 1
12893: PUSH
12894: LD_EXP 27
12898: IN
12899: NOT
12900: IFFALSE 12904
// exit ;
12902: GO 12989
// index := GetElementIndex ( hackTanks , hack ) ;
12904: LD_ADDR_VAR 0 5
12908: PUSH
12909: LD_EXP 27
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL 35721 0 2
12923: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12924: LD_ADDR_VAR 0 4
12928: PUSH
12929: DOUBLE
12930: LD_INT 1
12932: DEC
12933: ST_TO_ADDR
12934: LD_EXP 28
12938: PUSH
12939: LD_VAR 0 5
12943: ARRAY
12944: PUSH
12945: FOR_TO
12946: IFFALSE 12987
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12948: LD_EXP 28
12952: PUSH
12953: LD_VAR 0 5
12957: ARRAY
12958: PUSH
12959: LD_VAR 0 4
12963: ARRAY
12964: PUSH
12965: LD_INT 1
12967: ARRAY
12968: PUSH
12969: LD_VAR 0 2
12973: EQUAL
12974: IFFALSE 12985
// KillUnit ( vehicle ) ;
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 66
12985: GO 12945
12987: POP
12988: POP
// end ;
12989: LD_VAR 0 3
12993: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12994: LD_EXP 32
12998: NOT
12999: IFFALSE 13034
13001: GO 13003
13003: DISABLE
// begin initMiner := true ;
13004: LD_ADDR_EXP 32
13008: PUSH
13009: LD_INT 1
13011: ST_TO_ADDR
// minersList := [ ] ;
13012: LD_ADDR_EXP 33
13016: PUSH
13017: EMPTY
13018: ST_TO_ADDR
// minerMinesList := [ ] ;
13019: LD_ADDR_EXP 34
13023: PUSH
13024: EMPTY
13025: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13026: LD_ADDR_EXP 35
13030: PUSH
13031: LD_INT 5
13033: ST_TO_ADDR
// end ;
13034: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13035: LD_EXP 32
13039: PUSH
13040: LD_INT 34
13042: PUSH
13043: LD_INT 81
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: AND
13055: IFFALSE 13516
13057: GO 13059
13059: DISABLE
13060: LD_INT 0
13062: PPUSH
13063: PPUSH
13064: PPUSH
13065: PPUSH
// begin enable ;
13066: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: LD_INT 34
13074: PUSH
13075: LD_INT 81
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: PUSH
13087: FOR_IN
13088: IFFALSE 13160
// begin if not i in minersList then
13090: LD_VAR 0 1
13094: PUSH
13095: LD_EXP 33
13099: IN
13100: NOT
13101: IFFALSE 13158
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13103: LD_ADDR_EXP 33
13107: PUSH
13108: LD_EXP 33
13112: PPUSH
13113: LD_EXP 33
13117: PUSH
13118: LD_INT 1
13120: PLUS
13121: PPUSH
13122: LD_VAR 0 1
13126: PPUSH
13127: CALL_OW 1
13131: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13132: LD_ADDR_EXP 34
13136: PUSH
13137: LD_EXP 34
13141: PPUSH
13142: LD_EXP 34
13146: PUSH
13147: LD_INT 1
13149: PLUS
13150: PPUSH
13151: EMPTY
13152: PPUSH
13153: CALL_OW 1
13157: ST_TO_ADDR
// end end ;
13158: GO 13087
13160: POP
13161: POP
// for i := minerMinesList downto 1 do
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: DOUBLE
13168: LD_EXP 34
13172: INC
13173: ST_TO_ADDR
13174: LD_INT 1
13176: PUSH
13177: FOR_DOWNTO
13178: IFFALSE 13514
// begin if IsLive ( minersList [ i ] ) then
13180: LD_EXP 33
13184: PUSH
13185: LD_VAR 0 1
13189: ARRAY
13190: PPUSH
13191: CALL_OW 300
13195: IFFALSE 13223
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13197: LD_EXP 33
13201: PUSH
13202: LD_VAR 0 1
13206: ARRAY
13207: PPUSH
13208: LD_EXP 34
13212: PUSH
13213: LD_VAR 0 1
13217: ARRAY
13218: PPUSH
13219: CALL_OW 505
// if not minerMinesList [ i ] then
13223: LD_EXP 34
13227: PUSH
13228: LD_VAR 0 1
13232: ARRAY
13233: NOT
13234: IFFALSE 13238
// continue ;
13236: GO 13177
// for j := minerMinesList [ i ] downto 1 do
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: DOUBLE
13244: LD_EXP 34
13248: PUSH
13249: LD_VAR 0 1
13253: ARRAY
13254: INC
13255: ST_TO_ADDR
13256: LD_INT 1
13258: PUSH
13259: FOR_DOWNTO
13260: IFFALSE 13510
// begin side := GetSide ( minersList [ i ] ) ;
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: LD_EXP 33
13271: PUSH
13272: LD_VAR 0 1
13276: ARRAY
13277: PPUSH
13278: CALL_OW 255
13282: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13283: LD_ADDR_VAR 0 4
13287: PUSH
13288: LD_EXP 34
13292: PUSH
13293: LD_VAR 0 1
13297: ARRAY
13298: PUSH
13299: LD_VAR 0 2
13303: ARRAY
13304: PUSH
13305: LD_INT 1
13307: ARRAY
13308: PPUSH
13309: LD_EXP 34
13313: PUSH
13314: LD_VAR 0 1
13318: ARRAY
13319: PUSH
13320: LD_VAR 0 2
13324: ARRAY
13325: PUSH
13326: LD_INT 2
13328: ARRAY
13329: PPUSH
13330: CALL_OW 428
13334: ST_TO_ADDR
// if not tmp then
13335: LD_VAR 0 4
13339: NOT
13340: IFFALSE 13344
// continue ;
13342: GO 13259
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13344: LD_VAR 0 4
13348: PUSH
13349: LD_INT 81
13351: PUSH
13352: LD_VAR 0 3
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: IN
13366: PUSH
13367: LD_EXP 34
13371: PUSH
13372: LD_VAR 0 1
13376: ARRAY
13377: PUSH
13378: LD_VAR 0 2
13382: ARRAY
13383: PUSH
13384: LD_INT 1
13386: ARRAY
13387: PPUSH
13388: LD_EXP 34
13392: PUSH
13393: LD_VAR 0 1
13397: ARRAY
13398: PUSH
13399: LD_VAR 0 2
13403: ARRAY
13404: PUSH
13405: LD_INT 2
13407: ARRAY
13408: PPUSH
13409: CALL_OW 458
13413: AND
13414: IFFALSE 13508
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13416: LD_EXP 34
13420: PUSH
13421: LD_VAR 0 1
13425: ARRAY
13426: PUSH
13427: LD_VAR 0 2
13431: ARRAY
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: LD_EXP 34
13441: PUSH
13442: LD_VAR 0 1
13446: ARRAY
13447: PUSH
13448: LD_VAR 0 2
13452: ARRAY
13453: PUSH
13454: LD_INT 2
13456: ARRAY
13457: PPUSH
13458: LD_VAR 0 3
13462: PPUSH
13463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13467: LD_ADDR_EXP 34
13471: PUSH
13472: LD_EXP 34
13476: PPUSH
13477: LD_VAR 0 1
13481: PPUSH
13482: LD_EXP 34
13486: PUSH
13487: LD_VAR 0 1
13491: ARRAY
13492: PPUSH
13493: LD_VAR 0 2
13497: PPUSH
13498: CALL_OW 3
13502: PPUSH
13503: CALL_OW 1
13507: ST_TO_ADDR
// end ; end ;
13508: GO 13259
13510: POP
13511: POP
// end ;
13512: GO 13177
13514: POP
13515: POP
// end ;
13516: PPOPN 4
13518: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13519: LD_INT 0
13521: PPUSH
13522: PPUSH
// result := false ;
13523: LD_ADDR_VAR 0 4
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 264
13540: PUSH
13541: LD_INT 81
13543: EQUAL
13544: NOT
13545: IFFALSE 13549
// exit ;
13547: GO 13789
// index := GetElementIndex ( minersList , unit ) ;
13549: LD_ADDR_VAR 0 5
13553: PUSH
13554: LD_EXP 33
13558: PPUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL 35721 0 2
13568: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13569: LD_EXP 34
13573: PUSH
13574: LD_VAR 0 5
13578: ARRAY
13579: PUSH
13580: LD_EXP 35
13584: GREATEREQUAL
13585: IFFALSE 13589
// exit ;
13587: GO 13789
// ComMoveXY ( unit , x , y ) ;
13589: LD_VAR 0 1
13593: PPUSH
13594: LD_VAR 0 2
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13608: LD_INT 35
13610: PPUSH
13611: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13615: LD_VAR 0 1
13619: PPUSH
13620: LD_VAR 0 2
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: CALL 67076 0 3
13634: NOT
13635: PUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 314
13645: AND
13646: IFFALSE 13650
// exit ;
13648: GO 13789
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13650: LD_VAR 0 2
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: CALL_OW 428
13664: PUSH
13665: LD_VAR 0 1
13669: EQUAL
13670: PUSH
13671: LD_VAR 0 1
13675: PPUSH
13676: CALL_OW 314
13680: NOT
13681: AND
13682: IFFALSE 13608
// PlaySoundXY ( x , y , PlantMine ) ;
13684: LD_VAR 0 2
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: LD_STRING PlantMine
13696: PPUSH
13697: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13701: LD_VAR 0 2
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_VAR 0 1
13715: PPUSH
13716: CALL_OW 255
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13728: LD_ADDR_EXP 34
13732: PUSH
13733: LD_EXP 34
13737: PPUSH
13738: LD_VAR 0 5
13742: PUSH
13743: LD_EXP 34
13747: PUSH
13748: LD_VAR 0 5
13752: ARRAY
13753: PUSH
13754: LD_INT 1
13756: PLUS
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PPUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_VAR 0 3
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL 35936 0 3
13780: ST_TO_ADDR
// result := true ;
13781: LD_ADDR_VAR 0 4
13785: PUSH
13786: LD_INT 1
13788: ST_TO_ADDR
// end ;
13789: LD_VAR 0 4
13793: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13794: LD_INT 0
13796: PPUSH
13797: PPUSH
13798: PPUSH
// if not unit in minersList then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_EXP 33
13808: IN
13809: NOT
13810: IFFALSE 13814
// exit ;
13812: GO 14206
// index := GetElementIndex ( minersList , unit ) ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_EXP 33
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL 35721 0 2
13833: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13834: LD_ADDR_VAR 0 5
13838: PUSH
13839: DOUBLE
13840: LD_EXP 34
13844: PUSH
13845: LD_VAR 0 6
13849: ARRAY
13850: INC
13851: ST_TO_ADDR
13852: LD_INT 1
13854: PUSH
13855: FOR_DOWNTO
13856: IFFALSE 14017
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13858: LD_EXP 34
13862: PUSH
13863: LD_VAR 0 6
13867: ARRAY
13868: PUSH
13869: LD_VAR 0 5
13873: ARRAY
13874: PUSH
13875: LD_INT 1
13877: ARRAY
13878: PUSH
13879: LD_VAR 0 2
13883: EQUAL
13884: PUSH
13885: LD_EXP 34
13889: PUSH
13890: LD_VAR 0 6
13894: ARRAY
13895: PUSH
13896: LD_VAR 0 5
13900: ARRAY
13901: PUSH
13902: LD_INT 2
13904: ARRAY
13905: PUSH
13906: LD_VAR 0 3
13910: EQUAL
13911: AND
13912: IFFALSE 14015
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13914: LD_EXP 34
13918: PUSH
13919: LD_VAR 0 6
13923: ARRAY
13924: PUSH
13925: LD_VAR 0 5
13929: ARRAY
13930: PUSH
13931: LD_INT 1
13933: ARRAY
13934: PPUSH
13935: LD_EXP 34
13939: PUSH
13940: LD_VAR 0 6
13944: ARRAY
13945: PUSH
13946: LD_VAR 0 5
13950: ARRAY
13951: PUSH
13952: LD_INT 2
13954: ARRAY
13955: PPUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 255
13965: PPUSH
13966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13970: LD_ADDR_EXP 34
13974: PUSH
13975: LD_EXP 34
13979: PPUSH
13980: LD_VAR 0 6
13984: PPUSH
13985: LD_EXP 34
13989: PUSH
13990: LD_VAR 0 6
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 5
14000: PPUSH
14001: CALL_OW 3
14005: PPUSH
14006: CALL_OW 1
14010: ST_TO_ADDR
// exit ;
14011: POP
14012: POP
14013: GO 14206
// end ; end ;
14015: GO 13855
14017: POP
14018: POP
// for i := minerMinesList [ index ] downto 1 do
14019: LD_ADDR_VAR 0 5
14023: PUSH
14024: DOUBLE
14025: LD_EXP 34
14029: PUSH
14030: LD_VAR 0 6
14034: ARRAY
14035: INC
14036: ST_TO_ADDR
14037: LD_INT 1
14039: PUSH
14040: FOR_DOWNTO
14041: IFFALSE 14204
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14043: LD_EXP 34
14047: PUSH
14048: LD_VAR 0 6
14052: ARRAY
14053: PUSH
14054: LD_VAR 0 5
14058: ARRAY
14059: PUSH
14060: LD_INT 1
14062: ARRAY
14063: PPUSH
14064: LD_EXP 34
14068: PUSH
14069: LD_VAR 0 6
14073: ARRAY
14074: PUSH
14075: LD_VAR 0 5
14079: ARRAY
14080: PUSH
14081: LD_INT 2
14083: ARRAY
14084: PPUSH
14085: LD_VAR 0 2
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: CALL_OW 298
14099: PUSH
14100: LD_INT 6
14102: LESS
14103: IFFALSE 14202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14105: LD_EXP 34
14109: PUSH
14110: LD_VAR 0 6
14114: ARRAY
14115: PUSH
14116: LD_VAR 0 5
14120: ARRAY
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_EXP 34
14130: PUSH
14131: LD_VAR 0 6
14135: ARRAY
14136: PUSH
14137: LD_VAR 0 5
14141: ARRAY
14142: PUSH
14143: LD_INT 2
14145: ARRAY
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 255
14156: PPUSH
14157: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14161: LD_ADDR_EXP 34
14165: PUSH
14166: LD_EXP 34
14170: PPUSH
14171: LD_VAR 0 6
14175: PPUSH
14176: LD_EXP 34
14180: PUSH
14181: LD_VAR 0 6
14185: ARRAY
14186: PPUSH
14187: LD_VAR 0 5
14191: PPUSH
14192: CALL_OW 3
14196: PPUSH
14197: CALL_OW 1
14201: ST_TO_ADDR
// end ; end ;
14202: GO 14040
14204: POP
14205: POP
// end ;
14206: LD_VAR 0 4
14210: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14211: LD_INT 0
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
14221: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 264
14231: PUSH
14232: LD_INT 81
14234: EQUAL
14235: NOT
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_EXP 33
14246: IN
14247: NOT
14248: OR
14249: IFFALSE 14253
// exit ;
14251: GO 14575
// index := GetElementIndex ( minersList , unit ) ;
14253: LD_ADDR_VAR 0 6
14257: PUSH
14258: LD_EXP 33
14262: PPUSH
14263: LD_VAR 0 1
14267: PPUSH
14268: CALL 35721 0 2
14272: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14273: LD_ADDR_VAR 0 8
14277: PUSH
14278: LD_EXP 35
14282: PUSH
14283: LD_EXP 34
14287: PUSH
14288: LD_VAR 0 6
14292: ARRAY
14293: MINUS
14294: ST_TO_ADDR
// if not minesFreeAmount then
14295: LD_VAR 0 8
14299: NOT
14300: IFFALSE 14304
// exit ;
14302: GO 14575
// tmp := [ ] ;
14304: LD_ADDR_VAR 0 7
14308: PUSH
14309: EMPTY
14310: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14311: LD_ADDR_VAR 0 5
14315: PUSH
14316: DOUBLE
14317: LD_INT 1
14319: DEC
14320: ST_TO_ADDR
14321: LD_VAR 0 8
14325: PUSH
14326: FOR_TO
14327: IFFALSE 14522
// begin _d := rand ( 0 , 5 ) ;
14329: LD_ADDR_VAR 0 11
14333: PUSH
14334: LD_INT 0
14336: PPUSH
14337: LD_INT 5
14339: PPUSH
14340: CALL_OW 12
14344: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14345: LD_ADDR_VAR 0 12
14349: PUSH
14350: LD_INT 2
14352: PPUSH
14353: LD_INT 6
14355: PPUSH
14356: CALL_OW 12
14360: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14361: LD_ADDR_VAR 0 9
14365: PUSH
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_VAR 0 11
14375: PPUSH
14376: LD_VAR 0 12
14380: PPUSH
14381: CALL_OW 272
14385: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14386: LD_ADDR_VAR 0 10
14390: PUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_VAR 0 11
14400: PPUSH
14401: LD_VAR 0 12
14405: PPUSH
14406: CALL_OW 273
14410: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14411: LD_VAR 0 9
14415: PPUSH
14416: LD_VAR 0 10
14420: PPUSH
14421: CALL_OW 488
14425: PUSH
14426: LD_VAR 0 9
14430: PUSH
14431: LD_VAR 0 10
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_VAR 0 7
14444: IN
14445: NOT
14446: AND
14447: PUSH
14448: LD_VAR 0 9
14452: PPUSH
14453: LD_VAR 0 10
14457: PPUSH
14458: CALL_OW 458
14462: NOT
14463: AND
14464: IFFALSE 14506
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14466: LD_ADDR_VAR 0 7
14470: PUSH
14471: LD_VAR 0 7
14475: PPUSH
14476: LD_VAR 0 7
14480: PUSH
14481: LD_INT 1
14483: PLUS
14484: PPUSH
14485: LD_VAR 0 9
14489: PUSH
14490: LD_VAR 0 10
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PPUSH
14499: CALL_OW 1
14503: ST_TO_ADDR
14504: GO 14520
// i := i - 1 ;
14506: LD_ADDR_VAR 0 5
14510: PUSH
14511: LD_VAR 0 5
14515: PUSH
14516: LD_INT 1
14518: MINUS
14519: ST_TO_ADDR
// end ;
14520: GO 14326
14522: POP
14523: POP
// for i in tmp do
14524: LD_ADDR_VAR 0 5
14528: PUSH
14529: LD_VAR 0 7
14533: PUSH
14534: FOR_IN
14535: IFFALSE 14573
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_VAR 0 5
14546: PUSH
14547: LD_INT 1
14549: ARRAY
14550: PPUSH
14551: LD_VAR 0 5
14555: PUSH
14556: LD_INT 2
14558: ARRAY
14559: PPUSH
14560: CALL 13519 0 3
14564: NOT
14565: IFFALSE 14571
// exit ;
14567: POP
14568: POP
14569: GO 14575
14571: GO 14534
14573: POP
14574: POP
// end ;
14575: LD_VAR 0 4
14579: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
// if not GetClass ( unit ) = class_sniper then
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 257
14598: PUSH
14599: LD_INT 5
14601: EQUAL
14602: NOT
14603: IFFALSE 14607
// exit ;
14605: GO 14995
// dist := 8 ;
14607: LD_ADDR_VAR 0 5
14611: PUSH
14612: LD_INT 8
14614: ST_TO_ADDR
// viewRange := 12 ;
14615: LD_ADDR_VAR 0 7
14619: PUSH
14620: LD_INT 12
14622: ST_TO_ADDR
// side := GetSide ( unit ) ;
14623: LD_ADDR_VAR 0 6
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14638: LD_INT 61
14640: PPUSH
14641: LD_VAR 0 6
14645: PPUSH
14646: CALL_OW 321
14650: PUSH
14651: LD_INT 2
14653: EQUAL
14654: IFFALSE 14664
// viewRange := 16 ;
14656: LD_ADDR_VAR 0 7
14660: PUSH
14661: LD_INT 16
14663: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_VAR 0 2
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: CALL_OW 297
14683: PUSH
14684: LD_VAR 0 5
14688: GREATER
14689: IFFALSE 14768
// begin ComMoveXY ( unit , x , y ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14710: LD_INT 35
14712: PPUSH
14713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14717: LD_VAR 0 1
14721: PPUSH
14722: LD_VAR 0 2
14726: PPUSH
14727: LD_VAR 0 3
14731: PPUSH
14732: CALL 67076 0 3
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 14995
// until GetDistUnitXY ( unit , x , y ) < dist ;
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: CALL_OW 297
14760: PUSH
14761: LD_VAR 0 5
14765: LESS
14766: IFFALSE 14710
// end ; ComTurnXY ( unit , x , y ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_VAR 0 2
14777: PPUSH
14778: LD_VAR 0 3
14782: PPUSH
14783: CALL_OW 118
// wait ( 5 ) ;
14787: LD_INT 5
14789: PPUSH
14790: CALL_OW 67
// _d := GetDir ( unit ) ;
14794: LD_ADDR_VAR 0 10
14798: PUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 254
14808: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14809: LD_ADDR_VAR 0 8
14813: PUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 250
14823: PPUSH
14824: LD_VAR 0 10
14828: PPUSH
14829: LD_VAR 0 5
14833: PPUSH
14834: CALL_OW 272
14838: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14839: LD_ADDR_VAR 0 9
14843: PUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 251
14853: PPUSH
14854: LD_VAR 0 10
14858: PPUSH
14859: LD_VAR 0 5
14863: PPUSH
14864: CALL_OW 273
14868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14869: LD_VAR 0 8
14873: PPUSH
14874: LD_VAR 0 9
14878: PPUSH
14879: CALL_OW 488
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 14995
// ComAnimCustom ( unit , 1 ) ;
14888: LD_VAR 0 1
14892: PPUSH
14893: LD_INT 1
14895: PPUSH
14896: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14900: LD_VAR 0 8
14904: PPUSH
14905: LD_VAR 0 9
14909: PPUSH
14910: LD_VAR 0 6
14914: PPUSH
14915: LD_VAR 0 7
14919: PPUSH
14920: CALL_OW 330
// repeat wait ( 1 ) ;
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14931: LD_VAR 0 1
14935: PPUSH
14936: CALL_OW 316
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 314
14950: OR
14951: PUSH
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 302
14961: NOT
14962: OR
14963: PUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 301
14973: OR
14974: IFFALSE 14924
// RemoveSeeing ( _x , _y , side ) ;
14976: LD_VAR 0 8
14980: PPUSH
14981: LD_VAR 0 9
14985: PPUSH
14986: LD_VAR 0 6
14990: PPUSH
14991: CALL_OW 331
// end ; end_of_file
14995: LD_VAR 0 4
14999: RET
// every 0 0$1 do
15000: GO 15002
15002: DISABLE
// begin enable ;
15003: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15004: LD_STRING updateTimer(
15006: PUSH
15007: LD_OWVAR 1
15011: STR
15012: PUSH
15013: LD_STRING );
15015: STR
15016: PPUSH
15017: CALL_OW 559
// end ;
15021: END
// export function SOS_MapStart ( ) ; begin
15022: LD_INT 0
15024: PPUSH
// if streamModeActive then
15025: LD_EXP 37
15029: IFFALSE 15038
// DefineStreamItems ( true ) ;
15031: LD_INT 1
15033: PPUSH
15034: CALL 16842 0 1
// UpdateLuaVariables ( ) ;
15038: CALL 15055 0 0
// UpdateFactoryWaypoints ( ) ;
15042: CALL 29703 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15046: CALL 29960 0 0
// end ;
15050: LD_VAR 0 1
15054: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
15055: LD_INT 0
15057: PPUSH
// if not globalGameSaveCounter then
15058: LD_EXP 36
15062: NOT
15063: IFFALSE 15074
// ToLua ( setGameSaveCounter(0) ) else
15065: LD_STRING setGameSaveCounter(0)
15067: PPUSH
15068: CALL_OW 559
15072: GO 15106
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15074: LD_ADDR_EXP 36
15078: PUSH
15079: LD_EXP 36
15083: PPUSH
15084: CALL 69628 0 1
15088: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15089: LD_STRING setGameSaveCounter(
15091: PUSH
15092: LD_EXP 36
15096: STR
15097: PUSH
15098: LD_STRING )
15100: STR
15101: PPUSH
15102: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15106: LD_STRING setGameDifficulty(
15108: PUSH
15109: LD_OWVAR 67
15113: STR
15114: PUSH
15115: LD_STRING )
15117: STR
15118: PPUSH
15119: CALL_OW 559
// end ;
15123: LD_VAR 0 1
15127: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15128: LD_INT 0
15130: PPUSH
// if p2 = stream_mode then
15131: LD_VAR 0 2
15135: PUSH
15136: LD_INT 100
15138: EQUAL
15139: IFFALSE 16142
// begin if not StreamModeActive then
15141: LD_EXP 37
15145: NOT
15146: IFFALSE 15156
// StreamModeActive := true ;
15148: LD_ADDR_EXP 37
15152: PUSH
15153: LD_INT 1
15155: ST_TO_ADDR
// if p3 = 0 then
15156: LD_VAR 0 3
15160: PUSH
15161: LD_INT 0
15163: EQUAL
15164: IFFALSE 15170
// InitStreamMode ;
15166: CALL 16378 0 0
// if p3 = 1 then
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 1
15177: EQUAL
15178: IFFALSE 15188
// sRocket := true ;
15180: LD_ADDR_EXP 42
15184: PUSH
15185: LD_INT 1
15187: ST_TO_ADDR
// if p3 = 2 then
15188: LD_VAR 0 3
15192: PUSH
15193: LD_INT 2
15195: EQUAL
15196: IFFALSE 15206
// sSpeed := true ;
15198: LD_ADDR_EXP 41
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// if p3 = 3 then
15206: LD_VAR 0 3
15210: PUSH
15211: LD_INT 3
15213: EQUAL
15214: IFFALSE 15224
// sEngine := true ;
15216: LD_ADDR_EXP 43
15220: PUSH
15221: LD_INT 1
15223: ST_TO_ADDR
// if p3 = 4 then
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 4
15231: EQUAL
15232: IFFALSE 15242
// sSpec := true ;
15234: LD_ADDR_EXP 40
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// if p3 = 5 then
15242: LD_VAR 0 3
15246: PUSH
15247: LD_INT 5
15249: EQUAL
15250: IFFALSE 15260
// sLevel := true ;
15252: LD_ADDR_EXP 44
15256: PUSH
15257: LD_INT 1
15259: ST_TO_ADDR
// if p3 = 6 then
15260: LD_VAR 0 3
15264: PUSH
15265: LD_INT 6
15267: EQUAL
15268: IFFALSE 15278
// sArmoury := true ;
15270: LD_ADDR_EXP 45
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// if p3 = 7 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_INT 7
15285: EQUAL
15286: IFFALSE 15296
// sRadar := true ;
15288: LD_ADDR_EXP 46
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// if p3 = 8 then
15296: LD_VAR 0 3
15300: PUSH
15301: LD_INT 8
15303: EQUAL
15304: IFFALSE 15314
// sBunker := true ;
15306: LD_ADDR_EXP 47
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if p3 = 9 then
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 9
15321: EQUAL
15322: IFFALSE 15332
// sHack := true ;
15324: LD_ADDR_EXP 48
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// if p3 = 10 then
15332: LD_VAR 0 3
15336: PUSH
15337: LD_INT 10
15339: EQUAL
15340: IFFALSE 15350
// sFire := true ;
15342: LD_ADDR_EXP 49
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// if p3 = 11 then
15350: LD_VAR 0 3
15354: PUSH
15355: LD_INT 11
15357: EQUAL
15358: IFFALSE 15368
// sRefresh := true ;
15360: LD_ADDR_EXP 50
15364: PUSH
15365: LD_INT 1
15367: ST_TO_ADDR
// if p3 = 12 then
15368: LD_VAR 0 3
15372: PUSH
15373: LD_INT 12
15375: EQUAL
15376: IFFALSE 15386
// sExp := true ;
15378: LD_ADDR_EXP 51
15382: PUSH
15383: LD_INT 1
15385: ST_TO_ADDR
// if p3 = 13 then
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 13
15393: EQUAL
15394: IFFALSE 15404
// sDepot := true ;
15396: LD_ADDR_EXP 52
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// if p3 = 14 then
15404: LD_VAR 0 3
15408: PUSH
15409: LD_INT 14
15411: EQUAL
15412: IFFALSE 15422
// sFlag := true ;
15414: LD_ADDR_EXP 53
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// if p3 = 15 then
15422: LD_VAR 0 3
15426: PUSH
15427: LD_INT 15
15429: EQUAL
15430: IFFALSE 15440
// sKamikadze := true ;
15432: LD_ADDR_EXP 61
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// if p3 = 16 then
15440: LD_VAR 0 3
15444: PUSH
15445: LD_INT 16
15447: EQUAL
15448: IFFALSE 15458
// sTroll := true ;
15450: LD_ADDR_EXP 62
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// if p3 = 17 then
15458: LD_VAR 0 3
15462: PUSH
15463: LD_INT 17
15465: EQUAL
15466: IFFALSE 15476
// sSlow := true ;
15468: LD_ADDR_EXP 63
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// if p3 = 18 then
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 18
15483: EQUAL
15484: IFFALSE 15494
// sLack := true ;
15486: LD_ADDR_EXP 64
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if p3 = 19 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 19
15501: EQUAL
15502: IFFALSE 15512
// sTank := true ;
15504: LD_ADDR_EXP 66
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 20 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 20
15519: EQUAL
15520: IFFALSE 15530
// sRemote := true ;
15522: LD_ADDR_EXP 67
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 21 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 21
15537: EQUAL
15538: IFFALSE 15548
// sPowell := true ;
15540: LD_ADDR_EXP 68
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 22 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 22
15555: EQUAL
15556: IFFALSE 15566
// sTeleport := true ;
15558: LD_ADDR_EXP 71
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 23 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 23
15573: EQUAL
15574: IFFALSE 15584
// sOilTower := true ;
15576: LD_ADDR_EXP 73
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 24 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 24
15591: EQUAL
15592: IFFALSE 15602
// sShovel := true ;
15594: LD_ADDR_EXP 74
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 25 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 25
15609: EQUAL
15610: IFFALSE 15620
// sSheik := true ;
15612: LD_ADDR_EXP 75
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 26 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 26
15627: EQUAL
15628: IFFALSE 15638
// sEarthquake := true ;
15630: LD_ADDR_EXP 77
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 27 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 27
15645: EQUAL
15646: IFFALSE 15656
// sAI := true ;
15648: LD_ADDR_EXP 78
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 28 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 28
15663: EQUAL
15664: IFFALSE 15674
// sCargo := true ;
15666: LD_ADDR_EXP 81
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 29 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 29
15681: EQUAL
15682: IFFALSE 15692
// sDLaser := true ;
15684: LD_ADDR_EXP 82
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 30 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 30
15699: EQUAL
15700: IFFALSE 15710
// sExchange := true ;
15702: LD_ADDR_EXP 83
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 31 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 31
15717: EQUAL
15718: IFFALSE 15728
// sFac := true ;
15720: LD_ADDR_EXP 84
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 32 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 32
15735: EQUAL
15736: IFFALSE 15746
// sPower := true ;
15738: LD_ADDR_EXP 85
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 33 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 33
15753: EQUAL
15754: IFFALSE 15764
// sRandom := true ;
15756: LD_ADDR_EXP 86
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 34 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 34
15771: EQUAL
15772: IFFALSE 15782
// sShield := true ;
15774: LD_ADDR_EXP 87
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 35 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 35
15789: EQUAL
15790: IFFALSE 15800
// sTime := true ;
15792: LD_ADDR_EXP 88
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 36 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 36
15807: EQUAL
15808: IFFALSE 15818
// sTools := true ;
15810: LD_ADDR_EXP 89
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 101 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 101
15825: EQUAL
15826: IFFALSE 15836
// sSold := true ;
15828: LD_ADDR_EXP 54
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 102 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 102
15843: EQUAL
15844: IFFALSE 15854
// sDiff := true ;
15846: LD_ADDR_EXP 55
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 103 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 103
15861: EQUAL
15862: IFFALSE 15872
// sFog := true ;
15864: LD_ADDR_EXP 58
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 104 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 104
15879: EQUAL
15880: IFFALSE 15890
// sReset := true ;
15882: LD_ADDR_EXP 59
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 105 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 105
15897: EQUAL
15898: IFFALSE 15908
// sSun := true ;
15900: LD_ADDR_EXP 60
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 106 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 106
15915: EQUAL
15916: IFFALSE 15926
// sTiger := true ;
15918: LD_ADDR_EXP 56
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if p3 = 107 then
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 107
15933: EQUAL
15934: IFFALSE 15944
// sBomb := true ;
15936: LD_ADDR_EXP 57
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if p3 = 108 then
15944: LD_VAR 0 3
15948: PUSH
15949: LD_INT 108
15951: EQUAL
15952: IFFALSE 15962
// sWound := true ;
15954: LD_ADDR_EXP 65
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// if p3 = 109 then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 109
15969: EQUAL
15970: IFFALSE 15980
// sBetray := true ;
15972: LD_ADDR_EXP 69
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// if p3 = 110 then
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 110
15987: EQUAL
15988: IFFALSE 15998
// sContamin := true ;
15990: LD_ADDR_EXP 70
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if p3 = 111 then
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 111
16005: EQUAL
16006: IFFALSE 16016
// sOil := true ;
16008: LD_ADDR_EXP 72
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if p3 = 112 then
16016: LD_VAR 0 3
16020: PUSH
16021: LD_INT 112
16023: EQUAL
16024: IFFALSE 16034
// sStu := true ;
16026: LD_ADDR_EXP 76
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// if p3 = 113 then
16034: LD_VAR 0 3
16038: PUSH
16039: LD_INT 113
16041: EQUAL
16042: IFFALSE 16052
// sBazooka := true ;
16044: LD_ADDR_EXP 79
16048: PUSH
16049: LD_INT 1
16051: ST_TO_ADDR
// if p3 = 114 then
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 114
16059: EQUAL
16060: IFFALSE 16070
// sMortar := true ;
16062: LD_ADDR_EXP 80
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// if p3 = 115 then
16070: LD_VAR 0 3
16074: PUSH
16075: LD_INT 115
16077: EQUAL
16078: IFFALSE 16088
// sRanger := true ;
16080: LD_ADDR_EXP 90
16084: PUSH
16085: LD_INT 1
16087: ST_TO_ADDR
// if p3 = 116 then
16088: LD_VAR 0 3
16092: PUSH
16093: LD_INT 116
16095: EQUAL
16096: IFFALSE 16106
// sComputer := true ;
16098: LD_ADDR_EXP 91
16102: PUSH
16103: LD_INT 1
16105: ST_TO_ADDR
// if p3 = 117 then
16106: LD_VAR 0 3
16110: PUSH
16111: LD_INT 117
16113: EQUAL
16114: IFFALSE 16124
// s30 := true ;
16116: LD_ADDR_EXP 92
16120: PUSH
16121: LD_INT 1
16123: ST_TO_ADDR
// if p3 = 118 then
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 118
16131: EQUAL
16132: IFFALSE 16142
// s60 := true ;
16134: LD_ADDR_EXP 93
16138: PUSH
16139: LD_INT 1
16141: ST_TO_ADDR
// end ; if p2 = hack_mode then
16142: LD_VAR 0 2
16146: PUSH
16147: LD_INT 101
16149: EQUAL
16150: IFFALSE 16278
// begin case p3 of 1 :
16152: LD_VAR 0 3
16156: PUSH
16157: LD_INT 1
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16165
16163: GO 16172
16165: POP
// hHackUnlimitedResources ; 2 :
16166: CALL 28449 0 0
16170: GO 16278
16172: LD_INT 2
16174: DOUBLE
16175: EQUAL
16176: IFTRUE 16180
16178: GO 16187
16180: POP
// hHackSetLevel10 ; 3 :
16181: CALL 28582 0 0
16185: GO 16278
16187: LD_INT 3
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16202
16195: POP
// hHackSetLevel10YourUnits ; 4 :
16196: CALL 28667 0 0
16200: GO 16278
16202: LD_INT 4
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16217
16210: POP
// hHackInvincible ; 5 :
16211: CALL 29115 0 0
16215: GO 16278
16217: LD_INT 5
16219: DOUBLE
16220: EQUAL
16221: IFTRUE 16225
16223: GO 16232
16225: POP
// hHackInvisible ; 6 :
16226: CALL 29226 0 0
16230: GO 16278
16232: LD_INT 6
16234: DOUBLE
16235: EQUAL
16236: IFTRUE 16240
16238: GO 16247
16240: POP
// hHackChangeYourSide ; 7 :
16241: CALL 29283 0 0
16245: GO 16278
16247: LD_INT 7
16249: DOUBLE
16250: EQUAL
16251: IFTRUE 16255
16253: GO 16262
16255: POP
// hHackChangeUnitSide ; 8 :
16256: CALL 29325 0 0
16260: GO 16278
16262: LD_INT 8
16264: DOUBLE
16265: EQUAL
16266: IFTRUE 16270
16268: GO 16277
16270: POP
// hHackFog ; end ;
16271: CALL 29426 0 0
16275: GO 16278
16277: POP
// end ; if p2 = game_save_mode then
16278: LD_VAR 0 2
16282: PUSH
16283: LD_INT 102
16285: EQUAL
16286: IFFALSE 16351
// begin if p3 = 1 then
16288: LD_VAR 0 3
16292: PUSH
16293: LD_INT 1
16295: EQUAL
16296: IFFALSE 16308
// globalGameSaveCounter := p4 ;
16298: LD_ADDR_EXP 36
16302: PUSH
16303: LD_VAR 0 4
16307: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16308: LD_VAR 0 3
16312: PUSH
16313: LD_INT 2
16315: EQUAL
16316: PUSH
16317: LD_EXP 36
16321: AND
16322: IFFALSE 16341
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16324: LD_STRING setGameSaveCounter(
16326: PUSH
16327: LD_EXP 36
16331: STR
16332: PUSH
16333: LD_STRING )
16335: STR
16336: PPUSH
16337: CALL_OW 559
// display_strings := globalGameSaveCounter ;
16341: LD_ADDR_OWVAR 47
16345: PUSH
16346: LD_EXP 36
16350: ST_TO_ADDR
// end ; end ;
16351: LD_VAR 0 7
16355: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16356: GO 16358
16358: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16359: LD_STRING initStreamRollete();
16361: PPUSH
16362: CALL_OW 559
// InitStreamMode ;
16366: CALL 16378 0 0
// DefineStreamItems ( false ) ;
16370: LD_INT 0
16372: PPUSH
16373: CALL 16842 0 1
// end ;
16377: END
// function InitStreamMode ; begin
16378: LD_INT 0
16380: PPUSH
// streamModeActive := false ;
16381: LD_ADDR_EXP 37
16385: PUSH
16386: LD_INT 0
16388: ST_TO_ADDR
// normalCounter := 36 ;
16389: LD_ADDR_EXP 38
16393: PUSH
16394: LD_INT 36
16396: ST_TO_ADDR
// hardcoreCounter := 18 ;
16397: LD_ADDR_EXP 39
16401: PUSH
16402: LD_INT 18
16404: ST_TO_ADDR
// sRocket := false ;
16405: LD_ADDR_EXP 42
16409: PUSH
16410: LD_INT 0
16412: ST_TO_ADDR
// sSpeed := false ;
16413: LD_ADDR_EXP 41
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
// sEngine := false ;
16421: LD_ADDR_EXP 43
16425: PUSH
16426: LD_INT 0
16428: ST_TO_ADDR
// sSpec := false ;
16429: LD_ADDR_EXP 40
16433: PUSH
16434: LD_INT 0
16436: ST_TO_ADDR
// sLevel := false ;
16437: LD_ADDR_EXP 44
16441: PUSH
16442: LD_INT 0
16444: ST_TO_ADDR
// sArmoury := false ;
16445: LD_ADDR_EXP 45
16449: PUSH
16450: LD_INT 0
16452: ST_TO_ADDR
// sRadar := false ;
16453: LD_ADDR_EXP 46
16457: PUSH
16458: LD_INT 0
16460: ST_TO_ADDR
// sBunker := false ;
16461: LD_ADDR_EXP 47
16465: PUSH
16466: LD_INT 0
16468: ST_TO_ADDR
// sHack := false ;
16469: LD_ADDR_EXP 48
16473: PUSH
16474: LD_INT 0
16476: ST_TO_ADDR
// sFire := false ;
16477: LD_ADDR_EXP 49
16481: PUSH
16482: LD_INT 0
16484: ST_TO_ADDR
// sRefresh := false ;
16485: LD_ADDR_EXP 50
16489: PUSH
16490: LD_INT 0
16492: ST_TO_ADDR
// sExp := false ;
16493: LD_ADDR_EXP 51
16497: PUSH
16498: LD_INT 0
16500: ST_TO_ADDR
// sDepot := false ;
16501: LD_ADDR_EXP 52
16505: PUSH
16506: LD_INT 0
16508: ST_TO_ADDR
// sFlag := false ;
16509: LD_ADDR_EXP 53
16513: PUSH
16514: LD_INT 0
16516: ST_TO_ADDR
// sKamikadze := false ;
16517: LD_ADDR_EXP 61
16521: PUSH
16522: LD_INT 0
16524: ST_TO_ADDR
// sTroll := false ;
16525: LD_ADDR_EXP 62
16529: PUSH
16530: LD_INT 0
16532: ST_TO_ADDR
// sSlow := false ;
16533: LD_ADDR_EXP 63
16537: PUSH
16538: LD_INT 0
16540: ST_TO_ADDR
// sLack := false ;
16541: LD_ADDR_EXP 64
16545: PUSH
16546: LD_INT 0
16548: ST_TO_ADDR
// sTank := false ;
16549: LD_ADDR_EXP 66
16553: PUSH
16554: LD_INT 0
16556: ST_TO_ADDR
// sRemote := false ;
16557: LD_ADDR_EXP 67
16561: PUSH
16562: LD_INT 0
16564: ST_TO_ADDR
// sPowell := false ;
16565: LD_ADDR_EXP 68
16569: PUSH
16570: LD_INT 0
16572: ST_TO_ADDR
// sTeleport := false ;
16573: LD_ADDR_EXP 71
16577: PUSH
16578: LD_INT 0
16580: ST_TO_ADDR
// sOilTower := false ;
16581: LD_ADDR_EXP 73
16585: PUSH
16586: LD_INT 0
16588: ST_TO_ADDR
// sShovel := false ;
16589: LD_ADDR_EXP 74
16593: PUSH
16594: LD_INT 0
16596: ST_TO_ADDR
// sSheik := false ;
16597: LD_ADDR_EXP 75
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// sEarthquake := false ;
16605: LD_ADDR_EXP 77
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// sAI := false ;
16613: LD_ADDR_EXP 78
16617: PUSH
16618: LD_INT 0
16620: ST_TO_ADDR
// sCargo := false ;
16621: LD_ADDR_EXP 81
16625: PUSH
16626: LD_INT 0
16628: ST_TO_ADDR
// sDLaser := false ;
16629: LD_ADDR_EXP 82
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
// sExchange := false ;
16637: LD_ADDR_EXP 83
16641: PUSH
16642: LD_INT 0
16644: ST_TO_ADDR
// sFac := false ;
16645: LD_ADDR_EXP 84
16649: PUSH
16650: LD_INT 0
16652: ST_TO_ADDR
// sPower := false ;
16653: LD_ADDR_EXP 85
16657: PUSH
16658: LD_INT 0
16660: ST_TO_ADDR
// sRandom := false ;
16661: LD_ADDR_EXP 86
16665: PUSH
16666: LD_INT 0
16668: ST_TO_ADDR
// sShield := false ;
16669: LD_ADDR_EXP 87
16673: PUSH
16674: LD_INT 0
16676: ST_TO_ADDR
// sTime := false ;
16677: LD_ADDR_EXP 88
16681: PUSH
16682: LD_INT 0
16684: ST_TO_ADDR
// sTools := false ;
16685: LD_ADDR_EXP 89
16689: PUSH
16690: LD_INT 0
16692: ST_TO_ADDR
// sSold := false ;
16693: LD_ADDR_EXP 54
16697: PUSH
16698: LD_INT 0
16700: ST_TO_ADDR
// sDiff := false ;
16701: LD_ADDR_EXP 55
16705: PUSH
16706: LD_INT 0
16708: ST_TO_ADDR
// sFog := false ;
16709: LD_ADDR_EXP 58
16713: PUSH
16714: LD_INT 0
16716: ST_TO_ADDR
// sReset := false ;
16717: LD_ADDR_EXP 59
16721: PUSH
16722: LD_INT 0
16724: ST_TO_ADDR
// sSun := false ;
16725: LD_ADDR_EXP 60
16729: PUSH
16730: LD_INT 0
16732: ST_TO_ADDR
// sTiger := false ;
16733: LD_ADDR_EXP 56
16737: PUSH
16738: LD_INT 0
16740: ST_TO_ADDR
// sBomb := false ;
16741: LD_ADDR_EXP 57
16745: PUSH
16746: LD_INT 0
16748: ST_TO_ADDR
// sWound := false ;
16749: LD_ADDR_EXP 65
16753: PUSH
16754: LD_INT 0
16756: ST_TO_ADDR
// sBetray := false ;
16757: LD_ADDR_EXP 69
16761: PUSH
16762: LD_INT 0
16764: ST_TO_ADDR
// sContamin := false ;
16765: LD_ADDR_EXP 70
16769: PUSH
16770: LD_INT 0
16772: ST_TO_ADDR
// sOil := false ;
16773: LD_ADDR_EXP 72
16777: PUSH
16778: LD_INT 0
16780: ST_TO_ADDR
// sStu := false ;
16781: LD_ADDR_EXP 76
16785: PUSH
16786: LD_INT 0
16788: ST_TO_ADDR
// sBazooka := false ;
16789: LD_ADDR_EXP 79
16793: PUSH
16794: LD_INT 0
16796: ST_TO_ADDR
// sMortar := false ;
16797: LD_ADDR_EXP 80
16801: PUSH
16802: LD_INT 0
16804: ST_TO_ADDR
// sRanger := false ;
16805: LD_ADDR_EXP 90
16809: PUSH
16810: LD_INT 0
16812: ST_TO_ADDR
// sComputer := false ;
16813: LD_ADDR_EXP 91
16817: PUSH
16818: LD_INT 0
16820: ST_TO_ADDR
// s30 := false ;
16821: LD_ADDR_EXP 92
16825: PUSH
16826: LD_INT 0
16828: ST_TO_ADDR
// s60 := false ;
16829: LD_ADDR_EXP 93
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// end ;
16837: LD_VAR 0 1
16841: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16842: LD_INT 0
16844: PPUSH
16845: PPUSH
16846: PPUSH
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
// result := [ ] ;
16851: LD_ADDR_VAR 0 2
16855: PUSH
16856: EMPTY
16857: ST_TO_ADDR
// if campaign_id = 1 then
16858: LD_OWVAR 69
16862: PUSH
16863: LD_INT 1
16865: EQUAL
16866: IFFALSE 20032
// begin case mission_number of 1 :
16868: LD_OWVAR 70
16872: PUSH
16873: LD_INT 1
16875: DOUBLE
16876: EQUAL
16877: IFTRUE 16881
16879: GO 16957
16881: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16882: LD_ADDR_VAR 0 2
16886: PUSH
16887: LD_INT 2
16889: PUSH
16890: LD_INT 4
16892: PUSH
16893: LD_INT 11
16895: PUSH
16896: LD_INT 12
16898: PUSH
16899: LD_INT 15
16901: PUSH
16902: LD_INT 16
16904: PUSH
16905: LD_INT 22
16907: PUSH
16908: LD_INT 23
16910: PUSH
16911: LD_INT 26
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 101
16927: PUSH
16928: LD_INT 102
16930: PUSH
16931: LD_INT 106
16933: PUSH
16934: LD_INT 116
16936: PUSH
16937: LD_INT 117
16939: PUSH
16940: LD_INT 118
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: ST_TO_ADDR
16955: GO 20030
16957: LD_INT 2
16959: DOUBLE
16960: EQUAL
16961: IFTRUE 16965
16963: GO 17049
16965: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16966: LD_ADDR_VAR 0 2
16970: PUSH
16971: LD_INT 2
16973: PUSH
16974: LD_INT 4
16976: PUSH
16977: LD_INT 11
16979: PUSH
16980: LD_INT 12
16982: PUSH
16983: LD_INT 15
16985: PUSH
16986: LD_INT 16
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_INT 23
16994: PUSH
16995: LD_INT 26
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 101
17011: PUSH
17012: LD_INT 102
17014: PUSH
17015: LD_INT 105
17017: PUSH
17018: LD_INT 106
17020: PUSH
17021: LD_INT 108
17023: PUSH
17024: LD_INT 116
17026: PUSH
17027: LD_INT 117
17029: PUSH
17030: LD_INT 118
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: ST_TO_ADDR
17047: GO 20030
17049: LD_INT 3
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17145
17057: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17058: LD_ADDR_VAR 0 2
17062: PUSH
17063: LD_INT 2
17065: PUSH
17066: LD_INT 4
17068: PUSH
17069: LD_INT 5
17071: PUSH
17072: LD_INT 11
17074: PUSH
17075: LD_INT 12
17077: PUSH
17078: LD_INT 15
17080: PUSH
17081: LD_INT 16
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_INT 26
17089: PUSH
17090: LD_INT 36
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 101
17107: PUSH
17108: LD_INT 102
17110: PUSH
17111: LD_INT 105
17113: PUSH
17114: LD_INT 106
17116: PUSH
17117: LD_INT 108
17119: PUSH
17120: LD_INT 116
17122: PUSH
17123: LD_INT 117
17125: PUSH
17126: LD_INT 118
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: ST_TO_ADDR
17143: GO 20030
17145: LD_INT 4
17147: DOUBLE
17148: EQUAL
17149: IFTRUE 17153
17151: GO 17249
17153: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17154: LD_ADDR_VAR 0 2
17158: PUSH
17159: LD_INT 2
17161: PUSH
17162: LD_INT 4
17164: PUSH
17165: LD_INT 5
17167: PUSH
17168: LD_INT 8
17170: PUSH
17171: LD_INT 11
17173: PUSH
17174: LD_INT 12
17176: PUSH
17177: LD_INT 15
17179: PUSH
17180: LD_INT 16
17182: PUSH
17183: LD_INT 22
17185: PUSH
17186: LD_INT 23
17188: PUSH
17189: LD_INT 26
17191: PUSH
17192: LD_INT 36
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 101
17211: PUSH
17212: LD_INT 102
17214: PUSH
17215: LD_INT 105
17217: PUSH
17218: LD_INT 106
17220: PUSH
17221: LD_INT 108
17223: PUSH
17224: LD_INT 116
17226: PUSH
17227: LD_INT 117
17229: PUSH
17230: LD_INT 118
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: ST_TO_ADDR
17247: GO 20030
17249: LD_INT 5
17251: DOUBLE
17252: EQUAL
17253: IFTRUE 17257
17255: GO 17369
17257: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17258: LD_ADDR_VAR 0 2
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: LD_INT 4
17268: PUSH
17269: LD_INT 5
17271: PUSH
17272: LD_INT 6
17274: PUSH
17275: LD_INT 8
17277: PUSH
17278: LD_INT 11
17280: PUSH
17281: LD_INT 12
17283: PUSH
17284: LD_INT 15
17286: PUSH
17287: LD_INT 16
17289: PUSH
17290: LD_INT 22
17292: PUSH
17293: LD_INT 23
17295: PUSH
17296: LD_INT 25
17298: PUSH
17299: LD_INT 26
17301: PUSH
17302: LD_INT 36
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 101
17323: PUSH
17324: LD_INT 102
17326: PUSH
17327: LD_INT 105
17329: PUSH
17330: LD_INT 106
17332: PUSH
17333: LD_INT 108
17335: PUSH
17336: LD_INT 109
17338: PUSH
17339: LD_INT 112
17341: PUSH
17342: LD_INT 116
17344: PUSH
17345: LD_INT 117
17347: PUSH
17348: LD_INT 118
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: ST_TO_ADDR
17367: GO 20030
17369: LD_INT 6
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17509
17377: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17378: LD_ADDR_VAR 0 2
17382: PUSH
17383: LD_INT 2
17385: PUSH
17386: LD_INT 4
17388: PUSH
17389: LD_INT 5
17391: PUSH
17392: LD_INT 6
17394: PUSH
17395: LD_INT 8
17397: PUSH
17398: LD_INT 11
17400: PUSH
17401: LD_INT 12
17403: PUSH
17404: LD_INT 15
17406: PUSH
17407: LD_INT 16
17409: PUSH
17410: LD_INT 20
17412: PUSH
17413: LD_INT 21
17415: PUSH
17416: LD_INT 22
17418: PUSH
17419: LD_INT 23
17421: PUSH
17422: LD_INT 25
17424: PUSH
17425: LD_INT 26
17427: PUSH
17428: LD_INT 30
17430: PUSH
17431: LD_INT 31
17433: PUSH
17434: LD_INT 32
17436: PUSH
17437: LD_INT 36
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 101
17463: PUSH
17464: LD_INT 102
17466: PUSH
17467: LD_INT 105
17469: PUSH
17470: LD_INT 106
17472: PUSH
17473: LD_INT 108
17475: PUSH
17476: LD_INT 109
17478: PUSH
17479: LD_INT 112
17481: PUSH
17482: LD_INT 116
17484: PUSH
17485: LD_INT 117
17487: PUSH
17488: LD_INT 118
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: ST_TO_ADDR
17507: GO 20030
17509: LD_INT 7
17511: DOUBLE
17512: EQUAL
17513: IFTRUE 17517
17515: GO 17629
17517: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17518: LD_ADDR_VAR 0 2
17522: PUSH
17523: LD_INT 2
17525: PUSH
17526: LD_INT 4
17528: PUSH
17529: LD_INT 5
17531: PUSH
17532: LD_INT 7
17534: PUSH
17535: LD_INT 11
17537: PUSH
17538: LD_INT 12
17540: PUSH
17541: LD_INT 15
17543: PUSH
17544: LD_INT 16
17546: PUSH
17547: LD_INT 20
17549: PUSH
17550: LD_INT 21
17552: PUSH
17553: LD_INT 22
17555: PUSH
17556: LD_INT 23
17558: PUSH
17559: LD_INT 25
17561: PUSH
17562: LD_INT 26
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 101
17583: PUSH
17584: LD_INT 102
17586: PUSH
17587: LD_INT 103
17589: PUSH
17590: LD_INT 105
17592: PUSH
17593: LD_INT 106
17595: PUSH
17596: LD_INT 108
17598: PUSH
17599: LD_INT 112
17601: PUSH
17602: LD_INT 116
17604: PUSH
17605: LD_INT 117
17607: PUSH
17608: LD_INT 118
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: ST_TO_ADDR
17627: GO 20030
17629: LD_INT 8
17631: DOUBLE
17632: EQUAL
17633: IFTRUE 17637
17635: GO 17777
17637: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17638: LD_ADDR_VAR 0 2
17642: PUSH
17643: LD_INT 2
17645: PUSH
17646: LD_INT 4
17648: PUSH
17649: LD_INT 5
17651: PUSH
17652: LD_INT 6
17654: PUSH
17655: LD_INT 7
17657: PUSH
17658: LD_INT 8
17660: PUSH
17661: LD_INT 11
17663: PUSH
17664: LD_INT 12
17666: PUSH
17667: LD_INT 15
17669: PUSH
17670: LD_INT 16
17672: PUSH
17673: LD_INT 20
17675: PUSH
17676: LD_INT 21
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_INT 23
17684: PUSH
17685: LD_INT 25
17687: PUSH
17688: LD_INT 26
17690: PUSH
17691: LD_INT 30
17693: PUSH
17694: LD_INT 31
17696: PUSH
17697: LD_INT 32
17699: PUSH
17700: LD_INT 36
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 101
17727: PUSH
17728: LD_INT 102
17730: PUSH
17731: LD_INT 103
17733: PUSH
17734: LD_INT 105
17736: PUSH
17737: LD_INT 106
17739: PUSH
17740: LD_INT 108
17742: PUSH
17743: LD_INT 109
17745: PUSH
17746: LD_INT 112
17748: PUSH
17749: LD_INT 116
17751: PUSH
17752: LD_INT 117
17754: PUSH
17755: LD_INT 118
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: ST_TO_ADDR
17775: GO 20030
17777: LD_INT 9
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17785
17783: GO 17933
17785: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17786: LD_ADDR_VAR 0 2
17790: PUSH
17791: LD_INT 2
17793: PUSH
17794: LD_INT 4
17796: PUSH
17797: LD_INT 5
17799: PUSH
17800: LD_INT 6
17802: PUSH
17803: LD_INT 7
17805: PUSH
17806: LD_INT 8
17808: PUSH
17809: LD_INT 11
17811: PUSH
17812: LD_INT 12
17814: PUSH
17815: LD_INT 15
17817: PUSH
17818: LD_INT 16
17820: PUSH
17821: LD_INT 20
17823: PUSH
17824: LD_INT 21
17826: PUSH
17827: LD_INT 22
17829: PUSH
17830: LD_INT 23
17832: PUSH
17833: LD_INT 25
17835: PUSH
17836: LD_INT 26
17838: PUSH
17839: LD_INT 28
17841: PUSH
17842: LD_INT 30
17844: PUSH
17845: LD_INT 31
17847: PUSH
17848: LD_INT 32
17850: PUSH
17851: LD_INT 36
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 101
17879: PUSH
17880: LD_INT 102
17882: PUSH
17883: LD_INT 103
17885: PUSH
17886: LD_INT 105
17888: PUSH
17889: LD_INT 106
17891: PUSH
17892: LD_INT 108
17894: PUSH
17895: LD_INT 109
17897: PUSH
17898: LD_INT 112
17900: PUSH
17901: LD_INT 114
17903: PUSH
17904: LD_INT 116
17906: PUSH
17907: LD_INT 117
17909: PUSH
17910: LD_INT 118
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: ST_TO_ADDR
17931: GO 20030
17933: LD_INT 10
17935: DOUBLE
17936: EQUAL
17937: IFTRUE 17941
17939: GO 18137
17941: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17942: LD_ADDR_VAR 0 2
17946: PUSH
17947: LD_INT 2
17949: PUSH
17950: LD_INT 4
17952: PUSH
17953: LD_INT 5
17955: PUSH
17956: LD_INT 6
17958: PUSH
17959: LD_INT 7
17961: PUSH
17962: LD_INT 8
17964: PUSH
17965: LD_INT 9
17967: PUSH
17968: LD_INT 10
17970: PUSH
17971: LD_INT 11
17973: PUSH
17974: LD_INT 12
17976: PUSH
17977: LD_INT 13
17979: PUSH
17980: LD_INT 14
17982: PUSH
17983: LD_INT 15
17985: PUSH
17986: LD_INT 16
17988: PUSH
17989: LD_INT 17
17991: PUSH
17992: LD_INT 18
17994: PUSH
17995: LD_INT 19
17997: PUSH
17998: LD_INT 20
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 22
18006: PUSH
18007: LD_INT 23
18009: PUSH
18010: LD_INT 24
18012: PUSH
18013: LD_INT 25
18015: PUSH
18016: LD_INT 26
18018: PUSH
18019: LD_INT 28
18021: PUSH
18022: LD_INT 30
18024: PUSH
18025: LD_INT 31
18027: PUSH
18028: LD_INT 32
18030: PUSH
18031: LD_INT 36
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 101
18067: PUSH
18068: LD_INT 102
18070: PUSH
18071: LD_INT 103
18073: PUSH
18074: LD_INT 104
18076: PUSH
18077: LD_INT 105
18079: PUSH
18080: LD_INT 106
18082: PUSH
18083: LD_INT 107
18085: PUSH
18086: LD_INT 108
18088: PUSH
18089: LD_INT 109
18091: PUSH
18092: LD_INT 110
18094: PUSH
18095: LD_INT 111
18097: PUSH
18098: LD_INT 112
18100: PUSH
18101: LD_INT 114
18103: PUSH
18104: LD_INT 116
18106: PUSH
18107: LD_INT 117
18109: PUSH
18110: LD_INT 118
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: ST_TO_ADDR
18135: GO 20030
18137: LD_INT 11
18139: DOUBLE
18140: EQUAL
18141: IFTRUE 18145
18143: GO 18349
18145: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18146: LD_ADDR_VAR 0 2
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: LD_INT 3
18156: PUSH
18157: LD_INT 4
18159: PUSH
18160: LD_INT 5
18162: PUSH
18163: LD_INT 6
18165: PUSH
18166: LD_INT 7
18168: PUSH
18169: LD_INT 8
18171: PUSH
18172: LD_INT 9
18174: PUSH
18175: LD_INT 10
18177: PUSH
18178: LD_INT 11
18180: PUSH
18181: LD_INT 12
18183: PUSH
18184: LD_INT 13
18186: PUSH
18187: LD_INT 14
18189: PUSH
18190: LD_INT 15
18192: PUSH
18193: LD_INT 16
18195: PUSH
18196: LD_INT 17
18198: PUSH
18199: LD_INT 18
18201: PUSH
18202: LD_INT 19
18204: PUSH
18205: LD_INT 20
18207: PUSH
18208: LD_INT 21
18210: PUSH
18211: LD_INT 22
18213: PUSH
18214: LD_INT 23
18216: PUSH
18217: LD_INT 24
18219: PUSH
18220: LD_INT 25
18222: PUSH
18223: LD_INT 26
18225: PUSH
18226: LD_INT 28
18228: PUSH
18229: LD_INT 30
18231: PUSH
18232: LD_INT 31
18234: PUSH
18235: LD_INT 32
18237: PUSH
18238: LD_INT 34
18240: PUSH
18241: LD_INT 36
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 101
18279: PUSH
18280: LD_INT 102
18282: PUSH
18283: LD_INT 103
18285: PUSH
18286: LD_INT 104
18288: PUSH
18289: LD_INT 105
18291: PUSH
18292: LD_INT 106
18294: PUSH
18295: LD_INT 107
18297: PUSH
18298: LD_INT 108
18300: PUSH
18301: LD_INT 109
18303: PUSH
18304: LD_INT 110
18306: PUSH
18307: LD_INT 111
18309: PUSH
18310: LD_INT 112
18312: PUSH
18313: LD_INT 114
18315: PUSH
18316: LD_INT 116
18318: PUSH
18319: LD_INT 117
18321: PUSH
18322: LD_INT 118
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: ST_TO_ADDR
18347: GO 20030
18349: LD_INT 12
18351: DOUBLE
18352: EQUAL
18353: IFTRUE 18357
18355: GO 18577
18357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18358: LD_ADDR_VAR 0 2
18362: PUSH
18363: LD_INT 1
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: LD_INT 3
18371: PUSH
18372: LD_INT 4
18374: PUSH
18375: LD_INT 5
18377: PUSH
18378: LD_INT 6
18380: PUSH
18381: LD_INT 7
18383: PUSH
18384: LD_INT 8
18386: PUSH
18387: LD_INT 9
18389: PUSH
18390: LD_INT 10
18392: PUSH
18393: LD_INT 11
18395: PUSH
18396: LD_INT 12
18398: PUSH
18399: LD_INT 13
18401: PUSH
18402: LD_INT 14
18404: PUSH
18405: LD_INT 15
18407: PUSH
18408: LD_INT 16
18410: PUSH
18411: LD_INT 17
18413: PUSH
18414: LD_INT 18
18416: PUSH
18417: LD_INT 19
18419: PUSH
18420: LD_INT 20
18422: PUSH
18423: LD_INT 21
18425: PUSH
18426: LD_INT 22
18428: PUSH
18429: LD_INT 23
18431: PUSH
18432: LD_INT 24
18434: PUSH
18435: LD_INT 25
18437: PUSH
18438: LD_INT 26
18440: PUSH
18441: LD_INT 27
18443: PUSH
18444: LD_INT 28
18446: PUSH
18447: LD_INT 30
18449: PUSH
18450: LD_INT 31
18452: PUSH
18453: LD_INT 32
18455: PUSH
18456: LD_INT 33
18458: PUSH
18459: LD_INT 34
18461: PUSH
18462: LD_INT 36
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 101
18503: PUSH
18504: LD_INT 102
18506: PUSH
18507: LD_INT 103
18509: PUSH
18510: LD_INT 104
18512: PUSH
18513: LD_INT 105
18515: PUSH
18516: LD_INT 106
18518: PUSH
18519: LD_INT 107
18521: PUSH
18522: LD_INT 108
18524: PUSH
18525: LD_INT 109
18527: PUSH
18528: LD_INT 110
18530: PUSH
18531: LD_INT 111
18533: PUSH
18534: LD_INT 112
18536: PUSH
18537: LD_INT 113
18539: PUSH
18540: LD_INT 114
18542: PUSH
18543: LD_INT 116
18545: PUSH
18546: LD_INT 117
18548: PUSH
18549: LD_INT 118
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: ST_TO_ADDR
18575: GO 20030
18577: LD_INT 13
18579: DOUBLE
18580: EQUAL
18581: IFTRUE 18585
18583: GO 18793
18585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18586: LD_ADDR_VAR 0 2
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: LD_INT 2
18596: PUSH
18597: LD_INT 3
18599: PUSH
18600: LD_INT 4
18602: PUSH
18603: LD_INT 5
18605: PUSH
18606: LD_INT 8
18608: PUSH
18609: LD_INT 9
18611: PUSH
18612: LD_INT 10
18614: PUSH
18615: LD_INT 11
18617: PUSH
18618: LD_INT 12
18620: PUSH
18621: LD_INT 14
18623: PUSH
18624: LD_INT 15
18626: PUSH
18627: LD_INT 16
18629: PUSH
18630: LD_INT 17
18632: PUSH
18633: LD_INT 18
18635: PUSH
18636: LD_INT 19
18638: PUSH
18639: LD_INT 20
18641: PUSH
18642: LD_INT 21
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_INT 23
18650: PUSH
18651: LD_INT 24
18653: PUSH
18654: LD_INT 25
18656: PUSH
18657: LD_INT 26
18659: PUSH
18660: LD_INT 27
18662: PUSH
18663: LD_INT 28
18665: PUSH
18666: LD_INT 30
18668: PUSH
18669: LD_INT 31
18671: PUSH
18672: LD_INT 32
18674: PUSH
18675: LD_INT 33
18677: PUSH
18678: LD_INT 34
18680: PUSH
18681: LD_INT 36
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 101
18719: PUSH
18720: LD_INT 102
18722: PUSH
18723: LD_INT 103
18725: PUSH
18726: LD_INT 104
18728: PUSH
18729: LD_INT 105
18731: PUSH
18732: LD_INT 106
18734: PUSH
18735: LD_INT 107
18737: PUSH
18738: LD_INT 108
18740: PUSH
18741: LD_INT 109
18743: PUSH
18744: LD_INT 110
18746: PUSH
18747: LD_INT 111
18749: PUSH
18750: LD_INT 112
18752: PUSH
18753: LD_INT 113
18755: PUSH
18756: LD_INT 114
18758: PUSH
18759: LD_INT 116
18761: PUSH
18762: LD_INT 117
18764: PUSH
18765: LD_INT 118
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: ST_TO_ADDR
18791: GO 20030
18793: LD_INT 14
18795: DOUBLE
18796: EQUAL
18797: IFTRUE 18801
18799: GO 19025
18801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18802: LD_ADDR_VAR 0 2
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: LD_INT 4
18818: PUSH
18819: LD_INT 5
18821: PUSH
18822: LD_INT 6
18824: PUSH
18825: LD_INT 7
18827: PUSH
18828: LD_INT 8
18830: PUSH
18831: LD_INT 9
18833: PUSH
18834: LD_INT 10
18836: PUSH
18837: LD_INT 11
18839: PUSH
18840: LD_INT 12
18842: PUSH
18843: LD_INT 13
18845: PUSH
18846: LD_INT 14
18848: PUSH
18849: LD_INT 15
18851: PUSH
18852: LD_INT 16
18854: PUSH
18855: LD_INT 17
18857: PUSH
18858: LD_INT 18
18860: PUSH
18861: LD_INT 19
18863: PUSH
18864: LD_INT 20
18866: PUSH
18867: LD_INT 21
18869: PUSH
18870: LD_INT 22
18872: PUSH
18873: LD_INT 23
18875: PUSH
18876: LD_INT 24
18878: PUSH
18879: LD_INT 25
18881: PUSH
18882: LD_INT 26
18884: PUSH
18885: LD_INT 27
18887: PUSH
18888: LD_INT 28
18890: PUSH
18891: LD_INT 29
18893: PUSH
18894: LD_INT 30
18896: PUSH
18897: LD_INT 31
18899: PUSH
18900: LD_INT 32
18902: PUSH
18903: LD_INT 33
18905: PUSH
18906: LD_INT 34
18908: PUSH
18909: LD_INT 36
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 101
18951: PUSH
18952: LD_INT 102
18954: PUSH
18955: LD_INT 103
18957: PUSH
18958: LD_INT 104
18960: PUSH
18961: LD_INT 105
18963: PUSH
18964: LD_INT 106
18966: PUSH
18967: LD_INT 107
18969: PUSH
18970: LD_INT 108
18972: PUSH
18973: LD_INT 109
18975: PUSH
18976: LD_INT 110
18978: PUSH
18979: LD_INT 111
18981: PUSH
18982: LD_INT 112
18984: PUSH
18985: LD_INT 113
18987: PUSH
18988: LD_INT 114
18990: PUSH
18991: LD_INT 116
18993: PUSH
18994: LD_INT 117
18996: PUSH
18997: LD_INT 118
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: ST_TO_ADDR
19023: GO 20030
19025: LD_INT 15
19027: DOUBLE
19028: EQUAL
19029: IFTRUE 19033
19031: GO 19257
19033: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19034: LD_ADDR_VAR 0 2
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: LD_INT 2
19044: PUSH
19045: LD_INT 3
19047: PUSH
19048: LD_INT 4
19050: PUSH
19051: LD_INT 5
19053: PUSH
19054: LD_INT 6
19056: PUSH
19057: LD_INT 7
19059: PUSH
19060: LD_INT 8
19062: PUSH
19063: LD_INT 9
19065: PUSH
19066: LD_INT 10
19068: PUSH
19069: LD_INT 11
19071: PUSH
19072: LD_INT 12
19074: PUSH
19075: LD_INT 13
19077: PUSH
19078: LD_INT 14
19080: PUSH
19081: LD_INT 15
19083: PUSH
19084: LD_INT 16
19086: PUSH
19087: LD_INT 17
19089: PUSH
19090: LD_INT 18
19092: PUSH
19093: LD_INT 19
19095: PUSH
19096: LD_INT 20
19098: PUSH
19099: LD_INT 21
19101: PUSH
19102: LD_INT 22
19104: PUSH
19105: LD_INT 23
19107: PUSH
19108: LD_INT 24
19110: PUSH
19111: LD_INT 25
19113: PUSH
19114: LD_INT 26
19116: PUSH
19117: LD_INT 27
19119: PUSH
19120: LD_INT 28
19122: PUSH
19123: LD_INT 29
19125: PUSH
19126: LD_INT 30
19128: PUSH
19129: LD_INT 31
19131: PUSH
19132: LD_INT 32
19134: PUSH
19135: LD_INT 33
19137: PUSH
19138: LD_INT 34
19140: PUSH
19141: LD_INT 36
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 101
19183: PUSH
19184: LD_INT 102
19186: PUSH
19187: LD_INT 103
19189: PUSH
19190: LD_INT 104
19192: PUSH
19193: LD_INT 105
19195: PUSH
19196: LD_INT 106
19198: PUSH
19199: LD_INT 107
19201: PUSH
19202: LD_INT 108
19204: PUSH
19205: LD_INT 109
19207: PUSH
19208: LD_INT 110
19210: PUSH
19211: LD_INT 111
19213: PUSH
19214: LD_INT 112
19216: PUSH
19217: LD_INT 113
19219: PUSH
19220: LD_INT 114
19222: PUSH
19223: LD_INT 116
19225: PUSH
19226: LD_INT 117
19228: PUSH
19229: LD_INT 118
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: ST_TO_ADDR
19255: GO 20030
19257: LD_INT 16
19259: DOUBLE
19260: EQUAL
19261: IFTRUE 19265
19263: GO 19401
19265: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19266: LD_ADDR_VAR 0 2
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: LD_INT 4
19276: PUSH
19277: LD_INT 5
19279: PUSH
19280: LD_INT 7
19282: PUSH
19283: LD_INT 11
19285: PUSH
19286: LD_INT 12
19288: PUSH
19289: LD_INT 15
19291: PUSH
19292: LD_INT 16
19294: PUSH
19295: LD_INT 20
19297: PUSH
19298: LD_INT 21
19300: PUSH
19301: LD_INT 22
19303: PUSH
19304: LD_INT 23
19306: PUSH
19307: LD_INT 25
19309: PUSH
19310: LD_INT 26
19312: PUSH
19313: LD_INT 30
19315: PUSH
19316: LD_INT 31
19318: PUSH
19319: LD_INT 32
19321: PUSH
19322: LD_INT 33
19324: PUSH
19325: LD_INT 34
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 101
19351: PUSH
19352: LD_INT 102
19354: PUSH
19355: LD_INT 103
19357: PUSH
19358: LD_INT 106
19360: PUSH
19361: LD_INT 108
19363: PUSH
19364: LD_INT 112
19366: PUSH
19367: LD_INT 113
19369: PUSH
19370: LD_INT 114
19372: PUSH
19373: LD_INT 116
19375: PUSH
19376: LD_INT 117
19378: PUSH
19379: LD_INT 118
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: ST_TO_ADDR
19399: GO 20030
19401: LD_INT 17
19403: DOUBLE
19404: EQUAL
19405: IFTRUE 19409
19407: GO 19633
19409: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19410: LD_ADDR_VAR 0 2
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: LD_INT 2
19420: PUSH
19421: LD_INT 3
19423: PUSH
19424: LD_INT 4
19426: PUSH
19427: LD_INT 5
19429: PUSH
19430: LD_INT 6
19432: PUSH
19433: LD_INT 7
19435: PUSH
19436: LD_INT 8
19438: PUSH
19439: LD_INT 9
19441: PUSH
19442: LD_INT 10
19444: PUSH
19445: LD_INT 11
19447: PUSH
19448: LD_INT 12
19450: PUSH
19451: LD_INT 13
19453: PUSH
19454: LD_INT 14
19456: PUSH
19457: LD_INT 15
19459: PUSH
19460: LD_INT 16
19462: PUSH
19463: LD_INT 17
19465: PUSH
19466: LD_INT 18
19468: PUSH
19469: LD_INT 19
19471: PUSH
19472: LD_INT 20
19474: PUSH
19475: LD_INT 21
19477: PUSH
19478: LD_INT 22
19480: PUSH
19481: LD_INT 23
19483: PUSH
19484: LD_INT 24
19486: PUSH
19487: LD_INT 25
19489: PUSH
19490: LD_INT 26
19492: PUSH
19493: LD_INT 27
19495: PUSH
19496: LD_INT 28
19498: PUSH
19499: LD_INT 29
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 31
19507: PUSH
19508: LD_INT 32
19510: PUSH
19511: LD_INT 33
19513: PUSH
19514: LD_INT 34
19516: PUSH
19517: LD_INT 36
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 101
19559: PUSH
19560: LD_INT 102
19562: PUSH
19563: LD_INT 103
19565: PUSH
19566: LD_INT 104
19568: PUSH
19569: LD_INT 105
19571: PUSH
19572: LD_INT 106
19574: PUSH
19575: LD_INT 107
19577: PUSH
19578: LD_INT 108
19580: PUSH
19581: LD_INT 109
19583: PUSH
19584: LD_INT 110
19586: PUSH
19587: LD_INT 111
19589: PUSH
19590: LD_INT 112
19592: PUSH
19593: LD_INT 113
19595: PUSH
19596: LD_INT 114
19598: PUSH
19599: LD_INT 116
19601: PUSH
19602: LD_INT 117
19604: PUSH
19605: LD_INT 118
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: ST_TO_ADDR
19631: GO 20030
19633: LD_INT 18
19635: DOUBLE
19636: EQUAL
19637: IFTRUE 19641
19639: GO 19789
19641: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19642: LD_ADDR_VAR 0 2
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 4
19652: PUSH
19653: LD_INT 5
19655: PUSH
19656: LD_INT 7
19658: PUSH
19659: LD_INT 11
19661: PUSH
19662: LD_INT 12
19664: PUSH
19665: LD_INT 15
19667: PUSH
19668: LD_INT 16
19670: PUSH
19671: LD_INT 20
19673: PUSH
19674: LD_INT 21
19676: PUSH
19677: LD_INT 22
19679: PUSH
19680: LD_INT 23
19682: PUSH
19683: LD_INT 25
19685: PUSH
19686: LD_INT 26
19688: PUSH
19689: LD_INT 30
19691: PUSH
19692: LD_INT 31
19694: PUSH
19695: LD_INT 32
19697: PUSH
19698: LD_INT 33
19700: PUSH
19701: LD_INT 34
19703: PUSH
19704: LD_INT 35
19706: PUSH
19707: LD_INT 36
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 101
19735: PUSH
19736: LD_INT 102
19738: PUSH
19739: LD_INT 103
19741: PUSH
19742: LD_INT 106
19744: PUSH
19745: LD_INT 108
19747: PUSH
19748: LD_INT 112
19750: PUSH
19751: LD_INT 113
19753: PUSH
19754: LD_INT 114
19756: PUSH
19757: LD_INT 115
19759: PUSH
19760: LD_INT 116
19762: PUSH
19763: LD_INT 117
19765: PUSH
19766: LD_INT 118
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: ST_TO_ADDR
19787: GO 20030
19789: LD_INT 19
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 20029
19797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19798: LD_ADDR_VAR 0 2
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 3
19811: PUSH
19812: LD_INT 4
19814: PUSH
19815: LD_INT 5
19817: PUSH
19818: LD_INT 6
19820: PUSH
19821: LD_INT 7
19823: PUSH
19824: LD_INT 8
19826: PUSH
19827: LD_INT 9
19829: PUSH
19830: LD_INT 10
19832: PUSH
19833: LD_INT 11
19835: PUSH
19836: LD_INT 12
19838: PUSH
19839: LD_INT 13
19841: PUSH
19842: LD_INT 14
19844: PUSH
19845: LD_INT 15
19847: PUSH
19848: LD_INT 16
19850: PUSH
19851: LD_INT 17
19853: PUSH
19854: LD_INT 18
19856: PUSH
19857: LD_INT 19
19859: PUSH
19860: LD_INT 20
19862: PUSH
19863: LD_INT 21
19865: PUSH
19866: LD_INT 22
19868: PUSH
19869: LD_INT 23
19871: PUSH
19872: LD_INT 24
19874: PUSH
19875: LD_INT 25
19877: PUSH
19878: LD_INT 26
19880: PUSH
19881: LD_INT 27
19883: PUSH
19884: LD_INT 28
19886: PUSH
19887: LD_INT 29
19889: PUSH
19890: LD_INT 30
19892: PUSH
19893: LD_INT 31
19895: PUSH
19896: LD_INT 32
19898: PUSH
19899: LD_INT 33
19901: PUSH
19902: LD_INT 34
19904: PUSH
19905: LD_INT 35
19907: PUSH
19908: LD_INT 36
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 101
19951: PUSH
19952: LD_INT 102
19954: PUSH
19955: LD_INT 103
19957: PUSH
19958: LD_INT 104
19960: PUSH
19961: LD_INT 105
19963: PUSH
19964: LD_INT 106
19966: PUSH
19967: LD_INT 107
19969: PUSH
19970: LD_INT 108
19972: PUSH
19973: LD_INT 109
19975: PUSH
19976: LD_INT 110
19978: PUSH
19979: LD_INT 111
19981: PUSH
19982: LD_INT 112
19984: PUSH
19985: LD_INT 113
19987: PUSH
19988: LD_INT 114
19990: PUSH
19991: LD_INT 115
19993: PUSH
19994: LD_INT 116
19996: PUSH
19997: LD_INT 117
19999: PUSH
20000: LD_INT 118
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: ST_TO_ADDR
20027: GO 20030
20029: POP
// end else
20030: GO 20261
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20032: LD_ADDR_VAR 0 2
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: LD_INT 2
20042: PUSH
20043: LD_INT 3
20045: PUSH
20046: LD_INT 4
20048: PUSH
20049: LD_INT 5
20051: PUSH
20052: LD_INT 6
20054: PUSH
20055: LD_INT 7
20057: PUSH
20058: LD_INT 8
20060: PUSH
20061: LD_INT 9
20063: PUSH
20064: LD_INT 10
20066: PUSH
20067: LD_INT 11
20069: PUSH
20070: LD_INT 12
20072: PUSH
20073: LD_INT 13
20075: PUSH
20076: LD_INT 14
20078: PUSH
20079: LD_INT 15
20081: PUSH
20082: LD_INT 16
20084: PUSH
20085: LD_INT 17
20087: PUSH
20088: LD_INT 18
20090: PUSH
20091: LD_INT 19
20093: PUSH
20094: LD_INT 20
20096: PUSH
20097: LD_INT 21
20099: PUSH
20100: LD_INT 22
20102: PUSH
20103: LD_INT 23
20105: PUSH
20106: LD_INT 24
20108: PUSH
20109: LD_INT 25
20111: PUSH
20112: LD_INT 26
20114: PUSH
20115: LD_INT 27
20117: PUSH
20118: LD_INT 28
20120: PUSH
20121: LD_INT 29
20123: PUSH
20124: LD_INT 30
20126: PUSH
20127: LD_INT 31
20129: PUSH
20130: LD_INT 32
20132: PUSH
20133: LD_INT 33
20135: PUSH
20136: LD_INT 34
20138: PUSH
20139: LD_INT 35
20141: PUSH
20142: LD_INT 36
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 101
20185: PUSH
20186: LD_INT 102
20188: PUSH
20189: LD_INT 103
20191: PUSH
20192: LD_INT 104
20194: PUSH
20195: LD_INT 105
20197: PUSH
20198: LD_INT 106
20200: PUSH
20201: LD_INT 107
20203: PUSH
20204: LD_INT 108
20206: PUSH
20207: LD_INT 109
20209: PUSH
20210: LD_INT 110
20212: PUSH
20213: LD_INT 111
20215: PUSH
20216: LD_INT 112
20218: PUSH
20219: LD_INT 113
20221: PUSH
20222: LD_INT 114
20224: PUSH
20225: LD_INT 115
20227: PUSH
20228: LD_INT 116
20230: PUSH
20231: LD_INT 117
20233: PUSH
20234: LD_INT 118
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: ST_TO_ADDR
// if result then
20261: LD_VAR 0 2
20265: IFFALSE 21051
// begin normal :=  ;
20267: LD_ADDR_VAR 0 5
20271: PUSH
20272: LD_STRING 
20274: ST_TO_ADDR
// hardcore :=  ;
20275: LD_ADDR_VAR 0 6
20279: PUSH
20280: LD_STRING 
20282: ST_TO_ADDR
// active :=  ;
20283: LD_ADDR_VAR 0 7
20287: PUSH
20288: LD_STRING 
20290: ST_TO_ADDR
// for i = 1 to normalCounter do
20291: LD_ADDR_VAR 0 8
20295: PUSH
20296: DOUBLE
20297: LD_INT 1
20299: DEC
20300: ST_TO_ADDR
20301: LD_EXP 38
20305: PUSH
20306: FOR_TO
20307: IFFALSE 20408
// begin tmp := 0 ;
20309: LD_ADDR_VAR 0 3
20313: PUSH
20314: LD_STRING 0
20316: ST_TO_ADDR
// if result [ 1 ] then
20317: LD_VAR 0 2
20321: PUSH
20322: LD_INT 1
20324: ARRAY
20325: IFFALSE 20390
// if result [ 1 ] [ 1 ] = i then
20327: LD_VAR 0 2
20331: PUSH
20332: LD_INT 1
20334: ARRAY
20335: PUSH
20336: LD_INT 1
20338: ARRAY
20339: PUSH
20340: LD_VAR 0 8
20344: EQUAL
20345: IFFALSE 20390
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20347: LD_ADDR_VAR 0 2
20351: PUSH
20352: LD_VAR 0 2
20356: PPUSH
20357: LD_INT 1
20359: PPUSH
20360: LD_VAR 0 2
20364: PUSH
20365: LD_INT 1
20367: ARRAY
20368: PPUSH
20369: LD_INT 1
20371: PPUSH
20372: CALL_OW 3
20376: PPUSH
20377: CALL_OW 1
20381: ST_TO_ADDR
// tmp := 1 ;
20382: LD_ADDR_VAR 0 3
20386: PUSH
20387: LD_STRING 1
20389: ST_TO_ADDR
// end ; normal := normal & tmp ;
20390: LD_ADDR_VAR 0 5
20394: PUSH
20395: LD_VAR 0 5
20399: PUSH
20400: LD_VAR 0 3
20404: STR
20405: ST_TO_ADDR
// end ;
20406: GO 20306
20408: POP
20409: POP
// for i = 1 to hardcoreCounter do
20410: LD_ADDR_VAR 0 8
20414: PUSH
20415: DOUBLE
20416: LD_INT 1
20418: DEC
20419: ST_TO_ADDR
20420: LD_EXP 39
20424: PUSH
20425: FOR_TO
20426: IFFALSE 20531
// begin tmp := 0 ;
20428: LD_ADDR_VAR 0 3
20432: PUSH
20433: LD_STRING 0
20435: ST_TO_ADDR
// if result [ 2 ] then
20436: LD_VAR 0 2
20440: PUSH
20441: LD_INT 2
20443: ARRAY
20444: IFFALSE 20513
// if result [ 2 ] [ 1 ] = 100 + i then
20446: LD_VAR 0 2
20450: PUSH
20451: LD_INT 2
20453: ARRAY
20454: PUSH
20455: LD_INT 1
20457: ARRAY
20458: PUSH
20459: LD_INT 100
20461: PUSH
20462: LD_VAR 0 8
20466: PLUS
20467: EQUAL
20468: IFFALSE 20513
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20470: LD_ADDR_VAR 0 2
20474: PUSH
20475: LD_VAR 0 2
20479: PPUSH
20480: LD_INT 2
20482: PPUSH
20483: LD_VAR 0 2
20487: PUSH
20488: LD_INT 2
20490: ARRAY
20491: PPUSH
20492: LD_INT 1
20494: PPUSH
20495: CALL_OW 3
20499: PPUSH
20500: CALL_OW 1
20504: ST_TO_ADDR
// tmp := 1 ;
20505: LD_ADDR_VAR 0 3
20509: PUSH
20510: LD_STRING 1
20512: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20513: LD_ADDR_VAR 0 6
20517: PUSH
20518: LD_VAR 0 6
20522: PUSH
20523: LD_VAR 0 3
20527: STR
20528: ST_TO_ADDR
// end ;
20529: GO 20425
20531: POP
20532: POP
// if isGameLoad then
20533: LD_VAR 0 1
20537: IFFALSE 21012
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20539: LD_ADDR_VAR 0 4
20543: PUSH
20544: LD_EXP 42
20548: PUSH
20549: LD_EXP 41
20553: PUSH
20554: LD_EXP 43
20558: PUSH
20559: LD_EXP 40
20563: PUSH
20564: LD_EXP 44
20568: PUSH
20569: LD_EXP 45
20573: PUSH
20574: LD_EXP 46
20578: PUSH
20579: LD_EXP 47
20583: PUSH
20584: LD_EXP 48
20588: PUSH
20589: LD_EXP 49
20593: PUSH
20594: LD_EXP 50
20598: PUSH
20599: LD_EXP 51
20603: PUSH
20604: LD_EXP 52
20608: PUSH
20609: LD_EXP 53
20613: PUSH
20614: LD_EXP 61
20618: PUSH
20619: LD_EXP 62
20623: PUSH
20624: LD_EXP 63
20628: PUSH
20629: LD_EXP 64
20633: PUSH
20634: LD_EXP 66
20638: PUSH
20639: LD_EXP 67
20643: PUSH
20644: LD_EXP 68
20648: PUSH
20649: LD_EXP 71
20653: PUSH
20654: LD_EXP 73
20658: PUSH
20659: LD_EXP 74
20663: PUSH
20664: LD_EXP 75
20668: PUSH
20669: LD_EXP 77
20673: PUSH
20674: LD_EXP 78
20678: PUSH
20679: LD_EXP 81
20683: PUSH
20684: LD_EXP 82
20688: PUSH
20689: LD_EXP 83
20693: PUSH
20694: LD_EXP 84
20698: PUSH
20699: LD_EXP 85
20703: PUSH
20704: LD_EXP 86
20708: PUSH
20709: LD_EXP 87
20713: PUSH
20714: LD_EXP 88
20718: PUSH
20719: LD_EXP 89
20723: PUSH
20724: LD_EXP 54
20728: PUSH
20729: LD_EXP 55
20733: PUSH
20734: LD_EXP 58
20738: PUSH
20739: LD_EXP 59
20743: PUSH
20744: LD_EXP 60
20748: PUSH
20749: LD_EXP 56
20753: PUSH
20754: LD_EXP 57
20758: PUSH
20759: LD_EXP 65
20763: PUSH
20764: LD_EXP 69
20768: PUSH
20769: LD_EXP 70
20773: PUSH
20774: LD_EXP 72
20778: PUSH
20779: LD_EXP 76
20783: PUSH
20784: LD_EXP 79
20788: PUSH
20789: LD_EXP 80
20793: PUSH
20794: LD_EXP 90
20798: PUSH
20799: LD_EXP 91
20803: PUSH
20804: LD_EXP 92
20808: PUSH
20809: LD_EXP 93
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: ST_TO_ADDR
// tmp :=  ;
20870: LD_ADDR_VAR 0 3
20874: PUSH
20875: LD_STRING 
20877: ST_TO_ADDR
// for i = 1 to normalCounter do
20878: LD_ADDR_VAR 0 8
20882: PUSH
20883: DOUBLE
20884: LD_INT 1
20886: DEC
20887: ST_TO_ADDR
20888: LD_EXP 38
20892: PUSH
20893: FOR_TO
20894: IFFALSE 20930
// begin if flags [ i ] then
20896: LD_VAR 0 4
20900: PUSH
20901: LD_VAR 0 8
20905: ARRAY
20906: IFFALSE 20928
// tmp := tmp & i & ; ;
20908: LD_ADDR_VAR 0 3
20912: PUSH
20913: LD_VAR 0 3
20917: PUSH
20918: LD_VAR 0 8
20922: STR
20923: PUSH
20924: LD_STRING ;
20926: STR
20927: ST_TO_ADDR
// end ;
20928: GO 20893
20930: POP
20931: POP
// for i = 1 to hardcoreCounter do
20932: LD_ADDR_VAR 0 8
20936: PUSH
20937: DOUBLE
20938: LD_INT 1
20940: DEC
20941: ST_TO_ADDR
20942: LD_EXP 39
20946: PUSH
20947: FOR_TO
20948: IFFALSE 20994
// begin if flags [ normalCounter + i ] then
20950: LD_VAR 0 4
20954: PUSH
20955: LD_EXP 38
20959: PUSH
20960: LD_VAR 0 8
20964: PLUS
20965: ARRAY
20966: IFFALSE 20992
// tmp := tmp & ( 100 + i ) & ; ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 100
20980: PUSH
20981: LD_VAR 0 8
20985: PLUS
20986: STR
20987: PUSH
20988: LD_STRING ;
20990: STR
20991: ST_TO_ADDR
// end ;
20992: GO 20947
20994: POP
20995: POP
// if tmp then
20996: LD_VAR 0 3
21000: IFFALSE 21012
// active := tmp ;
21002: LD_ADDR_VAR 0 7
21006: PUSH
21007: LD_VAR 0 3
21011: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21012: LD_STRING getStreamItemsFromMission("
21014: PUSH
21015: LD_VAR 0 5
21019: STR
21020: PUSH
21021: LD_STRING ","
21023: STR
21024: PUSH
21025: LD_VAR 0 6
21029: STR
21030: PUSH
21031: LD_STRING ","
21033: STR
21034: PUSH
21035: LD_VAR 0 7
21039: STR
21040: PUSH
21041: LD_STRING ")
21043: STR
21044: PPUSH
21045: CALL_OW 559
// end else
21049: GO 21058
// ToLua ( getStreamItemsFromMission("","","") ) ;
21051: LD_STRING getStreamItemsFromMission("","","")
21053: PPUSH
21054: CALL_OW 559
// end ;
21058: LD_VAR 0 2
21062: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21063: LD_EXP 37
21067: PUSH
21068: LD_EXP 42
21072: AND
21073: IFFALSE 21197
21075: GO 21077
21077: DISABLE
21078: LD_INT 0
21080: PPUSH
21081: PPUSH
// begin enable ;
21082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21083: LD_ADDR_VAR 0 2
21087: PUSH
21088: LD_INT 22
21090: PUSH
21091: LD_OWVAR 2
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: LD_INT 34
21105: PUSH
21106: LD_INT 7
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 34
21115: PUSH
21116: LD_INT 45
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 34
21125: PUSH
21126: LD_INT 28
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 34
21135: PUSH
21136: LD_INT 47
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PPUSH
21154: CALL_OW 69
21158: ST_TO_ADDR
// if not tmp then
21159: LD_VAR 0 2
21163: NOT
21164: IFFALSE 21168
// exit ;
21166: GO 21197
// for i in tmp do
21168: LD_ADDR_VAR 0 1
21172: PUSH
21173: LD_VAR 0 2
21177: PUSH
21178: FOR_IN
21179: IFFALSE 21195
// begin SetLives ( i , 0 ) ;
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_INT 0
21188: PPUSH
21189: CALL_OW 234
// end ;
21193: GO 21178
21195: POP
21196: POP
// end ;
21197: PPOPN 2
21199: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21200: LD_EXP 37
21204: PUSH
21205: LD_EXP 43
21209: AND
21210: IFFALSE 21294
21212: GO 21214
21214: DISABLE
21215: LD_INT 0
21217: PPUSH
21218: PPUSH
// begin enable ;
21219: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21220: LD_ADDR_VAR 0 2
21224: PUSH
21225: LD_INT 22
21227: PUSH
21228: LD_OWVAR 2
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 32
21239: PUSH
21240: LD_INT 3
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PPUSH
21251: CALL_OW 69
21255: ST_TO_ADDR
// if not tmp then
21256: LD_VAR 0 2
21260: NOT
21261: IFFALSE 21265
// exit ;
21263: GO 21294
// for i in tmp do
21265: LD_ADDR_VAR 0 1
21269: PUSH
21270: LD_VAR 0 2
21274: PUSH
21275: FOR_IN
21276: IFFALSE 21292
// begin SetLives ( i , 0 ) ;
21278: LD_VAR 0 1
21282: PPUSH
21283: LD_INT 0
21285: PPUSH
21286: CALL_OW 234
// end ;
21290: GO 21275
21292: POP
21293: POP
// end ;
21294: PPOPN 2
21296: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21297: LD_EXP 37
21301: PUSH
21302: LD_EXP 40
21306: AND
21307: IFFALSE 21400
21309: GO 21311
21311: DISABLE
21312: LD_INT 0
21314: PPUSH
// begin enable ;
21315: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21316: LD_ADDR_VAR 0 1
21320: PUSH
21321: LD_INT 22
21323: PUSH
21324: LD_OWVAR 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: LD_INT 25
21338: PUSH
21339: LD_INT 5
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 25
21348: PUSH
21349: LD_INT 9
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 8
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PPUSH
21376: CALL_OW 69
21380: PUSH
21381: FOR_IN
21382: IFFALSE 21398
// begin SetClass ( i , 1 ) ;
21384: LD_VAR 0 1
21388: PPUSH
21389: LD_INT 1
21391: PPUSH
21392: CALL_OW 336
// end ;
21396: GO 21381
21398: POP
21399: POP
// end ;
21400: PPOPN 1
21402: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21403: LD_EXP 37
21407: PUSH
21408: LD_EXP 41
21412: AND
21413: PUSH
21414: LD_OWVAR 65
21418: PUSH
21419: LD_INT 7
21421: LESS
21422: AND
21423: IFFALSE 21437
21425: GO 21427
21427: DISABLE
// begin enable ;
21428: ENABLE
// game_speed := 7 ;
21429: LD_ADDR_OWVAR 65
21433: PUSH
21434: LD_INT 7
21436: ST_TO_ADDR
// end ;
21437: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21438: LD_EXP 37
21442: PUSH
21443: LD_EXP 44
21447: AND
21448: IFFALSE 21650
21450: GO 21452
21452: DISABLE
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
21457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21458: LD_ADDR_VAR 0 3
21462: PUSH
21463: LD_INT 81
21465: PUSH
21466: LD_OWVAR 2
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 21
21477: PUSH
21478: LD_INT 1
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PPUSH
21489: CALL_OW 69
21493: ST_TO_ADDR
// if not tmp then
21494: LD_VAR 0 3
21498: NOT
21499: IFFALSE 21503
// exit ;
21501: GO 21650
// if tmp > 5 then
21503: LD_VAR 0 3
21507: PUSH
21508: LD_INT 5
21510: GREATER
21511: IFFALSE 21523
// k := 5 else
21513: LD_ADDR_VAR 0 2
21517: PUSH
21518: LD_INT 5
21520: ST_TO_ADDR
21521: GO 21533
// k := tmp ;
21523: LD_ADDR_VAR 0 2
21527: PUSH
21528: LD_VAR 0 3
21532: ST_TO_ADDR
// for i := 1 to k do
21533: LD_ADDR_VAR 0 1
21537: PUSH
21538: DOUBLE
21539: LD_INT 1
21541: DEC
21542: ST_TO_ADDR
21543: LD_VAR 0 2
21547: PUSH
21548: FOR_TO
21549: IFFALSE 21648
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21551: LD_VAR 0 3
21555: PUSH
21556: LD_VAR 0 1
21560: ARRAY
21561: PPUSH
21562: LD_VAR 0 1
21566: PUSH
21567: LD_INT 4
21569: MOD
21570: PUSH
21571: LD_INT 1
21573: PLUS
21574: PPUSH
21575: CALL_OW 259
21579: PUSH
21580: LD_INT 10
21582: LESS
21583: IFFALSE 21646
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21585: LD_VAR 0 3
21589: PUSH
21590: LD_VAR 0 1
21594: ARRAY
21595: PPUSH
21596: LD_VAR 0 1
21600: PUSH
21601: LD_INT 4
21603: MOD
21604: PUSH
21605: LD_INT 1
21607: PLUS
21608: PPUSH
21609: LD_VAR 0 3
21613: PUSH
21614: LD_VAR 0 1
21618: ARRAY
21619: PPUSH
21620: LD_VAR 0 1
21624: PUSH
21625: LD_INT 4
21627: MOD
21628: PUSH
21629: LD_INT 1
21631: PLUS
21632: PPUSH
21633: CALL_OW 259
21637: PUSH
21638: LD_INT 1
21640: PLUS
21641: PPUSH
21642: CALL_OW 237
21646: GO 21548
21648: POP
21649: POP
// end ;
21650: PPOPN 3
21652: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21653: LD_EXP 37
21657: PUSH
21658: LD_EXP 45
21662: AND
21663: IFFALSE 21683
21665: GO 21667
21667: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21668: LD_INT 4
21670: PPUSH
21671: LD_OWVAR 2
21675: PPUSH
21676: LD_INT 0
21678: PPUSH
21679: CALL_OW 324
21683: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21684: LD_EXP 37
21688: PUSH
21689: LD_EXP 74
21693: AND
21694: IFFALSE 21714
21696: GO 21698
21698: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21699: LD_INT 19
21701: PPUSH
21702: LD_OWVAR 2
21706: PPUSH
21707: LD_INT 0
21709: PPUSH
21710: CALL_OW 324
21714: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21715: LD_EXP 37
21719: PUSH
21720: LD_EXP 46
21724: AND
21725: IFFALSE 21827
21727: GO 21729
21729: DISABLE
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
// begin enable ;
21734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21735: LD_ADDR_VAR 0 2
21739: PUSH
21740: LD_INT 22
21742: PUSH
21743: LD_OWVAR 2
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: LD_INT 34
21757: PUSH
21758: LD_INT 11
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 34
21767: PUSH
21768: LD_INT 30
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 69
21788: ST_TO_ADDR
// if not tmp then
21789: LD_VAR 0 2
21793: NOT
21794: IFFALSE 21798
// exit ;
21796: GO 21827
// for i in tmp do
21798: LD_ADDR_VAR 0 1
21802: PUSH
21803: LD_VAR 0 2
21807: PUSH
21808: FOR_IN
21809: IFFALSE 21825
// begin SetLives ( i , 0 ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: LD_INT 0
21818: PPUSH
21819: CALL_OW 234
// end ;
21823: GO 21808
21825: POP
21826: POP
// end ;
21827: PPOPN 2
21829: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21830: LD_EXP 37
21834: PUSH
21835: LD_EXP 47
21839: AND
21840: IFFALSE 21860
21842: GO 21844
21844: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21845: LD_INT 32
21847: PPUSH
21848: LD_OWVAR 2
21852: PPUSH
21853: LD_INT 0
21855: PPUSH
21856: CALL_OW 324
21860: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21861: LD_EXP 37
21865: PUSH
21866: LD_EXP 48
21870: AND
21871: IFFALSE 22052
21873: GO 21875
21875: DISABLE
21876: LD_INT 0
21878: PPUSH
21879: PPUSH
21880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21881: LD_ADDR_VAR 0 2
21885: PUSH
21886: LD_INT 22
21888: PUSH
21889: LD_OWVAR 2
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 33
21900: PUSH
21901: LD_INT 3
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PPUSH
21912: CALL_OW 69
21916: ST_TO_ADDR
// if not tmp then
21917: LD_VAR 0 2
21921: NOT
21922: IFFALSE 21926
// exit ;
21924: GO 22052
// side := 0 ;
21926: LD_ADDR_VAR 0 3
21930: PUSH
21931: LD_INT 0
21933: ST_TO_ADDR
// for i := 1 to 8 do
21934: LD_ADDR_VAR 0 1
21938: PUSH
21939: DOUBLE
21940: LD_INT 1
21942: DEC
21943: ST_TO_ADDR
21944: LD_INT 8
21946: PUSH
21947: FOR_TO
21948: IFFALSE 21996
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21950: LD_OWVAR 2
21954: PUSH
21955: LD_VAR 0 1
21959: NONEQUAL
21960: PUSH
21961: LD_OWVAR 2
21965: PPUSH
21966: LD_VAR 0 1
21970: PPUSH
21971: CALL_OW 81
21975: PUSH
21976: LD_INT 2
21978: EQUAL
21979: AND
21980: IFFALSE 21994
// begin side := i ;
21982: LD_ADDR_VAR 0 3
21986: PUSH
21987: LD_VAR 0 1
21991: ST_TO_ADDR
// break ;
21992: GO 21996
// end ;
21994: GO 21947
21996: POP
21997: POP
// if not side then
21998: LD_VAR 0 3
22002: NOT
22003: IFFALSE 22007
// exit ;
22005: GO 22052
// for i := 1 to tmp do
22007: LD_ADDR_VAR 0 1
22011: PUSH
22012: DOUBLE
22013: LD_INT 1
22015: DEC
22016: ST_TO_ADDR
22017: LD_VAR 0 2
22021: PUSH
22022: FOR_TO
22023: IFFALSE 22050
// if Prob ( 60 ) then
22025: LD_INT 60
22027: PPUSH
22028: CALL_OW 13
22032: IFFALSE 22048
// SetSide ( i , side ) ;
22034: LD_VAR 0 1
22038: PPUSH
22039: LD_VAR 0 3
22043: PPUSH
22044: CALL_OW 235
22048: GO 22022
22050: POP
22051: POP
// end ;
22052: PPOPN 3
22054: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22055: LD_EXP 37
22059: PUSH
22060: LD_EXP 50
22064: AND
22065: IFFALSE 22184
22067: GO 22069
22069: DISABLE
22070: LD_INT 0
22072: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22073: LD_ADDR_VAR 0 1
22077: PUSH
22078: LD_INT 22
22080: PUSH
22081: LD_OWVAR 2
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 21
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: LD_INT 23
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: PPUSH
22122: CALL_OW 69
22126: PUSH
22127: FOR_IN
22128: IFFALSE 22182
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22130: LD_VAR 0 1
22134: PPUSH
22135: CALL_OW 257
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: LD_INT 3
22148: PUSH
22149: LD_INT 4
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: IN
22158: IFFALSE 22180
// SetClass ( un , rand ( 1 , 4 ) ) ;
22160: LD_VAR 0 1
22164: PPUSH
22165: LD_INT 1
22167: PPUSH
22168: LD_INT 4
22170: PPUSH
22171: CALL_OW 12
22175: PPUSH
22176: CALL_OW 336
22180: GO 22127
22182: POP
22183: POP
// end ;
22184: PPOPN 1
22186: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22187: LD_EXP 37
22191: PUSH
22192: LD_EXP 49
22196: AND
22197: IFFALSE 22276
22199: GO 22201
22201: DISABLE
22202: LD_INT 0
22204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22205: LD_ADDR_VAR 0 1
22209: PUSH
22210: LD_INT 22
22212: PUSH
22213: LD_OWVAR 2
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 21
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PPUSH
22236: CALL_OW 69
22240: ST_TO_ADDR
// if not tmp then
22241: LD_VAR 0 1
22245: NOT
22246: IFFALSE 22250
// exit ;
22248: GO 22276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22250: LD_VAR 0 1
22254: PUSH
22255: LD_INT 1
22257: PPUSH
22258: LD_VAR 0 1
22262: PPUSH
22263: CALL_OW 12
22267: ARRAY
22268: PPUSH
22269: LD_INT 100
22271: PPUSH
22272: CALL_OW 234
// end ;
22276: PPOPN 1
22278: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22279: LD_EXP 37
22283: PUSH
22284: LD_EXP 51
22288: AND
22289: IFFALSE 22387
22291: GO 22293
22293: DISABLE
22294: LD_INT 0
22296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22297: LD_ADDR_VAR 0 1
22301: PUSH
22302: LD_INT 22
22304: PUSH
22305: LD_OWVAR 2
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 21
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PPUSH
22328: CALL_OW 69
22332: ST_TO_ADDR
// if not tmp then
22333: LD_VAR 0 1
22337: NOT
22338: IFFALSE 22342
// exit ;
22340: GO 22387
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22342: LD_VAR 0 1
22346: PUSH
22347: LD_INT 1
22349: PPUSH
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 12
22359: ARRAY
22360: PPUSH
22361: LD_INT 1
22363: PPUSH
22364: LD_INT 4
22366: PPUSH
22367: CALL_OW 12
22371: PPUSH
22372: LD_INT 3000
22374: PPUSH
22375: LD_INT 9000
22377: PPUSH
22378: CALL_OW 12
22382: PPUSH
22383: CALL_OW 492
// end ;
22387: PPOPN 1
22389: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22390: LD_EXP 37
22394: PUSH
22395: LD_EXP 52
22399: AND
22400: IFFALSE 22420
22402: GO 22404
22404: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22405: LD_INT 1
22407: PPUSH
22408: LD_OWVAR 2
22412: PPUSH
22413: LD_INT 0
22415: PPUSH
22416: CALL_OW 324
22420: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22421: LD_EXP 37
22425: PUSH
22426: LD_EXP 53
22430: AND
22431: IFFALSE 22514
22433: GO 22435
22435: DISABLE
22436: LD_INT 0
22438: PPUSH
22439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22440: LD_ADDR_VAR 0 2
22444: PUSH
22445: LD_INT 22
22447: PUSH
22448: LD_OWVAR 2
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 21
22459: PUSH
22460: LD_INT 3
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PPUSH
22471: CALL_OW 69
22475: ST_TO_ADDR
// if not tmp then
22476: LD_VAR 0 2
22480: NOT
22481: IFFALSE 22485
// exit ;
22483: GO 22514
// for i in tmp do
22485: LD_ADDR_VAR 0 1
22489: PUSH
22490: LD_VAR 0 2
22494: PUSH
22495: FOR_IN
22496: IFFALSE 22512
// SetBLevel ( i , 10 ) ;
22498: LD_VAR 0 1
22502: PPUSH
22503: LD_INT 10
22505: PPUSH
22506: CALL_OW 241
22510: GO 22495
22512: POP
22513: POP
// end ;
22514: PPOPN 2
22516: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22517: LD_EXP 37
22521: PUSH
22522: LD_EXP 54
22526: AND
22527: IFFALSE 22638
22529: GO 22531
22531: DISABLE
22532: LD_INT 0
22534: PPUSH
22535: PPUSH
22536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22537: LD_ADDR_VAR 0 3
22541: PUSH
22542: LD_INT 22
22544: PUSH
22545: LD_OWVAR 2
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 25
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: ST_TO_ADDR
// if not tmp then
22573: LD_VAR 0 3
22577: NOT
22578: IFFALSE 22582
// exit ;
22580: GO 22638
// un := tmp [ rand ( 1 , tmp ) ] ;
22582: LD_ADDR_VAR 0 2
22586: PUSH
22587: LD_VAR 0 3
22591: PUSH
22592: LD_INT 1
22594: PPUSH
22595: LD_VAR 0 3
22599: PPUSH
22600: CALL_OW 12
22604: ARRAY
22605: ST_TO_ADDR
// if Crawls ( un ) then
22606: LD_VAR 0 2
22610: PPUSH
22611: CALL_OW 318
22615: IFFALSE 22626
// ComWalk ( un ) ;
22617: LD_VAR 0 2
22621: PPUSH
22622: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22626: LD_VAR 0 2
22630: PPUSH
22631: LD_INT 5
22633: PPUSH
22634: CALL_OW 336
// end ;
22638: PPOPN 3
22640: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22641: LD_EXP 37
22645: PUSH
22646: LD_EXP 55
22650: AND
22651: PUSH
22652: LD_OWVAR 67
22656: PUSH
22657: LD_INT 4
22659: LESS
22660: AND
22661: IFFALSE 22680
22663: GO 22665
22665: DISABLE
// begin Difficulty := Difficulty + 1 ;
22666: LD_ADDR_OWVAR 67
22670: PUSH
22671: LD_OWVAR 67
22675: PUSH
22676: LD_INT 1
22678: PLUS
22679: ST_TO_ADDR
// end ;
22680: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22681: LD_EXP 37
22685: PUSH
22686: LD_EXP 56
22690: AND
22691: IFFALSE 22794
22693: GO 22695
22695: DISABLE
22696: LD_INT 0
22698: PPUSH
// begin for i := 1 to 5 do
22699: LD_ADDR_VAR 0 1
22703: PUSH
22704: DOUBLE
22705: LD_INT 1
22707: DEC
22708: ST_TO_ADDR
22709: LD_INT 5
22711: PUSH
22712: FOR_TO
22713: IFFALSE 22792
// begin uc_nation := nation_nature ;
22715: LD_ADDR_OWVAR 21
22719: PUSH
22720: LD_INT 0
22722: ST_TO_ADDR
// uc_side := 0 ;
22723: LD_ADDR_OWVAR 20
22727: PUSH
22728: LD_INT 0
22730: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22731: LD_ADDR_OWVAR 29
22735: PUSH
22736: LD_INT 12
22738: PUSH
22739: LD_INT 12
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: ST_TO_ADDR
// hc_agressivity := 20 ;
22746: LD_ADDR_OWVAR 35
22750: PUSH
22751: LD_INT 20
22753: ST_TO_ADDR
// hc_class := class_tiger ;
22754: LD_ADDR_OWVAR 28
22758: PUSH
22759: LD_INT 14
22761: ST_TO_ADDR
// hc_gallery :=  ;
22762: LD_ADDR_OWVAR 33
22766: PUSH
22767: LD_STRING 
22769: ST_TO_ADDR
// hc_name :=  ;
22770: LD_ADDR_OWVAR 26
22774: PUSH
22775: LD_STRING 
22777: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22778: CALL_OW 44
22782: PPUSH
22783: LD_INT 0
22785: PPUSH
22786: CALL_OW 51
// end ;
22790: GO 22712
22792: POP
22793: POP
// end ;
22794: PPOPN 1
22796: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22797: LD_EXP 37
22801: PUSH
22802: LD_EXP 57
22806: AND
22807: IFFALSE 22816
22809: GO 22811
22811: DISABLE
// StreamSibBomb ;
22812: CALL 22817 0 0
22816: END
// export function StreamSibBomb ; var i , x , y ; begin
22817: LD_INT 0
22819: PPUSH
22820: PPUSH
22821: PPUSH
22822: PPUSH
// result := false ;
22823: LD_ADDR_VAR 0 1
22827: PUSH
22828: LD_INT 0
22830: ST_TO_ADDR
// for i := 1 to 16 do
22831: LD_ADDR_VAR 0 2
22835: PUSH
22836: DOUBLE
22837: LD_INT 1
22839: DEC
22840: ST_TO_ADDR
22841: LD_INT 16
22843: PUSH
22844: FOR_TO
22845: IFFALSE 23044
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22847: LD_ADDR_VAR 0 3
22851: PUSH
22852: LD_INT 10
22854: PUSH
22855: LD_INT 20
22857: PUSH
22858: LD_INT 30
22860: PUSH
22861: LD_INT 40
22863: PUSH
22864: LD_INT 50
22866: PUSH
22867: LD_INT 60
22869: PUSH
22870: LD_INT 70
22872: PUSH
22873: LD_INT 80
22875: PUSH
22876: LD_INT 90
22878: PUSH
22879: LD_INT 100
22881: PUSH
22882: LD_INT 110
22884: PUSH
22885: LD_INT 120
22887: PUSH
22888: LD_INT 130
22890: PUSH
22891: LD_INT 140
22893: PUSH
22894: LD_INT 150
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: PPUSH
22917: LD_INT 15
22919: PPUSH
22920: CALL_OW 12
22924: ARRAY
22925: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22926: LD_ADDR_VAR 0 4
22930: PUSH
22931: LD_INT 10
22933: PUSH
22934: LD_INT 20
22936: PUSH
22937: LD_INT 30
22939: PUSH
22940: LD_INT 40
22942: PUSH
22943: LD_INT 50
22945: PUSH
22946: LD_INT 60
22948: PUSH
22949: LD_INT 70
22951: PUSH
22952: LD_INT 80
22954: PUSH
22955: LD_INT 90
22957: PUSH
22958: LD_INT 100
22960: PUSH
22961: LD_INT 110
22963: PUSH
22964: LD_INT 120
22966: PUSH
22967: LD_INT 130
22969: PUSH
22970: LD_INT 140
22972: PUSH
22973: LD_INT 150
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 1
22995: PPUSH
22996: LD_INT 15
22998: PPUSH
22999: CALL_OW 12
23003: ARRAY
23004: ST_TO_ADDR
// if ValidHex ( x , y ) then
23005: LD_VAR 0 3
23009: PPUSH
23010: LD_VAR 0 4
23014: PPUSH
23015: CALL_OW 488
23019: IFFALSE 23042
// begin result := [ x , y ] ;
23021: LD_ADDR_VAR 0 1
23025: PUSH
23026: LD_VAR 0 3
23030: PUSH
23031: LD_VAR 0 4
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: ST_TO_ADDR
// break ;
23040: GO 23044
// end ; end ;
23042: GO 22844
23044: POP
23045: POP
// if result then
23046: LD_VAR 0 1
23050: IFFALSE 23110
// begin ToLua ( playSibBomb() ) ;
23052: LD_STRING playSibBomb()
23054: PPUSH
23055: CALL_OW 559
// wait ( 0 0$14 ) ;
23059: LD_INT 490
23061: PPUSH
23062: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23066: LD_VAR 0 1
23070: PUSH
23071: LD_INT 1
23073: ARRAY
23074: PPUSH
23075: LD_VAR 0 1
23079: PUSH
23080: LD_INT 2
23082: ARRAY
23083: PPUSH
23084: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23088: LD_VAR 0 1
23092: PUSH
23093: LD_INT 1
23095: ARRAY
23096: PPUSH
23097: LD_VAR 0 1
23101: PUSH
23102: LD_INT 2
23104: ARRAY
23105: PPUSH
23106: CALL_OW 429
// end ; end ;
23110: LD_VAR 0 1
23114: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23115: LD_EXP 37
23119: PUSH
23120: LD_EXP 59
23124: AND
23125: IFFALSE 23137
23127: GO 23129
23129: DISABLE
// YouLost (  ) ;
23130: LD_STRING 
23132: PPUSH
23133: CALL_OW 104
23137: END
// every 0 0$1 trigger StreamModeActive and sFog do
23138: LD_EXP 37
23142: PUSH
23143: LD_EXP 58
23147: AND
23148: IFFALSE 23162
23150: GO 23152
23152: DISABLE
// FogOff ( your_side ) ;
23153: LD_OWVAR 2
23157: PPUSH
23158: CALL_OW 344
23162: END
// every 0 0$1 trigger StreamModeActive and sSun do
23163: LD_EXP 37
23167: PUSH
23168: LD_EXP 60
23172: AND
23173: IFFALSE 23201
23175: GO 23177
23177: DISABLE
// begin solar_recharge_percent := 0 ;
23178: LD_ADDR_OWVAR 79
23182: PUSH
23183: LD_INT 0
23185: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23186: LD_INT 10500
23188: PPUSH
23189: CALL_OW 67
// solar_recharge_percent := 100 ;
23193: LD_ADDR_OWVAR 79
23197: PUSH
23198: LD_INT 100
23200: ST_TO_ADDR
// end ;
23201: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23202: LD_EXP 37
23206: PUSH
23207: LD_EXP 61
23211: AND
23212: IFFALSE 23451
23214: GO 23216
23216: DISABLE
23217: LD_INT 0
23219: PPUSH
23220: PPUSH
23221: PPUSH
// begin tmp := [ ] ;
23222: LD_ADDR_VAR 0 3
23226: PUSH
23227: EMPTY
23228: ST_TO_ADDR
// for i := 1 to 6 do
23229: LD_ADDR_VAR 0 1
23233: PUSH
23234: DOUBLE
23235: LD_INT 1
23237: DEC
23238: ST_TO_ADDR
23239: LD_INT 6
23241: PUSH
23242: FOR_TO
23243: IFFALSE 23348
// begin uc_nation := nation_nature ;
23245: LD_ADDR_OWVAR 21
23249: PUSH
23250: LD_INT 0
23252: ST_TO_ADDR
// uc_side := 0 ;
23253: LD_ADDR_OWVAR 20
23257: PUSH
23258: LD_INT 0
23260: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23261: LD_ADDR_OWVAR 29
23265: PUSH
23266: LD_INT 12
23268: PUSH
23269: LD_INT 12
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: ST_TO_ADDR
// hc_agressivity := 20 ;
23276: LD_ADDR_OWVAR 35
23280: PUSH
23281: LD_INT 20
23283: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23284: LD_ADDR_OWVAR 28
23288: PUSH
23289: LD_INT 17
23291: ST_TO_ADDR
// hc_gallery :=  ;
23292: LD_ADDR_OWVAR 33
23296: PUSH
23297: LD_STRING 
23299: ST_TO_ADDR
// hc_name :=  ;
23300: LD_ADDR_OWVAR 26
23304: PUSH
23305: LD_STRING 
23307: ST_TO_ADDR
// un := CreateHuman ;
23308: LD_ADDR_VAR 0 2
23312: PUSH
23313: CALL_OW 44
23317: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23318: LD_VAR 0 2
23322: PPUSH
23323: LD_INT 1
23325: PPUSH
23326: CALL_OW 51
// tmp := tmp ^ un ;
23330: LD_ADDR_VAR 0 3
23334: PUSH
23335: LD_VAR 0 3
23339: PUSH
23340: LD_VAR 0 2
23344: ADD
23345: ST_TO_ADDR
// end ;
23346: GO 23242
23348: POP
23349: POP
// repeat wait ( 0 0$1 ) ;
23350: LD_INT 35
23352: PPUSH
23353: CALL_OW 67
// for un in tmp do
23357: LD_ADDR_VAR 0 2
23361: PUSH
23362: LD_VAR 0 3
23366: PUSH
23367: FOR_IN
23368: IFFALSE 23442
// begin if IsDead ( un ) then
23370: LD_VAR 0 2
23374: PPUSH
23375: CALL_OW 301
23379: IFFALSE 23399
// begin tmp := tmp diff un ;
23381: LD_ADDR_VAR 0 3
23385: PUSH
23386: LD_VAR 0 3
23390: PUSH
23391: LD_VAR 0 2
23395: DIFF
23396: ST_TO_ADDR
// continue ;
23397: GO 23367
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23399: LD_VAR 0 2
23403: PPUSH
23404: LD_INT 3
23406: PUSH
23407: LD_INT 22
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PPUSH
23421: CALL_OW 69
23425: PPUSH
23426: LD_VAR 0 2
23430: PPUSH
23431: CALL_OW 74
23435: PPUSH
23436: CALL_OW 115
// end ;
23440: GO 23367
23442: POP
23443: POP
// until not tmp ;
23444: LD_VAR 0 3
23448: NOT
23449: IFFALSE 23350
// end ;
23451: PPOPN 3
23453: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23454: LD_EXP 37
23458: PUSH
23459: LD_EXP 62
23463: AND
23464: IFFALSE 23518
23466: GO 23468
23468: DISABLE
// begin ToLua ( displayTroll(); ) ;
23469: LD_STRING displayTroll();
23471: PPUSH
23472: CALL_OW 559
// wait ( 3 3$00 ) ;
23476: LD_INT 6300
23478: PPUSH
23479: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23483: LD_STRING hideTroll();
23485: PPUSH
23486: CALL_OW 559
// wait ( 1 1$00 ) ;
23490: LD_INT 2100
23492: PPUSH
23493: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23497: LD_STRING displayTroll();
23499: PPUSH
23500: CALL_OW 559
// wait ( 1 1$00 ) ;
23504: LD_INT 2100
23506: PPUSH
23507: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23511: LD_STRING hideTroll();
23513: PPUSH
23514: CALL_OW 559
// end ;
23518: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23519: LD_EXP 37
23523: PUSH
23524: LD_EXP 63
23528: AND
23529: IFFALSE 23592
23531: GO 23533
23533: DISABLE
23534: LD_INT 0
23536: PPUSH
// begin p := 0 ;
23537: LD_ADDR_VAR 0 1
23541: PUSH
23542: LD_INT 0
23544: ST_TO_ADDR
// repeat game_speed := 1 ;
23545: LD_ADDR_OWVAR 65
23549: PUSH
23550: LD_INT 1
23552: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23553: LD_INT 35
23555: PPUSH
23556: CALL_OW 67
// p := p + 1 ;
23560: LD_ADDR_VAR 0 1
23564: PUSH
23565: LD_VAR 0 1
23569: PUSH
23570: LD_INT 1
23572: PLUS
23573: ST_TO_ADDR
// until p >= 60 ;
23574: LD_VAR 0 1
23578: PUSH
23579: LD_INT 60
23581: GREATEREQUAL
23582: IFFALSE 23545
// game_speed := 4 ;
23584: LD_ADDR_OWVAR 65
23588: PUSH
23589: LD_INT 4
23591: ST_TO_ADDR
// end ;
23592: PPOPN 1
23594: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23595: LD_EXP 37
23599: PUSH
23600: LD_EXP 64
23604: AND
23605: IFFALSE 23751
23607: GO 23609
23609: DISABLE
23610: LD_INT 0
23612: PPUSH
23613: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23614: LD_ADDR_VAR 0 1
23618: PUSH
23619: LD_INT 22
23621: PUSH
23622: LD_OWVAR 2
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: LD_INT 30
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 30
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PPUSH
23663: CALL_OW 69
23667: ST_TO_ADDR
// if not depot then
23668: LD_VAR 0 1
23672: NOT
23673: IFFALSE 23677
// exit ;
23675: GO 23751
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23677: LD_ADDR_VAR 0 2
23681: PUSH
23682: LD_VAR 0 1
23686: PUSH
23687: LD_INT 1
23689: PPUSH
23690: LD_VAR 0 1
23694: PPUSH
23695: CALL_OW 12
23699: ARRAY
23700: PPUSH
23701: CALL_OW 274
23705: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23706: LD_VAR 0 2
23710: PPUSH
23711: LD_INT 1
23713: PPUSH
23714: LD_INT 0
23716: PPUSH
23717: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23721: LD_VAR 0 2
23725: PPUSH
23726: LD_INT 2
23728: PPUSH
23729: LD_INT 0
23731: PPUSH
23732: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23736: LD_VAR 0 2
23740: PPUSH
23741: LD_INT 3
23743: PPUSH
23744: LD_INT 0
23746: PPUSH
23747: CALL_OW 277
// end ;
23751: PPOPN 2
23753: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23754: LD_EXP 37
23758: PUSH
23759: LD_EXP 65
23763: AND
23764: IFFALSE 23861
23766: GO 23768
23768: DISABLE
23769: LD_INT 0
23771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23772: LD_ADDR_VAR 0 1
23776: PUSH
23777: LD_INT 22
23779: PUSH
23780: LD_OWVAR 2
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 21
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 3
23801: PUSH
23802: LD_INT 23
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: PPUSH
23821: CALL_OW 69
23825: ST_TO_ADDR
// if not tmp then
23826: LD_VAR 0 1
23830: NOT
23831: IFFALSE 23835
// exit ;
23833: GO 23861
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23835: LD_VAR 0 1
23839: PUSH
23840: LD_INT 1
23842: PPUSH
23843: LD_VAR 0 1
23847: PPUSH
23848: CALL_OW 12
23852: ARRAY
23853: PPUSH
23854: LD_INT 200
23856: PPUSH
23857: CALL_OW 234
// end ;
23861: PPOPN 1
23863: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23864: LD_EXP 37
23868: PUSH
23869: LD_EXP 66
23873: AND
23874: IFFALSE 23953
23876: GO 23878
23878: DISABLE
23879: LD_INT 0
23881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23882: LD_ADDR_VAR 0 1
23886: PUSH
23887: LD_INT 22
23889: PUSH
23890: LD_OWVAR 2
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 21
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 69
23917: ST_TO_ADDR
// if not tmp then
23918: LD_VAR 0 1
23922: NOT
23923: IFFALSE 23927
// exit ;
23925: GO 23953
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23927: LD_VAR 0 1
23931: PUSH
23932: LD_INT 1
23934: PPUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 12
23944: ARRAY
23945: PPUSH
23946: LD_INT 60
23948: PPUSH
23949: CALL_OW 234
// end ;
23953: PPOPN 1
23955: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23956: LD_EXP 37
23960: PUSH
23961: LD_EXP 67
23965: AND
23966: IFFALSE 24065
23968: GO 23970
23970: DISABLE
23971: LD_INT 0
23973: PPUSH
23974: PPUSH
// begin enable ;
23975: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 22
23983: PUSH
23984: LD_OWVAR 2
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 61
23995: PUSH
23996: EMPTY
23997: LIST
23998: PUSH
23999: LD_INT 33
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: PPUSH
24014: CALL_OW 69
24018: ST_TO_ADDR
// if not tmp then
24019: LD_VAR 0 1
24023: NOT
24024: IFFALSE 24028
// exit ;
24026: GO 24065
// for i in tmp do
24028: LD_ADDR_VAR 0 2
24032: PUSH
24033: LD_VAR 0 1
24037: PUSH
24038: FOR_IN
24039: IFFALSE 24063
// if IsControledBy ( i ) then
24041: LD_VAR 0 2
24045: PPUSH
24046: CALL_OW 312
24050: IFFALSE 24061
// ComUnlink ( i ) ;
24052: LD_VAR 0 2
24056: PPUSH
24057: CALL_OW 136
24061: GO 24038
24063: POP
24064: POP
// end ;
24065: PPOPN 2
24067: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24068: LD_EXP 37
24072: PUSH
24073: LD_EXP 68
24077: AND
24078: IFFALSE 24218
24080: GO 24082
24082: DISABLE
24083: LD_INT 0
24085: PPUSH
24086: PPUSH
// begin ToLua ( displayPowell(); ) ;
24087: LD_STRING displayPowell();
24089: PPUSH
24090: CALL_OW 559
// uc_side := 0 ;
24094: LD_ADDR_OWVAR 20
24098: PUSH
24099: LD_INT 0
24101: ST_TO_ADDR
// uc_nation := 2 ;
24102: LD_ADDR_OWVAR 21
24106: PUSH
24107: LD_INT 2
24109: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24110: LD_ADDR_OWVAR 37
24114: PUSH
24115: LD_INT 14
24117: ST_TO_ADDR
// vc_engine := engine_siberite ;
24118: LD_ADDR_OWVAR 39
24122: PUSH
24123: LD_INT 3
24125: ST_TO_ADDR
// vc_control := control_apeman ;
24126: LD_ADDR_OWVAR 38
24130: PUSH
24131: LD_INT 5
24133: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24134: LD_ADDR_OWVAR 40
24138: PUSH
24139: LD_INT 29
24141: ST_TO_ADDR
// un := CreateVehicle ;
24142: LD_ADDR_VAR 0 2
24146: PUSH
24147: CALL_OW 45
24151: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24152: LD_VAR 0 2
24156: PPUSH
24157: LD_INT 1
24159: PPUSH
24160: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24164: LD_INT 35
24166: PPUSH
24167: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24171: LD_VAR 0 2
24175: PPUSH
24176: LD_INT 22
24178: PUSH
24179: LD_OWVAR 2
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PPUSH
24188: CALL_OW 69
24192: PPUSH
24193: LD_VAR 0 2
24197: PPUSH
24198: CALL_OW 74
24202: PPUSH
24203: CALL_OW 115
// until IsDead ( un ) ;
24207: LD_VAR 0 2
24211: PPUSH
24212: CALL_OW 301
24216: IFFALSE 24164
// end ;
24218: PPOPN 2
24220: END
// every 0 0$1 trigger StreamModeActive and sStu do
24221: LD_EXP 37
24225: PUSH
24226: LD_EXP 76
24230: AND
24231: IFFALSE 24247
24233: GO 24235
24235: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24236: LD_STRING displayStucuk();
24238: PPUSH
24239: CALL_OW 559
// ResetFog ;
24243: CALL_OW 335
// end ;
24247: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24248: LD_EXP 37
24252: PUSH
24253: LD_EXP 69
24257: AND
24258: IFFALSE 24399
24260: GO 24262
24262: DISABLE
24263: LD_INT 0
24265: PPUSH
24266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24267: LD_ADDR_VAR 0 2
24271: PUSH
24272: LD_INT 22
24274: PUSH
24275: LD_OWVAR 2
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 21
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 69
24302: ST_TO_ADDR
// if not tmp then
24303: LD_VAR 0 2
24307: NOT
24308: IFFALSE 24312
// exit ;
24310: GO 24399
// un := tmp [ rand ( 1 , tmp ) ] ;
24312: LD_ADDR_VAR 0 1
24316: PUSH
24317: LD_VAR 0 2
24321: PUSH
24322: LD_INT 1
24324: PPUSH
24325: LD_VAR 0 2
24329: PPUSH
24330: CALL_OW 12
24334: ARRAY
24335: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24336: LD_VAR 0 1
24340: PPUSH
24341: LD_INT 0
24343: PPUSH
24344: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_OWVAR 3
24357: PUSH
24358: LD_VAR 0 1
24362: DIFF
24363: PPUSH
24364: LD_VAR 0 1
24368: PPUSH
24369: CALL_OW 74
24373: PPUSH
24374: CALL_OW 115
// wait ( 0 0$20 ) ;
24378: LD_INT 700
24380: PPUSH
24381: CALL_OW 67
// SetSide ( un , your_side ) ;
24385: LD_VAR 0 1
24389: PPUSH
24390: LD_OWVAR 2
24394: PPUSH
24395: CALL_OW 235
// end ;
24399: PPOPN 2
24401: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24402: LD_EXP 37
24406: PUSH
24407: LD_EXP 70
24411: AND
24412: IFFALSE 24518
24414: GO 24416
24416: DISABLE
24417: LD_INT 0
24419: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24420: LD_ADDR_VAR 0 1
24424: PUSH
24425: LD_INT 22
24427: PUSH
24428: LD_OWVAR 2
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 2
24439: PUSH
24440: LD_INT 30
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 30
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 69
24473: ST_TO_ADDR
// if not depot then
24474: LD_VAR 0 1
24478: NOT
24479: IFFALSE 24483
// exit ;
24481: GO 24518
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24483: LD_VAR 0 1
24487: PUSH
24488: LD_INT 1
24490: ARRAY
24491: PPUSH
24492: CALL_OW 250
24496: PPUSH
24497: LD_VAR 0 1
24501: PUSH
24502: LD_INT 1
24504: ARRAY
24505: PPUSH
24506: CALL_OW 251
24510: PPUSH
24511: LD_INT 70
24513: PPUSH
24514: CALL_OW 495
// end ;
24518: PPOPN 1
24520: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24521: LD_EXP 37
24525: PUSH
24526: LD_EXP 71
24530: AND
24531: IFFALSE 24742
24533: GO 24535
24535: DISABLE
24536: LD_INT 0
24538: PPUSH
24539: PPUSH
24540: PPUSH
24541: PPUSH
24542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24543: LD_ADDR_VAR 0 5
24547: PUSH
24548: LD_INT 22
24550: PUSH
24551: LD_OWVAR 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 21
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PPUSH
24574: CALL_OW 69
24578: ST_TO_ADDR
// if not tmp then
24579: LD_VAR 0 5
24583: NOT
24584: IFFALSE 24588
// exit ;
24586: GO 24742
// for i in tmp do
24588: LD_ADDR_VAR 0 1
24592: PUSH
24593: LD_VAR 0 5
24597: PUSH
24598: FOR_IN
24599: IFFALSE 24740
// begin d := rand ( 0 , 5 ) ;
24601: LD_ADDR_VAR 0 4
24605: PUSH
24606: LD_INT 0
24608: PPUSH
24609: LD_INT 5
24611: PPUSH
24612: CALL_OW 12
24616: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24617: LD_ADDR_VAR 0 2
24621: PUSH
24622: LD_VAR 0 1
24626: PPUSH
24627: CALL_OW 250
24631: PPUSH
24632: LD_VAR 0 4
24636: PPUSH
24637: LD_INT 3
24639: PPUSH
24640: LD_INT 12
24642: PPUSH
24643: CALL_OW 12
24647: PPUSH
24648: CALL_OW 272
24652: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_VAR 0 1
24662: PPUSH
24663: CALL_OW 251
24667: PPUSH
24668: LD_VAR 0 4
24672: PPUSH
24673: LD_INT 3
24675: PPUSH
24676: LD_INT 12
24678: PPUSH
24679: CALL_OW 12
24683: PPUSH
24684: CALL_OW 273
24688: ST_TO_ADDR
// if ValidHex ( x , y ) then
24689: LD_VAR 0 2
24693: PPUSH
24694: LD_VAR 0 3
24698: PPUSH
24699: CALL_OW 488
24703: IFFALSE 24738
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24705: LD_VAR 0 1
24709: PPUSH
24710: LD_VAR 0 2
24714: PPUSH
24715: LD_VAR 0 3
24719: PPUSH
24720: LD_INT 3
24722: PPUSH
24723: LD_INT 6
24725: PPUSH
24726: CALL_OW 12
24730: PPUSH
24731: LD_INT 1
24733: PPUSH
24734: CALL_OW 483
// end ;
24738: GO 24598
24740: POP
24741: POP
// end ;
24742: PPOPN 5
24744: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24745: LD_EXP 37
24749: PUSH
24750: LD_EXP 72
24754: AND
24755: IFFALSE 24849
24757: GO 24759
24759: DISABLE
24760: LD_INT 0
24762: PPUSH
24763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24764: LD_ADDR_VAR 0 2
24768: PUSH
24769: LD_INT 22
24771: PUSH
24772: LD_OWVAR 2
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 32
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 21
24793: PUSH
24794: LD_INT 2
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: LIST
24805: PPUSH
24806: CALL_OW 69
24810: ST_TO_ADDR
// if not tmp then
24811: LD_VAR 0 2
24815: NOT
24816: IFFALSE 24820
// exit ;
24818: GO 24849
// for i in tmp do
24820: LD_ADDR_VAR 0 1
24824: PUSH
24825: LD_VAR 0 2
24829: PUSH
24830: FOR_IN
24831: IFFALSE 24847
// SetFuel ( i , 0 ) ;
24833: LD_VAR 0 1
24837: PPUSH
24838: LD_INT 0
24840: PPUSH
24841: CALL_OW 240
24845: GO 24830
24847: POP
24848: POP
// end ;
24849: PPOPN 2
24851: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24852: LD_EXP 37
24856: PUSH
24857: LD_EXP 73
24861: AND
24862: IFFALSE 24928
24864: GO 24866
24866: DISABLE
24867: LD_INT 0
24869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24870: LD_ADDR_VAR 0 1
24874: PUSH
24875: LD_INT 22
24877: PUSH
24878: LD_OWVAR 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 30
24889: PUSH
24890: LD_INT 29
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PPUSH
24901: CALL_OW 69
24905: ST_TO_ADDR
// if not tmp then
24906: LD_VAR 0 1
24910: NOT
24911: IFFALSE 24915
// exit ;
24913: GO 24928
// DestroyUnit ( tmp [ 1 ] ) ;
24915: LD_VAR 0 1
24919: PUSH
24920: LD_INT 1
24922: ARRAY
24923: PPUSH
24924: CALL_OW 65
// end ;
24928: PPOPN 1
24930: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24931: LD_EXP 37
24935: PUSH
24936: LD_EXP 75
24940: AND
24941: IFFALSE 25070
24943: GO 24945
24945: DISABLE
24946: LD_INT 0
24948: PPUSH
// begin uc_side := 0 ;
24949: LD_ADDR_OWVAR 20
24953: PUSH
24954: LD_INT 0
24956: ST_TO_ADDR
// uc_nation := nation_arabian ;
24957: LD_ADDR_OWVAR 21
24961: PUSH
24962: LD_INT 2
24964: ST_TO_ADDR
// hc_gallery :=  ;
24965: LD_ADDR_OWVAR 33
24969: PUSH
24970: LD_STRING 
24972: ST_TO_ADDR
// hc_name :=  ;
24973: LD_ADDR_OWVAR 26
24977: PUSH
24978: LD_STRING 
24980: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24981: LD_INT 1
24983: PPUSH
24984: LD_INT 11
24986: PPUSH
24987: LD_INT 10
24989: PPUSH
24990: CALL_OW 380
// un := CreateHuman ;
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: CALL_OW 44
25003: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25004: LD_VAR 0 1
25008: PPUSH
25009: LD_INT 1
25011: PPUSH
25012: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25016: LD_INT 35
25018: PPUSH
25019: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25023: LD_VAR 0 1
25027: PPUSH
25028: LD_INT 22
25030: PUSH
25031: LD_OWVAR 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PPUSH
25040: CALL_OW 69
25044: PPUSH
25045: LD_VAR 0 1
25049: PPUSH
25050: CALL_OW 74
25054: PPUSH
25055: CALL_OW 115
// until IsDead ( un ) ;
25059: LD_VAR 0 1
25063: PPUSH
25064: CALL_OW 301
25068: IFFALSE 25016
// end ;
25070: PPOPN 1
25072: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25073: LD_EXP 37
25077: PUSH
25078: LD_EXP 77
25082: AND
25083: IFFALSE 25095
25085: GO 25087
25087: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25088: LD_STRING earthquake(getX(game), 0, 32)
25090: PPUSH
25091: CALL_OW 559
25095: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25096: LD_EXP 37
25100: PUSH
25101: LD_EXP 78
25105: AND
25106: IFFALSE 25197
25108: GO 25110
25110: DISABLE
25111: LD_INT 0
25113: PPUSH
// begin enable ;
25114: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25115: LD_ADDR_VAR 0 1
25119: PUSH
25120: LD_INT 22
25122: PUSH
25123: LD_OWVAR 2
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 21
25134: PUSH
25135: LD_INT 2
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 33
25144: PUSH
25145: LD_INT 3
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: LIST
25156: PPUSH
25157: CALL_OW 69
25161: ST_TO_ADDR
// if not tmp then
25162: LD_VAR 0 1
25166: NOT
25167: IFFALSE 25171
// exit ;
25169: GO 25197
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25171: LD_VAR 0 1
25175: PUSH
25176: LD_INT 1
25178: PPUSH
25179: LD_VAR 0 1
25183: PPUSH
25184: CALL_OW 12
25188: ARRAY
25189: PPUSH
25190: LD_INT 1
25192: PPUSH
25193: CALL_OW 234
// end ;
25197: PPOPN 1
25199: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25200: LD_EXP 37
25204: PUSH
25205: LD_EXP 79
25209: AND
25210: IFFALSE 25351
25212: GO 25214
25214: DISABLE
25215: LD_INT 0
25217: PPUSH
25218: PPUSH
25219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 22
25227: PUSH
25228: LD_OWVAR 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 25
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PPUSH
25251: CALL_OW 69
25255: ST_TO_ADDR
// if not tmp then
25256: LD_VAR 0 3
25260: NOT
25261: IFFALSE 25265
// exit ;
25263: GO 25351
// un := tmp [ rand ( 1 , tmp ) ] ;
25265: LD_ADDR_VAR 0 2
25269: PUSH
25270: LD_VAR 0 3
25274: PUSH
25275: LD_INT 1
25277: PPUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: CALL_OW 12
25287: ARRAY
25288: ST_TO_ADDR
// if Crawls ( un ) then
25289: LD_VAR 0 2
25293: PPUSH
25294: CALL_OW 318
25298: IFFALSE 25309
// ComWalk ( un ) ;
25300: LD_VAR 0 2
25304: PPUSH
25305: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25309: LD_VAR 0 2
25313: PPUSH
25314: LD_INT 9
25316: PPUSH
25317: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25321: LD_INT 28
25323: PPUSH
25324: LD_OWVAR 2
25328: PPUSH
25329: LD_INT 2
25331: PPUSH
25332: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25336: LD_INT 29
25338: PPUSH
25339: LD_OWVAR 2
25343: PPUSH
25344: LD_INT 2
25346: PPUSH
25347: CALL_OW 322
// end ;
25351: PPOPN 3
25353: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25354: LD_EXP 37
25358: PUSH
25359: LD_EXP 80
25363: AND
25364: IFFALSE 25475
25366: GO 25368
25368: DISABLE
25369: LD_INT 0
25371: PPUSH
25372: PPUSH
25373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25374: LD_ADDR_VAR 0 3
25378: PUSH
25379: LD_INT 22
25381: PUSH
25382: LD_OWVAR 2
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 25
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PPUSH
25405: CALL_OW 69
25409: ST_TO_ADDR
// if not tmp then
25410: LD_VAR 0 3
25414: NOT
25415: IFFALSE 25419
// exit ;
25417: GO 25475
// un := tmp [ rand ( 1 , tmp ) ] ;
25419: LD_ADDR_VAR 0 2
25423: PUSH
25424: LD_VAR 0 3
25428: PUSH
25429: LD_INT 1
25431: PPUSH
25432: LD_VAR 0 3
25436: PPUSH
25437: CALL_OW 12
25441: ARRAY
25442: ST_TO_ADDR
// if Crawls ( un ) then
25443: LD_VAR 0 2
25447: PPUSH
25448: CALL_OW 318
25452: IFFALSE 25463
// ComWalk ( un ) ;
25454: LD_VAR 0 2
25458: PPUSH
25459: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25463: LD_VAR 0 2
25467: PPUSH
25468: LD_INT 8
25470: PPUSH
25471: CALL_OW 336
// end ;
25475: PPOPN 3
25477: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25478: LD_EXP 37
25482: PUSH
25483: LD_EXP 81
25487: AND
25488: IFFALSE 25632
25490: GO 25492
25492: DISABLE
25493: LD_INT 0
25495: PPUSH
25496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25497: LD_ADDR_VAR 0 2
25501: PUSH
25502: LD_INT 22
25504: PUSH
25505: LD_OWVAR 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 21
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 2
25526: PUSH
25527: LD_INT 34
25529: PUSH
25530: LD_INT 12
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 34
25539: PUSH
25540: LD_INT 51
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 34
25549: PUSH
25550: LD_INT 32
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 69
25572: ST_TO_ADDR
// if not tmp then
25573: LD_VAR 0 2
25577: NOT
25578: IFFALSE 25582
// exit ;
25580: GO 25632
// for i in tmp do
25582: LD_ADDR_VAR 0 1
25586: PUSH
25587: LD_VAR 0 2
25591: PUSH
25592: FOR_IN
25593: IFFALSE 25630
// if GetCargo ( i , mat_artifact ) = 0 then
25595: LD_VAR 0 1
25599: PPUSH
25600: LD_INT 4
25602: PPUSH
25603: CALL_OW 289
25607: PUSH
25608: LD_INT 0
25610: EQUAL
25611: IFFALSE 25628
// SetCargo ( i , mat_siberit , 100 ) ;
25613: LD_VAR 0 1
25617: PPUSH
25618: LD_INT 3
25620: PPUSH
25621: LD_INT 100
25623: PPUSH
25624: CALL_OW 290
25628: GO 25592
25630: POP
25631: POP
// end ;
25632: PPOPN 2
25634: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25635: LD_EXP 37
25639: PUSH
25640: LD_EXP 82
25644: AND
25645: IFFALSE 25828
25647: GO 25649
25649: DISABLE
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25654: LD_ADDR_VAR 0 2
25658: PUSH
25659: LD_INT 22
25661: PUSH
25662: LD_OWVAR 2
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PPUSH
25671: CALL_OW 69
25675: ST_TO_ADDR
// if not tmp then
25676: LD_VAR 0 2
25680: NOT
25681: IFFALSE 25685
// exit ;
25683: GO 25828
// for i := 1 to 2 do
25685: LD_ADDR_VAR 0 1
25689: PUSH
25690: DOUBLE
25691: LD_INT 1
25693: DEC
25694: ST_TO_ADDR
25695: LD_INT 2
25697: PUSH
25698: FOR_TO
25699: IFFALSE 25826
// begin uc_side := your_side ;
25701: LD_ADDR_OWVAR 20
25705: PUSH
25706: LD_OWVAR 2
25710: ST_TO_ADDR
// uc_nation := nation_american ;
25711: LD_ADDR_OWVAR 21
25715: PUSH
25716: LD_INT 1
25718: ST_TO_ADDR
// vc_chassis := us_morphling ;
25719: LD_ADDR_OWVAR 37
25723: PUSH
25724: LD_INT 5
25726: ST_TO_ADDR
// vc_engine := engine_siberite ;
25727: LD_ADDR_OWVAR 39
25731: PUSH
25732: LD_INT 3
25734: ST_TO_ADDR
// vc_control := control_computer ;
25735: LD_ADDR_OWVAR 38
25739: PUSH
25740: LD_INT 3
25742: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25743: LD_ADDR_OWVAR 40
25747: PUSH
25748: LD_INT 10
25750: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25751: LD_VAR 0 2
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PPUSH
25760: CALL_OW 310
25764: NOT
25765: IFFALSE 25812
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25767: CALL_OW 45
25771: PPUSH
25772: LD_VAR 0 2
25776: PUSH
25777: LD_INT 1
25779: ARRAY
25780: PPUSH
25781: CALL_OW 250
25785: PPUSH
25786: LD_VAR 0 2
25790: PUSH
25791: LD_INT 1
25793: ARRAY
25794: PPUSH
25795: CALL_OW 251
25799: PPUSH
25800: LD_INT 12
25802: PPUSH
25803: LD_INT 1
25805: PPUSH
25806: CALL_OW 50
25810: GO 25824
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25812: CALL_OW 45
25816: PPUSH
25817: LD_INT 1
25819: PPUSH
25820: CALL_OW 51
// end ;
25824: GO 25698
25826: POP
25827: POP
// end ;
25828: PPOPN 2
25830: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25831: LD_EXP 37
25835: PUSH
25836: LD_EXP 83
25840: AND
25841: IFFALSE 26063
25843: GO 25845
25845: DISABLE
25846: LD_INT 0
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
25852: PPUSH
25853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25854: LD_ADDR_VAR 0 6
25858: PUSH
25859: LD_INT 22
25861: PUSH
25862: LD_OWVAR 2
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 21
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: LD_INT 23
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: LIST
25902: PPUSH
25903: CALL_OW 69
25907: ST_TO_ADDR
// if not tmp then
25908: LD_VAR 0 6
25912: NOT
25913: IFFALSE 25917
// exit ;
25915: GO 26063
// s1 := rand ( 1 , 4 ) ;
25917: LD_ADDR_VAR 0 2
25921: PUSH
25922: LD_INT 1
25924: PPUSH
25925: LD_INT 4
25927: PPUSH
25928: CALL_OW 12
25932: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25933: LD_ADDR_VAR 0 4
25937: PUSH
25938: LD_VAR 0 6
25942: PUSH
25943: LD_INT 1
25945: ARRAY
25946: PPUSH
25947: LD_VAR 0 2
25951: PPUSH
25952: CALL_OW 259
25956: ST_TO_ADDR
// if s1 = 1 then
25957: LD_VAR 0 2
25961: PUSH
25962: LD_INT 1
25964: EQUAL
25965: IFFALSE 25985
// s2 := rand ( 2 , 4 ) else
25967: LD_ADDR_VAR 0 3
25971: PUSH
25972: LD_INT 2
25974: PPUSH
25975: LD_INT 4
25977: PPUSH
25978: CALL_OW 12
25982: ST_TO_ADDR
25983: GO 25993
// s2 := 1 ;
25985: LD_ADDR_VAR 0 3
25989: PUSH
25990: LD_INT 1
25992: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25993: LD_ADDR_VAR 0 5
25997: PUSH
25998: LD_VAR 0 6
26002: PUSH
26003: LD_INT 1
26005: ARRAY
26006: PPUSH
26007: LD_VAR 0 3
26011: PPUSH
26012: CALL_OW 259
26016: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26017: LD_VAR 0 6
26021: PUSH
26022: LD_INT 1
26024: ARRAY
26025: PPUSH
26026: LD_VAR 0 2
26030: PPUSH
26031: LD_VAR 0 5
26035: PPUSH
26036: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26040: LD_VAR 0 6
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PPUSH
26049: LD_VAR 0 3
26053: PPUSH
26054: LD_VAR 0 4
26058: PPUSH
26059: CALL_OW 237
// end ;
26063: PPOPN 6
26065: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26066: LD_EXP 37
26070: PUSH
26071: LD_EXP 84
26075: AND
26076: IFFALSE 26155
26078: GO 26080
26080: DISABLE
26081: LD_INT 0
26083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26084: LD_ADDR_VAR 0 1
26088: PUSH
26089: LD_INT 22
26091: PUSH
26092: LD_OWVAR 2
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 30
26103: PUSH
26104: LD_INT 3
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PPUSH
26115: CALL_OW 69
26119: ST_TO_ADDR
// if not tmp then
26120: LD_VAR 0 1
26124: NOT
26125: IFFALSE 26129
// exit ;
26127: GO 26155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26129: LD_VAR 0 1
26133: PUSH
26134: LD_INT 1
26136: PPUSH
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL_OW 12
26146: ARRAY
26147: PPUSH
26148: LD_INT 1
26150: PPUSH
26151: CALL_OW 234
// end ;
26155: PPOPN 1
26157: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26158: LD_EXP 37
26162: PUSH
26163: LD_EXP 85
26167: AND
26168: IFFALSE 26280
26170: GO 26172
26172: DISABLE
26173: LD_INT 0
26175: PPUSH
26176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: LD_INT 22
26184: PUSH
26185: LD_OWVAR 2
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 2
26196: PUSH
26197: LD_INT 30
26199: PUSH
26200: LD_INT 27
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 30
26209: PUSH
26210: LD_INT 26
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 30
26219: PUSH
26220: LD_INT 28
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PPUSH
26237: CALL_OW 69
26241: ST_TO_ADDR
// if not tmp then
26242: LD_VAR 0 2
26246: NOT
26247: IFFALSE 26251
// exit ;
26249: GO 26280
// for i in tmp do
26251: LD_ADDR_VAR 0 1
26255: PUSH
26256: LD_VAR 0 2
26260: PUSH
26261: FOR_IN
26262: IFFALSE 26278
// SetLives ( i , 1 ) ;
26264: LD_VAR 0 1
26268: PPUSH
26269: LD_INT 1
26271: PPUSH
26272: CALL_OW 234
26276: GO 26261
26278: POP
26279: POP
// end ;
26280: PPOPN 2
26282: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26283: LD_EXP 37
26287: PUSH
26288: LD_EXP 86
26292: AND
26293: IFFALSE 26580
26295: GO 26297
26297: DISABLE
26298: LD_INT 0
26300: PPUSH
26301: PPUSH
26302: PPUSH
// begin i := rand ( 1 , 7 ) ;
26303: LD_ADDR_VAR 0 1
26307: PUSH
26308: LD_INT 1
26310: PPUSH
26311: LD_INT 7
26313: PPUSH
26314: CALL_OW 12
26318: ST_TO_ADDR
// case i of 1 :
26319: LD_VAR 0 1
26323: PUSH
26324: LD_INT 1
26326: DOUBLE
26327: EQUAL
26328: IFTRUE 26332
26330: GO 26342
26332: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26333: LD_STRING earthquake(getX(game), 0, 32)
26335: PPUSH
26336: CALL_OW 559
26340: GO 26580
26342: LD_INT 2
26344: DOUBLE
26345: EQUAL
26346: IFTRUE 26350
26348: GO 26364
26350: POP
// begin ToLua ( displayStucuk(); ) ;
26351: LD_STRING displayStucuk();
26353: PPUSH
26354: CALL_OW 559
// ResetFog ;
26358: CALL_OW 335
// end ; 3 :
26362: GO 26580
26364: LD_INT 3
26366: DOUBLE
26367: EQUAL
26368: IFTRUE 26372
26370: GO 26476
26372: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26373: LD_ADDR_VAR 0 2
26377: PUSH
26378: LD_INT 22
26380: PUSH
26381: LD_OWVAR 2
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 25
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PPUSH
26404: CALL_OW 69
26408: ST_TO_ADDR
// if not tmp then
26409: LD_VAR 0 2
26413: NOT
26414: IFFALSE 26418
// exit ;
26416: GO 26580
// un := tmp [ rand ( 1 , tmp ) ] ;
26418: LD_ADDR_VAR 0 3
26422: PUSH
26423: LD_VAR 0 2
26427: PUSH
26428: LD_INT 1
26430: PPUSH
26431: LD_VAR 0 2
26435: PPUSH
26436: CALL_OW 12
26440: ARRAY
26441: ST_TO_ADDR
// if Crawls ( un ) then
26442: LD_VAR 0 3
26446: PPUSH
26447: CALL_OW 318
26451: IFFALSE 26462
// ComWalk ( un ) ;
26453: LD_VAR 0 3
26457: PPUSH
26458: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26462: LD_VAR 0 3
26466: PPUSH
26467: LD_INT 8
26469: PPUSH
26470: CALL_OW 336
// end ; 4 :
26474: GO 26580
26476: LD_INT 4
26478: DOUBLE
26479: EQUAL
26480: IFTRUE 26484
26482: GO 26558
26484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26485: LD_ADDR_VAR 0 2
26489: PUSH
26490: LD_INT 22
26492: PUSH
26493: LD_OWVAR 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 30
26504: PUSH
26505: LD_INT 29
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PPUSH
26516: CALL_OW 69
26520: ST_TO_ADDR
// if not tmp then
26521: LD_VAR 0 2
26525: NOT
26526: IFFALSE 26530
// exit ;
26528: GO 26580
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26530: LD_VAR 0 2
26534: PUSH
26535: LD_INT 1
26537: ARRAY
26538: PPUSH
26539: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26543: LD_VAR 0 2
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PPUSH
26552: CALL_OW 65
// end ; 5 .. 7 :
26556: GO 26580
26558: LD_INT 5
26560: DOUBLE
26561: GREATEREQUAL
26562: IFFALSE 26570
26564: LD_INT 7
26566: DOUBLE
26567: LESSEQUAL
26568: IFTRUE 26572
26570: GO 26579
26572: POP
// StreamSibBomb ; end ;
26573: CALL 22817 0 0
26577: GO 26580
26579: POP
// end ;
26580: PPOPN 3
26582: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26583: LD_EXP 37
26587: PUSH
26588: LD_EXP 87
26592: AND
26593: IFFALSE 26749
26595: GO 26597
26597: DISABLE
26598: LD_INT 0
26600: PPUSH
26601: PPUSH
26602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26603: LD_ADDR_VAR 0 2
26607: PUSH
26608: LD_INT 81
26610: PUSH
26611: LD_OWVAR 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 21
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 21
26635: PUSH
26636: LD_INT 2
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PPUSH
26652: CALL_OW 69
26656: ST_TO_ADDR
// if not tmp then
26657: LD_VAR 0 2
26661: NOT
26662: IFFALSE 26666
// exit ;
26664: GO 26749
// p := 0 ;
26666: LD_ADDR_VAR 0 3
26670: PUSH
26671: LD_INT 0
26673: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26674: LD_INT 35
26676: PPUSH
26677: CALL_OW 67
// p := p + 1 ;
26681: LD_ADDR_VAR 0 3
26685: PUSH
26686: LD_VAR 0 3
26690: PUSH
26691: LD_INT 1
26693: PLUS
26694: ST_TO_ADDR
// for i in tmp do
26695: LD_ADDR_VAR 0 1
26699: PUSH
26700: LD_VAR 0 2
26704: PUSH
26705: FOR_IN
26706: IFFALSE 26737
// if GetLives ( i ) < 1000 then
26708: LD_VAR 0 1
26712: PPUSH
26713: CALL_OW 256
26717: PUSH
26718: LD_INT 1000
26720: LESS
26721: IFFALSE 26735
// SetLives ( i , 1000 ) ;
26723: LD_VAR 0 1
26727: PPUSH
26728: LD_INT 1000
26730: PPUSH
26731: CALL_OW 234
26735: GO 26705
26737: POP
26738: POP
// until p > 20 ;
26739: LD_VAR 0 3
26743: PUSH
26744: LD_INT 20
26746: GREATER
26747: IFFALSE 26674
// end ;
26749: PPOPN 3
26751: END
// every 0 0$1 trigger StreamModeActive and sTime do
26752: LD_EXP 37
26756: PUSH
26757: LD_EXP 88
26761: AND
26762: IFFALSE 26797
26764: GO 26766
26766: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26767: LD_INT 28
26769: PPUSH
26770: LD_OWVAR 2
26774: PPUSH
26775: LD_INT 2
26777: PPUSH
26778: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26782: LD_INT 30
26784: PPUSH
26785: LD_OWVAR 2
26789: PPUSH
26790: LD_INT 2
26792: PPUSH
26793: CALL_OW 322
// end ;
26797: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26798: LD_EXP 37
26802: PUSH
26803: LD_EXP 89
26807: AND
26808: IFFALSE 26929
26810: GO 26812
26812: DISABLE
26813: LD_INT 0
26815: PPUSH
26816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26817: LD_ADDR_VAR 0 2
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 21
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 3
26846: PUSH
26847: LD_INT 23
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 69
26870: ST_TO_ADDR
// if not tmp then
26871: LD_VAR 0 2
26875: NOT
26876: IFFALSE 26880
// exit ;
26878: GO 26929
// for i in tmp do
26880: LD_ADDR_VAR 0 1
26884: PUSH
26885: LD_VAR 0 2
26889: PUSH
26890: FOR_IN
26891: IFFALSE 26927
// begin if Crawls ( i ) then
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 318
26902: IFFALSE 26913
// ComWalk ( i ) ;
26904: LD_VAR 0 1
26908: PPUSH
26909: CALL_OW 138
// SetClass ( i , 2 ) ;
26913: LD_VAR 0 1
26917: PPUSH
26918: LD_INT 2
26920: PPUSH
26921: CALL_OW 336
// end ;
26925: GO 26890
26927: POP
26928: POP
// end ;
26929: PPOPN 2
26931: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26932: LD_EXP 37
26936: PUSH
26937: LD_EXP 90
26941: AND
26942: IFFALSE 27230
26944: GO 26946
26946: DISABLE
26947: LD_INT 0
26949: PPUSH
26950: PPUSH
26951: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26952: LD_OWVAR 2
26956: PPUSH
26957: LD_INT 9
26959: PPUSH
26960: LD_INT 1
26962: PPUSH
26963: LD_INT 1
26965: PPUSH
26966: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26970: LD_INT 9
26972: PPUSH
26973: LD_OWVAR 2
26977: PPUSH
26978: CALL_OW 343
// uc_side := 9 ;
26982: LD_ADDR_OWVAR 20
26986: PUSH
26987: LD_INT 9
26989: ST_TO_ADDR
// uc_nation := 2 ;
26990: LD_ADDR_OWVAR 21
26994: PUSH
26995: LD_INT 2
26997: ST_TO_ADDR
// hc_name := Dark Warrior ;
26998: LD_ADDR_OWVAR 26
27002: PUSH
27003: LD_STRING Dark Warrior
27005: ST_TO_ADDR
// hc_gallery :=  ;
27006: LD_ADDR_OWVAR 33
27010: PUSH
27011: LD_STRING 
27013: ST_TO_ADDR
// hc_noskilllimit := true ;
27014: LD_ADDR_OWVAR 76
27018: PUSH
27019: LD_INT 1
27021: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27022: LD_ADDR_OWVAR 31
27026: PUSH
27027: LD_INT 30
27029: PUSH
27030: LD_INT 30
27032: PUSH
27033: LD_INT 30
27035: PUSH
27036: LD_INT 30
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// un := CreateHuman ;
27045: LD_ADDR_VAR 0 3
27049: PUSH
27050: CALL_OW 44
27054: ST_TO_ADDR
// hc_noskilllimit := false ;
27055: LD_ADDR_OWVAR 76
27059: PUSH
27060: LD_INT 0
27062: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27063: LD_VAR 0 3
27067: PPUSH
27068: LD_INT 1
27070: PPUSH
27071: CALL_OW 51
// ToLua ( playRanger() ) ;
27075: LD_STRING playRanger()
27077: PPUSH
27078: CALL_OW 559
// p := 0 ;
27082: LD_ADDR_VAR 0 2
27086: PUSH
27087: LD_INT 0
27089: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27090: LD_INT 35
27092: PPUSH
27093: CALL_OW 67
// p := p + 1 ;
27097: LD_ADDR_VAR 0 2
27101: PUSH
27102: LD_VAR 0 2
27106: PUSH
27107: LD_INT 1
27109: PLUS
27110: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27111: LD_VAR 0 3
27115: PPUSH
27116: CALL_OW 256
27120: PUSH
27121: LD_INT 1000
27123: LESS
27124: IFFALSE 27138
// SetLives ( un , 1000 ) ;
27126: LD_VAR 0 3
27130: PPUSH
27131: LD_INT 1000
27133: PPUSH
27134: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27138: LD_VAR 0 3
27142: PPUSH
27143: LD_INT 81
27145: PUSH
27146: LD_OWVAR 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 91
27157: PUSH
27158: LD_VAR 0 3
27162: PUSH
27163: LD_INT 30
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PPUSH
27175: CALL_OW 69
27179: PPUSH
27180: LD_VAR 0 3
27184: PPUSH
27185: CALL_OW 74
27189: PPUSH
27190: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27194: LD_VAR 0 2
27198: PUSH
27199: LD_INT 80
27201: GREATER
27202: PUSH
27203: LD_VAR 0 3
27207: PPUSH
27208: CALL_OW 301
27212: OR
27213: IFFALSE 27090
// if un then
27215: LD_VAR 0 3
27219: IFFALSE 27230
// RemoveUnit ( un ) ;
27221: LD_VAR 0 3
27225: PPUSH
27226: CALL_OW 64
// end ;
27230: PPOPN 3
27232: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27233: LD_EXP 91
27237: IFFALSE 27353
27239: GO 27241
27241: DISABLE
27242: LD_INT 0
27244: PPUSH
27245: PPUSH
27246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27247: LD_ADDR_VAR 0 2
27251: PUSH
27252: LD_INT 81
27254: PUSH
27255: LD_OWVAR 2
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 21
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PPUSH
27278: CALL_OW 69
27282: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27283: LD_STRING playComputer()
27285: PPUSH
27286: CALL_OW 559
// if not tmp then
27290: LD_VAR 0 2
27294: NOT
27295: IFFALSE 27299
// exit ;
27297: GO 27353
// for i in tmp do
27299: LD_ADDR_VAR 0 1
27303: PUSH
27304: LD_VAR 0 2
27308: PUSH
27309: FOR_IN
27310: IFFALSE 27351
// for j := 1 to 4 do
27312: LD_ADDR_VAR 0 3
27316: PUSH
27317: DOUBLE
27318: LD_INT 1
27320: DEC
27321: ST_TO_ADDR
27322: LD_INT 4
27324: PUSH
27325: FOR_TO
27326: IFFALSE 27347
// SetSkill ( i , j , 10 ) ;
27328: LD_VAR 0 1
27332: PPUSH
27333: LD_VAR 0 3
27337: PPUSH
27338: LD_INT 10
27340: PPUSH
27341: CALL_OW 237
27345: GO 27325
27347: POP
27348: POP
27349: GO 27309
27351: POP
27352: POP
// end ;
27353: PPOPN 3
27355: END
// every 0 0$1 trigger s30 do var i , tmp ;
27356: LD_EXP 92
27360: IFFALSE 27429
27362: GO 27364
27364: DISABLE
27365: LD_INT 0
27367: PPUSH
27368: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27369: LD_ADDR_VAR 0 2
27373: PUSH
27374: LD_INT 22
27376: PUSH
27377: LD_OWVAR 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PPUSH
27386: CALL_OW 69
27390: ST_TO_ADDR
// if not tmp then
27391: LD_VAR 0 2
27395: NOT
27396: IFFALSE 27400
// exit ;
27398: GO 27429
// for i in tmp do
27400: LD_ADDR_VAR 0 1
27404: PUSH
27405: LD_VAR 0 2
27409: PUSH
27410: FOR_IN
27411: IFFALSE 27427
// SetLives ( i , 300 ) ;
27413: LD_VAR 0 1
27417: PPUSH
27418: LD_INT 300
27420: PPUSH
27421: CALL_OW 234
27425: GO 27410
27427: POP
27428: POP
// end ;
27429: PPOPN 2
27431: END
// every 0 0$1 trigger s60 do var i , tmp ;
27432: LD_EXP 93
27436: IFFALSE 27505
27438: GO 27440
27440: DISABLE
27441: LD_INT 0
27443: PPUSH
27444: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27445: LD_ADDR_VAR 0 2
27449: PUSH
27450: LD_INT 22
27452: PUSH
27453: LD_OWVAR 2
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PPUSH
27462: CALL_OW 69
27466: ST_TO_ADDR
// if not tmp then
27467: LD_VAR 0 2
27471: NOT
27472: IFFALSE 27476
// exit ;
27474: GO 27505
// for i in tmp do
27476: LD_ADDR_VAR 0 1
27480: PUSH
27481: LD_VAR 0 2
27485: PUSH
27486: FOR_IN
27487: IFFALSE 27503
// SetLives ( i , 600 ) ;
27489: LD_VAR 0 1
27493: PPUSH
27494: LD_INT 600
27496: PPUSH
27497: CALL_OW 234
27501: GO 27486
27503: POP
27504: POP
// end ;
27505: PPOPN 2
27507: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27508: LD_INT 0
27510: PPUSH
// case cmd of 301 :
27511: LD_VAR 0 1
27515: PUSH
27516: LD_INT 301
27518: DOUBLE
27519: EQUAL
27520: IFTRUE 27524
27522: GO 27556
27524: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27525: LD_VAR 0 6
27529: PPUSH
27530: LD_VAR 0 7
27534: PPUSH
27535: LD_VAR 0 8
27539: PPUSH
27540: LD_VAR 0 4
27544: PPUSH
27545: LD_VAR 0 5
27549: PPUSH
27550: CALL 28757 0 5
27554: GO 27677
27556: LD_INT 302
27558: DOUBLE
27559: EQUAL
27560: IFTRUE 27564
27562: GO 27601
27564: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27565: LD_VAR 0 6
27569: PPUSH
27570: LD_VAR 0 7
27574: PPUSH
27575: LD_VAR 0 8
27579: PPUSH
27580: LD_VAR 0 9
27584: PPUSH
27585: LD_VAR 0 4
27589: PPUSH
27590: LD_VAR 0 5
27594: PPUSH
27595: CALL 28848 0 6
27599: GO 27677
27601: LD_INT 303
27603: DOUBLE
27604: EQUAL
27605: IFTRUE 27609
27607: GO 27646
27609: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27610: LD_VAR 0 6
27614: PPUSH
27615: LD_VAR 0 7
27619: PPUSH
27620: LD_VAR 0 8
27624: PPUSH
27625: LD_VAR 0 9
27629: PPUSH
27630: LD_VAR 0 4
27634: PPUSH
27635: LD_VAR 0 5
27639: PPUSH
27640: CALL 27682 0 6
27644: GO 27677
27646: LD_INT 304
27648: DOUBLE
27649: EQUAL
27650: IFTRUE 27654
27652: GO 27676
27654: POP
// hHackTeleport ( unit , x , y ) ; end ;
27655: LD_VAR 0 2
27659: PPUSH
27660: LD_VAR 0 4
27664: PPUSH
27665: LD_VAR 0 5
27669: PPUSH
27670: CALL 29441 0 3
27674: GO 27677
27676: POP
// end ;
27677: LD_VAR 0 12
27681: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27682: LD_INT 0
27684: PPUSH
27685: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27686: LD_VAR 0 1
27690: PUSH
27691: LD_INT 1
27693: LESS
27694: PUSH
27695: LD_VAR 0 1
27699: PUSH
27700: LD_INT 3
27702: GREATER
27703: OR
27704: PUSH
27705: LD_VAR 0 5
27709: PPUSH
27710: LD_VAR 0 6
27714: PPUSH
27715: CALL_OW 428
27719: OR
27720: IFFALSE 27724
// exit ;
27722: GO 28444
// uc_side := your_side ;
27724: LD_ADDR_OWVAR 20
27728: PUSH
27729: LD_OWVAR 2
27733: ST_TO_ADDR
// uc_nation := nation ;
27734: LD_ADDR_OWVAR 21
27738: PUSH
27739: LD_VAR 0 1
27743: ST_TO_ADDR
// bc_level = 1 ;
27744: LD_ADDR_OWVAR 43
27748: PUSH
27749: LD_INT 1
27751: ST_TO_ADDR
// case btype of 1 :
27752: LD_VAR 0 2
27756: PUSH
27757: LD_INT 1
27759: DOUBLE
27760: EQUAL
27761: IFTRUE 27765
27763: GO 27776
27765: POP
// bc_type := b_depot ; 2 :
27766: LD_ADDR_OWVAR 42
27770: PUSH
27771: LD_INT 0
27773: ST_TO_ADDR
27774: GO 28388
27776: LD_INT 2
27778: DOUBLE
27779: EQUAL
27780: IFTRUE 27784
27782: GO 27795
27784: POP
// bc_type := b_warehouse ; 3 :
27785: LD_ADDR_OWVAR 42
27789: PUSH
27790: LD_INT 1
27792: ST_TO_ADDR
27793: GO 28388
27795: LD_INT 3
27797: DOUBLE
27798: EQUAL
27799: IFTRUE 27803
27801: GO 27814
27803: POP
// bc_type := b_lab ; 4 .. 9 :
27804: LD_ADDR_OWVAR 42
27808: PUSH
27809: LD_INT 6
27811: ST_TO_ADDR
27812: GO 28388
27814: LD_INT 4
27816: DOUBLE
27817: GREATEREQUAL
27818: IFFALSE 27826
27820: LD_INT 9
27822: DOUBLE
27823: LESSEQUAL
27824: IFTRUE 27828
27826: GO 27880
27828: POP
// begin bc_type := b_lab_half ;
27829: LD_ADDR_OWVAR 42
27833: PUSH
27834: LD_INT 7
27836: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27837: LD_ADDR_OWVAR 44
27841: PUSH
27842: LD_INT 10
27844: PUSH
27845: LD_INT 11
27847: PUSH
27848: LD_INT 12
27850: PUSH
27851: LD_INT 15
27853: PUSH
27854: LD_INT 14
27856: PUSH
27857: LD_INT 13
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: PUSH
27868: LD_VAR 0 2
27872: PUSH
27873: LD_INT 3
27875: MINUS
27876: ARRAY
27877: ST_TO_ADDR
// end ; 10 .. 13 :
27878: GO 28388
27880: LD_INT 10
27882: DOUBLE
27883: GREATEREQUAL
27884: IFFALSE 27892
27886: LD_INT 13
27888: DOUBLE
27889: LESSEQUAL
27890: IFTRUE 27894
27892: GO 27971
27894: POP
// begin bc_type := b_lab_full ;
27895: LD_ADDR_OWVAR 42
27899: PUSH
27900: LD_INT 8
27902: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27903: LD_ADDR_OWVAR 44
27907: PUSH
27908: LD_INT 10
27910: PUSH
27911: LD_INT 12
27913: PUSH
27914: LD_INT 14
27916: PUSH
27917: LD_INT 13
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: PUSH
27926: LD_VAR 0 2
27930: PUSH
27931: LD_INT 9
27933: MINUS
27934: ARRAY
27935: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27936: LD_ADDR_OWVAR 45
27940: PUSH
27941: LD_INT 11
27943: PUSH
27944: LD_INT 15
27946: PUSH
27947: LD_INT 12
27949: PUSH
27950: LD_INT 15
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: PUSH
27959: LD_VAR 0 2
27963: PUSH
27964: LD_INT 9
27966: MINUS
27967: ARRAY
27968: ST_TO_ADDR
// end ; 14 :
27969: GO 28388
27971: LD_INT 14
27973: DOUBLE
27974: EQUAL
27975: IFTRUE 27979
27977: GO 27990
27979: POP
// bc_type := b_workshop ; 15 :
27980: LD_ADDR_OWVAR 42
27984: PUSH
27985: LD_INT 2
27987: ST_TO_ADDR
27988: GO 28388
27990: LD_INT 15
27992: DOUBLE
27993: EQUAL
27994: IFTRUE 27998
27996: GO 28009
27998: POP
// bc_type := b_factory ; 16 :
27999: LD_ADDR_OWVAR 42
28003: PUSH
28004: LD_INT 3
28006: ST_TO_ADDR
28007: GO 28388
28009: LD_INT 16
28011: DOUBLE
28012: EQUAL
28013: IFTRUE 28017
28015: GO 28028
28017: POP
// bc_type := b_ext_gun ; 17 :
28018: LD_ADDR_OWVAR 42
28022: PUSH
28023: LD_INT 17
28025: ST_TO_ADDR
28026: GO 28388
28028: LD_INT 17
28030: DOUBLE
28031: EQUAL
28032: IFTRUE 28036
28034: GO 28064
28036: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28037: LD_ADDR_OWVAR 42
28041: PUSH
28042: LD_INT 19
28044: PUSH
28045: LD_INT 23
28047: PUSH
28048: LD_INT 19
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: PUSH
28056: LD_VAR 0 1
28060: ARRAY
28061: ST_TO_ADDR
28062: GO 28388
28064: LD_INT 18
28066: DOUBLE
28067: EQUAL
28068: IFTRUE 28072
28070: GO 28083
28072: POP
// bc_type := b_ext_radar ; 19 :
28073: LD_ADDR_OWVAR 42
28077: PUSH
28078: LD_INT 20
28080: ST_TO_ADDR
28081: GO 28388
28083: LD_INT 19
28085: DOUBLE
28086: EQUAL
28087: IFTRUE 28091
28089: GO 28102
28091: POP
// bc_type := b_ext_radio ; 20 :
28092: LD_ADDR_OWVAR 42
28096: PUSH
28097: LD_INT 22
28099: ST_TO_ADDR
28100: GO 28388
28102: LD_INT 20
28104: DOUBLE
28105: EQUAL
28106: IFTRUE 28110
28108: GO 28121
28110: POP
// bc_type := b_ext_siberium ; 21 :
28111: LD_ADDR_OWVAR 42
28115: PUSH
28116: LD_INT 21
28118: ST_TO_ADDR
28119: GO 28388
28121: LD_INT 21
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28140
28129: POP
// bc_type := b_ext_computer ; 22 :
28130: LD_ADDR_OWVAR 42
28134: PUSH
28135: LD_INT 24
28137: ST_TO_ADDR
28138: GO 28388
28140: LD_INT 22
28142: DOUBLE
28143: EQUAL
28144: IFTRUE 28148
28146: GO 28159
28148: POP
// bc_type := b_ext_track ; 23 :
28149: LD_ADDR_OWVAR 42
28153: PUSH
28154: LD_INT 16
28156: ST_TO_ADDR
28157: GO 28388
28159: LD_INT 23
28161: DOUBLE
28162: EQUAL
28163: IFTRUE 28167
28165: GO 28178
28167: POP
// bc_type := b_ext_laser ; 24 :
28168: LD_ADDR_OWVAR 42
28172: PUSH
28173: LD_INT 25
28175: ST_TO_ADDR
28176: GO 28388
28178: LD_INT 24
28180: DOUBLE
28181: EQUAL
28182: IFTRUE 28186
28184: GO 28197
28186: POP
// bc_type := b_control_tower ; 25 :
28187: LD_ADDR_OWVAR 42
28191: PUSH
28192: LD_INT 36
28194: ST_TO_ADDR
28195: GO 28388
28197: LD_INT 25
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28216
28205: POP
// bc_type := b_breastwork ; 26 :
28206: LD_ADDR_OWVAR 42
28210: PUSH
28211: LD_INT 31
28213: ST_TO_ADDR
28214: GO 28388
28216: LD_INT 26
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28235
28224: POP
// bc_type := b_bunker ; 27 :
28225: LD_ADDR_OWVAR 42
28229: PUSH
28230: LD_INT 32
28232: ST_TO_ADDR
28233: GO 28388
28235: LD_INT 27
28237: DOUBLE
28238: EQUAL
28239: IFTRUE 28243
28241: GO 28254
28243: POP
// bc_type := b_turret ; 28 :
28244: LD_ADDR_OWVAR 42
28248: PUSH
28249: LD_INT 33
28251: ST_TO_ADDR
28252: GO 28388
28254: LD_INT 28
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28273
28262: POP
// bc_type := b_armoury ; 29 :
28263: LD_ADDR_OWVAR 42
28267: PUSH
28268: LD_INT 4
28270: ST_TO_ADDR
28271: GO 28388
28273: LD_INT 29
28275: DOUBLE
28276: EQUAL
28277: IFTRUE 28281
28279: GO 28292
28281: POP
// bc_type := b_barracks ; 30 :
28282: LD_ADDR_OWVAR 42
28286: PUSH
28287: LD_INT 5
28289: ST_TO_ADDR
28290: GO 28388
28292: LD_INT 30
28294: DOUBLE
28295: EQUAL
28296: IFTRUE 28300
28298: GO 28311
28300: POP
// bc_type := b_solar_power ; 31 :
28301: LD_ADDR_OWVAR 42
28305: PUSH
28306: LD_INT 27
28308: ST_TO_ADDR
28309: GO 28388
28311: LD_INT 31
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28330
28319: POP
// bc_type := b_oil_power ; 32 :
28320: LD_ADDR_OWVAR 42
28324: PUSH
28325: LD_INT 26
28327: ST_TO_ADDR
28328: GO 28388
28330: LD_INT 32
28332: DOUBLE
28333: EQUAL
28334: IFTRUE 28338
28336: GO 28349
28338: POP
// bc_type := b_siberite_power ; 33 :
28339: LD_ADDR_OWVAR 42
28343: PUSH
28344: LD_INT 28
28346: ST_TO_ADDR
28347: GO 28388
28349: LD_INT 33
28351: DOUBLE
28352: EQUAL
28353: IFTRUE 28357
28355: GO 28368
28357: POP
// bc_type := b_oil_mine ; 34 :
28358: LD_ADDR_OWVAR 42
28362: PUSH
28363: LD_INT 29
28365: ST_TO_ADDR
28366: GO 28388
28368: LD_INT 34
28370: DOUBLE
28371: EQUAL
28372: IFTRUE 28376
28374: GO 28387
28376: POP
// bc_type := b_siberite_mine ; end ;
28377: LD_ADDR_OWVAR 42
28381: PUSH
28382: LD_INT 30
28384: ST_TO_ADDR
28385: GO 28388
28387: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28388: LD_ADDR_VAR 0 8
28392: PUSH
28393: LD_VAR 0 5
28397: PPUSH
28398: LD_VAR 0 6
28402: PPUSH
28403: LD_VAR 0 3
28407: PPUSH
28408: CALL_OW 47
28412: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28413: LD_OWVAR 42
28417: PUSH
28418: LD_INT 32
28420: PUSH
28421: LD_INT 33
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: IN
28428: IFFALSE 28444
// PlaceWeaponTurret ( b , weapon ) ;
28430: LD_VAR 0 8
28434: PPUSH
28435: LD_VAR 0 4
28439: PPUSH
28440: CALL_OW 431
// end ;
28444: LD_VAR 0 7
28448: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28449: LD_INT 0
28451: PPUSH
28452: PPUSH
28453: PPUSH
28454: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28455: LD_ADDR_VAR 0 4
28459: PUSH
28460: LD_INT 22
28462: PUSH
28463: LD_OWVAR 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: LD_INT 30
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 30
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PPUSH
28504: CALL_OW 69
28508: ST_TO_ADDR
// if not tmp then
28509: LD_VAR 0 4
28513: NOT
28514: IFFALSE 28518
// exit ;
28516: GO 28577
// for i in tmp do
28518: LD_ADDR_VAR 0 2
28522: PUSH
28523: LD_VAR 0 4
28527: PUSH
28528: FOR_IN
28529: IFFALSE 28575
// for j = 1 to 3 do
28531: LD_ADDR_VAR 0 3
28535: PUSH
28536: DOUBLE
28537: LD_INT 1
28539: DEC
28540: ST_TO_ADDR
28541: LD_INT 3
28543: PUSH
28544: FOR_TO
28545: IFFALSE 28571
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28547: LD_VAR 0 2
28551: PPUSH
28552: CALL_OW 274
28556: PPUSH
28557: LD_VAR 0 3
28561: PPUSH
28562: LD_INT 99999
28564: PPUSH
28565: CALL_OW 277
28569: GO 28544
28571: POP
28572: POP
28573: GO 28528
28575: POP
28576: POP
// end ;
28577: LD_VAR 0 1
28581: RET
// export function hHackSetLevel10 ; var i , j ; begin
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
28586: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28587: LD_ADDR_VAR 0 2
28591: PUSH
28592: LD_INT 21
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PPUSH
28602: CALL_OW 69
28606: PUSH
28607: FOR_IN
28608: IFFALSE 28660
// if IsSelected ( i ) then
28610: LD_VAR 0 2
28614: PPUSH
28615: CALL_OW 306
28619: IFFALSE 28658
// begin for j := 1 to 4 do
28621: LD_ADDR_VAR 0 3
28625: PUSH
28626: DOUBLE
28627: LD_INT 1
28629: DEC
28630: ST_TO_ADDR
28631: LD_INT 4
28633: PUSH
28634: FOR_TO
28635: IFFALSE 28656
// SetSkill ( i , j , 10 ) ;
28637: LD_VAR 0 2
28641: PPUSH
28642: LD_VAR 0 3
28646: PPUSH
28647: LD_INT 10
28649: PPUSH
28650: CALL_OW 237
28654: GO 28634
28656: POP
28657: POP
// end ;
28658: GO 28607
28660: POP
28661: POP
// end ;
28662: LD_VAR 0 1
28666: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28667: LD_INT 0
28669: PPUSH
28670: PPUSH
28671: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28672: LD_ADDR_VAR 0 2
28676: PUSH
28677: LD_INT 22
28679: PUSH
28680: LD_OWVAR 2
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 21
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PPUSH
28703: CALL_OW 69
28707: PUSH
28708: FOR_IN
28709: IFFALSE 28750
// begin for j := 1 to 4 do
28711: LD_ADDR_VAR 0 3
28715: PUSH
28716: DOUBLE
28717: LD_INT 1
28719: DEC
28720: ST_TO_ADDR
28721: LD_INT 4
28723: PUSH
28724: FOR_TO
28725: IFFALSE 28746
// SetSkill ( i , j , 10 ) ;
28727: LD_VAR 0 2
28731: PPUSH
28732: LD_VAR 0 3
28736: PPUSH
28737: LD_INT 10
28739: PPUSH
28740: CALL_OW 237
28744: GO 28724
28746: POP
28747: POP
// end ;
28748: GO 28708
28750: POP
28751: POP
// end ;
28752: LD_VAR 0 1
28756: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28757: LD_INT 0
28759: PPUSH
// uc_side := your_side ;
28760: LD_ADDR_OWVAR 20
28764: PUSH
28765: LD_OWVAR 2
28769: ST_TO_ADDR
// uc_nation := nation ;
28770: LD_ADDR_OWVAR 21
28774: PUSH
28775: LD_VAR 0 1
28779: ST_TO_ADDR
// InitHc ;
28780: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28784: LD_INT 0
28786: PPUSH
28787: LD_VAR 0 2
28791: PPUSH
28792: LD_VAR 0 3
28796: PPUSH
28797: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28801: LD_VAR 0 4
28805: PPUSH
28806: LD_VAR 0 5
28810: PPUSH
28811: CALL_OW 428
28815: PUSH
28816: LD_INT 0
28818: EQUAL
28819: IFFALSE 28843
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28821: CALL_OW 44
28825: PPUSH
28826: LD_VAR 0 4
28830: PPUSH
28831: LD_VAR 0 5
28835: PPUSH
28836: LD_INT 1
28838: PPUSH
28839: CALL_OW 48
// end ;
28843: LD_VAR 0 6
28847: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28848: LD_INT 0
28850: PPUSH
28851: PPUSH
// uc_side := your_side ;
28852: LD_ADDR_OWVAR 20
28856: PUSH
28857: LD_OWVAR 2
28861: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28862: LD_VAR 0 1
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: LD_INT 3
28875: PUSH
28876: LD_INT 4
28878: PUSH
28879: LD_INT 5
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: IN
28889: IFFALSE 28901
// uc_nation := nation_american else
28891: LD_ADDR_OWVAR 21
28895: PUSH
28896: LD_INT 1
28898: ST_TO_ADDR
28899: GO 28944
// if chassis in [ 11 , 12 , 13 , 14 ] then
28901: LD_VAR 0 1
28905: PUSH
28906: LD_INT 11
28908: PUSH
28909: LD_INT 12
28911: PUSH
28912: LD_INT 13
28914: PUSH
28915: LD_INT 14
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: IN
28924: IFFALSE 28936
// uc_nation := nation_arabian else
28926: LD_ADDR_OWVAR 21
28930: PUSH
28931: LD_INT 2
28933: ST_TO_ADDR
28934: GO 28944
// uc_nation := nation_russian ;
28936: LD_ADDR_OWVAR 21
28940: PUSH
28941: LD_INT 3
28943: ST_TO_ADDR
// vc_chassis := chassis ;
28944: LD_ADDR_OWVAR 37
28948: PUSH
28949: LD_VAR 0 1
28953: ST_TO_ADDR
// vc_engine := engine ;
28954: LD_ADDR_OWVAR 39
28958: PUSH
28959: LD_VAR 0 2
28963: ST_TO_ADDR
// vc_control := control ;
28964: LD_ADDR_OWVAR 38
28968: PUSH
28969: LD_VAR 0 3
28973: ST_TO_ADDR
// vc_weapon := weapon ;
28974: LD_ADDR_OWVAR 40
28978: PUSH
28979: LD_VAR 0 4
28983: ST_TO_ADDR
// un := CreateVehicle ;
28984: LD_ADDR_VAR 0 8
28988: PUSH
28989: CALL_OW 45
28993: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28994: LD_VAR 0 8
28998: PPUSH
28999: LD_INT 0
29001: PPUSH
29002: LD_INT 5
29004: PPUSH
29005: CALL_OW 12
29009: PPUSH
29010: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29014: LD_VAR 0 8
29018: PPUSH
29019: LD_VAR 0 5
29023: PPUSH
29024: LD_VAR 0 6
29028: PPUSH
29029: LD_INT 1
29031: PPUSH
29032: CALL_OW 48
// end ;
29036: LD_VAR 0 7
29040: RET
// export hInvincible ; every 1 do
29041: GO 29043
29043: DISABLE
// hInvincible := [ ] ;
29044: LD_ADDR_EXP 94
29048: PUSH
29049: EMPTY
29050: ST_TO_ADDR
29051: END
// every 10 do var i ;
29052: GO 29054
29054: DISABLE
29055: LD_INT 0
29057: PPUSH
// begin enable ;
29058: ENABLE
// if not hInvincible then
29059: LD_EXP 94
29063: NOT
29064: IFFALSE 29068
// exit ;
29066: GO 29112
// for i in hInvincible do
29068: LD_ADDR_VAR 0 1
29072: PUSH
29073: LD_EXP 94
29077: PUSH
29078: FOR_IN
29079: IFFALSE 29110
// if GetLives ( i ) < 1000 then
29081: LD_VAR 0 1
29085: PPUSH
29086: CALL_OW 256
29090: PUSH
29091: LD_INT 1000
29093: LESS
29094: IFFALSE 29108
// SetLives ( i , 1000 ) ;
29096: LD_VAR 0 1
29100: PPUSH
29101: LD_INT 1000
29103: PPUSH
29104: CALL_OW 234
29108: GO 29078
29110: POP
29111: POP
// end ;
29112: PPOPN 1
29114: END
// export function hHackInvincible ; var i ; begin
29115: LD_INT 0
29117: PPUSH
29118: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29119: LD_ADDR_VAR 0 2
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: LD_INT 21
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 21
29139: PUSH
29140: LD_INT 2
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: PPUSH
29152: CALL_OW 69
29156: PUSH
29157: FOR_IN
29158: IFFALSE 29219
// if IsSelected ( i ) then
29160: LD_VAR 0 2
29164: PPUSH
29165: CALL_OW 306
29169: IFFALSE 29217
// begin if i in hInvincible then
29171: LD_VAR 0 2
29175: PUSH
29176: LD_EXP 94
29180: IN
29181: IFFALSE 29201
// hInvincible := hInvincible diff i else
29183: LD_ADDR_EXP 94
29187: PUSH
29188: LD_EXP 94
29192: PUSH
29193: LD_VAR 0 2
29197: DIFF
29198: ST_TO_ADDR
29199: GO 29217
// hInvincible := hInvincible union i ;
29201: LD_ADDR_EXP 94
29205: PUSH
29206: LD_EXP 94
29210: PUSH
29211: LD_VAR 0 2
29215: UNION
29216: ST_TO_ADDR
// end ;
29217: GO 29157
29219: POP
29220: POP
// end ;
29221: LD_VAR 0 1
29225: RET
// export function hHackInvisible ; var i , j ; begin
29226: LD_INT 0
29228: PPUSH
29229: PPUSH
29230: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29231: LD_ADDR_VAR 0 2
29235: PUSH
29236: LD_INT 21
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PPUSH
29246: CALL_OW 69
29250: PUSH
29251: FOR_IN
29252: IFFALSE 29276
// if IsSelected ( i ) then
29254: LD_VAR 0 2
29258: PPUSH
29259: CALL_OW 306
29263: IFFALSE 29274
// ComForceInvisible ( i ) ;
29265: LD_VAR 0 2
29269: PPUSH
29270: CALL_OW 496
29274: GO 29251
29276: POP
29277: POP
// end ;
29278: LD_VAR 0 1
29282: RET
// export function hHackChangeYourSide ; begin
29283: LD_INT 0
29285: PPUSH
// if your_side = 8 then
29286: LD_OWVAR 2
29290: PUSH
29291: LD_INT 8
29293: EQUAL
29294: IFFALSE 29306
// your_side := 0 else
29296: LD_ADDR_OWVAR 2
29300: PUSH
29301: LD_INT 0
29303: ST_TO_ADDR
29304: GO 29320
// your_side := your_side + 1 ;
29306: LD_ADDR_OWVAR 2
29310: PUSH
29311: LD_OWVAR 2
29315: PUSH
29316: LD_INT 1
29318: PLUS
29319: ST_TO_ADDR
// end ;
29320: LD_VAR 0 1
29324: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29325: LD_INT 0
29327: PPUSH
29328: PPUSH
29329: PPUSH
// for i in all_units do
29330: LD_ADDR_VAR 0 2
29334: PUSH
29335: LD_OWVAR 3
29339: PUSH
29340: FOR_IN
29341: IFFALSE 29419
// if IsSelected ( i ) then
29343: LD_VAR 0 2
29347: PPUSH
29348: CALL_OW 306
29352: IFFALSE 29417
// begin j := GetSide ( i ) ;
29354: LD_ADDR_VAR 0 3
29358: PUSH
29359: LD_VAR 0 2
29363: PPUSH
29364: CALL_OW 255
29368: ST_TO_ADDR
// if j = 8 then
29369: LD_VAR 0 3
29373: PUSH
29374: LD_INT 8
29376: EQUAL
29377: IFFALSE 29389
// j := 0 else
29379: LD_ADDR_VAR 0 3
29383: PUSH
29384: LD_INT 0
29386: ST_TO_ADDR
29387: GO 29403
// j := j + 1 ;
29389: LD_ADDR_VAR 0 3
29393: PUSH
29394: LD_VAR 0 3
29398: PUSH
29399: LD_INT 1
29401: PLUS
29402: ST_TO_ADDR
// SetSide ( i , j ) ;
29403: LD_VAR 0 2
29407: PPUSH
29408: LD_VAR 0 3
29412: PPUSH
29413: CALL_OW 235
// end ;
29417: GO 29340
29419: POP
29420: POP
// end ;
29421: LD_VAR 0 1
29425: RET
// export function hHackFog ; begin
29426: LD_INT 0
29428: PPUSH
// FogOff ( true ) ;
29429: LD_INT 1
29431: PPUSH
29432: CALL_OW 344
// end ;
29436: LD_VAR 0 1
29440: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29441: LD_INT 0
29443: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29444: LD_VAR 0 1
29448: PPUSH
29449: LD_VAR 0 2
29453: PPUSH
29454: LD_VAR 0 3
29458: PPUSH
29459: LD_INT 1
29461: PPUSH
29462: LD_INT 1
29464: PPUSH
29465: CALL_OW 483
// CenterOnXY ( x , y ) ;
29469: LD_VAR 0 2
29473: PPUSH
29474: LD_VAR 0 3
29478: PPUSH
29479: CALL_OW 84
// end ;
29483: LD_VAR 0 4
29487: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29488: LD_INT 0
29490: PPUSH
29491: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29492: LD_VAR 0 1
29496: NOT
29497: PUSH
29498: LD_VAR 0 2
29502: PPUSH
29503: LD_VAR 0 3
29507: PPUSH
29508: CALL_OW 488
29512: NOT
29513: OR
29514: PUSH
29515: LD_VAR 0 1
29519: PPUSH
29520: CALL_OW 266
29524: PUSH
29525: LD_INT 3
29527: NONEQUAL
29528: PUSH
29529: LD_VAR 0 1
29533: PPUSH
29534: CALL_OW 247
29538: PUSH
29539: LD_INT 1
29541: EQUAL
29542: NOT
29543: AND
29544: OR
29545: IFFALSE 29549
// exit ;
29547: GO 29698
// if GetType ( factory ) = unit_human then
29549: LD_VAR 0 1
29553: PPUSH
29554: CALL_OW 247
29558: PUSH
29559: LD_INT 1
29561: EQUAL
29562: IFFALSE 29579
// factory := IsInUnit ( factory ) ;
29564: LD_ADDR_VAR 0 1
29568: PUSH
29569: LD_VAR 0 1
29573: PPUSH
29574: CALL_OW 310
29578: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29579: LD_VAR 0 1
29583: PPUSH
29584: CALL_OW 266
29588: PUSH
29589: LD_INT 3
29591: NONEQUAL
29592: IFFALSE 29596
// exit ;
29594: GO 29698
// if HexInfo ( x , y ) = factory then
29596: LD_VAR 0 2
29600: PPUSH
29601: LD_VAR 0 3
29605: PPUSH
29606: CALL_OW 428
29610: PUSH
29611: LD_VAR 0 1
29615: EQUAL
29616: IFFALSE 29643
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29618: LD_ADDR_EXP 95
29622: PUSH
29623: LD_EXP 95
29627: PPUSH
29628: LD_VAR 0 1
29632: PPUSH
29633: LD_INT 0
29635: PPUSH
29636: CALL_OW 1
29640: ST_TO_ADDR
29641: GO 29694
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29643: LD_ADDR_EXP 95
29647: PUSH
29648: LD_EXP 95
29652: PPUSH
29653: LD_VAR 0 1
29657: PPUSH
29658: LD_VAR 0 1
29662: PPUSH
29663: CALL_OW 255
29667: PUSH
29668: LD_VAR 0 1
29672: PUSH
29673: LD_VAR 0 2
29677: PUSH
29678: LD_VAR 0 3
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 1
29693: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29694: CALL 29703 0 0
// end ;
29698: LD_VAR 0 4
29702: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29703: LD_INT 0
29705: PPUSH
29706: PPUSH
29707: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29708: LD_STRING resetFactoryWaypoint();
29710: PPUSH
29711: CALL_OW 559
// if factoryWaypoints then
29715: LD_EXP 95
29719: IFFALSE 29845
// begin list := PrepareArray ( factoryWaypoints ) ;
29721: LD_ADDR_VAR 0 3
29725: PUSH
29726: LD_EXP 95
29730: PPUSH
29731: CALL 72025 0 1
29735: ST_TO_ADDR
// for i := 1 to list do
29736: LD_ADDR_VAR 0 2
29740: PUSH
29741: DOUBLE
29742: LD_INT 1
29744: DEC
29745: ST_TO_ADDR
29746: LD_VAR 0 3
29750: PUSH
29751: FOR_TO
29752: IFFALSE 29843
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29754: LD_STRING setFactoryWaypointXY(
29756: PUSH
29757: LD_VAR 0 3
29761: PUSH
29762: LD_VAR 0 2
29766: ARRAY
29767: PUSH
29768: LD_INT 1
29770: ARRAY
29771: STR
29772: PUSH
29773: LD_STRING ,
29775: STR
29776: PUSH
29777: LD_VAR 0 3
29781: PUSH
29782: LD_VAR 0 2
29786: ARRAY
29787: PUSH
29788: LD_INT 2
29790: ARRAY
29791: STR
29792: PUSH
29793: LD_STRING ,
29795: STR
29796: PUSH
29797: LD_VAR 0 3
29801: PUSH
29802: LD_VAR 0 2
29806: ARRAY
29807: PUSH
29808: LD_INT 3
29810: ARRAY
29811: STR
29812: PUSH
29813: LD_STRING ,
29815: STR
29816: PUSH
29817: LD_VAR 0 3
29821: PUSH
29822: LD_VAR 0 2
29826: ARRAY
29827: PUSH
29828: LD_INT 4
29830: ARRAY
29831: STR
29832: PUSH
29833: LD_STRING )
29835: STR
29836: PPUSH
29837: CALL_OW 559
29841: GO 29751
29843: POP
29844: POP
// end ; end ;
29845: LD_VAR 0 1
29849: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29850: LD_INT 0
29852: PPUSH
// if HexInfo ( x , y ) = warehouse then
29853: LD_VAR 0 2
29857: PPUSH
29858: LD_VAR 0 3
29862: PPUSH
29863: CALL_OW 428
29867: PUSH
29868: LD_VAR 0 1
29872: EQUAL
29873: IFFALSE 29900
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29875: LD_ADDR_EXP 96
29879: PUSH
29880: LD_EXP 96
29884: PPUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: LD_INT 0
29892: PPUSH
29893: CALL_OW 1
29897: ST_TO_ADDR
29898: GO 29951
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29900: LD_ADDR_EXP 96
29904: PUSH
29905: LD_EXP 96
29909: PPUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: LD_VAR 0 1
29919: PPUSH
29920: CALL_OW 255
29924: PUSH
29925: LD_VAR 0 1
29929: PUSH
29930: LD_VAR 0 2
29934: PUSH
29935: LD_VAR 0 3
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: PPUSH
29946: CALL_OW 1
29950: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29951: CALL 29960 0 0
// end ;
29955: LD_VAR 0 4
29959: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29960: LD_INT 0
29962: PPUSH
29963: PPUSH
29964: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29965: LD_STRING resetWarehouseGatheringPoints();
29967: PPUSH
29968: CALL_OW 559
// if warehouseGatheringPoints then
29972: LD_EXP 96
29976: IFFALSE 30102
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29978: LD_ADDR_VAR 0 3
29982: PUSH
29983: LD_EXP 96
29987: PPUSH
29988: CALL 72025 0 1
29992: ST_TO_ADDR
// for i := 1 to list do
29993: LD_ADDR_VAR 0 2
29997: PUSH
29998: DOUBLE
29999: LD_INT 1
30001: DEC
30002: ST_TO_ADDR
30003: LD_VAR 0 3
30007: PUSH
30008: FOR_TO
30009: IFFALSE 30100
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30011: LD_STRING setWarehouseGatheringPointXY(
30013: PUSH
30014: LD_VAR 0 3
30018: PUSH
30019: LD_VAR 0 2
30023: ARRAY
30024: PUSH
30025: LD_INT 1
30027: ARRAY
30028: STR
30029: PUSH
30030: LD_STRING ,
30032: STR
30033: PUSH
30034: LD_VAR 0 3
30038: PUSH
30039: LD_VAR 0 2
30043: ARRAY
30044: PUSH
30045: LD_INT 2
30047: ARRAY
30048: STR
30049: PUSH
30050: LD_STRING ,
30052: STR
30053: PUSH
30054: LD_VAR 0 3
30058: PUSH
30059: LD_VAR 0 2
30063: ARRAY
30064: PUSH
30065: LD_INT 3
30067: ARRAY
30068: STR
30069: PUSH
30070: LD_STRING ,
30072: STR
30073: PUSH
30074: LD_VAR 0 3
30078: PUSH
30079: LD_VAR 0 2
30083: ARRAY
30084: PUSH
30085: LD_INT 4
30087: ARRAY
30088: STR
30089: PUSH
30090: LD_STRING )
30092: STR
30093: PPUSH
30094: CALL_OW 559
30098: GO 30008
30100: POP
30101: POP
// end ; end ;
30102: LD_VAR 0 1
30106: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30107: LD_EXP 96
30111: IFFALSE 30796
30113: GO 30115
30115: DISABLE
30116: LD_INT 0
30118: PPUSH
30119: PPUSH
30120: PPUSH
30121: PPUSH
30122: PPUSH
30123: PPUSH
30124: PPUSH
30125: PPUSH
30126: PPUSH
// begin enable ;
30127: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_EXP 96
30137: PPUSH
30138: CALL 72025 0 1
30142: ST_TO_ADDR
// if not list then
30143: LD_VAR 0 3
30147: NOT
30148: IFFALSE 30152
// exit ;
30150: GO 30796
// for i := 1 to list do
30152: LD_ADDR_VAR 0 1
30156: PUSH
30157: DOUBLE
30158: LD_INT 1
30160: DEC
30161: ST_TO_ADDR
30162: LD_VAR 0 3
30166: PUSH
30167: FOR_TO
30168: IFFALSE 30794
// begin depot := list [ i ] [ 2 ] ;
30170: LD_ADDR_VAR 0 8
30174: PUSH
30175: LD_VAR 0 3
30179: PUSH
30180: LD_VAR 0 1
30184: ARRAY
30185: PUSH
30186: LD_INT 2
30188: ARRAY
30189: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30190: LD_ADDR_VAR 0 5
30194: PUSH
30195: LD_VAR 0 3
30199: PUSH
30200: LD_VAR 0 1
30204: ARRAY
30205: PUSH
30206: LD_INT 1
30208: ARRAY
30209: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30210: LD_VAR 0 8
30214: PPUSH
30215: CALL_OW 301
30219: PUSH
30220: LD_VAR 0 5
30224: PUSH
30225: LD_VAR 0 8
30229: PPUSH
30230: CALL_OW 255
30234: NONEQUAL
30235: OR
30236: IFFALSE 30265
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30238: LD_ADDR_EXP 96
30242: PUSH
30243: LD_EXP 96
30247: PPUSH
30248: LD_VAR 0 8
30252: PPUSH
30253: LD_INT 0
30255: PPUSH
30256: CALL_OW 1
30260: ST_TO_ADDR
// exit ;
30261: POP
30262: POP
30263: GO 30796
// end ; x := list [ i ] [ 3 ] ;
30265: LD_ADDR_VAR 0 6
30269: PUSH
30270: LD_VAR 0 3
30274: PUSH
30275: LD_VAR 0 1
30279: ARRAY
30280: PUSH
30281: LD_INT 3
30283: ARRAY
30284: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30285: LD_ADDR_VAR 0 7
30289: PUSH
30290: LD_VAR 0 3
30294: PUSH
30295: LD_VAR 0 1
30299: ARRAY
30300: PUSH
30301: LD_INT 4
30303: ARRAY
30304: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30305: LD_ADDR_VAR 0 9
30309: PUSH
30310: LD_VAR 0 6
30314: PPUSH
30315: LD_VAR 0 7
30319: PPUSH
30320: LD_INT 16
30322: PPUSH
30323: CALL 70613 0 3
30327: ST_TO_ADDR
// if not cratesNearbyPoint then
30328: LD_VAR 0 9
30332: NOT
30333: IFFALSE 30339
// exit ;
30335: POP
30336: POP
30337: GO 30796
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30339: LD_ADDR_VAR 0 4
30343: PUSH
30344: LD_INT 22
30346: PUSH
30347: LD_VAR 0 5
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 3
30358: PUSH
30359: LD_INT 60
30361: PUSH
30362: EMPTY
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 91
30371: PUSH
30372: LD_VAR 0 8
30376: PUSH
30377: LD_INT 6
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: LD_INT 25
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 25
30400: PUSH
30401: LD_INT 16
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: PPUSH
30419: CALL_OW 69
30423: PUSH
30424: LD_VAR 0 8
30428: PPUSH
30429: CALL_OW 313
30433: PPUSH
30434: LD_INT 3
30436: PUSH
30437: LD_INT 60
30439: PUSH
30440: EMPTY
30441: LIST
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: LD_INT 25
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 25
30462: PUSH
30463: LD_INT 16
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PPUSH
30479: CALL_OW 72
30483: UNION
30484: ST_TO_ADDR
// if tmp then
30485: LD_VAR 0 4
30489: IFFALSE 30569
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30491: LD_ADDR_VAR 0 4
30495: PUSH
30496: LD_VAR 0 4
30500: PPUSH
30501: LD_INT 3
30503: PPUSH
30504: CALL 68582 0 2
30508: ST_TO_ADDR
// for j in tmp do
30509: LD_ADDR_VAR 0 2
30513: PUSH
30514: LD_VAR 0 4
30518: PUSH
30519: FOR_IN
30520: IFFALSE 30563
// begin if IsInUnit ( j ) then
30522: LD_VAR 0 2
30526: PPUSH
30527: CALL_OW 310
30531: IFFALSE 30542
// ComExit ( j ) ;
30533: LD_VAR 0 2
30537: PPUSH
30538: CALL 68665 0 1
// AddComCollect ( j , x , y ) ;
30542: LD_VAR 0 2
30546: PPUSH
30547: LD_VAR 0 6
30551: PPUSH
30552: LD_VAR 0 7
30556: PPUSH
30557: CALL_OW 177
// end ;
30561: GO 30519
30563: POP
30564: POP
// exit ;
30565: POP
30566: POP
30567: GO 30796
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30569: LD_ADDR_VAR 0 4
30573: PUSH
30574: LD_INT 22
30576: PUSH
30577: LD_VAR 0 5
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 91
30588: PUSH
30589: LD_VAR 0 8
30593: PUSH
30594: LD_INT 8
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 34
30607: PUSH
30608: LD_INT 12
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 34
30617: PUSH
30618: LD_INT 51
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 34
30627: PUSH
30628: LD_INT 32
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 34
30637: PUSH
30638: LD_INT 89
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: PPUSH
30657: CALL_OW 69
30661: ST_TO_ADDR
// if tmp then
30662: LD_VAR 0 4
30666: IFFALSE 30792
// begin for j in tmp do
30668: LD_ADDR_VAR 0 2
30672: PUSH
30673: LD_VAR 0 4
30677: PUSH
30678: FOR_IN
30679: IFFALSE 30790
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30681: LD_VAR 0 2
30685: PPUSH
30686: CALL_OW 262
30690: PUSH
30691: LD_INT 3
30693: EQUAL
30694: PUSH
30695: LD_VAR 0 2
30699: PPUSH
30700: CALL_OW 261
30704: PUSH
30705: LD_INT 20
30707: GREATER
30708: OR
30709: PUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: CALL_OW 314
30719: NOT
30720: AND
30721: PUSH
30722: LD_VAR 0 2
30726: PPUSH
30727: CALL_OW 263
30731: PUSH
30732: LD_INT 1
30734: NONEQUAL
30735: PUSH
30736: LD_VAR 0 2
30740: PPUSH
30741: CALL_OW 311
30745: OR
30746: AND
30747: IFFALSE 30788
// begin ComCollect ( j , x , y ) ;
30749: LD_VAR 0 2
30753: PPUSH
30754: LD_VAR 0 6
30758: PPUSH
30759: LD_VAR 0 7
30763: PPUSH
30764: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30768: LD_VAR 0 2
30772: PPUSH
30773: LD_VAR 0 8
30777: PPUSH
30778: CALL_OW 172
// exit ;
30782: POP
30783: POP
30784: POP
30785: POP
30786: GO 30796
// end ;
30788: GO 30678
30790: POP
30791: POP
// end ; end ;
30792: GO 30167
30794: POP
30795: POP
// end ; end_of_file end_of_file
30796: PPOPN 9
30798: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30799: LD_INT 0
30801: PPUSH
30802: PPUSH
// if exist_mode then
30803: LD_VAR 0 2
30807: IFFALSE 30832
// unit := CreateCharacter ( prefix & ident ) else
30809: LD_ADDR_VAR 0 5
30813: PUSH
30814: LD_VAR 0 3
30818: PUSH
30819: LD_VAR 0 1
30823: STR
30824: PPUSH
30825: CALL_OW 34
30829: ST_TO_ADDR
30830: GO 30847
// unit := NewCharacter ( ident ) ;
30832: LD_ADDR_VAR 0 5
30836: PUSH
30837: LD_VAR 0 1
30841: PPUSH
30842: CALL_OW 25
30846: ST_TO_ADDR
// result := unit ;
30847: LD_ADDR_VAR 0 4
30851: PUSH
30852: LD_VAR 0 5
30856: ST_TO_ADDR
// end ;
30857: LD_VAR 0 4
30861: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30862: LD_INT 0
30864: PPUSH
30865: PPUSH
// if not side or not nation then
30866: LD_VAR 0 1
30870: NOT
30871: PUSH
30872: LD_VAR 0 2
30876: NOT
30877: OR
30878: IFFALSE 30882
// exit ;
30880: GO 31650
// case nation of nation_american :
30882: LD_VAR 0 2
30886: PUSH
30887: LD_INT 1
30889: DOUBLE
30890: EQUAL
30891: IFTRUE 30895
30893: GO 31109
30895: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30896: LD_ADDR_VAR 0 4
30900: PUSH
30901: LD_INT 35
30903: PUSH
30904: LD_INT 45
30906: PUSH
30907: LD_INT 46
30909: PUSH
30910: LD_INT 47
30912: PUSH
30913: LD_INT 82
30915: PUSH
30916: LD_INT 83
30918: PUSH
30919: LD_INT 84
30921: PUSH
30922: LD_INT 85
30924: PUSH
30925: LD_INT 86
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: LD_INT 6
30936: PUSH
30937: LD_INT 15
30939: PUSH
30940: LD_INT 16
30942: PUSH
30943: LD_INT 7
30945: PUSH
30946: LD_INT 12
30948: PUSH
30949: LD_INT 13
30951: PUSH
30952: LD_INT 10
30954: PUSH
30955: LD_INT 14
30957: PUSH
30958: LD_INT 20
30960: PUSH
30961: LD_INT 21
30963: PUSH
30964: LD_INT 22
30966: PUSH
30967: LD_INT 25
30969: PUSH
30970: LD_INT 32
30972: PUSH
30973: LD_INT 27
30975: PUSH
30976: LD_INT 36
30978: PUSH
30979: LD_INT 69
30981: PUSH
30982: LD_INT 39
30984: PUSH
30985: LD_INT 34
30987: PUSH
30988: LD_INT 40
30990: PUSH
30991: LD_INT 48
30993: PUSH
30994: LD_INT 49
30996: PUSH
30997: LD_INT 50
30999: PUSH
31000: LD_INT 51
31002: PUSH
31003: LD_INT 52
31005: PUSH
31006: LD_INT 53
31008: PUSH
31009: LD_INT 54
31011: PUSH
31012: LD_INT 55
31014: PUSH
31015: LD_INT 56
31017: PUSH
31018: LD_INT 57
31020: PUSH
31021: LD_INT 58
31023: PUSH
31024: LD_INT 59
31026: PUSH
31027: LD_INT 60
31029: PUSH
31030: LD_INT 61
31032: PUSH
31033: LD_INT 62
31035: PUSH
31036: LD_INT 80
31038: PUSH
31039: LD_INT 82
31041: PUSH
31042: LD_INT 83
31044: PUSH
31045: LD_INT 84
31047: PUSH
31048: LD_INT 85
31050: PUSH
31051: LD_INT 86
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: ST_TO_ADDR
31107: GO 31574
31109: LD_INT 2
31111: DOUBLE
31112: EQUAL
31113: IFTRUE 31117
31115: GO 31343
31117: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31118: LD_ADDR_VAR 0 4
31122: PUSH
31123: LD_INT 35
31125: PUSH
31126: LD_INT 45
31128: PUSH
31129: LD_INT 46
31131: PUSH
31132: LD_INT 47
31134: PUSH
31135: LD_INT 82
31137: PUSH
31138: LD_INT 83
31140: PUSH
31141: LD_INT 84
31143: PUSH
31144: LD_INT 85
31146: PUSH
31147: LD_INT 87
31149: PUSH
31150: LD_INT 70
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 11
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: LD_INT 4
31164: PUSH
31165: LD_INT 5
31167: PUSH
31168: LD_INT 6
31170: PUSH
31171: LD_INT 15
31173: PUSH
31174: LD_INT 18
31176: PUSH
31177: LD_INT 7
31179: PUSH
31180: LD_INT 17
31182: PUSH
31183: LD_INT 8
31185: PUSH
31186: LD_INT 20
31188: PUSH
31189: LD_INT 21
31191: PUSH
31192: LD_INT 22
31194: PUSH
31195: LD_INT 72
31197: PUSH
31198: LD_INT 26
31200: PUSH
31201: LD_INT 69
31203: PUSH
31204: LD_INT 39
31206: PUSH
31207: LD_INT 40
31209: PUSH
31210: LD_INT 41
31212: PUSH
31213: LD_INT 42
31215: PUSH
31216: LD_INT 43
31218: PUSH
31219: LD_INT 48
31221: PUSH
31222: LD_INT 49
31224: PUSH
31225: LD_INT 50
31227: PUSH
31228: LD_INT 51
31230: PUSH
31231: LD_INT 52
31233: PUSH
31234: LD_INT 53
31236: PUSH
31237: LD_INT 54
31239: PUSH
31240: LD_INT 55
31242: PUSH
31243: LD_INT 56
31245: PUSH
31246: LD_INT 60
31248: PUSH
31249: LD_INT 61
31251: PUSH
31252: LD_INT 62
31254: PUSH
31255: LD_INT 66
31257: PUSH
31258: LD_INT 67
31260: PUSH
31261: LD_INT 68
31263: PUSH
31264: LD_INT 81
31266: PUSH
31267: LD_INT 82
31269: PUSH
31270: LD_INT 83
31272: PUSH
31273: LD_INT 84
31275: PUSH
31276: LD_INT 85
31278: PUSH
31279: LD_INT 87
31281: PUSH
31282: LD_INT 88
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: ST_TO_ADDR
31341: GO 31574
31343: LD_INT 3
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31573
31351: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31352: LD_ADDR_VAR 0 4
31356: PUSH
31357: LD_INT 46
31359: PUSH
31360: LD_INT 47
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: LD_INT 82
31371: PUSH
31372: LD_INT 83
31374: PUSH
31375: LD_INT 84
31377: PUSH
31378: LD_INT 85
31380: PUSH
31381: LD_INT 86
31383: PUSH
31384: LD_INT 11
31386: PUSH
31387: LD_INT 9
31389: PUSH
31390: LD_INT 20
31392: PUSH
31393: LD_INT 19
31395: PUSH
31396: LD_INT 21
31398: PUSH
31399: LD_INT 24
31401: PUSH
31402: LD_INT 22
31404: PUSH
31405: LD_INT 25
31407: PUSH
31408: LD_INT 28
31410: PUSH
31411: LD_INT 29
31413: PUSH
31414: LD_INT 30
31416: PUSH
31417: LD_INT 31
31419: PUSH
31420: LD_INT 37
31422: PUSH
31423: LD_INT 38
31425: PUSH
31426: LD_INT 32
31428: PUSH
31429: LD_INT 27
31431: PUSH
31432: LD_INT 33
31434: PUSH
31435: LD_INT 69
31437: PUSH
31438: LD_INT 39
31440: PUSH
31441: LD_INT 34
31443: PUSH
31444: LD_INT 40
31446: PUSH
31447: LD_INT 71
31449: PUSH
31450: LD_INT 23
31452: PUSH
31453: LD_INT 44
31455: PUSH
31456: LD_INT 48
31458: PUSH
31459: LD_INT 49
31461: PUSH
31462: LD_INT 50
31464: PUSH
31465: LD_INT 51
31467: PUSH
31468: LD_INT 52
31470: PUSH
31471: LD_INT 53
31473: PUSH
31474: LD_INT 54
31476: PUSH
31477: LD_INT 55
31479: PUSH
31480: LD_INT 56
31482: PUSH
31483: LD_INT 57
31485: PUSH
31486: LD_INT 58
31488: PUSH
31489: LD_INT 59
31491: PUSH
31492: LD_INT 63
31494: PUSH
31495: LD_INT 64
31497: PUSH
31498: LD_INT 65
31500: PUSH
31501: LD_INT 82
31503: PUSH
31504: LD_INT 83
31506: PUSH
31507: LD_INT 84
31509: PUSH
31510: LD_INT 85
31512: PUSH
31513: LD_INT 86
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: ST_TO_ADDR
31571: GO 31574
31573: POP
// if state > - 1 and state < 3 then
31574: LD_VAR 0 3
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: GREATER
31583: PUSH
31584: LD_VAR 0 3
31588: PUSH
31589: LD_INT 3
31591: LESS
31592: AND
31593: IFFALSE 31650
// for i in result do
31595: LD_ADDR_VAR 0 5
31599: PUSH
31600: LD_VAR 0 4
31604: PUSH
31605: FOR_IN
31606: IFFALSE 31648
// if GetTech ( i , side ) <> state then
31608: LD_VAR 0 5
31612: PPUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL_OW 321
31622: PUSH
31623: LD_VAR 0 3
31627: NONEQUAL
31628: IFFALSE 31646
// result := result diff i ;
31630: LD_ADDR_VAR 0 4
31634: PUSH
31635: LD_VAR 0 4
31639: PUSH
31640: LD_VAR 0 5
31644: DIFF
31645: ST_TO_ADDR
31646: GO 31605
31648: POP
31649: POP
// end ;
31650: LD_VAR 0 4
31654: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
31659: PPUSH
// result := true ;
31660: LD_ADDR_VAR 0 3
31664: PUSH
31665: LD_INT 1
31667: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31668: LD_ADDR_VAR 0 5
31672: PUSH
31673: LD_VAR 0 2
31677: PPUSH
31678: CALL_OW 480
31682: ST_TO_ADDR
// if not tmp then
31683: LD_VAR 0 5
31687: NOT
31688: IFFALSE 31692
// exit ;
31690: GO 31741
// for i in tmp do
31692: LD_ADDR_VAR 0 4
31696: PUSH
31697: LD_VAR 0 5
31701: PUSH
31702: FOR_IN
31703: IFFALSE 31739
// if GetTech ( i , side ) <> state_researched then
31705: LD_VAR 0 4
31709: PPUSH
31710: LD_VAR 0 1
31714: PPUSH
31715: CALL_OW 321
31719: PUSH
31720: LD_INT 2
31722: NONEQUAL
31723: IFFALSE 31737
// begin result := false ;
31725: LD_ADDR_VAR 0 3
31729: PUSH
31730: LD_INT 0
31732: ST_TO_ADDR
// exit ;
31733: POP
31734: POP
31735: GO 31741
// end ;
31737: GO 31702
31739: POP
31740: POP
// end ;
31741: LD_VAR 0 3
31745: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31746: LD_INT 0
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
31754: PPUSH
31755: PPUSH
31756: PPUSH
31757: PPUSH
31758: PPUSH
31759: PPUSH
31760: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31761: LD_VAR 0 1
31765: NOT
31766: PUSH
31767: LD_VAR 0 1
31771: PPUSH
31772: CALL_OW 257
31776: PUSH
31777: LD_INT 9
31779: NONEQUAL
31780: OR
31781: IFFALSE 31785
// exit ;
31783: GO 32358
// side := GetSide ( unit ) ;
31785: LD_ADDR_VAR 0 9
31789: PUSH
31790: LD_VAR 0 1
31794: PPUSH
31795: CALL_OW 255
31799: ST_TO_ADDR
// tech_space := tech_spacanom ;
31800: LD_ADDR_VAR 0 12
31804: PUSH
31805: LD_INT 29
31807: ST_TO_ADDR
// tech_time := tech_taurad ;
31808: LD_ADDR_VAR 0 13
31812: PUSH
31813: LD_INT 28
31815: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31816: LD_ADDR_VAR 0 11
31820: PUSH
31821: LD_VAR 0 1
31825: PPUSH
31826: CALL_OW 310
31830: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31831: LD_VAR 0 11
31835: PPUSH
31836: CALL_OW 247
31840: PUSH
31841: LD_INT 2
31843: EQUAL
31844: IFFALSE 31848
// exit ;
31846: GO 32358
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31848: LD_ADDR_VAR 0 8
31852: PUSH
31853: LD_INT 81
31855: PUSH
31856: LD_VAR 0 9
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: LD_INT 21
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PPUSH
31886: CALL_OW 69
31890: ST_TO_ADDR
// if not tmp then
31891: LD_VAR 0 8
31895: NOT
31896: IFFALSE 31900
// exit ;
31898: GO 32358
// if in_unit then
31900: LD_VAR 0 11
31904: IFFALSE 31928
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31906: LD_ADDR_VAR 0 10
31910: PUSH
31911: LD_VAR 0 8
31915: PPUSH
31916: LD_VAR 0 11
31920: PPUSH
31921: CALL_OW 74
31925: ST_TO_ADDR
31926: GO 31948
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31928: LD_ADDR_VAR 0 10
31932: PUSH
31933: LD_VAR 0 8
31937: PPUSH
31938: LD_VAR 0 1
31942: PPUSH
31943: CALL_OW 74
31947: ST_TO_ADDR
// if not enemy then
31948: LD_VAR 0 10
31952: NOT
31953: IFFALSE 31957
// exit ;
31955: GO 32358
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31957: LD_VAR 0 11
31961: PUSH
31962: LD_VAR 0 11
31966: PPUSH
31967: LD_VAR 0 10
31971: PPUSH
31972: CALL_OW 296
31976: PUSH
31977: LD_INT 13
31979: GREATER
31980: AND
31981: PUSH
31982: LD_VAR 0 1
31986: PPUSH
31987: LD_VAR 0 10
31991: PPUSH
31992: CALL_OW 296
31996: PUSH
31997: LD_INT 12
31999: GREATER
32000: OR
32001: IFFALSE 32005
// exit ;
32003: GO 32358
// missile := [ 1 ] ;
32005: LD_ADDR_VAR 0 14
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32016: LD_VAR 0 9
32020: PPUSH
32021: LD_VAR 0 12
32025: PPUSH
32026: CALL_OW 325
32030: IFFALSE 32059
// missile := Replace ( missile , missile + 1 , 2 ) ;
32032: LD_ADDR_VAR 0 14
32036: PUSH
32037: LD_VAR 0 14
32041: PPUSH
32042: LD_VAR 0 14
32046: PUSH
32047: LD_INT 1
32049: PLUS
32050: PPUSH
32051: LD_INT 2
32053: PPUSH
32054: CALL_OW 1
32058: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32059: LD_VAR 0 9
32063: PPUSH
32064: LD_VAR 0 13
32068: PPUSH
32069: CALL_OW 325
32073: PUSH
32074: LD_VAR 0 10
32078: PPUSH
32079: CALL_OW 255
32083: PPUSH
32084: LD_VAR 0 13
32088: PPUSH
32089: CALL_OW 325
32093: NOT
32094: AND
32095: IFFALSE 32124
// missile := Replace ( missile , missile + 1 , 3 ) ;
32097: LD_ADDR_VAR 0 14
32101: PUSH
32102: LD_VAR 0 14
32106: PPUSH
32107: LD_VAR 0 14
32111: PUSH
32112: LD_INT 1
32114: PLUS
32115: PPUSH
32116: LD_INT 3
32118: PPUSH
32119: CALL_OW 1
32123: ST_TO_ADDR
// if missile < 2 then
32124: LD_VAR 0 14
32128: PUSH
32129: LD_INT 2
32131: LESS
32132: IFFALSE 32136
// exit ;
32134: GO 32358
// x := GetX ( enemy ) ;
32136: LD_ADDR_VAR 0 4
32140: PUSH
32141: LD_VAR 0 10
32145: PPUSH
32146: CALL_OW 250
32150: ST_TO_ADDR
// y := GetY ( enemy ) ;
32151: LD_ADDR_VAR 0 5
32155: PUSH
32156: LD_VAR 0 10
32160: PPUSH
32161: CALL_OW 251
32165: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32166: LD_ADDR_VAR 0 6
32170: PUSH
32171: LD_VAR 0 4
32175: PUSH
32176: LD_INT 1
32178: NEG
32179: PPUSH
32180: LD_INT 1
32182: PPUSH
32183: CALL_OW 12
32187: PLUS
32188: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32189: LD_ADDR_VAR 0 7
32193: PUSH
32194: LD_VAR 0 5
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PPUSH
32203: LD_INT 1
32205: PPUSH
32206: CALL_OW 12
32210: PLUS
32211: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32212: LD_VAR 0 6
32216: PPUSH
32217: LD_VAR 0 7
32221: PPUSH
32222: CALL_OW 488
32226: NOT
32227: IFFALSE 32249
// begin _x := x ;
32229: LD_ADDR_VAR 0 6
32233: PUSH
32234: LD_VAR 0 4
32238: ST_TO_ADDR
// _y := y ;
32239: LD_ADDR_VAR 0 7
32243: PUSH
32244: LD_VAR 0 5
32248: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32249: LD_ADDR_VAR 0 3
32253: PUSH
32254: LD_INT 1
32256: PPUSH
32257: LD_VAR 0 14
32261: PPUSH
32262: CALL_OW 12
32266: ST_TO_ADDR
// case i of 1 :
32267: LD_VAR 0 3
32271: PUSH
32272: LD_INT 1
32274: DOUBLE
32275: EQUAL
32276: IFTRUE 32280
32278: GO 32297
32280: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_VAR 0 10
32290: PPUSH
32291: CALL_OW 115
32295: GO 32358
32297: LD_INT 2
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32305
32303: GO 32327
32305: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32306: LD_VAR 0 1
32310: PPUSH
32311: LD_VAR 0 6
32315: PPUSH
32316: LD_VAR 0 7
32320: PPUSH
32321: CALL_OW 153
32325: GO 32358
32327: LD_INT 3
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32335
32333: GO 32357
32335: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32336: LD_VAR 0 1
32340: PPUSH
32341: LD_VAR 0 6
32345: PPUSH
32346: LD_VAR 0 7
32350: PPUSH
32351: CALL_OW 154
32355: GO 32358
32357: POP
// end ;
32358: LD_VAR 0 2
32362: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32363: LD_INT 0
32365: PPUSH
32366: PPUSH
32367: PPUSH
32368: PPUSH
32369: PPUSH
32370: PPUSH
// if not unit or not building then
32371: LD_VAR 0 1
32375: NOT
32376: PUSH
32377: LD_VAR 0 2
32381: NOT
32382: OR
32383: IFFALSE 32387
// exit ;
32385: GO 32545
// x := GetX ( building ) ;
32387: LD_ADDR_VAR 0 5
32391: PUSH
32392: LD_VAR 0 2
32396: PPUSH
32397: CALL_OW 250
32401: ST_TO_ADDR
// y := GetY ( building ) ;
32402: LD_ADDR_VAR 0 6
32406: PUSH
32407: LD_VAR 0 2
32411: PPUSH
32412: CALL_OW 251
32416: ST_TO_ADDR
// for i = 0 to 5 do
32417: LD_ADDR_VAR 0 4
32421: PUSH
32422: DOUBLE
32423: LD_INT 0
32425: DEC
32426: ST_TO_ADDR
32427: LD_INT 5
32429: PUSH
32430: FOR_TO
32431: IFFALSE 32543
// begin _x := ShiftX ( x , i , 3 ) ;
32433: LD_ADDR_VAR 0 7
32437: PUSH
32438: LD_VAR 0 5
32442: PPUSH
32443: LD_VAR 0 4
32447: PPUSH
32448: LD_INT 3
32450: PPUSH
32451: CALL_OW 272
32455: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32456: LD_ADDR_VAR 0 8
32460: PUSH
32461: LD_VAR 0 6
32465: PPUSH
32466: LD_VAR 0 4
32470: PPUSH
32471: LD_INT 3
32473: PPUSH
32474: CALL_OW 273
32478: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32479: LD_VAR 0 7
32483: PPUSH
32484: LD_VAR 0 8
32488: PPUSH
32489: CALL_OW 488
32493: NOT
32494: IFFALSE 32498
// continue ;
32496: GO 32430
// if HexInfo ( _x , _y ) = 0 then
32498: LD_VAR 0 7
32502: PPUSH
32503: LD_VAR 0 8
32507: PPUSH
32508: CALL_OW 428
32512: PUSH
32513: LD_INT 0
32515: EQUAL
32516: IFFALSE 32541
// begin ComMoveXY ( unit , _x , _y ) ;
32518: LD_VAR 0 1
32522: PPUSH
32523: LD_VAR 0 7
32527: PPUSH
32528: LD_VAR 0 8
32532: PPUSH
32533: CALL_OW 111
// exit ;
32537: POP
32538: POP
32539: GO 32545
// end ; end ;
32541: GO 32430
32543: POP
32544: POP
// end ;
32545: LD_VAR 0 3
32549: RET
// export function ScanBase ( side , base_area ) ; begin
32550: LD_INT 0
32552: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32553: LD_ADDR_VAR 0 3
32557: PUSH
32558: LD_VAR 0 2
32562: PPUSH
32563: LD_INT 81
32565: PUSH
32566: LD_VAR 0 1
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PPUSH
32575: CALL_OW 70
32579: ST_TO_ADDR
// end ;
32580: LD_VAR 0 3
32584: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32585: LD_INT 0
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
// result := false ;
32591: LD_ADDR_VAR 0 2
32595: PUSH
32596: LD_INT 0
32598: ST_TO_ADDR
// side := GetSide ( unit ) ;
32599: LD_ADDR_VAR 0 3
32603: PUSH
32604: LD_VAR 0 1
32608: PPUSH
32609: CALL_OW 255
32613: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32614: LD_ADDR_VAR 0 4
32618: PUSH
32619: LD_VAR 0 1
32623: PPUSH
32624: CALL_OW 248
32628: ST_TO_ADDR
// case nat of 1 :
32629: LD_VAR 0 4
32633: PUSH
32634: LD_INT 1
32636: DOUBLE
32637: EQUAL
32638: IFTRUE 32642
32640: GO 32653
32642: POP
// tech := tech_lassight ; 2 :
32643: LD_ADDR_VAR 0 5
32647: PUSH
32648: LD_INT 12
32650: ST_TO_ADDR
32651: GO 32692
32653: LD_INT 2
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32672
32661: POP
// tech := tech_mortar ; 3 :
32662: LD_ADDR_VAR 0 5
32666: PUSH
32667: LD_INT 41
32669: ST_TO_ADDR
32670: GO 32692
32672: LD_INT 3
32674: DOUBLE
32675: EQUAL
32676: IFTRUE 32680
32678: GO 32691
32680: POP
// tech := tech_bazooka ; end ;
32681: LD_ADDR_VAR 0 5
32685: PUSH
32686: LD_INT 44
32688: ST_TO_ADDR
32689: GO 32692
32691: POP
// if Researched ( side , tech ) then
32692: LD_VAR 0 3
32696: PPUSH
32697: LD_VAR 0 5
32701: PPUSH
32702: CALL_OW 325
32706: IFFALSE 32733
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32708: LD_ADDR_VAR 0 2
32712: PUSH
32713: LD_INT 5
32715: PUSH
32716: LD_INT 8
32718: PUSH
32719: LD_INT 9
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: PUSH
32727: LD_VAR 0 4
32731: ARRAY
32732: ST_TO_ADDR
// end ;
32733: LD_VAR 0 2
32737: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32738: LD_INT 0
32740: PPUSH
32741: PPUSH
32742: PPUSH
// if not mines then
32743: LD_VAR 0 2
32747: NOT
32748: IFFALSE 32752
// exit ;
32750: GO 32896
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32752: LD_ADDR_VAR 0 5
32756: PUSH
32757: LD_INT 81
32759: PUSH
32760: LD_VAR 0 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 3
32771: PUSH
32772: LD_INT 21
32774: PUSH
32775: LD_INT 3
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PPUSH
32790: CALL_OW 69
32794: ST_TO_ADDR
// for i in mines do
32795: LD_ADDR_VAR 0 4
32799: PUSH
32800: LD_VAR 0 2
32804: PUSH
32805: FOR_IN
32806: IFFALSE 32894
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32808: LD_VAR 0 4
32812: PUSH
32813: LD_INT 1
32815: ARRAY
32816: PPUSH
32817: LD_VAR 0 4
32821: PUSH
32822: LD_INT 2
32824: ARRAY
32825: PPUSH
32826: CALL_OW 458
32830: NOT
32831: IFFALSE 32835
// continue ;
32833: GO 32805
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32835: LD_VAR 0 4
32839: PUSH
32840: LD_INT 1
32842: ARRAY
32843: PPUSH
32844: LD_VAR 0 4
32848: PUSH
32849: LD_INT 2
32851: ARRAY
32852: PPUSH
32853: CALL_OW 428
32857: PUSH
32858: LD_VAR 0 5
32862: IN
32863: IFFALSE 32892
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32865: LD_VAR 0 4
32869: PUSH
32870: LD_INT 1
32872: ARRAY
32873: PPUSH
32874: LD_VAR 0 4
32878: PUSH
32879: LD_INT 2
32881: ARRAY
32882: PPUSH
32883: LD_VAR 0 1
32887: PPUSH
32888: CALL_OW 456
// end ;
32892: GO 32805
32894: POP
32895: POP
// end ;
32896: LD_VAR 0 3
32900: RET
// export function Count ( array ) ; var i ; begin
32901: LD_INT 0
32903: PPUSH
32904: PPUSH
// result := 0 ;
32905: LD_ADDR_VAR 0 2
32909: PUSH
32910: LD_INT 0
32912: ST_TO_ADDR
// for i in array do
32913: LD_ADDR_VAR 0 3
32917: PUSH
32918: LD_VAR 0 1
32922: PUSH
32923: FOR_IN
32924: IFFALSE 32948
// if i then
32926: LD_VAR 0 3
32930: IFFALSE 32946
// result := result + 1 ;
32932: LD_ADDR_VAR 0 2
32936: PUSH
32937: LD_VAR 0 2
32941: PUSH
32942: LD_INT 1
32944: PLUS
32945: ST_TO_ADDR
32946: GO 32923
32948: POP
32949: POP
// end ;
32950: LD_VAR 0 2
32954: RET
// export function IsEmpty ( building ) ; begin
32955: LD_INT 0
32957: PPUSH
// if not building then
32958: LD_VAR 0 1
32962: NOT
32963: IFFALSE 32967
// exit ;
32965: GO 33010
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32967: LD_ADDR_VAR 0 2
32971: PUSH
32972: LD_VAR 0 1
32976: PUSH
32977: LD_INT 22
32979: PUSH
32980: LD_VAR 0 1
32984: PPUSH
32985: CALL_OW 255
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 58
32996: PUSH
32997: EMPTY
32998: LIST
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PPUSH
33004: CALL_OW 69
33008: IN
33009: ST_TO_ADDR
// end ;
33010: LD_VAR 0 2
33014: RET
// export function IsNotFull ( building ) ; var places ; begin
33015: LD_INT 0
33017: PPUSH
33018: PPUSH
// if not building then
33019: LD_VAR 0 1
33023: NOT
33024: IFFALSE 33028
// exit ;
33026: GO 33199
// result := false ;
33028: LD_ADDR_VAR 0 2
33032: PUSH
33033: LD_INT 0
33035: ST_TO_ADDR
// places := 0 ;
33036: LD_ADDR_VAR 0 3
33040: PUSH
33041: LD_INT 0
33043: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33044: LD_VAR 0 1
33048: PPUSH
33049: CALL_OW 266
33053: PUSH
33054: LD_INT 0
33056: DOUBLE
33057: EQUAL
33058: IFTRUE 33116
33060: LD_INT 1
33062: DOUBLE
33063: EQUAL
33064: IFTRUE 33116
33066: LD_INT 6
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33116
33072: LD_INT 7
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33116
33078: LD_INT 8
33080: DOUBLE
33081: EQUAL
33082: IFTRUE 33116
33084: LD_INT 4
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33116
33090: LD_INT 5
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33116
33096: LD_INT 2
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33116
33102: LD_INT 3
33104: DOUBLE
33105: EQUAL
33106: IFTRUE 33116
33108: LD_INT 35
33110: DOUBLE
33111: EQUAL
33112: IFTRUE 33116
33114: GO 33127
33116: POP
// places := 6 ; b_bunker , b_breastwork :
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_INT 6
33124: ST_TO_ADDR
33125: GO 33172
33127: LD_INT 32
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33141
33133: LD_INT 31
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33152
33141: POP
// places := 1 ; b_control_tower :
33142: LD_ADDR_VAR 0 3
33146: PUSH
33147: LD_INT 1
33149: ST_TO_ADDR
33150: GO 33172
33152: LD_INT 36
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33160
33158: GO 33171
33160: POP
// places := 3 ; end ;
33161: LD_ADDR_VAR 0 3
33165: PUSH
33166: LD_INT 3
33168: ST_TO_ADDR
33169: GO 33172
33171: POP
// if places then
33172: LD_VAR 0 3
33176: IFFALSE 33199
// result := UnitsInside ( building ) < places ;
33178: LD_ADDR_VAR 0 2
33182: PUSH
33183: LD_VAR 0 1
33187: PPUSH
33188: CALL_OW 313
33192: PUSH
33193: LD_VAR 0 3
33197: LESS
33198: ST_TO_ADDR
// end ;
33199: LD_VAR 0 2
33203: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33204: LD_INT 0
33206: PPUSH
33207: PPUSH
33208: PPUSH
33209: PPUSH
// tmp := [ ] ;
33210: LD_ADDR_VAR 0 3
33214: PUSH
33215: EMPTY
33216: ST_TO_ADDR
// list := [ ] ;
33217: LD_ADDR_VAR 0 5
33221: PUSH
33222: EMPTY
33223: ST_TO_ADDR
// for i = 16 to 25 do
33224: LD_ADDR_VAR 0 4
33228: PUSH
33229: DOUBLE
33230: LD_INT 16
33232: DEC
33233: ST_TO_ADDR
33234: LD_INT 25
33236: PUSH
33237: FOR_TO
33238: IFFALSE 33311
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33240: LD_ADDR_VAR 0 3
33244: PUSH
33245: LD_VAR 0 3
33249: PUSH
33250: LD_INT 22
33252: PUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 255
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 91
33269: PUSH
33270: LD_VAR 0 1
33274: PUSH
33275: LD_INT 6
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 30
33285: PUSH
33286: LD_VAR 0 4
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: LIST
33299: PUSH
33300: EMPTY
33301: LIST
33302: PPUSH
33303: CALL_OW 69
33307: ADD
33308: ST_TO_ADDR
33309: GO 33237
33311: POP
33312: POP
// for i = 1 to tmp do
33313: LD_ADDR_VAR 0 4
33317: PUSH
33318: DOUBLE
33319: LD_INT 1
33321: DEC
33322: ST_TO_ADDR
33323: LD_VAR 0 3
33327: PUSH
33328: FOR_TO
33329: IFFALSE 33417
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33331: LD_ADDR_VAR 0 5
33335: PUSH
33336: LD_VAR 0 5
33340: PUSH
33341: LD_VAR 0 3
33345: PUSH
33346: LD_VAR 0 4
33350: ARRAY
33351: PPUSH
33352: CALL_OW 266
33356: PUSH
33357: LD_VAR 0 3
33361: PUSH
33362: LD_VAR 0 4
33366: ARRAY
33367: PPUSH
33368: CALL_OW 250
33372: PUSH
33373: LD_VAR 0 3
33377: PUSH
33378: LD_VAR 0 4
33382: ARRAY
33383: PPUSH
33384: CALL_OW 251
33388: PUSH
33389: LD_VAR 0 3
33393: PUSH
33394: LD_VAR 0 4
33398: ARRAY
33399: PPUSH
33400: CALL_OW 254
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: PUSH
33411: EMPTY
33412: LIST
33413: ADD
33414: ST_TO_ADDR
33415: GO 33328
33417: POP
33418: POP
// result := list ;
33419: LD_ADDR_VAR 0 2
33423: PUSH
33424: LD_VAR 0 5
33428: ST_TO_ADDR
// end ;
33429: LD_VAR 0 2
33433: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33434: LD_INT 0
33436: PPUSH
33437: PPUSH
33438: PPUSH
33439: PPUSH
33440: PPUSH
33441: PPUSH
33442: PPUSH
// if not factory then
33443: LD_VAR 0 1
33447: NOT
33448: IFFALSE 33452
// exit ;
33450: GO 34045
// if control = control_apeman then
33452: LD_VAR 0 4
33456: PUSH
33457: LD_INT 5
33459: EQUAL
33460: IFFALSE 33569
// begin tmp := UnitsInside ( factory ) ;
33462: LD_ADDR_VAR 0 8
33466: PUSH
33467: LD_VAR 0 1
33471: PPUSH
33472: CALL_OW 313
33476: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33477: LD_VAR 0 8
33481: PPUSH
33482: LD_INT 25
33484: PUSH
33485: LD_INT 12
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PPUSH
33492: CALL_OW 72
33496: NOT
33497: IFFALSE 33507
// control := control_manual ;
33499: LD_ADDR_VAR 0 4
33503: PUSH
33504: LD_INT 1
33506: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33507: LD_ADDR_VAR 0 8
33511: PUSH
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL 33204 0 1
33521: ST_TO_ADDR
// if tmp then
33522: LD_VAR 0 8
33526: IFFALSE 33569
// begin for i in tmp do
33528: LD_ADDR_VAR 0 7
33532: PUSH
33533: LD_VAR 0 8
33537: PUSH
33538: FOR_IN
33539: IFFALSE 33567
// if i [ 1 ] = b_ext_radio then
33541: LD_VAR 0 7
33545: PUSH
33546: LD_INT 1
33548: ARRAY
33549: PUSH
33550: LD_INT 22
33552: EQUAL
33553: IFFALSE 33565
// begin control := control_remote ;
33555: LD_ADDR_VAR 0 4
33559: PUSH
33560: LD_INT 2
33562: ST_TO_ADDR
// break ;
33563: GO 33567
// end ;
33565: GO 33538
33567: POP
33568: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33569: LD_VAR 0 1
33573: PPUSH
33574: LD_VAR 0 2
33578: PPUSH
33579: LD_VAR 0 3
33583: PPUSH
33584: LD_VAR 0 4
33588: PPUSH
33589: LD_VAR 0 5
33593: PPUSH
33594: CALL_OW 448
33598: IFFALSE 33633
// begin result := [ chassis , engine , control , weapon ] ;
33600: LD_ADDR_VAR 0 6
33604: PUSH
33605: LD_VAR 0 2
33609: PUSH
33610: LD_VAR 0 3
33614: PUSH
33615: LD_VAR 0 4
33619: PUSH
33620: LD_VAR 0 5
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: ST_TO_ADDR
// exit ;
33631: GO 34045
// end ; _chassis := AvailableChassisList ( factory ) ;
33633: LD_ADDR_VAR 0 9
33637: PUSH
33638: LD_VAR 0 1
33642: PPUSH
33643: CALL_OW 475
33647: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33648: LD_ADDR_VAR 0 11
33652: PUSH
33653: LD_VAR 0 1
33657: PPUSH
33658: CALL_OW 476
33662: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33663: LD_ADDR_VAR 0 12
33667: PUSH
33668: LD_VAR 0 1
33672: PPUSH
33673: CALL_OW 477
33677: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33678: LD_ADDR_VAR 0 10
33682: PUSH
33683: LD_VAR 0 1
33687: PPUSH
33688: CALL_OW 478
33692: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33693: LD_VAR 0 9
33697: NOT
33698: PUSH
33699: LD_VAR 0 11
33703: NOT
33704: OR
33705: PUSH
33706: LD_VAR 0 12
33710: NOT
33711: OR
33712: PUSH
33713: LD_VAR 0 10
33717: NOT
33718: OR
33719: IFFALSE 33754
// begin result := [ chassis , engine , control , weapon ] ;
33721: LD_ADDR_VAR 0 6
33725: PUSH
33726: LD_VAR 0 2
33730: PUSH
33731: LD_VAR 0 3
33735: PUSH
33736: LD_VAR 0 4
33740: PUSH
33741: LD_VAR 0 5
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
// exit ;
33752: GO 34045
// end ; if not chassis in _chassis then
33754: LD_VAR 0 2
33758: PUSH
33759: LD_VAR 0 9
33763: IN
33764: NOT
33765: IFFALSE 33791
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33767: LD_ADDR_VAR 0 2
33771: PUSH
33772: LD_VAR 0 9
33776: PUSH
33777: LD_INT 1
33779: PPUSH
33780: LD_VAR 0 9
33784: PPUSH
33785: CALL_OW 12
33789: ARRAY
33790: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33791: LD_VAR 0 2
33795: PPUSH
33796: LD_VAR 0 3
33800: PPUSH
33801: CALL 34050 0 2
33805: NOT
33806: IFFALSE 33865
// repeat engine := _engine [ 1 ] ;
33808: LD_ADDR_VAR 0 3
33812: PUSH
33813: LD_VAR 0 11
33817: PUSH
33818: LD_INT 1
33820: ARRAY
33821: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33822: LD_ADDR_VAR 0 11
33826: PUSH
33827: LD_VAR 0 11
33831: PPUSH
33832: LD_INT 1
33834: PPUSH
33835: CALL_OW 3
33839: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33840: LD_VAR 0 2
33844: PPUSH
33845: LD_VAR 0 3
33849: PPUSH
33850: CALL 34050 0 2
33854: PUSH
33855: LD_VAR 0 11
33859: PUSH
33860: EMPTY
33861: EQUAL
33862: OR
33863: IFFALSE 33808
// if not control in _control then
33865: LD_VAR 0 4
33869: PUSH
33870: LD_VAR 0 12
33874: IN
33875: NOT
33876: IFFALSE 33902
// control := _control [ rand ( 1 , _control ) ] ;
33878: LD_ADDR_VAR 0 4
33882: PUSH
33883: LD_VAR 0 12
33887: PUSH
33888: LD_INT 1
33890: PPUSH
33891: LD_VAR 0 12
33895: PPUSH
33896: CALL_OW 12
33900: ARRAY
33901: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33902: LD_VAR 0 2
33906: PPUSH
33907: LD_VAR 0 5
33911: PPUSH
33912: CALL 34270 0 2
33916: NOT
33917: IFFALSE 33976
// repeat weapon := _weapon [ 1 ] ;
33919: LD_ADDR_VAR 0 5
33923: PUSH
33924: LD_VAR 0 10
33928: PUSH
33929: LD_INT 1
33931: ARRAY
33932: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33933: LD_ADDR_VAR 0 10
33937: PUSH
33938: LD_VAR 0 10
33942: PPUSH
33943: LD_INT 1
33945: PPUSH
33946: CALL_OW 3
33950: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 5
33960: PPUSH
33961: CALL 34270 0 2
33965: PUSH
33966: LD_VAR 0 10
33970: PUSH
33971: EMPTY
33972: EQUAL
33973: OR
33974: IFFALSE 33919
// result := [ ] ;
33976: LD_ADDR_VAR 0 6
33980: PUSH
33981: EMPTY
33982: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33983: LD_VAR 0 1
33987: PPUSH
33988: LD_VAR 0 2
33992: PPUSH
33993: LD_VAR 0 3
33997: PPUSH
33998: LD_VAR 0 4
34002: PPUSH
34003: LD_VAR 0 5
34007: PPUSH
34008: CALL_OW 448
34012: IFFALSE 34045
// result := [ chassis , engine , control , weapon ] ;
34014: LD_ADDR_VAR 0 6
34018: PUSH
34019: LD_VAR 0 2
34023: PUSH
34024: LD_VAR 0 3
34028: PUSH
34029: LD_VAR 0 4
34033: PUSH
34034: LD_VAR 0 5
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: ST_TO_ADDR
// end ;
34045: LD_VAR 0 6
34049: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34050: LD_INT 0
34052: PPUSH
// if not chassis or not engine then
34053: LD_VAR 0 1
34057: NOT
34058: PUSH
34059: LD_VAR 0 2
34063: NOT
34064: OR
34065: IFFALSE 34069
// exit ;
34067: GO 34265
// case engine of engine_solar :
34069: LD_VAR 0 2
34073: PUSH
34074: LD_INT 2
34076: DOUBLE
34077: EQUAL
34078: IFTRUE 34082
34080: GO 34120
34082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34083: LD_ADDR_VAR 0 3
34087: PUSH
34088: LD_INT 11
34090: PUSH
34091: LD_INT 12
34093: PUSH
34094: LD_INT 13
34096: PUSH
34097: LD_INT 14
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: LD_INT 3
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: ST_TO_ADDR
34118: GO 34249
34120: LD_INT 1
34122: DOUBLE
34123: EQUAL
34124: IFTRUE 34128
34126: GO 34190
34128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34129: LD_ADDR_VAR 0 3
34133: PUSH
34134: LD_INT 11
34136: PUSH
34137: LD_INT 12
34139: PUSH
34140: LD_INT 13
34142: PUSH
34143: LD_INT 14
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: LD_INT 4
34157: PUSH
34158: LD_INT 5
34160: PUSH
34161: LD_INT 21
34163: PUSH
34164: LD_INT 23
34166: PUSH
34167: LD_INT 22
34169: PUSH
34170: LD_INT 24
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
34188: GO 34249
34190: LD_INT 3
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34198
34196: GO 34248
34198: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34199: LD_ADDR_VAR 0 3
34203: PUSH
34204: LD_INT 13
34206: PUSH
34207: LD_INT 14
34209: PUSH
34210: LD_INT 2
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: LD_INT 4
34218: PUSH
34219: LD_INT 5
34221: PUSH
34222: LD_INT 21
34224: PUSH
34225: LD_INT 22
34227: PUSH
34228: LD_INT 23
34230: PUSH
34231: LD_INT 24
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: ST_TO_ADDR
34246: GO 34249
34248: POP
// result := ( chassis in result ) ;
34249: LD_ADDR_VAR 0 3
34253: PUSH
34254: LD_VAR 0 1
34258: PUSH
34259: LD_VAR 0 3
34263: IN
34264: ST_TO_ADDR
// end ;
34265: LD_VAR 0 3
34269: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34270: LD_INT 0
34272: PPUSH
// if not chassis or not weapon then
34273: LD_VAR 0 1
34277: NOT
34278: PUSH
34279: LD_VAR 0 2
34283: NOT
34284: OR
34285: IFFALSE 34289
// exit ;
34287: GO 35349
// case weapon of us_machine_gun :
34289: LD_VAR 0 2
34293: PUSH
34294: LD_INT 2
34296: DOUBLE
34297: EQUAL
34298: IFTRUE 34302
34300: GO 34332
34302: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34303: LD_ADDR_VAR 0 3
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 4
34319: PUSH
34320: LD_INT 5
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: ST_TO_ADDR
34330: GO 35333
34332: LD_INT 3
34334: DOUBLE
34335: EQUAL
34336: IFTRUE 34340
34338: GO 34370
34340: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 3
34354: PUSH
34355: LD_INT 4
34357: PUSH
34358: LD_INT 5
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: ST_TO_ADDR
34368: GO 35333
34370: LD_INT 11
34372: DOUBLE
34373: EQUAL
34374: IFTRUE 34378
34376: GO 34408
34378: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34379: LD_ADDR_VAR 0 3
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: LD_INT 3
34392: PUSH
34393: LD_INT 4
34395: PUSH
34396: LD_INT 5
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: ST_TO_ADDR
34406: GO 35333
34408: LD_INT 4
34410: DOUBLE
34411: EQUAL
34412: IFTRUE 34416
34414: GO 34442
34416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34417: LD_ADDR_VAR 0 3
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: LD_INT 4
34430: PUSH
34431: LD_INT 5
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: ST_TO_ADDR
34440: GO 35333
34442: LD_INT 5
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34450
34448: GO 34476
34450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: LD_INT 3
34461: PUSH
34462: LD_INT 4
34464: PUSH
34465: LD_INT 5
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: ST_TO_ADDR
34474: GO 35333
34476: LD_INT 9
34478: DOUBLE
34479: EQUAL
34480: IFTRUE 34484
34482: GO 34510
34484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34485: LD_ADDR_VAR 0 3
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: LD_INT 3
34495: PUSH
34496: LD_INT 4
34498: PUSH
34499: LD_INT 5
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: ST_TO_ADDR
34508: GO 35333
34510: LD_INT 7
34512: DOUBLE
34513: EQUAL
34514: IFTRUE 34518
34516: GO 34544
34518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34519: LD_ADDR_VAR 0 3
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 4
34532: PUSH
34533: LD_INT 5
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: ST_TO_ADDR
34542: GO 35333
34544: LD_INT 12
34546: DOUBLE
34547: EQUAL
34548: IFTRUE 34552
34550: GO 34578
34552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 3
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: ST_TO_ADDR
34576: GO 35333
34578: LD_INT 13
34580: DOUBLE
34581: EQUAL
34582: IFTRUE 34586
34584: GO 34612
34586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34587: LD_ADDR_VAR 0 3
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 3
34597: PUSH
34598: LD_INT 4
34600: PUSH
34601: LD_INT 5
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: ST_TO_ADDR
34610: GO 35333
34612: LD_INT 14
34614: DOUBLE
34615: EQUAL
34616: IFTRUE 34620
34618: GO 34638
34620: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34621: LD_ADDR_VAR 0 3
34625: PUSH
34626: LD_INT 4
34628: PUSH
34629: LD_INT 5
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: ST_TO_ADDR
34636: GO 35333
34638: LD_INT 6
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34646
34644: GO 34664
34646: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34647: LD_ADDR_VAR 0 3
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: ST_TO_ADDR
34662: GO 35333
34664: LD_INT 10
34666: DOUBLE
34667: EQUAL
34668: IFTRUE 34672
34670: GO 34690
34672: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34673: LD_ADDR_VAR 0 3
34677: PUSH
34678: LD_INT 4
34680: PUSH
34681: LD_INT 5
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: ST_TO_ADDR
34688: GO 35333
34690: LD_INT 22
34692: DOUBLE
34693: EQUAL
34694: IFTRUE 34698
34696: GO 34724
34698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34699: LD_ADDR_VAR 0 3
34703: PUSH
34704: LD_INT 11
34706: PUSH
34707: LD_INT 12
34709: PUSH
34710: LD_INT 13
34712: PUSH
34713: LD_INT 14
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: ST_TO_ADDR
34722: GO 35333
34724: LD_INT 23
34726: DOUBLE
34727: EQUAL
34728: IFTRUE 34732
34730: GO 34758
34732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34733: LD_ADDR_VAR 0 3
34737: PUSH
34738: LD_INT 11
34740: PUSH
34741: LD_INT 12
34743: PUSH
34744: LD_INT 13
34746: PUSH
34747: LD_INT 14
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: ST_TO_ADDR
34756: GO 35333
34758: LD_INT 24
34760: DOUBLE
34761: EQUAL
34762: IFTRUE 34766
34764: GO 34792
34766: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34767: LD_ADDR_VAR 0 3
34771: PUSH
34772: LD_INT 11
34774: PUSH
34775: LD_INT 12
34777: PUSH
34778: LD_INT 13
34780: PUSH
34781: LD_INT 14
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: ST_TO_ADDR
34790: GO 35333
34792: LD_INT 30
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34800
34798: GO 34826
34800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34801: LD_ADDR_VAR 0 3
34805: PUSH
34806: LD_INT 11
34808: PUSH
34809: LD_INT 12
34811: PUSH
34812: LD_INT 13
34814: PUSH
34815: LD_INT 14
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: ST_TO_ADDR
34824: GO 35333
34826: LD_INT 25
34828: DOUBLE
34829: EQUAL
34830: IFTRUE 34834
34832: GO 34852
34834: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34835: LD_ADDR_VAR 0 3
34839: PUSH
34840: LD_INT 13
34842: PUSH
34843: LD_INT 14
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: ST_TO_ADDR
34850: GO 35333
34852: LD_INT 27
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34878
34860: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 13
34868: PUSH
34869: LD_INT 14
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: ST_TO_ADDR
34876: GO 35333
34878: LD_INT 92
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34886
34884: GO 34912
34886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 11
34894: PUSH
34895: LD_INT 12
34897: PUSH
34898: LD_INT 13
34900: PUSH
34901: LD_INT 14
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: ST_TO_ADDR
34910: GO 35333
34912: LD_INT 28
34914: DOUBLE
34915: EQUAL
34916: IFTRUE 34920
34918: GO 34938
34920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34921: LD_ADDR_VAR 0 3
34925: PUSH
34926: LD_INT 13
34928: PUSH
34929: LD_INT 14
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: ST_TO_ADDR
34936: GO 35333
34938: LD_INT 29
34940: DOUBLE
34941: EQUAL
34942: IFTRUE 34946
34944: GO 34964
34946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34947: LD_ADDR_VAR 0 3
34951: PUSH
34952: LD_INT 13
34954: PUSH
34955: LD_INT 14
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: ST_TO_ADDR
34962: GO 35333
34964: LD_INT 31
34966: DOUBLE
34967: EQUAL
34968: IFTRUE 34972
34970: GO 34990
34972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34973: LD_ADDR_VAR 0 3
34977: PUSH
34978: LD_INT 13
34980: PUSH
34981: LD_INT 14
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: ST_TO_ADDR
34988: GO 35333
34990: LD_INT 26
34992: DOUBLE
34993: EQUAL
34994: IFTRUE 34998
34996: GO 35016
34998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34999: LD_ADDR_VAR 0 3
35003: PUSH
35004: LD_INT 13
35006: PUSH
35007: LD_INT 14
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: ST_TO_ADDR
35014: GO 35333
35016: LD_INT 42
35018: DOUBLE
35019: EQUAL
35020: IFTRUE 35024
35022: GO 35050
35024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35025: LD_ADDR_VAR 0 3
35029: PUSH
35030: LD_INT 21
35032: PUSH
35033: LD_INT 22
35035: PUSH
35036: LD_INT 23
35038: PUSH
35039: LD_INT 24
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: ST_TO_ADDR
35048: GO 35333
35050: LD_INT 43
35052: DOUBLE
35053: EQUAL
35054: IFTRUE 35058
35056: GO 35084
35058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35059: LD_ADDR_VAR 0 3
35063: PUSH
35064: LD_INT 21
35066: PUSH
35067: LD_INT 22
35069: PUSH
35070: LD_INT 23
35072: PUSH
35073: LD_INT 24
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: ST_TO_ADDR
35082: GO 35333
35084: LD_INT 44
35086: DOUBLE
35087: EQUAL
35088: IFTRUE 35092
35090: GO 35118
35092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35093: LD_ADDR_VAR 0 3
35097: PUSH
35098: LD_INT 21
35100: PUSH
35101: LD_INT 22
35103: PUSH
35104: LD_INT 23
35106: PUSH
35107: LD_INT 24
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
35116: GO 35333
35118: LD_INT 45
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35126
35124: GO 35152
35126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35127: LD_ADDR_VAR 0 3
35131: PUSH
35132: LD_INT 21
35134: PUSH
35135: LD_INT 22
35137: PUSH
35138: LD_INT 23
35140: PUSH
35141: LD_INT 24
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: ST_TO_ADDR
35150: GO 35333
35152: LD_INT 49
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35160
35158: GO 35186
35160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_INT 21
35168: PUSH
35169: LD_INT 22
35171: PUSH
35172: LD_INT 23
35174: PUSH
35175: LD_INT 24
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: ST_TO_ADDR
35184: GO 35333
35186: LD_INT 51
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35194
35192: GO 35220
35194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35195: LD_ADDR_VAR 0 3
35199: PUSH
35200: LD_INT 21
35202: PUSH
35203: LD_INT 22
35205: PUSH
35206: LD_INT 23
35208: PUSH
35209: LD_INT 24
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: ST_TO_ADDR
35218: GO 35333
35220: LD_INT 52
35222: DOUBLE
35223: EQUAL
35224: IFTRUE 35228
35226: GO 35254
35228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35229: LD_ADDR_VAR 0 3
35233: PUSH
35234: LD_INT 21
35236: PUSH
35237: LD_INT 22
35239: PUSH
35240: LD_INT 23
35242: PUSH
35243: LD_INT 24
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: ST_TO_ADDR
35252: GO 35333
35254: LD_INT 53
35256: DOUBLE
35257: EQUAL
35258: IFTRUE 35262
35260: GO 35280
35262: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35263: LD_ADDR_VAR 0 3
35267: PUSH
35268: LD_INT 23
35270: PUSH
35271: LD_INT 24
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: ST_TO_ADDR
35278: GO 35333
35280: LD_INT 46
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35288
35286: GO 35306
35288: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_INT 23
35296: PUSH
35297: LD_INT 24
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: ST_TO_ADDR
35304: GO 35333
35306: LD_INT 47
35308: DOUBLE
35309: EQUAL
35310: IFTRUE 35314
35312: GO 35332
35314: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35315: LD_ADDR_VAR 0 3
35319: PUSH
35320: LD_INT 23
35322: PUSH
35323: LD_INT 24
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: ST_TO_ADDR
35330: GO 35333
35332: POP
// result := ( chassis in result ) ;
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_VAR 0 1
35342: PUSH
35343: LD_VAR 0 3
35347: IN
35348: ST_TO_ADDR
// end ;
35349: LD_VAR 0 3
35353: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35354: LD_INT 0
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
// result := array ;
35363: LD_ADDR_VAR 0 5
35367: PUSH
35368: LD_VAR 0 1
35372: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35373: LD_VAR 0 1
35377: NOT
35378: PUSH
35379: LD_VAR 0 2
35383: NOT
35384: OR
35385: PUSH
35386: LD_VAR 0 3
35390: NOT
35391: OR
35392: PUSH
35393: LD_VAR 0 2
35397: PUSH
35398: LD_VAR 0 1
35402: GREATER
35403: OR
35404: PUSH
35405: LD_VAR 0 3
35409: PUSH
35410: LD_VAR 0 1
35414: GREATER
35415: OR
35416: IFFALSE 35420
// exit ;
35418: GO 35716
// if direction then
35420: LD_VAR 0 4
35424: IFFALSE 35488
// begin d := 1 ;
35426: LD_ADDR_VAR 0 9
35430: PUSH
35431: LD_INT 1
35433: ST_TO_ADDR
// if i_from > i_to then
35434: LD_VAR 0 2
35438: PUSH
35439: LD_VAR 0 3
35443: GREATER
35444: IFFALSE 35470
// length := ( array - i_from ) + i_to else
35446: LD_ADDR_VAR 0 11
35450: PUSH
35451: LD_VAR 0 1
35455: PUSH
35456: LD_VAR 0 2
35460: MINUS
35461: PUSH
35462: LD_VAR 0 3
35466: PLUS
35467: ST_TO_ADDR
35468: GO 35486
// length := i_to - i_from ;
35470: LD_ADDR_VAR 0 11
35474: PUSH
35475: LD_VAR 0 3
35479: PUSH
35480: LD_VAR 0 2
35484: MINUS
35485: ST_TO_ADDR
// end else
35486: GO 35549
// begin d := - 1 ;
35488: LD_ADDR_VAR 0 9
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: ST_TO_ADDR
// if i_from > i_to then
35497: LD_VAR 0 2
35501: PUSH
35502: LD_VAR 0 3
35506: GREATER
35507: IFFALSE 35527
// length := i_from - i_to else
35509: LD_ADDR_VAR 0 11
35513: PUSH
35514: LD_VAR 0 2
35518: PUSH
35519: LD_VAR 0 3
35523: MINUS
35524: ST_TO_ADDR
35525: GO 35549
// length := ( array - i_to ) + i_from ;
35527: LD_ADDR_VAR 0 11
35531: PUSH
35532: LD_VAR 0 1
35536: PUSH
35537: LD_VAR 0 3
35541: MINUS
35542: PUSH
35543: LD_VAR 0 2
35547: PLUS
35548: ST_TO_ADDR
// end ; if not length then
35549: LD_VAR 0 11
35553: NOT
35554: IFFALSE 35558
// exit ;
35556: GO 35716
// tmp := array ;
35558: LD_ADDR_VAR 0 10
35562: PUSH
35563: LD_VAR 0 1
35567: ST_TO_ADDR
// for i = 1 to length do
35568: LD_ADDR_VAR 0 6
35572: PUSH
35573: DOUBLE
35574: LD_INT 1
35576: DEC
35577: ST_TO_ADDR
35578: LD_VAR 0 11
35582: PUSH
35583: FOR_TO
35584: IFFALSE 35704
// begin for j = 1 to array do
35586: LD_ADDR_VAR 0 7
35590: PUSH
35591: DOUBLE
35592: LD_INT 1
35594: DEC
35595: ST_TO_ADDR
35596: LD_VAR 0 1
35600: PUSH
35601: FOR_TO
35602: IFFALSE 35690
// begin k := j + d ;
35604: LD_ADDR_VAR 0 8
35608: PUSH
35609: LD_VAR 0 7
35613: PUSH
35614: LD_VAR 0 9
35618: PLUS
35619: ST_TO_ADDR
// if k > array then
35620: LD_VAR 0 8
35624: PUSH
35625: LD_VAR 0 1
35629: GREATER
35630: IFFALSE 35640
// k := 1 ;
35632: LD_ADDR_VAR 0 8
35636: PUSH
35637: LD_INT 1
35639: ST_TO_ADDR
// if not k then
35640: LD_VAR 0 8
35644: NOT
35645: IFFALSE 35657
// k := array ;
35647: LD_ADDR_VAR 0 8
35651: PUSH
35652: LD_VAR 0 1
35656: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35657: LD_ADDR_VAR 0 10
35661: PUSH
35662: LD_VAR 0 10
35666: PPUSH
35667: LD_VAR 0 8
35671: PPUSH
35672: LD_VAR 0 1
35676: PUSH
35677: LD_VAR 0 7
35681: ARRAY
35682: PPUSH
35683: CALL_OW 1
35687: ST_TO_ADDR
// end ;
35688: GO 35601
35690: POP
35691: POP
// array := tmp ;
35692: LD_ADDR_VAR 0 1
35696: PUSH
35697: LD_VAR 0 10
35701: ST_TO_ADDR
// end ;
35702: GO 35583
35704: POP
35705: POP
// result := array ;
35706: LD_ADDR_VAR 0 5
35710: PUSH
35711: LD_VAR 0 1
35715: ST_TO_ADDR
// end ;
35716: LD_VAR 0 5
35720: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35721: LD_INT 0
35723: PPUSH
35724: PPUSH
// result := 0 ;
35725: LD_ADDR_VAR 0 3
35729: PUSH
35730: LD_INT 0
35732: ST_TO_ADDR
// if not array or not value in array then
35733: LD_VAR 0 1
35737: NOT
35738: PUSH
35739: LD_VAR 0 2
35743: PUSH
35744: LD_VAR 0 1
35748: IN
35749: NOT
35750: OR
35751: IFFALSE 35755
// exit ;
35753: GO 35809
// for i = 1 to array do
35755: LD_ADDR_VAR 0 4
35759: PUSH
35760: DOUBLE
35761: LD_INT 1
35763: DEC
35764: ST_TO_ADDR
35765: LD_VAR 0 1
35769: PUSH
35770: FOR_TO
35771: IFFALSE 35807
// if value = array [ i ] then
35773: LD_VAR 0 2
35777: PUSH
35778: LD_VAR 0 1
35782: PUSH
35783: LD_VAR 0 4
35787: ARRAY
35788: EQUAL
35789: IFFALSE 35805
// begin result := i ;
35791: LD_ADDR_VAR 0 3
35795: PUSH
35796: LD_VAR 0 4
35800: ST_TO_ADDR
// exit ;
35801: POP
35802: POP
35803: GO 35809
// end ;
35805: GO 35770
35807: POP
35808: POP
// end ;
35809: LD_VAR 0 3
35813: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35814: LD_INT 0
35816: PPUSH
// vc_chassis := chassis ;
35817: LD_ADDR_OWVAR 37
35821: PUSH
35822: LD_VAR 0 1
35826: ST_TO_ADDR
// vc_engine := engine ;
35827: LD_ADDR_OWVAR 39
35831: PUSH
35832: LD_VAR 0 2
35836: ST_TO_ADDR
// vc_control := control ;
35837: LD_ADDR_OWVAR 38
35841: PUSH
35842: LD_VAR 0 3
35846: ST_TO_ADDR
// vc_weapon := weapon ;
35847: LD_ADDR_OWVAR 40
35851: PUSH
35852: LD_VAR 0 4
35856: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35857: LD_ADDR_OWVAR 41
35861: PUSH
35862: LD_VAR 0 5
35866: ST_TO_ADDR
// end ;
35867: LD_VAR 0 6
35871: RET
// export function WantPlant ( unit ) ; var task ; begin
35872: LD_INT 0
35874: PPUSH
35875: PPUSH
// result := false ;
35876: LD_ADDR_VAR 0 2
35880: PUSH
35881: LD_INT 0
35883: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_VAR 0 1
35893: PPUSH
35894: CALL_OW 437
35898: ST_TO_ADDR
// if task then
35899: LD_VAR 0 3
35903: IFFALSE 35931
// if task [ 1 ] [ 1 ] = p then
35905: LD_VAR 0 3
35909: PUSH
35910: LD_INT 1
35912: ARRAY
35913: PUSH
35914: LD_INT 1
35916: ARRAY
35917: PUSH
35918: LD_STRING p
35920: EQUAL
35921: IFFALSE 35931
// result := true ;
35923: LD_ADDR_VAR 0 2
35927: PUSH
35928: LD_INT 1
35930: ST_TO_ADDR
// end ;
35931: LD_VAR 0 2
35935: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35936: LD_INT 0
35938: PPUSH
35939: PPUSH
35940: PPUSH
35941: PPUSH
// if pos < 1 then
35942: LD_VAR 0 2
35946: PUSH
35947: LD_INT 1
35949: LESS
35950: IFFALSE 35954
// exit ;
35952: GO 36257
// if pos = 1 then
35954: LD_VAR 0 2
35958: PUSH
35959: LD_INT 1
35961: EQUAL
35962: IFFALSE 35995
// result := Replace ( arr , pos [ 1 ] , value ) else
35964: LD_ADDR_VAR 0 4
35968: PUSH
35969: LD_VAR 0 1
35973: PPUSH
35974: LD_VAR 0 2
35978: PUSH
35979: LD_INT 1
35981: ARRAY
35982: PPUSH
35983: LD_VAR 0 3
35987: PPUSH
35988: CALL_OW 1
35992: ST_TO_ADDR
35993: GO 36257
// begin tmp := arr ;
35995: LD_ADDR_VAR 0 6
35999: PUSH
36000: LD_VAR 0 1
36004: ST_TO_ADDR
// s_arr := [ tmp ] ;
36005: LD_ADDR_VAR 0 7
36009: PUSH
36010: LD_VAR 0 6
36014: PUSH
36015: EMPTY
36016: LIST
36017: ST_TO_ADDR
// for i = 1 to pos - 1 do
36018: LD_ADDR_VAR 0 5
36022: PUSH
36023: DOUBLE
36024: LD_INT 1
36026: DEC
36027: ST_TO_ADDR
36028: LD_VAR 0 2
36032: PUSH
36033: LD_INT 1
36035: MINUS
36036: PUSH
36037: FOR_TO
36038: IFFALSE 36083
// begin tmp := tmp [ pos [ i ] ] ;
36040: LD_ADDR_VAR 0 6
36044: PUSH
36045: LD_VAR 0 6
36049: PUSH
36050: LD_VAR 0 2
36054: PUSH
36055: LD_VAR 0 5
36059: ARRAY
36060: ARRAY
36061: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36062: LD_ADDR_VAR 0 7
36066: PUSH
36067: LD_VAR 0 7
36071: PUSH
36072: LD_VAR 0 6
36076: PUSH
36077: EMPTY
36078: LIST
36079: ADD
36080: ST_TO_ADDR
// end ;
36081: GO 36037
36083: POP
36084: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36085: LD_ADDR_VAR 0 6
36089: PUSH
36090: LD_VAR 0 6
36094: PPUSH
36095: LD_VAR 0 2
36099: PUSH
36100: LD_VAR 0 2
36104: ARRAY
36105: PPUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: CALL_OW 1
36115: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36116: LD_ADDR_VAR 0 7
36120: PUSH
36121: LD_VAR 0 7
36125: PPUSH
36126: LD_VAR 0 7
36130: PPUSH
36131: LD_VAR 0 6
36135: PPUSH
36136: CALL_OW 1
36140: ST_TO_ADDR
// for i = s_arr downto 2 do
36141: LD_ADDR_VAR 0 5
36145: PUSH
36146: DOUBLE
36147: LD_VAR 0 7
36151: INC
36152: ST_TO_ADDR
36153: LD_INT 2
36155: PUSH
36156: FOR_DOWNTO
36157: IFFALSE 36241
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36159: LD_ADDR_VAR 0 6
36163: PUSH
36164: LD_VAR 0 7
36168: PUSH
36169: LD_VAR 0 5
36173: PUSH
36174: LD_INT 1
36176: MINUS
36177: ARRAY
36178: PPUSH
36179: LD_VAR 0 2
36183: PUSH
36184: LD_VAR 0 5
36188: PUSH
36189: LD_INT 1
36191: MINUS
36192: ARRAY
36193: PPUSH
36194: LD_VAR 0 7
36198: PUSH
36199: LD_VAR 0 5
36203: ARRAY
36204: PPUSH
36205: CALL_OW 1
36209: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36210: LD_ADDR_VAR 0 7
36214: PUSH
36215: LD_VAR 0 7
36219: PPUSH
36220: LD_VAR 0 5
36224: PUSH
36225: LD_INT 1
36227: MINUS
36228: PPUSH
36229: LD_VAR 0 6
36233: PPUSH
36234: CALL_OW 1
36238: ST_TO_ADDR
// end ;
36239: GO 36156
36241: POP
36242: POP
// result := s_arr [ 1 ] ;
36243: LD_ADDR_VAR 0 4
36247: PUSH
36248: LD_VAR 0 7
36252: PUSH
36253: LD_INT 1
36255: ARRAY
36256: ST_TO_ADDR
// end ; end ;
36257: LD_VAR 0 4
36261: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36262: LD_INT 0
36264: PPUSH
36265: PPUSH
// if not list then
36266: LD_VAR 0 1
36270: NOT
36271: IFFALSE 36275
// exit ;
36273: GO 36366
// i := list [ pos1 ] ;
36275: LD_ADDR_VAR 0 5
36279: PUSH
36280: LD_VAR 0 1
36284: PUSH
36285: LD_VAR 0 2
36289: ARRAY
36290: ST_TO_ADDR
// if not i then
36291: LD_VAR 0 5
36295: NOT
36296: IFFALSE 36300
// exit ;
36298: GO 36366
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36300: LD_ADDR_VAR 0 1
36304: PUSH
36305: LD_VAR 0 1
36309: PPUSH
36310: LD_VAR 0 2
36314: PPUSH
36315: LD_VAR 0 1
36319: PUSH
36320: LD_VAR 0 3
36324: ARRAY
36325: PPUSH
36326: CALL_OW 1
36330: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36331: LD_ADDR_VAR 0 1
36335: PUSH
36336: LD_VAR 0 1
36340: PPUSH
36341: LD_VAR 0 3
36345: PPUSH
36346: LD_VAR 0 5
36350: PPUSH
36351: CALL_OW 1
36355: ST_TO_ADDR
// result := list ;
36356: LD_ADDR_VAR 0 4
36360: PUSH
36361: LD_VAR 0 1
36365: ST_TO_ADDR
// end ;
36366: LD_VAR 0 4
36370: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36371: LD_INT 0
36373: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36374: LD_ADDR_VAR 0 5
36378: PUSH
36379: LD_VAR 0 1
36383: PPUSH
36384: CALL_OW 250
36388: PPUSH
36389: LD_VAR 0 1
36393: PPUSH
36394: CALL_OW 251
36398: PPUSH
36399: LD_VAR 0 2
36403: PPUSH
36404: LD_VAR 0 3
36408: PPUSH
36409: LD_VAR 0 4
36413: PPUSH
36414: CALL 36424 0 5
36418: ST_TO_ADDR
// end ;
36419: LD_VAR 0 5
36423: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36424: LD_INT 0
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
// if not list then
36430: LD_VAR 0 3
36434: NOT
36435: IFFALSE 36439
// exit ;
36437: GO 36827
// result := [ ] ;
36439: LD_ADDR_VAR 0 6
36443: PUSH
36444: EMPTY
36445: ST_TO_ADDR
// for i in list do
36446: LD_ADDR_VAR 0 7
36450: PUSH
36451: LD_VAR 0 3
36455: PUSH
36456: FOR_IN
36457: IFFALSE 36659
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36459: LD_ADDR_VAR 0 9
36463: PUSH
36464: LD_VAR 0 7
36468: PPUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: LD_VAR 0 2
36478: PPUSH
36479: CALL_OW 297
36483: ST_TO_ADDR
// if not result then
36484: LD_VAR 0 6
36488: NOT
36489: IFFALSE 36515
// result := [ [ i , tmp ] ] else
36491: LD_ADDR_VAR 0 6
36495: PUSH
36496: LD_VAR 0 7
36500: PUSH
36501: LD_VAR 0 9
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: ST_TO_ADDR
36513: GO 36657
// begin if result [ result ] [ 2 ] < tmp then
36515: LD_VAR 0 6
36519: PUSH
36520: LD_VAR 0 6
36524: ARRAY
36525: PUSH
36526: LD_INT 2
36528: ARRAY
36529: PUSH
36530: LD_VAR 0 9
36534: LESS
36535: IFFALSE 36577
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36537: LD_ADDR_VAR 0 6
36541: PUSH
36542: LD_VAR 0 6
36546: PPUSH
36547: LD_VAR 0 6
36551: PUSH
36552: LD_INT 1
36554: PLUS
36555: PPUSH
36556: LD_VAR 0 7
36560: PUSH
36561: LD_VAR 0 9
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PPUSH
36570: CALL_OW 2
36574: ST_TO_ADDR
36575: GO 36657
// for j = 1 to result do
36577: LD_ADDR_VAR 0 8
36581: PUSH
36582: DOUBLE
36583: LD_INT 1
36585: DEC
36586: ST_TO_ADDR
36587: LD_VAR 0 6
36591: PUSH
36592: FOR_TO
36593: IFFALSE 36655
// begin if tmp < result [ j ] [ 2 ] then
36595: LD_VAR 0 9
36599: PUSH
36600: LD_VAR 0 6
36604: PUSH
36605: LD_VAR 0 8
36609: ARRAY
36610: PUSH
36611: LD_INT 2
36613: ARRAY
36614: LESS
36615: IFFALSE 36653
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36617: LD_ADDR_VAR 0 6
36621: PUSH
36622: LD_VAR 0 6
36626: PPUSH
36627: LD_VAR 0 8
36631: PPUSH
36632: LD_VAR 0 7
36636: PUSH
36637: LD_VAR 0 9
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PPUSH
36646: CALL_OW 2
36650: ST_TO_ADDR
// break ;
36651: GO 36655
// end ; end ;
36653: GO 36592
36655: POP
36656: POP
// end ; end ;
36657: GO 36456
36659: POP
36660: POP
// if result and not asc then
36661: LD_VAR 0 6
36665: PUSH
36666: LD_VAR 0 4
36670: NOT
36671: AND
36672: IFFALSE 36747
// begin tmp := result ;
36674: LD_ADDR_VAR 0 9
36678: PUSH
36679: LD_VAR 0 6
36683: ST_TO_ADDR
// for i = tmp downto 1 do
36684: LD_ADDR_VAR 0 7
36688: PUSH
36689: DOUBLE
36690: LD_VAR 0 9
36694: INC
36695: ST_TO_ADDR
36696: LD_INT 1
36698: PUSH
36699: FOR_DOWNTO
36700: IFFALSE 36745
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36702: LD_ADDR_VAR 0 6
36706: PUSH
36707: LD_VAR 0 6
36711: PPUSH
36712: LD_VAR 0 9
36716: PUSH
36717: LD_VAR 0 7
36721: MINUS
36722: PUSH
36723: LD_INT 1
36725: PLUS
36726: PPUSH
36727: LD_VAR 0 9
36731: PUSH
36732: LD_VAR 0 7
36736: ARRAY
36737: PPUSH
36738: CALL_OW 1
36742: ST_TO_ADDR
36743: GO 36699
36745: POP
36746: POP
// end ; tmp := [ ] ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: EMPTY
36753: ST_TO_ADDR
// if mode then
36754: LD_VAR 0 5
36758: IFFALSE 36827
// begin for i = 1 to result do
36760: LD_ADDR_VAR 0 7
36764: PUSH
36765: DOUBLE
36766: LD_INT 1
36768: DEC
36769: ST_TO_ADDR
36770: LD_VAR 0 6
36774: PUSH
36775: FOR_TO
36776: IFFALSE 36815
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36778: LD_ADDR_VAR 0 9
36782: PUSH
36783: LD_VAR 0 9
36787: PPUSH
36788: LD_VAR 0 7
36792: PPUSH
36793: LD_VAR 0 6
36797: PUSH
36798: LD_VAR 0 7
36802: ARRAY
36803: PUSH
36804: LD_INT 1
36806: ARRAY
36807: PPUSH
36808: CALL_OW 1
36812: ST_TO_ADDR
36813: GO 36775
36815: POP
36816: POP
// result := tmp ;
36817: LD_ADDR_VAR 0 6
36821: PUSH
36822: LD_VAR 0 9
36826: ST_TO_ADDR
// end ; end ;
36827: LD_VAR 0 6
36831: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36832: LD_INT 0
36834: PPUSH
36835: PPUSH
36836: PPUSH
36837: PPUSH
36838: PPUSH
36839: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36840: LD_ADDR_VAR 0 5
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: ST_TO_ADDR
// if not x or not y then
36862: LD_VAR 0 2
36866: NOT
36867: PUSH
36868: LD_VAR 0 3
36872: NOT
36873: OR
36874: IFFALSE 36878
// exit ;
36876: GO 38528
// if not range then
36878: LD_VAR 0 4
36882: NOT
36883: IFFALSE 36893
// range := 10 ;
36885: LD_ADDR_VAR 0 4
36889: PUSH
36890: LD_INT 10
36892: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36893: LD_ADDR_VAR 0 8
36897: PUSH
36898: LD_INT 81
36900: PUSH
36901: LD_VAR 0 1
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 92
36912: PUSH
36913: LD_VAR 0 2
36917: PUSH
36918: LD_VAR 0 3
36922: PUSH
36923: LD_VAR 0 4
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: LD_INT 21
36939: PUSH
36940: LD_INT 3
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: PPUSH
36956: CALL_OW 69
36960: ST_TO_ADDR
// if not tmp then
36961: LD_VAR 0 8
36965: NOT
36966: IFFALSE 36970
// exit ;
36968: GO 38528
// for i in tmp do
36970: LD_ADDR_VAR 0 6
36974: PUSH
36975: LD_VAR 0 8
36979: PUSH
36980: FOR_IN
36981: IFFALSE 38503
// begin points := [ 0 , 0 , 0 ] ;
36983: LD_ADDR_VAR 0 9
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
// bpoints := 1 ;
37002: LD_ADDR_VAR 0 10
37006: PUSH
37007: LD_INT 1
37009: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37010: LD_VAR 0 6
37014: PPUSH
37015: CALL_OW 247
37019: PUSH
37020: LD_INT 1
37022: DOUBLE
37023: EQUAL
37024: IFTRUE 37028
37026: GO 37606
37028: POP
// begin if GetClass ( i ) = 1 then
37029: LD_VAR 0 6
37033: PPUSH
37034: CALL_OW 257
37038: PUSH
37039: LD_INT 1
37041: EQUAL
37042: IFFALSE 37063
// points := [ 10 , 5 , 3 ] ;
37044: LD_ADDR_VAR 0 9
37048: PUSH
37049: LD_INT 10
37051: PUSH
37052: LD_INT 5
37054: PUSH
37055: LD_INT 3
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37063: LD_VAR 0 6
37067: PPUSH
37068: CALL_OW 257
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: LD_INT 4
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: IN
37087: IFFALSE 37108
// points := [ 3 , 2 , 1 ] ;
37089: LD_ADDR_VAR 0 9
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: LD_INT 2
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37108: LD_VAR 0 6
37112: PPUSH
37113: CALL_OW 257
37117: PUSH
37118: LD_INT 5
37120: EQUAL
37121: IFFALSE 37142
// points := [ 130 , 5 , 2 ] ;
37123: LD_ADDR_VAR 0 9
37127: PUSH
37128: LD_INT 130
37130: PUSH
37131: LD_INT 5
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37142: LD_VAR 0 6
37146: PPUSH
37147: CALL_OW 257
37151: PUSH
37152: LD_INT 8
37154: EQUAL
37155: IFFALSE 37176
// points := [ 35 , 35 , 30 ] ;
37157: LD_ADDR_VAR 0 9
37161: PUSH
37162: LD_INT 35
37164: PUSH
37165: LD_INT 35
37167: PUSH
37168: LD_INT 30
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37176: LD_VAR 0 6
37180: PPUSH
37181: CALL_OW 257
37185: PUSH
37186: LD_INT 9
37188: EQUAL
37189: IFFALSE 37210
// points := [ 20 , 55 , 40 ] ;
37191: LD_ADDR_VAR 0 9
37195: PUSH
37196: LD_INT 20
37198: PUSH
37199: LD_INT 55
37201: PUSH
37202: LD_INT 40
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37210: LD_VAR 0 6
37214: PPUSH
37215: CALL_OW 257
37219: PUSH
37220: LD_INT 12
37222: PUSH
37223: LD_INT 16
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: IN
37230: IFFALSE 37251
// points := [ 5 , 3 , 2 ] ;
37232: LD_ADDR_VAR 0 9
37236: PUSH
37237: LD_INT 5
37239: PUSH
37240: LD_INT 3
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37251: LD_VAR 0 6
37255: PPUSH
37256: CALL_OW 257
37260: PUSH
37261: LD_INT 17
37263: EQUAL
37264: IFFALSE 37285
// points := [ 100 , 50 , 75 ] ;
37266: LD_ADDR_VAR 0 9
37270: PUSH
37271: LD_INT 100
37273: PUSH
37274: LD_INT 50
37276: PUSH
37277: LD_INT 75
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37285: LD_VAR 0 6
37289: PPUSH
37290: CALL_OW 257
37294: PUSH
37295: LD_INT 15
37297: EQUAL
37298: IFFALSE 37319
// points := [ 10 , 5 , 3 ] ;
37300: LD_ADDR_VAR 0 9
37304: PUSH
37305: LD_INT 10
37307: PUSH
37308: LD_INT 5
37310: PUSH
37311: LD_INT 3
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37319: LD_VAR 0 6
37323: PPUSH
37324: CALL_OW 257
37328: PUSH
37329: LD_INT 14
37331: EQUAL
37332: IFFALSE 37353
// points := [ 10 , 0 , 0 ] ;
37334: LD_ADDR_VAR 0 9
37338: PUSH
37339: LD_INT 10
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37353: LD_VAR 0 6
37357: PPUSH
37358: CALL_OW 257
37362: PUSH
37363: LD_INT 11
37365: EQUAL
37366: IFFALSE 37387
// points := [ 30 , 10 , 5 ] ;
37368: LD_ADDR_VAR 0 9
37372: PUSH
37373: LD_INT 30
37375: PUSH
37376: LD_INT 10
37378: PUSH
37379: LD_INT 5
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37387: LD_VAR 0 1
37391: PPUSH
37392: LD_INT 5
37394: PPUSH
37395: CALL_OW 321
37399: PUSH
37400: LD_INT 2
37402: EQUAL
37403: IFFALSE 37420
// bpoints := bpoints * 1.8 ;
37405: LD_ADDR_VAR 0 10
37409: PUSH
37410: LD_VAR 0 10
37414: PUSH
37415: LD_REAL  1.80000000000000E+0000
37418: MUL
37419: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37420: LD_VAR 0 6
37424: PPUSH
37425: CALL_OW 257
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: LD_INT 3
37438: PUSH
37439: LD_INT 4
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: IN
37448: PUSH
37449: LD_VAR 0 1
37453: PPUSH
37454: LD_INT 51
37456: PPUSH
37457: CALL_OW 321
37461: PUSH
37462: LD_INT 2
37464: EQUAL
37465: AND
37466: IFFALSE 37483
// bpoints := bpoints * 1.2 ;
37468: LD_ADDR_VAR 0 10
37472: PUSH
37473: LD_VAR 0 10
37477: PUSH
37478: LD_REAL  1.20000000000000E+0000
37481: MUL
37482: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37483: LD_VAR 0 6
37487: PPUSH
37488: CALL_OW 257
37492: PUSH
37493: LD_INT 5
37495: PUSH
37496: LD_INT 7
37498: PUSH
37499: LD_INT 9
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: IN
37507: PUSH
37508: LD_VAR 0 1
37512: PPUSH
37513: LD_INT 52
37515: PPUSH
37516: CALL_OW 321
37520: PUSH
37521: LD_INT 2
37523: EQUAL
37524: AND
37525: IFFALSE 37542
// bpoints := bpoints * 1.5 ;
37527: LD_ADDR_VAR 0 10
37531: PUSH
37532: LD_VAR 0 10
37536: PUSH
37537: LD_REAL  1.50000000000000E+0000
37540: MUL
37541: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37542: LD_VAR 0 1
37546: PPUSH
37547: LD_INT 66
37549: PPUSH
37550: CALL_OW 321
37554: PUSH
37555: LD_INT 2
37557: EQUAL
37558: IFFALSE 37575
// bpoints := bpoints * 1.1 ;
37560: LD_ADDR_VAR 0 10
37564: PUSH
37565: LD_VAR 0 10
37569: PUSH
37570: LD_REAL  1.10000000000000E+0000
37573: MUL
37574: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37575: LD_ADDR_VAR 0 10
37579: PUSH
37580: LD_VAR 0 10
37584: PUSH
37585: LD_VAR 0 6
37589: PPUSH
37590: LD_INT 1
37592: PPUSH
37593: CALL_OW 259
37597: PUSH
37598: LD_REAL  1.15000000000000E+0000
37601: MUL
37602: MUL
37603: ST_TO_ADDR
// end ; unit_vehicle :
37604: GO 38432
37606: LD_INT 2
37608: DOUBLE
37609: EQUAL
37610: IFTRUE 37614
37612: GO 38420
37614: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37615: LD_VAR 0 6
37619: PPUSH
37620: CALL_OW 264
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: LD_INT 42
37630: PUSH
37631: LD_INT 24
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: IN
37639: IFFALSE 37660
// points := [ 25 , 5 , 3 ] ;
37641: LD_ADDR_VAR 0 9
37645: PUSH
37646: LD_INT 25
37648: PUSH
37649: LD_INT 5
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37660: LD_VAR 0 6
37664: PPUSH
37665: CALL_OW 264
37669: PUSH
37670: LD_INT 4
37672: PUSH
37673: LD_INT 43
37675: PUSH
37676: LD_INT 25
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: IN
37684: IFFALSE 37705
// points := [ 40 , 15 , 5 ] ;
37686: LD_ADDR_VAR 0 9
37690: PUSH
37691: LD_INT 40
37693: PUSH
37694: LD_INT 15
37696: PUSH
37697: LD_INT 5
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37705: LD_VAR 0 6
37709: PPUSH
37710: CALL_OW 264
37714: PUSH
37715: LD_INT 3
37717: PUSH
37718: LD_INT 23
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: IN
37725: IFFALSE 37746
// points := [ 7 , 25 , 8 ] ;
37727: LD_ADDR_VAR 0 9
37731: PUSH
37732: LD_INT 7
37734: PUSH
37735: LD_INT 25
37737: PUSH
37738: LD_INT 8
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37746: LD_VAR 0 6
37750: PPUSH
37751: CALL_OW 264
37755: PUSH
37756: LD_INT 5
37758: PUSH
37759: LD_INT 27
37761: PUSH
37762: LD_INT 44
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: IN
37770: IFFALSE 37791
// points := [ 14 , 50 , 16 ] ;
37772: LD_ADDR_VAR 0 9
37776: PUSH
37777: LD_INT 14
37779: PUSH
37780: LD_INT 50
37782: PUSH
37783: LD_INT 16
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37791: LD_VAR 0 6
37795: PPUSH
37796: CALL_OW 264
37800: PUSH
37801: LD_INT 6
37803: PUSH
37804: LD_INT 46
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: IN
37811: IFFALSE 37832
// points := [ 32 , 120 , 70 ] ;
37813: LD_ADDR_VAR 0 9
37817: PUSH
37818: LD_INT 32
37820: PUSH
37821: LD_INT 120
37823: PUSH
37824: LD_INT 70
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37832: LD_VAR 0 6
37836: PPUSH
37837: CALL_OW 264
37841: PUSH
37842: LD_INT 7
37844: PUSH
37845: LD_INT 28
37847: PUSH
37848: LD_INT 45
37850: PUSH
37851: LD_INT 92
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: IN
37860: IFFALSE 37881
// points := [ 35 , 20 , 45 ] ;
37862: LD_ADDR_VAR 0 9
37866: PUSH
37867: LD_INT 35
37869: PUSH
37870: LD_INT 20
37872: PUSH
37873: LD_INT 45
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37881: LD_VAR 0 6
37885: PPUSH
37886: CALL_OW 264
37890: PUSH
37891: LD_INT 47
37893: PUSH
37894: EMPTY
37895: LIST
37896: IN
37897: IFFALSE 37918
// points := [ 67 , 45 , 75 ] ;
37899: LD_ADDR_VAR 0 9
37903: PUSH
37904: LD_INT 67
37906: PUSH
37907: LD_INT 45
37909: PUSH
37910: LD_INT 75
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37918: LD_VAR 0 6
37922: PPUSH
37923: CALL_OW 264
37927: PUSH
37928: LD_INT 26
37930: PUSH
37931: EMPTY
37932: LIST
37933: IN
37934: IFFALSE 37955
// points := [ 120 , 30 , 80 ] ;
37936: LD_ADDR_VAR 0 9
37940: PUSH
37941: LD_INT 120
37943: PUSH
37944: LD_INT 30
37946: PUSH
37947: LD_INT 80
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37955: LD_VAR 0 6
37959: PPUSH
37960: CALL_OW 264
37964: PUSH
37965: LD_INT 22
37967: PUSH
37968: EMPTY
37969: LIST
37970: IN
37971: IFFALSE 37992
// points := [ 40 , 1 , 1 ] ;
37973: LD_ADDR_VAR 0 9
37977: PUSH
37978: LD_INT 40
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37992: LD_VAR 0 6
37996: PPUSH
37997: CALL_OW 264
38001: PUSH
38002: LD_INT 29
38004: PUSH
38005: EMPTY
38006: LIST
38007: IN
38008: IFFALSE 38029
// points := [ 70 , 200 , 400 ] ;
38010: LD_ADDR_VAR 0 9
38014: PUSH
38015: LD_INT 70
38017: PUSH
38018: LD_INT 200
38020: PUSH
38021: LD_INT 400
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: LIST
38028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38029: LD_VAR 0 6
38033: PPUSH
38034: CALL_OW 264
38038: PUSH
38039: LD_INT 14
38041: PUSH
38042: LD_INT 53
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: IN
38049: IFFALSE 38070
// points := [ 40 , 10 , 20 ] ;
38051: LD_ADDR_VAR 0 9
38055: PUSH
38056: LD_INT 40
38058: PUSH
38059: LD_INT 10
38061: PUSH
38062: LD_INT 20
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: LIST
38069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38070: LD_VAR 0 6
38074: PPUSH
38075: CALL_OW 264
38079: PUSH
38080: LD_INT 9
38082: PUSH
38083: EMPTY
38084: LIST
38085: IN
38086: IFFALSE 38107
// points := [ 5 , 70 , 20 ] ;
38088: LD_ADDR_VAR 0 9
38092: PUSH
38093: LD_INT 5
38095: PUSH
38096: LD_INT 70
38098: PUSH
38099: LD_INT 20
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: LIST
38106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38107: LD_VAR 0 6
38111: PPUSH
38112: CALL_OW 264
38116: PUSH
38117: LD_INT 10
38119: PUSH
38120: EMPTY
38121: LIST
38122: IN
38123: IFFALSE 38144
// points := [ 35 , 110 , 70 ] ;
38125: LD_ADDR_VAR 0 9
38129: PUSH
38130: LD_INT 35
38132: PUSH
38133: LD_INT 110
38135: PUSH
38136: LD_INT 70
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38144: LD_VAR 0 6
38148: PPUSH
38149: CALL_OW 265
38153: PUSH
38154: LD_INT 25
38156: EQUAL
38157: IFFALSE 38178
// points := [ 80 , 65 , 100 ] ;
38159: LD_ADDR_VAR 0 9
38163: PUSH
38164: LD_INT 80
38166: PUSH
38167: LD_INT 65
38169: PUSH
38170: LD_INT 100
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38178: LD_VAR 0 6
38182: PPUSH
38183: CALL_OW 263
38187: PUSH
38188: LD_INT 1
38190: EQUAL
38191: IFFALSE 38226
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38193: LD_ADDR_VAR 0 10
38197: PUSH
38198: LD_VAR 0 10
38202: PUSH
38203: LD_VAR 0 6
38207: PPUSH
38208: CALL_OW 311
38212: PPUSH
38213: LD_INT 3
38215: PPUSH
38216: CALL_OW 259
38220: PUSH
38221: LD_INT 4
38223: MUL
38224: MUL
38225: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38226: LD_VAR 0 6
38230: PPUSH
38231: CALL_OW 263
38235: PUSH
38236: LD_INT 2
38238: EQUAL
38239: IFFALSE 38290
// begin j := IsControledBy ( i ) ;
38241: LD_ADDR_VAR 0 7
38245: PUSH
38246: LD_VAR 0 6
38250: PPUSH
38251: CALL_OW 312
38255: ST_TO_ADDR
// if j then
38256: LD_VAR 0 7
38260: IFFALSE 38290
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38262: LD_ADDR_VAR 0 10
38266: PUSH
38267: LD_VAR 0 10
38271: PUSH
38272: LD_VAR 0 7
38276: PPUSH
38277: LD_INT 3
38279: PPUSH
38280: CALL_OW 259
38284: PUSH
38285: LD_INT 3
38287: MUL
38288: MUL
38289: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38290: LD_VAR 0 6
38294: PPUSH
38295: CALL_OW 264
38299: PUSH
38300: LD_INT 5
38302: PUSH
38303: LD_INT 6
38305: PUSH
38306: LD_INT 46
38308: PUSH
38309: LD_INT 44
38311: PUSH
38312: LD_INT 47
38314: PUSH
38315: LD_INT 45
38317: PUSH
38318: LD_INT 28
38320: PUSH
38321: LD_INT 7
38323: PUSH
38324: LD_INT 27
38326: PUSH
38327: LD_INT 29
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: IN
38342: PUSH
38343: LD_VAR 0 1
38347: PPUSH
38348: LD_INT 52
38350: PPUSH
38351: CALL_OW 321
38355: PUSH
38356: LD_INT 2
38358: EQUAL
38359: AND
38360: IFFALSE 38377
// bpoints := bpoints * 1.2 ;
38362: LD_ADDR_VAR 0 10
38366: PUSH
38367: LD_VAR 0 10
38371: PUSH
38372: LD_REAL  1.20000000000000E+0000
38375: MUL
38376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38377: LD_VAR 0 6
38381: PPUSH
38382: CALL_OW 264
38386: PUSH
38387: LD_INT 6
38389: PUSH
38390: LD_INT 46
38392: PUSH
38393: LD_INT 47
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: IN
38401: IFFALSE 38418
// bpoints := bpoints * 1.2 ;
38403: LD_ADDR_VAR 0 10
38407: PUSH
38408: LD_VAR 0 10
38412: PUSH
38413: LD_REAL  1.20000000000000E+0000
38416: MUL
38417: ST_TO_ADDR
// end ; unit_building :
38418: GO 38432
38420: LD_INT 3
38422: DOUBLE
38423: EQUAL
38424: IFTRUE 38428
38426: GO 38431
38428: POP
// ; end ;
38429: GO 38432
38431: POP
// for j = 1 to 3 do
38432: LD_ADDR_VAR 0 7
38436: PUSH
38437: DOUBLE
38438: LD_INT 1
38440: DEC
38441: ST_TO_ADDR
38442: LD_INT 3
38444: PUSH
38445: FOR_TO
38446: IFFALSE 38499
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38448: LD_ADDR_VAR 0 5
38452: PUSH
38453: LD_VAR 0 5
38457: PPUSH
38458: LD_VAR 0 7
38462: PPUSH
38463: LD_VAR 0 5
38467: PUSH
38468: LD_VAR 0 7
38472: ARRAY
38473: PUSH
38474: LD_VAR 0 9
38478: PUSH
38479: LD_VAR 0 7
38483: ARRAY
38484: PUSH
38485: LD_VAR 0 10
38489: MUL
38490: PLUS
38491: PPUSH
38492: CALL_OW 1
38496: ST_TO_ADDR
38497: GO 38445
38499: POP
38500: POP
// end ;
38501: GO 36980
38503: POP
38504: POP
// result := Replace ( result , 4 , tmp ) ;
38505: LD_ADDR_VAR 0 5
38509: PUSH
38510: LD_VAR 0 5
38514: PPUSH
38515: LD_INT 4
38517: PPUSH
38518: LD_VAR 0 8
38522: PPUSH
38523: CALL_OW 1
38527: ST_TO_ADDR
// end ;
38528: LD_VAR 0 5
38532: RET
// export function DangerAtRange ( unit , range ) ; begin
38533: LD_INT 0
38535: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38536: LD_ADDR_VAR 0 3
38540: PUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: CALL_OW 255
38550: PPUSH
38551: LD_VAR 0 1
38555: PPUSH
38556: CALL_OW 250
38560: PPUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: CALL_OW 251
38570: PPUSH
38571: LD_VAR 0 2
38575: PPUSH
38576: CALL 36832 0 4
38580: ST_TO_ADDR
// end ;
38581: LD_VAR 0 3
38585: RET
// export function DangerInArea ( side , area ) ; begin
38586: LD_INT 0
38588: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38589: LD_ADDR_VAR 0 3
38593: PUSH
38594: LD_VAR 0 2
38598: PPUSH
38599: LD_INT 81
38601: PUSH
38602: LD_VAR 0 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PPUSH
38611: CALL_OW 70
38615: ST_TO_ADDR
// end ;
38616: LD_VAR 0 3
38620: RET
// export function IsExtension ( b ) ; begin
38621: LD_INT 0
38623: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38624: LD_ADDR_VAR 0 2
38628: PUSH
38629: LD_VAR 0 1
38633: PUSH
38634: LD_INT 23
38636: PUSH
38637: LD_INT 20
38639: PUSH
38640: LD_INT 22
38642: PUSH
38643: LD_INT 17
38645: PUSH
38646: LD_INT 24
38648: PUSH
38649: LD_INT 21
38651: PUSH
38652: LD_INT 19
38654: PUSH
38655: LD_INT 16
38657: PUSH
38658: LD_INT 25
38660: PUSH
38661: LD_INT 18
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: IN
38676: ST_TO_ADDR
// end ;
38677: LD_VAR 0 2
38681: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38682: LD_INT 0
38684: PPUSH
38685: PPUSH
38686: PPUSH
// result := [ ] ;
38687: LD_ADDR_VAR 0 4
38691: PUSH
38692: EMPTY
38693: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38694: LD_ADDR_VAR 0 5
38698: PUSH
38699: LD_VAR 0 2
38703: PPUSH
38704: LD_INT 21
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PPUSH
38714: CALL_OW 70
38718: ST_TO_ADDR
// if not tmp then
38719: LD_VAR 0 5
38723: NOT
38724: IFFALSE 38728
// exit ;
38726: GO 38792
// if checkLink then
38728: LD_VAR 0 3
38732: IFFALSE 38782
// begin for i in tmp do
38734: LD_ADDR_VAR 0 6
38738: PUSH
38739: LD_VAR 0 5
38743: PUSH
38744: FOR_IN
38745: IFFALSE 38780
// if GetBase ( i ) <> base then
38747: LD_VAR 0 6
38751: PPUSH
38752: CALL_OW 274
38756: PUSH
38757: LD_VAR 0 1
38761: NONEQUAL
38762: IFFALSE 38778
// ComLinkToBase ( base , i ) ;
38764: LD_VAR 0 1
38768: PPUSH
38769: LD_VAR 0 6
38773: PPUSH
38774: CALL_OW 169
38778: GO 38744
38780: POP
38781: POP
// end ; result := tmp ;
38782: LD_ADDR_VAR 0 4
38786: PUSH
38787: LD_VAR 0 5
38791: ST_TO_ADDR
// end ;
38792: LD_VAR 0 4
38796: RET
// export function ComComplete ( units , b ) ; var i ; begin
38797: LD_INT 0
38799: PPUSH
38800: PPUSH
// if not units then
38801: LD_VAR 0 1
38805: NOT
38806: IFFALSE 38810
// exit ;
38808: GO 38900
// for i in units do
38810: LD_ADDR_VAR 0 4
38814: PUSH
38815: LD_VAR 0 1
38819: PUSH
38820: FOR_IN
38821: IFFALSE 38898
// if BuildingStatus ( b ) = bs_build then
38823: LD_VAR 0 2
38827: PPUSH
38828: CALL_OW 461
38832: PUSH
38833: LD_INT 1
38835: EQUAL
38836: IFFALSE 38896
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38838: LD_VAR 0 4
38842: PPUSH
38843: LD_STRING h
38845: PUSH
38846: LD_VAR 0 2
38850: PPUSH
38851: CALL_OW 250
38855: PUSH
38856: LD_VAR 0 2
38860: PPUSH
38861: CALL_OW 251
38865: PUSH
38866: LD_VAR 0 2
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: PPUSH
38892: CALL_OW 446
38896: GO 38820
38898: POP
38899: POP
// end ;
38900: LD_VAR 0 3
38904: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38905: LD_INT 0
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38913: LD_VAR 0 1
38917: NOT
38918: PUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 263
38928: PUSH
38929: LD_INT 2
38931: NONEQUAL
38932: OR
38933: IFFALSE 38937
// exit ;
38935: GO 39253
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38937: LD_ADDR_VAR 0 6
38941: PUSH
38942: LD_INT 22
38944: PUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL_OW 255
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 30
38964: PUSH
38965: LD_INT 36
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 34
38974: PUSH
38975: LD_INT 31
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PPUSH
38991: CALL_OW 69
38995: ST_TO_ADDR
// if not tmp then
38996: LD_VAR 0 6
39000: NOT
39001: IFFALSE 39005
// exit ;
39003: GO 39253
// result := [ ] ;
39005: LD_ADDR_VAR 0 2
39009: PUSH
39010: EMPTY
39011: ST_TO_ADDR
// for i in tmp do
39012: LD_ADDR_VAR 0 3
39016: PUSH
39017: LD_VAR 0 6
39021: PUSH
39022: FOR_IN
39023: IFFALSE 39094
// begin t := UnitsInside ( i ) ;
39025: LD_ADDR_VAR 0 4
39029: PUSH
39030: LD_VAR 0 3
39034: PPUSH
39035: CALL_OW 313
39039: ST_TO_ADDR
// if t then
39040: LD_VAR 0 4
39044: IFFALSE 39092
// for j in t do
39046: LD_ADDR_VAR 0 7
39050: PUSH
39051: LD_VAR 0 4
39055: PUSH
39056: FOR_IN
39057: IFFALSE 39090
// result := Replace ( result , result + 1 , j ) ;
39059: LD_ADDR_VAR 0 2
39063: PUSH
39064: LD_VAR 0 2
39068: PPUSH
39069: LD_VAR 0 2
39073: PUSH
39074: LD_INT 1
39076: PLUS
39077: PPUSH
39078: LD_VAR 0 7
39082: PPUSH
39083: CALL_OW 1
39087: ST_TO_ADDR
39088: GO 39056
39090: POP
39091: POP
// end ;
39092: GO 39022
39094: POP
39095: POP
// if not result then
39096: LD_VAR 0 2
39100: NOT
39101: IFFALSE 39105
// exit ;
39103: GO 39253
// mech := result [ 1 ] ;
39105: LD_ADDR_VAR 0 5
39109: PUSH
39110: LD_VAR 0 2
39114: PUSH
39115: LD_INT 1
39117: ARRAY
39118: ST_TO_ADDR
// if result > 1 then
39119: LD_VAR 0 2
39123: PUSH
39124: LD_INT 1
39126: GREATER
39127: IFFALSE 39239
// begin for i = 2 to result do
39129: LD_ADDR_VAR 0 3
39133: PUSH
39134: DOUBLE
39135: LD_INT 2
39137: DEC
39138: ST_TO_ADDR
39139: LD_VAR 0 2
39143: PUSH
39144: FOR_TO
39145: IFFALSE 39237
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39147: LD_ADDR_VAR 0 4
39151: PUSH
39152: LD_VAR 0 2
39156: PUSH
39157: LD_VAR 0 3
39161: ARRAY
39162: PPUSH
39163: LD_INT 3
39165: PPUSH
39166: CALL_OW 259
39170: PUSH
39171: LD_VAR 0 2
39175: PUSH
39176: LD_VAR 0 3
39180: ARRAY
39181: PPUSH
39182: CALL_OW 432
39186: MINUS
39187: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39188: LD_VAR 0 4
39192: PUSH
39193: LD_VAR 0 5
39197: PPUSH
39198: LD_INT 3
39200: PPUSH
39201: CALL_OW 259
39205: PUSH
39206: LD_VAR 0 5
39210: PPUSH
39211: CALL_OW 432
39215: MINUS
39216: GREATEREQUAL
39217: IFFALSE 39235
// mech := result [ i ] ;
39219: LD_ADDR_VAR 0 5
39223: PUSH
39224: LD_VAR 0 2
39228: PUSH
39229: LD_VAR 0 3
39233: ARRAY
39234: ST_TO_ADDR
// end ;
39235: GO 39144
39237: POP
39238: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39239: LD_VAR 0 1
39243: PPUSH
39244: LD_VAR 0 5
39248: PPUSH
39249: CALL_OW 135
// end ;
39253: LD_VAR 0 2
39257: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39258: LD_INT 0
39260: PPUSH
39261: PPUSH
39262: PPUSH
39263: PPUSH
39264: PPUSH
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
39269: PPUSH
39270: PPUSH
39271: PPUSH
39272: PPUSH
// result := [ ] ;
39273: LD_ADDR_VAR 0 7
39277: PUSH
39278: EMPTY
39279: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 266
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: IN
39300: NOT
39301: IFFALSE 39305
// exit ;
39303: GO 40939
// if name then
39305: LD_VAR 0 3
39309: IFFALSE 39325
// SetBName ( base_dep , name ) ;
39311: LD_VAR 0 1
39315: PPUSH
39316: LD_VAR 0 3
39320: PPUSH
39321: CALL_OW 500
// base := GetBase ( base_dep ) ;
39325: LD_ADDR_VAR 0 15
39329: PUSH
39330: LD_VAR 0 1
39334: PPUSH
39335: CALL_OW 274
39339: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39340: LD_ADDR_VAR 0 16
39344: PUSH
39345: LD_VAR 0 1
39349: PPUSH
39350: CALL_OW 255
39354: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39355: LD_ADDR_VAR 0 17
39359: PUSH
39360: LD_VAR 0 1
39364: PPUSH
39365: CALL_OW 248
39369: ST_TO_ADDR
// if sources then
39370: LD_VAR 0 5
39374: IFFALSE 39421
// for i = 1 to 3 do
39376: LD_ADDR_VAR 0 8
39380: PUSH
39381: DOUBLE
39382: LD_INT 1
39384: DEC
39385: ST_TO_ADDR
39386: LD_INT 3
39388: PUSH
39389: FOR_TO
39390: IFFALSE 39419
// AddResourceType ( base , i , sources [ i ] ) ;
39392: LD_VAR 0 15
39396: PPUSH
39397: LD_VAR 0 8
39401: PPUSH
39402: LD_VAR 0 5
39406: PUSH
39407: LD_VAR 0 8
39411: ARRAY
39412: PPUSH
39413: CALL_OW 276
39417: GO 39389
39419: POP
39420: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39421: LD_ADDR_VAR 0 18
39425: PUSH
39426: LD_VAR 0 15
39430: PPUSH
39431: LD_VAR 0 2
39435: PPUSH
39436: LD_INT 1
39438: PPUSH
39439: CALL 38682 0 3
39443: ST_TO_ADDR
// InitHc ;
39444: CALL_OW 19
// InitUc ;
39448: CALL_OW 18
// uc_side := side ;
39452: LD_ADDR_OWVAR 20
39456: PUSH
39457: LD_VAR 0 16
39461: ST_TO_ADDR
// uc_nation := nation ;
39462: LD_ADDR_OWVAR 21
39466: PUSH
39467: LD_VAR 0 17
39471: ST_TO_ADDR
// if buildings then
39472: LD_VAR 0 18
39476: IFFALSE 40798
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39478: LD_ADDR_VAR 0 19
39482: PUSH
39483: LD_VAR 0 18
39487: PPUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 30
39493: PUSH
39494: LD_INT 29
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 30
39503: PUSH
39504: LD_INT 30
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: PPUSH
39516: CALL_OW 72
39520: ST_TO_ADDR
// if tmp then
39521: LD_VAR 0 19
39525: IFFALSE 39573
// for i in tmp do
39527: LD_ADDR_VAR 0 8
39531: PUSH
39532: LD_VAR 0 19
39536: PUSH
39537: FOR_IN
39538: IFFALSE 39571
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39540: LD_VAR 0 8
39544: PPUSH
39545: CALL_OW 250
39549: PPUSH
39550: LD_VAR 0 8
39554: PPUSH
39555: CALL_OW 251
39559: PPUSH
39560: LD_VAR 0 16
39564: PPUSH
39565: CALL_OW 441
39569: GO 39537
39571: POP
39572: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39573: LD_VAR 0 18
39577: PPUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 30
39583: PUSH
39584: LD_INT 32
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 30
39593: PUSH
39594: LD_INT 33
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: PPUSH
39606: CALL_OW 72
39610: IFFALSE 39698
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39612: LD_ADDR_VAR 0 8
39616: PUSH
39617: LD_VAR 0 18
39621: PPUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 30
39627: PUSH
39628: LD_INT 32
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 30
39637: PUSH
39638: LD_INT 33
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: PPUSH
39650: CALL_OW 72
39654: PUSH
39655: FOR_IN
39656: IFFALSE 39696
// begin if not GetBWeapon ( i ) then
39658: LD_VAR 0 8
39662: PPUSH
39663: CALL_OW 269
39667: NOT
39668: IFFALSE 39694
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39670: LD_VAR 0 8
39674: PPUSH
39675: LD_VAR 0 8
39679: PPUSH
39680: LD_VAR 0 2
39684: PPUSH
39685: CALL 40944 0 2
39689: PPUSH
39690: CALL_OW 431
// end ;
39694: GO 39655
39696: POP
39697: POP
// end ; for i = 1 to personel do
39698: LD_ADDR_VAR 0 8
39702: PUSH
39703: DOUBLE
39704: LD_INT 1
39706: DEC
39707: ST_TO_ADDR
39708: LD_VAR 0 6
39712: PUSH
39713: FOR_TO
39714: IFFALSE 40778
// begin if i > 4 then
39716: LD_VAR 0 8
39720: PUSH
39721: LD_INT 4
39723: GREATER
39724: IFFALSE 39728
// break ;
39726: GO 40778
// case i of 1 :
39728: LD_VAR 0 8
39732: PUSH
39733: LD_INT 1
39735: DOUBLE
39736: EQUAL
39737: IFTRUE 39741
39739: GO 39821
39741: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39742: LD_ADDR_VAR 0 12
39746: PUSH
39747: LD_VAR 0 18
39751: PPUSH
39752: LD_INT 22
39754: PUSH
39755: LD_VAR 0 16
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 58
39766: PUSH
39767: EMPTY
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 30
39775: PUSH
39776: LD_INT 32
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 30
39785: PUSH
39786: LD_INT 4
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 30
39795: PUSH
39796: LD_INT 5
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: LIST
39813: PPUSH
39814: CALL_OW 72
39818: ST_TO_ADDR
39819: GO 40043
39821: LD_INT 2
39823: DOUBLE
39824: EQUAL
39825: IFTRUE 39829
39827: GO 39891
39829: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39830: LD_ADDR_VAR 0 12
39834: PUSH
39835: LD_VAR 0 18
39839: PPUSH
39840: LD_INT 22
39842: PUSH
39843: LD_VAR 0 16
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: LD_INT 30
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 30
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PPUSH
39884: CALL_OW 72
39888: ST_TO_ADDR
39889: GO 40043
39891: LD_INT 3
39893: DOUBLE
39894: EQUAL
39895: IFTRUE 39899
39897: GO 39961
39899: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39900: LD_ADDR_VAR 0 12
39904: PUSH
39905: LD_VAR 0 18
39909: PPUSH
39910: LD_INT 22
39912: PUSH
39913: LD_VAR 0 16
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 2
39924: PUSH
39925: LD_INT 30
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 30
39937: PUSH
39938: LD_INT 3
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PPUSH
39954: CALL_OW 72
39958: ST_TO_ADDR
39959: GO 40043
39961: LD_INT 4
39963: DOUBLE
39964: EQUAL
39965: IFTRUE 39969
39967: GO 40042
39969: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39970: LD_ADDR_VAR 0 12
39974: PUSH
39975: LD_VAR 0 18
39979: PPUSH
39980: LD_INT 22
39982: PUSH
39983: LD_VAR 0 16
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: LD_INT 30
39997: PUSH
39998: LD_INT 6
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 30
40007: PUSH
40008: LD_INT 7
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 30
40017: PUSH
40018: LD_INT 8
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PPUSH
40035: CALL_OW 72
40039: ST_TO_ADDR
40040: GO 40043
40042: POP
// if i = 1 then
40043: LD_VAR 0 8
40047: PUSH
40048: LD_INT 1
40050: EQUAL
40051: IFFALSE 40162
// begin tmp := [ ] ;
40053: LD_ADDR_VAR 0 19
40057: PUSH
40058: EMPTY
40059: ST_TO_ADDR
// for j in f do
40060: LD_ADDR_VAR 0 9
40064: PUSH
40065: LD_VAR 0 12
40069: PUSH
40070: FOR_IN
40071: IFFALSE 40144
// if GetBType ( j ) = b_bunker then
40073: LD_VAR 0 9
40077: PPUSH
40078: CALL_OW 266
40082: PUSH
40083: LD_INT 32
40085: EQUAL
40086: IFFALSE 40113
// tmp := Insert ( tmp , 1 , j ) else
40088: LD_ADDR_VAR 0 19
40092: PUSH
40093: LD_VAR 0 19
40097: PPUSH
40098: LD_INT 1
40100: PPUSH
40101: LD_VAR 0 9
40105: PPUSH
40106: CALL_OW 2
40110: ST_TO_ADDR
40111: GO 40142
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40113: LD_ADDR_VAR 0 19
40117: PUSH
40118: LD_VAR 0 19
40122: PPUSH
40123: LD_VAR 0 19
40127: PUSH
40128: LD_INT 1
40130: PLUS
40131: PPUSH
40132: LD_VAR 0 9
40136: PPUSH
40137: CALL_OW 2
40141: ST_TO_ADDR
40142: GO 40070
40144: POP
40145: POP
// if tmp then
40146: LD_VAR 0 19
40150: IFFALSE 40162
// f := tmp ;
40152: LD_ADDR_VAR 0 12
40156: PUSH
40157: LD_VAR 0 19
40161: ST_TO_ADDR
// end ; x := personel [ i ] ;
40162: LD_ADDR_VAR 0 13
40166: PUSH
40167: LD_VAR 0 6
40171: PUSH
40172: LD_VAR 0 8
40176: ARRAY
40177: ST_TO_ADDR
// if x = - 1 then
40178: LD_VAR 0 13
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: EQUAL
40187: IFFALSE 40396
// begin for j in f do
40189: LD_ADDR_VAR 0 9
40193: PUSH
40194: LD_VAR 0 12
40198: PUSH
40199: FOR_IN
40200: IFFALSE 40392
// repeat InitHc ;
40202: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40206: LD_VAR 0 9
40210: PPUSH
40211: CALL_OW 266
40215: PUSH
40216: LD_INT 5
40218: EQUAL
40219: IFFALSE 40289
// begin if UnitsInside ( j ) < 3 then
40221: LD_VAR 0 9
40225: PPUSH
40226: CALL_OW 313
40230: PUSH
40231: LD_INT 3
40233: LESS
40234: IFFALSE 40270
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40236: LD_INT 0
40238: PPUSH
40239: LD_INT 5
40241: PUSH
40242: LD_INT 8
40244: PUSH
40245: LD_INT 9
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: PUSH
40253: LD_VAR 0 17
40257: ARRAY
40258: PPUSH
40259: LD_VAR 0 4
40263: PPUSH
40264: CALL_OW 380
40268: GO 40287
// PrepareHuman ( false , i , skill ) ;
40270: LD_INT 0
40272: PPUSH
40273: LD_VAR 0 8
40277: PPUSH
40278: LD_VAR 0 4
40282: PPUSH
40283: CALL_OW 380
// end else
40287: GO 40306
// PrepareHuman ( false , i , skill ) ;
40289: LD_INT 0
40291: PPUSH
40292: LD_VAR 0 8
40296: PPUSH
40297: LD_VAR 0 4
40301: PPUSH
40302: CALL_OW 380
// un := CreateHuman ;
40306: LD_ADDR_VAR 0 14
40310: PUSH
40311: CALL_OW 44
40315: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40316: LD_ADDR_VAR 0 7
40320: PUSH
40321: LD_VAR 0 7
40325: PPUSH
40326: LD_INT 1
40328: PPUSH
40329: LD_VAR 0 14
40333: PPUSH
40334: CALL_OW 2
40338: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40339: LD_VAR 0 14
40343: PPUSH
40344: LD_VAR 0 9
40348: PPUSH
40349: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40353: LD_VAR 0 9
40357: PPUSH
40358: CALL_OW 313
40362: PUSH
40363: LD_INT 6
40365: EQUAL
40366: PUSH
40367: LD_VAR 0 9
40371: PPUSH
40372: CALL_OW 266
40376: PUSH
40377: LD_INT 32
40379: PUSH
40380: LD_INT 31
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: IN
40387: OR
40388: IFFALSE 40202
40390: GO 40199
40392: POP
40393: POP
// end else
40394: GO 40776
// for j = 1 to x do
40396: LD_ADDR_VAR 0 9
40400: PUSH
40401: DOUBLE
40402: LD_INT 1
40404: DEC
40405: ST_TO_ADDR
40406: LD_VAR 0 13
40410: PUSH
40411: FOR_TO
40412: IFFALSE 40774
// begin InitHc ;
40414: CALL_OW 19
// if not f then
40418: LD_VAR 0 12
40422: NOT
40423: IFFALSE 40512
// begin PrepareHuman ( false , i , skill ) ;
40425: LD_INT 0
40427: PPUSH
40428: LD_VAR 0 8
40432: PPUSH
40433: LD_VAR 0 4
40437: PPUSH
40438: CALL_OW 380
// un := CreateHuman ;
40442: LD_ADDR_VAR 0 14
40446: PUSH
40447: CALL_OW 44
40451: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40452: LD_ADDR_VAR 0 7
40456: PUSH
40457: LD_VAR 0 7
40461: PPUSH
40462: LD_INT 1
40464: PPUSH
40465: LD_VAR 0 14
40469: PPUSH
40470: CALL_OW 2
40474: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40475: LD_VAR 0 14
40479: PPUSH
40480: LD_VAR 0 1
40484: PPUSH
40485: CALL_OW 250
40489: PPUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 251
40499: PPUSH
40500: LD_INT 10
40502: PPUSH
40503: LD_INT 0
40505: PPUSH
40506: CALL_OW 50
// continue ;
40510: GO 40411
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40512: LD_VAR 0 12
40516: PUSH
40517: LD_INT 1
40519: ARRAY
40520: PPUSH
40521: CALL_OW 313
40525: PUSH
40526: LD_VAR 0 12
40530: PUSH
40531: LD_INT 1
40533: ARRAY
40534: PPUSH
40535: CALL_OW 266
40539: PUSH
40540: LD_INT 32
40542: PUSH
40543: LD_INT 31
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: IN
40550: AND
40551: PUSH
40552: LD_VAR 0 12
40556: PUSH
40557: LD_INT 1
40559: ARRAY
40560: PPUSH
40561: CALL_OW 313
40565: PUSH
40566: LD_INT 6
40568: EQUAL
40569: OR
40570: IFFALSE 40590
// f := Delete ( f , 1 ) ;
40572: LD_ADDR_VAR 0 12
40576: PUSH
40577: LD_VAR 0 12
40581: PPUSH
40582: LD_INT 1
40584: PPUSH
40585: CALL_OW 3
40589: ST_TO_ADDR
// if not f then
40590: LD_VAR 0 12
40594: NOT
40595: IFFALSE 40613
// begin x := x + 2 ;
40597: LD_ADDR_VAR 0 13
40601: PUSH
40602: LD_VAR 0 13
40606: PUSH
40607: LD_INT 2
40609: PLUS
40610: ST_TO_ADDR
// continue ;
40611: GO 40411
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40613: LD_VAR 0 12
40617: PUSH
40618: LD_INT 1
40620: ARRAY
40621: PPUSH
40622: CALL_OW 266
40626: PUSH
40627: LD_INT 5
40629: EQUAL
40630: IFFALSE 40704
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40632: LD_VAR 0 12
40636: PUSH
40637: LD_INT 1
40639: ARRAY
40640: PPUSH
40641: CALL_OW 313
40645: PUSH
40646: LD_INT 3
40648: LESS
40649: IFFALSE 40685
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40651: LD_INT 0
40653: PPUSH
40654: LD_INT 5
40656: PUSH
40657: LD_INT 8
40659: PUSH
40660: LD_INT 9
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: LIST
40667: PUSH
40668: LD_VAR 0 17
40672: ARRAY
40673: PPUSH
40674: LD_VAR 0 4
40678: PPUSH
40679: CALL_OW 380
40683: GO 40702
// PrepareHuman ( false , i , skill ) ;
40685: LD_INT 0
40687: PPUSH
40688: LD_VAR 0 8
40692: PPUSH
40693: LD_VAR 0 4
40697: PPUSH
40698: CALL_OW 380
// end else
40702: GO 40721
// PrepareHuman ( false , i , skill ) ;
40704: LD_INT 0
40706: PPUSH
40707: LD_VAR 0 8
40711: PPUSH
40712: LD_VAR 0 4
40716: PPUSH
40717: CALL_OW 380
// un := CreateHuman ;
40721: LD_ADDR_VAR 0 14
40725: PUSH
40726: CALL_OW 44
40730: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40731: LD_ADDR_VAR 0 7
40735: PUSH
40736: LD_VAR 0 7
40740: PPUSH
40741: LD_INT 1
40743: PPUSH
40744: LD_VAR 0 14
40748: PPUSH
40749: CALL_OW 2
40753: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40754: LD_VAR 0 14
40758: PPUSH
40759: LD_VAR 0 12
40763: PUSH
40764: LD_INT 1
40766: ARRAY
40767: PPUSH
40768: CALL_OW 52
// end ;
40772: GO 40411
40774: POP
40775: POP
// end ;
40776: GO 39713
40778: POP
40779: POP
// result := result ^ buildings ;
40780: LD_ADDR_VAR 0 7
40784: PUSH
40785: LD_VAR 0 7
40789: PUSH
40790: LD_VAR 0 18
40794: ADD
40795: ST_TO_ADDR
// end else
40796: GO 40939
// begin for i = 1 to personel do
40798: LD_ADDR_VAR 0 8
40802: PUSH
40803: DOUBLE
40804: LD_INT 1
40806: DEC
40807: ST_TO_ADDR
40808: LD_VAR 0 6
40812: PUSH
40813: FOR_TO
40814: IFFALSE 40937
// begin if i > 4 then
40816: LD_VAR 0 8
40820: PUSH
40821: LD_INT 4
40823: GREATER
40824: IFFALSE 40828
// break ;
40826: GO 40937
// x := personel [ i ] ;
40828: LD_ADDR_VAR 0 13
40832: PUSH
40833: LD_VAR 0 6
40837: PUSH
40838: LD_VAR 0 8
40842: ARRAY
40843: ST_TO_ADDR
// if x = - 1 then
40844: LD_VAR 0 13
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: EQUAL
40853: IFFALSE 40857
// continue ;
40855: GO 40813
// PrepareHuman ( false , i , skill ) ;
40857: LD_INT 0
40859: PPUSH
40860: LD_VAR 0 8
40864: PPUSH
40865: LD_VAR 0 4
40869: PPUSH
40870: CALL_OW 380
// un := CreateHuman ;
40874: LD_ADDR_VAR 0 14
40878: PUSH
40879: CALL_OW 44
40883: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40884: LD_VAR 0 14
40888: PPUSH
40889: LD_VAR 0 1
40893: PPUSH
40894: CALL_OW 250
40898: PPUSH
40899: LD_VAR 0 1
40903: PPUSH
40904: CALL_OW 251
40908: PPUSH
40909: LD_INT 10
40911: PPUSH
40912: LD_INT 0
40914: PPUSH
40915: CALL_OW 50
// result := result ^ un ;
40919: LD_ADDR_VAR 0 7
40923: PUSH
40924: LD_VAR 0 7
40928: PUSH
40929: LD_VAR 0 14
40933: ADD
40934: ST_TO_ADDR
// end ;
40935: GO 40813
40937: POP
40938: POP
// end ; end ;
40939: LD_VAR 0 7
40943: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40944: LD_INT 0
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
// result := false ;
40962: LD_ADDR_VAR 0 3
40966: PUSH
40967: LD_INT 0
40969: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40970: LD_VAR 0 1
40974: NOT
40975: PUSH
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL_OW 266
40985: PUSH
40986: LD_INT 32
40988: PUSH
40989: LD_INT 33
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: IN
40996: NOT
40997: OR
40998: IFFALSE 41002
// exit ;
41000: GO 42111
// nat := GetNation ( tower ) ;
41002: LD_ADDR_VAR 0 12
41006: PUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 248
41016: ST_TO_ADDR
// side := GetSide ( tower ) ;
41017: LD_ADDR_VAR 0 16
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 255
41031: ST_TO_ADDR
// x := GetX ( tower ) ;
41032: LD_ADDR_VAR 0 10
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 250
41046: ST_TO_ADDR
// y := GetY ( tower ) ;
41047: LD_ADDR_VAR 0 11
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 251
41061: ST_TO_ADDR
// if not x or not y then
41062: LD_VAR 0 10
41066: NOT
41067: PUSH
41068: LD_VAR 0 11
41072: NOT
41073: OR
41074: IFFALSE 41078
// exit ;
41076: GO 42111
// weapon := 0 ;
41078: LD_ADDR_VAR 0 18
41082: PUSH
41083: LD_INT 0
41085: ST_TO_ADDR
// fac_list := [ ] ;
41086: LD_ADDR_VAR 0 17
41090: PUSH
41091: EMPTY
41092: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41093: LD_ADDR_VAR 0 6
41097: PUSH
41098: LD_VAR 0 1
41102: PPUSH
41103: CALL_OW 274
41107: PPUSH
41108: LD_VAR 0 2
41112: PPUSH
41113: LD_INT 0
41115: PPUSH
41116: CALL 38682 0 3
41120: PPUSH
41121: LD_INT 30
41123: PUSH
41124: LD_INT 3
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PPUSH
41131: CALL_OW 72
41135: ST_TO_ADDR
// if not factories then
41136: LD_VAR 0 6
41140: NOT
41141: IFFALSE 41145
// exit ;
41143: GO 42111
// for i in factories do
41145: LD_ADDR_VAR 0 8
41149: PUSH
41150: LD_VAR 0 6
41154: PUSH
41155: FOR_IN
41156: IFFALSE 41181
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41158: LD_ADDR_VAR 0 17
41162: PUSH
41163: LD_VAR 0 17
41167: PUSH
41168: LD_VAR 0 8
41172: PPUSH
41173: CALL_OW 478
41177: UNION
41178: ST_TO_ADDR
41179: GO 41155
41181: POP
41182: POP
// if not fac_list then
41183: LD_VAR 0 17
41187: NOT
41188: IFFALSE 41192
// exit ;
41190: GO 42111
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41192: LD_ADDR_VAR 0 5
41196: PUSH
41197: LD_INT 4
41199: PUSH
41200: LD_INT 5
41202: PUSH
41203: LD_INT 9
41205: PUSH
41206: LD_INT 10
41208: PUSH
41209: LD_INT 6
41211: PUSH
41212: LD_INT 7
41214: PUSH
41215: LD_INT 11
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 27
41229: PUSH
41230: LD_INT 28
41232: PUSH
41233: LD_INT 26
41235: PUSH
41236: LD_INT 30
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 43
41247: PUSH
41248: LD_INT 44
41250: PUSH
41251: LD_INT 46
41253: PUSH
41254: LD_INT 45
41256: PUSH
41257: LD_INT 47
41259: PUSH
41260: LD_INT 49
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: PUSH
41276: LD_VAR 0 12
41280: ARRAY
41281: ST_TO_ADDR
// list := list isect fac_list ;
41282: LD_ADDR_VAR 0 5
41286: PUSH
41287: LD_VAR 0 5
41291: PUSH
41292: LD_VAR 0 17
41296: ISECT
41297: ST_TO_ADDR
// if not list then
41298: LD_VAR 0 5
41302: NOT
41303: IFFALSE 41307
// exit ;
41305: GO 42111
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41307: LD_VAR 0 12
41311: PUSH
41312: LD_INT 3
41314: EQUAL
41315: PUSH
41316: LD_INT 49
41318: PUSH
41319: LD_VAR 0 5
41323: IN
41324: AND
41325: PUSH
41326: LD_INT 31
41328: PPUSH
41329: LD_VAR 0 16
41333: PPUSH
41334: CALL_OW 321
41338: PUSH
41339: LD_INT 2
41341: EQUAL
41342: AND
41343: IFFALSE 41403
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41345: LD_INT 22
41347: PUSH
41348: LD_VAR 0 16
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 35
41359: PUSH
41360: LD_INT 49
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 91
41369: PUSH
41370: LD_VAR 0 1
41374: PUSH
41375: LD_INT 10
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: PPUSH
41388: CALL_OW 69
41392: NOT
41393: IFFALSE 41403
// weapon := ru_time_lapser ;
41395: LD_ADDR_VAR 0 18
41399: PUSH
41400: LD_INT 49
41402: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41403: LD_VAR 0 12
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: IN
41418: PUSH
41419: LD_INT 11
41421: PUSH
41422: LD_VAR 0 5
41426: IN
41427: PUSH
41428: LD_INT 30
41430: PUSH
41431: LD_VAR 0 5
41435: IN
41436: OR
41437: AND
41438: PUSH
41439: LD_INT 6
41441: PPUSH
41442: LD_VAR 0 16
41446: PPUSH
41447: CALL_OW 321
41451: PUSH
41452: LD_INT 2
41454: EQUAL
41455: AND
41456: IFFALSE 41621
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41458: LD_INT 22
41460: PUSH
41461: LD_VAR 0 16
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 35
41475: PUSH
41476: LD_INT 11
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 35
41485: PUSH
41486: LD_INT 30
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 91
41500: PUSH
41501: LD_VAR 0 1
41505: PUSH
41506: LD_INT 18
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: PPUSH
41519: CALL_OW 69
41523: NOT
41524: PUSH
41525: LD_INT 22
41527: PUSH
41528: LD_VAR 0 16
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 30
41542: PUSH
41543: LD_INT 32
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 30
41552: PUSH
41553: LD_INT 33
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 91
41567: PUSH
41568: LD_VAR 0 1
41572: PUSH
41573: LD_INT 12
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: LIST
41585: PUSH
41586: EMPTY
41587: LIST
41588: PPUSH
41589: CALL_OW 69
41593: PUSH
41594: LD_INT 2
41596: GREATER
41597: AND
41598: IFFALSE 41621
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41600: LD_ADDR_VAR 0 18
41604: PUSH
41605: LD_INT 11
41607: PUSH
41608: LD_INT 30
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_VAR 0 12
41619: ARRAY
41620: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41621: LD_VAR 0 18
41625: NOT
41626: PUSH
41627: LD_INT 40
41629: PPUSH
41630: LD_VAR 0 16
41634: PPUSH
41635: CALL_OW 321
41639: PUSH
41640: LD_INT 2
41642: EQUAL
41643: AND
41644: PUSH
41645: LD_INT 7
41647: PUSH
41648: LD_VAR 0 5
41652: IN
41653: PUSH
41654: LD_INT 28
41656: PUSH
41657: LD_VAR 0 5
41661: IN
41662: OR
41663: PUSH
41664: LD_INT 45
41666: PUSH
41667: LD_VAR 0 5
41671: IN
41672: OR
41673: AND
41674: IFFALSE 41928
// begin hex := GetHexInfo ( x , y ) ;
41676: LD_ADDR_VAR 0 4
41680: PUSH
41681: LD_VAR 0 10
41685: PPUSH
41686: LD_VAR 0 11
41690: PPUSH
41691: CALL_OW 546
41695: ST_TO_ADDR
// if hex [ 1 ] then
41696: LD_VAR 0 4
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: IFFALSE 41708
// exit ;
41706: GO 42111
// height := hex [ 2 ] ;
41708: LD_ADDR_VAR 0 15
41712: PUSH
41713: LD_VAR 0 4
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41722: LD_ADDR_VAR 0 14
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 3
41735: PUSH
41736: LD_INT 5
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: ST_TO_ADDR
// for i in tmp do
41745: LD_ADDR_VAR 0 8
41749: PUSH
41750: LD_VAR 0 14
41754: PUSH
41755: FOR_IN
41756: IFFALSE 41926
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41758: LD_ADDR_VAR 0 9
41762: PUSH
41763: LD_VAR 0 10
41767: PPUSH
41768: LD_VAR 0 8
41772: PPUSH
41773: LD_INT 5
41775: PPUSH
41776: CALL_OW 272
41780: PUSH
41781: LD_VAR 0 11
41785: PPUSH
41786: LD_VAR 0 8
41790: PPUSH
41791: LD_INT 5
41793: PPUSH
41794: CALL_OW 273
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41803: LD_VAR 0 9
41807: PUSH
41808: LD_INT 1
41810: ARRAY
41811: PPUSH
41812: LD_VAR 0 9
41816: PUSH
41817: LD_INT 2
41819: ARRAY
41820: PPUSH
41821: CALL_OW 488
41825: IFFALSE 41924
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41827: LD_ADDR_VAR 0 4
41831: PUSH
41832: LD_VAR 0 9
41836: PUSH
41837: LD_INT 1
41839: ARRAY
41840: PPUSH
41841: LD_VAR 0 9
41845: PUSH
41846: LD_INT 2
41848: ARRAY
41849: PPUSH
41850: CALL_OW 546
41854: ST_TO_ADDR
// if hex [ 1 ] then
41855: LD_VAR 0 4
41859: PUSH
41860: LD_INT 1
41862: ARRAY
41863: IFFALSE 41867
// continue ;
41865: GO 41755
// h := hex [ 2 ] ;
41867: LD_ADDR_VAR 0 13
41871: PUSH
41872: LD_VAR 0 4
41876: PUSH
41877: LD_INT 2
41879: ARRAY
41880: ST_TO_ADDR
// if h + 7 < height then
41881: LD_VAR 0 13
41885: PUSH
41886: LD_INT 7
41888: PLUS
41889: PUSH
41890: LD_VAR 0 15
41894: LESS
41895: IFFALSE 41924
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41897: LD_ADDR_VAR 0 18
41901: PUSH
41902: LD_INT 7
41904: PUSH
41905: LD_INT 28
41907: PUSH
41908: LD_INT 45
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: PUSH
41916: LD_VAR 0 12
41920: ARRAY
41921: ST_TO_ADDR
// break ;
41922: GO 41926
// end ; end ; end ;
41924: GO 41755
41926: POP
41927: POP
// end ; if not weapon then
41928: LD_VAR 0 18
41932: NOT
41933: IFFALSE 41993
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41935: LD_ADDR_VAR 0 5
41939: PUSH
41940: LD_VAR 0 5
41944: PUSH
41945: LD_INT 11
41947: PUSH
41948: LD_INT 30
41950: PUSH
41951: LD_INT 49
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: DIFF
41959: ST_TO_ADDR
// if not list then
41960: LD_VAR 0 5
41964: NOT
41965: IFFALSE 41969
// exit ;
41967: GO 42111
// weapon := list [ rand ( 1 , list ) ] ;
41969: LD_ADDR_VAR 0 18
41973: PUSH
41974: LD_VAR 0 5
41978: PUSH
41979: LD_INT 1
41981: PPUSH
41982: LD_VAR 0 5
41986: PPUSH
41987: CALL_OW 12
41991: ARRAY
41992: ST_TO_ADDR
// end ; if weapon then
41993: LD_VAR 0 18
41997: IFFALSE 42111
// begin tmp := CostOfWeapon ( weapon ) ;
41999: LD_ADDR_VAR 0 14
42003: PUSH
42004: LD_VAR 0 18
42008: PPUSH
42009: CALL_OW 451
42013: ST_TO_ADDR
// j := GetBase ( tower ) ;
42014: LD_ADDR_VAR 0 9
42018: PUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 274
42028: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42029: LD_VAR 0 9
42033: PPUSH
42034: LD_INT 1
42036: PPUSH
42037: CALL_OW 275
42041: PUSH
42042: LD_VAR 0 14
42046: PUSH
42047: LD_INT 1
42049: ARRAY
42050: GREATEREQUAL
42051: PUSH
42052: LD_VAR 0 9
42056: PPUSH
42057: LD_INT 2
42059: PPUSH
42060: CALL_OW 275
42064: PUSH
42065: LD_VAR 0 14
42069: PUSH
42070: LD_INT 2
42072: ARRAY
42073: GREATEREQUAL
42074: AND
42075: PUSH
42076: LD_VAR 0 9
42080: PPUSH
42081: LD_INT 3
42083: PPUSH
42084: CALL_OW 275
42088: PUSH
42089: LD_VAR 0 14
42093: PUSH
42094: LD_INT 3
42096: ARRAY
42097: GREATEREQUAL
42098: AND
42099: IFFALSE 42111
// result := weapon ;
42101: LD_ADDR_VAR 0 3
42105: PUSH
42106: LD_VAR 0 18
42110: ST_TO_ADDR
// end ; end ;
42111: LD_VAR 0 3
42115: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42116: LD_INT 0
42118: PPUSH
42119: PPUSH
// result := true ;
42120: LD_ADDR_VAR 0 3
42124: PUSH
42125: LD_INT 1
42127: ST_TO_ADDR
// if array1 = array2 then
42128: LD_VAR 0 1
42132: PUSH
42133: LD_VAR 0 2
42137: EQUAL
42138: IFFALSE 42198
// begin for i = 1 to array1 do
42140: LD_ADDR_VAR 0 4
42144: PUSH
42145: DOUBLE
42146: LD_INT 1
42148: DEC
42149: ST_TO_ADDR
42150: LD_VAR 0 1
42154: PUSH
42155: FOR_TO
42156: IFFALSE 42194
// if array1 [ i ] <> array2 [ i ] then
42158: LD_VAR 0 1
42162: PUSH
42163: LD_VAR 0 4
42167: ARRAY
42168: PUSH
42169: LD_VAR 0 2
42173: PUSH
42174: LD_VAR 0 4
42178: ARRAY
42179: NONEQUAL
42180: IFFALSE 42192
// begin result := false ;
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: LD_INT 0
42189: ST_TO_ADDR
// break ;
42190: GO 42194
// end ;
42192: GO 42155
42194: POP
42195: POP
// end else
42196: GO 42206
// result := false ;
42198: LD_ADDR_VAR 0 3
42202: PUSH
42203: LD_INT 0
42205: ST_TO_ADDR
// end ;
42206: LD_VAR 0 3
42210: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42211: LD_INT 0
42213: PPUSH
42214: PPUSH
// if not array1 or not array2 then
42215: LD_VAR 0 1
42219: NOT
42220: PUSH
42221: LD_VAR 0 2
42225: NOT
42226: OR
42227: IFFALSE 42231
// exit ;
42229: GO 42295
// result := true ;
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_INT 1
42238: ST_TO_ADDR
// for i = 1 to array1 do
42239: LD_ADDR_VAR 0 4
42243: PUSH
42244: DOUBLE
42245: LD_INT 1
42247: DEC
42248: ST_TO_ADDR
42249: LD_VAR 0 1
42253: PUSH
42254: FOR_TO
42255: IFFALSE 42293
// if array1 [ i ] <> array2 [ i ] then
42257: LD_VAR 0 1
42261: PUSH
42262: LD_VAR 0 4
42266: ARRAY
42267: PUSH
42268: LD_VAR 0 2
42272: PUSH
42273: LD_VAR 0 4
42277: ARRAY
42278: NONEQUAL
42279: IFFALSE 42291
// begin result := false ;
42281: LD_ADDR_VAR 0 3
42285: PUSH
42286: LD_INT 0
42288: ST_TO_ADDR
// break ;
42289: GO 42293
// end ;
42291: GO 42254
42293: POP
42294: POP
// end ;
42295: LD_VAR 0 3
42299: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42300: LD_INT 0
42302: PPUSH
42303: PPUSH
42304: PPUSH
// pom := GetBase ( fac ) ;
42305: LD_ADDR_VAR 0 5
42309: PUSH
42310: LD_VAR 0 1
42314: PPUSH
42315: CALL_OW 274
42319: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42320: LD_ADDR_VAR 0 4
42324: PUSH
42325: LD_VAR 0 2
42329: PUSH
42330: LD_INT 1
42332: ARRAY
42333: PPUSH
42334: LD_VAR 0 2
42338: PUSH
42339: LD_INT 2
42341: ARRAY
42342: PPUSH
42343: LD_VAR 0 2
42347: PUSH
42348: LD_INT 3
42350: ARRAY
42351: PPUSH
42352: LD_VAR 0 2
42356: PUSH
42357: LD_INT 4
42359: ARRAY
42360: PPUSH
42361: CALL_OW 449
42365: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42366: LD_ADDR_VAR 0 3
42370: PUSH
42371: LD_VAR 0 5
42375: PPUSH
42376: LD_INT 1
42378: PPUSH
42379: CALL_OW 275
42383: PUSH
42384: LD_VAR 0 4
42388: PUSH
42389: LD_INT 1
42391: ARRAY
42392: GREATEREQUAL
42393: PUSH
42394: LD_VAR 0 5
42398: PPUSH
42399: LD_INT 2
42401: PPUSH
42402: CALL_OW 275
42406: PUSH
42407: LD_VAR 0 4
42411: PUSH
42412: LD_INT 2
42414: ARRAY
42415: GREATEREQUAL
42416: AND
42417: PUSH
42418: LD_VAR 0 5
42422: PPUSH
42423: LD_INT 3
42425: PPUSH
42426: CALL_OW 275
42430: PUSH
42431: LD_VAR 0 4
42435: PUSH
42436: LD_INT 3
42438: ARRAY
42439: GREATEREQUAL
42440: AND
42441: ST_TO_ADDR
// end ;
42442: LD_VAR 0 3
42446: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42447: LD_INT 0
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
// pom := GetBase ( building ) ;
42453: LD_ADDR_VAR 0 3
42457: PUSH
42458: LD_VAR 0 1
42462: PPUSH
42463: CALL_OW 274
42467: ST_TO_ADDR
// if not pom then
42468: LD_VAR 0 3
42472: NOT
42473: IFFALSE 42477
// exit ;
42475: GO 42647
// btype := GetBType ( building ) ;
42477: LD_ADDR_VAR 0 5
42481: PUSH
42482: LD_VAR 0 1
42486: PPUSH
42487: CALL_OW 266
42491: ST_TO_ADDR
// if btype = b_armoury then
42492: LD_VAR 0 5
42496: PUSH
42497: LD_INT 4
42499: EQUAL
42500: IFFALSE 42510
// btype := b_barracks ;
42502: LD_ADDR_VAR 0 5
42506: PUSH
42507: LD_INT 5
42509: ST_TO_ADDR
// if btype = b_depot then
42510: LD_VAR 0 5
42514: PUSH
42515: LD_INT 0
42517: EQUAL
42518: IFFALSE 42528
// btype := b_warehouse ;
42520: LD_ADDR_VAR 0 5
42524: PUSH
42525: LD_INT 1
42527: ST_TO_ADDR
// if btype = b_workshop then
42528: LD_VAR 0 5
42532: PUSH
42533: LD_INT 2
42535: EQUAL
42536: IFFALSE 42546
// btype := b_factory ;
42538: LD_ADDR_VAR 0 5
42542: PUSH
42543: LD_INT 3
42545: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42546: LD_ADDR_VAR 0 4
42550: PUSH
42551: LD_VAR 0 5
42555: PPUSH
42556: LD_VAR 0 1
42560: PPUSH
42561: CALL_OW 248
42565: PPUSH
42566: CALL_OW 450
42570: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42571: LD_ADDR_VAR 0 2
42575: PUSH
42576: LD_VAR 0 3
42580: PPUSH
42581: LD_INT 1
42583: PPUSH
42584: CALL_OW 275
42588: PUSH
42589: LD_VAR 0 4
42593: PUSH
42594: LD_INT 1
42596: ARRAY
42597: GREATEREQUAL
42598: PUSH
42599: LD_VAR 0 3
42603: PPUSH
42604: LD_INT 2
42606: PPUSH
42607: CALL_OW 275
42611: PUSH
42612: LD_VAR 0 4
42616: PUSH
42617: LD_INT 2
42619: ARRAY
42620: GREATEREQUAL
42621: AND
42622: PUSH
42623: LD_VAR 0 3
42627: PPUSH
42628: LD_INT 3
42630: PPUSH
42631: CALL_OW 275
42635: PUSH
42636: LD_VAR 0 4
42640: PUSH
42641: LD_INT 3
42643: ARRAY
42644: GREATEREQUAL
42645: AND
42646: ST_TO_ADDR
// end ;
42647: LD_VAR 0 2
42651: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42652: LD_INT 0
42654: PPUSH
42655: PPUSH
42656: PPUSH
// pom := GetBase ( building ) ;
42657: LD_ADDR_VAR 0 4
42661: PUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: CALL_OW 274
42671: ST_TO_ADDR
// if not pom then
42672: LD_VAR 0 4
42676: NOT
42677: IFFALSE 42681
// exit ;
42679: GO 42782
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42681: LD_ADDR_VAR 0 5
42685: PUSH
42686: LD_VAR 0 2
42690: PPUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 248
42700: PPUSH
42701: CALL_OW 450
42705: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42706: LD_ADDR_VAR 0 3
42710: PUSH
42711: LD_VAR 0 4
42715: PPUSH
42716: LD_INT 1
42718: PPUSH
42719: CALL_OW 275
42723: PUSH
42724: LD_VAR 0 5
42728: PUSH
42729: LD_INT 1
42731: ARRAY
42732: GREATEREQUAL
42733: PUSH
42734: LD_VAR 0 4
42738: PPUSH
42739: LD_INT 2
42741: PPUSH
42742: CALL_OW 275
42746: PUSH
42747: LD_VAR 0 5
42751: PUSH
42752: LD_INT 2
42754: ARRAY
42755: GREATEREQUAL
42756: AND
42757: PUSH
42758: LD_VAR 0 4
42762: PPUSH
42763: LD_INT 3
42765: PPUSH
42766: CALL_OW 275
42770: PUSH
42771: LD_VAR 0 5
42775: PUSH
42776: LD_INT 3
42778: ARRAY
42779: GREATEREQUAL
42780: AND
42781: ST_TO_ADDR
// end ;
42782: LD_VAR 0 3
42786: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42787: LD_INT 0
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
// result := false ;
42800: LD_ADDR_VAR 0 8
42804: PUSH
42805: LD_INT 0
42807: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42808: LD_VAR 0 5
42812: NOT
42813: PUSH
42814: LD_VAR 0 1
42818: NOT
42819: OR
42820: PUSH
42821: LD_VAR 0 2
42825: NOT
42826: OR
42827: PUSH
42828: LD_VAR 0 3
42832: NOT
42833: OR
42834: IFFALSE 42838
// exit ;
42836: GO 43652
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42838: LD_ADDR_VAR 0 14
42842: PUSH
42843: LD_VAR 0 1
42847: PPUSH
42848: LD_VAR 0 2
42852: PPUSH
42853: LD_VAR 0 3
42857: PPUSH
42858: LD_VAR 0 4
42862: PPUSH
42863: LD_VAR 0 5
42867: PUSH
42868: LD_INT 1
42870: ARRAY
42871: PPUSH
42872: CALL_OW 248
42876: PPUSH
42877: LD_INT 0
42879: PPUSH
42880: CALL 44885 0 6
42884: ST_TO_ADDR
// if not hexes then
42885: LD_VAR 0 14
42889: NOT
42890: IFFALSE 42894
// exit ;
42892: GO 43652
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42894: LD_ADDR_VAR 0 17
42898: PUSH
42899: LD_VAR 0 5
42903: PPUSH
42904: LD_INT 22
42906: PUSH
42907: LD_VAR 0 13
42911: PPUSH
42912: CALL_OW 255
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: LD_INT 30
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 30
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PPUSH
42953: CALL_OW 72
42957: ST_TO_ADDR
// for i = 1 to hexes do
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: DOUBLE
42964: LD_INT 1
42966: DEC
42967: ST_TO_ADDR
42968: LD_VAR 0 14
42972: PUSH
42973: FOR_TO
42974: IFFALSE 43650
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42976: LD_ADDR_VAR 0 13
42980: PUSH
42981: LD_VAR 0 14
42985: PUSH
42986: LD_VAR 0 9
42990: ARRAY
42991: PUSH
42992: LD_INT 1
42994: ARRAY
42995: PPUSH
42996: LD_VAR 0 14
43000: PUSH
43001: LD_VAR 0 9
43005: ARRAY
43006: PUSH
43007: LD_INT 2
43009: ARRAY
43010: PPUSH
43011: CALL_OW 428
43015: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43016: LD_VAR 0 14
43020: PUSH
43021: LD_VAR 0 9
43025: ARRAY
43026: PUSH
43027: LD_INT 1
43029: ARRAY
43030: PPUSH
43031: LD_VAR 0 14
43035: PUSH
43036: LD_VAR 0 9
43040: ARRAY
43041: PUSH
43042: LD_INT 2
43044: ARRAY
43045: PPUSH
43046: CALL_OW 351
43050: PUSH
43051: LD_VAR 0 14
43055: PUSH
43056: LD_VAR 0 9
43060: ARRAY
43061: PUSH
43062: LD_INT 1
43064: ARRAY
43065: PPUSH
43066: LD_VAR 0 14
43070: PUSH
43071: LD_VAR 0 9
43075: ARRAY
43076: PUSH
43077: LD_INT 2
43079: ARRAY
43080: PPUSH
43081: CALL_OW 488
43085: NOT
43086: OR
43087: PUSH
43088: LD_VAR 0 13
43092: PPUSH
43093: CALL_OW 247
43097: PUSH
43098: LD_INT 3
43100: EQUAL
43101: OR
43102: IFFALSE 43108
// exit ;
43104: POP
43105: POP
43106: GO 43652
// if not tmp then
43108: LD_VAR 0 13
43112: NOT
43113: IFFALSE 43117
// continue ;
43115: GO 42973
// result := true ;
43117: LD_ADDR_VAR 0 8
43121: PUSH
43122: LD_INT 1
43124: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43125: LD_VAR 0 6
43129: PUSH
43130: LD_VAR 0 13
43134: PPUSH
43135: CALL_OW 247
43139: PUSH
43140: LD_INT 2
43142: EQUAL
43143: AND
43144: PUSH
43145: LD_VAR 0 13
43149: PPUSH
43150: CALL_OW 263
43154: PUSH
43155: LD_INT 1
43157: EQUAL
43158: AND
43159: IFFALSE 43323
// begin if IsDrivenBy ( tmp ) then
43161: LD_VAR 0 13
43165: PPUSH
43166: CALL_OW 311
43170: IFFALSE 43174
// continue ;
43172: GO 42973
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43174: LD_VAR 0 6
43178: PPUSH
43179: LD_INT 3
43181: PUSH
43182: LD_INT 60
43184: PUSH
43185: EMPTY
43186: LIST
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: LD_INT 55
43197: PUSH
43198: EMPTY
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PPUSH
43209: CALL_OW 72
43213: IFFALSE 43321
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43215: LD_ADDR_VAR 0 18
43219: PUSH
43220: LD_VAR 0 6
43224: PPUSH
43225: LD_INT 3
43227: PUSH
43228: LD_INT 60
43230: PUSH
43231: EMPTY
43232: LIST
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 55
43243: PUSH
43244: EMPTY
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PPUSH
43255: CALL_OW 72
43259: PUSH
43260: LD_INT 1
43262: ARRAY
43263: ST_TO_ADDR
// if IsInUnit ( driver ) then
43264: LD_VAR 0 18
43268: PPUSH
43269: CALL_OW 310
43273: IFFALSE 43284
// ComExit ( driver ) ;
43275: LD_VAR 0 18
43279: PPUSH
43280: CALL 68665 0 1
// AddComEnterUnit ( driver , tmp ) ;
43284: LD_VAR 0 18
43288: PPUSH
43289: LD_VAR 0 13
43293: PPUSH
43294: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43298: LD_VAR 0 18
43302: PPUSH
43303: LD_VAR 0 7
43307: PPUSH
43308: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43312: LD_VAR 0 18
43316: PPUSH
43317: CALL_OW 181
// end ; continue ;
43321: GO 42973
// end ; if not cleaners or not tmp in cleaners then
43323: LD_VAR 0 6
43327: NOT
43328: PUSH
43329: LD_VAR 0 13
43333: PUSH
43334: LD_VAR 0 6
43338: IN
43339: NOT
43340: OR
43341: IFFALSE 43648
// begin if dep then
43343: LD_VAR 0 17
43347: IFFALSE 43483
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43349: LD_ADDR_VAR 0 16
43353: PUSH
43354: LD_VAR 0 17
43358: PUSH
43359: LD_INT 1
43361: ARRAY
43362: PPUSH
43363: CALL_OW 250
43367: PPUSH
43368: LD_VAR 0 17
43372: PUSH
43373: LD_INT 1
43375: ARRAY
43376: PPUSH
43377: CALL_OW 254
43381: PPUSH
43382: LD_INT 5
43384: PPUSH
43385: CALL_OW 272
43389: PUSH
43390: LD_VAR 0 17
43394: PUSH
43395: LD_INT 1
43397: ARRAY
43398: PPUSH
43399: CALL_OW 251
43403: PPUSH
43404: LD_VAR 0 17
43408: PUSH
43409: LD_INT 1
43411: ARRAY
43412: PPUSH
43413: CALL_OW 254
43417: PPUSH
43418: LD_INT 5
43420: PPUSH
43421: CALL_OW 273
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43430: LD_VAR 0 16
43434: PUSH
43435: LD_INT 1
43437: ARRAY
43438: PPUSH
43439: LD_VAR 0 16
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: PPUSH
43448: CALL_OW 488
43452: IFFALSE 43483
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43454: LD_VAR 0 13
43458: PPUSH
43459: LD_VAR 0 16
43463: PUSH
43464: LD_INT 1
43466: ARRAY
43467: PPUSH
43468: LD_VAR 0 16
43472: PUSH
43473: LD_INT 2
43475: ARRAY
43476: PPUSH
43477: CALL_OW 111
// continue ;
43481: GO 42973
// end ; end ; r := GetDir ( tmp ) ;
43483: LD_ADDR_VAR 0 15
43487: PUSH
43488: LD_VAR 0 13
43492: PPUSH
43493: CALL_OW 254
43497: ST_TO_ADDR
// if r = 5 then
43498: LD_VAR 0 15
43502: PUSH
43503: LD_INT 5
43505: EQUAL
43506: IFFALSE 43516
// r := 0 ;
43508: LD_ADDR_VAR 0 15
43512: PUSH
43513: LD_INT 0
43515: ST_TO_ADDR
// for j = r to 5 do
43516: LD_ADDR_VAR 0 10
43520: PUSH
43521: DOUBLE
43522: LD_VAR 0 15
43526: DEC
43527: ST_TO_ADDR
43528: LD_INT 5
43530: PUSH
43531: FOR_TO
43532: IFFALSE 43646
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43534: LD_ADDR_VAR 0 11
43538: PUSH
43539: LD_VAR 0 13
43543: PPUSH
43544: CALL_OW 250
43548: PPUSH
43549: LD_VAR 0 10
43553: PPUSH
43554: LD_INT 2
43556: PPUSH
43557: CALL_OW 272
43561: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43562: LD_ADDR_VAR 0 12
43566: PUSH
43567: LD_VAR 0 13
43571: PPUSH
43572: CALL_OW 251
43576: PPUSH
43577: LD_VAR 0 10
43581: PPUSH
43582: LD_INT 2
43584: PPUSH
43585: CALL_OW 273
43589: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43590: LD_VAR 0 11
43594: PPUSH
43595: LD_VAR 0 12
43599: PPUSH
43600: CALL_OW 488
43604: PUSH
43605: LD_VAR 0 11
43609: PPUSH
43610: LD_VAR 0 12
43614: PPUSH
43615: CALL_OW 428
43619: NOT
43620: AND
43621: IFFALSE 43644
// begin ComMoveXY ( tmp , _x , _y ) ;
43623: LD_VAR 0 13
43627: PPUSH
43628: LD_VAR 0 11
43632: PPUSH
43633: LD_VAR 0 12
43637: PPUSH
43638: CALL_OW 111
// break ;
43642: GO 43646
// end ; end ;
43644: GO 43531
43646: POP
43647: POP
// end ; end ;
43648: GO 42973
43650: POP
43651: POP
// end ;
43652: LD_VAR 0 8
43656: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43657: LD_INT 0
43659: PPUSH
// result := true ;
43660: LD_ADDR_VAR 0 3
43664: PUSH
43665: LD_INT 1
43667: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43668: LD_VAR 0 2
43672: PUSH
43673: LD_INT 24
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43687
43679: LD_INT 33
43681: DOUBLE
43682: EQUAL
43683: IFTRUE 43687
43685: GO 43712
43687: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43688: LD_ADDR_VAR 0 3
43692: PUSH
43693: LD_INT 32
43695: PPUSH
43696: LD_VAR 0 1
43700: PPUSH
43701: CALL_OW 321
43705: PUSH
43706: LD_INT 2
43708: EQUAL
43709: ST_TO_ADDR
43710: GO 44028
43712: LD_INT 20
43714: DOUBLE
43715: EQUAL
43716: IFTRUE 43720
43718: GO 43745
43720: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43721: LD_ADDR_VAR 0 3
43725: PUSH
43726: LD_INT 6
43728: PPUSH
43729: LD_VAR 0 1
43733: PPUSH
43734: CALL_OW 321
43738: PUSH
43739: LD_INT 2
43741: EQUAL
43742: ST_TO_ADDR
43743: GO 44028
43745: LD_INT 22
43747: DOUBLE
43748: EQUAL
43749: IFTRUE 43759
43751: LD_INT 36
43753: DOUBLE
43754: EQUAL
43755: IFTRUE 43759
43757: GO 43784
43759: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43760: LD_ADDR_VAR 0 3
43764: PUSH
43765: LD_INT 15
43767: PPUSH
43768: LD_VAR 0 1
43772: PPUSH
43773: CALL_OW 321
43777: PUSH
43778: LD_INT 2
43780: EQUAL
43781: ST_TO_ADDR
43782: GO 44028
43784: LD_INT 30
43786: DOUBLE
43787: EQUAL
43788: IFTRUE 43792
43790: GO 43817
43792: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43793: LD_ADDR_VAR 0 3
43797: PUSH
43798: LD_INT 20
43800: PPUSH
43801: LD_VAR 0 1
43805: PPUSH
43806: CALL_OW 321
43810: PUSH
43811: LD_INT 2
43813: EQUAL
43814: ST_TO_ADDR
43815: GO 44028
43817: LD_INT 28
43819: DOUBLE
43820: EQUAL
43821: IFTRUE 43831
43823: LD_INT 21
43825: DOUBLE
43826: EQUAL
43827: IFTRUE 43831
43829: GO 43856
43831: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43832: LD_ADDR_VAR 0 3
43836: PUSH
43837: LD_INT 21
43839: PPUSH
43840: LD_VAR 0 1
43844: PPUSH
43845: CALL_OW 321
43849: PUSH
43850: LD_INT 2
43852: EQUAL
43853: ST_TO_ADDR
43854: GO 44028
43856: LD_INT 16
43858: DOUBLE
43859: EQUAL
43860: IFTRUE 43864
43862: GO 43889
43864: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43865: LD_ADDR_VAR 0 3
43869: PUSH
43870: LD_INT 84
43872: PPUSH
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 321
43882: PUSH
43883: LD_INT 2
43885: EQUAL
43886: ST_TO_ADDR
43887: GO 44028
43889: LD_INT 19
43891: DOUBLE
43892: EQUAL
43893: IFTRUE 43903
43895: LD_INT 23
43897: DOUBLE
43898: EQUAL
43899: IFTRUE 43903
43901: GO 43928
43903: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43904: LD_ADDR_VAR 0 3
43908: PUSH
43909: LD_INT 83
43911: PPUSH
43912: LD_VAR 0 1
43916: PPUSH
43917: CALL_OW 321
43921: PUSH
43922: LD_INT 2
43924: EQUAL
43925: ST_TO_ADDR
43926: GO 44028
43928: LD_INT 17
43930: DOUBLE
43931: EQUAL
43932: IFTRUE 43936
43934: GO 43961
43936: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43937: LD_ADDR_VAR 0 3
43941: PUSH
43942: LD_INT 39
43944: PPUSH
43945: LD_VAR 0 1
43949: PPUSH
43950: CALL_OW 321
43954: PUSH
43955: LD_INT 2
43957: EQUAL
43958: ST_TO_ADDR
43959: GO 44028
43961: LD_INT 18
43963: DOUBLE
43964: EQUAL
43965: IFTRUE 43969
43967: GO 43994
43969: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43970: LD_ADDR_VAR 0 3
43974: PUSH
43975: LD_INT 40
43977: PPUSH
43978: LD_VAR 0 1
43982: PPUSH
43983: CALL_OW 321
43987: PUSH
43988: LD_INT 2
43990: EQUAL
43991: ST_TO_ADDR
43992: GO 44028
43994: LD_INT 27
43996: DOUBLE
43997: EQUAL
43998: IFTRUE 44002
44000: GO 44027
44002: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_INT 35
44010: PPUSH
44011: LD_VAR 0 1
44015: PPUSH
44016: CALL_OW 321
44020: PUSH
44021: LD_INT 2
44023: EQUAL
44024: ST_TO_ADDR
44025: GO 44028
44027: POP
// end ;
44028: LD_VAR 0 3
44032: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44033: LD_INT 0
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
// result := false ;
44046: LD_ADDR_VAR 0 6
44050: PUSH
44051: LD_INT 0
44053: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44054: LD_VAR 0 1
44058: NOT
44059: PUSH
44060: LD_VAR 0 1
44064: PPUSH
44065: CALL_OW 266
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: IN
44080: NOT
44081: OR
44082: PUSH
44083: LD_VAR 0 2
44087: NOT
44088: OR
44089: PUSH
44090: LD_VAR 0 5
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: LD_INT 4
44109: PUSH
44110: LD_INT 5
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: IN
44121: NOT
44122: OR
44123: PUSH
44124: LD_VAR 0 3
44128: PPUSH
44129: LD_VAR 0 4
44133: PPUSH
44134: CALL_OW 488
44138: NOT
44139: OR
44140: IFFALSE 44144
// exit ;
44142: GO 44880
// side := GetSide ( depot ) ;
44144: LD_ADDR_VAR 0 9
44148: PUSH
44149: LD_VAR 0 1
44153: PPUSH
44154: CALL_OW 255
44158: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44159: LD_VAR 0 9
44163: PPUSH
44164: LD_VAR 0 2
44168: PPUSH
44169: CALL 43657 0 2
44173: NOT
44174: IFFALSE 44178
// exit ;
44176: GO 44880
// pom := GetBase ( depot ) ;
44178: LD_ADDR_VAR 0 10
44182: PUSH
44183: LD_VAR 0 1
44187: PPUSH
44188: CALL_OW 274
44192: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44193: LD_ADDR_VAR 0 11
44197: PUSH
44198: LD_VAR 0 2
44202: PPUSH
44203: LD_VAR 0 1
44207: PPUSH
44208: CALL_OW 248
44212: PPUSH
44213: CALL_OW 450
44217: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44218: LD_VAR 0 10
44222: PPUSH
44223: LD_INT 1
44225: PPUSH
44226: CALL_OW 275
44230: PUSH
44231: LD_VAR 0 11
44235: PUSH
44236: LD_INT 1
44238: ARRAY
44239: GREATEREQUAL
44240: PUSH
44241: LD_VAR 0 10
44245: PPUSH
44246: LD_INT 2
44248: PPUSH
44249: CALL_OW 275
44253: PUSH
44254: LD_VAR 0 11
44258: PUSH
44259: LD_INT 2
44261: ARRAY
44262: GREATEREQUAL
44263: AND
44264: PUSH
44265: LD_VAR 0 10
44269: PPUSH
44270: LD_INT 3
44272: PPUSH
44273: CALL_OW 275
44277: PUSH
44278: LD_VAR 0 11
44282: PUSH
44283: LD_INT 3
44285: ARRAY
44286: GREATEREQUAL
44287: AND
44288: NOT
44289: IFFALSE 44293
// exit ;
44291: GO 44880
// if GetBType ( depot ) = b_depot then
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL_OW 266
44302: PUSH
44303: LD_INT 0
44305: EQUAL
44306: IFFALSE 44318
// dist := 28 else
44308: LD_ADDR_VAR 0 14
44312: PUSH
44313: LD_INT 28
44315: ST_TO_ADDR
44316: GO 44326
// dist := 36 ;
44318: LD_ADDR_VAR 0 14
44322: PUSH
44323: LD_INT 36
44325: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44326: LD_VAR 0 1
44330: PPUSH
44331: LD_VAR 0 3
44335: PPUSH
44336: LD_VAR 0 4
44340: PPUSH
44341: CALL_OW 297
44345: PUSH
44346: LD_VAR 0 14
44350: GREATER
44351: IFFALSE 44355
// exit ;
44353: GO 44880
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44355: LD_ADDR_VAR 0 12
44359: PUSH
44360: LD_VAR 0 2
44364: PPUSH
44365: LD_VAR 0 3
44369: PPUSH
44370: LD_VAR 0 4
44374: PPUSH
44375: LD_VAR 0 5
44379: PPUSH
44380: LD_VAR 0 1
44384: PPUSH
44385: CALL_OW 248
44389: PPUSH
44390: LD_INT 0
44392: PPUSH
44393: CALL 44885 0 6
44397: ST_TO_ADDR
// if not hexes then
44398: LD_VAR 0 12
44402: NOT
44403: IFFALSE 44407
// exit ;
44405: GO 44880
// hex := GetHexInfo ( x , y ) ;
44407: LD_ADDR_VAR 0 15
44411: PUSH
44412: LD_VAR 0 3
44416: PPUSH
44417: LD_VAR 0 4
44421: PPUSH
44422: CALL_OW 546
44426: ST_TO_ADDR
// if hex [ 1 ] then
44427: LD_VAR 0 15
44431: PUSH
44432: LD_INT 1
44434: ARRAY
44435: IFFALSE 44439
// exit ;
44437: GO 44880
// height := hex [ 2 ] ;
44439: LD_ADDR_VAR 0 13
44443: PUSH
44444: LD_VAR 0 15
44448: PUSH
44449: LD_INT 2
44451: ARRAY
44452: ST_TO_ADDR
// for i = 1 to hexes do
44453: LD_ADDR_VAR 0 7
44457: PUSH
44458: DOUBLE
44459: LD_INT 1
44461: DEC
44462: ST_TO_ADDR
44463: LD_VAR 0 12
44467: PUSH
44468: FOR_TO
44469: IFFALSE 44799
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44471: LD_VAR 0 12
44475: PUSH
44476: LD_VAR 0 7
44480: ARRAY
44481: PUSH
44482: LD_INT 1
44484: ARRAY
44485: PPUSH
44486: LD_VAR 0 12
44490: PUSH
44491: LD_VAR 0 7
44495: ARRAY
44496: PUSH
44497: LD_INT 2
44499: ARRAY
44500: PPUSH
44501: CALL_OW 488
44505: NOT
44506: PUSH
44507: LD_VAR 0 12
44511: PUSH
44512: LD_VAR 0 7
44516: ARRAY
44517: PUSH
44518: LD_INT 1
44520: ARRAY
44521: PPUSH
44522: LD_VAR 0 12
44526: PUSH
44527: LD_VAR 0 7
44531: ARRAY
44532: PUSH
44533: LD_INT 2
44535: ARRAY
44536: PPUSH
44537: CALL_OW 428
44541: PUSH
44542: LD_INT 0
44544: GREATER
44545: OR
44546: PUSH
44547: LD_VAR 0 12
44551: PUSH
44552: LD_VAR 0 7
44556: ARRAY
44557: PUSH
44558: LD_INT 1
44560: ARRAY
44561: PPUSH
44562: LD_VAR 0 12
44566: PUSH
44567: LD_VAR 0 7
44571: ARRAY
44572: PUSH
44573: LD_INT 2
44575: ARRAY
44576: PPUSH
44577: CALL_OW 351
44581: OR
44582: IFFALSE 44588
// exit ;
44584: POP
44585: POP
44586: GO 44880
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44588: LD_ADDR_VAR 0 8
44592: PUSH
44593: LD_VAR 0 12
44597: PUSH
44598: LD_VAR 0 7
44602: ARRAY
44603: PUSH
44604: LD_INT 1
44606: ARRAY
44607: PPUSH
44608: LD_VAR 0 12
44612: PUSH
44613: LD_VAR 0 7
44617: ARRAY
44618: PUSH
44619: LD_INT 2
44621: ARRAY
44622: PPUSH
44623: CALL_OW 546
44627: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44628: LD_VAR 0 8
44632: PUSH
44633: LD_INT 1
44635: ARRAY
44636: PUSH
44637: LD_VAR 0 8
44641: PUSH
44642: LD_INT 2
44644: ARRAY
44645: PUSH
44646: LD_VAR 0 13
44650: PUSH
44651: LD_INT 2
44653: PLUS
44654: GREATER
44655: OR
44656: PUSH
44657: LD_VAR 0 8
44661: PUSH
44662: LD_INT 2
44664: ARRAY
44665: PUSH
44666: LD_VAR 0 13
44670: PUSH
44671: LD_INT 2
44673: MINUS
44674: LESS
44675: OR
44676: PUSH
44677: LD_VAR 0 8
44681: PUSH
44682: LD_INT 3
44684: ARRAY
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 8
44691: PUSH
44692: LD_INT 9
44694: PUSH
44695: LD_INT 10
44697: PUSH
44698: LD_INT 11
44700: PUSH
44701: LD_INT 12
44703: PUSH
44704: LD_INT 13
44706: PUSH
44707: LD_INT 16
44709: PUSH
44710: LD_INT 17
44712: PUSH
44713: LD_INT 18
44715: PUSH
44716: LD_INT 19
44718: PUSH
44719: LD_INT 20
44721: PUSH
44722: LD_INT 21
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: IN
44740: NOT
44741: OR
44742: PUSH
44743: LD_VAR 0 8
44747: PUSH
44748: LD_INT 5
44750: ARRAY
44751: NOT
44752: OR
44753: PUSH
44754: LD_VAR 0 8
44758: PUSH
44759: LD_INT 6
44761: ARRAY
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: LD_INT 7
44771: PUSH
44772: LD_INT 9
44774: PUSH
44775: LD_INT 10
44777: PUSH
44778: LD_INT 11
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: IN
44789: NOT
44790: OR
44791: IFFALSE 44797
// exit ;
44793: POP
44794: POP
44795: GO 44880
// end ;
44797: GO 44468
44799: POP
44800: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44801: LD_VAR 0 9
44805: PPUSH
44806: LD_VAR 0 3
44810: PPUSH
44811: LD_VAR 0 4
44815: PPUSH
44816: LD_INT 20
44818: PPUSH
44819: CALL 36832 0 4
44823: PUSH
44824: LD_INT 4
44826: ARRAY
44827: IFFALSE 44831
// exit ;
44829: GO 44880
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44831: LD_VAR 0 2
44835: PUSH
44836: LD_INT 29
44838: PUSH
44839: LD_INT 30
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: IN
44846: PUSH
44847: LD_VAR 0 3
44851: PPUSH
44852: LD_VAR 0 4
44856: PPUSH
44857: LD_VAR 0 9
44861: PPUSH
44862: CALL_OW 440
44866: NOT
44867: AND
44868: IFFALSE 44872
// exit ;
44870: GO 44880
// result := true ;
44872: LD_ADDR_VAR 0 6
44876: PUSH
44877: LD_INT 1
44879: ST_TO_ADDR
// end ;
44880: LD_VAR 0 6
44884: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44885: LD_INT 0
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
44892: PPUSH
44893: PPUSH
44894: PPUSH
44895: PPUSH
44896: PPUSH
44897: PPUSH
44898: PPUSH
44899: PPUSH
44900: PPUSH
44901: PPUSH
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
44908: PPUSH
44909: PPUSH
44910: PPUSH
44911: PPUSH
44912: PPUSH
44913: PPUSH
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
44919: PPUSH
44920: PPUSH
44921: PPUSH
44922: PPUSH
44923: PPUSH
44924: PPUSH
44925: PPUSH
44926: PPUSH
44927: PPUSH
44928: PPUSH
44929: PPUSH
44930: PPUSH
44931: PPUSH
44932: PPUSH
44933: PPUSH
44934: PPUSH
44935: PPUSH
44936: PPUSH
44937: PPUSH
44938: PPUSH
44939: PPUSH
44940: PPUSH
44941: PPUSH
44942: PPUSH
44943: PPUSH
44944: PPUSH
// result = [ ] ;
44945: LD_ADDR_VAR 0 7
44949: PUSH
44950: EMPTY
44951: ST_TO_ADDR
// temp_list = [ ] ;
44952: LD_ADDR_VAR 0 9
44956: PUSH
44957: EMPTY
44958: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44959: LD_VAR 0 4
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 3
44975: PUSH
44976: LD_INT 4
44978: PUSH
44979: LD_INT 5
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: IN
44990: NOT
44991: PUSH
44992: LD_VAR 0 1
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: IN
45007: PUSH
45008: LD_VAR 0 5
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 3
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: IN
45027: NOT
45028: AND
45029: OR
45030: IFFALSE 45034
// exit ;
45032: GO 63425
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45034: LD_VAR 0 1
45038: PUSH
45039: LD_INT 6
45041: PUSH
45042: LD_INT 7
45044: PUSH
45045: LD_INT 8
45047: PUSH
45048: LD_INT 13
45050: PUSH
45051: LD_INT 12
45053: PUSH
45054: LD_INT 15
45056: PUSH
45057: LD_INT 11
45059: PUSH
45060: LD_INT 14
45062: PUSH
45063: LD_INT 10
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: IN
45077: IFFALSE 45087
// btype = b_lab ;
45079: LD_ADDR_VAR 0 1
45083: PUSH
45084: LD_INT 6
45086: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45087: LD_VAR 0 6
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: IN
45106: NOT
45107: PUSH
45108: LD_VAR 0 1
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 3
45124: PUSH
45125: LD_INT 6
45127: PUSH
45128: LD_INT 36
45130: PUSH
45131: LD_INT 4
45133: PUSH
45134: LD_INT 5
45136: PUSH
45137: LD_INT 31
45139: PUSH
45140: LD_INT 32
45142: PUSH
45143: LD_INT 33
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: IN
45159: NOT
45160: PUSH
45161: LD_VAR 0 6
45165: PUSH
45166: LD_INT 1
45168: EQUAL
45169: AND
45170: OR
45171: PUSH
45172: LD_VAR 0 1
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: LD_INT 3
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: IN
45187: NOT
45188: PUSH
45189: LD_VAR 0 6
45193: PUSH
45194: LD_INT 2
45196: EQUAL
45197: AND
45198: OR
45199: IFFALSE 45209
// mode = 0 ;
45201: LD_ADDR_VAR 0 6
45205: PUSH
45206: LD_INT 0
45208: ST_TO_ADDR
// case mode of 0 :
45209: LD_VAR 0 6
45213: PUSH
45214: LD_INT 0
45216: DOUBLE
45217: EQUAL
45218: IFTRUE 45222
45220: GO 56675
45222: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45223: LD_ADDR_VAR 0 11
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 3
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45416: LD_ADDR_VAR 0 12
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 3
45573: NEG
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45612: LD_ADDR_VAR 0 13
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: NEG
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 3
45783: NEG
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45811: LD_ADDR_VAR 0 14
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 3
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46007: LD_ADDR_VAR 0 15
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46200: LD_ADDR_VAR 0 16
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: LD_INT 3
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 3
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46393: LD_ADDR_VAR 0 17
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46623: LD_ADDR_VAR 0 18
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46853: LD_ADDR_VAR 0 19
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47083: LD_ADDR_VAR 0 20
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47313: LD_ADDR_VAR 0 21
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47543: LD_ADDR_VAR 0 22
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47773: LD_ADDR_VAR 0 23
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 3
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48053: LD_ADDR_VAR 0 24
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48329: LD_ADDR_VAR 0 25
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 3
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48603: LD_ADDR_VAR 0 26
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48879: LD_ADDR_VAR 0 27
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49159: LD_ADDR_VAR 0 28
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 3
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 3
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 3
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49441: LD_ADDR_VAR 0 29
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49720: LD_ADDR_VAR 0 30
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49998: LD_ADDR_VAR 0 31
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: LD_INT 3
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 3
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50276: LD_ADDR_VAR 0 32
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 3
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: LD_INT 3
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50554: LD_ADDR_VAR 0 33
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 3
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: NEG
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50833: LD_ADDR_VAR 0 34
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 3
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: LD_INT 3
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 3
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51113: LD_ADDR_VAR 0 35
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51225: LD_ADDR_VAR 0 36
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51337: LD_ADDR_VAR 0 37
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51449: LD_ADDR_VAR 0 38
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51561: LD_ADDR_VAR 0 39
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51673: LD_ADDR_VAR 0 40
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51785: LD_ADDR_VAR 0 41
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 3
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52135: LD_ADDR_VAR 0 42
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: PUSH
52382: LD_INT 3
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 3
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 3
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52485: LD_ADDR_VAR 0 43
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 3
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52833: LD_ADDR_VAR 0 44
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 3
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 3
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: LD_INT 3
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: NEG
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: NEG
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 3
53142: NEG
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53183: LD_ADDR_VAR 0 45
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 3
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: LD_INT 3
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 3
53480: NEG
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53533: LD_ADDR_VAR 0 46
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 3
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53881: LD_ADDR_VAR 0 47
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54032: LD_ADDR_VAR 0 48
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 2
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54179: LD_ADDR_VAR 0 49
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54323: LD_ADDR_VAR 0 50
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54467: LD_ADDR_VAR 0 51
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54614: LD_ADDR_VAR 0 52
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54765: LD_ADDR_VAR 0 53
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54995: LD_ADDR_VAR 0 54
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55225: LD_ADDR_VAR 0 55
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55455: LD_ADDR_VAR 0 56
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55685: LD_ADDR_VAR 0 57
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55915: LD_ADDR_VAR 0 58
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56145: LD_ADDR_VAR 0 59
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56233: LD_ADDR_VAR 0 60
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56321: LD_ADDR_VAR 0 61
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56409: LD_ADDR_VAR 0 62
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56497: LD_ADDR_VAR 0 63
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56585: LD_ADDR_VAR 0 64
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: ST_TO_ADDR
// end ; 1 :
56673: GO 62570
56675: LD_INT 1
56677: DOUBLE
56678: EQUAL
56679: IFTRUE 56683
56681: GO 59306
56683: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56684: LD_ADDR_VAR 0 11
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56728: LD_ADDR_VAR 0 12
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56769: LD_ADDR_VAR 0 13
56773: PUSH
56774: LD_INT 3
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56809: LD_ADDR_VAR 0 14
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 3
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 3
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56850: LD_ADDR_VAR 0 15
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56894: LD_ADDR_VAR 0 16
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: LD_INT 3
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 3
56925: NEG
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: LIST
56939: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56940: LD_ADDR_VAR 0 17
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56984: LD_ADDR_VAR 0 18
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57025: LD_ADDR_VAR 0 19
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: LD_INT 3
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57065: LD_ADDR_VAR 0 20
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 2
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57106: LD_ADDR_VAR 0 21
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57150: LD_ADDR_VAR 0 22
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: LIST
57195: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57196: LD_ADDR_VAR 0 23
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 4
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57240: LD_ADDR_VAR 0 24
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 4
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57281: LD_ADDR_VAR 0 25
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: LD_INT 3
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: LD_INT 4
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: LIST
57320: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57321: LD_ADDR_VAR 0 26
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 3
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 4
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: LIST
57361: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57362: LD_ADDR_VAR 0 27
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 4
57391: NEG
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57406: LD_ADDR_VAR 0 28
57410: PUSH
57411: LD_INT 3
57413: NEG
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: LD_INT 4
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57452: LD_ADDR_VAR 0 29
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 4
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: LD_INT 5
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 5
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 4
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 6
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 6
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 5
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57607: LD_ADDR_VAR 0 30
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 4
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 4
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 5
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 5
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 5
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 6
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 6
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57750: LD_ADDR_VAR 0 31
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 4
57797: PUSH
57798: LD_INT 4
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: LD_INT 4
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: PUSH
57818: LD_INT 4
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 5
57827: PUSH
57828: LD_INT 5
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 4
57837: PUSH
57838: LD_INT 5
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 6
57847: PUSH
57848: LD_INT 5
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 6
57857: PUSH
57858: LD_INT 6
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 5
57867: PUSH
57868: LD_INT 6
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57889: LD_ADDR_VAR 0 32
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: LD_INT 5
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 5
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: LD_INT 4
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 6
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 6
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 5
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58032: LD_ADDR_VAR 0 33
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 4
58084: NEG
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 4
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 4
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 5
58118: NEG
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 5
58129: NEG
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 5
58141: NEG
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 6
58152: NEG
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 6
58163: NEG
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58187: LD_ADDR_VAR 0 34
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: NEG
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 4
58242: NEG
58243: PUSH
58244: LD_INT 3
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 4
58254: NEG
58255: PUSH
58256: LD_INT 4
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: LD_INT 5
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 5
58278: NEG
58279: PUSH
58280: LD_INT 4
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 5
58290: NEG
58291: PUSH
58292: LD_INT 5
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 5
58302: NEG
58303: PUSH
58304: LD_INT 6
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 6
58314: NEG
58315: PUSH
58316: LD_INT 5
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 6
58326: NEG
58327: PUSH
58328: LD_INT 6
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58350: LD_ADDR_VAR 0 41
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 3
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58394: LD_ADDR_VAR 0 42
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58435: LD_ADDR_VAR 0 43
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58475: LD_ADDR_VAR 0 44
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 2
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58516: LD_ADDR_VAR 0 45
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58560: LD_ADDR_VAR 0 46
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 3
58591: NEG
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58606: LD_ADDR_VAR 0 47
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: LD_INT 3
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58639: LD_ADDR_VAR 0 48
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58670: LD_ADDR_VAR 0 49
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58699: LD_ADDR_VAR 0 50
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58728: LD_ADDR_VAR 0 51
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58759: LD_ADDR_VAR 0 52
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58792: LD_ADDR_VAR 0 53
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 3
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 2
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58836: LD_ADDR_VAR 0 54
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58877: LD_ADDR_VAR 0 55
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58917: LD_ADDR_VAR 0 56
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 3
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58958: LD_ADDR_VAR 0 57
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59002: LD_ADDR_VAR 0 58
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59048: LD_ADDR_VAR 0 59
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: LIST
59091: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59092: LD_ADDR_VAR 0 60
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59133: LD_ADDR_VAR 0 61
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59173: LD_ADDR_VAR 0 62
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59214: LD_ADDR_VAR 0 63
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: LIST
59257: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59258: LD_ADDR_VAR 0 64
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: LIST
59303: ST_TO_ADDR
// end ; 2 :
59304: GO 62570
59306: LD_INT 2
59308: DOUBLE
59309: EQUAL
59310: IFTRUE 59314
59312: GO 62569
59314: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59315: LD_ADDR_VAR 0 29
59319: PUSH
59320: LD_INT 4
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 4
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 5
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 5
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 4
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 3
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 5
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: PUSH
59416: LD_INT 3
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 4
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 4
59445: PUSH
59446: LD_INT 4
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: LD_INT 4
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 4
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: LD_INT 4
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 4
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: LD_INT 4
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 5
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 5
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 4
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 3
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 5
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: NEG
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 4
59654: NEG
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 4
59677: NEG
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 4
59700: NEG
59701: PUSH
59702: LD_INT 4
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 4
59712: NEG
59713: PUSH
59714: LD_INT 5
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: LD_INT 4
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 4
59748: NEG
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 5
59760: NEG
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 5
59772: NEG
59773: PUSH
59774: LD_INT 5
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: LD_INT 5
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 5
59796: NEG
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59853: LD_ADDR_VAR 0 30
59857: PUSH
59858: LD_INT 4
59860: PUSH
59861: LD_INT 4
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 4
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 5
59880: PUSH
59881: LD_INT 4
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 5
59890: PUSH
59891: LD_INT 5
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 4
59900: PUSH
59901: LD_INT 5
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: LD_INT 4
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: LD_INT 3
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 5
59930: PUSH
59931: LD_INT 3
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: LD_INT 5
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 4
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 4
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 4
60043: NEG
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 4
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 5
60099: NEG
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 5
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 5
60122: NEG
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 3
60145: NEG
60146: PUSH
60147: LD_INT 3
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: LD_INT 4
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 3
60193: NEG
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 4
60205: NEG
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 4
60217: NEG
60218: PUSH
60219: LD_INT 4
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 2
60229: NEG
60230: PUSH
60231: LD_INT 4
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 4
60241: NEG
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 5
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 4
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: LD_INT 3
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 3
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: LD_INT 4
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 5
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: LD_INT 5
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60400: LD_ADDR_VAR 0 31
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 4
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 3
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: LD_INT 4
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: LD_INT 5
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: LD_INT 5
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: LD_INT 4
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: LD_INT 5
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 4
60556: NEG
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 4
60579: NEG
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 4
60602: NEG
60603: PUSH
60604: LD_INT 4
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 4
60614: NEG
60615: PUSH
60616: LD_INT 5
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 3
60626: NEG
60627: PUSH
60628: LD_INT 4
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 3
60638: NEG
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 4
60650: NEG
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 5
60662: NEG
60663: PUSH
60664: LD_INT 4
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 5
60674: NEG
60675: PUSH
60676: LD_INT 5
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: LD_INT 5
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 5
60698: NEG
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 4
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 3
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 4
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: LD_INT 4
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 4
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 4
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 5
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 5
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 3
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 3
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 3
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 5
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60950: LD_ADDR_VAR 0 32
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 3
60991: NEG
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 4
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 5
61013: NEG
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 5
61024: NEG
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 5
61036: NEG
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 3
61048: NEG
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: LD_INT 3
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 3
61071: NEG
61072: PUSH
61073: LD_INT 4
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 3
61107: NEG
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 4
61119: NEG
61120: PUSH
61121: LD_INT 3
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 4
61131: NEG
61132: PUSH
61133: LD_INT 4
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PUSH
61145: LD_INT 4
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 4
61155: NEG
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 4
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 5
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: LD_INT 4
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 3
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 4
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: LD_INT 5
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 3
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: LD_INT 5
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 4
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 4
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 4
61362: PUSH
61363: LD_INT 4
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 5
61382: PUSH
61383: LD_INT 4
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 5
61392: PUSH
61393: LD_INT 5
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: LD_INT 5
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 5
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 5
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61497: LD_ADDR_VAR 0 33
61501: PUSH
61502: LD_INT 4
61504: NEG
61505: PUSH
61506: LD_INT 4
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 4
61516: NEG
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: LD_INT 4
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 3
61540: NEG
61541: PUSH
61542: LD_INT 3
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 4
61552: NEG
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 5
61564: NEG
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 5
61576: NEG
61577: PUSH
61578: LD_INT 5
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: LD_INT 5
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 5
61600: NEG
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 4
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 3
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 4
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 4
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 4
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 4
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 5
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 5
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 4
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 3
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 3
61786: PUSH
61787: LD_INT 2
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 3
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 4
61827: PUSH
61828: LD_INT 3
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 4
61837: PUSH
61838: LD_INT 4
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: PUSH
61848: LD_INT 4
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: LD_INT 3
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 4
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: LD_INT 4
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 4
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: LD_INT 4
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 5
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: LD_INT 5
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 4
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 5
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 2
61979: NEG
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62035: LD_ADDR_VAR 0 34
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: LD_INT 4
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 5
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 4
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: LD_INT 3
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: LD_INT 3
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: LD_INT 4
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 5
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: LD_INT 3
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: LD_INT 5
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 4
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 4
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 4
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 4
62237: PUSH
62238: LD_INT 4
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 4
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 5
62257: PUSH
62258: LD_INT 4
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 5
62267: PUSH
62268: LD_INT 5
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 4
62277: PUSH
62278: LD_INT 5
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 3
62287: PUSH
62288: LD_INT 4
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 3
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 5
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: LD_INT 5
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: LD_INT 3
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 4
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 4
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: LD_INT 4
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 2
62409: NEG
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 4
62420: NEG
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 4
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 3
62443: NEG
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 4
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 5
62476: NEG
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 5
62487: NEG
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 5
62499: NEG
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: ST_TO_ADDR
// end ; end ;
62567: GO 62570
62569: POP
// case btype of b_depot , b_warehouse :
62570: LD_VAR 0 1
62574: PUSH
62575: LD_INT 0
62577: DOUBLE
62578: EQUAL
62579: IFTRUE 62589
62581: LD_INT 1
62583: DOUBLE
62584: EQUAL
62585: IFTRUE 62589
62587: GO 62790
62589: POP
// case nation of nation_american :
62590: LD_VAR 0 5
62594: PUSH
62595: LD_INT 1
62597: DOUBLE
62598: EQUAL
62599: IFTRUE 62603
62601: GO 62659
62603: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62604: LD_ADDR_VAR 0 9
62608: PUSH
62609: LD_VAR 0 11
62613: PUSH
62614: LD_VAR 0 12
62618: PUSH
62619: LD_VAR 0 13
62623: PUSH
62624: LD_VAR 0 14
62628: PUSH
62629: LD_VAR 0 15
62633: PUSH
62634: LD_VAR 0 16
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: PUSH
62647: LD_VAR 0 4
62651: PUSH
62652: LD_INT 1
62654: PLUS
62655: ARRAY
62656: ST_TO_ADDR
62657: GO 62788
62659: LD_INT 2
62661: DOUBLE
62662: EQUAL
62663: IFTRUE 62667
62665: GO 62723
62667: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62668: LD_ADDR_VAR 0 9
62672: PUSH
62673: LD_VAR 0 17
62677: PUSH
62678: LD_VAR 0 18
62682: PUSH
62683: LD_VAR 0 19
62687: PUSH
62688: LD_VAR 0 20
62692: PUSH
62693: LD_VAR 0 21
62697: PUSH
62698: LD_VAR 0 22
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: PUSH
62711: LD_VAR 0 4
62715: PUSH
62716: LD_INT 1
62718: PLUS
62719: ARRAY
62720: ST_TO_ADDR
62721: GO 62788
62723: LD_INT 3
62725: DOUBLE
62726: EQUAL
62727: IFTRUE 62731
62729: GO 62787
62731: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62732: LD_ADDR_VAR 0 9
62736: PUSH
62737: LD_VAR 0 23
62741: PUSH
62742: LD_VAR 0 24
62746: PUSH
62747: LD_VAR 0 25
62751: PUSH
62752: LD_VAR 0 26
62756: PUSH
62757: LD_VAR 0 27
62761: PUSH
62762: LD_VAR 0 28
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: PUSH
62775: LD_VAR 0 4
62779: PUSH
62780: LD_INT 1
62782: PLUS
62783: ARRAY
62784: ST_TO_ADDR
62785: GO 62788
62787: POP
62788: GO 63343
62790: LD_INT 2
62792: DOUBLE
62793: EQUAL
62794: IFTRUE 62804
62796: LD_INT 3
62798: DOUBLE
62799: EQUAL
62800: IFTRUE 62804
62802: GO 62860
62804: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62805: LD_ADDR_VAR 0 9
62809: PUSH
62810: LD_VAR 0 29
62814: PUSH
62815: LD_VAR 0 30
62819: PUSH
62820: LD_VAR 0 31
62824: PUSH
62825: LD_VAR 0 32
62829: PUSH
62830: LD_VAR 0 33
62834: PUSH
62835: LD_VAR 0 34
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: PUSH
62848: LD_VAR 0 4
62852: PUSH
62853: LD_INT 1
62855: PLUS
62856: ARRAY
62857: ST_TO_ADDR
62858: GO 63343
62860: LD_INT 16
62862: DOUBLE
62863: EQUAL
62864: IFTRUE 62922
62866: LD_INT 17
62868: DOUBLE
62869: EQUAL
62870: IFTRUE 62922
62872: LD_INT 18
62874: DOUBLE
62875: EQUAL
62876: IFTRUE 62922
62878: LD_INT 19
62880: DOUBLE
62881: EQUAL
62882: IFTRUE 62922
62884: LD_INT 22
62886: DOUBLE
62887: EQUAL
62888: IFTRUE 62922
62890: LD_INT 20
62892: DOUBLE
62893: EQUAL
62894: IFTRUE 62922
62896: LD_INT 21
62898: DOUBLE
62899: EQUAL
62900: IFTRUE 62922
62902: LD_INT 23
62904: DOUBLE
62905: EQUAL
62906: IFTRUE 62922
62908: LD_INT 24
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62922
62914: LD_INT 25
62916: DOUBLE
62917: EQUAL
62918: IFTRUE 62922
62920: GO 62978
62922: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62923: LD_ADDR_VAR 0 9
62927: PUSH
62928: LD_VAR 0 35
62932: PUSH
62933: LD_VAR 0 36
62937: PUSH
62938: LD_VAR 0 37
62942: PUSH
62943: LD_VAR 0 38
62947: PUSH
62948: LD_VAR 0 39
62952: PUSH
62953: LD_VAR 0 40
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: PUSH
62966: LD_VAR 0 4
62970: PUSH
62971: LD_INT 1
62973: PLUS
62974: ARRAY
62975: ST_TO_ADDR
62976: GO 63343
62978: LD_INT 6
62980: DOUBLE
62981: EQUAL
62982: IFTRUE 63034
62984: LD_INT 7
62986: DOUBLE
62987: EQUAL
62988: IFTRUE 63034
62990: LD_INT 8
62992: DOUBLE
62993: EQUAL
62994: IFTRUE 63034
62996: LD_INT 13
62998: DOUBLE
62999: EQUAL
63000: IFTRUE 63034
63002: LD_INT 12
63004: DOUBLE
63005: EQUAL
63006: IFTRUE 63034
63008: LD_INT 15
63010: DOUBLE
63011: EQUAL
63012: IFTRUE 63034
63014: LD_INT 11
63016: DOUBLE
63017: EQUAL
63018: IFTRUE 63034
63020: LD_INT 14
63022: DOUBLE
63023: EQUAL
63024: IFTRUE 63034
63026: LD_INT 10
63028: DOUBLE
63029: EQUAL
63030: IFTRUE 63034
63032: GO 63090
63034: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63035: LD_ADDR_VAR 0 9
63039: PUSH
63040: LD_VAR 0 41
63044: PUSH
63045: LD_VAR 0 42
63049: PUSH
63050: LD_VAR 0 43
63054: PUSH
63055: LD_VAR 0 44
63059: PUSH
63060: LD_VAR 0 45
63064: PUSH
63065: LD_VAR 0 46
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: PUSH
63078: LD_VAR 0 4
63082: PUSH
63083: LD_INT 1
63085: PLUS
63086: ARRAY
63087: ST_TO_ADDR
63088: GO 63343
63090: LD_INT 36
63092: DOUBLE
63093: EQUAL
63094: IFTRUE 63098
63096: GO 63154
63098: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63099: LD_ADDR_VAR 0 9
63103: PUSH
63104: LD_VAR 0 47
63108: PUSH
63109: LD_VAR 0 48
63113: PUSH
63114: LD_VAR 0 49
63118: PUSH
63119: LD_VAR 0 50
63123: PUSH
63124: LD_VAR 0 51
63128: PUSH
63129: LD_VAR 0 52
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: PUSH
63142: LD_VAR 0 4
63146: PUSH
63147: LD_INT 1
63149: PLUS
63150: ARRAY
63151: ST_TO_ADDR
63152: GO 63343
63154: LD_INT 4
63156: DOUBLE
63157: EQUAL
63158: IFTRUE 63180
63160: LD_INT 5
63162: DOUBLE
63163: EQUAL
63164: IFTRUE 63180
63166: LD_INT 34
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63180
63172: LD_INT 37
63174: DOUBLE
63175: EQUAL
63176: IFTRUE 63180
63178: GO 63236
63180: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63181: LD_ADDR_VAR 0 9
63185: PUSH
63186: LD_VAR 0 53
63190: PUSH
63191: LD_VAR 0 54
63195: PUSH
63196: LD_VAR 0 55
63200: PUSH
63201: LD_VAR 0 56
63205: PUSH
63206: LD_VAR 0 57
63210: PUSH
63211: LD_VAR 0 58
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: PUSH
63224: LD_VAR 0 4
63228: PUSH
63229: LD_INT 1
63231: PLUS
63232: ARRAY
63233: ST_TO_ADDR
63234: GO 63343
63236: LD_INT 31
63238: DOUBLE
63239: EQUAL
63240: IFTRUE 63286
63242: LD_INT 32
63244: DOUBLE
63245: EQUAL
63246: IFTRUE 63286
63248: LD_INT 33
63250: DOUBLE
63251: EQUAL
63252: IFTRUE 63286
63254: LD_INT 27
63256: DOUBLE
63257: EQUAL
63258: IFTRUE 63286
63260: LD_INT 26
63262: DOUBLE
63263: EQUAL
63264: IFTRUE 63286
63266: LD_INT 28
63268: DOUBLE
63269: EQUAL
63270: IFTRUE 63286
63272: LD_INT 29
63274: DOUBLE
63275: EQUAL
63276: IFTRUE 63286
63278: LD_INT 30
63280: DOUBLE
63281: EQUAL
63282: IFTRUE 63286
63284: GO 63342
63286: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63287: LD_ADDR_VAR 0 9
63291: PUSH
63292: LD_VAR 0 59
63296: PUSH
63297: LD_VAR 0 60
63301: PUSH
63302: LD_VAR 0 61
63306: PUSH
63307: LD_VAR 0 62
63311: PUSH
63312: LD_VAR 0 63
63316: PUSH
63317: LD_VAR 0 64
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: PUSH
63330: LD_VAR 0 4
63334: PUSH
63335: LD_INT 1
63337: PLUS
63338: ARRAY
63339: ST_TO_ADDR
63340: GO 63343
63342: POP
// temp_list2 = [ ] ;
63343: LD_ADDR_VAR 0 10
63347: PUSH
63348: EMPTY
63349: ST_TO_ADDR
// for i in temp_list do
63350: LD_ADDR_VAR 0 8
63354: PUSH
63355: LD_VAR 0 9
63359: PUSH
63360: FOR_IN
63361: IFFALSE 63413
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63363: LD_ADDR_VAR 0 10
63367: PUSH
63368: LD_VAR 0 10
63372: PUSH
63373: LD_VAR 0 8
63377: PUSH
63378: LD_INT 1
63380: ARRAY
63381: PUSH
63382: LD_VAR 0 2
63386: PLUS
63387: PUSH
63388: LD_VAR 0 8
63392: PUSH
63393: LD_INT 2
63395: ARRAY
63396: PUSH
63397: LD_VAR 0 3
63401: PLUS
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: ADD
63410: ST_TO_ADDR
63411: GO 63360
63413: POP
63414: POP
// result = temp_list2 ;
63415: LD_ADDR_VAR 0 7
63419: PUSH
63420: LD_VAR 0 10
63424: ST_TO_ADDR
// end ;
63425: LD_VAR 0 7
63429: RET
// export function EnemyInRange ( unit , dist ) ; begin
63430: LD_INT 0
63432: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63433: LD_ADDR_VAR 0 3
63437: PUSH
63438: LD_VAR 0 1
63442: PPUSH
63443: CALL_OW 255
63447: PPUSH
63448: LD_VAR 0 1
63452: PPUSH
63453: CALL_OW 250
63457: PPUSH
63458: LD_VAR 0 1
63462: PPUSH
63463: CALL_OW 251
63467: PPUSH
63468: LD_VAR 0 2
63472: PPUSH
63473: CALL 36832 0 4
63477: PUSH
63478: LD_INT 4
63480: ARRAY
63481: ST_TO_ADDR
// end ;
63482: LD_VAR 0 3
63486: RET
// export function PlayerSeeMe ( unit ) ; begin
63487: LD_INT 0
63489: PPUSH
// result := See ( your_side , unit ) ;
63490: LD_ADDR_VAR 0 2
63494: PUSH
63495: LD_OWVAR 2
63499: PPUSH
63500: LD_VAR 0 1
63504: PPUSH
63505: CALL_OW 292
63509: ST_TO_ADDR
// end ;
63510: LD_VAR 0 2
63514: RET
// export function ReverseDir ( unit ) ; begin
63515: LD_INT 0
63517: PPUSH
// if not unit then
63518: LD_VAR 0 1
63522: NOT
63523: IFFALSE 63527
// exit ;
63525: GO 63550
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63527: LD_ADDR_VAR 0 2
63531: PUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: CALL_OW 254
63541: PUSH
63542: LD_INT 3
63544: PLUS
63545: PUSH
63546: LD_INT 6
63548: MOD
63549: ST_TO_ADDR
// end ;
63550: LD_VAR 0 2
63554: RET
// export function ReverseArray ( array ) ; var i ; begin
63555: LD_INT 0
63557: PPUSH
63558: PPUSH
// if not array then
63559: LD_VAR 0 1
63563: NOT
63564: IFFALSE 63568
// exit ;
63566: GO 63623
// result := [ ] ;
63568: LD_ADDR_VAR 0 2
63572: PUSH
63573: EMPTY
63574: ST_TO_ADDR
// for i := array downto 1 do
63575: LD_ADDR_VAR 0 3
63579: PUSH
63580: DOUBLE
63581: LD_VAR 0 1
63585: INC
63586: ST_TO_ADDR
63587: LD_INT 1
63589: PUSH
63590: FOR_DOWNTO
63591: IFFALSE 63621
// result := Join ( result , array [ i ] ) ;
63593: LD_ADDR_VAR 0 2
63597: PUSH
63598: LD_VAR 0 2
63602: PPUSH
63603: LD_VAR 0 1
63607: PUSH
63608: LD_VAR 0 3
63612: ARRAY
63613: PPUSH
63614: CALL 68267 0 2
63618: ST_TO_ADDR
63619: GO 63590
63621: POP
63622: POP
// end ;
63623: LD_VAR 0 2
63627: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63628: LD_INT 0
63630: PPUSH
63631: PPUSH
63632: PPUSH
63633: PPUSH
63634: PPUSH
63635: PPUSH
// if not unit or not hexes then
63636: LD_VAR 0 1
63640: NOT
63641: PUSH
63642: LD_VAR 0 2
63646: NOT
63647: OR
63648: IFFALSE 63652
// exit ;
63650: GO 63775
// dist := 9999 ;
63652: LD_ADDR_VAR 0 5
63656: PUSH
63657: LD_INT 9999
63659: ST_TO_ADDR
// for i = 1 to hexes do
63660: LD_ADDR_VAR 0 4
63664: PUSH
63665: DOUBLE
63666: LD_INT 1
63668: DEC
63669: ST_TO_ADDR
63670: LD_VAR 0 2
63674: PUSH
63675: FOR_TO
63676: IFFALSE 63763
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63678: LD_ADDR_VAR 0 6
63682: PUSH
63683: LD_VAR 0 1
63687: PPUSH
63688: LD_VAR 0 2
63692: PUSH
63693: LD_VAR 0 4
63697: ARRAY
63698: PUSH
63699: LD_INT 1
63701: ARRAY
63702: PPUSH
63703: LD_VAR 0 2
63707: PUSH
63708: LD_VAR 0 4
63712: ARRAY
63713: PUSH
63714: LD_INT 2
63716: ARRAY
63717: PPUSH
63718: CALL_OW 297
63722: ST_TO_ADDR
// if tdist < dist then
63723: LD_VAR 0 6
63727: PUSH
63728: LD_VAR 0 5
63732: LESS
63733: IFFALSE 63761
// begin hex := hexes [ i ] ;
63735: LD_ADDR_VAR 0 8
63739: PUSH
63740: LD_VAR 0 2
63744: PUSH
63745: LD_VAR 0 4
63749: ARRAY
63750: ST_TO_ADDR
// dist := tdist ;
63751: LD_ADDR_VAR 0 5
63755: PUSH
63756: LD_VAR 0 6
63760: ST_TO_ADDR
// end ; end ;
63761: GO 63675
63763: POP
63764: POP
// result := hex ;
63765: LD_ADDR_VAR 0 3
63769: PUSH
63770: LD_VAR 0 8
63774: ST_TO_ADDR
// end ;
63775: LD_VAR 0 3
63779: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63780: LD_INT 0
63782: PPUSH
63783: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63784: LD_VAR 0 1
63788: NOT
63789: PUSH
63790: LD_VAR 0 1
63794: PUSH
63795: LD_INT 21
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 23
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PPUSH
63819: CALL_OW 69
63823: IN
63824: NOT
63825: OR
63826: IFFALSE 63830
// exit ;
63828: GO 63877
// for i = 1 to 3 do
63830: LD_ADDR_VAR 0 3
63834: PUSH
63835: DOUBLE
63836: LD_INT 1
63838: DEC
63839: ST_TO_ADDR
63840: LD_INT 3
63842: PUSH
63843: FOR_TO
63844: IFFALSE 63875
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 250
63855: PPUSH
63856: LD_VAR 0 1
63860: PPUSH
63861: CALL_OW 251
63865: PPUSH
63866: LD_INT 1
63868: PPUSH
63869: CALL_OW 453
63873: GO 63843
63875: POP
63876: POP
// end ;
63877: LD_VAR 0 2
63881: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63882: LD_INT 0
63884: PPUSH
63885: PPUSH
63886: PPUSH
63887: PPUSH
63888: PPUSH
63889: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63890: LD_VAR 0 1
63894: NOT
63895: PUSH
63896: LD_VAR 0 2
63900: NOT
63901: OR
63902: PUSH
63903: LD_VAR 0 1
63907: PPUSH
63908: CALL_OW 314
63912: OR
63913: IFFALSE 63917
// exit ;
63915: GO 64384
// if GetLives ( i ) < 250 then
63917: LD_VAR 0 4
63921: PPUSH
63922: CALL_OW 256
63926: PUSH
63927: LD_INT 250
63929: LESS
63930: IFFALSE 63943
// begin ComAutodestruct ( i ) ;
63932: LD_VAR 0 4
63936: PPUSH
63937: CALL 63780 0 1
// exit ;
63941: GO 64384
// end ; x := GetX ( enemy_unit ) ;
63943: LD_ADDR_VAR 0 7
63947: PUSH
63948: LD_VAR 0 2
63952: PPUSH
63953: CALL_OW 250
63957: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63958: LD_ADDR_VAR 0 8
63962: PUSH
63963: LD_VAR 0 2
63967: PPUSH
63968: CALL_OW 251
63972: ST_TO_ADDR
// if not x or not y then
63973: LD_VAR 0 7
63977: NOT
63978: PUSH
63979: LD_VAR 0 8
63983: NOT
63984: OR
63985: IFFALSE 63989
// exit ;
63987: GO 64384
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63989: LD_ADDR_VAR 0 6
63993: PUSH
63994: LD_VAR 0 7
63998: PPUSH
63999: LD_INT 0
64001: PPUSH
64002: LD_INT 4
64004: PPUSH
64005: CALL_OW 272
64009: PUSH
64010: LD_VAR 0 8
64014: PPUSH
64015: LD_INT 0
64017: PPUSH
64018: LD_INT 4
64020: PPUSH
64021: CALL_OW 273
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_VAR 0 7
64034: PPUSH
64035: LD_INT 1
64037: PPUSH
64038: LD_INT 4
64040: PPUSH
64041: CALL_OW 272
64045: PUSH
64046: LD_VAR 0 8
64050: PPUSH
64051: LD_INT 1
64053: PPUSH
64054: LD_INT 4
64056: PPUSH
64057: CALL_OW 273
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_VAR 0 7
64070: PPUSH
64071: LD_INT 2
64073: PPUSH
64074: LD_INT 4
64076: PPUSH
64077: CALL_OW 272
64081: PUSH
64082: LD_VAR 0 8
64086: PPUSH
64087: LD_INT 2
64089: PPUSH
64090: LD_INT 4
64092: PPUSH
64093: CALL_OW 273
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_VAR 0 7
64106: PPUSH
64107: LD_INT 3
64109: PPUSH
64110: LD_INT 4
64112: PPUSH
64113: CALL_OW 272
64117: PUSH
64118: LD_VAR 0 8
64122: PPUSH
64123: LD_INT 3
64125: PPUSH
64126: LD_INT 4
64128: PPUSH
64129: CALL_OW 273
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_VAR 0 7
64142: PPUSH
64143: LD_INT 4
64145: PPUSH
64146: LD_INT 4
64148: PPUSH
64149: CALL_OW 272
64153: PUSH
64154: LD_VAR 0 8
64158: PPUSH
64159: LD_INT 4
64161: PPUSH
64162: LD_INT 4
64164: PPUSH
64165: CALL_OW 273
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_VAR 0 7
64178: PPUSH
64179: LD_INT 5
64181: PPUSH
64182: LD_INT 4
64184: PPUSH
64185: CALL_OW 272
64189: PUSH
64190: LD_VAR 0 8
64194: PPUSH
64195: LD_INT 5
64197: PPUSH
64198: LD_INT 4
64200: PPUSH
64201: CALL_OW 273
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// for i = tmp downto 1 do
64218: LD_ADDR_VAR 0 4
64222: PUSH
64223: DOUBLE
64224: LD_VAR 0 6
64228: INC
64229: ST_TO_ADDR
64230: LD_INT 1
64232: PUSH
64233: FOR_DOWNTO
64234: IFFALSE 64335
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64236: LD_VAR 0 6
64240: PUSH
64241: LD_VAR 0 4
64245: ARRAY
64246: PUSH
64247: LD_INT 1
64249: ARRAY
64250: PPUSH
64251: LD_VAR 0 6
64255: PUSH
64256: LD_VAR 0 4
64260: ARRAY
64261: PUSH
64262: LD_INT 2
64264: ARRAY
64265: PPUSH
64266: CALL_OW 488
64270: NOT
64271: PUSH
64272: LD_VAR 0 6
64276: PUSH
64277: LD_VAR 0 4
64281: ARRAY
64282: PUSH
64283: LD_INT 1
64285: ARRAY
64286: PPUSH
64287: LD_VAR 0 6
64291: PUSH
64292: LD_VAR 0 4
64296: ARRAY
64297: PUSH
64298: LD_INT 2
64300: ARRAY
64301: PPUSH
64302: CALL_OW 428
64306: PUSH
64307: LD_INT 0
64309: NONEQUAL
64310: OR
64311: IFFALSE 64333
// tmp := Delete ( tmp , i ) ;
64313: LD_ADDR_VAR 0 6
64317: PUSH
64318: LD_VAR 0 6
64322: PPUSH
64323: LD_VAR 0 4
64327: PPUSH
64328: CALL_OW 3
64332: ST_TO_ADDR
64333: GO 64233
64335: POP
64336: POP
// j := GetClosestHex ( unit , tmp ) ;
64337: LD_ADDR_VAR 0 5
64341: PUSH
64342: LD_VAR 0 1
64346: PPUSH
64347: LD_VAR 0 6
64351: PPUSH
64352: CALL 63628 0 2
64356: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64357: LD_VAR 0 1
64361: PPUSH
64362: LD_VAR 0 5
64366: PUSH
64367: LD_INT 1
64369: ARRAY
64370: PPUSH
64371: LD_VAR 0 5
64375: PUSH
64376: LD_INT 2
64378: ARRAY
64379: PPUSH
64380: CALL_OW 111
// end ;
64384: LD_VAR 0 3
64388: RET
// export function PrepareApemanSoldier ( ) ; begin
64389: LD_INT 0
64391: PPUSH
// uc_nation := 0 ;
64392: LD_ADDR_OWVAR 21
64396: PUSH
64397: LD_INT 0
64399: ST_TO_ADDR
// hc_sex := sex_male ;
64400: LD_ADDR_OWVAR 27
64404: PUSH
64405: LD_INT 1
64407: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64408: LD_ADDR_OWVAR 28
64412: PUSH
64413: LD_INT 15
64415: ST_TO_ADDR
// hc_gallery :=  ;
64416: LD_ADDR_OWVAR 33
64420: PUSH
64421: LD_STRING 
64423: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64424: LD_ADDR_OWVAR 31
64428: PUSH
64429: LD_INT 0
64431: PPUSH
64432: LD_INT 3
64434: PPUSH
64435: CALL_OW 12
64439: PUSH
64440: LD_INT 0
64442: PPUSH
64443: LD_INT 3
64445: PPUSH
64446: CALL_OW 12
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// end ;
64463: LD_VAR 0 1
64467: RET
// export function PrepareApemanEngineer ( ) ; begin
64468: LD_INT 0
64470: PPUSH
// uc_nation := 0 ;
64471: LD_ADDR_OWVAR 21
64475: PUSH
64476: LD_INT 0
64478: ST_TO_ADDR
// hc_sex := sex_male ;
64479: LD_ADDR_OWVAR 27
64483: PUSH
64484: LD_INT 1
64486: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64487: LD_ADDR_OWVAR 28
64491: PUSH
64492: LD_INT 16
64494: ST_TO_ADDR
// hc_gallery :=  ;
64495: LD_ADDR_OWVAR 33
64499: PUSH
64500: LD_STRING 
64502: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64503: LD_ADDR_OWVAR 31
64507: PUSH
64508: LD_INT 0
64510: PPUSH
64511: LD_INT 3
64513: PPUSH
64514: CALL_OW 12
64518: PUSH
64519: LD_INT 0
64521: PPUSH
64522: LD_INT 3
64524: PPUSH
64525: CALL_OW 12
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: ST_TO_ADDR
// end ;
64542: LD_VAR 0 1
64546: RET
// export function PrepareApeman ( agressivity ) ; begin
64547: LD_INT 0
64549: PPUSH
// uc_side := 0 ;
64550: LD_ADDR_OWVAR 20
64554: PUSH
64555: LD_INT 0
64557: ST_TO_ADDR
// uc_nation := 0 ;
64558: LD_ADDR_OWVAR 21
64562: PUSH
64563: LD_INT 0
64565: ST_TO_ADDR
// hc_sex := sex_male ;
64566: LD_ADDR_OWVAR 27
64570: PUSH
64571: LD_INT 1
64573: ST_TO_ADDR
// hc_class := class_apeman ;
64574: LD_ADDR_OWVAR 28
64578: PUSH
64579: LD_INT 12
64581: ST_TO_ADDR
// hc_gallery :=  ;
64582: LD_ADDR_OWVAR 33
64586: PUSH
64587: LD_STRING 
64589: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64590: LD_ADDR_OWVAR 35
64594: PUSH
64595: LD_VAR 0 1
64599: NEG
64600: PPUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 12
64610: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64611: LD_ADDR_OWVAR 31
64615: PUSH
64616: LD_INT 0
64618: PPUSH
64619: LD_INT 3
64621: PPUSH
64622: CALL_OW 12
64626: PUSH
64627: LD_INT 0
64629: PPUSH
64630: LD_INT 3
64632: PPUSH
64633: CALL_OW 12
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// end ;
64650: LD_VAR 0 2
64654: RET
// export function PrepareTiger ( agressivity ) ; begin
64655: LD_INT 0
64657: PPUSH
// uc_side := 0 ;
64658: LD_ADDR_OWVAR 20
64662: PUSH
64663: LD_INT 0
64665: ST_TO_ADDR
// uc_nation := 0 ;
64666: LD_ADDR_OWVAR 21
64670: PUSH
64671: LD_INT 0
64673: ST_TO_ADDR
// hc_class := class_tiger ;
64674: LD_ADDR_OWVAR 28
64678: PUSH
64679: LD_INT 14
64681: ST_TO_ADDR
// hc_gallery :=  ;
64682: LD_ADDR_OWVAR 33
64686: PUSH
64687: LD_STRING 
64689: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64690: LD_ADDR_OWVAR 35
64694: PUSH
64695: LD_VAR 0 1
64699: NEG
64700: PPUSH
64701: LD_VAR 0 1
64705: PPUSH
64706: CALL_OW 12
64710: ST_TO_ADDR
// end ;
64711: LD_VAR 0 2
64715: RET
// export function PrepareEnchidna ( ) ; begin
64716: LD_INT 0
64718: PPUSH
// uc_side := 0 ;
64719: LD_ADDR_OWVAR 20
64723: PUSH
64724: LD_INT 0
64726: ST_TO_ADDR
// uc_nation := 0 ;
64727: LD_ADDR_OWVAR 21
64731: PUSH
64732: LD_INT 0
64734: ST_TO_ADDR
// hc_class := class_baggie ;
64735: LD_ADDR_OWVAR 28
64739: PUSH
64740: LD_INT 13
64742: ST_TO_ADDR
// hc_gallery :=  ;
64743: LD_ADDR_OWVAR 33
64747: PUSH
64748: LD_STRING 
64750: ST_TO_ADDR
// end ;
64751: LD_VAR 0 1
64755: RET
// export function PrepareFrog ( ) ; begin
64756: LD_INT 0
64758: PPUSH
// uc_side := 0 ;
64759: LD_ADDR_OWVAR 20
64763: PUSH
64764: LD_INT 0
64766: ST_TO_ADDR
// uc_nation := 0 ;
64767: LD_ADDR_OWVAR 21
64771: PUSH
64772: LD_INT 0
64774: ST_TO_ADDR
// hc_class := class_frog ;
64775: LD_ADDR_OWVAR 28
64779: PUSH
64780: LD_INT 19
64782: ST_TO_ADDR
// hc_gallery :=  ;
64783: LD_ADDR_OWVAR 33
64787: PUSH
64788: LD_STRING 
64790: ST_TO_ADDR
// end ;
64791: LD_VAR 0 1
64795: RET
// export function PrepareFish ( ) ; begin
64796: LD_INT 0
64798: PPUSH
// uc_side := 0 ;
64799: LD_ADDR_OWVAR 20
64803: PUSH
64804: LD_INT 0
64806: ST_TO_ADDR
// uc_nation := 0 ;
64807: LD_ADDR_OWVAR 21
64811: PUSH
64812: LD_INT 0
64814: ST_TO_ADDR
// hc_class := class_fish ;
64815: LD_ADDR_OWVAR 28
64819: PUSH
64820: LD_INT 20
64822: ST_TO_ADDR
// hc_gallery :=  ;
64823: LD_ADDR_OWVAR 33
64827: PUSH
64828: LD_STRING 
64830: ST_TO_ADDR
// end ;
64831: LD_VAR 0 1
64835: RET
// export function PrepareBird ( ) ; begin
64836: LD_INT 0
64838: PPUSH
// uc_side := 0 ;
64839: LD_ADDR_OWVAR 20
64843: PUSH
64844: LD_INT 0
64846: ST_TO_ADDR
// uc_nation := 0 ;
64847: LD_ADDR_OWVAR 21
64851: PUSH
64852: LD_INT 0
64854: ST_TO_ADDR
// hc_class := class_phororhacos ;
64855: LD_ADDR_OWVAR 28
64859: PUSH
64860: LD_INT 18
64862: ST_TO_ADDR
// hc_gallery :=  ;
64863: LD_ADDR_OWVAR 33
64867: PUSH
64868: LD_STRING 
64870: ST_TO_ADDR
// end ;
64871: LD_VAR 0 1
64875: RET
// export function PrepareHorse ( ) ; begin
64876: LD_INT 0
64878: PPUSH
// uc_side := 0 ;
64879: LD_ADDR_OWVAR 20
64883: PUSH
64884: LD_INT 0
64886: ST_TO_ADDR
// uc_nation := 0 ;
64887: LD_ADDR_OWVAR 21
64891: PUSH
64892: LD_INT 0
64894: ST_TO_ADDR
// hc_class := class_horse ;
64895: LD_ADDR_OWVAR 28
64899: PUSH
64900: LD_INT 21
64902: ST_TO_ADDR
// hc_gallery :=  ;
64903: LD_ADDR_OWVAR 33
64907: PUSH
64908: LD_STRING 
64910: ST_TO_ADDR
// end ;
64911: LD_VAR 0 1
64915: RET
// export function PrepareMastodont ( ) ; begin
64916: LD_INT 0
64918: PPUSH
// uc_side := 0 ;
64919: LD_ADDR_OWVAR 20
64923: PUSH
64924: LD_INT 0
64926: ST_TO_ADDR
// uc_nation := 0 ;
64927: LD_ADDR_OWVAR 21
64931: PUSH
64932: LD_INT 0
64934: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64935: LD_ADDR_OWVAR 37
64939: PUSH
64940: LD_INT 31
64942: ST_TO_ADDR
// vc_control := control_rider ;
64943: LD_ADDR_OWVAR 38
64947: PUSH
64948: LD_INT 4
64950: ST_TO_ADDR
// end ;
64951: LD_VAR 0 1
64955: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64956: LD_INT 0
64958: PPUSH
64959: PPUSH
64960: PPUSH
// uc_side = 0 ;
64961: LD_ADDR_OWVAR 20
64965: PUSH
64966: LD_INT 0
64968: ST_TO_ADDR
// uc_nation = 0 ;
64969: LD_ADDR_OWVAR 21
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// InitHc_All ( ) ;
64977: CALL_OW 584
// InitVc ;
64981: CALL_OW 20
// if mastodonts then
64985: LD_VAR 0 6
64989: IFFALSE 65056
// for i = 1 to mastodonts do
64991: LD_ADDR_VAR 0 11
64995: PUSH
64996: DOUBLE
64997: LD_INT 1
64999: DEC
65000: ST_TO_ADDR
65001: LD_VAR 0 6
65005: PUSH
65006: FOR_TO
65007: IFFALSE 65054
// begin vc_chassis := 31 ;
65009: LD_ADDR_OWVAR 37
65013: PUSH
65014: LD_INT 31
65016: ST_TO_ADDR
// vc_control := control_rider ;
65017: LD_ADDR_OWVAR 38
65021: PUSH
65022: LD_INT 4
65024: ST_TO_ADDR
// animal := CreateVehicle ;
65025: LD_ADDR_VAR 0 12
65029: PUSH
65030: CALL_OW 45
65034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65035: LD_VAR 0 12
65039: PPUSH
65040: LD_VAR 0 8
65044: PPUSH
65045: LD_INT 0
65047: PPUSH
65048: CALL 67184 0 3
// end ;
65052: GO 65006
65054: POP
65055: POP
// if horses then
65056: LD_VAR 0 5
65060: IFFALSE 65127
// for i = 1 to horses do
65062: LD_ADDR_VAR 0 11
65066: PUSH
65067: DOUBLE
65068: LD_INT 1
65070: DEC
65071: ST_TO_ADDR
65072: LD_VAR 0 5
65076: PUSH
65077: FOR_TO
65078: IFFALSE 65125
// begin hc_class := 21 ;
65080: LD_ADDR_OWVAR 28
65084: PUSH
65085: LD_INT 21
65087: ST_TO_ADDR
// hc_gallery :=  ;
65088: LD_ADDR_OWVAR 33
65092: PUSH
65093: LD_STRING 
65095: ST_TO_ADDR
// animal := CreateHuman ;
65096: LD_ADDR_VAR 0 12
65100: PUSH
65101: CALL_OW 44
65105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65106: LD_VAR 0 12
65110: PPUSH
65111: LD_VAR 0 8
65115: PPUSH
65116: LD_INT 0
65118: PPUSH
65119: CALL 67184 0 3
// end ;
65123: GO 65077
65125: POP
65126: POP
// if birds then
65127: LD_VAR 0 1
65131: IFFALSE 65198
// for i = 1 to birds do
65133: LD_ADDR_VAR 0 11
65137: PUSH
65138: DOUBLE
65139: LD_INT 1
65141: DEC
65142: ST_TO_ADDR
65143: LD_VAR 0 1
65147: PUSH
65148: FOR_TO
65149: IFFALSE 65196
// begin hc_class = 18 ;
65151: LD_ADDR_OWVAR 28
65155: PUSH
65156: LD_INT 18
65158: ST_TO_ADDR
// hc_gallery =  ;
65159: LD_ADDR_OWVAR 33
65163: PUSH
65164: LD_STRING 
65166: ST_TO_ADDR
// animal := CreateHuman ;
65167: LD_ADDR_VAR 0 12
65171: PUSH
65172: CALL_OW 44
65176: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65177: LD_VAR 0 12
65181: PPUSH
65182: LD_VAR 0 8
65186: PPUSH
65187: LD_INT 0
65189: PPUSH
65190: CALL 67184 0 3
// end ;
65194: GO 65148
65196: POP
65197: POP
// if tigers then
65198: LD_VAR 0 2
65202: IFFALSE 65286
// for i = 1 to tigers do
65204: LD_ADDR_VAR 0 11
65208: PUSH
65209: DOUBLE
65210: LD_INT 1
65212: DEC
65213: ST_TO_ADDR
65214: LD_VAR 0 2
65218: PUSH
65219: FOR_TO
65220: IFFALSE 65284
// begin hc_class = class_tiger ;
65222: LD_ADDR_OWVAR 28
65226: PUSH
65227: LD_INT 14
65229: ST_TO_ADDR
// hc_gallery =  ;
65230: LD_ADDR_OWVAR 33
65234: PUSH
65235: LD_STRING 
65237: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65238: LD_ADDR_OWVAR 35
65242: PUSH
65243: LD_INT 7
65245: NEG
65246: PPUSH
65247: LD_INT 7
65249: PPUSH
65250: CALL_OW 12
65254: ST_TO_ADDR
// animal := CreateHuman ;
65255: LD_ADDR_VAR 0 12
65259: PUSH
65260: CALL_OW 44
65264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65265: LD_VAR 0 12
65269: PPUSH
65270: LD_VAR 0 8
65274: PPUSH
65275: LD_INT 0
65277: PPUSH
65278: CALL 67184 0 3
// end ;
65282: GO 65219
65284: POP
65285: POP
// if apemans then
65286: LD_VAR 0 3
65290: IFFALSE 65413
// for i = 1 to apemans do
65292: LD_ADDR_VAR 0 11
65296: PUSH
65297: DOUBLE
65298: LD_INT 1
65300: DEC
65301: ST_TO_ADDR
65302: LD_VAR 0 3
65306: PUSH
65307: FOR_TO
65308: IFFALSE 65411
// begin hc_class = class_apeman ;
65310: LD_ADDR_OWVAR 28
65314: PUSH
65315: LD_INT 12
65317: ST_TO_ADDR
// hc_gallery =  ;
65318: LD_ADDR_OWVAR 33
65322: PUSH
65323: LD_STRING 
65325: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65326: LD_ADDR_OWVAR 35
65330: PUSH
65331: LD_INT 2
65333: NEG
65334: PPUSH
65335: LD_INT 2
65337: PPUSH
65338: CALL_OW 12
65342: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65343: LD_ADDR_OWVAR 31
65347: PUSH
65348: LD_INT 1
65350: PPUSH
65351: LD_INT 3
65353: PPUSH
65354: CALL_OW 12
65358: PUSH
65359: LD_INT 1
65361: PPUSH
65362: LD_INT 3
65364: PPUSH
65365: CALL_OW 12
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: ST_TO_ADDR
// animal := CreateHuman ;
65382: LD_ADDR_VAR 0 12
65386: PUSH
65387: CALL_OW 44
65391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65392: LD_VAR 0 12
65396: PPUSH
65397: LD_VAR 0 8
65401: PPUSH
65402: LD_INT 0
65404: PPUSH
65405: CALL 67184 0 3
// end ;
65409: GO 65307
65411: POP
65412: POP
// if enchidnas then
65413: LD_VAR 0 4
65417: IFFALSE 65484
// for i = 1 to enchidnas do
65419: LD_ADDR_VAR 0 11
65423: PUSH
65424: DOUBLE
65425: LD_INT 1
65427: DEC
65428: ST_TO_ADDR
65429: LD_VAR 0 4
65433: PUSH
65434: FOR_TO
65435: IFFALSE 65482
// begin hc_class = 13 ;
65437: LD_ADDR_OWVAR 28
65441: PUSH
65442: LD_INT 13
65444: ST_TO_ADDR
// hc_gallery =  ;
65445: LD_ADDR_OWVAR 33
65449: PUSH
65450: LD_STRING 
65452: ST_TO_ADDR
// animal := CreateHuman ;
65453: LD_ADDR_VAR 0 12
65457: PUSH
65458: CALL_OW 44
65462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65463: LD_VAR 0 12
65467: PPUSH
65468: LD_VAR 0 8
65472: PPUSH
65473: LD_INT 0
65475: PPUSH
65476: CALL 67184 0 3
// end ;
65480: GO 65434
65482: POP
65483: POP
// if fishes then
65484: LD_VAR 0 7
65488: IFFALSE 65555
// for i = 1 to fishes do
65490: LD_ADDR_VAR 0 11
65494: PUSH
65495: DOUBLE
65496: LD_INT 1
65498: DEC
65499: ST_TO_ADDR
65500: LD_VAR 0 7
65504: PUSH
65505: FOR_TO
65506: IFFALSE 65553
// begin hc_class = 20 ;
65508: LD_ADDR_OWVAR 28
65512: PUSH
65513: LD_INT 20
65515: ST_TO_ADDR
// hc_gallery =  ;
65516: LD_ADDR_OWVAR 33
65520: PUSH
65521: LD_STRING 
65523: ST_TO_ADDR
// animal := CreateHuman ;
65524: LD_ADDR_VAR 0 12
65528: PUSH
65529: CALL_OW 44
65533: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65534: LD_VAR 0 12
65538: PPUSH
65539: LD_VAR 0 9
65543: PPUSH
65544: LD_INT 0
65546: PPUSH
65547: CALL 67184 0 3
// end ;
65551: GO 65505
65553: POP
65554: POP
// end ;
65555: LD_VAR 0 10
65559: RET
// export function WantHeal ( sci , unit ) ; begin
65560: LD_INT 0
65562: PPUSH
// if GetTaskList ( sci ) > 0 then
65563: LD_VAR 0 1
65567: PPUSH
65568: CALL_OW 437
65572: PUSH
65573: LD_INT 0
65575: GREATER
65576: IFFALSE 65646
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65578: LD_VAR 0 1
65582: PPUSH
65583: CALL_OW 437
65587: PUSH
65588: LD_INT 1
65590: ARRAY
65591: PUSH
65592: LD_INT 1
65594: ARRAY
65595: PUSH
65596: LD_STRING l
65598: EQUAL
65599: PUSH
65600: LD_VAR 0 1
65604: PPUSH
65605: CALL_OW 437
65609: PUSH
65610: LD_INT 1
65612: ARRAY
65613: PUSH
65614: LD_INT 4
65616: ARRAY
65617: PUSH
65618: LD_VAR 0 2
65622: EQUAL
65623: AND
65624: IFFALSE 65636
// result := true else
65626: LD_ADDR_VAR 0 3
65630: PUSH
65631: LD_INT 1
65633: ST_TO_ADDR
65634: GO 65644
// result := false ;
65636: LD_ADDR_VAR 0 3
65640: PUSH
65641: LD_INT 0
65643: ST_TO_ADDR
// end else
65644: GO 65654
// result := false ;
65646: LD_ADDR_VAR 0 3
65650: PUSH
65651: LD_INT 0
65653: ST_TO_ADDR
// end ;
65654: LD_VAR 0 3
65658: RET
// export function HealTarget ( sci ) ; begin
65659: LD_INT 0
65661: PPUSH
// if not sci then
65662: LD_VAR 0 1
65666: NOT
65667: IFFALSE 65671
// exit ;
65669: GO 65736
// result := 0 ;
65671: LD_ADDR_VAR 0 2
65675: PUSH
65676: LD_INT 0
65678: ST_TO_ADDR
// if GetTaskList ( sci ) then
65679: LD_VAR 0 1
65683: PPUSH
65684: CALL_OW 437
65688: IFFALSE 65736
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65690: LD_VAR 0 1
65694: PPUSH
65695: CALL_OW 437
65699: PUSH
65700: LD_INT 1
65702: ARRAY
65703: PUSH
65704: LD_INT 1
65706: ARRAY
65707: PUSH
65708: LD_STRING l
65710: EQUAL
65711: IFFALSE 65736
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65713: LD_ADDR_VAR 0 2
65717: PUSH
65718: LD_VAR 0 1
65722: PPUSH
65723: CALL_OW 437
65727: PUSH
65728: LD_INT 1
65730: ARRAY
65731: PUSH
65732: LD_INT 4
65734: ARRAY
65735: ST_TO_ADDR
// end ;
65736: LD_VAR 0 2
65740: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65741: LD_INT 0
65743: PPUSH
65744: PPUSH
65745: PPUSH
65746: PPUSH
// if not base_units then
65747: LD_VAR 0 1
65751: NOT
65752: IFFALSE 65756
// exit ;
65754: GO 65843
// result := false ;
65756: LD_ADDR_VAR 0 2
65760: PUSH
65761: LD_INT 0
65763: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65764: LD_ADDR_VAR 0 5
65768: PUSH
65769: LD_VAR 0 1
65773: PPUSH
65774: LD_INT 21
65776: PUSH
65777: LD_INT 3
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PPUSH
65784: CALL_OW 72
65788: ST_TO_ADDR
// if not tmp then
65789: LD_VAR 0 5
65793: NOT
65794: IFFALSE 65798
// exit ;
65796: GO 65843
// for i in tmp do
65798: LD_ADDR_VAR 0 3
65802: PUSH
65803: LD_VAR 0 5
65807: PUSH
65808: FOR_IN
65809: IFFALSE 65841
// begin result := EnemyInRange ( i , 22 ) ;
65811: LD_ADDR_VAR 0 2
65815: PUSH
65816: LD_VAR 0 3
65820: PPUSH
65821: LD_INT 22
65823: PPUSH
65824: CALL 63430 0 2
65828: ST_TO_ADDR
// if result then
65829: LD_VAR 0 2
65833: IFFALSE 65839
// exit ;
65835: POP
65836: POP
65837: GO 65843
// end ;
65839: GO 65808
65841: POP
65842: POP
// end ;
65843: LD_VAR 0 2
65847: RET
// export function FilterByTag ( units , tag ) ; begin
65848: LD_INT 0
65850: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65851: LD_ADDR_VAR 0 3
65855: PUSH
65856: LD_VAR 0 1
65860: PPUSH
65861: LD_INT 120
65863: PUSH
65864: LD_VAR 0 2
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PPUSH
65873: CALL_OW 72
65877: ST_TO_ADDR
// end ;
65878: LD_VAR 0 3
65882: RET
// export function IsDriver ( un ) ; begin
65883: LD_INT 0
65885: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65886: LD_ADDR_VAR 0 2
65890: PUSH
65891: LD_VAR 0 1
65895: PUSH
65896: LD_INT 55
65898: PUSH
65899: EMPTY
65900: LIST
65901: PPUSH
65902: CALL_OW 69
65906: IN
65907: ST_TO_ADDR
// end ;
65908: LD_VAR 0 2
65912: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65913: LD_INT 0
65915: PPUSH
65916: PPUSH
// list := [ ] ;
65917: LD_ADDR_VAR 0 5
65921: PUSH
65922: EMPTY
65923: ST_TO_ADDR
// case d of 0 :
65924: LD_VAR 0 3
65928: PUSH
65929: LD_INT 0
65931: DOUBLE
65932: EQUAL
65933: IFTRUE 65937
65935: GO 66070
65937: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65938: LD_ADDR_VAR 0 5
65942: PUSH
65943: LD_VAR 0 1
65947: PUSH
65948: LD_INT 4
65950: MINUS
65951: PUSH
65952: LD_VAR 0 2
65956: PUSH
65957: LD_INT 4
65959: MINUS
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: PUSH
65969: LD_VAR 0 1
65973: PUSH
65974: LD_INT 3
65976: MINUS
65977: PUSH
65978: LD_VAR 0 2
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: LIST
65990: PUSH
65991: LD_VAR 0 1
65995: PUSH
65996: LD_INT 4
65998: PLUS
65999: PUSH
66000: LD_VAR 0 2
66004: PUSH
66005: LD_INT 4
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: PUSH
66013: LD_VAR 0 1
66017: PUSH
66018: LD_INT 3
66020: PLUS
66021: PUSH
66022: LD_VAR 0 2
66026: PUSH
66027: LD_INT 3
66029: PLUS
66030: PUSH
66031: LD_INT 5
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: PUSH
66039: LD_VAR 0 1
66043: PUSH
66044: LD_VAR 0 2
66048: PUSH
66049: LD_INT 4
66051: PLUS
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: ST_TO_ADDR
// end ; 1 :
66068: GO 66768
66070: LD_INT 1
66072: DOUBLE
66073: EQUAL
66074: IFTRUE 66078
66076: GO 66211
66078: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66079: LD_ADDR_VAR 0 5
66083: PUSH
66084: LD_VAR 0 1
66088: PUSH
66089: LD_VAR 0 2
66093: PUSH
66094: LD_INT 4
66096: MINUS
66097: PUSH
66098: LD_INT 3
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: LIST
66105: PUSH
66106: LD_VAR 0 1
66110: PUSH
66111: LD_INT 3
66113: MINUS
66114: PUSH
66115: LD_VAR 0 2
66119: PUSH
66120: LD_INT 3
66122: MINUS
66123: PUSH
66124: LD_INT 2
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: LIST
66131: PUSH
66132: LD_VAR 0 1
66136: PUSH
66137: LD_INT 4
66139: MINUS
66140: PUSH
66141: LD_VAR 0 2
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: LIST
66153: PUSH
66154: LD_VAR 0 1
66158: PUSH
66159: LD_VAR 0 2
66163: PUSH
66164: LD_INT 3
66166: PLUS
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: PUSH
66176: LD_VAR 0 1
66180: PUSH
66181: LD_INT 4
66183: PLUS
66184: PUSH
66185: LD_VAR 0 2
66189: PUSH
66190: LD_INT 4
66192: PLUS
66193: PUSH
66194: LD_INT 5
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// end ; 2 :
66209: GO 66768
66211: LD_INT 2
66213: DOUBLE
66214: EQUAL
66215: IFTRUE 66219
66217: GO 66348
66219: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66220: LD_ADDR_VAR 0 5
66224: PUSH
66225: LD_VAR 0 1
66229: PUSH
66230: LD_VAR 0 2
66234: PUSH
66235: LD_INT 3
66237: MINUS
66238: PUSH
66239: LD_INT 3
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: LIST
66246: PUSH
66247: LD_VAR 0 1
66251: PUSH
66252: LD_INT 4
66254: PLUS
66255: PUSH
66256: LD_VAR 0 2
66260: PUSH
66261: LD_INT 4
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: PUSH
66269: LD_VAR 0 1
66273: PUSH
66274: LD_VAR 0 2
66278: PUSH
66279: LD_INT 4
66281: PLUS
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: LIST
66290: PUSH
66291: LD_VAR 0 1
66295: PUSH
66296: LD_INT 3
66298: MINUS
66299: PUSH
66300: LD_VAR 0 2
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: PUSH
66313: LD_VAR 0 1
66317: PUSH
66318: LD_INT 4
66320: MINUS
66321: PUSH
66322: LD_VAR 0 2
66326: PUSH
66327: LD_INT 4
66329: MINUS
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: ST_TO_ADDR
// end ; 3 :
66346: GO 66768
66348: LD_INT 3
66350: DOUBLE
66351: EQUAL
66352: IFTRUE 66356
66354: GO 66489
66356: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66357: LD_ADDR_VAR 0 5
66361: PUSH
66362: LD_VAR 0 1
66366: PUSH
66367: LD_INT 3
66369: PLUS
66370: PUSH
66371: LD_VAR 0 2
66375: PUSH
66376: LD_INT 4
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: PUSH
66384: LD_VAR 0 1
66388: PUSH
66389: LD_INT 4
66391: PLUS
66392: PUSH
66393: LD_VAR 0 2
66397: PUSH
66398: LD_INT 4
66400: PLUS
66401: PUSH
66402: LD_INT 5
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: LIST
66409: PUSH
66410: LD_VAR 0 1
66414: PUSH
66415: LD_INT 4
66417: MINUS
66418: PUSH
66419: LD_VAR 0 2
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: LIST
66431: PUSH
66432: LD_VAR 0 1
66436: PUSH
66437: LD_VAR 0 2
66441: PUSH
66442: LD_INT 4
66444: MINUS
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: LIST
66453: PUSH
66454: LD_VAR 0 1
66458: PUSH
66459: LD_INT 3
66461: MINUS
66462: PUSH
66463: LD_VAR 0 2
66467: PUSH
66468: LD_INT 3
66470: MINUS
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: ST_TO_ADDR
// end ; 4 :
66487: GO 66768
66489: LD_INT 4
66491: DOUBLE
66492: EQUAL
66493: IFTRUE 66497
66495: GO 66630
66497: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66498: LD_ADDR_VAR 0 5
66502: PUSH
66503: LD_VAR 0 1
66507: PUSH
66508: LD_VAR 0 2
66512: PUSH
66513: LD_INT 4
66515: PLUS
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: PUSH
66525: LD_VAR 0 1
66529: PUSH
66530: LD_INT 3
66532: PLUS
66533: PUSH
66534: LD_VAR 0 2
66538: PUSH
66539: LD_INT 3
66541: PLUS
66542: PUSH
66543: LD_INT 5
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: LIST
66550: PUSH
66551: LD_VAR 0 1
66555: PUSH
66556: LD_INT 4
66558: PLUS
66559: PUSH
66560: LD_VAR 0 2
66564: PUSH
66565: LD_INT 4
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: LIST
66572: PUSH
66573: LD_VAR 0 1
66577: PUSH
66578: LD_VAR 0 2
66582: PUSH
66583: LD_INT 3
66585: MINUS
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: PUSH
66595: LD_VAR 0 1
66599: PUSH
66600: LD_INT 4
66602: MINUS
66603: PUSH
66604: LD_VAR 0 2
66608: PUSH
66609: LD_INT 4
66611: MINUS
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: ST_TO_ADDR
// end ; 5 :
66628: GO 66768
66630: LD_INT 5
66632: DOUBLE
66633: EQUAL
66634: IFTRUE 66638
66636: GO 66767
66638: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66639: LD_ADDR_VAR 0 5
66643: PUSH
66644: LD_VAR 0 1
66648: PUSH
66649: LD_INT 4
66651: MINUS
66652: PUSH
66653: LD_VAR 0 2
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: LIST
66665: PUSH
66666: LD_VAR 0 1
66670: PUSH
66671: LD_VAR 0 2
66675: PUSH
66676: LD_INT 4
66678: MINUS
66679: PUSH
66680: LD_INT 3
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: LIST
66687: PUSH
66688: LD_VAR 0 1
66692: PUSH
66693: LD_INT 4
66695: PLUS
66696: PUSH
66697: LD_VAR 0 2
66701: PUSH
66702: LD_INT 4
66704: PLUS
66705: PUSH
66706: LD_INT 5
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: LIST
66713: PUSH
66714: LD_VAR 0 1
66718: PUSH
66719: LD_INT 3
66721: PLUS
66722: PUSH
66723: LD_VAR 0 2
66727: PUSH
66728: LD_INT 4
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: PUSH
66736: LD_VAR 0 1
66740: PUSH
66741: LD_VAR 0 2
66745: PUSH
66746: LD_INT 3
66748: PLUS
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: ST_TO_ADDR
// end ; end ;
66765: GO 66768
66767: POP
// result := list ;
66768: LD_ADDR_VAR 0 4
66772: PUSH
66773: LD_VAR 0 5
66777: ST_TO_ADDR
// end ;
66778: LD_VAR 0 4
66782: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66783: LD_INT 0
66785: PPUSH
66786: PPUSH
66787: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66788: LD_VAR 0 1
66792: NOT
66793: PUSH
66794: LD_VAR 0 2
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: LD_INT 3
66807: PUSH
66808: LD_INT 4
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: IN
66817: NOT
66818: OR
66819: IFFALSE 66823
// exit ;
66821: GO 66906
// tmp := [ ] ;
66823: LD_ADDR_VAR 0 5
66827: PUSH
66828: EMPTY
66829: ST_TO_ADDR
// for i in units do
66830: LD_ADDR_VAR 0 4
66834: PUSH
66835: LD_VAR 0 1
66839: PUSH
66840: FOR_IN
66841: IFFALSE 66875
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66843: LD_ADDR_VAR 0 5
66847: PUSH
66848: LD_VAR 0 5
66852: PPUSH
66853: LD_VAR 0 4
66857: PPUSH
66858: LD_VAR 0 2
66862: PPUSH
66863: CALL_OW 259
66867: PPUSH
66868: CALL 68267 0 2
66872: ST_TO_ADDR
66873: GO 66840
66875: POP
66876: POP
// if not tmp then
66877: LD_VAR 0 5
66881: NOT
66882: IFFALSE 66886
// exit ;
66884: GO 66906
// result := SortListByListDesc ( units , tmp ) ;
66886: LD_ADDR_VAR 0 3
66890: PUSH
66891: LD_VAR 0 1
66895: PPUSH
66896: LD_VAR 0 5
66900: PPUSH
66901: CALL_OW 77
66905: ST_TO_ADDR
// end ;
66906: LD_VAR 0 3
66910: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66911: LD_INT 0
66913: PPUSH
66914: PPUSH
66915: PPUSH
// result := false ;
66916: LD_ADDR_VAR 0 3
66920: PUSH
66921: LD_INT 0
66923: ST_TO_ADDR
// if not building then
66924: LD_VAR 0 2
66928: NOT
66929: IFFALSE 66933
// exit ;
66931: GO 67071
// x := GetX ( building ) ;
66933: LD_ADDR_VAR 0 4
66937: PUSH
66938: LD_VAR 0 2
66942: PPUSH
66943: CALL_OW 250
66947: ST_TO_ADDR
// y := GetY ( building ) ;
66948: LD_ADDR_VAR 0 5
66952: PUSH
66953: LD_VAR 0 2
66957: PPUSH
66958: CALL_OW 251
66962: ST_TO_ADDR
// if not x or not y then
66963: LD_VAR 0 4
66967: NOT
66968: PUSH
66969: LD_VAR 0 5
66973: NOT
66974: OR
66975: IFFALSE 66979
// exit ;
66977: GO 67071
// if GetTaskList ( unit ) then
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 437
66988: IFFALSE 67071
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66990: LD_STRING e
66992: PUSH
66993: LD_VAR 0 1
66997: PPUSH
66998: CALL_OW 437
67002: PUSH
67003: LD_INT 1
67005: ARRAY
67006: PUSH
67007: LD_INT 1
67009: ARRAY
67010: EQUAL
67011: PUSH
67012: LD_VAR 0 4
67016: PUSH
67017: LD_VAR 0 1
67021: PPUSH
67022: CALL_OW 437
67026: PUSH
67027: LD_INT 1
67029: ARRAY
67030: PUSH
67031: LD_INT 2
67033: ARRAY
67034: EQUAL
67035: AND
67036: PUSH
67037: LD_VAR 0 5
67041: PUSH
67042: LD_VAR 0 1
67046: PPUSH
67047: CALL_OW 437
67051: PUSH
67052: LD_INT 1
67054: ARRAY
67055: PUSH
67056: LD_INT 3
67058: ARRAY
67059: EQUAL
67060: AND
67061: IFFALSE 67071
// result := true end ;
67063: LD_ADDR_VAR 0 3
67067: PUSH
67068: LD_INT 1
67070: ST_TO_ADDR
// end ;
67071: LD_VAR 0 3
67075: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67076: LD_INT 0
67078: PPUSH
// result := false ;
67079: LD_ADDR_VAR 0 4
67083: PUSH
67084: LD_INT 0
67086: ST_TO_ADDR
// if GetTaskList ( unit ) then
67087: LD_VAR 0 1
67091: PPUSH
67092: CALL_OW 437
67096: IFFALSE 67179
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67098: LD_STRING M
67100: PUSH
67101: LD_VAR 0 1
67105: PPUSH
67106: CALL_OW 437
67110: PUSH
67111: LD_INT 1
67113: ARRAY
67114: PUSH
67115: LD_INT 1
67117: ARRAY
67118: EQUAL
67119: PUSH
67120: LD_VAR 0 2
67124: PUSH
67125: LD_VAR 0 1
67129: PPUSH
67130: CALL_OW 437
67134: PUSH
67135: LD_INT 1
67137: ARRAY
67138: PUSH
67139: LD_INT 2
67141: ARRAY
67142: EQUAL
67143: AND
67144: PUSH
67145: LD_VAR 0 3
67149: PUSH
67150: LD_VAR 0 1
67154: PPUSH
67155: CALL_OW 437
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PUSH
67164: LD_INT 3
67166: ARRAY
67167: EQUAL
67168: AND
67169: IFFALSE 67179
// result := true ;
67171: LD_ADDR_VAR 0 4
67175: PUSH
67176: LD_INT 1
67178: ST_TO_ADDR
// end ; end ;
67179: LD_VAR 0 4
67183: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67184: LD_INT 0
67186: PPUSH
67187: PPUSH
67188: PPUSH
67189: PPUSH
// if not unit or not area then
67190: LD_VAR 0 1
67194: NOT
67195: PUSH
67196: LD_VAR 0 2
67200: NOT
67201: OR
67202: IFFALSE 67206
// exit ;
67204: GO 67370
// tmp := AreaToList ( area , i ) ;
67206: LD_ADDR_VAR 0 6
67210: PUSH
67211: LD_VAR 0 2
67215: PPUSH
67216: LD_VAR 0 5
67220: PPUSH
67221: CALL_OW 517
67225: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67226: LD_ADDR_VAR 0 5
67230: PUSH
67231: DOUBLE
67232: LD_INT 1
67234: DEC
67235: ST_TO_ADDR
67236: LD_VAR 0 6
67240: PUSH
67241: LD_INT 1
67243: ARRAY
67244: PUSH
67245: FOR_TO
67246: IFFALSE 67368
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67248: LD_ADDR_VAR 0 7
67252: PUSH
67253: LD_VAR 0 6
67257: PUSH
67258: LD_INT 1
67260: ARRAY
67261: PUSH
67262: LD_VAR 0 5
67266: ARRAY
67267: PUSH
67268: LD_VAR 0 6
67272: PUSH
67273: LD_INT 2
67275: ARRAY
67276: PUSH
67277: LD_VAR 0 5
67281: ARRAY
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67287: LD_VAR 0 7
67291: PUSH
67292: LD_INT 1
67294: ARRAY
67295: PPUSH
67296: LD_VAR 0 7
67300: PUSH
67301: LD_INT 2
67303: ARRAY
67304: PPUSH
67305: CALL_OW 428
67309: PUSH
67310: LD_INT 0
67312: EQUAL
67313: IFFALSE 67366
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67315: LD_VAR 0 1
67319: PPUSH
67320: LD_VAR 0 7
67324: PUSH
67325: LD_INT 1
67327: ARRAY
67328: PPUSH
67329: LD_VAR 0 7
67333: PUSH
67334: LD_INT 2
67336: ARRAY
67337: PPUSH
67338: LD_VAR 0 3
67342: PPUSH
67343: CALL_OW 48
// result := IsPlaced ( unit ) ;
67347: LD_ADDR_VAR 0 4
67351: PUSH
67352: LD_VAR 0 1
67356: PPUSH
67357: CALL_OW 305
67361: ST_TO_ADDR
// exit ;
67362: POP
67363: POP
67364: GO 67370
// end ; end ;
67366: GO 67245
67368: POP
67369: POP
// end ;
67370: LD_VAR 0 4
67374: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67375: LD_INT 0
67377: PPUSH
67378: PPUSH
67379: PPUSH
// if not side or side > 8 then
67380: LD_VAR 0 1
67384: NOT
67385: PUSH
67386: LD_VAR 0 1
67390: PUSH
67391: LD_INT 8
67393: GREATER
67394: OR
67395: IFFALSE 67399
// exit ;
67397: GO 67586
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67399: LD_ADDR_VAR 0 4
67403: PUSH
67404: LD_INT 22
67406: PUSH
67407: LD_VAR 0 1
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 21
67418: PUSH
67419: LD_INT 3
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PPUSH
67430: CALL_OW 69
67434: ST_TO_ADDR
// if not tmp then
67435: LD_VAR 0 4
67439: NOT
67440: IFFALSE 67444
// exit ;
67442: GO 67586
// enable_addtolog := true ;
67444: LD_ADDR_OWVAR 81
67448: PUSH
67449: LD_INT 1
67451: ST_TO_ADDR
// AddToLog ( [ ) ;
67452: LD_STRING [
67454: PPUSH
67455: CALL_OW 561
// for i in tmp do
67459: LD_ADDR_VAR 0 3
67463: PUSH
67464: LD_VAR 0 4
67468: PUSH
67469: FOR_IN
67470: IFFALSE 67577
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67472: LD_STRING [
67474: PUSH
67475: LD_VAR 0 3
67479: PPUSH
67480: CALL_OW 266
67484: STR
67485: PUSH
67486: LD_STRING , 
67488: STR
67489: PUSH
67490: LD_VAR 0 3
67494: PPUSH
67495: CALL_OW 250
67499: STR
67500: PUSH
67501: LD_STRING , 
67503: STR
67504: PUSH
67505: LD_VAR 0 3
67509: PPUSH
67510: CALL_OW 251
67514: STR
67515: PUSH
67516: LD_STRING , 
67518: STR
67519: PUSH
67520: LD_VAR 0 3
67524: PPUSH
67525: CALL_OW 254
67529: STR
67530: PUSH
67531: LD_STRING , 
67533: STR
67534: PUSH
67535: LD_VAR 0 3
67539: PPUSH
67540: LD_INT 1
67542: PPUSH
67543: CALL_OW 268
67547: STR
67548: PUSH
67549: LD_STRING , 
67551: STR
67552: PUSH
67553: LD_VAR 0 3
67557: PPUSH
67558: LD_INT 2
67560: PPUSH
67561: CALL_OW 268
67565: STR
67566: PUSH
67567: LD_STRING ],
67569: STR
67570: PPUSH
67571: CALL_OW 561
// end ;
67575: GO 67469
67577: POP
67578: POP
// AddToLog ( ]; ) ;
67579: LD_STRING ];
67581: PPUSH
67582: CALL_OW 561
// end ;
67586: LD_VAR 0 2
67590: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67591: LD_INT 0
67593: PPUSH
67594: PPUSH
67595: PPUSH
67596: PPUSH
67597: PPUSH
// if not area or not rate or not max then
67598: LD_VAR 0 1
67602: NOT
67603: PUSH
67604: LD_VAR 0 2
67608: NOT
67609: OR
67610: PUSH
67611: LD_VAR 0 4
67615: NOT
67616: OR
67617: IFFALSE 67621
// exit ;
67619: GO 67810
// while 1 do
67621: LD_INT 1
67623: IFFALSE 67810
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67625: LD_ADDR_VAR 0 9
67629: PUSH
67630: LD_VAR 0 1
67634: PPUSH
67635: LD_INT 1
67637: PPUSH
67638: CALL_OW 287
67642: PUSH
67643: LD_INT 10
67645: MUL
67646: ST_TO_ADDR
// r := rate / 10 ;
67647: LD_ADDR_VAR 0 7
67651: PUSH
67652: LD_VAR 0 2
67656: PUSH
67657: LD_INT 10
67659: DIVREAL
67660: ST_TO_ADDR
// time := 1 1$00 ;
67661: LD_ADDR_VAR 0 8
67665: PUSH
67666: LD_INT 2100
67668: ST_TO_ADDR
// if amount < min then
67669: LD_VAR 0 9
67673: PUSH
67674: LD_VAR 0 3
67678: LESS
67679: IFFALSE 67697
// r := r * 2 else
67681: LD_ADDR_VAR 0 7
67685: PUSH
67686: LD_VAR 0 7
67690: PUSH
67691: LD_INT 2
67693: MUL
67694: ST_TO_ADDR
67695: GO 67723
// if amount > max then
67697: LD_VAR 0 9
67701: PUSH
67702: LD_VAR 0 4
67706: GREATER
67707: IFFALSE 67723
// r := r / 2 ;
67709: LD_ADDR_VAR 0 7
67713: PUSH
67714: LD_VAR 0 7
67718: PUSH
67719: LD_INT 2
67721: DIVREAL
67722: ST_TO_ADDR
// time := time / r ;
67723: LD_ADDR_VAR 0 8
67727: PUSH
67728: LD_VAR 0 8
67732: PUSH
67733: LD_VAR 0 7
67737: DIVREAL
67738: ST_TO_ADDR
// if time < 0 then
67739: LD_VAR 0 8
67743: PUSH
67744: LD_INT 0
67746: LESS
67747: IFFALSE 67764
// time := time * - 1 ;
67749: LD_ADDR_VAR 0 8
67753: PUSH
67754: LD_VAR 0 8
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: MUL
67763: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67764: LD_VAR 0 8
67768: PUSH
67769: LD_INT 35
67771: PPUSH
67772: LD_INT 875
67774: PPUSH
67775: CALL_OW 12
67779: PLUS
67780: PPUSH
67781: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67785: LD_INT 1
67787: PPUSH
67788: LD_INT 5
67790: PPUSH
67791: CALL_OW 12
67795: PPUSH
67796: LD_VAR 0 1
67800: PPUSH
67801: LD_INT 1
67803: PPUSH
67804: CALL_OW 55
// end ;
67808: GO 67621
// end ;
67810: LD_VAR 0 5
67814: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67815: LD_INT 0
67817: PPUSH
67818: PPUSH
67819: PPUSH
67820: PPUSH
67821: PPUSH
67822: PPUSH
67823: PPUSH
67824: PPUSH
// if not turrets or not factories then
67825: LD_VAR 0 1
67829: NOT
67830: PUSH
67831: LD_VAR 0 2
67835: NOT
67836: OR
67837: IFFALSE 67841
// exit ;
67839: GO 68148
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67841: LD_ADDR_VAR 0 10
67845: PUSH
67846: LD_INT 5
67848: PUSH
67849: LD_INT 6
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 2
67858: PUSH
67859: LD_INT 4
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: LD_INT 5
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 24
67883: PUSH
67884: LD_INT 25
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 23
67893: PUSH
67894: LD_INT 27
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 42
67907: PUSH
67908: LD_INT 43
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 44
67917: PUSH
67918: LD_INT 46
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 45
67927: PUSH
67928: LD_INT 47
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: LIST
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: ST_TO_ADDR
// result := [ ] ;
67945: LD_ADDR_VAR 0 3
67949: PUSH
67950: EMPTY
67951: ST_TO_ADDR
// for i in turrets do
67952: LD_ADDR_VAR 0 4
67956: PUSH
67957: LD_VAR 0 1
67961: PUSH
67962: FOR_IN
67963: IFFALSE 68146
// begin nat := GetNation ( i ) ;
67965: LD_ADDR_VAR 0 7
67969: PUSH
67970: LD_VAR 0 4
67974: PPUSH
67975: CALL_OW 248
67979: ST_TO_ADDR
// weapon := 0 ;
67980: LD_ADDR_VAR 0 8
67984: PUSH
67985: LD_INT 0
67987: ST_TO_ADDR
// if not nat then
67988: LD_VAR 0 7
67992: NOT
67993: IFFALSE 67997
// continue ;
67995: GO 67962
// for j in list [ nat ] do
67997: LD_ADDR_VAR 0 5
68001: PUSH
68002: LD_VAR 0 10
68006: PUSH
68007: LD_VAR 0 7
68011: ARRAY
68012: PUSH
68013: FOR_IN
68014: IFFALSE 68055
// if GetBWeapon ( i ) = j [ 1 ] then
68016: LD_VAR 0 4
68020: PPUSH
68021: CALL_OW 269
68025: PUSH
68026: LD_VAR 0 5
68030: PUSH
68031: LD_INT 1
68033: ARRAY
68034: EQUAL
68035: IFFALSE 68053
// begin weapon := j [ 2 ] ;
68037: LD_ADDR_VAR 0 8
68041: PUSH
68042: LD_VAR 0 5
68046: PUSH
68047: LD_INT 2
68049: ARRAY
68050: ST_TO_ADDR
// break ;
68051: GO 68055
// end ;
68053: GO 68013
68055: POP
68056: POP
// if not weapon then
68057: LD_VAR 0 8
68061: NOT
68062: IFFALSE 68066
// continue ;
68064: GO 67962
// for k in factories do
68066: LD_ADDR_VAR 0 6
68070: PUSH
68071: LD_VAR 0 2
68075: PUSH
68076: FOR_IN
68077: IFFALSE 68142
// begin weapons := AvailableWeaponList ( k ) ;
68079: LD_ADDR_VAR 0 9
68083: PUSH
68084: LD_VAR 0 6
68088: PPUSH
68089: CALL_OW 478
68093: ST_TO_ADDR
// if not weapons then
68094: LD_VAR 0 9
68098: NOT
68099: IFFALSE 68103
// continue ;
68101: GO 68076
// if weapon in weapons then
68103: LD_VAR 0 8
68107: PUSH
68108: LD_VAR 0 9
68112: IN
68113: IFFALSE 68140
// begin result := [ i , weapon ] ;
68115: LD_ADDR_VAR 0 3
68119: PUSH
68120: LD_VAR 0 4
68124: PUSH
68125: LD_VAR 0 8
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: ST_TO_ADDR
// exit ;
68134: POP
68135: POP
68136: POP
68137: POP
68138: GO 68148
// end ; end ;
68140: GO 68076
68142: POP
68143: POP
// end ;
68144: GO 67962
68146: POP
68147: POP
// end ;
68148: LD_VAR 0 3
68152: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68153: LD_INT 0
68155: PPUSH
// if not side or side > 8 then
68156: LD_VAR 0 3
68160: NOT
68161: PUSH
68162: LD_VAR 0 3
68166: PUSH
68167: LD_INT 8
68169: GREATER
68170: OR
68171: IFFALSE 68175
// exit ;
68173: GO 68234
// if not range then
68175: LD_VAR 0 4
68179: NOT
68180: IFFALSE 68191
// range := - 12 ;
68182: LD_ADDR_VAR 0 4
68186: PUSH
68187: LD_INT 12
68189: NEG
68190: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68191: LD_VAR 0 1
68195: PPUSH
68196: LD_VAR 0 2
68200: PPUSH
68201: LD_VAR 0 3
68205: PPUSH
68206: LD_VAR 0 4
68210: PPUSH
68211: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68215: LD_VAR 0 1
68219: PPUSH
68220: LD_VAR 0 2
68224: PPUSH
68225: LD_VAR 0 3
68229: PPUSH
68230: CALL_OW 331
// end ;
68234: LD_VAR 0 5
68238: RET
// export function Video ( mode ) ; begin
68239: LD_INT 0
68241: PPUSH
// ingame_video = mode ;
68242: LD_ADDR_OWVAR 52
68246: PUSH
68247: LD_VAR 0 1
68251: ST_TO_ADDR
// interface_hidden = mode ;
68252: LD_ADDR_OWVAR 54
68256: PUSH
68257: LD_VAR 0 1
68261: ST_TO_ADDR
// end ;
68262: LD_VAR 0 2
68266: RET
// export function Join ( array , element ) ; begin
68267: LD_INT 0
68269: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68270: LD_ADDR_VAR 0 3
68274: PUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: LD_VAR 0 1
68284: PUSH
68285: LD_INT 1
68287: PLUS
68288: PPUSH
68289: LD_VAR 0 2
68293: PPUSH
68294: CALL_OW 1
68298: ST_TO_ADDR
// end ;
68299: LD_VAR 0 3
68303: RET
// export function JoinUnion ( array , element ) ; begin
68304: LD_INT 0
68306: PPUSH
// result := array union element ;
68307: LD_ADDR_VAR 0 3
68311: PUSH
68312: LD_VAR 0 1
68316: PUSH
68317: LD_VAR 0 2
68321: UNION
68322: ST_TO_ADDR
// end ;
68323: LD_VAR 0 3
68327: RET
// export function GetBehemoths ( side ) ; begin
68328: LD_INT 0
68330: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68331: LD_ADDR_VAR 0 2
68335: PUSH
68336: LD_INT 22
68338: PUSH
68339: LD_VAR 0 1
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 31
68350: PUSH
68351: LD_INT 25
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PPUSH
68362: CALL_OW 69
68366: ST_TO_ADDR
// end ;
68367: LD_VAR 0 2
68371: RET
// export function Shuffle ( array ) ; var i , index ; begin
68372: LD_INT 0
68374: PPUSH
68375: PPUSH
68376: PPUSH
// result := [ ] ;
68377: LD_ADDR_VAR 0 2
68381: PUSH
68382: EMPTY
68383: ST_TO_ADDR
// if not array then
68384: LD_VAR 0 1
68388: NOT
68389: IFFALSE 68393
// exit ;
68391: GO 68492
// Randomize ;
68393: CALL_OW 10
// for i = array downto 1 do
68397: LD_ADDR_VAR 0 3
68401: PUSH
68402: DOUBLE
68403: LD_VAR 0 1
68407: INC
68408: ST_TO_ADDR
68409: LD_INT 1
68411: PUSH
68412: FOR_DOWNTO
68413: IFFALSE 68490
// begin index := rand ( 1 , array ) ;
68415: LD_ADDR_VAR 0 4
68419: PUSH
68420: LD_INT 1
68422: PPUSH
68423: LD_VAR 0 1
68427: PPUSH
68428: CALL_OW 12
68432: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68433: LD_ADDR_VAR 0 2
68437: PUSH
68438: LD_VAR 0 2
68442: PPUSH
68443: LD_VAR 0 2
68447: PUSH
68448: LD_INT 1
68450: PLUS
68451: PPUSH
68452: LD_VAR 0 1
68456: PUSH
68457: LD_VAR 0 4
68461: ARRAY
68462: PPUSH
68463: CALL_OW 2
68467: ST_TO_ADDR
// array := Delete ( array , index ) ;
68468: LD_ADDR_VAR 0 1
68472: PUSH
68473: LD_VAR 0 1
68477: PPUSH
68478: LD_VAR 0 4
68482: PPUSH
68483: CALL_OW 3
68487: ST_TO_ADDR
// end ;
68488: GO 68412
68490: POP
68491: POP
// end ;
68492: LD_VAR 0 2
68496: RET
// export function GetBaseMaterials ( base ) ; begin
68497: LD_INT 0
68499: PPUSH
// result := [ 0 , 0 , 0 ] ;
68500: LD_ADDR_VAR 0 2
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: ST_TO_ADDR
// if not base then
68519: LD_VAR 0 1
68523: NOT
68524: IFFALSE 68528
// exit ;
68526: GO 68577
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68528: LD_ADDR_VAR 0 2
68532: PUSH
68533: LD_VAR 0 1
68537: PPUSH
68538: LD_INT 1
68540: PPUSH
68541: CALL_OW 275
68545: PUSH
68546: LD_VAR 0 1
68550: PPUSH
68551: LD_INT 2
68553: PPUSH
68554: CALL_OW 275
68558: PUSH
68559: LD_VAR 0 1
68563: PPUSH
68564: LD_INT 3
68566: PPUSH
68567: CALL_OW 275
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: ST_TO_ADDR
// end ;
68577: LD_VAR 0 2
68581: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68582: LD_INT 0
68584: PPUSH
68585: PPUSH
// result := array ;
68586: LD_ADDR_VAR 0 3
68590: PUSH
68591: LD_VAR 0 1
68595: ST_TO_ADDR
// if size >= result then
68596: LD_VAR 0 2
68600: PUSH
68601: LD_VAR 0 3
68605: GREATEREQUAL
68606: IFFALSE 68610
// exit ;
68608: GO 68660
// if size then
68610: LD_VAR 0 2
68614: IFFALSE 68660
// for i := array downto size do
68616: LD_ADDR_VAR 0 4
68620: PUSH
68621: DOUBLE
68622: LD_VAR 0 1
68626: INC
68627: ST_TO_ADDR
68628: LD_VAR 0 2
68632: PUSH
68633: FOR_DOWNTO
68634: IFFALSE 68658
// result := Delete ( result , result ) ;
68636: LD_ADDR_VAR 0 3
68640: PUSH
68641: LD_VAR 0 3
68645: PPUSH
68646: LD_VAR 0 3
68650: PPUSH
68651: CALL_OW 3
68655: ST_TO_ADDR
68656: GO 68633
68658: POP
68659: POP
// end ;
68660: LD_VAR 0 3
68664: RET
// export function ComExit ( unit ) ; var tmp ; begin
68665: LD_INT 0
68667: PPUSH
68668: PPUSH
// if not IsInUnit ( unit ) then
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 310
68678: NOT
68679: IFFALSE 68683
// exit ;
68681: GO 68743
// tmp := IsInUnit ( unit ) ;
68683: LD_ADDR_VAR 0 3
68687: PUSH
68688: LD_VAR 0 1
68692: PPUSH
68693: CALL_OW 310
68697: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68698: LD_VAR 0 3
68702: PPUSH
68703: CALL_OW 247
68707: PUSH
68708: LD_INT 2
68710: EQUAL
68711: IFFALSE 68724
// ComExitVehicle ( unit ) else
68713: LD_VAR 0 1
68717: PPUSH
68718: CALL_OW 121
68722: GO 68733
// ComExitBuilding ( unit ) ;
68724: LD_VAR 0 1
68728: PPUSH
68729: CALL_OW 122
// result := tmp ;
68733: LD_ADDR_VAR 0 2
68737: PUSH
68738: LD_VAR 0 3
68742: ST_TO_ADDR
// end ;
68743: LD_VAR 0 2
68747: RET
// export function ComExitAll ( units ) ; var i ; begin
68748: LD_INT 0
68750: PPUSH
68751: PPUSH
// if not units then
68752: LD_VAR 0 1
68756: NOT
68757: IFFALSE 68761
// exit ;
68759: GO 68787
// for i in units do
68761: LD_ADDR_VAR 0 3
68765: PUSH
68766: LD_VAR 0 1
68770: PUSH
68771: FOR_IN
68772: IFFALSE 68785
// ComExit ( i ) ;
68774: LD_VAR 0 3
68778: PPUSH
68779: CALL 68665 0 1
68783: GO 68771
68785: POP
68786: POP
// end ;
68787: LD_VAR 0 2
68791: RET
// export function ResetHc ; begin
68792: LD_INT 0
68794: PPUSH
// InitHc ;
68795: CALL_OW 19
// hc_importance := 0 ;
68799: LD_ADDR_OWVAR 32
68803: PUSH
68804: LD_INT 0
68806: ST_TO_ADDR
// end ;
68807: LD_VAR 0 1
68811: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68812: LD_INT 0
68814: PPUSH
68815: PPUSH
68816: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68817: LD_ADDR_VAR 0 6
68821: PUSH
68822: LD_VAR 0 1
68826: PUSH
68827: LD_VAR 0 3
68831: PLUS
68832: PUSH
68833: LD_INT 2
68835: DIV
68836: ST_TO_ADDR
// if _x < 0 then
68837: LD_VAR 0 6
68841: PUSH
68842: LD_INT 0
68844: LESS
68845: IFFALSE 68862
// _x := _x * - 1 ;
68847: LD_ADDR_VAR 0 6
68851: PUSH
68852: LD_VAR 0 6
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: MUL
68861: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68862: LD_ADDR_VAR 0 7
68866: PUSH
68867: LD_VAR 0 2
68871: PUSH
68872: LD_VAR 0 4
68876: PLUS
68877: PUSH
68878: LD_INT 2
68880: DIV
68881: ST_TO_ADDR
// if _y < 0 then
68882: LD_VAR 0 7
68886: PUSH
68887: LD_INT 0
68889: LESS
68890: IFFALSE 68907
// _y := _y * - 1 ;
68892: LD_ADDR_VAR 0 7
68896: PUSH
68897: LD_VAR 0 7
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: MUL
68906: ST_TO_ADDR
// result := [ _x , _y ] ;
68907: LD_ADDR_VAR 0 5
68911: PUSH
68912: LD_VAR 0 6
68916: PUSH
68917: LD_VAR 0 7
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: ST_TO_ADDR
// end ;
68926: LD_VAR 0 5
68930: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68931: LD_INT 0
68933: PPUSH
68934: PPUSH
68935: PPUSH
68936: PPUSH
// task := GetTaskList ( unit ) ;
68937: LD_ADDR_VAR 0 7
68941: PUSH
68942: LD_VAR 0 1
68946: PPUSH
68947: CALL_OW 437
68951: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68952: LD_VAR 0 7
68956: NOT
68957: PUSH
68958: LD_VAR 0 1
68962: PPUSH
68963: LD_VAR 0 2
68967: PPUSH
68968: CALL_OW 308
68972: NOT
68973: AND
68974: IFFALSE 68978
// exit ;
68976: GO 69096
// if IsInArea ( unit , area ) then
68978: LD_VAR 0 1
68982: PPUSH
68983: LD_VAR 0 2
68987: PPUSH
68988: CALL_OW 308
68992: IFFALSE 69010
// begin ComMoveToArea ( unit , goAway ) ;
68994: LD_VAR 0 1
68998: PPUSH
68999: LD_VAR 0 3
69003: PPUSH
69004: CALL_OW 113
// exit ;
69008: GO 69096
// end ; if task [ 1 ] [ 1 ] <> M then
69010: LD_VAR 0 7
69014: PUSH
69015: LD_INT 1
69017: ARRAY
69018: PUSH
69019: LD_INT 1
69021: ARRAY
69022: PUSH
69023: LD_STRING M
69025: NONEQUAL
69026: IFFALSE 69030
// exit ;
69028: GO 69096
// x := task [ 1 ] [ 2 ] ;
69030: LD_ADDR_VAR 0 5
69034: PUSH
69035: LD_VAR 0 7
69039: PUSH
69040: LD_INT 1
69042: ARRAY
69043: PUSH
69044: LD_INT 2
69046: ARRAY
69047: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69048: LD_ADDR_VAR 0 6
69052: PUSH
69053: LD_VAR 0 7
69057: PUSH
69058: LD_INT 1
69060: ARRAY
69061: PUSH
69062: LD_INT 3
69064: ARRAY
69065: ST_TO_ADDR
// if InArea ( x , y , area ) then
69066: LD_VAR 0 5
69070: PPUSH
69071: LD_VAR 0 6
69075: PPUSH
69076: LD_VAR 0 2
69080: PPUSH
69081: CALL_OW 309
69085: IFFALSE 69096
// ComStop ( unit ) ;
69087: LD_VAR 0 1
69091: PPUSH
69092: CALL_OW 141
// end ;
69096: LD_VAR 0 4
69100: RET
// export function Abs ( value ) ; begin
69101: LD_INT 0
69103: PPUSH
// result := value ;
69104: LD_ADDR_VAR 0 2
69108: PUSH
69109: LD_VAR 0 1
69113: ST_TO_ADDR
// if value < 0 then
69114: LD_VAR 0 1
69118: PUSH
69119: LD_INT 0
69121: LESS
69122: IFFALSE 69139
// result := value * - 1 ;
69124: LD_ADDR_VAR 0 2
69128: PUSH
69129: LD_VAR 0 1
69133: PUSH
69134: LD_INT 1
69136: NEG
69137: MUL
69138: ST_TO_ADDR
// end ;
69139: LD_VAR 0 2
69143: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69144: LD_INT 0
69146: PPUSH
69147: PPUSH
69148: PPUSH
69149: PPUSH
69150: PPUSH
69151: PPUSH
69152: PPUSH
69153: PPUSH
// if not unit or not building then
69154: LD_VAR 0 1
69158: NOT
69159: PUSH
69160: LD_VAR 0 2
69164: NOT
69165: OR
69166: IFFALSE 69170
// exit ;
69168: GO 69396
// x := GetX ( building ) ;
69170: LD_ADDR_VAR 0 4
69174: PUSH
69175: LD_VAR 0 2
69179: PPUSH
69180: CALL_OW 250
69184: ST_TO_ADDR
// y := GetY ( building ) ;
69185: LD_ADDR_VAR 0 6
69189: PUSH
69190: LD_VAR 0 2
69194: PPUSH
69195: CALL_OW 251
69199: ST_TO_ADDR
// d := GetDir ( building ) ;
69200: LD_ADDR_VAR 0 8
69204: PUSH
69205: LD_VAR 0 2
69209: PPUSH
69210: CALL_OW 254
69214: ST_TO_ADDR
// r := 4 ;
69215: LD_ADDR_VAR 0 9
69219: PUSH
69220: LD_INT 4
69222: ST_TO_ADDR
// for i := 1 to 5 do
69223: LD_ADDR_VAR 0 10
69227: PUSH
69228: DOUBLE
69229: LD_INT 1
69231: DEC
69232: ST_TO_ADDR
69233: LD_INT 5
69235: PUSH
69236: FOR_TO
69237: IFFALSE 69394
// begin _x := ShiftX ( x , d , r + i ) ;
69239: LD_ADDR_VAR 0 5
69243: PUSH
69244: LD_VAR 0 4
69248: PPUSH
69249: LD_VAR 0 8
69253: PPUSH
69254: LD_VAR 0 9
69258: PUSH
69259: LD_VAR 0 10
69263: PLUS
69264: PPUSH
69265: CALL_OW 272
69269: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69270: LD_ADDR_VAR 0 7
69274: PUSH
69275: LD_VAR 0 6
69279: PPUSH
69280: LD_VAR 0 8
69284: PPUSH
69285: LD_VAR 0 9
69289: PUSH
69290: LD_VAR 0 10
69294: PLUS
69295: PPUSH
69296: CALL_OW 273
69300: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69301: LD_VAR 0 5
69305: PPUSH
69306: LD_VAR 0 7
69310: PPUSH
69311: CALL_OW 488
69315: PUSH
69316: LD_VAR 0 5
69320: PPUSH
69321: LD_VAR 0 7
69325: PPUSH
69326: CALL_OW 428
69330: PPUSH
69331: CALL_OW 247
69335: PUSH
69336: LD_INT 3
69338: PUSH
69339: LD_INT 2
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: IN
69346: NOT
69347: AND
69348: IFFALSE 69392
// begin ComMoveXY ( unit , _x , _y ) ;
69350: LD_VAR 0 1
69354: PPUSH
69355: LD_VAR 0 5
69359: PPUSH
69360: LD_VAR 0 7
69364: PPUSH
69365: CALL_OW 111
// result := [ _x , _y ] ;
69369: LD_ADDR_VAR 0 3
69373: PUSH
69374: LD_VAR 0 5
69378: PUSH
69379: LD_VAR 0 7
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// exit ;
69388: POP
69389: POP
69390: GO 69396
// end ; end ;
69392: GO 69236
69394: POP
69395: POP
// end ;
69396: LD_VAR 0 3
69400: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69401: LD_INT 0
69403: PPUSH
69404: PPUSH
69405: PPUSH
// result := 0 ;
69406: LD_ADDR_VAR 0 3
69410: PUSH
69411: LD_INT 0
69413: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69414: LD_VAR 0 1
69418: PUSH
69419: LD_INT 0
69421: LESS
69422: PUSH
69423: LD_VAR 0 1
69427: PUSH
69428: LD_INT 8
69430: GREATER
69431: OR
69432: PUSH
69433: LD_VAR 0 2
69437: PUSH
69438: LD_INT 0
69440: LESS
69441: OR
69442: PUSH
69443: LD_VAR 0 2
69447: PUSH
69448: LD_INT 8
69450: GREATER
69451: OR
69452: IFFALSE 69456
// exit ;
69454: GO 69531
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69456: LD_ADDR_VAR 0 4
69460: PUSH
69461: LD_INT 22
69463: PUSH
69464: LD_VAR 0 2
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PPUSH
69473: CALL_OW 69
69477: PUSH
69478: FOR_IN
69479: IFFALSE 69529
// begin un := UnitShoot ( i ) ;
69481: LD_ADDR_VAR 0 5
69485: PUSH
69486: LD_VAR 0 4
69490: PPUSH
69491: CALL_OW 504
69495: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69496: LD_VAR 0 5
69500: PPUSH
69501: CALL_OW 255
69505: PUSH
69506: LD_VAR 0 1
69510: EQUAL
69511: IFFALSE 69527
// begin result := un ;
69513: LD_ADDR_VAR 0 3
69517: PUSH
69518: LD_VAR 0 5
69522: ST_TO_ADDR
// exit ;
69523: POP
69524: POP
69525: GO 69531
// end ; end ;
69527: GO 69478
69529: POP
69530: POP
// end ;
69531: LD_VAR 0 3
69535: RET
// export function GetCargoBay ( units ) ; begin
69536: LD_INT 0
69538: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69539: LD_ADDR_VAR 0 2
69543: PUSH
69544: LD_VAR 0 1
69548: PPUSH
69549: LD_INT 2
69551: PUSH
69552: LD_INT 34
69554: PUSH
69555: LD_INT 12
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 34
69564: PUSH
69565: LD_INT 51
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 34
69574: PUSH
69575: LD_INT 32
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 34
69584: PUSH
69585: LD_INT 89
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: PPUSH
69599: CALL_OW 72
69603: ST_TO_ADDR
// end ;
69604: LD_VAR 0 2
69608: RET
// export function Negate ( value ) ; begin
69609: LD_INT 0
69611: PPUSH
// result := not value ;
69612: LD_ADDR_VAR 0 2
69616: PUSH
69617: LD_VAR 0 1
69621: NOT
69622: ST_TO_ADDR
// end ;
69623: LD_VAR 0 2
69627: RET
// export function Inc ( value ) ; begin
69628: LD_INT 0
69630: PPUSH
// result := value + 1 ;
69631: LD_ADDR_VAR 0 2
69635: PUSH
69636: LD_VAR 0 1
69640: PUSH
69641: LD_INT 1
69643: PLUS
69644: ST_TO_ADDR
// end ;
69645: LD_VAR 0 2
69649: RET
// export function Dec ( value ) ; begin
69650: LD_INT 0
69652: PPUSH
// result := value - 1 ;
69653: LD_ADDR_VAR 0 2
69657: PUSH
69658: LD_VAR 0 1
69662: PUSH
69663: LD_INT 1
69665: MINUS
69666: ST_TO_ADDR
// end ;
69667: LD_VAR 0 2
69671: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69672: LD_INT 0
69674: PPUSH
69675: PPUSH
69676: PPUSH
69677: PPUSH
69678: PPUSH
69679: PPUSH
69680: PPUSH
69681: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69682: LD_VAR 0 1
69686: PPUSH
69687: LD_VAR 0 2
69691: PPUSH
69692: CALL_OW 488
69696: NOT
69697: PUSH
69698: LD_VAR 0 3
69702: PPUSH
69703: LD_VAR 0 4
69707: PPUSH
69708: CALL_OW 488
69712: NOT
69713: OR
69714: IFFALSE 69727
// begin result := - 1 ;
69716: LD_ADDR_VAR 0 5
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: ST_TO_ADDR
// exit ;
69725: GO 69962
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69727: LD_ADDR_VAR 0 12
69731: PUSH
69732: LD_VAR 0 1
69736: PPUSH
69737: LD_VAR 0 2
69741: PPUSH
69742: LD_VAR 0 3
69746: PPUSH
69747: LD_VAR 0 4
69751: PPUSH
69752: CALL 68812 0 4
69756: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69757: LD_ADDR_VAR 0 11
69761: PUSH
69762: LD_VAR 0 1
69766: PPUSH
69767: LD_VAR 0 2
69771: PPUSH
69772: LD_VAR 0 12
69776: PUSH
69777: LD_INT 1
69779: ARRAY
69780: PPUSH
69781: LD_VAR 0 12
69785: PUSH
69786: LD_INT 2
69788: ARRAY
69789: PPUSH
69790: CALL_OW 298
69794: ST_TO_ADDR
// distance := 9999 ;
69795: LD_ADDR_VAR 0 10
69799: PUSH
69800: LD_INT 9999
69802: ST_TO_ADDR
// for i := 0 to 5 do
69803: LD_ADDR_VAR 0 6
69807: PUSH
69808: DOUBLE
69809: LD_INT 0
69811: DEC
69812: ST_TO_ADDR
69813: LD_INT 5
69815: PUSH
69816: FOR_TO
69817: IFFALSE 69960
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69819: LD_ADDR_VAR 0 7
69823: PUSH
69824: LD_VAR 0 1
69828: PPUSH
69829: LD_VAR 0 6
69833: PPUSH
69834: LD_VAR 0 11
69838: PPUSH
69839: CALL_OW 272
69843: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69844: LD_ADDR_VAR 0 8
69848: PUSH
69849: LD_VAR 0 2
69853: PPUSH
69854: LD_VAR 0 6
69858: PPUSH
69859: LD_VAR 0 11
69863: PPUSH
69864: CALL_OW 273
69868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69869: LD_VAR 0 7
69873: PPUSH
69874: LD_VAR 0 8
69878: PPUSH
69879: CALL_OW 488
69883: NOT
69884: IFFALSE 69888
// continue ;
69886: GO 69816
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69888: LD_ADDR_VAR 0 9
69892: PUSH
69893: LD_VAR 0 12
69897: PUSH
69898: LD_INT 1
69900: ARRAY
69901: PPUSH
69902: LD_VAR 0 12
69906: PUSH
69907: LD_INT 2
69909: ARRAY
69910: PPUSH
69911: LD_VAR 0 7
69915: PPUSH
69916: LD_VAR 0 8
69920: PPUSH
69921: CALL_OW 298
69925: ST_TO_ADDR
// if tmp < distance then
69926: LD_VAR 0 9
69930: PUSH
69931: LD_VAR 0 10
69935: LESS
69936: IFFALSE 69958
// begin result := i ;
69938: LD_ADDR_VAR 0 5
69942: PUSH
69943: LD_VAR 0 6
69947: ST_TO_ADDR
// distance := tmp ;
69948: LD_ADDR_VAR 0 10
69952: PUSH
69953: LD_VAR 0 9
69957: ST_TO_ADDR
// end ; end ;
69958: GO 69816
69960: POP
69961: POP
// end ;
69962: LD_VAR 0 5
69966: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69967: LD_INT 0
69969: PPUSH
69970: PPUSH
// if not driver or not IsInUnit ( driver ) then
69971: LD_VAR 0 1
69975: NOT
69976: PUSH
69977: LD_VAR 0 1
69981: PPUSH
69982: CALL_OW 310
69986: NOT
69987: OR
69988: IFFALSE 69992
// exit ;
69990: GO 70082
// vehicle := IsInUnit ( driver ) ;
69992: LD_ADDR_VAR 0 3
69996: PUSH
69997: LD_VAR 0 1
70001: PPUSH
70002: CALL_OW 310
70006: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70007: LD_VAR 0 1
70011: PPUSH
70012: LD_STRING \
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: LD_INT 0
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: PUSH
70042: LD_STRING E
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_VAR 0 3
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: LD_INT 0
70061: PUSH
70062: LD_INT 0
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PPUSH
70078: CALL_OW 446
// end ;
70082: LD_VAR 0 2
70086: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70087: LD_INT 0
70089: PPUSH
70090: PPUSH
// if not driver or not IsInUnit ( driver ) then
70091: LD_VAR 0 1
70095: NOT
70096: PUSH
70097: LD_VAR 0 1
70101: PPUSH
70102: CALL_OW 310
70106: NOT
70107: OR
70108: IFFALSE 70112
// exit ;
70110: GO 70202
// vehicle := IsInUnit ( driver ) ;
70112: LD_ADDR_VAR 0 3
70116: PUSH
70117: LD_VAR 0 1
70121: PPUSH
70122: CALL_OW 310
70126: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70127: LD_VAR 0 1
70131: PPUSH
70132: LD_STRING \
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: PUSH
70162: LD_STRING E
70164: PUSH
70165: LD_INT 0
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: LD_VAR 0 3
70175: PUSH
70176: LD_INT 0
70178: PUSH
70179: LD_INT 0
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PPUSH
70198: CALL_OW 447
// end ;
70202: LD_VAR 0 2
70206: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70207: LD_INT 0
70209: PPUSH
70210: PPUSH
70211: PPUSH
// tmp := [ ] ;
70212: LD_ADDR_VAR 0 5
70216: PUSH
70217: EMPTY
70218: ST_TO_ADDR
// for i in units do
70219: LD_ADDR_VAR 0 4
70223: PUSH
70224: LD_VAR 0 1
70228: PUSH
70229: FOR_IN
70230: IFFALSE 70268
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70232: LD_ADDR_VAR 0 5
70236: PUSH
70237: LD_VAR 0 5
70241: PPUSH
70242: LD_VAR 0 5
70246: PUSH
70247: LD_INT 1
70249: PLUS
70250: PPUSH
70251: LD_VAR 0 4
70255: PPUSH
70256: CALL_OW 256
70260: PPUSH
70261: CALL_OW 2
70265: ST_TO_ADDR
70266: GO 70229
70268: POP
70269: POP
// if not tmp then
70270: LD_VAR 0 5
70274: NOT
70275: IFFALSE 70279
// exit ;
70277: GO 70327
// if asc then
70279: LD_VAR 0 2
70283: IFFALSE 70307
// result := SortListByListAsc ( units , tmp ) else
70285: LD_ADDR_VAR 0 3
70289: PUSH
70290: LD_VAR 0 1
70294: PPUSH
70295: LD_VAR 0 5
70299: PPUSH
70300: CALL_OW 76
70304: ST_TO_ADDR
70305: GO 70327
// result := SortListByListDesc ( units , tmp ) ;
70307: LD_ADDR_VAR 0 3
70311: PUSH
70312: LD_VAR 0 1
70316: PPUSH
70317: LD_VAR 0 5
70321: PPUSH
70322: CALL_OW 77
70326: ST_TO_ADDR
// end ;
70327: LD_VAR 0 3
70331: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70332: LD_INT 0
70334: PPUSH
70335: PPUSH
// task := GetTaskList ( mech ) ;
70336: LD_ADDR_VAR 0 4
70340: PUSH
70341: LD_VAR 0 1
70345: PPUSH
70346: CALL_OW 437
70350: ST_TO_ADDR
// if not task then
70351: LD_VAR 0 4
70355: NOT
70356: IFFALSE 70360
// exit ;
70358: GO 70402
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70360: LD_ADDR_VAR 0 3
70364: PUSH
70365: LD_VAR 0 4
70369: PUSH
70370: LD_INT 1
70372: ARRAY
70373: PUSH
70374: LD_INT 1
70376: ARRAY
70377: PUSH
70378: LD_STRING r
70380: EQUAL
70381: PUSH
70382: LD_VAR 0 4
70386: PUSH
70387: LD_INT 1
70389: ARRAY
70390: PUSH
70391: LD_INT 4
70393: ARRAY
70394: PUSH
70395: LD_VAR 0 2
70399: EQUAL
70400: AND
70401: ST_TO_ADDR
// end ;
70402: LD_VAR 0 3
70406: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70407: LD_INT 0
70409: PPUSH
// SetDir ( unit , d ) ;
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_VAR 0 4
70419: PPUSH
70420: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70424: LD_VAR 0 1
70428: PPUSH
70429: LD_VAR 0 2
70433: PPUSH
70434: LD_VAR 0 3
70438: PPUSH
70439: LD_VAR 0 5
70443: PPUSH
70444: CALL_OW 48
// end ;
70448: LD_VAR 0 6
70452: RET
// export function ToNaturalNumber ( number ) ; begin
70453: LD_INT 0
70455: PPUSH
// result := number div 1 ;
70456: LD_ADDR_VAR 0 2
70460: PUSH
70461: LD_VAR 0 1
70465: PUSH
70466: LD_INT 1
70468: DIV
70469: ST_TO_ADDR
// if number < 0 then
70470: LD_VAR 0 1
70474: PUSH
70475: LD_INT 0
70477: LESS
70478: IFFALSE 70488
// result := 0 ;
70480: LD_ADDR_VAR 0 2
70484: PUSH
70485: LD_INT 0
70487: ST_TO_ADDR
// end ;
70488: LD_VAR 0 2
70492: RET
// export function SortByClass ( units , class ) ; var un ; begin
70493: LD_INT 0
70495: PPUSH
70496: PPUSH
// if not units or not class then
70497: LD_VAR 0 1
70501: NOT
70502: PUSH
70503: LD_VAR 0 2
70507: NOT
70508: OR
70509: IFFALSE 70513
// exit ;
70511: GO 70608
// result := [ ] ;
70513: LD_ADDR_VAR 0 3
70517: PUSH
70518: EMPTY
70519: ST_TO_ADDR
// for un in units do
70520: LD_ADDR_VAR 0 4
70524: PUSH
70525: LD_VAR 0 1
70529: PUSH
70530: FOR_IN
70531: IFFALSE 70606
// if GetClass ( un ) = class then
70533: LD_VAR 0 4
70537: PPUSH
70538: CALL_OW 257
70542: PUSH
70543: LD_VAR 0 2
70547: EQUAL
70548: IFFALSE 70575
// result := Insert ( result , 1 , un ) else
70550: LD_ADDR_VAR 0 3
70554: PUSH
70555: LD_VAR 0 3
70559: PPUSH
70560: LD_INT 1
70562: PPUSH
70563: LD_VAR 0 4
70567: PPUSH
70568: CALL_OW 2
70572: ST_TO_ADDR
70573: GO 70604
// result := Replace ( result , result + 1 , un ) ;
70575: LD_ADDR_VAR 0 3
70579: PUSH
70580: LD_VAR 0 3
70584: PPUSH
70585: LD_VAR 0 3
70589: PUSH
70590: LD_INT 1
70592: PLUS
70593: PPUSH
70594: LD_VAR 0 4
70598: PPUSH
70599: CALL_OW 1
70603: ST_TO_ADDR
70604: GO 70530
70606: POP
70607: POP
// end ;
70608: LD_VAR 0 3
70612: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70613: LD_INT 0
70615: PPUSH
70616: PPUSH
70617: PPUSH
70618: PPUSH
70619: PPUSH
70620: PPUSH
70621: PPUSH
// result := [ ] ;
70622: LD_ADDR_VAR 0 4
70626: PUSH
70627: EMPTY
70628: ST_TO_ADDR
// if x - r < 0 then
70629: LD_VAR 0 1
70633: PUSH
70634: LD_VAR 0 3
70638: MINUS
70639: PUSH
70640: LD_INT 0
70642: LESS
70643: IFFALSE 70655
// min_x := 0 else
70645: LD_ADDR_VAR 0 8
70649: PUSH
70650: LD_INT 0
70652: ST_TO_ADDR
70653: GO 70671
// min_x := x - r ;
70655: LD_ADDR_VAR 0 8
70659: PUSH
70660: LD_VAR 0 1
70664: PUSH
70665: LD_VAR 0 3
70669: MINUS
70670: ST_TO_ADDR
// if y - r < 0 then
70671: LD_VAR 0 2
70675: PUSH
70676: LD_VAR 0 3
70680: MINUS
70681: PUSH
70682: LD_INT 0
70684: LESS
70685: IFFALSE 70697
// min_y := 0 else
70687: LD_ADDR_VAR 0 7
70691: PUSH
70692: LD_INT 0
70694: ST_TO_ADDR
70695: GO 70713
// min_y := y - r ;
70697: LD_ADDR_VAR 0 7
70701: PUSH
70702: LD_VAR 0 2
70706: PUSH
70707: LD_VAR 0 3
70711: MINUS
70712: ST_TO_ADDR
// max_x := x + r ;
70713: LD_ADDR_VAR 0 9
70717: PUSH
70718: LD_VAR 0 1
70722: PUSH
70723: LD_VAR 0 3
70727: PLUS
70728: ST_TO_ADDR
// max_y := y + r ;
70729: LD_ADDR_VAR 0 10
70733: PUSH
70734: LD_VAR 0 2
70738: PUSH
70739: LD_VAR 0 3
70743: PLUS
70744: ST_TO_ADDR
// for _x = min_x to max_x do
70745: LD_ADDR_VAR 0 5
70749: PUSH
70750: DOUBLE
70751: LD_VAR 0 8
70755: DEC
70756: ST_TO_ADDR
70757: LD_VAR 0 9
70761: PUSH
70762: FOR_TO
70763: IFFALSE 70864
// for _y = min_y to max_y do
70765: LD_ADDR_VAR 0 6
70769: PUSH
70770: DOUBLE
70771: LD_VAR 0 7
70775: DEC
70776: ST_TO_ADDR
70777: LD_VAR 0 10
70781: PUSH
70782: FOR_TO
70783: IFFALSE 70860
// begin if not ValidHex ( _x , _y ) then
70785: LD_VAR 0 5
70789: PPUSH
70790: LD_VAR 0 6
70794: PPUSH
70795: CALL_OW 488
70799: NOT
70800: IFFALSE 70804
// continue ;
70802: GO 70782
// if GetResourceTypeXY ( _x , _y ) then
70804: LD_VAR 0 5
70808: PPUSH
70809: LD_VAR 0 6
70813: PPUSH
70814: CALL_OW 283
70818: IFFALSE 70858
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70820: LD_ADDR_VAR 0 4
70824: PUSH
70825: LD_VAR 0 4
70829: PPUSH
70830: LD_VAR 0 4
70834: PUSH
70835: LD_INT 1
70837: PLUS
70838: PPUSH
70839: LD_VAR 0 5
70843: PUSH
70844: LD_VAR 0 6
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PPUSH
70853: CALL_OW 1
70857: ST_TO_ADDR
// end ;
70858: GO 70782
70860: POP
70861: POP
70862: GO 70762
70864: POP
70865: POP
// end ;
70866: LD_VAR 0 4
70870: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70871: LD_INT 0
70873: PPUSH
70874: PPUSH
70875: PPUSH
70876: PPUSH
70877: PPUSH
70878: PPUSH
70879: PPUSH
70880: PPUSH
// if not units then
70881: LD_VAR 0 1
70885: NOT
70886: IFFALSE 70890
// exit ;
70888: GO 71414
// result := UnitFilter ( units , [ f_ok ] ) ;
70890: LD_ADDR_VAR 0 3
70894: PUSH
70895: LD_VAR 0 1
70899: PPUSH
70900: LD_INT 50
70902: PUSH
70903: EMPTY
70904: LIST
70905: PPUSH
70906: CALL_OW 72
70910: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70911: LD_ADDR_VAR 0 8
70915: PUSH
70916: LD_VAR 0 1
70920: PUSH
70921: LD_INT 1
70923: ARRAY
70924: PPUSH
70925: CALL_OW 255
70929: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70930: LD_ADDR_VAR 0 10
70934: PUSH
70935: LD_INT 29
70937: PUSH
70938: LD_INT 91
70940: PUSH
70941: LD_INT 49
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: LIST
70948: ST_TO_ADDR
// if not result then
70949: LD_VAR 0 3
70953: NOT
70954: IFFALSE 70958
// exit ;
70956: GO 71414
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70958: LD_ADDR_VAR 0 5
70962: PUSH
70963: LD_INT 81
70965: PUSH
70966: LD_VAR 0 8
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PPUSH
70975: CALL_OW 69
70979: ST_TO_ADDR
// for i in result do
70980: LD_ADDR_VAR 0 4
70984: PUSH
70985: LD_VAR 0 3
70989: PUSH
70990: FOR_IN
70991: IFFALSE 71412
// begin tag := GetTag ( i ) + 1 ;
70993: LD_ADDR_VAR 0 9
70997: PUSH
70998: LD_VAR 0 4
71002: PPUSH
71003: CALL_OW 110
71007: PUSH
71008: LD_INT 1
71010: PLUS
71011: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71012: LD_ADDR_VAR 0 7
71016: PUSH
71017: LD_VAR 0 4
71021: PPUSH
71022: CALL_OW 250
71026: PPUSH
71027: LD_VAR 0 4
71031: PPUSH
71032: CALL_OW 251
71036: PPUSH
71037: LD_INT 6
71039: PPUSH
71040: CALL 70613 0 3
71044: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71045: LD_VAR 0 4
71049: PPUSH
71050: CALL_OW 247
71054: PUSH
71055: LD_INT 2
71057: EQUAL
71058: PUSH
71059: LD_VAR 0 7
71063: AND
71064: PUSH
71065: LD_VAR 0 4
71069: PPUSH
71070: CALL_OW 264
71074: PUSH
71075: LD_VAR 0 10
71079: IN
71080: NOT
71081: AND
71082: IFFALSE 71121
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71084: LD_VAR 0 4
71088: PPUSH
71089: LD_VAR 0 7
71093: PUSH
71094: LD_INT 1
71096: ARRAY
71097: PUSH
71098: LD_INT 1
71100: ARRAY
71101: PPUSH
71102: LD_VAR 0 7
71106: PUSH
71107: LD_INT 1
71109: ARRAY
71110: PUSH
71111: LD_INT 2
71113: ARRAY
71114: PPUSH
71115: CALL_OW 116
71119: GO 71410
// if path > tag then
71121: LD_VAR 0 2
71125: PUSH
71126: LD_VAR 0 9
71130: GREATER
71131: IFFALSE 71339
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71133: LD_ADDR_VAR 0 6
71137: PUSH
71138: LD_VAR 0 5
71142: PPUSH
71143: LD_INT 91
71145: PUSH
71146: LD_VAR 0 4
71150: PUSH
71151: LD_INT 8
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: PPUSH
71159: CALL_OW 72
71163: ST_TO_ADDR
// if nearEnemy then
71164: LD_VAR 0 6
71168: IFFALSE 71237
// begin if GetWeapon ( i ) = ru_time_lapser then
71170: LD_VAR 0 4
71174: PPUSH
71175: CALL_OW 264
71179: PUSH
71180: LD_INT 49
71182: EQUAL
71183: IFFALSE 71211
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71185: LD_VAR 0 4
71189: PPUSH
71190: LD_VAR 0 6
71194: PPUSH
71195: LD_VAR 0 4
71199: PPUSH
71200: CALL_OW 74
71204: PPUSH
71205: CALL_OW 112
71209: GO 71235
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71211: LD_VAR 0 4
71215: PPUSH
71216: LD_VAR 0 6
71220: PPUSH
71221: LD_VAR 0 4
71225: PPUSH
71226: CALL_OW 74
71230: PPUSH
71231: CALL_OW 115
// end else
71235: GO 71337
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71237: LD_VAR 0 4
71241: PPUSH
71242: LD_VAR 0 2
71246: PUSH
71247: LD_VAR 0 9
71251: ARRAY
71252: PUSH
71253: LD_INT 1
71255: ARRAY
71256: PPUSH
71257: LD_VAR 0 2
71261: PUSH
71262: LD_VAR 0 9
71266: ARRAY
71267: PUSH
71268: LD_INT 2
71270: ARRAY
71271: PPUSH
71272: CALL_OW 297
71276: PUSH
71277: LD_INT 6
71279: GREATER
71280: IFFALSE 71323
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71282: LD_VAR 0 4
71286: PPUSH
71287: LD_VAR 0 2
71291: PUSH
71292: LD_VAR 0 9
71296: ARRAY
71297: PUSH
71298: LD_INT 1
71300: ARRAY
71301: PPUSH
71302: LD_VAR 0 2
71306: PUSH
71307: LD_VAR 0 9
71311: ARRAY
71312: PUSH
71313: LD_INT 2
71315: ARRAY
71316: PPUSH
71317: CALL_OW 114
71321: GO 71337
// SetTag ( i , tag ) ;
71323: LD_VAR 0 4
71327: PPUSH
71328: LD_VAR 0 9
71332: PPUSH
71333: CALL_OW 109
// end else
71337: GO 71410
// if enemy then
71339: LD_VAR 0 5
71343: IFFALSE 71410
// begin if GetWeapon ( i ) = ru_time_lapser then
71345: LD_VAR 0 4
71349: PPUSH
71350: CALL_OW 264
71354: PUSH
71355: LD_INT 49
71357: EQUAL
71358: IFFALSE 71386
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71360: LD_VAR 0 4
71364: PPUSH
71365: LD_VAR 0 5
71369: PPUSH
71370: LD_VAR 0 4
71374: PPUSH
71375: CALL_OW 74
71379: PPUSH
71380: CALL_OW 112
71384: GO 71410
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71386: LD_VAR 0 4
71390: PPUSH
71391: LD_VAR 0 5
71395: PPUSH
71396: LD_VAR 0 4
71400: PPUSH
71401: CALL_OW 74
71405: PPUSH
71406: CALL_OW 115
// end ; end ;
71410: GO 70990
71412: POP
71413: POP
// end ;
71414: LD_VAR 0 3
71418: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71419: LD_INT 0
71421: PPUSH
71422: PPUSH
71423: PPUSH
// if not unit or IsInUnit ( unit ) then
71424: LD_VAR 0 1
71428: NOT
71429: PUSH
71430: LD_VAR 0 1
71434: PPUSH
71435: CALL_OW 310
71439: OR
71440: IFFALSE 71444
// exit ;
71442: GO 71535
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71444: LD_ADDR_VAR 0 4
71448: PUSH
71449: LD_VAR 0 1
71453: PPUSH
71454: CALL_OW 250
71458: PPUSH
71459: LD_VAR 0 2
71463: PPUSH
71464: LD_INT 1
71466: PPUSH
71467: CALL_OW 272
71471: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71472: LD_ADDR_VAR 0 5
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: CALL_OW 251
71486: PPUSH
71487: LD_VAR 0 2
71491: PPUSH
71492: LD_INT 1
71494: PPUSH
71495: CALL_OW 273
71499: ST_TO_ADDR
// if ValidHex ( x , y ) then
71500: LD_VAR 0 4
71504: PPUSH
71505: LD_VAR 0 5
71509: PPUSH
71510: CALL_OW 488
71514: IFFALSE 71535
// ComTurnXY ( unit , x , y ) ;
71516: LD_VAR 0 1
71520: PPUSH
71521: LD_VAR 0 4
71525: PPUSH
71526: LD_VAR 0 5
71530: PPUSH
71531: CALL_OW 118
// end ;
71535: LD_VAR 0 3
71539: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
// result := false ;
71544: LD_ADDR_VAR 0 3
71548: PUSH
71549: LD_INT 0
71551: ST_TO_ADDR
// if not units then
71552: LD_VAR 0 2
71556: NOT
71557: IFFALSE 71561
// exit ;
71559: GO 71606
// for i in units do
71561: LD_ADDR_VAR 0 4
71565: PUSH
71566: LD_VAR 0 2
71570: PUSH
71571: FOR_IN
71572: IFFALSE 71604
// if See ( side , i ) then
71574: LD_VAR 0 1
71578: PPUSH
71579: LD_VAR 0 4
71583: PPUSH
71584: CALL_OW 292
71588: IFFALSE 71602
// begin result := true ;
71590: LD_ADDR_VAR 0 3
71594: PUSH
71595: LD_INT 1
71597: ST_TO_ADDR
// exit ;
71598: POP
71599: POP
71600: GO 71606
// end ;
71602: GO 71571
71604: POP
71605: POP
// end ;
71606: LD_VAR 0 3
71610: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71611: LD_INT 0
71613: PPUSH
71614: PPUSH
71615: PPUSH
71616: PPUSH
// if not unit or not points then
71617: LD_VAR 0 1
71621: NOT
71622: PUSH
71623: LD_VAR 0 2
71627: NOT
71628: OR
71629: IFFALSE 71633
// exit ;
71631: GO 71723
// dist := 99999 ;
71633: LD_ADDR_VAR 0 5
71637: PUSH
71638: LD_INT 99999
71640: ST_TO_ADDR
// for i in points do
71641: LD_ADDR_VAR 0 4
71645: PUSH
71646: LD_VAR 0 2
71650: PUSH
71651: FOR_IN
71652: IFFALSE 71721
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71654: LD_ADDR_VAR 0 6
71658: PUSH
71659: LD_VAR 0 1
71663: PPUSH
71664: LD_VAR 0 4
71668: PUSH
71669: LD_INT 1
71671: ARRAY
71672: PPUSH
71673: LD_VAR 0 4
71677: PUSH
71678: LD_INT 2
71680: ARRAY
71681: PPUSH
71682: CALL_OW 297
71686: ST_TO_ADDR
// if tmpDist < dist then
71687: LD_VAR 0 6
71691: PUSH
71692: LD_VAR 0 5
71696: LESS
71697: IFFALSE 71719
// begin result := i ;
71699: LD_ADDR_VAR 0 3
71703: PUSH
71704: LD_VAR 0 4
71708: ST_TO_ADDR
// dist := tmpDist ;
71709: LD_ADDR_VAR 0 5
71713: PUSH
71714: LD_VAR 0 6
71718: ST_TO_ADDR
// end ; end ;
71719: GO 71651
71721: POP
71722: POP
// end ;
71723: LD_VAR 0 3
71727: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71728: LD_INT 0
71730: PPUSH
// uc_side := side ;
71731: LD_ADDR_OWVAR 20
71735: PUSH
71736: LD_VAR 0 1
71740: ST_TO_ADDR
// uc_nation := 3 ;
71741: LD_ADDR_OWVAR 21
71745: PUSH
71746: LD_INT 3
71748: ST_TO_ADDR
// vc_chassis := 25 ;
71749: LD_ADDR_OWVAR 37
71753: PUSH
71754: LD_INT 25
71756: ST_TO_ADDR
// vc_engine := engine_siberite ;
71757: LD_ADDR_OWVAR 39
71761: PUSH
71762: LD_INT 3
71764: ST_TO_ADDR
// vc_control := control_computer ;
71765: LD_ADDR_OWVAR 38
71769: PUSH
71770: LD_INT 3
71772: ST_TO_ADDR
// vc_weapon := 59 ;
71773: LD_ADDR_OWVAR 40
71777: PUSH
71778: LD_INT 59
71780: ST_TO_ADDR
// result := CreateVehicle ;
71781: LD_ADDR_VAR 0 5
71785: PUSH
71786: CALL_OW 45
71790: ST_TO_ADDR
// SetDir ( result , d ) ;
71791: LD_VAR 0 5
71795: PPUSH
71796: LD_VAR 0 4
71800: PPUSH
71801: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71805: LD_VAR 0 5
71809: PPUSH
71810: LD_VAR 0 2
71814: PPUSH
71815: LD_VAR 0 3
71819: PPUSH
71820: LD_INT 0
71822: PPUSH
71823: CALL_OW 48
// end ;
71827: LD_VAR 0 5
71831: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71832: LD_INT 0
71834: PPUSH
71835: PPUSH
71836: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71837: LD_ADDR_VAR 0 2
71841: PUSH
71842: LD_INT 0
71844: PUSH
71845: LD_INT 0
71847: PUSH
71848: LD_INT 0
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71860: LD_VAR 0 1
71864: NOT
71865: PUSH
71866: LD_VAR 0 1
71870: PPUSH
71871: CALL_OW 264
71875: PUSH
71876: LD_INT 12
71878: PUSH
71879: LD_INT 51
71881: PUSH
71882: LD_INT 32
71884: PUSH
71885: LD_INT 89
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: IN
71894: NOT
71895: OR
71896: IFFALSE 71900
// exit ;
71898: GO 71998
// for i := 1 to 3 do
71900: LD_ADDR_VAR 0 3
71904: PUSH
71905: DOUBLE
71906: LD_INT 1
71908: DEC
71909: ST_TO_ADDR
71910: LD_INT 3
71912: PUSH
71913: FOR_TO
71914: IFFALSE 71996
// begin tmp := GetCargo ( cargo , i ) ;
71916: LD_ADDR_VAR 0 4
71920: PUSH
71921: LD_VAR 0 1
71925: PPUSH
71926: LD_VAR 0 3
71930: PPUSH
71931: CALL_OW 289
71935: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71936: LD_ADDR_VAR 0 2
71940: PUSH
71941: LD_VAR 0 2
71945: PPUSH
71946: LD_VAR 0 3
71950: PPUSH
71951: LD_VAR 0 4
71955: PPUSH
71956: CALL_OW 1
71960: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71961: LD_ADDR_VAR 0 2
71965: PUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: LD_INT 4
71973: PPUSH
71974: LD_VAR 0 2
71978: PUSH
71979: LD_INT 4
71981: ARRAY
71982: PUSH
71983: LD_VAR 0 4
71987: PLUS
71988: PPUSH
71989: CALL_OW 1
71993: ST_TO_ADDR
// end ;
71994: GO 71913
71996: POP
71997: POP
// end ;
71998: LD_VAR 0 2
72002: RET
// export function Length ( array ) ; begin
72003: LD_INT 0
72005: PPUSH
// result := array + 0 ;
72006: LD_ADDR_VAR 0 2
72010: PUSH
72011: LD_VAR 0 1
72015: PUSH
72016: LD_INT 0
72018: PLUS
72019: ST_TO_ADDR
// end ;
72020: LD_VAR 0 2
72024: RET
// export function PrepareArray ( array ) ; begin
72025: LD_INT 0
72027: PPUSH
// result := array diff 0 ;
72028: LD_ADDR_VAR 0 2
72032: PUSH
72033: LD_VAR 0 1
72037: PUSH
72038: LD_INT 0
72040: DIFF
72041: ST_TO_ADDR
// if not result [ 1 ] then
72042: LD_VAR 0 2
72046: PUSH
72047: LD_INT 1
72049: ARRAY
72050: NOT
72051: IFFALSE 72071
// result := Delete ( result , 1 ) ;
72053: LD_ADDR_VAR 0 2
72057: PUSH
72058: LD_VAR 0 2
72062: PPUSH
72063: LD_INT 1
72065: PPUSH
72066: CALL_OW 3
72070: ST_TO_ADDR
// end ;
72071: LD_VAR 0 2
72075: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72076: LD_INT 0
72078: PPUSH
72079: PPUSH
72080: PPUSH
72081: PPUSH
// sibRocketRange := 25 ;
72082: LD_ADDR_VAR 0 6
72086: PUSH
72087: LD_INT 25
72089: ST_TO_ADDR
// result := false ;
72090: LD_ADDR_VAR 0 4
72094: PUSH
72095: LD_INT 0
72097: ST_TO_ADDR
// for i := 0 to 5 do
72098: LD_ADDR_VAR 0 5
72102: PUSH
72103: DOUBLE
72104: LD_INT 0
72106: DEC
72107: ST_TO_ADDR
72108: LD_INT 5
72110: PUSH
72111: FOR_TO
72112: IFFALSE 72179
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72114: LD_VAR 0 1
72118: PPUSH
72119: LD_VAR 0 5
72123: PPUSH
72124: LD_VAR 0 6
72128: PPUSH
72129: CALL_OW 272
72133: PPUSH
72134: LD_VAR 0 2
72138: PPUSH
72139: LD_VAR 0 5
72143: PPUSH
72144: LD_VAR 0 6
72148: PPUSH
72149: CALL_OW 273
72153: PPUSH
72154: LD_VAR 0 3
72158: PPUSH
72159: CALL_OW 309
72163: IFFALSE 72177
// begin result := true ;
72165: LD_ADDR_VAR 0 4
72169: PUSH
72170: LD_INT 1
72172: ST_TO_ADDR
// exit ;
72173: POP
72174: POP
72175: GO 72181
// end ;
72177: GO 72111
72179: POP
72180: POP
// end ;
72181: LD_VAR 0 4
72185: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72186: LD_INT 0
72188: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72189: LD_VAR 0 1
72193: PPUSH
72194: LD_VAR 0 2
72198: PPUSH
72199: LD_INT 0
72201: PPUSH
72202: LD_INT 0
72204: PPUSH
72205: LD_INT 1
72207: PPUSH
72208: LD_INT 0
72210: PPUSH
72211: CALL_OW 587
// end ; end_of_file
72215: LD_VAR 0 3
72219: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72220: LD_VAR 0 1
72224: PUSH
72225: LD_INT 200
72227: DOUBLE
72228: GREATEREQUAL
72229: IFFALSE 72237
72231: LD_INT 299
72233: DOUBLE
72234: LESSEQUAL
72235: IFTRUE 72239
72237: GO 72271
72239: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72240: LD_VAR 0 1
72244: PPUSH
72245: LD_VAR 0 2
72249: PPUSH
72250: LD_VAR 0 3
72254: PPUSH
72255: LD_VAR 0 4
72259: PPUSH
72260: LD_VAR 0 5
72264: PPUSH
72265: CALL 11087 0 5
72269: GO 72348
72271: LD_INT 300
72273: DOUBLE
72274: GREATEREQUAL
72275: IFFALSE 72283
72277: LD_INT 399
72279: DOUBLE
72280: LESSEQUAL
72281: IFTRUE 72285
72283: GO 72347
72285: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72286: LD_VAR 0 1
72290: PPUSH
72291: LD_VAR 0 2
72295: PPUSH
72296: LD_VAR 0 3
72300: PPUSH
72301: LD_VAR 0 4
72305: PPUSH
72306: LD_VAR 0 5
72310: PPUSH
72311: LD_VAR 0 6
72315: PPUSH
72316: LD_VAR 0 7
72320: PPUSH
72321: LD_VAR 0 8
72325: PPUSH
72326: LD_VAR 0 9
72330: PPUSH
72331: LD_VAR 0 10
72335: PPUSH
72336: LD_VAR 0 11
72340: PPUSH
72341: CALL 27508 0 11
72345: GO 72348
72347: POP
// end ;
72348: PPOPN 11
72350: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72351: LD_VAR 0 1
72355: PPUSH
72356: LD_VAR 0 2
72360: PPUSH
72361: LD_VAR 0 3
72365: PPUSH
72366: LD_VAR 0 4
72370: PPUSH
72371: LD_VAR 0 5
72375: PPUSH
72376: CALL 10823 0 5
// end ; end_of_file
72380: PPOPN 5
72382: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72383: LD_VAR 0 1
72387: PPUSH
72388: LD_VAR 0 2
72392: PPUSH
72393: LD_VAR 0 3
72397: PPUSH
72398: LD_VAR 0 4
72402: PPUSH
72403: LD_VAR 0 5
72407: PPUSH
72408: LD_VAR 0 6
72412: PPUSH
72413: CALL 15128 0 6
// end ;
72417: PPOPN 6
72419: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72420: LD_INT 0
72422: PPUSH
// begin if not units then
72423: LD_VAR 0 1
72427: NOT
72428: IFFALSE 72432
// exit ;
72430: GO 72432
// end ;
72432: PPOPN 7
72434: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72435: CALL 15022 0 0
// end ;
72439: PPOPN 1
72441: END
